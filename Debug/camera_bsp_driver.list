
camera_bsp_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000142f4  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00012668  080145c0  080145c0  000245c0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08026c28  08026c28  00036c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08026c30  08026c30  00036c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08026c34  08026c34  00036c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000026b8  24000000  08026c38  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0007b498  240026c0  080292f0  000426c0  2**5
                  ALLOC
  8 ._user_heap_stack 00001000  20000000  20000000  00050000  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000426b8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002c5f5  00000000  00000000  000426e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005d2a  00000000  00000000  0006ecdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001bc0  00000000  00000000  00074a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001920  00000000  00000000  000765c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003be50  00000000  00000000  00077ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002de2f  00000000  00000000  000b3d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015fc93  00000000  00000000  000e1b67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002417fa  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007904  00000000  00000000  0024184c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .stab         00000024  00000000  00000000  00249150  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      0000003f  00000000  00000000  00249174  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240026c0 	.word	0x240026c0
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0801458c 	.word	0x0801458c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240026c4 	.word	0x240026c4
 80002ec:	0801458c 	.word	0x0801458c

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000698:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <MX_CRC_Init+0x3c>)
 800069a:	4a0e      	ldr	r2, [pc, #56]	; (80006d4 <MX_CRC_Init+0x40>)
 800069c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800069e:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_CRC_Init+0x3c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80006a4:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <MX_CRC_Init+0x3c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_CRC_Init+0x3c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80006b0:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <MX_CRC_Init+0x3c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_CRC_Init+0x3c>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006bc:	4804      	ldr	r0, [pc, #16]	; (80006d0 <MX_CRC_Init+0x3c>)
 80006be:	f004 f9e5 	bl	8004a8c <HAL_CRC_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80006c8:	f001 f9ba 	bl	8001a40 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	240026dc 	.word	0x240026dc
 80006d4:	40023000 	.word	0x40023000

080006d8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a0b      	ldr	r2, [pc, #44]	; (8000714 <HAL_CRC_MspInit+0x3c>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d10e      	bne.n	8000708 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <HAL_CRC_MspInit+0x40>)
 80006ec:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80006f0:	4a09      	ldr	r2, [pc, #36]	; (8000718 <HAL_CRC_MspInit+0x40>)
 80006f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006f6:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80006fa:	4b07      	ldr	r3, [pc, #28]	; (8000718 <HAL_CRC_MspInit+0x40>)
 80006fc:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000700:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000708:	bf00      	nop
 800070a:	3714      	adds	r7, #20
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	40023000 	.word	0x40023000
 8000718:	58024400 	.word	0x58024400

0800071c <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */
//
  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000720:	4b16      	ldr	r3, [pc, #88]	; (800077c <MX_DCMI_Init+0x60>)
 8000722:	4a17      	ldr	r2, [pc, #92]	; (8000780 <MX_DCMI_Init+0x64>)
 8000724:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000726:	4b15      	ldr	r3, [pc, #84]	; (800077c <MX_DCMI_Init+0x60>)
 8000728:	2200      	movs	r2, #0
 800072a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 800072c:	4b13      	ldr	r3, [pc, #76]	; (800077c <MX_DCMI_Init+0x60>)
 800072e:	2220      	movs	r2, #32
 8000730:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000732:	4b12      	ldr	r3, [pc, #72]	; (800077c <MX_DCMI_Init+0x60>)
 8000734:	2280      	movs	r2, #128	; 0x80
 8000736:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 8000738:	4b10      	ldr	r3, [pc, #64]	; (800077c <MX_DCMI_Init+0x60>)
 800073a:	2240      	movs	r2, #64	; 0x40
 800073c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800073e:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_DCMI_Init+0x60>)
 8000740:	2200      	movs	r2, #0
 8000742:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000744:	4b0d      	ldr	r3, [pc, #52]	; (800077c <MX_DCMI_Init+0x60>)
 8000746:	2200      	movs	r2, #0
 8000748:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_DCMI_Init+0x60>)
 800074c:	2200      	movs	r2, #0
 800074e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <MX_DCMI_Init+0x60>)
 8000752:	2200      	movs	r2, #0
 8000754:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_DCMI_Init+0x60>)
 8000758:	2200      	movs	r2, #0
 800075a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800075c:	4b07      	ldr	r3, [pc, #28]	; (800077c <MX_DCMI_Init+0x60>)
 800075e:	2200      	movs	r2, #0
 8000760:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_DCMI_Init+0x60>)
 8000764:	2200      	movs	r2, #0
 8000766:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <MX_DCMI_Init+0x60>)
 800076a:	f004 fa81 	bl	8004c70 <HAL_DCMI_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000774:	f001 f964 	bl	8001a40 <Error_Handler>
//  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
//  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
//  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
  /* USER CODE END DCMI_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	24002700 	.word	0x24002700
 8000780:	48020000 	.word	0x48020000

08000784 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08e      	sub	sp, #56	; 0x38
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a76      	ldr	r2, [pc, #472]	; (800097c <HAL_DCMI_MspInit+0x1f8>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	f040 80e5 	bne.w	8000972 <HAL_DCMI_MspInit+0x1ee>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */
//
  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80007a8:	4b75      	ldr	r3, [pc, #468]	; (8000980 <HAL_DCMI_MspInit+0x1fc>)
 80007aa:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80007ae:	4a74      	ldr	r2, [pc, #464]	; (8000980 <HAL_DCMI_MspInit+0x1fc>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 80007b8:	4b71      	ldr	r3, [pc, #452]	; (8000980 <HAL_DCMI_MspInit+0x1fc>)
 80007ba:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	623b      	str	r3, [r7, #32]
 80007c4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c6:	4b6e      	ldr	r3, [pc, #440]	; (8000980 <HAL_DCMI_MspInit+0x1fc>)
 80007c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007cc:	4a6c      	ldr	r2, [pc, #432]	; (8000980 <HAL_DCMI_MspInit+0x1fc>)
 80007ce:	f043 0302 	orr.w	r3, r3, #2
 80007d2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007d6:	4b6a      	ldr	r3, [pc, #424]	; (8000980 <HAL_DCMI_MspInit+0x1fc>)
 80007d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007dc:	f003 0302 	and.w	r3, r3, #2
 80007e0:	61fb      	str	r3, [r7, #28]
 80007e2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80007e4:	4b66      	ldr	r3, [pc, #408]	; (8000980 <HAL_DCMI_MspInit+0x1fc>)
 80007e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007ea:	4a65      	ldr	r2, [pc, #404]	; (8000980 <HAL_DCMI_MspInit+0x1fc>)
 80007ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007f4:	4b62      	ldr	r3, [pc, #392]	; (8000980 <HAL_DCMI_MspInit+0x1fc>)
 80007f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007fe:	61bb      	str	r3, [r7, #24]
 8000800:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000802:	4b5f      	ldr	r3, [pc, #380]	; (8000980 <HAL_DCMI_MspInit+0x1fc>)
 8000804:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000808:	4a5d      	ldr	r2, [pc, #372]	; (8000980 <HAL_DCMI_MspInit+0x1fc>)
 800080a:	f043 0308 	orr.w	r3, r3, #8
 800080e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000812:	4b5b      	ldr	r3, [pc, #364]	; (8000980 <HAL_DCMI_MspInit+0x1fc>)
 8000814:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000818:	f003 0308 	and.w	r3, r3, #8
 800081c:	617b      	str	r3, [r7, #20]
 800081e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000820:	4b57      	ldr	r3, [pc, #348]	; (8000980 <HAL_DCMI_MspInit+0x1fc>)
 8000822:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000826:	4a56      	ldr	r2, [pc, #344]	; (8000980 <HAL_DCMI_MspInit+0x1fc>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000830:	4b53      	ldr	r3, [pc, #332]	; (8000980 <HAL_DCMI_MspInit+0x1fc>)
 8000832:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	4b50      	ldr	r3, [pc, #320]	; (8000980 <HAL_DCMI_MspInit+0x1fc>)
 8000840:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000844:	4a4e      	ldr	r2, [pc, #312]	; (8000980 <HAL_DCMI_MspInit+0x1fc>)
 8000846:	f043 0301 	orr.w	r3, r3, #1
 800084a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800084e:	4b4c      	ldr	r3, [pc, #304]	; (8000980 <HAL_DCMI_MspInit+0x1fc>)
 8000850:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000854:	f003 0301 	and.w	r3, r3, #1
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	68fb      	ldr	r3, [r7, #12]
    PC7     ------> DCMI_D1
    PC6     ------> DCMI_D0
    PA4     ------> DCMI_HSYNC
    PA6     ------> DCMI_PIXCLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_7;
 800085c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	2302      	movs	r3, #2
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800086e:	230d      	movs	r3, #13
 8000870:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000876:	4619      	mov	r1, r3
 8000878:	4842      	ldr	r0, [pc, #264]	; (8000984 <HAL_DCMI_MspInit+0x200>)
 800087a:	f008 fc33 	bl	80090e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800087e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	2300      	movs	r3, #0
 800088e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000890:	230d      	movs	r3, #13
 8000892:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000898:	4619      	mov	r1, r3
 800089a:	483b      	ldr	r0, [pc, #236]	; (8000988 <HAL_DCMI_MspInit+0x204>)
 800089c:	f008 fc22 	bl	80090e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008a0:	2308      	movs	r3, #8
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008b0:	230d      	movs	r3, #13
 80008b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b8:	4619      	mov	r1, r3
 80008ba:	4834      	ldr	r0, [pc, #208]	; (800098c <HAL_DCMI_MspInit+0x208>)
 80008bc:	f008 fc12 	bl	80090e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6;
 80008c0:	f44f 632c 	mov.w	r3, #2752	; 0xac0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008d2:	230d      	movs	r3, #13
 80008d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008da:	4619      	mov	r1, r3
 80008dc:	482c      	ldr	r0, [pc, #176]	; (8000990 <HAL_DCMI_MspInit+0x20c>)
 80008de:	f008 fc01 	bl	80090e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80008e2:	2350      	movs	r3, #80	; 0x50
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008f2:	230d      	movs	r3, #13
 80008f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fa:	4619      	mov	r1, r3
 80008fc:	4825      	ldr	r0, [pc, #148]	; (8000994 <HAL_DCMI_MspInit+0x210>)
 80008fe:	f008 fbf1 	bl	80090e4 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8000902:	4b25      	ldr	r3, [pc, #148]	; (8000998 <HAL_DCMI_MspInit+0x214>)
 8000904:	4a25      	ldr	r2, [pc, #148]	; (800099c <HAL_DCMI_MspInit+0x218>)
 8000906:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI_PSSI;
 8000908:	4b23      	ldr	r3, [pc, #140]	; (8000998 <HAL_DCMI_MspInit+0x214>)
 800090a:	224b      	movs	r2, #75	; 0x4b
 800090c:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800090e:	4b22      	ldr	r3, [pc, #136]	; (8000998 <HAL_DCMI_MspInit+0x214>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8000914:	4b20      	ldr	r3, [pc, #128]	; (8000998 <HAL_DCMI_MspInit+0x214>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 800091a:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <HAL_DCMI_MspInit+0x214>)
 800091c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000920:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000922:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <HAL_DCMI_MspInit+0x214>)
 8000924:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000928:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800092a:	4b1b      	ldr	r3, [pc, #108]	; (8000998 <HAL_DCMI_MspInit+0x214>)
 800092c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000930:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8000932:	4b19      	ldr	r3, [pc, #100]	; (8000998 <HAL_DCMI_MspInit+0x214>)
 8000934:	2200      	movs	r2, #0
 8000936:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 8000938:	4b17      	ldr	r3, [pc, #92]	; (8000998 <HAL_DCMI_MspInit+0x214>)
 800093a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800093e:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <HAL_DCMI_MspInit+0x214>)
 8000942:	2200      	movs	r2, #0
 8000944:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8000946:	4814      	ldr	r0, [pc, #80]	; (8000998 <HAL_DCMI_MspInit+0x214>)
 8000948:	f004 fc60 	bl	800520c <HAL_DMA_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <HAL_DCMI_MspInit+0x1d2>
    {
      Error_Handler();
 8000952:	f001 f875 	bl	8001a40 <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4a0f      	ldr	r2, [pc, #60]	; (8000998 <HAL_DCMI_MspInit+0x214>)
 800095a:	649a      	str	r2, [r3, #72]	; 0x48
 800095c:	4a0e      	ldr	r2, [pc, #56]	; (8000998 <HAL_DCMI_MspInit+0x214>)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_PSSI_IRQn, 0, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	2100      	movs	r1, #0
 8000966:	204e      	movs	r0, #78	; 0x4e
 8000968:	f004 f85b 	bl	8004a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_PSSI_IRQn);
 800096c:	204e      	movs	r0, #78	; 0x4e
 800096e:	f004 f872 	bl	8004a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */
//
  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8000972:	bf00      	nop
 8000974:	3738      	adds	r7, #56	; 0x38
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	48020000 	.word	0x48020000
 8000980:	58024400 	.word	0x58024400
 8000984:	58020400 	.word	0x58020400
 8000988:	58021800 	.word	0x58021800
 800098c:	58020c00 	.word	0x58020c00
 8000990:	58020800 	.word	0x58020800
 8000994:	58020000 	.word	0x58020000
 8000998:	24002750 	.word	0x24002750
 800099c:	40020428 	.word	0x40020428

080009a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009a6:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <MX_DMA_Init+0x3c>)
 80009a8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80009ac:	4a0b      	ldr	r2, [pc, #44]	; (80009dc <MX_DMA_Init+0x3c>)
 80009ae:	f043 0302 	orr.w	r3, r3, #2
 80009b2:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <MX_DMA_Init+0x3c>)
 80009b8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80009bc:	f003 0302 	and.w	r3, r3, #2
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2100      	movs	r1, #0
 80009c8:	2039      	movs	r0, #57	; 0x39
 80009ca:	f004 f82a 	bl	8004a22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80009ce:	2039      	movs	r0, #57	; 0x39
 80009d0:	f004 f841 	bl	8004a56 <HAL_NVIC_EnableIRQ>

}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	58024400 	.word	0x58024400

080009e0 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80009e4:	4b1a      	ldr	r3, [pc, #104]	; (8000a50 <MX_DMA2D_Init+0x70>)
 80009e6:	4a1b      	ldr	r2, [pc, #108]	; (8000a54 <MX_DMA2D_Init+0x74>)
 80009e8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M_PFC;
 80009ea:	4b19      	ldr	r3, [pc, #100]	; (8000a50 <MX_DMA2D_Init+0x70>)
 80009ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009f0:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 80009f2:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <MX_DMA2D_Init+0x70>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80009f8:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <MX_DMA2D_Init+0x70>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80009fe:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <MX_DMA2D_Init+0x70>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <MX_DMA2D_Init+0x70>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <MX_DMA2D_Init+0x70>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <MX_DMA2D_Init+0x70>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <MX_DMA2D_Init+0x70>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <MX_DMA2D_Init+0x70>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <MX_DMA2D_Init+0x70>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a28:	4809      	ldr	r0, [pc, #36]	; (8000a50 <MX_DMA2D_Init+0x70>)
 8000a2a:	f007 facf 	bl	8007fcc <HAL_DMA2D_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_DMA2D_Init+0x58>
  {
    Error_Handler();
 8000a34:	f001 f804 	bl	8001a40 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000a38:	2101      	movs	r1, #1
 8000a3a:	4805      	ldr	r0, [pc, #20]	; (8000a50 <MX_DMA2D_Init+0x70>)
 8000a3c:	f007 fd4e 	bl	80084dc <HAL_DMA2D_ConfigLayer>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_DMA2D_Init+0x6a>
  {
    Error_Handler();
 8000a46:	f000 fffb 	bl	8001a40 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	240027c8 	.word	0x240027c8
 8000a54:	52001000 	.word	0x52001000

08000a58 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <HAL_DMA2D_MspInit+0x48>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d116      	bne.n	8000a98 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <HAL_DMA2D_MspInit+0x4c>)
 8000a6c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000a70:	4a0c      	ldr	r2, [pc, #48]	; (8000aa4 <HAL_DMA2D_MspInit+0x4c>)
 8000a72:	f043 0310 	orr.w	r3, r3, #16
 8000a76:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <HAL_DMA2D_MspInit+0x4c>)
 8000a7c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000a80:	f003 0310 	and.w	r3, r3, #16
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	205a      	movs	r0, #90	; 0x5a
 8000a8e:	f003 ffc8 	bl	8004a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000a92:	205a      	movs	r0, #90	; 0x5a
 8000a94:	f003 ffdf 	bl	8004a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000a98:	bf00      	nop
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	52001000 	.word	0x52001000
 8000aa4:	58024400 	.word	0x58024400

08000aa8 <DMA2D_Convert>:
  }
}

/* USER CODE BEGIN 1 */
void DMA2D_Convert(uint8_t* source, uint32_t* destination)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af02      	add	r7, sp, #8
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  status = HAL_DMA2D_Start(&hdma2d, (uint32_t)source,
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	683a      	ldr	r2, [r7, #0]
 8000ab6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000ac0:	480c      	ldr	r0, [pc, #48]	; (8000af4 <DMA2D_Convert+0x4c>)
 8000ac2:	f007 fae7 	bl	8008094 <HAL_DMA2D_Start>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	73fb      	strb	r3, [r7, #15]
                        (uint32_t)destination, 480, 272);
  if (status != HAL_OK) {
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <DMA2D_Convert+0x2c>
    Error_Handler();
 8000ad0:	f000 ffb6 	bl	8001a40 <Error_Handler>
  }

  status = HAL_DMA2D_PollForTransfer(&hdma2d, 1000);
 8000ad4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ad8:	4806      	ldr	r0, [pc, #24]	; (8000af4 <DMA2D_Convert+0x4c>)
 8000ada:	f007 fb06 	bl	80080ea <HAL_DMA2D_PollForTransfer>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	73fb      	strb	r3, [r7, #15]
  if (status != HAL_OK) {
 8000ae2:	7bfb      	ldrb	r3, [r7, #15]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <DMA2D_Convert+0x44>
    Error_Handler();
 8000ae8:	f000 ffaa 	bl	8001a40 <Error_Handler>
  }
}
 8000aec:	bf00      	nop
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	240027c8 	.word	0x240027c8

08000af8 <drawVLine>:
/* Includes ------------------------------------------------------------------*/
#include "draw.h"

void drawVLine(uint32_t *buffer, int32_t x, int32_t y_start, int32_t y_end){
 8000af8:	b480      	push	{r7}
 8000afa:	b087      	sub	sp, #28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
 8000b04:	603b      	str	r3, [r7, #0]
	if(y_start<0){
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	da01      	bge.n	8000b10 <drawVLine+0x18>
		y_start=0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	607b      	str	r3, [r7, #4]
	}
	if(y_end>LTDC_HEIGHT){
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8000b16:	dd02      	ble.n	8000b1e <drawVLine+0x26>
		y_end=LTDC_HEIGHT;
 8000b18:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000b1c:	603b      	str	r3, [r7, #0]
	}
	for(uint32_t i = y_start; i<y_end; i++){
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	617b      	str	r3, [r7, #20]
 8000b22:	e011      	b.n	8000b48 <drawVLine+0x50>
			buffer[(x+i*LTDC_WIDTH)/2] = COLOR;
 8000b24:	697a      	ldr	r2, [r7, #20]
 8000b26:	4613      	mov	r3, r2
 8000b28:	011b      	lsls	r3, r3, #4
 8000b2a:	1a9b      	subs	r3, r3, r2
 8000b2c:	015b      	lsls	r3, r3, #5
 8000b2e:	461a      	mov	r2, r3
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	4413      	add	r3, r2
 8000b34:	085b      	lsrs	r3, r3, #1
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	68fa      	ldr	r2, [r7, #12]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	f04f 220f 	mov.w	r2, #251662080	; 0xf000f00
 8000b40:	601a      	str	r2, [r3, #0]
	for(uint32_t i = y_start; i<y_end; i++){
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	3301      	adds	r3, #1
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	697a      	ldr	r2, [r7, #20]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d3e9      	bcc.n	8000b24 <drawVLine+0x2c>
	}
}
 8000b50:	bf00      	nop
 8000b52:	bf00      	nop
 8000b54:	371c      	adds	r7, #28
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <drawHLine>:
void drawHLine(uint32_t *buffer, int32_t x_start, int32_t x_end, int32_t y){
 8000b5e:	b480      	push	{r7}
 8000b60:	b087      	sub	sp, #28
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	60f8      	str	r0, [r7, #12]
 8000b66:	60b9      	str	r1, [r7, #8]
 8000b68:	607a      	str	r2, [r7, #4]
 8000b6a:	603b      	str	r3, [r7, #0]
	if(x_start<0){
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	da01      	bge.n	8000b76 <drawHLine+0x18>
		x_start=0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60bb      	str	r3, [r7, #8]
	}
	if(x_end>LTDC_WIDTH){
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000b7c:	dd02      	ble.n	8000b84 <drawHLine+0x26>
		x_end=LTDC_WIDTH;
 8000b7e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b82:	607b      	str	r3, [r7, #4]
	}
	x_end=x_end+x_end%2;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	f003 0301 	and.w	r3, r3, #1
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	4413      	add	r3, r2
 8000b94:	607b      	str	r3, [r7, #4]
	for(uint32_t i = x_start/2; i<x_end/2; i++){
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	da00      	bge.n	8000b9e <drawHLine+0x40>
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	105b      	asrs	r3, r3, #1
 8000ba0:	617b      	str	r3, [r7, #20]
 8000ba2:	e01f      	b.n	8000be4 <drawHLine+0x86>
		buffer[i+LTDC_WIDTH*y/2] = COLOR;
 8000ba4:	683a      	ldr	r2, [r7, #0]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	011b      	lsls	r3, r3, #4
 8000baa:	1a9b      	subs	r3, r3, r2
 8000bac:	011b      	lsls	r3, r3, #4
 8000bae:	461a      	mov	r2, r3
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	68fa      	ldr	r2, [r7, #12]
 8000bb8:	4413      	add	r3, r2
 8000bba:	f04f 220f 	mov.w	r2, #251662080	; 0xf000f00
 8000bbe:	601a      	str	r2, [r3, #0]
		buffer[i+(LTDC_WIDTH+LTDC_WIDTH*y)/2] = COLOR;
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	1c5a      	adds	r2, r3, #1
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	011b      	lsls	r3, r3, #4
 8000bc8:	1a9b      	subs	r3, r3, r2
 8000bca:	011b      	lsls	r3, r3, #4
 8000bcc:	461a      	mov	r2, r3
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	68fa      	ldr	r2, [r7, #12]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	f04f 220f 	mov.w	r2, #251662080	; 0xf000f00
 8000bdc:	601a      	str	r2, [r3, #0]
	for(uint32_t i = x_start/2; i<x_end/2; i++){
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	3301      	adds	r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	da00      	bge.n	8000bec <drawHLine+0x8e>
 8000bea:	3301      	adds	r3, #1
 8000bec:	105b      	asrs	r3, r3, #1
 8000bee:	461a      	mov	r2, r3
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d3d6      	bcc.n	8000ba4 <drawHLine+0x46>
	}
}
 8000bf6:	bf00      	nop
 8000bf8:	bf00      	nop
 8000bfa:	371c      	adds	r7, #28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <drawCrosshair>:
	drawVLine(buffer, x_end, y_start, y_end);
	drawHLine(buffer, x_start, x_end, y_start);
	drawHLine(buffer, x_start, x_end, y_end);
}

void drawCrosshair(uint32_t *buffer, int32_t x, int32_t y){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
	drawHLine(buffer, x-CROSSHAIR_SIZE, x+CROSSHAIR_SIZE, y);
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	f1a3 010f 	sub.w	r1, r3, #15
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	f103 020f 	add.w	r2, r3, #15
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	68f8      	ldr	r0, [r7, #12]
 8000c20:	f7ff ff9d 	bl	8000b5e <drawHLine>
	drawVLine(buffer, x, y-CROSSHAIR_SIZE, y+CROSSHAIR_SIZE);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f1a3 020f 	sub.w	r2, r3, #15
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	330f      	adds	r3, #15
 8000c2e:	68b9      	ldr	r1, [r7, #8]
 8000c30:	68f8      	ldr	r0, [r7, #12]
 8000c32:	f7ff ff61 	bl	8000af8 <drawVLine>
}
 8000c36:	bf00      	nop
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram2;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08c      	sub	sp, #48	; 0x30
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	611a      	str	r2, [r3, #16]
 8000c56:	615a      	str	r2, [r3, #20]
 8000c58:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 8000c5a:	4b3c      	ldr	r3, [pc, #240]	; (8000d4c <MX_FMC_Init+0x10c>)
 8000c5c:	4a3c      	ldr	r2, [pc, #240]	; (8000d50 <MX_FMC_Init+0x110>)
 8000c5e:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 8000c60:	4b3a      	ldr	r3, [pc, #232]	; (8000d4c <MX_FMC_Init+0x10c>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000c66:	4b39      	ldr	r3, [pc, #228]	; (8000d4c <MX_FMC_Init+0x10c>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000c6c:	4b37      	ldr	r3, [pc, #220]	; (8000d4c <MX_FMC_Init+0x10c>)
 8000c6e:	2204      	movs	r2, #4
 8000c70:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000c72:	4b36      	ldr	r3, [pc, #216]	; (8000d4c <MX_FMC_Init+0x10c>)
 8000c74:	2210      	movs	r2, #16
 8000c76:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000c78:	4b34      	ldr	r3, [pc, #208]	; (8000d4c <MX_FMC_Init+0x10c>)
 8000c7a:	2240      	movs	r2, #64	; 0x40
 8000c7c:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000c7e:	4b33      	ldr	r3, [pc, #204]	; (8000d4c <MX_FMC_Init+0x10c>)
 8000c80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c84:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000c86:	4b31      	ldr	r3, [pc, #196]	; (8000d4c <MX_FMC_Init+0x10c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000c8c:	4b2f      	ldr	r3, [pc, #188]	; (8000d4c <MX_FMC_Init+0x10c>)
 8000c8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c92:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000c94:	4b2d      	ldr	r3, [pc, #180]	; (8000d4c <MX_FMC_Init+0x10c>)
 8000c96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c9a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 8000c9c:	4b2b      	ldr	r3, [pc, #172]	; (8000d4c <MX_FMC_Init+0x10c>)
 8000c9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ca2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	617b      	str	r3, [r7, #20]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000ca8:	2307      	movs	r3, #7
 8000caa:	61bb      	str	r3, [r7, #24]
  SdramTiming.SelfRefreshTime = 5;
 8000cac:	2305      	movs	r3, #5
 8000cae:	61fb      	str	r3, [r7, #28]
  SdramTiming.RowCycleDelay = 6;
 8000cb0:	2306      	movs	r3, #6
 8000cb2:	623b      	str	r3, [r7, #32]
  SdramTiming.WriteRecoveryTime = 3;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.RPDelay = 2;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.RCDDelay = 2;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4821      	ldr	r0, [pc, #132]	; (8000d4c <MX_FMC_Init+0x10c>)
 8000cc8:	f00c fe60 	bl	800d98c <HAL_SDRAM_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_FMC_Init+0x96>
  {
    Error_Handler( );
 8000cd2:	f000 feb5 	bl	8001a40 <Error_Handler>

  /* USER CODE BEGIN FMC_Init 2 */
  FMC_SDRAM_CommandTypeDef Command;
  /* Step 1 and Step 2 already done in HAL_SDRAM_Init() */
  /* Step 3: Configure a clock configuration enable command */
	Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE; /* Set MODE bits to "001" */
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	607b      	str	r3, [r7, #4]
	Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2; /* configure the Target Bank bits */
 8000cda:	2308      	movs	r3, #8
 8000cdc:	60bb      	str	r3, [r7, #8]
	Command.AutoRefreshNumber      = 1;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	60fb      	str	r3, [r7, #12]
	Command.ModeRegisterDefinition = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
	HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000cec:	4619      	mov	r1, r3
 8000cee:	4817      	ldr	r0, [pc, #92]	; (8000d4c <MX_FMC_Init+0x10c>)
 8000cf0:	f00c fe88 	bl	800da04 <HAL_SDRAM_SendCommand>
	HAL_Delay(1); /* Step 4: Insert 100 us minimum delay - Min HAL Delay is 1ms */
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	f003 fd95 	bl	8004824 <HAL_Delay>
	/* Step 5: Configure a PALL (precharge all) command */
	Command.CommandMode            = FMC_SDRAM_CMD_PALL; /* Set MODE bits to "010" */
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	607b      	str	r3, [r7, #4]
	HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000d04:	4619      	mov	r1, r3
 8000d06:	4811      	ldr	r0, [pc, #68]	; (8000d4c <MX_FMC_Init+0x10c>)
 8000d08:	f00c fe7c 	bl	800da04 <HAL_SDRAM_SendCommand>
	/* Step 6: Configure an Auto Refresh command */
	Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE; /* Set MODE bits to "011" */
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	607b      	str	r3, [r7, #4]
	Command.AutoRefreshNumber      = 2;
 8000d10:	2302      	movs	r3, #2
 8000d12:	60fb      	str	r3, [r7, #12]
	HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	480b      	ldr	r0, [pc, #44]	; (8000d4c <MX_FMC_Init+0x10c>)
 8000d1e:	f00c fe71 	bl	800da04 <HAL_SDRAM_SendCommand>
	/* Step 7: Program the external memory mode register */
	Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;/*set the MODE bits to "100" */
 8000d22:	2304      	movs	r3, #4
 8000d24:	607b      	str	r3, [r7, #4]
	Command.ModeRegisterDefinition =  (uint32_t)0 | 0<<3 | 2<<4 | 0<<7 | 1<<9;
 8000d26:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000d2a:	613b      	str	r3, [r7, #16]
	HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000d2c:	1d3b      	adds	r3, r7, #4
 8000d2e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000d32:	4619      	mov	r1, r3
 8000d34:	4805      	ldr	r0, [pc, #20]	; (8000d4c <MX_FMC_Init+0x10c>)
 8000d36:	f00c fe65 	bl	800da04 <HAL_SDRAM_SendCommand>
	/* Step 8: Set the refresh rate counter - refer to section SDRAM refresh timer register in RM0455 */
	/* Set the device refresh rate
	* COUNT = [(SDRAM self refresh time / number of row) x  SDRAM CLK] – 20
					= [(64ms/4096) * 200MHz] - 20 ~= 3115 */
	HAL_SDRAM_ProgramRefreshRate(&hsdram2, 3115);
 8000d3a:	f640 412b 	movw	r1, #3115	; 0xc2b
 8000d3e:	4803      	ldr	r0, [pc, #12]	; (8000d4c <MX_FMC_Init+0x10c>)
 8000d40:	f00c fe95 	bl	800da6e <HAL_SDRAM_ProgramRefreshRate>
  /* USER CODE END FMC_Init 2 */
}
 8000d44:	bf00      	nop
 8000d46:	3730      	adds	r7, #48	; 0x30
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	24002830 	.word	0x24002830
 8000d50:	52004140 	.word	0x52004140

08000d54 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b0b8      	sub	sp, #224	; 0xe0
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]
 8000d68:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000d6a:	4b58      	ldr	r3, [pc, #352]	; (8000ecc <HAL_FMC_MspInit+0x178>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 80a7 	bne.w	8000ec2 <HAL_FMC_MspInit+0x16e>
    return;
  }
  FMC_Initialized = 1;
 8000d74:	4b55      	ldr	r3, [pc, #340]	; (8000ecc <HAL_FMC_MspInit+0x178>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d7a:	f107 0308 	add.w	r3, r7, #8
 8000d7e:	22c0      	movs	r2, #192	; 0xc0
 8000d80:	2100      	movs	r1, #0
 8000d82:	4618      	mov	r0, r3
 8000d84:	f012 fa8c 	bl	80132a0 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000d88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000d8c:	f04f 0300 	mov.w	r3, #0
 8000d90:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.PLL2.PLL2M = 12;
 8000d94:	230c      	movs	r3, #12
 8000d96:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2N = 200;
 8000d98:	23c8      	movs	r3, #200	; 0xc8
 8000d9a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000da0:	2302      	movs	r3, #2
 8000da2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000da4:	2302      	movs	r3, #2
 8000da6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000da8:	2340      	movs	r3, #64	; 0x40
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 8000db0:	2302      	movs	r3, #2
 8000db2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000db4:	f107 0308 	add.w	r3, r7, #8
 8000db8:	4618      	mov	r0, r3
 8000dba:	f00a fee9 	bl	800bb90 <HAL_RCCEx_PeriphCLKConfig>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <HAL_FMC_MspInit+0x74>
    {
      Error_Handler();
 8000dc4:	f000 fe3c 	bl	8001a40 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000dc8:	4b41      	ldr	r3, [pc, #260]	; (8000ed0 <HAL_FMC_MspInit+0x17c>)
 8000dca:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000dce:	4a40      	ldr	r2, [pc, #256]	; (8000ed0 <HAL_FMC_MspInit+0x17c>)
 8000dd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dd4:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8000dd8:	4b3d      	ldr	r3, [pc, #244]	; (8000ed0 <HAL_FMC_MspInit+0x17c>)
 8000dda:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000dde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
  PE8   ------> FMC_D5
  PE11   ------> FMC_D8
  PH7   ------> FMC_SDCKE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A15_Pin|A14_Pin
 8000de6:	f248 1333 	movw	r3, #33075	; 0x8133
 8000dea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |A11_Pin|A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e00:	230c      	movs	r3, #12
 8000e02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e06:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4831      	ldr	r0, [pc, #196]	; (8000ed4 <HAL_FMC_MspInit+0x180>)
 8000e0e:	f008 f969 	bl	80090e4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D3_Pin|D2_Pin|D0_Pin|D1_Pin
 8000e12:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000e16:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |D13_Pin|D15_Pin|D14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e26:	2303      	movs	r3, #3
 8000e28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e2c:	230c      	movs	r3, #12
 8000e2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e32:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e36:	4619      	mov	r1, r3
 8000e38:	4827      	ldr	r0, [pc, #156]	; (8000ed8 <HAL_FMC_MspInit+0x184>)
 8000e3a:	f008 f953 	bl	80090e4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL0_Pin|FMC_NBL1_Pin|D9_Pin|D4_Pin
 8000e3e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000e42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |D10_Pin|D11_Pin|D7_Pin|D6_Pin
                          |D12_Pin|D5_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e52:	2303      	movs	r3, #3
 8000e54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e58:	230c      	movs	r3, #12
 8000e5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e5e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e62:	4619      	mov	r1, r3
 8000e64:	481d      	ldr	r0, [pc, #116]	; (8000edc <HAL_FMC_MspInit+0x188>)
 8000e66:	f008 f93d 	bl	80090e4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A1_Pin|A0_Pin|A2_Pin|A4_Pin
 8000e6a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000e6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |A3_Pin|A5_Pin|A7_Pin|SDNRAS_Pin
                          |A9_Pin|A8_Pin|A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e84:	230c      	movs	r3, #12
 8000e86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e8a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4813      	ldr	r0, [pc, #76]	; (8000ee0 <HAL_FMC_MspInit+0x18c>)
 8000e92:	f008 f927 	bl	80090e4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNE1_Pin|SDNWE_Pin|SDCKE1_Pin;
 8000e96:	23e0      	movs	r3, #224	; 0xe0
 8000e98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000eae:	230c      	movs	r3, #12
 8000eb0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000eb4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000eb8:	4619      	mov	r1, r3
 8000eba:	480a      	ldr	r0, [pc, #40]	; (8000ee4 <HAL_FMC_MspInit+0x190>)
 8000ebc:	f008 f912 	bl	80090e4 <HAL_GPIO_Init>
 8000ec0:	e000      	b.n	8000ec4 <HAL_FMC_MspInit+0x170>
    return;
 8000ec2:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000ec4:	37e0      	adds	r7, #224	; 0xe0
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	24002864 	.word	0x24002864
 8000ed0:	58024400 	.word	0x58024400
 8000ed4:	58021800 	.word	0x58021800
 8000ed8:	58020c00 	.word	0x58020c00
 8000edc:	58021000 	.word	0x58021000
 8000ee0:	58021400 	.word	0x58021400
 8000ee4:	58021c00 	.word	0x58021c00

08000ee8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000ef0:	f7ff ff30 	bl	8000d54 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <MX_GPIO_Init>:
     PA0   ------> I2S6_WS
     PA3   ------> I2S6_MCK
     PB2   ------> OCTOSPIM_P1_CLK
*/
void MX_GPIO_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b090      	sub	sp, #64	; 0x40
 8000f00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f12:	4bc0      	ldr	r3, [pc, #768]	; (8001214 <MX_GPIO_Init+0x318>)
 8000f14:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f18:	4abe      	ldr	r2, [pc, #760]	; (8001214 <MX_GPIO_Init+0x318>)
 8000f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f1e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f22:	4bbc      	ldr	r3, [pc, #752]	; (8001214 <MX_GPIO_Init+0x318>)
 8000f24:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f30:	4bb8      	ldr	r3, [pc, #736]	; (8001214 <MX_GPIO_Init+0x318>)
 8000f32:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f36:	4ab7      	ldr	r2, [pc, #732]	; (8001214 <MX_GPIO_Init+0x318>)
 8000f38:	f043 0302 	orr.w	r3, r3, #2
 8000f3c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f40:	4bb4      	ldr	r3, [pc, #720]	; (8001214 <MX_GPIO_Init+0x318>)
 8000f42:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8000f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f4e:	4bb1      	ldr	r3, [pc, #708]	; (8001214 <MX_GPIO_Init+0x318>)
 8000f50:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f54:	4aaf      	ldr	r2, [pc, #700]	; (8001214 <MX_GPIO_Init+0x318>)
 8000f56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f5a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f5e:	4bad      	ldr	r3, [pc, #692]	; (8001214 <MX_GPIO_Init+0x318>)
 8000f60:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f68:	623b      	str	r3, [r7, #32]
 8000f6a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000f6c:	4ba9      	ldr	r3, [pc, #676]	; (8001214 <MX_GPIO_Init+0x318>)
 8000f6e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f72:	4aa8      	ldr	r2, [pc, #672]	; (8001214 <MX_GPIO_Init+0x318>)
 8000f74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f78:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f7c:	4ba5      	ldr	r3, [pc, #660]	; (8001214 <MX_GPIO_Init+0x318>)
 8000f7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f86:	61fb      	str	r3, [r7, #28]
 8000f88:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f8a:	4ba2      	ldr	r3, [pc, #648]	; (8001214 <MX_GPIO_Init+0x318>)
 8000f8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f90:	4aa0      	ldr	r2, [pc, #640]	; (8001214 <MX_GPIO_Init+0x318>)
 8000f92:	f043 0308 	orr.w	r3, r3, #8
 8000f96:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f9a:	4b9e      	ldr	r3, [pc, #632]	; (8001214 <MX_GPIO_Init+0x318>)
 8000f9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fa0:	f003 0308 	and.w	r3, r3, #8
 8000fa4:	61bb      	str	r3, [r7, #24]
 8000fa6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa8:	4b9a      	ldr	r3, [pc, #616]	; (8001214 <MX_GPIO_Init+0x318>)
 8000faa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fae:	4a99      	ldr	r2, [pc, #612]	; (8001214 <MX_GPIO_Init+0x318>)
 8000fb0:	f043 0304 	orr.w	r3, r3, #4
 8000fb4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000fb8:	4b96      	ldr	r3, [pc, #600]	; (8001214 <MX_GPIO_Init+0x318>)
 8000fba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fbe:	f003 0304 	and.w	r3, r3, #4
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fc6:	4b93      	ldr	r3, [pc, #588]	; (8001214 <MX_GPIO_Init+0x318>)
 8000fc8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fcc:	4a91      	ldr	r2, [pc, #580]	; (8001214 <MX_GPIO_Init+0x318>)
 8000fce:	f043 0310 	orr.w	r3, r3, #16
 8000fd2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000fd6:	4b8f      	ldr	r3, [pc, #572]	; (8001214 <MX_GPIO_Init+0x318>)
 8000fd8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fdc:	f003 0310 	and.w	r3, r3, #16
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000fe4:	4b8b      	ldr	r3, [pc, #556]	; (8001214 <MX_GPIO_Init+0x318>)
 8000fe6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fea:	4a8a      	ldr	r2, [pc, #552]	; (8001214 <MX_GPIO_Init+0x318>)
 8000fec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ff0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ff4:	4b87      	ldr	r3, [pc, #540]	; (8001214 <MX_GPIO_Init+0x318>)
 8000ff6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ffa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	4b84      	ldr	r3, [pc, #528]	; (8001214 <MX_GPIO_Init+0x318>)
 8001004:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001008:	4a82      	ldr	r2, [pc, #520]	; (8001214 <MX_GPIO_Init+0x318>)
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001012:	4b80      	ldr	r3, [pc, #512]	; (8001214 <MX_GPIO_Init+0x318>)
 8001014:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001020:	4b7c      	ldr	r3, [pc, #496]	; (8001214 <MX_GPIO_Init+0x318>)
 8001022:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001026:	4a7b      	ldr	r2, [pc, #492]	; (8001214 <MX_GPIO_Init+0x318>)
 8001028:	f043 0320 	orr.w	r3, r3, #32
 800102c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001030:	4b78      	ldr	r3, [pc, #480]	; (8001214 <MX_GPIO_Init+0x318>)
 8001032:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001036:	f003 0320 	and.w	r3, r3, #32
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800103e:	4b75      	ldr	r3, [pc, #468]	; (8001214 <MX_GPIO_Init+0x318>)
 8001040:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001044:	4a73      	ldr	r2, [pc, #460]	; (8001214 <MX_GPIO_Init+0x318>)
 8001046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800104a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800104e:	4b71      	ldr	r3, [pc, #452]	; (8001214 <MX_GPIO_Init+0x318>)
 8001050:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001058:	603b      	str	r3, [r7, #0]
 800105a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin, GPIO_PIN_RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	210e      	movs	r1, #14
 8001060:	486d      	ldr	r0, [pc, #436]	; (8001218 <MX_GPIO_Init+0x31c>)
 8001062:	f008 faf9 	bl	8009658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USER_LED1_Pin|USER_LED2_Pin, GPIO_PIN_RESET);
 8001066:	2200      	movs	r2, #0
 8001068:	f640 0104 	movw	r1, #2052	; 0x804
 800106c:	486b      	ldr	r0, [pc, #428]	; (800121c <MX_GPIO_Init+0x320>)
 800106e:	f008 faf3 	bl	8009658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001078:	4869      	ldr	r0, [pc, #420]	; (8001220 <MX_GPIO_Init+0x324>)
 800107a:	f008 faed 	bl	8009658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_NRST_GPIO_Port, AUDIO_NRST_Pin, GPIO_PIN_SET);
 800107e:	2201      	movs	r2, #1
 8001080:	2108      	movs	r1, #8
 8001082:	4866      	ldr	r0, [pc, #408]	; (800121c <MX_GPIO_Init+0x320>)
 8001084:	f008 fae8 	bl	8009658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_SET);
 8001088:	2201      	movs	r2, #1
 800108a:	2106      	movs	r1, #6
 800108c:	4864      	ldr	r0, [pc, #400]	; (8001220 <MX_GPIO_Init+0x324>)
 800108e:	f008 fae3 	bl	8009658 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = WIFI_GPIO_Pin|WIFI_DATRDY_Pin;
 8001092:	2330      	movs	r3, #48	; 0x30
 8001094:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001096:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800109a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80010a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010a4:	4619      	mov	r1, r3
 80010a6:	485c      	ldr	r0, [pc, #368]	; (8001218 <MX_GPIO_Init+0x31c>)
 80010a8:	f008 f81c 	bl	80090e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = I2S6_SDO_Pin|I2S6_SDI_Pin|I2S6_CK_Pin;
 80010ac:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80010b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 80010be:	2305      	movs	r3, #5
 80010c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010c6:	4619      	mov	r1, r3
 80010c8:	4854      	ldr	r0, [pc, #336]	; (800121c <MX_GPIO_Init+0x320>)
 80010ca:	f008 f80b 	bl	80090e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 80010ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	2302      	movs	r3, #2
 80010d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010dc:	2303      	movs	r3, #3
 80010de:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80010e0:	2309      	movs	r3, #9
 80010e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 80010e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010e8:	4619      	mov	r1, r3
 80010ea:	484c      	ldr	r0, [pc, #304]	; (800121c <MX_GPIO_Init+0x320>)
 80010ec:	f007 fffa 	bl	80090e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO7_Pin;
 80010f0:	2380      	movs	r3, #128	; 0x80
 80010f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001100:	230a      	movs	r3, #10
 8001102:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO7_GPIO_Port, &GPIO_InitStruct);
 8001104:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001108:	4619      	mov	r1, r3
 800110a:	4846      	ldr	r0, [pc, #280]	; (8001224 <MX_GPIO_Init+0x328>)
 800110c:	f007 ffea 	bl	80090e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin;
 8001110:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 8001114:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111e:	2303      	movs	r3, #3
 8001120:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001122:	230c      	movs	r3, #12
 8001124:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001126:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800112a:	4619      	mov	r1, r3
 800112c:	483e      	ldr	r0, [pc, #248]	; (8001228 <MX_GPIO_Init+0x32c>)
 800112e:	f007 ffd9 	bl	80090e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin;
 8001132:	230e      	movs	r3, #14
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001136:	2301      	movs	r3, #1
 8001138:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	2300      	movs	r3, #0
 8001140:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001142:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001146:	4619      	mov	r1, r3
 8001148:	4833      	ldr	r0, [pc, #204]	; (8001218 <MX_GPIO_Init+0x31c>)
 800114a:	f007 ffcb 	bl	80090e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = USER_LED1_Pin|AUDIO_NRST_Pin|USER_LED2_Pin;
 800114e:	f640 030c 	movw	r3, #2060	; 0x80c
 8001152:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001154:	2301      	movs	r3, #1
 8001156:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001160:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001164:	4619      	mov	r1, r3
 8001166:	482d      	ldr	r0, [pc, #180]	; (800121c <MX_GPIO_Init+0x320>)
 8001168:	f007 ffbc 	bl	80090e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 800116c:	2304      	movs	r3, #4
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	2302      	movs	r3, #2
 8001172:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001178:	2303      	movs	r3, #3
 800117a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800117c:	230c      	movs	r3, #12
 800117e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001180:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001184:	4619      	mov	r1, r3
 8001186:	4827      	ldr	r0, [pc, #156]	; (8001224 <MX_GPIO_Init+0x328>)
 8001188:	f007 ffac 	bl	80090e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800118c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001192:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001196:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001198:	2301      	movs	r3, #1
 800119a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800119c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011a0:	4619      	mov	r1, r3
 80011a2:	481d      	ldr	r0, [pc, #116]	; (8001218 <MX_GPIO_Init+0x31c>)
 80011a4:	f007 ff9e 	bl	80090e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_SCK_Pin;
 80011a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011ba:	2305      	movs	r3, #5
 80011bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80011be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011c2:	4619      	mov	r1, r3
 80011c4:	4816      	ldr	r0, [pc, #88]	; (8001220 <MX_GPIO_Init+0x324>)
 80011c6:	f007 ff8d 	bl	80090e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin;
 80011ca:	f640 0306 	movw	r3, #2054	; 0x806
 80011ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d0:	2301      	movs	r3, #1
 80011d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d8:	2300      	movs	r3, #0
 80011da:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011e0:	4619      	mov	r1, r3
 80011e2:	480f      	ldr	r0, [pc, #60]	; (8001220 <MX_GPIO_Init+0x324>)
 80011e4:	f007 ff7e 	bl	80090e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 80011e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 80011f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011fc:	4619      	mov	r1, r3
 80011fe:	480a      	ldr	r0, [pc, #40]	; (8001228 <MX_GPIO_Init+0x32c>)
 8001200:	f007 ff70 	bl	80090e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCO_Pin;
 8001204:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001208:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	e00c      	b.n	800122c <MX_GPIO_Init+0x330>
 8001212:	bf00      	nop
 8001214:	58024400 	.word	0x58024400
 8001218:	58022000 	.word	0x58022000
 800121c:	58021800 	.word	0x58021800
 8001220:	58020000 	.word	0x58020000
 8001224:	58020c00 	.word	0x58020c00
 8001228:	58020800 	.word	0x58020800
 800122c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001232:	2300      	movs	r3, #0
 8001234:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 8001236:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800123a:	4619      	mov	r1, r3
 800123c:	4842      	ldr	r0, [pc, #264]	; (8001348 <MX_GPIO_Init+0x44c>)
 800123e:	f007 ff51 	bl	80090e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 8001242:	2340      	movs	r3, #64	; 0x40
 8001244:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001246:	2302      	movs	r3, #2
 8001248:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124e:	2303      	movs	r3, #3
 8001250:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001252:	230a      	movs	r3, #10
 8001254:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001256:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800125a:	4619      	mov	r1, r3
 800125c:	483b      	ldr	r0, [pc, #236]	; (800134c <MX_GPIO_Init+0x450>)
 800125e:	f007 ff41 	bl	80090e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8001262:	230c      	movs	r3, #12
 8001264:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	2302      	movs	r3, #2
 8001268:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2300      	movs	r3, #0
 8001270:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001272:	2305      	movs	r3, #5
 8001274:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001276:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800127a:	4619      	mov	r1, r3
 800127c:	4834      	ldr	r0, [pc, #208]	; (8001350 <MX_GPIO_Init+0x454>)
 800127e:	f007 ff31 	bl	80090e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 8001282:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001286:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001288:	2312      	movs	r3, #18
 800128a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800128c:	2301      	movs	r3, #1
 800128e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	2300      	movs	r3, #0
 8001292:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001294:	2304      	movs	r3, #4
 8001296:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001298:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800129c:	4619      	mov	r1, r3
 800129e:	482d      	ldr	r0, [pc, #180]	; (8001354 <MX_GPIO_Init+0x458>)
 80012a0:	f007 ff20 	bl	80090e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OCSPI1_IO4_Pin|OCSPI1_DQS_Pin;
 80012a4:	2322      	movs	r3, #34	; 0x22
 80012a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a8:	2302      	movs	r3, #2
 80012aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b0:	2303      	movs	r3, #3
 80012b2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80012b4:	230a      	movs	r3, #10
 80012b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012bc:	4619      	mov	r1, r3
 80012be:	4824      	ldr	r0, [pc, #144]	; (8001350 <MX_GPIO_Init+0x454>)
 80012c0:	f007 ff10 	bl	80090e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80012c4:	2304      	movs	r3, #4
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80012d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012d6:	4619      	mov	r1, r3
 80012d8:	481f      	ldr	r0, [pc, #124]	; (8001358 <MX_GPIO_Init+0x45c>)
 80012da:	f007 ff03 	bl	80090e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO5_Pin;
 80012de:	2308      	movs	r3, #8
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ea:	2303      	movs	r3, #3
 80012ec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80012ee:	2309      	movs	r3, #9
 80012f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO5_GPIO_Port, &GPIO_InitStruct);
 80012f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012f6:	4619      	mov	r1, r3
 80012f8:	4817      	ldr	r0, [pc, #92]	; (8001358 <MX_GPIO_Init+0x45c>)
 80012fa:	f007 fef3 	bl	80090e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = I2S6_WS_Pin|I2S6_MCK_Pin;
 80012fe:	2309      	movs	r3, #9
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001302:	2302      	movs	r3, #2
 8001304:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2300      	movs	r3, #0
 800130c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 800130e:	2305      	movs	r3, #5
 8001310:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001312:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001316:	4619      	mov	r1, r3
 8001318:	480b      	ldr	r0, [pc, #44]	; (8001348 <MX_GPIO_Init+0x44c>)
 800131a:	f007 fee3 	bl	80090e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 800131e:	2304      	movs	r3, #4
 8001320:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	2302      	movs	r3, #2
 8001324:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132a:	2303      	movs	r3, #3
 800132c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800132e:	2309      	movs	r3, #9
 8001330:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 8001332:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001336:	4619      	mov	r1, r3
 8001338:	4808      	ldr	r0, [pc, #32]	; (800135c <MX_GPIO_Init+0x460>)
 800133a:	f007 fed3 	bl	80090e4 <HAL_GPIO_Init>

}
 800133e:	bf00      	nop
 8001340:	3740      	adds	r7, #64	; 0x40
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	58020000 	.word	0x58020000
 800134c:	58021800 	.word	0x58021800
 8001350:	58020800 	.word	0x58020800
 8001354:	58020c00 	.word	0x58020c00
 8001358:	58021c00 	.word	0x58021c00
 800135c:	58020400 	.word	0x58020400

08001360 <rescaleImage>:
 *      Author: pwl
 */

#include "img_utils.h"
void rescaleImage(uint32_t *srcImg,uint32_t *dstImg, uint32_t srcWidth, uint32_t srcHeight, uint32_t dstWidth, uint32_t dstHeight)
{
 8001360:	b480      	push	{r7}
 8001362:	b08b      	sub	sp, #44	; 0x2c
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
 800136c:	603b      	str	r3, [r7, #0]
    float scaleX = (float)srcWidth / dstWidth;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	ee07 3a90 	vmov	s15, r3
 8001374:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800137a:	ee07 3a90 	vmov	s15, r3
 800137e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001382:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001386:	edc7 7a07 	vstr	s15, [r7, #28]
    float scaleY = (float)srcHeight / dstHeight;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	ee07 3a90 	vmov	s15, r3
 8001390:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001396:	ee07 3a90 	vmov	s15, r3
 800139a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800139e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013a2:	edc7 7a06 	vstr	s15, [r7, #24]

    for (int y = 0; y < dstHeight; y++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
 80013aa:	e03c      	b.n	8001426 <rescaleImage+0xc6>
    {
        for (int x = 0; x < dstWidth; x++)
 80013ac:	2300      	movs	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
 80013b0:	e032      	b.n	8001418 <rescaleImage+0xb8>
        {
            uint32_t srcX = (uint32_t)(x * scaleX);
 80013b2:	6a3b      	ldr	r3, [r7, #32]
 80013b4:	ee07 3a90 	vmov	s15, r3
 80013b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80013c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013c8:	ee17 3a90 	vmov	r3, s15
 80013cc:	617b      	str	r3, [r7, #20]
            uint32_t srcY = (uint32_t)(y * scaleY);
 80013ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d0:	ee07 3a90 	vmov	s15, r3
 80013d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80013dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013e4:	ee17 3a90 	vmov	r3, s15
 80013e8:	613b      	str	r3, [r7, #16]

            dstImg[y * dstWidth + x] = srcImg[srcY * srcWidth + srcX];
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	fb03 f202 	mul.w	r2, r3, r2
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	4413      	add	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	441a      	add	r2, r3
 80013fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001400:	fb03 f101 	mul.w	r1, r3, r1
 8001404:	6a3b      	ldr	r3, [r7, #32]
 8001406:	440b      	add	r3, r1
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	68b9      	ldr	r1, [r7, #8]
 800140c:	440b      	add	r3, r1
 800140e:	6812      	ldr	r2, [r2, #0]
 8001410:	601a      	str	r2, [r3, #0]
        for (int x = 0; x < dstWidth; x++)
 8001412:	6a3b      	ldr	r3, [r7, #32]
 8001414:	3301      	adds	r3, #1
 8001416:	623b      	str	r3, [r7, #32]
 8001418:	6a3b      	ldr	r3, [r7, #32]
 800141a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800141c:	429a      	cmp	r2, r3
 800141e:	d8c8      	bhi.n	80013b2 <rescaleImage+0x52>
    for (int y = 0; y < dstHeight; y++)
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	3301      	adds	r3, #1
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800142a:	429a      	cmp	r2, r3
 800142c:	d8be      	bhi.n	80013ac <rescaleImage+0x4c>
        }
    }
}
 800142e:	bf00      	nop
 8001430:	bf00      	nop
 8001432:	372c      	adds	r7, #44	; 0x2c
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08e      	sub	sp, #56	; 0x38
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	2234      	movs	r2, #52	; 0x34
 8001446:	2100      	movs	r1, #0
 8001448:	4618      	mov	r0, r3
 800144a:	f011 ff29 	bl	80132a0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800144e:	4b38      	ldr	r3, [pc, #224]	; (8001530 <MX_LTDC_Init+0xf4>)
 8001450:	4a38      	ldr	r2, [pc, #224]	; (8001534 <MX_LTDC_Init+0xf8>)
 8001452:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001454:	4b36      	ldr	r3, [pc, #216]	; (8001530 <MX_LTDC_Init+0xf4>)
 8001456:	2200      	movs	r2, #0
 8001458:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800145a:	4b35      	ldr	r3, [pc, #212]	; (8001530 <MX_LTDC_Init+0xf4>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AH;
 8001460:	4b33      	ldr	r3, [pc, #204]	; (8001530 <MX_LTDC_Init+0xf4>)
 8001462:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001466:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001468:	4b31      	ldr	r3, [pc, #196]	; (8001530 <MX_LTDC_Init+0xf4>)
 800146a:	2200      	movs	r2, #0
 800146c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800146e:	4b30      	ldr	r3, [pc, #192]	; (8001530 <MX_LTDC_Init+0xf4>)
 8001470:	2207      	movs	r2, #7
 8001472:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001474:	4b2e      	ldr	r3, [pc, #184]	; (8001530 <MX_LTDC_Init+0xf4>)
 8001476:	2203      	movs	r2, #3
 8001478:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800147a:	4b2d      	ldr	r3, [pc, #180]	; (8001530 <MX_LTDC_Init+0xf4>)
 800147c:	220e      	movs	r2, #14
 800147e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001480:	4b2b      	ldr	r3, [pc, #172]	; (8001530 <MX_LTDC_Init+0xf4>)
 8001482:	2205      	movs	r2, #5
 8001484:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8001486:	4b2a      	ldr	r3, [pc, #168]	; (8001530 <MX_LTDC_Init+0xf4>)
 8001488:	f240 228e 	movw	r2, #654	; 0x28e
 800148c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800148e:	4b28      	ldr	r3, [pc, #160]	; (8001530 <MX_LTDC_Init+0xf4>)
 8001490:	f240 12e5 	movw	r2, #485	; 0x1e5
 8001494:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8001496:	4b26      	ldr	r3, [pc, #152]	; (8001530 <MX_LTDC_Init+0xf4>)
 8001498:	f44f 7225 	mov.w	r2, #660	; 0x294
 800149c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 800149e:	4b24      	ldr	r3, [pc, #144]	; (8001530 <MX_LTDC_Init+0xf4>)
 80014a0:	f240 12e7 	movw	r2, #487	; 0x1e7
 80014a4:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80014a6:	4b22      	ldr	r3, [pc, #136]	; (8001530 <MX_LTDC_Init+0xf4>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80014ae:	4b20      	ldr	r3, [pc, #128]	; (8001530 <MX_LTDC_Init+0xf4>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80014b6:	4b1e      	ldr	r3, [pc, #120]	; (8001530 <MX_LTDC_Init+0xf4>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80014be:	481c      	ldr	r0, [pc, #112]	; (8001530 <MX_LTDC_Init+0xf4>)
 80014c0:	f008 ff6a 	bl	800a398 <HAL_LTDC_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_LTDC_Init+0x92>
  {
    Error_Handler();
 80014ca:	f000 fab9 	bl	8001a40 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80014de:	2302      	movs	r3, #2
 80014e0:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80014ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014ee:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80014f0:	2305      	movs	r3, #5
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	2200      	movs	r2, #0
 8001516:	4619      	mov	r1, r3
 8001518:	4805      	ldr	r0, [pc, #20]	; (8001530 <MX_LTDC_Init+0xf4>)
 800151a:	f009 f8cf 	bl	800a6bc <HAL_LTDC_ConfigLayer>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8001524:	f000 fa8c 	bl	8001a40 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001528:	bf00      	nop
 800152a:	3738      	adds	r7, #56	; 0x38
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	24002868 	.word	0x24002868
 8001534:	50001000 	.word	0x50001000

08001538 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b0bc      	sub	sp, #240	; 0xf0
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001550:	f107 0318 	add.w	r3, r7, #24
 8001554:	22c0      	movs	r2, #192	; 0xc0
 8001556:	2100      	movs	r1, #0
 8001558:	4618      	mov	r0, r3
 800155a:	f011 fea1 	bl	80132a0 <memset>
  if(ltdcHandle->Instance==LTDC)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a5a      	ldr	r2, [pc, #360]	; (80016cc <HAL_LTDC_MspInit+0x194>)
 8001564:	4293      	cmp	r3, r2
 8001566:	f040 80ad 	bne.w	80016c4 <HAL_LTDC_MspInit+0x18c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800156a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800156e:	f04f 0300 	mov.w	r3, #0
 8001572:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 8001576:	2318      	movs	r3, #24
 8001578:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 800157a:	23c0      	movs	r3, #192	; 0xc0
 800157c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 17;
 800157e:	2311      	movs	r3, #17
 8001580:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001582:	2302      	movs	r3, #2
 8001584:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 16;
 8001586:	2310      	movs	r3, #16
 8001588:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800158a:	2300      	movs	r3, #0
 800158c:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800158e:	2300      	movs	r3, #0
 8001590:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001596:	f107 0318 	add.w	r3, r7, #24
 800159a:	4618      	mov	r0, r3
 800159c:	f00a faf8 	bl	800bb90 <HAL_RCCEx_PeriphCLKConfig>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <HAL_LTDC_MspInit+0x72>
    {
      Error_Handler();
 80015a6:	f000 fa4b 	bl	8001a40 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80015aa:	4b49      	ldr	r3, [pc, #292]	; (80016d0 <HAL_LTDC_MspInit+0x198>)
 80015ac:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80015b0:	4a47      	ldr	r2, [pc, #284]	; (80016d0 <HAL_LTDC_MspInit+0x198>)
 80015b2:	f043 0308 	orr.w	r3, r3, #8
 80015b6:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 80015ba:	4b45      	ldr	r3, [pc, #276]	; (80016d0 <HAL_LTDC_MspInit+0x198>)
 80015bc:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80015c0:	f003 0308 	and.w	r3, r3, #8
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 80015c8:	4b41      	ldr	r3, [pc, #260]	; (80016d0 <HAL_LTDC_MspInit+0x198>)
 80015ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015ce:	4a40      	ldr	r2, [pc, #256]	; (80016d0 <HAL_LTDC_MspInit+0x198>)
 80015d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015d4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80015d8:	4b3d      	ldr	r3, [pc, #244]	; (80016d0 <HAL_LTDC_MspInit+0x198>)
 80015da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80015e6:	4b3a      	ldr	r3, [pc, #232]	; (80016d0 <HAL_LTDC_MspInit+0x198>)
 80015e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015ec:	4a38      	ldr	r2, [pc, #224]	; (80016d0 <HAL_LTDC_MspInit+0x198>)
 80015ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015f2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80015f6:	4b36      	ldr	r3, [pc, #216]	; (80016d0 <HAL_LTDC_MspInit+0x198>)
 80015f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001604:	4b32      	ldr	r3, [pc, #200]	; (80016d0 <HAL_LTDC_MspInit+0x198>)
 8001606:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800160a:	4a31      	ldr	r2, [pc, #196]	; (80016d0 <HAL_LTDC_MspInit+0x198>)
 800160c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001610:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001614:	4b2e      	ldr	r3, [pc, #184]	; (80016d0 <HAL_LTDC_MspInit+0x198>)
 8001616:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800161a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	68bb      	ldr	r3, [r7, #8]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_B4_Pin|LCD_B5_Pin
 8001622:	23ff      	movs	r3, #255	; 0xff
 8001624:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_DE_Pin|LCD_G7_Pin|LCD_G6_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001628:	2302      	movs	r3, #2
 800162a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001634:	2303      	movs	r3, #3
 8001636:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800163a:	230e      	movs	r3, #14
 800163c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001640:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001644:	4619      	mov	r1, r3
 8001646:	4823      	ldr	r0, [pc, #140]	; (80016d4 <HAL_LTDC_MspInit+0x19c>)
 8001648:	f007 fd4c 	bl	80090e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B3_Pin|LCD_B2_Pin|LCD_B1_Pin|LCD_B0_Pin
 800164c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001650:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_G4_Pin|LCD_G3_Pin|LCD_G2_Pin|LCD_G1_Pin
                          |LCD_R7_Pin|LCD_G0_Pin|LCD_R1_Pin|LCD_R6_Pin
                          |LCD_R2_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001654:	2302      	movs	r3, #2
 8001656:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001660:	2303      	movs	r3, #3
 8001662:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001666:	230e      	movs	r3, #14
 8001668:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800166c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001670:	4619      	mov	r1, r3
 8001672:	4819      	ldr	r0, [pc, #100]	; (80016d8 <HAL_LTDC_MspInit+0x1a0>)
 8001674:	f007 fd36 	bl	80090e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_CLK_Pin|LCD_VSYNC_Pin|LCD_R0_Pin;
 8001678:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800167c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001680:	2302      	movs	r3, #2
 8001682:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168c:	2303      	movs	r3, #3
 800168e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001692:	230e      	movs	r3, #14
 8001694:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001698:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800169c:	4619      	mov	r1, r3
 800169e:	480f      	ldr	r0, [pc, #60]	; (80016dc <HAL_LTDC_MspInit+0x1a4>)
 80016a0:	f007 fd20 	bl	80090e4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80016a4:	2200      	movs	r2, #0
 80016a6:	2100      	movs	r1, #0
 80016a8:	2058      	movs	r0, #88	; 0x58
 80016aa:	f003 f9ba 	bl	8004a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80016ae:	2058      	movs	r0, #88	; 0x58
 80016b0:	f003 f9d1 	bl	8004a56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 80016b4:	2200      	movs	r2, #0
 80016b6:	2100      	movs	r1, #0
 80016b8:	2059      	movs	r0, #89	; 0x59
 80016ba:	f003 f9b2 	bl	8004a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 80016be:	2059      	movs	r0, #89	; 0x59
 80016c0:	f003 f9c9 	bl	8004a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80016c4:	bf00      	nop
 80016c6:	37f0      	adds	r7, #240	; 0xf0
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	50001000 	.word	0x50001000
 80016d0:	58024400 	.word	0x58024400
 80016d4:	58022800 	.word	0x58022800
 80016d8:	58022400 	.word	0x58022400
 80016dc:	58022000 	.word	0x58022000

080016e0 <LTDC_Init_from_buffer>:
  /* USER CODE END LTDC_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void LTDC_Init_from_buffer(uint32_t* buffer){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b090      	sub	sp, #64	; 0x40
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80016e8:	f107 030c 	add.w	r3, r7, #12
 80016ec:	2234      	movs	r2, #52	; 0x34
 80016ee:	2100      	movs	r1, #0
 80016f0:	4618      	mov	r0, r3
 80016f2:	f011 fdd5 	bl	80132a0 <memset>
	pLayerCfg.WindowX0 = 28;
 80016f6:	231c      	movs	r3, #28
 80016f8:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = 508;
 80016fa:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 80016fe:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 6;
 8001700:	2306      	movs	r3, #6
 8001702:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = 278;
 8001704:	f44f 738b 	mov.w	r3, #278	; 0x116
 8001708:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800170a:	2302      	movs	r3, #2
 800170c:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 800170e:	23ff      	movs	r3, #255	; 0xff
 8001710:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800171a:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800171c:	2305      	movs	r3, #5
 800171e:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.FBStartAdress = (uint32_t)buffer;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.ImageWidth = 480;
 8001724:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001728:	637b      	str	r3, [r7, #52]	; 0x34
	pLayerCfg.ImageHeight = 272;
 800172a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800172e:	63bb      	str	r3, [r7, #56]	; 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	pLayerCfg.Backcolor.Red = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001742:	f107 030c 	add.w	r3, r7, #12
 8001746:	2200      	movs	r2, #0
 8001748:	4619      	mov	r1, r3
 800174a:	4806      	ldr	r0, [pc, #24]	; (8001764 <LTDC_Init_from_buffer+0x84>)
 800174c:	f008 ffb6 	bl	800a6bc <HAL_LTDC_ConfigLayer>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <LTDC_Init_from_buffer+0x7a>
	{
	Error_Handler();
 8001756:	f000 f973 	bl	8001a40 <Error_Handler>
	}
}
 800175a:	bf00      	nop
 800175c:	3740      	adds	r7, #64	; 0x40
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	24002868 	.word	0x24002868

08001768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b088      	sub	sp, #32
 800176c:	af04      	add	r7, sp, #16
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800176e:	4b62      	ldr	r3, [pc, #392]	; (80018f8 <main+0x190>)
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d11b      	bne.n	80017b2 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800177a:	f3bf 8f4f 	dsb	sy
}
 800177e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001780:	f3bf 8f6f 	isb	sy
}
 8001784:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001786:	4b5c      	ldr	r3, [pc, #368]	; (80018f8 <main+0x190>)
 8001788:	2200      	movs	r2, #0
 800178a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800178e:	f3bf 8f4f 	dsb	sy
}
 8001792:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001794:	f3bf 8f6f 	isb	sy
}
 8001798:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800179a:	4b57      	ldr	r3, [pc, #348]	; (80018f8 <main+0x190>)
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	4a56      	ldr	r2, [pc, #344]	; (80018f8 <main+0x190>)
 80017a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80017a6:	f3bf 8f4f 	dsb	sy
}
 80017aa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017ac:	f3bf 8f6f 	isb	sy
}
 80017b0:	e000      	b.n	80017b4 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80017b2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80017b4:	4b50      	ldr	r3, [pc, #320]	; (80018f8 <main+0x190>)
 80017b6:	695b      	ldr	r3, [r3, #20]
 80017b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d138      	bne.n	8001832 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80017c0:	4b4d      	ldr	r3, [pc, #308]	; (80018f8 <main+0x190>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80017c8:	f3bf 8f4f 	dsb	sy
}
 80017cc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80017ce:	4b4a      	ldr	r3, [pc, #296]	; (80018f8 <main+0x190>)
 80017d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017d4:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	0b5b      	lsrs	r3, r3, #13
 80017da:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80017de:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	08db      	lsrs	r3, r3, #3
 80017e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017e8:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	015a      	lsls	r2, r3, #5
 80017ee:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80017f2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80017f8:	493f      	ldr	r1, [pc, #252]	; (80018f8 <main+0x190>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	1e5a      	subs	r2, r3, #1
 8001804:	607a      	str	r2, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1ef      	bne.n	80017ea <main+0x82>
    } while(sets-- != 0U);
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	1e5a      	subs	r2, r3, #1
 800180e:	60ba      	str	r2, [r7, #8]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1e5      	bne.n	80017e0 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8001814:	f3bf 8f4f 	dsb	sy
}
 8001818:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800181a:	4b37      	ldr	r3, [pc, #220]	; (80018f8 <main+0x190>)
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	4a36      	ldr	r2, [pc, #216]	; (80018f8 <main+0x190>)
 8001820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001824:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001826:	f3bf 8f4f 	dsb	sy
}
 800182a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800182c:	f3bf 8f6f 	isb	sy
}
 8001830:	e000      	b.n	8001834 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001832:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001834:	f002 ff64 	bl	8004700 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001838:	f000 f86c 	bl	8001914 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800183c:	f7ff fb5e 	bl	8000efc <MX_GPIO_Init>
  MX_DMA_Init();
 8001840:	f7ff f8ae 	bl	80009a0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001844:	f002 fe74 	bl	8004530 <MX_USART1_UART_Init>
  MX_DMA2D_Init();
 8001848:	f7ff f8ca 	bl	80009e0 <MX_DMA2D_Init>
  MX_LTDC_Init();
 800184c:	f7ff fdf6 	bl	800143c <MX_LTDC_Init>
  MX_DCMI_Init();
 8001850:	f7fe ff64 	bl	800071c <MX_DCMI_Init>
  MX_RTC_Init();
 8001854:	f001 feb8 	bl	80035c8 <MX_RTC_Init>
  MX_FMC_Init();
 8001858:	f7ff f9f2 	bl	8000c40 <MX_FMC_Init>
  MX_CRC_Init();
 800185c:	f7fe ff1a 	bl	8000694 <MX_CRC_Init>
  MX_X_CUBE_AI_Init();
 8001860:	f00e fa1c 	bl	800fc9c <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */
    RetargetInit(&huart1);
 8001864:	4825      	ldr	r0, [pc, #148]	; (80018fc <main+0x194>)
 8001866:	f001 fdf9 	bl	800345c <RetargetInit>
    BSP_CAMERA_PwrDown(0);
 800186a:	2000      	movs	r0, #0
 800186c:	f002 fc0f 	bl	800408e <BSP_CAMERA_PwrDown>
    if (BSP_CAMERA_Init(0, CAMERA_R480x272, CAMERA_PF_RGB565) !=
 8001870:	2200      	movs	r2, #0
 8001872:	2102      	movs	r1, #2
 8001874:	2000      	movs	r0, #0
 8001876:	f002 fb59 	bl	8003f2c <BSP_CAMERA_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <main+0x11c>
        BSP_ERROR_NONE) {
        Error_Handler();
 8001880:	f000 f8de 	bl	8001a40 <Error_Handler>
    }
    HAL_Delay(1000);
 8001884:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001888:	f002 ffcc 	bl	8004824 <HAL_Delay>
    //  buffer[5460] = 255;
    LTDC_Init_from_buffer((uint32_t *)LCD_BUFFER);
 800188c:	481c      	ldr	r0, [pc, #112]	; (8001900 <main+0x198>)
 800188e:	f7ff ff27 	bl	80016e0 <LTDC_Init_from_buffer>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    while (1) {
    	// make photo
        BSP_CAMERA_Start(0, (uint8_t *)CAMERA_BUFFER, CAMERA_MODE_SNAPSHOT);
 8001892:	2202      	movs	r2, #2
 8001894:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001898:	2000      	movs	r0, #0
 800189a:	f002 fb8d 	bl	8003fb8 <BSP_CAMERA_Start>
        while (camera_frame_ready == 0) {
 800189e:	bf00      	nop
 80018a0:	4b18      	ldr	r3, [pc, #96]	; (8001904 <main+0x19c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0fb      	beq.n	80018a0 <main+0x138>
        };
        BSP_CAMERA_Stop(0);
 80018a8:	2000      	movs	r0, #0
 80018aa:	f002 fbbf 	bl	800402c <BSP_CAMERA_Stop>
        // process photo
        DMA2D_Convert((uint8_t *)CAMERA_BUFFER, (uint32_t *)LCD_BUFFER);
 80018ae:	4914      	ldr	r1, [pc, #80]	; (8001900 <main+0x198>)
 80018b0:	f04f 4050 	mov.w	r0, #3489660928	; 0xd0000000
 80018b4:	f7ff f8f8 	bl	8000aa8 <DMA2D_Convert>

        // rescale
        rescaleImage((uint32_t*)LCD_BUFFER, (uint32_t*)rescaledImg, LTDC_WIDTH, LTDC_HEIGHT, 96, 96);
 80018b8:	2360      	movs	r3, #96	; 0x60
 80018ba:	9301      	str	r3, [sp, #4]
 80018bc:	2360      	movs	r3, #96	; 0x60
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80018c4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80018c8:	490f      	ldr	r1, [pc, #60]	; (8001908 <main+0x1a0>)
 80018ca:	480d      	ldr	r0, [pc, #52]	; (8001900 <main+0x198>)
 80018cc:	f7ff fd48 	bl	8001360 <rescaleImage>
    /* USER CODE END WHILE */

  //MX_X_CUBE_AI_Process();
    /* USER CODE BEGIN 3 */
        //MX_X_CUBE_AI_Process((uint32_t *)LCD_BUFFER, (uint32_t*)rescaledImg);
  	  	postProcess((uint32_t *)LCD_BUFFER, LTDC_WIDTH, LTDC_HEIGHT, 96, 96, GRID_SIZE, probabilites);
 80018d0:	4b0e      	ldr	r3, [pc, #56]	; (800190c <main+0x1a4>)
 80018d2:	9302      	str	r3, [sp, #8]
 80018d4:	230c      	movs	r3, #12
 80018d6:	9301      	str	r3, [sp, #4]
 80018d8:	2360      	movs	r3, #96	; 0x60
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	2360      	movs	r3, #96	; 0x60
 80018de:	f44f 7288 	mov.w	r2, #272	; 0x110
 80018e2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80018e6:	4806      	ldr	r0, [pc, #24]	; (8001900 <main+0x198>)
 80018e8:	f001 fd52 	bl	8003390 <postProcess>

        HAL_GPIO_TogglePin(USER_LED1_GPIO_Port, USER_LED1_Pin);
 80018ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018f0:	4807      	ldr	r0, [pc, #28]	; (8001910 <main+0x1a8>)
 80018f2:	f007 feca 	bl	800968a <HAL_GPIO_TogglePin>
        BSP_CAMERA_Start(0, (uint8_t *)CAMERA_BUFFER, CAMERA_MODE_SNAPSHOT);
 80018f6:	e7cc      	b.n	8001892 <main+0x12a>
 80018f8:	e000ed00 	.word	0xe000ed00
 80018fc:	2400c404 	.word	0x2400c404
 8001900:	d005fa00 	.word	0xd005fa00
 8001904:	24002910 	.word	0x24002910
 8001908:	24002914 	.word	0x24002914
 800190c:	24000000 	.word	0x24000000
 8001910:	58021800 	.word	0x58021800

08001914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b09c      	sub	sp, #112	; 0x70
 8001918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800191a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800191e:	224c      	movs	r2, #76	; 0x4c
 8001920:	2100      	movs	r1, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f011 fcbc 	bl	80132a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001928:	1d3b      	adds	r3, r7, #4
 800192a:	2220      	movs	r2, #32
 800192c:	2100      	movs	r1, #0
 800192e:	4618      	mov	r0, r3
 8001930:	f011 fcb6 	bl	80132a0 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8001934:	4b38      	ldr	r3, [pc, #224]	; (8001a18 <SystemClock_Config+0x104>)
 8001936:	f04f 32ff 	mov.w	r2, #4294967295
 800193a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800193e:	2004      	movs	r0, #4
 8001940:	f009 f8a4 	bl	800aa8c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001944:	2300      	movs	r3, #0
 8001946:	603b      	str	r3, [r7, #0]
 8001948:	4b34      	ldr	r3, [pc, #208]	; (8001a1c <SystemClock_Config+0x108>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	4a33      	ldr	r2, [pc, #204]	; (8001a1c <SystemClock_Config+0x108>)
 800194e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001952:	6193      	str	r3, [r2, #24]
 8001954:	4b31      	ldr	r3, [pc, #196]	; (8001a1c <SystemClock_Config+0x108>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800195c:	603b      	str	r3, [r7, #0]
 800195e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001960:	bf00      	nop
 8001962:	4b2e      	ldr	r3, [pc, #184]	; (8001a1c <SystemClock_Config+0x108>)
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800196a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800196e:	d1f8      	bne.n	8001962 <SystemClock_Config+0x4e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001970:	f009 f87c 	bl	800aa6c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001974:	4b28      	ldr	r3, [pc, #160]	; (8001a18 <SystemClock_Config+0x104>)
 8001976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001978:	4a27      	ldr	r2, [pc, #156]	; (8001a18 <SystemClock_Config+0x104>)
 800197a:	f023 0318 	bic.w	r3, r3, #24
 800197e:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001980:	2305      	movs	r3, #5
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001984:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001988:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800198a:	2301      	movs	r3, #1
 800198c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800198e:	2302      	movs	r3, #2
 8001990:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001992:	2302      	movs	r3, #2
 8001994:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001996:	230c      	movs	r3, #12
 8001998:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 800199a:	f44f 738c 	mov.w	r3, #280	; 0x118
 800199e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80019a0:	2302      	movs	r3, #2
 80019a2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80019a4:	2303      	movs	r3, #3
 80019a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 80019a8:	2304      	movs	r3, #4
 80019aa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80019ac:	2304      	movs	r3, #4
 80019ae:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80019b0:	2300      	movs	r3, #0
 80019b2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019bc:	4618      	mov	r0, r3
 80019be:	f009 f8bf 	bl	800ab40 <HAL_RCC_OscConfig>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80019c8:	f000 f83a 	bl	8001a40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019cc:	233f      	movs	r3, #63	; 0x3f
 80019ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019d0:	2303      	movs	r3, #3
 80019d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80019d8:	2300      	movs	r3, #0
 80019da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80019dc:	2340      	movs	r3, #64	; 0x40
 80019de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80019e0:	2340      	movs	r3, #64	; 0x40
 80019e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80019e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80019ea:	2340      	movs	r3, #64	; 0x40
 80019ec:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80019ee:	1d3b      	adds	r3, r7, #4
 80019f0:	2107      	movs	r1, #7
 80019f2:	4618      	mov	r0, r3
 80019f4:	f009 fcd6 	bl	800b3a4 <HAL_RCC_ClockConfig>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <SystemClock_Config+0xee>
  {
    Error_Handler();
 80019fe:	f000 f81f 	bl	8001a40 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8001a02:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001a06:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	f009 fe80 	bl	800b710 <HAL_RCC_MCOConfig>
}
 8001a10:	bf00      	nop
 8001a12:	3770      	adds	r7, #112	; 0x70
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	58024400 	.word	0x58024400
 8001a1c:	58024800 	.word	0x58024800

08001a20 <BSP_CAMERA_FrameEventCallback>:

/* USER CODE BEGIN 4 */

void BSP_CAMERA_FrameEventCallback(uint32_t Instance) {
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
    camera_frame_ready = 1;
 8001a28:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <BSP_CAMERA_FrameEventCallback+0x1c>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	24002910 	.word	0x24002910

08001a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a44:	b672      	cpsid	i
}
 8001a46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state
     */
    __disable_irq();
    while (1) {
 8001a48:	e7fe      	b.n	8001a48 <Error_Handler+0x8>
	...

08001a4c <OV5640_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OV5640_RegisterBusIO(OV5640_Object_t *pObj, OV5640_IO_t *pIO)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d103      	bne.n	8001a64 <OV5640_RegisterBusIO+0x18>
  {
    ret = OV5640_ERROR;
 8001a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	e02c      	b.n	8001abe <OV5640_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	891a      	ldrh	r2, [r3, #8]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	68da      	ldr	r2, [r3, #12]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	691a      	ldr	r2, [r3, #16]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	695a      	ldr	r2, [r3, #20]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a0c      	ldr	r2, [pc, #48]	; (8001ac8 <OV5640_RegisterBusIO+0x7c>)
 8001a98:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a0b      	ldr	r2, [pc, #44]	; (8001acc <OV5640_RegisterBusIO+0x80>)
 8001a9e:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	621a      	str	r2, [r3, #32]

    if (pObj->IO.Init != NULL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d004      	beq.n	8001ab8 <OV5640_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4798      	blx	r3
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	e002      	b.n	8001abe <OV5640_RegisterBusIO+0x72>
    }
    else
    {
      ret = OV5640_ERROR;
 8001ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8001abc:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001abe:	68fb      	ldr	r3, [r7, #12]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	080032cf 	.word	0x080032cf
 8001acc:	08003301 	.word	0x08003301

08001ad0 <OV5640_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_Init(OV5640_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b088      	sub	sp, #32
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 8001adc:	2300      	movs	r3, #0
 8001ade:	61bb      	str	r3, [r7, #24]
    {OV5640_AEC_CTRL1F, 0x14},
    {OV5640_SYSTEM_CTROL0, 0x02},
  };
  uint8_t tmp;

  if (pObj->IsInitialized == 0U)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d165      	bne.n	8001bb6 <OV5640_Init+0xe6>
  {
    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	2b04      	cmp	r3, #4
 8001aee:	d80e      	bhi.n	8001b0e <OV5640_Init+0x3e>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00f      	beq.n	8001b16 <OV5640_Init+0x46>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d00c      	beq.n	8001b16 <OV5640_Init+0x46>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d009      	beq.n	8001b16 <OV5640_Init+0x46>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2b07      	cmp	r3, #7
 8001b06:	d006      	beq.n	8001b16 <OV5640_Init+0x46>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b08      	cmp	r3, #8
 8001b0c:	d003      	beq.n	8001b16 <OV5640_Init+0x46>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 8001b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b12:	61bb      	str	r3, [r7, #24]
 8001b14:	e04f      	b.n	8001bb6 <OV5640_Init+0xe6>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8001b16:	2300      	movs	r3, #0
 8001b18:	61fb      	str	r3, [r7, #28]
 8001b1a:	e01f      	b.n	8001b5c <OV5640_Init+0x8c>
      {
        if (ret != OV5640_ERROR)
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b22:	d018      	beq.n	8001b56 <OV5640_Init+0x86>
        {
          tmp = (uint8_t)OV5640_Common[index][1];
 8001b24:	4a26      	ldr	r2, [pc, #152]	; (8001bc0 <OV5640_Init+0xf0>)
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	885b      	ldrh	r3, [r3, #2]
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	75fb      	strb	r3, [r7, #23]

          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f103 0018 	add.w	r0, r3, #24
 8001b38:	4a21      	ldr	r2, [pc, #132]	; (8001bc0 <OV5640_Init+0xf0>)
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001b40:	f107 0217 	add.w	r2, r7, #23
 8001b44:	2301      	movs	r3, #1
 8001b46:	f001 fc0b 	bl	8003360 <ov5640_write_reg>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d002      	beq.n	8001b56 <OV5640_Init+0x86>
          {
            ret = OV5640_ERROR;
 8001b50:	f04f 33ff 	mov.w	r3, #4294967295
 8001b54:	61bb      	str	r3, [r7, #24]
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	61fb      	str	r3, [r7, #28]
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	2bfd      	cmp	r3, #253	; 0xfd
 8001b60:	d9dc      	bls.n	8001b1c <OV5640_Init+0x4c>
          }
        }
      }

      if (ret == OV5640_OK)
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d126      	bne.n	8001bb6 <OV5640_Init+0xe6>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 8001b68:	68b9      	ldr	r1, [r7, #8]
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f000 f9e0 	bl	8001f30 <OV5640_SetResolution>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <OV5640_Init+0xae>
        {
          ret = OV5640_ERROR;
 8001b76:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7a:	61bb      	str	r3, [r7, #24]
 8001b7c:	e01b      	b.n	8001bb6 <OV5640_Init+0xe6>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	68f8      	ldr	r0, [r7, #12]
 8001b82:	f000 f833 	bl	8001bec <OV5640_SetPixelFormat>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <OV5640_Init+0xc4>
        {
          ret = OV5640_ERROR;
 8001b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b90:	61bb      	str	r3, [r7, #24]
 8001b92:	e010      	b.n	8001bb6 <OV5640_Init+0xe6>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(pObj, OV5640_POLARITY_PCLK_HIGH, OV5640_POLARITY_HREF_HIGH,
 8001b94:	2300      	movs	r3, #0
 8001b96:	2201      	movs	r2, #1
 8001b98:	2101      	movs	r1, #1
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f000 fb64 	bl	8002268 <OV5640_SetPolarities>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <OV5640_Init+0xde>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 8001ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8001baa:	61bb      	str	r3, [r7, #24]
 8001bac:	e003      	b.n	8001bb6 <OV5640_Init+0xe6>
        }
        else
        {
          pObj->IsInitialized = 1U;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
      }
    }
  }

  return ret;
 8001bb6:	69bb      	ldr	r3, [r7, #24]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3720      	adds	r7, #32
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	08014718 	.word	0x08014718

08001bc4 <OV5640_DeInit>:
  * @brief  De-initializes the camera sensor.
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV5640_DeInit(OV5640_Object_t *pObj)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized == 1U)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d103      	bne.n	8001bde <OV5640_DeInit+0x1a>
  {
    /* De-initialize camera sensor interface */
    pObj->IsInitialized = 0U;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return OV5640_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <OV5640_SetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_SetPixelFormat(OV5640_Object_t *pObj, uint32_t PixelFormat)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00f      	beq.n	8001c20 <OV5640_SetPixelFormat+0x34>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d00c      	beq.n	8001c20 <OV5640_SetPixelFormat+0x34>
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d009      	beq.n	8001c20 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	2b07      	cmp	r3, #7
 8001c10:	d006      	beq.n	8001c20 <OV5640_SetPixelFormat+0x34>
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	2b08      	cmp	r3, #8
 8001c16:	d003      	beq.n	8001c20 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 8001c18:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	e16a      	b.n	8001ef6 <OV5640_SetPixelFormat+0x30a>
  }
  else
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	2b07      	cmp	r3, #7
 8001c26:	f200 80c3 	bhi.w	8001db0 <OV5640_SetPixelFormat+0x1c4>
 8001c2a:	a201      	add	r2, pc, #4	; (adr r2, 8001c30 <OV5640_SetPixelFormat+0x44>)
 8001c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c30:	08001ca9 	.word	0x08001ca9
 8001c34:	08001c51 	.word	0x08001c51
 8001c38:	08001db1 	.word	0x08001db1
 8001c3c:	08001db1 	.word	0x08001db1
 8001c40:	08001db1 	.word	0x08001db1
 8001c44:	08001db1 	.word	0x08001db1
 8001c48:	08001d01 	.word	0x08001d01
 8001c4c:	08001d59 	.word	0x08001d59
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8001c50:	2300      	movs	r3, #0
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	e024      	b.n	8001ca0 <OV5640_SetPixelFormat+0xb4>
        {
          if (ret != OV5640_ERROR)
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c5c:	d01d      	beq.n	8001c9a <OV5640_SetPixelFormat+0xae>
          {
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8001c5e:	4aa8      	ldr	r2, [pc, #672]	; (8001f00 <OV5640_SetPixelFormat+0x314>)
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	885b      	ldrh	r3, [r3, #2]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f103 0018 	add.w	r0, r3, #24
 8001c72:	4aa3      	ldr	r2, [pc, #652]	; (8001f00 <OV5640_SetPixelFormat+0x314>)
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001c7a:	f107 020f 	add.w	r2, r7, #15
 8001c7e:	2301      	movs	r3, #1
 8001c80:	f001 fb6e 	bl	8003360 <ov5640_write_reg>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <OV5640_SetPixelFormat+0xa6>
            {
              ret = OV5640_ERROR;
 8001c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	e003      	b.n	8001c9a <OV5640_SetPixelFormat+0xae>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001c92:	2101      	movs	r1, #1
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f001 fb00 	bl	800329a <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d9d7      	bls.n	8001c56 <OV5640_SetPixelFormat+0x6a>
            }
          }
        }
        break;
 8001ca6:	e0af      	b.n	8001e08 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8001ca8:	2300      	movs	r3, #0
 8001caa:	613b      	str	r3, [r7, #16]
 8001cac:	e024      	b.n	8001cf8 <OV5640_SetPixelFormat+0x10c>
        {
          if (ret != OV5640_ERROR)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb4:	d01d      	beq.n	8001cf2 <OV5640_SetPixelFormat+0x106>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8001cb6:	4a93      	ldr	r2, [pc, #588]	; (8001f04 <OV5640_SetPixelFormat+0x318>)
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	885b      	ldrh	r3, [r3, #2]
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f103 0018 	add.w	r0, r3, #24
 8001cca:	4a8e      	ldr	r2, [pc, #568]	; (8001f04 <OV5640_SetPixelFormat+0x318>)
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001cd2:	f107 020f 	add.w	r2, r7, #15
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	f001 fb42 	bl	8003360 <ov5640_write_reg>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <OV5640_SetPixelFormat+0xfe>
            {
              ret = OV5640_ERROR;
 8001ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce6:	617b      	str	r3, [r7, #20]
 8001ce8:	e003      	b.n	8001cf2 <OV5640_SetPixelFormat+0x106>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001cea:	2101      	movs	r1, #1
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f001 fad4 	bl	800329a <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	613b      	str	r3, [r7, #16]
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d9d7      	bls.n	8001cae <OV5640_SetPixelFormat+0xc2>
            }
          }
        }
        break;
 8001cfe:	e083      	b.n	8001e08 <OV5640_SetPixelFormat+0x21c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8001d00:	2300      	movs	r3, #0
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	e024      	b.n	8001d50 <OV5640_SetPixelFormat+0x164>
        {
          if (ret != OV5640_ERROR)
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d0c:	d01d      	beq.n	8001d4a <OV5640_SetPixelFormat+0x15e>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 8001d0e:	4a7e      	ldr	r2, [pc, #504]	; (8001f08 <OV5640_SetPixelFormat+0x31c>)
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4413      	add	r3, r2
 8001d16:	885b      	ldrh	r3, [r3, #2]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f103 0018 	add.w	r0, r3, #24
 8001d22:	4a79      	ldr	r2, [pc, #484]	; (8001f08 <OV5640_SetPixelFormat+0x31c>)
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001d2a:	f107 020f 	add.w	r2, r7, #15
 8001d2e:	2301      	movs	r3, #1
 8001d30:	f001 fb16 	bl	8003360 <ov5640_write_reg>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <OV5640_SetPixelFormat+0x156>
            {
              ret = OV5640_ERROR;
 8001d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	e003      	b.n	8001d4a <OV5640_SetPixelFormat+0x15e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001d42:	2101      	movs	r1, #1
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f001 faa8 	bl	800329a <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	613b      	str	r3, [r7, #16]
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d9d7      	bls.n	8001d06 <OV5640_SetPixelFormat+0x11a>
            }
          }
        }
        break;
 8001d56:	e057      	b.n	8001e08 <OV5640_SetPixelFormat+0x21c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8001d58:	2300      	movs	r3, #0
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	e024      	b.n	8001da8 <OV5640_SetPixelFormat+0x1bc>
        {
          if (ret != OV5640_ERROR)
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d64:	d01d      	beq.n	8001da2 <OV5640_SetPixelFormat+0x1b6>
          {
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8001d66:	4a69      	ldr	r2, [pc, #420]	; (8001f0c <OV5640_SetPixelFormat+0x320>)
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	885b      	ldrh	r3, [r3, #2]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f103 0018 	add.w	r0, r3, #24
 8001d7a:	4a64      	ldr	r2, [pc, #400]	; (8001f0c <OV5640_SetPixelFormat+0x320>)
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001d82:	f107 020f 	add.w	r2, r7, #15
 8001d86:	2301      	movs	r3, #1
 8001d88:	f001 faea 	bl	8003360 <ov5640_write_reg>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <OV5640_SetPixelFormat+0x1ae>
            {
              ret = OV5640_ERROR;
 8001d92:	f04f 33ff 	mov.w	r3, #4294967295
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	e003      	b.n	8001da2 <OV5640_SetPixelFormat+0x1b6>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f001 fa7c 	bl	800329a <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	3301      	adds	r3, #1
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d9d7      	bls.n	8001d5e <OV5640_SetPixelFormat+0x172>
            }
          }
        }
        break;
 8001dae:	e02b      	b.n	8001e08 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8001db0:	2300      	movs	r3, #0
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	e024      	b.n	8001e00 <OV5640_SetPixelFormat+0x214>
        {
          if (ret != OV5640_ERROR)
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dbc:	d01d      	beq.n	8001dfa <OV5640_SetPixelFormat+0x20e>
          {
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 8001dbe:	4a54      	ldr	r2, [pc, #336]	; (8001f10 <OV5640_SetPixelFormat+0x324>)
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	885b      	ldrh	r3, [r3, #2]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f103 0018 	add.w	r0, r3, #24
 8001dd2:	4a4f      	ldr	r2, [pc, #316]	; (8001f10 <OV5640_SetPixelFormat+0x324>)
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001dda:	f107 020f 	add.w	r2, r7, #15
 8001dde:	2301      	movs	r3, #1
 8001de0:	f001 fabe 	bl	8003360 <ov5640_write_reg>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <OV5640_SetPixelFormat+0x206>
            {
              ret = OV5640_ERROR;
 8001dea:	f04f 33ff 	mov.w	r3, #4294967295
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	e003      	b.n	8001dfa <OV5640_SetPixelFormat+0x20e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001df2:	2101      	movs	r1, #1
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f001 fa50 	bl	800329a <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d9d7      	bls.n	8001db6 <OV5640_SetPixelFormat+0x1ca>
            }
          }
        }
        break;
 8001e06:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	2b08      	cmp	r3, #8
 8001e0c:	d173      	bne.n	8001ef6 <OV5640_SetPixelFormat+0x30a>
    {
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f103 0018 	add.w	r0, r3, #24
 8001e14:	f107 020f 	add.w	r2, r7, #15
 8001e18:	2301      	movs	r3, #1
 8001e1a:	f643 0121 	movw	r1, #14369	; 0x3821
 8001e1e:	f001 fa88 	bl	8003332 <ov5640_read_reg>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <OV5640_SetPixelFormat+0x244>
      {
        ret = OV5640_ERROR;
 8001e28:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	e062      	b.n	8001ef6 <OV5640_SetPixelFormat+0x30a>
      }
      else
      {
        tmp |= (1 << 5);
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
 8001e32:	f043 0320 	orr.w	r3, r3, #32
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	73fb      	strb	r3, [r7, #15]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f103 0018 	add.w	r0, r3, #24
 8001e40:	f107 020f 	add.w	r2, r7, #15
 8001e44:	2301      	movs	r3, #1
 8001e46:	f643 0121 	movw	r1, #14369	; 0x3821
 8001e4a:	f001 fa89 	bl	8003360 <ov5640_write_reg>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <OV5640_SetPixelFormat+0x270>
        {
          ret = OV5640_ERROR;
 8001e54:	f04f 33ff 	mov.w	r3, #4294967295
 8001e58:	617b      	str	r3, [r7, #20]
 8001e5a:	e04c      	b.n	8001ef6 <OV5640_SetPixelFormat+0x30a>
        }
        else
        {
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f103 0018 	add.w	r0, r3, #24
 8001e62:	f107 020f 	add.w	r2, r7, #15
 8001e66:	2301      	movs	r3, #1
 8001e68:	f243 0102 	movw	r1, #12290	; 0x3002
 8001e6c:	f001 fa61 	bl	8003332 <ov5640_read_reg>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <OV5640_SetPixelFormat+0x292>
          {
            ret = OV5640_ERROR;
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	e03b      	b.n	8001ef6 <OV5640_SetPixelFormat+0x30a>
          }
          else
          {
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
 8001e80:	f023 031c 	bic.w	r3, r3, #28
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f103 0018 	add.w	r0, r3, #24
 8001e8e:	f107 020f 	add.w	r2, r7, #15
 8001e92:	2301      	movs	r3, #1
 8001e94:	f243 0102 	movw	r1, #12290	; 0x3002
 8001e98:	f001 fa62 	bl	8003360 <ov5640_write_reg>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <OV5640_SetPixelFormat+0x2be>
            {
              ret = OV5640_ERROR;
 8001ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	e025      	b.n	8001ef6 <OV5640_SetPixelFormat+0x30a>
            }
            else
            {
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f103 0018 	add.w	r0, r3, #24
 8001eb0:	f107 020f 	add.w	r2, r7, #15
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	f243 0106 	movw	r1, #12294	; 0x3006
 8001eba:	f001 fa3a 	bl	8003332 <ov5640_read_reg>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <OV5640_SetPixelFormat+0x2e0>
              {
                ret = OV5640_ERROR;
 8001ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	e014      	b.n	8001ef6 <OV5640_SetPixelFormat+0x30a>
              }
              else
              {
                tmp |= ((1 << 5) | (1 << 3));
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
 8001ece:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	73fb      	strb	r3, [r7, #15]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f103 0018 	add.w	r0, r3, #24
 8001edc:	f107 020f 	add.w	r2, r7, #15
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	f243 0106 	movw	r1, #12294	; 0x3006
 8001ee6:	f001 fa3b 	bl	8003360 <ov5640_write_reg>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d002      	beq.n	8001ef6 <OV5640_SetPixelFormat+0x30a>
                {
                  ret = OV5640_ERROR;
 8001ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef4:	617b      	str	r3, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 8001ef6:	697b      	ldr	r3, [r7, #20]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	08014b10 	.word	0x08014b10
 8001f04:	08014b18 	.word	0x08014b18
 8001f08:	08014b20 	.word	0x08014b20
 8001f0c:	08014b28 	.word	0x08014b28
 8001f10:	08014b30 	.word	0x08014b30

08001f14 <OV5640_GetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_GetPixelFormat(OV5640_Object_t *pObj, uint32_t *PixelFormat)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(PixelFormat);

  return OV5640_ERROR;
 8001f1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
	...

08001f30 <OV5640_SetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_SetResolution(OV5640_Object_t *pObj, uint32_t Resolution)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	2b04      	cmp	r3, #4
 8001f42:	d903      	bls.n	8001f4c <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 8001f44:	f04f 33ff 	mov.w	r3, #4294967295
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	e0d8      	b.n	80020fe <OV5640_SetResolution+0x1ce>
  }
  else
  {
    /* Initialize OV5640 */
    switch (Resolution)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	f200 80d1 	bhi.w	80020f6 <OV5640_SetResolution+0x1c6>
 8001f54:	a201      	add	r2, pc, #4	; (adr r2, 8001f5c <OV5640_SetResolution+0x2c>)
 8001f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f5a:	bf00      	nop
 8001f5c:	08001f71 	.word	0x08001f71
 8001f60:	08001fbf 	.word	0x08001fbf
 8001f64:	0800200d 	.word	0x0800200d
 8001f68:	0800205b 	.word	0x0800205b
 8001f6c:	080020a9 	.word	0x080020a9
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8001f70:	2300      	movs	r3, #0
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	e01f      	b.n	8001fb6 <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f7c:	d018      	beq.n	8001fb0 <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8001f7e:	4a62      	ldr	r2, [pc, #392]	; (8002108 <OV5640_SetResolution+0x1d8>)
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	885b      	ldrh	r3, [r3, #2]
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f103 0018 	add.w	r0, r3, #24
 8001f92:	4a5d      	ldr	r2, [pc, #372]	; (8002108 <OV5640_SetResolution+0x1d8>)
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001f9a:	f107 020f 	add.w	r2, r7, #15
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	f001 f9de 	bl	8003360 <ov5640_write_reg>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d002      	beq.n	8001fb0 <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 8001faa:	f04f 33ff 	mov.w	r3, #4294967295
 8001fae:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	d9dc      	bls.n	8001f76 <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 8001fbc:	e09f      	b.n	80020fe <OV5640_SetResolution+0x1ce>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	e01f      	b.n	8002004 <OV5640_SetResolution+0xd4>
        {
          if (ret != OV5640_ERROR)
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fca:	d018      	beq.n	8001ffe <OV5640_SetResolution+0xce>
          {
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8001fcc:	4a4f      	ldr	r2, [pc, #316]	; (800210c <OV5640_SetResolution+0x1dc>)
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	885b      	ldrh	r3, [r3, #2]
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f103 0018 	add.w	r0, r3, #24
 8001fe0:	4a4a      	ldr	r2, [pc, #296]	; (800210c <OV5640_SetResolution+0x1dc>)
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001fe8:	f107 020f 	add.w	r2, r7, #15
 8001fec:	2301      	movs	r3, #1
 8001fee:	f001 f9b7 	bl	8003360 <ov5640_write_reg>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d002      	beq.n	8001ffe <OV5640_SetResolution+0xce>
            {
              ret = OV5640_ERROR;
 8001ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ffc:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	3301      	adds	r3, #1
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	2b03      	cmp	r3, #3
 8002008:	d9dc      	bls.n	8001fc4 <OV5640_SetResolution+0x94>
            }
          }
        }
        break;
 800200a:	e078      	b.n	80020fe <OV5640_SetResolution+0x1ce>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 800200c:	2300      	movs	r3, #0
 800200e:	613b      	str	r3, [r7, #16]
 8002010:	e01f      	b.n	8002052 <OV5640_SetResolution+0x122>
        {
          if (ret != OV5640_ERROR)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002018:	d018      	beq.n	800204c <OV5640_SetResolution+0x11c>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 800201a:	4a3d      	ldr	r2, [pc, #244]	; (8002110 <OV5640_SetResolution+0x1e0>)
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	885b      	ldrh	r3, [r3, #2]
 8002024:	b2db      	uxtb	r3, r3
 8002026:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f103 0018 	add.w	r0, r3, #24
 800202e:	4a38      	ldr	r2, [pc, #224]	; (8002110 <OV5640_SetResolution+0x1e0>)
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002036:	f107 020f 	add.w	r2, r7, #15
 800203a:	2301      	movs	r3, #1
 800203c:	f001 f990 	bl	8003360 <ov5640_write_reg>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d002      	beq.n	800204c <OV5640_SetResolution+0x11c>
            {
              ret = OV5640_ERROR;
 8002046:	f04f 33ff 	mov.w	r3, #4294967295
 800204a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	3301      	adds	r3, #1
 8002050:	613b      	str	r3, [r7, #16]
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	2b03      	cmp	r3, #3
 8002056:	d9dc      	bls.n	8002012 <OV5640_SetResolution+0xe2>
            }
          }
        }
        break;
 8002058:	e051      	b.n	80020fe <OV5640_SetResolution+0x1ce>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]
 800205e:	e01f      	b.n	80020a0 <OV5640_SetResolution+0x170>
        {
          if (ret != OV5640_ERROR)
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002066:	d018      	beq.n	800209a <OV5640_SetResolution+0x16a>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 8002068:	4a2a      	ldr	r2, [pc, #168]	; (8002114 <OV5640_SetResolution+0x1e4>)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	885b      	ldrh	r3, [r3, #2]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f103 0018 	add.w	r0, r3, #24
 800207c:	4a25      	ldr	r2, [pc, #148]	; (8002114 <OV5640_SetResolution+0x1e4>)
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002084:	f107 020f 	add.w	r2, r7, #15
 8002088:	2301      	movs	r3, #1
 800208a:	f001 f969 	bl	8003360 <ov5640_write_reg>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d002      	beq.n	800209a <OV5640_SetResolution+0x16a>
            {
              ret = OV5640_ERROR;
 8002094:	f04f 33ff 	mov.w	r3, #4294967295
 8002098:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	3301      	adds	r3, #1
 800209e:	613b      	str	r3, [r7, #16]
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	d9dc      	bls.n	8002060 <OV5640_SetResolution+0x130>
            }
          }
        }
        break;
 80020a6:	e02a      	b.n	80020fe <OV5640_SetResolution+0x1ce>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 80020a8:	2300      	movs	r3, #0
 80020aa:	613b      	str	r3, [r7, #16]
 80020ac:	e01f      	b.n	80020ee <OV5640_SetResolution+0x1be>
        {
          if (ret != OV5640_ERROR)
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b4:	d018      	beq.n	80020e8 <OV5640_SetResolution+0x1b8>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 80020b6:	4a18      	ldr	r2, [pc, #96]	; (8002118 <OV5640_SetResolution+0x1e8>)
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	885b      	ldrh	r3, [r3, #2]
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f103 0018 	add.w	r0, r3, #24
 80020ca:	4a13      	ldr	r2, [pc, #76]	; (8002118 <OV5640_SetResolution+0x1e8>)
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80020d2:	f107 020f 	add.w	r2, r7, #15
 80020d6:	2301      	movs	r3, #1
 80020d8:	f001 f942 	bl	8003360 <ov5640_write_reg>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d002      	beq.n	80020e8 <OV5640_SetResolution+0x1b8>
            {
              ret = OV5640_ERROR;
 80020e2:	f04f 33ff 	mov.w	r3, #4294967295
 80020e6:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	3301      	adds	r3, #1
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	2b03      	cmp	r3, #3
 80020f2:	d9dc      	bls.n	80020ae <OV5640_SetResolution+0x17e>
            }
          }
        }
        break;
 80020f4:	e003      	b.n	80020fe <OV5640_SetResolution+0x1ce>
      default:
        ret = OV5640_ERROR;
 80020f6:	f04f 33ff 	mov.w	r3, #4294967295
 80020fa:	617b      	str	r3, [r7, #20]
        break;
 80020fc:	bf00      	nop
    }
  }

  return ret;
 80020fe:	697b      	ldr	r3, [r7, #20]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	08014b38 	.word	0x08014b38
 800210c:	08014b48 	.word	0x08014b48
 8002110:	08014b58 	.word	0x08014b58
 8002114:	08014b68 	.word	0x08014b68
 8002118:	08014b78 	.word	0x08014b78

0800211c <OV5640_GetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_GetResolution(OV5640_Object_t *pObj, uint32_t *Resolution)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t x_size;
  uint16_t y_size;
  uint8_t tmp;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f103 0018 	add.w	r0, r3, #24
 800212c:	f107 020f 	add.w	r2, r7, #15
 8002130:	2301      	movs	r3, #1
 8002132:	f643 0108 	movw	r1, #14344	; 0x3808
 8002136:	f001 f8fc 	bl	8003332 <ov5640_read_reg>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <OV5640_GetResolution+0x2c>
  {
    ret = OV5640_ERROR;
 8002140:	f04f 33ff 	mov.w	r3, #4294967295
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	e08a      	b.n	800225e <OV5640_GetResolution+0x142>
  }
  else
  {
    x_size = (uint16_t)tmp << 8U;
 8002148:	7bfb      	ldrb	r3, [r7, #15]
 800214a:	b29b      	uxth	r3, r3
 800214c:	021b      	lsls	r3, r3, #8
 800214e:	827b      	strh	r3, [r7, #18]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f103 0018 	add.w	r0, r3, #24
 8002156:	f107 020f 	add.w	r2, r7, #15
 800215a:	2301      	movs	r3, #1
 800215c:	f643 0109 	movw	r1, #14345	; 0x3809
 8002160:	f001 f8e7 	bl	8003332 <ov5640_read_reg>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <OV5640_GetResolution+0x56>
    {
      ret = OV5640_ERROR;
 800216a:	f04f 33ff 	mov.w	r3, #4294967295
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	e075      	b.n	800225e <OV5640_GetResolution+0x142>
    }
    else
    {
      x_size |= tmp;
 8002172:	7bfb      	ldrb	r3, [r7, #15]
 8002174:	b29a      	uxth	r2, r3
 8002176:	8a7b      	ldrh	r3, [r7, #18]
 8002178:	4313      	orrs	r3, r2
 800217a:	827b      	strh	r3, [r7, #18]

      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f103 0018 	add.w	r0, r3, #24
 8002182:	f107 020f 	add.w	r2, r7, #15
 8002186:	2301      	movs	r3, #1
 8002188:	f643 010a 	movw	r1, #14346	; 0x380a
 800218c:	f001 f8d1 	bl	8003332 <ov5640_read_reg>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <OV5640_GetResolution+0x82>
      {
        ret = OV5640_ERROR;
 8002196:	f04f 33ff 	mov.w	r3, #4294967295
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	e05f      	b.n	800225e <OV5640_GetResolution+0x142>
      }
      else
      {
        y_size = (uint16_t)tmp << 8U;
 800219e:	7bfb      	ldrb	r3, [r7, #15]
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	021b      	lsls	r3, r3, #8
 80021a4:	823b      	strh	r3, [r7, #16]
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f103 0018 	add.w	r0, r3, #24
 80021ac:	f107 020f 	add.w	r2, r7, #15
 80021b0:	2301      	movs	r3, #1
 80021b2:	f643 010b 	movw	r1, #14347	; 0x380b
 80021b6:	f001 f8bc 	bl	8003332 <ov5640_read_reg>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d003      	beq.n	80021c8 <OV5640_GetResolution+0xac>
        {
          ret = OV5640_ERROR;
 80021c0:	f04f 33ff 	mov.w	r3, #4294967295
 80021c4:	617b      	str	r3, [r7, #20]
 80021c6:	e04a      	b.n	800225e <OV5640_GetResolution+0x142>
        }
        else
        {
          y_size |= tmp;
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	8a3b      	ldrh	r3, [r7, #16]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	823b      	strh	r3, [r7, #16]

          if ((x_size == 800U) && (y_size == 480U))
 80021d2:	8a7b      	ldrh	r3, [r7, #18]
 80021d4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80021d8:	d109      	bne.n	80021ee <OV5640_GetResolution+0xd2>
 80021da:	8a3b      	ldrh	r3, [r7, #16]
 80021dc:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80021e0:	d105      	bne.n	80021ee <OV5640_GetResolution+0xd2>
          {
            *Resolution = OV5640_R800x480;
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	2204      	movs	r2, #4
 80021e6:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	e037      	b.n	800225e <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 640U) && (y_size == 480U))
 80021ee:	8a7b      	ldrh	r3, [r7, #18]
 80021f0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80021f4:	d109      	bne.n	800220a <OV5640_GetResolution+0xee>
 80021f6:	8a3b      	ldrh	r3, [r7, #16]
 80021f8:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80021fc:	d105      	bne.n	800220a <OV5640_GetResolution+0xee>
          {
            *Resolution = OV5640_R640x480;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	2203      	movs	r2, #3
 8002202:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	e029      	b.n	800225e <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 480U) && (y_size == 272U))
 800220a:	8a7b      	ldrh	r3, [r7, #18]
 800220c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002210:	d109      	bne.n	8002226 <OV5640_GetResolution+0x10a>
 8002212:	8a3b      	ldrh	r3, [r7, #16]
 8002214:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8002218:	d105      	bne.n	8002226 <OV5640_GetResolution+0x10a>
          {
            *Resolution = OV5640_R480x272;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	2202      	movs	r2, #2
 800221e:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	e01b      	b.n	800225e <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 320U) && (y_size == 240U))
 8002226:	8a7b      	ldrh	r3, [r7, #18]
 8002228:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800222c:	d108      	bne.n	8002240 <OV5640_GetResolution+0x124>
 800222e:	8a3b      	ldrh	r3, [r7, #16]
 8002230:	2bf0      	cmp	r3, #240	; 0xf0
 8002232:	d105      	bne.n	8002240 <OV5640_GetResolution+0x124>
          {
            *Resolution = OV5640_R320x240;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	2201      	movs	r2, #1
 8002238:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
 800223e:	e00e      	b.n	800225e <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 160U) && (y_size == 120U))
 8002240:	8a7b      	ldrh	r3, [r7, #18]
 8002242:	2ba0      	cmp	r3, #160	; 0xa0
 8002244:	d108      	bne.n	8002258 <OV5640_GetResolution+0x13c>
 8002246:	8a3b      	ldrh	r3, [r7, #16]
 8002248:	2b78      	cmp	r3, #120	; 0x78
 800224a:	d105      	bne.n	8002258 <OV5640_GetResolution+0x13c>
          {
            *Resolution = OV5640_R160x120;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
 8002256:	e002      	b.n	800225e <OV5640_GetResolution+0x142>
          }
          else
          {
            ret = OV5640_ERROR;
 8002258:	f04f 33ff 	mov.w	r3, #4294967295
 800225c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 800225e:	697b      	ldr	r3, [r7, #20]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <OV5640_SetPolarities>:
  * @param  VsyncPolarity Polarity of the Vsync
  * @retval Component status
  */
int32_t OV5640_SetPolarities(OV5640_Object_t *pObj, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
 8002274:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]

  if ((pObj == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d011      	beq.n	80022a4 <OV5640_SetPolarities+0x3c>
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d002      	beq.n	800228c <OV5640_SetPolarities+0x24>
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d10b      	bne.n	80022a4 <OV5640_SetPolarities+0x3c>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d002      	beq.n	8002298 <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d105      	bne.n	80022a4 <OV5640_SetPolarities+0x3c>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d006      	beq.n	80022ac <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 80022a4:	f04f 33ff 	mov.w	r3, #4294967295
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	e01e      	b.n	80022ea <OV5640_SetPolarities+0x82>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	015b      	lsls	r3, r3, #5
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	4313      	orrs	r3, r2
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	4313      	orrs	r3, r2
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	74fb      	strb	r3, [r7, #19]

    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f103 0018 	add.w	r0, r3, #24
 80022d0:	f107 0213 	add.w	r2, r7, #19
 80022d4:	2301      	movs	r3, #1
 80022d6:	f244 7140 	movw	r1, #18240	; 0x4740
 80022da:	f001 f841 	bl	8003360 <ov5640_write_reg>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d002      	beq.n	80022ea <OV5640_SetPolarities+0x82>
    {
      ret = OV5640_ERROR;
 80022e4:	f04f 33ff 	mov.w	r3, #4294967295
 80022e8:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80022ea:	697b      	ldr	r3, [r7, #20]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <OV5640_ReadID>:
  * @param  pObj  pointer to component object
  * @param  Id    pointer to component ID
  * @retval Component status
  */
int32_t OV5640_ReadID(OV5640_Object_t *pObj, uint32_t *Id)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  /* Initialize I2C */
  pObj->IO.Init();
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4798      	blx	r3

  /* Prepare the camera to be configured */
  tmp = 0x80;
 8002304:	2380      	movs	r3, #128	; 0x80
 8002306:	72fb      	strb	r3, [r7, #11]
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f103 0018 	add.w	r0, r3, #24
 800230e:	f107 020b 	add.w	r2, r7, #11
 8002312:	2301      	movs	r3, #1
 8002314:	f243 0108 	movw	r1, #12296	; 0x3008
 8002318:	f001 f822 	bl	8003360 <ov5640_write_reg>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <OV5640_ReadID+0x36>
  {
    ret = OV5640_ERROR;
 8002322:	f04f 33ff 	mov.w	r3, #4294967295
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	e032      	b.n	8002390 <OV5640_ReadID+0x9c>
  }
  else
  {
    (void)OV5640_Delay(pObj, 500);
 800232a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 ffb3 	bl	800329a <OV5640_Delay>

    if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f103 0018 	add.w	r0, r3, #24
 800233a:	f107 020b 	add.w	r2, r7, #11
 800233e:	2301      	movs	r3, #1
 8002340:	f243 010a 	movw	r1, #12298	; 0x300a
 8002344:	f000 fff5 	bl	8003332 <ov5640_read_reg>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <OV5640_ReadID+0x62>
    {
      ret = OV5640_ERROR;
 800234e:	f04f 33ff 	mov.w	r3, #4294967295
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	e01c      	b.n	8002390 <OV5640_ReadID+0x9c>
    }
    else
    {
      *Id = (uint32_t)tmp << 8U;
 8002356:	7afb      	ldrb	r3, [r7, #11]
 8002358:	021a      	lsls	r2, r3, #8
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	601a      	str	r2, [r3, #0]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f103 0018 	add.w	r0, r3, #24
 8002364:	f107 020b 	add.w	r2, r7, #11
 8002368:	2301      	movs	r3, #1
 800236a:	f243 010b 	movw	r1, #12299	; 0x300b
 800236e:	f000 ffe0 	bl	8003332 <ov5640_read_reg>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d003      	beq.n	8002380 <OV5640_ReadID+0x8c>
      {
        ret = OV5640_ERROR;
 8002378:	f04f 33ff 	mov.w	r3, #4294967295
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	e007      	b.n	8002390 <OV5640_ReadID+0x9c>
      }
      else
      {
        *Id |= tmp;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	7afa      	ldrb	r2, [r7, #11]
 8002386:	431a      	orrs	r2, r3
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	601a      	str	r2, [r3, #0]
        ret = OV5640_OK;
 800238c:	2300      	movs	r3, #0
 800238e:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Component status */
  return ret;
 8002390:	68fb      	ldr	r3, [r7, #12]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <OV5640_GetCapabilities>:
  * @param  pObj          pointer to component object
  * @param  Capabilities  pointer to component Capabilities
  * @retval Component status
  */
int32_t OV5640_GetCapabilities(OV5640_Object_t *pObj, OV5640_Capabilities_t *Capabilities)
{
 800239a:	b480      	push	{r7}
 800239c:	b085      	sub	sp, #20
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d103      	bne.n	80023b2 <OV5640_GetCapabilities+0x18>
  {
    ret = OV5640_ERROR;
 80023aa:	f04f 33ff 	mov.w	r3, #4294967295
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	e01f      	b.n	80023f2 <OV5640_GetCapabilities+0x58>
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	2201      	movs	r2, #1
 80023b6:	60da      	str	r2, [r3, #12]
    Capabilities->Config_Contrast      = 1;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	2201      	movs	r2, #1
 80023bc:	615a      	str	r2, [r3, #20]
    Capabilities->Config_HueDegree     = 1;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	2201      	movs	r2, #1
 80023c2:	619a      	str	r2, [r3, #24]
    Capabilities->Config_LightMode     = 1;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	2201      	movs	r2, #1
 80023c8:	605a      	str	r2, [r3, #4]
    Capabilities->Config_MirrorFlip    = 1;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	2201      	movs	r2, #1
 80023ce:	61da      	str	r2, [r3, #28]
    Capabilities->Config_NightMode     = 1;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	2201      	movs	r2, #1
 80023d4:	625a      	str	r2, [r3, #36]	; 0x24
    Capabilities->Config_Resolution    = 1;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	2201      	movs	r2, #1
 80023da:	601a      	str	r2, [r3, #0]
    Capabilities->Config_Saturation    = 1;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	2201      	movs	r2, #1
 80023e0:	611a      	str	r2, [r3, #16]
    Capabilities->Config_SpecialEffect = 1;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	2201      	movs	r2, #1
 80023e6:	609a      	str	r2, [r3, #8]
    Capabilities->Config_Zoom          = 1;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	2201      	movs	r2, #1
 80023ec:	621a      	str	r2, [r3, #32]

    ret = OV5640_OK;
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80023f2:	68fb      	ldr	r3, [r7, #12]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <OV5640_SetLightMode>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetLightMode(OV5640_Object_t *pObj, uint32_t LightMode)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
    {OV5640_AWB_G_GAIN_LSB, 0x00},
    {OV5640_AWB_B_GAIN_MSB, 0x04},
    {OV5640_AWB_B_GAIN_LSB, 0xF3},
  };

  tmp = 0x00;
 800240a:	2300      	movs	r3, #0
 800240c:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f103 0018 	add.w	r0, r3, #24
 8002414:	f107 020f 	add.w	r2, r7, #15
 8002418:	2301      	movs	r3, #1
 800241a:	f243 4106 	movw	r1, #13318	; 0x3406
 800241e:	f000 ff9f 	bl	8003360 <ov5640_write_reg>
 8002422:	6178      	str	r0, [r7, #20]
  if (ret == OV5640_OK)
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10c      	bne.n	8002444 <OV5640_SetLightMode+0x44>
  {
    tmp = 0x46;
 800242a:	2346      	movs	r3, #70	; 0x46
 800242c:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f103 0018 	add.w	r0, r3, #24
 8002434:	f107 020f 	add.w	r2, r7, #15
 8002438:	2301      	movs	r3, #1
 800243a:	f245 1190 	movw	r1, #20880	; 0x5190
 800243e:	f000 ff8f 	bl	8003360 <ov5640_write_reg>
 8002442:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10c      	bne.n	8002464 <OV5640_SetLightMode+0x64>
  {
    tmp = 0xF8;
 800244a:	23f8      	movs	r3, #248	; 0xf8
 800244c:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f103 0018 	add.w	r0, r3, #24
 8002454:	f107 020f 	add.w	r2, r7, #15
 8002458:	2301      	movs	r3, #1
 800245a:	f245 1191 	movw	r1, #20881	; 0x5191
 800245e:	f000 ff7f 	bl	8003360 <ov5640_write_reg>
 8002462:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10c      	bne.n	8002484 <OV5640_SetLightMode+0x84>
  {
    tmp = 0x04;
 800246a:	2304      	movs	r3, #4
 800246c:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f103 0018 	add.w	r0, r3, #24
 8002474:	f107 020f 	add.w	r2, r7, #15
 8002478:	2301      	movs	r3, #1
 800247a:	f245 1192 	movw	r1, #20882	; 0x5192
 800247e:	f000 ff6f 	bl	8003360 <ov5640_write_reg>
 8002482:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	2b00      	cmp	r3, #0
 8002488:	f040 80db 	bne.w	8002642 <OV5640_SetLightMode+0x242>
  {
    switch (LightMode)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	3b01      	subs	r3, #1
 8002490:	2b07      	cmp	r3, #7
 8002492:	f200 80af 	bhi.w	80025f4 <OV5640_SetLightMode+0x1f4>
 8002496:	a201      	add	r2, pc, #4	; (adr r2, 800249c <OV5640_SetLightMode+0x9c>)
 8002498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800249c:	080024bd 	.word	0x080024bd
 80024a0:	0800250b 	.word	0x0800250b
 80024a4:	080025f5 	.word	0x080025f5
 80024a8:	080025a7 	.word	0x080025a7
 80024ac:	080025f5 	.word	0x080025f5
 80024b0:	080025f5 	.word	0x080025f5
 80024b4:	080025f5 	.word	0x080025f5
 80024b8:	08002559 	.word	0x08002559
    {
      case OV5640_LIGHT_SUNNY:
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 80024bc:	2300      	movs	r3, #0
 80024be:	613b      	str	r3, [r7, #16]
 80024c0:	e01f      	b.n	8002502 <OV5640_SetLightMode+0x102>
        {
          if (ret != OV5640_ERROR)
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c8:	d018      	beq.n	80024fc <OV5640_SetLightMode+0xfc>
          {
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 80024ca:	4a61      	ldr	r2, [pc, #388]	; (8002650 <OV5640_SetLightMode+0x250>)
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	885b      	ldrh	r3, [r3, #2]
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f103 0018 	add.w	r0, r3, #24
 80024de:	4a5c      	ldr	r2, [pc, #368]	; (8002650 <OV5640_SetLightMode+0x250>)
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80024e6:	f107 020f 	add.w	r2, r7, #15
 80024ea:	2301      	movs	r3, #1
 80024ec:	f000 ff38 	bl	8003360 <ov5640_write_reg>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d002      	beq.n	80024fc <OV5640_SetLightMode+0xfc>
            {
              ret = OV5640_ERROR;
 80024f6:	f04f 33ff 	mov.w	r3, #4294967295
 80024fa:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	3301      	adds	r3, #1
 8002500:	613b      	str	r3, [r7, #16]
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	2b06      	cmp	r3, #6
 8002506:	d9dc      	bls.n	80024c2 <OV5640_SetLightMode+0xc2>
            }
          }
        }
        break;
 8002508:	e09c      	b.n	8002644 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_OFFICE:
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 800250a:	2300      	movs	r3, #0
 800250c:	613b      	str	r3, [r7, #16]
 800250e:	e01f      	b.n	8002550 <OV5640_SetLightMode+0x150>
        {
          if (ret != OV5640_ERROR)
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002516:	d018      	beq.n	800254a <OV5640_SetLightMode+0x14a>
          {
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 8002518:	4a4e      	ldr	r2, [pc, #312]	; (8002654 <OV5640_SetLightMode+0x254>)
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	885b      	ldrh	r3, [r3, #2]
 8002522:	b2db      	uxtb	r3, r3
 8002524:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f103 0018 	add.w	r0, r3, #24
 800252c:	4a49      	ldr	r2, [pc, #292]	; (8002654 <OV5640_SetLightMode+0x254>)
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002534:	f107 020f 	add.w	r2, r7, #15
 8002538:	2301      	movs	r3, #1
 800253a:	f000 ff11 	bl	8003360 <ov5640_write_reg>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d002      	beq.n	800254a <OV5640_SetLightMode+0x14a>
            {
              ret = OV5640_ERROR;
 8002544:	f04f 33ff 	mov.w	r3, #4294967295
 8002548:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	3301      	adds	r3, #1
 800254e:	613b      	str	r3, [r7, #16]
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	2b06      	cmp	r3, #6
 8002554:	d9dc      	bls.n	8002510 <OV5640_SetLightMode+0x110>
            }
          }
        }
        break;
 8002556:	e075      	b.n	8002644 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_CLOUDY:
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8002558:	2300      	movs	r3, #0
 800255a:	613b      	str	r3, [r7, #16]
 800255c:	e01f      	b.n	800259e <OV5640_SetLightMode+0x19e>
        {
          if (ret != OV5640_ERROR)
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002564:	d018      	beq.n	8002598 <OV5640_SetLightMode+0x198>
          {
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8002566:	4a3c      	ldr	r2, [pc, #240]	; (8002658 <OV5640_SetLightMode+0x258>)
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	885b      	ldrh	r3, [r3, #2]
 8002570:	b2db      	uxtb	r3, r3
 8002572:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f103 0018 	add.w	r0, r3, #24
 800257a:	4a37      	ldr	r2, [pc, #220]	; (8002658 <OV5640_SetLightMode+0x258>)
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002582:	f107 020f 	add.w	r2, r7, #15
 8002586:	2301      	movs	r3, #1
 8002588:	f000 feea 	bl	8003360 <ov5640_write_reg>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d002      	beq.n	8002598 <OV5640_SetLightMode+0x198>
            {
              ret = OV5640_ERROR;
 8002592:	f04f 33ff 	mov.w	r3, #4294967295
 8002596:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	3301      	adds	r3, #1
 800259c:	613b      	str	r3, [r7, #16]
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	2b06      	cmp	r3, #6
 80025a2:	d9dc      	bls.n	800255e <OV5640_SetLightMode+0x15e>
            }
          }
        }
        break;
 80025a4:	e04e      	b.n	8002644 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_HOME:
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 80025a6:	2300      	movs	r3, #0
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	e01f      	b.n	80025ec <OV5640_SetLightMode+0x1ec>
        {
          if (ret != OV5640_ERROR)
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b2:	d018      	beq.n	80025e6 <OV5640_SetLightMode+0x1e6>
          {
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 80025b4:	4a29      	ldr	r2, [pc, #164]	; (800265c <OV5640_SetLightMode+0x25c>)
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	885b      	ldrh	r3, [r3, #2]
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f103 0018 	add.w	r0, r3, #24
 80025c8:	4a24      	ldr	r2, [pc, #144]	; (800265c <OV5640_SetLightMode+0x25c>)
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80025d0:	f107 020f 	add.w	r2, r7, #15
 80025d4:	2301      	movs	r3, #1
 80025d6:	f000 fec3 	bl	8003360 <ov5640_write_reg>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d002      	beq.n	80025e6 <OV5640_SetLightMode+0x1e6>
            {
              ret = OV5640_ERROR;
 80025e0:	f04f 33ff 	mov.w	r3, #4294967295
 80025e4:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	3301      	adds	r3, #1
 80025ea:	613b      	str	r3, [r7, #16]
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	2b06      	cmp	r3, #6
 80025f0:	d9dc      	bls.n	80025ac <OV5640_SetLightMode+0x1ac>
            }
          }
        }
        break;
 80025f2:	e027      	b.n	8002644 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_AUTO:
      default :
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 80025f4:	2300      	movs	r3, #0
 80025f6:	613b      	str	r3, [r7, #16]
 80025f8:	e01f      	b.n	800263a <OV5640_SetLightMode+0x23a>
        {
          if (ret != OV5640_ERROR)
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002600:	d018      	beq.n	8002634 <OV5640_SetLightMode+0x234>
          {
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 8002602:	4a17      	ldr	r2, [pc, #92]	; (8002660 <OV5640_SetLightMode+0x260>)
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	885b      	ldrh	r3, [r3, #2]
 800260c:	b2db      	uxtb	r3, r3
 800260e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f103 0018 	add.w	r0, r3, #24
 8002616:	4a12      	ldr	r2, [pc, #72]	; (8002660 <OV5640_SetLightMode+0x260>)
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800261e:	f107 020f 	add.w	r2, r7, #15
 8002622:	2301      	movs	r3, #1
 8002624:	f000 fe9c 	bl	8003360 <ov5640_write_reg>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d002      	beq.n	8002634 <OV5640_SetLightMode+0x234>
            {
              ret = OV5640_ERROR;
 800262e:	f04f 33ff 	mov.w	r3, #4294967295
 8002632:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	3301      	adds	r3, #1
 8002638:	613b      	str	r3, [r7, #16]
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	2b06      	cmp	r3, #6
 800263e:	d9dc      	bls.n	80025fa <OV5640_SetLightMode+0x1fa>
            }
          }
        }
        break;
 8002640:	e000      	b.n	8002644 <OV5640_SetLightMode+0x244>
    }
  }
 8002642:	bf00      	nop
  return ret;
 8002644:	697b      	ldr	r3, [r7, #20]
}
 8002646:	4618      	mov	r0, r3
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	08014b88 	.word	0x08014b88
 8002654:	08014ba4 	.word	0x08014ba4
 8002658:	08014bc0 	.word	0x08014bc0
 800265c:	08014bdc 	.word	0x08014bdc
 8002660:	08014bf8 	.word	0x08014bf8

08002664 <OV5640_SetColorEffect>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetColorEffect(OV5640_Object_t *pObj, uint32_t Effect)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  switch (Effect)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	3b01      	subs	r3, #1
 8002672:	2b1f      	cmp	r3, #31
 8002674:	f200 81c0 	bhi.w	80029f8 <OV5640_SetColorEffect+0x394>
 8002678:	a201      	add	r2, pc, #4	; (adr r2, 8002680 <OV5640_SetColorEffect+0x1c>)
 800267a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800267e:	bf00      	nop
 8002680:	08002701 	.word	0x08002701
 8002684:	0800278b 	.word	0x0800278b
 8002688:	080029f9 	.word	0x080029f9
 800268c:	08002815 	.word	0x08002815
 8002690:	080029f9 	.word	0x080029f9
 8002694:	080029f9 	.word	0x080029f9
 8002698:	080029f9 	.word	0x080029f9
 800269c:	0800289f 	.word	0x0800289f
 80026a0:	080029f9 	.word	0x080029f9
 80026a4:	080029f9 	.word	0x080029f9
 80026a8:	080029f9 	.word	0x080029f9
 80026ac:	080029f9 	.word	0x080029f9
 80026b0:	080029f9 	.word	0x080029f9
 80026b4:	080029f9 	.word	0x080029f9
 80026b8:	080029f9 	.word	0x080029f9
 80026bc:	08002929 	.word	0x08002929
 80026c0:	080029f9 	.word	0x080029f9
 80026c4:	080029f9 	.word	0x080029f9
 80026c8:	080029f9 	.word	0x080029f9
 80026cc:	080029f9 	.word	0x080029f9
 80026d0:	080029f9 	.word	0x080029f9
 80026d4:	080029f9 	.word	0x080029f9
 80026d8:	080029f9 	.word	0x080029f9
 80026dc:	080029f9 	.word	0x080029f9
 80026e0:	080029f9 	.word	0x080029f9
 80026e4:	080029f9 	.word	0x080029f9
 80026e8:	080029f9 	.word	0x080029f9
 80026ec:	080029f9 	.word	0x080029f9
 80026f0:	080029f9 	.word	0x080029f9
 80026f4:	080029f9 	.word	0x080029f9
 80026f8:	080029f9 	.word	0x080029f9
 80026fc:	080029b1 	.word	0x080029b1
  {
    case OV5640_COLOR_EFFECT_BLUE:
      tmp = 0xFF;
 8002700:	23ff      	movs	r3, #255	; 0xff
 8002702:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f103 0018 	add.w	r0, r3, #24
 800270a:	f107 020b 	add.w	r2, r7, #11
 800270e:	2301      	movs	r3, #1
 8002710:	f245 0101 	movw	r1, #20481	; 0x5001
 8002714:	f000 fe24 	bl	8003360 <ov5640_write_reg>
 8002718:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10c      	bne.n	800273a <OV5640_SetColorEffect+0xd6>
      {
        tmp = 0x18;
 8002720:	2318      	movs	r3, #24
 8002722:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f103 0018 	add.w	r0, r3, #24
 800272a:	f107 020b 	add.w	r2, r7, #11
 800272e:	2301      	movs	r3, #1
 8002730:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002734:	f000 fe14 	bl	8003360 <ov5640_write_reg>
 8002738:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10c      	bne.n	800275a <OV5640_SetColorEffect+0xf6>
      {
        tmp = 0xA0;
 8002740:	23a0      	movs	r3, #160	; 0xa0
 8002742:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f103 0018 	add.w	r0, r3, #24
 800274a:	f107 020b 	add.w	r2, r7, #11
 800274e:	2301      	movs	r3, #1
 8002750:	f245 5183 	movw	r1, #21891	; 0x5583
 8002754:	f000 fe04 	bl	8003360 <ov5640_write_reg>
 8002758:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10c      	bne.n	800277a <OV5640_SetColorEffect+0x116>
      {
        tmp = 0x40;
 8002760:	2340      	movs	r3, #64	; 0x40
 8002762:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f103 0018 	add.w	r0, r3, #24
 800276a:	f107 020b 	add.w	r2, r7, #11
 800276e:	2301      	movs	r3, #1
 8002770:	f245 5184 	movw	r1, #21892	; 0x5584
 8002774:	f000 fdf4 	bl	8003360 <ov5640_write_reg>
 8002778:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 815f 	beq.w	8002a40 <OV5640_SetColorEffect+0x3dc>
      {
        ret = OV5640_ERROR;
 8002782:	f04f 33ff 	mov.w	r3, #4294967295
 8002786:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002788:	e15a      	b.n	8002a40 <OV5640_SetColorEffect+0x3dc>

    case OV5640_COLOR_EFFECT_RED:
      tmp = 0xFF;
 800278a:	23ff      	movs	r3, #255	; 0xff
 800278c:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f103 0018 	add.w	r0, r3, #24
 8002794:	f107 020b 	add.w	r2, r7, #11
 8002798:	2301      	movs	r3, #1
 800279a:	f245 0101 	movw	r1, #20481	; 0x5001
 800279e:	f000 fddf 	bl	8003360 <ov5640_write_reg>
 80027a2:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10c      	bne.n	80027c4 <OV5640_SetColorEffect+0x160>
      {
        tmp = 0x18;
 80027aa:	2318      	movs	r3, #24
 80027ac:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f103 0018 	add.w	r0, r3, #24
 80027b4:	f107 020b 	add.w	r2, r7, #11
 80027b8:	2301      	movs	r3, #1
 80027ba:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80027be:	f000 fdcf 	bl	8003360 <ov5640_write_reg>
 80027c2:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10c      	bne.n	80027e4 <OV5640_SetColorEffect+0x180>
      {
        tmp = 0x80;
 80027ca:	2380      	movs	r3, #128	; 0x80
 80027cc:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f103 0018 	add.w	r0, r3, #24
 80027d4:	f107 020b 	add.w	r2, r7, #11
 80027d8:	2301      	movs	r3, #1
 80027da:	f245 5183 	movw	r1, #21891	; 0x5583
 80027de:	f000 fdbf 	bl	8003360 <ov5640_write_reg>
 80027e2:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10c      	bne.n	8002804 <OV5640_SetColorEffect+0x1a0>
      {
        tmp = 0xC0;
 80027ea:	23c0      	movs	r3, #192	; 0xc0
 80027ec:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f103 0018 	add.w	r0, r3, #24
 80027f4:	f107 020b 	add.w	r2, r7, #11
 80027f8:	2301      	movs	r3, #1
 80027fa:	f245 5184 	movw	r1, #21892	; 0x5584
 80027fe:	f000 fdaf 	bl	8003360 <ov5640_write_reg>
 8002802:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 811c 	beq.w	8002a44 <OV5640_SetColorEffect+0x3e0>
      {
        ret = OV5640_ERROR;
 800280c:	f04f 33ff 	mov.w	r3, #4294967295
 8002810:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002812:	e117      	b.n	8002a44 <OV5640_SetColorEffect+0x3e0>

    case OV5640_COLOR_EFFECT_GREEN:
      tmp = 0xFF;
 8002814:	23ff      	movs	r3, #255	; 0xff
 8002816:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f103 0018 	add.w	r0, r3, #24
 800281e:	f107 020b 	add.w	r2, r7, #11
 8002822:	2301      	movs	r3, #1
 8002824:	f245 0101 	movw	r1, #20481	; 0x5001
 8002828:	f000 fd9a 	bl	8003360 <ov5640_write_reg>
 800282c:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10c      	bne.n	800284e <OV5640_SetColorEffect+0x1ea>
      {
        tmp = 0x18;
 8002834:	2318      	movs	r3, #24
 8002836:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f103 0018 	add.w	r0, r3, #24
 800283e:	f107 020b 	add.w	r2, r7, #11
 8002842:	2301      	movs	r3, #1
 8002844:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002848:	f000 fd8a 	bl	8003360 <ov5640_write_reg>
 800284c:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10c      	bne.n	800286e <OV5640_SetColorEffect+0x20a>
      {
        tmp = 0x60;
 8002854:	2360      	movs	r3, #96	; 0x60
 8002856:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f103 0018 	add.w	r0, r3, #24
 800285e:	f107 020b 	add.w	r2, r7, #11
 8002862:	2301      	movs	r3, #1
 8002864:	f245 5183 	movw	r1, #21891	; 0x5583
 8002868:	f000 fd7a 	bl	8003360 <ov5640_write_reg>
 800286c:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10c      	bne.n	800288e <OV5640_SetColorEffect+0x22a>
      {
        tmp = 0x60;
 8002874:	2360      	movs	r3, #96	; 0x60
 8002876:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f103 0018 	add.w	r0, r3, #24
 800287e:	f107 020b 	add.w	r2, r7, #11
 8002882:	2301      	movs	r3, #1
 8002884:	f245 5184 	movw	r1, #21892	; 0x5584
 8002888:	f000 fd6a 	bl	8003360 <ov5640_write_reg>
 800288c:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 80d9 	beq.w	8002a48 <OV5640_SetColorEffect+0x3e4>
      {
        ret = OV5640_ERROR;
 8002896:	f04f 33ff 	mov.w	r3, #4294967295
 800289a:	60fb      	str	r3, [r7, #12]
      }
      break;
 800289c:	e0d4      	b.n	8002a48 <OV5640_SetColorEffect+0x3e4>

    case OV5640_COLOR_EFFECT_BW:
      tmp = 0xFF;
 800289e:	23ff      	movs	r3, #255	; 0xff
 80028a0:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f103 0018 	add.w	r0, r3, #24
 80028a8:	f107 020b 	add.w	r2, r7, #11
 80028ac:	2301      	movs	r3, #1
 80028ae:	f245 0101 	movw	r1, #20481	; 0x5001
 80028b2:	f000 fd55 	bl	8003360 <ov5640_write_reg>
 80028b6:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10c      	bne.n	80028d8 <OV5640_SetColorEffect+0x274>
      {
        tmp = 0x18;
 80028be:	2318      	movs	r3, #24
 80028c0:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f103 0018 	add.w	r0, r3, #24
 80028c8:	f107 020b 	add.w	r2, r7, #11
 80028cc:	2301      	movs	r3, #1
 80028ce:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80028d2:	f000 fd45 	bl	8003360 <ov5640_write_reg>
 80028d6:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10c      	bne.n	80028f8 <OV5640_SetColorEffect+0x294>
      {
        tmp = 0x80;
 80028de:	2380      	movs	r3, #128	; 0x80
 80028e0:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f103 0018 	add.w	r0, r3, #24
 80028e8:	f107 020b 	add.w	r2, r7, #11
 80028ec:	2301      	movs	r3, #1
 80028ee:	f245 5183 	movw	r1, #21891	; 0x5583
 80028f2:	f000 fd35 	bl	8003360 <ov5640_write_reg>
 80028f6:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10c      	bne.n	8002918 <OV5640_SetColorEffect+0x2b4>
      {
        tmp = 0x80;
 80028fe:	2380      	movs	r3, #128	; 0x80
 8002900:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f103 0018 	add.w	r0, r3, #24
 8002908:	f107 020b 	add.w	r2, r7, #11
 800290c:	2301      	movs	r3, #1
 800290e:	f245 5184 	movw	r1, #21892	; 0x5584
 8002912:	f000 fd25 	bl	8003360 <ov5640_write_reg>
 8002916:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2b00      	cmp	r3, #0
 800291c:	f000 8096 	beq.w	8002a4c <OV5640_SetColorEffect+0x3e8>
      {
        ret = OV5640_ERROR;
 8002920:	f04f 33ff 	mov.w	r3, #4294967295
 8002924:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002926:	e091      	b.n	8002a4c <OV5640_SetColorEffect+0x3e8>

    case OV5640_COLOR_EFFECT_SEPIA:
      tmp = 0xFF;
 8002928:	23ff      	movs	r3, #255	; 0xff
 800292a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f103 0018 	add.w	r0, r3, #24
 8002932:	f107 020b 	add.w	r2, r7, #11
 8002936:	2301      	movs	r3, #1
 8002938:	f245 0101 	movw	r1, #20481	; 0x5001
 800293c:	f000 fd10 	bl	8003360 <ov5640_write_reg>
 8002940:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10c      	bne.n	8002962 <OV5640_SetColorEffect+0x2fe>
      {
        tmp = 0x18;
 8002948:	2318      	movs	r3, #24
 800294a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f103 0018 	add.w	r0, r3, #24
 8002952:	f107 020b 	add.w	r2, r7, #11
 8002956:	2301      	movs	r3, #1
 8002958:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800295c:	f000 fd00 	bl	8003360 <ov5640_write_reg>
 8002960:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10c      	bne.n	8002982 <OV5640_SetColorEffect+0x31e>
      {
        tmp = 0x40;
 8002968:	2340      	movs	r3, #64	; 0x40
 800296a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f103 0018 	add.w	r0, r3, #24
 8002972:	f107 020b 	add.w	r2, r7, #11
 8002976:	2301      	movs	r3, #1
 8002978:	f245 5183 	movw	r1, #21891	; 0x5583
 800297c:	f000 fcf0 	bl	8003360 <ov5640_write_reg>
 8002980:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10c      	bne.n	80029a2 <OV5640_SetColorEffect+0x33e>
      {
        tmp = 0xA0;
 8002988:	23a0      	movs	r3, #160	; 0xa0
 800298a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f103 0018 	add.w	r0, r3, #24
 8002992:	f107 020b 	add.w	r2, r7, #11
 8002996:	2301      	movs	r3, #1
 8002998:	f245 5184 	movw	r1, #21892	; 0x5584
 800299c:	f000 fce0 	bl	8003360 <ov5640_write_reg>
 80029a0:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d053      	beq.n	8002a50 <OV5640_SetColorEffect+0x3ec>
      {
        ret = OV5640_ERROR;
 80029a8:	f04f 33ff 	mov.w	r3, #4294967295
 80029ac:	60fb      	str	r3, [r7, #12]
      }
      break;
 80029ae:	e04f      	b.n	8002a50 <OV5640_SetColorEffect+0x3ec>

    case OV5640_COLOR_EFFECT_NEGATIVE:
      tmp = 0xFF;
 80029b0:	23ff      	movs	r3, #255	; 0xff
 80029b2:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f103 0018 	add.w	r0, r3, #24
 80029ba:	f107 020b 	add.w	r2, r7, #11
 80029be:	2301      	movs	r3, #1
 80029c0:	f245 0101 	movw	r1, #20481	; 0x5001
 80029c4:	f000 fccc 	bl	8003360 <ov5640_write_reg>
 80029c8:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10c      	bne.n	80029ea <OV5640_SetColorEffect+0x386>
      {
        tmp = 0x40;
 80029d0:	2340      	movs	r3, #64	; 0x40
 80029d2:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f103 0018 	add.w	r0, r3, #24
 80029da:	f107 020b 	add.w	r2, r7, #11
 80029de:	2301      	movs	r3, #1
 80029e0:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80029e4:	f000 fcbc 	bl	8003360 <ov5640_write_reg>
 80029e8:	60f8      	str	r0, [r7, #12]
      }
      if (ret != OV5640_OK)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d031      	beq.n	8002a54 <OV5640_SetColorEffect+0x3f0>
      {
        ret = OV5640_ERROR;
 80029f0:	f04f 33ff 	mov.w	r3, #4294967295
 80029f4:	60fb      	str	r3, [r7, #12]
      }
      break;
 80029f6:	e02d      	b.n	8002a54 <OV5640_SetColorEffect+0x3f0>

    case OV5640_COLOR_EFFECT_NONE:
    default :
      tmp = 0x7F;
 80029f8:	237f      	movs	r3, #127	; 0x7f
 80029fa:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f103 0018 	add.w	r0, r3, #24
 8002a02:	f107 020b 	add.w	r2, r7, #11
 8002a06:	2301      	movs	r3, #1
 8002a08:	f245 0101 	movw	r1, #20481	; 0x5001
 8002a0c:	f000 fca8 	bl	8003360 <ov5640_write_reg>
 8002a10:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10c      	bne.n	8002a32 <OV5640_SetColorEffect+0x3ce>
      {
        tmp = 0x00;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f103 0018 	add.w	r0, r3, #24
 8002a22:	f107 020b 	add.w	r2, r7, #11
 8002a26:	2301      	movs	r3, #1
 8002a28:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002a2c:	f000 fc98 	bl	8003360 <ov5640_write_reg>
 8002a30:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00f      	beq.n	8002a58 <OV5640_SetColorEffect+0x3f4>
      {
        ret = OV5640_ERROR;
 8002a38:	f04f 33ff 	mov.w	r3, #4294967295
 8002a3c:	60fb      	str	r3, [r7, #12]
      }

      break;
 8002a3e:	e00b      	b.n	8002a58 <OV5640_SetColorEffect+0x3f4>
      break;
 8002a40:	bf00      	nop
 8002a42:	e00a      	b.n	8002a5a <OV5640_SetColorEffect+0x3f6>
      break;
 8002a44:	bf00      	nop
 8002a46:	e008      	b.n	8002a5a <OV5640_SetColorEffect+0x3f6>
      break;
 8002a48:	bf00      	nop
 8002a4a:	e006      	b.n	8002a5a <OV5640_SetColorEffect+0x3f6>
      break;
 8002a4c:	bf00      	nop
 8002a4e:	e004      	b.n	8002a5a <OV5640_SetColorEffect+0x3f6>
      break;
 8002a50:	bf00      	nop
 8002a52:	e002      	b.n	8002a5a <OV5640_SetColorEffect+0x3f6>
      break;
 8002a54:	bf00      	nop
 8002a56:	e000      	b.n	8002a5a <OV5640_SetColorEffect+0x3f6>
      break;
 8002a58:	bf00      	nop
  }

  return ret;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <OV5640_SetBrightness>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetBrightness(OV5640_Object_t *pObj, int32_t Level)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b088      	sub	sp, #32
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8002a6e:	4a34      	ldr	r2, [pc, #208]	; (8002b40 <OV5640_SetBrightness+0xdc>)
 8002a70:	f107 0310 	add.w	r3, r7, #16
 8002a74:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a76:	c303      	stmia	r3!, {r0, r1}
 8002a78:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 8002a7a:	23ff      	movs	r3, #255	; 0xff
 8002a7c:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f103 0018 	add.w	r0, r3, #24
 8002a84:	f107 020f 	add.w	r2, r7, #15
 8002a88:	2301      	movs	r3, #1
 8002a8a:	f245 0101 	movw	r1, #20481	; 0x5001
 8002a8e:	f000 fc67 	bl	8003360 <ov5640_write_reg>
 8002a92:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d111      	bne.n	8002abe <OV5640_SetBrightness+0x5a>
  {
    tmp = brightness_level[Level + 4];
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	3320      	adds	r3, #32
 8002aa0:	443b      	add	r3, r7
 8002aa2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002aa6:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f103 0018 	add.w	r0, r3, #24
 8002aae:	f107 020f 	add.w	r2, r7, #15
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	f245 5187 	movw	r1, #21895	; 0x5587
 8002ab8:	f000 fc52 	bl	8003360 <ov5640_write_reg>
 8002abc:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10c      	bne.n	8002ade <OV5640_SetBrightness+0x7a>
  {
    tmp = 0x04;
 8002ac4:	2304      	movs	r3, #4
 8002ac6:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f103 0018 	add.w	r0, r3, #24
 8002ace:	f107 020f 	add.w	r2, r7, #15
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002ad8:	f000 fc42 	bl	8003360 <ov5640_write_reg>
 8002adc:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d127      	bne.n	8002b34 <OV5640_SetBrightness+0xd0>
  {
    if (Level < 0)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	da12      	bge.n	8002b10 <OV5640_SetBrightness+0xac>
    {
      tmp = 0x01;
 8002aea:	2301      	movs	r3, #1
 8002aec:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f103 0018 	add.w	r0, r3, #24
 8002af4:	f107 020f 	add.w	r2, r7, #15
 8002af8:	2301      	movs	r3, #1
 8002afa:	f245 5188 	movw	r1, #21896	; 0x5588
 8002afe:	f000 fc2f 	bl	8003360 <ov5640_write_reg>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d015      	beq.n	8002b34 <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 8002b08:	f04f 33ff 	mov.w	r3, #4294967295
 8002b0c:	61fb      	str	r3, [r7, #28]
 8002b0e:	e011      	b.n	8002b34 <OV5640_SetBrightness+0xd0>
      }
    }
    else
    {
      tmp = 0x09;
 8002b10:	2309      	movs	r3, #9
 8002b12:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f103 0018 	add.w	r0, r3, #24
 8002b1a:	f107 020f 	add.w	r2, r7, #15
 8002b1e:	2301      	movs	r3, #1
 8002b20:	f245 5188 	movw	r1, #21896	; 0x5588
 8002b24:	f000 fc1c 	bl	8003360 <ov5640_write_reg>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 8002b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b32:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ret;
 8002b34:	69fb      	ldr	r3, [r7, #28]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3720      	adds	r7, #32
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	080145c0 	.word	0x080145c0

08002b44 <OV5640_SetSaturation>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetSaturation(OV5640_Object_t *pObj, int32_t Level)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b088      	sub	sp, #32
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 8002b4e:	4a30      	ldr	r2, [pc, #192]	; (8002c10 <OV5640_SetSaturation+0xcc>)
 8002b50:	f107 0310 	add.w	r3, r7, #16
 8002b54:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b56:	c303      	stmia	r3!, {r0, r1}
 8002b58:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 8002b5a:	23ff      	movs	r3, #255	; 0xff
 8002b5c:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f103 0018 	add.w	r0, r3, #24
 8002b64:	f107 020f 	add.w	r2, r7, #15
 8002b68:	2301      	movs	r3, #1
 8002b6a:	f245 0101 	movw	r1, #20481	; 0x5001
 8002b6e:	f000 fbf7 	bl	8003360 <ov5640_write_reg>
 8002b72:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d111      	bne.n	8002b9e <OV5640_SetSaturation+0x5a>
  {
    tmp = saturation_level[Level + 4];
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	3304      	adds	r3, #4
 8002b7e:	3320      	adds	r3, #32
 8002b80:	443b      	add	r3, r7
 8002b82:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002b86:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f103 0018 	add.w	r0, r3, #24
 8002b8e:	f107 020f 	add.w	r2, r7, #15
 8002b92:	2301      	movs	r3, #1
 8002b94:	f245 5183 	movw	r1, #21891	; 0x5583
 8002b98:	f000 fbe2 	bl	8003360 <ov5640_write_reg>
 8002b9c:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10a      	bne.n	8002bba <OV5640_SetSaturation+0x76>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f103 0018 	add.w	r0, r3, #24
 8002baa:	f107 020f 	add.w	r2, r7, #15
 8002bae:	2301      	movs	r3, #1
 8002bb0:	f245 5184 	movw	r1, #21892	; 0x5584
 8002bb4:	f000 fbd4 	bl	8003360 <ov5640_write_reg>
 8002bb8:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10c      	bne.n	8002bda <OV5640_SetSaturation+0x96>
  {
    tmp = 0x02;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f103 0018 	add.w	r0, r3, #24
 8002bca:	f107 020f 	add.w	r2, r7, #15
 8002bce:	2301      	movs	r3, #1
 8002bd0:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002bd4:	f000 fbc4 	bl	8003360 <ov5640_write_reg>
 8002bd8:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10c      	bne.n	8002bfa <OV5640_SetSaturation+0xb6>
  {
    tmp = 0x41;
 8002be0:	2341      	movs	r3, #65	; 0x41
 8002be2:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f103 0018 	add.w	r0, r3, #24
 8002bea:	f107 020f 	add.w	r2, r7, #15
 8002bee:	2301      	movs	r3, #1
 8002bf0:	f245 5188 	movw	r1, #21896	; 0x5588
 8002bf4:	f000 fbb4 	bl	8003360 <ov5640_write_reg>
 8002bf8:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d002      	beq.n	8002c06 <OV5640_SetSaturation+0xc2>
  {
    ret = OV5640_ERROR;
 8002c00:	f04f 33ff 	mov.w	r3, #4294967295
 8002c04:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8002c06:	69fb      	ldr	r3, [r7, #28]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3720      	adds	r7, #32
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	080145cc 	.word	0x080145cc

08002c14 <OV5640_SetContrast>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetContrast(OV5640_Object_t *pObj, int32_t Level)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 8002c1e:	4a30      	ldr	r2, [pc, #192]	; (8002ce0 <OV5640_SetContrast+0xcc>)
 8002c20:	f107 0310 	add.w	r3, r7, #16
 8002c24:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c26:	c303      	stmia	r3!, {r0, r1}
 8002c28:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 8002c2a:	23ff      	movs	r3, #255	; 0xff
 8002c2c:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f103 0018 	add.w	r0, r3, #24
 8002c34:	f107 020f 	add.w	r2, r7, #15
 8002c38:	2301      	movs	r3, #1
 8002c3a:	f245 0101 	movw	r1, #20481	; 0x5001
 8002c3e:	f000 fb8f 	bl	8003360 <ov5640_write_reg>
 8002c42:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10c      	bne.n	8002c64 <OV5640_SetContrast+0x50>
  {
    tmp = 0x04;
 8002c4a:	2304      	movs	r3, #4
 8002c4c:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f103 0018 	add.w	r0, r3, #24
 8002c54:	f107 020f 	add.w	r2, r7, #15
 8002c58:	2301      	movs	r3, #1
 8002c5a:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002c5e:	f000 fb7f 	bl	8003360 <ov5640_write_reg>
 8002c62:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d111      	bne.n	8002c8e <OV5640_SetContrast+0x7a>
  {
    tmp = contrast_level[Level + 4];
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	3320      	adds	r3, #32
 8002c70:	443b      	add	r3, r7
 8002c72:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002c76:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f103 0018 	add.w	r0, r3, #24
 8002c7e:	f107 020f 	add.w	r2, r7, #15
 8002c82:	2301      	movs	r3, #1
 8002c84:	f245 5186 	movw	r1, #21894	; 0x5586
 8002c88:	f000 fb6a 	bl	8003360 <ov5640_write_reg>
 8002c8c:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d10a      	bne.n	8002caa <OV5640_SetContrast+0x96>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL5, &tmp, 1);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f103 0018 	add.w	r0, r3, #24
 8002c9a:	f107 020f 	add.w	r2, r7, #15
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	f245 5185 	movw	r1, #21893	; 0x5585
 8002ca4:	f000 fb5c 	bl	8003360 <ov5640_write_reg>
 8002ca8:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10c      	bne.n	8002cca <OV5640_SetContrast+0xb6>
  {
    tmp = 0x41;
 8002cb0:	2341      	movs	r3, #65	; 0x41
 8002cb2:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f103 0018 	add.w	r0, r3, #24
 8002cba:	f107 020f 	add.w	r2, r7, #15
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	f245 5188 	movw	r1, #21896	; 0x5588
 8002cc4:	f000 fb4c 	bl	8003360 <ov5640_write_reg>
 8002cc8:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d002      	beq.n	8002cd6 <OV5640_SetContrast+0xc2>
  {
    ret = OV5640_ERROR;
 8002cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd4:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8002cd6:	69fb      	ldr	r3, [r7, #28]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3720      	adds	r7, #32
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	080145d8 	.word	0x080145d8

08002ce4 <OV5640_SetHueDegree>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetHueDegree(OV5640_Object_t *pObj, int32_t Degree)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08e      	sub	sp, #56	; 0x38
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 8002cee:	4a3c      	ldr	r2, [pc, #240]	; (8002de0 <OV5640_SetHueDegree+0xfc>)
 8002cf0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cf4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002cf6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x6FU
                                     };
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 8002cfa:	4a3a      	ldr	r2, [pc, #232]	; (8002de4 <OV5640_SetHueDegree+0x100>)
 8002cfc:	f107 031c 	add.w	r3, r7, #28
 8002d00:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d02:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x40U
                                     };
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 8002d06:	4a38      	ldr	r2, [pc, #224]	; (8002de8 <OV5640_SetHueDegree+0x104>)
 8002d08:	f107 0310 	add.w	r3, r7, #16
 8002d0c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x31U
                                     };
  uint8_t tmp;

  tmp = 0xFF;
 8002d12:	23ff      	movs	r3, #255	; 0xff
 8002d14:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f103 0018 	add.w	r0, r3, #24
 8002d1c:	f107 020f 	add.w	r2, r7, #15
 8002d20:	2301      	movs	r3, #1
 8002d22:	f245 0101 	movw	r1, #20481	; 0x5001
 8002d26:	f000 fb1b 	bl	8003360 <ov5640_write_reg>
 8002d2a:	6378      	str	r0, [r7, #52]	; 0x34

  if (ret == OV5640_OK)
 8002d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10c      	bne.n	8002d4c <OV5640_SetHueDegree+0x68>
  {
    tmp = 0x01;
 8002d32:	2301      	movs	r3, #1
 8002d34:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f103 0018 	add.w	r0, r3, #24
 8002d3c:	f107 020f 	add.w	r2, r7, #15
 8002d40:	2301      	movs	r3, #1
 8002d42:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002d46:	f000 fb0b 	bl	8003360 <ov5640_write_reg>
 8002d4a:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8002d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d111      	bne.n	8002d76 <OV5640_SetHueDegree+0x92>
  {
    tmp = hue_degree_ctrl1[Degree + 6];
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	3306      	adds	r3, #6
 8002d56:	3338      	adds	r3, #56	; 0x38
 8002d58:	443b      	add	r3, r7
 8002d5a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002d5e:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f103 0018 	add.w	r0, r3, #24
 8002d66:	f107 020f 	add.w	r2, r7, #15
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	f245 5181 	movw	r1, #21889	; 0x5581
 8002d70:	f000 faf6 	bl	8003360 <ov5640_write_reg>
 8002d74:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8002d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d111      	bne.n	8002da0 <OV5640_SetHueDegree+0xbc>
  {
    tmp = hue_degree_ctrl2[Degree + 6];
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	3306      	adds	r3, #6
 8002d80:	3338      	adds	r3, #56	; 0x38
 8002d82:	443b      	add	r3, r7
 8002d84:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002d88:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f103 0018 	add.w	r0, r3, #24
 8002d90:	f107 020f 	add.w	r2, r7, #15
 8002d94:	2301      	movs	r3, #1
 8002d96:	f245 5182 	movw	r1, #21890	; 0x5582
 8002d9a:	f000 fae1 	bl	8003360 <ov5640_write_reg>
 8002d9e:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8002da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d111      	bne.n	8002dca <OV5640_SetHueDegree+0xe6>
  {
    tmp = hue_degree_ctrl8[Degree + 6];
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	3306      	adds	r3, #6
 8002daa:	3338      	adds	r3, #56	; 0x38
 8002dac:	443b      	add	r3, r7
 8002dae:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002db2:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f103 0018 	add.w	r0, r3, #24
 8002dba:	f107 020f 	add.w	r2, r7, #15
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	f245 5188 	movw	r1, #21896	; 0x5588
 8002dc4:	f000 facc 	bl	8003360 <ov5640_write_reg>
 8002dc8:	6378      	str	r0, [r7, #52]	; 0x34
  }

  if (ret != OV5640_OK)
 8002dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <OV5640_SetHueDegree+0xf2>
  {
    ret = OV5640_ERROR;
 8002dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  return ret;
 8002dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3738      	adds	r7, #56	; 0x38
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	080145e4 	.word	0x080145e4
 8002de4:	080145f0 	.word	0x080145f0
 8002de8:	080145fc 	.word	0x080145fc

08002dec <OV5640_MirrorFlipConfig>:
  * @param  pObj  pointer to component object
  * @param  Config To configure mirror, flip, both or none
  * @retval Component status
  */
int32_t OV5640_MirrorFlipConfig(OV5640_Object_t *pObj, uint32_t Config)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp3820 = 0;
 8002df6:	2300      	movs	r3, #0
 8002df8:	72fb      	strb	r3, [r7, #11]
  uint8_t tmp3821;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f103 0018 	add.w	r0, r3, #24
 8002e00:	f107 020b 	add.w	r2, r7, #11
 8002e04:	2301      	movs	r3, #1
 8002e06:	f643 0120 	movw	r1, #14368	; 0x3820
 8002e0a:	f000 fa92 	bl	8003332 <ov5640_read_reg>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <OV5640_MirrorFlipConfig+0x30>
  {
    ret = OV5640_ERROR;
 8002e14:	f04f 33ff 	mov.w	r3, #4294967295
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	e0cb      	b.n	8002fb4 <OV5640_MirrorFlipConfig+0x1c8>
  }
  else
  {
    tmp3820 &= 0xF9U;
 8002e1c:	7afb      	ldrb	r3, [r7, #11]
 8002e1e:	f023 0306 	bic.w	r3, r3, #6
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	72fb      	strb	r3, [r7, #11]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f103 0018 	add.w	r0, r3, #24
 8002e2c:	f107 020a 	add.w	r2, r7, #10
 8002e30:	2301      	movs	r3, #1
 8002e32:	f643 0121 	movw	r1, #14369	; 0x3821
 8002e36:	f000 fa7c 	bl	8003332 <ov5640_read_reg>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d003      	beq.n	8002e48 <OV5640_MirrorFlipConfig+0x5c>
    {
      ret = OV5640_ERROR;
 8002e40:	f04f 33ff 	mov.w	r3, #4294967295
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	e0b5      	b.n	8002fb4 <OV5640_MirrorFlipConfig+0x1c8>
    }
    else
    {
      ret = OV5640_OK;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	60fb      	str	r3, [r7, #12]
      tmp3821 &= 0xF9U;
 8002e4c:	7abb      	ldrb	r3, [r7, #10]
 8002e4e:	f023 0306 	bic.w	r3, r3, #6
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	72bb      	strb	r3, [r7, #10]

      switch (Config)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	2b03      	cmp	r3, #3
 8002e5a:	d056      	beq.n	8002f0a <OV5640_MirrorFlipConfig+0x11e>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	2b03      	cmp	r3, #3
 8002e60:	d87f      	bhi.n	8002f62 <OV5640_MirrorFlipConfig+0x176>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d029      	beq.n	8002ebc <OV5640_MirrorFlipConfig+0xd0>
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d179      	bne.n	8002f62 <OV5640_MirrorFlipConfig+0x176>
      {
        case OV5640_MIRROR:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f103 0018 	add.w	r0, r3, #24
 8002e74:	f107 020b 	add.w	r2, r7, #11
 8002e78:	2301      	movs	r3, #1
 8002e7a:	f643 0120 	movw	r1, #14368	; 0x3820
 8002e7e:	f000 fa6f 	bl	8003360 <ov5640_write_reg>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <OV5640_MirrorFlipConfig+0xa4>
          {
            ret = OV5640_ERROR;
 8002e88:	f04f 33ff 	mov.w	r3, #4294967295
 8002e8c:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002e8e:	e08a      	b.n	8002fa6 <OV5640_MirrorFlipConfig+0x1ba>
            tmp3821 |= 0x06U;
 8002e90:	7abb      	ldrb	r3, [r7, #10]
 8002e92:	f043 0306 	orr.w	r3, r3, #6
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f103 0018 	add.w	r0, r3, #24
 8002ea0:	f107 020a 	add.w	r2, r7, #10
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	f643 0121 	movw	r1, #14369	; 0x3821
 8002eaa:	f000 fa59 	bl	8003360 <ov5640_write_reg>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d078      	beq.n	8002fa6 <OV5640_MirrorFlipConfig+0x1ba>
              ret = OV5640_ERROR;
 8002eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8002eb8:	60fb      	str	r3, [r7, #12]
          break;
 8002eba:	e074      	b.n	8002fa6 <OV5640_MirrorFlipConfig+0x1ba>
        case OV5640_FLIP:
          tmp3820 |= 0x06U;
 8002ebc:	7afb      	ldrb	r3, [r7, #11]
 8002ebe:	f043 0306 	orr.w	r3, r3, #6
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f103 0018 	add.w	r0, r3, #24
 8002ecc:	f107 020b 	add.w	r2, r7, #11
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	f643 0120 	movw	r1, #14368	; 0x3820
 8002ed6:	f000 fa43 	bl	8003360 <ov5640_write_reg>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d003      	beq.n	8002ee8 <OV5640_MirrorFlipConfig+0xfc>
          {
            ret = OV5640_ERROR;
 8002ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee4:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002ee6:	e060      	b.n	8002faa <OV5640_MirrorFlipConfig+0x1be>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f103 0018 	add.w	r0, r3, #24
 8002eee:	f107 020a 	add.w	r2, r7, #10
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	f643 0121 	movw	r1, #14369	; 0x3821
 8002ef8:	f000 fa32 	bl	8003360 <ov5640_write_reg>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d053      	beq.n	8002faa <OV5640_MirrorFlipConfig+0x1be>
              ret = OV5640_ERROR;
 8002f02:	f04f 33ff 	mov.w	r3, #4294967295
 8002f06:	60fb      	str	r3, [r7, #12]
          break;
 8002f08:	e04f      	b.n	8002faa <OV5640_MirrorFlipConfig+0x1be>
        case OV5640_MIRROR_FLIP:
          tmp3820 |= 0x06U;
 8002f0a:	7afb      	ldrb	r3, [r7, #11]
 8002f0c:	f043 0306 	orr.w	r3, r3, #6
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f103 0018 	add.w	r0, r3, #24
 8002f1a:	f107 020b 	add.w	r2, r7, #11
 8002f1e:	2301      	movs	r3, #1
 8002f20:	f643 0120 	movw	r1, #14368	; 0x3820
 8002f24:	f000 fa1c 	bl	8003360 <ov5640_write_reg>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <OV5640_MirrorFlipConfig+0x14a>
          {
            ret = OV5640_ERROR;
 8002f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f32:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002f34:	e03b      	b.n	8002fae <OV5640_MirrorFlipConfig+0x1c2>
            tmp3821 |= 0x06U;
 8002f36:	7abb      	ldrb	r3, [r7, #10]
 8002f38:	f043 0306 	orr.w	r3, r3, #6
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f103 0018 	add.w	r0, r3, #24
 8002f46:	f107 020a 	add.w	r2, r7, #10
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	f643 0121 	movw	r1, #14369	; 0x3821
 8002f50:	f000 fa06 	bl	8003360 <ov5640_write_reg>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d029      	beq.n	8002fae <OV5640_MirrorFlipConfig+0x1c2>
              ret = OV5640_ERROR;
 8002f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f5e:	60fb      	str	r3, [r7, #12]
          break;
 8002f60:	e025      	b.n	8002fae <OV5640_MirrorFlipConfig+0x1c2>

        case OV5640_MIRROR_FLIP_NONE:
        default:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f103 0018 	add.w	r0, r3, #24
 8002f68:	f107 020b 	add.w	r2, r7, #11
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	f643 0120 	movw	r1, #14368	; 0x3820
 8002f72:	f000 f9f5 	bl	8003360 <ov5640_write_reg>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d003      	beq.n	8002f84 <OV5640_MirrorFlipConfig+0x198>
          {
            ret = OV5640_ERROR;
 8002f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f80:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002f82:	e016      	b.n	8002fb2 <OV5640_MirrorFlipConfig+0x1c6>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f103 0018 	add.w	r0, r3, #24
 8002f8a:	f107 020a 	add.w	r2, r7, #10
 8002f8e:	2301      	movs	r3, #1
 8002f90:	f643 0121 	movw	r1, #14369	; 0x3821
 8002f94:	f000 f9e4 	bl	8003360 <ov5640_write_reg>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d009      	beq.n	8002fb2 <OV5640_MirrorFlipConfig+0x1c6>
              ret = OV5640_ERROR;
 8002f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa2:	60fb      	str	r3, [r7, #12]
          break;
 8002fa4:	e005      	b.n	8002fb2 <OV5640_MirrorFlipConfig+0x1c6>
          break;
 8002fa6:	bf00      	nop
 8002fa8:	e004      	b.n	8002fb4 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002faa:	bf00      	nop
 8002fac:	e002      	b.n	8002fb4 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002fae:	bf00      	nop
 8002fb0:	e000      	b.n	8002fb4 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002fb2:	bf00      	nop
      }
    }
  }

  return ret;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <OV5640_ZoomConfig>:
  * @param  pObj  pointer to component object
  * @param  Zoom  Zoom to be configured
  * @retval Component status
  */
int32_t OV5640_ZoomConfig(OV5640_Object_t *pObj, uint32_t Zoom)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b086      	sub	sp, #24
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
 8002fc6:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]
  uint32_t res;
  uint32_t zoom;
  uint8_t tmp;

  /* Get camera resolution */
  if (OV5640_GetResolution(pObj, &res) != OV5640_OK)
 8002fcc:	f107 030c 	add.w	r3, r7, #12
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7ff f8a2 	bl	800211c <OV5640_GetResolution>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <OV5640_ZoomConfig+0x28>
  {
    ret = OV5640_ERROR;
 8002fde:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	e04e      	b.n	8003084 <OV5640_ZoomConfig+0xc6>
  }
  else
  {
    zoom = Zoom;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	613b      	str	r3, [r7, #16]

    if (zoom == OV5640_ZOOM_x1)
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	2b44      	cmp	r3, #68	; 0x44
 8002fee:	d112      	bne.n	8003016 <OV5640_ZoomConfig+0x58>
    {
      tmp = 0x10;
 8002ff0:	2310      	movs	r3, #16
 8002ff2:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f103 0018 	add.w	r0, r3, #24
 8002ffa:	f107 020b 	add.w	r2, r7, #11
 8002ffe:	2301      	movs	r3, #1
 8003000:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 8003004:	f000 f9ac 	bl	8003360 <ov5640_write_reg>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d03a      	beq.n	8003084 <OV5640_ZoomConfig+0xc6>
      {
        ret = OV5640_ERROR;
 800300e:	f04f 33ff 	mov.w	r3, #4294967295
 8003012:	617b      	str	r3, [r7, #20]
 8003014:	e036      	b.n	8003084 <OV5640_ZoomConfig+0xc6>
      }
    }
    else
    {
      switch (res)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2b02      	cmp	r3, #2
 800301a:	d802      	bhi.n	8003022 <OV5640_ZoomConfig+0x64>
 800301c:	2b00      	cmp	r3, #0
 800301e:	d103      	bne.n	8003028 <OV5640_ZoomConfig+0x6a>
          break;
        case OV5640_R640x480:
          zoom = zoom >> 2U;
          break;
        default:
          break;
 8003020:	e00a      	b.n	8003038 <OV5640_ZoomConfig+0x7a>
      switch (res)
 8003022:	2b03      	cmp	r3, #3
 8003024:	d004      	beq.n	8003030 <OV5640_ZoomConfig+0x72>
          break;
 8003026:	e007      	b.n	8003038 <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 1U;
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	085b      	lsrs	r3, r3, #1
 800302c:	613b      	str	r3, [r7, #16]
          break;
 800302e:	e003      	b.n	8003038 <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 2U;
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	089b      	lsrs	r3, r3, #2
 8003034:	613b      	str	r3, [r7, #16]
          break;
 8003036:	bf00      	nop
      }

      tmp = 0x00;
 8003038:	2300      	movs	r3, #0
 800303a:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f103 0018 	add.w	r0, r3, #24
 8003042:	f107 020b 	add.w	r2, r7, #11
 8003046:	2301      	movs	r3, #1
 8003048:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 800304c:	f000 f988 	bl	8003360 <ov5640_write_reg>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <OV5640_ZoomConfig+0xa0>
      {
        ret = OV5640_ERROR;
 8003056:	f04f 33ff 	mov.w	r3, #4294967295
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	e012      	b.n	8003084 <OV5640_ZoomConfig+0xc6>
      }
      else
      {
        tmp = (uint8_t)zoom;
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	b2db      	uxtb	r3, r3
 8003062:	72fb      	strb	r3, [r7, #11]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f103 0018 	add.w	r0, r3, #24
 800306a:	f107 020b 	add.w	r2, r7, #11
 800306e:	2301      	movs	r3, #1
 8003070:	f245 6101 	movw	r1, #22017	; 0x5601
 8003074:	f000 f974 	bl	8003360 <ov5640_write_reg>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d002      	beq.n	8003084 <OV5640_ZoomConfig+0xc6>
        {
          ret = OV5640_ERROR;
 800307e:	f04f 33ff 	mov.w	r3, #4294967295
 8003082:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 8003084:	697b      	ldr	r3, [r7, #20]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <OV5640_NightModeConfig>:
  * @param  pObj  pointer to component object
  * @param  Cmd   Enable disable night mode
  * @retval Component status
  */
int32_t OV5640_NightModeConfig(OV5640_Object_t *pObj, uint32_t Cmd)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b084      	sub	sp, #16
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp = 0;
 8003098:	2300      	movs	r3, #0
 800309a:	72fb      	strb	r3, [r7, #11]

  if (Cmd == NIGHT_MODE_ENABLE)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	f040 80ce 	bne.w	8003240 <OV5640_NightModeConfig+0x1b2>
  {
    /* Auto Frame Rate: 15fps ~ 3.75fps night mode for 60/50Hz light environment,
    24Mhz clock input,24Mhz PCLK*/
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL4, &tmp, 1);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f103 0018 	add.w	r0, r3, #24
 80030aa:	f107 020b 	add.w	r2, r7, #11
 80030ae:	2301      	movs	r3, #1
 80030b0:	f243 0138 	movw	r1, #12344	; 0x3038
 80030b4:	f000 f954 	bl	8003360 <ov5640_write_reg>
 80030b8:	60f8      	str	r0, [r7, #12]
    if (ret == OV5640_OK)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10a      	bne.n	80030d6 <OV5640_NightModeConfig+0x48>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL5, &tmp, 1);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f103 0018 	add.w	r0, r3, #24
 80030c6:	f107 020b 	add.w	r2, r7, #11
 80030ca:	2301      	movs	r3, #1
 80030cc:	f243 0139 	movw	r1, #12345	; 0x3039
 80030d0:	f000 f946 	bl	8003360 <ov5640_write_reg>
 80030d4:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10c      	bne.n	80030f6 <OV5640_NightModeConfig+0x68>
    {
      tmp = 0x7C;
 80030dc:	237c      	movs	r3, #124	; 0x7c
 80030de:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f103 0018 	add.w	r0, r3, #24
 80030e6:	f107 020b 	add.w	r2, r7, #11
 80030ea:	2301      	movs	r3, #1
 80030ec:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 80030f0:	f000 f936 	bl	8003360 <ov5640_write_reg>
 80030f4:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10c      	bne.n	8003116 <OV5640_NightModeConfig+0x88>
    {
      tmp = 0x01;
 80030fc:	2301      	movs	r3, #1
 80030fe:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f103 0018 	add.w	r0, r3, #24
 8003106:	f107 020b 	add.w	r2, r7, #11
 800310a:	2301      	movs	r3, #1
 800310c:	f643 2108 	movw	r1, #14856	; 0x3a08
 8003110:	f000 f926 	bl	8003360 <ov5640_write_reg>
 8003114:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d10c      	bne.n	8003136 <OV5640_NightModeConfig+0xa8>
    {
      tmp = 0x27;
 800311c:	2327      	movs	r3, #39	; 0x27
 800311e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f103 0018 	add.w	r0, r3, #24
 8003126:	f107 020b 	add.w	r2, r7, #11
 800312a:	2301      	movs	r3, #1
 800312c:	f643 2109 	movw	r1, #14857	; 0x3a09
 8003130:	f000 f916 	bl	8003360 <ov5640_write_reg>
 8003134:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10c      	bne.n	8003156 <OV5640_NightModeConfig+0xc8>
    {
      tmp = 0x00;
 800313c:	2300      	movs	r3, #0
 800313e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_HIGH, &tmp, 1);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f103 0018 	add.w	r0, r3, #24
 8003146:	f107 020b 	add.w	r2, r7, #11
 800314a:	2301      	movs	r3, #1
 800314c:	f643 210a 	movw	r1, #14858	; 0x3a0a
 8003150:	f000 f906 	bl	8003360 <ov5640_write_reg>
 8003154:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d10c      	bne.n	8003176 <OV5640_NightModeConfig+0xe8>
    {
      tmp = 0xF6;
 800315c:	23f6      	movs	r3, #246	; 0xf6
 800315e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f103 0018 	add.w	r0, r3, #24
 8003166:	f107 020b 	add.w	r2, r7, #11
 800316a:	2301      	movs	r3, #1
 800316c:	f643 210b 	movw	r1, #14859	; 0x3a0b
 8003170:	f000 f8f6 	bl	8003360 <ov5640_write_reg>
 8003174:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d10c      	bne.n	8003196 <OV5640_NightModeConfig+0x108>
    {
      tmp = 0x04;
 800317c:	2304      	movs	r3, #4
 800317e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f103 0018 	add.w	r0, r3, #24
 8003186:	f107 020b 	add.w	r2, r7, #11
 800318a:	2301      	movs	r3, #1
 800318c:	f643 210d 	movw	r1, #14861	; 0x3a0d
 8003190:	f000 f8e6 	bl	8003360 <ov5640_write_reg>
 8003194:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10a      	bne.n	80031b2 <OV5640_NightModeConfig+0x124>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0E, &tmp, 1);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f103 0018 	add.w	r0, r3, #24
 80031a2:	f107 020b 	add.w	r2, r7, #11
 80031a6:	2301      	movs	r3, #1
 80031a8:	f643 210e 	movw	r1, #14862	; 0x3a0e
 80031ac:	f000 f8d8 	bl	8003360 <ov5640_write_reg>
 80031b0:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10c      	bne.n	80031d2 <OV5640_NightModeConfig+0x144>
    {
      tmp = 0x0B;
 80031b8:	230b      	movs	r3, #11
 80031ba:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f103 0018 	add.w	r0, r3, #24
 80031c2:	f107 020b 	add.w	r2, r7, #11
 80031c6:	2301      	movs	r3, #1
 80031c8:	f643 2102 	movw	r1, #14850	; 0x3a02
 80031cc:	f000 f8c8 	bl	8003360 <ov5640_write_reg>
 80031d0:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10c      	bne.n	80031f2 <OV5640_NightModeConfig+0x164>
    {
      tmp = 0x88;
 80031d8:	2388      	movs	r3, #136	; 0x88
 80031da:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f103 0018 	add.w	r0, r3, #24
 80031e2:	f107 020b 	add.w	r2, r7, #11
 80031e6:	2301      	movs	r3, #1
 80031e8:	f643 2103 	movw	r1, #14851	; 0x3a03
 80031ec:	f000 f8b8 	bl	8003360 <ov5640_write_reg>
 80031f0:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10c      	bne.n	8003212 <OV5640_NightModeConfig+0x184>
    {
      tmp = 0x0B;
 80031f8:	230b      	movs	r3, #11
 80031fa:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f103 0018 	add.w	r0, r3, #24
 8003202:	f107 020b 	add.w	r2, r7, #11
 8003206:	2301      	movs	r3, #1
 8003208:	f643 2114 	movw	r1, #14868	; 0x3a14
 800320c:	f000 f8a8 	bl	8003360 <ov5640_write_reg>
 8003210:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10c      	bne.n	8003232 <OV5640_NightModeConfig+0x1a4>
    {
      tmp = 0x88;
 8003218:	2388      	movs	r3, #136	; 0x88
 800321a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f103 0018 	add.w	r0, r3, #24
 8003222:	f107 020b 	add.w	r2, r7, #11
 8003226:	2301      	movs	r3, #1
 8003228:	f643 2115 	movw	r1, #14869	; 0x3a15
 800322c:	f000 f898 	bl	8003360 <ov5640_write_reg>
 8003230:	60f8      	str	r0, [r7, #12]
    }
    if (ret != OV5640_OK)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d02b      	beq.n	8003290 <OV5640_NightModeConfig+0x202>
    {
      ret = OV5640_ERROR;
 8003238:	f04f 33ff 	mov.w	r3, #4294967295
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	e027      	b.n	8003290 <OV5640_NightModeConfig+0x202>
    }
  }
  else
  {
    if (ov5640_read_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f103 0018 	add.w	r0, r3, #24
 8003246:	f107 020b 	add.w	r2, r7, #11
 800324a:	2301      	movs	r3, #1
 800324c:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8003250:	f000 f86f 	bl	8003332 <ov5640_read_reg>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <OV5640_NightModeConfig+0x1d4>
    {
      ret = OV5640_ERROR;
 800325a:	f04f 33ff 	mov.w	r3, #4294967295
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	e016      	b.n	8003290 <OV5640_NightModeConfig+0x202>
    }
    else
    {
      ret = OV5640_OK;
 8003262:	2300      	movs	r3, #0
 8003264:	60fb      	str	r3, [r7, #12]
      tmp &= 0xFBU;
 8003266:	7afb      	ldrb	r3, [r7, #11]
 8003268:	f023 0304 	bic.w	r3, r3, #4
 800326c:	b2db      	uxtb	r3, r3
 800326e:	72fb      	strb	r3, [r7, #11]
      /* Set Bit 2 to 0 */
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f103 0018 	add.w	r0, r3, #24
 8003276:	f107 020b 	add.w	r2, r7, #11
 800327a:	2301      	movs	r3, #1
 800327c:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8003280:	f000 f86e 	bl	8003360 <ov5640_write_reg>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d002      	beq.n	8003290 <OV5640_NightModeConfig+0x202>
      {
        ret = OV5640_ERROR;
 800328a:	f04f 33ff 	mov.w	r3, #4294967295
 800328e:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8003290:	68fb      	ldr	r3, [r7, #12]
}
 8003292:	4618      	mov	r0, r3
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <OV5640_Delay>:
  * @param pObj   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval OV5640_OK
  */
static int32_t OV5640_Delay(OV5640_Object_t *pObj, uint32_t Delay)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b084      	sub	sp, #16
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
 80032a2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	4798      	blx	r3
 80032aa:	4603      	mov	r3, r0
 80032ac:	60fb      	str	r3, [r7, #12]
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 80032ae:	bf00      	nop
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	4798      	blx	r3
 80032b6:	4603      	mov	r3, r0
 80032b8:	461a      	mov	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d8f5      	bhi.n	80032b0 <OV5640_Delay+0x16>
  {
  }
  return OV5640_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <OV5640_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80032ce:	b590      	push	{r4, r7, lr}
 80032d0:	b087      	sub	sp, #28
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	60f8      	str	r0, [r7, #12]
 80032d6:	607a      	str	r2, [r7, #4]
 80032d8:	461a      	mov	r2, r3
 80032da:	460b      	mov	r3, r1
 80032dc:	817b      	strh	r3, [r7, #10]
 80032de:	4613      	mov	r3, r2
 80032e0:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	691c      	ldr	r4, [r3, #16]
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	8918      	ldrh	r0, [r3, #8]
 80032ee:	893b      	ldrh	r3, [r7, #8]
 80032f0:	8979      	ldrh	r1, [r7, #10]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	47a0      	blx	r4
 80032f6:	4603      	mov	r3, r0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	371c      	adds	r7, #28
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd90      	pop	{r4, r7, pc}

08003300 <OV5640_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003300:	b590      	push	{r4, r7, lr}
 8003302:	b087      	sub	sp, #28
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	607a      	str	r2, [r7, #4]
 800330a:	461a      	mov	r2, r3
 800330c:	460b      	mov	r3, r1
 800330e:	817b      	strh	r3, [r7, #10]
 8003310:	4613      	mov	r3, r2
 8003312:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	68dc      	ldr	r4, [r3, #12]
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	8918      	ldrh	r0, [r3, #8]
 8003320:	893b      	ldrh	r3, [r7, #8]
 8003322:	8979      	ldrh	r1, [r7, #10]
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	47a0      	blx	r4
 8003328:	4603      	mov	r3, r0
}
 800332a:	4618      	mov	r0, r3
 800332c:	371c      	adds	r7, #28
 800332e:	46bd      	mov	sp, r7
 8003330:	bd90      	pop	{r4, r7, pc}

08003332 <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8003332:	b590      	push	{r4, r7, lr}
 8003334:	b085      	sub	sp, #20
 8003336:	af00      	add	r7, sp, #0
 8003338:	60f8      	str	r0, [r7, #12]
 800333a:	607a      	str	r2, [r7, #4]
 800333c:	461a      	mov	r2, r3
 800333e:	460b      	mov	r3, r1
 8003340:	817b      	strh	r3, [r7, #10]
 8003342:	4613      	mov	r3, r2
 8003344:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	685c      	ldr	r4, [r3, #4]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6898      	ldr	r0, [r3, #8]
 800334e:	893b      	ldrh	r3, [r7, #8]
 8003350:	8979      	ldrh	r1, [r7, #10]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	47a0      	blx	r4
 8003356:	4603      	mov	r3, r0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	bd90      	pop	{r4, r7, pc}

08003360 <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8003360:	b590      	push	{r4, r7, lr}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	607a      	str	r2, [r7, #4]
 800336a:	461a      	mov	r2, r3
 800336c:	460b      	mov	r3, r1
 800336e:	817b      	strh	r3, [r7, #10]
 8003370:	4613      	mov	r3, r2
 8003372:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681c      	ldr	r4, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6898      	ldr	r0, [r3, #8]
 800337c:	893b      	ldrh	r3, [r7, #8]
 800337e:	8979      	ldrh	r1, [r7, #10]
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	47a0      	blx	r4
 8003384:	4603      	mov	r3, r0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	bd90      	pop	{r4, r7, pc}
	...

08003390 <postProcess>:
		uint32_t original_height,
		uint32_t scaled_width,
		uint32_t scaled_height,
		uint32_t grid_size,
		float probabilities[GRID_SIZE*GRID_SIZE*2]
){
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
 800339c:	603b      	str	r3, [r7, #0]
	if(scaled_width != scaled_height){
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	6a3b      	ldr	r3, [r7, #32]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d150      	bne.n	8003448 <postProcess+0xb8>
		return;
	}

	uint8_t pixels_per_grid = scaled_width/GRID_SIZE;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	4a2b      	ldr	r2, [pc, #172]	; (8003458 <postProcess+0xc8>)
 80033aa:	fba2 2303 	umull	r2, r3, r2, r3
 80033ae:	08db      	lsrs	r3, r3, #3
 80033b0:	74fb      	strb	r3, [r7, #19]
//			if(probabilities[j][i]>THRESHOLD){
//				drawCrosshair(buffer, ((i*pixels_per_grid+pixels_per_grid/2)*original_width)/scaled_width, ((j*pixels_per_grid+pixels_per_grid/2)*original_height)/scaled_height);
//			}
//		}
//	}
	for(uint32_t i = 1; i<GRID_SIZE*GRID_SIZE*2; i+=2){
 80033b2:	2301      	movs	r3, #1
 80033b4:	617b      	str	r3, [r7, #20]
 80033b6:	e042      	b.n	800343e <postProcess+0xae>
		if(probabilities[i]>THRESHOLD){
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033be:	4413      	add	r3, r2
 80033c0:	edd3 7a00 	vldr	s15, [r3]
 80033c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80033c8:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8003450 <postProcess+0xc0>
 80033cc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80033d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d4:	dd30      	ble.n	8003438 <postProcess+0xa8>
			drawCrosshair(buffer, ((((i%24+1)/2-1)*pixels_per_grid+pixels_per_grid/2)*original_width)/scaled_width, (((i/24))*pixels_per_grid+pixels_per_grid/2)*original_height/scaled_height);
 80033d6:	6979      	ldr	r1, [r7, #20]
 80033d8:	4b1f      	ldr	r3, [pc, #124]	; (8003458 <postProcess+0xc8>)
 80033da:	fba3 2301 	umull	r2, r3, r3, r1
 80033de:	091a      	lsrs	r2, r3, #4
 80033e0:	4613      	mov	r3, r2
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	4413      	add	r3, r2
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	1aca      	subs	r2, r1, r3
 80033ea:	1c53      	adds	r3, r2, #1
 80033ec:	085b      	lsrs	r3, r3, #1
 80033ee:	3b01      	subs	r3, #1
 80033f0:	7cfa      	ldrb	r2, [r7, #19]
 80033f2:	fb02 f303 	mul.w	r3, r2, r3
 80033f6:	7cfa      	ldrb	r2, [r7, #19]
 80033f8:	0852      	lsrs	r2, r2, #1
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	4413      	add	r3, r2
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	fb03 f202 	mul.w	r2, r3, r2
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	fbb2 f3f3 	udiv	r3, r2, r3
 800340a:	4619      	mov	r1, r3
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	4a12      	ldr	r2, [pc, #72]	; (8003458 <postProcess+0xc8>)
 8003410:	fba2 2303 	umull	r2, r3, r2, r3
 8003414:	091b      	lsrs	r3, r3, #4
 8003416:	7cfa      	ldrb	r2, [r7, #19]
 8003418:	fb02 f303 	mul.w	r3, r2, r3
 800341c:	7cfa      	ldrb	r2, [r7, #19]
 800341e:	0852      	lsrs	r2, r2, #1
 8003420:	b2d2      	uxtb	r2, r2
 8003422:	4413      	add	r3, r2
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	fb03 f202 	mul.w	r2, r3, r2
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003430:	461a      	mov	r2, r3
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f7fd fbe6 	bl	8000c04 <drawCrosshair>
	for(uint32_t i = 1; i<GRID_SIZE*GRID_SIZE*2; i+=2){
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	3302      	adds	r3, #2
 800343c:	617b      	str	r3, [r7, #20]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8003444:	d3b8      	bcc.n	80033b8 <postProcess+0x28>
 8003446:	e000      	b.n	800344a <postProcess+0xba>
		return;
 8003448:	bf00      	nop
	 *
	 *
	 *
	 *
	 */
}
 800344a:	3718      	adds	r7, #24
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	9999999a 	.word	0x9999999a
 8003454:	3fa99999 	.word	0x3fa99999
 8003458:	aaaaaaab 	.word	0xaaaaaaab

0800345c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8003464:	4a07      	ldr	r2, [pc, #28]	; (8003484 <RetargetInit+0x28>)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800346a:	4b07      	ldr	r3, [pc, #28]	; (8003488 <RetargetInit+0x2c>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6898      	ldr	r0, [r3, #8]
 8003470:	2300      	movs	r3, #0
 8003472:	2202      	movs	r2, #2
 8003474:	2100      	movs	r1, #0
 8003476:	f010 f899 	bl	80135ac <setvbuf>
}
 800347a:	bf00      	nop
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	2400b914 	.word	0x2400b914
 8003488:	24002654 	.word	0x24002654

0800348c <_isatty>:

int _isatty(int fd) {
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	db04      	blt.n	80034a4 <_isatty+0x18>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b02      	cmp	r3, #2
 800349e:	dc01      	bgt.n	80034a4 <_isatty+0x18>
    return 1;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e005      	b.n	80034b0 <_isatty+0x24>

  errno = EBADF;
 80034a4:	f00f febc 	bl	8013220 <__errno>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2209      	movs	r2, #9
 80034ac:	601a      	str	r2, [r3, #0]
  return 0;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <_write>:

int _write(int fd, char* ptr, int len) {
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d002      	beq.n	80034d0 <_write+0x18>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d111      	bne.n	80034f4 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80034d0:	4b0e      	ldr	r3, [pc, #56]	; (800350c <_write+0x54>)
 80034d2:	6818      	ldr	r0, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	f04f 33ff 	mov.w	r3, #4294967295
 80034dc:	68b9      	ldr	r1, [r7, #8]
 80034de:	f00a fb3e 	bl	800db5e <HAL_UART_Transmit>
 80034e2:	4603      	mov	r3, r0
 80034e4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80034e6:	7dfb      	ldrb	r3, [r7, #23]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d101      	bne.n	80034f0 <_write+0x38>
      return len;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	e008      	b.n	8003502 <_write+0x4a>
    else
      return EIO;
 80034f0:	2305      	movs	r3, #5
 80034f2:	e006      	b.n	8003502 <_write+0x4a>
  }
  errno = EBADF;
 80034f4:	f00f fe94 	bl	8013220 <__errno>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2209      	movs	r2, #9
 80034fc:	601a      	str	r2, [r3, #0]
  return -1;
 80034fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003502:	4618      	mov	r0, r3
 8003504:	3718      	adds	r7, #24
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	2400b914 	.word	0x2400b914

08003510 <_close>:

int _close(int fd) {
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	db04      	blt.n	8003528 <_close+0x18>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b02      	cmp	r3, #2
 8003522:	dc01      	bgt.n	8003528 <_close+0x18>
    return 0;
 8003524:	2300      	movs	r3, #0
 8003526:	e006      	b.n	8003536 <_close+0x26>

  errno = EBADF;
 8003528:	f00f fe7a 	bl	8013220 <__errno>
 800352c:	4603      	mov	r3, r0
 800352e:	2209      	movs	r2, #9
 8003530:	601a      	str	r2, [r3, #0]
  return -1;
 8003532:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003536:	4618      	mov	r0, r3
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
	...

08003540 <_read>:

int _read(int fd, char* ptr, int len) {
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d110      	bne.n	8003574 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8003552:	4b0e      	ldr	r3, [pc, #56]	; (800358c <_read+0x4c>)
 8003554:	6818      	ldr	r0, [r3, #0]
 8003556:	f04f 33ff 	mov.w	r3, #4294967295
 800355a:	2201      	movs	r2, #1
 800355c:	68b9      	ldr	r1, [r7, #8]
 800355e:	f00a fb8c 	bl	800dc7a <HAL_UART_Receive>
 8003562:	4603      	mov	r3, r0
 8003564:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003566:	7dfb      	ldrb	r3, [r7, #23]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <_read+0x30>
      return 1;
 800356c:	2301      	movs	r3, #1
 800356e:	e008      	b.n	8003582 <_read+0x42>
    else
      return EIO;
 8003570:	2305      	movs	r3, #5
 8003572:	e006      	b.n	8003582 <_read+0x42>
  }
  errno = EBADF;
 8003574:	f00f fe54 	bl	8013220 <__errno>
 8003578:	4603      	mov	r3, r0
 800357a:	2209      	movs	r2, #9
 800357c:	601a      	str	r2, [r3, #0]
  return -1;
 800357e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003582:	4618      	mov	r0, r3
 8003584:	3718      	adds	r7, #24
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	2400b914 	.word	0x2400b914

08003590 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	db08      	blt.n	80035b2 <_fstat+0x22>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	dc05      	bgt.n	80035b2 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80035ac:	605a      	str	r2, [r3, #4]
    return 0;
 80035ae:	2300      	movs	r3, #0
 80035b0:	e005      	b.n	80035be <_fstat+0x2e>
  }

  errno = EBADF;
 80035b2:	f00f fe35 	bl	8013220 <__errno>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2209      	movs	r2, #9
 80035ba:	601a      	str	r2, [r3, #0]
  return 0;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
	...

080035c8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80035cc:	4b11      	ldr	r3, [pc, #68]	; (8003614 <MX_RTC_Init+0x4c>)
 80035ce:	4a12      	ldr	r2, [pc, #72]	; (8003618 <MX_RTC_Init+0x50>)
 80035d0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80035d2:	4b10      	ldr	r3, [pc, #64]	; (8003614 <MX_RTC_Init+0x4c>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80035d8:	4b0e      	ldr	r3, [pc, #56]	; (8003614 <MX_RTC_Init+0x4c>)
 80035da:	227f      	movs	r2, #127	; 0x7f
 80035dc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80035de:	4b0d      	ldr	r3, [pc, #52]	; (8003614 <MX_RTC_Init+0x4c>)
 80035e0:	22ff      	movs	r2, #255	; 0xff
 80035e2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80035e4:	4b0b      	ldr	r3, [pc, #44]	; (8003614 <MX_RTC_Init+0x4c>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80035ea:	4b0a      	ldr	r3, [pc, #40]	; (8003614 <MX_RTC_Init+0x4c>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80035f0:	4b08      	ldr	r3, [pc, #32]	; (8003614 <MX_RTC_Init+0x4c>)
 80035f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80035f6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80035f8:	4b06      	ldr	r3, [pc, #24]	; (8003614 <MX_RTC_Init+0x4c>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80035fe:	4805      	ldr	r0, [pc, #20]	; (8003614 <MX_RTC_Init+0x4c>)
 8003600:	f00a f8a6 	bl	800d750 <HAL_RTC_Init>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800360a:	f7fe fa19 	bl	8001a40 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800360e:	bf00      	nop
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	2400b918 	.word	0x2400b918
 8003618:	58004000 	.word	0x58004000

0800361c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b0b2      	sub	sp, #200	; 0xc8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003624:	f107 0308 	add.w	r3, r7, #8
 8003628:	22c0      	movs	r2, #192	; 0xc0
 800362a:	2100      	movs	r1, #0
 800362c:	4618      	mov	r0, r3
 800362e:	f00f fe37 	bl	80132a0 <memset>
  if(rtcHandle->Instance==RTC)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a10      	ldr	r2, [pc, #64]	; (8003678 <HAL_RTC_MspInit+0x5c>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d119      	bne.n	8003670 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800363c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003648:	f44f 7380 	mov.w	r3, #256	; 0x100
 800364c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003650:	f107 0308 	add.w	r3, r7, #8
 8003654:	4618      	mov	r0, r3
 8003656:	f008 fa9b 	bl	800bb90 <HAL_RCCEx_PeriphCLKConfig>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8003660:	f7fe f9ee 	bl	8001a40 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003664:	4b05      	ldr	r3, [pc, #20]	; (800367c <HAL_RTC_MspInit+0x60>)
 8003666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003668:	4a04      	ldr	r2, [pc, #16]	; (800367c <HAL_RTC_MspInit+0x60>)
 800366a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800366e:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003670:	bf00      	nop
 8003672:	37c8      	adds	r7, #200	; 0xc8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	58004000 	.word	0x58004000
 800367c:	58024400 	.word	0x58024400

08003680 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8003686:	2300      	movs	r3, #0
 8003688:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 800368a:	4b16      	ldr	r3, [pc, #88]	; (80036e4 <BSP_I2C4_Init+0x64>)
 800368c:	4a16      	ldr	r2, [pc, #88]	; (80036e8 <BSP_I2C4_Init+0x68>)
 800368e:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 8003690:	4b16      	ldr	r3, [pc, #88]	; (80036ec <BSP_I2C4_Init+0x6c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d11f      	bne.n	80036d8 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 8003698:	4b14      	ldr	r3, [pc, #80]	; (80036ec <BSP_I2C4_Init+0x6c>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	3301      	adds	r3, #1
 800369e:	4a13      	ldr	r2, [pc, #76]	; (80036ec <BSP_I2C4_Init+0x6c>)
 80036a0:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 80036a2:	4810      	ldr	r0, [pc, #64]	; (80036e4 <BSP_I2C4_Init+0x64>)
 80036a4:	f006 fb0e 	bl	8009cc4 <HAL_I2C_GetState>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d114      	bne.n	80036d8 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 80036ae:	480d      	ldr	r0, [pc, #52]	; (80036e4 <BSP_I2C4_Init+0x64>)
 80036b0:	f000 fb60 	bl	8003d74 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80036b4:	f008 fa56 	bl	800bb64 <HAL_RCC_GetPCLK2Freq>
 80036b8:	4603      	mov	r3, r0
 80036ba:	490d      	ldr	r1, [pc, #52]	; (80036f0 <BSP_I2C4_Init+0x70>)
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 f8e3 	bl	8003888 <I2C_GetTiming>
 80036c2:	4603      	mov	r3, r0
 80036c4:	4619      	mov	r1, r3
 80036c6:	4807      	ldr	r0, [pc, #28]	; (80036e4 <BSP_I2C4_Init+0x64>)
 80036c8:	f000 f838 	bl	800373c <MX_I2C4_Init>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d002      	beq.n	80036d8 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80036d2:	f06f 0307 	mvn.w	r3, #7
 80036d6:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 80036d8:	687b      	ldr	r3, [r7, #4]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	2400c348 	.word	0x2400c348
 80036e8:	58001c00 	.word	0x58001c00
 80036ec:	2400b940 	.word	0x2400b940
 80036f0:	000186a0 	.word	0x000186a0

080036f4 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 80036fa:	2300      	movs	r3, #0
 80036fc:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 80036fe:	4b0d      	ldr	r3, [pc, #52]	; (8003734 <BSP_I2C4_DeInit+0x40>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	3b01      	subs	r3, #1
 8003704:	4a0b      	ldr	r2, [pc, #44]	; (8003734 <BSP_I2C4_DeInit+0x40>)
 8003706:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 8003708:	4b0a      	ldr	r3, [pc, #40]	; (8003734 <BSP_I2C4_DeInit+0x40>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10b      	bne.n	8003728 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 8003710:	4809      	ldr	r0, [pc, #36]	; (8003738 <BSP_I2C4_DeInit+0x44>)
 8003712:	f000 fb9b 	bl	8003e4c <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8003716:	4808      	ldr	r0, [pc, #32]	; (8003738 <BSP_I2C4_DeInit+0x44>)
 8003718:	f006 f862 	bl	80097e0 <HAL_I2C_DeInit>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d002      	beq.n	8003728 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8003722:	f06f 0307 	mvn.w	r3, #7
 8003726:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8003728:	687b      	ldr	r3, [r7, #4]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	2400b940 	.word	0x2400b940
 8003738:	2400c348 	.word	0x2400c348

0800373c <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003746:	2300      	movs	r3, #0
 8003748:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f005 ffa0 	bl	80096c0 <HAL_I2C_Init>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d002      	beq.n	800378c <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	73fb      	strb	r3, [r7, #15]
 800378a:	e014      	b.n	80037b6 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 800378c:	2300      	movs	r3, #0
 800378e:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8003790:	68b9      	ldr	r1, [r7, #8]
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f006 fd68 	bl	800a268 <HAL_I2CEx_ConfigAnalogFilter>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d002      	beq.n	80037a4 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	73fb      	strb	r3, [r7, #15]
 80037a2:	e008      	b.n	80037b6 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 80037a4:	2100      	movs	r1, #0
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f006 fda9 	bl	800a2fe <HAL_I2CEx_ConfigDigitalFilter>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <BSP_I2C4_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b088      	sub	sp, #32
 80037c4:	af02      	add	r7, sp, #8
 80037c6:	60ba      	str	r2, [r7, #8]
 80037c8:	461a      	mov	r2, r3
 80037ca:	4603      	mov	r3, r0
 80037cc:	81fb      	strh	r3, [r7, #14]
 80037ce:	460b      	mov	r3, r1
 80037d0:	81bb      	strh	r3, [r7, #12]
 80037d2:	4613      	mov	r3, r2
 80037d4:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
 #if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 80037d6:	89b9      	ldrh	r1, [r7, #12]
 80037d8:	89f8      	ldrh	r0, [r7, #14]
 80037da:	88fb      	ldrh	r3, [r7, #6]
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2202      	movs	r2, #2
 80037e2:	f000 fb57 	bl	8003e94 <I2C4_WriteReg>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d102      	bne.n	80037f2 <BSP_I2C4_WriteReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 80037ec:	2300      	movs	r3, #0
 80037ee:	617b      	str	r3, [r7, #20]
 80037f0:	e00c      	b.n	800380c <BSP_I2C4_WriteReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80037f2:	4809      	ldr	r0, [pc, #36]	; (8003818 <BSP_I2C4_WriteReg16+0x58>)
 80037f4:	f006 fa74 	bl	8009ce0 <HAL_I2C_GetError>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	d103      	bne.n	8003806 <BSP_I2C4_WriteReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80037fe:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	e002      	b.n	800380c <BSP_I2C4_WriteReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003806:	f06f 0303 	mvn.w	r3, #3
 800380a:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800380c:	697b      	ldr	r3, [r7, #20]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	2400c348 	.word	0x2400c348

0800381c <BSP_I2C4_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b088      	sub	sp, #32
 8003820:	af02      	add	r7, sp, #8
 8003822:	60ba      	str	r2, [r7, #8]
 8003824:	461a      	mov	r2, r3
 8003826:	4603      	mov	r3, r0
 8003828:	81fb      	strh	r3, [r7, #14]
 800382a:	460b      	mov	r3, r1
 800382c:	81bb      	strh	r3, [r7, #12]
 800382e:	4613      	mov	r3, r2
 8003830:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 8003832:	89b9      	ldrh	r1, [r7, #12]
 8003834:	89f8      	ldrh	r0, [r7, #14]
 8003836:	88fb      	ldrh	r3, [r7, #6]
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	2202      	movs	r2, #2
 800383e:	f000 fb4f 	bl	8003ee0 <I2C4_ReadReg>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d102      	bne.n	800384e <BSP_I2C4_ReadReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 8003848:	2300      	movs	r3, #0
 800384a:	617b      	str	r3, [r7, #20]
 800384c:	e00c      	b.n	8003868 <BSP_I2C4_ReadReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800384e:	4809      	ldr	r0, [pc, #36]	; (8003874 <BSP_I2C4_ReadReg16+0x58>)
 8003850:	f006 fa46 	bl	8009ce0 <HAL_I2C_GetError>
 8003854:	4603      	mov	r3, r0
 8003856:	2b04      	cmp	r3, #4
 8003858:	d103      	bne.n	8003862 <BSP_I2C4_ReadReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800385a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800385e:	617b      	str	r3, [r7, #20]
 8003860:	e002      	b.n	8003868 <BSP_I2C4_ReadReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003862:	f06f 0303 	mvn.w	r3, #3
 8003866:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8003868:	697b      	ldr	r3, [r7, #20]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3718      	adds	r7, #24
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	2400c348 	.word	0x2400c348

08003878 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 800387c:	f000 ffc6 	bl	800480c <HAL_GetTick>
 8003880:	4603      	mov	r3, r0
}
 8003882:	4618      	mov	r0, r3
 8003884:	bd80      	pop	{r7, pc}
	...

08003888 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8003892:	2300      	movs	r3, #0
 8003894:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d06b      	beq.n	8003974 <I2C_GetTiming+0xec>
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d068      	beq.n	8003974 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80038a2:	2300      	movs	r3, #0
 80038a4:	613b      	str	r3, [r7, #16]
 80038a6:	e060      	b.n	800396a <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 80038a8:	4a35      	ldr	r2, [pc, #212]	; (8003980 <I2C_GetTiming+0xf8>)
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	212c      	movs	r1, #44	; 0x2c
 80038ae:	fb01 f303 	mul.w	r3, r1, r3
 80038b2:	4413      	add	r3, r2
 80038b4:	3304      	adds	r3, #4
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d352      	bcc.n	8003964 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 80038be:	4a30      	ldr	r2, [pc, #192]	; (8003980 <I2C_GetTiming+0xf8>)
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	212c      	movs	r1, #44	; 0x2c
 80038c4:	fb01 f303 	mul.w	r3, r1, r3
 80038c8:	4413      	add	r3, r2
 80038ca:	3308      	adds	r3, #8
 80038cc:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d847      	bhi.n	8003964 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 80038d4:	6939      	ldr	r1, [r7, #16]
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f856 	bl	8003988 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 80038dc:	6939      	ldr	r1, [r7, #16]
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f940 	bl	8003b64 <I2C_Compute_SCLL_SCLH>
 80038e4:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2b7f      	cmp	r3, #127	; 0x7f
 80038ea:	d842      	bhi.n	8003972 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80038ec:	4925      	ldr	r1, [pc, #148]	; (8003984 <I2C_GetTiming+0xfc>)
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	4613      	mov	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4413      	add	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80038fe:	4821      	ldr	r0, [pc, #132]	; (8003984 <I2C_GetTiming+0xfc>)
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	4613      	mov	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4403      	add	r3, r0
 800390c:	3304      	adds	r3, #4
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	051b      	lsls	r3, r3, #20
 8003912:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003916:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8003918:	481a      	ldr	r0, [pc, #104]	; (8003984 <I2C_GetTiming+0xfc>)
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	4613      	mov	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4413      	add	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4403      	add	r3, r0
 8003926:	3308      	adds	r3, #8
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	041b      	lsls	r3, r3, #16
 800392c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8003930:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8003932:	4814      	ldr	r0, [pc, #80]	; (8003984 <I2C_GetTiming+0xfc>)
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	4613      	mov	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	4403      	add	r3, r0
 8003940:	330c      	adds	r3, #12
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	021b      	lsls	r3, r3, #8
 8003946:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8003948:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800394a:	480e      	ldr	r0, [pc, #56]	; (8003984 <I2C_GetTiming+0xfc>)
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	4613      	mov	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4413      	add	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4403      	add	r3, r0
 8003958:	3310      	adds	r3, #16
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800395e:	430b      	orrs	r3, r1
 8003960:	617b      	str	r3, [r7, #20]
        }
        break;
 8003962:	e006      	b.n	8003972 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	3301      	adds	r3, #1
 8003968:	613b      	str	r3, [r7, #16]
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	2b02      	cmp	r3, #2
 800396e:	d99b      	bls.n	80038a8 <I2C_GetTiming+0x20>
 8003970:	e000      	b.n	8003974 <I2C_GetTiming+0xec>
        break;
 8003972:	bf00      	nop
      }
    }
  }

  return ret;
 8003974:	697b      	ldr	r3, [r7, #20]
}
 8003976:	4618      	mov	r0, r3
 8003978:	3718      	adds	r7, #24
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	08014c14 	.word	0x08014c14
 8003984:	2400b944 	.word	0x2400b944

08003988 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8003988:	b480      	push	{r7}
 800398a:	b08f      	sub	sp, #60	; 0x3c
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8003992:	2310      	movs	r3, #16
 8003994:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	085a      	lsrs	r2, r3, #1
 800399a:	4b6e      	ldr	r3, [pc, #440]	; (8003b54 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 800399c:	4413      	add	r3, r2
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80039a4:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 80039a6:	2332      	movs	r3, #50	; 0x32
 80039a8:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 80039aa:	f44f 7382 	mov.w	r3, #260	; 0x104
 80039ae:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80039b0:	4a69      	ldr	r2, [pc, #420]	; (8003b58 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	212c      	movs	r1, #44	; 0x2c
 80039b6:	fb01 f303 	mul.w	r3, r1, r3
 80039ba:	4413      	add	r3, r2
 80039bc:	3324      	adds	r3, #36	; 0x24
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4618      	mov	r0, r3
 80039c2:	4a65      	ldr	r2, [pc, #404]	; (8003b58 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	212c      	movs	r1, #44	; 0x2c
 80039c8:	fb01 f303 	mul.w	r3, r1, r3
 80039cc:	4413      	add	r3, r2
 80039ce:	330c      	adds	r3, #12
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80039d4:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80039d6:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80039d8:	495f      	ldr	r1, [pc, #380]	; (8003b58 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	202c      	movs	r0, #44	; 0x2c
 80039de:	fb00 f303 	mul.w	r3, r0, r3
 80039e2:	440b      	add	r3, r1
 80039e4:	3328      	adds	r3, #40	; 0x28
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	3303      	adds	r3, #3
 80039ea:	69f9      	ldr	r1, [r7, #28]
 80039ec:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80039f4:	4a58      	ldr	r2, [pc, #352]	; (8003b58 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	212c      	movs	r1, #44	; 0x2c
 80039fa:	fb01 f303 	mul.w	r3, r1, r3
 80039fe:	4413      	add	r3, r2
 8003a00:	3310      	adds	r3, #16
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4618      	mov	r0, r3
 8003a06:	4a54      	ldr	r2, [pc, #336]	; (8003b58 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	212c      	movs	r1, #44	; 0x2c
 8003a0c:	fb01 f303 	mul.w	r3, r1, r3
 8003a10:	4413      	add	r3, r2
 8003a12:	3320      	adds	r3, #32
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8003a18:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003a1a:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8003a1c:	494e      	ldr	r1, [pc, #312]	; (8003b58 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	202c      	movs	r0, #44	; 0x2c
 8003a22:	fb00 f303 	mul.w	r3, r0, r3
 8003a26:	440b      	add	r3, r1
 8003a28:	3328      	adds	r3, #40	; 0x28
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	69f9      	ldr	r1, [r7, #28]
 8003a30:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8003a38:	4a47      	ldr	r2, [pc, #284]	; (8003b58 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	212c      	movs	r1, #44	; 0x2c
 8003a3e:	fb01 f303 	mul.w	r3, r1, r3
 8003a42:	4413      	add	r3, r2
 8003a44:	3320      	adds	r3, #32
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	4a43      	ldr	r2, [pc, #268]	; (8003b58 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	212c      	movs	r1, #44	; 0x2c
 8003a50:	fb01 f303 	mul.w	r3, r1, r3
 8003a54:	4413      	add	r3, r2
 8003a56:	3314      	adds	r3, #20
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4403      	add	r3, r0
 8003a5c:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8003a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	dc01      	bgt.n	8003a68 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8003a64:	2300      	movs	r3, #0
 8003a66:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8003a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	dc01      	bgt.n	8003a72 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8003a72:	2300      	movs	r3, #0
 8003a74:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a76:	e062      	b.n	8003b3e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8003a78:	2300      	movs	r3, #0
 8003a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a7c:	e059      	b.n	8003b32 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	3301      	adds	r3, #1
 8003a82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a84:	3201      	adds	r2, #1
 8003a86:	fb03 f202 	mul.w	r2, r3, r2
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	fb02 f303 	mul.w	r3, r2, r3
 8003a90:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d348      	bcc.n	8003b2c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	623b      	str	r3, [r7, #32]
 8003a9e:	e042      	b.n	8003b26 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8003aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	6a3a      	ldr	r2, [r7, #32]
 8003aa6:	fb03 f202 	mul.w	r2, r3, r2
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	fb02 f303 	mul.w	r3, r2, r3
 8003ab0:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8003ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d332      	bcc.n	8003b20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8003aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d82e      	bhi.n	8003b20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 8003ac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d02a      	beq.n	8003b20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8003aca:	4b24      	ldr	r3, [pc, #144]	; (8003b5c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	4924      	ldr	r1, [pc, #144]	; (8003b60 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	440b      	add	r3, r1
 8003ada:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003adc:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8003ade:	4b1f      	ldr	r3, [pc, #124]	; (8003b5c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	491f      	ldr	r1, [pc, #124]	; (8003b60 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	3304      	adds	r3, #4
 8003af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af2:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8003af4:	4b19      	ldr	r3, [pc, #100]	; (8003b5c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	4919      	ldr	r1, [pc, #100]	; (8003b60 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8003afa:	4613      	mov	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4413      	add	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	440b      	add	r3, r1
 8003b04:	3308      	adds	r3, #8
 8003b06:	6a3a      	ldr	r2, [r7, #32]
 8003b08:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8003b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0c:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 8003b0e:	4b13      	ldr	r3, [pc, #76]	; (8003b5c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	3301      	adds	r3, #1
 8003b14:	4a11      	ldr	r2, [pc, #68]	; (8003b5c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003b16:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8003b18:	4b10      	ldr	r3, [pc, #64]	; (8003b5c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2b7f      	cmp	r3, #127	; 0x7f
 8003b1e:	d812      	bhi.n	8003b46 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	3301      	adds	r3, #1
 8003b24:	623b      	str	r3, [r7, #32]
 8003b26:	6a3b      	ldr	r3, [r7, #32]
 8003b28:	2b0f      	cmp	r3, #15
 8003b2a:	d9b9      	bls.n	8003aa0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	3301      	adds	r3, #1
 8003b30:	627b      	str	r3, [r7, #36]	; 0x24
 8003b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b34:	2b0f      	cmp	r3, #15
 8003b36:	d9a2      	bls.n	8003a7e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8003b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b40:	2b0f      	cmp	r3, #15
 8003b42:	d999      	bls.n	8003a78 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8003b44:	e000      	b.n	8003b48 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8003b46:	bf00      	nop
          }
        }
      }
    }
  }
}
 8003b48:	373c      	adds	r7, #60	; 0x3c
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	3b9aca00 	.word	0x3b9aca00
 8003b58:	08014c14 	.word	0x08014c14
 8003b5c:	2400c344 	.word	0x2400c344
 8003b60:	2400b944 	.word	0x2400b944

08003b64 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b093      	sub	sp, #76	; 0x4c
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 8003b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b72:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	085a      	lsrs	r2, r3, #1
 8003b78:	4b7a      	ldr	r3, [pc, #488]	; (8003d64 <I2C_Compute_SCLL_SCLH+0x200>)
 8003b7a:	4413      	add	r3, r2
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8003b84:	4a78      	ldr	r2, [pc, #480]	; (8003d68 <I2C_Compute_SCLL_SCLH+0x204>)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	212c      	movs	r1, #44	; 0x2c
 8003b8a:	fb01 f303 	mul.w	r3, r1, r3
 8003b8e:	4413      	add	r3, r2
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	085a      	lsrs	r2, r3, #1
 8003b94:	4b73      	ldr	r3, [pc, #460]	; (8003d64 <I2C_Compute_SCLL_SCLH+0x200>)
 8003b96:	4413      	add	r3, r2
 8003b98:	4973      	ldr	r1, [pc, #460]	; (8003d68 <I2C_Compute_SCLL_SCLH+0x204>)
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	202c      	movs	r0, #44	; 0x2c
 8003b9e:	fb00 f202 	mul.w	r2, r0, r2
 8003ba2:	440a      	add	r2, r1
 8003ba4:	6812      	ldr	r2, [r2, #0]
 8003ba6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003baa:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8003bac:	2332      	movs	r3, #50	; 0x32
 8003bae:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8003bb0:	4a6d      	ldr	r2, [pc, #436]	; (8003d68 <I2C_Compute_SCLL_SCLH+0x204>)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	212c      	movs	r1, #44	; 0x2c
 8003bb6:	fb01 f303 	mul.w	r3, r1, r3
 8003bba:	4413      	add	r3, r2
 8003bbc:	3328      	adds	r3, #40	; 0x28
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc2:	fb02 f303 	mul.w	r3, r2, r3
 8003bc6:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8003bc8:	4a67      	ldr	r2, [pc, #412]	; (8003d68 <I2C_Compute_SCLL_SCLH+0x204>)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	212c      	movs	r1, #44	; 0x2c
 8003bce:	fb01 f303 	mul.w	r3, r1, r3
 8003bd2:	4413      	add	r3, r2
 8003bd4:	3304      	adds	r3, #4
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a62      	ldr	r2, [pc, #392]	; (8003d64 <I2C_Compute_SCLL_SCLH+0x200>)
 8003bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bde:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8003be0:	4a61      	ldr	r2, [pc, #388]	; (8003d68 <I2C_Compute_SCLL_SCLH+0x204>)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	212c      	movs	r1, #44	; 0x2c
 8003be6:	fb01 f303 	mul.w	r3, r1, r3
 8003bea:	4413      	add	r3, r2
 8003bec:	3308      	adds	r3, #8
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a5c      	ldr	r2, [pc, #368]	; (8003d64 <I2C_Compute_SCLL_SCLH+0x200>)
 8003bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf6:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8003bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfa:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	637b      	str	r3, [r7, #52]	; 0x34
 8003c00:	e0a3      	b.n	8003d4a <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8003c02:	495a      	ldr	r1, [pc, #360]	; (8003d6c <I2C_Compute_SCLL_SCLH+0x208>)
 8003c04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c06:	4613      	mov	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4413      	add	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	440b      	add	r3, r1
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	1c5a      	adds	r2, r3, #1
 8003c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c16:	fb02 f303 	mul.w	r3, r2, r3
 8003c1a:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c20:	e08c      	b.n	8003d3c <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8003c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	441a      	add	r2, r3
 8003c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	6979      	ldr	r1, [r7, #20]
 8003c2e:	fb03 f101 	mul.w	r1, r3, r1
 8003c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	440b      	add	r3, r1
 8003c38:	4413      	add	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8003c3c:	4a4a      	ldr	r2, [pc, #296]	; (8003d68 <I2C_Compute_SCLL_SCLH+0x204>)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	212c      	movs	r1, #44	; 0x2c
 8003c42:	fb01 f303 	mul.w	r3, r1, r3
 8003c46:	4413      	add	r3, r2
 8003c48:	3318      	adds	r3, #24
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d971      	bls.n	8003d36 <I2C_Compute_SCLL_SCLH+0x1d2>
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c56:	1ad2      	subs	r2, r2, r3
 8003c58:	6a3b      	ldr	r3, [r7, #32]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	089b      	lsrs	r3, r3, #2
 8003c5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d268      	bcs.n	8003d36 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003c64:	2300      	movs	r3, #0
 8003c66:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c68:	e062      	b.n	8003d30 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8003c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c6c:	6a3b      	ldr	r3, [r7, #32]
 8003c6e:	441a      	add	r2, r3
 8003c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c72:	3301      	adds	r3, #1
 8003c74:	6979      	ldr	r1, [r7, #20]
 8003c76:	fb03 f101 	mul.w	r1, r3, r1
 8003c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	440b      	add	r3, r1
 8003c80:	4413      	add	r3, r2
 8003c82:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	441a      	add	r2, r3
 8003c8a:	4937      	ldr	r1, [pc, #220]	; (8003d68 <I2C_Compute_SCLL_SCLH+0x204>)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	202c      	movs	r0, #44	; 0x2c
 8003c90:	fb00 f303 	mul.w	r3, r0, r3
 8003c94:	440b      	add	r3, r1
 8003c96:	3320      	adds	r3, #32
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	441a      	add	r2, r3
 8003c9c:	4932      	ldr	r1, [pc, #200]	; (8003d68 <I2C_Compute_SCLL_SCLH+0x204>)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	202c      	movs	r0, #44	; 0x2c
 8003ca2:	fb00 f303 	mul.w	r3, r0, r3
 8003ca6:	440b      	add	r3, r1
 8003ca8:	3324      	adds	r3, #36	; 0x24
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4413      	add	r3, r2
 8003cae:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d338      	bcc.n	8003d2a <I2C_Compute_SCLL_SCLH+0x1c6>
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d834      	bhi.n	8003d2a <I2C_Compute_SCLL_SCLH+0x1c6>
 8003cc0:	4a29      	ldr	r2, [pc, #164]	; (8003d68 <I2C_Compute_SCLL_SCLH+0x204>)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	212c      	movs	r1, #44	; 0x2c
 8003cc6:	fb01 f303 	mul.w	r3, r1, r3
 8003cca:	4413      	add	r3, r2
 8003ccc:	331c      	adds	r3, #28
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d329      	bcc.n	8003d2a <I2C_Compute_SCLL_SCLH+0x1c6>
 8003cd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d225      	bcs.n	8003d2a <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 8003ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	da02      	bge.n	8003cf2 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8003cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cee:	425b      	negs	r3, r3
 8003cf0:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8003cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d917      	bls.n	8003d2a <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8003cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfc:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 8003cfe:	491b      	ldr	r1, [pc, #108]	; (8003d6c <I2C_Compute_SCLL_SCLH+0x208>)
 8003d00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d02:	4613      	mov	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	440b      	add	r3, r1
 8003d0c:	3310      	adds	r3, #16
 8003d0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d10:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8003d12:	4916      	ldr	r1, [pc, #88]	; (8003d6c <I2C_Compute_SCLL_SCLH+0x208>)
 8003d14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d16:	4613      	mov	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	4413      	add	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	440b      	add	r3, r1
 8003d20:	330c      	adds	r3, #12
 8003d22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d24:	601a      	str	r2, [r3, #0]
              ret = count;
 8003d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d28:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d32:	2bff      	cmp	r3, #255	; 0xff
 8003d34:	d999      	bls.n	8003c6a <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d38:	3301      	adds	r3, #1
 8003d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d3e:	2bff      	cmp	r3, #255	; 0xff
 8003d40:	f67f af6f 	bls.w	8003c22 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d46:	3301      	adds	r3, #1
 8003d48:	637b      	str	r3, [r7, #52]	; 0x34
 8003d4a:	4b09      	ldr	r3, [pc, #36]	; (8003d70 <I2C_Compute_SCLL_SCLH+0x20c>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d50:	429a      	cmp	r2, r3
 8003d52:	f4ff af56 	bcc.w	8003c02 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8003d56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	374c      	adds	r7, #76	; 0x4c
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	3b9aca00 	.word	0x3b9aca00
 8003d68:	08014c14 	.word	0x08014c14
 8003d6c:	2400b944 	.word	0x2400b944
 8003d70:	2400c344 	.word	0x2400c344

08003d74 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b08a      	sub	sp, #40	; 0x28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8003d7c:	4b31      	ldr	r3, [pc, #196]	; (8003e44 <I2C4_MspInit+0xd0>)
 8003d7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003d82:	4a30      	ldr	r2, [pc, #192]	; (8003e44 <I2C4_MspInit+0xd0>)
 8003d84:	f043 0308 	orr.w	r3, r3, #8
 8003d88:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003d8c:	4b2d      	ldr	r3, [pc, #180]	; (8003e44 <I2C4_MspInit+0xd0>)
 8003d8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	613b      	str	r3, [r7, #16]
 8003d98:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8003d9a:	4b2a      	ldr	r3, [pc, #168]	; (8003e44 <I2C4_MspInit+0xd0>)
 8003d9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003da0:	4a28      	ldr	r2, [pc, #160]	; (8003e44 <I2C4_MspInit+0xd0>)
 8003da2:	f043 0308 	orr.w	r3, r3, #8
 8003da6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003daa:	4b26      	ldr	r3, [pc, #152]	; (8003e44 <I2C4_MspInit+0xd0>)
 8003dac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003db0:	f003 0308 	and.w	r3, r3, #8
 8003db4:	60fb      	str	r3, [r7, #12]
 8003db6:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8003db8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dbc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8003dbe:	2312      	movs	r3, #18
 8003dc0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8003dca:	2304      	movs	r3, #4
 8003dcc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8003dce:	f107 0314 	add.w	r3, r7, #20
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	481c      	ldr	r0, [pc, #112]	; (8003e48 <I2C4_MspInit+0xd4>)
 8003dd6:	f005 f985 	bl	80090e4 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8003dda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003dde:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8003de0:	2312      	movs	r3, #18
 8003de2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003de4:	2300      	movs	r3, #0
 8003de6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8003de8:	2302      	movs	r3, #2
 8003dea:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8003dec:	2304      	movs	r3, #4
 8003dee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8003df0:	f107 0314 	add.w	r3, r7, #20
 8003df4:	4619      	mov	r1, r3
 8003df6:	4814      	ldr	r0, [pc, #80]	; (8003e48 <I2C4_MspInit+0xd4>)
 8003df8:	f005 f974 	bl	80090e4 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8003dfc:	4b11      	ldr	r3, [pc, #68]	; (8003e44 <I2C4_MspInit+0xd0>)
 8003dfe:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003e02:	4a10      	ldr	r2, [pc, #64]	; (8003e44 <I2C4_MspInit+0xd0>)
 8003e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e08:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8003e0c:	4b0d      	ldr	r3, [pc, #52]	; (8003e44 <I2C4_MspInit+0xd0>)
 8003e0e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e16:	60bb      	str	r3, [r7, #8]
 8003e18:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8003e1a:	4b0a      	ldr	r3, [pc, #40]	; (8003e44 <I2C4_MspInit+0xd0>)
 8003e1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e20:	4a08      	ldr	r2, [pc, #32]	; (8003e44 <I2C4_MspInit+0xd0>)
 8003e22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e26:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8003e2a:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <I2C4_MspInit+0xd0>)
 8003e2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e30:	4a04      	ldr	r2, [pc, #16]	; (8003e44 <I2C4_MspInit+0xd0>)
 8003e32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e36:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8003e3a:	bf00      	nop
 8003e3c:	3728      	adds	r7, #40	; 0x28
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	58024400 	.word	0x58024400
 8003e48:	58020c00 	.word	0x58020c00

08003e4c <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b088      	sub	sp, #32
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 8003e54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e58:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	480b      	ldr	r0, [pc, #44]	; (8003e8c <I2C4_MspDeInit+0x40>)
 8003e60:	f005 faf0 	bl	8009444 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 8003e64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e68:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	4807      	ldr	r0, [pc, #28]	; (8003e8c <I2C4_MspDeInit+0x40>)
 8003e70:	f005 fae8 	bl	8009444 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8003e74:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <I2C4_MspDeInit+0x44>)
 8003e76:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003e7a:	4a05      	ldr	r2, [pc, #20]	; (8003e90 <I2C4_MspDeInit+0x44>)
 8003e7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e80:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 8003e84:	bf00      	nop
 8003e86:	3720      	adds	r7, #32
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	58020c00 	.word	0x58020c00
 8003e90:	58024400 	.word	0x58024400

08003e94 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b088      	sub	sp, #32
 8003e98:	af04      	add	r7, sp, #16
 8003e9a:	607b      	str	r3, [r7, #4]
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	81fb      	strh	r3, [r7, #14]
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	81bb      	strh	r3, [r7, #12]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003ea8:	8978      	ldrh	r0, [r7, #10]
 8003eaa:	89ba      	ldrh	r2, [r7, #12]
 8003eac:	89f9      	ldrh	r1, [r7, #14]
 8003eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003eb2:	9302      	str	r3, [sp, #8]
 8003eb4:	8b3b      	ldrh	r3, [r7, #24]
 8003eb6:	9301      	str	r3, [sp, #4]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	4807      	ldr	r0, [pc, #28]	; (8003edc <I2C4_WriteReg+0x48>)
 8003ec0:	f005 fcd2 	bl	8009868 <HAL_I2C_Mem_Write>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	e001      	b.n	8003ed2 <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8003ece:	f06f 0307 	mvn.w	r3, #7
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	2400c348 	.word	0x2400c348

08003ee0 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b088      	sub	sp, #32
 8003ee4:	af04      	add	r7, sp, #16
 8003ee6:	607b      	str	r3, [r7, #4]
 8003ee8:	4603      	mov	r3, r0
 8003eea:	81fb      	strh	r3, [r7, #14]
 8003eec:	460b      	mov	r3, r1
 8003eee:	81bb      	strh	r3, [r7, #12]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003ef4:	8978      	ldrh	r0, [r7, #10]
 8003ef6:	89ba      	ldrh	r2, [r7, #12]
 8003ef8:	89f9      	ldrh	r1, [r7, #14]
 8003efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003efe:	9302      	str	r3, [sp, #8]
 8003f00:	8b3b      	ldrh	r3, [r7, #24]
 8003f02:	9301      	str	r3, [sp, #4]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	4603      	mov	r3, r0
 8003f0a:	4807      	ldr	r0, [pc, #28]	; (8003f28 <I2C4_ReadReg+0x48>)
 8003f0c:	f005 fdc0 	bl	8009a90 <HAL_I2C_Mem_Read>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8003f16:	2300      	movs	r3, #0
 8003f18:	e001      	b.n	8003f1e <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8003f1a:	f06f 0307 	mvn.w	r3, #7
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	2400c348 	.word	0x2400c348

08003f2c <BSP_CAMERA_Init>:
  *         naming QQVGA, QVGA, VGA ...
  * @param  PixelFormat Capture pixel format
  * @retval BSP status
  */
int32_t BSP_CAMERA_Init(uint32_t Instance, uint32_t Resolution, uint32_t PixelFormat)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	617b      	str	r3, [r7, #20]

#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif /*USE_BSP_IO_CLASS*/

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <BSP_CAMERA_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003f42:	f06f 0301 	mvn.w	r3, #1
 8003f46:	617b      	str	r3, [r7, #20]
 8003f48:	e02d      	b.n	8003fa6 <BSP_CAMERA_Init+0x7a>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#else
    /* DCMI Initialization */
    HAL_DCMI_MspInit(&hdcmi);
 8003f4a:	4819      	ldr	r0, [pc, #100]	; (8003fb0 <BSP_CAMERA_Init+0x84>)
 8003f4c:	f7fc fc1a 	bl	8000784 <HAL_DCMI_MspInit>
#endif
    /* Initialize the camera driver structure */
    MX_DCMI_Init();
 8003f50:	f7fc fbe4 	bl	800071c <MX_DCMI_Init>

    if(BSP_CAMERA_HwReset(0) != BSP_ERROR_NONE)
 8003f54:	2000      	movs	r0, #0
 8003f56:	f000 f887 	bl	8004068 <BSP_CAMERA_HwReset>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d003      	beq.n	8003f68 <BSP_CAMERA_Init+0x3c>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8003f60:	f06f 0307 	mvn.w	r3, #7
 8003f64:	617b      	str	r3, [r7, #20]
 8003f66:	e01e      	b.n	8003fa6 <BSP_CAMERA_Init+0x7a>
          ret = OV5640_Probe(Resolution, PixelFormat);
        }
#endif /* USE_CAMERA_SENSOR_OV5640 */
#else
#if (USE_CAMERA_SENSOR_OV5640 == 1)
        ret = OV5640_Probe(Resolution, PixelFormat);
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	68b8      	ldr	r0, [r7, #8]
 8003f6c:	f000 f93e 	bl	80041ec <OV5640_Probe>
 8003f70:	6178      	str	r0, [r7, #20]
#endif /* USE_CAMERA_SENSOR_OV5640 */
#endif /* USE_CAMERA_SENSOR_S5K5CAG */

        if(ret != BSP_ERROR_NONE)
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d003      	beq.n	8003f80 <BSP_CAMERA_Init+0x54>
        {
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003f78:	f06f 0306 	mvn.w	r3, #6
 8003f7c:	617b      	str	r3, [r7, #20]
 8003f7e:	e012      	b.n	8003fa6 <BSP_CAMERA_Init+0x7a>
          else
          {
            ret = BSP_ERROR_NONE;
          }
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS == 1) */
          Camera_Ctx[Instance].Resolution = Resolution;
 8003f80:	490c      	ldr	r1, [pc, #48]	; (8003fb4 <BSP_CAMERA_Init+0x88>)
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	4613      	mov	r3, r2
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	4413      	add	r3, r2
 8003f8a:	011b      	lsls	r3, r3, #4
 8003f8c:	440b      	add	r3, r1
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	601a      	str	r2, [r3, #0]
          Camera_Ctx[Instance].PixelFormat = PixelFormat;
 8003f92:	4908      	ldr	r1, [pc, #32]	; (8003fb4 <BSP_CAMERA_Init+0x88>)
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	4613      	mov	r3, r2
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	4413      	add	r3, r2
 8003f9c:	011b      	lsls	r3, r3, #4
 8003f9e:	440b      	add	r3, r1
 8003fa0:	3304      	adds	r3, #4
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	601a      	str	r2, [r3, #0]
#endif
    }
  }

  /* BSP status */
  return ret;
 8003fa6:	697b      	ldr	r3, [r7, #20]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	24002700 	.word	0x24002700
 8003fb4:	2400c3a0 	.word	0x2400c3a0

08003fb8 <BSP_CAMERA_Start>:
  * @param  pBff     pointer to the camera output buffer
  * @param  Mode CAMERA_MODE_CONTINUOUS or CAMERA_MODE_SNAPSHOT
  * @retval BSP status
  */
int32_t BSP_CAMERA_Start(uint32_t Instance, uint8_t *pBff, uint32_t Mode)
{
 8003fb8:	b590      	push	{r4, r7, lr}
 8003fba:	b087      	sub	sp, #28
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <BSP_CAMERA_Start+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003fca:	f06f 0301 	mvn.w	r3, #1
 8003fce:	617b      	str	r3, [r7, #20]
 8003fd0:	e022      	b.n	8004018 <BSP_CAMERA_Start+0x60>
  }
  else if(HAL_DCMI_Start_DMA(&hdcmi, Mode, (uint32_t)pBff, (uint32_t)GetSize(Camera_Ctx[Instance].Resolution, Camera_Ctx[Instance].PixelFormat)) != HAL_OK)
 8003fd2:	68bc      	ldr	r4, [r7, #8]
 8003fd4:	4913      	ldr	r1, [pc, #76]	; (8004024 <BSP_CAMERA_Start+0x6c>)
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	4413      	add	r3, r2
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	440b      	add	r3, r1
 8003fe2:	6818      	ldr	r0, [r3, #0]
 8003fe4:	490f      	ldr	r1, [pc, #60]	; (8004024 <BSP_CAMERA_Start+0x6c>)
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	4413      	add	r3, r2
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	440b      	add	r3, r1
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	f000 f8a6 	bl	8004148 <GetSize>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	4622      	mov	r2, r4
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	4809      	ldr	r0, [pc, #36]	; (8004028 <BSP_CAMERA_Start+0x70>)
 8004004:	f000 feae 	bl	8004d64 <HAL_DCMI_Start_DMA>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <BSP_CAMERA_Start+0x5c>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 800400e:	f06f 0303 	mvn.w	r3, #3
 8004012:	e002      	b.n	800401a <BSP_CAMERA_Start+0x62>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8004014:	2300      	movs	r3, #0
 8004016:	617b      	str	r3, [r7, #20]
  }

  /* Return BSP status */
  return ret;
 8004018:	697b      	ldr	r3, [r7, #20]
}
 800401a:	4618      	mov	r0, r3
 800401c:	371c      	adds	r7, #28
 800401e:	46bd      	mov	sp, r7
 8004020:	bd90      	pop	{r4, r7, pc}
 8004022:	bf00      	nop
 8004024:	2400c3a0 	.word	0x2400c3a0
 8004028:	24002700 	.word	0x24002700

0800402c <BSP_CAMERA_Stop>:
  * @brief  Stop the CAMERA capture
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_Stop(uint32_t Instance)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <BSP_CAMERA_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800403a:	f06f 0301 	mvn.w	r3, #1
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	e00b      	b.n	800405a <BSP_CAMERA_Stop+0x2e>
  }
  else if(HAL_DCMI_Stop(&hdcmi) != HAL_OK)
 8004042:	4808      	ldr	r0, [pc, #32]	; (8004064 <BSP_CAMERA_Stop+0x38>)
 8004044:	f000 ff50 	bl	8004ee8 <HAL_DCMI_Stop>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <BSP_CAMERA_Stop+0x2a>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 800404e:	f06f 0303 	mvn.w	r3, #3
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	e001      	b.n	800405a <BSP_CAMERA_Stop+0x2e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8004056:	2300      	movs	r3, #0
 8004058:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 800405a:	68fb      	ldr	r3, [r7, #12]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	24002700 	.word	0x24002700

08004068 <BSP_CAMERA_HwReset>:
  * @brief  CAMERA hardware reset
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_HwReset(uint32_t Instance)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8004070:	2300      	movs	r3, #0
 8004072:	60fb      	str	r3, [r7, #12]
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif

  if(Instance >= CAMERA_INSTANCES_NBR)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d002      	beq.n	8004080 <BSP_CAMERA_HwReset+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800407a:	f06f 0301 	mvn.w	r3, #1
 800407e:	60fb      	str	r3, [r7, #12]
      }
    }
#endif
  }

  return ret;
 8004080:	68fb      	ldr	r3, [r7, #12]
}
 8004082:	4618      	mov	r0, r3
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <BSP_CAMERA_PwrDown>:
  * @brief  CAMERA power down
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_PwrDown(uint32_t Instance)
{
 800408e:	b480      	push	{r7}
 8004090:	b085      	sub	sp, #20
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8004096:	2300      	movs	r3, #0
 8004098:	60fb      	str	r3, [r7, #12]
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif

  if(Instance >= CAMERA_INSTANCES_NBR)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d002      	beq.n	80040a6 <BSP_CAMERA_PwrDown+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80040a0:	f06f 0301 	mvn.w	r3, #1
 80040a4:	60fb      	str	r3, [r7, #12]
      }
    }
#endif
  }

  return ret;
 80040a6:	68fb      	ldr	r3, [r7, #12]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <BSP_CAMERA_LineEventCallback>:
  * @brief  Line Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_LineEventCallback(uint32_t Instance)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <BSP_CAMERA_VsyncEventCallback>:
  * @brief  Vsync Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_VsyncEventCallback(uint32_t Instance)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <BSP_CAMERA_ErrorCallback>:
  * @brief  Error callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_ErrorCallback(uint32_t Instance)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_DCMI_LineEventCallback>:
  * @brief  Line event callback
  * @param  hdcmi  pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_LineEventCallback(0);
 80040f8:	2000      	movs	r0, #0
 80040fa:	f7ff ffdb 	bl	80040b4 <BSP_CAMERA_LineEventCallback>
}
 80040fe:	bf00      	nop
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <HAL_DCMI_FrameEventCallback>:
  * @brief  Frame event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
 {
 8004106:	b580      	push	{r7, lr}
 8004108:	b082      	sub	sp, #8
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_FrameEventCallback(0);
 800410e:	2000      	movs	r0, #0
 8004110:	f7fd fc86 	bl	8001a20 <BSP_CAMERA_FrameEventCallback>
}
 8004114:	bf00      	nop
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <HAL_DCMI_VsyncEventCallback>:
  * @brief  Vsync event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_VsyncEventCallback(0);
 8004124:	2000      	movs	r0, #0
 8004126:	f7ff ffcf 	bl	80040c8 <BSP_CAMERA_VsyncEventCallback>
}
 800412a:	bf00      	nop
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <HAL_DCMI_ErrorCallback>:
  * @brief  Error callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b082      	sub	sp, #8
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_ErrorCallback(0);
 800413a:	2000      	movs	r0, #0
 800413c:	f7ff ffce 	bl	80040dc <BSP_CAMERA_ErrorCallback>
}
 8004140:	bf00      	nop
 8004142:	3708      	adds	r7, #8
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <GetSize>:
  * @param  Resolution  the current resolution.
  * @param  PixelFormat Pixel format
  * @retval capture size in pixels unit.
  */
static int32_t GetSize(uint32_t Resolution, uint32_t PixelFormat)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t size = 0;
 8004152:	2300      	movs	r3, #0
 8004154:	60fb      	str	r3, [r7, #12]
  uint32_t pf_div;
  if(PixelFormat == CAMERA_PF_RGB888)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d102      	bne.n	8004162 <GetSize+0x1a>
  {
    pf_div = 3; /* each pixel on 3 bytes so 3/4 words */
 800415c:	2303      	movs	r3, #3
 800415e:	60bb      	str	r3, [r7, #8]
 8004160:	e001      	b.n	8004166 <GetSize+0x1e>
  }
  else
  {
    pf_div = 2; /* each pixel on 2 bytes so 1/2 words*/
 8004162:	2302      	movs	r3, #2
 8004164:	60bb      	str	r3, [r7, #8]
  }
  /* Get capture size */
  switch (Resolution)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b04      	cmp	r3, #4
 800416a:	d834      	bhi.n	80041d6 <GetSize+0x8e>
 800416c:	a201      	add	r2, pc, #4	; (adr r2, 8004174 <GetSize+0x2c>)
 800416e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004172:	bf00      	nop
 8004174:	08004189 	.word	0x08004189
 8004178:	08004199 	.word	0x08004199
 800417c:	080041a9 	.word	0x080041a9
 8004180:	080041b9 	.word	0x080041b9
 8004184:	080041c9 	.word	0x080041c9
  {
  case CAMERA_R160x120:
    size =  ((uint32_t)(160*120)*pf_div)/4U;
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 800418e:	fb02 f303 	mul.w	r3, r2, r3
 8004192:	089b      	lsrs	r3, r3, #2
 8004194:	60fb      	str	r3, [r7, #12]
    break;
 8004196:	e01f      	b.n	80041d8 <GetSize+0x90>
  case CAMERA_R320x240:
    size =  ((uint32_t)(320*240)*pf_div)/4U;
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 800419e:	fb02 f303 	mul.w	r3, r2, r3
 80041a2:	089b      	lsrs	r3, r3, #2
 80041a4:	60fb      	str	r3, [r7, #12]
    break;
 80041a6:	e017      	b.n	80041d8 <GetSize+0x90>
  case CAMERA_R480x272:
    size =  ((uint32_t)(480*272)*pf_div)/4U;
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	4613      	mov	r3, r2
 80041ac:	021b      	lsls	r3, r3, #8
 80041ae:	1a9b      	subs	r3, r3, r2
 80041b0:	025b      	lsls	r3, r3, #9
 80041b2:	089b      	lsrs	r3, r3, #2
 80041b4:	60fb      	str	r3, [r7, #12]
    break;
 80041b6:	e00f      	b.n	80041d8 <GetSize+0x90>
  case CAMERA_R640x480:
    size =  ((uint32_t)(640*480)*pf_div)/4U;
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
 80041be:	fb02 f303 	mul.w	r3, r2, r3
 80041c2:	089b      	lsrs	r3, r3, #2
 80041c4:	60fb      	str	r3, [r7, #12]
    break;
 80041c6:	e007      	b.n	80041d8 <GetSize+0x90>
  case CAMERA_R800x480:
    size =  ((uint32_t)(800*480)*pf_div)/4U;
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	4a07      	ldr	r2, [pc, #28]	; (80041e8 <GetSize+0xa0>)
 80041cc:	fb02 f303 	mul.w	r3, r2, r3
 80041d0:	089b      	lsrs	r3, r3, #2
 80041d2:	60fb      	str	r3, [r7, #12]
    break;
 80041d4:	e000      	b.n	80041d8 <GetSize+0x90>
  default:
    break;
 80041d6:	bf00      	nop
  }

  return (int32_t)size;
 80041d8:	68fb      	ldr	r3, [r7, #12]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	0005dc00 	.word	0x0005dc00

080041ec <OV5640_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t OV5640_Probe(uint32_t Resolution, uint32_t PixelFormat)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b08a      	sub	sp, #40	; 0x28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  OV5640_IO_t              IOCtx;
  uint32_t                  id;
  static OV5640_Object_t   OV5640Obj;

  /* Configure the audio driver */
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
 80041f6:	2378      	movs	r3, #120	; 0x78
 80041f8:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 80041fa:	4b2c      	ldr	r3, [pc, #176]	; (80042ac <OV5640_Probe+0xc0>)
 80041fc:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 80041fe:	4b2c      	ldr	r3, [pc, #176]	; (80042b0 <OV5640_Probe+0xc4>)
 8004200:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 8004202:	4b2c      	ldr	r3, [pc, #176]	; (80042b4 <OV5640_Probe+0xc8>)
 8004204:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 8004206:	4b2c      	ldr	r3, [pc, #176]	; (80042b8 <OV5640_Probe+0xcc>)
 8004208:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 800420a:	4b2c      	ldr	r3, [pc, #176]	; (80042bc <OV5640_Probe+0xd0>)
 800420c:	623b      	str	r3, [r7, #32]

  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 800420e:	f107 030c 	add.w	r3, r7, #12
 8004212:	4619      	mov	r1, r3
 8004214:	482a      	ldr	r0, [pc, #168]	; (80042c0 <OV5640_Probe+0xd4>)
 8004216:	f7fd fc19 	bl	8001a4c <OV5640_RegisterBusIO>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <OV5640_Probe+0x3c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004220:	f06f 0304 	mvn.w	r3, #4
 8004224:	627b      	str	r3, [r7, #36]	; 0x24
 8004226:	e03c      	b.n	80042a2 <OV5640_Probe+0xb6>
  }
  else if(OV5640_ReadID(&OV5640Obj, &id) != OV5640_OK)
 8004228:	f107 0308 	add.w	r3, r7, #8
 800422c:	4619      	mov	r1, r3
 800422e:	4824      	ldr	r0, [pc, #144]	; (80042c0 <OV5640_Probe+0xd4>)
 8004230:	f7fe f860 	bl	80022f4 <OV5640_ReadID>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <OV5640_Probe+0x56>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800423a:	f06f 0304 	mvn.w	r3, #4
 800423e:	627b      	str	r3, [r7, #36]	; 0x24
 8004240:	e02f      	b.n	80042a2 <OV5640_Probe+0xb6>
  }
  else
  {
    if(id != OV5640_ID)
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	f245 6240 	movw	r2, #22080	; 0x5640
 8004248:	4293      	cmp	r3, r2
 800424a:	d003      	beq.n	8004254 <OV5640_Probe+0x68>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800424c:	f06f 0306 	mvn.w	r3, #6
 8004250:	627b      	str	r3, [r7, #36]	; 0x24
 8004252:	e026      	b.n	80042a2 <OV5640_Probe+0xb6>
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 8004254:	4b1b      	ldr	r3, [pc, #108]	; (80042c4 <OV5640_Probe+0xd8>)
 8004256:	4a1c      	ldr	r2, [pc, #112]	; (80042c8 <OV5640_Probe+0xdc>)
 8004258:	601a      	str	r2, [r3, #0]
      Camera_CompObj = &OV5640Obj;
 800425a:	4b1c      	ldr	r3, [pc, #112]	; (80042cc <OV5640_Probe+0xe0>)
 800425c:	4a18      	ldr	r2, [pc, #96]	; (80042c0 <OV5640_Probe+0xd4>)
 800425e:	601a      	str	r2, [r3, #0]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 8004260:	4b18      	ldr	r3, [pc, #96]	; (80042c4 <OV5640_Probe+0xd8>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a19      	ldr	r2, [pc, #100]	; (80042cc <OV5640_Probe+0xe0>)
 8004268:	6810      	ldr	r0, [r2, #0]
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	4798      	blx	r3
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <OV5640_Probe+0x92>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004276:	f06f 0304 	mvn.w	r3, #4
 800427a:	627b      	str	r3, [r7, #36]	; 0x24
 800427c:	e011      	b.n	80042a2 <OV5640_Probe+0xb6>
      }
	  else if(Camera_Drv->GetCapabilities(Camera_CompObj, Camera_Cap) != OV5640_OK)
 800427e:	4b11      	ldr	r3, [pc, #68]	; (80042c4 <OV5640_Probe+0xd8>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	4a11      	ldr	r2, [pc, #68]	; (80042cc <OV5640_Probe+0xe0>)
 8004286:	6812      	ldr	r2, [r2, #0]
 8004288:	4911      	ldr	r1, [pc, #68]	; (80042d0 <OV5640_Probe+0xe4>)
 800428a:	6809      	ldr	r1, [r1, #0]
 800428c:	4610      	mov	r0, r2
 800428e:	4798      	blx	r3
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d003      	beq.n	800429e <OV5640_Probe+0xb2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004296:	f06f 0304 	mvn.w	r3, #4
 800429a:	627b      	str	r3, [r7, #36]	; 0x24
 800429c:	e001      	b.n	80042a2 <OV5640_Probe+0xb6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800429e:	2300      	movs	r3, #0
 80042a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 80042a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3728      	adds	r7, #40	; 0x28
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	08003681 	.word	0x08003681
 80042b0:	080036f5 	.word	0x080036f5
 80042b4:	0800381d 	.word	0x0800381d
 80042b8:	080037c1 	.word	0x080037c1
 80042bc:	08003879 	.word	0x08003879
 80042c0:	2400c3d8 	.word	0x2400c3d8
 80042c4:	2400c3d0 	.word	0x2400c3d0
 80042c8:	24000480 	.word	0x24000480
 80042cc:	2400c39c 	.word	0x2400c39c
 80042d0:	2400c3d4 	.word	0x2400c3d4

080042d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042da:	4b0a      	ldr	r3, [pc, #40]	; (8004304 <HAL_MspInit+0x30>)
 80042dc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80042e0:	4a08      	ldr	r2, [pc, #32]	; (8004304 <HAL_MspInit+0x30>)
 80042e2:	f043 0302 	orr.w	r3, r3, #2
 80042e6:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80042ea:	4b06      	ldr	r3, [pc, #24]	; (8004304 <HAL_MspInit+0x30>)
 80042ec:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	607b      	str	r3, [r7, #4]
 80042f6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	58024400 	.word	0x58024400

08004308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800430c:	e7fe      	b.n	800430c <NMI_Handler+0x4>

0800430e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800430e:	b480      	push	{r7}
 8004310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004312:	e7fe      	b.n	8004312 <HardFault_Handler+0x4>

08004314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004318:	e7fe      	b.n	8004318 <MemManage_Handler+0x4>

0800431a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800431a:	b480      	push	{r7}
 800431c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800431e:	e7fe      	b.n	800431e <BusFault_Handler+0x4>

08004320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004320:	b480      	push	{r7}
 8004322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004324:	e7fe      	b.n	8004324 <UsageFault_Handler+0x4>

08004326 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004326:	b480      	push	{r7}
 8004328:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800432a:	bf00      	nop
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004338:	bf00      	nop
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004342:	b480      	push	{r7}
 8004344:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004346:	bf00      	nop
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004354:	f000 fa46 	bl	80047e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004358:	bf00      	nop
 800435a:	bd80      	pop	{r7, pc}

0800435c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004360:	4802      	ldr	r0, [pc, #8]	; (800436c <USART1_IRQHandler+0x10>)
 8004362:	f009 fd53 	bl	800de0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004366:	bf00      	nop
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	2400c404 	.word	0x2400c404

08004370 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8004374:	4802      	ldr	r0, [pc, #8]	; (8004380 <DMA2_Stream1_IRQHandler+0x10>)
 8004376:	f002 faa7 	bl	80068c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800437a:	bf00      	nop
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	24002750 	.word	0x24002750

08004384 <DCMI_PSSI_IRQHandler>:

/**
  * @brief This function handles DCMI and PSSI global interrupt.
  */
void DCMI_PSSI_IRQHandler(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_PSSI_IRQn 0 */

  /* USER CODE END DCMI_PSSI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8004388:	4802      	ldr	r0, [pc, #8]	; (8004394 <DCMI_PSSI_IRQHandler+0x10>)
 800438a:	f000 fe0d 	bl	8004fa8 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_PSSI_IRQn 1 */

  /* USER CODE END DCMI_PSSI_IRQn 1 */
}
 800438e:	bf00      	nop
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	24002700 	.word	0x24002700

08004398 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800439c:	4802      	ldr	r0, [pc, #8]	; (80043a8 <LTDC_IRQHandler+0x10>)
 800439e:	f006 f8cb 	bl	800a538 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80043a2:	bf00      	nop
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	24002868 	.word	0x24002868

080043ac <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC Error global Interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80043b0:	4802      	ldr	r0, [pc, #8]	; (80043bc <LTDC_ER_IRQHandler+0x10>)
 80043b2:	f006 f8c1 	bl	800a538 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 80043b6:	bf00      	nop
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	24002868 	.word	0x24002868

080043c0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80043c4:	4802      	ldr	r0, [pc, #8]	; (80043d0 <DMA2D_IRQHandler+0x10>)
 80043c6:	f003 ff79 	bl	80082bc <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80043ca:	bf00      	nop
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	240027c8 	.word	0x240027c8

080043d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043dc:	4a14      	ldr	r2, [pc, #80]	; (8004430 <_sbrk+0x5c>)
 80043de:	4b15      	ldr	r3, [pc, #84]	; (8004434 <_sbrk+0x60>)
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043e8:	4b13      	ldr	r3, [pc, #76]	; (8004438 <_sbrk+0x64>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d102      	bne.n	80043f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043f0:	4b11      	ldr	r3, [pc, #68]	; (8004438 <_sbrk+0x64>)
 80043f2:	4a12      	ldr	r2, [pc, #72]	; (800443c <_sbrk+0x68>)
 80043f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043f6:	4b10      	ldr	r3, [pc, #64]	; (8004438 <_sbrk+0x64>)
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4413      	add	r3, r2
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	429a      	cmp	r2, r3
 8004402:	d207      	bcs.n	8004414 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004404:	f00e ff0c 	bl	8013220 <__errno>
 8004408:	4603      	mov	r3, r0
 800440a:	220c      	movs	r2, #12
 800440c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800440e:	f04f 33ff 	mov.w	r3, #4294967295
 8004412:	e009      	b.n	8004428 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004414:	4b08      	ldr	r3, [pc, #32]	; (8004438 <_sbrk+0x64>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800441a:	4b07      	ldr	r3, [pc, #28]	; (8004438 <_sbrk+0x64>)
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4413      	add	r3, r2
 8004422:	4a05      	ldr	r2, [pc, #20]	; (8004438 <_sbrk+0x64>)
 8004424:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004426:	68fb      	ldr	r3, [r7, #12]
}
 8004428:	4618      	mov	r0, r3
 800442a:	3718      	adds	r7, #24
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	24100000 	.word	0x24100000
 8004434:	00000800 	.word	0x00000800
 8004438:	2400c400 	.word	0x2400c400
 800443c:	20000000 	.word	0x20000000

08004440 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004444:	4b32      	ldr	r3, [pc, #200]	; (8004510 <SystemInit+0xd0>)
 8004446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444a:	4a31      	ldr	r2, [pc, #196]	; (8004510 <SystemInit+0xd0>)
 800444c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004450:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004454:	4b2f      	ldr	r3, [pc, #188]	; (8004514 <SystemInit+0xd4>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 030f 	and.w	r3, r3, #15
 800445c:	2b02      	cmp	r3, #2
 800445e:	d807      	bhi.n	8004470 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004460:	4b2c      	ldr	r3, [pc, #176]	; (8004514 <SystemInit+0xd4>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f023 030f 	bic.w	r3, r3, #15
 8004468:	4a2a      	ldr	r2, [pc, #168]	; (8004514 <SystemInit+0xd4>)
 800446a:	f043 0303 	orr.w	r3, r3, #3
 800446e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004470:	4b29      	ldr	r3, [pc, #164]	; (8004518 <SystemInit+0xd8>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a28      	ldr	r2, [pc, #160]	; (8004518 <SystemInit+0xd8>)
 8004476:	f043 0301 	orr.w	r3, r3, #1
 800447a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800447c:	4b26      	ldr	r3, [pc, #152]	; (8004518 <SystemInit+0xd8>)
 800447e:	2200      	movs	r2, #0
 8004480:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004482:	4b25      	ldr	r3, [pc, #148]	; (8004518 <SystemInit+0xd8>)
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	4924      	ldr	r1, [pc, #144]	; (8004518 <SystemInit+0xd8>)
 8004488:	4b24      	ldr	r3, [pc, #144]	; (800451c <SystemInit+0xdc>)
 800448a:	4013      	ands	r3, r2
 800448c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800448e:	4b21      	ldr	r3, [pc, #132]	; (8004514 <SystemInit+0xd4>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 030c 	and.w	r3, r3, #12
 8004496:	2b00      	cmp	r3, #0
 8004498:	d007      	beq.n	80044aa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800449a:	4b1e      	ldr	r3, [pc, #120]	; (8004514 <SystemInit+0xd4>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f023 030f 	bic.w	r3, r3, #15
 80044a2:	4a1c      	ldr	r2, [pc, #112]	; (8004514 <SystemInit+0xd4>)
 80044a4:	f043 0303 	orr.w	r3, r3, #3
 80044a8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80044aa:	4b1b      	ldr	r3, [pc, #108]	; (8004518 <SystemInit+0xd8>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80044b0:	4b19      	ldr	r3, [pc, #100]	; (8004518 <SystemInit+0xd8>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80044b6:	4b18      	ldr	r3, [pc, #96]	; (8004518 <SystemInit+0xd8>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80044bc:	4b16      	ldr	r3, [pc, #88]	; (8004518 <SystemInit+0xd8>)
 80044be:	4a18      	ldr	r2, [pc, #96]	; (8004520 <SystemInit+0xe0>)
 80044c0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80044c2:	4b15      	ldr	r3, [pc, #84]	; (8004518 <SystemInit+0xd8>)
 80044c4:	4a17      	ldr	r2, [pc, #92]	; (8004524 <SystemInit+0xe4>)
 80044c6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80044c8:	4b13      	ldr	r3, [pc, #76]	; (8004518 <SystemInit+0xd8>)
 80044ca:	4a17      	ldr	r2, [pc, #92]	; (8004528 <SystemInit+0xe8>)
 80044cc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80044ce:	4b12      	ldr	r3, [pc, #72]	; (8004518 <SystemInit+0xd8>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80044d4:	4b10      	ldr	r3, [pc, #64]	; (8004518 <SystemInit+0xd8>)
 80044d6:	4a14      	ldr	r2, [pc, #80]	; (8004528 <SystemInit+0xe8>)
 80044d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80044da:	4b0f      	ldr	r3, [pc, #60]	; (8004518 <SystemInit+0xd8>)
 80044dc:	2200      	movs	r2, #0
 80044de:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80044e0:	4b0d      	ldr	r3, [pc, #52]	; (8004518 <SystemInit+0xd8>)
 80044e2:	4a11      	ldr	r2, [pc, #68]	; (8004528 <SystemInit+0xe8>)
 80044e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80044e6:	4b0c      	ldr	r3, [pc, #48]	; (8004518 <SystemInit+0xd8>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80044ec:	4b0a      	ldr	r3, [pc, #40]	; (8004518 <SystemInit+0xd8>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a09      	ldr	r2, [pc, #36]	; (8004518 <SystemInit+0xd8>)
 80044f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044f6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80044f8:	4b07      	ldr	r3, [pc, #28]	; (8004518 <SystemInit+0xd8>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80044fe:	4b0b      	ldr	r3, [pc, #44]	; (800452c <SystemInit+0xec>)
 8004500:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004504:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004506:	bf00      	nop
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr
 8004510:	e000ed00 	.word	0xe000ed00
 8004514:	52002000 	.word	0x52002000
 8004518:	58024400 	.word	0x58024400
 800451c:	eaf6ed7f 	.word	0xeaf6ed7f
 8004520:	02020200 	.word	0x02020200
 8004524:	01ff0000 	.word	0x01ff0000
 8004528:	01010280 	.word	0x01010280
 800452c:	52004000 	.word	0x52004000

08004530 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004534:	4b22      	ldr	r3, [pc, #136]	; (80045c0 <MX_USART1_UART_Init+0x90>)
 8004536:	4a23      	ldr	r2, [pc, #140]	; (80045c4 <MX_USART1_UART_Init+0x94>)
 8004538:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800453a:	4b21      	ldr	r3, [pc, #132]	; (80045c0 <MX_USART1_UART_Init+0x90>)
 800453c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004540:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004542:	4b1f      	ldr	r3, [pc, #124]	; (80045c0 <MX_USART1_UART_Init+0x90>)
 8004544:	2200      	movs	r2, #0
 8004546:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004548:	4b1d      	ldr	r3, [pc, #116]	; (80045c0 <MX_USART1_UART_Init+0x90>)
 800454a:	2200      	movs	r2, #0
 800454c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800454e:	4b1c      	ldr	r3, [pc, #112]	; (80045c0 <MX_USART1_UART_Init+0x90>)
 8004550:	2200      	movs	r2, #0
 8004552:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004554:	4b1a      	ldr	r3, [pc, #104]	; (80045c0 <MX_USART1_UART_Init+0x90>)
 8004556:	220c      	movs	r2, #12
 8004558:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800455a:	4b19      	ldr	r3, [pc, #100]	; (80045c0 <MX_USART1_UART_Init+0x90>)
 800455c:	2200      	movs	r2, #0
 800455e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004560:	4b17      	ldr	r3, [pc, #92]	; (80045c0 <MX_USART1_UART_Init+0x90>)
 8004562:	2200      	movs	r2, #0
 8004564:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004566:	4b16      	ldr	r3, [pc, #88]	; (80045c0 <MX_USART1_UART_Init+0x90>)
 8004568:	2200      	movs	r2, #0
 800456a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800456c:	4b14      	ldr	r3, [pc, #80]	; (80045c0 <MX_USART1_UART_Init+0x90>)
 800456e:	2200      	movs	r2, #0
 8004570:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004572:	4b13      	ldr	r3, [pc, #76]	; (80045c0 <MX_USART1_UART_Init+0x90>)
 8004574:	2200      	movs	r2, #0
 8004576:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004578:	4811      	ldr	r0, [pc, #68]	; (80045c0 <MX_USART1_UART_Init+0x90>)
 800457a:	f009 faa0 	bl	800dabe <HAL_UART_Init>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004584:	f7fd fa5c 	bl	8001a40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004588:	2100      	movs	r1, #0
 800458a:	480d      	ldr	r0, [pc, #52]	; (80045c0 <MX_USART1_UART_Init+0x90>)
 800458c:	f00b f936 	bl	800f7fc <HAL_UARTEx_SetTxFifoThreshold>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004596:	f7fd fa53 	bl	8001a40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800459a:	2100      	movs	r1, #0
 800459c:	4808      	ldr	r0, [pc, #32]	; (80045c0 <MX_USART1_UART_Init+0x90>)
 800459e:	f00b f96b 	bl	800f878 <HAL_UARTEx_SetRxFifoThreshold>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80045a8:	f7fd fa4a 	bl	8001a40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80045ac:	4804      	ldr	r0, [pc, #16]	; (80045c0 <MX_USART1_UART_Init+0x90>)
 80045ae:	f00b f8ec 	bl	800f78a <HAL_UARTEx_DisableFifoMode>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80045b8:	f7fd fa42 	bl	8001a40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80045bc:	bf00      	nop
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	2400c404 	.word	0x2400c404
 80045c4:	40011000 	.word	0x40011000

080045c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b0ba      	sub	sp, #232	; 0xe8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80045d4:	2200      	movs	r2, #0
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	605a      	str	r2, [r3, #4]
 80045da:	609a      	str	r2, [r3, #8]
 80045dc:	60da      	str	r2, [r3, #12]
 80045de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80045e0:	f107 0310 	add.w	r3, r7, #16
 80045e4:	22c0      	movs	r2, #192	; 0xc0
 80045e6:	2100      	movs	r1, #0
 80045e8:	4618      	mov	r0, r3
 80045ea:	f00e fe59 	bl	80132a0 <memset>
  if(uartHandle->Instance==USART1)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a2b      	ldr	r2, [pc, #172]	; (80046a0 <HAL_UART_MspInit+0xd8>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d14e      	bne.n	8004696 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80045f8:	f04f 0201 	mov.w	r2, #1
 80045fc:	f04f 0300 	mov.w	r3, #0
 8004600:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8004604:	2300      	movs	r3, #0
 8004606:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800460a:	f107 0310 	add.w	r3, r7, #16
 800460e:	4618      	mov	r0, r3
 8004610:	f007 fabe 	bl	800bb90 <HAL_RCCEx_PeriphCLKConfig>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800461a:	f7fd fa11 	bl	8001a40 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800461e:	4b21      	ldr	r3, [pc, #132]	; (80046a4 <HAL_UART_MspInit+0xdc>)
 8004620:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8004624:	4a1f      	ldr	r2, [pc, #124]	; (80046a4 <HAL_UART_MspInit+0xdc>)
 8004626:	f043 0310 	orr.w	r3, r3, #16
 800462a:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 800462e:	4b1d      	ldr	r3, [pc, #116]	; (80046a4 <HAL_UART_MspInit+0xdc>)
 8004630:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8004634:	f003 0310 	and.w	r3, r3, #16
 8004638:	60fb      	str	r3, [r7, #12]
 800463a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800463c:	4b19      	ldr	r3, [pc, #100]	; (80046a4 <HAL_UART_MspInit+0xdc>)
 800463e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004642:	4a18      	ldr	r2, [pc, #96]	; (80046a4 <HAL_UART_MspInit+0xdc>)
 8004644:	f043 0301 	orr.w	r3, r3, #1
 8004648:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800464c:	4b15      	ldr	r3, [pc, #84]	; (80046a4 <HAL_UART_MspInit+0xdc>)
 800464e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	60bb      	str	r3, [r7, #8]
 8004658:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 800465a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800465e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004662:	2302      	movs	r3, #2
 8004664:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004668:	2300      	movs	r3, #0
 800466a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800466e:	2300      	movs	r3, #0
 8004670:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004674:	2307      	movs	r3, #7
 8004676:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800467a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800467e:	4619      	mov	r1, r3
 8004680:	4809      	ldr	r0, [pc, #36]	; (80046a8 <HAL_UART_MspInit+0xe0>)
 8004682:	f004 fd2f 	bl	80090e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004686:	2200      	movs	r2, #0
 8004688:	2100      	movs	r1, #0
 800468a:	2025      	movs	r0, #37	; 0x25
 800468c:	f000 f9c9 	bl	8004a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004690:	2025      	movs	r0, #37	; 0x25
 8004692:	f000 f9e0 	bl	8004a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004696:	bf00      	nop
 8004698:	37e8      	adds	r7, #232	; 0xe8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	40011000 	.word	0x40011000
 80046a4:	58024400 	.word	0x58024400
 80046a8:	58020000 	.word	0x58020000

080046ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80046ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80046e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80046b0:	f7ff fec6 	bl	8004440 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80046b4:	480c      	ldr	r0, [pc, #48]	; (80046e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80046b6:	490d      	ldr	r1, [pc, #52]	; (80046ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80046b8:	4a0d      	ldr	r2, [pc, #52]	; (80046f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80046ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80046bc:	e002      	b.n	80046c4 <LoopCopyDataInit>

080046be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80046be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046c2:	3304      	adds	r3, #4

080046c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80046c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046c8:	d3f9      	bcc.n	80046be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046ca:	4a0a      	ldr	r2, [pc, #40]	; (80046f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80046cc:	4c0a      	ldr	r4, [pc, #40]	; (80046f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80046ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046d0:	e001      	b.n	80046d6 <LoopFillZerobss>

080046d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046d4:	3204      	adds	r2, #4

080046d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046d8:	d3fb      	bcc.n	80046d2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80046da:	f00e fda7 	bl	801322c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80046de:	f7fd f843 	bl	8001768 <main>
  bx  lr
 80046e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80046e4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80046e8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80046ec:	240026b8 	.word	0x240026b8
  ldr r2, =_sidata
 80046f0:	08026c38 	.word	0x08026c38
  ldr r2, =_sbss
 80046f4:	240026c0 	.word	0x240026c0
  ldr r4, =_ebss
 80046f8:	2407db58 	.word	0x2407db58

080046fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80046fc:	e7fe      	b.n	80046fc <ADC_IRQHandler>
	...

08004700 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004706:	2003      	movs	r0, #3
 8004708:	f000 f980 	bl	8004a0c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800470c:	f007 f86a 	bl	800b7e4 <HAL_RCC_GetSysClockFreq>
 8004710:	4602      	mov	r2, r0
 8004712:	4b15      	ldr	r3, [pc, #84]	; (8004768 <HAL_Init+0x68>)
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	0a1b      	lsrs	r3, r3, #8
 8004718:	f003 030f 	and.w	r3, r3, #15
 800471c:	4913      	ldr	r1, [pc, #76]	; (800476c <HAL_Init+0x6c>)
 800471e:	5ccb      	ldrb	r3, [r1, r3]
 8004720:	f003 031f 	and.w	r3, r3, #31
 8004724:	fa22 f303 	lsr.w	r3, r2, r3
 8004728:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800472a:	4b0f      	ldr	r3, [pc, #60]	; (8004768 <HAL_Init+0x68>)
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	f003 030f 	and.w	r3, r3, #15
 8004732:	4a0e      	ldr	r2, [pc, #56]	; (800476c <HAL_Init+0x6c>)
 8004734:	5cd3      	ldrb	r3, [r2, r3]
 8004736:	f003 031f 	and.w	r3, r3, #31
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	fa22 f303 	lsr.w	r3, r2, r3
 8004740:	4a0b      	ldr	r2, [pc, #44]	; (8004770 <HAL_Init+0x70>)
 8004742:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004744:	4a0b      	ldr	r2, [pc, #44]	; (8004774 <HAL_Init+0x74>)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800474a:	2000      	movs	r0, #0
 800474c:	f000 f814 	bl	8004778 <HAL_InitTick>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e002      	b.n	8004760 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800475a:	f7ff fdbb 	bl	80042d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3708      	adds	r7, #8
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	58024400 	.word	0x58024400
 800476c:	08014c98 	.word	0x08014c98
 8004770:	240004c8 	.word	0x240004c8
 8004774:	240004c4 	.word	0x240004c4

08004778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004780:	4b15      	ldr	r3, [pc, #84]	; (80047d8 <HAL_InitTick+0x60>)
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e021      	b.n	80047d0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800478c:	4b13      	ldr	r3, [pc, #76]	; (80047dc <HAL_InitTick+0x64>)
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	4b11      	ldr	r3, [pc, #68]	; (80047d8 <HAL_InitTick+0x60>)
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	4619      	mov	r1, r3
 8004796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800479a:	fbb3 f3f1 	udiv	r3, r3, r1
 800479e:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 f965 	bl	8004a72 <HAL_SYSTICK_Config>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e00e      	b.n	80047d0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b0f      	cmp	r3, #15
 80047b6:	d80a      	bhi.n	80047ce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047b8:	2200      	movs	r2, #0
 80047ba:	6879      	ldr	r1, [r7, #4]
 80047bc:	f04f 30ff 	mov.w	r0, #4294967295
 80047c0:	f000 f92f 	bl	8004a22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80047c4:	4a06      	ldr	r2, [pc, #24]	; (80047e0 <HAL_InitTick+0x68>)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
 80047cc:	e000      	b.n	80047d0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	240004d0 	.word	0x240004d0
 80047dc:	240004c4 	.word	0x240004c4
 80047e0:	240004cc 	.word	0x240004cc

080047e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047e4:	b480      	push	{r7}
 80047e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80047e8:	4b06      	ldr	r3, [pc, #24]	; (8004804 <HAL_IncTick+0x20>)
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	461a      	mov	r2, r3
 80047ee:	4b06      	ldr	r3, [pc, #24]	; (8004808 <HAL_IncTick+0x24>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4413      	add	r3, r2
 80047f4:	4a04      	ldr	r2, [pc, #16]	; (8004808 <HAL_IncTick+0x24>)
 80047f6:	6013      	str	r3, [r2, #0]
}
 80047f8:	bf00      	nop
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	240004d0 	.word	0x240004d0
 8004808:	2400c498 	.word	0x2400c498

0800480c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800480c:	b480      	push	{r7}
 800480e:	af00      	add	r7, sp, #0
  return uwTick;
 8004810:	4b03      	ldr	r3, [pc, #12]	; (8004820 <HAL_GetTick+0x14>)
 8004812:	681b      	ldr	r3, [r3, #0]
}
 8004814:	4618      	mov	r0, r3
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	2400c498 	.word	0x2400c498

08004824 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800482c:	f7ff ffee 	bl	800480c <HAL_GetTick>
 8004830:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483c:	d005      	beq.n	800484a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800483e:	4b0a      	ldr	r3, [pc, #40]	; (8004868 <HAL_Delay+0x44>)
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	461a      	mov	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4413      	add	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800484a:	bf00      	nop
 800484c:	f7ff ffde 	bl	800480c <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	429a      	cmp	r2, r3
 800485a:	d8f7      	bhi.n	800484c <HAL_Delay+0x28>
  {
  }
}
 800485c:	bf00      	nop
 800485e:	bf00      	nop
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	240004d0 	.word	0x240004d0

0800486c <__NVIC_SetPriorityGrouping>:
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f003 0307 	and.w	r3, r3, #7
 800487a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800487c:	4b0b      	ldr	r3, [pc, #44]	; (80048ac <__NVIC_SetPriorityGrouping+0x40>)
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004888:	4013      	ands	r3, r2
 800488a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004894:	4b06      	ldr	r3, [pc, #24]	; (80048b0 <__NVIC_SetPriorityGrouping+0x44>)
 8004896:	4313      	orrs	r3, r2
 8004898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800489a:	4a04      	ldr	r2, [pc, #16]	; (80048ac <__NVIC_SetPriorityGrouping+0x40>)
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	60d3      	str	r3, [r2, #12]
}
 80048a0:	bf00      	nop
 80048a2:	3714      	adds	r7, #20
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	e000ed00 	.word	0xe000ed00
 80048b0:	05fa0000 	.word	0x05fa0000

080048b4 <__NVIC_GetPriorityGrouping>:
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048b8:	4b04      	ldr	r3, [pc, #16]	; (80048cc <__NVIC_GetPriorityGrouping+0x18>)
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	0a1b      	lsrs	r3, r3, #8
 80048be:	f003 0307 	and.w	r3, r3, #7
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr
 80048cc:	e000ed00 	.word	0xe000ed00

080048d0 <__NVIC_EnableIRQ>:
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	4603      	mov	r3, r0
 80048d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80048da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	db0b      	blt.n	80048fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048e2:	88fb      	ldrh	r3, [r7, #6]
 80048e4:	f003 021f 	and.w	r2, r3, #31
 80048e8:	4907      	ldr	r1, [pc, #28]	; (8004908 <__NVIC_EnableIRQ+0x38>)
 80048ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048ee:	095b      	lsrs	r3, r3, #5
 80048f0:	2001      	movs	r0, #1
 80048f2:	fa00 f202 	lsl.w	r2, r0, r2
 80048f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	e000e100 	.word	0xe000e100

0800490c <__NVIC_SetPriority>:
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	4603      	mov	r3, r0
 8004914:	6039      	str	r1, [r7, #0]
 8004916:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004918:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800491c:	2b00      	cmp	r3, #0
 800491e:	db0a      	blt.n	8004936 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	b2da      	uxtb	r2, r3
 8004924:	490c      	ldr	r1, [pc, #48]	; (8004958 <__NVIC_SetPriority+0x4c>)
 8004926:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800492a:	0112      	lsls	r2, r2, #4
 800492c:	b2d2      	uxtb	r2, r2
 800492e:	440b      	add	r3, r1
 8004930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004934:	e00a      	b.n	800494c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	b2da      	uxtb	r2, r3
 800493a:	4908      	ldr	r1, [pc, #32]	; (800495c <__NVIC_SetPriority+0x50>)
 800493c:	88fb      	ldrh	r3, [r7, #6]
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	3b04      	subs	r3, #4
 8004944:	0112      	lsls	r2, r2, #4
 8004946:	b2d2      	uxtb	r2, r2
 8004948:	440b      	add	r3, r1
 800494a:	761a      	strb	r2, [r3, #24]
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	e000e100 	.word	0xe000e100
 800495c:	e000ed00 	.word	0xe000ed00

08004960 <NVIC_EncodePriority>:
{
 8004960:	b480      	push	{r7}
 8004962:	b089      	sub	sp, #36	; 0x24
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f003 0307 	and.w	r3, r3, #7
 8004972:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	f1c3 0307 	rsb	r3, r3, #7
 800497a:	2b04      	cmp	r3, #4
 800497c:	bf28      	it	cs
 800497e:	2304      	movcs	r3, #4
 8004980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	3304      	adds	r3, #4
 8004986:	2b06      	cmp	r3, #6
 8004988:	d902      	bls.n	8004990 <NVIC_EncodePriority+0x30>
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	3b03      	subs	r3, #3
 800498e:	e000      	b.n	8004992 <NVIC_EncodePriority+0x32>
 8004990:	2300      	movs	r3, #0
 8004992:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004994:	f04f 32ff 	mov.w	r2, #4294967295
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	fa02 f303 	lsl.w	r3, r2, r3
 800499e:	43da      	mvns	r2, r3
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	401a      	ands	r2, r3
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049a8:	f04f 31ff 	mov.w	r1, #4294967295
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	fa01 f303 	lsl.w	r3, r1, r3
 80049b2:	43d9      	mvns	r1, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049b8:	4313      	orrs	r3, r2
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3724      	adds	r7, #36	; 0x24
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
	...

080049c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	3b01      	subs	r3, #1
 80049d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049d8:	d301      	bcc.n	80049de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80049da:	2301      	movs	r3, #1
 80049dc:	e00f      	b.n	80049fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049de:	4a0a      	ldr	r2, [pc, #40]	; (8004a08 <SysTick_Config+0x40>)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3b01      	subs	r3, #1
 80049e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049e6:	210f      	movs	r1, #15
 80049e8:	f04f 30ff 	mov.w	r0, #4294967295
 80049ec:	f7ff ff8e 	bl	800490c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049f0:	4b05      	ldr	r3, [pc, #20]	; (8004a08 <SysTick_Config+0x40>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049f6:	4b04      	ldr	r3, [pc, #16]	; (8004a08 <SysTick_Config+0x40>)
 80049f8:	2207      	movs	r2, #7
 80049fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	e000e010 	.word	0xe000e010

08004a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f7ff ff29 	bl	800486c <__NVIC_SetPriorityGrouping>
}
 8004a1a:	bf00      	nop
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b086      	sub	sp, #24
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	4603      	mov	r3, r0
 8004a2a:	60b9      	str	r1, [r7, #8]
 8004a2c:	607a      	str	r2, [r7, #4]
 8004a2e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a30:	f7ff ff40 	bl	80048b4 <__NVIC_GetPriorityGrouping>
 8004a34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	68b9      	ldr	r1, [r7, #8]
 8004a3a:	6978      	ldr	r0, [r7, #20]
 8004a3c:	f7ff ff90 	bl	8004960 <NVIC_EncodePriority>
 8004a40:	4602      	mov	r2, r0
 8004a42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a46:	4611      	mov	r1, r2
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7ff ff5f 	bl	800490c <__NVIC_SetPriority>
}
 8004a4e:	bf00      	nop
 8004a50:	3718      	adds	r7, #24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b082      	sub	sp, #8
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7ff ff33 	bl	80048d0 <__NVIC_EnableIRQ>
}
 8004a6a:	bf00      	nop
 8004a6c:	3708      	adds	r7, #8
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b082      	sub	sp, #8
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7ff ffa4 	bl	80049c8 <SysTick_Config>
 8004a80:	4603      	mov	r3, r0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
	...

08004a8c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e054      	b.n	8004b48 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	7f5b      	ldrb	r3, [r3, #29]
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d105      	bne.n	8004ab4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7fb fe12 	bl	80006d8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	791b      	ldrb	r3, [r3, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10c      	bne.n	8004adc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a22      	ldr	r2, [pc, #136]	; (8004b50 <HAL_CRC_Init+0xc4>)
 8004ac8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689a      	ldr	r2, [r3, #8]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f022 0218 	bic.w	r2, r2, #24
 8004ad8:	609a      	str	r2, [r3, #8]
 8004ada:	e00c      	b.n	8004af6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6899      	ldr	r1, [r3, #8]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f834 	bl	8004b54 <HAL_CRCEx_Polynomial_Set>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d001      	beq.n	8004af6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e028      	b.n	8004b48 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	795b      	ldrb	r3, [r3, #5]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d105      	bne.n	8004b0a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f04f 32ff 	mov.w	r2, #4294967295
 8004b06:	611a      	str	r2, [r3, #16]
 8004b08:	e004      	b.n	8004b14 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	6912      	ldr	r2, [r2, #16]
 8004b12:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	695a      	ldr	r2, [r3, #20]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	699a      	ldr	r2, [r3, #24]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3708      	adds	r7, #8
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	04c11db7 	.word	0x04c11db7

08004b54 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b087      	sub	sp, #28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b60:	2300      	movs	r3, #0
 8004b62:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004b64:	231f      	movs	r3, #31
 8004b66:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d102      	bne.n	8004b78 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	75fb      	strb	r3, [r7, #23]
 8004b76:	e063      	b.n	8004c40 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004b78:	bf00      	nop
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1e5a      	subs	r2, r3, #1
 8004b7e:	613a      	str	r2, [r7, #16]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d009      	beq.n	8004b98 <HAL_CRCEx_Polynomial_Set+0x44>
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	f003 031f 	and.w	r3, r3, #31
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d0f0      	beq.n	8004b7a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b18      	cmp	r3, #24
 8004b9c:	d846      	bhi.n	8004c2c <HAL_CRCEx_Polynomial_Set+0xd8>
 8004b9e:	a201      	add	r2, pc, #4	; (adr r2, 8004ba4 <HAL_CRCEx_Polynomial_Set+0x50>)
 8004ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba4:	08004c33 	.word	0x08004c33
 8004ba8:	08004c2d 	.word	0x08004c2d
 8004bac:	08004c2d 	.word	0x08004c2d
 8004bb0:	08004c2d 	.word	0x08004c2d
 8004bb4:	08004c2d 	.word	0x08004c2d
 8004bb8:	08004c2d 	.word	0x08004c2d
 8004bbc:	08004c2d 	.word	0x08004c2d
 8004bc0:	08004c2d 	.word	0x08004c2d
 8004bc4:	08004c21 	.word	0x08004c21
 8004bc8:	08004c2d 	.word	0x08004c2d
 8004bcc:	08004c2d 	.word	0x08004c2d
 8004bd0:	08004c2d 	.word	0x08004c2d
 8004bd4:	08004c2d 	.word	0x08004c2d
 8004bd8:	08004c2d 	.word	0x08004c2d
 8004bdc:	08004c2d 	.word	0x08004c2d
 8004be0:	08004c2d 	.word	0x08004c2d
 8004be4:	08004c15 	.word	0x08004c15
 8004be8:	08004c2d 	.word	0x08004c2d
 8004bec:	08004c2d 	.word	0x08004c2d
 8004bf0:	08004c2d 	.word	0x08004c2d
 8004bf4:	08004c2d 	.word	0x08004c2d
 8004bf8:	08004c2d 	.word	0x08004c2d
 8004bfc:	08004c2d 	.word	0x08004c2d
 8004c00:	08004c2d 	.word	0x08004c2d
 8004c04:	08004c09 	.word	0x08004c09
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	2b06      	cmp	r3, #6
 8004c0c:	d913      	bls.n	8004c36 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004c12:	e010      	b.n	8004c36 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	2b07      	cmp	r3, #7
 8004c18:	d90f      	bls.n	8004c3a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004c1e:	e00c      	b.n	8004c3a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	2b0f      	cmp	r3, #15
 8004c24:	d90b      	bls.n	8004c3e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004c2a:	e008      	b.n	8004c3e <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	75fb      	strb	r3, [r7, #23]
        break;
 8004c30:	e006      	b.n	8004c40 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004c32:	bf00      	nop
 8004c34:	e004      	b.n	8004c40 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004c36:	bf00      	nop
 8004c38:	e002      	b.n	8004c40 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004c3a:	bf00      	nop
 8004c3c:	e000      	b.n	8004c40 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004c3e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8004c40:	7dfb      	ldrb	r3, [r7, #23]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10d      	bne.n	8004c62 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f023 0118 	bic.w	r1, r3, #24
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	371c      	adds	r7, #28
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e069      	b.n	8004d56 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d102      	bne.n	8004c94 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7fb fd78 	bl	8000784 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2202      	movs	r2, #2
 8004c98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d002      	beq.n	8004caa <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	6819      	ldr	r1, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	4b2a      	ldr	r3, [pc, #168]	; (8004d60 <HAL_DCMI_Init+0xf0>)
 8004cb6:	400b      	ands	r3, r1
 8004cb8:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6819      	ldr	r1, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685a      	ldr	r2, [r3, #4]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	695b      	ldr	r3, [r3, #20]
 8004cc8:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004cce:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004cda:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004ce6:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004cf2:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf8:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004cfe:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	430a      	orrs	r2, r1
 8004d06:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	2b10      	cmp	r3, #16
 8004d0e:	d112      	bne.n	8004d36 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	7f1b      	ldrb	r3, [r3, #28]
 8004d14:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	7f5b      	ldrb	r3, [r3, #29]
 8004d1a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004d1c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	7f9b      	ldrb	r3, [r3, #30]
 8004d22:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004d24:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	7fdb      	ldrb	r3, [r3, #31]
 8004d2c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004d32:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004d34:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68da      	ldr	r2, [r3, #12]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f042 021e 	orr.w	r2, r2, #30
 8004d44:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	ffe0f007 	.word	0xffe0f007

08004d64 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b088      	sub	sp, #32
 8004d68:	af02      	add	r7, sp, #8
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
 8004d70:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d101      	bne.n	8004d80 <HAL_DCMI_Start_DMA+0x1c>
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	e0ab      	b.n	8004ed8 <HAL_DCMI_Start_DMA+0x174>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d9e:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0202 	bic.w	r2, r2, #2
 8004dae:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6819      	ldr	r1, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dc4:	4a46      	ldr	r2, [pc, #280]	; (8004ee0 <HAL_DCMI_Start_DMA+0x17c>)
 8004dc6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dcc:	4a45      	ldr	r2, [pc, #276]	; (8004ee4 <HAL_DCMI_Start_DMA+0x180>)
 8004dce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004df6:	d219      	bcs.n	8004e2c <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	3328      	adds	r3, #40	; 0x28
 8004e02:	4619      	mov	r1, r3
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	f000 fd90 	bl	800592c <HAL_DMA_Start_IT>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d055      	beq.n	8004ebe <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2240      	movs	r2, #64	; 0x40
 8004e16:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e055      	b.n	8004ed8 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e30:	4a2b      	ldr	r2, [pc, #172]	; (8004ee0 <HAL_DCMI_Start_DMA+0x17c>)
 8004e32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2201      	movs	r2, #1
 8004e38:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	683a      	ldr	r2, [r7, #0]
 8004e3e:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8004e46:	e009      	b.n	8004e5c <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e4c:	085a      	lsrs	r2, r3, #1
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e56:	005a      	lsls	r2, r3, #1
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e64:	d2f0      	bcs.n	8004e48 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6a:	1e9a      	subs	r2, r3, #2
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	4413      	add	r3, r2
 8004e82:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	3328      	adds	r3, #40	; 0x28
 8004e8e:	4619      	mov	r1, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	f003 fc73 	bl	8008784 <HAL_DMAEx_MultiBufferStart_IT>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00c      	beq.n	8004ebe <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2240      	movs	r2, #64	; 0x40
 8004ea8:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e00c      	b.n	8004ed8 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f042 0201 	orr.w	r2, r2, #1
 8004ecc:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3718      	adds	r7, #24
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	080050ad 	.word	0x080050ad
 8004ee4:	080051d3 	.word	0x080051d3

08004ee8 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8004ef0:	4b2b      	ldr	r3, [pc, #172]	; (8004fa0 <HAL_DCMI_Stop+0xb8>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a2b      	ldr	r2, [pc, #172]	; (8004fa4 <HAL_DCMI_Stop+0xbc>)
 8004ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8004efa:	0a5b      	lsrs	r3, r3, #9
 8004efc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f00:	fb02 f303 	mul.w	r3, r2, r3
 8004f04:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004f06:	2300      	movs	r3, #0
 8004f08:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d101      	bne.n	8004f18 <HAL_DCMI_Stop+0x30>
 8004f14:	2302      	movs	r3, #2
 8004f16:	e03f      	b.n	8004f98 <HAL_DCMI_Stop+0xb0>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 0201 	bic.w	r2, r2, #1
 8004f36:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d108      	bne.n	8004f56 <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f48:	f043 0220 	orr.w	r2, r3, #32
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	72fb      	strb	r3, [r7, #11]
      break;
 8004f54:	e006      	b.n	8004f64 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0301 	and.w	r3, r3, #1
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1e9      	bne.n	8004f38 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f72:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f000 ff41 	bl	8005e00 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8004f96:	7afb      	ldrb	r3, [r7, #11]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	240004c4 	.word	0x240004c4
 8004fa4:	10624dd3 	.word	0x10624dd3

08004fa8 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f003 0304 	and.w	r3, r3, #4
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d016      	beq.n	8004ff0 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2204      	movs	r2, #4
 8004fc8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fce:	f043 0202 	orr.w	r2, r3, #2
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2204      	movs	r2, #4
 8004fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fe2:	4a31      	ldr	r2, [pc, #196]	; (80050a8 <HAL_DCMI_IRQHandler+0x100>)
 8004fe4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fea:	4618      	mov	r0, r3
 8004fec:	f001 fa26 	bl	800643c <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d016      	beq.n	8005028 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2202      	movs	r2, #2
 8005000:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005006:	f043 0201 	orr.w	r2, r3, #1
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2204      	movs	r2, #4
 8005012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800501a:	4a23      	ldr	r2, [pc, #140]	; (80050a8 <HAL_DCMI_IRQHandler+0x100>)
 800501c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005022:	4618      	mov	r0, r3
 8005024:	f001 fa0a 	bl	800643c <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f003 0310 	and.w	r3, r3, #16
 800502e:	2b00      	cmp	r3, #0
 8005030:	d006      	beq.n	8005040 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2210      	movs	r2, #16
 8005038:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f7ff f858 	bl	80040f0 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f003 0308 	and.w	r3, r3, #8
 8005046:	2b00      	cmp	r3, #0
 8005048:	d006      	beq.n	8005058 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2208      	movs	r2, #8
 8005050:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f7ff f862 	bl	800411c <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b00      	cmp	r3, #0
 8005060:	d01d      	beq.n	800509e <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b02      	cmp	r3, #2
 800506e:	d107      	bne.n	8005080 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68da      	ldr	r2, [r3, #12]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 021e 	bic.w	r2, r2, #30
 800507e:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68da      	ldr	r2, [r3, #12]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f022 0201 	bic.w	r2, r2, #1
 800508e:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2201      	movs	r2, #1
 8005096:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7ff f834 	bl	8004106 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 800509e:	bf00      	nop
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	080051d3 	.word	0x080051d3

080050ac <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b8:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d043      	beq.n	800514a <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050ce:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d118      	bne.n	800510e <DCMI_DMAXferCplt+0x62>
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d015      	beq.n	800510e <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f4:	00da      	lsls	r2, r3, #3
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	4413      	add	r3, r2
 80050fa:	2200      	movs	r2, #0
 80050fc:	4619      	mov	r1, r3
 80050fe:	f003 fe9f 	bl	8008e40 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005106:	1e5a      	subs	r2, r3, #1
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	639a      	str	r2, [r3, #56]	; 0x38
 800510c:	e044      	b.n	8005198 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d13c      	bne.n	8005198 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005130:	00da      	lsls	r2, r3, #3
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	4413      	add	r3, r2
 8005136:	2201      	movs	r2, #1
 8005138:	4619      	mov	r1, r3
 800513a:	f003 fe81 	bl	8008e40 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005142:	1e5a      	subs	r2, r3, #1
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	639a      	str	r2, [r3, #56]	; 0x38
 8005148:	e026      	b.n	8005198 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d006      	beq.n	8005168 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005164:	60da      	str	r2, [r3, #12]
 8005166:	e017      	b.n	8005198 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10f      	bne.n	8005198 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800517c:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005182:	0099      	lsls	r1, r3, #2
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	440a      	add	r2, r1
 800518e:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d112      	bne.n	80051ca <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68da      	ldr	r2, [r3, #12]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f042 0201 	orr.w	r2, r2, #1
 80051b2:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d103      	bne.n	80051ca <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 80051ca:	bf00      	nop
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b084      	sub	sp, #16
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051de:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d009      	beq.n	80051fe <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f7fe ff97 	bl	8004132 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8005204:	bf00      	nop
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005214:	f7ff fafa 	bl	800480c <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e37f      	b.n	8005924 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a66      	ldr	r2, [pc, #408]	; (80053c4 <HAL_DMA_Init+0x1b8>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d04a      	beq.n	80052c4 <HAL_DMA_Init+0xb8>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a65      	ldr	r2, [pc, #404]	; (80053c8 <HAL_DMA_Init+0x1bc>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d045      	beq.n	80052c4 <HAL_DMA_Init+0xb8>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a63      	ldr	r2, [pc, #396]	; (80053cc <HAL_DMA_Init+0x1c0>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d040      	beq.n	80052c4 <HAL_DMA_Init+0xb8>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a62      	ldr	r2, [pc, #392]	; (80053d0 <HAL_DMA_Init+0x1c4>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d03b      	beq.n	80052c4 <HAL_DMA_Init+0xb8>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a60      	ldr	r2, [pc, #384]	; (80053d4 <HAL_DMA_Init+0x1c8>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d036      	beq.n	80052c4 <HAL_DMA_Init+0xb8>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a5f      	ldr	r2, [pc, #380]	; (80053d8 <HAL_DMA_Init+0x1cc>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d031      	beq.n	80052c4 <HAL_DMA_Init+0xb8>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a5d      	ldr	r2, [pc, #372]	; (80053dc <HAL_DMA_Init+0x1d0>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d02c      	beq.n	80052c4 <HAL_DMA_Init+0xb8>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a5c      	ldr	r2, [pc, #368]	; (80053e0 <HAL_DMA_Init+0x1d4>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d027      	beq.n	80052c4 <HAL_DMA_Init+0xb8>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a5a      	ldr	r2, [pc, #360]	; (80053e4 <HAL_DMA_Init+0x1d8>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d022      	beq.n	80052c4 <HAL_DMA_Init+0xb8>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a59      	ldr	r2, [pc, #356]	; (80053e8 <HAL_DMA_Init+0x1dc>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d01d      	beq.n	80052c4 <HAL_DMA_Init+0xb8>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a57      	ldr	r2, [pc, #348]	; (80053ec <HAL_DMA_Init+0x1e0>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d018      	beq.n	80052c4 <HAL_DMA_Init+0xb8>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a56      	ldr	r2, [pc, #344]	; (80053f0 <HAL_DMA_Init+0x1e4>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d013      	beq.n	80052c4 <HAL_DMA_Init+0xb8>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a54      	ldr	r2, [pc, #336]	; (80053f4 <HAL_DMA_Init+0x1e8>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d00e      	beq.n	80052c4 <HAL_DMA_Init+0xb8>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a53      	ldr	r2, [pc, #332]	; (80053f8 <HAL_DMA_Init+0x1ec>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d009      	beq.n	80052c4 <HAL_DMA_Init+0xb8>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a51      	ldr	r2, [pc, #324]	; (80053fc <HAL_DMA_Init+0x1f0>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d004      	beq.n	80052c4 <HAL_DMA_Init+0xb8>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a50      	ldr	r2, [pc, #320]	; (8005400 <HAL_DMA_Init+0x1f4>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d101      	bne.n	80052c8 <HAL_DMA_Init+0xbc>
 80052c4:	2301      	movs	r3, #1
 80052c6:	e000      	b.n	80052ca <HAL_DMA_Init+0xbe>
 80052c8:	2300      	movs	r3, #0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f000 813c 	beq.w	8005548 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a37      	ldr	r2, [pc, #220]	; (80053c4 <HAL_DMA_Init+0x1b8>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d04a      	beq.n	8005380 <HAL_DMA_Init+0x174>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a36      	ldr	r2, [pc, #216]	; (80053c8 <HAL_DMA_Init+0x1bc>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d045      	beq.n	8005380 <HAL_DMA_Init+0x174>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a34      	ldr	r2, [pc, #208]	; (80053cc <HAL_DMA_Init+0x1c0>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d040      	beq.n	8005380 <HAL_DMA_Init+0x174>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a33      	ldr	r2, [pc, #204]	; (80053d0 <HAL_DMA_Init+0x1c4>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d03b      	beq.n	8005380 <HAL_DMA_Init+0x174>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a31      	ldr	r2, [pc, #196]	; (80053d4 <HAL_DMA_Init+0x1c8>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d036      	beq.n	8005380 <HAL_DMA_Init+0x174>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a30      	ldr	r2, [pc, #192]	; (80053d8 <HAL_DMA_Init+0x1cc>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d031      	beq.n	8005380 <HAL_DMA_Init+0x174>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a2e      	ldr	r2, [pc, #184]	; (80053dc <HAL_DMA_Init+0x1d0>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d02c      	beq.n	8005380 <HAL_DMA_Init+0x174>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a2d      	ldr	r2, [pc, #180]	; (80053e0 <HAL_DMA_Init+0x1d4>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d027      	beq.n	8005380 <HAL_DMA_Init+0x174>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a2b      	ldr	r2, [pc, #172]	; (80053e4 <HAL_DMA_Init+0x1d8>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d022      	beq.n	8005380 <HAL_DMA_Init+0x174>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a2a      	ldr	r2, [pc, #168]	; (80053e8 <HAL_DMA_Init+0x1dc>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d01d      	beq.n	8005380 <HAL_DMA_Init+0x174>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a28      	ldr	r2, [pc, #160]	; (80053ec <HAL_DMA_Init+0x1e0>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d018      	beq.n	8005380 <HAL_DMA_Init+0x174>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a27      	ldr	r2, [pc, #156]	; (80053f0 <HAL_DMA_Init+0x1e4>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d013      	beq.n	8005380 <HAL_DMA_Init+0x174>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a25      	ldr	r2, [pc, #148]	; (80053f4 <HAL_DMA_Init+0x1e8>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d00e      	beq.n	8005380 <HAL_DMA_Init+0x174>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a24      	ldr	r2, [pc, #144]	; (80053f8 <HAL_DMA_Init+0x1ec>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d009      	beq.n	8005380 <HAL_DMA_Init+0x174>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a22      	ldr	r2, [pc, #136]	; (80053fc <HAL_DMA_Init+0x1f0>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d004      	beq.n	8005380 <HAL_DMA_Init+0x174>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a21      	ldr	r2, [pc, #132]	; (8005400 <HAL_DMA_Init+0x1f4>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d108      	bne.n	8005392 <HAL_DMA_Init+0x186>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0201 	bic.w	r2, r2, #1
 800538e:	601a      	str	r2, [r3, #0]
 8005390:	e007      	b.n	80053a2 <HAL_DMA_Init+0x196>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f022 0201 	bic.w	r2, r2, #1
 80053a0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80053a2:	e02f      	b.n	8005404 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80053a4:	f7ff fa32 	bl	800480c <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b05      	cmp	r3, #5
 80053b0:	d928      	bls.n	8005404 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2220      	movs	r2, #32
 80053b6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2203      	movs	r2, #3
 80053bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e2af      	b.n	8005924 <HAL_DMA_Init+0x718>
 80053c4:	40020010 	.word	0x40020010
 80053c8:	40020028 	.word	0x40020028
 80053cc:	40020040 	.word	0x40020040
 80053d0:	40020058 	.word	0x40020058
 80053d4:	40020070 	.word	0x40020070
 80053d8:	40020088 	.word	0x40020088
 80053dc:	400200a0 	.word	0x400200a0
 80053e0:	400200b8 	.word	0x400200b8
 80053e4:	40020410 	.word	0x40020410
 80053e8:	40020428 	.word	0x40020428
 80053ec:	40020440 	.word	0x40020440
 80053f0:	40020458 	.word	0x40020458
 80053f4:	40020470 	.word	0x40020470
 80053f8:	40020488 	.word	0x40020488
 80053fc:	400204a0 	.word	0x400204a0
 8005400:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1c8      	bne.n	80053a4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	4b73      	ldr	r3, [pc, #460]	; (80055ec <HAL_DMA_Init+0x3e0>)
 800541e:	4013      	ands	r3, r2
 8005420:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800542a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005436:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005442:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	4313      	orrs	r3, r2
 800544e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005454:	2b04      	cmp	r3, #4
 8005456:	d107      	bne.n	8005468 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005460:	4313      	orrs	r3, r2
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	4313      	orrs	r3, r2
 8005466:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	2b28      	cmp	r3, #40	; 0x28
 800546e:	d903      	bls.n	8005478 <HAL_DMA_Init+0x26c>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	2b2e      	cmp	r3, #46	; 0x2e
 8005476:	d91f      	bls.n	80054b8 <HAL_DMA_Init+0x2ac>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	2b3e      	cmp	r3, #62	; 0x3e
 800547e:	d903      	bls.n	8005488 <HAL_DMA_Init+0x27c>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	2b42      	cmp	r3, #66	; 0x42
 8005486:	d917      	bls.n	80054b8 <HAL_DMA_Init+0x2ac>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	2b46      	cmp	r3, #70	; 0x46
 800548e:	d903      	bls.n	8005498 <HAL_DMA_Init+0x28c>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	2b48      	cmp	r3, #72	; 0x48
 8005496:	d90f      	bls.n	80054b8 <HAL_DMA_Init+0x2ac>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	2b4e      	cmp	r3, #78	; 0x4e
 800549e:	d903      	bls.n	80054a8 <HAL_DMA_Init+0x29c>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	2b52      	cmp	r3, #82	; 0x52
 80054a6:	d907      	bls.n	80054b8 <HAL_DMA_Init+0x2ac>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	2b73      	cmp	r3, #115	; 0x73
 80054ae:	d905      	bls.n	80054bc <HAL_DMA_Init+0x2b0>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	2b77      	cmp	r3, #119	; 0x77
 80054b6:	d801      	bhi.n	80054bc <HAL_DMA_Init+0x2b0>
 80054b8:	2301      	movs	r3, #1
 80054ba:	e000      	b.n	80054be <HAL_DMA_Init+0x2b2>
 80054bc:	2300      	movs	r3, #0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054c8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	f023 0307 	bic.w	r3, r3, #7
 80054e0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	2b04      	cmp	r3, #4
 80054f2:	d117      	bne.n	8005524 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00e      	beq.n	8005524 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f002 fbd6 	bl	8007cb8 <DMA_CheckFifoParam>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d008      	beq.n	8005524 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2240      	movs	r2, #64	; 0x40
 8005516:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e1ff      	b.n	8005924 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f002 fb11 	bl	8007b54 <DMA_CalcBaseAndBitshift>
 8005532:	4603      	mov	r3, r0
 8005534:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800553a:	f003 031f 	and.w	r3, r3, #31
 800553e:	223f      	movs	r2, #63	; 0x3f
 8005540:	409a      	lsls	r2, r3
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	609a      	str	r2, [r3, #8]
 8005546:	e0fe      	b.n	8005746 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a28      	ldr	r2, [pc, #160]	; (80055f0 <HAL_DMA_Init+0x3e4>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d04a      	beq.n	80055e8 <HAL_DMA_Init+0x3dc>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a27      	ldr	r2, [pc, #156]	; (80055f4 <HAL_DMA_Init+0x3e8>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d045      	beq.n	80055e8 <HAL_DMA_Init+0x3dc>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a25      	ldr	r2, [pc, #148]	; (80055f8 <HAL_DMA_Init+0x3ec>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d040      	beq.n	80055e8 <HAL_DMA_Init+0x3dc>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a24      	ldr	r2, [pc, #144]	; (80055fc <HAL_DMA_Init+0x3f0>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d03b      	beq.n	80055e8 <HAL_DMA_Init+0x3dc>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a22      	ldr	r2, [pc, #136]	; (8005600 <HAL_DMA_Init+0x3f4>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d036      	beq.n	80055e8 <HAL_DMA_Init+0x3dc>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a21      	ldr	r2, [pc, #132]	; (8005604 <HAL_DMA_Init+0x3f8>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d031      	beq.n	80055e8 <HAL_DMA_Init+0x3dc>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a1f      	ldr	r2, [pc, #124]	; (8005608 <HAL_DMA_Init+0x3fc>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d02c      	beq.n	80055e8 <HAL_DMA_Init+0x3dc>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a1e      	ldr	r2, [pc, #120]	; (800560c <HAL_DMA_Init+0x400>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d027      	beq.n	80055e8 <HAL_DMA_Init+0x3dc>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a1c      	ldr	r2, [pc, #112]	; (8005610 <HAL_DMA_Init+0x404>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d022      	beq.n	80055e8 <HAL_DMA_Init+0x3dc>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a1b      	ldr	r2, [pc, #108]	; (8005614 <HAL_DMA_Init+0x408>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d01d      	beq.n	80055e8 <HAL_DMA_Init+0x3dc>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a19      	ldr	r2, [pc, #100]	; (8005618 <HAL_DMA_Init+0x40c>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d018      	beq.n	80055e8 <HAL_DMA_Init+0x3dc>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a18      	ldr	r2, [pc, #96]	; (800561c <HAL_DMA_Init+0x410>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d013      	beq.n	80055e8 <HAL_DMA_Init+0x3dc>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a16      	ldr	r2, [pc, #88]	; (8005620 <HAL_DMA_Init+0x414>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d00e      	beq.n	80055e8 <HAL_DMA_Init+0x3dc>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a15      	ldr	r2, [pc, #84]	; (8005624 <HAL_DMA_Init+0x418>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d009      	beq.n	80055e8 <HAL_DMA_Init+0x3dc>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a13      	ldr	r2, [pc, #76]	; (8005628 <HAL_DMA_Init+0x41c>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d004      	beq.n	80055e8 <HAL_DMA_Init+0x3dc>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a12      	ldr	r2, [pc, #72]	; (800562c <HAL_DMA_Init+0x420>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d123      	bne.n	8005630 <HAL_DMA_Init+0x424>
 80055e8:	2301      	movs	r3, #1
 80055ea:	e022      	b.n	8005632 <HAL_DMA_Init+0x426>
 80055ec:	fe10803f 	.word	0xfe10803f
 80055f0:	48022c08 	.word	0x48022c08
 80055f4:	48022c1c 	.word	0x48022c1c
 80055f8:	48022c30 	.word	0x48022c30
 80055fc:	48022c44 	.word	0x48022c44
 8005600:	48022c58 	.word	0x48022c58
 8005604:	48022c6c 	.word	0x48022c6c
 8005608:	48022c80 	.word	0x48022c80
 800560c:	48022c94 	.word	0x48022c94
 8005610:	58025408 	.word	0x58025408
 8005614:	5802541c 	.word	0x5802541c
 8005618:	58025430 	.word	0x58025430
 800561c:	58025444 	.word	0x58025444
 8005620:	58025458 	.word	0x58025458
 8005624:	5802546c 	.word	0x5802546c
 8005628:	58025480 	.word	0x58025480
 800562c:	58025494 	.word	0x58025494
 8005630:	2300      	movs	r3, #0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d07e      	beq.n	8005734 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a80      	ldr	r2, [pc, #512]	; (800583c <HAL_DMA_Init+0x630>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d021      	beq.n	8005684 <HAL_DMA_Init+0x478>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a7e      	ldr	r2, [pc, #504]	; (8005840 <HAL_DMA_Init+0x634>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d01c      	beq.n	8005684 <HAL_DMA_Init+0x478>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a7d      	ldr	r2, [pc, #500]	; (8005844 <HAL_DMA_Init+0x638>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d017      	beq.n	8005684 <HAL_DMA_Init+0x478>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a7b      	ldr	r2, [pc, #492]	; (8005848 <HAL_DMA_Init+0x63c>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d012      	beq.n	8005684 <HAL_DMA_Init+0x478>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a7a      	ldr	r2, [pc, #488]	; (800584c <HAL_DMA_Init+0x640>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d00d      	beq.n	8005684 <HAL_DMA_Init+0x478>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a78      	ldr	r2, [pc, #480]	; (8005850 <HAL_DMA_Init+0x644>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d008      	beq.n	8005684 <HAL_DMA_Init+0x478>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a77      	ldr	r2, [pc, #476]	; (8005854 <HAL_DMA_Init+0x648>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d003      	beq.n	8005684 <HAL_DMA_Init+0x478>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a75      	ldr	r2, [pc, #468]	; (8005858 <HAL_DMA_Init+0x64c>)
 8005682:	4293      	cmp	r3, r2
 8005684:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2202      	movs	r2, #2
 800568a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	4b6e      	ldr	r3, [pc, #440]	; (800585c <HAL_DMA_Init+0x650>)
 80056a2:	4013      	ands	r3, r2
 80056a4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	2b40      	cmp	r3, #64	; 0x40
 80056ac:	d008      	beq.n	80056c0 <HAL_DMA_Init+0x4b4>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	2b80      	cmp	r3, #128	; 0x80
 80056b4:	d102      	bne.n	80056bc <HAL_DMA_Init+0x4b0>
 80056b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80056ba:	e002      	b.n	80056c2 <HAL_DMA_Init+0x4b6>
 80056bc:	2300      	movs	r3, #0
 80056be:	e000      	b.n	80056c2 <HAL_DMA_Init+0x4b6>
 80056c0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	68d2      	ldr	r2, [r2, #12]
 80056c6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80056c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80056d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80056d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80056e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	69db      	ldr	r3, [r3, #28]
 80056e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80056e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80056f0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	461a      	mov	r2, r3
 8005706:	4b56      	ldr	r3, [pc, #344]	; (8005860 <HAL_DMA_Init+0x654>)
 8005708:	4413      	add	r3, r2
 800570a:	4a56      	ldr	r2, [pc, #344]	; (8005864 <HAL_DMA_Init+0x658>)
 800570c:	fba2 2303 	umull	r2, r3, r2, r3
 8005710:	091b      	lsrs	r3, r3, #4
 8005712:	009a      	lsls	r2, r3, #2
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f002 fa1b 	bl	8007b54 <DMA_CalcBaseAndBitshift>
 800571e:	4603      	mov	r3, r0
 8005720:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005726:	f003 031f 	and.w	r3, r3, #31
 800572a:	2201      	movs	r2, #1
 800572c:	409a      	lsls	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	605a      	str	r2, [r3, #4]
 8005732:	e008      	b.n	8005746 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2240      	movs	r2, #64	; 0x40
 8005738:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2203      	movs	r2, #3
 800573e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e0ee      	b.n	8005924 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a47      	ldr	r2, [pc, #284]	; (8005868 <HAL_DMA_Init+0x65c>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d072      	beq.n	8005836 <HAL_DMA_Init+0x62a>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a45      	ldr	r2, [pc, #276]	; (800586c <HAL_DMA_Init+0x660>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d06d      	beq.n	8005836 <HAL_DMA_Init+0x62a>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a44      	ldr	r2, [pc, #272]	; (8005870 <HAL_DMA_Init+0x664>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d068      	beq.n	8005836 <HAL_DMA_Init+0x62a>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a42      	ldr	r2, [pc, #264]	; (8005874 <HAL_DMA_Init+0x668>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d063      	beq.n	8005836 <HAL_DMA_Init+0x62a>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a41      	ldr	r2, [pc, #260]	; (8005878 <HAL_DMA_Init+0x66c>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d05e      	beq.n	8005836 <HAL_DMA_Init+0x62a>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a3f      	ldr	r2, [pc, #252]	; (800587c <HAL_DMA_Init+0x670>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d059      	beq.n	8005836 <HAL_DMA_Init+0x62a>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a3e      	ldr	r2, [pc, #248]	; (8005880 <HAL_DMA_Init+0x674>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d054      	beq.n	8005836 <HAL_DMA_Init+0x62a>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a3c      	ldr	r2, [pc, #240]	; (8005884 <HAL_DMA_Init+0x678>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d04f      	beq.n	8005836 <HAL_DMA_Init+0x62a>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a3b      	ldr	r2, [pc, #236]	; (8005888 <HAL_DMA_Init+0x67c>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d04a      	beq.n	8005836 <HAL_DMA_Init+0x62a>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a39      	ldr	r2, [pc, #228]	; (800588c <HAL_DMA_Init+0x680>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d045      	beq.n	8005836 <HAL_DMA_Init+0x62a>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a38      	ldr	r2, [pc, #224]	; (8005890 <HAL_DMA_Init+0x684>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d040      	beq.n	8005836 <HAL_DMA_Init+0x62a>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a36      	ldr	r2, [pc, #216]	; (8005894 <HAL_DMA_Init+0x688>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d03b      	beq.n	8005836 <HAL_DMA_Init+0x62a>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a35      	ldr	r2, [pc, #212]	; (8005898 <HAL_DMA_Init+0x68c>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d036      	beq.n	8005836 <HAL_DMA_Init+0x62a>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a33      	ldr	r2, [pc, #204]	; (800589c <HAL_DMA_Init+0x690>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d031      	beq.n	8005836 <HAL_DMA_Init+0x62a>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a32      	ldr	r2, [pc, #200]	; (80058a0 <HAL_DMA_Init+0x694>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d02c      	beq.n	8005836 <HAL_DMA_Init+0x62a>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a30      	ldr	r2, [pc, #192]	; (80058a4 <HAL_DMA_Init+0x698>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d027      	beq.n	8005836 <HAL_DMA_Init+0x62a>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a14      	ldr	r2, [pc, #80]	; (800583c <HAL_DMA_Init+0x630>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d022      	beq.n	8005836 <HAL_DMA_Init+0x62a>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a12      	ldr	r2, [pc, #72]	; (8005840 <HAL_DMA_Init+0x634>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d01d      	beq.n	8005836 <HAL_DMA_Init+0x62a>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a11      	ldr	r2, [pc, #68]	; (8005844 <HAL_DMA_Init+0x638>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d018      	beq.n	8005836 <HAL_DMA_Init+0x62a>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a0f      	ldr	r2, [pc, #60]	; (8005848 <HAL_DMA_Init+0x63c>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d013      	beq.n	8005836 <HAL_DMA_Init+0x62a>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a0e      	ldr	r2, [pc, #56]	; (800584c <HAL_DMA_Init+0x640>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d00e      	beq.n	8005836 <HAL_DMA_Init+0x62a>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a0c      	ldr	r2, [pc, #48]	; (8005850 <HAL_DMA_Init+0x644>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d009      	beq.n	8005836 <HAL_DMA_Init+0x62a>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a0b      	ldr	r2, [pc, #44]	; (8005854 <HAL_DMA_Init+0x648>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d004      	beq.n	8005836 <HAL_DMA_Init+0x62a>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a09      	ldr	r2, [pc, #36]	; (8005858 <HAL_DMA_Init+0x64c>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d138      	bne.n	80058a8 <HAL_DMA_Init+0x69c>
 8005836:	2301      	movs	r3, #1
 8005838:	e037      	b.n	80058aa <HAL_DMA_Init+0x69e>
 800583a:	bf00      	nop
 800583c:	58025408 	.word	0x58025408
 8005840:	5802541c 	.word	0x5802541c
 8005844:	58025430 	.word	0x58025430
 8005848:	58025444 	.word	0x58025444
 800584c:	58025458 	.word	0x58025458
 8005850:	5802546c 	.word	0x5802546c
 8005854:	58025480 	.word	0x58025480
 8005858:	58025494 	.word	0x58025494
 800585c:	fffe000f 	.word	0xfffe000f
 8005860:	a7fdabf8 	.word	0xa7fdabf8
 8005864:	cccccccd 	.word	0xcccccccd
 8005868:	40020010 	.word	0x40020010
 800586c:	40020028 	.word	0x40020028
 8005870:	40020040 	.word	0x40020040
 8005874:	40020058 	.word	0x40020058
 8005878:	40020070 	.word	0x40020070
 800587c:	40020088 	.word	0x40020088
 8005880:	400200a0 	.word	0x400200a0
 8005884:	400200b8 	.word	0x400200b8
 8005888:	40020410 	.word	0x40020410
 800588c:	40020428 	.word	0x40020428
 8005890:	40020440 	.word	0x40020440
 8005894:	40020458 	.word	0x40020458
 8005898:	40020470 	.word	0x40020470
 800589c:	40020488 	.word	0x40020488
 80058a0:	400204a0 	.word	0x400204a0
 80058a4:	400204b8 	.word	0x400204b8
 80058a8:	2300      	movs	r3, #0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d032      	beq.n	8005914 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f002 fa7e 	bl	8007db0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	2b80      	cmp	r3, #128	; 0x80
 80058ba:	d102      	bne.n	80058c2 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685a      	ldr	r2, [r3, #4]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ca:	b2d2      	uxtb	r2, r2
 80058cc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80058d6:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d010      	beq.n	8005902 <HAL_DMA_Init+0x6f6>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	2b08      	cmp	r3, #8
 80058e6:	d80c      	bhi.n	8005902 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f002 fafb 	bl	8007ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058f2:	2200      	movs	r2, #0
 80058f4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80058fe:	605a      	str	r2, [r3, #4]
 8005900:	e008      	b.n	8005914 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3718      	adds	r7, #24
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
 8005938:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800593a:	2300      	movs	r3, #0
 800593c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d101      	bne.n	8005948 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e226      	b.n	8005d96 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800594e:	2b01      	cmp	r3, #1
 8005950:	d101      	bne.n	8005956 <HAL_DMA_Start_IT+0x2a>
 8005952:	2302      	movs	r3, #2
 8005954:	e21f      	b.n	8005d96 <HAL_DMA_Start_IT+0x46a>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b01      	cmp	r3, #1
 8005968:	f040 820a 	bne.w	8005d80 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2202      	movs	r2, #2
 8005970:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a68      	ldr	r2, [pc, #416]	; (8005b20 <HAL_DMA_Start_IT+0x1f4>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d04a      	beq.n	8005a1a <HAL_DMA_Start_IT+0xee>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a66      	ldr	r2, [pc, #408]	; (8005b24 <HAL_DMA_Start_IT+0x1f8>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d045      	beq.n	8005a1a <HAL_DMA_Start_IT+0xee>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a65      	ldr	r2, [pc, #404]	; (8005b28 <HAL_DMA_Start_IT+0x1fc>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d040      	beq.n	8005a1a <HAL_DMA_Start_IT+0xee>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a63      	ldr	r2, [pc, #396]	; (8005b2c <HAL_DMA_Start_IT+0x200>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d03b      	beq.n	8005a1a <HAL_DMA_Start_IT+0xee>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a62      	ldr	r2, [pc, #392]	; (8005b30 <HAL_DMA_Start_IT+0x204>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d036      	beq.n	8005a1a <HAL_DMA_Start_IT+0xee>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a60      	ldr	r2, [pc, #384]	; (8005b34 <HAL_DMA_Start_IT+0x208>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d031      	beq.n	8005a1a <HAL_DMA_Start_IT+0xee>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a5f      	ldr	r2, [pc, #380]	; (8005b38 <HAL_DMA_Start_IT+0x20c>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d02c      	beq.n	8005a1a <HAL_DMA_Start_IT+0xee>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a5d      	ldr	r2, [pc, #372]	; (8005b3c <HAL_DMA_Start_IT+0x210>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d027      	beq.n	8005a1a <HAL_DMA_Start_IT+0xee>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a5c      	ldr	r2, [pc, #368]	; (8005b40 <HAL_DMA_Start_IT+0x214>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d022      	beq.n	8005a1a <HAL_DMA_Start_IT+0xee>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a5a      	ldr	r2, [pc, #360]	; (8005b44 <HAL_DMA_Start_IT+0x218>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d01d      	beq.n	8005a1a <HAL_DMA_Start_IT+0xee>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a59      	ldr	r2, [pc, #356]	; (8005b48 <HAL_DMA_Start_IT+0x21c>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d018      	beq.n	8005a1a <HAL_DMA_Start_IT+0xee>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a57      	ldr	r2, [pc, #348]	; (8005b4c <HAL_DMA_Start_IT+0x220>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d013      	beq.n	8005a1a <HAL_DMA_Start_IT+0xee>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a56      	ldr	r2, [pc, #344]	; (8005b50 <HAL_DMA_Start_IT+0x224>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d00e      	beq.n	8005a1a <HAL_DMA_Start_IT+0xee>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a54      	ldr	r2, [pc, #336]	; (8005b54 <HAL_DMA_Start_IT+0x228>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d009      	beq.n	8005a1a <HAL_DMA_Start_IT+0xee>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a53      	ldr	r2, [pc, #332]	; (8005b58 <HAL_DMA_Start_IT+0x22c>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d004      	beq.n	8005a1a <HAL_DMA_Start_IT+0xee>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a51      	ldr	r2, [pc, #324]	; (8005b5c <HAL_DMA_Start_IT+0x230>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d108      	bne.n	8005a2c <HAL_DMA_Start_IT+0x100>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f022 0201 	bic.w	r2, r2, #1
 8005a28:	601a      	str	r2, [r3, #0]
 8005a2a:	e007      	b.n	8005a3c <HAL_DMA_Start_IT+0x110>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f022 0201 	bic.w	r2, r2, #1
 8005a3a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	68b9      	ldr	r1, [r7, #8]
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f001 fea2 	bl	800778c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a34      	ldr	r2, [pc, #208]	; (8005b20 <HAL_DMA_Start_IT+0x1f4>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d04a      	beq.n	8005ae8 <HAL_DMA_Start_IT+0x1bc>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a33      	ldr	r2, [pc, #204]	; (8005b24 <HAL_DMA_Start_IT+0x1f8>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d045      	beq.n	8005ae8 <HAL_DMA_Start_IT+0x1bc>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a31      	ldr	r2, [pc, #196]	; (8005b28 <HAL_DMA_Start_IT+0x1fc>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d040      	beq.n	8005ae8 <HAL_DMA_Start_IT+0x1bc>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a30      	ldr	r2, [pc, #192]	; (8005b2c <HAL_DMA_Start_IT+0x200>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d03b      	beq.n	8005ae8 <HAL_DMA_Start_IT+0x1bc>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a2e      	ldr	r2, [pc, #184]	; (8005b30 <HAL_DMA_Start_IT+0x204>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d036      	beq.n	8005ae8 <HAL_DMA_Start_IT+0x1bc>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a2d      	ldr	r2, [pc, #180]	; (8005b34 <HAL_DMA_Start_IT+0x208>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d031      	beq.n	8005ae8 <HAL_DMA_Start_IT+0x1bc>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a2b      	ldr	r2, [pc, #172]	; (8005b38 <HAL_DMA_Start_IT+0x20c>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d02c      	beq.n	8005ae8 <HAL_DMA_Start_IT+0x1bc>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a2a      	ldr	r2, [pc, #168]	; (8005b3c <HAL_DMA_Start_IT+0x210>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d027      	beq.n	8005ae8 <HAL_DMA_Start_IT+0x1bc>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a28      	ldr	r2, [pc, #160]	; (8005b40 <HAL_DMA_Start_IT+0x214>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d022      	beq.n	8005ae8 <HAL_DMA_Start_IT+0x1bc>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a27      	ldr	r2, [pc, #156]	; (8005b44 <HAL_DMA_Start_IT+0x218>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d01d      	beq.n	8005ae8 <HAL_DMA_Start_IT+0x1bc>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a25      	ldr	r2, [pc, #148]	; (8005b48 <HAL_DMA_Start_IT+0x21c>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d018      	beq.n	8005ae8 <HAL_DMA_Start_IT+0x1bc>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a24      	ldr	r2, [pc, #144]	; (8005b4c <HAL_DMA_Start_IT+0x220>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d013      	beq.n	8005ae8 <HAL_DMA_Start_IT+0x1bc>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a22      	ldr	r2, [pc, #136]	; (8005b50 <HAL_DMA_Start_IT+0x224>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d00e      	beq.n	8005ae8 <HAL_DMA_Start_IT+0x1bc>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a21      	ldr	r2, [pc, #132]	; (8005b54 <HAL_DMA_Start_IT+0x228>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d009      	beq.n	8005ae8 <HAL_DMA_Start_IT+0x1bc>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a1f      	ldr	r2, [pc, #124]	; (8005b58 <HAL_DMA_Start_IT+0x22c>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d004      	beq.n	8005ae8 <HAL_DMA_Start_IT+0x1bc>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a1e      	ldr	r2, [pc, #120]	; (8005b5c <HAL_DMA_Start_IT+0x230>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d101      	bne.n	8005aec <HAL_DMA_Start_IT+0x1c0>
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e000      	b.n	8005aee <HAL_DMA_Start_IT+0x1c2>
 8005aec:	2300      	movs	r3, #0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d036      	beq.n	8005b60 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f023 021e 	bic.w	r2, r3, #30
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f042 0216 	orr.w	r2, r2, #22
 8005b04:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d03e      	beq.n	8005b8c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f042 0208 	orr.w	r2, r2, #8
 8005b1c:	601a      	str	r2, [r3, #0]
 8005b1e:	e035      	b.n	8005b8c <HAL_DMA_Start_IT+0x260>
 8005b20:	40020010 	.word	0x40020010
 8005b24:	40020028 	.word	0x40020028
 8005b28:	40020040 	.word	0x40020040
 8005b2c:	40020058 	.word	0x40020058
 8005b30:	40020070 	.word	0x40020070
 8005b34:	40020088 	.word	0x40020088
 8005b38:	400200a0 	.word	0x400200a0
 8005b3c:	400200b8 	.word	0x400200b8
 8005b40:	40020410 	.word	0x40020410
 8005b44:	40020428 	.word	0x40020428
 8005b48:	40020440 	.word	0x40020440
 8005b4c:	40020458 	.word	0x40020458
 8005b50:	40020470 	.word	0x40020470
 8005b54:	40020488 	.word	0x40020488
 8005b58:	400204a0 	.word	0x400204a0
 8005b5c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f023 020e 	bic.w	r2, r3, #14
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f042 020a 	orr.w	r2, r2, #10
 8005b72:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d007      	beq.n	8005b8c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f042 0204 	orr.w	r2, r2, #4
 8005b8a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a83      	ldr	r2, [pc, #524]	; (8005da0 <HAL_DMA_Start_IT+0x474>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d072      	beq.n	8005c7c <HAL_DMA_Start_IT+0x350>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a82      	ldr	r2, [pc, #520]	; (8005da4 <HAL_DMA_Start_IT+0x478>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d06d      	beq.n	8005c7c <HAL_DMA_Start_IT+0x350>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a80      	ldr	r2, [pc, #512]	; (8005da8 <HAL_DMA_Start_IT+0x47c>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d068      	beq.n	8005c7c <HAL_DMA_Start_IT+0x350>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a7f      	ldr	r2, [pc, #508]	; (8005dac <HAL_DMA_Start_IT+0x480>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d063      	beq.n	8005c7c <HAL_DMA_Start_IT+0x350>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a7d      	ldr	r2, [pc, #500]	; (8005db0 <HAL_DMA_Start_IT+0x484>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d05e      	beq.n	8005c7c <HAL_DMA_Start_IT+0x350>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a7c      	ldr	r2, [pc, #496]	; (8005db4 <HAL_DMA_Start_IT+0x488>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d059      	beq.n	8005c7c <HAL_DMA_Start_IT+0x350>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a7a      	ldr	r2, [pc, #488]	; (8005db8 <HAL_DMA_Start_IT+0x48c>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d054      	beq.n	8005c7c <HAL_DMA_Start_IT+0x350>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a79      	ldr	r2, [pc, #484]	; (8005dbc <HAL_DMA_Start_IT+0x490>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d04f      	beq.n	8005c7c <HAL_DMA_Start_IT+0x350>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a77      	ldr	r2, [pc, #476]	; (8005dc0 <HAL_DMA_Start_IT+0x494>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d04a      	beq.n	8005c7c <HAL_DMA_Start_IT+0x350>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a76      	ldr	r2, [pc, #472]	; (8005dc4 <HAL_DMA_Start_IT+0x498>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d045      	beq.n	8005c7c <HAL_DMA_Start_IT+0x350>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a74      	ldr	r2, [pc, #464]	; (8005dc8 <HAL_DMA_Start_IT+0x49c>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d040      	beq.n	8005c7c <HAL_DMA_Start_IT+0x350>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a73      	ldr	r2, [pc, #460]	; (8005dcc <HAL_DMA_Start_IT+0x4a0>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d03b      	beq.n	8005c7c <HAL_DMA_Start_IT+0x350>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a71      	ldr	r2, [pc, #452]	; (8005dd0 <HAL_DMA_Start_IT+0x4a4>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d036      	beq.n	8005c7c <HAL_DMA_Start_IT+0x350>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a70      	ldr	r2, [pc, #448]	; (8005dd4 <HAL_DMA_Start_IT+0x4a8>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d031      	beq.n	8005c7c <HAL_DMA_Start_IT+0x350>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a6e      	ldr	r2, [pc, #440]	; (8005dd8 <HAL_DMA_Start_IT+0x4ac>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d02c      	beq.n	8005c7c <HAL_DMA_Start_IT+0x350>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a6d      	ldr	r2, [pc, #436]	; (8005ddc <HAL_DMA_Start_IT+0x4b0>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d027      	beq.n	8005c7c <HAL_DMA_Start_IT+0x350>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a6b      	ldr	r2, [pc, #428]	; (8005de0 <HAL_DMA_Start_IT+0x4b4>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d022      	beq.n	8005c7c <HAL_DMA_Start_IT+0x350>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a6a      	ldr	r2, [pc, #424]	; (8005de4 <HAL_DMA_Start_IT+0x4b8>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d01d      	beq.n	8005c7c <HAL_DMA_Start_IT+0x350>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a68      	ldr	r2, [pc, #416]	; (8005de8 <HAL_DMA_Start_IT+0x4bc>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d018      	beq.n	8005c7c <HAL_DMA_Start_IT+0x350>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a67      	ldr	r2, [pc, #412]	; (8005dec <HAL_DMA_Start_IT+0x4c0>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d013      	beq.n	8005c7c <HAL_DMA_Start_IT+0x350>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a65      	ldr	r2, [pc, #404]	; (8005df0 <HAL_DMA_Start_IT+0x4c4>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d00e      	beq.n	8005c7c <HAL_DMA_Start_IT+0x350>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a64      	ldr	r2, [pc, #400]	; (8005df4 <HAL_DMA_Start_IT+0x4c8>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d009      	beq.n	8005c7c <HAL_DMA_Start_IT+0x350>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a62      	ldr	r2, [pc, #392]	; (8005df8 <HAL_DMA_Start_IT+0x4cc>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d004      	beq.n	8005c7c <HAL_DMA_Start_IT+0x350>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a61      	ldr	r2, [pc, #388]	; (8005dfc <HAL_DMA_Start_IT+0x4d0>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d101      	bne.n	8005c80 <HAL_DMA_Start_IT+0x354>
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e000      	b.n	8005c82 <HAL_DMA_Start_IT+0x356>
 8005c80:	2300      	movs	r3, #0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d01a      	beq.n	8005cbc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d007      	beq.n	8005ca4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ca2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d007      	beq.n	8005cbc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cba:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a37      	ldr	r2, [pc, #220]	; (8005da0 <HAL_DMA_Start_IT+0x474>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d04a      	beq.n	8005d5c <HAL_DMA_Start_IT+0x430>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a36      	ldr	r2, [pc, #216]	; (8005da4 <HAL_DMA_Start_IT+0x478>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d045      	beq.n	8005d5c <HAL_DMA_Start_IT+0x430>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a34      	ldr	r2, [pc, #208]	; (8005da8 <HAL_DMA_Start_IT+0x47c>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d040      	beq.n	8005d5c <HAL_DMA_Start_IT+0x430>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a33      	ldr	r2, [pc, #204]	; (8005dac <HAL_DMA_Start_IT+0x480>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d03b      	beq.n	8005d5c <HAL_DMA_Start_IT+0x430>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a31      	ldr	r2, [pc, #196]	; (8005db0 <HAL_DMA_Start_IT+0x484>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d036      	beq.n	8005d5c <HAL_DMA_Start_IT+0x430>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a30      	ldr	r2, [pc, #192]	; (8005db4 <HAL_DMA_Start_IT+0x488>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d031      	beq.n	8005d5c <HAL_DMA_Start_IT+0x430>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a2e      	ldr	r2, [pc, #184]	; (8005db8 <HAL_DMA_Start_IT+0x48c>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d02c      	beq.n	8005d5c <HAL_DMA_Start_IT+0x430>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a2d      	ldr	r2, [pc, #180]	; (8005dbc <HAL_DMA_Start_IT+0x490>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d027      	beq.n	8005d5c <HAL_DMA_Start_IT+0x430>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a2b      	ldr	r2, [pc, #172]	; (8005dc0 <HAL_DMA_Start_IT+0x494>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d022      	beq.n	8005d5c <HAL_DMA_Start_IT+0x430>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a2a      	ldr	r2, [pc, #168]	; (8005dc4 <HAL_DMA_Start_IT+0x498>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d01d      	beq.n	8005d5c <HAL_DMA_Start_IT+0x430>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a28      	ldr	r2, [pc, #160]	; (8005dc8 <HAL_DMA_Start_IT+0x49c>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d018      	beq.n	8005d5c <HAL_DMA_Start_IT+0x430>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a27      	ldr	r2, [pc, #156]	; (8005dcc <HAL_DMA_Start_IT+0x4a0>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d013      	beq.n	8005d5c <HAL_DMA_Start_IT+0x430>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a25      	ldr	r2, [pc, #148]	; (8005dd0 <HAL_DMA_Start_IT+0x4a4>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d00e      	beq.n	8005d5c <HAL_DMA_Start_IT+0x430>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a24      	ldr	r2, [pc, #144]	; (8005dd4 <HAL_DMA_Start_IT+0x4a8>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d009      	beq.n	8005d5c <HAL_DMA_Start_IT+0x430>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a22      	ldr	r2, [pc, #136]	; (8005dd8 <HAL_DMA_Start_IT+0x4ac>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d004      	beq.n	8005d5c <HAL_DMA_Start_IT+0x430>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a21      	ldr	r2, [pc, #132]	; (8005ddc <HAL_DMA_Start_IT+0x4b0>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d108      	bne.n	8005d6e <HAL_DMA_Start_IT+0x442>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f042 0201 	orr.w	r2, r2, #1
 8005d6a:	601a      	str	r2, [r3, #0]
 8005d6c:	e012      	b.n	8005d94 <HAL_DMA_Start_IT+0x468>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f042 0201 	orr.w	r2, r2, #1
 8005d7c:	601a      	str	r2, [r3, #0]
 8005d7e:	e009      	b.n	8005d94 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d86:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3718      	adds	r7, #24
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	40020010 	.word	0x40020010
 8005da4:	40020028 	.word	0x40020028
 8005da8:	40020040 	.word	0x40020040
 8005dac:	40020058 	.word	0x40020058
 8005db0:	40020070 	.word	0x40020070
 8005db4:	40020088 	.word	0x40020088
 8005db8:	400200a0 	.word	0x400200a0
 8005dbc:	400200b8 	.word	0x400200b8
 8005dc0:	40020410 	.word	0x40020410
 8005dc4:	40020428 	.word	0x40020428
 8005dc8:	40020440 	.word	0x40020440
 8005dcc:	40020458 	.word	0x40020458
 8005dd0:	40020470 	.word	0x40020470
 8005dd4:	40020488 	.word	0x40020488
 8005dd8:	400204a0 	.word	0x400204a0
 8005ddc:	400204b8 	.word	0x400204b8
 8005de0:	58025408 	.word	0x58025408
 8005de4:	5802541c 	.word	0x5802541c
 8005de8:	58025430 	.word	0x58025430
 8005dec:	58025444 	.word	0x58025444
 8005df0:	58025458 	.word	0x58025458
 8005df4:	5802546c 	.word	0x5802546c
 8005df8:	58025480 	.word	0x58025480
 8005dfc:	58025494 	.word	0x58025494

08005e00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005e08:	f7fe fd00 	bl	800480c <HAL_GetTick>
 8005e0c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d101      	bne.n	8005e18 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e2dc      	b.n	80063d2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d008      	beq.n	8005e36 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2280      	movs	r2, #128	; 0x80
 8005e28:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e2cd      	b.n	80063d2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a76      	ldr	r2, [pc, #472]	; (8006014 <HAL_DMA_Abort+0x214>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d04a      	beq.n	8005ed6 <HAL_DMA_Abort+0xd6>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a74      	ldr	r2, [pc, #464]	; (8006018 <HAL_DMA_Abort+0x218>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d045      	beq.n	8005ed6 <HAL_DMA_Abort+0xd6>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a73      	ldr	r2, [pc, #460]	; (800601c <HAL_DMA_Abort+0x21c>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d040      	beq.n	8005ed6 <HAL_DMA_Abort+0xd6>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a71      	ldr	r2, [pc, #452]	; (8006020 <HAL_DMA_Abort+0x220>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d03b      	beq.n	8005ed6 <HAL_DMA_Abort+0xd6>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a70      	ldr	r2, [pc, #448]	; (8006024 <HAL_DMA_Abort+0x224>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d036      	beq.n	8005ed6 <HAL_DMA_Abort+0xd6>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a6e      	ldr	r2, [pc, #440]	; (8006028 <HAL_DMA_Abort+0x228>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d031      	beq.n	8005ed6 <HAL_DMA_Abort+0xd6>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a6d      	ldr	r2, [pc, #436]	; (800602c <HAL_DMA_Abort+0x22c>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d02c      	beq.n	8005ed6 <HAL_DMA_Abort+0xd6>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a6b      	ldr	r2, [pc, #428]	; (8006030 <HAL_DMA_Abort+0x230>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d027      	beq.n	8005ed6 <HAL_DMA_Abort+0xd6>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a6a      	ldr	r2, [pc, #424]	; (8006034 <HAL_DMA_Abort+0x234>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d022      	beq.n	8005ed6 <HAL_DMA_Abort+0xd6>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a68      	ldr	r2, [pc, #416]	; (8006038 <HAL_DMA_Abort+0x238>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d01d      	beq.n	8005ed6 <HAL_DMA_Abort+0xd6>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a67      	ldr	r2, [pc, #412]	; (800603c <HAL_DMA_Abort+0x23c>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d018      	beq.n	8005ed6 <HAL_DMA_Abort+0xd6>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a65      	ldr	r2, [pc, #404]	; (8006040 <HAL_DMA_Abort+0x240>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d013      	beq.n	8005ed6 <HAL_DMA_Abort+0xd6>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a64      	ldr	r2, [pc, #400]	; (8006044 <HAL_DMA_Abort+0x244>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d00e      	beq.n	8005ed6 <HAL_DMA_Abort+0xd6>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a62      	ldr	r2, [pc, #392]	; (8006048 <HAL_DMA_Abort+0x248>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d009      	beq.n	8005ed6 <HAL_DMA_Abort+0xd6>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a61      	ldr	r2, [pc, #388]	; (800604c <HAL_DMA_Abort+0x24c>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d004      	beq.n	8005ed6 <HAL_DMA_Abort+0xd6>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a5f      	ldr	r2, [pc, #380]	; (8006050 <HAL_DMA_Abort+0x250>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d101      	bne.n	8005eda <HAL_DMA_Abort+0xda>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e000      	b.n	8005edc <HAL_DMA_Abort+0xdc>
 8005eda:	2300      	movs	r3, #0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d013      	beq.n	8005f08 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f022 021e 	bic.w	r2, r2, #30
 8005eee:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	695a      	ldr	r2, [r3, #20]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005efe:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	617b      	str	r3, [r7, #20]
 8005f06:	e00a      	b.n	8005f1e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f022 020e 	bic.w	r2, r2, #14
 8005f16:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a3c      	ldr	r2, [pc, #240]	; (8006014 <HAL_DMA_Abort+0x214>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d072      	beq.n	800600e <HAL_DMA_Abort+0x20e>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a3a      	ldr	r2, [pc, #232]	; (8006018 <HAL_DMA_Abort+0x218>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d06d      	beq.n	800600e <HAL_DMA_Abort+0x20e>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a39      	ldr	r2, [pc, #228]	; (800601c <HAL_DMA_Abort+0x21c>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d068      	beq.n	800600e <HAL_DMA_Abort+0x20e>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a37      	ldr	r2, [pc, #220]	; (8006020 <HAL_DMA_Abort+0x220>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d063      	beq.n	800600e <HAL_DMA_Abort+0x20e>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a36      	ldr	r2, [pc, #216]	; (8006024 <HAL_DMA_Abort+0x224>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d05e      	beq.n	800600e <HAL_DMA_Abort+0x20e>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a34      	ldr	r2, [pc, #208]	; (8006028 <HAL_DMA_Abort+0x228>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d059      	beq.n	800600e <HAL_DMA_Abort+0x20e>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a33      	ldr	r2, [pc, #204]	; (800602c <HAL_DMA_Abort+0x22c>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d054      	beq.n	800600e <HAL_DMA_Abort+0x20e>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a31      	ldr	r2, [pc, #196]	; (8006030 <HAL_DMA_Abort+0x230>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d04f      	beq.n	800600e <HAL_DMA_Abort+0x20e>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a30      	ldr	r2, [pc, #192]	; (8006034 <HAL_DMA_Abort+0x234>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d04a      	beq.n	800600e <HAL_DMA_Abort+0x20e>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a2e      	ldr	r2, [pc, #184]	; (8006038 <HAL_DMA_Abort+0x238>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d045      	beq.n	800600e <HAL_DMA_Abort+0x20e>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a2d      	ldr	r2, [pc, #180]	; (800603c <HAL_DMA_Abort+0x23c>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d040      	beq.n	800600e <HAL_DMA_Abort+0x20e>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a2b      	ldr	r2, [pc, #172]	; (8006040 <HAL_DMA_Abort+0x240>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d03b      	beq.n	800600e <HAL_DMA_Abort+0x20e>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a2a      	ldr	r2, [pc, #168]	; (8006044 <HAL_DMA_Abort+0x244>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d036      	beq.n	800600e <HAL_DMA_Abort+0x20e>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a28      	ldr	r2, [pc, #160]	; (8006048 <HAL_DMA_Abort+0x248>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d031      	beq.n	800600e <HAL_DMA_Abort+0x20e>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a27      	ldr	r2, [pc, #156]	; (800604c <HAL_DMA_Abort+0x24c>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d02c      	beq.n	800600e <HAL_DMA_Abort+0x20e>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a25      	ldr	r2, [pc, #148]	; (8006050 <HAL_DMA_Abort+0x250>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d027      	beq.n	800600e <HAL_DMA_Abort+0x20e>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a24      	ldr	r2, [pc, #144]	; (8006054 <HAL_DMA_Abort+0x254>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d022      	beq.n	800600e <HAL_DMA_Abort+0x20e>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a22      	ldr	r2, [pc, #136]	; (8006058 <HAL_DMA_Abort+0x258>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d01d      	beq.n	800600e <HAL_DMA_Abort+0x20e>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a21      	ldr	r2, [pc, #132]	; (800605c <HAL_DMA_Abort+0x25c>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d018      	beq.n	800600e <HAL_DMA_Abort+0x20e>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a1f      	ldr	r2, [pc, #124]	; (8006060 <HAL_DMA_Abort+0x260>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d013      	beq.n	800600e <HAL_DMA_Abort+0x20e>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a1e      	ldr	r2, [pc, #120]	; (8006064 <HAL_DMA_Abort+0x264>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d00e      	beq.n	800600e <HAL_DMA_Abort+0x20e>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a1c      	ldr	r2, [pc, #112]	; (8006068 <HAL_DMA_Abort+0x268>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d009      	beq.n	800600e <HAL_DMA_Abort+0x20e>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a1b      	ldr	r2, [pc, #108]	; (800606c <HAL_DMA_Abort+0x26c>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d004      	beq.n	800600e <HAL_DMA_Abort+0x20e>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a19      	ldr	r2, [pc, #100]	; (8006070 <HAL_DMA_Abort+0x270>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d132      	bne.n	8006074 <HAL_DMA_Abort+0x274>
 800600e:	2301      	movs	r3, #1
 8006010:	e031      	b.n	8006076 <HAL_DMA_Abort+0x276>
 8006012:	bf00      	nop
 8006014:	40020010 	.word	0x40020010
 8006018:	40020028 	.word	0x40020028
 800601c:	40020040 	.word	0x40020040
 8006020:	40020058 	.word	0x40020058
 8006024:	40020070 	.word	0x40020070
 8006028:	40020088 	.word	0x40020088
 800602c:	400200a0 	.word	0x400200a0
 8006030:	400200b8 	.word	0x400200b8
 8006034:	40020410 	.word	0x40020410
 8006038:	40020428 	.word	0x40020428
 800603c:	40020440 	.word	0x40020440
 8006040:	40020458 	.word	0x40020458
 8006044:	40020470 	.word	0x40020470
 8006048:	40020488 	.word	0x40020488
 800604c:	400204a0 	.word	0x400204a0
 8006050:	400204b8 	.word	0x400204b8
 8006054:	58025408 	.word	0x58025408
 8006058:	5802541c 	.word	0x5802541c
 800605c:	58025430 	.word	0x58025430
 8006060:	58025444 	.word	0x58025444
 8006064:	58025458 	.word	0x58025458
 8006068:	5802546c 	.word	0x5802546c
 800606c:	58025480 	.word	0x58025480
 8006070:	58025494 	.word	0x58025494
 8006074:	2300      	movs	r3, #0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d007      	beq.n	800608a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006084:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006088:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a6d      	ldr	r2, [pc, #436]	; (8006244 <HAL_DMA_Abort+0x444>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d04a      	beq.n	800612a <HAL_DMA_Abort+0x32a>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a6b      	ldr	r2, [pc, #428]	; (8006248 <HAL_DMA_Abort+0x448>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d045      	beq.n	800612a <HAL_DMA_Abort+0x32a>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a6a      	ldr	r2, [pc, #424]	; (800624c <HAL_DMA_Abort+0x44c>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d040      	beq.n	800612a <HAL_DMA_Abort+0x32a>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a68      	ldr	r2, [pc, #416]	; (8006250 <HAL_DMA_Abort+0x450>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d03b      	beq.n	800612a <HAL_DMA_Abort+0x32a>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a67      	ldr	r2, [pc, #412]	; (8006254 <HAL_DMA_Abort+0x454>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d036      	beq.n	800612a <HAL_DMA_Abort+0x32a>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a65      	ldr	r2, [pc, #404]	; (8006258 <HAL_DMA_Abort+0x458>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d031      	beq.n	800612a <HAL_DMA_Abort+0x32a>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a64      	ldr	r2, [pc, #400]	; (800625c <HAL_DMA_Abort+0x45c>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d02c      	beq.n	800612a <HAL_DMA_Abort+0x32a>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a62      	ldr	r2, [pc, #392]	; (8006260 <HAL_DMA_Abort+0x460>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d027      	beq.n	800612a <HAL_DMA_Abort+0x32a>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a61      	ldr	r2, [pc, #388]	; (8006264 <HAL_DMA_Abort+0x464>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d022      	beq.n	800612a <HAL_DMA_Abort+0x32a>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a5f      	ldr	r2, [pc, #380]	; (8006268 <HAL_DMA_Abort+0x468>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d01d      	beq.n	800612a <HAL_DMA_Abort+0x32a>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a5e      	ldr	r2, [pc, #376]	; (800626c <HAL_DMA_Abort+0x46c>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d018      	beq.n	800612a <HAL_DMA_Abort+0x32a>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a5c      	ldr	r2, [pc, #368]	; (8006270 <HAL_DMA_Abort+0x470>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d013      	beq.n	800612a <HAL_DMA_Abort+0x32a>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a5b      	ldr	r2, [pc, #364]	; (8006274 <HAL_DMA_Abort+0x474>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d00e      	beq.n	800612a <HAL_DMA_Abort+0x32a>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a59      	ldr	r2, [pc, #356]	; (8006278 <HAL_DMA_Abort+0x478>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d009      	beq.n	800612a <HAL_DMA_Abort+0x32a>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a58      	ldr	r2, [pc, #352]	; (800627c <HAL_DMA_Abort+0x47c>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d004      	beq.n	800612a <HAL_DMA_Abort+0x32a>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a56      	ldr	r2, [pc, #344]	; (8006280 <HAL_DMA_Abort+0x480>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d108      	bne.n	800613c <HAL_DMA_Abort+0x33c>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f022 0201 	bic.w	r2, r2, #1
 8006138:	601a      	str	r2, [r3, #0]
 800613a:	e007      	b.n	800614c <HAL_DMA_Abort+0x34c>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f022 0201 	bic.w	r2, r2, #1
 800614a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800614c:	e013      	b.n	8006176 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800614e:	f7fe fb5d 	bl	800480c <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	2b05      	cmp	r3, #5
 800615a:	d90c      	bls.n	8006176 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2220      	movs	r2, #32
 8006160:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2203      	movs	r2, #3
 8006166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e12d      	b.n	80063d2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1e5      	bne.n	800614e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a2f      	ldr	r2, [pc, #188]	; (8006244 <HAL_DMA_Abort+0x444>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d04a      	beq.n	8006222 <HAL_DMA_Abort+0x422>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a2d      	ldr	r2, [pc, #180]	; (8006248 <HAL_DMA_Abort+0x448>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d045      	beq.n	8006222 <HAL_DMA_Abort+0x422>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a2c      	ldr	r2, [pc, #176]	; (800624c <HAL_DMA_Abort+0x44c>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d040      	beq.n	8006222 <HAL_DMA_Abort+0x422>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a2a      	ldr	r2, [pc, #168]	; (8006250 <HAL_DMA_Abort+0x450>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d03b      	beq.n	8006222 <HAL_DMA_Abort+0x422>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a29      	ldr	r2, [pc, #164]	; (8006254 <HAL_DMA_Abort+0x454>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d036      	beq.n	8006222 <HAL_DMA_Abort+0x422>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a27      	ldr	r2, [pc, #156]	; (8006258 <HAL_DMA_Abort+0x458>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d031      	beq.n	8006222 <HAL_DMA_Abort+0x422>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a26      	ldr	r2, [pc, #152]	; (800625c <HAL_DMA_Abort+0x45c>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d02c      	beq.n	8006222 <HAL_DMA_Abort+0x422>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a24      	ldr	r2, [pc, #144]	; (8006260 <HAL_DMA_Abort+0x460>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d027      	beq.n	8006222 <HAL_DMA_Abort+0x422>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a23      	ldr	r2, [pc, #140]	; (8006264 <HAL_DMA_Abort+0x464>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d022      	beq.n	8006222 <HAL_DMA_Abort+0x422>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a21      	ldr	r2, [pc, #132]	; (8006268 <HAL_DMA_Abort+0x468>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d01d      	beq.n	8006222 <HAL_DMA_Abort+0x422>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a20      	ldr	r2, [pc, #128]	; (800626c <HAL_DMA_Abort+0x46c>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d018      	beq.n	8006222 <HAL_DMA_Abort+0x422>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a1e      	ldr	r2, [pc, #120]	; (8006270 <HAL_DMA_Abort+0x470>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d013      	beq.n	8006222 <HAL_DMA_Abort+0x422>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a1d      	ldr	r2, [pc, #116]	; (8006274 <HAL_DMA_Abort+0x474>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d00e      	beq.n	8006222 <HAL_DMA_Abort+0x422>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a1b      	ldr	r2, [pc, #108]	; (8006278 <HAL_DMA_Abort+0x478>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d009      	beq.n	8006222 <HAL_DMA_Abort+0x422>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a1a      	ldr	r2, [pc, #104]	; (800627c <HAL_DMA_Abort+0x47c>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d004      	beq.n	8006222 <HAL_DMA_Abort+0x422>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a18      	ldr	r2, [pc, #96]	; (8006280 <HAL_DMA_Abort+0x480>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d101      	bne.n	8006226 <HAL_DMA_Abort+0x426>
 8006222:	2301      	movs	r3, #1
 8006224:	e000      	b.n	8006228 <HAL_DMA_Abort+0x428>
 8006226:	2300      	movs	r3, #0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d02b      	beq.n	8006284 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006230:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006236:	f003 031f 	and.w	r3, r3, #31
 800623a:	223f      	movs	r2, #63	; 0x3f
 800623c:	409a      	lsls	r2, r3
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	609a      	str	r2, [r3, #8]
 8006242:	e02a      	b.n	800629a <HAL_DMA_Abort+0x49a>
 8006244:	40020010 	.word	0x40020010
 8006248:	40020028 	.word	0x40020028
 800624c:	40020040 	.word	0x40020040
 8006250:	40020058 	.word	0x40020058
 8006254:	40020070 	.word	0x40020070
 8006258:	40020088 	.word	0x40020088
 800625c:	400200a0 	.word	0x400200a0
 8006260:	400200b8 	.word	0x400200b8
 8006264:	40020410 	.word	0x40020410
 8006268:	40020428 	.word	0x40020428
 800626c:	40020440 	.word	0x40020440
 8006270:	40020458 	.word	0x40020458
 8006274:	40020470 	.word	0x40020470
 8006278:	40020488 	.word	0x40020488
 800627c:	400204a0 	.word	0x400204a0
 8006280:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006288:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800628e:	f003 031f 	and.w	r3, r3, #31
 8006292:	2201      	movs	r2, #1
 8006294:	409a      	lsls	r2, r3
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a4f      	ldr	r2, [pc, #316]	; (80063dc <HAL_DMA_Abort+0x5dc>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d072      	beq.n	800638a <HAL_DMA_Abort+0x58a>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a4d      	ldr	r2, [pc, #308]	; (80063e0 <HAL_DMA_Abort+0x5e0>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d06d      	beq.n	800638a <HAL_DMA_Abort+0x58a>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a4c      	ldr	r2, [pc, #304]	; (80063e4 <HAL_DMA_Abort+0x5e4>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d068      	beq.n	800638a <HAL_DMA_Abort+0x58a>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a4a      	ldr	r2, [pc, #296]	; (80063e8 <HAL_DMA_Abort+0x5e8>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d063      	beq.n	800638a <HAL_DMA_Abort+0x58a>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a49      	ldr	r2, [pc, #292]	; (80063ec <HAL_DMA_Abort+0x5ec>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d05e      	beq.n	800638a <HAL_DMA_Abort+0x58a>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a47      	ldr	r2, [pc, #284]	; (80063f0 <HAL_DMA_Abort+0x5f0>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d059      	beq.n	800638a <HAL_DMA_Abort+0x58a>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a46      	ldr	r2, [pc, #280]	; (80063f4 <HAL_DMA_Abort+0x5f4>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d054      	beq.n	800638a <HAL_DMA_Abort+0x58a>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a44      	ldr	r2, [pc, #272]	; (80063f8 <HAL_DMA_Abort+0x5f8>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d04f      	beq.n	800638a <HAL_DMA_Abort+0x58a>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a43      	ldr	r2, [pc, #268]	; (80063fc <HAL_DMA_Abort+0x5fc>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d04a      	beq.n	800638a <HAL_DMA_Abort+0x58a>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a41      	ldr	r2, [pc, #260]	; (8006400 <HAL_DMA_Abort+0x600>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d045      	beq.n	800638a <HAL_DMA_Abort+0x58a>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a40      	ldr	r2, [pc, #256]	; (8006404 <HAL_DMA_Abort+0x604>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d040      	beq.n	800638a <HAL_DMA_Abort+0x58a>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a3e      	ldr	r2, [pc, #248]	; (8006408 <HAL_DMA_Abort+0x608>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d03b      	beq.n	800638a <HAL_DMA_Abort+0x58a>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a3d      	ldr	r2, [pc, #244]	; (800640c <HAL_DMA_Abort+0x60c>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d036      	beq.n	800638a <HAL_DMA_Abort+0x58a>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a3b      	ldr	r2, [pc, #236]	; (8006410 <HAL_DMA_Abort+0x610>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d031      	beq.n	800638a <HAL_DMA_Abort+0x58a>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a3a      	ldr	r2, [pc, #232]	; (8006414 <HAL_DMA_Abort+0x614>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d02c      	beq.n	800638a <HAL_DMA_Abort+0x58a>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a38      	ldr	r2, [pc, #224]	; (8006418 <HAL_DMA_Abort+0x618>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d027      	beq.n	800638a <HAL_DMA_Abort+0x58a>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a37      	ldr	r2, [pc, #220]	; (800641c <HAL_DMA_Abort+0x61c>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d022      	beq.n	800638a <HAL_DMA_Abort+0x58a>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a35      	ldr	r2, [pc, #212]	; (8006420 <HAL_DMA_Abort+0x620>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d01d      	beq.n	800638a <HAL_DMA_Abort+0x58a>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a34      	ldr	r2, [pc, #208]	; (8006424 <HAL_DMA_Abort+0x624>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d018      	beq.n	800638a <HAL_DMA_Abort+0x58a>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a32      	ldr	r2, [pc, #200]	; (8006428 <HAL_DMA_Abort+0x628>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d013      	beq.n	800638a <HAL_DMA_Abort+0x58a>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a31      	ldr	r2, [pc, #196]	; (800642c <HAL_DMA_Abort+0x62c>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d00e      	beq.n	800638a <HAL_DMA_Abort+0x58a>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a2f      	ldr	r2, [pc, #188]	; (8006430 <HAL_DMA_Abort+0x630>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d009      	beq.n	800638a <HAL_DMA_Abort+0x58a>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a2e      	ldr	r2, [pc, #184]	; (8006434 <HAL_DMA_Abort+0x634>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d004      	beq.n	800638a <HAL_DMA_Abort+0x58a>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a2c      	ldr	r2, [pc, #176]	; (8006438 <HAL_DMA_Abort+0x638>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d101      	bne.n	800638e <HAL_DMA_Abort+0x58e>
 800638a:	2301      	movs	r3, #1
 800638c:	e000      	b.n	8006390 <HAL_DMA_Abort+0x590>
 800638e:	2300      	movs	r3, #0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d015      	beq.n	80063c0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800639c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00c      	beq.n	80063c0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063b4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80063be:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3718      	adds	r7, #24
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	40020010 	.word	0x40020010
 80063e0:	40020028 	.word	0x40020028
 80063e4:	40020040 	.word	0x40020040
 80063e8:	40020058 	.word	0x40020058
 80063ec:	40020070 	.word	0x40020070
 80063f0:	40020088 	.word	0x40020088
 80063f4:	400200a0 	.word	0x400200a0
 80063f8:	400200b8 	.word	0x400200b8
 80063fc:	40020410 	.word	0x40020410
 8006400:	40020428 	.word	0x40020428
 8006404:	40020440 	.word	0x40020440
 8006408:	40020458 	.word	0x40020458
 800640c:	40020470 	.word	0x40020470
 8006410:	40020488 	.word	0x40020488
 8006414:	400204a0 	.word	0x400204a0
 8006418:	400204b8 	.word	0x400204b8
 800641c:	58025408 	.word	0x58025408
 8006420:	5802541c 	.word	0x5802541c
 8006424:	58025430 	.word	0x58025430
 8006428:	58025444 	.word	0x58025444
 800642c:	58025458 	.word	0x58025458
 8006430:	5802546c 	.word	0x5802546c
 8006434:	58025480 	.word	0x58025480
 8006438:	58025494 	.word	0x58025494

0800643c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e237      	b.n	80068be <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b02      	cmp	r3, #2
 8006458:	d004      	beq.n	8006464 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2280      	movs	r2, #128	; 0x80
 800645e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e22c      	b.n	80068be <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a5c      	ldr	r2, [pc, #368]	; (80065dc <HAL_DMA_Abort_IT+0x1a0>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d04a      	beq.n	8006504 <HAL_DMA_Abort_IT+0xc8>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a5b      	ldr	r2, [pc, #364]	; (80065e0 <HAL_DMA_Abort_IT+0x1a4>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d045      	beq.n	8006504 <HAL_DMA_Abort_IT+0xc8>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a59      	ldr	r2, [pc, #356]	; (80065e4 <HAL_DMA_Abort_IT+0x1a8>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d040      	beq.n	8006504 <HAL_DMA_Abort_IT+0xc8>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a58      	ldr	r2, [pc, #352]	; (80065e8 <HAL_DMA_Abort_IT+0x1ac>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d03b      	beq.n	8006504 <HAL_DMA_Abort_IT+0xc8>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a56      	ldr	r2, [pc, #344]	; (80065ec <HAL_DMA_Abort_IT+0x1b0>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d036      	beq.n	8006504 <HAL_DMA_Abort_IT+0xc8>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a55      	ldr	r2, [pc, #340]	; (80065f0 <HAL_DMA_Abort_IT+0x1b4>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d031      	beq.n	8006504 <HAL_DMA_Abort_IT+0xc8>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a53      	ldr	r2, [pc, #332]	; (80065f4 <HAL_DMA_Abort_IT+0x1b8>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d02c      	beq.n	8006504 <HAL_DMA_Abort_IT+0xc8>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a52      	ldr	r2, [pc, #328]	; (80065f8 <HAL_DMA_Abort_IT+0x1bc>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d027      	beq.n	8006504 <HAL_DMA_Abort_IT+0xc8>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a50      	ldr	r2, [pc, #320]	; (80065fc <HAL_DMA_Abort_IT+0x1c0>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d022      	beq.n	8006504 <HAL_DMA_Abort_IT+0xc8>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a4f      	ldr	r2, [pc, #316]	; (8006600 <HAL_DMA_Abort_IT+0x1c4>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d01d      	beq.n	8006504 <HAL_DMA_Abort_IT+0xc8>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a4d      	ldr	r2, [pc, #308]	; (8006604 <HAL_DMA_Abort_IT+0x1c8>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d018      	beq.n	8006504 <HAL_DMA_Abort_IT+0xc8>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a4c      	ldr	r2, [pc, #304]	; (8006608 <HAL_DMA_Abort_IT+0x1cc>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d013      	beq.n	8006504 <HAL_DMA_Abort_IT+0xc8>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a4a      	ldr	r2, [pc, #296]	; (800660c <HAL_DMA_Abort_IT+0x1d0>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d00e      	beq.n	8006504 <HAL_DMA_Abort_IT+0xc8>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a49      	ldr	r2, [pc, #292]	; (8006610 <HAL_DMA_Abort_IT+0x1d4>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d009      	beq.n	8006504 <HAL_DMA_Abort_IT+0xc8>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a47      	ldr	r2, [pc, #284]	; (8006614 <HAL_DMA_Abort_IT+0x1d8>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d004      	beq.n	8006504 <HAL_DMA_Abort_IT+0xc8>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a46      	ldr	r2, [pc, #280]	; (8006618 <HAL_DMA_Abort_IT+0x1dc>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d101      	bne.n	8006508 <HAL_DMA_Abort_IT+0xcc>
 8006504:	2301      	movs	r3, #1
 8006506:	e000      	b.n	800650a <HAL_DMA_Abort_IT+0xce>
 8006508:	2300      	movs	r3, #0
 800650a:	2b00      	cmp	r3, #0
 800650c:	f000 8086 	beq.w	800661c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2204      	movs	r2, #4
 8006514:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a2f      	ldr	r2, [pc, #188]	; (80065dc <HAL_DMA_Abort_IT+0x1a0>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d04a      	beq.n	80065b8 <HAL_DMA_Abort_IT+0x17c>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a2e      	ldr	r2, [pc, #184]	; (80065e0 <HAL_DMA_Abort_IT+0x1a4>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d045      	beq.n	80065b8 <HAL_DMA_Abort_IT+0x17c>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a2c      	ldr	r2, [pc, #176]	; (80065e4 <HAL_DMA_Abort_IT+0x1a8>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d040      	beq.n	80065b8 <HAL_DMA_Abort_IT+0x17c>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a2b      	ldr	r2, [pc, #172]	; (80065e8 <HAL_DMA_Abort_IT+0x1ac>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d03b      	beq.n	80065b8 <HAL_DMA_Abort_IT+0x17c>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a29      	ldr	r2, [pc, #164]	; (80065ec <HAL_DMA_Abort_IT+0x1b0>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d036      	beq.n	80065b8 <HAL_DMA_Abort_IT+0x17c>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a28      	ldr	r2, [pc, #160]	; (80065f0 <HAL_DMA_Abort_IT+0x1b4>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d031      	beq.n	80065b8 <HAL_DMA_Abort_IT+0x17c>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a26      	ldr	r2, [pc, #152]	; (80065f4 <HAL_DMA_Abort_IT+0x1b8>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d02c      	beq.n	80065b8 <HAL_DMA_Abort_IT+0x17c>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a25      	ldr	r2, [pc, #148]	; (80065f8 <HAL_DMA_Abort_IT+0x1bc>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d027      	beq.n	80065b8 <HAL_DMA_Abort_IT+0x17c>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a23      	ldr	r2, [pc, #140]	; (80065fc <HAL_DMA_Abort_IT+0x1c0>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d022      	beq.n	80065b8 <HAL_DMA_Abort_IT+0x17c>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a22      	ldr	r2, [pc, #136]	; (8006600 <HAL_DMA_Abort_IT+0x1c4>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d01d      	beq.n	80065b8 <HAL_DMA_Abort_IT+0x17c>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a20      	ldr	r2, [pc, #128]	; (8006604 <HAL_DMA_Abort_IT+0x1c8>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d018      	beq.n	80065b8 <HAL_DMA_Abort_IT+0x17c>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a1f      	ldr	r2, [pc, #124]	; (8006608 <HAL_DMA_Abort_IT+0x1cc>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d013      	beq.n	80065b8 <HAL_DMA_Abort_IT+0x17c>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a1d      	ldr	r2, [pc, #116]	; (800660c <HAL_DMA_Abort_IT+0x1d0>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d00e      	beq.n	80065b8 <HAL_DMA_Abort_IT+0x17c>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a1c      	ldr	r2, [pc, #112]	; (8006610 <HAL_DMA_Abort_IT+0x1d4>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d009      	beq.n	80065b8 <HAL_DMA_Abort_IT+0x17c>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a1a      	ldr	r2, [pc, #104]	; (8006614 <HAL_DMA_Abort_IT+0x1d8>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d004      	beq.n	80065b8 <HAL_DMA_Abort_IT+0x17c>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a19      	ldr	r2, [pc, #100]	; (8006618 <HAL_DMA_Abort_IT+0x1dc>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d108      	bne.n	80065ca <HAL_DMA_Abort_IT+0x18e>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f022 0201 	bic.w	r2, r2, #1
 80065c6:	601a      	str	r2, [r3, #0]
 80065c8:	e178      	b.n	80068bc <HAL_DMA_Abort_IT+0x480>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f022 0201 	bic.w	r2, r2, #1
 80065d8:	601a      	str	r2, [r3, #0]
 80065da:	e16f      	b.n	80068bc <HAL_DMA_Abort_IT+0x480>
 80065dc:	40020010 	.word	0x40020010
 80065e0:	40020028 	.word	0x40020028
 80065e4:	40020040 	.word	0x40020040
 80065e8:	40020058 	.word	0x40020058
 80065ec:	40020070 	.word	0x40020070
 80065f0:	40020088 	.word	0x40020088
 80065f4:	400200a0 	.word	0x400200a0
 80065f8:	400200b8 	.word	0x400200b8
 80065fc:	40020410 	.word	0x40020410
 8006600:	40020428 	.word	0x40020428
 8006604:	40020440 	.word	0x40020440
 8006608:	40020458 	.word	0x40020458
 800660c:	40020470 	.word	0x40020470
 8006610:	40020488 	.word	0x40020488
 8006614:	400204a0 	.word	0x400204a0
 8006618:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f022 020e 	bic.w	r2, r2, #14
 800662a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a6c      	ldr	r2, [pc, #432]	; (80067e4 <HAL_DMA_Abort_IT+0x3a8>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d04a      	beq.n	80066cc <HAL_DMA_Abort_IT+0x290>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a6b      	ldr	r2, [pc, #428]	; (80067e8 <HAL_DMA_Abort_IT+0x3ac>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d045      	beq.n	80066cc <HAL_DMA_Abort_IT+0x290>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a69      	ldr	r2, [pc, #420]	; (80067ec <HAL_DMA_Abort_IT+0x3b0>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d040      	beq.n	80066cc <HAL_DMA_Abort_IT+0x290>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a68      	ldr	r2, [pc, #416]	; (80067f0 <HAL_DMA_Abort_IT+0x3b4>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d03b      	beq.n	80066cc <HAL_DMA_Abort_IT+0x290>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a66      	ldr	r2, [pc, #408]	; (80067f4 <HAL_DMA_Abort_IT+0x3b8>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d036      	beq.n	80066cc <HAL_DMA_Abort_IT+0x290>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a65      	ldr	r2, [pc, #404]	; (80067f8 <HAL_DMA_Abort_IT+0x3bc>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d031      	beq.n	80066cc <HAL_DMA_Abort_IT+0x290>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a63      	ldr	r2, [pc, #396]	; (80067fc <HAL_DMA_Abort_IT+0x3c0>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d02c      	beq.n	80066cc <HAL_DMA_Abort_IT+0x290>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a62      	ldr	r2, [pc, #392]	; (8006800 <HAL_DMA_Abort_IT+0x3c4>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d027      	beq.n	80066cc <HAL_DMA_Abort_IT+0x290>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a60      	ldr	r2, [pc, #384]	; (8006804 <HAL_DMA_Abort_IT+0x3c8>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d022      	beq.n	80066cc <HAL_DMA_Abort_IT+0x290>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a5f      	ldr	r2, [pc, #380]	; (8006808 <HAL_DMA_Abort_IT+0x3cc>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d01d      	beq.n	80066cc <HAL_DMA_Abort_IT+0x290>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a5d      	ldr	r2, [pc, #372]	; (800680c <HAL_DMA_Abort_IT+0x3d0>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d018      	beq.n	80066cc <HAL_DMA_Abort_IT+0x290>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a5c      	ldr	r2, [pc, #368]	; (8006810 <HAL_DMA_Abort_IT+0x3d4>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d013      	beq.n	80066cc <HAL_DMA_Abort_IT+0x290>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a5a      	ldr	r2, [pc, #360]	; (8006814 <HAL_DMA_Abort_IT+0x3d8>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d00e      	beq.n	80066cc <HAL_DMA_Abort_IT+0x290>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a59      	ldr	r2, [pc, #356]	; (8006818 <HAL_DMA_Abort_IT+0x3dc>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d009      	beq.n	80066cc <HAL_DMA_Abort_IT+0x290>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a57      	ldr	r2, [pc, #348]	; (800681c <HAL_DMA_Abort_IT+0x3e0>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d004      	beq.n	80066cc <HAL_DMA_Abort_IT+0x290>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a56      	ldr	r2, [pc, #344]	; (8006820 <HAL_DMA_Abort_IT+0x3e4>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d108      	bne.n	80066de <HAL_DMA_Abort_IT+0x2a2>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 0201 	bic.w	r2, r2, #1
 80066da:	601a      	str	r2, [r3, #0]
 80066dc:	e007      	b.n	80066ee <HAL_DMA_Abort_IT+0x2b2>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f022 0201 	bic.w	r2, r2, #1
 80066ec:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a3c      	ldr	r2, [pc, #240]	; (80067e4 <HAL_DMA_Abort_IT+0x3a8>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d072      	beq.n	80067de <HAL_DMA_Abort_IT+0x3a2>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a3a      	ldr	r2, [pc, #232]	; (80067e8 <HAL_DMA_Abort_IT+0x3ac>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d06d      	beq.n	80067de <HAL_DMA_Abort_IT+0x3a2>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a39      	ldr	r2, [pc, #228]	; (80067ec <HAL_DMA_Abort_IT+0x3b0>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d068      	beq.n	80067de <HAL_DMA_Abort_IT+0x3a2>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a37      	ldr	r2, [pc, #220]	; (80067f0 <HAL_DMA_Abort_IT+0x3b4>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d063      	beq.n	80067de <HAL_DMA_Abort_IT+0x3a2>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a36      	ldr	r2, [pc, #216]	; (80067f4 <HAL_DMA_Abort_IT+0x3b8>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d05e      	beq.n	80067de <HAL_DMA_Abort_IT+0x3a2>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a34      	ldr	r2, [pc, #208]	; (80067f8 <HAL_DMA_Abort_IT+0x3bc>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d059      	beq.n	80067de <HAL_DMA_Abort_IT+0x3a2>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a33      	ldr	r2, [pc, #204]	; (80067fc <HAL_DMA_Abort_IT+0x3c0>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d054      	beq.n	80067de <HAL_DMA_Abort_IT+0x3a2>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a31      	ldr	r2, [pc, #196]	; (8006800 <HAL_DMA_Abort_IT+0x3c4>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d04f      	beq.n	80067de <HAL_DMA_Abort_IT+0x3a2>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a30      	ldr	r2, [pc, #192]	; (8006804 <HAL_DMA_Abort_IT+0x3c8>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d04a      	beq.n	80067de <HAL_DMA_Abort_IT+0x3a2>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a2e      	ldr	r2, [pc, #184]	; (8006808 <HAL_DMA_Abort_IT+0x3cc>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d045      	beq.n	80067de <HAL_DMA_Abort_IT+0x3a2>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a2d      	ldr	r2, [pc, #180]	; (800680c <HAL_DMA_Abort_IT+0x3d0>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d040      	beq.n	80067de <HAL_DMA_Abort_IT+0x3a2>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a2b      	ldr	r2, [pc, #172]	; (8006810 <HAL_DMA_Abort_IT+0x3d4>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d03b      	beq.n	80067de <HAL_DMA_Abort_IT+0x3a2>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a2a      	ldr	r2, [pc, #168]	; (8006814 <HAL_DMA_Abort_IT+0x3d8>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d036      	beq.n	80067de <HAL_DMA_Abort_IT+0x3a2>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a28      	ldr	r2, [pc, #160]	; (8006818 <HAL_DMA_Abort_IT+0x3dc>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d031      	beq.n	80067de <HAL_DMA_Abort_IT+0x3a2>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a27      	ldr	r2, [pc, #156]	; (800681c <HAL_DMA_Abort_IT+0x3e0>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d02c      	beq.n	80067de <HAL_DMA_Abort_IT+0x3a2>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a25      	ldr	r2, [pc, #148]	; (8006820 <HAL_DMA_Abort_IT+0x3e4>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d027      	beq.n	80067de <HAL_DMA_Abort_IT+0x3a2>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a24      	ldr	r2, [pc, #144]	; (8006824 <HAL_DMA_Abort_IT+0x3e8>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d022      	beq.n	80067de <HAL_DMA_Abort_IT+0x3a2>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a22      	ldr	r2, [pc, #136]	; (8006828 <HAL_DMA_Abort_IT+0x3ec>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d01d      	beq.n	80067de <HAL_DMA_Abort_IT+0x3a2>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a21      	ldr	r2, [pc, #132]	; (800682c <HAL_DMA_Abort_IT+0x3f0>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d018      	beq.n	80067de <HAL_DMA_Abort_IT+0x3a2>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a1f      	ldr	r2, [pc, #124]	; (8006830 <HAL_DMA_Abort_IT+0x3f4>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d013      	beq.n	80067de <HAL_DMA_Abort_IT+0x3a2>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a1e      	ldr	r2, [pc, #120]	; (8006834 <HAL_DMA_Abort_IT+0x3f8>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d00e      	beq.n	80067de <HAL_DMA_Abort_IT+0x3a2>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a1c      	ldr	r2, [pc, #112]	; (8006838 <HAL_DMA_Abort_IT+0x3fc>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d009      	beq.n	80067de <HAL_DMA_Abort_IT+0x3a2>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a1b      	ldr	r2, [pc, #108]	; (800683c <HAL_DMA_Abort_IT+0x400>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d004      	beq.n	80067de <HAL_DMA_Abort_IT+0x3a2>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a19      	ldr	r2, [pc, #100]	; (8006840 <HAL_DMA_Abort_IT+0x404>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d132      	bne.n	8006844 <HAL_DMA_Abort_IT+0x408>
 80067de:	2301      	movs	r3, #1
 80067e0:	e031      	b.n	8006846 <HAL_DMA_Abort_IT+0x40a>
 80067e2:	bf00      	nop
 80067e4:	40020010 	.word	0x40020010
 80067e8:	40020028 	.word	0x40020028
 80067ec:	40020040 	.word	0x40020040
 80067f0:	40020058 	.word	0x40020058
 80067f4:	40020070 	.word	0x40020070
 80067f8:	40020088 	.word	0x40020088
 80067fc:	400200a0 	.word	0x400200a0
 8006800:	400200b8 	.word	0x400200b8
 8006804:	40020410 	.word	0x40020410
 8006808:	40020428 	.word	0x40020428
 800680c:	40020440 	.word	0x40020440
 8006810:	40020458 	.word	0x40020458
 8006814:	40020470 	.word	0x40020470
 8006818:	40020488 	.word	0x40020488
 800681c:	400204a0 	.word	0x400204a0
 8006820:	400204b8 	.word	0x400204b8
 8006824:	58025408 	.word	0x58025408
 8006828:	5802541c 	.word	0x5802541c
 800682c:	58025430 	.word	0x58025430
 8006830:	58025444 	.word	0x58025444
 8006834:	58025458 	.word	0x58025458
 8006838:	5802546c 	.word	0x5802546c
 800683c:	58025480 	.word	0x58025480
 8006840:	58025494 	.word	0x58025494
 8006844:	2300      	movs	r3, #0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d028      	beq.n	800689c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006854:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006858:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800685e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006864:	f003 031f 	and.w	r3, r3, #31
 8006868:	2201      	movs	r2, #1
 800686a:	409a      	lsls	r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006878:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00c      	beq.n	800689c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800688c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006890:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800689a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d003      	beq.n	80068bc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop

080068c8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b08a      	sub	sp, #40	; 0x28
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80068d0:	2300      	movs	r3, #0
 80068d2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80068d4:	4b67      	ldr	r3, [pc, #412]	; (8006a74 <HAL_DMA_IRQHandler+0x1ac>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a67      	ldr	r2, [pc, #412]	; (8006a78 <HAL_DMA_IRQHandler+0x1b0>)
 80068da:	fba2 2303 	umull	r2, r3, r2, r3
 80068de:	0a9b      	lsrs	r3, r3, #10
 80068e0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068e6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ec:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80068ee:	6a3b      	ldr	r3, [r7, #32]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a5f      	ldr	r2, [pc, #380]	; (8006a7c <HAL_DMA_IRQHandler+0x1b4>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d04a      	beq.n	800699a <HAL_DMA_IRQHandler+0xd2>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a5d      	ldr	r2, [pc, #372]	; (8006a80 <HAL_DMA_IRQHandler+0x1b8>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d045      	beq.n	800699a <HAL_DMA_IRQHandler+0xd2>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a5c      	ldr	r2, [pc, #368]	; (8006a84 <HAL_DMA_IRQHandler+0x1bc>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d040      	beq.n	800699a <HAL_DMA_IRQHandler+0xd2>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a5a      	ldr	r2, [pc, #360]	; (8006a88 <HAL_DMA_IRQHandler+0x1c0>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d03b      	beq.n	800699a <HAL_DMA_IRQHandler+0xd2>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a59      	ldr	r2, [pc, #356]	; (8006a8c <HAL_DMA_IRQHandler+0x1c4>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d036      	beq.n	800699a <HAL_DMA_IRQHandler+0xd2>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a57      	ldr	r2, [pc, #348]	; (8006a90 <HAL_DMA_IRQHandler+0x1c8>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d031      	beq.n	800699a <HAL_DMA_IRQHandler+0xd2>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a56      	ldr	r2, [pc, #344]	; (8006a94 <HAL_DMA_IRQHandler+0x1cc>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d02c      	beq.n	800699a <HAL_DMA_IRQHandler+0xd2>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a54      	ldr	r2, [pc, #336]	; (8006a98 <HAL_DMA_IRQHandler+0x1d0>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d027      	beq.n	800699a <HAL_DMA_IRQHandler+0xd2>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a53      	ldr	r2, [pc, #332]	; (8006a9c <HAL_DMA_IRQHandler+0x1d4>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d022      	beq.n	800699a <HAL_DMA_IRQHandler+0xd2>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a51      	ldr	r2, [pc, #324]	; (8006aa0 <HAL_DMA_IRQHandler+0x1d8>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d01d      	beq.n	800699a <HAL_DMA_IRQHandler+0xd2>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a50      	ldr	r2, [pc, #320]	; (8006aa4 <HAL_DMA_IRQHandler+0x1dc>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d018      	beq.n	800699a <HAL_DMA_IRQHandler+0xd2>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a4e      	ldr	r2, [pc, #312]	; (8006aa8 <HAL_DMA_IRQHandler+0x1e0>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d013      	beq.n	800699a <HAL_DMA_IRQHandler+0xd2>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a4d      	ldr	r2, [pc, #308]	; (8006aac <HAL_DMA_IRQHandler+0x1e4>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d00e      	beq.n	800699a <HAL_DMA_IRQHandler+0xd2>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a4b      	ldr	r2, [pc, #300]	; (8006ab0 <HAL_DMA_IRQHandler+0x1e8>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d009      	beq.n	800699a <HAL_DMA_IRQHandler+0xd2>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a4a      	ldr	r2, [pc, #296]	; (8006ab4 <HAL_DMA_IRQHandler+0x1ec>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d004      	beq.n	800699a <HAL_DMA_IRQHandler+0xd2>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a48      	ldr	r2, [pc, #288]	; (8006ab8 <HAL_DMA_IRQHandler+0x1f0>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d101      	bne.n	800699e <HAL_DMA_IRQHandler+0xd6>
 800699a:	2301      	movs	r3, #1
 800699c:	e000      	b.n	80069a0 <HAL_DMA_IRQHandler+0xd8>
 800699e:	2300      	movs	r3, #0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f000 842b 	beq.w	80071fc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069aa:	f003 031f 	and.w	r3, r3, #31
 80069ae:	2208      	movs	r2, #8
 80069b0:	409a      	lsls	r2, r3
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	4013      	ands	r3, r2
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f000 80a2 	beq.w	8006b00 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a2e      	ldr	r2, [pc, #184]	; (8006a7c <HAL_DMA_IRQHandler+0x1b4>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d04a      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x194>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a2d      	ldr	r2, [pc, #180]	; (8006a80 <HAL_DMA_IRQHandler+0x1b8>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d045      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x194>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a2b      	ldr	r2, [pc, #172]	; (8006a84 <HAL_DMA_IRQHandler+0x1bc>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d040      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x194>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a2a      	ldr	r2, [pc, #168]	; (8006a88 <HAL_DMA_IRQHandler+0x1c0>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d03b      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x194>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a28      	ldr	r2, [pc, #160]	; (8006a8c <HAL_DMA_IRQHandler+0x1c4>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d036      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x194>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a27      	ldr	r2, [pc, #156]	; (8006a90 <HAL_DMA_IRQHandler+0x1c8>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d031      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x194>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a25      	ldr	r2, [pc, #148]	; (8006a94 <HAL_DMA_IRQHandler+0x1cc>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d02c      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x194>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a24      	ldr	r2, [pc, #144]	; (8006a98 <HAL_DMA_IRQHandler+0x1d0>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d027      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x194>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a22      	ldr	r2, [pc, #136]	; (8006a9c <HAL_DMA_IRQHandler+0x1d4>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d022      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x194>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a21      	ldr	r2, [pc, #132]	; (8006aa0 <HAL_DMA_IRQHandler+0x1d8>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d01d      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x194>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a1f      	ldr	r2, [pc, #124]	; (8006aa4 <HAL_DMA_IRQHandler+0x1dc>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d018      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x194>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a1e      	ldr	r2, [pc, #120]	; (8006aa8 <HAL_DMA_IRQHandler+0x1e0>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d013      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x194>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a1c      	ldr	r2, [pc, #112]	; (8006aac <HAL_DMA_IRQHandler+0x1e4>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d00e      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x194>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a1b      	ldr	r2, [pc, #108]	; (8006ab0 <HAL_DMA_IRQHandler+0x1e8>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d009      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x194>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a19      	ldr	r2, [pc, #100]	; (8006ab4 <HAL_DMA_IRQHandler+0x1ec>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d004      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x194>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a18      	ldr	r2, [pc, #96]	; (8006ab8 <HAL_DMA_IRQHandler+0x1f0>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d12f      	bne.n	8006abc <HAL_DMA_IRQHandler+0x1f4>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 0304 	and.w	r3, r3, #4
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	bf14      	ite	ne
 8006a6a:	2301      	movne	r3, #1
 8006a6c:	2300      	moveq	r3, #0
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	e02e      	b.n	8006ad0 <HAL_DMA_IRQHandler+0x208>
 8006a72:	bf00      	nop
 8006a74:	240004c4 	.word	0x240004c4
 8006a78:	1b4e81b5 	.word	0x1b4e81b5
 8006a7c:	40020010 	.word	0x40020010
 8006a80:	40020028 	.word	0x40020028
 8006a84:	40020040 	.word	0x40020040
 8006a88:	40020058 	.word	0x40020058
 8006a8c:	40020070 	.word	0x40020070
 8006a90:	40020088 	.word	0x40020088
 8006a94:	400200a0 	.word	0x400200a0
 8006a98:	400200b8 	.word	0x400200b8
 8006a9c:	40020410 	.word	0x40020410
 8006aa0:	40020428 	.word	0x40020428
 8006aa4:	40020440 	.word	0x40020440
 8006aa8:	40020458 	.word	0x40020458
 8006aac:	40020470 	.word	0x40020470
 8006ab0:	40020488 	.word	0x40020488
 8006ab4:	400204a0 	.word	0x400204a0
 8006ab8:	400204b8 	.word	0x400204b8
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0308 	and.w	r3, r3, #8
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	bf14      	ite	ne
 8006aca:	2301      	movne	r3, #1
 8006acc:	2300      	moveq	r3, #0
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d015      	beq.n	8006b00 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f022 0204 	bic.w	r2, r2, #4
 8006ae2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ae8:	f003 031f 	and.w	r3, r3, #31
 8006aec:	2208      	movs	r2, #8
 8006aee:	409a      	lsls	r2, r3
 8006af0:	6a3b      	ldr	r3, [r7, #32]
 8006af2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006af8:	f043 0201 	orr.w	r2, r3, #1
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b04:	f003 031f 	and.w	r3, r3, #31
 8006b08:	69ba      	ldr	r2, [r7, #24]
 8006b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d06e      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a69      	ldr	r2, [pc, #420]	; (8006cc0 <HAL_DMA_IRQHandler+0x3f8>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d04a      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0x2ee>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a67      	ldr	r2, [pc, #412]	; (8006cc4 <HAL_DMA_IRQHandler+0x3fc>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d045      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0x2ee>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a66      	ldr	r2, [pc, #408]	; (8006cc8 <HAL_DMA_IRQHandler+0x400>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d040      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0x2ee>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a64      	ldr	r2, [pc, #400]	; (8006ccc <HAL_DMA_IRQHandler+0x404>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d03b      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0x2ee>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a63      	ldr	r2, [pc, #396]	; (8006cd0 <HAL_DMA_IRQHandler+0x408>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d036      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0x2ee>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a61      	ldr	r2, [pc, #388]	; (8006cd4 <HAL_DMA_IRQHandler+0x40c>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d031      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0x2ee>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a60      	ldr	r2, [pc, #384]	; (8006cd8 <HAL_DMA_IRQHandler+0x410>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d02c      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0x2ee>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a5e      	ldr	r2, [pc, #376]	; (8006cdc <HAL_DMA_IRQHandler+0x414>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d027      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0x2ee>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a5d      	ldr	r2, [pc, #372]	; (8006ce0 <HAL_DMA_IRQHandler+0x418>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d022      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0x2ee>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a5b      	ldr	r2, [pc, #364]	; (8006ce4 <HAL_DMA_IRQHandler+0x41c>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d01d      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0x2ee>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a5a      	ldr	r2, [pc, #360]	; (8006ce8 <HAL_DMA_IRQHandler+0x420>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d018      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0x2ee>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a58      	ldr	r2, [pc, #352]	; (8006cec <HAL_DMA_IRQHandler+0x424>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d013      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0x2ee>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a57      	ldr	r2, [pc, #348]	; (8006cf0 <HAL_DMA_IRQHandler+0x428>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d00e      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0x2ee>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a55      	ldr	r2, [pc, #340]	; (8006cf4 <HAL_DMA_IRQHandler+0x42c>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d009      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0x2ee>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a54      	ldr	r2, [pc, #336]	; (8006cf8 <HAL_DMA_IRQHandler+0x430>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d004      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0x2ee>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a52      	ldr	r2, [pc, #328]	; (8006cfc <HAL_DMA_IRQHandler+0x434>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d10a      	bne.n	8006bcc <HAL_DMA_IRQHandler+0x304>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	695b      	ldr	r3, [r3, #20]
 8006bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	bf14      	ite	ne
 8006bc4:	2301      	movne	r3, #1
 8006bc6:	2300      	moveq	r3, #0
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	e003      	b.n	8006bd4 <HAL_DMA_IRQHandler+0x30c>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00d      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bdc:	f003 031f 	and.w	r3, r3, #31
 8006be0:	2201      	movs	r2, #1
 8006be2:	409a      	lsls	r2, r3
 8006be4:	6a3b      	ldr	r3, [r7, #32]
 8006be6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bec:	f043 0202 	orr.w	r2, r3, #2
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bf8:	f003 031f 	and.w	r3, r3, #31
 8006bfc:	2204      	movs	r2, #4
 8006bfe:	409a      	lsls	r2, r3
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	4013      	ands	r3, r2
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f000 808f 	beq.w	8006d28 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a2c      	ldr	r2, [pc, #176]	; (8006cc0 <HAL_DMA_IRQHandler+0x3f8>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d04a      	beq.n	8006caa <HAL_DMA_IRQHandler+0x3e2>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a2a      	ldr	r2, [pc, #168]	; (8006cc4 <HAL_DMA_IRQHandler+0x3fc>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d045      	beq.n	8006caa <HAL_DMA_IRQHandler+0x3e2>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a29      	ldr	r2, [pc, #164]	; (8006cc8 <HAL_DMA_IRQHandler+0x400>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d040      	beq.n	8006caa <HAL_DMA_IRQHandler+0x3e2>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a27      	ldr	r2, [pc, #156]	; (8006ccc <HAL_DMA_IRQHandler+0x404>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d03b      	beq.n	8006caa <HAL_DMA_IRQHandler+0x3e2>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a26      	ldr	r2, [pc, #152]	; (8006cd0 <HAL_DMA_IRQHandler+0x408>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d036      	beq.n	8006caa <HAL_DMA_IRQHandler+0x3e2>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a24      	ldr	r2, [pc, #144]	; (8006cd4 <HAL_DMA_IRQHandler+0x40c>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d031      	beq.n	8006caa <HAL_DMA_IRQHandler+0x3e2>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a23      	ldr	r2, [pc, #140]	; (8006cd8 <HAL_DMA_IRQHandler+0x410>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d02c      	beq.n	8006caa <HAL_DMA_IRQHandler+0x3e2>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a21      	ldr	r2, [pc, #132]	; (8006cdc <HAL_DMA_IRQHandler+0x414>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d027      	beq.n	8006caa <HAL_DMA_IRQHandler+0x3e2>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a20      	ldr	r2, [pc, #128]	; (8006ce0 <HAL_DMA_IRQHandler+0x418>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d022      	beq.n	8006caa <HAL_DMA_IRQHandler+0x3e2>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a1e      	ldr	r2, [pc, #120]	; (8006ce4 <HAL_DMA_IRQHandler+0x41c>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d01d      	beq.n	8006caa <HAL_DMA_IRQHandler+0x3e2>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a1d      	ldr	r2, [pc, #116]	; (8006ce8 <HAL_DMA_IRQHandler+0x420>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d018      	beq.n	8006caa <HAL_DMA_IRQHandler+0x3e2>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a1b      	ldr	r2, [pc, #108]	; (8006cec <HAL_DMA_IRQHandler+0x424>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d013      	beq.n	8006caa <HAL_DMA_IRQHandler+0x3e2>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a1a      	ldr	r2, [pc, #104]	; (8006cf0 <HAL_DMA_IRQHandler+0x428>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d00e      	beq.n	8006caa <HAL_DMA_IRQHandler+0x3e2>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a18      	ldr	r2, [pc, #96]	; (8006cf4 <HAL_DMA_IRQHandler+0x42c>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d009      	beq.n	8006caa <HAL_DMA_IRQHandler+0x3e2>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a17      	ldr	r2, [pc, #92]	; (8006cf8 <HAL_DMA_IRQHandler+0x430>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d004      	beq.n	8006caa <HAL_DMA_IRQHandler+0x3e2>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a15      	ldr	r2, [pc, #84]	; (8006cfc <HAL_DMA_IRQHandler+0x434>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d12a      	bne.n	8006d00 <HAL_DMA_IRQHandler+0x438>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0302 	and.w	r3, r3, #2
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	bf14      	ite	ne
 8006cb8:	2301      	movne	r3, #1
 8006cba:	2300      	moveq	r3, #0
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	e023      	b.n	8006d08 <HAL_DMA_IRQHandler+0x440>
 8006cc0:	40020010 	.word	0x40020010
 8006cc4:	40020028 	.word	0x40020028
 8006cc8:	40020040 	.word	0x40020040
 8006ccc:	40020058 	.word	0x40020058
 8006cd0:	40020070 	.word	0x40020070
 8006cd4:	40020088 	.word	0x40020088
 8006cd8:	400200a0 	.word	0x400200a0
 8006cdc:	400200b8 	.word	0x400200b8
 8006ce0:	40020410 	.word	0x40020410
 8006ce4:	40020428 	.word	0x40020428
 8006ce8:	40020440 	.word	0x40020440
 8006cec:	40020458 	.word	0x40020458
 8006cf0:	40020470 	.word	0x40020470
 8006cf4:	40020488 	.word	0x40020488
 8006cf8:	400204a0 	.word	0x400204a0
 8006cfc:	400204b8 	.word	0x400204b8
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2300      	movs	r3, #0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00d      	beq.n	8006d28 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d10:	f003 031f 	and.w	r3, r3, #31
 8006d14:	2204      	movs	r2, #4
 8006d16:	409a      	lsls	r2, r3
 8006d18:	6a3b      	ldr	r3, [r7, #32]
 8006d1a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d20:	f043 0204 	orr.w	r2, r3, #4
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d2c:	f003 031f 	and.w	r3, r3, #31
 8006d30:	2210      	movs	r2, #16
 8006d32:	409a      	lsls	r2, r3
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	4013      	ands	r3, r2
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f000 80a6 	beq.w	8006e8a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a85      	ldr	r2, [pc, #532]	; (8006f58 <HAL_DMA_IRQHandler+0x690>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d04a      	beq.n	8006dde <HAL_DMA_IRQHandler+0x516>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a83      	ldr	r2, [pc, #524]	; (8006f5c <HAL_DMA_IRQHandler+0x694>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d045      	beq.n	8006dde <HAL_DMA_IRQHandler+0x516>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a82      	ldr	r2, [pc, #520]	; (8006f60 <HAL_DMA_IRQHandler+0x698>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d040      	beq.n	8006dde <HAL_DMA_IRQHandler+0x516>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a80      	ldr	r2, [pc, #512]	; (8006f64 <HAL_DMA_IRQHandler+0x69c>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d03b      	beq.n	8006dde <HAL_DMA_IRQHandler+0x516>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a7f      	ldr	r2, [pc, #508]	; (8006f68 <HAL_DMA_IRQHandler+0x6a0>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d036      	beq.n	8006dde <HAL_DMA_IRQHandler+0x516>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a7d      	ldr	r2, [pc, #500]	; (8006f6c <HAL_DMA_IRQHandler+0x6a4>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d031      	beq.n	8006dde <HAL_DMA_IRQHandler+0x516>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a7c      	ldr	r2, [pc, #496]	; (8006f70 <HAL_DMA_IRQHandler+0x6a8>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d02c      	beq.n	8006dde <HAL_DMA_IRQHandler+0x516>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a7a      	ldr	r2, [pc, #488]	; (8006f74 <HAL_DMA_IRQHandler+0x6ac>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d027      	beq.n	8006dde <HAL_DMA_IRQHandler+0x516>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a79      	ldr	r2, [pc, #484]	; (8006f78 <HAL_DMA_IRQHandler+0x6b0>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d022      	beq.n	8006dde <HAL_DMA_IRQHandler+0x516>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a77      	ldr	r2, [pc, #476]	; (8006f7c <HAL_DMA_IRQHandler+0x6b4>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d01d      	beq.n	8006dde <HAL_DMA_IRQHandler+0x516>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a76      	ldr	r2, [pc, #472]	; (8006f80 <HAL_DMA_IRQHandler+0x6b8>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d018      	beq.n	8006dde <HAL_DMA_IRQHandler+0x516>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a74      	ldr	r2, [pc, #464]	; (8006f84 <HAL_DMA_IRQHandler+0x6bc>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d013      	beq.n	8006dde <HAL_DMA_IRQHandler+0x516>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a73      	ldr	r2, [pc, #460]	; (8006f88 <HAL_DMA_IRQHandler+0x6c0>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d00e      	beq.n	8006dde <HAL_DMA_IRQHandler+0x516>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a71      	ldr	r2, [pc, #452]	; (8006f8c <HAL_DMA_IRQHandler+0x6c4>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d009      	beq.n	8006dde <HAL_DMA_IRQHandler+0x516>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a70      	ldr	r2, [pc, #448]	; (8006f90 <HAL_DMA_IRQHandler+0x6c8>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d004      	beq.n	8006dde <HAL_DMA_IRQHandler+0x516>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a6e      	ldr	r2, [pc, #440]	; (8006f94 <HAL_DMA_IRQHandler+0x6cc>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d10a      	bne.n	8006df4 <HAL_DMA_IRQHandler+0x52c>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0308 	and.w	r3, r3, #8
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	bf14      	ite	ne
 8006dec:	2301      	movne	r3, #1
 8006dee:	2300      	moveq	r3, #0
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	e009      	b.n	8006e08 <HAL_DMA_IRQHandler+0x540>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 0304 	and.w	r3, r3, #4
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	bf14      	ite	ne
 8006e02:	2301      	movne	r3, #1
 8006e04:	2300      	moveq	r3, #0
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d03e      	beq.n	8006e8a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e10:	f003 031f 	and.w	r3, r3, #31
 8006e14:	2210      	movs	r2, #16
 8006e16:	409a      	lsls	r2, r3
 8006e18:	6a3b      	ldr	r3, [r7, #32]
 8006e1a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d018      	beq.n	8006e5c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d108      	bne.n	8006e4a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d024      	beq.n	8006e8a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	4798      	blx	r3
 8006e48:	e01f      	b.n	8006e8a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d01b      	beq.n	8006e8a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	4798      	blx	r3
 8006e5a:	e016      	b.n	8006e8a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d107      	bne.n	8006e7a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f022 0208 	bic.w	r2, r2, #8
 8006e78:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d003      	beq.n	8006e8a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e8e:	f003 031f 	and.w	r3, r3, #31
 8006e92:	2220      	movs	r2, #32
 8006e94:	409a      	lsls	r2, r3
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	4013      	ands	r3, r2
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	f000 8110 	beq.w	80070c0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a2c      	ldr	r2, [pc, #176]	; (8006f58 <HAL_DMA_IRQHandler+0x690>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d04a      	beq.n	8006f40 <HAL_DMA_IRQHandler+0x678>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a2b      	ldr	r2, [pc, #172]	; (8006f5c <HAL_DMA_IRQHandler+0x694>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d045      	beq.n	8006f40 <HAL_DMA_IRQHandler+0x678>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a29      	ldr	r2, [pc, #164]	; (8006f60 <HAL_DMA_IRQHandler+0x698>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d040      	beq.n	8006f40 <HAL_DMA_IRQHandler+0x678>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a28      	ldr	r2, [pc, #160]	; (8006f64 <HAL_DMA_IRQHandler+0x69c>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d03b      	beq.n	8006f40 <HAL_DMA_IRQHandler+0x678>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a26      	ldr	r2, [pc, #152]	; (8006f68 <HAL_DMA_IRQHandler+0x6a0>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d036      	beq.n	8006f40 <HAL_DMA_IRQHandler+0x678>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a25      	ldr	r2, [pc, #148]	; (8006f6c <HAL_DMA_IRQHandler+0x6a4>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d031      	beq.n	8006f40 <HAL_DMA_IRQHandler+0x678>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a23      	ldr	r2, [pc, #140]	; (8006f70 <HAL_DMA_IRQHandler+0x6a8>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d02c      	beq.n	8006f40 <HAL_DMA_IRQHandler+0x678>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a22      	ldr	r2, [pc, #136]	; (8006f74 <HAL_DMA_IRQHandler+0x6ac>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d027      	beq.n	8006f40 <HAL_DMA_IRQHandler+0x678>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a20      	ldr	r2, [pc, #128]	; (8006f78 <HAL_DMA_IRQHandler+0x6b0>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d022      	beq.n	8006f40 <HAL_DMA_IRQHandler+0x678>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a1f      	ldr	r2, [pc, #124]	; (8006f7c <HAL_DMA_IRQHandler+0x6b4>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d01d      	beq.n	8006f40 <HAL_DMA_IRQHandler+0x678>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a1d      	ldr	r2, [pc, #116]	; (8006f80 <HAL_DMA_IRQHandler+0x6b8>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d018      	beq.n	8006f40 <HAL_DMA_IRQHandler+0x678>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a1c      	ldr	r2, [pc, #112]	; (8006f84 <HAL_DMA_IRQHandler+0x6bc>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d013      	beq.n	8006f40 <HAL_DMA_IRQHandler+0x678>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a1a      	ldr	r2, [pc, #104]	; (8006f88 <HAL_DMA_IRQHandler+0x6c0>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d00e      	beq.n	8006f40 <HAL_DMA_IRQHandler+0x678>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a19      	ldr	r2, [pc, #100]	; (8006f8c <HAL_DMA_IRQHandler+0x6c4>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d009      	beq.n	8006f40 <HAL_DMA_IRQHandler+0x678>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a17      	ldr	r2, [pc, #92]	; (8006f90 <HAL_DMA_IRQHandler+0x6c8>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d004      	beq.n	8006f40 <HAL_DMA_IRQHandler+0x678>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a16      	ldr	r2, [pc, #88]	; (8006f94 <HAL_DMA_IRQHandler+0x6cc>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d12b      	bne.n	8006f98 <HAL_DMA_IRQHandler+0x6d0>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 0310 	and.w	r3, r3, #16
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	bf14      	ite	ne
 8006f4e:	2301      	movne	r3, #1
 8006f50:	2300      	moveq	r3, #0
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	e02a      	b.n	8006fac <HAL_DMA_IRQHandler+0x6e4>
 8006f56:	bf00      	nop
 8006f58:	40020010 	.word	0x40020010
 8006f5c:	40020028 	.word	0x40020028
 8006f60:	40020040 	.word	0x40020040
 8006f64:	40020058 	.word	0x40020058
 8006f68:	40020070 	.word	0x40020070
 8006f6c:	40020088 	.word	0x40020088
 8006f70:	400200a0 	.word	0x400200a0
 8006f74:	400200b8 	.word	0x400200b8
 8006f78:	40020410 	.word	0x40020410
 8006f7c:	40020428 	.word	0x40020428
 8006f80:	40020440 	.word	0x40020440
 8006f84:	40020458 	.word	0x40020458
 8006f88:	40020470 	.word	0x40020470
 8006f8c:	40020488 	.word	0x40020488
 8006f90:	400204a0 	.word	0x400204a0
 8006f94:	400204b8 	.word	0x400204b8
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 0302 	and.w	r3, r3, #2
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	bf14      	ite	ne
 8006fa6:	2301      	movne	r3, #1
 8006fa8:	2300      	moveq	r3, #0
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f000 8087 	beq.w	80070c0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fb6:	f003 031f 	and.w	r3, r3, #31
 8006fba:	2220      	movs	r2, #32
 8006fbc:	409a      	lsls	r2, r3
 8006fbe:	6a3b      	ldr	r3, [r7, #32]
 8006fc0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	2b04      	cmp	r3, #4
 8006fcc:	d139      	bne.n	8007042 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f022 0216 	bic.w	r2, r2, #22
 8006fdc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	695a      	ldr	r2, [r3, #20]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fec:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d103      	bne.n	8006ffe <HAL_DMA_IRQHandler+0x736>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d007      	beq.n	800700e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f022 0208 	bic.w	r2, r2, #8
 800700c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007012:	f003 031f 	and.w	r3, r3, #31
 8007016:	223f      	movs	r2, #63	; 0x3f
 8007018:	409a      	lsls	r2, r3
 800701a:	6a3b      	ldr	r3, [r7, #32]
 800701c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2201      	movs	r2, #1
 8007022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007032:	2b00      	cmp	r3, #0
 8007034:	f000 8382 	beq.w	800773c <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	4798      	blx	r3
          }
          return;
 8007040:	e37c      	b.n	800773c <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800704c:	2b00      	cmp	r3, #0
 800704e:	d018      	beq.n	8007082 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800705a:	2b00      	cmp	r3, #0
 800705c:	d108      	bne.n	8007070 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007062:	2b00      	cmp	r3, #0
 8007064:	d02c      	beq.n	80070c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	4798      	blx	r3
 800706e:	e027      	b.n	80070c0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007074:	2b00      	cmp	r3, #0
 8007076:	d023      	beq.n	80070c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	4798      	blx	r3
 8007080:	e01e      	b.n	80070c0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800708c:	2b00      	cmp	r3, #0
 800708e:	d10f      	bne.n	80070b0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f022 0210 	bic.w	r2, r2, #16
 800709e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d003      	beq.n	80070c0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f000 833e 	beq.w	8007746 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	f000 8088 	beq.w	80071e8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2204      	movs	r2, #4
 80070dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a89      	ldr	r2, [pc, #548]	; (800730c <HAL_DMA_IRQHandler+0xa44>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d04a      	beq.n	8007180 <HAL_DMA_IRQHandler+0x8b8>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a88      	ldr	r2, [pc, #544]	; (8007310 <HAL_DMA_IRQHandler+0xa48>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d045      	beq.n	8007180 <HAL_DMA_IRQHandler+0x8b8>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a86      	ldr	r2, [pc, #536]	; (8007314 <HAL_DMA_IRQHandler+0xa4c>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d040      	beq.n	8007180 <HAL_DMA_IRQHandler+0x8b8>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a85      	ldr	r2, [pc, #532]	; (8007318 <HAL_DMA_IRQHandler+0xa50>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d03b      	beq.n	8007180 <HAL_DMA_IRQHandler+0x8b8>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a83      	ldr	r2, [pc, #524]	; (800731c <HAL_DMA_IRQHandler+0xa54>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d036      	beq.n	8007180 <HAL_DMA_IRQHandler+0x8b8>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a82      	ldr	r2, [pc, #520]	; (8007320 <HAL_DMA_IRQHandler+0xa58>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d031      	beq.n	8007180 <HAL_DMA_IRQHandler+0x8b8>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a80      	ldr	r2, [pc, #512]	; (8007324 <HAL_DMA_IRQHandler+0xa5c>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d02c      	beq.n	8007180 <HAL_DMA_IRQHandler+0x8b8>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a7f      	ldr	r2, [pc, #508]	; (8007328 <HAL_DMA_IRQHandler+0xa60>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d027      	beq.n	8007180 <HAL_DMA_IRQHandler+0x8b8>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a7d      	ldr	r2, [pc, #500]	; (800732c <HAL_DMA_IRQHandler+0xa64>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d022      	beq.n	8007180 <HAL_DMA_IRQHandler+0x8b8>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a7c      	ldr	r2, [pc, #496]	; (8007330 <HAL_DMA_IRQHandler+0xa68>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d01d      	beq.n	8007180 <HAL_DMA_IRQHandler+0x8b8>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a7a      	ldr	r2, [pc, #488]	; (8007334 <HAL_DMA_IRQHandler+0xa6c>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d018      	beq.n	8007180 <HAL_DMA_IRQHandler+0x8b8>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a79      	ldr	r2, [pc, #484]	; (8007338 <HAL_DMA_IRQHandler+0xa70>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d013      	beq.n	8007180 <HAL_DMA_IRQHandler+0x8b8>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a77      	ldr	r2, [pc, #476]	; (800733c <HAL_DMA_IRQHandler+0xa74>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d00e      	beq.n	8007180 <HAL_DMA_IRQHandler+0x8b8>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a76      	ldr	r2, [pc, #472]	; (8007340 <HAL_DMA_IRQHandler+0xa78>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d009      	beq.n	8007180 <HAL_DMA_IRQHandler+0x8b8>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a74      	ldr	r2, [pc, #464]	; (8007344 <HAL_DMA_IRQHandler+0xa7c>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d004      	beq.n	8007180 <HAL_DMA_IRQHandler+0x8b8>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a73      	ldr	r2, [pc, #460]	; (8007348 <HAL_DMA_IRQHandler+0xa80>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d108      	bne.n	8007192 <HAL_DMA_IRQHandler+0x8ca>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f022 0201 	bic.w	r2, r2, #1
 800718e:	601a      	str	r2, [r3, #0]
 8007190:	e007      	b.n	80071a2 <HAL_DMA_IRQHandler+0x8da>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f022 0201 	bic.w	r2, r2, #1
 80071a0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	3301      	adds	r3, #1
 80071a6:	60fb      	str	r3, [r7, #12]
 80071a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d307      	bcc.n	80071be <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 0301 	and.w	r3, r3, #1
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1f2      	bne.n	80071a2 <HAL_DMA_IRQHandler+0x8da>
 80071bc:	e000      	b.n	80071c0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80071be:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 0301 	and.w	r3, r3, #1
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d004      	beq.n	80071d8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2203      	movs	r2, #3
 80071d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80071d6:	e003      	b.n	80071e0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f000 82aa 	beq.w	8007746 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	4798      	blx	r3
 80071fa:	e2a4      	b.n	8007746 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a52      	ldr	r2, [pc, #328]	; (800734c <HAL_DMA_IRQHandler+0xa84>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d04a      	beq.n	800729c <HAL_DMA_IRQHandler+0x9d4>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a51      	ldr	r2, [pc, #324]	; (8007350 <HAL_DMA_IRQHandler+0xa88>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d045      	beq.n	800729c <HAL_DMA_IRQHandler+0x9d4>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a4f      	ldr	r2, [pc, #316]	; (8007354 <HAL_DMA_IRQHandler+0xa8c>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d040      	beq.n	800729c <HAL_DMA_IRQHandler+0x9d4>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a4e      	ldr	r2, [pc, #312]	; (8007358 <HAL_DMA_IRQHandler+0xa90>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d03b      	beq.n	800729c <HAL_DMA_IRQHandler+0x9d4>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a4c      	ldr	r2, [pc, #304]	; (800735c <HAL_DMA_IRQHandler+0xa94>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d036      	beq.n	800729c <HAL_DMA_IRQHandler+0x9d4>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a4b      	ldr	r2, [pc, #300]	; (8007360 <HAL_DMA_IRQHandler+0xa98>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d031      	beq.n	800729c <HAL_DMA_IRQHandler+0x9d4>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a49      	ldr	r2, [pc, #292]	; (8007364 <HAL_DMA_IRQHandler+0xa9c>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d02c      	beq.n	800729c <HAL_DMA_IRQHandler+0x9d4>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a48      	ldr	r2, [pc, #288]	; (8007368 <HAL_DMA_IRQHandler+0xaa0>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d027      	beq.n	800729c <HAL_DMA_IRQHandler+0x9d4>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a46      	ldr	r2, [pc, #280]	; (800736c <HAL_DMA_IRQHandler+0xaa4>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d022      	beq.n	800729c <HAL_DMA_IRQHandler+0x9d4>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a45      	ldr	r2, [pc, #276]	; (8007370 <HAL_DMA_IRQHandler+0xaa8>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d01d      	beq.n	800729c <HAL_DMA_IRQHandler+0x9d4>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a43      	ldr	r2, [pc, #268]	; (8007374 <HAL_DMA_IRQHandler+0xaac>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d018      	beq.n	800729c <HAL_DMA_IRQHandler+0x9d4>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a42      	ldr	r2, [pc, #264]	; (8007378 <HAL_DMA_IRQHandler+0xab0>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d013      	beq.n	800729c <HAL_DMA_IRQHandler+0x9d4>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a40      	ldr	r2, [pc, #256]	; (800737c <HAL_DMA_IRQHandler+0xab4>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d00e      	beq.n	800729c <HAL_DMA_IRQHandler+0x9d4>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a3f      	ldr	r2, [pc, #252]	; (8007380 <HAL_DMA_IRQHandler+0xab8>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d009      	beq.n	800729c <HAL_DMA_IRQHandler+0x9d4>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a3d      	ldr	r2, [pc, #244]	; (8007384 <HAL_DMA_IRQHandler+0xabc>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d004      	beq.n	800729c <HAL_DMA_IRQHandler+0x9d4>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a3c      	ldr	r2, [pc, #240]	; (8007388 <HAL_DMA_IRQHandler+0xac0>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d101      	bne.n	80072a0 <HAL_DMA_IRQHandler+0x9d8>
 800729c:	2301      	movs	r3, #1
 800729e:	e000      	b.n	80072a2 <HAL_DMA_IRQHandler+0x9da>
 80072a0:	2300      	movs	r3, #0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	f000 824f 	beq.w	8007746 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072b4:	f003 031f 	and.w	r3, r3, #31
 80072b8:	2204      	movs	r2, #4
 80072ba:	409a      	lsls	r2, r3
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	4013      	ands	r3, r2
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f000 80dd 	beq.w	8007480 <HAL_DMA_IRQHandler+0xbb8>
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	f003 0304 	and.w	r3, r3, #4
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f000 80d7 	beq.w	8007480 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072d6:	f003 031f 	and.w	r3, r3, #31
 80072da:	2204      	movs	r2, #4
 80072dc:	409a      	lsls	r2, r3
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d059      	beq.n	80073a0 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d14a      	bne.n	800738c <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	f000 8220 	beq.w	8007740 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007308:	e21a      	b.n	8007740 <HAL_DMA_IRQHandler+0xe78>
 800730a:	bf00      	nop
 800730c:	40020010 	.word	0x40020010
 8007310:	40020028 	.word	0x40020028
 8007314:	40020040 	.word	0x40020040
 8007318:	40020058 	.word	0x40020058
 800731c:	40020070 	.word	0x40020070
 8007320:	40020088 	.word	0x40020088
 8007324:	400200a0 	.word	0x400200a0
 8007328:	400200b8 	.word	0x400200b8
 800732c:	40020410 	.word	0x40020410
 8007330:	40020428 	.word	0x40020428
 8007334:	40020440 	.word	0x40020440
 8007338:	40020458 	.word	0x40020458
 800733c:	40020470 	.word	0x40020470
 8007340:	40020488 	.word	0x40020488
 8007344:	400204a0 	.word	0x400204a0
 8007348:	400204b8 	.word	0x400204b8
 800734c:	48022c08 	.word	0x48022c08
 8007350:	48022c1c 	.word	0x48022c1c
 8007354:	48022c30 	.word	0x48022c30
 8007358:	48022c44 	.word	0x48022c44
 800735c:	48022c58 	.word	0x48022c58
 8007360:	48022c6c 	.word	0x48022c6c
 8007364:	48022c80 	.word	0x48022c80
 8007368:	48022c94 	.word	0x48022c94
 800736c:	58025408 	.word	0x58025408
 8007370:	5802541c 	.word	0x5802541c
 8007374:	58025430 	.word	0x58025430
 8007378:	58025444 	.word	0x58025444
 800737c:	58025458 	.word	0x58025458
 8007380:	5802546c 	.word	0x5802546c
 8007384:	58025480 	.word	0x58025480
 8007388:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007390:	2b00      	cmp	r3, #0
 8007392:	f000 81d5 	beq.w	8007740 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800739e:	e1cf      	b.n	8007740 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	f003 0320 	and.w	r3, r3, #32
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d160      	bne.n	800746c <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a7f      	ldr	r2, [pc, #508]	; (80075ac <HAL_DMA_IRQHandler+0xce4>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d04a      	beq.n	800744a <HAL_DMA_IRQHandler+0xb82>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a7d      	ldr	r2, [pc, #500]	; (80075b0 <HAL_DMA_IRQHandler+0xce8>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d045      	beq.n	800744a <HAL_DMA_IRQHandler+0xb82>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a7c      	ldr	r2, [pc, #496]	; (80075b4 <HAL_DMA_IRQHandler+0xcec>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d040      	beq.n	800744a <HAL_DMA_IRQHandler+0xb82>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a7a      	ldr	r2, [pc, #488]	; (80075b8 <HAL_DMA_IRQHandler+0xcf0>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d03b      	beq.n	800744a <HAL_DMA_IRQHandler+0xb82>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a79      	ldr	r2, [pc, #484]	; (80075bc <HAL_DMA_IRQHandler+0xcf4>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d036      	beq.n	800744a <HAL_DMA_IRQHandler+0xb82>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a77      	ldr	r2, [pc, #476]	; (80075c0 <HAL_DMA_IRQHandler+0xcf8>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d031      	beq.n	800744a <HAL_DMA_IRQHandler+0xb82>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a76      	ldr	r2, [pc, #472]	; (80075c4 <HAL_DMA_IRQHandler+0xcfc>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d02c      	beq.n	800744a <HAL_DMA_IRQHandler+0xb82>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a74      	ldr	r2, [pc, #464]	; (80075c8 <HAL_DMA_IRQHandler+0xd00>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d027      	beq.n	800744a <HAL_DMA_IRQHandler+0xb82>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a73      	ldr	r2, [pc, #460]	; (80075cc <HAL_DMA_IRQHandler+0xd04>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d022      	beq.n	800744a <HAL_DMA_IRQHandler+0xb82>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a71      	ldr	r2, [pc, #452]	; (80075d0 <HAL_DMA_IRQHandler+0xd08>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d01d      	beq.n	800744a <HAL_DMA_IRQHandler+0xb82>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a70      	ldr	r2, [pc, #448]	; (80075d4 <HAL_DMA_IRQHandler+0xd0c>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d018      	beq.n	800744a <HAL_DMA_IRQHandler+0xb82>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a6e      	ldr	r2, [pc, #440]	; (80075d8 <HAL_DMA_IRQHandler+0xd10>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d013      	beq.n	800744a <HAL_DMA_IRQHandler+0xb82>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a6d      	ldr	r2, [pc, #436]	; (80075dc <HAL_DMA_IRQHandler+0xd14>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d00e      	beq.n	800744a <HAL_DMA_IRQHandler+0xb82>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a6b      	ldr	r2, [pc, #428]	; (80075e0 <HAL_DMA_IRQHandler+0xd18>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d009      	beq.n	800744a <HAL_DMA_IRQHandler+0xb82>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a6a      	ldr	r2, [pc, #424]	; (80075e4 <HAL_DMA_IRQHandler+0xd1c>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d004      	beq.n	800744a <HAL_DMA_IRQHandler+0xb82>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a68      	ldr	r2, [pc, #416]	; (80075e8 <HAL_DMA_IRQHandler+0xd20>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d108      	bne.n	800745c <HAL_DMA_IRQHandler+0xb94>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f022 0208 	bic.w	r2, r2, #8
 8007458:	601a      	str	r2, [r3, #0]
 800745a:	e007      	b.n	800746c <HAL_DMA_IRQHandler+0xba4>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f022 0204 	bic.w	r2, r2, #4
 800746a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007470:	2b00      	cmp	r3, #0
 8007472:	f000 8165 	beq.w	8007740 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800747e:	e15f      	b.n	8007740 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007484:	f003 031f 	and.w	r3, r3, #31
 8007488:	2202      	movs	r2, #2
 800748a:	409a      	lsls	r2, r3
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	4013      	ands	r3, r2
 8007490:	2b00      	cmp	r3, #0
 8007492:	f000 80c5 	beq.w	8007620 <HAL_DMA_IRQHandler+0xd58>
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	f003 0302 	and.w	r3, r3, #2
 800749c:	2b00      	cmp	r3, #0
 800749e:	f000 80bf 	beq.w	8007620 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074a6:	f003 031f 	and.w	r3, r3, #31
 80074aa:	2202      	movs	r2, #2
 80074ac:	409a      	lsls	r2, r3
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d018      	beq.n	80074ee <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d109      	bne.n	80074da <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	f000 813a 	beq.w	8007744 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074d8:	e134      	b.n	8007744 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f000 8130 	beq.w	8007744 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074ec:	e12a      	b.n	8007744 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	f003 0320 	and.w	r3, r3, #32
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f040 8089 	bne.w	800760c <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a2b      	ldr	r2, [pc, #172]	; (80075ac <HAL_DMA_IRQHandler+0xce4>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d04a      	beq.n	800759a <HAL_DMA_IRQHandler+0xcd2>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a29      	ldr	r2, [pc, #164]	; (80075b0 <HAL_DMA_IRQHandler+0xce8>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d045      	beq.n	800759a <HAL_DMA_IRQHandler+0xcd2>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a28      	ldr	r2, [pc, #160]	; (80075b4 <HAL_DMA_IRQHandler+0xcec>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d040      	beq.n	800759a <HAL_DMA_IRQHandler+0xcd2>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a26      	ldr	r2, [pc, #152]	; (80075b8 <HAL_DMA_IRQHandler+0xcf0>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d03b      	beq.n	800759a <HAL_DMA_IRQHandler+0xcd2>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a25      	ldr	r2, [pc, #148]	; (80075bc <HAL_DMA_IRQHandler+0xcf4>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d036      	beq.n	800759a <HAL_DMA_IRQHandler+0xcd2>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a23      	ldr	r2, [pc, #140]	; (80075c0 <HAL_DMA_IRQHandler+0xcf8>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d031      	beq.n	800759a <HAL_DMA_IRQHandler+0xcd2>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a22      	ldr	r2, [pc, #136]	; (80075c4 <HAL_DMA_IRQHandler+0xcfc>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d02c      	beq.n	800759a <HAL_DMA_IRQHandler+0xcd2>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a20      	ldr	r2, [pc, #128]	; (80075c8 <HAL_DMA_IRQHandler+0xd00>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d027      	beq.n	800759a <HAL_DMA_IRQHandler+0xcd2>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a1f      	ldr	r2, [pc, #124]	; (80075cc <HAL_DMA_IRQHandler+0xd04>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d022      	beq.n	800759a <HAL_DMA_IRQHandler+0xcd2>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a1d      	ldr	r2, [pc, #116]	; (80075d0 <HAL_DMA_IRQHandler+0xd08>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d01d      	beq.n	800759a <HAL_DMA_IRQHandler+0xcd2>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a1c      	ldr	r2, [pc, #112]	; (80075d4 <HAL_DMA_IRQHandler+0xd0c>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d018      	beq.n	800759a <HAL_DMA_IRQHandler+0xcd2>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a1a      	ldr	r2, [pc, #104]	; (80075d8 <HAL_DMA_IRQHandler+0xd10>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d013      	beq.n	800759a <HAL_DMA_IRQHandler+0xcd2>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a19      	ldr	r2, [pc, #100]	; (80075dc <HAL_DMA_IRQHandler+0xd14>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d00e      	beq.n	800759a <HAL_DMA_IRQHandler+0xcd2>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a17      	ldr	r2, [pc, #92]	; (80075e0 <HAL_DMA_IRQHandler+0xd18>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d009      	beq.n	800759a <HAL_DMA_IRQHandler+0xcd2>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a16      	ldr	r2, [pc, #88]	; (80075e4 <HAL_DMA_IRQHandler+0xd1c>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d004      	beq.n	800759a <HAL_DMA_IRQHandler+0xcd2>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a14      	ldr	r2, [pc, #80]	; (80075e8 <HAL_DMA_IRQHandler+0xd20>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d128      	bne.n	80075ec <HAL_DMA_IRQHandler+0xd24>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f022 0214 	bic.w	r2, r2, #20
 80075a8:	601a      	str	r2, [r3, #0]
 80075aa:	e027      	b.n	80075fc <HAL_DMA_IRQHandler+0xd34>
 80075ac:	40020010 	.word	0x40020010
 80075b0:	40020028 	.word	0x40020028
 80075b4:	40020040 	.word	0x40020040
 80075b8:	40020058 	.word	0x40020058
 80075bc:	40020070 	.word	0x40020070
 80075c0:	40020088 	.word	0x40020088
 80075c4:	400200a0 	.word	0x400200a0
 80075c8:	400200b8 	.word	0x400200b8
 80075cc:	40020410 	.word	0x40020410
 80075d0:	40020428 	.word	0x40020428
 80075d4:	40020440 	.word	0x40020440
 80075d8:	40020458 	.word	0x40020458
 80075dc:	40020470 	.word	0x40020470
 80075e0:	40020488 	.word	0x40020488
 80075e4:	400204a0 	.word	0x400204a0
 80075e8:	400204b8 	.word	0x400204b8
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f022 020a 	bic.w	r2, r2, #10
 80075fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007610:	2b00      	cmp	r3, #0
 8007612:	f000 8097 	beq.w	8007744 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800761e:	e091      	b.n	8007744 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007624:	f003 031f 	and.w	r3, r3, #31
 8007628:	2208      	movs	r2, #8
 800762a:	409a      	lsls	r2, r3
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	4013      	ands	r3, r2
 8007630:	2b00      	cmp	r3, #0
 8007632:	f000 8088 	beq.w	8007746 <HAL_DMA_IRQHandler+0xe7e>
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	f003 0308 	and.w	r3, r3, #8
 800763c:	2b00      	cmp	r3, #0
 800763e:	f000 8082 	beq.w	8007746 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a41      	ldr	r2, [pc, #260]	; (800774c <HAL_DMA_IRQHandler+0xe84>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d04a      	beq.n	80076e2 <HAL_DMA_IRQHandler+0xe1a>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a3f      	ldr	r2, [pc, #252]	; (8007750 <HAL_DMA_IRQHandler+0xe88>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d045      	beq.n	80076e2 <HAL_DMA_IRQHandler+0xe1a>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a3e      	ldr	r2, [pc, #248]	; (8007754 <HAL_DMA_IRQHandler+0xe8c>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d040      	beq.n	80076e2 <HAL_DMA_IRQHandler+0xe1a>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a3c      	ldr	r2, [pc, #240]	; (8007758 <HAL_DMA_IRQHandler+0xe90>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d03b      	beq.n	80076e2 <HAL_DMA_IRQHandler+0xe1a>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a3b      	ldr	r2, [pc, #236]	; (800775c <HAL_DMA_IRQHandler+0xe94>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d036      	beq.n	80076e2 <HAL_DMA_IRQHandler+0xe1a>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a39      	ldr	r2, [pc, #228]	; (8007760 <HAL_DMA_IRQHandler+0xe98>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d031      	beq.n	80076e2 <HAL_DMA_IRQHandler+0xe1a>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a38      	ldr	r2, [pc, #224]	; (8007764 <HAL_DMA_IRQHandler+0xe9c>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d02c      	beq.n	80076e2 <HAL_DMA_IRQHandler+0xe1a>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a36      	ldr	r2, [pc, #216]	; (8007768 <HAL_DMA_IRQHandler+0xea0>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d027      	beq.n	80076e2 <HAL_DMA_IRQHandler+0xe1a>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a35      	ldr	r2, [pc, #212]	; (800776c <HAL_DMA_IRQHandler+0xea4>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d022      	beq.n	80076e2 <HAL_DMA_IRQHandler+0xe1a>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a33      	ldr	r2, [pc, #204]	; (8007770 <HAL_DMA_IRQHandler+0xea8>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d01d      	beq.n	80076e2 <HAL_DMA_IRQHandler+0xe1a>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a32      	ldr	r2, [pc, #200]	; (8007774 <HAL_DMA_IRQHandler+0xeac>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d018      	beq.n	80076e2 <HAL_DMA_IRQHandler+0xe1a>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a30      	ldr	r2, [pc, #192]	; (8007778 <HAL_DMA_IRQHandler+0xeb0>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d013      	beq.n	80076e2 <HAL_DMA_IRQHandler+0xe1a>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a2f      	ldr	r2, [pc, #188]	; (800777c <HAL_DMA_IRQHandler+0xeb4>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d00e      	beq.n	80076e2 <HAL_DMA_IRQHandler+0xe1a>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a2d      	ldr	r2, [pc, #180]	; (8007780 <HAL_DMA_IRQHandler+0xeb8>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d009      	beq.n	80076e2 <HAL_DMA_IRQHandler+0xe1a>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a2c      	ldr	r2, [pc, #176]	; (8007784 <HAL_DMA_IRQHandler+0xebc>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d004      	beq.n	80076e2 <HAL_DMA_IRQHandler+0xe1a>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a2a      	ldr	r2, [pc, #168]	; (8007788 <HAL_DMA_IRQHandler+0xec0>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d108      	bne.n	80076f4 <HAL_DMA_IRQHandler+0xe2c>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f022 021c 	bic.w	r2, r2, #28
 80076f0:	601a      	str	r2, [r3, #0]
 80076f2:	e007      	b.n	8007704 <HAL_DMA_IRQHandler+0xe3c>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f022 020e 	bic.w	r2, r2, #14
 8007702:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007708:	f003 031f 	and.w	r3, r3, #31
 800770c:	2201      	movs	r2, #1
 800770e:	409a      	lsls	r2, r3
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2201      	movs	r2, #1
 800771e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800772e:	2b00      	cmp	r3, #0
 8007730:	d009      	beq.n	8007746 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	4798      	blx	r3
 800773a:	e004      	b.n	8007746 <HAL_DMA_IRQHandler+0xe7e>
          return;
 800773c:	bf00      	nop
 800773e:	e002      	b.n	8007746 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007740:	bf00      	nop
 8007742:	e000      	b.n	8007746 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007744:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007746:	3728      	adds	r7, #40	; 0x28
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	40020010 	.word	0x40020010
 8007750:	40020028 	.word	0x40020028
 8007754:	40020040 	.word	0x40020040
 8007758:	40020058 	.word	0x40020058
 800775c:	40020070 	.word	0x40020070
 8007760:	40020088 	.word	0x40020088
 8007764:	400200a0 	.word	0x400200a0
 8007768:	400200b8 	.word	0x400200b8
 800776c:	40020410 	.word	0x40020410
 8007770:	40020428 	.word	0x40020428
 8007774:	40020440 	.word	0x40020440
 8007778:	40020458 	.word	0x40020458
 800777c:	40020470 	.word	0x40020470
 8007780:	40020488 	.word	0x40020488
 8007784:	400204a0 	.word	0x400204a0
 8007788:	400204b8 	.word	0x400204b8

0800778c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800778c:	b480      	push	{r7}
 800778e:	b087      	sub	sp, #28
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
 8007798:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800779e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077a4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a7f      	ldr	r2, [pc, #508]	; (80079a8 <DMA_SetConfig+0x21c>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d072      	beq.n	8007896 <DMA_SetConfig+0x10a>
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a7d      	ldr	r2, [pc, #500]	; (80079ac <DMA_SetConfig+0x220>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d06d      	beq.n	8007896 <DMA_SetConfig+0x10a>
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a7c      	ldr	r2, [pc, #496]	; (80079b0 <DMA_SetConfig+0x224>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d068      	beq.n	8007896 <DMA_SetConfig+0x10a>
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a7a      	ldr	r2, [pc, #488]	; (80079b4 <DMA_SetConfig+0x228>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d063      	beq.n	8007896 <DMA_SetConfig+0x10a>
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a79      	ldr	r2, [pc, #484]	; (80079b8 <DMA_SetConfig+0x22c>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d05e      	beq.n	8007896 <DMA_SetConfig+0x10a>
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a77      	ldr	r2, [pc, #476]	; (80079bc <DMA_SetConfig+0x230>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d059      	beq.n	8007896 <DMA_SetConfig+0x10a>
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a76      	ldr	r2, [pc, #472]	; (80079c0 <DMA_SetConfig+0x234>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d054      	beq.n	8007896 <DMA_SetConfig+0x10a>
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a74      	ldr	r2, [pc, #464]	; (80079c4 <DMA_SetConfig+0x238>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d04f      	beq.n	8007896 <DMA_SetConfig+0x10a>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a73      	ldr	r2, [pc, #460]	; (80079c8 <DMA_SetConfig+0x23c>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d04a      	beq.n	8007896 <DMA_SetConfig+0x10a>
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a71      	ldr	r2, [pc, #452]	; (80079cc <DMA_SetConfig+0x240>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d045      	beq.n	8007896 <DMA_SetConfig+0x10a>
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a70      	ldr	r2, [pc, #448]	; (80079d0 <DMA_SetConfig+0x244>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d040      	beq.n	8007896 <DMA_SetConfig+0x10a>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a6e      	ldr	r2, [pc, #440]	; (80079d4 <DMA_SetConfig+0x248>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d03b      	beq.n	8007896 <DMA_SetConfig+0x10a>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a6d      	ldr	r2, [pc, #436]	; (80079d8 <DMA_SetConfig+0x24c>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d036      	beq.n	8007896 <DMA_SetConfig+0x10a>
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a6b      	ldr	r2, [pc, #428]	; (80079dc <DMA_SetConfig+0x250>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d031      	beq.n	8007896 <DMA_SetConfig+0x10a>
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a6a      	ldr	r2, [pc, #424]	; (80079e0 <DMA_SetConfig+0x254>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d02c      	beq.n	8007896 <DMA_SetConfig+0x10a>
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a68      	ldr	r2, [pc, #416]	; (80079e4 <DMA_SetConfig+0x258>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d027      	beq.n	8007896 <DMA_SetConfig+0x10a>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a67      	ldr	r2, [pc, #412]	; (80079e8 <DMA_SetConfig+0x25c>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d022      	beq.n	8007896 <DMA_SetConfig+0x10a>
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a65      	ldr	r2, [pc, #404]	; (80079ec <DMA_SetConfig+0x260>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d01d      	beq.n	8007896 <DMA_SetConfig+0x10a>
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a64      	ldr	r2, [pc, #400]	; (80079f0 <DMA_SetConfig+0x264>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d018      	beq.n	8007896 <DMA_SetConfig+0x10a>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a62      	ldr	r2, [pc, #392]	; (80079f4 <DMA_SetConfig+0x268>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d013      	beq.n	8007896 <DMA_SetConfig+0x10a>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a61      	ldr	r2, [pc, #388]	; (80079f8 <DMA_SetConfig+0x26c>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d00e      	beq.n	8007896 <DMA_SetConfig+0x10a>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a5f      	ldr	r2, [pc, #380]	; (80079fc <DMA_SetConfig+0x270>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d009      	beq.n	8007896 <DMA_SetConfig+0x10a>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a5e      	ldr	r2, [pc, #376]	; (8007a00 <DMA_SetConfig+0x274>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d004      	beq.n	8007896 <DMA_SetConfig+0x10a>
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a5c      	ldr	r2, [pc, #368]	; (8007a04 <DMA_SetConfig+0x278>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d101      	bne.n	800789a <DMA_SetConfig+0x10e>
 8007896:	2301      	movs	r3, #1
 8007898:	e000      	b.n	800789c <DMA_SetConfig+0x110>
 800789a:	2300      	movs	r3, #0
 800789c:	2b00      	cmp	r3, #0
 800789e:	d00d      	beq.n	80078bc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078a4:	68fa      	ldr	r2, [r7, #12]
 80078a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80078a8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d004      	beq.n	80078bc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80078ba:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a39      	ldr	r2, [pc, #228]	; (80079a8 <DMA_SetConfig+0x21c>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d04a      	beq.n	800795c <DMA_SetConfig+0x1d0>
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a38      	ldr	r2, [pc, #224]	; (80079ac <DMA_SetConfig+0x220>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d045      	beq.n	800795c <DMA_SetConfig+0x1d0>
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a36      	ldr	r2, [pc, #216]	; (80079b0 <DMA_SetConfig+0x224>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d040      	beq.n	800795c <DMA_SetConfig+0x1d0>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a35      	ldr	r2, [pc, #212]	; (80079b4 <DMA_SetConfig+0x228>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d03b      	beq.n	800795c <DMA_SetConfig+0x1d0>
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a33      	ldr	r2, [pc, #204]	; (80079b8 <DMA_SetConfig+0x22c>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d036      	beq.n	800795c <DMA_SetConfig+0x1d0>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a32      	ldr	r2, [pc, #200]	; (80079bc <DMA_SetConfig+0x230>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d031      	beq.n	800795c <DMA_SetConfig+0x1d0>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a30      	ldr	r2, [pc, #192]	; (80079c0 <DMA_SetConfig+0x234>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d02c      	beq.n	800795c <DMA_SetConfig+0x1d0>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a2f      	ldr	r2, [pc, #188]	; (80079c4 <DMA_SetConfig+0x238>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d027      	beq.n	800795c <DMA_SetConfig+0x1d0>
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a2d      	ldr	r2, [pc, #180]	; (80079c8 <DMA_SetConfig+0x23c>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d022      	beq.n	800795c <DMA_SetConfig+0x1d0>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a2c      	ldr	r2, [pc, #176]	; (80079cc <DMA_SetConfig+0x240>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d01d      	beq.n	800795c <DMA_SetConfig+0x1d0>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a2a      	ldr	r2, [pc, #168]	; (80079d0 <DMA_SetConfig+0x244>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d018      	beq.n	800795c <DMA_SetConfig+0x1d0>
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a29      	ldr	r2, [pc, #164]	; (80079d4 <DMA_SetConfig+0x248>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d013      	beq.n	800795c <DMA_SetConfig+0x1d0>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a27      	ldr	r2, [pc, #156]	; (80079d8 <DMA_SetConfig+0x24c>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d00e      	beq.n	800795c <DMA_SetConfig+0x1d0>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a26      	ldr	r2, [pc, #152]	; (80079dc <DMA_SetConfig+0x250>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d009      	beq.n	800795c <DMA_SetConfig+0x1d0>
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a24      	ldr	r2, [pc, #144]	; (80079e0 <DMA_SetConfig+0x254>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d004      	beq.n	800795c <DMA_SetConfig+0x1d0>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a23      	ldr	r2, [pc, #140]	; (80079e4 <DMA_SetConfig+0x258>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d101      	bne.n	8007960 <DMA_SetConfig+0x1d4>
 800795c:	2301      	movs	r3, #1
 800795e:	e000      	b.n	8007962 <DMA_SetConfig+0x1d6>
 8007960:	2300      	movs	r3, #0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d059      	beq.n	8007a1a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800796a:	f003 031f 	and.w	r3, r3, #31
 800796e:	223f      	movs	r2, #63	; 0x3f
 8007970:	409a      	lsls	r2, r3
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007984:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	683a      	ldr	r2, [r7, #0]
 800798c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	2b40      	cmp	r3, #64	; 0x40
 8007994:	d138      	bne.n	8007a08 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	68ba      	ldr	r2, [r7, #8]
 80079a4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80079a6:	e0ae      	b.n	8007b06 <DMA_SetConfig+0x37a>
 80079a8:	40020010 	.word	0x40020010
 80079ac:	40020028 	.word	0x40020028
 80079b0:	40020040 	.word	0x40020040
 80079b4:	40020058 	.word	0x40020058
 80079b8:	40020070 	.word	0x40020070
 80079bc:	40020088 	.word	0x40020088
 80079c0:	400200a0 	.word	0x400200a0
 80079c4:	400200b8 	.word	0x400200b8
 80079c8:	40020410 	.word	0x40020410
 80079cc:	40020428 	.word	0x40020428
 80079d0:	40020440 	.word	0x40020440
 80079d4:	40020458 	.word	0x40020458
 80079d8:	40020470 	.word	0x40020470
 80079dc:	40020488 	.word	0x40020488
 80079e0:	400204a0 	.word	0x400204a0
 80079e4:	400204b8 	.word	0x400204b8
 80079e8:	58025408 	.word	0x58025408
 80079ec:	5802541c 	.word	0x5802541c
 80079f0:	58025430 	.word	0x58025430
 80079f4:	58025444 	.word	0x58025444
 80079f8:	58025458 	.word	0x58025458
 80079fc:	5802546c 	.word	0x5802546c
 8007a00:	58025480 	.word	0x58025480
 8007a04:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68ba      	ldr	r2, [r7, #8]
 8007a0e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	60da      	str	r2, [r3, #12]
}
 8007a18:	e075      	b.n	8007b06 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a3d      	ldr	r2, [pc, #244]	; (8007b14 <DMA_SetConfig+0x388>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d04a      	beq.n	8007aba <DMA_SetConfig+0x32e>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a3b      	ldr	r2, [pc, #236]	; (8007b18 <DMA_SetConfig+0x38c>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d045      	beq.n	8007aba <DMA_SetConfig+0x32e>
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a3a      	ldr	r2, [pc, #232]	; (8007b1c <DMA_SetConfig+0x390>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d040      	beq.n	8007aba <DMA_SetConfig+0x32e>
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a38      	ldr	r2, [pc, #224]	; (8007b20 <DMA_SetConfig+0x394>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d03b      	beq.n	8007aba <DMA_SetConfig+0x32e>
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a37      	ldr	r2, [pc, #220]	; (8007b24 <DMA_SetConfig+0x398>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d036      	beq.n	8007aba <DMA_SetConfig+0x32e>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a35      	ldr	r2, [pc, #212]	; (8007b28 <DMA_SetConfig+0x39c>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d031      	beq.n	8007aba <DMA_SetConfig+0x32e>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a34      	ldr	r2, [pc, #208]	; (8007b2c <DMA_SetConfig+0x3a0>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d02c      	beq.n	8007aba <DMA_SetConfig+0x32e>
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a32      	ldr	r2, [pc, #200]	; (8007b30 <DMA_SetConfig+0x3a4>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d027      	beq.n	8007aba <DMA_SetConfig+0x32e>
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a31      	ldr	r2, [pc, #196]	; (8007b34 <DMA_SetConfig+0x3a8>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d022      	beq.n	8007aba <DMA_SetConfig+0x32e>
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a2f      	ldr	r2, [pc, #188]	; (8007b38 <DMA_SetConfig+0x3ac>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d01d      	beq.n	8007aba <DMA_SetConfig+0x32e>
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a2e      	ldr	r2, [pc, #184]	; (8007b3c <DMA_SetConfig+0x3b0>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d018      	beq.n	8007aba <DMA_SetConfig+0x32e>
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a2c      	ldr	r2, [pc, #176]	; (8007b40 <DMA_SetConfig+0x3b4>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d013      	beq.n	8007aba <DMA_SetConfig+0x32e>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a2b      	ldr	r2, [pc, #172]	; (8007b44 <DMA_SetConfig+0x3b8>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d00e      	beq.n	8007aba <DMA_SetConfig+0x32e>
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a29      	ldr	r2, [pc, #164]	; (8007b48 <DMA_SetConfig+0x3bc>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d009      	beq.n	8007aba <DMA_SetConfig+0x32e>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a28      	ldr	r2, [pc, #160]	; (8007b4c <DMA_SetConfig+0x3c0>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d004      	beq.n	8007aba <DMA_SetConfig+0x32e>
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a26      	ldr	r2, [pc, #152]	; (8007b50 <DMA_SetConfig+0x3c4>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d101      	bne.n	8007abe <DMA_SetConfig+0x332>
 8007aba:	2301      	movs	r3, #1
 8007abc:	e000      	b.n	8007ac0 <DMA_SetConfig+0x334>
 8007abe:	2300      	movs	r3, #0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d020      	beq.n	8007b06 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ac8:	f003 031f 	and.w	r3, r3, #31
 8007acc:	2201      	movs	r2, #1
 8007ace:	409a      	lsls	r2, r3
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	683a      	ldr	r2, [r7, #0]
 8007ada:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	2b40      	cmp	r3, #64	; 0x40
 8007ae2:	d108      	bne.n	8007af6 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	68ba      	ldr	r2, [r7, #8]
 8007af2:	60da      	str	r2, [r3, #12]
}
 8007af4:	e007      	b.n	8007b06 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	68ba      	ldr	r2, [r7, #8]
 8007afc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	60da      	str	r2, [r3, #12]
}
 8007b06:	bf00      	nop
 8007b08:	371c      	adds	r7, #28
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop
 8007b14:	48022c08 	.word	0x48022c08
 8007b18:	48022c1c 	.word	0x48022c1c
 8007b1c:	48022c30 	.word	0x48022c30
 8007b20:	48022c44 	.word	0x48022c44
 8007b24:	48022c58 	.word	0x48022c58
 8007b28:	48022c6c 	.word	0x48022c6c
 8007b2c:	48022c80 	.word	0x48022c80
 8007b30:	48022c94 	.word	0x48022c94
 8007b34:	58025408 	.word	0x58025408
 8007b38:	5802541c 	.word	0x5802541c
 8007b3c:	58025430 	.word	0x58025430
 8007b40:	58025444 	.word	0x58025444
 8007b44:	58025458 	.word	0x58025458
 8007b48:	5802546c 	.word	0x5802546c
 8007b4c:	58025480 	.word	0x58025480
 8007b50:	58025494 	.word	0x58025494

08007b54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b085      	sub	sp, #20
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a42      	ldr	r2, [pc, #264]	; (8007c6c <DMA_CalcBaseAndBitshift+0x118>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d04a      	beq.n	8007bfc <DMA_CalcBaseAndBitshift+0xa8>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a41      	ldr	r2, [pc, #260]	; (8007c70 <DMA_CalcBaseAndBitshift+0x11c>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d045      	beq.n	8007bfc <DMA_CalcBaseAndBitshift+0xa8>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a3f      	ldr	r2, [pc, #252]	; (8007c74 <DMA_CalcBaseAndBitshift+0x120>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d040      	beq.n	8007bfc <DMA_CalcBaseAndBitshift+0xa8>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a3e      	ldr	r2, [pc, #248]	; (8007c78 <DMA_CalcBaseAndBitshift+0x124>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d03b      	beq.n	8007bfc <DMA_CalcBaseAndBitshift+0xa8>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a3c      	ldr	r2, [pc, #240]	; (8007c7c <DMA_CalcBaseAndBitshift+0x128>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d036      	beq.n	8007bfc <DMA_CalcBaseAndBitshift+0xa8>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a3b      	ldr	r2, [pc, #236]	; (8007c80 <DMA_CalcBaseAndBitshift+0x12c>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d031      	beq.n	8007bfc <DMA_CalcBaseAndBitshift+0xa8>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a39      	ldr	r2, [pc, #228]	; (8007c84 <DMA_CalcBaseAndBitshift+0x130>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d02c      	beq.n	8007bfc <DMA_CalcBaseAndBitshift+0xa8>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a38      	ldr	r2, [pc, #224]	; (8007c88 <DMA_CalcBaseAndBitshift+0x134>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d027      	beq.n	8007bfc <DMA_CalcBaseAndBitshift+0xa8>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a36      	ldr	r2, [pc, #216]	; (8007c8c <DMA_CalcBaseAndBitshift+0x138>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d022      	beq.n	8007bfc <DMA_CalcBaseAndBitshift+0xa8>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a35      	ldr	r2, [pc, #212]	; (8007c90 <DMA_CalcBaseAndBitshift+0x13c>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d01d      	beq.n	8007bfc <DMA_CalcBaseAndBitshift+0xa8>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a33      	ldr	r2, [pc, #204]	; (8007c94 <DMA_CalcBaseAndBitshift+0x140>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d018      	beq.n	8007bfc <DMA_CalcBaseAndBitshift+0xa8>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a32      	ldr	r2, [pc, #200]	; (8007c98 <DMA_CalcBaseAndBitshift+0x144>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d013      	beq.n	8007bfc <DMA_CalcBaseAndBitshift+0xa8>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a30      	ldr	r2, [pc, #192]	; (8007c9c <DMA_CalcBaseAndBitshift+0x148>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d00e      	beq.n	8007bfc <DMA_CalcBaseAndBitshift+0xa8>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a2f      	ldr	r2, [pc, #188]	; (8007ca0 <DMA_CalcBaseAndBitshift+0x14c>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d009      	beq.n	8007bfc <DMA_CalcBaseAndBitshift+0xa8>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a2d      	ldr	r2, [pc, #180]	; (8007ca4 <DMA_CalcBaseAndBitshift+0x150>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d004      	beq.n	8007bfc <DMA_CalcBaseAndBitshift+0xa8>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a2c      	ldr	r2, [pc, #176]	; (8007ca8 <DMA_CalcBaseAndBitshift+0x154>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d101      	bne.n	8007c00 <DMA_CalcBaseAndBitshift+0xac>
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e000      	b.n	8007c02 <DMA_CalcBaseAndBitshift+0xae>
 8007c00:	2300      	movs	r3, #0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d024      	beq.n	8007c50 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	3b10      	subs	r3, #16
 8007c0e:	4a27      	ldr	r2, [pc, #156]	; (8007cac <DMA_CalcBaseAndBitshift+0x158>)
 8007c10:	fba2 2303 	umull	r2, r3, r2, r3
 8007c14:	091b      	lsrs	r3, r3, #4
 8007c16:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f003 0307 	and.w	r3, r3, #7
 8007c1e:	4a24      	ldr	r2, [pc, #144]	; (8007cb0 <DMA_CalcBaseAndBitshift+0x15c>)
 8007c20:	5cd3      	ldrb	r3, [r2, r3]
 8007c22:	461a      	mov	r2, r3
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2b03      	cmp	r3, #3
 8007c2c:	d908      	bls.n	8007c40 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	461a      	mov	r2, r3
 8007c34:	4b1f      	ldr	r3, [pc, #124]	; (8007cb4 <DMA_CalcBaseAndBitshift+0x160>)
 8007c36:	4013      	ands	r3, r2
 8007c38:	1d1a      	adds	r2, r3, #4
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	659a      	str	r2, [r3, #88]	; 0x58
 8007c3e:	e00d      	b.n	8007c5c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	461a      	mov	r2, r3
 8007c46:	4b1b      	ldr	r3, [pc, #108]	; (8007cb4 <DMA_CalcBaseAndBitshift+0x160>)
 8007c48:	4013      	ands	r3, r2
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	6593      	str	r3, [r2, #88]	; 0x58
 8007c4e:	e005      	b.n	8007c5c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3714      	adds	r7, #20
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr
 8007c6c:	40020010 	.word	0x40020010
 8007c70:	40020028 	.word	0x40020028
 8007c74:	40020040 	.word	0x40020040
 8007c78:	40020058 	.word	0x40020058
 8007c7c:	40020070 	.word	0x40020070
 8007c80:	40020088 	.word	0x40020088
 8007c84:	400200a0 	.word	0x400200a0
 8007c88:	400200b8 	.word	0x400200b8
 8007c8c:	40020410 	.word	0x40020410
 8007c90:	40020428 	.word	0x40020428
 8007c94:	40020440 	.word	0x40020440
 8007c98:	40020458 	.word	0x40020458
 8007c9c:	40020470 	.word	0x40020470
 8007ca0:	40020488 	.word	0x40020488
 8007ca4:	400204a0 	.word	0x400204a0
 8007ca8:	400204b8 	.word	0x400204b8
 8007cac:	aaaaaaab 	.word	0xaaaaaaab
 8007cb0:	08014ca8 	.word	0x08014ca8
 8007cb4:	fffffc00 	.word	0xfffffc00

08007cb8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d120      	bne.n	8007d0e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd0:	2b03      	cmp	r3, #3
 8007cd2:	d858      	bhi.n	8007d86 <DMA_CheckFifoParam+0xce>
 8007cd4:	a201      	add	r2, pc, #4	; (adr r2, 8007cdc <DMA_CheckFifoParam+0x24>)
 8007cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cda:	bf00      	nop
 8007cdc:	08007ced 	.word	0x08007ced
 8007ce0:	08007cff 	.word	0x08007cff
 8007ce4:	08007ced 	.word	0x08007ced
 8007ce8:	08007d87 	.word	0x08007d87
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d048      	beq.n	8007d8a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007cfc:	e045      	b.n	8007d8a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007d06:	d142      	bne.n	8007d8e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007d0c:	e03f      	b.n	8007d8e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	699b      	ldr	r3, [r3, #24]
 8007d12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d16:	d123      	bne.n	8007d60 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d1c:	2b03      	cmp	r3, #3
 8007d1e:	d838      	bhi.n	8007d92 <DMA_CheckFifoParam+0xda>
 8007d20:	a201      	add	r2, pc, #4	; (adr r2, 8007d28 <DMA_CheckFifoParam+0x70>)
 8007d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d26:	bf00      	nop
 8007d28:	08007d39 	.word	0x08007d39
 8007d2c:	08007d3f 	.word	0x08007d3f
 8007d30:	08007d39 	.word	0x08007d39
 8007d34:	08007d51 	.word	0x08007d51
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	73fb      	strb	r3, [r7, #15]
        break;
 8007d3c:	e030      	b.n	8007da0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d025      	beq.n	8007d96 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007d4e:	e022      	b.n	8007d96 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d54:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007d58:	d11f      	bne.n	8007d9a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007d5e:	e01c      	b.n	8007d9a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d64:	2b02      	cmp	r3, #2
 8007d66:	d902      	bls.n	8007d6e <DMA_CheckFifoParam+0xb6>
 8007d68:	2b03      	cmp	r3, #3
 8007d6a:	d003      	beq.n	8007d74 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007d6c:	e018      	b.n	8007da0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	73fb      	strb	r3, [r7, #15]
        break;
 8007d72:	e015      	b.n	8007da0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d00e      	beq.n	8007d9e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	73fb      	strb	r3, [r7, #15]
    break;
 8007d84:	e00b      	b.n	8007d9e <DMA_CheckFifoParam+0xe6>
        break;
 8007d86:	bf00      	nop
 8007d88:	e00a      	b.n	8007da0 <DMA_CheckFifoParam+0xe8>
        break;
 8007d8a:	bf00      	nop
 8007d8c:	e008      	b.n	8007da0 <DMA_CheckFifoParam+0xe8>
        break;
 8007d8e:	bf00      	nop
 8007d90:	e006      	b.n	8007da0 <DMA_CheckFifoParam+0xe8>
        break;
 8007d92:	bf00      	nop
 8007d94:	e004      	b.n	8007da0 <DMA_CheckFifoParam+0xe8>
        break;
 8007d96:	bf00      	nop
 8007d98:	e002      	b.n	8007da0 <DMA_CheckFifoParam+0xe8>
        break;
 8007d9a:	bf00      	nop
 8007d9c:	e000      	b.n	8007da0 <DMA_CheckFifoParam+0xe8>
    break;
 8007d9e:	bf00      	nop
    }
  }

  return status;
 8007da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3714      	adds	r7, #20
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop

08007db0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b085      	sub	sp, #20
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a38      	ldr	r2, [pc, #224]	; (8007ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d022      	beq.n	8007e0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a36      	ldr	r2, [pc, #216]	; (8007ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d01d      	beq.n	8007e0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a35      	ldr	r2, [pc, #212]	; (8007eac <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d018      	beq.n	8007e0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a33      	ldr	r2, [pc, #204]	; (8007eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d013      	beq.n	8007e0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a32      	ldr	r2, [pc, #200]	; (8007eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d00e      	beq.n	8007e0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a30      	ldr	r2, [pc, #192]	; (8007eb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d009      	beq.n	8007e0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a2f      	ldr	r2, [pc, #188]	; (8007ebc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d004      	beq.n	8007e0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a2d      	ldr	r2, [pc, #180]	; (8007ec0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d101      	bne.n	8007e12 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e000      	b.n	8007e14 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007e12:	2300      	movs	r3, #0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d01a      	beq.n	8007e4e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	3b08      	subs	r3, #8
 8007e20:	4a28      	ldr	r2, [pc, #160]	; (8007ec4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007e22:	fba2 2303 	umull	r2, r3, r2, r3
 8007e26:	091b      	lsrs	r3, r3, #4
 8007e28:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	4b26      	ldr	r3, [pc, #152]	; (8007ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007e2e:	4413      	add	r3, r2
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	461a      	mov	r2, r3
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4a24      	ldr	r2, [pc, #144]	; (8007ecc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007e3c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f003 031f 	and.w	r3, r3, #31
 8007e44:	2201      	movs	r2, #1
 8007e46:	409a      	lsls	r2, r3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007e4c:	e024      	b.n	8007e98 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	3b10      	subs	r3, #16
 8007e56:	4a1e      	ldr	r2, [pc, #120]	; (8007ed0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007e58:	fba2 2303 	umull	r2, r3, r2, r3
 8007e5c:	091b      	lsrs	r3, r3, #4
 8007e5e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	4a1c      	ldr	r2, [pc, #112]	; (8007ed4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d806      	bhi.n	8007e76 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	4a1b      	ldr	r2, [pc, #108]	; (8007ed8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d902      	bls.n	8007e76 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	3308      	adds	r3, #8
 8007e74:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	4b18      	ldr	r3, [pc, #96]	; (8007edc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007e7a:	4413      	add	r3, r2
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	461a      	mov	r2, r3
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	4a16      	ldr	r2, [pc, #88]	; (8007ee0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007e88:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f003 031f 	and.w	r3, r3, #31
 8007e90:	2201      	movs	r2, #1
 8007e92:	409a      	lsls	r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007e98:	bf00      	nop
 8007e9a:	3714      	adds	r7, #20
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr
 8007ea4:	58025408 	.word	0x58025408
 8007ea8:	5802541c 	.word	0x5802541c
 8007eac:	58025430 	.word	0x58025430
 8007eb0:	58025444 	.word	0x58025444
 8007eb4:	58025458 	.word	0x58025458
 8007eb8:	5802546c 	.word	0x5802546c
 8007ebc:	58025480 	.word	0x58025480
 8007ec0:	58025494 	.word	0x58025494
 8007ec4:	cccccccd 	.word	0xcccccccd
 8007ec8:	16009600 	.word	0x16009600
 8007ecc:	58025880 	.word	0x58025880
 8007ed0:	aaaaaaab 	.word	0xaaaaaaab
 8007ed4:	400204b8 	.word	0x400204b8
 8007ed8:	4002040f 	.word	0x4002040f
 8007edc:	10008200 	.word	0x10008200
 8007ee0:	40020880 	.word	0x40020880

08007ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d04a      	beq.n	8007f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2b08      	cmp	r3, #8
 8007efe:	d847      	bhi.n	8007f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a25      	ldr	r2, [pc, #148]	; (8007f9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d022      	beq.n	8007f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a24      	ldr	r2, [pc, #144]	; (8007fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d01d      	beq.n	8007f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a22      	ldr	r2, [pc, #136]	; (8007fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d018      	beq.n	8007f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a21      	ldr	r2, [pc, #132]	; (8007fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d013      	beq.n	8007f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a1f      	ldr	r2, [pc, #124]	; (8007fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d00e      	beq.n	8007f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a1e      	ldr	r2, [pc, #120]	; (8007fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d009      	beq.n	8007f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a1c      	ldr	r2, [pc, #112]	; (8007fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d004      	beq.n	8007f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a1b      	ldr	r2, [pc, #108]	; (8007fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d101      	bne.n	8007f54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007f50:	2301      	movs	r3, #1
 8007f52:	e000      	b.n	8007f56 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007f54:	2300      	movs	r3, #0
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00a      	beq.n	8007f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007f5a:	68fa      	ldr	r2, [r7, #12]
 8007f5c:	4b17      	ldr	r3, [pc, #92]	; (8007fbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007f5e:	4413      	add	r3, r2
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	461a      	mov	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	4a15      	ldr	r2, [pc, #84]	; (8007fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007f6c:	671a      	str	r2, [r3, #112]	; 0x70
 8007f6e:	e009      	b.n	8007f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007f70:	68fa      	ldr	r2, [r7, #12]
 8007f72:	4b14      	ldr	r3, [pc, #80]	; (8007fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007f74:	4413      	add	r3, r2
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	461a      	mov	r2, r3
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4a11      	ldr	r2, [pc, #68]	; (8007fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007f82:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	3b01      	subs	r3, #1
 8007f88:	2201      	movs	r2, #1
 8007f8a:	409a      	lsls	r2, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007f90:	bf00      	nop
 8007f92:	3714      	adds	r7, #20
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr
 8007f9c:	58025408 	.word	0x58025408
 8007fa0:	5802541c 	.word	0x5802541c
 8007fa4:	58025430 	.word	0x58025430
 8007fa8:	58025444 	.word	0x58025444
 8007fac:	58025458 	.word	0x58025458
 8007fb0:	5802546c 	.word	0x5802546c
 8007fb4:	58025480 	.word	0x58025480
 8007fb8:	58025494 	.word	0x58025494
 8007fbc:	1600963f 	.word	0x1600963f
 8007fc0:	58025940 	.word	0x58025940
 8007fc4:	1000823f 	.word	0x1000823f
 8007fc8:	40020940 	.word	0x40020940

08007fcc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d101      	bne.n	8007fde <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e04f      	b.n	800807e <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d106      	bne.n	8007ff8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f7f8 fd30 	bl	8000a58 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2202      	movs	r2, #2
 8007ffc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	4b20      	ldr	r3, [pc, #128]	; (8008088 <HAL_DMA2D_Init+0xbc>)
 8008008:	4013      	ands	r3, r2
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	6851      	ldr	r1, [r2, #4]
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	69d2      	ldr	r2, [r2, #28]
 8008012:	4311      	orrs	r1, r2
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	6812      	ldr	r2, [r2, #0]
 8008018:	430b      	orrs	r3, r1
 800801a:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008022:	4b1a      	ldr	r3, [pc, #104]	; (800808c <HAL_DMA2D_Init+0xc0>)
 8008024:	4013      	ands	r3, r2
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	6891      	ldr	r1, [r2, #8]
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	6992      	ldr	r2, [r2, #24]
 800802e:	4311      	orrs	r1, r2
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	6812      	ldr	r2, [r2, #0]
 8008034:	430b      	orrs	r3, r1
 8008036:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800803e:	4b14      	ldr	r3, [pc, #80]	; (8008090 <HAL_DMA2D_Init+0xc4>)
 8008040:	4013      	ands	r3, r2
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	68d1      	ldr	r1, [r2, #12]
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	6812      	ldr	r2, [r2, #0]
 800804a:	430b      	orrs	r3, r1
 800804c:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008054:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	051a      	lsls	r2, r3, #20
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	695b      	ldr	r3, [r3, #20]
 8008062:	055b      	lsls	r3, r3, #21
 8008064:	431a      	orrs	r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	430a      	orrs	r2, r1
 800806c:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3708      	adds	r7, #8
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	fff8ffbf 	.word	0xfff8ffbf
 800808c:	fffffef8 	.word	0xfffffef8
 8008090:	ffff0000 	.word	0xffff0000

08008094 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b086      	sub	sp, #24
 8008098:	af02      	add	r7, sp, #8
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]
 80080a0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d101      	bne.n	80080b0 <HAL_DMA2D_Start+0x1c>
 80080ac:	2302      	movs	r3, #2
 80080ae:	e018      	b.n	80080e2 <HAL_DMA2D_Start+0x4e>
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2202      	movs	r2, #2
 80080bc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80080c0:	69bb      	ldr	r3, [r7, #24]
 80080c2:	9300      	str	r3, [sp, #0]
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	68b9      	ldr	r1, [r7, #8]
 80080ca:	68f8      	ldr	r0, [r7, #12]
 80080cc:	f000 fab4 	bl	8008638 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f042 0201 	orr.w	r2, r2, #1
 80080de:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b086      	sub	sp, #24
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
 80080f2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80080f4:	2300      	movs	r3, #0
 80080f6:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f003 0301 	and.w	r3, r3, #1
 8008102:	2b00      	cmp	r3, #0
 8008104:	d056      	beq.n	80081b4 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8008106:	f7fc fb81 	bl	800480c <HAL_GetTick>
 800810a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800810c:	e04b      	b.n	80081a6 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800811c:	2b00      	cmp	r3, #0
 800811e:	d023      	beq.n	8008168 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f003 0320 	and.w	r3, r3, #32
 8008126:	2b00      	cmp	r3, #0
 8008128:	d005      	beq.n	8008136 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800812e:	f043 0202 	orr.w	r2, r3, #2
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f003 0301 	and.w	r3, r3, #1
 800813c:	2b00      	cmp	r3, #0
 800813e:	d005      	beq.n	800814c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008144:	f043 0201 	orr.w	r2, r3, #1
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2221      	movs	r2, #33	; 0x21
 8008152:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2204      	movs	r2, #4
 8008158:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	e0a5      	b.n	80082b4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800816e:	d01a      	beq.n	80081a6 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008170:	f7fc fb4c 	bl	800480c <HAL_GetTick>
 8008174:	4602      	mov	r2, r0
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	1ad3      	subs	r3, r2, r3
 800817a:	683a      	ldr	r2, [r7, #0]
 800817c:	429a      	cmp	r2, r3
 800817e:	d302      	bcc.n	8008186 <HAL_DMA2D_PollForTransfer+0x9c>
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d10f      	bne.n	80081a6 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800818a:	f043 0220 	orr.w	r2, r3, #32
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2203      	movs	r2, #3
 8008196:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 80081a2:	2303      	movs	r3, #3
 80081a4:	e086      	b.n	80082b4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	f003 0302 	and.w	r3, r3, #2
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d0ac      	beq.n	800810e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	69db      	ldr	r3, [r3, #28]
 80081ba:	f003 0320 	and.w	r3, r3, #32
 80081be:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c6:	f003 0320 	and.w	r3, r3, #32
 80081ca:	693a      	ldr	r2, [r7, #16]
 80081cc:	4313      	orrs	r3, r2
 80081ce:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d061      	beq.n	800829a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80081d6:	f7fc fb19 	bl	800480c <HAL_GetTick>
 80081da:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80081dc:	e056      	b.n	800828c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d02e      	beq.n	800824e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f003 0308 	and.w	r3, r3, #8
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d005      	beq.n	8008206 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081fe:	f043 0204 	orr.w	r2, r3, #4
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f003 0320 	and.w	r3, r3, #32
 800820c:	2b00      	cmp	r3, #0
 800820e:	d005      	beq.n	800821c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008214:	f043 0202 	orr.w	r2, r3, #2
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f003 0301 	and.w	r3, r3, #1
 8008222:	2b00      	cmp	r3, #0
 8008224:	d005      	beq.n	8008232 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800822a:	f043 0201 	orr.w	r2, r3, #1
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2229      	movs	r2, #41	; 0x29
 8008238:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2204      	movs	r2, #4
 800823e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	e032      	b.n	80082b4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008254:	d01a      	beq.n	800828c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008256:	f7fc fad9 	bl	800480c <HAL_GetTick>
 800825a:	4602      	mov	r2, r0
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	1ad3      	subs	r3, r2, r3
 8008260:	683a      	ldr	r2, [r7, #0]
 8008262:	429a      	cmp	r2, r3
 8008264:	d302      	bcc.n	800826c <HAL_DMA2D_PollForTransfer+0x182>
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d10f      	bne.n	800828c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008270:	f043 0220 	orr.w	r2, r3, #32
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2203      	movs	r2, #3
 800827c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8008288:	2303      	movs	r3, #3
 800828a:	e013      	b.n	80082b4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	f003 0310 	and.w	r3, r3, #16
 8008296:	2b00      	cmp	r3, #0
 8008298:	d0a1      	beq.n	80081de <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2212      	movs	r2, #18
 80082a0:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2201      	movs	r2, #1
 80082a6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3718      	adds	r7, #24
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f003 0301 	and.w	r3, r3, #1
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d026      	beq.n	800832c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d021      	beq.n	800832c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80082f6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082fc:	f043 0201 	orr.w	r2, r3, #1
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2201      	movs	r2, #1
 800830a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2204      	movs	r2, #4
 8008310:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008320:	2b00      	cmp	r3, #0
 8008322:	d003      	beq.n	800832c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f003 0320 	and.w	r3, r3, #32
 8008332:	2b00      	cmp	r3, #0
 8008334:	d026      	beq.n	8008384 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800833c:	2b00      	cmp	r3, #0
 800833e:	d021      	beq.n	8008384 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800834e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	2220      	movs	r2, #32
 8008356:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800835c:	f043 0202 	orr.w	r2, r3, #2
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2204      	movs	r2, #4
 8008368:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008378:	2b00      	cmp	r3, #0
 800837a:	d003      	beq.n	8008384 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f003 0308 	and.w	r3, r3, #8
 800838a:	2b00      	cmp	r3, #0
 800838c:	d026      	beq.n	80083dc <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008394:	2b00      	cmp	r3, #0
 8008396:	d021      	beq.n	80083dc <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083a6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	2208      	movs	r2, #8
 80083ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083b4:	f043 0204 	orr.w	r2, r3, #4
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2204      	movs	r2, #4
 80083c0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d003      	beq.n	80083dc <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f003 0304 	and.w	r3, r3, #4
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d013      	beq.n	800840e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d00e      	beq.n	800840e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083fe:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2204      	movs	r2, #4
 8008406:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 f853 	bl	80084b4 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f003 0302 	and.w	r3, r3, #2
 8008414:	2b00      	cmp	r3, #0
 8008416:	d024      	beq.n	8008462 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800841e:	2b00      	cmp	r3, #0
 8008420:	d01f      	beq.n	8008462 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008430:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2202      	movs	r2, #2
 8008438:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2201      	movs	r2, #1
 8008446:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a1b      	ldr	r3, [r3, #32]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d003      	beq.n	8008462 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6a1b      	ldr	r3, [r3, #32]
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f003 0310 	and.w	r3, r3, #16
 8008468:	2b00      	cmp	r3, #0
 800846a:	d01f      	beq.n	80084ac <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008472:	2b00      	cmp	r3, #0
 8008474:	d01a      	beq.n	80084ac <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008484:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2210      	movs	r2, #16
 800848c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2201      	movs	r2, #1
 800849a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 f80e 	bl	80084c8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80084ac:	bf00      	nop
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80084bc:	bf00      	nop
 80084be:	370c      	adds	r7, #12
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80084d0:	bf00      	nop
 80084d2:	370c      	adds	r7, #12
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80084dc:	b480      	push	{r7}
 80084de:	b087      	sub	sp, #28
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d101      	bne.n	8008500 <HAL_DMA2D_ConfigLayer+0x24>
 80084fc:	2302      	movs	r3, #2
 80084fe:	e092      	b.n	8008626 <HAL_DMA2D_ConfigLayer+0x14a>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2201      	movs	r2, #1
 8008504:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2202      	movs	r2, #2
 800850c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8008510:	683a      	ldr	r2, [r7, #0]
 8008512:	4613      	mov	r3, r2
 8008514:	00db      	lsls	r3, r3, #3
 8008516:	1a9b      	subs	r3, r3, r2
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	3328      	adds	r3, #40	; 0x28
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	4413      	add	r3, r2
 8008520:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	685a      	ldr	r2, [r3, #4]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	041b      	lsls	r3, r3, #16
 800852c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008534:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	695b      	ldr	r3, [r3, #20]
 800853a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800853c:	4313      	orrs	r3, r2
 800853e:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8008540:	4b3c      	ldr	r3, [pc, #240]	; (8008634 <HAL_DMA2D_ConfigLayer+0x158>)
 8008542:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	2b0a      	cmp	r3, #10
 800854a:	d003      	beq.n	8008554 <HAL_DMA2D_ConfigLayer+0x78>
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	2b09      	cmp	r3, #9
 8008552:	d107      	bne.n	8008564 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800855c:	693a      	ldr	r2, [r7, #16]
 800855e:	4313      	orrs	r3, r2
 8008560:	613b      	str	r3, [r7, #16]
 8008562:	e005      	b.n	8008570 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	061b      	lsls	r3, r3, #24
 800856a:	693a      	ldr	r2, [r7, #16]
 800856c:	4313      	orrs	r3, r2
 800856e:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d120      	bne.n	80085b8 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	43db      	mvns	r3, r3
 8008580:	ea02 0103 	and.w	r1, r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	693a      	ldr	r2, [r7, #16]
 800858a:	430a      	orrs	r2, r1
 800858c:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	6812      	ldr	r2, [r2, #0]
 8008596:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	2b0a      	cmp	r3, #10
 800859e:	d003      	beq.n	80085a8 <HAL_DMA2D_ConfigLayer+0xcc>
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	2b09      	cmp	r3, #9
 80085a6:	d135      	bne.n	8008614 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	68da      	ldr	r2, [r3, #12]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80085b4:	629a      	str	r2, [r3, #40]	; 0x28
 80085b6:	e02d      	b.n	8008614 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	2b0b      	cmp	r3, #11
 80085be:	d109      	bne.n	80085d4 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	699b      	ldr	r3, [r3, #24]
 80085c4:	049b      	lsls	r3, r3, #18
 80085c6:	693a      	ldr	r2, [r7, #16]
 80085c8:	4313      	orrs	r3, r2
 80085ca:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80085d2:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	69da      	ldr	r2, [r3, #28]
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	43db      	mvns	r3, r3
 80085de:	ea02 0103 	and.w	r1, r2, r3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	693a      	ldr	r2, [r7, #16]
 80085e8:	430a      	orrs	r2, r1
 80085ea:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	68fa      	ldr	r2, [r7, #12]
 80085f2:	6812      	ldr	r2, [r2, #0]
 80085f4:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	2b0a      	cmp	r3, #10
 80085fc:	d003      	beq.n	8008606 <HAL_DMA2D_ConfigLayer+0x12a>
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	2b09      	cmp	r3, #9
 8008604:	d106      	bne.n	8008614 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	68da      	ldr	r2, [r3, #12]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8008612:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2201      	movs	r2, #1
 8008618:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8008624:	2300      	movs	r3, #0
}
 8008626:	4618      	mov	r0, r3
 8008628:	371c      	adds	r7, #28
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr
 8008632:	bf00      	nop
 8008634:	ff33000f 	.word	0xff33000f

08008638 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8008638:	b480      	push	{r7}
 800863a:	b08b      	sub	sp, #44	; 0x2c
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	607a      	str	r2, [r7, #4]
 8008644:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800864c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	041a      	lsls	r2, r3, #16
 8008654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008656:	431a      	orrs	r2, r3
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	430a      	orrs	r2, r1
 800865e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008670:	d174      	bne.n	800875c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008678:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008680:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008688:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	b2db      	uxtb	r3, r3
 800868e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d108      	bne.n	80086aa <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8008698:	69ba      	ldr	r2, [r7, #24]
 800869a:	69fb      	ldr	r3, [r7, #28]
 800869c:	431a      	orrs	r2, r3
 800869e:	6a3b      	ldr	r3, [r7, #32]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	697a      	ldr	r2, [r7, #20]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	627b      	str	r3, [r7, #36]	; 0x24
 80086a8:	e053      	b.n	8008752 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d106      	bne.n	80086c0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80086b2:	69ba      	ldr	r2, [r7, #24]
 80086b4:	69fb      	ldr	r3, [r7, #28]
 80086b6:	4313      	orrs	r3, r2
 80086b8:	697a      	ldr	r2, [r7, #20]
 80086ba:	4313      	orrs	r3, r2
 80086bc:	627b      	str	r3, [r7, #36]	; 0x24
 80086be:	e048      	b.n	8008752 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	2b02      	cmp	r3, #2
 80086c6:	d111      	bne.n	80086ec <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	0cdb      	lsrs	r3, r3, #19
 80086cc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	0a9b      	lsrs	r3, r3, #10
 80086d2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	08db      	lsrs	r3, r3, #3
 80086d8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80086da:	69bb      	ldr	r3, [r7, #24]
 80086dc:	015a      	lsls	r2, r3, #5
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	02db      	lsls	r3, r3, #11
 80086e2:	4313      	orrs	r3, r2
 80086e4:	697a      	ldr	r2, [r7, #20]
 80086e6:	4313      	orrs	r3, r2
 80086e8:	627b      	str	r3, [r7, #36]	; 0x24
 80086ea:	e032      	b.n	8008752 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	2b03      	cmp	r3, #3
 80086f2:	d117      	bne.n	8008724 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80086f4:	6a3b      	ldr	r3, [r7, #32]
 80086f6:	0fdb      	lsrs	r3, r3, #31
 80086f8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80086fa:	69fb      	ldr	r3, [r7, #28]
 80086fc:	0cdb      	lsrs	r3, r3, #19
 80086fe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	0adb      	lsrs	r3, r3, #11
 8008704:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	08db      	lsrs	r3, r3, #3
 800870a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800870c:	69bb      	ldr	r3, [r7, #24]
 800870e:	015a      	lsls	r2, r3, #5
 8008710:	69fb      	ldr	r3, [r7, #28]
 8008712:	029b      	lsls	r3, r3, #10
 8008714:	431a      	orrs	r2, r3
 8008716:	6a3b      	ldr	r3, [r7, #32]
 8008718:	03db      	lsls	r3, r3, #15
 800871a:	4313      	orrs	r3, r2
 800871c:	697a      	ldr	r2, [r7, #20]
 800871e:	4313      	orrs	r3, r2
 8008720:	627b      	str	r3, [r7, #36]	; 0x24
 8008722:	e016      	b.n	8008752 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8008724:	6a3b      	ldr	r3, [r7, #32]
 8008726:	0f1b      	lsrs	r3, r3, #28
 8008728:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800872a:	69fb      	ldr	r3, [r7, #28]
 800872c:	0d1b      	lsrs	r3, r3, #20
 800872e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	0b1b      	lsrs	r3, r3, #12
 8008734:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	091b      	lsrs	r3, r3, #4
 800873a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800873c:	69bb      	ldr	r3, [r7, #24]
 800873e:	011a      	lsls	r2, r3, #4
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	021b      	lsls	r3, r3, #8
 8008744:	431a      	orrs	r2, r3
 8008746:	6a3b      	ldr	r3, [r7, #32]
 8008748:	031b      	lsls	r3, r3, #12
 800874a:	4313      	orrs	r3, r2
 800874c:	697a      	ldr	r2, [r7, #20]
 800874e:	4313      	orrs	r3, r2
 8008750:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008758:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800875a:	e00d      	b.n	8008778 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008764:	d104      	bne.n	8008770 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	68ba      	ldr	r2, [r7, #8]
 800876c:	615a      	str	r2, [r3, #20]
}
 800876e:	e003      	b.n	8008778 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	68ba      	ldr	r2, [r7, #8]
 8008776:	60da      	str	r2, [r3, #12]
}
 8008778:	bf00      	nop
 800877a:	372c      	adds	r7, #44	; 0x2c
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b086      	sub	sp, #24
 8008788:	af00      	add	r7, sp, #0
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	607a      	str	r2, [r7, #4]
 8008790:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008792:	2300      	movs	r3, #0
 8008794:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	2b80      	cmp	r3, #128	; 0x80
 800879c:	d105      	bne.n	80087aa <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80087a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	e315      	b.n	8008dd6 <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d101      	bne.n	80087b8 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 80087b4:	2302      	movs	r3, #2
 80087b6:	e30e      	b.n	8008dd6 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2201      	movs	r2, #1
 80087bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	f040 82fd 	bne.w	8008dc8 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2202      	movs	r2, #2
 80087d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2200      	movs	r2, #0
 80087da:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a82      	ldr	r2, [pc, #520]	; (80089ec <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d04a      	beq.n	800887c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a81      	ldr	r2, [pc, #516]	; (80089f0 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d045      	beq.n	800887c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a7f      	ldr	r2, [pc, #508]	; (80089f4 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d040      	beq.n	800887c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a7e      	ldr	r2, [pc, #504]	; (80089f8 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d03b      	beq.n	800887c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a7c      	ldr	r2, [pc, #496]	; (80089fc <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d036      	beq.n	800887c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a7b      	ldr	r2, [pc, #492]	; (8008a00 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d031      	beq.n	800887c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a79      	ldr	r2, [pc, #484]	; (8008a04 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d02c      	beq.n	800887c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a78      	ldr	r2, [pc, #480]	; (8008a08 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d027      	beq.n	800887c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a76      	ldr	r2, [pc, #472]	; (8008a0c <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d022      	beq.n	800887c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a75      	ldr	r2, [pc, #468]	; (8008a10 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d01d      	beq.n	800887c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a73      	ldr	r2, [pc, #460]	; (8008a14 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d018      	beq.n	800887c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a72      	ldr	r2, [pc, #456]	; (8008a18 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d013      	beq.n	800887c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a70      	ldr	r2, [pc, #448]	; (8008a1c <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d00e      	beq.n	800887c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a6f      	ldr	r2, [pc, #444]	; (8008a20 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d009      	beq.n	800887c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a6d      	ldr	r2, [pc, #436]	; (8008a24 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d004      	beq.n	800887c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a6c      	ldr	r2, [pc, #432]	; (8008a28 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d101      	bne.n	8008880 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 800887c:	2301      	movs	r3, #1
 800887e:	e000      	b.n	8008882 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8008880:	2300      	movs	r3, #0
 8008882:	2b00      	cmp	r3, #0
 8008884:	d018      	beq.n	80088b8 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008894:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	683a      	ldr	r2, [r7, #0]
 800889c:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088a2:	3308      	adds	r3, #8
 80088a4:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088aa:	f003 031f 	and.w	r3, r3, #31
 80088ae:	223f      	movs	r2, #63	; 0x3f
 80088b0:	409a      	lsls	r2, r3
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	601a      	str	r2, [r3, #0]
 80088b6:	e018      	b.n	80088ea <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	6819      	ldr	r1, [r3, #0]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	f248 0320 	movw	r3, #32800	; 0x8020
 80088c6:	430b      	orrs	r3, r1
 80088c8:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	683a      	ldr	r2, [r7, #0]
 80088d0:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088d6:	3304      	adds	r3, #4
 80088d8:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088de:	f003 031f 	and.w	r3, r3, #31
 80088e2:	2201      	movs	r2, #1
 80088e4:	409a      	lsls	r2, r3
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80088ea:	6a3b      	ldr	r3, [r7, #32]
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	68b9      	ldr	r1, [r7, #8]
 80088f0:	68f8      	ldr	r0, [r7, #12]
 80088f2:	f000 fb41 	bl	8008f78 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a3c      	ldr	r2, [pc, #240]	; (80089ec <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d072      	beq.n	80089e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a3a      	ldr	r2, [pc, #232]	; (80089f0 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d06d      	beq.n	80089e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a39      	ldr	r2, [pc, #228]	; (80089f4 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d068      	beq.n	80089e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a37      	ldr	r2, [pc, #220]	; (80089f8 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d063      	beq.n	80089e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a36      	ldr	r2, [pc, #216]	; (80089fc <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d05e      	beq.n	80089e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a34      	ldr	r2, [pc, #208]	; (8008a00 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d059      	beq.n	80089e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a33      	ldr	r2, [pc, #204]	; (8008a04 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d054      	beq.n	80089e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a31      	ldr	r2, [pc, #196]	; (8008a08 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d04f      	beq.n	80089e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a30      	ldr	r2, [pc, #192]	; (8008a0c <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d04a      	beq.n	80089e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a2e      	ldr	r2, [pc, #184]	; (8008a10 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d045      	beq.n	80089e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a2d      	ldr	r2, [pc, #180]	; (8008a14 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d040      	beq.n	80089e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a2b      	ldr	r2, [pc, #172]	; (8008a18 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d03b      	beq.n	80089e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a2a      	ldr	r2, [pc, #168]	; (8008a1c <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d036      	beq.n	80089e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a28      	ldr	r2, [pc, #160]	; (8008a20 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d031      	beq.n	80089e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a27      	ldr	r2, [pc, #156]	; (8008a24 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d02c      	beq.n	80089e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a25      	ldr	r2, [pc, #148]	; (8008a28 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d027      	beq.n	80089e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a24      	ldr	r2, [pc, #144]	; (8008a2c <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d022      	beq.n	80089e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a22      	ldr	r2, [pc, #136]	; (8008a30 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d01d      	beq.n	80089e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a21      	ldr	r2, [pc, #132]	; (8008a34 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d018      	beq.n	80089e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a1f      	ldr	r2, [pc, #124]	; (8008a38 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d013      	beq.n	80089e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a1e      	ldr	r2, [pc, #120]	; (8008a3c <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d00e      	beq.n	80089e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a1c      	ldr	r2, [pc, #112]	; (8008a40 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d009      	beq.n	80089e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a1b      	ldr	r2, [pc, #108]	; (8008a44 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d004      	beq.n	80089e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a19      	ldr	r2, [pc, #100]	; (8008a48 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d132      	bne.n	8008a4c <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 80089e6:	2301      	movs	r3, #1
 80089e8:	e031      	b.n	8008a4e <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 80089ea:	bf00      	nop
 80089ec:	40020010 	.word	0x40020010
 80089f0:	40020028 	.word	0x40020028
 80089f4:	40020040 	.word	0x40020040
 80089f8:	40020058 	.word	0x40020058
 80089fc:	40020070 	.word	0x40020070
 8008a00:	40020088 	.word	0x40020088
 8008a04:	400200a0 	.word	0x400200a0
 8008a08:	400200b8 	.word	0x400200b8
 8008a0c:	40020410 	.word	0x40020410
 8008a10:	40020428 	.word	0x40020428
 8008a14:	40020440 	.word	0x40020440
 8008a18:	40020458 	.word	0x40020458
 8008a1c:	40020470 	.word	0x40020470
 8008a20:	40020488 	.word	0x40020488
 8008a24:	400204a0 	.word	0x400204a0
 8008a28:	400204b8 	.word	0x400204b8
 8008a2c:	58025408 	.word	0x58025408
 8008a30:	5802541c 	.word	0x5802541c
 8008a34:	58025430 	.word	0x58025430
 8008a38:	58025444 	.word	0x58025444
 8008a3c:	58025458 	.word	0x58025458
 8008a40:	5802546c 	.word	0x5802546c
 8008a44:	58025480 	.word	0x58025480
 8008a48:	58025494 	.word	0x58025494
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d00d      	beq.n	8008a6e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a56:	68fa      	ldr	r2, [r7, #12]
 8008a58:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008a5a:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d004      	beq.n	8008a6e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a68:	68fa      	ldr	r2, [r7, #12]
 8008a6a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008a6c:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a3b      	ldr	r2, [pc, #236]	; (8008b60 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d04a      	beq.n	8008b0e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a39      	ldr	r2, [pc, #228]	; (8008b64 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d045      	beq.n	8008b0e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a38      	ldr	r2, [pc, #224]	; (8008b68 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d040      	beq.n	8008b0e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a36      	ldr	r2, [pc, #216]	; (8008b6c <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d03b      	beq.n	8008b0e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a35      	ldr	r2, [pc, #212]	; (8008b70 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d036      	beq.n	8008b0e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a33      	ldr	r2, [pc, #204]	; (8008b74 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d031      	beq.n	8008b0e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a32      	ldr	r2, [pc, #200]	; (8008b78 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d02c      	beq.n	8008b0e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a30      	ldr	r2, [pc, #192]	; (8008b7c <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d027      	beq.n	8008b0e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a2f      	ldr	r2, [pc, #188]	; (8008b80 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d022      	beq.n	8008b0e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a2d      	ldr	r2, [pc, #180]	; (8008b84 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d01d      	beq.n	8008b0e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a2c      	ldr	r2, [pc, #176]	; (8008b88 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d018      	beq.n	8008b0e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a2a      	ldr	r2, [pc, #168]	; (8008b8c <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d013      	beq.n	8008b0e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a29      	ldr	r2, [pc, #164]	; (8008b90 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d00e      	beq.n	8008b0e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a27      	ldr	r2, [pc, #156]	; (8008b94 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d009      	beq.n	8008b0e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a26      	ldr	r2, [pc, #152]	; (8008b98 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d004      	beq.n	8008b0e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a24      	ldr	r2, [pc, #144]	; (8008b9c <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d101      	bne.n	8008b12 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8008b0e:	2301      	movs	r3, #1
 8008b10:	e000      	b.n	8008b14 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8008b12:	2300      	movs	r3, #0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d043      	beq.n	8008ba0 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f023 021e 	bic.w	r2, r3, #30
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f042 0216 	orr.w	r2, r2, #22
 8008b2a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	695a      	ldr	r2, [r3, #20]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008b3a:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d103      	bne.n	8008b4c <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d043      	beq.n	8008bd4 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f042 0208 	orr.w	r2, r2, #8
 8008b5a:	601a      	str	r2, [r3, #0]
 8008b5c:	e03a      	b.n	8008bd4 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8008b5e:	bf00      	nop
 8008b60:	40020010 	.word	0x40020010
 8008b64:	40020028 	.word	0x40020028
 8008b68:	40020040 	.word	0x40020040
 8008b6c:	40020058 	.word	0x40020058
 8008b70:	40020070 	.word	0x40020070
 8008b74:	40020088 	.word	0x40020088
 8008b78:	400200a0 	.word	0x400200a0
 8008b7c:	400200b8 	.word	0x400200b8
 8008b80:	40020410 	.word	0x40020410
 8008b84:	40020428 	.word	0x40020428
 8008b88:	40020440 	.word	0x40020440
 8008b8c:	40020458 	.word	0x40020458
 8008b90:	40020470 	.word	0x40020470
 8008b94:	40020488 	.word	0x40020488
 8008b98:	400204a0 	.word	0x400204a0
 8008b9c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f023 020e 	bic.w	r2, r3, #14
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f042 020a 	orr.w	r2, r2, #10
 8008bb2:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d103      	bne.n	8008bc4 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d007      	beq.n	8008bd4 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f042 0204 	orr.w	r2, r2, #4
 8008bd2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a81      	ldr	r2, [pc, #516]	; (8008de0 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d072      	beq.n	8008cc4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a80      	ldr	r2, [pc, #512]	; (8008de4 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d06d      	beq.n	8008cc4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a7e      	ldr	r2, [pc, #504]	; (8008de8 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d068      	beq.n	8008cc4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a7d      	ldr	r2, [pc, #500]	; (8008dec <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d063      	beq.n	8008cc4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a7b      	ldr	r2, [pc, #492]	; (8008df0 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d05e      	beq.n	8008cc4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a7a      	ldr	r2, [pc, #488]	; (8008df4 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d059      	beq.n	8008cc4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a78      	ldr	r2, [pc, #480]	; (8008df8 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d054      	beq.n	8008cc4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a77      	ldr	r2, [pc, #476]	; (8008dfc <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d04f      	beq.n	8008cc4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a75      	ldr	r2, [pc, #468]	; (8008e00 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d04a      	beq.n	8008cc4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4a74      	ldr	r2, [pc, #464]	; (8008e04 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d045      	beq.n	8008cc4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a72      	ldr	r2, [pc, #456]	; (8008e08 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d040      	beq.n	8008cc4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4a71      	ldr	r2, [pc, #452]	; (8008e0c <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d03b      	beq.n	8008cc4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a6f      	ldr	r2, [pc, #444]	; (8008e10 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d036      	beq.n	8008cc4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a6e      	ldr	r2, [pc, #440]	; (8008e14 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d031      	beq.n	8008cc4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a6c      	ldr	r2, [pc, #432]	; (8008e18 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d02c      	beq.n	8008cc4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a6b      	ldr	r2, [pc, #428]	; (8008e1c <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d027      	beq.n	8008cc4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a69      	ldr	r2, [pc, #420]	; (8008e20 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d022      	beq.n	8008cc4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a68      	ldr	r2, [pc, #416]	; (8008e24 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d01d      	beq.n	8008cc4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a66      	ldr	r2, [pc, #408]	; (8008e28 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d018      	beq.n	8008cc4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a65      	ldr	r2, [pc, #404]	; (8008e2c <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d013      	beq.n	8008cc4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a63      	ldr	r2, [pc, #396]	; (8008e30 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d00e      	beq.n	8008cc4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a62      	ldr	r2, [pc, #392]	; (8008e34 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d009      	beq.n	8008cc4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a60      	ldr	r2, [pc, #384]	; (8008e38 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d004      	beq.n	8008cc4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a5f      	ldr	r2, [pc, #380]	; (8008e3c <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d101      	bne.n	8008cc8 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	e000      	b.n	8008cca <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8008cc8:	2300      	movs	r3, #0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d01a      	beq.n	8008d04 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d007      	beq.n	8008cec <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ce6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008cea:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d007      	beq.n	8008d04 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d02:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a35      	ldr	r2, [pc, #212]	; (8008de0 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d04a      	beq.n	8008da4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a34      	ldr	r2, [pc, #208]	; (8008de4 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d045      	beq.n	8008da4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a32      	ldr	r2, [pc, #200]	; (8008de8 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d040      	beq.n	8008da4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a31      	ldr	r2, [pc, #196]	; (8008dec <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d03b      	beq.n	8008da4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a2f      	ldr	r2, [pc, #188]	; (8008df0 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d036      	beq.n	8008da4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a2e      	ldr	r2, [pc, #184]	; (8008df4 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d031      	beq.n	8008da4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a2c      	ldr	r2, [pc, #176]	; (8008df8 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d02c      	beq.n	8008da4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a2b      	ldr	r2, [pc, #172]	; (8008dfc <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d027      	beq.n	8008da4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a29      	ldr	r2, [pc, #164]	; (8008e00 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d022      	beq.n	8008da4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a28      	ldr	r2, [pc, #160]	; (8008e04 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d01d      	beq.n	8008da4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a26      	ldr	r2, [pc, #152]	; (8008e08 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d018      	beq.n	8008da4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a25      	ldr	r2, [pc, #148]	; (8008e0c <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d013      	beq.n	8008da4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a23      	ldr	r2, [pc, #140]	; (8008e10 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d00e      	beq.n	8008da4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a22      	ldr	r2, [pc, #136]	; (8008e14 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d009      	beq.n	8008da4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a20      	ldr	r2, [pc, #128]	; (8008e18 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d004      	beq.n	8008da4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a1f      	ldr	r2, [pc, #124]	; (8008e1c <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d108      	bne.n	8008db6 <HAL_DMAEx_MultiBufferStart_IT+0x632>
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	681a      	ldr	r2, [r3, #0]
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f042 0201 	orr.w	r2, r2, #1
 8008db2:	601a      	str	r2, [r3, #0]
 8008db4:	e00e      	b.n	8008dd4 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f042 0201 	orr.w	r2, r2, #1
 8008dc4:	601a      	str	r2, [r3, #0]
 8008dc6:	e005      	b.n	8008dd4 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008dce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3718      	adds	r7, #24
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	40020010 	.word	0x40020010
 8008de4:	40020028 	.word	0x40020028
 8008de8:	40020040 	.word	0x40020040
 8008dec:	40020058 	.word	0x40020058
 8008df0:	40020070 	.word	0x40020070
 8008df4:	40020088 	.word	0x40020088
 8008df8:	400200a0 	.word	0x400200a0
 8008dfc:	400200b8 	.word	0x400200b8
 8008e00:	40020410 	.word	0x40020410
 8008e04:	40020428 	.word	0x40020428
 8008e08:	40020440 	.word	0x40020440
 8008e0c:	40020458 	.word	0x40020458
 8008e10:	40020470 	.word	0x40020470
 8008e14:	40020488 	.word	0x40020488
 8008e18:	400204a0 	.word	0x400204a0
 8008e1c:	400204b8 	.word	0x400204b8
 8008e20:	58025408 	.word	0x58025408
 8008e24:	5802541c 	.word	0x5802541c
 8008e28:	58025430 	.word	0x58025430
 8008e2c:	58025444 	.word	0x58025444
 8008e30:	58025458 	.word	0x58025458
 8008e34:	5802546c 	.word	0x5802546c
 8008e38:	58025480 	.word	0x58025480
 8008e3c:	58025494 	.word	0x58025494

08008e40 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b085      	sub	sp, #20
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	4613      	mov	r3, r2
 8008e4c:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a39      	ldr	r2, [pc, #228]	; (8008f38 <HAL_DMAEx_ChangeMemory+0xf8>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d04a      	beq.n	8008eee <HAL_DMAEx_ChangeMemory+0xae>
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a37      	ldr	r2, [pc, #220]	; (8008f3c <HAL_DMAEx_ChangeMemory+0xfc>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d045      	beq.n	8008eee <HAL_DMAEx_ChangeMemory+0xae>
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a36      	ldr	r2, [pc, #216]	; (8008f40 <HAL_DMAEx_ChangeMemory+0x100>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d040      	beq.n	8008eee <HAL_DMAEx_ChangeMemory+0xae>
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a34      	ldr	r2, [pc, #208]	; (8008f44 <HAL_DMAEx_ChangeMemory+0x104>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d03b      	beq.n	8008eee <HAL_DMAEx_ChangeMemory+0xae>
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a33      	ldr	r2, [pc, #204]	; (8008f48 <HAL_DMAEx_ChangeMemory+0x108>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d036      	beq.n	8008eee <HAL_DMAEx_ChangeMemory+0xae>
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a31      	ldr	r2, [pc, #196]	; (8008f4c <HAL_DMAEx_ChangeMemory+0x10c>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d031      	beq.n	8008eee <HAL_DMAEx_ChangeMemory+0xae>
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a30      	ldr	r2, [pc, #192]	; (8008f50 <HAL_DMAEx_ChangeMemory+0x110>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d02c      	beq.n	8008eee <HAL_DMAEx_ChangeMemory+0xae>
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a2e      	ldr	r2, [pc, #184]	; (8008f54 <HAL_DMAEx_ChangeMemory+0x114>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d027      	beq.n	8008eee <HAL_DMAEx_ChangeMemory+0xae>
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a2d      	ldr	r2, [pc, #180]	; (8008f58 <HAL_DMAEx_ChangeMemory+0x118>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d022      	beq.n	8008eee <HAL_DMAEx_ChangeMemory+0xae>
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a2b      	ldr	r2, [pc, #172]	; (8008f5c <HAL_DMAEx_ChangeMemory+0x11c>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d01d      	beq.n	8008eee <HAL_DMAEx_ChangeMemory+0xae>
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a2a      	ldr	r2, [pc, #168]	; (8008f60 <HAL_DMAEx_ChangeMemory+0x120>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d018      	beq.n	8008eee <HAL_DMAEx_ChangeMemory+0xae>
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a28      	ldr	r2, [pc, #160]	; (8008f64 <HAL_DMAEx_ChangeMemory+0x124>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d013      	beq.n	8008eee <HAL_DMAEx_ChangeMemory+0xae>
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a27      	ldr	r2, [pc, #156]	; (8008f68 <HAL_DMAEx_ChangeMemory+0x128>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d00e      	beq.n	8008eee <HAL_DMAEx_ChangeMemory+0xae>
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a25      	ldr	r2, [pc, #148]	; (8008f6c <HAL_DMAEx_ChangeMemory+0x12c>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d009      	beq.n	8008eee <HAL_DMAEx_ChangeMemory+0xae>
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a24      	ldr	r2, [pc, #144]	; (8008f70 <HAL_DMAEx_ChangeMemory+0x130>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d004      	beq.n	8008eee <HAL_DMAEx_ChangeMemory+0xae>
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a22      	ldr	r2, [pc, #136]	; (8008f74 <HAL_DMAEx_ChangeMemory+0x134>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d101      	bne.n	8008ef2 <HAL_DMAEx_ChangeMemory+0xb2>
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e000      	b.n	8008ef4 <HAL_DMAEx_ChangeMemory+0xb4>
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00c      	beq.n	8008f12 <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 8008ef8:	79fb      	ldrb	r3, [r7, #7]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d104      	bne.n	8008f08 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	68ba      	ldr	r2, [r7, #8]
 8008f04:	60da      	str	r2, [r3, #12]
 8008f06:	e010      	b.n	8008f2a <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	68ba      	ldr	r2, [r7, #8]
 8008f0e:	611a      	str	r2, [r3, #16]
 8008f10:	e00b      	b.n	8008f2a <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 8008f12:	79fb      	ldrb	r3, [r7, #7]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d104      	bne.n	8008f22 <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	68ba      	ldr	r2, [r7, #8]
 8008f1e:	60da      	str	r2, [r3, #12]
 8008f20:	e003      	b.n	8008f2a <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	68ba      	ldr	r2, [r7, #8]
 8008f28:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3714      	adds	r7, #20
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr
 8008f38:	40020010 	.word	0x40020010
 8008f3c:	40020028 	.word	0x40020028
 8008f40:	40020040 	.word	0x40020040
 8008f44:	40020058 	.word	0x40020058
 8008f48:	40020070 	.word	0x40020070
 8008f4c:	40020088 	.word	0x40020088
 8008f50:	400200a0 	.word	0x400200a0
 8008f54:	400200b8 	.word	0x400200b8
 8008f58:	40020410 	.word	0x40020410
 8008f5c:	40020428 	.word	0x40020428
 8008f60:	40020440 	.word	0x40020440
 8008f64:	40020458 	.word	0x40020458
 8008f68:	40020470 	.word	0x40020470
 8008f6c:	40020488 	.word	0x40020488
 8008f70:	400204a0 	.word	0x400204a0
 8008f74:	400204b8 	.word	0x400204b8

08008f78 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b085      	sub	sp, #20
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	607a      	str	r2, [r7, #4]
 8008f84:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a46      	ldr	r2, [pc, #280]	; (80090a4 <DMA_MultiBufferSetConfig+0x12c>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d04a      	beq.n	8009026 <DMA_MultiBufferSetConfig+0xae>
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a44      	ldr	r2, [pc, #272]	; (80090a8 <DMA_MultiBufferSetConfig+0x130>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d045      	beq.n	8009026 <DMA_MultiBufferSetConfig+0xae>
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a43      	ldr	r2, [pc, #268]	; (80090ac <DMA_MultiBufferSetConfig+0x134>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d040      	beq.n	8009026 <DMA_MultiBufferSetConfig+0xae>
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a41      	ldr	r2, [pc, #260]	; (80090b0 <DMA_MultiBufferSetConfig+0x138>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d03b      	beq.n	8009026 <DMA_MultiBufferSetConfig+0xae>
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a40      	ldr	r2, [pc, #256]	; (80090b4 <DMA_MultiBufferSetConfig+0x13c>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d036      	beq.n	8009026 <DMA_MultiBufferSetConfig+0xae>
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a3e      	ldr	r2, [pc, #248]	; (80090b8 <DMA_MultiBufferSetConfig+0x140>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d031      	beq.n	8009026 <DMA_MultiBufferSetConfig+0xae>
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a3d      	ldr	r2, [pc, #244]	; (80090bc <DMA_MultiBufferSetConfig+0x144>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d02c      	beq.n	8009026 <DMA_MultiBufferSetConfig+0xae>
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a3b      	ldr	r2, [pc, #236]	; (80090c0 <DMA_MultiBufferSetConfig+0x148>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d027      	beq.n	8009026 <DMA_MultiBufferSetConfig+0xae>
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a3a      	ldr	r2, [pc, #232]	; (80090c4 <DMA_MultiBufferSetConfig+0x14c>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d022      	beq.n	8009026 <DMA_MultiBufferSetConfig+0xae>
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a38      	ldr	r2, [pc, #224]	; (80090c8 <DMA_MultiBufferSetConfig+0x150>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d01d      	beq.n	8009026 <DMA_MultiBufferSetConfig+0xae>
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a37      	ldr	r2, [pc, #220]	; (80090cc <DMA_MultiBufferSetConfig+0x154>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d018      	beq.n	8009026 <DMA_MultiBufferSetConfig+0xae>
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a35      	ldr	r2, [pc, #212]	; (80090d0 <DMA_MultiBufferSetConfig+0x158>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d013      	beq.n	8009026 <DMA_MultiBufferSetConfig+0xae>
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a34      	ldr	r2, [pc, #208]	; (80090d4 <DMA_MultiBufferSetConfig+0x15c>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d00e      	beq.n	8009026 <DMA_MultiBufferSetConfig+0xae>
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a32      	ldr	r2, [pc, #200]	; (80090d8 <DMA_MultiBufferSetConfig+0x160>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d009      	beq.n	8009026 <DMA_MultiBufferSetConfig+0xae>
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a31      	ldr	r2, [pc, #196]	; (80090dc <DMA_MultiBufferSetConfig+0x164>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d004      	beq.n	8009026 <DMA_MultiBufferSetConfig+0xae>
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a2f      	ldr	r2, [pc, #188]	; (80090e0 <DMA_MultiBufferSetConfig+0x168>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d101      	bne.n	800902a <DMA_MultiBufferSetConfig+0xb2>
 8009026:	2301      	movs	r3, #1
 8009028:	e000      	b.n	800902c <DMA_MultiBufferSetConfig+0xb4>
 800902a:	2300      	movs	r3, #0
 800902c:	2b00      	cmp	r3, #0
 800902e:	d019      	beq.n	8009064 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	683a      	ldr	r2, [r7, #0]
 8009036:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	689b      	ldr	r3, [r3, #8]
 800903c:	2b40      	cmp	r3, #64	; 0x40
 800903e:	d108      	bne.n	8009052 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	68ba      	ldr	r2, [r7, #8]
 800904e:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8009050:	e021      	b.n	8009096 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	68ba      	ldr	r2, [r7, #8]
 8009058:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	687a      	ldr	r2, [r7, #4]
 8009060:	60da      	str	r2, [r3, #12]
}
 8009062:	e018      	b.n	8009096 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	683a      	ldr	r2, [r7, #0]
 800906a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	2b40      	cmp	r3, #64	; 0x40
 8009072:	d108      	bne.n	8009086 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	68ba      	ldr	r2, [r7, #8]
 8009082:	60da      	str	r2, [r3, #12]
}
 8009084:	e007      	b.n	8009096 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	68ba      	ldr	r2, [r7, #8]
 800908c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	60da      	str	r2, [r3, #12]
}
 8009096:	bf00      	nop
 8009098:	3714      	adds	r7, #20
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	40020010 	.word	0x40020010
 80090a8:	40020028 	.word	0x40020028
 80090ac:	40020040 	.word	0x40020040
 80090b0:	40020058 	.word	0x40020058
 80090b4:	40020070 	.word	0x40020070
 80090b8:	40020088 	.word	0x40020088
 80090bc:	400200a0 	.word	0x400200a0
 80090c0:	400200b8 	.word	0x400200b8
 80090c4:	40020410 	.word	0x40020410
 80090c8:	40020428 	.word	0x40020428
 80090cc:	40020440 	.word	0x40020440
 80090d0:	40020458 	.word	0x40020458
 80090d4:	40020470 	.word	0x40020470
 80090d8:	40020488 	.word	0x40020488
 80090dc:	400204a0 	.word	0x400204a0
 80090e0:	400204b8 	.word	0x400204b8

080090e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b089      	sub	sp, #36	; 0x24
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80090ee:	2300      	movs	r3, #0
 80090f0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80090f2:	4b89      	ldr	r3, [pc, #548]	; (8009318 <HAL_GPIO_Init+0x234>)
 80090f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80090f6:	e194      	b.n	8009422 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	2101      	movs	r1, #1
 80090fe:	69fb      	ldr	r3, [r7, #28]
 8009100:	fa01 f303 	lsl.w	r3, r1, r3
 8009104:	4013      	ands	r3, r2
 8009106:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	2b00      	cmp	r3, #0
 800910c:	f000 8186 	beq.w	800941c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	f003 0303 	and.w	r3, r3, #3
 8009118:	2b01      	cmp	r3, #1
 800911a:	d005      	beq.n	8009128 <HAL_GPIO_Init+0x44>
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	f003 0303 	and.w	r3, r3, #3
 8009124:	2b02      	cmp	r3, #2
 8009126:	d130      	bne.n	800918a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	689b      	ldr	r3, [r3, #8]
 800912c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	005b      	lsls	r3, r3, #1
 8009132:	2203      	movs	r2, #3
 8009134:	fa02 f303 	lsl.w	r3, r2, r3
 8009138:	43db      	mvns	r3, r3
 800913a:	69ba      	ldr	r2, [r7, #24]
 800913c:	4013      	ands	r3, r2
 800913e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	68da      	ldr	r2, [r3, #12]
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	005b      	lsls	r3, r3, #1
 8009148:	fa02 f303 	lsl.w	r3, r2, r3
 800914c:	69ba      	ldr	r2, [r7, #24]
 800914e:	4313      	orrs	r3, r2
 8009150:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	69ba      	ldr	r2, [r7, #24]
 8009156:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800915e:	2201      	movs	r2, #1
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	fa02 f303 	lsl.w	r3, r2, r3
 8009166:	43db      	mvns	r3, r3
 8009168:	69ba      	ldr	r2, [r7, #24]
 800916a:	4013      	ands	r3, r2
 800916c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	091b      	lsrs	r3, r3, #4
 8009174:	f003 0201 	and.w	r2, r3, #1
 8009178:	69fb      	ldr	r3, [r7, #28]
 800917a:	fa02 f303 	lsl.w	r3, r2, r3
 800917e:	69ba      	ldr	r2, [r7, #24]
 8009180:	4313      	orrs	r3, r2
 8009182:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	69ba      	ldr	r2, [r7, #24]
 8009188:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	f003 0303 	and.w	r3, r3, #3
 8009192:	2b03      	cmp	r3, #3
 8009194:	d017      	beq.n	80091c6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	68db      	ldr	r3, [r3, #12]
 800919a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	005b      	lsls	r3, r3, #1
 80091a0:	2203      	movs	r2, #3
 80091a2:	fa02 f303 	lsl.w	r3, r2, r3
 80091a6:	43db      	mvns	r3, r3
 80091a8:	69ba      	ldr	r2, [r7, #24]
 80091aa:	4013      	ands	r3, r2
 80091ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	689a      	ldr	r2, [r3, #8]
 80091b2:	69fb      	ldr	r3, [r7, #28]
 80091b4:	005b      	lsls	r3, r3, #1
 80091b6:	fa02 f303 	lsl.w	r3, r2, r3
 80091ba:	69ba      	ldr	r2, [r7, #24]
 80091bc:	4313      	orrs	r3, r2
 80091be:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	69ba      	ldr	r2, [r7, #24]
 80091c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	f003 0303 	and.w	r3, r3, #3
 80091ce:	2b02      	cmp	r3, #2
 80091d0:	d123      	bne.n	800921a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	08da      	lsrs	r2, r3, #3
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	3208      	adds	r2, #8
 80091da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80091e0:	69fb      	ldr	r3, [r7, #28]
 80091e2:	f003 0307 	and.w	r3, r3, #7
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	220f      	movs	r2, #15
 80091ea:	fa02 f303 	lsl.w	r3, r2, r3
 80091ee:	43db      	mvns	r3, r3
 80091f0:	69ba      	ldr	r2, [r7, #24]
 80091f2:	4013      	ands	r3, r2
 80091f4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	691a      	ldr	r2, [r3, #16]
 80091fa:	69fb      	ldr	r3, [r7, #28]
 80091fc:	f003 0307 	and.w	r3, r3, #7
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	fa02 f303 	lsl.w	r3, r2, r3
 8009206:	69ba      	ldr	r2, [r7, #24]
 8009208:	4313      	orrs	r3, r2
 800920a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800920c:	69fb      	ldr	r3, [r7, #28]
 800920e:	08da      	lsrs	r2, r3, #3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	3208      	adds	r2, #8
 8009214:	69b9      	ldr	r1, [r7, #24]
 8009216:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009220:	69fb      	ldr	r3, [r7, #28]
 8009222:	005b      	lsls	r3, r3, #1
 8009224:	2203      	movs	r2, #3
 8009226:	fa02 f303 	lsl.w	r3, r2, r3
 800922a:	43db      	mvns	r3, r3
 800922c:	69ba      	ldr	r2, [r7, #24]
 800922e:	4013      	ands	r3, r2
 8009230:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	f003 0203 	and.w	r2, r3, #3
 800923a:	69fb      	ldr	r3, [r7, #28]
 800923c:	005b      	lsls	r3, r3, #1
 800923e:	fa02 f303 	lsl.w	r3, r2, r3
 8009242:	69ba      	ldr	r2, [r7, #24]
 8009244:	4313      	orrs	r3, r2
 8009246:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	69ba      	ldr	r2, [r7, #24]
 800924c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009256:	2b00      	cmp	r3, #0
 8009258:	f000 80e0 	beq.w	800941c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800925c:	4b2f      	ldr	r3, [pc, #188]	; (800931c <HAL_GPIO_Init+0x238>)
 800925e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8009262:	4a2e      	ldr	r2, [pc, #184]	; (800931c <HAL_GPIO_Init+0x238>)
 8009264:	f043 0302 	orr.w	r3, r3, #2
 8009268:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800926c:	4b2b      	ldr	r3, [pc, #172]	; (800931c <HAL_GPIO_Init+0x238>)
 800926e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8009272:	f003 0302 	and.w	r3, r3, #2
 8009276:	60fb      	str	r3, [r7, #12]
 8009278:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800927a:	4a29      	ldr	r2, [pc, #164]	; (8009320 <HAL_GPIO_Init+0x23c>)
 800927c:	69fb      	ldr	r3, [r7, #28]
 800927e:	089b      	lsrs	r3, r3, #2
 8009280:	3302      	adds	r3, #2
 8009282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009286:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009288:	69fb      	ldr	r3, [r7, #28]
 800928a:	f003 0303 	and.w	r3, r3, #3
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	220f      	movs	r2, #15
 8009292:	fa02 f303 	lsl.w	r3, r2, r3
 8009296:	43db      	mvns	r3, r3
 8009298:	69ba      	ldr	r2, [r7, #24]
 800929a:	4013      	ands	r3, r2
 800929c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4a20      	ldr	r2, [pc, #128]	; (8009324 <HAL_GPIO_Init+0x240>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d052      	beq.n	800934c <HAL_GPIO_Init+0x268>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	4a1f      	ldr	r2, [pc, #124]	; (8009328 <HAL_GPIO_Init+0x244>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d031      	beq.n	8009312 <HAL_GPIO_Init+0x22e>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	4a1e      	ldr	r2, [pc, #120]	; (800932c <HAL_GPIO_Init+0x248>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d02b      	beq.n	800930e <HAL_GPIO_Init+0x22a>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	4a1d      	ldr	r2, [pc, #116]	; (8009330 <HAL_GPIO_Init+0x24c>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d025      	beq.n	800930a <HAL_GPIO_Init+0x226>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	4a1c      	ldr	r2, [pc, #112]	; (8009334 <HAL_GPIO_Init+0x250>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d01f      	beq.n	8009306 <HAL_GPIO_Init+0x222>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	4a1b      	ldr	r2, [pc, #108]	; (8009338 <HAL_GPIO_Init+0x254>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d019      	beq.n	8009302 <HAL_GPIO_Init+0x21e>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	4a1a      	ldr	r2, [pc, #104]	; (800933c <HAL_GPIO_Init+0x258>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d013      	beq.n	80092fe <HAL_GPIO_Init+0x21a>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	4a19      	ldr	r2, [pc, #100]	; (8009340 <HAL_GPIO_Init+0x25c>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d00d      	beq.n	80092fa <HAL_GPIO_Init+0x216>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	4a18      	ldr	r2, [pc, #96]	; (8009344 <HAL_GPIO_Init+0x260>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d007      	beq.n	80092f6 <HAL_GPIO_Init+0x212>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	4a17      	ldr	r2, [pc, #92]	; (8009348 <HAL_GPIO_Init+0x264>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d101      	bne.n	80092f2 <HAL_GPIO_Init+0x20e>
 80092ee:	2309      	movs	r3, #9
 80092f0:	e02d      	b.n	800934e <HAL_GPIO_Init+0x26a>
 80092f2:	230a      	movs	r3, #10
 80092f4:	e02b      	b.n	800934e <HAL_GPIO_Init+0x26a>
 80092f6:	2308      	movs	r3, #8
 80092f8:	e029      	b.n	800934e <HAL_GPIO_Init+0x26a>
 80092fa:	2307      	movs	r3, #7
 80092fc:	e027      	b.n	800934e <HAL_GPIO_Init+0x26a>
 80092fe:	2306      	movs	r3, #6
 8009300:	e025      	b.n	800934e <HAL_GPIO_Init+0x26a>
 8009302:	2305      	movs	r3, #5
 8009304:	e023      	b.n	800934e <HAL_GPIO_Init+0x26a>
 8009306:	2304      	movs	r3, #4
 8009308:	e021      	b.n	800934e <HAL_GPIO_Init+0x26a>
 800930a:	2303      	movs	r3, #3
 800930c:	e01f      	b.n	800934e <HAL_GPIO_Init+0x26a>
 800930e:	2302      	movs	r3, #2
 8009310:	e01d      	b.n	800934e <HAL_GPIO_Init+0x26a>
 8009312:	2301      	movs	r3, #1
 8009314:	e01b      	b.n	800934e <HAL_GPIO_Init+0x26a>
 8009316:	bf00      	nop
 8009318:	58000080 	.word	0x58000080
 800931c:	58024400 	.word	0x58024400
 8009320:	58000400 	.word	0x58000400
 8009324:	58020000 	.word	0x58020000
 8009328:	58020400 	.word	0x58020400
 800932c:	58020800 	.word	0x58020800
 8009330:	58020c00 	.word	0x58020c00
 8009334:	58021000 	.word	0x58021000
 8009338:	58021400 	.word	0x58021400
 800933c:	58021800 	.word	0x58021800
 8009340:	58021c00 	.word	0x58021c00
 8009344:	58022000 	.word	0x58022000
 8009348:	58022400 	.word	0x58022400
 800934c:	2300      	movs	r3, #0
 800934e:	69fa      	ldr	r2, [r7, #28]
 8009350:	f002 0203 	and.w	r2, r2, #3
 8009354:	0092      	lsls	r2, r2, #2
 8009356:	4093      	lsls	r3, r2
 8009358:	69ba      	ldr	r2, [r7, #24]
 800935a:	4313      	orrs	r3, r2
 800935c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800935e:	4938      	ldr	r1, [pc, #224]	; (8009440 <HAL_GPIO_Init+0x35c>)
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	089b      	lsrs	r3, r3, #2
 8009364:	3302      	adds	r3, #2
 8009366:	69ba      	ldr	r2, [r7, #24]
 8009368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800936c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	43db      	mvns	r3, r3
 8009378:	69ba      	ldr	r2, [r7, #24]
 800937a:	4013      	ands	r3, r2
 800937c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009386:	2b00      	cmp	r3, #0
 8009388:	d003      	beq.n	8009392 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800938a:	69ba      	ldr	r2, [r7, #24]
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	4313      	orrs	r3, r2
 8009390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009392:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009396:	69bb      	ldr	r3, [r7, #24]
 8009398:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800939a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	43db      	mvns	r3, r3
 80093a6:	69ba      	ldr	r2, [r7, #24]
 80093a8:	4013      	ands	r3, r2
 80093aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d003      	beq.n	80093c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80093b8:	69ba      	ldr	r2, [r7, #24]
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	4313      	orrs	r3, r2
 80093be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80093c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80093c4:	69bb      	ldr	r3, [r7, #24]
 80093c6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	43db      	mvns	r3, r3
 80093d2:	69ba      	ldr	r2, [r7, #24]
 80093d4:	4013      	ands	r3, r2
 80093d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d003      	beq.n	80093ec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80093e4:	69ba      	ldr	r2, [r7, #24]
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	4313      	orrs	r3, r2
 80093ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	69ba      	ldr	r2, [r7, #24]
 80093f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	43db      	mvns	r3, r3
 80093fc:	69ba      	ldr	r2, [r7, #24]
 80093fe:	4013      	ands	r3, r2
 8009400:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800940a:	2b00      	cmp	r3, #0
 800940c:	d003      	beq.n	8009416 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800940e:	69ba      	ldr	r2, [r7, #24]
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	4313      	orrs	r3, r2
 8009414:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	69ba      	ldr	r2, [r7, #24]
 800941a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	3301      	adds	r3, #1
 8009420:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	69fb      	ldr	r3, [r7, #28]
 8009428:	fa22 f303 	lsr.w	r3, r2, r3
 800942c:	2b00      	cmp	r3, #0
 800942e:	f47f ae63 	bne.w	80090f8 <HAL_GPIO_Init+0x14>
  }
}
 8009432:	bf00      	nop
 8009434:	bf00      	nop
 8009436:	3724      	adds	r7, #36	; 0x24
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr
 8009440:	58000400 	.word	0x58000400

08009444 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009444:	b480      	push	{r7}
 8009446:	b087      	sub	sp, #28
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800944e:	2300      	movs	r3, #0
 8009450:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009452:	4b75      	ldr	r3, [pc, #468]	; (8009628 <HAL_GPIO_DeInit+0x1e4>)
 8009454:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8009456:	e0d9      	b.n	800960c <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8009458:	2201      	movs	r2, #1
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	fa02 f303 	lsl.w	r3, r2, r3
 8009460:	683a      	ldr	r2, [r7, #0]
 8009462:	4013      	ands	r3, r2
 8009464:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2b00      	cmp	r3, #0
 800946a:	f000 80cc 	beq.w	8009606 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800946e:	4a6f      	ldr	r2, [pc, #444]	; (800962c <HAL_GPIO_DeInit+0x1e8>)
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	089b      	lsrs	r3, r3, #2
 8009474:	3302      	adds	r3, #2
 8009476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800947a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	f003 0303 	and.w	r3, r3, #3
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	220f      	movs	r2, #15
 8009486:	fa02 f303 	lsl.w	r3, r2, r3
 800948a:	68ba      	ldr	r2, [r7, #8]
 800948c:	4013      	ands	r3, r2
 800948e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	4a67      	ldr	r2, [pc, #412]	; (8009630 <HAL_GPIO_DeInit+0x1ec>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d037      	beq.n	8009508 <HAL_GPIO_DeInit+0xc4>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4a66      	ldr	r2, [pc, #408]	; (8009634 <HAL_GPIO_DeInit+0x1f0>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d031      	beq.n	8009504 <HAL_GPIO_DeInit+0xc0>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	4a65      	ldr	r2, [pc, #404]	; (8009638 <HAL_GPIO_DeInit+0x1f4>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d02b      	beq.n	8009500 <HAL_GPIO_DeInit+0xbc>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	4a64      	ldr	r2, [pc, #400]	; (800963c <HAL_GPIO_DeInit+0x1f8>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d025      	beq.n	80094fc <HAL_GPIO_DeInit+0xb8>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	4a63      	ldr	r2, [pc, #396]	; (8009640 <HAL_GPIO_DeInit+0x1fc>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d01f      	beq.n	80094f8 <HAL_GPIO_DeInit+0xb4>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	4a62      	ldr	r2, [pc, #392]	; (8009644 <HAL_GPIO_DeInit+0x200>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d019      	beq.n	80094f4 <HAL_GPIO_DeInit+0xb0>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	4a61      	ldr	r2, [pc, #388]	; (8009648 <HAL_GPIO_DeInit+0x204>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d013      	beq.n	80094f0 <HAL_GPIO_DeInit+0xac>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	4a60      	ldr	r2, [pc, #384]	; (800964c <HAL_GPIO_DeInit+0x208>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d00d      	beq.n	80094ec <HAL_GPIO_DeInit+0xa8>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	4a5f      	ldr	r2, [pc, #380]	; (8009650 <HAL_GPIO_DeInit+0x20c>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d007      	beq.n	80094e8 <HAL_GPIO_DeInit+0xa4>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	4a5e      	ldr	r2, [pc, #376]	; (8009654 <HAL_GPIO_DeInit+0x210>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d101      	bne.n	80094e4 <HAL_GPIO_DeInit+0xa0>
 80094e0:	2309      	movs	r3, #9
 80094e2:	e012      	b.n	800950a <HAL_GPIO_DeInit+0xc6>
 80094e4:	230a      	movs	r3, #10
 80094e6:	e010      	b.n	800950a <HAL_GPIO_DeInit+0xc6>
 80094e8:	2308      	movs	r3, #8
 80094ea:	e00e      	b.n	800950a <HAL_GPIO_DeInit+0xc6>
 80094ec:	2307      	movs	r3, #7
 80094ee:	e00c      	b.n	800950a <HAL_GPIO_DeInit+0xc6>
 80094f0:	2306      	movs	r3, #6
 80094f2:	e00a      	b.n	800950a <HAL_GPIO_DeInit+0xc6>
 80094f4:	2305      	movs	r3, #5
 80094f6:	e008      	b.n	800950a <HAL_GPIO_DeInit+0xc6>
 80094f8:	2304      	movs	r3, #4
 80094fa:	e006      	b.n	800950a <HAL_GPIO_DeInit+0xc6>
 80094fc:	2303      	movs	r3, #3
 80094fe:	e004      	b.n	800950a <HAL_GPIO_DeInit+0xc6>
 8009500:	2302      	movs	r3, #2
 8009502:	e002      	b.n	800950a <HAL_GPIO_DeInit+0xc6>
 8009504:	2301      	movs	r3, #1
 8009506:	e000      	b.n	800950a <HAL_GPIO_DeInit+0xc6>
 8009508:	2300      	movs	r3, #0
 800950a:	697a      	ldr	r2, [r7, #20]
 800950c:	f002 0203 	and.w	r2, r2, #3
 8009510:	0092      	lsls	r2, r2, #2
 8009512:	4093      	lsls	r3, r2
 8009514:	68ba      	ldr	r2, [r7, #8]
 8009516:	429a      	cmp	r2, r3
 8009518:	d136      	bne.n	8009588 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	43db      	mvns	r3, r3
 8009522:	401a      	ands	r2, r3
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	685a      	ldr	r2, [r3, #4]
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	43db      	mvns	r3, r3
 8009530:	401a      	ands	r2, r3
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8009536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800953a:	685a      	ldr	r2, [r3, #4]
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	43db      	mvns	r3, r3
 8009540:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009544:	4013      	ands	r3, r2
 8009546:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8009548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	43db      	mvns	r3, r3
 8009552:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009556:	4013      	ands	r3, r2
 8009558:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	f003 0303 	and.w	r3, r3, #3
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	220f      	movs	r2, #15
 8009564:	fa02 f303 	lsl.w	r3, r2, r3
 8009568:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800956a:	4a30      	ldr	r2, [pc, #192]	; (800962c <HAL_GPIO_DeInit+0x1e8>)
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	089b      	lsrs	r3, r3, #2
 8009570:	3302      	adds	r3, #2
 8009572:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	43da      	mvns	r2, r3
 800957a:	482c      	ldr	r0, [pc, #176]	; (800962c <HAL_GPIO_DeInit+0x1e8>)
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	089b      	lsrs	r3, r3, #2
 8009580:	400a      	ands	r2, r1
 8009582:	3302      	adds	r3, #2
 8009584:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681a      	ldr	r2, [r3, #0]
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	005b      	lsls	r3, r3, #1
 8009590:	2103      	movs	r1, #3
 8009592:	fa01 f303 	lsl.w	r3, r1, r3
 8009596:	431a      	orrs	r2, r3
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	08da      	lsrs	r2, r3, #3
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	3208      	adds	r2, #8
 80095a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	f003 0307 	and.w	r3, r3, #7
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	220f      	movs	r2, #15
 80095b2:	fa02 f303 	lsl.w	r3, r2, r3
 80095b6:	43db      	mvns	r3, r3
 80095b8:	697a      	ldr	r2, [r7, #20]
 80095ba:	08d2      	lsrs	r2, r2, #3
 80095bc:	4019      	ands	r1, r3
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	3208      	adds	r2, #8
 80095c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	68da      	ldr	r2, [r3, #12]
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	005b      	lsls	r3, r3, #1
 80095ce:	2103      	movs	r1, #3
 80095d0:	fa01 f303 	lsl.w	r3, r1, r3
 80095d4:	43db      	mvns	r3, r3
 80095d6:	401a      	ands	r2, r3
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	685a      	ldr	r2, [r3, #4]
 80095e0:	2101      	movs	r1, #1
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	fa01 f303 	lsl.w	r3, r1, r3
 80095e8:	43db      	mvns	r3, r3
 80095ea:	401a      	ands	r2, r3
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	689a      	ldr	r2, [r3, #8]
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	005b      	lsls	r3, r3, #1
 80095f8:	2103      	movs	r1, #3
 80095fa:	fa01 f303 	lsl.w	r3, r1, r3
 80095fe:	43db      	mvns	r3, r3
 8009600:	401a      	ands	r2, r3
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	609a      	str	r2, [r3, #8]
    }

    position++;
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	3301      	adds	r3, #1
 800960a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800960c:	683a      	ldr	r2, [r7, #0]
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	fa22 f303 	lsr.w	r3, r2, r3
 8009614:	2b00      	cmp	r3, #0
 8009616:	f47f af1f 	bne.w	8009458 <HAL_GPIO_DeInit+0x14>
  }
}
 800961a:	bf00      	nop
 800961c:	bf00      	nop
 800961e:	371c      	adds	r7, #28
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr
 8009628:	58000080 	.word	0x58000080
 800962c:	58000400 	.word	0x58000400
 8009630:	58020000 	.word	0x58020000
 8009634:	58020400 	.word	0x58020400
 8009638:	58020800 	.word	0x58020800
 800963c:	58020c00 	.word	0x58020c00
 8009640:	58021000 	.word	0x58021000
 8009644:	58021400 	.word	0x58021400
 8009648:	58021800 	.word	0x58021800
 800964c:	58021c00 	.word	0x58021c00
 8009650:	58022000 	.word	0x58022000
 8009654:	58022400 	.word	0x58022400

08009658 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	460b      	mov	r3, r1
 8009662:	807b      	strh	r3, [r7, #2]
 8009664:	4613      	mov	r3, r2
 8009666:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009668:	787b      	ldrb	r3, [r7, #1]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d003      	beq.n	8009676 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800966e:	887a      	ldrh	r2, [r7, #2]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009674:	e003      	b.n	800967e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009676:	887b      	ldrh	r3, [r7, #2]
 8009678:	041a      	lsls	r2, r3, #16
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	619a      	str	r2, [r3, #24]
}
 800967e:	bf00      	nop
 8009680:	370c      	adds	r7, #12
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr

0800968a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800968a:	b480      	push	{r7}
 800968c:	b085      	sub	sp, #20
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
 8009692:	460b      	mov	r3, r1
 8009694:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	695b      	ldr	r3, [r3, #20]
 800969a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800969c:	887a      	ldrh	r2, [r7, #2]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	4013      	ands	r3, r2
 80096a2:	041a      	lsls	r2, r3, #16
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	43d9      	mvns	r1, r3
 80096a8:	887b      	ldrh	r3, [r7, #2]
 80096aa:	400b      	ands	r3, r1
 80096ac:	431a      	orrs	r2, r3
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	619a      	str	r2, [r3, #24]
}
 80096b2:	bf00      	nop
 80096b4:	3714      	adds	r7, #20
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr
	...

080096c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d101      	bne.n	80096d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80096ce:	2301      	movs	r3, #1
 80096d0:	e07f      	b.n	80097d2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096d8:	b2db      	uxtb	r3, r3
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d106      	bne.n	80096ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2200      	movs	r2, #0
 80096e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 f8a9 	bl	800983e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2224      	movs	r2, #36	; 0x24
 80096f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f022 0201 	bic.w	r2, r2, #1
 8009702:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	685a      	ldr	r2, [r3, #4]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009710:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	689a      	ldr	r2, [r3, #8]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009720:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	68db      	ldr	r3, [r3, #12]
 8009726:	2b01      	cmp	r3, #1
 8009728:	d107      	bne.n	800973a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	689a      	ldr	r2, [r3, #8]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009736:	609a      	str	r2, [r3, #8]
 8009738:	e006      	b.n	8009748 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	689a      	ldr	r2, [r3, #8]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009746:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	2b02      	cmp	r3, #2
 800974e:	d104      	bne.n	800975a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009758:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	6859      	ldr	r1, [r3, #4]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	4b1d      	ldr	r3, [pc, #116]	; (80097dc <HAL_I2C_Init+0x11c>)
 8009766:	430b      	orrs	r3, r1
 8009768:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	68da      	ldr	r2, [r3, #12]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009778:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	691a      	ldr	r2, [r3, #16]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	695b      	ldr	r3, [r3, #20]
 8009782:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	699b      	ldr	r3, [r3, #24]
 800978a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	430a      	orrs	r2, r1
 8009792:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	69d9      	ldr	r1, [r3, #28]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6a1a      	ldr	r2, [r3, #32]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	430a      	orrs	r2, r1
 80097a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f042 0201 	orr.w	r2, r2, #1
 80097b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2200      	movs	r2, #0
 80097b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2220      	movs	r2, #32
 80097be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2200      	movs	r2, #0
 80097c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80097d0:	2300      	movs	r3, #0
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3708      	adds	r7, #8
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	02008000 	.word	0x02008000

080097e0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b082      	sub	sp, #8
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d101      	bne.n	80097f2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80097ee:	2301      	movs	r3, #1
 80097f0:	e021      	b.n	8009836 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2224      	movs	r2, #36	; 0x24
 80097f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	681a      	ldr	r2, [r3, #0]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f022 0201 	bic.w	r2, r2, #1
 8009808:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 f821 	bl	8009852 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2200      	movs	r2, #0
 8009814:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2200      	movs	r2, #0
 800981a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2200      	movs	r2, #0
 8009822:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2200      	movs	r2, #0
 8009828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009834:	2300      	movs	r3, #0
}
 8009836:	4618      	mov	r0, r3
 8009838:	3708      	adds	r7, #8
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800983e:	b480      	push	{r7}
 8009840:	b083      	sub	sp, #12
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8009846:	bf00      	nop
 8009848:	370c      	adds	r7, #12
 800984a:	46bd      	mov	sp, r7
 800984c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009850:	4770      	bx	lr

08009852 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8009852:	b480      	push	{r7}
 8009854:	b083      	sub	sp, #12
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800985a:	bf00      	nop
 800985c:	370c      	adds	r7, #12
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr
	...

08009868 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b088      	sub	sp, #32
 800986c:	af02      	add	r7, sp, #8
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	4608      	mov	r0, r1
 8009872:	4611      	mov	r1, r2
 8009874:	461a      	mov	r2, r3
 8009876:	4603      	mov	r3, r0
 8009878:	817b      	strh	r3, [r7, #10]
 800987a:	460b      	mov	r3, r1
 800987c:	813b      	strh	r3, [r7, #8]
 800987e:	4613      	mov	r3, r2
 8009880:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009888:	b2db      	uxtb	r3, r3
 800988a:	2b20      	cmp	r3, #32
 800988c:	f040 80f9 	bne.w	8009a82 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009890:	6a3b      	ldr	r3, [r7, #32]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d002      	beq.n	800989c <HAL_I2C_Mem_Write+0x34>
 8009896:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009898:	2b00      	cmp	r3, #0
 800989a:	d105      	bne.n	80098a8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80098a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80098a4:	2301      	movs	r3, #1
 80098a6:	e0ed      	b.n	8009a84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d101      	bne.n	80098b6 <HAL_I2C_Mem_Write+0x4e>
 80098b2:	2302      	movs	r3, #2
 80098b4:	e0e6      	b.n	8009a84 <HAL_I2C_Mem_Write+0x21c>
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2201      	movs	r2, #1
 80098ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80098be:	f7fa ffa5 	bl	800480c <HAL_GetTick>
 80098c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	9300      	str	r3, [sp, #0]
 80098c8:	2319      	movs	r3, #25
 80098ca:	2201      	movs	r2, #1
 80098cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80098d0:	68f8      	ldr	r0, [r7, #12]
 80098d2:	f000 fadd 	bl	8009e90 <I2C_WaitOnFlagUntilTimeout>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d001      	beq.n	80098e0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80098dc:	2301      	movs	r3, #1
 80098de:	e0d1      	b.n	8009a84 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2221      	movs	r2, #33	; 0x21
 80098e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2240      	movs	r2, #64	; 0x40
 80098ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2200      	movs	r2, #0
 80098f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	6a3a      	ldr	r2, [r7, #32]
 80098fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009900:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2200      	movs	r2, #0
 8009906:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009908:	88f8      	ldrh	r0, [r7, #6]
 800990a:	893a      	ldrh	r2, [r7, #8]
 800990c:	8979      	ldrh	r1, [r7, #10]
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	9301      	str	r3, [sp, #4]
 8009912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009914:	9300      	str	r3, [sp, #0]
 8009916:	4603      	mov	r3, r0
 8009918:	68f8      	ldr	r0, [r7, #12]
 800991a:	f000 f9ed 	bl	8009cf8 <I2C_RequestMemoryWrite>
 800991e:	4603      	mov	r3, r0
 8009920:	2b00      	cmp	r3, #0
 8009922:	d005      	beq.n	8009930 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2200      	movs	r2, #0
 8009928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800992c:	2301      	movs	r3, #1
 800992e:	e0a9      	b.n	8009a84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009934:	b29b      	uxth	r3, r3
 8009936:	2bff      	cmp	r3, #255	; 0xff
 8009938:	d90e      	bls.n	8009958 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	22ff      	movs	r2, #255	; 0xff
 800993e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009944:	b2da      	uxtb	r2, r3
 8009946:	8979      	ldrh	r1, [r7, #10]
 8009948:	2300      	movs	r3, #0
 800994a:	9300      	str	r3, [sp, #0]
 800994c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009950:	68f8      	ldr	r0, [r7, #12]
 8009952:	f000 fc57 	bl	800a204 <I2C_TransferConfig>
 8009956:	e00f      	b.n	8009978 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800995c:	b29a      	uxth	r2, r3
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009966:	b2da      	uxtb	r2, r3
 8009968:	8979      	ldrh	r1, [r7, #10]
 800996a:	2300      	movs	r3, #0
 800996c:	9300      	str	r3, [sp, #0]
 800996e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009972:	68f8      	ldr	r0, [r7, #12]
 8009974:	f000 fc46 	bl	800a204 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009978:	697a      	ldr	r2, [r7, #20]
 800997a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800997c:	68f8      	ldr	r0, [r7, #12]
 800997e:	f000 fad6 	bl	8009f2e <I2C_WaitOnTXISFlagUntilTimeout>
 8009982:	4603      	mov	r3, r0
 8009984:	2b00      	cmp	r3, #0
 8009986:	d001      	beq.n	800998c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009988:	2301      	movs	r3, #1
 800998a:	e07b      	b.n	8009a84 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009990:	781a      	ldrb	r2, [r3, #0]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800999c:	1c5a      	adds	r2, r3, #1
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	3b01      	subs	r3, #1
 80099aa:	b29a      	uxth	r2, r3
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099b4:	3b01      	subs	r3, #1
 80099b6:	b29a      	uxth	r2, r3
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d034      	beq.n	8009a30 <HAL_I2C_Mem_Write+0x1c8>
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d130      	bne.n	8009a30 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	9300      	str	r3, [sp, #0]
 80099d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d4:	2200      	movs	r2, #0
 80099d6:	2180      	movs	r1, #128	; 0x80
 80099d8:	68f8      	ldr	r0, [r7, #12]
 80099da:	f000 fa59 	bl	8009e90 <I2C_WaitOnFlagUntilTimeout>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d001      	beq.n	80099e8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	e04d      	b.n	8009a84 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	2bff      	cmp	r3, #255	; 0xff
 80099f0:	d90e      	bls.n	8009a10 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	22ff      	movs	r2, #255	; 0xff
 80099f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099fc:	b2da      	uxtb	r2, r3
 80099fe:	8979      	ldrh	r1, [r7, #10]
 8009a00:	2300      	movs	r3, #0
 8009a02:	9300      	str	r3, [sp, #0]
 8009a04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009a08:	68f8      	ldr	r0, [r7, #12]
 8009a0a:	f000 fbfb 	bl	800a204 <I2C_TransferConfig>
 8009a0e:	e00f      	b.n	8009a30 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a14:	b29a      	uxth	r2, r3
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a1e:	b2da      	uxtb	r2, r3
 8009a20:	8979      	ldrh	r1, [r7, #10]
 8009a22:	2300      	movs	r3, #0
 8009a24:	9300      	str	r3, [sp, #0]
 8009a26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009a2a:	68f8      	ldr	r0, [r7, #12]
 8009a2c:	f000 fbea 	bl	800a204 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d19e      	bne.n	8009978 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a3a:	697a      	ldr	r2, [r7, #20]
 8009a3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a3e:	68f8      	ldr	r0, [r7, #12]
 8009a40:	f000 fabc 	bl	8009fbc <I2C_WaitOnSTOPFlagUntilTimeout>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d001      	beq.n	8009a4e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e01a      	b.n	8009a84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2220      	movs	r2, #32
 8009a54:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	6859      	ldr	r1, [r3, #4]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681a      	ldr	r2, [r3, #0]
 8009a60:	4b0a      	ldr	r3, [pc, #40]	; (8009a8c <HAL_I2C_Mem_Write+0x224>)
 8009a62:	400b      	ands	r3, r1
 8009a64:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2220      	movs	r2, #32
 8009a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2200      	movs	r2, #0
 8009a72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	e000      	b.n	8009a84 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009a82:	2302      	movs	r3, #2
  }
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3718      	adds	r7, #24
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	fe00e800 	.word	0xfe00e800

08009a90 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b088      	sub	sp, #32
 8009a94:	af02      	add	r7, sp, #8
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	4608      	mov	r0, r1
 8009a9a:	4611      	mov	r1, r2
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	817b      	strh	r3, [r7, #10]
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	813b      	strh	r3, [r7, #8]
 8009aa6:	4613      	mov	r3, r2
 8009aa8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	2b20      	cmp	r3, #32
 8009ab4:	f040 80fd 	bne.w	8009cb2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ab8:	6a3b      	ldr	r3, [r7, #32]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d002      	beq.n	8009ac4 <HAL_I2C_Mem_Read+0x34>
 8009abe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d105      	bne.n	8009ad0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009aca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009acc:	2301      	movs	r3, #1
 8009ace:	e0f1      	b.n	8009cb4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d101      	bne.n	8009ade <HAL_I2C_Mem_Read+0x4e>
 8009ada:	2302      	movs	r3, #2
 8009adc:	e0ea      	b.n	8009cb4 <HAL_I2C_Mem_Read+0x224>
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009ae6:	f7fa fe91 	bl	800480c <HAL_GetTick>
 8009aea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	9300      	str	r3, [sp, #0]
 8009af0:	2319      	movs	r3, #25
 8009af2:	2201      	movs	r2, #1
 8009af4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009af8:	68f8      	ldr	r0, [r7, #12]
 8009afa:	f000 f9c9 	bl	8009e90 <I2C_WaitOnFlagUntilTimeout>
 8009afe:	4603      	mov	r3, r0
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d001      	beq.n	8009b08 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009b04:	2301      	movs	r3, #1
 8009b06:	e0d5      	b.n	8009cb4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2222      	movs	r2, #34	; 0x22
 8009b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2240      	movs	r2, #64	; 0x40
 8009b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	6a3a      	ldr	r2, [r7, #32]
 8009b22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009b28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009b30:	88f8      	ldrh	r0, [r7, #6]
 8009b32:	893a      	ldrh	r2, [r7, #8]
 8009b34:	8979      	ldrh	r1, [r7, #10]
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	9301      	str	r3, [sp, #4]
 8009b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b3c:	9300      	str	r3, [sp, #0]
 8009b3e:	4603      	mov	r3, r0
 8009b40:	68f8      	ldr	r0, [r7, #12]
 8009b42:	f000 f92d 	bl	8009da0 <I2C_RequestMemoryRead>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d005      	beq.n	8009b58 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009b54:	2301      	movs	r3, #1
 8009b56:	e0ad      	b.n	8009cb4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	2bff      	cmp	r3, #255	; 0xff
 8009b60:	d90e      	bls.n	8009b80 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	22ff      	movs	r2, #255	; 0xff
 8009b66:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b6c:	b2da      	uxtb	r2, r3
 8009b6e:	8979      	ldrh	r1, [r7, #10]
 8009b70:	4b52      	ldr	r3, [pc, #328]	; (8009cbc <HAL_I2C_Mem_Read+0x22c>)
 8009b72:	9300      	str	r3, [sp, #0]
 8009b74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009b78:	68f8      	ldr	r0, [r7, #12]
 8009b7a:	f000 fb43 	bl	800a204 <I2C_TransferConfig>
 8009b7e:	e00f      	b.n	8009ba0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b84:	b29a      	uxth	r2, r3
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b8e:	b2da      	uxtb	r2, r3
 8009b90:	8979      	ldrh	r1, [r7, #10]
 8009b92:	4b4a      	ldr	r3, [pc, #296]	; (8009cbc <HAL_I2C_Mem_Read+0x22c>)
 8009b94:	9300      	str	r3, [sp, #0]
 8009b96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009b9a:	68f8      	ldr	r0, [r7, #12]
 8009b9c:	f000 fb32 	bl	800a204 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	9300      	str	r3, [sp, #0]
 8009ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	2104      	movs	r1, #4
 8009baa:	68f8      	ldr	r0, [r7, #12]
 8009bac:	f000 f970 	bl	8009e90 <I2C_WaitOnFlagUntilTimeout>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d001      	beq.n	8009bba <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e07c      	b.n	8009cb4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc4:	b2d2      	uxtb	r2, r2
 8009bc6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bcc:	1c5a      	adds	r2, r3, #1
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bd6:	3b01      	subs	r3, #1
 8009bd8:	b29a      	uxth	r2, r3
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	3b01      	subs	r3, #1
 8009be6:	b29a      	uxth	r2, r3
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bf0:	b29b      	uxth	r3, r3
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d034      	beq.n	8009c60 <HAL_I2C_Mem_Read+0x1d0>
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d130      	bne.n	8009c60 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	9300      	str	r3, [sp, #0]
 8009c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c04:	2200      	movs	r2, #0
 8009c06:	2180      	movs	r1, #128	; 0x80
 8009c08:	68f8      	ldr	r0, [r7, #12]
 8009c0a:	f000 f941 	bl	8009e90 <I2C_WaitOnFlagUntilTimeout>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d001      	beq.n	8009c18 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009c14:	2301      	movs	r3, #1
 8009c16:	e04d      	b.n	8009cb4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	2bff      	cmp	r3, #255	; 0xff
 8009c20:	d90e      	bls.n	8009c40 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	22ff      	movs	r2, #255	; 0xff
 8009c26:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c2c:	b2da      	uxtb	r2, r3
 8009c2e:	8979      	ldrh	r1, [r7, #10]
 8009c30:	2300      	movs	r3, #0
 8009c32:	9300      	str	r3, [sp, #0]
 8009c34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009c38:	68f8      	ldr	r0, [r7, #12]
 8009c3a:	f000 fae3 	bl	800a204 <I2C_TransferConfig>
 8009c3e:	e00f      	b.n	8009c60 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c44:	b29a      	uxth	r2, r3
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c4e:	b2da      	uxtb	r2, r3
 8009c50:	8979      	ldrh	r1, [r7, #10]
 8009c52:	2300      	movs	r3, #0
 8009c54:	9300      	str	r3, [sp, #0]
 8009c56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009c5a:	68f8      	ldr	r0, [r7, #12]
 8009c5c:	f000 fad2 	bl	800a204 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d19a      	bne.n	8009ba0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c6a:	697a      	ldr	r2, [r7, #20]
 8009c6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c6e:	68f8      	ldr	r0, [r7, #12]
 8009c70:	f000 f9a4 	bl	8009fbc <I2C_WaitOnSTOPFlagUntilTimeout>
 8009c74:	4603      	mov	r3, r0
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d001      	beq.n	8009c7e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	e01a      	b.n	8009cb4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	2220      	movs	r2, #32
 8009c84:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	6859      	ldr	r1, [r3, #4]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	4b0b      	ldr	r3, [pc, #44]	; (8009cc0 <HAL_I2C_Mem_Read+0x230>)
 8009c92:	400b      	ands	r3, r1
 8009c94:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2220      	movs	r2, #32
 8009c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	e000      	b.n	8009cb4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009cb2:	2302      	movs	r3, #2
  }
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3718      	adds	r7, #24
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	80002400 	.word	0x80002400
 8009cc0:	fe00e800 	.word	0xfe00e800

08009cc4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b083      	sub	sp, #12
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009cd2:	b2db      	uxtb	r3, r3
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	370c      	adds	r7, #12
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr

08009ce0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b083      	sub	sp, #12
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	370c      	adds	r7, #12
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr

08009cf8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b086      	sub	sp, #24
 8009cfc:	af02      	add	r7, sp, #8
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	4608      	mov	r0, r1
 8009d02:	4611      	mov	r1, r2
 8009d04:	461a      	mov	r2, r3
 8009d06:	4603      	mov	r3, r0
 8009d08:	817b      	strh	r3, [r7, #10]
 8009d0a:	460b      	mov	r3, r1
 8009d0c:	813b      	strh	r3, [r7, #8]
 8009d0e:	4613      	mov	r3, r2
 8009d10:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009d12:	88fb      	ldrh	r3, [r7, #6]
 8009d14:	b2da      	uxtb	r2, r3
 8009d16:	8979      	ldrh	r1, [r7, #10]
 8009d18:	4b20      	ldr	r3, [pc, #128]	; (8009d9c <I2C_RequestMemoryWrite+0xa4>)
 8009d1a:	9300      	str	r3, [sp, #0]
 8009d1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d20:	68f8      	ldr	r0, [r7, #12]
 8009d22:	f000 fa6f 	bl	800a204 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d26:	69fa      	ldr	r2, [r7, #28]
 8009d28:	69b9      	ldr	r1, [r7, #24]
 8009d2a:	68f8      	ldr	r0, [r7, #12]
 8009d2c:	f000 f8ff 	bl	8009f2e <I2C_WaitOnTXISFlagUntilTimeout>
 8009d30:	4603      	mov	r3, r0
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d001      	beq.n	8009d3a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009d36:	2301      	movs	r3, #1
 8009d38:	e02c      	b.n	8009d94 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009d3a:	88fb      	ldrh	r3, [r7, #6]
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d105      	bne.n	8009d4c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009d40:	893b      	ldrh	r3, [r7, #8]
 8009d42:	b2da      	uxtb	r2, r3
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	629a      	str	r2, [r3, #40]	; 0x28
 8009d4a:	e015      	b.n	8009d78 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009d4c:	893b      	ldrh	r3, [r7, #8]
 8009d4e:	0a1b      	lsrs	r3, r3, #8
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	b2da      	uxtb	r2, r3
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d5a:	69fa      	ldr	r2, [r7, #28]
 8009d5c:	69b9      	ldr	r1, [r7, #24]
 8009d5e:	68f8      	ldr	r0, [r7, #12]
 8009d60:	f000 f8e5 	bl	8009f2e <I2C_WaitOnTXISFlagUntilTimeout>
 8009d64:	4603      	mov	r3, r0
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d001      	beq.n	8009d6e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	e012      	b.n	8009d94 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009d6e:	893b      	ldrh	r3, [r7, #8]
 8009d70:	b2da      	uxtb	r2, r3
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009d78:	69fb      	ldr	r3, [r7, #28]
 8009d7a:	9300      	str	r3, [sp, #0]
 8009d7c:	69bb      	ldr	r3, [r7, #24]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	2180      	movs	r1, #128	; 0x80
 8009d82:	68f8      	ldr	r0, [r7, #12]
 8009d84:	f000 f884 	bl	8009e90 <I2C_WaitOnFlagUntilTimeout>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d001      	beq.n	8009d92 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	e000      	b.n	8009d94 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009d92:	2300      	movs	r3, #0
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3710      	adds	r7, #16
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	80002000 	.word	0x80002000

08009da0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b086      	sub	sp, #24
 8009da4:	af02      	add	r7, sp, #8
 8009da6:	60f8      	str	r0, [r7, #12]
 8009da8:	4608      	mov	r0, r1
 8009daa:	4611      	mov	r1, r2
 8009dac:	461a      	mov	r2, r3
 8009dae:	4603      	mov	r3, r0
 8009db0:	817b      	strh	r3, [r7, #10]
 8009db2:	460b      	mov	r3, r1
 8009db4:	813b      	strh	r3, [r7, #8]
 8009db6:	4613      	mov	r3, r2
 8009db8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009dba:	88fb      	ldrh	r3, [r7, #6]
 8009dbc:	b2da      	uxtb	r2, r3
 8009dbe:	8979      	ldrh	r1, [r7, #10]
 8009dc0:	4b20      	ldr	r3, [pc, #128]	; (8009e44 <I2C_RequestMemoryRead+0xa4>)
 8009dc2:	9300      	str	r3, [sp, #0]
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	68f8      	ldr	r0, [r7, #12]
 8009dc8:	f000 fa1c 	bl	800a204 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009dcc:	69fa      	ldr	r2, [r7, #28]
 8009dce:	69b9      	ldr	r1, [r7, #24]
 8009dd0:	68f8      	ldr	r0, [r7, #12]
 8009dd2:	f000 f8ac 	bl	8009f2e <I2C_WaitOnTXISFlagUntilTimeout>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d001      	beq.n	8009de0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	e02c      	b.n	8009e3a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009de0:	88fb      	ldrh	r3, [r7, #6]
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d105      	bne.n	8009df2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009de6:	893b      	ldrh	r3, [r7, #8]
 8009de8:	b2da      	uxtb	r2, r3
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	629a      	str	r2, [r3, #40]	; 0x28
 8009df0:	e015      	b.n	8009e1e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009df2:	893b      	ldrh	r3, [r7, #8]
 8009df4:	0a1b      	lsrs	r3, r3, #8
 8009df6:	b29b      	uxth	r3, r3
 8009df8:	b2da      	uxtb	r2, r3
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e00:	69fa      	ldr	r2, [r7, #28]
 8009e02:	69b9      	ldr	r1, [r7, #24]
 8009e04:	68f8      	ldr	r0, [r7, #12]
 8009e06:	f000 f892 	bl	8009f2e <I2C_WaitOnTXISFlagUntilTimeout>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d001      	beq.n	8009e14 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009e10:	2301      	movs	r3, #1
 8009e12:	e012      	b.n	8009e3a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009e14:	893b      	ldrh	r3, [r7, #8]
 8009e16:	b2da      	uxtb	r2, r3
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009e1e:	69fb      	ldr	r3, [r7, #28]
 8009e20:	9300      	str	r3, [sp, #0]
 8009e22:	69bb      	ldr	r3, [r7, #24]
 8009e24:	2200      	movs	r2, #0
 8009e26:	2140      	movs	r1, #64	; 0x40
 8009e28:	68f8      	ldr	r0, [r7, #12]
 8009e2a:	f000 f831 	bl	8009e90 <I2C_WaitOnFlagUntilTimeout>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d001      	beq.n	8009e38 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009e34:	2301      	movs	r3, #1
 8009e36:	e000      	b.n	8009e3a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009e38:	2300      	movs	r3, #0
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3710      	adds	r7, #16
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
 8009e42:	bf00      	nop
 8009e44:	80002000 	.word	0x80002000

08009e48 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b083      	sub	sp, #12
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	699b      	ldr	r3, [r3, #24]
 8009e56:	f003 0302 	and.w	r3, r3, #2
 8009e5a:	2b02      	cmp	r3, #2
 8009e5c:	d103      	bne.n	8009e66 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	2200      	movs	r2, #0
 8009e64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	699b      	ldr	r3, [r3, #24]
 8009e6c:	f003 0301 	and.w	r3, r3, #1
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d007      	beq.n	8009e84 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	699a      	ldr	r2, [r3, #24]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f042 0201 	orr.w	r2, r2, #1
 8009e82:	619a      	str	r2, [r3, #24]
  }
}
 8009e84:	bf00      	nop
 8009e86:	370c      	adds	r7, #12
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr

08009e90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b084      	sub	sp, #16
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	603b      	str	r3, [r7, #0]
 8009e9c:	4613      	mov	r3, r2
 8009e9e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009ea0:	e031      	b.n	8009f06 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ea8:	d02d      	beq.n	8009f06 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009eaa:	f7fa fcaf 	bl	800480c <HAL_GetTick>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	69bb      	ldr	r3, [r7, #24]
 8009eb2:	1ad3      	subs	r3, r2, r3
 8009eb4:	683a      	ldr	r2, [r7, #0]
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d302      	bcc.n	8009ec0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d122      	bne.n	8009f06 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	699a      	ldr	r2, [r3, #24]
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	4013      	ands	r3, r2
 8009eca:	68ba      	ldr	r2, [r7, #8]
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	bf0c      	ite	eq
 8009ed0:	2301      	moveq	r3, #1
 8009ed2:	2300      	movne	r3, #0
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	79fb      	ldrb	r3, [r7, #7]
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d113      	bne.n	8009f06 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ee2:	f043 0220 	orr.w	r2, r3, #32
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2220      	movs	r2, #32
 8009eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2200      	movs	r2, #0
 8009efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8009f02:	2301      	movs	r3, #1
 8009f04:	e00f      	b.n	8009f26 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	699a      	ldr	r2, [r3, #24]
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	4013      	ands	r3, r2
 8009f10:	68ba      	ldr	r2, [r7, #8]
 8009f12:	429a      	cmp	r2, r3
 8009f14:	bf0c      	ite	eq
 8009f16:	2301      	moveq	r3, #1
 8009f18:	2300      	movne	r3, #0
 8009f1a:	b2db      	uxtb	r3, r3
 8009f1c:	461a      	mov	r2, r3
 8009f1e:	79fb      	ldrb	r3, [r7, #7]
 8009f20:	429a      	cmp	r2, r3
 8009f22:	d0be      	beq.n	8009ea2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009f24:	2300      	movs	r3, #0
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3710      	adds	r7, #16
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}

08009f2e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009f2e:	b580      	push	{r7, lr}
 8009f30:	b084      	sub	sp, #16
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	60f8      	str	r0, [r7, #12]
 8009f36:	60b9      	str	r1, [r7, #8]
 8009f38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009f3a:	e033      	b.n	8009fa4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	68b9      	ldr	r1, [r7, #8]
 8009f40:	68f8      	ldr	r0, [r7, #12]
 8009f42:	f000 f87f 	bl	800a044 <I2C_IsErrorOccurred>
 8009f46:	4603      	mov	r3, r0
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d001      	beq.n	8009f50 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	e031      	b.n	8009fb4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f56:	d025      	beq.n	8009fa4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f58:	f7fa fc58 	bl	800480c <HAL_GetTick>
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	1ad3      	subs	r3, r2, r3
 8009f62:	68ba      	ldr	r2, [r7, #8]
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d302      	bcc.n	8009f6e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d11a      	bne.n	8009fa4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	699b      	ldr	r3, [r3, #24]
 8009f74:	f003 0302 	and.w	r3, r3, #2
 8009f78:	2b02      	cmp	r3, #2
 8009f7a:	d013      	beq.n	8009fa4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f80:	f043 0220 	orr.w	r2, r3, #32
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2220      	movs	r2, #32
 8009f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2200      	movs	r2, #0
 8009f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	e007      	b.n	8009fb4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	699b      	ldr	r3, [r3, #24]
 8009faa:	f003 0302 	and.w	r3, r3, #2
 8009fae:	2b02      	cmp	r3, #2
 8009fb0:	d1c4      	bne.n	8009f3c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009fb2:	2300      	movs	r3, #0
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3710      	adds	r7, #16
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	60b9      	str	r1, [r7, #8]
 8009fc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009fc8:	e02f      	b.n	800a02a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	68b9      	ldr	r1, [r7, #8]
 8009fce:	68f8      	ldr	r0, [r7, #12]
 8009fd0:	f000 f838 	bl	800a044 <I2C_IsErrorOccurred>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d001      	beq.n	8009fde <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	e02d      	b.n	800a03a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fde:	f7fa fc15 	bl	800480c <HAL_GetTick>
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	1ad3      	subs	r3, r2, r3
 8009fe8:	68ba      	ldr	r2, [r7, #8]
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d302      	bcc.n	8009ff4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d11a      	bne.n	800a02a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	699b      	ldr	r3, [r3, #24]
 8009ffa:	f003 0320 	and.w	r3, r3, #32
 8009ffe:	2b20      	cmp	r3, #32
 800a000:	d013      	beq.n	800a02a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a006:	f043 0220 	orr.w	r2, r3, #32
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2220      	movs	r2, #32
 800a012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2200      	movs	r2, #0
 800a01a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2200      	movs	r2, #0
 800a022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a026:	2301      	movs	r3, #1
 800a028:	e007      	b.n	800a03a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	699b      	ldr	r3, [r3, #24]
 800a030:	f003 0320 	and.w	r3, r3, #32
 800a034:	2b20      	cmp	r3, #32
 800a036:	d1c8      	bne.n	8009fca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a038:	2300      	movs	r3, #0
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3710      	adds	r7, #16
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
	...

0800a044 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b08a      	sub	sp, #40	; 0x28
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a050:	2300      	movs	r3, #0
 800a052:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	699b      	ldr	r3, [r3, #24]
 800a05c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a05e:	2300      	movs	r3, #0
 800a060:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	f003 0310 	and.w	r3, r3, #16
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d068      	beq.n	800a142 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	2210      	movs	r2, #16
 800a076:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a078:	e049      	b.n	800a10e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a080:	d045      	beq.n	800a10e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a082:	f7fa fbc3 	bl	800480c <HAL_GetTick>
 800a086:	4602      	mov	r2, r0
 800a088:	69fb      	ldr	r3, [r7, #28]
 800a08a:	1ad3      	subs	r3, r2, r3
 800a08c:	68ba      	ldr	r2, [r7, #8]
 800a08e:	429a      	cmp	r2, r3
 800a090:	d302      	bcc.n	800a098 <I2C_IsErrorOccurred+0x54>
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d13a      	bne.n	800a10e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a0aa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	699b      	ldr	r3, [r3, #24]
 800a0b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a0b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0ba:	d121      	bne.n	800a100 <I2C_IsErrorOccurred+0xbc>
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0c2:	d01d      	beq.n	800a100 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800a0c4:	7cfb      	ldrb	r3, [r7, #19]
 800a0c6:	2b20      	cmp	r3, #32
 800a0c8:	d01a      	beq.n	800a100 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	685a      	ldr	r2, [r3, #4]
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a0d8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a0da:	f7fa fb97 	bl	800480c <HAL_GetTick>
 800a0de:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a0e0:	e00e      	b.n	800a100 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a0e2:	f7fa fb93 	bl	800480c <HAL_GetTick>
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	69fb      	ldr	r3, [r7, #28]
 800a0ea:	1ad3      	subs	r3, r2, r3
 800a0ec:	2b19      	cmp	r3, #25
 800a0ee:	d907      	bls.n	800a100 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800a0f0:	6a3b      	ldr	r3, [r7, #32]
 800a0f2:	f043 0320 	orr.w	r3, r3, #32
 800a0f6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800a0fe:	e006      	b.n	800a10e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	699b      	ldr	r3, [r3, #24]
 800a106:	f003 0320 	and.w	r3, r3, #32
 800a10a:	2b20      	cmp	r3, #32
 800a10c:	d1e9      	bne.n	800a0e2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	699b      	ldr	r3, [r3, #24]
 800a114:	f003 0320 	and.w	r3, r3, #32
 800a118:	2b20      	cmp	r3, #32
 800a11a:	d003      	beq.n	800a124 <I2C_IsErrorOccurred+0xe0>
 800a11c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a120:	2b00      	cmp	r3, #0
 800a122:	d0aa      	beq.n	800a07a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d103      	bne.n	800a134 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2220      	movs	r2, #32
 800a132:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a134:	6a3b      	ldr	r3, [r7, #32]
 800a136:	f043 0304 	orr.w	r3, r3, #4
 800a13a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a13c:	2301      	movs	r3, #1
 800a13e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	699b      	ldr	r3, [r3, #24]
 800a148:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a14a:	69bb      	ldr	r3, [r7, #24]
 800a14c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a150:	2b00      	cmp	r3, #0
 800a152:	d00b      	beq.n	800a16c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a154:	6a3b      	ldr	r3, [r7, #32]
 800a156:	f043 0301 	orr.w	r3, r3, #1
 800a15a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a164:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a166:	2301      	movs	r3, #1
 800a168:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a16c:	69bb      	ldr	r3, [r7, #24]
 800a16e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a172:	2b00      	cmp	r3, #0
 800a174:	d00b      	beq.n	800a18e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a176:	6a3b      	ldr	r3, [r7, #32]
 800a178:	f043 0308 	orr.w	r3, r3, #8
 800a17c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a186:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a188:	2301      	movs	r3, #1
 800a18a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a18e:	69bb      	ldr	r3, [r7, #24]
 800a190:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a194:	2b00      	cmp	r3, #0
 800a196:	d00b      	beq.n	800a1b0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a198:	6a3b      	ldr	r3, [r7, #32]
 800a19a:	f043 0302 	orr.w	r3, r3, #2
 800a19e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800a1b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d01c      	beq.n	800a1f2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a1b8:	68f8      	ldr	r0, [r7, #12]
 800a1ba:	f7ff fe45 	bl	8009e48 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	6859      	ldr	r1, [r3, #4]
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	4b0d      	ldr	r3, [pc, #52]	; (800a200 <I2C_IsErrorOccurred+0x1bc>)
 800a1ca:	400b      	ands	r3, r1
 800a1cc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a1d2:	6a3b      	ldr	r3, [r7, #32]
 800a1d4:	431a      	orrs	r2, r3
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2220      	movs	r2, #32
 800a1de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800a1f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3728      	adds	r7, #40	; 0x28
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	bf00      	nop
 800a200:	fe00e800 	.word	0xfe00e800

0800a204 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a204:	b480      	push	{r7}
 800a206:	b087      	sub	sp, #28
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	607b      	str	r3, [r7, #4]
 800a20e:	460b      	mov	r3, r1
 800a210:	817b      	strh	r3, [r7, #10]
 800a212:	4613      	mov	r3, r2
 800a214:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a216:	897b      	ldrh	r3, [r7, #10]
 800a218:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a21c:	7a7b      	ldrb	r3, [r7, #9]
 800a21e:	041b      	lsls	r3, r3, #16
 800a220:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a224:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a22a:	6a3b      	ldr	r3, [r7, #32]
 800a22c:	4313      	orrs	r3, r2
 800a22e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a232:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	685a      	ldr	r2, [r3, #4]
 800a23a:	6a3b      	ldr	r3, [r7, #32]
 800a23c:	0d5b      	lsrs	r3, r3, #21
 800a23e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a242:	4b08      	ldr	r3, [pc, #32]	; (800a264 <I2C_TransferConfig+0x60>)
 800a244:	430b      	orrs	r3, r1
 800a246:	43db      	mvns	r3, r3
 800a248:	ea02 0103 	and.w	r1, r2, r3
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	697a      	ldr	r2, [r7, #20]
 800a252:	430a      	orrs	r2, r1
 800a254:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a256:	bf00      	nop
 800a258:	371c      	adds	r7, #28
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr
 800a262:	bf00      	nop
 800a264:	03ff63ff 	.word	0x03ff63ff

0800a268 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	2b20      	cmp	r3, #32
 800a27c:	d138      	bne.n	800a2f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a284:	2b01      	cmp	r3, #1
 800a286:	d101      	bne.n	800a28c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a288:	2302      	movs	r3, #2
 800a28a:	e032      	b.n	800a2f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2201      	movs	r2, #1
 800a290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2224      	movs	r2, #36	; 0x24
 800a298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f022 0201 	bic.w	r2, r2, #1
 800a2aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	681a      	ldr	r2, [r3, #0]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a2ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	6819      	ldr	r1, [r3, #0]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	683a      	ldr	r2, [r7, #0]
 800a2c8:	430a      	orrs	r2, r1
 800a2ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f042 0201 	orr.w	r2, r2, #1
 800a2da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2220      	movs	r2, #32
 800a2e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	e000      	b.n	800a2f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a2f0:	2302      	movs	r3, #2
  }
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	370c      	adds	r7, #12
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr

0800a2fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a2fe:	b480      	push	{r7}
 800a300:	b085      	sub	sp, #20
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
 800a306:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a30e:	b2db      	uxtb	r3, r3
 800a310:	2b20      	cmp	r3, #32
 800a312:	d139      	bne.n	800a388 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a31a:	2b01      	cmp	r3, #1
 800a31c:	d101      	bne.n	800a322 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a31e:	2302      	movs	r3, #2
 800a320:	e033      	b.n	800a38a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2201      	movs	r2, #1
 800a326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2224      	movs	r2, #36	; 0x24
 800a32e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f022 0201 	bic.w	r2, r2, #1
 800a340:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a350:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	021b      	lsls	r3, r3, #8
 800a356:	68fa      	ldr	r2, [r7, #12]
 800a358:	4313      	orrs	r3, r2
 800a35a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	68fa      	ldr	r2, [r7, #12]
 800a362:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f042 0201 	orr.w	r2, r2, #1
 800a372:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2220      	movs	r2, #32
 800a378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a384:	2300      	movs	r3, #0
 800a386:	e000      	b.n	800a38a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a388:	2302      	movs	r3, #2
  }
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3714      	adds	r7, #20
 800a38e:	46bd      	mov	sp, r7
 800a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a394:	4770      	bx	lr
	...

0800a398 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d101      	bne.n	800a3aa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	e0bf      	b.n	800a52a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d106      	bne.n	800a3c4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f7f7 f8ba 	bl	8001538 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2202      	movs	r2, #2
 800a3c8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	699a      	ldr	r2, [r3, #24]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800a3da:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	6999      	ldr	r1, [r3, #24]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	685a      	ldr	r2, [r3, #4]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	689b      	ldr	r3, [r3, #8]
 800a3ea:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a3f0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	691b      	ldr	r3, [r3, #16]
 800a3f6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	430a      	orrs	r2, r1
 800a3fe:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	6899      	ldr	r1, [r3, #8]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681a      	ldr	r2, [r3, #0]
 800a40a:	4b4a      	ldr	r3, [pc, #296]	; (800a534 <HAL_LTDC_Init+0x19c>)
 800a40c:	400b      	ands	r3, r1
 800a40e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	695b      	ldr	r3, [r3, #20]
 800a414:	041b      	lsls	r3, r3, #16
 800a416:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	6899      	ldr	r1, [r3, #8]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	699a      	ldr	r2, [r3, #24]
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	431a      	orrs	r2, r3
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	430a      	orrs	r2, r1
 800a42c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	68d9      	ldr	r1, [r3, #12]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681a      	ldr	r2, [r3, #0]
 800a438:	4b3e      	ldr	r3, [pc, #248]	; (800a534 <HAL_LTDC_Init+0x19c>)
 800a43a:	400b      	ands	r3, r1
 800a43c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	69db      	ldr	r3, [r3, #28]
 800a442:	041b      	lsls	r3, r3, #16
 800a444:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	68d9      	ldr	r1, [r3, #12]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6a1a      	ldr	r2, [r3, #32]
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	431a      	orrs	r2, r3
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	430a      	orrs	r2, r1
 800a45a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	6919      	ldr	r1, [r3, #16]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	4b33      	ldr	r3, [pc, #204]	; (800a534 <HAL_LTDC_Init+0x19c>)
 800a468:	400b      	ands	r3, r1
 800a46a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a470:	041b      	lsls	r3, r3, #16
 800a472:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	6919      	ldr	r1, [r3, #16]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	431a      	orrs	r2, r3
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	430a      	orrs	r2, r1
 800a488:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	6959      	ldr	r1, [r3, #20]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681a      	ldr	r2, [r3, #0]
 800a494:	4b27      	ldr	r3, [pc, #156]	; (800a534 <HAL_LTDC_Init+0x19c>)
 800a496:	400b      	ands	r3, r1
 800a498:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a49e:	041b      	lsls	r3, r3, #16
 800a4a0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	6959      	ldr	r1, [r3, #20]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	431a      	orrs	r2, r3
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	430a      	orrs	r2, r1
 800a4b6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a4be:	021b      	lsls	r3, r3, #8
 800a4c0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800a4c8:	041b      	lsls	r3, r3, #16
 800a4ca:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800a4da:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a4e2:	68ba      	ldr	r2, [r7, #8]
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	687a      	ldr	r2, [r7, #4]
 800a4ea:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800a4ee:	431a      	orrs	r2, r3
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	430a      	orrs	r2, r1
 800a4f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f042 0206 	orr.w	r2, r2, #6
 800a506:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	699a      	ldr	r2, [r3, #24]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f042 0201 	orr.w	r2, r2, #1
 800a516:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2200      	movs	r2, #0
 800a51c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2201      	movs	r2, #1
 800a524:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800a528:	2300      	movs	r3, #0
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3710      	adds	r7, #16
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
 800a532:	bf00      	nop
 800a534:	f000f800 	.word	0xf000f800

0800a538 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a546:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a54e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	f003 0304 	and.w	r3, r3, #4
 800a556:	2b00      	cmp	r3, #0
 800a558:	d023      	beq.n	800a5a2 <HAL_LTDC_IRQHandler+0x6a>
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	f003 0304 	and.w	r3, r3, #4
 800a560:	2b00      	cmp	r3, #0
 800a562:	d01e      	beq.n	800a5a2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f022 0204 	bic.w	r2, r2, #4
 800a572:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	2204      	movs	r2, #4
 800a57a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a582:	f043 0201 	orr.w	r2, r3, #1
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2204      	movs	r2, #4
 800a590:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2200      	movs	r2, #0
 800a598:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f000 f86f 	bl	800a680 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f003 0302 	and.w	r3, r3, #2
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d023      	beq.n	800a5f4 <HAL_LTDC_IRQHandler+0xbc>
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	f003 0302 	and.w	r3, r3, #2
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d01e      	beq.n	800a5f4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f022 0202 	bic.w	r2, r2, #2
 800a5c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	2202      	movs	r2, #2
 800a5cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a5d4:	f043 0202 	orr.w	r2, r3, #2
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2204      	movs	r2, #4
 800a5e2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 f846 	bl	800a680 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f003 0301 	and.w	r3, r3, #1
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d01b      	beq.n	800a636 <HAL_LTDC_IRQHandler+0xfe>
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	f003 0301 	and.w	r3, r3, #1
 800a604:	2b00      	cmp	r3, #0
 800a606:	d016      	beq.n	800a636 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f022 0201 	bic.w	r2, r2, #1
 800a616:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	2201      	movs	r2, #1
 800a61e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2201      	movs	r2, #1
 800a624:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2200      	movs	r2, #0
 800a62c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 f82f 	bl	800a694 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f003 0308 	and.w	r3, r3, #8
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d01b      	beq.n	800a678 <HAL_LTDC_IRQHandler+0x140>
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	f003 0308 	and.w	r3, r3, #8
 800a646:	2b00      	cmp	r3, #0
 800a648:	d016      	beq.n	800a678 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f022 0208 	bic.w	r2, r2, #8
 800a658:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	2208      	movs	r2, #8
 800a660:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2201      	movs	r2, #1
 800a666:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2200      	movs	r2, #0
 800a66e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f000 f818 	bl	800a6a8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800a678:	bf00      	nop
 800a67a:	3710      	adds	r7, #16
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800a688:	bf00      	nop
 800a68a:	370c      	adds	r7, #12
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a694:	b480      	push	{r7}
 800a696:	b083      	sub	sp, #12
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800a69c:	bf00      	nop
 800a69e:	370c      	adds	r7, #12
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr

0800a6a8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800a6b0:	bf00      	nop
 800a6b2:	370c      	adds	r7, #12
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr

0800a6bc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a6bc:	b5b0      	push	{r4, r5, r7, lr}
 800a6be:	b084      	sub	sp, #16
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	60f8      	str	r0, [r7, #12]
 800a6c4:	60b9      	str	r1, [r7, #8]
 800a6c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800a6ce:	2b01      	cmp	r3, #1
 800a6d0:	d101      	bne.n	800a6d6 <HAL_LTDC_ConfigLayer+0x1a>
 800a6d2:	2302      	movs	r3, #2
 800a6d4:	e02c      	b.n	800a730 <HAL_LTDC_ConfigLayer+0x74>
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2201      	movs	r2, #1
 800a6da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2202      	movs	r2, #2
 800a6e2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a6e6:	68fa      	ldr	r2, [r7, #12]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2134      	movs	r1, #52	; 0x34
 800a6ec:	fb01 f303 	mul.w	r3, r1, r3
 800a6f0:	4413      	add	r3, r2
 800a6f2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	4614      	mov	r4, r2
 800a6fa:	461d      	mov	r5, r3
 800a6fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a6fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a708:	682b      	ldr	r3, [r5, #0]
 800a70a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	68b9      	ldr	r1, [r7, #8]
 800a710:	68f8      	ldr	r0, [r7, #12]
 800a712:	f000 f811 	bl	800a738 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	2201      	movs	r2, #1
 800a71c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2201      	movs	r2, #1
 800a722:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2200      	movs	r2, #0
 800a72a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800a72e:	2300      	movs	r3, #0
}
 800a730:	4618      	mov	r0, r3
 800a732:	3710      	adds	r7, #16
 800a734:	46bd      	mov	sp, r7
 800a736:	bdb0      	pop	{r4, r5, r7, pc}

0800a738 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a738:	b480      	push	{r7}
 800a73a:	b089      	sub	sp, #36	; 0x24
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	60b9      	str	r1, [r7, #8]
 800a742:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	685a      	ldr	r2, [r3, #4]
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	68db      	ldr	r3, [r3, #12]
 800a74e:	0c1b      	lsrs	r3, r3, #16
 800a750:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a754:	4413      	add	r3, r2
 800a756:	041b      	lsls	r3, r3, #16
 800a758:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	461a      	mov	r2, r3
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	01db      	lsls	r3, r3, #7
 800a764:	4413      	add	r3, r2
 800a766:	3384      	adds	r3, #132	; 0x84
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	68fa      	ldr	r2, [r7, #12]
 800a76c:	6812      	ldr	r2, [r2, #0]
 800a76e:	4611      	mov	r1, r2
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	01d2      	lsls	r2, r2, #7
 800a774:	440a      	add	r2, r1
 800a776:	3284      	adds	r2, #132	; 0x84
 800a778:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a77c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	68db      	ldr	r3, [r3, #12]
 800a788:	0c1b      	lsrs	r3, r3, #16
 800a78a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a78e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a790:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4619      	mov	r1, r3
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	01db      	lsls	r3, r3, #7
 800a79c:	440b      	add	r3, r1
 800a79e:	3384      	adds	r3, #132	; 0x84
 800a7a0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a7a2:	69fb      	ldr	r3, [r7, #28]
 800a7a4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a7a6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	68da      	ldr	r2, [r3, #12]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	68db      	ldr	r3, [r3, #12]
 800a7b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a7b6:	4413      	add	r3, r2
 800a7b8:	041b      	lsls	r3, r3, #16
 800a7ba:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	01db      	lsls	r3, r3, #7
 800a7c6:	4413      	add	r3, r2
 800a7c8:	3384      	adds	r3, #132	; 0x84
 800a7ca:	689b      	ldr	r3, [r3, #8]
 800a7cc:	68fa      	ldr	r2, [r7, #12]
 800a7ce:	6812      	ldr	r2, [r2, #0]
 800a7d0:	4611      	mov	r1, r2
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	01d2      	lsls	r2, r2, #7
 800a7d6:	440a      	add	r2, r1
 800a7d8:	3284      	adds	r2, #132	; 0x84
 800a7da:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a7de:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	689a      	ldr	r2, [r3, #8]
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	68db      	ldr	r3, [r3, #12]
 800a7ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a7ee:	4413      	add	r3, r2
 800a7f0:	1c5a      	adds	r2, r3, #1
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	4619      	mov	r1, r3
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	01db      	lsls	r3, r3, #7
 800a7fc:	440b      	add	r3, r1
 800a7fe:	3384      	adds	r3, #132	; 0x84
 800a800:	4619      	mov	r1, r3
 800a802:	69fb      	ldr	r3, [r7, #28]
 800a804:	4313      	orrs	r3, r2
 800a806:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	461a      	mov	r2, r3
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	01db      	lsls	r3, r3, #7
 800a812:	4413      	add	r3, r2
 800a814:	3384      	adds	r3, #132	; 0x84
 800a816:	691b      	ldr	r3, [r3, #16]
 800a818:	68fa      	ldr	r2, [r7, #12]
 800a81a:	6812      	ldr	r2, [r2, #0]
 800a81c:	4611      	mov	r1, r2
 800a81e:	687a      	ldr	r2, [r7, #4]
 800a820:	01d2      	lsls	r2, r2, #7
 800a822:	440a      	add	r2, r1
 800a824:	3284      	adds	r2, #132	; 0x84
 800a826:	f023 0307 	bic.w	r3, r3, #7
 800a82a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	461a      	mov	r2, r3
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	01db      	lsls	r3, r3, #7
 800a836:	4413      	add	r3, r2
 800a838:	3384      	adds	r3, #132	; 0x84
 800a83a:	461a      	mov	r2, r3
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	691b      	ldr	r3, [r3, #16]
 800a840:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a848:	021b      	lsls	r3, r3, #8
 800a84a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a852:	041b      	lsls	r3, r3, #16
 800a854:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	699b      	ldr	r3, [r3, #24]
 800a85a:	061b      	lsls	r3, r3, #24
 800a85c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	461a      	mov	r2, r3
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	01db      	lsls	r3, r3, #7
 800a868:	4413      	add	r3, r2
 800a86a:	3384      	adds	r3, #132	; 0x84
 800a86c:	699b      	ldr	r3, [r3, #24]
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	461a      	mov	r2, r3
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	01db      	lsls	r3, r3, #7
 800a878:	4413      	add	r3, r2
 800a87a:	3384      	adds	r3, #132	; 0x84
 800a87c:	461a      	mov	r2, r3
 800a87e:	2300      	movs	r3, #0
 800a880:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a888:	461a      	mov	r2, r3
 800a88a:	69fb      	ldr	r3, [r7, #28]
 800a88c:	431a      	orrs	r2, r3
 800a88e:	69bb      	ldr	r3, [r7, #24]
 800a890:	431a      	orrs	r2, r3
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4619      	mov	r1, r3
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	01db      	lsls	r3, r3, #7
 800a89c:	440b      	add	r3, r1
 800a89e:	3384      	adds	r3, #132	; 0x84
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	01db      	lsls	r3, r3, #7
 800a8b2:	4413      	add	r3, r2
 800a8b4:	3384      	adds	r3, #132	; 0x84
 800a8b6:	695b      	ldr	r3, [r3, #20]
 800a8b8:	68fa      	ldr	r2, [r7, #12]
 800a8ba:	6812      	ldr	r2, [r2, #0]
 800a8bc:	4611      	mov	r1, r2
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	01d2      	lsls	r2, r2, #7
 800a8c2:	440a      	add	r2, r1
 800a8c4:	3284      	adds	r2, #132	; 0x84
 800a8c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a8ca:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	01db      	lsls	r3, r3, #7
 800a8d6:	4413      	add	r3, r2
 800a8d8:	3384      	adds	r3, #132	; 0x84
 800a8da:	461a      	mov	r2, r3
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	695b      	ldr	r3, [r3, #20]
 800a8e0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	01db      	lsls	r3, r3, #7
 800a8ec:	4413      	add	r3, r2
 800a8ee:	3384      	adds	r3, #132	; 0x84
 800a8f0:	69da      	ldr	r2, [r3, #28]
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4619      	mov	r1, r3
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	01db      	lsls	r3, r3, #7
 800a8fc:	440b      	add	r3, r1
 800a8fe:	3384      	adds	r3, #132	; 0x84
 800a900:	4619      	mov	r1, r3
 800a902:	4b58      	ldr	r3, [pc, #352]	; (800aa64 <LTDC_SetConfig+0x32c>)
 800a904:	4013      	ands	r3, r2
 800a906:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	69da      	ldr	r2, [r3, #28]
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	6a1b      	ldr	r3, [r3, #32]
 800a910:	68f9      	ldr	r1, [r7, #12]
 800a912:	6809      	ldr	r1, [r1, #0]
 800a914:	4608      	mov	r0, r1
 800a916:	6879      	ldr	r1, [r7, #4]
 800a918:	01c9      	lsls	r1, r1, #7
 800a91a:	4401      	add	r1, r0
 800a91c:	3184      	adds	r1, #132	; 0x84
 800a91e:	4313      	orrs	r3, r2
 800a920:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	461a      	mov	r2, r3
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	01db      	lsls	r3, r3, #7
 800a92c:	4413      	add	r3, r2
 800a92e:	3384      	adds	r3, #132	; 0x84
 800a930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	461a      	mov	r2, r3
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	01db      	lsls	r3, r3, #7
 800a93c:	4413      	add	r3, r2
 800a93e:	3384      	adds	r3, #132	; 0x84
 800a940:	461a      	mov	r2, r3
 800a942:	2300      	movs	r3, #0
 800a944:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	461a      	mov	r2, r3
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	01db      	lsls	r3, r3, #7
 800a950:	4413      	add	r3, r2
 800a952:	3384      	adds	r3, #132	; 0x84
 800a954:	461a      	mov	r2, r3
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a95a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	691b      	ldr	r3, [r3, #16]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d102      	bne.n	800a96a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800a964:	2304      	movs	r3, #4
 800a966:	61fb      	str	r3, [r7, #28]
 800a968:	e01b      	b.n	800a9a2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	691b      	ldr	r3, [r3, #16]
 800a96e:	2b01      	cmp	r3, #1
 800a970:	d102      	bne.n	800a978 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800a972:	2303      	movs	r3, #3
 800a974:	61fb      	str	r3, [r7, #28]
 800a976:	e014      	b.n	800a9a2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	691b      	ldr	r3, [r3, #16]
 800a97c:	2b04      	cmp	r3, #4
 800a97e:	d00b      	beq.n	800a998 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a984:	2b02      	cmp	r3, #2
 800a986:	d007      	beq.n	800a998 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a98c:	2b03      	cmp	r3, #3
 800a98e:	d003      	beq.n	800a998 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a994:	2b07      	cmp	r3, #7
 800a996:	d102      	bne.n	800a99e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800a998:	2302      	movs	r3, #2
 800a99a:	61fb      	str	r3, [r7, #28]
 800a99c:	e001      	b.n	800a9a2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	01db      	lsls	r3, r3, #7
 800a9ac:	4413      	add	r3, r2
 800a9ae:	3384      	adds	r3, #132	; 0x84
 800a9b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9b2:	68fa      	ldr	r2, [r7, #12]
 800a9b4:	6812      	ldr	r2, [r2, #0]
 800a9b6:	4611      	mov	r1, r2
 800a9b8:	687a      	ldr	r2, [r7, #4]
 800a9ba:	01d2      	lsls	r2, r2, #7
 800a9bc:	440a      	add	r2, r1
 800a9be:	3284      	adds	r2, #132	; 0x84
 800a9c0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800a9c4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ca:	69fa      	ldr	r2, [r7, #28]
 800a9cc:	fb02 f303 	mul.w	r3, r2, r3
 800a9d0:	041a      	lsls	r2, r3, #16
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	6859      	ldr	r1, [r3, #4]
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	1acb      	subs	r3, r1, r3
 800a9dc:	69f9      	ldr	r1, [r7, #28]
 800a9de:	fb01 f303 	mul.w	r3, r1, r3
 800a9e2:	3307      	adds	r3, #7
 800a9e4:	68f9      	ldr	r1, [r7, #12]
 800a9e6:	6809      	ldr	r1, [r1, #0]
 800a9e8:	4608      	mov	r0, r1
 800a9ea:	6879      	ldr	r1, [r7, #4]
 800a9ec:	01c9      	lsls	r1, r1, #7
 800a9ee:	4401      	add	r1, r0
 800a9f0:	3184      	adds	r1, #132	; 0x84
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	01db      	lsls	r3, r3, #7
 800aa00:	4413      	add	r3, r2
 800aa02:	3384      	adds	r3, #132	; 0x84
 800aa04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	4619      	mov	r1, r3
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	01db      	lsls	r3, r3, #7
 800aa10:	440b      	add	r3, r1
 800aa12:	3384      	adds	r3, #132	; 0x84
 800aa14:	4619      	mov	r1, r3
 800aa16:	4b14      	ldr	r3, [pc, #80]	; (800aa68 <LTDC_SetConfig+0x330>)
 800aa18:	4013      	ands	r3, r2
 800aa1a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	461a      	mov	r2, r3
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	01db      	lsls	r3, r3, #7
 800aa26:	4413      	add	r3, r2
 800aa28:	3384      	adds	r3, #132	; 0x84
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa30:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	461a      	mov	r2, r3
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	01db      	lsls	r3, r3, #7
 800aa3c:	4413      	add	r3, r2
 800aa3e:	3384      	adds	r3, #132	; 0x84
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	68fa      	ldr	r2, [r7, #12]
 800aa44:	6812      	ldr	r2, [r2, #0]
 800aa46:	4611      	mov	r1, r2
 800aa48:	687a      	ldr	r2, [r7, #4]
 800aa4a:	01d2      	lsls	r2, r2, #7
 800aa4c:	440a      	add	r2, r1
 800aa4e:	3284      	adds	r2, #132	; 0x84
 800aa50:	f043 0301 	orr.w	r3, r3, #1
 800aa54:	6013      	str	r3, [r2, #0]
}
 800aa56:	bf00      	nop
 800aa58:	3724      	adds	r7, #36	; 0x24
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr
 800aa62:	bf00      	nop
 800aa64:	fffff8f8 	.word	0xfffff8f8
 800aa68:	fffff800 	.word	0xfffff800

0800aa6c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 800aa70:	4b05      	ldr	r3, [pc, #20]	; (800aa88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4a04      	ldr	r2, [pc, #16]	; (800aa88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800aa76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa7a:	6013      	str	r3, [r2, #0]
}
 800aa7c:	bf00      	nop
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa84:	4770      	bx	lr
 800aa86:	bf00      	nop
 800aa88:	58024800 	.word	0x58024800

0800aa8c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b084      	sub	sp, #16
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800aa94:	4b29      	ldr	r3, [pc, #164]	; (800ab3c <HAL_PWREx_ConfigSupply+0xb0>)
 800aa96:	68db      	ldr	r3, [r3, #12]
 800aa98:	f003 0307 	and.w	r3, r3, #7
 800aa9c:	2b06      	cmp	r3, #6
 800aa9e:	d00a      	beq.n	800aab6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800aaa0:	4b26      	ldr	r3, [pc, #152]	; (800ab3c <HAL_PWREx_ConfigSupply+0xb0>)
 800aaa2:	68db      	ldr	r3, [r3, #12]
 800aaa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d001      	beq.n	800aab2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800aaae:	2301      	movs	r3, #1
 800aab0:	e040      	b.n	800ab34 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800aab2:	2300      	movs	r3, #0
 800aab4:	e03e      	b.n	800ab34 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800aab6:	4b21      	ldr	r3, [pc, #132]	; (800ab3c <HAL_PWREx_ConfigSupply+0xb0>)
 800aab8:	68db      	ldr	r3, [r3, #12]
 800aaba:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800aabe:	491f      	ldr	r1, [pc, #124]	; (800ab3c <HAL_PWREx_ConfigSupply+0xb0>)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	4313      	orrs	r3, r2
 800aac4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800aac6:	f7f9 fea1 	bl	800480c <HAL_GetTick>
 800aaca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800aacc:	e009      	b.n	800aae2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800aace:	f7f9 fe9d 	bl	800480c <HAL_GetTick>
 800aad2:	4602      	mov	r2, r0
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	1ad3      	subs	r3, r2, r3
 800aad8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aadc:	d901      	bls.n	800aae2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800aade:	2301      	movs	r3, #1
 800aae0:	e028      	b.n	800ab34 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800aae2:	4b16      	ldr	r3, [pc, #88]	; (800ab3c <HAL_PWREx_ConfigSupply+0xb0>)
 800aae4:	685b      	ldr	r3, [r3, #4]
 800aae6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aaea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aaee:	d1ee      	bne.n	800aace <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2b1e      	cmp	r3, #30
 800aaf4:	d008      	beq.n	800ab08 <HAL_PWREx_ConfigSupply+0x7c>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2b2e      	cmp	r3, #46	; 0x2e
 800aafa:	d005      	beq.n	800ab08 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2b1d      	cmp	r3, #29
 800ab00:	d002      	beq.n	800ab08 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2b2d      	cmp	r3, #45	; 0x2d
 800ab06:	d114      	bne.n	800ab32 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800ab08:	f7f9 fe80 	bl	800480c <HAL_GetTick>
 800ab0c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800ab0e:	e009      	b.n	800ab24 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800ab10:	f7f9 fe7c 	bl	800480c <HAL_GetTick>
 800ab14:	4602      	mov	r2, r0
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	1ad3      	subs	r3, r2, r3
 800ab1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ab1e:	d901      	bls.n	800ab24 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800ab20:	2301      	movs	r3, #1
 800ab22:	e007      	b.n	800ab34 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800ab24:	4b05      	ldr	r3, [pc, #20]	; (800ab3c <HAL_PWREx_ConfigSupply+0xb0>)
 800ab26:	68db      	ldr	r3, [r3, #12]
 800ab28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab30:	d1ee      	bne.n	800ab10 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800ab32:	2300      	movs	r3, #0
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3710      	adds	r7, #16
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	58024800 	.word	0x58024800

0800ab40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b08c      	sub	sp, #48	; 0x30
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d102      	bne.n	800ab54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800ab4e:	2301      	movs	r3, #1
 800ab50:	f000 bc1f 	b.w	800b392 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f003 0301 	and.w	r3, r3, #1
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	f000 80b3 	beq.w	800acc8 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ab62:	4b95      	ldr	r3, [pc, #596]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800ab64:	691b      	ldr	r3, [r3, #16]
 800ab66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ab6c:	4b92      	ldr	r3, [pc, #584]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800ab6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab70:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800ab72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab74:	2b10      	cmp	r3, #16
 800ab76:	d007      	beq.n	800ab88 <HAL_RCC_OscConfig+0x48>
 800ab78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab7a:	2b18      	cmp	r3, #24
 800ab7c:	d112      	bne.n	800aba4 <HAL_RCC_OscConfig+0x64>
 800ab7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab80:	f003 0303 	and.w	r3, r3, #3
 800ab84:	2b02      	cmp	r3, #2
 800ab86:	d10d      	bne.n	800aba4 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ab88:	4b8b      	ldr	r3, [pc, #556]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	f000 8098 	beq.w	800acc6 <HAL_RCC_OscConfig+0x186>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	f040 8093 	bne.w	800acc6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800aba0:	2301      	movs	r3, #1
 800aba2:	e3f6      	b.n	800b392 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	685b      	ldr	r3, [r3, #4]
 800aba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abac:	d106      	bne.n	800abbc <HAL_RCC_OscConfig+0x7c>
 800abae:	4b82      	ldr	r3, [pc, #520]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	4a81      	ldr	r2, [pc, #516]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800abb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800abb8:	6013      	str	r3, [r2, #0]
 800abba:	e058      	b.n	800ac6e <HAL_RCC_OscConfig+0x12e>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d112      	bne.n	800abea <HAL_RCC_OscConfig+0xaa>
 800abc4:	4b7c      	ldr	r3, [pc, #496]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	4a7b      	ldr	r2, [pc, #492]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800abca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800abce:	6013      	str	r3, [r2, #0]
 800abd0:	4b79      	ldr	r3, [pc, #484]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4a78      	ldr	r2, [pc, #480]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800abd6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800abda:	6013      	str	r3, [r2, #0]
 800abdc:	4b76      	ldr	r3, [pc, #472]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4a75      	ldr	r2, [pc, #468]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800abe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800abe6:	6013      	str	r3, [r2, #0]
 800abe8:	e041      	b.n	800ac6e <HAL_RCC_OscConfig+0x12e>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800abf2:	d112      	bne.n	800ac1a <HAL_RCC_OscConfig+0xda>
 800abf4:	4b70      	ldr	r3, [pc, #448]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4a6f      	ldr	r2, [pc, #444]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800abfa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800abfe:	6013      	str	r3, [r2, #0]
 800ac00:	4b6d      	ldr	r3, [pc, #436]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	4a6c      	ldr	r2, [pc, #432]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800ac06:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ac0a:	6013      	str	r3, [r2, #0]
 800ac0c:	4b6a      	ldr	r3, [pc, #424]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	4a69      	ldr	r2, [pc, #420]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800ac12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac16:	6013      	str	r3, [r2, #0]
 800ac18:	e029      	b.n	800ac6e <HAL_RCC_OscConfig+0x12e>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800ac22:	d112      	bne.n	800ac4a <HAL_RCC_OscConfig+0x10a>
 800ac24:	4b64      	ldr	r3, [pc, #400]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4a63      	ldr	r2, [pc, #396]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800ac2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ac2e:	6013      	str	r3, [r2, #0]
 800ac30:	4b61      	ldr	r3, [pc, #388]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4a60      	ldr	r2, [pc, #384]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800ac36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac3a:	6013      	str	r3, [r2, #0]
 800ac3c:	4b5e      	ldr	r3, [pc, #376]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	4a5d      	ldr	r2, [pc, #372]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800ac42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac46:	6013      	str	r3, [r2, #0]
 800ac48:	e011      	b.n	800ac6e <HAL_RCC_OscConfig+0x12e>
 800ac4a:	4b5b      	ldr	r3, [pc, #364]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4a5a      	ldr	r2, [pc, #360]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800ac50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac54:	6013      	str	r3, [r2, #0]
 800ac56:	4b58      	ldr	r3, [pc, #352]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4a57      	ldr	r2, [pc, #348]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800ac5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ac60:	6013      	str	r3, [r2, #0]
 800ac62:	4b55      	ldr	r3, [pc, #340]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	4a54      	ldr	r2, [pc, #336]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800ac68:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ac6c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d013      	beq.n	800ac9e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac76:	f7f9 fdc9 	bl	800480c <HAL_GetTick>
 800ac7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ac7c:	e008      	b.n	800ac90 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ac7e:	f7f9 fdc5 	bl	800480c <HAL_GetTick>
 800ac82:	4602      	mov	r2, r0
 800ac84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac86:	1ad3      	subs	r3, r2, r3
 800ac88:	2b64      	cmp	r3, #100	; 0x64
 800ac8a:	d901      	bls.n	800ac90 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800ac8c:	2303      	movs	r3, #3
 800ac8e:	e380      	b.n	800b392 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ac90:	4b49      	ldr	r3, [pc, #292]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d0f0      	beq.n	800ac7e <HAL_RCC_OscConfig+0x13e>
 800ac9c:	e014      	b.n	800acc8 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac9e:	f7f9 fdb5 	bl	800480c <HAL_GetTick>
 800aca2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800aca4:	e008      	b.n	800acb8 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aca6:	f7f9 fdb1 	bl	800480c <HAL_GetTick>
 800acaa:	4602      	mov	r2, r0
 800acac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acae:	1ad3      	subs	r3, r2, r3
 800acb0:	2b64      	cmp	r3, #100	; 0x64
 800acb2:	d901      	bls.n	800acb8 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800acb4:	2303      	movs	r3, #3
 800acb6:	e36c      	b.n	800b392 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800acb8:	4b3f      	ldr	r3, [pc, #252]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d1f0      	bne.n	800aca6 <HAL_RCC_OscConfig+0x166>
 800acc4:	e000      	b.n	800acc8 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800acc6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f003 0302 	and.w	r3, r3, #2
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	f000 808c 	beq.w	800adee <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800acd6:	4b38      	ldr	r3, [pc, #224]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800acd8:	691b      	ldr	r3, [r3, #16]
 800acda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800acde:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ace0:	4b35      	ldr	r3, [pc, #212]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800ace2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ace4:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ace6:	6a3b      	ldr	r3, [r7, #32]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d007      	beq.n	800acfc <HAL_RCC_OscConfig+0x1bc>
 800acec:	6a3b      	ldr	r3, [r7, #32]
 800acee:	2b18      	cmp	r3, #24
 800acf0:	d137      	bne.n	800ad62 <HAL_RCC_OscConfig+0x222>
 800acf2:	69fb      	ldr	r3, [r7, #28]
 800acf4:	f003 0303 	and.w	r3, r3, #3
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d132      	bne.n	800ad62 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800acfc:	4b2e      	ldr	r3, [pc, #184]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f003 0304 	and.w	r3, r3, #4
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d005      	beq.n	800ad14 <HAL_RCC_OscConfig+0x1d4>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	68db      	ldr	r3, [r3, #12]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d101      	bne.n	800ad14 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800ad10:	2301      	movs	r3, #1
 800ad12:	e33e      	b.n	800b392 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ad14:	4b28      	ldr	r3, [pc, #160]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f023 0219 	bic.w	r2, r3, #25
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	68db      	ldr	r3, [r3, #12]
 800ad20:	4925      	ldr	r1, [pc, #148]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800ad22:	4313      	orrs	r3, r2
 800ad24:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad26:	f7f9 fd71 	bl	800480c <HAL_GetTick>
 800ad2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ad2c:	e008      	b.n	800ad40 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ad2e:	f7f9 fd6d 	bl	800480c <HAL_GetTick>
 800ad32:	4602      	mov	r2, r0
 800ad34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad36:	1ad3      	subs	r3, r2, r3
 800ad38:	2b02      	cmp	r3, #2
 800ad3a:	d901      	bls.n	800ad40 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800ad3c:	2303      	movs	r3, #3
 800ad3e:	e328      	b.n	800b392 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ad40:	4b1d      	ldr	r3, [pc, #116]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f003 0304 	and.w	r3, r3, #4
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d0f0      	beq.n	800ad2e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ad4c:	4b1a      	ldr	r3, [pc, #104]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	691b      	ldr	r3, [r3, #16]
 800ad58:	061b      	lsls	r3, r3, #24
 800ad5a:	4917      	ldr	r1, [pc, #92]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ad60:	e045      	b.n	800adee <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	68db      	ldr	r3, [r3, #12]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d028      	beq.n	800adbc <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ad6a:	4b13      	ldr	r3, [pc, #76]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f023 0219 	bic.w	r2, r3, #25
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	68db      	ldr	r3, [r3, #12]
 800ad76:	4910      	ldr	r1, [pc, #64]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad7c:	f7f9 fd46 	bl	800480c <HAL_GetTick>
 800ad80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ad82:	e008      	b.n	800ad96 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ad84:	f7f9 fd42 	bl	800480c <HAL_GetTick>
 800ad88:	4602      	mov	r2, r0
 800ad8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8c:	1ad3      	subs	r3, r2, r3
 800ad8e:	2b02      	cmp	r3, #2
 800ad90:	d901      	bls.n	800ad96 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800ad92:	2303      	movs	r3, #3
 800ad94:	e2fd      	b.n	800b392 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ad96:	4b08      	ldr	r3, [pc, #32]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f003 0304 	and.w	r3, r3, #4
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d0f0      	beq.n	800ad84 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ada2:	4b05      	ldr	r3, [pc, #20]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	691b      	ldr	r3, [r3, #16]
 800adae:	061b      	lsls	r3, r3, #24
 800adb0:	4901      	ldr	r1, [pc, #4]	; (800adb8 <HAL_RCC_OscConfig+0x278>)
 800adb2:	4313      	orrs	r3, r2
 800adb4:	604b      	str	r3, [r1, #4]
 800adb6:	e01a      	b.n	800adee <HAL_RCC_OscConfig+0x2ae>
 800adb8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800adbc:	4b97      	ldr	r3, [pc, #604]	; (800b01c <HAL_RCC_OscConfig+0x4dc>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a96      	ldr	r2, [pc, #600]	; (800b01c <HAL_RCC_OscConfig+0x4dc>)
 800adc2:	f023 0301 	bic.w	r3, r3, #1
 800adc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adc8:	f7f9 fd20 	bl	800480c <HAL_GetTick>
 800adcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800adce:	e008      	b.n	800ade2 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800add0:	f7f9 fd1c 	bl	800480c <HAL_GetTick>
 800add4:	4602      	mov	r2, r0
 800add6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add8:	1ad3      	subs	r3, r2, r3
 800adda:	2b02      	cmp	r3, #2
 800addc:	d901      	bls.n	800ade2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800adde:	2303      	movs	r3, #3
 800ade0:	e2d7      	b.n	800b392 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ade2:	4b8e      	ldr	r3, [pc, #568]	; (800b01c <HAL_RCC_OscConfig+0x4dc>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f003 0304 	and.w	r3, r3, #4
 800adea:	2b00      	cmp	r3, #0
 800adec:	d1f0      	bne.n	800add0 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f003 0310 	and.w	r3, r3, #16
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d06a      	beq.n	800aed0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800adfa:	4b88      	ldr	r3, [pc, #544]	; (800b01c <HAL_RCC_OscConfig+0x4dc>)
 800adfc:	691b      	ldr	r3, [r3, #16]
 800adfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ae02:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ae04:	4b85      	ldr	r3, [pc, #532]	; (800b01c <HAL_RCC_OscConfig+0x4dc>)
 800ae06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae08:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ae0a:	69bb      	ldr	r3, [r7, #24]
 800ae0c:	2b08      	cmp	r3, #8
 800ae0e:	d007      	beq.n	800ae20 <HAL_RCC_OscConfig+0x2e0>
 800ae10:	69bb      	ldr	r3, [r7, #24]
 800ae12:	2b18      	cmp	r3, #24
 800ae14:	d11b      	bne.n	800ae4e <HAL_RCC_OscConfig+0x30e>
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	f003 0303 	and.w	r3, r3, #3
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	d116      	bne.n	800ae4e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ae20:	4b7e      	ldr	r3, [pc, #504]	; (800b01c <HAL_RCC_OscConfig+0x4dc>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d005      	beq.n	800ae38 <HAL_RCC_OscConfig+0x2f8>
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	69db      	ldr	r3, [r3, #28]
 800ae30:	2b80      	cmp	r3, #128	; 0x80
 800ae32:	d001      	beq.n	800ae38 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800ae34:	2301      	movs	r3, #1
 800ae36:	e2ac      	b.n	800b392 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ae38:	4b78      	ldr	r3, [pc, #480]	; (800b01c <HAL_RCC_OscConfig+0x4dc>)
 800ae3a:	68db      	ldr	r3, [r3, #12]
 800ae3c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6a1b      	ldr	r3, [r3, #32]
 800ae44:	061b      	lsls	r3, r3, #24
 800ae46:	4975      	ldr	r1, [pc, #468]	; (800b01c <HAL_RCC_OscConfig+0x4dc>)
 800ae48:	4313      	orrs	r3, r2
 800ae4a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ae4c:	e040      	b.n	800aed0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	69db      	ldr	r3, [r3, #28]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d023      	beq.n	800ae9e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800ae56:	4b71      	ldr	r3, [pc, #452]	; (800b01c <HAL_RCC_OscConfig+0x4dc>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4a70      	ldr	r2, [pc, #448]	; (800b01c <HAL_RCC_OscConfig+0x4dc>)
 800ae5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae62:	f7f9 fcd3 	bl	800480c <HAL_GetTick>
 800ae66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ae68:	e008      	b.n	800ae7c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ae6a:	f7f9 fccf 	bl	800480c <HAL_GetTick>
 800ae6e:	4602      	mov	r2, r0
 800ae70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae72:	1ad3      	subs	r3, r2, r3
 800ae74:	2b02      	cmp	r3, #2
 800ae76:	d901      	bls.n	800ae7c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800ae78:	2303      	movs	r3, #3
 800ae7a:	e28a      	b.n	800b392 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ae7c:	4b67      	ldr	r3, [pc, #412]	; (800b01c <HAL_RCC_OscConfig+0x4dc>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d0f0      	beq.n	800ae6a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ae88:	4b64      	ldr	r3, [pc, #400]	; (800b01c <HAL_RCC_OscConfig+0x4dc>)
 800ae8a:	68db      	ldr	r3, [r3, #12]
 800ae8c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6a1b      	ldr	r3, [r3, #32]
 800ae94:	061b      	lsls	r3, r3, #24
 800ae96:	4961      	ldr	r1, [pc, #388]	; (800b01c <HAL_RCC_OscConfig+0x4dc>)
 800ae98:	4313      	orrs	r3, r2
 800ae9a:	60cb      	str	r3, [r1, #12]
 800ae9c:	e018      	b.n	800aed0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800ae9e:	4b5f      	ldr	r3, [pc, #380]	; (800b01c <HAL_RCC_OscConfig+0x4dc>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	4a5e      	ldr	r2, [pc, #376]	; (800b01c <HAL_RCC_OscConfig+0x4dc>)
 800aea4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aea8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aeaa:	f7f9 fcaf 	bl	800480c <HAL_GetTick>
 800aeae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800aeb0:	e008      	b.n	800aec4 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800aeb2:	f7f9 fcab 	bl	800480c <HAL_GetTick>
 800aeb6:	4602      	mov	r2, r0
 800aeb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeba:	1ad3      	subs	r3, r2, r3
 800aebc:	2b02      	cmp	r3, #2
 800aebe:	d901      	bls.n	800aec4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800aec0:	2303      	movs	r3, #3
 800aec2:	e266      	b.n	800b392 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800aec4:	4b55      	ldr	r3, [pc, #340]	; (800b01c <HAL_RCC_OscConfig+0x4dc>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d1f0      	bne.n	800aeb2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f003 0308 	and.w	r3, r3, #8
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d036      	beq.n	800af4a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	695b      	ldr	r3, [r3, #20]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d019      	beq.n	800af18 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aee4:	4b4d      	ldr	r3, [pc, #308]	; (800b01c <HAL_RCC_OscConfig+0x4dc>)
 800aee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aee8:	4a4c      	ldr	r2, [pc, #304]	; (800b01c <HAL_RCC_OscConfig+0x4dc>)
 800aeea:	f043 0301 	orr.w	r3, r3, #1
 800aeee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aef0:	f7f9 fc8c 	bl	800480c <HAL_GetTick>
 800aef4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800aef6:	e008      	b.n	800af0a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aef8:	f7f9 fc88 	bl	800480c <HAL_GetTick>
 800aefc:	4602      	mov	r2, r0
 800aefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af00:	1ad3      	subs	r3, r2, r3
 800af02:	2b02      	cmp	r3, #2
 800af04:	d901      	bls.n	800af0a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800af06:	2303      	movs	r3, #3
 800af08:	e243      	b.n	800b392 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800af0a:	4b44      	ldr	r3, [pc, #272]	; (800b01c <HAL_RCC_OscConfig+0x4dc>)
 800af0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af0e:	f003 0302 	and.w	r3, r3, #2
 800af12:	2b00      	cmp	r3, #0
 800af14:	d0f0      	beq.n	800aef8 <HAL_RCC_OscConfig+0x3b8>
 800af16:	e018      	b.n	800af4a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800af18:	4b40      	ldr	r3, [pc, #256]	; (800b01c <HAL_RCC_OscConfig+0x4dc>)
 800af1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af1c:	4a3f      	ldr	r2, [pc, #252]	; (800b01c <HAL_RCC_OscConfig+0x4dc>)
 800af1e:	f023 0301 	bic.w	r3, r3, #1
 800af22:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af24:	f7f9 fc72 	bl	800480c <HAL_GetTick>
 800af28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800af2a:	e008      	b.n	800af3e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800af2c:	f7f9 fc6e 	bl	800480c <HAL_GetTick>
 800af30:	4602      	mov	r2, r0
 800af32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af34:	1ad3      	subs	r3, r2, r3
 800af36:	2b02      	cmp	r3, #2
 800af38:	d901      	bls.n	800af3e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800af3a:	2303      	movs	r3, #3
 800af3c:	e229      	b.n	800b392 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800af3e:	4b37      	ldr	r3, [pc, #220]	; (800b01c <HAL_RCC_OscConfig+0x4dc>)
 800af40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af42:	f003 0302 	and.w	r3, r3, #2
 800af46:	2b00      	cmp	r3, #0
 800af48:	d1f0      	bne.n	800af2c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f003 0320 	and.w	r3, r3, #32
 800af52:	2b00      	cmp	r3, #0
 800af54:	d036      	beq.n	800afc4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	699b      	ldr	r3, [r3, #24]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d019      	beq.n	800af92 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800af5e:	4b2f      	ldr	r3, [pc, #188]	; (800b01c <HAL_RCC_OscConfig+0x4dc>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	4a2e      	ldr	r2, [pc, #184]	; (800b01c <HAL_RCC_OscConfig+0x4dc>)
 800af64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800af68:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800af6a:	f7f9 fc4f 	bl	800480c <HAL_GetTick>
 800af6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800af70:	e008      	b.n	800af84 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800af72:	f7f9 fc4b 	bl	800480c <HAL_GetTick>
 800af76:	4602      	mov	r2, r0
 800af78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af7a:	1ad3      	subs	r3, r2, r3
 800af7c:	2b02      	cmp	r3, #2
 800af7e:	d901      	bls.n	800af84 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800af80:	2303      	movs	r3, #3
 800af82:	e206      	b.n	800b392 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800af84:	4b25      	ldr	r3, [pc, #148]	; (800b01c <HAL_RCC_OscConfig+0x4dc>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d0f0      	beq.n	800af72 <HAL_RCC_OscConfig+0x432>
 800af90:	e018      	b.n	800afc4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800af92:	4b22      	ldr	r3, [pc, #136]	; (800b01c <HAL_RCC_OscConfig+0x4dc>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	4a21      	ldr	r2, [pc, #132]	; (800b01c <HAL_RCC_OscConfig+0x4dc>)
 800af98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af9c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800af9e:	f7f9 fc35 	bl	800480c <HAL_GetTick>
 800afa2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800afa4:	e008      	b.n	800afb8 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800afa6:	f7f9 fc31 	bl	800480c <HAL_GetTick>
 800afaa:	4602      	mov	r2, r0
 800afac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afae:	1ad3      	subs	r3, r2, r3
 800afb0:	2b02      	cmp	r3, #2
 800afb2:	d901      	bls.n	800afb8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800afb4:	2303      	movs	r3, #3
 800afb6:	e1ec      	b.n	800b392 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800afb8:	4b18      	ldr	r3, [pc, #96]	; (800b01c <HAL_RCC_OscConfig+0x4dc>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d1f0      	bne.n	800afa6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f003 0304 	and.w	r3, r3, #4
 800afcc:	2b00      	cmp	r3, #0
 800afce:	f000 80af 	beq.w	800b130 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800afd2:	4b13      	ldr	r3, [pc, #76]	; (800b020 <HAL_RCC_OscConfig+0x4e0>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4a12      	ldr	r2, [pc, #72]	; (800b020 <HAL_RCC_OscConfig+0x4e0>)
 800afd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800afdc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800afde:	f7f9 fc15 	bl	800480c <HAL_GetTick>
 800afe2:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800afe4:	e008      	b.n	800aff8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800afe6:	f7f9 fc11 	bl	800480c <HAL_GetTick>
 800afea:	4602      	mov	r2, r0
 800afec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afee:	1ad3      	subs	r3, r2, r3
 800aff0:	2b64      	cmp	r3, #100	; 0x64
 800aff2:	d901      	bls.n	800aff8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800aff4:	2303      	movs	r3, #3
 800aff6:	e1cc      	b.n	800b392 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aff8:	4b09      	ldr	r3, [pc, #36]	; (800b020 <HAL_RCC_OscConfig+0x4e0>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b000:	2b00      	cmp	r3, #0
 800b002:	d0f0      	beq.n	800afe6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	689b      	ldr	r3, [r3, #8]
 800b008:	2b01      	cmp	r3, #1
 800b00a:	d10b      	bne.n	800b024 <HAL_RCC_OscConfig+0x4e4>
 800b00c:	4b03      	ldr	r3, [pc, #12]	; (800b01c <HAL_RCC_OscConfig+0x4dc>)
 800b00e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b010:	4a02      	ldr	r2, [pc, #8]	; (800b01c <HAL_RCC_OscConfig+0x4dc>)
 800b012:	f043 0301 	orr.w	r3, r3, #1
 800b016:	6713      	str	r3, [r2, #112]	; 0x70
 800b018:	e05b      	b.n	800b0d2 <HAL_RCC_OscConfig+0x592>
 800b01a:	bf00      	nop
 800b01c:	58024400 	.word	0x58024400
 800b020:	58024800 	.word	0x58024800
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	689b      	ldr	r3, [r3, #8]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d112      	bne.n	800b052 <HAL_RCC_OscConfig+0x512>
 800b02c:	4b9d      	ldr	r3, [pc, #628]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b02e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b030:	4a9c      	ldr	r2, [pc, #624]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b032:	f023 0301 	bic.w	r3, r3, #1
 800b036:	6713      	str	r3, [r2, #112]	; 0x70
 800b038:	4b9a      	ldr	r3, [pc, #616]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b03a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b03c:	4a99      	ldr	r2, [pc, #612]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b03e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b042:	6713      	str	r3, [r2, #112]	; 0x70
 800b044:	4b97      	ldr	r3, [pc, #604]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b048:	4a96      	ldr	r2, [pc, #600]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b04a:	f023 0304 	bic.w	r3, r3, #4
 800b04e:	6713      	str	r3, [r2, #112]	; 0x70
 800b050:	e03f      	b.n	800b0d2 <HAL_RCC_OscConfig+0x592>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	689b      	ldr	r3, [r3, #8]
 800b056:	2b05      	cmp	r3, #5
 800b058:	d112      	bne.n	800b080 <HAL_RCC_OscConfig+0x540>
 800b05a:	4b92      	ldr	r3, [pc, #584]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b05c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b05e:	4a91      	ldr	r2, [pc, #580]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b060:	f043 0304 	orr.w	r3, r3, #4
 800b064:	6713      	str	r3, [r2, #112]	; 0x70
 800b066:	4b8f      	ldr	r3, [pc, #572]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b06a:	4a8e      	ldr	r2, [pc, #568]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b06c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b070:	6713      	str	r3, [r2, #112]	; 0x70
 800b072:	4b8c      	ldr	r3, [pc, #560]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b076:	4a8b      	ldr	r2, [pc, #556]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b078:	f043 0301 	orr.w	r3, r3, #1
 800b07c:	6713      	str	r3, [r2, #112]	; 0x70
 800b07e:	e028      	b.n	800b0d2 <HAL_RCC_OscConfig+0x592>
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	689b      	ldr	r3, [r3, #8]
 800b084:	2b85      	cmp	r3, #133	; 0x85
 800b086:	d112      	bne.n	800b0ae <HAL_RCC_OscConfig+0x56e>
 800b088:	4b86      	ldr	r3, [pc, #536]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b08a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b08c:	4a85      	ldr	r2, [pc, #532]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b08e:	f043 0304 	orr.w	r3, r3, #4
 800b092:	6713      	str	r3, [r2, #112]	; 0x70
 800b094:	4b83      	ldr	r3, [pc, #524]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b098:	4a82      	ldr	r2, [pc, #520]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b09a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b09e:	6713      	str	r3, [r2, #112]	; 0x70
 800b0a0:	4b80      	ldr	r3, [pc, #512]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b0a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0a4:	4a7f      	ldr	r2, [pc, #508]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b0a6:	f043 0301 	orr.w	r3, r3, #1
 800b0aa:	6713      	str	r3, [r2, #112]	; 0x70
 800b0ac:	e011      	b.n	800b0d2 <HAL_RCC_OscConfig+0x592>
 800b0ae:	4b7d      	ldr	r3, [pc, #500]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b0b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0b2:	4a7c      	ldr	r2, [pc, #496]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b0b4:	f023 0301 	bic.w	r3, r3, #1
 800b0b8:	6713      	str	r3, [r2, #112]	; 0x70
 800b0ba:	4b7a      	ldr	r3, [pc, #488]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b0bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0be:	4a79      	ldr	r2, [pc, #484]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b0c0:	f023 0304 	bic.w	r3, r3, #4
 800b0c4:	6713      	str	r3, [r2, #112]	; 0x70
 800b0c6:	4b77      	ldr	r3, [pc, #476]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b0c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0ca:	4a76      	ldr	r2, [pc, #472]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b0cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	689b      	ldr	r3, [r3, #8]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d015      	beq.n	800b106 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b0da:	f7f9 fb97 	bl	800480c <HAL_GetTick>
 800b0de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b0e0:	e00a      	b.n	800b0f8 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b0e2:	f7f9 fb93 	bl	800480c <HAL_GetTick>
 800b0e6:	4602      	mov	r2, r0
 800b0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ea:	1ad3      	subs	r3, r2, r3
 800b0ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d901      	bls.n	800b0f8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800b0f4:	2303      	movs	r3, #3
 800b0f6:	e14c      	b.n	800b392 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b0f8:	4b6a      	ldr	r3, [pc, #424]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b0fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0fc:	f003 0302 	and.w	r3, r3, #2
 800b100:	2b00      	cmp	r3, #0
 800b102:	d0ee      	beq.n	800b0e2 <HAL_RCC_OscConfig+0x5a2>
 800b104:	e014      	b.n	800b130 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b106:	f7f9 fb81 	bl	800480c <HAL_GetTick>
 800b10a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b10c:	e00a      	b.n	800b124 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b10e:	f7f9 fb7d 	bl	800480c <HAL_GetTick>
 800b112:	4602      	mov	r2, r0
 800b114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b116:	1ad3      	subs	r3, r2, r3
 800b118:	f241 3288 	movw	r2, #5000	; 0x1388
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d901      	bls.n	800b124 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800b120:	2303      	movs	r3, #3
 800b122:	e136      	b.n	800b392 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b124:	4b5f      	ldr	r3, [pc, #380]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b128:	f003 0302 	and.w	r3, r3, #2
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d1ee      	bne.n	800b10e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b134:	2b00      	cmp	r3, #0
 800b136:	f000 812b 	beq.w	800b390 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b13a:	4b5a      	ldr	r3, [pc, #360]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b13c:	691b      	ldr	r3, [r3, #16]
 800b13e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b142:	2b18      	cmp	r3, #24
 800b144:	f000 80bb 	beq.w	800b2be <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b14c:	2b02      	cmp	r3, #2
 800b14e:	f040 8095 	bne.w	800b27c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b152:	4b54      	ldr	r3, [pc, #336]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	4a53      	ldr	r2, [pc, #332]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b158:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b15c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b15e:	f7f9 fb55 	bl	800480c <HAL_GetTick>
 800b162:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b164:	e008      	b.n	800b178 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b166:	f7f9 fb51 	bl	800480c <HAL_GetTick>
 800b16a:	4602      	mov	r2, r0
 800b16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b16e:	1ad3      	subs	r3, r2, r3
 800b170:	2b02      	cmp	r3, #2
 800b172:	d901      	bls.n	800b178 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800b174:	2303      	movs	r3, #3
 800b176:	e10c      	b.n	800b392 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b178:	4b4a      	ldr	r3, [pc, #296]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b180:	2b00      	cmp	r3, #0
 800b182:	d1f0      	bne.n	800b166 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b184:	4b47      	ldr	r3, [pc, #284]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b186:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b188:	4b47      	ldr	r3, [pc, #284]	; (800b2a8 <HAL_RCC_OscConfig+0x768>)
 800b18a:	4013      	ands	r3, r2
 800b18c:	687a      	ldr	r2, [r7, #4]
 800b18e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800b190:	687a      	ldr	r2, [r7, #4]
 800b192:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b194:	0112      	lsls	r2, r2, #4
 800b196:	430a      	orrs	r2, r1
 800b198:	4942      	ldr	r1, [pc, #264]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b19a:	4313      	orrs	r3, r2
 800b19c:	628b      	str	r3, [r1, #40]	; 0x28
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1a2:	3b01      	subs	r3, #1
 800b1a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1ac:	3b01      	subs	r3, #1
 800b1ae:	025b      	lsls	r3, r3, #9
 800b1b0:	b29b      	uxth	r3, r3
 800b1b2:	431a      	orrs	r2, r3
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1b8:	3b01      	subs	r3, #1
 800b1ba:	041b      	lsls	r3, r3, #16
 800b1bc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b1c0:	431a      	orrs	r2, r3
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1c6:	3b01      	subs	r3, #1
 800b1c8:	061b      	lsls	r3, r3, #24
 800b1ca:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b1ce:	4935      	ldr	r1, [pc, #212]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b1d0:	4313      	orrs	r3, r2
 800b1d2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800b1d4:	4b33      	ldr	r3, [pc, #204]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b1d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1d8:	4a32      	ldr	r2, [pc, #200]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b1da:	f023 0301 	bic.w	r3, r3, #1
 800b1de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b1e0:	4b30      	ldr	r3, [pc, #192]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b1e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b1e4:	4b31      	ldr	r3, [pc, #196]	; (800b2ac <HAL_RCC_OscConfig+0x76c>)
 800b1e6:	4013      	ands	r3, r2
 800b1e8:	687a      	ldr	r2, [r7, #4]
 800b1ea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b1ec:	00d2      	lsls	r2, r2, #3
 800b1ee:	492d      	ldr	r1, [pc, #180]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b1f4:	4b2b      	ldr	r3, [pc, #172]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f8:	f023 020c 	bic.w	r2, r3, #12
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b200:	4928      	ldr	r1, [pc, #160]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b202:	4313      	orrs	r3, r2
 800b204:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b206:	4b27      	ldr	r3, [pc, #156]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b20a:	f023 0202 	bic.w	r2, r3, #2
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b212:	4924      	ldr	r1, [pc, #144]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b214:	4313      	orrs	r3, r2
 800b216:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b218:	4b22      	ldr	r3, [pc, #136]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b21a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b21c:	4a21      	ldr	r2, [pc, #132]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b21e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b222:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b224:	4b1f      	ldr	r3, [pc, #124]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b228:	4a1e      	ldr	r2, [pc, #120]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b22a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b22e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b230:	4b1c      	ldr	r3, [pc, #112]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b234:	4a1b      	ldr	r2, [pc, #108]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b236:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b23a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800b23c:	4b19      	ldr	r3, [pc, #100]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b23e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b240:	4a18      	ldr	r2, [pc, #96]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b242:	f043 0301 	orr.w	r3, r3, #1
 800b246:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b248:	4b16      	ldr	r3, [pc, #88]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	4a15      	ldr	r2, [pc, #84]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b24e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b252:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b254:	f7f9 fada 	bl	800480c <HAL_GetTick>
 800b258:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b25a:	e008      	b.n	800b26e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b25c:	f7f9 fad6 	bl	800480c <HAL_GetTick>
 800b260:	4602      	mov	r2, r0
 800b262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b264:	1ad3      	subs	r3, r2, r3
 800b266:	2b02      	cmp	r3, #2
 800b268:	d901      	bls.n	800b26e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800b26a:	2303      	movs	r3, #3
 800b26c:	e091      	b.n	800b392 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b26e:	4b0d      	ldr	r3, [pc, #52]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b276:	2b00      	cmp	r3, #0
 800b278:	d0f0      	beq.n	800b25c <HAL_RCC_OscConfig+0x71c>
 800b27a:	e089      	b.n	800b390 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b27c:	4b09      	ldr	r3, [pc, #36]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4a08      	ldr	r2, [pc, #32]	; (800b2a4 <HAL_RCC_OscConfig+0x764>)
 800b282:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b286:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b288:	f7f9 fac0 	bl	800480c <HAL_GetTick>
 800b28c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b28e:	e00f      	b.n	800b2b0 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b290:	f7f9 fabc 	bl	800480c <HAL_GetTick>
 800b294:	4602      	mov	r2, r0
 800b296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b298:	1ad3      	subs	r3, r2, r3
 800b29a:	2b02      	cmp	r3, #2
 800b29c:	d908      	bls.n	800b2b0 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800b29e:	2303      	movs	r3, #3
 800b2a0:	e077      	b.n	800b392 <HAL_RCC_OscConfig+0x852>
 800b2a2:	bf00      	nop
 800b2a4:	58024400 	.word	0x58024400
 800b2a8:	fffffc0c 	.word	0xfffffc0c
 800b2ac:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b2b0:	4b3a      	ldr	r3, [pc, #232]	; (800b39c <HAL_RCC_OscConfig+0x85c>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d1e9      	bne.n	800b290 <HAL_RCC_OscConfig+0x750>
 800b2bc:	e068      	b.n	800b390 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b2be:	4b37      	ldr	r3, [pc, #220]	; (800b39c <HAL_RCC_OscConfig+0x85c>)
 800b2c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2c2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b2c4:	4b35      	ldr	r3, [pc, #212]	; (800b39c <HAL_RCC_OscConfig+0x85c>)
 800b2c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2c8:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ce:	2b01      	cmp	r3, #1
 800b2d0:	d031      	beq.n	800b336 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	f003 0203 	and.w	r2, r3, #3
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	d12a      	bne.n	800b336 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	091b      	lsrs	r3, r3, #4
 800b2e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d122      	bne.n	800b336 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2fa:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d11a      	bne.n	800b336 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	0a5b      	lsrs	r3, r3, #9
 800b304:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b30c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b30e:	429a      	cmp	r2, r3
 800b310:	d111      	bne.n	800b336 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	0c1b      	lsrs	r3, r3, #16
 800b316:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b31e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b320:	429a      	cmp	r2, r3
 800b322:	d108      	bne.n	800b336 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	0e1b      	lsrs	r3, r3, #24
 800b328:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b330:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b332:	429a      	cmp	r2, r3
 800b334:	d001      	beq.n	800b33a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800b336:	2301      	movs	r3, #1
 800b338:	e02b      	b.n	800b392 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b33a:	4b18      	ldr	r3, [pc, #96]	; (800b39c <HAL_RCC_OscConfig+0x85c>)
 800b33c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b33e:	08db      	lsrs	r3, r3, #3
 800b340:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b344:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b34a:	693a      	ldr	r2, [r7, #16]
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d01f      	beq.n	800b390 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800b350:	4b12      	ldr	r3, [pc, #72]	; (800b39c <HAL_RCC_OscConfig+0x85c>)
 800b352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b354:	4a11      	ldr	r2, [pc, #68]	; (800b39c <HAL_RCC_OscConfig+0x85c>)
 800b356:	f023 0301 	bic.w	r3, r3, #1
 800b35a:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b35c:	f7f9 fa56 	bl	800480c <HAL_GetTick>
 800b360:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b362:	bf00      	nop
 800b364:	f7f9 fa52 	bl	800480c <HAL_GetTick>
 800b368:	4602      	mov	r2, r0
 800b36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d0f9      	beq.n	800b364 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b370:	4b0a      	ldr	r3, [pc, #40]	; (800b39c <HAL_RCC_OscConfig+0x85c>)
 800b372:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b374:	4b0a      	ldr	r3, [pc, #40]	; (800b3a0 <HAL_RCC_OscConfig+0x860>)
 800b376:	4013      	ands	r3, r2
 800b378:	687a      	ldr	r2, [r7, #4]
 800b37a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b37c:	00d2      	lsls	r2, r2, #3
 800b37e:	4907      	ldr	r1, [pc, #28]	; (800b39c <HAL_RCC_OscConfig+0x85c>)
 800b380:	4313      	orrs	r3, r2
 800b382:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800b384:	4b05      	ldr	r3, [pc, #20]	; (800b39c <HAL_RCC_OscConfig+0x85c>)
 800b386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b388:	4a04      	ldr	r2, [pc, #16]	; (800b39c <HAL_RCC_OscConfig+0x85c>)
 800b38a:	f043 0301 	orr.w	r3, r3, #1
 800b38e:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800b390:	2300      	movs	r3, #0
}
 800b392:	4618      	mov	r0, r3
 800b394:	3730      	adds	r7, #48	; 0x30
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}
 800b39a:	bf00      	nop
 800b39c:	58024400 	.word	0x58024400
 800b3a0:	ffff0007 	.word	0xffff0007

0800b3a4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b086      	sub	sp, #24
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d101      	bne.n	800b3b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	e19c      	b.n	800b6f2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b3b8:	4b8a      	ldr	r3, [pc, #552]	; (800b5e4 <HAL_RCC_ClockConfig+0x240>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f003 030f 	and.w	r3, r3, #15
 800b3c0:	683a      	ldr	r2, [r7, #0]
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d910      	bls.n	800b3e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b3c6:	4b87      	ldr	r3, [pc, #540]	; (800b5e4 <HAL_RCC_ClockConfig+0x240>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f023 020f 	bic.w	r2, r3, #15
 800b3ce:	4985      	ldr	r1, [pc, #532]	; (800b5e4 <HAL_RCC_ClockConfig+0x240>)
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b3d6:	4b83      	ldr	r3, [pc, #524]	; (800b5e4 <HAL_RCC_ClockConfig+0x240>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f003 030f 	and.w	r3, r3, #15
 800b3de:	683a      	ldr	r2, [r7, #0]
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d001      	beq.n	800b3e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	e184      	b.n	800b6f2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f003 0304 	and.w	r3, r3, #4
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d010      	beq.n	800b416 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	691a      	ldr	r2, [r3, #16]
 800b3f8:	4b7b      	ldr	r3, [pc, #492]	; (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b3fa:	699b      	ldr	r3, [r3, #24]
 800b3fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b400:	429a      	cmp	r2, r3
 800b402:	d908      	bls.n	800b416 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b404:	4b78      	ldr	r3, [pc, #480]	; (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b406:	699b      	ldr	r3, [r3, #24]
 800b408:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	691b      	ldr	r3, [r3, #16]
 800b410:	4975      	ldr	r1, [pc, #468]	; (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b412:	4313      	orrs	r3, r2
 800b414:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f003 0308 	and.w	r3, r3, #8
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d010      	beq.n	800b444 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	695a      	ldr	r2, [r3, #20]
 800b426:	4b70      	ldr	r3, [pc, #448]	; (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b428:	69db      	ldr	r3, [r3, #28]
 800b42a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b42e:	429a      	cmp	r2, r3
 800b430:	d908      	bls.n	800b444 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b432:	4b6d      	ldr	r3, [pc, #436]	; (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b434:	69db      	ldr	r3, [r3, #28]
 800b436:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	695b      	ldr	r3, [r3, #20]
 800b43e:	496a      	ldr	r1, [pc, #424]	; (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b440:	4313      	orrs	r3, r2
 800b442:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f003 0310 	and.w	r3, r3, #16
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d010      	beq.n	800b472 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	699a      	ldr	r2, [r3, #24]
 800b454:	4b64      	ldr	r3, [pc, #400]	; (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b456:	69db      	ldr	r3, [r3, #28]
 800b458:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d908      	bls.n	800b472 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b460:	4b61      	ldr	r3, [pc, #388]	; (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b462:	69db      	ldr	r3, [r3, #28]
 800b464:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	699b      	ldr	r3, [r3, #24]
 800b46c:	495e      	ldr	r1, [pc, #376]	; (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b46e:	4313      	orrs	r3, r2
 800b470:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f003 0320 	and.w	r3, r3, #32
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d010      	beq.n	800b4a0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	69da      	ldr	r2, [r3, #28]
 800b482:	4b59      	ldr	r3, [pc, #356]	; (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b484:	6a1b      	ldr	r3, [r3, #32]
 800b486:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b48a:	429a      	cmp	r2, r3
 800b48c:	d908      	bls.n	800b4a0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b48e:	4b56      	ldr	r3, [pc, #344]	; (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b490:	6a1b      	ldr	r3, [r3, #32]
 800b492:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	69db      	ldr	r3, [r3, #28]
 800b49a:	4953      	ldr	r1, [pc, #332]	; (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b49c:	4313      	orrs	r3, r2
 800b49e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f003 0302 	and.w	r3, r3, #2
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d010      	beq.n	800b4ce <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	68da      	ldr	r2, [r3, #12]
 800b4b0:	4b4d      	ldr	r3, [pc, #308]	; (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b4b2:	699b      	ldr	r3, [r3, #24]
 800b4b4:	f003 030f 	and.w	r3, r3, #15
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	d908      	bls.n	800b4ce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b4bc:	4b4a      	ldr	r3, [pc, #296]	; (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b4be:	699b      	ldr	r3, [r3, #24]
 800b4c0:	f023 020f 	bic.w	r2, r3, #15
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	68db      	ldr	r3, [r3, #12]
 800b4c8:	4947      	ldr	r1, [pc, #284]	; (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b4ca:	4313      	orrs	r3, r2
 800b4cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f003 0301 	and.w	r3, r3, #1
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d055      	beq.n	800b586 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b4da:	4b43      	ldr	r3, [pc, #268]	; (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b4dc:	699b      	ldr	r3, [r3, #24]
 800b4de:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	689b      	ldr	r3, [r3, #8]
 800b4e6:	4940      	ldr	r1, [pc, #256]	; (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	2b02      	cmp	r3, #2
 800b4f2:	d107      	bne.n	800b504 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b4f4:	4b3c      	ldr	r3, [pc, #240]	; (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d121      	bne.n	800b544 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b500:	2301      	movs	r3, #1
 800b502:	e0f6      	b.n	800b6f2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	2b03      	cmp	r3, #3
 800b50a:	d107      	bne.n	800b51c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b50c:	4b36      	ldr	r3, [pc, #216]	; (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b514:	2b00      	cmp	r3, #0
 800b516:	d115      	bne.n	800b544 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b518:	2301      	movs	r3, #1
 800b51a:	e0ea      	b.n	800b6f2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	685b      	ldr	r3, [r3, #4]
 800b520:	2b01      	cmp	r3, #1
 800b522:	d107      	bne.n	800b534 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b524:	4b30      	ldr	r3, [pc, #192]	; (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d109      	bne.n	800b544 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b530:	2301      	movs	r3, #1
 800b532:	e0de      	b.n	800b6f2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b534:	4b2c      	ldr	r3, [pc, #176]	; (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f003 0304 	and.w	r3, r3, #4
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d101      	bne.n	800b544 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b540:	2301      	movs	r3, #1
 800b542:	e0d6      	b.n	800b6f2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b544:	4b28      	ldr	r3, [pc, #160]	; (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b546:	691b      	ldr	r3, [r3, #16]
 800b548:	f023 0207 	bic.w	r2, r3, #7
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	685b      	ldr	r3, [r3, #4]
 800b550:	4925      	ldr	r1, [pc, #148]	; (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b552:	4313      	orrs	r3, r2
 800b554:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b556:	f7f9 f959 	bl	800480c <HAL_GetTick>
 800b55a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b55c:	e00a      	b.n	800b574 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b55e:	f7f9 f955 	bl	800480c <HAL_GetTick>
 800b562:	4602      	mov	r2, r0
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	1ad3      	subs	r3, r2, r3
 800b568:	f241 3288 	movw	r2, #5000	; 0x1388
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d901      	bls.n	800b574 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b570:	2303      	movs	r3, #3
 800b572:	e0be      	b.n	800b6f2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b574:	4b1c      	ldr	r3, [pc, #112]	; (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b576:	691b      	ldr	r3, [r3, #16]
 800b578:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	00db      	lsls	r3, r3, #3
 800b582:	429a      	cmp	r2, r3
 800b584:	d1eb      	bne.n	800b55e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f003 0302 	and.w	r3, r3, #2
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d010      	beq.n	800b5b4 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	68da      	ldr	r2, [r3, #12]
 800b596:	4b14      	ldr	r3, [pc, #80]	; (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b598:	699b      	ldr	r3, [r3, #24]
 800b59a:	f003 030f 	and.w	r3, r3, #15
 800b59e:	429a      	cmp	r2, r3
 800b5a0:	d208      	bcs.n	800b5b4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b5a2:	4b11      	ldr	r3, [pc, #68]	; (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b5a4:	699b      	ldr	r3, [r3, #24]
 800b5a6:	f023 020f 	bic.w	r2, r3, #15
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	68db      	ldr	r3, [r3, #12]
 800b5ae:	490e      	ldr	r1, [pc, #56]	; (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b5b0:	4313      	orrs	r3, r2
 800b5b2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b5b4:	4b0b      	ldr	r3, [pc, #44]	; (800b5e4 <HAL_RCC_ClockConfig+0x240>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f003 030f 	and.w	r3, r3, #15
 800b5bc:	683a      	ldr	r2, [r7, #0]
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d214      	bcs.n	800b5ec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b5c2:	4b08      	ldr	r3, [pc, #32]	; (800b5e4 <HAL_RCC_ClockConfig+0x240>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f023 020f 	bic.w	r2, r3, #15
 800b5ca:	4906      	ldr	r1, [pc, #24]	; (800b5e4 <HAL_RCC_ClockConfig+0x240>)
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b5d2:	4b04      	ldr	r3, [pc, #16]	; (800b5e4 <HAL_RCC_ClockConfig+0x240>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f003 030f 	and.w	r3, r3, #15
 800b5da:	683a      	ldr	r2, [r7, #0]
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	d005      	beq.n	800b5ec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	e086      	b.n	800b6f2 <HAL_RCC_ClockConfig+0x34e>
 800b5e4:	52002000 	.word	0x52002000
 800b5e8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f003 0304 	and.w	r3, r3, #4
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d010      	beq.n	800b61a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	691a      	ldr	r2, [r3, #16]
 800b5fc:	4b3f      	ldr	r3, [pc, #252]	; (800b6fc <HAL_RCC_ClockConfig+0x358>)
 800b5fe:	699b      	ldr	r3, [r3, #24]
 800b600:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b604:	429a      	cmp	r2, r3
 800b606:	d208      	bcs.n	800b61a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b608:	4b3c      	ldr	r3, [pc, #240]	; (800b6fc <HAL_RCC_ClockConfig+0x358>)
 800b60a:	699b      	ldr	r3, [r3, #24]
 800b60c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	691b      	ldr	r3, [r3, #16]
 800b614:	4939      	ldr	r1, [pc, #228]	; (800b6fc <HAL_RCC_ClockConfig+0x358>)
 800b616:	4313      	orrs	r3, r2
 800b618:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f003 0308 	and.w	r3, r3, #8
 800b622:	2b00      	cmp	r3, #0
 800b624:	d010      	beq.n	800b648 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	695a      	ldr	r2, [r3, #20]
 800b62a:	4b34      	ldr	r3, [pc, #208]	; (800b6fc <HAL_RCC_ClockConfig+0x358>)
 800b62c:	69db      	ldr	r3, [r3, #28]
 800b62e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b632:	429a      	cmp	r2, r3
 800b634:	d208      	bcs.n	800b648 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b636:	4b31      	ldr	r3, [pc, #196]	; (800b6fc <HAL_RCC_ClockConfig+0x358>)
 800b638:	69db      	ldr	r3, [r3, #28]
 800b63a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	695b      	ldr	r3, [r3, #20]
 800b642:	492e      	ldr	r1, [pc, #184]	; (800b6fc <HAL_RCC_ClockConfig+0x358>)
 800b644:	4313      	orrs	r3, r2
 800b646:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f003 0310 	and.w	r3, r3, #16
 800b650:	2b00      	cmp	r3, #0
 800b652:	d010      	beq.n	800b676 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	699a      	ldr	r2, [r3, #24]
 800b658:	4b28      	ldr	r3, [pc, #160]	; (800b6fc <HAL_RCC_ClockConfig+0x358>)
 800b65a:	69db      	ldr	r3, [r3, #28]
 800b65c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b660:	429a      	cmp	r2, r3
 800b662:	d208      	bcs.n	800b676 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b664:	4b25      	ldr	r3, [pc, #148]	; (800b6fc <HAL_RCC_ClockConfig+0x358>)
 800b666:	69db      	ldr	r3, [r3, #28]
 800b668:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	699b      	ldr	r3, [r3, #24]
 800b670:	4922      	ldr	r1, [pc, #136]	; (800b6fc <HAL_RCC_ClockConfig+0x358>)
 800b672:	4313      	orrs	r3, r2
 800b674:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f003 0320 	and.w	r3, r3, #32
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d010      	beq.n	800b6a4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	69da      	ldr	r2, [r3, #28]
 800b686:	4b1d      	ldr	r3, [pc, #116]	; (800b6fc <HAL_RCC_ClockConfig+0x358>)
 800b688:	6a1b      	ldr	r3, [r3, #32]
 800b68a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b68e:	429a      	cmp	r2, r3
 800b690:	d208      	bcs.n	800b6a4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b692:	4b1a      	ldr	r3, [pc, #104]	; (800b6fc <HAL_RCC_ClockConfig+0x358>)
 800b694:	6a1b      	ldr	r3, [r3, #32]
 800b696:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	69db      	ldr	r3, [r3, #28]
 800b69e:	4917      	ldr	r1, [pc, #92]	; (800b6fc <HAL_RCC_ClockConfig+0x358>)
 800b6a0:	4313      	orrs	r3, r2
 800b6a2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800b6a4:	f000 f89e 	bl	800b7e4 <HAL_RCC_GetSysClockFreq>
 800b6a8:	4602      	mov	r2, r0
 800b6aa:	4b14      	ldr	r3, [pc, #80]	; (800b6fc <HAL_RCC_ClockConfig+0x358>)
 800b6ac:	699b      	ldr	r3, [r3, #24]
 800b6ae:	0a1b      	lsrs	r3, r3, #8
 800b6b0:	f003 030f 	and.w	r3, r3, #15
 800b6b4:	4912      	ldr	r1, [pc, #72]	; (800b700 <HAL_RCC_ClockConfig+0x35c>)
 800b6b6:	5ccb      	ldrb	r3, [r1, r3]
 800b6b8:	f003 031f 	and.w	r3, r3, #31
 800b6bc:	fa22 f303 	lsr.w	r3, r2, r3
 800b6c0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b6c2:	4b0e      	ldr	r3, [pc, #56]	; (800b6fc <HAL_RCC_ClockConfig+0x358>)
 800b6c4:	699b      	ldr	r3, [r3, #24]
 800b6c6:	f003 030f 	and.w	r3, r3, #15
 800b6ca:	4a0d      	ldr	r2, [pc, #52]	; (800b700 <HAL_RCC_ClockConfig+0x35c>)
 800b6cc:	5cd3      	ldrb	r3, [r2, r3]
 800b6ce:	f003 031f 	and.w	r3, r3, #31
 800b6d2:	693a      	ldr	r2, [r7, #16]
 800b6d4:	fa22 f303 	lsr.w	r3, r2, r3
 800b6d8:	4a0a      	ldr	r2, [pc, #40]	; (800b704 <HAL_RCC_ClockConfig+0x360>)
 800b6da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b6dc:	4a0a      	ldr	r2, [pc, #40]	; (800b708 <HAL_RCC_ClockConfig+0x364>)
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b6e2:	4b0a      	ldr	r3, [pc, #40]	; (800b70c <HAL_RCC_ClockConfig+0x368>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f7f9 f846 	bl	8004778 <HAL_InitTick>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b6f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3718      	adds	r7, #24
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}
 800b6fa:	bf00      	nop
 800b6fc:	58024400 	.word	0x58024400
 800b700:	08014c98 	.word	0x08014c98
 800b704:	240004c8 	.word	0x240004c8
 800b708:	240004c4 	.word	0x240004c4
 800b70c:	240004cc 	.word	0x240004cc

0800b710 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b08c      	sub	sp, #48	; 0x30
 800b714:	af00      	add	r7, sp, #0
 800b716:	60f8      	str	r0, [r7, #12]
 800b718:	60b9      	str	r1, [r7, #8]
 800b71a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d12a      	bne.n	800b778 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800b722:	4b2d      	ldr	r3, [pc, #180]	; (800b7d8 <HAL_RCC_MCOConfig+0xc8>)
 800b724:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b728:	4a2b      	ldr	r2, [pc, #172]	; (800b7d8 <HAL_RCC_MCOConfig+0xc8>)
 800b72a:	f043 0301 	orr.w	r3, r3, #1
 800b72e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800b732:	4b29      	ldr	r3, [pc, #164]	; (800b7d8 <HAL_RCC_MCOConfig+0xc8>)
 800b734:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b738:	f003 0301 	and.w	r3, r3, #1
 800b73c:	61bb      	str	r3, [r7, #24]
 800b73e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800b740:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b746:	2302      	movs	r3, #2
 800b748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b74a:	2303      	movs	r3, #3
 800b74c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b74e:	2300      	movs	r3, #0
 800b750:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b752:	2300      	movs	r3, #0
 800b754:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b756:	f107 031c 	add.w	r3, r7, #28
 800b75a:	4619      	mov	r1, r3
 800b75c:	481f      	ldr	r0, [pc, #124]	; (800b7dc <HAL_RCC_MCOConfig+0xcc>)
 800b75e:	f7fd fcc1 	bl	80090e4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800b762:	4b1d      	ldr	r3, [pc, #116]	; (800b7d8 <HAL_RCC_MCOConfig+0xc8>)
 800b764:	691b      	ldr	r3, [r3, #16]
 800b766:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800b76a:	68b9      	ldr	r1, [r7, #8]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	430b      	orrs	r3, r1
 800b770:	4919      	ldr	r1, [pc, #100]	; (800b7d8 <HAL_RCC_MCOConfig+0xc8>)
 800b772:	4313      	orrs	r3, r2
 800b774:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800b776:	e02a      	b.n	800b7ce <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800b778:	4b17      	ldr	r3, [pc, #92]	; (800b7d8 <HAL_RCC_MCOConfig+0xc8>)
 800b77a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b77e:	4a16      	ldr	r2, [pc, #88]	; (800b7d8 <HAL_RCC_MCOConfig+0xc8>)
 800b780:	f043 0304 	orr.w	r3, r3, #4
 800b784:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800b788:	4b13      	ldr	r3, [pc, #76]	; (800b7d8 <HAL_RCC_MCOConfig+0xc8>)
 800b78a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b78e:	f003 0304 	and.w	r3, r3, #4
 800b792:	617b      	str	r3, [r7, #20]
 800b794:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b796:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b79a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b79c:	2302      	movs	r3, #2
 800b79e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b7a0:	2303      	movs	r3, #3
 800b7a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b7ac:	f107 031c 	add.w	r3, r7, #28
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	480b      	ldr	r0, [pc, #44]	; (800b7e0 <HAL_RCC_MCOConfig+0xd0>)
 800b7b4:	f7fd fc96 	bl	80090e4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800b7b8:	4b07      	ldr	r3, [pc, #28]	; (800b7d8 <HAL_RCC_MCOConfig+0xc8>)
 800b7ba:	691b      	ldr	r3, [r3, #16]
 800b7bc:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	01d9      	lsls	r1, r3, #7
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	430b      	orrs	r3, r1
 800b7c8:	4903      	ldr	r1, [pc, #12]	; (800b7d8 <HAL_RCC_MCOConfig+0xc8>)
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	610b      	str	r3, [r1, #16]
}
 800b7ce:	bf00      	nop
 800b7d0:	3730      	adds	r7, #48	; 0x30
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
 800b7d6:	bf00      	nop
 800b7d8:	58024400 	.word	0x58024400
 800b7dc:	58020000 	.word	0x58020000
 800b7e0:	58020800 	.word	0x58020800

0800b7e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b089      	sub	sp, #36	; 0x24
 800b7e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b7ea:	4bb3      	ldr	r3, [pc, #716]	; (800bab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7ec:	691b      	ldr	r3, [r3, #16]
 800b7ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b7f2:	2b18      	cmp	r3, #24
 800b7f4:	f200 8155 	bhi.w	800baa2 <HAL_RCC_GetSysClockFreq+0x2be>
 800b7f8:	a201      	add	r2, pc, #4	; (adr r2, 800b800 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b7fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7fe:	bf00      	nop
 800b800:	0800b865 	.word	0x0800b865
 800b804:	0800baa3 	.word	0x0800baa3
 800b808:	0800baa3 	.word	0x0800baa3
 800b80c:	0800baa3 	.word	0x0800baa3
 800b810:	0800baa3 	.word	0x0800baa3
 800b814:	0800baa3 	.word	0x0800baa3
 800b818:	0800baa3 	.word	0x0800baa3
 800b81c:	0800baa3 	.word	0x0800baa3
 800b820:	0800b88b 	.word	0x0800b88b
 800b824:	0800baa3 	.word	0x0800baa3
 800b828:	0800baa3 	.word	0x0800baa3
 800b82c:	0800baa3 	.word	0x0800baa3
 800b830:	0800baa3 	.word	0x0800baa3
 800b834:	0800baa3 	.word	0x0800baa3
 800b838:	0800baa3 	.word	0x0800baa3
 800b83c:	0800baa3 	.word	0x0800baa3
 800b840:	0800b891 	.word	0x0800b891
 800b844:	0800baa3 	.word	0x0800baa3
 800b848:	0800baa3 	.word	0x0800baa3
 800b84c:	0800baa3 	.word	0x0800baa3
 800b850:	0800baa3 	.word	0x0800baa3
 800b854:	0800baa3 	.word	0x0800baa3
 800b858:	0800baa3 	.word	0x0800baa3
 800b85c:	0800baa3 	.word	0x0800baa3
 800b860:	0800b897 	.word	0x0800b897
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b864:	4b94      	ldr	r3, [pc, #592]	; (800bab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f003 0320 	and.w	r3, r3, #32
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d009      	beq.n	800b884 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b870:	4b91      	ldr	r3, [pc, #580]	; (800bab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	08db      	lsrs	r3, r3, #3
 800b876:	f003 0303 	and.w	r3, r3, #3
 800b87a:	4a90      	ldr	r2, [pc, #576]	; (800babc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b87c:	fa22 f303 	lsr.w	r3, r2, r3
 800b880:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b882:	e111      	b.n	800baa8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b884:	4b8d      	ldr	r3, [pc, #564]	; (800babc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b886:	61bb      	str	r3, [r7, #24]
      break;
 800b888:	e10e      	b.n	800baa8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b88a:	4b8d      	ldr	r3, [pc, #564]	; (800bac0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b88c:	61bb      	str	r3, [r7, #24]
      break;
 800b88e:	e10b      	b.n	800baa8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b890:	4b8c      	ldr	r3, [pc, #560]	; (800bac4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b892:	61bb      	str	r3, [r7, #24]
      break;
 800b894:	e108      	b.n	800baa8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b896:	4b88      	ldr	r3, [pc, #544]	; (800bab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b89a:	f003 0303 	and.w	r3, r3, #3
 800b89e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b8a0:	4b85      	ldr	r3, [pc, #532]	; (800bab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b8a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8a4:	091b      	lsrs	r3, r3, #4
 800b8a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b8aa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b8ac:	4b82      	ldr	r3, [pc, #520]	; (800bab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b8ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8b0:	f003 0301 	and.w	r3, r3, #1
 800b8b4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b8b6:	4b80      	ldr	r3, [pc, #512]	; (800bab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b8b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8ba:	08db      	lsrs	r3, r3, #3
 800b8bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b8c0:	68fa      	ldr	r2, [r7, #12]
 800b8c2:	fb02 f303 	mul.w	r3, r2, r3
 800b8c6:	ee07 3a90 	vmov	s15, r3
 800b8ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8ce:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	f000 80e1 	beq.w	800ba9c <HAL_RCC_GetSysClockFreq+0x2b8>
 800b8da:	697b      	ldr	r3, [r7, #20]
 800b8dc:	2b02      	cmp	r3, #2
 800b8de:	f000 8083 	beq.w	800b9e8 <HAL_RCC_GetSysClockFreq+0x204>
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	2b02      	cmp	r3, #2
 800b8e6:	f200 80a1 	bhi.w	800ba2c <HAL_RCC_GetSysClockFreq+0x248>
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d003      	beq.n	800b8f8 <HAL_RCC_GetSysClockFreq+0x114>
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	2b01      	cmp	r3, #1
 800b8f4:	d056      	beq.n	800b9a4 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b8f6:	e099      	b.n	800ba2c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8f8:	4b6f      	ldr	r3, [pc, #444]	; (800bab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f003 0320 	and.w	r3, r3, #32
 800b900:	2b00      	cmp	r3, #0
 800b902:	d02d      	beq.n	800b960 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b904:	4b6c      	ldr	r3, [pc, #432]	; (800bab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	08db      	lsrs	r3, r3, #3
 800b90a:	f003 0303 	and.w	r3, r3, #3
 800b90e:	4a6b      	ldr	r2, [pc, #428]	; (800babc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b910:	fa22 f303 	lsr.w	r3, r2, r3
 800b914:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	ee07 3a90 	vmov	s15, r3
 800b91c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	ee07 3a90 	vmov	s15, r3
 800b926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b92a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b92e:	4b62      	ldr	r3, [pc, #392]	; (800bab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b936:	ee07 3a90 	vmov	s15, r3
 800b93a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b93e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b942:	eddf 5a61 	vldr	s11, [pc, #388]	; 800bac8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b94a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b94e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b95a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b95e:	e087      	b.n	800ba70 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	ee07 3a90 	vmov	s15, r3
 800b966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b96a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800bacc <HAL_RCC_GetSysClockFreq+0x2e8>
 800b96e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b972:	4b51      	ldr	r3, [pc, #324]	; (800bab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b97a:	ee07 3a90 	vmov	s15, r3
 800b97e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b982:	ed97 6a02 	vldr	s12, [r7, #8]
 800b986:	eddf 5a50 	vldr	s11, [pc, #320]	; 800bac8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b98a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b98e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b992:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b99a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b99e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b9a2:	e065      	b.n	800ba70 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	ee07 3a90 	vmov	s15, r3
 800b9aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9ae:	eddf 6a48 	vldr	s13, [pc, #288]	; 800bad0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b9b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9b6:	4b40      	ldr	r3, [pc, #256]	; (800bab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b9b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9be:	ee07 3a90 	vmov	s15, r3
 800b9c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9c6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b9ca:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800bac8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b9ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b9e6:	e043      	b.n	800ba70 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	ee07 3a90 	vmov	s15, r3
 800b9ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9f2:	eddf 6a38 	vldr	s13, [pc, #224]	; 800bad4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b9f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9fa:	4b2f      	ldr	r3, [pc, #188]	; (800bab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b9fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba02:	ee07 3a90 	vmov	s15, r3
 800ba06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba0a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ba0e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800bac8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ba12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ba2a:	e021      	b.n	800ba70 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	ee07 3a90 	vmov	s15, r3
 800ba32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba36:	eddf 6a26 	vldr	s13, [pc, #152]	; 800bad0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ba3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba3e:	4b1e      	ldr	r3, [pc, #120]	; (800bab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ba40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba46:	ee07 3a90 	vmov	s15, r3
 800ba4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba4e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ba52:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800bac8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ba56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ba6e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ba70:	4b11      	ldr	r3, [pc, #68]	; (800bab8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ba72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba74:	0a5b      	lsrs	r3, r3, #9
 800ba76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	ee07 3a90 	vmov	s15, r3
 800ba84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ba88:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba94:	ee17 3a90 	vmov	r3, s15
 800ba98:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800ba9a:	e005      	b.n	800baa8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	61bb      	str	r3, [r7, #24]
      break;
 800baa0:	e002      	b.n	800baa8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800baa2:	4b07      	ldr	r3, [pc, #28]	; (800bac0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800baa4:	61bb      	str	r3, [r7, #24]
      break;
 800baa6:	bf00      	nop
  }

  return sysclockfreq;
 800baa8:	69bb      	ldr	r3, [r7, #24]
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3724      	adds	r7, #36	; 0x24
 800baae:	46bd      	mov	sp, r7
 800bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab4:	4770      	bx	lr
 800bab6:	bf00      	nop
 800bab8:	58024400 	.word	0x58024400
 800babc:	03d09000 	.word	0x03d09000
 800bac0:	003d0900 	.word	0x003d0900
 800bac4:	016e3600 	.word	0x016e3600
 800bac8:	46000000 	.word	0x46000000
 800bacc:	4c742400 	.word	0x4c742400
 800bad0:	4a742400 	.word	0x4a742400
 800bad4:	4bb71b00 	.word	0x4bb71b00

0800bad8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b082      	sub	sp, #8
 800badc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800bade:	f7ff fe81 	bl	800b7e4 <HAL_RCC_GetSysClockFreq>
 800bae2:	4602      	mov	r2, r0
 800bae4:	4b10      	ldr	r3, [pc, #64]	; (800bb28 <HAL_RCC_GetHCLKFreq+0x50>)
 800bae6:	699b      	ldr	r3, [r3, #24]
 800bae8:	0a1b      	lsrs	r3, r3, #8
 800baea:	f003 030f 	and.w	r3, r3, #15
 800baee:	490f      	ldr	r1, [pc, #60]	; (800bb2c <HAL_RCC_GetHCLKFreq+0x54>)
 800baf0:	5ccb      	ldrb	r3, [r1, r3]
 800baf2:	f003 031f 	and.w	r3, r3, #31
 800baf6:	fa22 f303 	lsr.w	r3, r2, r3
 800bafa:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800bafc:	4b0a      	ldr	r3, [pc, #40]	; (800bb28 <HAL_RCC_GetHCLKFreq+0x50>)
 800bafe:	699b      	ldr	r3, [r3, #24]
 800bb00:	f003 030f 	and.w	r3, r3, #15
 800bb04:	4a09      	ldr	r2, [pc, #36]	; (800bb2c <HAL_RCC_GetHCLKFreq+0x54>)
 800bb06:	5cd3      	ldrb	r3, [r2, r3]
 800bb08:	f003 031f 	and.w	r3, r3, #31
 800bb0c:	687a      	ldr	r2, [r7, #4]
 800bb0e:	fa22 f303 	lsr.w	r3, r2, r3
 800bb12:	4a07      	ldr	r2, [pc, #28]	; (800bb30 <HAL_RCC_GetHCLKFreq+0x58>)
 800bb14:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800bb16:	4a07      	ldr	r2, [pc, #28]	; (800bb34 <HAL_RCC_GetHCLKFreq+0x5c>)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800bb1c:	4b04      	ldr	r3, [pc, #16]	; (800bb30 <HAL_RCC_GetHCLKFreq+0x58>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	3708      	adds	r7, #8
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}
 800bb28:	58024400 	.word	0x58024400
 800bb2c:	08014c98 	.word	0x08014c98
 800bb30:	240004c8 	.word	0x240004c8
 800bb34:	240004c4 	.word	0x240004c4

0800bb38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800bb3c:	f7ff ffcc 	bl	800bad8 <HAL_RCC_GetHCLKFreq>
 800bb40:	4602      	mov	r2, r0
 800bb42:	4b06      	ldr	r3, [pc, #24]	; (800bb5c <HAL_RCC_GetPCLK1Freq+0x24>)
 800bb44:	69db      	ldr	r3, [r3, #28]
 800bb46:	091b      	lsrs	r3, r3, #4
 800bb48:	f003 0307 	and.w	r3, r3, #7
 800bb4c:	4904      	ldr	r1, [pc, #16]	; (800bb60 <HAL_RCC_GetPCLK1Freq+0x28>)
 800bb4e:	5ccb      	ldrb	r3, [r1, r3]
 800bb50:	f003 031f 	and.w	r3, r3, #31
 800bb54:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	bd80      	pop	{r7, pc}
 800bb5c:	58024400 	.word	0x58024400
 800bb60:	08014c98 	.word	0x08014c98

0800bb64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800bb68:	f7ff ffb6 	bl	800bad8 <HAL_RCC_GetHCLKFreq>
 800bb6c:	4602      	mov	r2, r0
 800bb6e:	4b06      	ldr	r3, [pc, #24]	; (800bb88 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bb70:	69db      	ldr	r3, [r3, #28]
 800bb72:	0a1b      	lsrs	r3, r3, #8
 800bb74:	f003 0307 	and.w	r3, r3, #7
 800bb78:	4904      	ldr	r1, [pc, #16]	; (800bb8c <HAL_RCC_GetPCLK2Freq+0x28>)
 800bb7a:	5ccb      	ldrb	r3, [r1, r3]
 800bb7c:	f003 031f 	and.w	r3, r3, #31
 800bb80:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	bd80      	pop	{r7, pc}
 800bb88:	58024400 	.word	0x58024400
 800bb8c:	08014c98 	.word	0x08014c98

0800bb90 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bb90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bb94:	b0c8      	sub	sp, #288	; 0x120
 800bb96:	af00      	add	r7, sp, #0
 800bb98:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bba2:	2300      	movs	r3, #0
 800bba4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bba8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800bbb4:	2500      	movs	r5, #0
 800bbb6:	ea54 0305 	orrs.w	r3, r4, r5
 800bbba:	d049      	beq.n	800bc50 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800bbbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bbc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbc2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bbc6:	d02f      	beq.n	800bc28 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800bbc8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bbcc:	d828      	bhi.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800bbce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bbd2:	d01a      	beq.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800bbd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bbd8:	d822      	bhi.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d003      	beq.n	800bbe6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800bbde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bbe2:	d007      	beq.n	800bbf4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800bbe4:	e01c      	b.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbe6:	4ba7      	ldr	r3, [pc, #668]	; (800be84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bbe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbea:	4aa6      	ldr	r2, [pc, #664]	; (800be84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bbec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bbf0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800bbf2:	e01a      	b.n	800bc2a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bbf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bbf8:	3308      	adds	r3, #8
 800bbfa:	2102      	movs	r1, #2
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f001 fc43 	bl	800d488 <RCCEx_PLL2_Config>
 800bc02:	4603      	mov	r3, r0
 800bc04:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800bc08:	e00f      	b.n	800bc2a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bc0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc0e:	3328      	adds	r3, #40	; 0x28
 800bc10:	2102      	movs	r1, #2
 800bc12:	4618      	mov	r0, r3
 800bc14:	f001 fcea 	bl	800d5ec <RCCEx_PLL3_Config>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800bc1e:	e004      	b.n	800bc2a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc20:	2301      	movs	r3, #1
 800bc22:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bc26:	e000      	b.n	800bc2a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800bc28:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc2a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d10a      	bne.n	800bc48 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800bc32:	4b94      	ldr	r3, [pc, #592]	; (800be84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bc34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc36:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800bc3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc40:	4a90      	ldr	r2, [pc, #576]	; (800be84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bc42:	430b      	orrs	r3, r1
 800bc44:	6513      	str	r3, [r2, #80]	; 0x50
 800bc46:	e003      	b.n	800bc50 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc48:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bc4c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bc50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc58:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800bc5c:	f04f 0900 	mov.w	r9, #0
 800bc60:	ea58 0309 	orrs.w	r3, r8, r9
 800bc64:	d047      	beq.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800bc66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc6c:	2b04      	cmp	r3, #4
 800bc6e:	d82a      	bhi.n	800bcc6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800bc70:	a201      	add	r2, pc, #4	; (adr r2, 800bc78 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800bc72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc76:	bf00      	nop
 800bc78:	0800bc8d 	.word	0x0800bc8d
 800bc7c:	0800bc9b 	.word	0x0800bc9b
 800bc80:	0800bcb1 	.word	0x0800bcb1
 800bc84:	0800bccf 	.word	0x0800bccf
 800bc88:	0800bccf 	.word	0x0800bccf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc8c:	4b7d      	ldr	r3, [pc, #500]	; (800be84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bc8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc90:	4a7c      	ldr	r2, [pc, #496]	; (800be84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bc92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bc98:	e01a      	b.n	800bcd0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc9e:	3308      	adds	r3, #8
 800bca0:	2100      	movs	r1, #0
 800bca2:	4618      	mov	r0, r3
 800bca4:	f001 fbf0 	bl	800d488 <RCCEx_PLL2_Config>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bcae:	e00f      	b.n	800bcd0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bcb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bcb4:	3328      	adds	r3, #40	; 0x28
 800bcb6:	2100      	movs	r1, #0
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f001 fc97 	bl	800d5ec <RCCEx_PLL3_Config>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bcc4:	e004      	b.n	800bcd0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bccc:	e000      	b.n	800bcd0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800bcce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcd0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d10a      	bne.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bcd8:	4b6a      	ldr	r3, [pc, #424]	; (800be84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bcda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcdc:	f023 0107 	bic.w	r1, r3, #7
 800bce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bce6:	4a67      	ldr	r2, [pc, #412]	; (800be84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bce8:	430b      	orrs	r3, r1
 800bcea:	6513      	str	r3, [r2, #80]	; 0x50
 800bcec:	e003      	b.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bcf2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800bcf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bcfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfe:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800bd02:	f04f 0b00 	mov.w	fp, #0
 800bd06:	ea5a 030b 	orrs.w	r3, sl, fp
 800bd0a:	d054      	beq.n	800bdb6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800bd0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd12:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800bd16:	d036      	beq.n	800bd86 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800bd18:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800bd1c:	d82f      	bhi.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800bd1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd22:	d032      	beq.n	800bd8a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bd24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd28:	d829      	bhi.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800bd2a:	2bc0      	cmp	r3, #192	; 0xc0
 800bd2c:	d02f      	beq.n	800bd8e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800bd2e:	2bc0      	cmp	r3, #192	; 0xc0
 800bd30:	d825      	bhi.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800bd32:	2b80      	cmp	r3, #128	; 0x80
 800bd34:	d018      	beq.n	800bd68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800bd36:	2b80      	cmp	r3, #128	; 0x80
 800bd38:	d821      	bhi.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d002      	beq.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800bd3e:	2b40      	cmp	r3, #64	; 0x40
 800bd40:	d007      	beq.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800bd42:	e01c      	b.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd44:	4b4f      	ldr	r3, [pc, #316]	; (800be84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bd46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd48:	4a4e      	ldr	r2, [pc, #312]	; (800be84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bd4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800bd50:	e01e      	b.n	800bd90 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd56:	3308      	adds	r3, #8
 800bd58:	2100      	movs	r1, #0
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f001 fb94 	bl	800d488 <RCCEx_PLL2_Config>
 800bd60:	4603      	mov	r3, r0
 800bd62:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800bd66:	e013      	b.n	800bd90 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bd68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd6c:	3328      	adds	r3, #40	; 0x28
 800bd6e:	2100      	movs	r1, #0
 800bd70:	4618      	mov	r0, r3
 800bd72:	f001 fc3b 	bl	800d5ec <RCCEx_PLL3_Config>
 800bd76:	4603      	mov	r3, r0
 800bd78:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800bd7c:	e008      	b.n	800bd90 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd7e:	2301      	movs	r3, #1
 800bd80:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bd84:	e004      	b.n	800bd90 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800bd86:	bf00      	nop
 800bd88:	e002      	b.n	800bd90 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800bd8a:	bf00      	nop
 800bd8c:	e000      	b.n	800bd90 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800bd8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd90:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d10a      	bne.n	800bdae <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800bd98:	4b3a      	ldr	r3, [pc, #232]	; (800be84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bd9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd9c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800bda0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bda4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bda6:	4a37      	ldr	r2, [pc, #220]	; (800be84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bda8:	430b      	orrs	r3, r1
 800bdaa:	6513      	str	r3, [r2, #80]	; 0x50
 800bdac:	e003      	b.n	800bdb6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bdb2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800bdb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdbe:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800bdc2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800bdcc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800bdd0:	460b      	mov	r3, r1
 800bdd2:	4313      	orrs	r3, r2
 800bdd4:	d05c      	beq.n	800be90 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800bdd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bdda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bddc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800bde0:	d03b      	beq.n	800be5a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800bde2:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800bde6:	d834      	bhi.n	800be52 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800bde8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bdec:	d037      	beq.n	800be5e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800bdee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bdf2:	d82e      	bhi.n	800be52 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800bdf4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800bdf8:	d033      	beq.n	800be62 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bdfa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800bdfe:	d828      	bhi.n	800be52 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800be00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be04:	d01a      	beq.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800be06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be0a:	d822      	bhi.n	800be52 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d003      	beq.n	800be18 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800be10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be14:	d007      	beq.n	800be26 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800be16:	e01c      	b.n	800be52 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be18:	4b1a      	ldr	r3, [pc, #104]	; (800be84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800be1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be1c:	4a19      	ldr	r2, [pc, #100]	; (800be84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800be1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800be24:	e01e      	b.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be2a:	3308      	adds	r3, #8
 800be2c:	2100      	movs	r1, #0
 800be2e:	4618      	mov	r0, r3
 800be30:	f001 fb2a 	bl	800d488 <RCCEx_PLL2_Config>
 800be34:	4603      	mov	r3, r0
 800be36:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800be3a:	e013      	b.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800be3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be40:	3328      	adds	r3, #40	; 0x28
 800be42:	2100      	movs	r1, #0
 800be44:	4618      	mov	r0, r3
 800be46:	f001 fbd1 	bl	800d5ec <RCCEx_PLL3_Config>
 800be4a:	4603      	mov	r3, r0
 800be4c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800be50:	e008      	b.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be52:	2301      	movs	r3, #1
 800be54:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800be58:	e004      	b.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800be5a:	bf00      	nop
 800be5c:	e002      	b.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800be5e:	bf00      	nop
 800be60:	e000      	b.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800be62:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be64:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d10d      	bne.n	800be88 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800be6c:	4b05      	ldr	r3, [pc, #20]	; (800be84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800be6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be70:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800be74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be7a:	4a02      	ldr	r2, [pc, #8]	; (800be84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800be7c:	430b      	orrs	r3, r1
 800be7e:	6513      	str	r3, [r2, #80]	; 0x50
 800be80:	e006      	b.n	800be90 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800be82:	bf00      	nop
 800be84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be88:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800be8c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800be90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be98:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800be9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bea0:	2300      	movs	r3, #0
 800bea2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bea6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800beaa:	460b      	mov	r3, r1
 800beac:	4313      	orrs	r3, r2
 800beae:	d03a      	beq.n	800bf26 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800beb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800beb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800beb6:	2b30      	cmp	r3, #48	; 0x30
 800beb8:	d01f      	beq.n	800befa <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800beba:	2b30      	cmp	r3, #48	; 0x30
 800bebc:	d819      	bhi.n	800bef2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800bebe:	2b20      	cmp	r3, #32
 800bec0:	d00c      	beq.n	800bedc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800bec2:	2b20      	cmp	r3, #32
 800bec4:	d815      	bhi.n	800bef2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d019      	beq.n	800befe <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800beca:	2b10      	cmp	r3, #16
 800becc:	d111      	bne.n	800bef2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bece:	4bae      	ldr	r3, [pc, #696]	; (800c188 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bed2:	4aad      	ldr	r2, [pc, #692]	; (800c188 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bed8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800beda:	e011      	b.n	800bf00 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bedc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bee0:	3308      	adds	r3, #8
 800bee2:	2102      	movs	r1, #2
 800bee4:	4618      	mov	r0, r3
 800bee6:	f001 facf 	bl	800d488 <RCCEx_PLL2_Config>
 800beea:	4603      	mov	r3, r0
 800beec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800bef0:	e006      	b.n	800bf00 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bef2:	2301      	movs	r3, #1
 800bef4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bef8:	e002      	b.n	800bf00 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800befa:	bf00      	nop
 800befc:	e000      	b.n	800bf00 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800befe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d10a      	bne.n	800bf1e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800bf08:	4b9f      	ldr	r3, [pc, #636]	; (800c188 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bf0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf0c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800bf10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf16:	4a9c      	ldr	r2, [pc, #624]	; (800c188 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bf18:	430b      	orrs	r3, r1
 800bf1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bf1c:	e003      	b.n	800bf26 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf1e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bf22:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bf26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf2e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800bf32:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bf36:	2300      	movs	r3, #0
 800bf38:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bf3c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800bf40:	460b      	mov	r3, r1
 800bf42:	4313      	orrs	r3, r2
 800bf44:	d051      	beq.n	800bfea <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800bf46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf50:	d035      	beq.n	800bfbe <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800bf52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf56:	d82e      	bhi.n	800bfb6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800bf58:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bf5c:	d031      	beq.n	800bfc2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800bf5e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bf62:	d828      	bhi.n	800bfb6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800bf64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf68:	d01a      	beq.n	800bfa0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800bf6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf6e:	d822      	bhi.n	800bfb6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d003      	beq.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800bf74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf78:	d007      	beq.n	800bf8a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800bf7a:	e01c      	b.n	800bfb6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf7c:	4b82      	ldr	r3, [pc, #520]	; (800c188 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bf7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf80:	4a81      	ldr	r2, [pc, #516]	; (800c188 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bf82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bf88:	e01c      	b.n	800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bf8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf8e:	3308      	adds	r3, #8
 800bf90:	2100      	movs	r1, #0
 800bf92:	4618      	mov	r0, r3
 800bf94:	f001 fa78 	bl	800d488 <RCCEx_PLL2_Config>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bf9e:	e011      	b.n	800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bfa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bfa4:	3328      	adds	r3, #40	; 0x28
 800bfa6:	2100      	movs	r1, #0
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f001 fb1f 	bl	800d5ec <RCCEx_PLL3_Config>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bfb4:	e006      	b.n	800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bfbc:	e002      	b.n	800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800bfbe:	bf00      	nop
 800bfc0:	e000      	b.n	800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800bfc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bfc4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d10a      	bne.n	800bfe2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bfcc:	4b6e      	ldr	r3, [pc, #440]	; (800c188 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bfce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfd0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800bfd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bfd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bfda:	4a6b      	ldr	r2, [pc, #428]	; (800c188 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bfdc:	430b      	orrs	r3, r1
 800bfde:	6513      	str	r3, [r2, #80]	; 0x50
 800bfe0:	e003      	b.n	800bfea <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfe2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bfe6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bfea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bfee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800bff6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bffa:	2300      	movs	r3, #0
 800bffc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c000:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800c004:	460b      	mov	r3, r1
 800c006:	4313      	orrs	r3, r2
 800c008:	d053      	beq.n	800c0b2 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800c00a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c00e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c010:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c014:	d033      	beq.n	800c07e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800c016:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c01a:	d82c      	bhi.n	800c076 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800c01c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c020:	d02f      	beq.n	800c082 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800c022:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c026:	d826      	bhi.n	800c076 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800c028:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c02c:	d02b      	beq.n	800c086 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c02e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c032:	d820      	bhi.n	800c076 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800c034:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c038:	d012      	beq.n	800c060 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800c03a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c03e:	d81a      	bhi.n	800c076 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800c040:	2b00      	cmp	r3, #0
 800c042:	d022      	beq.n	800c08a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800c044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c048:	d115      	bne.n	800c076 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c04a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c04e:	3308      	adds	r3, #8
 800c050:	2101      	movs	r1, #1
 800c052:	4618      	mov	r0, r3
 800c054:	f001 fa18 	bl	800d488 <RCCEx_PLL2_Config>
 800c058:	4603      	mov	r3, r0
 800c05a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800c05e:	e015      	b.n	800c08c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c060:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c064:	3328      	adds	r3, #40	; 0x28
 800c066:	2101      	movs	r1, #1
 800c068:	4618      	mov	r0, r3
 800c06a:	f001 fabf 	bl	800d5ec <RCCEx_PLL3_Config>
 800c06e:	4603      	mov	r3, r0
 800c070:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800c074:	e00a      	b.n	800c08c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c076:	2301      	movs	r3, #1
 800c078:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c07c:	e006      	b.n	800c08c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800c07e:	bf00      	nop
 800c080:	e004      	b.n	800c08c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800c082:	bf00      	nop
 800c084:	e002      	b.n	800c08c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800c086:	bf00      	nop
 800c088:	e000      	b.n	800c08c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800c08a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c08c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c090:	2b00      	cmp	r3, #0
 800c092:	d10a      	bne.n	800c0aa <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c094:	4b3c      	ldr	r3, [pc, #240]	; (800c188 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c098:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800c09c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c0a2:	4a39      	ldr	r2, [pc, #228]	; (800c188 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c0a4:	430b      	orrs	r3, r1
 800c0a6:	6513      	str	r3, [r2, #80]	; 0x50
 800c0a8:	e003      	b.n	800c0b2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c0ae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c0b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ba:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800c0be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c0c8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800c0cc:	460b      	mov	r3, r1
 800c0ce:	4313      	orrs	r3, r2
 800c0d0:	d060      	beq.n	800c194 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800c0d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c0da:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800c0de:	d039      	beq.n	800c154 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800c0e0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800c0e4:	d832      	bhi.n	800c14c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800c0e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c0ea:	d035      	beq.n	800c158 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800c0ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c0f0:	d82c      	bhi.n	800c14c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800c0f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0f6:	d031      	beq.n	800c15c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800c0f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0fc:	d826      	bhi.n	800c14c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800c0fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c102:	d02d      	beq.n	800c160 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800c104:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c108:	d820      	bhi.n	800c14c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800c10a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c10e:	d012      	beq.n	800c136 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800c110:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c114:	d81a      	bhi.n	800c14c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800c116:	2b00      	cmp	r3, #0
 800c118:	d024      	beq.n	800c164 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800c11a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c11e:	d115      	bne.n	800c14c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c120:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c124:	3308      	adds	r3, #8
 800c126:	2101      	movs	r1, #1
 800c128:	4618      	mov	r0, r3
 800c12a:	f001 f9ad 	bl	800d488 <RCCEx_PLL2_Config>
 800c12e:	4603      	mov	r3, r0
 800c130:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c134:	e017      	b.n	800c166 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c136:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c13a:	3328      	adds	r3, #40	; 0x28
 800c13c:	2101      	movs	r1, #1
 800c13e:	4618      	mov	r0, r3
 800c140:	f001 fa54 	bl	800d5ec <RCCEx_PLL3_Config>
 800c144:	4603      	mov	r3, r0
 800c146:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c14a:	e00c      	b.n	800c166 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800c14c:	2301      	movs	r3, #1
 800c14e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c152:	e008      	b.n	800c166 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c154:	bf00      	nop
 800c156:	e006      	b.n	800c166 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c158:	bf00      	nop
 800c15a:	e004      	b.n	800c166 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c15c:	bf00      	nop
 800c15e:	e002      	b.n	800c166 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c160:	bf00      	nop
 800c162:	e000      	b.n	800c166 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c164:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c166:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d10e      	bne.n	800c18c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c16e:	4b06      	ldr	r3, [pc, #24]	; (800c188 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c172:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c176:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c17a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c17e:	4a02      	ldr	r2, [pc, #8]	; (800c188 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c180:	430b      	orrs	r3, r1
 800c182:	6593      	str	r3, [r2, #88]	; 0x58
 800c184:	e006      	b.n	800c194 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800c186:	bf00      	nop
 800c188:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c18c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c190:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c194:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c19c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800c1a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c1aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c1ae:	460b      	mov	r3, r1
 800c1b0:	4313      	orrs	r3, r2
 800c1b2:	d037      	beq.n	800c224 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800c1b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c1ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1be:	d00e      	beq.n	800c1de <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800c1c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1c4:	d816      	bhi.n	800c1f4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d018      	beq.n	800c1fc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800c1ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c1ce:	d111      	bne.n	800c1f4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c1d0:	4bc4      	ldr	r3, [pc, #784]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1d4:	4ac3      	ldr	r2, [pc, #780]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c1d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c1da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c1dc:	e00f      	b.n	800c1fe <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c1de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1e2:	3308      	adds	r3, #8
 800c1e4:	2101      	movs	r1, #1
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f001 f94e 	bl	800d488 <RCCEx_PLL2_Config>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c1f2:	e004      	b.n	800c1fe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c1fa:	e000      	b.n	800c1fe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800c1fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1fe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c202:	2b00      	cmp	r3, #0
 800c204:	d10a      	bne.n	800c21c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c206:	4bb7      	ldr	r3, [pc, #732]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c20a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c20e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c212:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c214:	4ab3      	ldr	r2, [pc, #716]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c216:	430b      	orrs	r3, r1
 800c218:	6513      	str	r3, [r2, #80]	; 0x50
 800c21a:	e003      	b.n	800c224 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c21c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c220:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c224:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c22c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800c230:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c234:	2300      	movs	r3, #0
 800c236:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c23a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800c23e:	460b      	mov	r3, r1
 800c240:	4313      	orrs	r3, r2
 800c242:	d039      	beq.n	800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800c244:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c24a:	2b03      	cmp	r3, #3
 800c24c:	d81c      	bhi.n	800c288 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800c24e:	a201      	add	r2, pc, #4	; (adr r2, 800c254 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800c250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c254:	0800c291 	.word	0x0800c291
 800c258:	0800c265 	.word	0x0800c265
 800c25c:	0800c273 	.word	0x0800c273
 800c260:	0800c291 	.word	0x0800c291
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c264:	4b9f      	ldr	r3, [pc, #636]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c268:	4a9e      	ldr	r2, [pc, #632]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c26a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c26e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c270:	e00f      	b.n	800c292 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c272:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c276:	3308      	adds	r3, #8
 800c278:	2102      	movs	r1, #2
 800c27a:	4618      	mov	r0, r3
 800c27c:	f001 f904 	bl	800d488 <RCCEx_PLL2_Config>
 800c280:	4603      	mov	r3, r0
 800c282:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c286:	e004      	b.n	800c292 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c288:	2301      	movs	r3, #1
 800c28a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c28e:	e000      	b.n	800c292 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800c290:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c292:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c296:	2b00      	cmp	r3, #0
 800c298:	d10a      	bne.n	800c2b0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c29a:	4b92      	ldr	r3, [pc, #584]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c29c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c29e:	f023 0103 	bic.w	r1, r3, #3
 800c2a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c2a8:	4a8e      	ldr	r2, [pc, #568]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c2aa:	430b      	orrs	r3, r1
 800c2ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c2ae:	e003      	b.n	800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c2b4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c2b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800c2c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c2ce:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800c2d2:	460b      	mov	r3, r1
 800c2d4:	4313      	orrs	r3, r2
 800c2d6:	f000 8099 	beq.w	800c40c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c2da:	4b83      	ldr	r3, [pc, #524]	; (800c4e8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	4a82      	ldr	r2, [pc, #520]	; (800c4e8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c2e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c2e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c2e6:	f7f8 fa91 	bl	800480c <HAL_GetTick>
 800c2ea:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c2ee:	e00b      	b.n	800c308 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c2f0:	f7f8 fa8c 	bl	800480c <HAL_GetTick>
 800c2f4:	4602      	mov	r2, r0
 800c2f6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c2fa:	1ad3      	subs	r3, r2, r3
 800c2fc:	2b64      	cmp	r3, #100	; 0x64
 800c2fe:	d903      	bls.n	800c308 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800c300:	2303      	movs	r3, #3
 800c302:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c306:	e005      	b.n	800c314 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c308:	4b77      	ldr	r3, [pc, #476]	; (800c4e8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c310:	2b00      	cmp	r3, #0
 800c312:	d0ed      	beq.n	800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800c314:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d173      	bne.n	800c404 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c31c:	4b71      	ldr	r3, [pc, #452]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c31e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c320:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c324:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c328:	4053      	eors	r3, r2
 800c32a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d015      	beq.n	800c35e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c332:	4b6c      	ldr	r3, [pc, #432]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c33a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c33e:	4b69      	ldr	r3, [pc, #420]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c342:	4a68      	ldr	r2, [pc, #416]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c348:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c34a:	4b66      	ldr	r3, [pc, #408]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c34c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c34e:	4a65      	ldr	r2, [pc, #404]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c354:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c356:	4a63      	ldr	r2, [pc, #396]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c358:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c35c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c35e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c362:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c36a:	d118      	bne.n	800c39e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c36c:	f7f8 fa4e 	bl	800480c <HAL_GetTick>
 800c370:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c374:	e00d      	b.n	800c392 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c376:	f7f8 fa49 	bl	800480c <HAL_GetTick>
 800c37a:	4602      	mov	r2, r0
 800c37c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c380:	1ad2      	subs	r2, r2, r3
 800c382:	f241 3388 	movw	r3, #5000	; 0x1388
 800c386:	429a      	cmp	r2, r3
 800c388:	d903      	bls.n	800c392 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800c38a:	2303      	movs	r3, #3
 800c38c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800c390:	e005      	b.n	800c39e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c392:	4b54      	ldr	r3, [pc, #336]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c396:	f003 0302 	and.w	r3, r3, #2
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d0eb      	beq.n	800c376 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800c39e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d129      	bne.n	800c3fa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c3a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c3ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c3b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c3b6:	d10e      	bne.n	800c3d6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800c3b8:	4b4a      	ldr	r3, [pc, #296]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c3ba:	691b      	ldr	r3, [r3, #16]
 800c3bc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800c3c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c3c8:	091a      	lsrs	r2, r3, #4
 800c3ca:	4b48      	ldr	r3, [pc, #288]	; (800c4ec <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800c3cc:	4013      	ands	r3, r2
 800c3ce:	4a45      	ldr	r2, [pc, #276]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c3d0:	430b      	orrs	r3, r1
 800c3d2:	6113      	str	r3, [r2, #16]
 800c3d4:	e005      	b.n	800c3e2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800c3d6:	4b43      	ldr	r3, [pc, #268]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c3d8:	691b      	ldr	r3, [r3, #16]
 800c3da:	4a42      	ldr	r2, [pc, #264]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c3dc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c3e0:	6113      	str	r3, [r2, #16]
 800c3e2:	4b40      	ldr	r3, [pc, #256]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c3e4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800c3e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c3ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c3f2:	4a3c      	ldr	r2, [pc, #240]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c3f4:	430b      	orrs	r3, r1
 800c3f6:	6713      	str	r3, [r2, #112]	; 0x70
 800c3f8:	e008      	b.n	800c40c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c3fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c3fe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800c402:	e003      	b.n	800c40c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c404:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c408:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c40c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c414:	f002 0301 	and.w	r3, r2, #1
 800c418:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c41c:	2300      	movs	r3, #0
 800c41e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c422:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c426:	460b      	mov	r3, r1
 800c428:	4313      	orrs	r3, r2
 800c42a:	f000 8090 	beq.w	800c54e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800c42e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c432:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c436:	2b28      	cmp	r3, #40	; 0x28
 800c438:	d870      	bhi.n	800c51c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800c43a:	a201      	add	r2, pc, #4	; (adr r2, 800c440 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800c43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c440:	0800c525 	.word	0x0800c525
 800c444:	0800c51d 	.word	0x0800c51d
 800c448:	0800c51d 	.word	0x0800c51d
 800c44c:	0800c51d 	.word	0x0800c51d
 800c450:	0800c51d 	.word	0x0800c51d
 800c454:	0800c51d 	.word	0x0800c51d
 800c458:	0800c51d 	.word	0x0800c51d
 800c45c:	0800c51d 	.word	0x0800c51d
 800c460:	0800c4f1 	.word	0x0800c4f1
 800c464:	0800c51d 	.word	0x0800c51d
 800c468:	0800c51d 	.word	0x0800c51d
 800c46c:	0800c51d 	.word	0x0800c51d
 800c470:	0800c51d 	.word	0x0800c51d
 800c474:	0800c51d 	.word	0x0800c51d
 800c478:	0800c51d 	.word	0x0800c51d
 800c47c:	0800c51d 	.word	0x0800c51d
 800c480:	0800c507 	.word	0x0800c507
 800c484:	0800c51d 	.word	0x0800c51d
 800c488:	0800c51d 	.word	0x0800c51d
 800c48c:	0800c51d 	.word	0x0800c51d
 800c490:	0800c51d 	.word	0x0800c51d
 800c494:	0800c51d 	.word	0x0800c51d
 800c498:	0800c51d 	.word	0x0800c51d
 800c49c:	0800c51d 	.word	0x0800c51d
 800c4a0:	0800c525 	.word	0x0800c525
 800c4a4:	0800c51d 	.word	0x0800c51d
 800c4a8:	0800c51d 	.word	0x0800c51d
 800c4ac:	0800c51d 	.word	0x0800c51d
 800c4b0:	0800c51d 	.word	0x0800c51d
 800c4b4:	0800c51d 	.word	0x0800c51d
 800c4b8:	0800c51d 	.word	0x0800c51d
 800c4bc:	0800c51d 	.word	0x0800c51d
 800c4c0:	0800c525 	.word	0x0800c525
 800c4c4:	0800c51d 	.word	0x0800c51d
 800c4c8:	0800c51d 	.word	0x0800c51d
 800c4cc:	0800c51d 	.word	0x0800c51d
 800c4d0:	0800c51d 	.word	0x0800c51d
 800c4d4:	0800c51d 	.word	0x0800c51d
 800c4d8:	0800c51d 	.word	0x0800c51d
 800c4dc:	0800c51d 	.word	0x0800c51d
 800c4e0:	0800c525 	.word	0x0800c525
 800c4e4:	58024400 	.word	0x58024400
 800c4e8:	58024800 	.word	0x58024800
 800c4ec:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c4f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4f4:	3308      	adds	r3, #8
 800c4f6:	2101      	movs	r1, #1
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f000 ffc5 	bl	800d488 <RCCEx_PLL2_Config>
 800c4fe:	4603      	mov	r3, r0
 800c500:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c504:	e00f      	b.n	800c526 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c506:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c50a:	3328      	adds	r3, #40	; 0x28
 800c50c:	2101      	movs	r1, #1
 800c50e:	4618      	mov	r0, r3
 800c510:	f001 f86c 	bl	800d5ec <RCCEx_PLL3_Config>
 800c514:	4603      	mov	r3, r0
 800c516:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c51a:	e004      	b.n	800c526 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c51c:	2301      	movs	r3, #1
 800c51e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c522:	e000      	b.n	800c526 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800c524:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c526:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d10b      	bne.n	800c546 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c52e:	4bc0      	ldr	r3, [pc, #768]	; (800c830 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c532:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800c536:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c53a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c53e:	4abc      	ldr	r2, [pc, #752]	; (800c830 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c540:	430b      	orrs	r3, r1
 800c542:	6553      	str	r3, [r2, #84]	; 0x54
 800c544:	e003      	b.n	800c54e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c546:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c54a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c54e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c556:	f002 0302 	and.w	r3, r2, #2
 800c55a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c55e:	2300      	movs	r3, #0
 800c560:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c564:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800c568:	460b      	mov	r3, r1
 800c56a:	4313      	orrs	r3, r2
 800c56c:	d043      	beq.n	800c5f6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c56e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c572:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c576:	2b05      	cmp	r3, #5
 800c578:	d824      	bhi.n	800c5c4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800c57a:	a201      	add	r2, pc, #4	; (adr r2, 800c580 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800c57c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c580:	0800c5cd 	.word	0x0800c5cd
 800c584:	0800c599 	.word	0x0800c599
 800c588:	0800c5af 	.word	0x0800c5af
 800c58c:	0800c5cd 	.word	0x0800c5cd
 800c590:	0800c5cd 	.word	0x0800c5cd
 800c594:	0800c5cd 	.word	0x0800c5cd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c598:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c59c:	3308      	adds	r3, #8
 800c59e:	2101      	movs	r1, #1
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f000 ff71 	bl	800d488 <RCCEx_PLL2_Config>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c5ac:	e00f      	b.n	800c5ce <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c5ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5b2:	3328      	adds	r3, #40	; 0x28
 800c5b4:	2101      	movs	r1, #1
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f001 f818 	bl	800d5ec <RCCEx_PLL3_Config>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c5c2:	e004      	b.n	800c5ce <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c5ca:	e000      	b.n	800c5ce <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800c5cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c5ce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d10b      	bne.n	800c5ee <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c5d6:	4b96      	ldr	r3, [pc, #600]	; (800c830 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c5d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5da:	f023 0107 	bic.w	r1, r3, #7
 800c5de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5e6:	4a92      	ldr	r2, [pc, #584]	; (800c830 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c5e8:	430b      	orrs	r3, r1
 800c5ea:	6553      	str	r3, [r2, #84]	; 0x54
 800c5ec:	e003      	b.n	800c5f6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c5f2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c5f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5fe:	f002 0304 	and.w	r3, r2, #4
 800c602:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c606:	2300      	movs	r3, #0
 800c608:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c60c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800c610:	460b      	mov	r3, r1
 800c612:	4313      	orrs	r3, r2
 800c614:	d043      	beq.n	800c69e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c616:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c61a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c61e:	2b05      	cmp	r3, #5
 800c620:	d824      	bhi.n	800c66c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800c622:	a201      	add	r2, pc, #4	; (adr r2, 800c628 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800c624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c628:	0800c675 	.word	0x0800c675
 800c62c:	0800c641 	.word	0x0800c641
 800c630:	0800c657 	.word	0x0800c657
 800c634:	0800c675 	.word	0x0800c675
 800c638:	0800c675 	.word	0x0800c675
 800c63c:	0800c675 	.word	0x0800c675
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c640:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c644:	3308      	adds	r3, #8
 800c646:	2101      	movs	r1, #1
 800c648:	4618      	mov	r0, r3
 800c64a:	f000 ff1d 	bl	800d488 <RCCEx_PLL2_Config>
 800c64e:	4603      	mov	r3, r0
 800c650:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c654:	e00f      	b.n	800c676 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c656:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c65a:	3328      	adds	r3, #40	; 0x28
 800c65c:	2101      	movs	r1, #1
 800c65e:	4618      	mov	r0, r3
 800c660:	f000 ffc4 	bl	800d5ec <RCCEx_PLL3_Config>
 800c664:	4603      	mov	r3, r0
 800c666:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c66a:	e004      	b.n	800c676 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c66c:	2301      	movs	r3, #1
 800c66e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c672:	e000      	b.n	800c676 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800c674:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c676:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d10b      	bne.n	800c696 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c67e:	4b6c      	ldr	r3, [pc, #432]	; (800c830 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c682:	f023 0107 	bic.w	r1, r3, #7
 800c686:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c68a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c68e:	4a68      	ldr	r2, [pc, #416]	; (800c830 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c690:	430b      	orrs	r3, r1
 800c692:	6593      	str	r3, [r2, #88]	; 0x58
 800c694:	e003      	b.n	800c69e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c696:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c69a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c69e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a6:	f002 0320 	and.w	r3, r2, #32
 800c6aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c6b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c6b8:	460b      	mov	r3, r1
 800c6ba:	4313      	orrs	r3, r2
 800c6bc:	d055      	beq.n	800c76a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c6be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c6c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c6ca:	d033      	beq.n	800c734 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c6cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c6d0:	d82c      	bhi.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c6d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6d6:	d02f      	beq.n	800c738 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c6d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6dc:	d826      	bhi.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c6de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c6e2:	d02b      	beq.n	800c73c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c6e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c6e8:	d820      	bhi.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c6ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6ee:	d012      	beq.n	800c716 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800c6f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6f4:	d81a      	bhi.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d022      	beq.n	800c740 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800c6fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c6fe:	d115      	bne.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c700:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c704:	3308      	adds	r3, #8
 800c706:	2100      	movs	r1, #0
 800c708:	4618      	mov	r0, r3
 800c70a:	f000 febd 	bl	800d488 <RCCEx_PLL2_Config>
 800c70e:	4603      	mov	r3, r0
 800c710:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c714:	e015      	b.n	800c742 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c716:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c71a:	3328      	adds	r3, #40	; 0x28
 800c71c:	2102      	movs	r1, #2
 800c71e:	4618      	mov	r0, r3
 800c720:	f000 ff64 	bl	800d5ec <RCCEx_PLL3_Config>
 800c724:	4603      	mov	r3, r0
 800c726:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c72a:	e00a      	b.n	800c742 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c72c:	2301      	movs	r3, #1
 800c72e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c732:	e006      	b.n	800c742 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c734:	bf00      	nop
 800c736:	e004      	b.n	800c742 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c738:	bf00      	nop
 800c73a:	e002      	b.n	800c742 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c73c:	bf00      	nop
 800c73e:	e000      	b.n	800c742 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c740:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c742:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c746:	2b00      	cmp	r3, #0
 800c748:	d10b      	bne.n	800c762 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c74a:	4b39      	ldr	r3, [pc, #228]	; (800c830 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c74c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c74e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c752:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c756:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c75a:	4a35      	ldr	r2, [pc, #212]	; (800c830 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c75c:	430b      	orrs	r3, r1
 800c75e:	6553      	str	r3, [r2, #84]	; 0x54
 800c760:	e003      	b.n	800c76a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c762:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c766:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c76a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c772:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800c776:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c77a:	2300      	movs	r3, #0
 800c77c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c780:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800c784:	460b      	mov	r3, r1
 800c786:	4313      	orrs	r3, r2
 800c788:	d058      	beq.n	800c83c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c78a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c78e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c792:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c796:	d033      	beq.n	800c800 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c798:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c79c:	d82c      	bhi.n	800c7f8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c79e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c7a2:	d02f      	beq.n	800c804 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c7a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c7a8:	d826      	bhi.n	800c7f8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c7aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c7ae:	d02b      	beq.n	800c808 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c7b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c7b4:	d820      	bhi.n	800c7f8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c7b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c7ba:	d012      	beq.n	800c7e2 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800c7bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c7c0:	d81a      	bhi.n	800c7f8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d022      	beq.n	800c80c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800c7c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c7ca:	d115      	bne.n	800c7f8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c7cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7d0:	3308      	adds	r3, #8
 800c7d2:	2100      	movs	r1, #0
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f000 fe57 	bl	800d488 <RCCEx_PLL2_Config>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c7e0:	e015      	b.n	800c80e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c7e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7e6:	3328      	adds	r3, #40	; 0x28
 800c7e8:	2102      	movs	r1, #2
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	f000 fefe 	bl	800d5ec <RCCEx_PLL3_Config>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c7f6:	e00a      	b.n	800c80e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c7fe:	e006      	b.n	800c80e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c800:	bf00      	nop
 800c802:	e004      	b.n	800c80e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c804:	bf00      	nop
 800c806:	e002      	b.n	800c80e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c808:	bf00      	nop
 800c80a:	e000      	b.n	800c80e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c80c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c80e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c812:	2b00      	cmp	r3, #0
 800c814:	d10e      	bne.n	800c834 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c816:	4b06      	ldr	r3, [pc, #24]	; (800c830 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c81a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800c81e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c822:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c826:	4a02      	ldr	r2, [pc, #8]	; (800c830 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c828:	430b      	orrs	r3, r1
 800c82a:	6593      	str	r3, [r2, #88]	; 0x58
 800c82c:	e006      	b.n	800c83c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800c82e:	bf00      	nop
 800c830:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c834:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c838:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c83c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c844:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800c848:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c84c:	2300      	movs	r3, #0
 800c84e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c852:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800c856:	460b      	mov	r3, r1
 800c858:	4313      	orrs	r3, r2
 800c85a:	d055      	beq.n	800c908 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c85c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c860:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c864:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c868:	d033      	beq.n	800c8d2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c86a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c86e:	d82c      	bhi.n	800c8ca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c874:	d02f      	beq.n	800c8d6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c876:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c87a:	d826      	bhi.n	800c8ca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c87c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c880:	d02b      	beq.n	800c8da <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c882:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c886:	d820      	bhi.n	800c8ca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c888:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c88c:	d012      	beq.n	800c8b4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800c88e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c892:	d81a      	bhi.n	800c8ca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c894:	2b00      	cmp	r3, #0
 800c896:	d022      	beq.n	800c8de <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800c898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c89c:	d115      	bne.n	800c8ca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c89e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c8a2:	3308      	adds	r3, #8
 800c8a4:	2100      	movs	r1, #0
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f000 fdee 	bl	800d488 <RCCEx_PLL2_Config>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c8b2:	e015      	b.n	800c8e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c8b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c8b8:	3328      	adds	r3, #40	; 0x28
 800c8ba:	2102      	movs	r1, #2
 800c8bc:	4618      	mov	r0, r3
 800c8be:	f000 fe95 	bl	800d5ec <RCCEx_PLL3_Config>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c8c8:	e00a      	b.n	800c8e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c8d0:	e006      	b.n	800c8e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c8d2:	bf00      	nop
 800c8d4:	e004      	b.n	800c8e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c8d6:	bf00      	nop
 800c8d8:	e002      	b.n	800c8e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c8da:	bf00      	nop
 800c8dc:	e000      	b.n	800c8e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c8de:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c8e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d10b      	bne.n	800c900 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c8e8:	4ba1      	ldr	r3, [pc, #644]	; (800cb70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c8ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8ec:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c8f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c8f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c8f8:	4a9d      	ldr	r2, [pc, #628]	; (800cb70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c8fa:	430b      	orrs	r3, r1
 800c8fc:	6593      	str	r3, [r2, #88]	; 0x58
 800c8fe:	e003      	b.n	800c908 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c900:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c904:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c908:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c910:	f002 0308 	and.w	r3, r2, #8
 800c914:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c918:	2300      	movs	r3, #0
 800c91a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c91e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c922:	460b      	mov	r3, r1
 800c924:	4313      	orrs	r3, r2
 800c926:	d01e      	beq.n	800c966 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c928:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c92c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c934:	d10c      	bne.n	800c950 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c936:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c93a:	3328      	adds	r3, #40	; 0x28
 800c93c:	2102      	movs	r1, #2
 800c93e:	4618      	mov	r0, r3
 800c940:	f000 fe54 	bl	800d5ec <RCCEx_PLL3_Config>
 800c944:	4603      	mov	r3, r0
 800c946:	2b00      	cmp	r3, #0
 800c948:	d002      	beq.n	800c950 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800c94a:	2301      	movs	r3, #1
 800c94c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c950:	4b87      	ldr	r3, [pc, #540]	; (800cb70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c954:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c958:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c95c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c960:	4a83      	ldr	r2, [pc, #524]	; (800cb70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c962:	430b      	orrs	r3, r1
 800c964:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c966:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c96e:	f002 0310 	and.w	r3, r2, #16
 800c972:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c976:	2300      	movs	r3, #0
 800c978:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c97c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c980:	460b      	mov	r3, r1
 800c982:	4313      	orrs	r3, r2
 800c984:	d01e      	beq.n	800c9c4 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c986:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c98a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c98e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c992:	d10c      	bne.n	800c9ae <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c994:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c998:	3328      	adds	r3, #40	; 0x28
 800c99a:	2102      	movs	r1, #2
 800c99c:	4618      	mov	r0, r3
 800c99e:	f000 fe25 	bl	800d5ec <RCCEx_PLL3_Config>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d002      	beq.n	800c9ae <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c9ae:	4b70      	ldr	r3, [pc, #448]	; (800cb70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c9b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c9b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c9ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c9be:	4a6c      	ldr	r2, [pc, #432]	; (800cb70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c9c0:	430b      	orrs	r3, r1
 800c9c2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c9c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9cc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c9d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c9da:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c9de:	460b      	mov	r3, r1
 800c9e0:	4313      	orrs	r3, r2
 800c9e2:	d03e      	beq.n	800ca62 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c9e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c9e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c9ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9f0:	d022      	beq.n	800ca38 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800c9f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9f6:	d81b      	bhi.n	800ca30 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d003      	beq.n	800ca04 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800c9fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca00:	d00b      	beq.n	800ca1a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800ca02:	e015      	b.n	800ca30 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ca04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ca08:	3308      	adds	r3, #8
 800ca0a:	2100      	movs	r1, #0
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	f000 fd3b 	bl	800d488 <RCCEx_PLL2_Config>
 800ca12:	4603      	mov	r3, r0
 800ca14:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ca18:	e00f      	b.n	800ca3a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ca1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ca1e:	3328      	adds	r3, #40	; 0x28
 800ca20:	2102      	movs	r1, #2
 800ca22:	4618      	mov	r0, r3
 800ca24:	f000 fde2 	bl	800d5ec <RCCEx_PLL3_Config>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ca2e:	e004      	b.n	800ca3a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ca30:	2301      	movs	r3, #1
 800ca32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800ca36:	e000      	b.n	800ca3a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800ca38:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ca3a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d10b      	bne.n	800ca5a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ca42:	4b4b      	ldr	r3, [pc, #300]	; (800cb70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ca44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca46:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800ca4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ca4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ca52:	4a47      	ldr	r2, [pc, #284]	; (800cb70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ca54:	430b      	orrs	r3, r1
 800ca56:	6593      	str	r3, [r2, #88]	; 0x58
 800ca58:	e003      	b.n	800ca62 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca5a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ca5e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ca62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ca66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca6a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800ca6e:	67bb      	str	r3, [r7, #120]	; 0x78
 800ca70:	2300      	movs	r3, #0
 800ca72:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ca74:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800ca78:	460b      	mov	r3, r1
 800ca7a:	4313      	orrs	r3, r2
 800ca7c:	d03b      	beq.n	800caf6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800ca7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ca82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ca8a:	d01f      	beq.n	800cacc <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800ca8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ca90:	d818      	bhi.n	800cac4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800ca92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca96:	d003      	beq.n	800caa0 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800ca98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ca9c:	d007      	beq.n	800caae <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800ca9e:	e011      	b.n	800cac4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800caa0:	4b33      	ldr	r3, [pc, #204]	; (800cb70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800caa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caa4:	4a32      	ldr	r2, [pc, #200]	; (800cb70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800caa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800caaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800caac:	e00f      	b.n	800cace <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800caae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cab2:	3328      	adds	r3, #40	; 0x28
 800cab4:	2101      	movs	r1, #1
 800cab6:	4618      	mov	r0, r3
 800cab8:	f000 fd98 	bl	800d5ec <RCCEx_PLL3_Config>
 800cabc:	4603      	mov	r3, r0
 800cabe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800cac2:	e004      	b.n	800cace <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cac4:	2301      	movs	r3, #1
 800cac6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800caca:	e000      	b.n	800cace <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800cacc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cace:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d10b      	bne.n	800caee <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800cad6:	4b26      	ldr	r3, [pc, #152]	; (800cb70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800cad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cada:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800cade:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cae6:	4a22      	ldr	r2, [pc, #136]	; (800cb70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800cae8:	430b      	orrs	r3, r1
 800caea:	6553      	str	r3, [r2, #84]	; 0x54
 800caec:	e003      	b.n	800caf6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800caee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800caf2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800caf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cafe:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800cb02:	673b      	str	r3, [r7, #112]	; 0x70
 800cb04:	2300      	movs	r3, #0
 800cb06:	677b      	str	r3, [r7, #116]	; 0x74
 800cb08:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800cb0c:	460b      	mov	r3, r1
 800cb0e:	4313      	orrs	r3, r2
 800cb10:	d034      	beq.n	800cb7c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800cb12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cb16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d003      	beq.n	800cb24 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800cb1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb20:	d007      	beq.n	800cb32 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800cb22:	e011      	b.n	800cb48 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cb24:	4b12      	ldr	r3, [pc, #72]	; (800cb70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800cb26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb28:	4a11      	ldr	r2, [pc, #68]	; (800cb70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800cb2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cb2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800cb30:	e00e      	b.n	800cb50 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cb32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cb36:	3308      	adds	r3, #8
 800cb38:	2102      	movs	r1, #2
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f000 fca4 	bl	800d488 <RCCEx_PLL2_Config>
 800cb40:	4603      	mov	r3, r0
 800cb42:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800cb46:	e003      	b.n	800cb50 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800cb48:	2301      	movs	r3, #1
 800cb4a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800cb4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cb50:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d10d      	bne.n	800cb74 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800cb58:	4b05      	ldr	r3, [pc, #20]	; (800cb70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800cb5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cb60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cb64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb66:	4a02      	ldr	r2, [pc, #8]	; (800cb70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800cb68:	430b      	orrs	r3, r1
 800cb6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cb6c:	e006      	b.n	800cb7c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800cb6e:	bf00      	nop
 800cb70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb74:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cb78:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800cb7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb84:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800cb88:	66bb      	str	r3, [r7, #104]	; 0x68
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cb8e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800cb92:	460b      	mov	r3, r1
 800cb94:	4313      	orrs	r3, r2
 800cb96:	d00c      	beq.n	800cbb2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800cb98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cb9c:	3328      	adds	r3, #40	; 0x28
 800cb9e:	2102      	movs	r1, #2
 800cba0:	4618      	mov	r0, r3
 800cba2:	f000 fd23 	bl	800d5ec <RCCEx_PLL3_Config>
 800cba6:	4603      	mov	r3, r0
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d002      	beq.n	800cbb2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800cbac:	2301      	movs	r3, #1
 800cbae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800cbb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbba:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800cbbe:	663b      	str	r3, [r7, #96]	; 0x60
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	667b      	str	r3, [r7, #100]	; 0x64
 800cbc4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800cbc8:	460b      	mov	r3, r1
 800cbca:	4313      	orrs	r3, r2
 800cbcc:	d038      	beq.n	800cc40 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800cbce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cbd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cbd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cbda:	d018      	beq.n	800cc0e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800cbdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cbe0:	d811      	bhi.n	800cc06 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800cbe2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbe6:	d014      	beq.n	800cc12 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800cbe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbec:	d80b      	bhi.n	800cc06 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d011      	beq.n	800cc16 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800cbf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbf6:	d106      	bne.n	800cc06 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cbf8:	4bc3      	ldr	r3, [pc, #780]	; (800cf08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cbfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbfc:	4ac2      	ldr	r2, [pc, #776]	; (800cf08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cbfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cc02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800cc04:	e008      	b.n	800cc18 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cc06:	2301      	movs	r3, #1
 800cc08:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800cc0c:	e004      	b.n	800cc18 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800cc0e:	bf00      	nop
 800cc10:	e002      	b.n	800cc18 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800cc12:	bf00      	nop
 800cc14:	e000      	b.n	800cc18 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800cc16:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cc18:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d10b      	bne.n	800cc38 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cc20:	4bb9      	ldr	r3, [pc, #740]	; (800cf08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cc22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc24:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800cc28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cc2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc30:	4ab5      	ldr	r2, [pc, #724]	; (800cf08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cc32:	430b      	orrs	r3, r1
 800cc34:	6553      	str	r3, [r2, #84]	; 0x54
 800cc36:	e003      	b.n	800cc40 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc38:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cc3c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800cc40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc48:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800cc4c:	65bb      	str	r3, [r7, #88]	; 0x58
 800cc4e:	2300      	movs	r3, #0
 800cc50:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cc52:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800cc56:	460b      	mov	r3, r1
 800cc58:	4313      	orrs	r3, r2
 800cc5a:	d009      	beq.n	800cc70 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800cc5c:	4baa      	ldr	r3, [pc, #680]	; (800cf08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cc5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc60:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cc64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cc68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc6a:	4aa7      	ldr	r2, [pc, #668]	; (800cf08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cc6c:	430b      	orrs	r3, r1
 800cc6e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800cc70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cc74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc78:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800cc7c:	653b      	str	r3, [r7, #80]	; 0x50
 800cc7e:	2300      	movs	r3, #0
 800cc80:	657b      	str	r3, [r7, #84]	; 0x54
 800cc82:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800cc86:	460b      	mov	r3, r1
 800cc88:	4313      	orrs	r3, r2
 800cc8a:	d009      	beq.n	800cca0 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800cc8c:	4b9e      	ldr	r3, [pc, #632]	; (800cf08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cc8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc90:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800cc94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cc98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc9a:	4a9b      	ldr	r2, [pc, #620]	; (800cf08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cc9c:	430b      	orrs	r3, r1
 800cc9e:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800cca0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800ccac:	64bb      	str	r3, [r7, #72]	; 0x48
 800ccae:	2300      	movs	r3, #0
 800ccb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ccb2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800ccb6:	460b      	mov	r3, r1
 800ccb8:	4313      	orrs	r3, r2
 800ccba:	d009      	beq.n	800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800ccbc:	4b92      	ldr	r3, [pc, #584]	; (800cf08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ccbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccc0:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 800ccc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ccc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ccca:	4a8f      	ldr	r2, [pc, #572]	; (800cf08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cccc:	430b      	orrs	r3, r1
 800ccce:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ccd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ccd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd8:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800ccdc:	643b      	str	r3, [r7, #64]	; 0x40
 800ccde:	2300      	movs	r3, #0
 800cce0:	647b      	str	r3, [r7, #68]	; 0x44
 800cce2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800cce6:	460b      	mov	r3, r1
 800cce8:	4313      	orrs	r3, r2
 800ccea:	d00e      	beq.n	800cd0a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ccec:	4b86      	ldr	r3, [pc, #536]	; (800cf08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ccee:	691b      	ldr	r3, [r3, #16]
 800ccf0:	4a85      	ldr	r2, [pc, #532]	; (800cf08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ccf2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ccf6:	6113      	str	r3, [r2, #16]
 800ccf8:	4b83      	ldr	r3, [pc, #524]	; (800cf08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ccfa:	6919      	ldr	r1, [r3, #16]
 800ccfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cd00:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800cd04:	4a80      	ldr	r2, [pc, #512]	; (800cf08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cd06:	430b      	orrs	r3, r1
 800cd08:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800cd0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd12:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800cd16:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd18:	2300      	movs	r3, #0
 800cd1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd1c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800cd20:	460b      	mov	r3, r1
 800cd22:	4313      	orrs	r3, r2
 800cd24:	d009      	beq.n	800cd3a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800cd26:	4b78      	ldr	r3, [pc, #480]	; (800cf08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cd28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd2a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800cd2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cd32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd34:	4a74      	ldr	r2, [pc, #464]	; (800cf08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cd36:	430b      	orrs	r3, r1
 800cd38:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800cd3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd42:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800cd46:	633b      	str	r3, [r7, #48]	; 0x30
 800cd48:	2300      	movs	r3, #0
 800cd4a:	637b      	str	r3, [r7, #52]	; 0x34
 800cd4c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800cd50:	460b      	mov	r3, r1
 800cd52:	4313      	orrs	r3, r2
 800cd54:	d00a      	beq.n	800cd6c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800cd56:	4b6c      	ldr	r3, [pc, #432]	; (800cf08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cd58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd5a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800cd5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cd62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cd66:	4a68      	ldr	r2, [pc, #416]	; (800cf08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cd68:	430b      	orrs	r3, r1
 800cd6a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800cd6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cd70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd74:	2100      	movs	r1, #0
 800cd76:	62b9      	str	r1, [r7, #40]	; 0x28
 800cd78:	f003 0301 	and.w	r3, r3, #1
 800cd7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd7e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800cd82:	460b      	mov	r3, r1
 800cd84:	4313      	orrs	r3, r2
 800cd86:	d011      	beq.n	800cdac <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cd88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cd8c:	3308      	adds	r3, #8
 800cd8e:	2100      	movs	r1, #0
 800cd90:	4618      	mov	r0, r3
 800cd92:	f000 fb79 	bl	800d488 <RCCEx_PLL2_Config>
 800cd96:	4603      	mov	r3, r0
 800cd98:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800cd9c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d003      	beq.n	800cdac <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cda4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cda8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800cdac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cdb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb4:	2100      	movs	r1, #0
 800cdb6:	6239      	str	r1, [r7, #32]
 800cdb8:	f003 0302 	and.w	r3, r3, #2
 800cdbc:	627b      	str	r3, [r7, #36]	; 0x24
 800cdbe:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800cdc2:	460b      	mov	r3, r1
 800cdc4:	4313      	orrs	r3, r2
 800cdc6:	d011      	beq.n	800cdec <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cdc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cdcc:	3308      	adds	r3, #8
 800cdce:	2101      	movs	r1, #1
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f000 fb59 	bl	800d488 <RCCEx_PLL2_Config>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800cddc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d003      	beq.n	800cdec <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cde4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cde8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800cdec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cdf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdf4:	2100      	movs	r1, #0
 800cdf6:	61b9      	str	r1, [r7, #24]
 800cdf8:	f003 0304 	and.w	r3, r3, #4
 800cdfc:	61fb      	str	r3, [r7, #28]
 800cdfe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ce02:	460b      	mov	r3, r1
 800ce04:	4313      	orrs	r3, r2
 800ce06:	d011      	beq.n	800ce2c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ce08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ce0c:	3308      	adds	r3, #8
 800ce0e:	2102      	movs	r1, #2
 800ce10:	4618      	mov	r0, r3
 800ce12:	f000 fb39 	bl	800d488 <RCCEx_PLL2_Config>
 800ce16:	4603      	mov	r3, r0
 800ce18:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800ce1c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d003      	beq.n	800ce2c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce24:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ce28:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ce2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ce30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce34:	2100      	movs	r1, #0
 800ce36:	6139      	str	r1, [r7, #16]
 800ce38:	f003 0308 	and.w	r3, r3, #8
 800ce3c:	617b      	str	r3, [r7, #20]
 800ce3e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ce42:	460b      	mov	r3, r1
 800ce44:	4313      	orrs	r3, r2
 800ce46:	d011      	beq.n	800ce6c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ce48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ce4c:	3328      	adds	r3, #40	; 0x28
 800ce4e:	2100      	movs	r1, #0
 800ce50:	4618      	mov	r0, r3
 800ce52:	f000 fbcb 	bl	800d5ec <RCCEx_PLL3_Config>
 800ce56:	4603      	mov	r3, r0
 800ce58:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800ce5c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d003      	beq.n	800ce6c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce64:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ce68:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ce6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ce70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce74:	2100      	movs	r1, #0
 800ce76:	60b9      	str	r1, [r7, #8]
 800ce78:	f003 0310 	and.w	r3, r3, #16
 800ce7c:	60fb      	str	r3, [r7, #12]
 800ce7e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ce82:	460b      	mov	r3, r1
 800ce84:	4313      	orrs	r3, r2
 800ce86:	d011      	beq.n	800ceac <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ce88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ce8c:	3328      	adds	r3, #40	; 0x28
 800ce8e:	2101      	movs	r1, #1
 800ce90:	4618      	mov	r0, r3
 800ce92:	f000 fbab 	bl	800d5ec <RCCEx_PLL3_Config>
 800ce96:	4603      	mov	r3, r0
 800ce98:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800ce9c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d003      	beq.n	800ceac <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cea4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cea8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ceac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ceb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb4:	2100      	movs	r1, #0
 800ceb6:	6039      	str	r1, [r7, #0]
 800ceb8:	f003 0320 	and.w	r3, r3, #32
 800cebc:	607b      	str	r3, [r7, #4]
 800cebe:	e9d7 1200 	ldrd	r1, r2, [r7]
 800cec2:	460b      	mov	r3, r1
 800cec4:	4313      	orrs	r3, r2
 800cec6:	d011      	beq.n	800ceec <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cecc:	3328      	adds	r3, #40	; 0x28
 800cece:	2102      	movs	r1, #2
 800ced0:	4618      	mov	r0, r3
 800ced2:	f000 fb8b 	bl	800d5ec <RCCEx_PLL3_Config>
 800ced6:	4603      	mov	r3, r0
 800ced8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800cedc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d003      	beq.n	800ceec <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cee4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cee8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 800ceec:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d101      	bne.n	800cef8 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800cef4:	2300      	movs	r3, #0
 800cef6:	e000      	b.n	800cefa <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800cef8:	2301      	movs	r3, #1
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800cf00:	46bd      	mov	sp, r7
 800cf02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cf06:	bf00      	nop
 800cf08:	58024400 	.word	0x58024400

0800cf0c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800cf10:	f7fe fde2 	bl	800bad8 <HAL_RCC_GetHCLKFreq>
 800cf14:	4602      	mov	r2, r0
 800cf16:	4b06      	ldr	r3, [pc, #24]	; (800cf30 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cf18:	6a1b      	ldr	r3, [r3, #32]
 800cf1a:	091b      	lsrs	r3, r3, #4
 800cf1c:	f003 0307 	and.w	r3, r3, #7
 800cf20:	4904      	ldr	r1, [pc, #16]	; (800cf34 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cf22:	5ccb      	ldrb	r3, [r1, r3]
 800cf24:	f003 031f 	and.w	r3, r3, #31
 800cf28:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	bd80      	pop	{r7, pc}
 800cf30:	58024400 	.word	0x58024400
 800cf34:	08014c98 	.word	0x08014c98

0800cf38 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b089      	sub	sp, #36	; 0x24
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cf40:	4ba1      	ldr	r3, [pc, #644]	; (800d1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf44:	f003 0303 	and.w	r3, r3, #3
 800cf48:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800cf4a:	4b9f      	ldr	r3, [pc, #636]	; (800d1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf4e:	0b1b      	lsrs	r3, r3, #12
 800cf50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf54:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cf56:	4b9c      	ldr	r3, [pc, #624]	; (800d1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf5a:	091b      	lsrs	r3, r3, #4
 800cf5c:	f003 0301 	and.w	r3, r3, #1
 800cf60:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800cf62:	4b99      	ldr	r3, [pc, #612]	; (800d1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf66:	08db      	lsrs	r3, r3, #3
 800cf68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cf6c:	693a      	ldr	r2, [r7, #16]
 800cf6e:	fb02 f303 	mul.w	r3, r2, r3
 800cf72:	ee07 3a90 	vmov	s15, r3
 800cf76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	f000 8111 	beq.w	800d1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800cf86:	69bb      	ldr	r3, [r7, #24]
 800cf88:	2b02      	cmp	r3, #2
 800cf8a:	f000 8083 	beq.w	800d094 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800cf8e:	69bb      	ldr	r3, [r7, #24]
 800cf90:	2b02      	cmp	r3, #2
 800cf92:	f200 80a1 	bhi.w	800d0d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cf96:	69bb      	ldr	r3, [r7, #24]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d003      	beq.n	800cfa4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cf9c:	69bb      	ldr	r3, [r7, #24]
 800cf9e:	2b01      	cmp	r3, #1
 800cfa0:	d056      	beq.n	800d050 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cfa2:	e099      	b.n	800d0d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cfa4:	4b88      	ldr	r3, [pc, #544]	; (800d1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	f003 0320 	and.w	r3, r3, #32
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d02d      	beq.n	800d00c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cfb0:	4b85      	ldr	r3, [pc, #532]	; (800d1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	08db      	lsrs	r3, r3, #3
 800cfb6:	f003 0303 	and.w	r3, r3, #3
 800cfba:	4a84      	ldr	r2, [pc, #528]	; (800d1cc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cfbc:	fa22 f303 	lsr.w	r3, r2, r3
 800cfc0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cfc2:	68bb      	ldr	r3, [r7, #8]
 800cfc4:	ee07 3a90 	vmov	s15, r3
 800cfc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	ee07 3a90 	vmov	s15, r3
 800cfd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfda:	4b7b      	ldr	r3, [pc, #492]	; (800d1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cfdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfe2:	ee07 3a90 	vmov	s15, r3
 800cfe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfea:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfee:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d1d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cffa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d002:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d006:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d00a:	e087      	b.n	800d11c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	ee07 3a90 	vmov	s15, r3
 800d012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d016:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d1d4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d01a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d01e:	4b6a      	ldr	r3, [pc, #424]	; (800d1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d026:	ee07 3a90 	vmov	s15, r3
 800d02a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d02e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d032:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d1d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d03a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d03e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d04a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d04e:	e065      	b.n	800d11c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d050:	697b      	ldr	r3, [r7, #20]
 800d052:	ee07 3a90 	vmov	s15, r3
 800d056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d05a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d05e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d062:	4b59      	ldr	r3, [pc, #356]	; (800d1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d06a:	ee07 3a90 	vmov	s15, r3
 800d06e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d072:	ed97 6a03 	vldr	s12, [r7, #12]
 800d076:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d1d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d07a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d07e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d082:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d08a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d08e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d092:	e043      	b.n	800d11c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	ee07 3a90 	vmov	s15, r3
 800d09a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d09e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d1dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d0a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0a6:	4b48      	ldr	r3, [pc, #288]	; (800d1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0ae:	ee07 3a90 	vmov	s15, r3
 800d0b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d1d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d0be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d0d6:	e021      	b.n	800d11c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d0d8:	697b      	ldr	r3, [r7, #20]
 800d0da:	ee07 3a90 	vmov	s15, r3
 800d0de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d0e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0ea:	4b37      	ldr	r3, [pc, #220]	; (800d1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0f2:	ee07 3a90 	vmov	s15, r3
 800d0f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d1d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d10a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d10e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d112:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d116:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d11a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d11c:	4b2a      	ldr	r3, [pc, #168]	; (800d1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d11e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d120:	0a5b      	lsrs	r3, r3, #9
 800d122:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d126:	ee07 3a90 	vmov	s15, r3
 800d12a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d12e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d132:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d136:	edd7 6a07 	vldr	s13, [r7, #28]
 800d13a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d13e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d142:	ee17 2a90 	vmov	r2, s15
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d14a:	4b1f      	ldr	r3, [pc, #124]	; (800d1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d14c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d14e:	0c1b      	lsrs	r3, r3, #16
 800d150:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d154:	ee07 3a90 	vmov	s15, r3
 800d158:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d15c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d160:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d164:	edd7 6a07 	vldr	s13, [r7, #28]
 800d168:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d16c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d170:	ee17 2a90 	vmov	r2, s15
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d178:	4b13      	ldr	r3, [pc, #76]	; (800d1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d17a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d17c:	0e1b      	lsrs	r3, r3, #24
 800d17e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d182:	ee07 3a90 	vmov	s15, r3
 800d186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d18a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d18e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d192:	edd7 6a07 	vldr	s13, [r7, #28]
 800d196:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d19a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d19e:	ee17 2a90 	vmov	r2, s15
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d1a6:	e008      	b.n	800d1ba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	609a      	str	r2, [r3, #8]
}
 800d1ba:	bf00      	nop
 800d1bc:	3724      	adds	r7, #36	; 0x24
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c4:	4770      	bx	lr
 800d1c6:	bf00      	nop
 800d1c8:	58024400 	.word	0x58024400
 800d1cc:	03d09000 	.word	0x03d09000
 800d1d0:	46000000 	.word	0x46000000
 800d1d4:	4c742400 	.word	0x4c742400
 800d1d8:	4a742400 	.word	0x4a742400
 800d1dc:	4bb71b00 	.word	0x4bb71b00

0800d1e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d1e0:	b480      	push	{r7}
 800d1e2:	b089      	sub	sp, #36	; 0x24
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d1e8:	4ba1      	ldr	r3, [pc, #644]	; (800d470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1ec:	f003 0303 	and.w	r3, r3, #3
 800d1f0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d1f2:	4b9f      	ldr	r3, [pc, #636]	; (800d470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1f6:	0d1b      	lsrs	r3, r3, #20
 800d1f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d1fc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d1fe:	4b9c      	ldr	r3, [pc, #624]	; (800d470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d202:	0a1b      	lsrs	r3, r3, #8
 800d204:	f003 0301 	and.w	r3, r3, #1
 800d208:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d20a:	4b99      	ldr	r3, [pc, #612]	; (800d470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d20c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d20e:	08db      	lsrs	r3, r3, #3
 800d210:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d214:	693a      	ldr	r2, [r7, #16]
 800d216:	fb02 f303 	mul.w	r3, r2, r3
 800d21a:	ee07 3a90 	vmov	s15, r3
 800d21e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d222:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	f000 8111 	beq.w	800d450 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d22e:	69bb      	ldr	r3, [r7, #24]
 800d230:	2b02      	cmp	r3, #2
 800d232:	f000 8083 	beq.w	800d33c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d236:	69bb      	ldr	r3, [r7, #24]
 800d238:	2b02      	cmp	r3, #2
 800d23a:	f200 80a1 	bhi.w	800d380 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d23e:	69bb      	ldr	r3, [r7, #24]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d003      	beq.n	800d24c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d244:	69bb      	ldr	r3, [r7, #24]
 800d246:	2b01      	cmp	r3, #1
 800d248:	d056      	beq.n	800d2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d24a:	e099      	b.n	800d380 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d24c:	4b88      	ldr	r3, [pc, #544]	; (800d470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	f003 0320 	and.w	r3, r3, #32
 800d254:	2b00      	cmp	r3, #0
 800d256:	d02d      	beq.n	800d2b4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d258:	4b85      	ldr	r3, [pc, #532]	; (800d470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	08db      	lsrs	r3, r3, #3
 800d25e:	f003 0303 	and.w	r3, r3, #3
 800d262:	4a84      	ldr	r2, [pc, #528]	; (800d474 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d264:	fa22 f303 	lsr.w	r3, r2, r3
 800d268:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d26a:	68bb      	ldr	r3, [r7, #8]
 800d26c:	ee07 3a90 	vmov	s15, r3
 800d270:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	ee07 3a90 	vmov	s15, r3
 800d27a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d27e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d282:	4b7b      	ldr	r3, [pc, #492]	; (800d470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d28a:	ee07 3a90 	vmov	s15, r3
 800d28e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d292:	ed97 6a03 	vldr	s12, [r7, #12]
 800d296:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d478 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d29a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d29e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d2b2:	e087      	b.n	800d3c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d2b4:	697b      	ldr	r3, [r7, #20]
 800d2b6:	ee07 3a90 	vmov	s15, r3
 800d2ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d47c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d2c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2c6:	4b6a      	ldr	r3, [pc, #424]	; (800d470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2ce:	ee07 3a90 	vmov	s15, r3
 800d2d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2da:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d478 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d2de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d2f6:	e065      	b.n	800d3c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d2f8:	697b      	ldr	r3, [r7, #20]
 800d2fa:	ee07 3a90 	vmov	s15, r3
 800d2fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d302:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d480 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d30a:	4b59      	ldr	r3, [pc, #356]	; (800d470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d30c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d30e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d312:	ee07 3a90 	vmov	s15, r3
 800d316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d31a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d31e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d478 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d32a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d32e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d332:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d336:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d33a:	e043      	b.n	800d3c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	ee07 3a90 	vmov	s15, r3
 800d342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d346:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d484 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d34a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d34e:	4b48      	ldr	r3, [pc, #288]	; (800d470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d356:	ee07 3a90 	vmov	s15, r3
 800d35a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d35e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d362:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d478 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d36a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d36e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d37a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d37e:	e021      	b.n	800d3c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d380:	697b      	ldr	r3, [r7, #20]
 800d382:	ee07 3a90 	vmov	s15, r3
 800d386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d38a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d480 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d38e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d392:	4b37      	ldr	r3, [pc, #220]	; (800d470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d39a:	ee07 3a90 	vmov	s15, r3
 800d39e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d478 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d3aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d3c2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d3c4:	4b2a      	ldr	r3, [pc, #168]	; (800d470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3c8:	0a5b      	lsrs	r3, r3, #9
 800d3ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3ce:	ee07 3a90 	vmov	s15, r3
 800d3d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d3da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d3de:	edd7 6a07 	vldr	s13, [r7, #28]
 800d3e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3ea:	ee17 2a90 	vmov	r2, s15
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d3f2:	4b1f      	ldr	r3, [pc, #124]	; (800d470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3f6:	0c1b      	lsrs	r3, r3, #16
 800d3f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3fc:	ee07 3a90 	vmov	s15, r3
 800d400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d404:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d408:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d40c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d410:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d414:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d418:	ee17 2a90 	vmov	r2, s15
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d420:	4b13      	ldr	r3, [pc, #76]	; (800d470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d424:	0e1b      	lsrs	r3, r3, #24
 800d426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d42a:	ee07 3a90 	vmov	s15, r3
 800d42e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d432:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d436:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d43a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d43e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d442:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d446:	ee17 2a90 	vmov	r2, s15
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d44e:	e008      	b.n	800d462 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2200      	movs	r2, #0
 800d454:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2200      	movs	r2, #0
 800d45a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2200      	movs	r2, #0
 800d460:	609a      	str	r2, [r3, #8]
}
 800d462:	bf00      	nop
 800d464:	3724      	adds	r7, #36	; 0x24
 800d466:	46bd      	mov	sp, r7
 800d468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46c:	4770      	bx	lr
 800d46e:	bf00      	nop
 800d470:	58024400 	.word	0x58024400
 800d474:	03d09000 	.word	0x03d09000
 800d478:	46000000 	.word	0x46000000
 800d47c:	4c742400 	.word	0x4c742400
 800d480:	4a742400 	.word	0x4a742400
 800d484:	4bb71b00 	.word	0x4bb71b00

0800d488 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b084      	sub	sp, #16
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d492:	2300      	movs	r3, #0
 800d494:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d496:	4b53      	ldr	r3, [pc, #332]	; (800d5e4 <RCCEx_PLL2_Config+0x15c>)
 800d498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d49a:	f003 0303 	and.w	r3, r3, #3
 800d49e:	2b03      	cmp	r3, #3
 800d4a0:	d101      	bne.n	800d4a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	e099      	b.n	800d5da <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d4a6:	4b4f      	ldr	r3, [pc, #316]	; (800d5e4 <RCCEx_PLL2_Config+0x15c>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	4a4e      	ldr	r2, [pc, #312]	; (800d5e4 <RCCEx_PLL2_Config+0x15c>)
 800d4ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d4b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d4b2:	f7f7 f9ab 	bl	800480c <HAL_GetTick>
 800d4b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d4b8:	e008      	b.n	800d4cc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d4ba:	f7f7 f9a7 	bl	800480c <HAL_GetTick>
 800d4be:	4602      	mov	r2, r0
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	1ad3      	subs	r3, r2, r3
 800d4c4:	2b02      	cmp	r3, #2
 800d4c6:	d901      	bls.n	800d4cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d4c8:	2303      	movs	r3, #3
 800d4ca:	e086      	b.n	800d5da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d4cc:	4b45      	ldr	r3, [pc, #276]	; (800d5e4 <RCCEx_PLL2_Config+0x15c>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d1f0      	bne.n	800d4ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d4d8:	4b42      	ldr	r3, [pc, #264]	; (800d5e4 <RCCEx_PLL2_Config+0x15c>)
 800d4da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4dc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	031b      	lsls	r3, r3, #12
 800d4e6:	493f      	ldr	r1, [pc, #252]	; (800d5e4 <RCCEx_PLL2_Config+0x15c>)
 800d4e8:	4313      	orrs	r3, r2
 800d4ea:	628b      	str	r3, [r1, #40]	; 0x28
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	685b      	ldr	r3, [r3, #4]
 800d4f0:	3b01      	subs	r3, #1
 800d4f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	689b      	ldr	r3, [r3, #8]
 800d4fa:	3b01      	subs	r3, #1
 800d4fc:	025b      	lsls	r3, r3, #9
 800d4fe:	b29b      	uxth	r3, r3
 800d500:	431a      	orrs	r2, r3
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	68db      	ldr	r3, [r3, #12]
 800d506:	3b01      	subs	r3, #1
 800d508:	041b      	lsls	r3, r3, #16
 800d50a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d50e:	431a      	orrs	r2, r3
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	691b      	ldr	r3, [r3, #16]
 800d514:	3b01      	subs	r3, #1
 800d516:	061b      	lsls	r3, r3, #24
 800d518:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d51c:	4931      	ldr	r1, [pc, #196]	; (800d5e4 <RCCEx_PLL2_Config+0x15c>)
 800d51e:	4313      	orrs	r3, r2
 800d520:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d522:	4b30      	ldr	r3, [pc, #192]	; (800d5e4 <RCCEx_PLL2_Config+0x15c>)
 800d524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d526:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	695b      	ldr	r3, [r3, #20]
 800d52e:	492d      	ldr	r1, [pc, #180]	; (800d5e4 <RCCEx_PLL2_Config+0x15c>)
 800d530:	4313      	orrs	r3, r2
 800d532:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d534:	4b2b      	ldr	r3, [pc, #172]	; (800d5e4 <RCCEx_PLL2_Config+0x15c>)
 800d536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d538:	f023 0220 	bic.w	r2, r3, #32
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	699b      	ldr	r3, [r3, #24]
 800d540:	4928      	ldr	r1, [pc, #160]	; (800d5e4 <RCCEx_PLL2_Config+0x15c>)
 800d542:	4313      	orrs	r3, r2
 800d544:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d546:	4b27      	ldr	r3, [pc, #156]	; (800d5e4 <RCCEx_PLL2_Config+0x15c>)
 800d548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d54a:	4a26      	ldr	r2, [pc, #152]	; (800d5e4 <RCCEx_PLL2_Config+0x15c>)
 800d54c:	f023 0310 	bic.w	r3, r3, #16
 800d550:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d552:	4b24      	ldr	r3, [pc, #144]	; (800d5e4 <RCCEx_PLL2_Config+0x15c>)
 800d554:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d556:	4b24      	ldr	r3, [pc, #144]	; (800d5e8 <RCCEx_PLL2_Config+0x160>)
 800d558:	4013      	ands	r3, r2
 800d55a:	687a      	ldr	r2, [r7, #4]
 800d55c:	69d2      	ldr	r2, [r2, #28]
 800d55e:	00d2      	lsls	r2, r2, #3
 800d560:	4920      	ldr	r1, [pc, #128]	; (800d5e4 <RCCEx_PLL2_Config+0x15c>)
 800d562:	4313      	orrs	r3, r2
 800d564:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d566:	4b1f      	ldr	r3, [pc, #124]	; (800d5e4 <RCCEx_PLL2_Config+0x15c>)
 800d568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d56a:	4a1e      	ldr	r2, [pc, #120]	; (800d5e4 <RCCEx_PLL2_Config+0x15c>)
 800d56c:	f043 0310 	orr.w	r3, r3, #16
 800d570:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d106      	bne.n	800d586 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d578:	4b1a      	ldr	r3, [pc, #104]	; (800d5e4 <RCCEx_PLL2_Config+0x15c>)
 800d57a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d57c:	4a19      	ldr	r2, [pc, #100]	; (800d5e4 <RCCEx_PLL2_Config+0x15c>)
 800d57e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d582:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d584:	e00f      	b.n	800d5a6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	2b01      	cmp	r3, #1
 800d58a:	d106      	bne.n	800d59a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d58c:	4b15      	ldr	r3, [pc, #84]	; (800d5e4 <RCCEx_PLL2_Config+0x15c>)
 800d58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d590:	4a14      	ldr	r2, [pc, #80]	; (800d5e4 <RCCEx_PLL2_Config+0x15c>)
 800d592:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d596:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d598:	e005      	b.n	800d5a6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d59a:	4b12      	ldr	r3, [pc, #72]	; (800d5e4 <RCCEx_PLL2_Config+0x15c>)
 800d59c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d59e:	4a11      	ldr	r2, [pc, #68]	; (800d5e4 <RCCEx_PLL2_Config+0x15c>)
 800d5a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d5a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d5a6:	4b0f      	ldr	r3, [pc, #60]	; (800d5e4 <RCCEx_PLL2_Config+0x15c>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	4a0e      	ldr	r2, [pc, #56]	; (800d5e4 <RCCEx_PLL2_Config+0x15c>)
 800d5ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d5b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d5b2:	f7f7 f92b 	bl	800480c <HAL_GetTick>
 800d5b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d5b8:	e008      	b.n	800d5cc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d5ba:	f7f7 f927 	bl	800480c <HAL_GetTick>
 800d5be:	4602      	mov	r2, r0
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	1ad3      	subs	r3, r2, r3
 800d5c4:	2b02      	cmp	r3, #2
 800d5c6:	d901      	bls.n	800d5cc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d5c8:	2303      	movs	r3, #3
 800d5ca:	e006      	b.n	800d5da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d5cc:	4b05      	ldr	r3, [pc, #20]	; (800d5e4 <RCCEx_PLL2_Config+0x15c>)
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d0f0      	beq.n	800d5ba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d5d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5da:	4618      	mov	r0, r3
 800d5dc:	3710      	adds	r7, #16
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}
 800d5e2:	bf00      	nop
 800d5e4:	58024400 	.word	0x58024400
 800d5e8:	ffff0007 	.word	0xffff0007

0800d5ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b084      	sub	sp, #16
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
 800d5f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d5fa:	4b53      	ldr	r3, [pc, #332]	; (800d748 <RCCEx_PLL3_Config+0x15c>)
 800d5fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5fe:	f003 0303 	and.w	r3, r3, #3
 800d602:	2b03      	cmp	r3, #3
 800d604:	d101      	bne.n	800d60a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d606:	2301      	movs	r3, #1
 800d608:	e099      	b.n	800d73e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d60a:	4b4f      	ldr	r3, [pc, #316]	; (800d748 <RCCEx_PLL3_Config+0x15c>)
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	4a4e      	ldr	r2, [pc, #312]	; (800d748 <RCCEx_PLL3_Config+0x15c>)
 800d610:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d614:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d616:	f7f7 f8f9 	bl	800480c <HAL_GetTick>
 800d61a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d61c:	e008      	b.n	800d630 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d61e:	f7f7 f8f5 	bl	800480c <HAL_GetTick>
 800d622:	4602      	mov	r2, r0
 800d624:	68bb      	ldr	r3, [r7, #8]
 800d626:	1ad3      	subs	r3, r2, r3
 800d628:	2b02      	cmp	r3, #2
 800d62a:	d901      	bls.n	800d630 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d62c:	2303      	movs	r3, #3
 800d62e:	e086      	b.n	800d73e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d630:	4b45      	ldr	r3, [pc, #276]	; (800d748 <RCCEx_PLL3_Config+0x15c>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d1f0      	bne.n	800d61e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d63c:	4b42      	ldr	r3, [pc, #264]	; (800d748 <RCCEx_PLL3_Config+0x15c>)
 800d63e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d640:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	051b      	lsls	r3, r3, #20
 800d64a:	493f      	ldr	r1, [pc, #252]	; (800d748 <RCCEx_PLL3_Config+0x15c>)
 800d64c:	4313      	orrs	r3, r2
 800d64e:	628b      	str	r3, [r1, #40]	; 0x28
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	685b      	ldr	r3, [r3, #4]
 800d654:	3b01      	subs	r3, #1
 800d656:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	689b      	ldr	r3, [r3, #8]
 800d65e:	3b01      	subs	r3, #1
 800d660:	025b      	lsls	r3, r3, #9
 800d662:	b29b      	uxth	r3, r3
 800d664:	431a      	orrs	r2, r3
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	68db      	ldr	r3, [r3, #12]
 800d66a:	3b01      	subs	r3, #1
 800d66c:	041b      	lsls	r3, r3, #16
 800d66e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d672:	431a      	orrs	r2, r3
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	691b      	ldr	r3, [r3, #16]
 800d678:	3b01      	subs	r3, #1
 800d67a:	061b      	lsls	r3, r3, #24
 800d67c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d680:	4931      	ldr	r1, [pc, #196]	; (800d748 <RCCEx_PLL3_Config+0x15c>)
 800d682:	4313      	orrs	r3, r2
 800d684:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d686:	4b30      	ldr	r3, [pc, #192]	; (800d748 <RCCEx_PLL3_Config+0x15c>)
 800d688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d68a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	695b      	ldr	r3, [r3, #20]
 800d692:	492d      	ldr	r1, [pc, #180]	; (800d748 <RCCEx_PLL3_Config+0x15c>)
 800d694:	4313      	orrs	r3, r2
 800d696:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d698:	4b2b      	ldr	r3, [pc, #172]	; (800d748 <RCCEx_PLL3_Config+0x15c>)
 800d69a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d69c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	699b      	ldr	r3, [r3, #24]
 800d6a4:	4928      	ldr	r1, [pc, #160]	; (800d748 <RCCEx_PLL3_Config+0x15c>)
 800d6a6:	4313      	orrs	r3, r2
 800d6a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d6aa:	4b27      	ldr	r3, [pc, #156]	; (800d748 <RCCEx_PLL3_Config+0x15c>)
 800d6ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6ae:	4a26      	ldr	r2, [pc, #152]	; (800d748 <RCCEx_PLL3_Config+0x15c>)
 800d6b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d6b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d6b6:	4b24      	ldr	r3, [pc, #144]	; (800d748 <RCCEx_PLL3_Config+0x15c>)
 800d6b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d6ba:	4b24      	ldr	r3, [pc, #144]	; (800d74c <RCCEx_PLL3_Config+0x160>)
 800d6bc:	4013      	ands	r3, r2
 800d6be:	687a      	ldr	r2, [r7, #4]
 800d6c0:	69d2      	ldr	r2, [r2, #28]
 800d6c2:	00d2      	lsls	r2, r2, #3
 800d6c4:	4920      	ldr	r1, [pc, #128]	; (800d748 <RCCEx_PLL3_Config+0x15c>)
 800d6c6:	4313      	orrs	r3, r2
 800d6c8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d6ca:	4b1f      	ldr	r3, [pc, #124]	; (800d748 <RCCEx_PLL3_Config+0x15c>)
 800d6cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6ce:	4a1e      	ldr	r2, [pc, #120]	; (800d748 <RCCEx_PLL3_Config+0x15c>)
 800d6d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d6d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d106      	bne.n	800d6ea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d6dc:	4b1a      	ldr	r3, [pc, #104]	; (800d748 <RCCEx_PLL3_Config+0x15c>)
 800d6de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6e0:	4a19      	ldr	r2, [pc, #100]	; (800d748 <RCCEx_PLL3_Config+0x15c>)
 800d6e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d6e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d6e8:	e00f      	b.n	800d70a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	2b01      	cmp	r3, #1
 800d6ee:	d106      	bne.n	800d6fe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d6f0:	4b15      	ldr	r3, [pc, #84]	; (800d748 <RCCEx_PLL3_Config+0x15c>)
 800d6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6f4:	4a14      	ldr	r2, [pc, #80]	; (800d748 <RCCEx_PLL3_Config+0x15c>)
 800d6f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d6fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d6fc:	e005      	b.n	800d70a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d6fe:	4b12      	ldr	r3, [pc, #72]	; (800d748 <RCCEx_PLL3_Config+0x15c>)
 800d700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d702:	4a11      	ldr	r2, [pc, #68]	; (800d748 <RCCEx_PLL3_Config+0x15c>)
 800d704:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d708:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d70a:	4b0f      	ldr	r3, [pc, #60]	; (800d748 <RCCEx_PLL3_Config+0x15c>)
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	4a0e      	ldr	r2, [pc, #56]	; (800d748 <RCCEx_PLL3_Config+0x15c>)
 800d710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d714:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d716:	f7f7 f879 	bl	800480c <HAL_GetTick>
 800d71a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d71c:	e008      	b.n	800d730 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d71e:	f7f7 f875 	bl	800480c <HAL_GetTick>
 800d722:	4602      	mov	r2, r0
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	1ad3      	subs	r3, r2, r3
 800d728:	2b02      	cmp	r3, #2
 800d72a:	d901      	bls.n	800d730 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d72c:	2303      	movs	r3, #3
 800d72e:	e006      	b.n	800d73e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d730:	4b05      	ldr	r3, [pc, #20]	; (800d748 <RCCEx_PLL3_Config+0x15c>)
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d0f0      	beq.n	800d71e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d73c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d73e:	4618      	mov	r0, r3
 800d740:	3710      	adds	r7, #16
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}
 800d746:	bf00      	nop
 800d748:	58024400 	.word	0x58024400
 800d74c:	ffff0007 	.word	0xffff0007

0800d750 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b084      	sub	sp, #16
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d758:	2301      	movs	r3, #1
 800d75a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d074      	beq.n	800d84c <HAL_RTC_Init+0xfc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800d768:	b2db      	uxtb	r3, r3
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d106      	bne.n	800d77c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	2200      	movs	r2, #0
 800d772:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d776:	6878      	ldr	r0, [r7, #4]
 800d778:	f7f5 ff50 	bl	800361c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2202      	movs	r2, #2
 800d780:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	68db      	ldr	r3, [r3, #12]
 800d78a:	f003 0310 	and.w	r3, r3, #16
 800d78e:	2b10      	cmp	r3, #16
 800d790:	d053      	beq.n	800d83a <HAL_RTC_Init+0xea>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	22ca      	movs	r2, #202	; 0xca
 800d798:	625a      	str	r2, [r3, #36]	; 0x24
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	2253      	movs	r2, #83	; 0x53
 800d7a0:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f000 f87e 	bl	800d8a4 <RTC_EnterInitMode>
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d7ac:	7bfb      	ldrb	r3, [r7, #15]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d124      	bne.n	800d7fc <HAL_RTC_Init+0xac>
      {
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	6999      	ldr	r1, [r3, #24]
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681a      	ldr	r2, [r3, #0]
 800d7bc:	4b26      	ldr	r3, [pc, #152]	; (800d858 <HAL_RTC_Init+0x108>)
 800d7be:	400b      	ands	r3, r1
 800d7c0:	6193      	str	r3, [r2, #24]
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	6999      	ldr	r1, [r3, #24]
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	685a      	ldr	r2, [r3, #4]
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	691b      	ldr	r3, [r3, #16]
 800d7d0:	431a      	orrs	r2, r3
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	699b      	ldr	r3, [r3, #24]
 800d7d6:	431a      	orrs	r2, r3
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	430a      	orrs	r2, r1
 800d7de:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	689b      	ldr	r3, [r3, #8]
 800d7e4:	0419      	lsls	r1, r3, #16
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	68da      	ldr	r2, [r3, #12]
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	430a      	orrs	r2, r1
 800d7f0:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f000 f88c 	bl	800d910 <RTC_ExitInitMode>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800d7fc:	7bfb      	ldrb	r3, [r7, #15]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d116      	bne.n	800d830 <HAL_RTC_Init+0xe0>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	699a      	ldr	r2, [r3, #24]
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800d810:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	6999      	ldr	r1, [r3, #24]
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	6a1a      	ldr	r2, [r3, #32]
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	69db      	ldr	r3, [r3, #28]
 800d820:	431a      	orrs	r2, r3
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	695b      	ldr	r3, [r3, #20]
 800d826:	431a      	orrs	r2, r3
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	430a      	orrs	r2, r1
 800d82e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	22ff      	movs	r2, #255	; 0xff
 800d836:	625a      	str	r2, [r3, #36]	; 0x24
 800d838:	e001      	b.n	800d83e <HAL_RTC_Init+0xee>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800d83a:	2300      	movs	r3, #0
 800d83c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d83e:	7bfb      	ldrb	r3, [r7, #15]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d103      	bne.n	800d84c <HAL_RTC_Init+0xfc>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2201      	movs	r2, #1
 800d848:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  /* return status */
  return status;
 800d84c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d84e:	4618      	mov	r0, r3
 800d850:	3710      	adds	r7, #16
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}
 800d856:	bf00      	nop
 800d858:	fb8fffbf 	.word	0xfb8fffbf

0800d85c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b084      	sub	sp, #16
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	4a0d      	ldr	r2, [pc, #52]	; (800d8a0 <HAL_RTC_WaitForSynchro+0x44>)
 800d86a:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800d86c:	f7f6 ffce 	bl	800480c <HAL_GetTick>
 800d870:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800d872:	e009      	b.n	800d888 <HAL_RTC_WaitForSynchro+0x2c>
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d874:	f7f6 ffca 	bl	800480c <HAL_GetTick>
 800d878:	4602      	mov	r2, r0
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	1ad3      	subs	r3, r2, r3
 800d87e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d882:	d901      	bls.n	800d888 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800d884:	2303      	movs	r3, #3
 800d886:	e007      	b.n	800d898 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	68db      	ldr	r3, [r3, #12]
 800d88e:	f003 0320 	and.w	r3, r3, #32
 800d892:	2b00      	cmp	r3, #0
 800d894:	d0ee      	beq.n	800d874 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800d896:	2300      	movs	r3, #0
}
 800d898:	4618      	mov	r0, r3
 800d89a:	3710      	adds	r7, #16
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}
 800d8a0:	0001005f 	.word	0x0001005f

0800d8a4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b084      	sub	sp, #16
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(TAMP)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	68db      	ldr	r3, [r3, #12]
 800d8b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d123      	bne.n	800d906 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	68da      	ldr	r2, [r3, #12]
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d8cc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d8ce:	f7f6 ff9d 	bl	800480c <HAL_GetTick>
 800d8d2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d8d4:	e00d      	b.n	800d8f2 <RTC_EnterInitMode+0x4e>

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d8d6:	f7f6 ff99 	bl	800480c <HAL_GetTick>
 800d8da:	4602      	mov	r2, r0
 800d8dc:	68bb      	ldr	r3, [r7, #8]
 800d8de:	1ad3      	subs	r3, r2, r3
 800d8e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d8e4:	d905      	bls.n	800d8f2 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800d8e6:	2303      	movs	r3, #3
 800d8e8:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2203      	movs	r2, #3
 800d8ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	68db      	ldr	r3, [r3, #12]
 800d8f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d102      	bne.n	800d906 <RTC_EnterInitMode+0x62>
 800d900:	7bfb      	ldrb	r3, [r7, #15]
 800d902:	2b03      	cmp	r3, #3
 800d904:	d1e7      	bne.n	800d8d6 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 800d906:	7bfb      	ldrb	r3, [r7, #15]
}
 800d908:	4618      	mov	r0, r3
 800d90a:	3710      	adds	r7, #16
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}

0800d910 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b084      	sub	sp, #16
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d918:	2300      	movs	r3, #0
 800d91a:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800d91c:	4b1a      	ldr	r3, [pc, #104]	; (800d988 <RTC_ExitInitMode+0x78>)
 800d91e:	68db      	ldr	r3, [r3, #12]
 800d920:	4a19      	ldr	r2, [pc, #100]	; (800d988 <RTC_ExitInitMode+0x78>)
 800d922:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d926:	60d3      	str	r3, [r2, #12]
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800d928:	4b17      	ldr	r3, [pc, #92]	; (800d988 <RTC_ExitInitMode+0x78>)
 800d92a:	699b      	ldr	r3, [r3, #24]
 800d92c:	f003 0320 	and.w	r3, r3, #32
 800d930:	2b00      	cmp	r3, #0
 800d932:	d10c      	bne.n	800d94e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f7ff ff91 	bl	800d85c <HAL_RTC_WaitForSynchro>
 800d93a:	4603      	mov	r3, r0
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d01e      	beq.n	800d97e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2203      	movs	r2, #3
 800d944:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800d948:	2303      	movs	r3, #3
 800d94a:	73fb      	strb	r3, [r7, #15]
 800d94c:	e017      	b.n	800d97e <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d94e:	4b0e      	ldr	r3, [pc, #56]	; (800d988 <RTC_ExitInitMode+0x78>)
 800d950:	699b      	ldr	r3, [r3, #24]
 800d952:	4a0d      	ldr	r2, [pc, #52]	; (800d988 <RTC_ExitInitMode+0x78>)
 800d954:	f023 0320 	bic.w	r3, r3, #32
 800d958:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d95a:	6878      	ldr	r0, [r7, #4]
 800d95c:	f7ff ff7e 	bl	800d85c <HAL_RTC_WaitForSynchro>
 800d960:	4603      	mov	r3, r0
 800d962:	2b00      	cmp	r3, #0
 800d964:	d005      	beq.n	800d972 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	2203      	movs	r2, #3
 800d96a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800d96e:	2303      	movs	r3, #3
 800d970:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d972:	4b05      	ldr	r3, [pc, #20]	; (800d988 <RTC_ExitInitMode+0x78>)
 800d974:	699b      	ldr	r3, [r3, #24]
 800d976:	4a04      	ldr	r2, [pc, #16]	; (800d988 <RTC_ExitInitMode+0x78>)
 800d978:	f043 0320 	orr.w	r3, r3, #32
 800d97c:	6193      	str	r3, [r2, #24]
  }

  return status;
 800d97e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d980:	4618      	mov	r0, r3
 800d982:	3710      	adds	r7, #16
 800d984:	46bd      	mov	sp, r7
 800d986:	bd80      	pop	{r7, pc}
 800d988:	58004000 	.word	0x58004000

0800d98c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b082      	sub	sp, #8
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d101      	bne.n	800d9a0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800d99c:	2301      	movs	r3, #1
 800d99e:	e02b      	b.n	800d9f8 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d9a6:	b2db      	uxtb	r3, r3
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d106      	bne.n	800d9ba <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	f7f3 fa97 	bl	8000ee8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	2202      	movs	r2, #2
 800d9be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681a      	ldr	r2, [r3, #0]
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	3304      	adds	r3, #4
 800d9ca:	4619      	mov	r1, r3
 800d9cc:	4610      	mov	r0, r2
 800d9ce:	f001 ffdf 	bl	800f990 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	6818      	ldr	r0, [r3, #0]
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	685b      	ldr	r3, [r3, #4]
 800d9da:	461a      	mov	r2, r3
 800d9dc:	6839      	ldr	r1, [r7, #0]
 800d9de:	f002 f833 	bl	800fa48 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800d9e2:	4b07      	ldr	r3, [pc, #28]	; (800da00 <HAL_SDRAM_Init+0x74>)
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	4a06      	ldr	r2, [pc, #24]	; (800da00 <HAL_SDRAM_Init+0x74>)
 800d9e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d9ec:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	2201      	movs	r2, #1
 800d9f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d9f6:	2300      	movs	r3, #0
}
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	3708      	adds	r7, #8
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}
 800da00:	52004000 	.word	0x52004000

0800da04 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b086      	sub	sp, #24
 800da08:	af00      	add	r7, sp, #0
 800da0a:	60f8      	str	r0, [r7, #12]
 800da0c:	60b9      	str	r1, [r7, #8]
 800da0e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800da16:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800da18:	7dfb      	ldrb	r3, [r7, #23]
 800da1a:	2b02      	cmp	r3, #2
 800da1c:	d101      	bne.n	800da22 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800da1e:	2302      	movs	r3, #2
 800da20:	e021      	b.n	800da66 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800da22:	7dfb      	ldrb	r3, [r7, #23]
 800da24:	2b01      	cmp	r3, #1
 800da26:	d002      	beq.n	800da2e <HAL_SDRAM_SendCommand+0x2a>
 800da28:	7dfb      	ldrb	r3, [r7, #23]
 800da2a:	2b05      	cmp	r3, #5
 800da2c:	d118      	bne.n	800da60 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	2202      	movs	r2, #2
 800da32:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	687a      	ldr	r2, [r7, #4]
 800da3c:	68b9      	ldr	r1, [r7, #8]
 800da3e:	4618      	mov	r0, r3
 800da40:	f002 f86c 	bl	800fb1c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800da44:	68bb      	ldr	r3, [r7, #8]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	2b02      	cmp	r3, #2
 800da4a:	d104      	bne.n	800da56 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	2205      	movs	r2, #5
 800da50:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800da54:	e006      	b.n	800da64 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	2201      	movs	r2, #1
 800da5a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800da5e:	e001      	b.n	800da64 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800da60:	2301      	movs	r3, #1
 800da62:	e000      	b.n	800da66 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800da64:	2300      	movs	r3, #0
}
 800da66:	4618      	mov	r0, r3
 800da68:	3718      	adds	r7, #24
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}

0800da6e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800da6e:	b580      	push	{r7, lr}
 800da70:	b082      	sub	sp, #8
 800da72:	af00      	add	r7, sp, #0
 800da74:	6078      	str	r0, [r7, #4]
 800da76:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800da7e:	b2db      	uxtb	r3, r3
 800da80:	2b02      	cmp	r3, #2
 800da82:	d101      	bne.n	800da88 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800da84:	2302      	movs	r3, #2
 800da86:	e016      	b.n	800dab6 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800da8e:	b2db      	uxtb	r3, r3
 800da90:	2b01      	cmp	r3, #1
 800da92:	d10f      	bne.n	800dab4 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2202      	movs	r2, #2
 800da98:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	6839      	ldr	r1, [r7, #0]
 800daa2:	4618      	mov	r0, r3
 800daa4:	f002 f85e 	bl	800fb64 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2201      	movs	r2, #1
 800daac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800dab0:	2300      	movs	r3, #0
 800dab2:	e000      	b.n	800dab6 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800dab4:	2301      	movs	r3, #1
}
 800dab6:	4618      	mov	r0, r3
 800dab8:	3708      	adds	r7, #8
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}

0800dabe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dabe:	b580      	push	{r7, lr}
 800dac0:	b082      	sub	sp, #8
 800dac2:	af00      	add	r7, sp, #0
 800dac4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d101      	bne.n	800dad0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dacc:	2301      	movs	r3, #1
 800dace:	e042      	b.n	800db56 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d106      	bne.n	800dae8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2200      	movs	r2, #0
 800dade:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dae2:	6878      	ldr	r0, [r7, #4]
 800dae4:	f7f6 fd70 	bl	80045c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2224      	movs	r2, #36	; 0x24
 800daec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	681a      	ldr	r2, [r3, #0]
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	f022 0201 	bic.w	r2, r2, #1
 800dafe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f000 fd5d 	bl	800e5c0 <UART_SetConfig>
 800db06:	4603      	mov	r3, r0
 800db08:	2b01      	cmp	r3, #1
 800db0a:	d101      	bne.n	800db10 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800db0c:	2301      	movs	r3, #1
 800db0e:	e022      	b.n	800db56 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db14:	2b00      	cmp	r3, #0
 800db16:	d002      	beq.n	800db1e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800db18:	6878      	ldr	r0, [r7, #4]
 800db1a:	f001 fbbd 	bl	800f298 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	685a      	ldr	r2, [r3, #4]
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800db2c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	689a      	ldr	r2, [r3, #8]
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800db3c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	681a      	ldr	r2, [r3, #0]
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	f042 0201 	orr.w	r2, r2, #1
 800db4c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800db4e:	6878      	ldr	r0, [r7, #4]
 800db50:	f001 fc44 	bl	800f3dc <UART_CheckIdleState>
 800db54:	4603      	mov	r3, r0
}
 800db56:	4618      	mov	r0, r3
 800db58:	3708      	adds	r7, #8
 800db5a:	46bd      	mov	sp, r7
 800db5c:	bd80      	pop	{r7, pc}

0800db5e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800db5e:	b580      	push	{r7, lr}
 800db60:	b08a      	sub	sp, #40	; 0x28
 800db62:	af02      	add	r7, sp, #8
 800db64:	60f8      	str	r0, [r7, #12]
 800db66:	60b9      	str	r1, [r7, #8]
 800db68:	603b      	str	r3, [r7, #0]
 800db6a:	4613      	mov	r3, r2
 800db6c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db74:	2b20      	cmp	r3, #32
 800db76:	d17b      	bne.n	800dc70 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800db78:	68bb      	ldr	r3, [r7, #8]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d002      	beq.n	800db84 <HAL_UART_Transmit+0x26>
 800db7e:	88fb      	ldrh	r3, [r7, #6]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d101      	bne.n	800db88 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800db84:	2301      	movs	r3, #1
 800db86:	e074      	b.n	800dc72 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	2200      	movs	r2, #0
 800db8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	2221      	movs	r2, #33	; 0x21
 800db94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800db98:	f7f6 fe38 	bl	800480c <HAL_GetTick>
 800db9c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	88fa      	ldrh	r2, [r7, #6]
 800dba2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	88fa      	ldrh	r2, [r7, #6]
 800dbaa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	689b      	ldr	r3, [r3, #8]
 800dbb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dbb6:	d108      	bne.n	800dbca <HAL_UART_Transmit+0x6c>
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	691b      	ldr	r3, [r3, #16]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d104      	bne.n	800dbca <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	61bb      	str	r3, [r7, #24]
 800dbc8:	e003      	b.n	800dbd2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800dbca:	68bb      	ldr	r3, [r7, #8]
 800dbcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800dbd2:	e030      	b.n	800dc36 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	9300      	str	r3, [sp, #0]
 800dbd8:	697b      	ldr	r3, [r7, #20]
 800dbda:	2200      	movs	r2, #0
 800dbdc:	2180      	movs	r1, #128	; 0x80
 800dbde:	68f8      	ldr	r0, [r7, #12]
 800dbe0:	f001 fca6 	bl	800f530 <UART_WaitOnFlagUntilTimeout>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d005      	beq.n	800dbf6 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	2220      	movs	r2, #32
 800dbee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800dbf2:	2303      	movs	r3, #3
 800dbf4:	e03d      	b.n	800dc72 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800dbf6:	69fb      	ldr	r3, [r7, #28]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d10b      	bne.n	800dc14 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800dbfc:	69bb      	ldr	r3, [r7, #24]
 800dbfe:	881b      	ldrh	r3, [r3, #0]
 800dc00:	461a      	mov	r2, r3
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dc0a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800dc0c:	69bb      	ldr	r3, [r7, #24]
 800dc0e:	3302      	adds	r3, #2
 800dc10:	61bb      	str	r3, [r7, #24]
 800dc12:	e007      	b.n	800dc24 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800dc14:	69fb      	ldr	r3, [r7, #28]
 800dc16:	781a      	ldrb	r2, [r3, #0]
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800dc1e:	69fb      	ldr	r3, [r7, #28]
 800dc20:	3301      	adds	r3, #1
 800dc22:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dc2a:	b29b      	uxth	r3, r3
 800dc2c:	3b01      	subs	r3, #1
 800dc2e:	b29a      	uxth	r2, r3
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dc3c:	b29b      	uxth	r3, r3
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d1c8      	bne.n	800dbd4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	9300      	str	r3, [sp, #0]
 800dc46:	697b      	ldr	r3, [r7, #20]
 800dc48:	2200      	movs	r2, #0
 800dc4a:	2140      	movs	r1, #64	; 0x40
 800dc4c:	68f8      	ldr	r0, [r7, #12]
 800dc4e:	f001 fc6f 	bl	800f530 <UART_WaitOnFlagUntilTimeout>
 800dc52:	4603      	mov	r3, r0
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d005      	beq.n	800dc64 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	2220      	movs	r2, #32
 800dc5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800dc60:	2303      	movs	r3, #3
 800dc62:	e006      	b.n	800dc72 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	2220      	movs	r2, #32
 800dc68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	e000      	b.n	800dc72 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800dc70:	2302      	movs	r3, #2
  }
}
 800dc72:	4618      	mov	r0, r3
 800dc74:	3720      	adds	r7, #32
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}

0800dc7a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dc7a:	b580      	push	{r7, lr}
 800dc7c:	b08a      	sub	sp, #40	; 0x28
 800dc7e:	af02      	add	r7, sp, #8
 800dc80:	60f8      	str	r0, [r7, #12]
 800dc82:	60b9      	str	r1, [r7, #8]
 800dc84:	603b      	str	r3, [r7, #0]
 800dc86:	4613      	mov	r3, r2
 800dc88:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc90:	2b20      	cmp	r3, #32
 800dc92:	f040 80b5 	bne.w	800de00 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d002      	beq.n	800dca2 <HAL_UART_Receive+0x28>
 800dc9c:	88fb      	ldrh	r3, [r7, #6]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d101      	bne.n	800dca6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800dca2:	2301      	movs	r3, #1
 800dca4:	e0ad      	b.n	800de02 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	2200      	movs	r2, #0
 800dcaa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	2222      	movs	r2, #34	; 0x22
 800dcb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	2200      	movs	r2, #0
 800dcba:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dcbc:	f7f6 fda6 	bl	800480c <HAL_GetTick>
 800dcc0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	88fa      	ldrh	r2, [r7, #6]
 800dcc6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	88fa      	ldrh	r2, [r7, #6]
 800dcce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	689b      	ldr	r3, [r3, #8]
 800dcd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dcda:	d10e      	bne.n	800dcfa <HAL_UART_Receive+0x80>
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	691b      	ldr	r3, [r3, #16]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d105      	bne.n	800dcf0 <HAL_UART_Receive+0x76>
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800dcea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800dcee:	e02d      	b.n	800dd4c <HAL_UART_Receive+0xd2>
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	22ff      	movs	r2, #255	; 0xff
 800dcf4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800dcf8:	e028      	b.n	800dd4c <HAL_UART_Receive+0xd2>
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	689b      	ldr	r3, [r3, #8]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d10d      	bne.n	800dd1e <HAL_UART_Receive+0xa4>
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	691b      	ldr	r3, [r3, #16]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d104      	bne.n	800dd14 <HAL_UART_Receive+0x9a>
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	22ff      	movs	r2, #255	; 0xff
 800dd0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800dd12:	e01b      	b.n	800dd4c <HAL_UART_Receive+0xd2>
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	227f      	movs	r2, #127	; 0x7f
 800dd18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800dd1c:	e016      	b.n	800dd4c <HAL_UART_Receive+0xd2>
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	689b      	ldr	r3, [r3, #8]
 800dd22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dd26:	d10d      	bne.n	800dd44 <HAL_UART_Receive+0xca>
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	691b      	ldr	r3, [r3, #16]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d104      	bne.n	800dd3a <HAL_UART_Receive+0xc0>
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	227f      	movs	r2, #127	; 0x7f
 800dd34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800dd38:	e008      	b.n	800dd4c <HAL_UART_Receive+0xd2>
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	223f      	movs	r2, #63	; 0x3f
 800dd3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800dd42:	e003      	b.n	800dd4c <HAL_UART_Receive+0xd2>
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	2200      	movs	r2, #0
 800dd48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dd52:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	689b      	ldr	r3, [r3, #8]
 800dd58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd5c:	d108      	bne.n	800dd70 <HAL_UART_Receive+0xf6>
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	691b      	ldr	r3, [r3, #16]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d104      	bne.n	800dd70 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800dd66:	2300      	movs	r3, #0
 800dd68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800dd6a:	68bb      	ldr	r3, [r7, #8]
 800dd6c:	61bb      	str	r3, [r7, #24]
 800dd6e:	e003      	b.n	800dd78 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800dd70:	68bb      	ldr	r3, [r7, #8]
 800dd72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dd74:	2300      	movs	r3, #0
 800dd76:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800dd78:	e036      	b.n	800dde8 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	9300      	str	r3, [sp, #0]
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	2200      	movs	r2, #0
 800dd82:	2120      	movs	r1, #32
 800dd84:	68f8      	ldr	r0, [r7, #12]
 800dd86:	f001 fbd3 	bl	800f530 <UART_WaitOnFlagUntilTimeout>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d005      	beq.n	800dd9c <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	2220      	movs	r2, #32
 800dd94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800dd98:	2303      	movs	r3, #3
 800dd9a:	e032      	b.n	800de02 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800dd9c:	69fb      	ldr	r3, [r7, #28]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d10c      	bne.n	800ddbc <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dda8:	b29a      	uxth	r2, r3
 800ddaa:	8a7b      	ldrh	r3, [r7, #18]
 800ddac:	4013      	ands	r3, r2
 800ddae:	b29a      	uxth	r2, r3
 800ddb0:	69bb      	ldr	r3, [r7, #24]
 800ddb2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800ddb4:	69bb      	ldr	r3, [r7, #24]
 800ddb6:	3302      	adds	r3, #2
 800ddb8:	61bb      	str	r3, [r7, #24]
 800ddba:	e00c      	b.n	800ddd6 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddc2:	b2da      	uxtb	r2, r3
 800ddc4:	8a7b      	ldrh	r3, [r7, #18]
 800ddc6:	b2db      	uxtb	r3, r3
 800ddc8:	4013      	ands	r3, r2
 800ddca:	b2da      	uxtb	r2, r3
 800ddcc:	69fb      	ldr	r3, [r7, #28]
 800ddce:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800ddd0:	69fb      	ldr	r3, [r7, #28]
 800ddd2:	3301      	adds	r3, #1
 800ddd4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dddc:	b29b      	uxth	r3, r3
 800ddde:	3b01      	subs	r3, #1
 800dde0:	b29a      	uxth	r2, r3
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ddee:	b29b      	uxth	r3, r3
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d1c2      	bne.n	800dd7a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	2220      	movs	r2, #32
 800ddf8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	e000      	b.n	800de02 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800de00:	2302      	movs	r3, #2
  }
}
 800de02:	4618      	mov	r0, r3
 800de04:	3720      	adds	r7, #32
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}
	...

0800de0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b0ba      	sub	sp, #232	; 0xe8
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	69db      	ldr	r3, [r3, #28]
 800de1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	689b      	ldr	r3, [r3, #8]
 800de2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800de32:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800de36:	f640 030f 	movw	r3, #2063	; 0x80f
 800de3a:	4013      	ands	r3, r2
 800de3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800de40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800de44:	2b00      	cmp	r3, #0
 800de46:	d11b      	bne.n	800de80 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800de48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de4c:	f003 0320 	and.w	r3, r3, #32
 800de50:	2b00      	cmp	r3, #0
 800de52:	d015      	beq.n	800de80 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800de54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de58:	f003 0320 	and.w	r3, r3, #32
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d105      	bne.n	800de6c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800de60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800de64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d009      	beq.n	800de80 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de70:	2b00      	cmp	r3, #0
 800de72:	f000 8377 	beq.w	800e564 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de7a:	6878      	ldr	r0, [r7, #4]
 800de7c:	4798      	blx	r3
      }
      return;
 800de7e:	e371      	b.n	800e564 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800de80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800de84:	2b00      	cmp	r3, #0
 800de86:	f000 8123 	beq.w	800e0d0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800de8a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800de8e:	4b8d      	ldr	r3, [pc, #564]	; (800e0c4 <HAL_UART_IRQHandler+0x2b8>)
 800de90:	4013      	ands	r3, r2
 800de92:	2b00      	cmp	r3, #0
 800de94:	d106      	bne.n	800dea4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800de96:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800de9a:	4b8b      	ldr	r3, [pc, #556]	; (800e0c8 <HAL_UART_IRQHandler+0x2bc>)
 800de9c:	4013      	ands	r3, r2
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	f000 8116 	beq.w	800e0d0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dea8:	f003 0301 	and.w	r3, r3, #1
 800deac:	2b00      	cmp	r3, #0
 800deae:	d011      	beq.n	800ded4 <HAL_UART_IRQHandler+0xc8>
 800deb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800deb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d00b      	beq.n	800ded4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	2201      	movs	r2, #1
 800dec2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800deca:	f043 0201 	orr.w	r2, r3, #1
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ded4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ded8:	f003 0302 	and.w	r3, r3, #2
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d011      	beq.n	800df04 <HAL_UART_IRQHandler+0xf8>
 800dee0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dee4:	f003 0301 	and.w	r3, r3, #1
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d00b      	beq.n	800df04 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	2202      	movs	r2, #2
 800def2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800defa:	f043 0204 	orr.w	r2, r3, #4
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800df04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df08:	f003 0304 	and.w	r3, r3, #4
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d011      	beq.n	800df34 <HAL_UART_IRQHandler+0x128>
 800df10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df14:	f003 0301 	and.w	r3, r3, #1
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d00b      	beq.n	800df34 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	2204      	movs	r2, #4
 800df22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df2a:	f043 0202 	orr.w	r2, r3, #2
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800df34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df38:	f003 0308 	and.w	r3, r3, #8
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d017      	beq.n	800df70 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800df40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df44:	f003 0320 	and.w	r3, r3, #32
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d105      	bne.n	800df58 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800df4c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800df50:	4b5c      	ldr	r3, [pc, #368]	; (800e0c4 <HAL_UART_IRQHandler+0x2b8>)
 800df52:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800df54:	2b00      	cmp	r3, #0
 800df56:	d00b      	beq.n	800df70 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	2208      	movs	r2, #8
 800df5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df66:	f043 0208 	orr.w	r2, r3, #8
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800df70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d012      	beq.n	800dfa2 <HAL_UART_IRQHandler+0x196>
 800df7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800df84:	2b00      	cmp	r3, #0
 800df86:	d00c      	beq.n	800dfa2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800df90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df98:	f043 0220 	orr.w	r2, r3, #32
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	f000 82dd 	beq.w	800e568 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dfae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dfb2:	f003 0320 	and.w	r3, r3, #32
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d013      	beq.n	800dfe2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dfba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dfbe:	f003 0320 	and.w	r3, r3, #32
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d105      	bne.n	800dfd2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dfc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dfca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d007      	beq.n	800dfe2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d003      	beq.n	800dfe2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dfe8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	689b      	ldr	r3, [r3, #8]
 800dff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dff6:	2b40      	cmp	r3, #64	; 0x40
 800dff8:	d005      	beq.n	800e006 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800dffa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dffe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e002:	2b00      	cmp	r3, #0
 800e004:	d054      	beq.n	800e0b0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e006:	6878      	ldr	r0, [r7, #4]
 800e008:	f001 fafa 	bl	800f600 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	689b      	ldr	r3, [r3, #8]
 800e012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e016:	2b40      	cmp	r3, #64	; 0x40
 800e018:	d146      	bne.n	800e0a8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	3308      	adds	r3, #8
 800e020:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e024:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e028:	e853 3f00 	ldrex	r3, [r3]
 800e02c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e030:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e034:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e038:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	3308      	adds	r3, #8
 800e042:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e046:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e04a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e04e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e052:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e056:	e841 2300 	strex	r3, r2, [r1]
 800e05a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e05e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e062:	2b00      	cmp	r3, #0
 800e064:	d1d9      	bne.n	800e01a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d017      	beq.n	800e0a0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e076:	4a15      	ldr	r2, [pc, #84]	; (800e0cc <HAL_UART_IRQHandler+0x2c0>)
 800e078:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e080:	4618      	mov	r0, r3
 800e082:	f7f8 f9db 	bl	800643c <HAL_DMA_Abort_IT>
 800e086:	4603      	mov	r3, r0
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d019      	beq.n	800e0c0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e094:	687a      	ldr	r2, [r7, #4]
 800e096:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800e09a:	4610      	mov	r0, r2
 800e09c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e09e:	e00f      	b.n	800e0c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e0a0:	6878      	ldr	r0, [r7, #4]
 800e0a2:	f000 fa77 	bl	800e594 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e0a6:	e00b      	b.n	800e0c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f000 fa73 	bl	800e594 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e0ae:	e007      	b.n	800e0c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e0b0:	6878      	ldr	r0, [r7, #4]
 800e0b2:	f000 fa6f 	bl	800e594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800e0be:	e253      	b.n	800e568 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e0c0:	bf00      	nop
    return;
 800e0c2:	e251      	b.n	800e568 <HAL_UART_IRQHandler+0x75c>
 800e0c4:	10000001 	.word	0x10000001
 800e0c8:	04000120 	.word	0x04000120
 800e0cc:	0800f6cd 	.word	0x0800f6cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0d4:	2b01      	cmp	r3, #1
 800e0d6:	f040 81e7 	bne.w	800e4a8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e0da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e0de:	f003 0310 	and.w	r3, r3, #16
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	f000 81e0 	beq.w	800e4a8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e0e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e0ec:	f003 0310 	and.w	r3, r3, #16
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	f000 81d9 	beq.w	800e4a8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	2210      	movs	r2, #16
 800e0fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	689b      	ldr	r3, [r3, #8]
 800e104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e108:	2b40      	cmp	r3, #64	; 0x40
 800e10a:	f040 8151 	bne.w	800e3b0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	4a96      	ldr	r2, [pc, #600]	; (800e370 <HAL_UART_IRQHandler+0x564>)
 800e118:	4293      	cmp	r3, r2
 800e11a:	d068      	beq.n	800e1ee <HAL_UART_IRQHandler+0x3e2>
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	4a93      	ldr	r2, [pc, #588]	; (800e374 <HAL_UART_IRQHandler+0x568>)
 800e126:	4293      	cmp	r3, r2
 800e128:	d061      	beq.n	800e1ee <HAL_UART_IRQHandler+0x3e2>
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	4a91      	ldr	r2, [pc, #580]	; (800e378 <HAL_UART_IRQHandler+0x56c>)
 800e134:	4293      	cmp	r3, r2
 800e136:	d05a      	beq.n	800e1ee <HAL_UART_IRQHandler+0x3e2>
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	4a8e      	ldr	r2, [pc, #568]	; (800e37c <HAL_UART_IRQHandler+0x570>)
 800e142:	4293      	cmp	r3, r2
 800e144:	d053      	beq.n	800e1ee <HAL_UART_IRQHandler+0x3e2>
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	4a8c      	ldr	r2, [pc, #560]	; (800e380 <HAL_UART_IRQHandler+0x574>)
 800e150:	4293      	cmp	r3, r2
 800e152:	d04c      	beq.n	800e1ee <HAL_UART_IRQHandler+0x3e2>
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	4a89      	ldr	r2, [pc, #548]	; (800e384 <HAL_UART_IRQHandler+0x578>)
 800e15e:	4293      	cmp	r3, r2
 800e160:	d045      	beq.n	800e1ee <HAL_UART_IRQHandler+0x3e2>
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	4a87      	ldr	r2, [pc, #540]	; (800e388 <HAL_UART_IRQHandler+0x57c>)
 800e16c:	4293      	cmp	r3, r2
 800e16e:	d03e      	beq.n	800e1ee <HAL_UART_IRQHandler+0x3e2>
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	4a84      	ldr	r2, [pc, #528]	; (800e38c <HAL_UART_IRQHandler+0x580>)
 800e17a:	4293      	cmp	r3, r2
 800e17c:	d037      	beq.n	800e1ee <HAL_UART_IRQHandler+0x3e2>
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	4a82      	ldr	r2, [pc, #520]	; (800e390 <HAL_UART_IRQHandler+0x584>)
 800e188:	4293      	cmp	r3, r2
 800e18a:	d030      	beq.n	800e1ee <HAL_UART_IRQHandler+0x3e2>
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	4a7f      	ldr	r2, [pc, #508]	; (800e394 <HAL_UART_IRQHandler+0x588>)
 800e196:	4293      	cmp	r3, r2
 800e198:	d029      	beq.n	800e1ee <HAL_UART_IRQHandler+0x3e2>
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	4a7d      	ldr	r2, [pc, #500]	; (800e398 <HAL_UART_IRQHandler+0x58c>)
 800e1a4:	4293      	cmp	r3, r2
 800e1a6:	d022      	beq.n	800e1ee <HAL_UART_IRQHandler+0x3e2>
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	4a7a      	ldr	r2, [pc, #488]	; (800e39c <HAL_UART_IRQHandler+0x590>)
 800e1b2:	4293      	cmp	r3, r2
 800e1b4:	d01b      	beq.n	800e1ee <HAL_UART_IRQHandler+0x3e2>
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	4a78      	ldr	r2, [pc, #480]	; (800e3a0 <HAL_UART_IRQHandler+0x594>)
 800e1c0:	4293      	cmp	r3, r2
 800e1c2:	d014      	beq.n	800e1ee <HAL_UART_IRQHandler+0x3e2>
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	4a75      	ldr	r2, [pc, #468]	; (800e3a4 <HAL_UART_IRQHandler+0x598>)
 800e1ce:	4293      	cmp	r3, r2
 800e1d0:	d00d      	beq.n	800e1ee <HAL_UART_IRQHandler+0x3e2>
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	4a73      	ldr	r2, [pc, #460]	; (800e3a8 <HAL_UART_IRQHandler+0x59c>)
 800e1dc:	4293      	cmp	r3, r2
 800e1de:	d006      	beq.n	800e1ee <HAL_UART_IRQHandler+0x3e2>
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	4a70      	ldr	r2, [pc, #448]	; (800e3ac <HAL_UART_IRQHandler+0x5a0>)
 800e1ea:	4293      	cmp	r3, r2
 800e1ec:	d106      	bne.n	800e1fc <HAL_UART_IRQHandler+0x3f0>
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	685b      	ldr	r3, [r3, #4]
 800e1f8:	b29b      	uxth	r3, r3
 800e1fa:	e005      	b.n	800e208 <HAL_UART_IRQHandler+0x3fc>
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	685b      	ldr	r3, [r3, #4]
 800e206:	b29b      	uxth	r3, r3
 800e208:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e20c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e210:	2b00      	cmp	r3, #0
 800e212:	f000 81ab 	beq.w	800e56c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e21c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e220:	429a      	cmp	r2, r3
 800e222:	f080 81a3 	bcs.w	800e56c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e22c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e236:	69db      	ldr	r3, [r3, #28]
 800e238:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e23c:	f000 8087 	beq.w	800e34e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e248:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e24c:	e853 3f00 	ldrex	r3, [r3]
 800e250:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e254:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e25c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	461a      	mov	r2, r3
 800e266:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e26a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e26e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e272:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e276:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e27a:	e841 2300 	strex	r3, r2, [r1]
 800e27e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e282:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e286:	2b00      	cmp	r3, #0
 800e288:	d1da      	bne.n	800e240 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	3308      	adds	r3, #8
 800e290:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e292:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e294:	e853 3f00 	ldrex	r3, [r3]
 800e298:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e29a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e29c:	f023 0301 	bic.w	r3, r3, #1
 800e2a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	3308      	adds	r3, #8
 800e2aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e2ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e2b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e2b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e2ba:	e841 2300 	strex	r3, r2, [r1]
 800e2be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e2c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d1e1      	bne.n	800e28a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	3308      	adds	r3, #8
 800e2cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e2d0:	e853 3f00 	ldrex	r3, [r3]
 800e2d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e2d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e2d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e2dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	3308      	adds	r3, #8
 800e2e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e2ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e2ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e2f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e2f2:	e841 2300 	strex	r3, r2, [r1]
 800e2f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e2f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d1e3      	bne.n	800e2c6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	2220      	movs	r2, #32
 800e302:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	2200      	movs	r2, #0
 800e30a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e314:	e853 3f00 	ldrex	r3, [r3]
 800e318:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e31a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e31c:	f023 0310 	bic.w	r3, r3, #16
 800e320:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	461a      	mov	r2, r3
 800e32a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e32e:	65bb      	str	r3, [r7, #88]	; 0x58
 800e330:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e332:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e334:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e336:	e841 2300 	strex	r3, r2, [r1]
 800e33a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e33c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d1e4      	bne.n	800e30c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e348:	4618      	mov	r0, r3
 800e34a:	f7f7 fd59 	bl	8005e00 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	2202      	movs	r2, #2
 800e352:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e360:	b29b      	uxth	r3, r3
 800e362:	1ad3      	subs	r3, r2, r3
 800e364:	b29b      	uxth	r3, r3
 800e366:	4619      	mov	r1, r3
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	f000 f91d 	bl	800e5a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e36e:	e0fd      	b.n	800e56c <HAL_UART_IRQHandler+0x760>
 800e370:	40020010 	.word	0x40020010
 800e374:	40020028 	.word	0x40020028
 800e378:	40020040 	.word	0x40020040
 800e37c:	40020058 	.word	0x40020058
 800e380:	40020070 	.word	0x40020070
 800e384:	40020088 	.word	0x40020088
 800e388:	400200a0 	.word	0x400200a0
 800e38c:	400200b8 	.word	0x400200b8
 800e390:	40020410 	.word	0x40020410
 800e394:	40020428 	.word	0x40020428
 800e398:	40020440 	.word	0x40020440
 800e39c:	40020458 	.word	0x40020458
 800e3a0:	40020470 	.word	0x40020470
 800e3a4:	40020488 	.word	0x40020488
 800e3a8:	400204a0 	.word	0x400204a0
 800e3ac:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e3bc:	b29b      	uxth	r3, r3
 800e3be:	1ad3      	subs	r3, r2, r3
 800e3c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e3ca:	b29b      	uxth	r3, r3
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	f000 80cf 	beq.w	800e570 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800e3d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	f000 80ca 	beq.w	800e570 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3e4:	e853 3f00 	ldrex	r3, [r3]
 800e3e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e3ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e3f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	461a      	mov	r2, r3
 800e3fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e3fe:	647b      	str	r3, [r7, #68]	; 0x44
 800e400:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e402:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e404:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e406:	e841 2300 	strex	r3, r2, [r1]
 800e40a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e40c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d1e4      	bne.n	800e3dc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	3308      	adds	r3, #8
 800e418:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e41c:	e853 3f00 	ldrex	r3, [r3]
 800e420:	623b      	str	r3, [r7, #32]
   return(result);
 800e422:	6a3a      	ldr	r2, [r7, #32]
 800e424:	4b55      	ldr	r3, [pc, #340]	; (800e57c <HAL_UART_IRQHandler+0x770>)
 800e426:	4013      	ands	r3, r2
 800e428:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	3308      	adds	r3, #8
 800e432:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e436:	633a      	str	r2, [r7, #48]	; 0x30
 800e438:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e43a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e43c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e43e:	e841 2300 	strex	r3, r2, [r1]
 800e442:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e446:	2b00      	cmp	r3, #0
 800e448:	d1e3      	bne.n	800e412 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	2220      	movs	r2, #32
 800e44e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	2200      	movs	r2, #0
 800e456:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	2200      	movs	r2, #0
 800e45c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e464:	693b      	ldr	r3, [r7, #16]
 800e466:	e853 3f00 	ldrex	r3, [r3]
 800e46a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	f023 0310 	bic.w	r3, r3, #16
 800e472:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	461a      	mov	r2, r3
 800e47c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e480:	61fb      	str	r3, [r7, #28]
 800e482:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e484:	69b9      	ldr	r1, [r7, #24]
 800e486:	69fa      	ldr	r2, [r7, #28]
 800e488:	e841 2300 	strex	r3, r2, [r1]
 800e48c:	617b      	str	r3, [r7, #20]
   return(result);
 800e48e:	697b      	ldr	r3, [r7, #20]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d1e4      	bne.n	800e45e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	2202      	movs	r2, #2
 800e498:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e49a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e49e:	4619      	mov	r1, r3
 800e4a0:	6878      	ldr	r0, [r7, #4]
 800e4a2:	f000 f881 	bl	800e5a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e4a6:	e063      	b.n	800e570 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e4a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d00e      	beq.n	800e4d2 <HAL_UART_IRQHandler+0x6c6>
 800e4b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e4b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d008      	beq.n	800e4d2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e4c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e4ca:	6878      	ldr	r0, [r7, #4]
 800e4cc:	f001 f93f 	bl	800f74e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e4d0:	e051      	b.n	800e576 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e4d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d014      	beq.n	800e508 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e4de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d105      	bne.n	800e4f6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e4ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e4ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d008      	beq.n	800e508 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d03a      	beq.n	800e574 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e502:	6878      	ldr	r0, [r7, #4]
 800e504:	4798      	blx	r3
    }
    return;
 800e506:	e035      	b.n	800e574 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e50c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e510:	2b00      	cmp	r3, #0
 800e512:	d009      	beq.n	800e528 <HAL_UART_IRQHandler+0x71c>
 800e514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d003      	beq.n	800e528 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800e520:	6878      	ldr	r0, [r7, #4]
 800e522:	f001 f8e9 	bl	800f6f8 <UART_EndTransmit_IT>
    return;
 800e526:	e026      	b.n	800e576 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e52c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e530:	2b00      	cmp	r3, #0
 800e532:	d009      	beq.n	800e548 <HAL_UART_IRQHandler+0x73c>
 800e534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e538:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d003      	beq.n	800e548 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f001 f918 	bl	800f776 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e546:	e016      	b.n	800e576 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e54c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e550:	2b00      	cmp	r3, #0
 800e552:	d010      	beq.n	800e576 <HAL_UART_IRQHandler+0x76a>
 800e554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e558:	2b00      	cmp	r3, #0
 800e55a:	da0c      	bge.n	800e576 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	f001 f900 	bl	800f762 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e562:	e008      	b.n	800e576 <HAL_UART_IRQHandler+0x76a>
      return;
 800e564:	bf00      	nop
 800e566:	e006      	b.n	800e576 <HAL_UART_IRQHandler+0x76a>
    return;
 800e568:	bf00      	nop
 800e56a:	e004      	b.n	800e576 <HAL_UART_IRQHandler+0x76a>
      return;
 800e56c:	bf00      	nop
 800e56e:	e002      	b.n	800e576 <HAL_UART_IRQHandler+0x76a>
      return;
 800e570:	bf00      	nop
 800e572:	e000      	b.n	800e576 <HAL_UART_IRQHandler+0x76a>
    return;
 800e574:	bf00      	nop
  }
}
 800e576:	37e8      	adds	r7, #232	; 0xe8
 800e578:	46bd      	mov	sp, r7
 800e57a:	bd80      	pop	{r7, pc}
 800e57c:	effffffe 	.word	0xeffffffe

0800e580 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e580:	b480      	push	{r7}
 800e582:	b083      	sub	sp, #12
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e588:	bf00      	nop
 800e58a:	370c      	adds	r7, #12
 800e58c:	46bd      	mov	sp, r7
 800e58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e592:	4770      	bx	lr

0800e594 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e594:	b480      	push	{r7}
 800e596:	b083      	sub	sp, #12
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e59c:	bf00      	nop
 800e59e:	370c      	adds	r7, #12
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a6:	4770      	bx	lr

0800e5a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e5a8:	b480      	push	{r7}
 800e5aa:	b083      	sub	sp, #12
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
 800e5b0:	460b      	mov	r3, r1
 800e5b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e5b4:	bf00      	nop
 800e5b6:	370c      	adds	r7, #12
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5be:	4770      	bx	lr

0800e5c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e5c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e5c4:	b092      	sub	sp, #72	; 0x48
 800e5c6:	af00      	add	r7, sp, #0
 800e5c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e5d0:	697b      	ldr	r3, [r7, #20]
 800e5d2:	689a      	ldr	r2, [r3, #8]
 800e5d4:	697b      	ldr	r3, [r7, #20]
 800e5d6:	691b      	ldr	r3, [r3, #16]
 800e5d8:	431a      	orrs	r2, r3
 800e5da:	697b      	ldr	r3, [r7, #20]
 800e5dc:	695b      	ldr	r3, [r3, #20]
 800e5de:	431a      	orrs	r2, r3
 800e5e0:	697b      	ldr	r3, [r7, #20]
 800e5e2:	69db      	ldr	r3, [r3, #28]
 800e5e4:	4313      	orrs	r3, r2
 800e5e6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e5e8:	697b      	ldr	r3, [r7, #20]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	681a      	ldr	r2, [r3, #0]
 800e5ee:	4bbe      	ldr	r3, [pc, #760]	; (800e8e8 <UART_SetConfig+0x328>)
 800e5f0:	4013      	ands	r3, r2
 800e5f2:	697a      	ldr	r2, [r7, #20]
 800e5f4:	6812      	ldr	r2, [r2, #0]
 800e5f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e5f8:	430b      	orrs	r3, r1
 800e5fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e5fc:	697b      	ldr	r3, [r7, #20]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	685b      	ldr	r3, [r3, #4]
 800e602:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e606:	697b      	ldr	r3, [r7, #20]
 800e608:	68da      	ldr	r2, [r3, #12]
 800e60a:	697b      	ldr	r3, [r7, #20]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	430a      	orrs	r2, r1
 800e610:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e612:	697b      	ldr	r3, [r7, #20]
 800e614:	699b      	ldr	r3, [r3, #24]
 800e616:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e618:	697b      	ldr	r3, [r7, #20]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	4ab3      	ldr	r2, [pc, #716]	; (800e8ec <UART_SetConfig+0x32c>)
 800e61e:	4293      	cmp	r3, r2
 800e620:	d004      	beq.n	800e62c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e622:	697b      	ldr	r3, [r7, #20]
 800e624:	6a1b      	ldr	r3, [r3, #32]
 800e626:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e628:	4313      	orrs	r3, r2
 800e62a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e62c:	697b      	ldr	r3, [r7, #20]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	689a      	ldr	r2, [r3, #8]
 800e632:	4baf      	ldr	r3, [pc, #700]	; (800e8f0 <UART_SetConfig+0x330>)
 800e634:	4013      	ands	r3, r2
 800e636:	697a      	ldr	r2, [r7, #20]
 800e638:	6812      	ldr	r2, [r2, #0]
 800e63a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e63c:	430b      	orrs	r3, r1
 800e63e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e646:	f023 010f 	bic.w	r1, r3, #15
 800e64a:	697b      	ldr	r3, [r7, #20]
 800e64c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e64e:	697b      	ldr	r3, [r7, #20]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	430a      	orrs	r2, r1
 800e654:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e656:	697b      	ldr	r3, [r7, #20]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	4aa6      	ldr	r2, [pc, #664]	; (800e8f4 <UART_SetConfig+0x334>)
 800e65c:	4293      	cmp	r3, r2
 800e65e:	d177      	bne.n	800e750 <UART_SetConfig+0x190>
 800e660:	4ba5      	ldr	r3, [pc, #660]	; (800e8f8 <UART_SetConfig+0x338>)
 800e662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e664:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e668:	2b28      	cmp	r3, #40	; 0x28
 800e66a:	d86d      	bhi.n	800e748 <UART_SetConfig+0x188>
 800e66c:	a201      	add	r2, pc, #4	; (adr r2, 800e674 <UART_SetConfig+0xb4>)
 800e66e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e672:	bf00      	nop
 800e674:	0800e719 	.word	0x0800e719
 800e678:	0800e749 	.word	0x0800e749
 800e67c:	0800e749 	.word	0x0800e749
 800e680:	0800e749 	.word	0x0800e749
 800e684:	0800e749 	.word	0x0800e749
 800e688:	0800e749 	.word	0x0800e749
 800e68c:	0800e749 	.word	0x0800e749
 800e690:	0800e749 	.word	0x0800e749
 800e694:	0800e721 	.word	0x0800e721
 800e698:	0800e749 	.word	0x0800e749
 800e69c:	0800e749 	.word	0x0800e749
 800e6a0:	0800e749 	.word	0x0800e749
 800e6a4:	0800e749 	.word	0x0800e749
 800e6a8:	0800e749 	.word	0x0800e749
 800e6ac:	0800e749 	.word	0x0800e749
 800e6b0:	0800e749 	.word	0x0800e749
 800e6b4:	0800e729 	.word	0x0800e729
 800e6b8:	0800e749 	.word	0x0800e749
 800e6bc:	0800e749 	.word	0x0800e749
 800e6c0:	0800e749 	.word	0x0800e749
 800e6c4:	0800e749 	.word	0x0800e749
 800e6c8:	0800e749 	.word	0x0800e749
 800e6cc:	0800e749 	.word	0x0800e749
 800e6d0:	0800e749 	.word	0x0800e749
 800e6d4:	0800e731 	.word	0x0800e731
 800e6d8:	0800e749 	.word	0x0800e749
 800e6dc:	0800e749 	.word	0x0800e749
 800e6e0:	0800e749 	.word	0x0800e749
 800e6e4:	0800e749 	.word	0x0800e749
 800e6e8:	0800e749 	.word	0x0800e749
 800e6ec:	0800e749 	.word	0x0800e749
 800e6f0:	0800e749 	.word	0x0800e749
 800e6f4:	0800e739 	.word	0x0800e739
 800e6f8:	0800e749 	.word	0x0800e749
 800e6fc:	0800e749 	.word	0x0800e749
 800e700:	0800e749 	.word	0x0800e749
 800e704:	0800e749 	.word	0x0800e749
 800e708:	0800e749 	.word	0x0800e749
 800e70c:	0800e749 	.word	0x0800e749
 800e710:	0800e749 	.word	0x0800e749
 800e714:	0800e741 	.word	0x0800e741
 800e718:	2301      	movs	r3, #1
 800e71a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e71e:	e326      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800e720:	2304      	movs	r3, #4
 800e722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e726:	e322      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800e728:	2308      	movs	r3, #8
 800e72a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e72e:	e31e      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800e730:	2310      	movs	r3, #16
 800e732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e736:	e31a      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800e738:	2320      	movs	r3, #32
 800e73a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e73e:	e316      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800e740:	2340      	movs	r3, #64	; 0x40
 800e742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e746:	e312      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800e748:	2380      	movs	r3, #128	; 0x80
 800e74a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e74e:	e30e      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800e750:	697b      	ldr	r3, [r7, #20]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	4a69      	ldr	r2, [pc, #420]	; (800e8fc <UART_SetConfig+0x33c>)
 800e756:	4293      	cmp	r3, r2
 800e758:	d130      	bne.n	800e7bc <UART_SetConfig+0x1fc>
 800e75a:	4b67      	ldr	r3, [pc, #412]	; (800e8f8 <UART_SetConfig+0x338>)
 800e75c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e75e:	f003 0307 	and.w	r3, r3, #7
 800e762:	2b05      	cmp	r3, #5
 800e764:	d826      	bhi.n	800e7b4 <UART_SetConfig+0x1f4>
 800e766:	a201      	add	r2, pc, #4	; (adr r2, 800e76c <UART_SetConfig+0x1ac>)
 800e768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e76c:	0800e785 	.word	0x0800e785
 800e770:	0800e78d 	.word	0x0800e78d
 800e774:	0800e795 	.word	0x0800e795
 800e778:	0800e79d 	.word	0x0800e79d
 800e77c:	0800e7a5 	.word	0x0800e7a5
 800e780:	0800e7ad 	.word	0x0800e7ad
 800e784:	2300      	movs	r3, #0
 800e786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e78a:	e2f0      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800e78c:	2304      	movs	r3, #4
 800e78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e792:	e2ec      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800e794:	2308      	movs	r3, #8
 800e796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e79a:	e2e8      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800e79c:	2310      	movs	r3, #16
 800e79e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7a2:	e2e4      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800e7a4:	2320      	movs	r3, #32
 800e7a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7aa:	e2e0      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800e7ac:	2340      	movs	r3, #64	; 0x40
 800e7ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7b2:	e2dc      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800e7b4:	2380      	movs	r3, #128	; 0x80
 800e7b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7ba:	e2d8      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800e7bc:	697b      	ldr	r3, [r7, #20]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	4a4f      	ldr	r2, [pc, #316]	; (800e900 <UART_SetConfig+0x340>)
 800e7c2:	4293      	cmp	r3, r2
 800e7c4:	d130      	bne.n	800e828 <UART_SetConfig+0x268>
 800e7c6:	4b4c      	ldr	r3, [pc, #304]	; (800e8f8 <UART_SetConfig+0x338>)
 800e7c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7ca:	f003 0307 	and.w	r3, r3, #7
 800e7ce:	2b05      	cmp	r3, #5
 800e7d0:	d826      	bhi.n	800e820 <UART_SetConfig+0x260>
 800e7d2:	a201      	add	r2, pc, #4	; (adr r2, 800e7d8 <UART_SetConfig+0x218>)
 800e7d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7d8:	0800e7f1 	.word	0x0800e7f1
 800e7dc:	0800e7f9 	.word	0x0800e7f9
 800e7e0:	0800e801 	.word	0x0800e801
 800e7e4:	0800e809 	.word	0x0800e809
 800e7e8:	0800e811 	.word	0x0800e811
 800e7ec:	0800e819 	.word	0x0800e819
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7f6:	e2ba      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800e7f8:	2304      	movs	r3, #4
 800e7fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7fe:	e2b6      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800e800:	2308      	movs	r3, #8
 800e802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e806:	e2b2      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800e808:	2310      	movs	r3, #16
 800e80a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e80e:	e2ae      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800e810:	2320      	movs	r3, #32
 800e812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e816:	e2aa      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800e818:	2340      	movs	r3, #64	; 0x40
 800e81a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e81e:	e2a6      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800e820:	2380      	movs	r3, #128	; 0x80
 800e822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e826:	e2a2      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800e828:	697b      	ldr	r3, [r7, #20]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	4a35      	ldr	r2, [pc, #212]	; (800e904 <UART_SetConfig+0x344>)
 800e82e:	4293      	cmp	r3, r2
 800e830:	d130      	bne.n	800e894 <UART_SetConfig+0x2d4>
 800e832:	4b31      	ldr	r3, [pc, #196]	; (800e8f8 <UART_SetConfig+0x338>)
 800e834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e836:	f003 0307 	and.w	r3, r3, #7
 800e83a:	2b05      	cmp	r3, #5
 800e83c:	d826      	bhi.n	800e88c <UART_SetConfig+0x2cc>
 800e83e:	a201      	add	r2, pc, #4	; (adr r2, 800e844 <UART_SetConfig+0x284>)
 800e840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e844:	0800e85d 	.word	0x0800e85d
 800e848:	0800e865 	.word	0x0800e865
 800e84c:	0800e86d 	.word	0x0800e86d
 800e850:	0800e875 	.word	0x0800e875
 800e854:	0800e87d 	.word	0x0800e87d
 800e858:	0800e885 	.word	0x0800e885
 800e85c:	2300      	movs	r3, #0
 800e85e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e862:	e284      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800e864:	2304      	movs	r3, #4
 800e866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e86a:	e280      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800e86c:	2308      	movs	r3, #8
 800e86e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e872:	e27c      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800e874:	2310      	movs	r3, #16
 800e876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e87a:	e278      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800e87c:	2320      	movs	r3, #32
 800e87e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e882:	e274      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800e884:	2340      	movs	r3, #64	; 0x40
 800e886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e88a:	e270      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800e88c:	2380      	movs	r3, #128	; 0x80
 800e88e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e892:	e26c      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800e894:	697b      	ldr	r3, [r7, #20]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	4a1b      	ldr	r2, [pc, #108]	; (800e908 <UART_SetConfig+0x348>)
 800e89a:	4293      	cmp	r3, r2
 800e89c:	d142      	bne.n	800e924 <UART_SetConfig+0x364>
 800e89e:	4b16      	ldr	r3, [pc, #88]	; (800e8f8 <UART_SetConfig+0x338>)
 800e8a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8a2:	f003 0307 	and.w	r3, r3, #7
 800e8a6:	2b05      	cmp	r3, #5
 800e8a8:	d838      	bhi.n	800e91c <UART_SetConfig+0x35c>
 800e8aa:	a201      	add	r2, pc, #4	; (adr r2, 800e8b0 <UART_SetConfig+0x2f0>)
 800e8ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8b0:	0800e8c9 	.word	0x0800e8c9
 800e8b4:	0800e8d1 	.word	0x0800e8d1
 800e8b8:	0800e8d9 	.word	0x0800e8d9
 800e8bc:	0800e8e1 	.word	0x0800e8e1
 800e8c0:	0800e90d 	.word	0x0800e90d
 800e8c4:	0800e915 	.word	0x0800e915
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8ce:	e24e      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800e8d0:	2304      	movs	r3, #4
 800e8d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8d6:	e24a      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800e8d8:	2308      	movs	r3, #8
 800e8da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8de:	e246      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800e8e0:	2310      	movs	r3, #16
 800e8e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8e6:	e242      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800e8e8:	cfff69f3 	.word	0xcfff69f3
 800e8ec:	58000c00 	.word	0x58000c00
 800e8f0:	11fff4ff 	.word	0x11fff4ff
 800e8f4:	40011000 	.word	0x40011000
 800e8f8:	58024400 	.word	0x58024400
 800e8fc:	40004400 	.word	0x40004400
 800e900:	40004800 	.word	0x40004800
 800e904:	40004c00 	.word	0x40004c00
 800e908:	40005000 	.word	0x40005000
 800e90c:	2320      	movs	r3, #32
 800e90e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e912:	e22c      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800e914:	2340      	movs	r3, #64	; 0x40
 800e916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e91a:	e228      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800e91c:	2380      	movs	r3, #128	; 0x80
 800e91e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e922:	e224      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800e924:	697b      	ldr	r3, [r7, #20]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	4ab1      	ldr	r2, [pc, #708]	; (800ebf0 <UART_SetConfig+0x630>)
 800e92a:	4293      	cmp	r3, r2
 800e92c:	d176      	bne.n	800ea1c <UART_SetConfig+0x45c>
 800e92e:	4bb1      	ldr	r3, [pc, #708]	; (800ebf4 <UART_SetConfig+0x634>)
 800e930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e932:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e936:	2b28      	cmp	r3, #40	; 0x28
 800e938:	d86c      	bhi.n	800ea14 <UART_SetConfig+0x454>
 800e93a:	a201      	add	r2, pc, #4	; (adr r2, 800e940 <UART_SetConfig+0x380>)
 800e93c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e940:	0800e9e5 	.word	0x0800e9e5
 800e944:	0800ea15 	.word	0x0800ea15
 800e948:	0800ea15 	.word	0x0800ea15
 800e94c:	0800ea15 	.word	0x0800ea15
 800e950:	0800ea15 	.word	0x0800ea15
 800e954:	0800ea15 	.word	0x0800ea15
 800e958:	0800ea15 	.word	0x0800ea15
 800e95c:	0800ea15 	.word	0x0800ea15
 800e960:	0800e9ed 	.word	0x0800e9ed
 800e964:	0800ea15 	.word	0x0800ea15
 800e968:	0800ea15 	.word	0x0800ea15
 800e96c:	0800ea15 	.word	0x0800ea15
 800e970:	0800ea15 	.word	0x0800ea15
 800e974:	0800ea15 	.word	0x0800ea15
 800e978:	0800ea15 	.word	0x0800ea15
 800e97c:	0800ea15 	.word	0x0800ea15
 800e980:	0800e9f5 	.word	0x0800e9f5
 800e984:	0800ea15 	.word	0x0800ea15
 800e988:	0800ea15 	.word	0x0800ea15
 800e98c:	0800ea15 	.word	0x0800ea15
 800e990:	0800ea15 	.word	0x0800ea15
 800e994:	0800ea15 	.word	0x0800ea15
 800e998:	0800ea15 	.word	0x0800ea15
 800e99c:	0800ea15 	.word	0x0800ea15
 800e9a0:	0800e9fd 	.word	0x0800e9fd
 800e9a4:	0800ea15 	.word	0x0800ea15
 800e9a8:	0800ea15 	.word	0x0800ea15
 800e9ac:	0800ea15 	.word	0x0800ea15
 800e9b0:	0800ea15 	.word	0x0800ea15
 800e9b4:	0800ea15 	.word	0x0800ea15
 800e9b8:	0800ea15 	.word	0x0800ea15
 800e9bc:	0800ea15 	.word	0x0800ea15
 800e9c0:	0800ea05 	.word	0x0800ea05
 800e9c4:	0800ea15 	.word	0x0800ea15
 800e9c8:	0800ea15 	.word	0x0800ea15
 800e9cc:	0800ea15 	.word	0x0800ea15
 800e9d0:	0800ea15 	.word	0x0800ea15
 800e9d4:	0800ea15 	.word	0x0800ea15
 800e9d8:	0800ea15 	.word	0x0800ea15
 800e9dc:	0800ea15 	.word	0x0800ea15
 800e9e0:	0800ea0d 	.word	0x0800ea0d
 800e9e4:	2301      	movs	r3, #1
 800e9e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9ea:	e1c0      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800e9ec:	2304      	movs	r3, #4
 800e9ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9f2:	e1bc      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800e9f4:	2308      	movs	r3, #8
 800e9f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9fa:	e1b8      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800e9fc:	2310      	movs	r3, #16
 800e9fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea02:	e1b4      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800ea04:	2320      	movs	r3, #32
 800ea06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea0a:	e1b0      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800ea0c:	2340      	movs	r3, #64	; 0x40
 800ea0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea12:	e1ac      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800ea14:	2380      	movs	r3, #128	; 0x80
 800ea16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea1a:	e1a8      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	4a75      	ldr	r2, [pc, #468]	; (800ebf8 <UART_SetConfig+0x638>)
 800ea22:	4293      	cmp	r3, r2
 800ea24:	d130      	bne.n	800ea88 <UART_SetConfig+0x4c8>
 800ea26:	4b73      	ldr	r3, [pc, #460]	; (800ebf4 <UART_SetConfig+0x634>)
 800ea28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea2a:	f003 0307 	and.w	r3, r3, #7
 800ea2e:	2b05      	cmp	r3, #5
 800ea30:	d826      	bhi.n	800ea80 <UART_SetConfig+0x4c0>
 800ea32:	a201      	add	r2, pc, #4	; (adr r2, 800ea38 <UART_SetConfig+0x478>)
 800ea34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea38:	0800ea51 	.word	0x0800ea51
 800ea3c:	0800ea59 	.word	0x0800ea59
 800ea40:	0800ea61 	.word	0x0800ea61
 800ea44:	0800ea69 	.word	0x0800ea69
 800ea48:	0800ea71 	.word	0x0800ea71
 800ea4c:	0800ea79 	.word	0x0800ea79
 800ea50:	2300      	movs	r3, #0
 800ea52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea56:	e18a      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800ea58:	2304      	movs	r3, #4
 800ea5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea5e:	e186      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800ea60:	2308      	movs	r3, #8
 800ea62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea66:	e182      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800ea68:	2310      	movs	r3, #16
 800ea6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea6e:	e17e      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800ea70:	2320      	movs	r3, #32
 800ea72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea76:	e17a      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800ea78:	2340      	movs	r3, #64	; 0x40
 800ea7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea7e:	e176      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800ea80:	2380      	movs	r3, #128	; 0x80
 800ea82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea86:	e172      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800ea88:	697b      	ldr	r3, [r7, #20]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	4a5b      	ldr	r2, [pc, #364]	; (800ebfc <UART_SetConfig+0x63c>)
 800ea8e:	4293      	cmp	r3, r2
 800ea90:	d130      	bne.n	800eaf4 <UART_SetConfig+0x534>
 800ea92:	4b58      	ldr	r3, [pc, #352]	; (800ebf4 <UART_SetConfig+0x634>)
 800ea94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea96:	f003 0307 	and.w	r3, r3, #7
 800ea9a:	2b05      	cmp	r3, #5
 800ea9c:	d826      	bhi.n	800eaec <UART_SetConfig+0x52c>
 800ea9e:	a201      	add	r2, pc, #4	; (adr r2, 800eaa4 <UART_SetConfig+0x4e4>)
 800eaa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaa4:	0800eabd 	.word	0x0800eabd
 800eaa8:	0800eac5 	.word	0x0800eac5
 800eaac:	0800eacd 	.word	0x0800eacd
 800eab0:	0800ead5 	.word	0x0800ead5
 800eab4:	0800eadd 	.word	0x0800eadd
 800eab8:	0800eae5 	.word	0x0800eae5
 800eabc:	2300      	movs	r3, #0
 800eabe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eac2:	e154      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800eac4:	2304      	movs	r3, #4
 800eac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaca:	e150      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800eacc:	2308      	movs	r3, #8
 800eace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ead2:	e14c      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800ead4:	2310      	movs	r3, #16
 800ead6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eada:	e148      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800eadc:	2320      	movs	r3, #32
 800eade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eae2:	e144      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800eae4:	2340      	movs	r3, #64	; 0x40
 800eae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaea:	e140      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800eaec:	2380      	movs	r3, #128	; 0x80
 800eaee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaf2:	e13c      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800eaf4:	697b      	ldr	r3, [r7, #20]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	4a41      	ldr	r2, [pc, #260]	; (800ec00 <UART_SetConfig+0x640>)
 800eafa:	4293      	cmp	r3, r2
 800eafc:	f040 8082 	bne.w	800ec04 <UART_SetConfig+0x644>
 800eb00:	4b3c      	ldr	r3, [pc, #240]	; (800ebf4 <UART_SetConfig+0x634>)
 800eb02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800eb08:	2b28      	cmp	r3, #40	; 0x28
 800eb0a:	d86d      	bhi.n	800ebe8 <UART_SetConfig+0x628>
 800eb0c:	a201      	add	r2, pc, #4	; (adr r2, 800eb14 <UART_SetConfig+0x554>)
 800eb0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb12:	bf00      	nop
 800eb14:	0800ebb9 	.word	0x0800ebb9
 800eb18:	0800ebe9 	.word	0x0800ebe9
 800eb1c:	0800ebe9 	.word	0x0800ebe9
 800eb20:	0800ebe9 	.word	0x0800ebe9
 800eb24:	0800ebe9 	.word	0x0800ebe9
 800eb28:	0800ebe9 	.word	0x0800ebe9
 800eb2c:	0800ebe9 	.word	0x0800ebe9
 800eb30:	0800ebe9 	.word	0x0800ebe9
 800eb34:	0800ebc1 	.word	0x0800ebc1
 800eb38:	0800ebe9 	.word	0x0800ebe9
 800eb3c:	0800ebe9 	.word	0x0800ebe9
 800eb40:	0800ebe9 	.word	0x0800ebe9
 800eb44:	0800ebe9 	.word	0x0800ebe9
 800eb48:	0800ebe9 	.word	0x0800ebe9
 800eb4c:	0800ebe9 	.word	0x0800ebe9
 800eb50:	0800ebe9 	.word	0x0800ebe9
 800eb54:	0800ebc9 	.word	0x0800ebc9
 800eb58:	0800ebe9 	.word	0x0800ebe9
 800eb5c:	0800ebe9 	.word	0x0800ebe9
 800eb60:	0800ebe9 	.word	0x0800ebe9
 800eb64:	0800ebe9 	.word	0x0800ebe9
 800eb68:	0800ebe9 	.word	0x0800ebe9
 800eb6c:	0800ebe9 	.word	0x0800ebe9
 800eb70:	0800ebe9 	.word	0x0800ebe9
 800eb74:	0800ebd1 	.word	0x0800ebd1
 800eb78:	0800ebe9 	.word	0x0800ebe9
 800eb7c:	0800ebe9 	.word	0x0800ebe9
 800eb80:	0800ebe9 	.word	0x0800ebe9
 800eb84:	0800ebe9 	.word	0x0800ebe9
 800eb88:	0800ebe9 	.word	0x0800ebe9
 800eb8c:	0800ebe9 	.word	0x0800ebe9
 800eb90:	0800ebe9 	.word	0x0800ebe9
 800eb94:	0800ebd9 	.word	0x0800ebd9
 800eb98:	0800ebe9 	.word	0x0800ebe9
 800eb9c:	0800ebe9 	.word	0x0800ebe9
 800eba0:	0800ebe9 	.word	0x0800ebe9
 800eba4:	0800ebe9 	.word	0x0800ebe9
 800eba8:	0800ebe9 	.word	0x0800ebe9
 800ebac:	0800ebe9 	.word	0x0800ebe9
 800ebb0:	0800ebe9 	.word	0x0800ebe9
 800ebb4:	0800ebe1 	.word	0x0800ebe1
 800ebb8:	2301      	movs	r3, #1
 800ebba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebbe:	e0d6      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800ebc0:	2304      	movs	r3, #4
 800ebc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebc6:	e0d2      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800ebc8:	2308      	movs	r3, #8
 800ebca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebce:	e0ce      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800ebd0:	2310      	movs	r3, #16
 800ebd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebd6:	e0ca      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800ebd8:	2320      	movs	r3, #32
 800ebda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebde:	e0c6      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800ebe0:	2340      	movs	r3, #64	; 0x40
 800ebe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebe6:	e0c2      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800ebe8:	2380      	movs	r3, #128	; 0x80
 800ebea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebee:	e0be      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800ebf0:	40011400 	.word	0x40011400
 800ebf4:	58024400 	.word	0x58024400
 800ebf8:	40007800 	.word	0x40007800
 800ebfc:	40007c00 	.word	0x40007c00
 800ec00:	40011800 	.word	0x40011800
 800ec04:	697b      	ldr	r3, [r7, #20]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	4aad      	ldr	r2, [pc, #692]	; (800eec0 <UART_SetConfig+0x900>)
 800ec0a:	4293      	cmp	r3, r2
 800ec0c:	d176      	bne.n	800ecfc <UART_SetConfig+0x73c>
 800ec0e:	4bad      	ldr	r3, [pc, #692]	; (800eec4 <UART_SetConfig+0x904>)
 800ec10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ec16:	2b28      	cmp	r3, #40	; 0x28
 800ec18:	d86c      	bhi.n	800ecf4 <UART_SetConfig+0x734>
 800ec1a:	a201      	add	r2, pc, #4	; (adr r2, 800ec20 <UART_SetConfig+0x660>)
 800ec1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec20:	0800ecc5 	.word	0x0800ecc5
 800ec24:	0800ecf5 	.word	0x0800ecf5
 800ec28:	0800ecf5 	.word	0x0800ecf5
 800ec2c:	0800ecf5 	.word	0x0800ecf5
 800ec30:	0800ecf5 	.word	0x0800ecf5
 800ec34:	0800ecf5 	.word	0x0800ecf5
 800ec38:	0800ecf5 	.word	0x0800ecf5
 800ec3c:	0800ecf5 	.word	0x0800ecf5
 800ec40:	0800eccd 	.word	0x0800eccd
 800ec44:	0800ecf5 	.word	0x0800ecf5
 800ec48:	0800ecf5 	.word	0x0800ecf5
 800ec4c:	0800ecf5 	.word	0x0800ecf5
 800ec50:	0800ecf5 	.word	0x0800ecf5
 800ec54:	0800ecf5 	.word	0x0800ecf5
 800ec58:	0800ecf5 	.word	0x0800ecf5
 800ec5c:	0800ecf5 	.word	0x0800ecf5
 800ec60:	0800ecd5 	.word	0x0800ecd5
 800ec64:	0800ecf5 	.word	0x0800ecf5
 800ec68:	0800ecf5 	.word	0x0800ecf5
 800ec6c:	0800ecf5 	.word	0x0800ecf5
 800ec70:	0800ecf5 	.word	0x0800ecf5
 800ec74:	0800ecf5 	.word	0x0800ecf5
 800ec78:	0800ecf5 	.word	0x0800ecf5
 800ec7c:	0800ecf5 	.word	0x0800ecf5
 800ec80:	0800ecdd 	.word	0x0800ecdd
 800ec84:	0800ecf5 	.word	0x0800ecf5
 800ec88:	0800ecf5 	.word	0x0800ecf5
 800ec8c:	0800ecf5 	.word	0x0800ecf5
 800ec90:	0800ecf5 	.word	0x0800ecf5
 800ec94:	0800ecf5 	.word	0x0800ecf5
 800ec98:	0800ecf5 	.word	0x0800ecf5
 800ec9c:	0800ecf5 	.word	0x0800ecf5
 800eca0:	0800ece5 	.word	0x0800ece5
 800eca4:	0800ecf5 	.word	0x0800ecf5
 800eca8:	0800ecf5 	.word	0x0800ecf5
 800ecac:	0800ecf5 	.word	0x0800ecf5
 800ecb0:	0800ecf5 	.word	0x0800ecf5
 800ecb4:	0800ecf5 	.word	0x0800ecf5
 800ecb8:	0800ecf5 	.word	0x0800ecf5
 800ecbc:	0800ecf5 	.word	0x0800ecf5
 800ecc0:	0800eced 	.word	0x0800eced
 800ecc4:	2301      	movs	r3, #1
 800ecc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecca:	e050      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800eccc:	2304      	movs	r3, #4
 800ecce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecd2:	e04c      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800ecd4:	2308      	movs	r3, #8
 800ecd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecda:	e048      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800ecdc:	2310      	movs	r3, #16
 800ecde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ece2:	e044      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800ece4:	2320      	movs	r3, #32
 800ece6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecea:	e040      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800ecec:	2340      	movs	r3, #64	; 0x40
 800ecee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecf2:	e03c      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800ecf4:	2380      	movs	r3, #128	; 0x80
 800ecf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecfa:	e038      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800ecfc:	697b      	ldr	r3, [r7, #20]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	4a71      	ldr	r2, [pc, #452]	; (800eec8 <UART_SetConfig+0x908>)
 800ed02:	4293      	cmp	r3, r2
 800ed04:	d130      	bne.n	800ed68 <UART_SetConfig+0x7a8>
 800ed06:	4b6f      	ldr	r3, [pc, #444]	; (800eec4 <UART_SetConfig+0x904>)
 800ed08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed0a:	f003 0307 	and.w	r3, r3, #7
 800ed0e:	2b05      	cmp	r3, #5
 800ed10:	d826      	bhi.n	800ed60 <UART_SetConfig+0x7a0>
 800ed12:	a201      	add	r2, pc, #4	; (adr r2, 800ed18 <UART_SetConfig+0x758>)
 800ed14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed18:	0800ed31 	.word	0x0800ed31
 800ed1c:	0800ed39 	.word	0x0800ed39
 800ed20:	0800ed41 	.word	0x0800ed41
 800ed24:	0800ed49 	.word	0x0800ed49
 800ed28:	0800ed51 	.word	0x0800ed51
 800ed2c:	0800ed59 	.word	0x0800ed59
 800ed30:	2302      	movs	r3, #2
 800ed32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed36:	e01a      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800ed38:	2304      	movs	r3, #4
 800ed3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed3e:	e016      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800ed40:	2308      	movs	r3, #8
 800ed42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed46:	e012      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800ed48:	2310      	movs	r3, #16
 800ed4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed4e:	e00e      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800ed50:	2320      	movs	r3, #32
 800ed52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed56:	e00a      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800ed58:	2340      	movs	r3, #64	; 0x40
 800ed5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed5e:	e006      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800ed60:	2380      	movs	r3, #128	; 0x80
 800ed62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed66:	e002      	b.n	800ed6e <UART_SetConfig+0x7ae>
 800ed68:	2380      	movs	r3, #128	; 0x80
 800ed6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ed6e:	697b      	ldr	r3, [r7, #20]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	4a55      	ldr	r2, [pc, #340]	; (800eec8 <UART_SetConfig+0x908>)
 800ed74:	4293      	cmp	r3, r2
 800ed76:	f040 80f8 	bne.w	800ef6a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ed7a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ed7e:	2b20      	cmp	r3, #32
 800ed80:	dc46      	bgt.n	800ee10 <UART_SetConfig+0x850>
 800ed82:	2b02      	cmp	r3, #2
 800ed84:	db75      	blt.n	800ee72 <UART_SetConfig+0x8b2>
 800ed86:	3b02      	subs	r3, #2
 800ed88:	2b1e      	cmp	r3, #30
 800ed8a:	d872      	bhi.n	800ee72 <UART_SetConfig+0x8b2>
 800ed8c:	a201      	add	r2, pc, #4	; (adr r2, 800ed94 <UART_SetConfig+0x7d4>)
 800ed8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed92:	bf00      	nop
 800ed94:	0800ee17 	.word	0x0800ee17
 800ed98:	0800ee73 	.word	0x0800ee73
 800ed9c:	0800ee1f 	.word	0x0800ee1f
 800eda0:	0800ee73 	.word	0x0800ee73
 800eda4:	0800ee73 	.word	0x0800ee73
 800eda8:	0800ee73 	.word	0x0800ee73
 800edac:	0800ee2f 	.word	0x0800ee2f
 800edb0:	0800ee73 	.word	0x0800ee73
 800edb4:	0800ee73 	.word	0x0800ee73
 800edb8:	0800ee73 	.word	0x0800ee73
 800edbc:	0800ee73 	.word	0x0800ee73
 800edc0:	0800ee73 	.word	0x0800ee73
 800edc4:	0800ee73 	.word	0x0800ee73
 800edc8:	0800ee73 	.word	0x0800ee73
 800edcc:	0800ee3f 	.word	0x0800ee3f
 800edd0:	0800ee73 	.word	0x0800ee73
 800edd4:	0800ee73 	.word	0x0800ee73
 800edd8:	0800ee73 	.word	0x0800ee73
 800eddc:	0800ee73 	.word	0x0800ee73
 800ede0:	0800ee73 	.word	0x0800ee73
 800ede4:	0800ee73 	.word	0x0800ee73
 800ede8:	0800ee73 	.word	0x0800ee73
 800edec:	0800ee73 	.word	0x0800ee73
 800edf0:	0800ee73 	.word	0x0800ee73
 800edf4:	0800ee73 	.word	0x0800ee73
 800edf8:	0800ee73 	.word	0x0800ee73
 800edfc:	0800ee73 	.word	0x0800ee73
 800ee00:	0800ee73 	.word	0x0800ee73
 800ee04:	0800ee73 	.word	0x0800ee73
 800ee08:	0800ee73 	.word	0x0800ee73
 800ee0c:	0800ee65 	.word	0x0800ee65
 800ee10:	2b40      	cmp	r3, #64	; 0x40
 800ee12:	d02a      	beq.n	800ee6a <UART_SetConfig+0x8aa>
 800ee14:	e02d      	b.n	800ee72 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ee16:	f7fe f879 	bl	800cf0c <HAL_RCCEx_GetD3PCLK1Freq>
 800ee1a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ee1c:	e02f      	b.n	800ee7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ee1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ee22:	4618      	mov	r0, r3
 800ee24:	f7fe f888 	bl	800cf38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ee28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee2c:	e027      	b.n	800ee7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ee2e:	f107 0318 	add.w	r3, r7, #24
 800ee32:	4618      	mov	r0, r3
 800ee34:	f7fe f9d4 	bl	800d1e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ee38:	69fb      	ldr	r3, [r7, #28]
 800ee3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee3c:	e01f      	b.n	800ee7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ee3e:	4b21      	ldr	r3, [pc, #132]	; (800eec4 <UART_SetConfig+0x904>)
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	f003 0320 	and.w	r3, r3, #32
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d009      	beq.n	800ee5e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ee4a:	4b1e      	ldr	r3, [pc, #120]	; (800eec4 <UART_SetConfig+0x904>)
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	08db      	lsrs	r3, r3, #3
 800ee50:	f003 0303 	and.w	r3, r3, #3
 800ee54:	4a1d      	ldr	r2, [pc, #116]	; (800eecc <UART_SetConfig+0x90c>)
 800ee56:	fa22 f303 	lsr.w	r3, r2, r3
 800ee5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ee5c:	e00f      	b.n	800ee7e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ee5e:	4b1b      	ldr	r3, [pc, #108]	; (800eecc <UART_SetConfig+0x90c>)
 800ee60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee62:	e00c      	b.n	800ee7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ee64:	4b1a      	ldr	r3, [pc, #104]	; (800eed0 <UART_SetConfig+0x910>)
 800ee66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee68:	e009      	b.n	800ee7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ee6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ee6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee70:	e005      	b.n	800ee7e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ee72:	2300      	movs	r3, #0
 800ee74:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ee76:	2301      	movs	r3, #1
 800ee78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ee7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ee7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	f000 81ee 	beq.w	800f262 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ee86:	697b      	ldr	r3, [r7, #20]
 800ee88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee8a:	4a12      	ldr	r2, [pc, #72]	; (800eed4 <UART_SetConfig+0x914>)
 800ee8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee90:	461a      	mov	r2, r3
 800ee92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee94:	fbb3 f3f2 	udiv	r3, r3, r2
 800ee98:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ee9a:	697b      	ldr	r3, [r7, #20]
 800ee9c:	685a      	ldr	r2, [r3, #4]
 800ee9e:	4613      	mov	r3, r2
 800eea0:	005b      	lsls	r3, r3, #1
 800eea2:	4413      	add	r3, r2
 800eea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eea6:	429a      	cmp	r2, r3
 800eea8:	d305      	bcc.n	800eeb6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800eeaa:	697b      	ldr	r3, [r7, #20]
 800eeac:	685b      	ldr	r3, [r3, #4]
 800eeae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800eeb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eeb2:	429a      	cmp	r2, r3
 800eeb4:	d910      	bls.n	800eed8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800eeb6:	2301      	movs	r3, #1
 800eeb8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800eebc:	e1d1      	b.n	800f262 <UART_SetConfig+0xca2>
 800eebe:	bf00      	nop
 800eec0:	40011c00 	.word	0x40011c00
 800eec4:	58024400 	.word	0x58024400
 800eec8:	58000c00 	.word	0x58000c00
 800eecc:	03d09000 	.word	0x03d09000
 800eed0:	003d0900 	.word	0x003d0900
 800eed4:	08014cb0 	.word	0x08014cb0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eeda:	2200      	movs	r2, #0
 800eedc:	60bb      	str	r3, [r7, #8]
 800eede:	60fa      	str	r2, [r7, #12]
 800eee0:	697b      	ldr	r3, [r7, #20]
 800eee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eee4:	4ac0      	ldr	r2, [pc, #768]	; (800f1e8 <UART_SetConfig+0xc28>)
 800eee6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eeea:	b29b      	uxth	r3, r3
 800eeec:	2200      	movs	r2, #0
 800eeee:	603b      	str	r3, [r7, #0]
 800eef0:	607a      	str	r2, [r7, #4]
 800eef2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eef6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800eefa:	f7f1 fa49 	bl	8000390 <__aeabi_uldivmod>
 800eefe:	4602      	mov	r2, r0
 800ef00:	460b      	mov	r3, r1
 800ef02:	4610      	mov	r0, r2
 800ef04:	4619      	mov	r1, r3
 800ef06:	f04f 0200 	mov.w	r2, #0
 800ef0a:	f04f 0300 	mov.w	r3, #0
 800ef0e:	020b      	lsls	r3, r1, #8
 800ef10:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ef14:	0202      	lsls	r2, r0, #8
 800ef16:	6979      	ldr	r1, [r7, #20]
 800ef18:	6849      	ldr	r1, [r1, #4]
 800ef1a:	0849      	lsrs	r1, r1, #1
 800ef1c:	2000      	movs	r0, #0
 800ef1e:	460c      	mov	r4, r1
 800ef20:	4605      	mov	r5, r0
 800ef22:	eb12 0804 	adds.w	r8, r2, r4
 800ef26:	eb43 0905 	adc.w	r9, r3, r5
 800ef2a:	697b      	ldr	r3, [r7, #20]
 800ef2c:	685b      	ldr	r3, [r3, #4]
 800ef2e:	2200      	movs	r2, #0
 800ef30:	469a      	mov	sl, r3
 800ef32:	4693      	mov	fp, r2
 800ef34:	4652      	mov	r2, sl
 800ef36:	465b      	mov	r3, fp
 800ef38:	4640      	mov	r0, r8
 800ef3a:	4649      	mov	r1, r9
 800ef3c:	f7f1 fa28 	bl	8000390 <__aeabi_uldivmod>
 800ef40:	4602      	mov	r2, r0
 800ef42:	460b      	mov	r3, r1
 800ef44:	4613      	mov	r3, r2
 800ef46:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ef48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ef4e:	d308      	bcc.n	800ef62 <UART_SetConfig+0x9a2>
 800ef50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ef56:	d204      	bcs.n	800ef62 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800ef58:	697b      	ldr	r3, [r7, #20]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef5e:	60da      	str	r2, [r3, #12]
 800ef60:	e17f      	b.n	800f262 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800ef62:	2301      	movs	r3, #1
 800ef64:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ef68:	e17b      	b.n	800f262 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ef6a:	697b      	ldr	r3, [r7, #20]
 800ef6c:	69db      	ldr	r3, [r3, #28]
 800ef6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ef72:	f040 80bd 	bne.w	800f0f0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800ef76:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ef7a:	2b20      	cmp	r3, #32
 800ef7c:	dc48      	bgt.n	800f010 <UART_SetConfig+0xa50>
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	db7b      	blt.n	800f07a <UART_SetConfig+0xaba>
 800ef82:	2b20      	cmp	r3, #32
 800ef84:	d879      	bhi.n	800f07a <UART_SetConfig+0xaba>
 800ef86:	a201      	add	r2, pc, #4	; (adr r2, 800ef8c <UART_SetConfig+0x9cc>)
 800ef88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef8c:	0800f017 	.word	0x0800f017
 800ef90:	0800f01f 	.word	0x0800f01f
 800ef94:	0800f07b 	.word	0x0800f07b
 800ef98:	0800f07b 	.word	0x0800f07b
 800ef9c:	0800f027 	.word	0x0800f027
 800efa0:	0800f07b 	.word	0x0800f07b
 800efa4:	0800f07b 	.word	0x0800f07b
 800efa8:	0800f07b 	.word	0x0800f07b
 800efac:	0800f037 	.word	0x0800f037
 800efb0:	0800f07b 	.word	0x0800f07b
 800efb4:	0800f07b 	.word	0x0800f07b
 800efb8:	0800f07b 	.word	0x0800f07b
 800efbc:	0800f07b 	.word	0x0800f07b
 800efc0:	0800f07b 	.word	0x0800f07b
 800efc4:	0800f07b 	.word	0x0800f07b
 800efc8:	0800f07b 	.word	0x0800f07b
 800efcc:	0800f047 	.word	0x0800f047
 800efd0:	0800f07b 	.word	0x0800f07b
 800efd4:	0800f07b 	.word	0x0800f07b
 800efd8:	0800f07b 	.word	0x0800f07b
 800efdc:	0800f07b 	.word	0x0800f07b
 800efe0:	0800f07b 	.word	0x0800f07b
 800efe4:	0800f07b 	.word	0x0800f07b
 800efe8:	0800f07b 	.word	0x0800f07b
 800efec:	0800f07b 	.word	0x0800f07b
 800eff0:	0800f07b 	.word	0x0800f07b
 800eff4:	0800f07b 	.word	0x0800f07b
 800eff8:	0800f07b 	.word	0x0800f07b
 800effc:	0800f07b 	.word	0x0800f07b
 800f000:	0800f07b 	.word	0x0800f07b
 800f004:	0800f07b 	.word	0x0800f07b
 800f008:	0800f07b 	.word	0x0800f07b
 800f00c:	0800f06d 	.word	0x0800f06d
 800f010:	2b40      	cmp	r3, #64	; 0x40
 800f012:	d02e      	beq.n	800f072 <UART_SetConfig+0xab2>
 800f014:	e031      	b.n	800f07a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f016:	f7fc fd8f 	bl	800bb38 <HAL_RCC_GetPCLK1Freq>
 800f01a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f01c:	e033      	b.n	800f086 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f01e:	f7fc fda1 	bl	800bb64 <HAL_RCC_GetPCLK2Freq>
 800f022:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f024:	e02f      	b.n	800f086 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f02a:	4618      	mov	r0, r3
 800f02c:	f7fd ff84 	bl	800cf38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f032:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f034:	e027      	b.n	800f086 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f036:	f107 0318 	add.w	r3, r7, #24
 800f03a:	4618      	mov	r0, r3
 800f03c:	f7fe f8d0 	bl	800d1e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f040:	69fb      	ldr	r3, [r7, #28]
 800f042:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f044:	e01f      	b.n	800f086 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f046:	4b69      	ldr	r3, [pc, #420]	; (800f1ec <UART_SetConfig+0xc2c>)
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	f003 0320 	and.w	r3, r3, #32
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d009      	beq.n	800f066 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f052:	4b66      	ldr	r3, [pc, #408]	; (800f1ec <UART_SetConfig+0xc2c>)
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	08db      	lsrs	r3, r3, #3
 800f058:	f003 0303 	and.w	r3, r3, #3
 800f05c:	4a64      	ldr	r2, [pc, #400]	; (800f1f0 <UART_SetConfig+0xc30>)
 800f05e:	fa22 f303 	lsr.w	r3, r2, r3
 800f062:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f064:	e00f      	b.n	800f086 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800f066:	4b62      	ldr	r3, [pc, #392]	; (800f1f0 <UART_SetConfig+0xc30>)
 800f068:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f06a:	e00c      	b.n	800f086 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f06c:	4b61      	ldr	r3, [pc, #388]	; (800f1f4 <UART_SetConfig+0xc34>)
 800f06e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f070:	e009      	b.n	800f086 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f072:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f076:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f078:	e005      	b.n	800f086 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800f07a:	2300      	movs	r3, #0
 800f07c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f07e:	2301      	movs	r3, #1
 800f080:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f084:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f088:	2b00      	cmp	r3, #0
 800f08a:	f000 80ea 	beq.w	800f262 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f08e:	697b      	ldr	r3, [r7, #20]
 800f090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f092:	4a55      	ldr	r2, [pc, #340]	; (800f1e8 <UART_SetConfig+0xc28>)
 800f094:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f098:	461a      	mov	r2, r3
 800f09a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f09c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f0a0:	005a      	lsls	r2, r3, #1
 800f0a2:	697b      	ldr	r3, [r7, #20]
 800f0a4:	685b      	ldr	r3, [r3, #4]
 800f0a6:	085b      	lsrs	r3, r3, #1
 800f0a8:	441a      	add	r2, r3
 800f0aa:	697b      	ldr	r3, [r7, #20]
 800f0ac:	685b      	ldr	r3, [r3, #4]
 800f0ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800f0b2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0b6:	2b0f      	cmp	r3, #15
 800f0b8:	d916      	bls.n	800f0e8 <UART_SetConfig+0xb28>
 800f0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f0c0:	d212      	bcs.n	800f0e8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0c4:	b29b      	uxth	r3, r3
 800f0c6:	f023 030f 	bic.w	r3, r3, #15
 800f0ca:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ce:	085b      	lsrs	r3, r3, #1
 800f0d0:	b29b      	uxth	r3, r3
 800f0d2:	f003 0307 	and.w	r3, r3, #7
 800f0d6:	b29a      	uxth	r2, r3
 800f0d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f0da:	4313      	orrs	r3, r2
 800f0dc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f0de:	697b      	ldr	r3, [r7, #20]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f0e4:	60da      	str	r2, [r3, #12]
 800f0e6:	e0bc      	b.n	800f262 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f0e8:	2301      	movs	r3, #1
 800f0ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f0ee:	e0b8      	b.n	800f262 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f0f0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f0f4:	2b20      	cmp	r3, #32
 800f0f6:	dc4b      	bgt.n	800f190 <UART_SetConfig+0xbd0>
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	f2c0 8087 	blt.w	800f20c <UART_SetConfig+0xc4c>
 800f0fe:	2b20      	cmp	r3, #32
 800f100:	f200 8084 	bhi.w	800f20c <UART_SetConfig+0xc4c>
 800f104:	a201      	add	r2, pc, #4	; (adr r2, 800f10c <UART_SetConfig+0xb4c>)
 800f106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f10a:	bf00      	nop
 800f10c:	0800f197 	.word	0x0800f197
 800f110:	0800f19f 	.word	0x0800f19f
 800f114:	0800f20d 	.word	0x0800f20d
 800f118:	0800f20d 	.word	0x0800f20d
 800f11c:	0800f1a7 	.word	0x0800f1a7
 800f120:	0800f20d 	.word	0x0800f20d
 800f124:	0800f20d 	.word	0x0800f20d
 800f128:	0800f20d 	.word	0x0800f20d
 800f12c:	0800f1b7 	.word	0x0800f1b7
 800f130:	0800f20d 	.word	0x0800f20d
 800f134:	0800f20d 	.word	0x0800f20d
 800f138:	0800f20d 	.word	0x0800f20d
 800f13c:	0800f20d 	.word	0x0800f20d
 800f140:	0800f20d 	.word	0x0800f20d
 800f144:	0800f20d 	.word	0x0800f20d
 800f148:	0800f20d 	.word	0x0800f20d
 800f14c:	0800f1c7 	.word	0x0800f1c7
 800f150:	0800f20d 	.word	0x0800f20d
 800f154:	0800f20d 	.word	0x0800f20d
 800f158:	0800f20d 	.word	0x0800f20d
 800f15c:	0800f20d 	.word	0x0800f20d
 800f160:	0800f20d 	.word	0x0800f20d
 800f164:	0800f20d 	.word	0x0800f20d
 800f168:	0800f20d 	.word	0x0800f20d
 800f16c:	0800f20d 	.word	0x0800f20d
 800f170:	0800f20d 	.word	0x0800f20d
 800f174:	0800f20d 	.word	0x0800f20d
 800f178:	0800f20d 	.word	0x0800f20d
 800f17c:	0800f20d 	.word	0x0800f20d
 800f180:	0800f20d 	.word	0x0800f20d
 800f184:	0800f20d 	.word	0x0800f20d
 800f188:	0800f20d 	.word	0x0800f20d
 800f18c:	0800f1ff 	.word	0x0800f1ff
 800f190:	2b40      	cmp	r3, #64	; 0x40
 800f192:	d037      	beq.n	800f204 <UART_SetConfig+0xc44>
 800f194:	e03a      	b.n	800f20c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f196:	f7fc fccf 	bl	800bb38 <HAL_RCC_GetPCLK1Freq>
 800f19a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f19c:	e03c      	b.n	800f218 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f19e:	f7fc fce1 	bl	800bb64 <HAL_RCC_GetPCLK2Freq>
 800f1a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f1a4:	e038      	b.n	800f218 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f1a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f7fd fec4 	bl	800cf38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1b4:	e030      	b.n	800f218 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f1b6:	f107 0318 	add.w	r3, r7, #24
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f7fe f810 	bl	800d1e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f1c0:	69fb      	ldr	r3, [r7, #28]
 800f1c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1c4:	e028      	b.n	800f218 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f1c6:	4b09      	ldr	r3, [pc, #36]	; (800f1ec <UART_SetConfig+0xc2c>)
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	f003 0320 	and.w	r3, r3, #32
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d012      	beq.n	800f1f8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f1d2:	4b06      	ldr	r3, [pc, #24]	; (800f1ec <UART_SetConfig+0xc2c>)
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	08db      	lsrs	r3, r3, #3
 800f1d8:	f003 0303 	and.w	r3, r3, #3
 800f1dc:	4a04      	ldr	r2, [pc, #16]	; (800f1f0 <UART_SetConfig+0xc30>)
 800f1de:	fa22 f303 	lsr.w	r3, r2, r3
 800f1e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f1e4:	e018      	b.n	800f218 <UART_SetConfig+0xc58>
 800f1e6:	bf00      	nop
 800f1e8:	08014cb0 	.word	0x08014cb0
 800f1ec:	58024400 	.word	0x58024400
 800f1f0:	03d09000 	.word	0x03d09000
 800f1f4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800f1f8:	4b24      	ldr	r3, [pc, #144]	; (800f28c <UART_SetConfig+0xccc>)
 800f1fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1fc:	e00c      	b.n	800f218 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f1fe:	4b24      	ldr	r3, [pc, #144]	; (800f290 <UART_SetConfig+0xcd0>)
 800f200:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f202:	e009      	b.n	800f218 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f204:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f208:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f20a:	e005      	b.n	800f218 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800f20c:	2300      	movs	r3, #0
 800f20e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f210:	2301      	movs	r3, #1
 800f212:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f216:	bf00      	nop
    }

    if (pclk != 0U)
 800f218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d021      	beq.n	800f262 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f21e:	697b      	ldr	r3, [r7, #20]
 800f220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f222:	4a1c      	ldr	r2, [pc, #112]	; (800f294 <UART_SetConfig+0xcd4>)
 800f224:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f228:	461a      	mov	r2, r3
 800f22a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f22c:	fbb3 f2f2 	udiv	r2, r3, r2
 800f230:	697b      	ldr	r3, [r7, #20]
 800f232:	685b      	ldr	r3, [r3, #4]
 800f234:	085b      	lsrs	r3, r3, #1
 800f236:	441a      	add	r2, r3
 800f238:	697b      	ldr	r3, [r7, #20]
 800f23a:	685b      	ldr	r3, [r3, #4]
 800f23c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f240:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f244:	2b0f      	cmp	r3, #15
 800f246:	d909      	bls.n	800f25c <UART_SetConfig+0xc9c>
 800f248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f24a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f24e:	d205      	bcs.n	800f25c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f252:	b29a      	uxth	r2, r3
 800f254:	697b      	ldr	r3, [r7, #20]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	60da      	str	r2, [r3, #12]
 800f25a:	e002      	b.n	800f262 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f25c:	2301      	movs	r3, #1
 800f25e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f262:	697b      	ldr	r3, [r7, #20]
 800f264:	2201      	movs	r2, #1
 800f266:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f26a:	697b      	ldr	r3, [r7, #20]
 800f26c:	2201      	movs	r2, #1
 800f26e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f272:	697b      	ldr	r3, [r7, #20]
 800f274:	2200      	movs	r2, #0
 800f276:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f278:	697b      	ldr	r3, [r7, #20]
 800f27a:	2200      	movs	r2, #0
 800f27c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f27e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f282:	4618      	mov	r0, r3
 800f284:	3748      	adds	r7, #72	; 0x48
 800f286:	46bd      	mov	sp, r7
 800f288:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f28c:	03d09000 	.word	0x03d09000
 800f290:	003d0900 	.word	0x003d0900
 800f294:	08014cb0 	.word	0x08014cb0

0800f298 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f298:	b480      	push	{r7}
 800f29a:	b083      	sub	sp, #12
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2a4:	f003 0301 	and.w	r3, r3, #1
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d00a      	beq.n	800f2c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	685b      	ldr	r3, [r3, #4]
 800f2b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	430a      	orrs	r2, r1
 800f2c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2c6:	f003 0302 	and.w	r3, r3, #2
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d00a      	beq.n	800f2e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	685b      	ldr	r3, [r3, #4]
 800f2d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	430a      	orrs	r2, r1
 800f2e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2e8:	f003 0304 	and.w	r3, r3, #4
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d00a      	beq.n	800f306 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	685b      	ldr	r3, [r3, #4]
 800f2f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	430a      	orrs	r2, r1
 800f304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f30a:	f003 0308 	and.w	r3, r3, #8
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d00a      	beq.n	800f328 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	685b      	ldr	r3, [r3, #4]
 800f318:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	430a      	orrs	r2, r1
 800f326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f32c:	f003 0310 	and.w	r3, r3, #16
 800f330:	2b00      	cmp	r3, #0
 800f332:	d00a      	beq.n	800f34a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	689b      	ldr	r3, [r3, #8]
 800f33a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	430a      	orrs	r2, r1
 800f348:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f34e:	f003 0320 	and.w	r3, r3, #32
 800f352:	2b00      	cmp	r3, #0
 800f354:	d00a      	beq.n	800f36c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	689b      	ldr	r3, [r3, #8]
 800f35c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	430a      	orrs	r2, r1
 800f36a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f374:	2b00      	cmp	r3, #0
 800f376:	d01a      	beq.n	800f3ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	685b      	ldr	r3, [r3, #4]
 800f37e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	430a      	orrs	r2, r1
 800f38c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f392:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f396:	d10a      	bne.n	800f3ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	685b      	ldr	r3, [r3, #4]
 800f39e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	430a      	orrs	r2, r1
 800f3ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d00a      	beq.n	800f3d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	685b      	ldr	r3, [r3, #4]
 800f3c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	430a      	orrs	r2, r1
 800f3ce:	605a      	str	r2, [r3, #4]
  }
}
 800f3d0:	bf00      	nop
 800f3d2:	370c      	adds	r7, #12
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3da:	4770      	bx	lr

0800f3dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b098      	sub	sp, #96	; 0x60
 800f3e0:	af02      	add	r7, sp, #8
 800f3e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f3ec:	f7f5 fa0e 	bl	800480c <HAL_GetTick>
 800f3f0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	f003 0308 	and.w	r3, r3, #8
 800f3fc:	2b08      	cmp	r3, #8
 800f3fe:	d12f      	bne.n	800f460 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f400:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f404:	9300      	str	r3, [sp, #0]
 800f406:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f408:	2200      	movs	r2, #0
 800f40a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f40e:	6878      	ldr	r0, [r7, #4]
 800f410:	f000 f88e 	bl	800f530 <UART_WaitOnFlagUntilTimeout>
 800f414:	4603      	mov	r3, r0
 800f416:	2b00      	cmp	r3, #0
 800f418:	d022      	beq.n	800f460 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f422:	e853 3f00 	ldrex	r3, [r3]
 800f426:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f42a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f42e:	653b      	str	r3, [r7, #80]	; 0x50
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	461a      	mov	r2, r3
 800f436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f438:	647b      	str	r3, [r7, #68]	; 0x44
 800f43a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f43c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f43e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f440:	e841 2300 	strex	r3, r2, [r1]
 800f444:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d1e6      	bne.n	800f41a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	2220      	movs	r2, #32
 800f450:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	2200      	movs	r2, #0
 800f458:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f45c:	2303      	movs	r3, #3
 800f45e:	e063      	b.n	800f528 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	f003 0304 	and.w	r3, r3, #4
 800f46a:	2b04      	cmp	r3, #4
 800f46c:	d149      	bne.n	800f502 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f46e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f472:	9300      	str	r3, [sp, #0]
 800f474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f476:	2200      	movs	r2, #0
 800f478:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f47c:	6878      	ldr	r0, [r7, #4]
 800f47e:	f000 f857 	bl	800f530 <UART_WaitOnFlagUntilTimeout>
 800f482:	4603      	mov	r3, r0
 800f484:	2b00      	cmp	r3, #0
 800f486:	d03c      	beq.n	800f502 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f490:	e853 3f00 	ldrex	r3, [r3]
 800f494:	623b      	str	r3, [r7, #32]
   return(result);
 800f496:	6a3b      	ldr	r3, [r7, #32]
 800f498:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f49c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	461a      	mov	r2, r3
 800f4a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4a6:	633b      	str	r3, [r7, #48]	; 0x30
 800f4a8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f4ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4ae:	e841 2300 	strex	r3, r2, [r1]
 800f4b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d1e6      	bne.n	800f488 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	3308      	adds	r3, #8
 800f4c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4c2:	693b      	ldr	r3, [r7, #16]
 800f4c4:	e853 3f00 	ldrex	r3, [r3]
 800f4c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	f023 0301 	bic.w	r3, r3, #1
 800f4d0:	64bb      	str	r3, [r7, #72]	; 0x48
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	3308      	adds	r3, #8
 800f4d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f4da:	61fa      	str	r2, [r7, #28]
 800f4dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4de:	69b9      	ldr	r1, [r7, #24]
 800f4e0:	69fa      	ldr	r2, [r7, #28]
 800f4e2:	e841 2300 	strex	r3, r2, [r1]
 800f4e6:	617b      	str	r3, [r7, #20]
   return(result);
 800f4e8:	697b      	ldr	r3, [r7, #20]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d1e5      	bne.n	800f4ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	2220      	movs	r2, #32
 800f4f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f4fe:	2303      	movs	r3, #3
 800f500:	e012      	b.n	800f528 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	2220      	movs	r2, #32
 800f506:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	2220      	movs	r2, #32
 800f50e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	2200      	movs	r2, #0
 800f516:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	2200      	movs	r2, #0
 800f51c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	2200      	movs	r2, #0
 800f522:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f526:	2300      	movs	r3, #0
}
 800f528:	4618      	mov	r0, r3
 800f52a:	3758      	adds	r7, #88	; 0x58
 800f52c:	46bd      	mov	sp, r7
 800f52e:	bd80      	pop	{r7, pc}

0800f530 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b084      	sub	sp, #16
 800f534:	af00      	add	r7, sp, #0
 800f536:	60f8      	str	r0, [r7, #12]
 800f538:	60b9      	str	r1, [r7, #8]
 800f53a:	603b      	str	r3, [r7, #0]
 800f53c:	4613      	mov	r3, r2
 800f53e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f540:	e049      	b.n	800f5d6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f542:	69bb      	ldr	r3, [r7, #24]
 800f544:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f548:	d045      	beq.n	800f5d6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f54a:	f7f5 f95f 	bl	800480c <HAL_GetTick>
 800f54e:	4602      	mov	r2, r0
 800f550:	683b      	ldr	r3, [r7, #0]
 800f552:	1ad3      	subs	r3, r2, r3
 800f554:	69ba      	ldr	r2, [r7, #24]
 800f556:	429a      	cmp	r2, r3
 800f558:	d302      	bcc.n	800f560 <UART_WaitOnFlagUntilTimeout+0x30>
 800f55a:	69bb      	ldr	r3, [r7, #24]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d101      	bne.n	800f564 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f560:	2303      	movs	r3, #3
 800f562:	e048      	b.n	800f5f6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	f003 0304 	and.w	r3, r3, #4
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d031      	beq.n	800f5d6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	69db      	ldr	r3, [r3, #28]
 800f578:	f003 0308 	and.w	r3, r3, #8
 800f57c:	2b08      	cmp	r3, #8
 800f57e:	d110      	bne.n	800f5a2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	2208      	movs	r2, #8
 800f586:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800f588:	68f8      	ldr	r0, [r7, #12]
 800f58a:	f000 f839 	bl	800f600 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	2208      	movs	r2, #8
 800f592:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	2200      	movs	r2, #0
 800f59a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800f59e:	2301      	movs	r3, #1
 800f5a0:	e029      	b.n	800f5f6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	69db      	ldr	r3, [r3, #28]
 800f5a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f5ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f5b0:	d111      	bne.n	800f5d6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f5ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f5bc:	68f8      	ldr	r0, [r7, #12]
 800f5be:	f000 f81f 	bl	800f600 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	2220      	movs	r2, #32
 800f5c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f5d2:	2303      	movs	r3, #3
 800f5d4:	e00f      	b.n	800f5f6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	69da      	ldr	r2, [r3, #28]
 800f5dc:	68bb      	ldr	r3, [r7, #8]
 800f5de:	4013      	ands	r3, r2
 800f5e0:	68ba      	ldr	r2, [r7, #8]
 800f5e2:	429a      	cmp	r2, r3
 800f5e4:	bf0c      	ite	eq
 800f5e6:	2301      	moveq	r3, #1
 800f5e8:	2300      	movne	r3, #0
 800f5ea:	b2db      	uxtb	r3, r3
 800f5ec:	461a      	mov	r2, r3
 800f5ee:	79fb      	ldrb	r3, [r7, #7]
 800f5f0:	429a      	cmp	r2, r3
 800f5f2:	d0a6      	beq.n	800f542 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f5f4:	2300      	movs	r3, #0
}
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	3710      	adds	r7, #16
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bd80      	pop	{r7, pc}
	...

0800f600 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f600:	b480      	push	{r7}
 800f602:	b095      	sub	sp, #84	; 0x54
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f60e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f610:	e853 3f00 	ldrex	r3, [r3]
 800f614:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f618:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f61c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	461a      	mov	r2, r3
 800f624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f626:	643b      	str	r3, [r7, #64]	; 0x40
 800f628:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f62a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f62c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f62e:	e841 2300 	strex	r3, r2, [r1]
 800f632:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f636:	2b00      	cmp	r3, #0
 800f638:	d1e6      	bne.n	800f608 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	3308      	adds	r3, #8
 800f640:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f642:	6a3b      	ldr	r3, [r7, #32]
 800f644:	e853 3f00 	ldrex	r3, [r3]
 800f648:	61fb      	str	r3, [r7, #28]
   return(result);
 800f64a:	69fa      	ldr	r2, [r7, #28]
 800f64c:	4b1e      	ldr	r3, [pc, #120]	; (800f6c8 <UART_EndRxTransfer+0xc8>)
 800f64e:	4013      	ands	r3, r2
 800f650:	64bb      	str	r3, [r7, #72]	; 0x48
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	3308      	adds	r3, #8
 800f658:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f65a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f65c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f65e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f662:	e841 2300 	strex	r3, r2, [r1]
 800f666:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d1e5      	bne.n	800f63a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f672:	2b01      	cmp	r3, #1
 800f674:	d118      	bne.n	800f6a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	e853 3f00 	ldrex	r3, [r3]
 800f682:	60bb      	str	r3, [r7, #8]
   return(result);
 800f684:	68bb      	ldr	r3, [r7, #8]
 800f686:	f023 0310 	bic.w	r3, r3, #16
 800f68a:	647b      	str	r3, [r7, #68]	; 0x44
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	461a      	mov	r2, r3
 800f692:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f694:	61bb      	str	r3, [r7, #24]
 800f696:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f698:	6979      	ldr	r1, [r7, #20]
 800f69a:	69ba      	ldr	r2, [r7, #24]
 800f69c:	e841 2300 	strex	r3, r2, [r1]
 800f6a0:	613b      	str	r3, [r7, #16]
   return(result);
 800f6a2:	693b      	ldr	r3, [r7, #16]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d1e6      	bne.n	800f676 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	2220      	movs	r2, #32
 800f6ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	2200      	movs	r2, #0
 800f6ba:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f6bc:	bf00      	nop
 800f6be:	3754      	adds	r7, #84	; 0x54
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c6:	4770      	bx	lr
 800f6c8:	effffffe 	.word	0xeffffffe

0800f6cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b084      	sub	sp, #16
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	2200      	movs	r2, #0
 800f6de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f6ea:	68f8      	ldr	r0, [r7, #12]
 800f6ec:	f7fe ff52 	bl	800e594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f6f0:	bf00      	nop
 800f6f2:	3710      	adds	r7, #16
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	bd80      	pop	{r7, pc}

0800f6f8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b088      	sub	sp, #32
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	e853 3f00 	ldrex	r3, [r3]
 800f70c:	60bb      	str	r3, [r7, #8]
   return(result);
 800f70e:	68bb      	ldr	r3, [r7, #8]
 800f710:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f714:	61fb      	str	r3, [r7, #28]
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	461a      	mov	r2, r3
 800f71c:	69fb      	ldr	r3, [r7, #28]
 800f71e:	61bb      	str	r3, [r7, #24]
 800f720:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f722:	6979      	ldr	r1, [r7, #20]
 800f724:	69ba      	ldr	r2, [r7, #24]
 800f726:	e841 2300 	strex	r3, r2, [r1]
 800f72a:	613b      	str	r3, [r7, #16]
   return(result);
 800f72c:	693b      	ldr	r3, [r7, #16]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d1e6      	bne.n	800f700 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	2220      	movs	r2, #32
 800f736:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	2200      	movs	r2, #0
 800f73e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f740:	6878      	ldr	r0, [r7, #4]
 800f742:	f7fe ff1d 	bl	800e580 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f746:	bf00      	nop
 800f748:	3720      	adds	r7, #32
 800f74a:	46bd      	mov	sp, r7
 800f74c:	bd80      	pop	{r7, pc}

0800f74e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f74e:	b480      	push	{r7}
 800f750:	b083      	sub	sp, #12
 800f752:	af00      	add	r7, sp, #0
 800f754:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f756:	bf00      	nop
 800f758:	370c      	adds	r7, #12
 800f75a:	46bd      	mov	sp, r7
 800f75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f760:	4770      	bx	lr

0800f762 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f762:	b480      	push	{r7}
 800f764:	b083      	sub	sp, #12
 800f766:	af00      	add	r7, sp, #0
 800f768:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f76a:	bf00      	nop
 800f76c:	370c      	adds	r7, #12
 800f76e:	46bd      	mov	sp, r7
 800f770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f774:	4770      	bx	lr

0800f776 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f776:	b480      	push	{r7}
 800f778:	b083      	sub	sp, #12
 800f77a:	af00      	add	r7, sp, #0
 800f77c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f77e:	bf00      	nop
 800f780:	370c      	adds	r7, #12
 800f782:	46bd      	mov	sp, r7
 800f784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f788:	4770      	bx	lr

0800f78a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f78a:	b480      	push	{r7}
 800f78c:	b085      	sub	sp, #20
 800f78e:	af00      	add	r7, sp, #0
 800f790:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f798:	2b01      	cmp	r3, #1
 800f79a:	d101      	bne.n	800f7a0 <HAL_UARTEx_DisableFifoMode+0x16>
 800f79c:	2302      	movs	r3, #2
 800f79e:	e027      	b.n	800f7f0 <HAL_UARTEx_DisableFifoMode+0x66>
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	2201      	movs	r2, #1
 800f7a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	2224      	movs	r2, #36	; 0x24
 800f7ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	681a      	ldr	r2, [r3, #0]
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	f022 0201 	bic.w	r2, r2, #1
 800f7c6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f7ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	2200      	movs	r2, #0
 800f7d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	68fa      	ldr	r2, [r7, #12]
 800f7dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	2220      	movs	r2, #32
 800f7e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	2200      	movs	r2, #0
 800f7ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f7ee:	2300      	movs	r3, #0
}
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	3714      	adds	r7, #20
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fa:	4770      	bx	lr

0800f7fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b084      	sub	sp, #16
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
 800f804:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f80c:	2b01      	cmp	r3, #1
 800f80e:	d101      	bne.n	800f814 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f810:	2302      	movs	r3, #2
 800f812:	e02d      	b.n	800f870 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	2201      	movs	r2, #1
 800f818:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	2224      	movs	r2, #36	; 0x24
 800f820:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	681a      	ldr	r2, [r3, #0]
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	f022 0201 	bic.w	r2, r2, #1
 800f83a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	689b      	ldr	r3, [r3, #8]
 800f842:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	683a      	ldr	r2, [r7, #0]
 800f84c:	430a      	orrs	r2, r1
 800f84e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f850:	6878      	ldr	r0, [r7, #4]
 800f852:	f000 f84f 	bl	800f8f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	68fa      	ldr	r2, [r7, #12]
 800f85c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	2220      	movs	r2, #32
 800f862:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	2200      	movs	r2, #0
 800f86a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f86e:	2300      	movs	r3, #0
}
 800f870:	4618      	mov	r0, r3
 800f872:	3710      	adds	r7, #16
 800f874:	46bd      	mov	sp, r7
 800f876:	bd80      	pop	{r7, pc}

0800f878 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f878:	b580      	push	{r7, lr}
 800f87a:	b084      	sub	sp, #16
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
 800f880:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f888:	2b01      	cmp	r3, #1
 800f88a:	d101      	bne.n	800f890 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f88c:	2302      	movs	r3, #2
 800f88e:	e02d      	b.n	800f8ec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	2201      	movs	r2, #1
 800f894:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	2224      	movs	r2, #36	; 0x24
 800f89c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	681a      	ldr	r2, [r3, #0]
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	f022 0201 	bic.w	r2, r2, #1
 800f8b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	689b      	ldr	r3, [r3, #8]
 800f8be:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	683a      	ldr	r2, [r7, #0]
 800f8c8:	430a      	orrs	r2, r1
 800f8ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f8cc:	6878      	ldr	r0, [r7, #4]
 800f8ce:	f000 f811 	bl	800f8f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	68fa      	ldr	r2, [r7, #12]
 800f8d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	2220      	movs	r2, #32
 800f8de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	2200      	movs	r2, #0
 800f8e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f8ea:	2300      	movs	r3, #0
}
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	3710      	adds	r7, #16
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	bd80      	pop	{r7, pc}

0800f8f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f8f4:	b480      	push	{r7}
 800f8f6:	b085      	sub	sp, #20
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f900:	2b00      	cmp	r3, #0
 800f902:	d108      	bne.n	800f916 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	2201      	movs	r2, #1
 800f908:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	2201      	movs	r2, #1
 800f910:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f914:	e031      	b.n	800f97a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f916:	2310      	movs	r3, #16
 800f918:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f91a:	2310      	movs	r3, #16
 800f91c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	689b      	ldr	r3, [r3, #8]
 800f924:	0e5b      	lsrs	r3, r3, #25
 800f926:	b2db      	uxtb	r3, r3
 800f928:	f003 0307 	and.w	r3, r3, #7
 800f92c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	689b      	ldr	r3, [r3, #8]
 800f934:	0f5b      	lsrs	r3, r3, #29
 800f936:	b2db      	uxtb	r3, r3
 800f938:	f003 0307 	and.w	r3, r3, #7
 800f93c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f93e:	7bbb      	ldrb	r3, [r7, #14]
 800f940:	7b3a      	ldrb	r2, [r7, #12]
 800f942:	4911      	ldr	r1, [pc, #68]	; (800f988 <UARTEx_SetNbDataToProcess+0x94>)
 800f944:	5c8a      	ldrb	r2, [r1, r2]
 800f946:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f94a:	7b3a      	ldrb	r2, [r7, #12]
 800f94c:	490f      	ldr	r1, [pc, #60]	; (800f98c <UARTEx_SetNbDataToProcess+0x98>)
 800f94e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f950:	fb93 f3f2 	sdiv	r3, r3, r2
 800f954:	b29a      	uxth	r2, r3
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f95c:	7bfb      	ldrb	r3, [r7, #15]
 800f95e:	7b7a      	ldrb	r2, [r7, #13]
 800f960:	4909      	ldr	r1, [pc, #36]	; (800f988 <UARTEx_SetNbDataToProcess+0x94>)
 800f962:	5c8a      	ldrb	r2, [r1, r2]
 800f964:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f968:	7b7a      	ldrb	r2, [r7, #13]
 800f96a:	4908      	ldr	r1, [pc, #32]	; (800f98c <UARTEx_SetNbDataToProcess+0x98>)
 800f96c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f96e:	fb93 f3f2 	sdiv	r3, r3, r2
 800f972:	b29a      	uxth	r2, r3
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f97a:	bf00      	nop
 800f97c:	3714      	adds	r7, #20
 800f97e:	46bd      	mov	sp, r7
 800f980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f984:	4770      	bx	lr
 800f986:	bf00      	nop
 800f988:	08014cc8 	.word	0x08014cc8
 800f98c:	08014cd0 	.word	0x08014cd0

0800f990 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800f990:	b480      	push	{r7}
 800f992:	b083      	sub	sp, #12
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
 800f998:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800f99a:	683b      	ldr	r3, [r7, #0]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d121      	bne.n	800f9e6 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	681a      	ldr	r2, [r3, #0]
 800f9a6:	4b27      	ldr	r3, [pc, #156]	; (800fa44 <FMC_SDRAM_Init+0xb4>)
 800f9a8:	4013      	ands	r3, r2
 800f9aa:	683a      	ldr	r2, [r7, #0]
 800f9ac:	6851      	ldr	r1, [r2, #4]
 800f9ae:	683a      	ldr	r2, [r7, #0]
 800f9b0:	6892      	ldr	r2, [r2, #8]
 800f9b2:	4311      	orrs	r1, r2
 800f9b4:	683a      	ldr	r2, [r7, #0]
 800f9b6:	68d2      	ldr	r2, [r2, #12]
 800f9b8:	4311      	orrs	r1, r2
 800f9ba:	683a      	ldr	r2, [r7, #0]
 800f9bc:	6912      	ldr	r2, [r2, #16]
 800f9be:	4311      	orrs	r1, r2
 800f9c0:	683a      	ldr	r2, [r7, #0]
 800f9c2:	6952      	ldr	r2, [r2, #20]
 800f9c4:	4311      	orrs	r1, r2
 800f9c6:	683a      	ldr	r2, [r7, #0]
 800f9c8:	6992      	ldr	r2, [r2, #24]
 800f9ca:	4311      	orrs	r1, r2
 800f9cc:	683a      	ldr	r2, [r7, #0]
 800f9ce:	69d2      	ldr	r2, [r2, #28]
 800f9d0:	4311      	orrs	r1, r2
 800f9d2:	683a      	ldr	r2, [r7, #0]
 800f9d4:	6a12      	ldr	r2, [r2, #32]
 800f9d6:	4311      	orrs	r1, r2
 800f9d8:	683a      	ldr	r2, [r7, #0]
 800f9da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800f9dc:	430a      	orrs	r2, r1
 800f9de:	431a      	orrs	r2, r3
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	601a      	str	r2, [r3, #0]
 800f9e4:	e026      	b.n	800fa34 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800f9ee:	683b      	ldr	r3, [r7, #0]
 800f9f0:	69d9      	ldr	r1, [r3, #28]
 800f9f2:	683b      	ldr	r3, [r7, #0]
 800f9f4:	6a1b      	ldr	r3, [r3, #32]
 800f9f6:	4319      	orrs	r1, r3
 800f9f8:	683b      	ldr	r3, [r7, #0]
 800f9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9fc:	430b      	orrs	r3, r1
 800f9fe:	431a      	orrs	r2, r3
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	685a      	ldr	r2, [r3, #4]
 800fa08:	4b0e      	ldr	r3, [pc, #56]	; (800fa44 <FMC_SDRAM_Init+0xb4>)
 800fa0a:	4013      	ands	r3, r2
 800fa0c:	683a      	ldr	r2, [r7, #0]
 800fa0e:	6851      	ldr	r1, [r2, #4]
 800fa10:	683a      	ldr	r2, [r7, #0]
 800fa12:	6892      	ldr	r2, [r2, #8]
 800fa14:	4311      	orrs	r1, r2
 800fa16:	683a      	ldr	r2, [r7, #0]
 800fa18:	68d2      	ldr	r2, [r2, #12]
 800fa1a:	4311      	orrs	r1, r2
 800fa1c:	683a      	ldr	r2, [r7, #0]
 800fa1e:	6912      	ldr	r2, [r2, #16]
 800fa20:	4311      	orrs	r1, r2
 800fa22:	683a      	ldr	r2, [r7, #0]
 800fa24:	6952      	ldr	r2, [r2, #20]
 800fa26:	4311      	orrs	r1, r2
 800fa28:	683a      	ldr	r2, [r7, #0]
 800fa2a:	6992      	ldr	r2, [r2, #24]
 800fa2c:	430a      	orrs	r2, r1
 800fa2e:	431a      	orrs	r2, r3
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800fa34:	2300      	movs	r3, #0
}
 800fa36:	4618      	mov	r0, r3
 800fa38:	370c      	adds	r7, #12
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa40:	4770      	bx	lr
 800fa42:	bf00      	nop
 800fa44:	ffff8000 	.word	0xffff8000

0800fa48 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800fa48:	b480      	push	{r7}
 800fa4a:	b085      	sub	sp, #20
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	60f8      	str	r0, [r7, #12]
 800fa50:	60b9      	str	r1, [r7, #8]
 800fa52:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d128      	bne.n	800faac <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	689b      	ldr	r3, [r3, #8]
 800fa5e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800fa62:	68bb      	ldr	r3, [r7, #8]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	1e59      	subs	r1, r3, #1
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	685b      	ldr	r3, [r3, #4]
 800fa6c:	3b01      	subs	r3, #1
 800fa6e:	011b      	lsls	r3, r3, #4
 800fa70:	4319      	orrs	r1, r3
 800fa72:	68bb      	ldr	r3, [r7, #8]
 800fa74:	689b      	ldr	r3, [r3, #8]
 800fa76:	3b01      	subs	r3, #1
 800fa78:	021b      	lsls	r3, r3, #8
 800fa7a:	4319      	orrs	r1, r3
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	68db      	ldr	r3, [r3, #12]
 800fa80:	3b01      	subs	r3, #1
 800fa82:	031b      	lsls	r3, r3, #12
 800fa84:	4319      	orrs	r1, r3
 800fa86:	68bb      	ldr	r3, [r7, #8]
 800fa88:	691b      	ldr	r3, [r3, #16]
 800fa8a:	3b01      	subs	r3, #1
 800fa8c:	041b      	lsls	r3, r3, #16
 800fa8e:	4319      	orrs	r1, r3
 800fa90:	68bb      	ldr	r3, [r7, #8]
 800fa92:	695b      	ldr	r3, [r3, #20]
 800fa94:	3b01      	subs	r3, #1
 800fa96:	051b      	lsls	r3, r3, #20
 800fa98:	4319      	orrs	r1, r3
 800fa9a:	68bb      	ldr	r3, [r7, #8]
 800fa9c:	699b      	ldr	r3, [r3, #24]
 800fa9e:	3b01      	subs	r3, #1
 800faa0:	061b      	lsls	r3, r3, #24
 800faa2:	430b      	orrs	r3, r1
 800faa4:	431a      	orrs	r2, r3
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	609a      	str	r2, [r3, #8]
 800faaa:	e02d      	b.n	800fb08 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	689a      	ldr	r2, [r3, #8]
 800fab0:	4b19      	ldr	r3, [pc, #100]	; (800fb18 <FMC_SDRAM_Timing_Init+0xd0>)
 800fab2:	4013      	ands	r3, r2
 800fab4:	68ba      	ldr	r2, [r7, #8]
 800fab6:	68d2      	ldr	r2, [r2, #12]
 800fab8:	3a01      	subs	r2, #1
 800faba:	0311      	lsls	r1, r2, #12
 800fabc:	68ba      	ldr	r2, [r7, #8]
 800fabe:	6952      	ldr	r2, [r2, #20]
 800fac0:	3a01      	subs	r2, #1
 800fac2:	0512      	lsls	r2, r2, #20
 800fac4:	430a      	orrs	r2, r1
 800fac6:	431a      	orrs	r2, r3
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	68db      	ldr	r3, [r3, #12]
 800fad0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800fad4:	68bb      	ldr	r3, [r7, #8]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	1e59      	subs	r1, r3, #1
 800fada:	68bb      	ldr	r3, [r7, #8]
 800fadc:	685b      	ldr	r3, [r3, #4]
 800fade:	3b01      	subs	r3, #1
 800fae0:	011b      	lsls	r3, r3, #4
 800fae2:	4319      	orrs	r1, r3
 800fae4:	68bb      	ldr	r3, [r7, #8]
 800fae6:	689b      	ldr	r3, [r3, #8]
 800fae8:	3b01      	subs	r3, #1
 800faea:	021b      	lsls	r3, r3, #8
 800faec:	4319      	orrs	r1, r3
 800faee:	68bb      	ldr	r3, [r7, #8]
 800faf0:	691b      	ldr	r3, [r3, #16]
 800faf2:	3b01      	subs	r3, #1
 800faf4:	041b      	lsls	r3, r3, #16
 800faf6:	4319      	orrs	r1, r3
 800faf8:	68bb      	ldr	r3, [r7, #8]
 800fafa:	699b      	ldr	r3, [r3, #24]
 800fafc:	3b01      	subs	r3, #1
 800fafe:	061b      	lsls	r3, r3, #24
 800fb00:	430b      	orrs	r3, r1
 800fb02:	431a      	orrs	r2, r3
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800fb08:	2300      	movs	r3, #0
}
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	3714      	adds	r7, #20
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb14:	4770      	bx	lr
 800fb16:	bf00      	nop
 800fb18:	ff0f0fff 	.word	0xff0f0fff

0800fb1c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800fb1c:	b480      	push	{r7}
 800fb1e:	b085      	sub	sp, #20
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	60f8      	str	r0, [r7, #12]
 800fb24:	60b9      	str	r1, [r7, #8]
 800fb26:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	691a      	ldr	r2, [r3, #16]
 800fb2c:	4b0c      	ldr	r3, [pc, #48]	; (800fb60 <FMC_SDRAM_SendCommand+0x44>)
 800fb2e:	4013      	ands	r3, r2
 800fb30:	68ba      	ldr	r2, [r7, #8]
 800fb32:	6811      	ldr	r1, [r2, #0]
 800fb34:	68ba      	ldr	r2, [r7, #8]
 800fb36:	6852      	ldr	r2, [r2, #4]
 800fb38:	4311      	orrs	r1, r2
 800fb3a:	68ba      	ldr	r2, [r7, #8]
 800fb3c:	6892      	ldr	r2, [r2, #8]
 800fb3e:	3a01      	subs	r2, #1
 800fb40:	0152      	lsls	r2, r2, #5
 800fb42:	4311      	orrs	r1, r2
 800fb44:	68ba      	ldr	r2, [r7, #8]
 800fb46:	68d2      	ldr	r2, [r2, #12]
 800fb48:	0252      	lsls	r2, r2, #9
 800fb4a:	430a      	orrs	r2, r1
 800fb4c:	431a      	orrs	r2, r3
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800fb52:	2300      	movs	r3, #0
}
 800fb54:	4618      	mov	r0, r3
 800fb56:	3714      	adds	r7, #20
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5e:	4770      	bx	lr
 800fb60:	ffc00000 	.word	0xffc00000

0800fb64 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800fb64:	b480      	push	{r7}
 800fb66:	b083      	sub	sp, #12
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
 800fb6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	695a      	ldr	r2, [r3, #20]
 800fb72:	4b07      	ldr	r3, [pc, #28]	; (800fb90 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800fb74:	4013      	ands	r3, r2
 800fb76:	683a      	ldr	r2, [r7, #0]
 800fb78:	0052      	lsls	r2, r2, #1
 800fb7a:	431a      	orrs	r2, r3
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800fb80:	2300      	movs	r3, #0
}
 800fb82:	4618      	mov	r0, r3
 800fb84:	370c      	adds	r7, #12
 800fb86:	46bd      	mov	sp, r7
 800fb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8c:	4770      	bx	lr
 800fb8e:	bf00      	nop
 800fb90:	ffffc001 	.word	0xffffc001

0800fb94 <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b082      	sub	sp, #8
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]
 800fb9c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 800fb9e:	683b      	ldr	r3, [r7, #0]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d009      	beq.n	800fbb8 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 800fba4:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800fba6:	461a      	mov	r2, r3
        err.type, err.code);
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800fbae:	6839      	ldr	r1, [r7, #0]
 800fbb0:	4806      	ldr	r0, [pc, #24]	; (800fbcc <ai_log_err+0x38>)
 800fbb2:	f003 fc5d 	bl	8013470 <iprintf>
 800fbb6:	e008      	b.n	800fbca <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 800fbb8:	793b      	ldrb	r3, [r7, #4]
 800fbba:	4619      	mov	r1, r3
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800fbc2:	461a      	mov	r2, r3
 800fbc4:	4802      	ldr	r0, [pc, #8]	; (800fbd0 <ai_log_err+0x3c>)
 800fbc6:	f003 fc53 	bl	8013470 <iprintf>

  do {} while (1);
 800fbca:	e7fe      	b.n	800fbca <ai_log_err+0x36>
 800fbcc:	08014608 	.word	0x08014608
 800fbd0:	0801463c 	.word	0x0801463c

0800fbd4 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	b086      	sub	sp, #24
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_face_detection_create_and_init(&face_detection, act_addr, NULL);
 800fbdc:	2200      	movs	r2, #0
 800fbde:	6879      	ldr	r1, [r7, #4]
 800fbe0:	4828      	ldr	r0, [pc, #160]	; (800fc84 <ai_boostrap+0xb0>)
 800fbe2:	f000 fd97 	bl	8010714 <ai_face_detection_create_and_init>
 800fbe6:	4603      	mov	r3, r0
 800fbe8:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 800fbea:	7b3b      	ldrb	r3, [r7, #12]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d006      	beq.n	800fbfe <ai_boostrap+0x2a>
    ai_log_err(err, "ai_face_detection_create_and_init");
 800fbf0:	4925      	ldr	r1, [pc, #148]	; (800fc88 <ai_boostrap+0xb4>)
 800fbf2:	68f8      	ldr	r0, [r7, #12]
 800fbf4:	f7ff ffce 	bl	800fb94 <ai_log_err>
    return -1;
 800fbf8:	f04f 33ff 	mov.w	r3, #4294967295
 800fbfc:	e03e      	b.n	800fc7c <ai_boostrap+0xa8>
  }

  ai_input = ai_face_detection_inputs_get(face_detection, NULL);
 800fbfe:	4b21      	ldr	r3, [pc, #132]	; (800fc84 <ai_boostrap+0xb0>)
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	2100      	movs	r1, #0
 800fc04:	4618      	mov	r0, r3
 800fc06:	f000 fdf9 	bl	80107fc <ai_face_detection_inputs_get>
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	4a1f      	ldr	r2, [pc, #124]	; (800fc8c <ai_boostrap+0xb8>)
 800fc0e:	6013      	str	r3, [r2, #0]
  ai_output = ai_face_detection_outputs_get(face_detection, NULL);
 800fc10:	4b1c      	ldr	r3, [pc, #112]	; (800fc84 <ai_boostrap+0xb0>)
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	2100      	movs	r1, #0
 800fc16:	4618      	mov	r0, r3
 800fc18:	f000 fe0a 	bl	8010830 <ai_face_detection_outputs_get>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	4a1c      	ldr	r2, [pc, #112]	; (800fc90 <ai_boostrap+0xbc>)
 800fc20:	6013      	str	r3, [r2, #0]

#if defined(AI_FACE_DETECTION_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_FACE_DETECTION_IN_NUM; idx++) {
 800fc22:	2300      	movs	r3, #0
 800fc24:	617b      	str	r3, [r7, #20]
 800fc26:	e00f      	b.n	800fc48 <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 800fc28:	4b18      	ldr	r3, [pc, #96]	; (800fc8c <ai_boostrap+0xb8>)
 800fc2a:	6819      	ldr	r1, [r3, #0]
 800fc2c:	697a      	ldr	r2, [r7, #20]
 800fc2e:	4613      	mov	r3, r2
 800fc30:	00db      	lsls	r3, r3, #3
 800fc32:	1a9b      	subs	r3, r3, r2
 800fc34:	009b      	lsls	r3, r3, #2
 800fc36:	440b      	add	r3, r1
 800fc38:	685a      	ldr	r2, [r3, #4]
 800fc3a:	4916      	ldr	r1, [pc, #88]	; (800fc94 <ai_boostrap+0xc0>)
 800fc3c:	697b      	ldr	r3, [r7, #20]
 800fc3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_FACE_DETECTION_IN_NUM; idx++) {
 800fc42:	697b      	ldr	r3, [r7, #20]
 800fc44:	3301      	adds	r3, #1
 800fc46:	617b      	str	r3, [r7, #20]
 800fc48:	697b      	ldr	r3, [r7, #20]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	ddec      	ble.n	800fc28 <ai_boostrap+0x54>

#if defined(AI_FACE_DETECTION_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_FACE_DETECTION_OUT_NUM; idx++) {
 800fc4e:	2300      	movs	r3, #0
 800fc50:	613b      	str	r3, [r7, #16]
 800fc52:	e00f      	b.n	800fc74 <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 800fc54:	4b0e      	ldr	r3, [pc, #56]	; (800fc90 <ai_boostrap+0xbc>)
 800fc56:	6819      	ldr	r1, [r3, #0]
 800fc58:	693a      	ldr	r2, [r7, #16]
 800fc5a:	4613      	mov	r3, r2
 800fc5c:	00db      	lsls	r3, r3, #3
 800fc5e:	1a9b      	subs	r3, r3, r2
 800fc60:	009b      	lsls	r3, r3, #2
 800fc62:	440b      	add	r3, r1
 800fc64:	685a      	ldr	r2, [r3, #4]
 800fc66:	490c      	ldr	r1, [pc, #48]	; (800fc98 <ai_boostrap+0xc4>)
 800fc68:	693b      	ldr	r3, [r7, #16]
 800fc6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_FACE_DETECTION_OUT_NUM; idx++) {
 800fc6e:	693b      	ldr	r3, [r7, #16]
 800fc70:	3301      	adds	r3, #1
 800fc72:	613b      	str	r3, [r7, #16]
 800fc74:	693b      	ldr	r3, [r7, #16]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	ddec      	ble.n	800fc54 <ai_boostrap+0x80>
  for (int idx=0; idx < AI_FACE_DETECTION_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 800fc7a:	2300      	movs	r3, #0
}
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	3718      	adds	r7, #24
 800fc80:	46bd      	mov	sp, r7
 800fc82:	bd80      	pop	{r7, pc}
 800fc84:	2407d980 	.word	0x2407d980
 800fc88:	0801466c 	.word	0x0801466c
 800fc8c:	2407d984 	.word	0x2407d984
 800fc90:	2407d988 	.word	0x2407d988
 800fc94:	2400c49c 	.word	0x2400c49c
 800fc98:	2400c4a0 	.word	0x2400c4a0

0800fc9c <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 800fca0:	4803      	ldr	r0, [pc, #12]	; (800fcb0 <MX_X_CUBE_AI_Init+0x14>)
 800fca2:	f003 fc6b 	bl	801357c <puts>

  ai_boostrap(data_activations0);
 800fca6:	4803      	ldr	r0, [pc, #12]	; (800fcb4 <MX_X_CUBE_AI_Init+0x18>)
 800fca8:	f7ff ff94 	bl	800fbd4 <ai_boostrap>
    /* USER CODE END 5 */
}
 800fcac:	bf00      	nop
 800fcae:	bd80      	pop	{r7, pc}
 800fcb0:	080146a8 	.word	0x080146a8
 800fcb4:	240004d4 	.word	0x240004d4

0800fcb8 <face_detection_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool face_detection_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b082      	sub	sp, #8
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
 800fcc0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_face_detection_activations_map, 1, params)) {
 800fcc2:	683a      	ldr	r2, [r7, #0]
 800fcc4:	2101      	movs	r1, #1
 800fcc6:	4891      	ldr	r0, [pc, #580]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fcc8:	f000 feda 	bl	8010a80 <ai_platform_get_activations_map>
 800fccc:	4603      	mov	r3, r0
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	f000 8112 	beq.w	800fef8 <face_detection_configure_activations+0x240>
    /* Updating activations (byte) offsets */
    
    serving_default_x0_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 206016);
 800fcd4:	4b8d      	ldr	r3, [pc, #564]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fcd6:	681a      	ldr	r2, [r3, #0]
 800fcd8:	4b8d      	ldr	r3, [pc, #564]	; (800ff10 <face_detection_configure_activations+0x258>)
 800fcda:	4413      	add	r3, r2
 800fcdc:	4a8d      	ldr	r2, [pc, #564]	; (800ff14 <face_detection_configure_activations+0x25c>)
 800fcde:	6093      	str	r3, [r2, #8]
    serving_default_x0_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 206016);
 800fce0:	4b8a      	ldr	r3, [pc, #552]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fce2:	681a      	ldr	r2, [r3, #0]
 800fce4:	4b8a      	ldr	r3, [pc, #552]	; (800ff10 <face_detection_configure_activations+0x258>)
 800fce6:	4413      	add	r3, r2
 800fce8:	4a8a      	ldr	r2, [pc, #552]	; (800ff14 <face_detection_configure_activations+0x25c>)
 800fcea:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 316608);
 800fcec:	4b87      	ldr	r3, [pc, #540]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fcee:	681a      	ldr	r2, [r3, #0]
 800fcf0:	4b89      	ldr	r3, [pc, #548]	; (800ff18 <face_detection_configure_activations+0x260>)
 800fcf2:	4413      	add	r3, r2
 800fcf4:	4a89      	ldr	r2, [pc, #548]	; (800ff1c <face_detection_configure_activations+0x264>)
 800fcf6:	6093      	str	r3, [r2, #8]
    conv2d_0_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 316608);
 800fcf8:	4b84      	ldr	r3, [pc, #528]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fcfa:	681a      	ldr	r2, [r3, #0]
 800fcfc:	4b86      	ldr	r3, [pc, #536]	; (800ff18 <face_detection_configure_activations+0x260>)
 800fcfe:	4413      	add	r3, r2
 800fd00:	4a86      	ldr	r2, [pc, #536]	; (800ff1c <face_detection_configure_activations+0x264>)
 800fd02:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 169152);
 800fd04:	4b81      	ldr	r3, [pc, #516]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fd06:	681a      	ldr	r2, [r3, #0]
 800fd08:	4b85      	ldr	r3, [pc, #532]	; (800ff20 <face_detection_configure_activations+0x268>)
 800fd0a:	4413      	add	r3, r2
 800fd0c:	4a85      	ldr	r2, [pc, #532]	; (800ff24 <face_detection_configure_activations+0x26c>)
 800fd0e:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 169152);
 800fd10:	4b7e      	ldr	r3, [pc, #504]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fd12:	681a      	ldr	r2, [r3, #0]
 800fd14:	4b82      	ldr	r3, [pc, #520]	; (800ff20 <face_detection_configure_activations+0x268>)
 800fd16:	4413      	add	r3, r2
 800fd18:	4a82      	ldr	r2, [pc, #520]	; (800ff24 <face_detection_configure_activations+0x26c>)
 800fd1a:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 390336);
 800fd1c:	4b7b      	ldr	r3, [pc, #492]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fd1e:	681a      	ldr	r2, [r3, #0]
 800fd20:	4b81      	ldr	r3, [pc, #516]	; (800ff28 <face_detection_configure_activations+0x270>)
 800fd22:	4413      	add	r3, r2
 800fd24:	4a81      	ldr	r2, [pc, #516]	; (800ff2c <face_detection_configure_activations+0x274>)
 800fd26:	6093      	str	r3, [r2, #8]
    conv2d_2_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 390336);
 800fd28:	4b78      	ldr	r3, [pc, #480]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fd2a:	681a      	ldr	r2, [r3, #0]
 800fd2c:	4b7e      	ldr	r3, [pc, #504]	; (800ff28 <face_detection_configure_activations+0x270>)
 800fd2e:	4413      	add	r3, r2
 800fd30:	4a7e      	ldr	r2, [pc, #504]	; (800ff2c <face_detection_configure_activations+0x274>)
 800fd32:	60d3      	str	r3, [r2, #12]
    
    conv2d_3_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 4800);
 800fd34:	4b75      	ldr	r3, [pc, #468]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 800fd3c:	4a7c      	ldr	r2, [pc, #496]	; (800ff30 <face_detection_configure_activations+0x278>)
 800fd3e:	6093      	str	r3, [r2, #8]
    conv2d_3_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 4800);
 800fd40:	4b72      	ldr	r3, [pc, #456]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 800fd48:	4a79      	ldr	r2, [pc, #484]	; (800ff30 <face_detection_configure_activations+0x278>)
 800fd4a:	60d3      	str	r3, [r2, #12]
    
    conv2d_5_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 800fd4c:	4b6f      	ldr	r3, [pc, #444]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	4a78      	ldr	r2, [pc, #480]	; (800ff34 <face_detection_configure_activations+0x27c>)
 800fd52:	6093      	str	r3, [r2, #8]
    conv2d_5_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 800fd54:	4b6d      	ldr	r3, [pc, #436]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	4a76      	ldr	r2, [pc, #472]	; (800ff34 <face_detection_configure_activations+0x27c>)
 800fd5a:	60d3      	str	r3, [r2, #12]
    
    conv2d_6_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 110592);
 800fd5c:	4b6b      	ldr	r3, [pc, #428]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	f503 33d8 	add.w	r3, r3, #110592	; 0x1b000
 800fd64:	4a74      	ldr	r2, [pc, #464]	; (800ff38 <face_detection_configure_activations+0x280>)
 800fd66:	6093      	str	r3, [r2, #8]
    conv2d_6_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 110592);
 800fd68:	4b68      	ldr	r3, [pc, #416]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	f503 33d8 	add.w	r3, r3, #110592	; 0x1b000
 800fd70:	4a71      	ldr	r2, [pc, #452]	; (800ff38 <face_detection_configure_activations+0x280>)
 800fd72:	60d3      	str	r3, [r2, #12]
    
    conv2d_7_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 800fd74:	4b65      	ldr	r3, [pc, #404]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	4a70      	ldr	r2, [pc, #448]	; (800ff3c <face_detection_configure_activations+0x284>)
 800fd7a:	6093      	str	r3, [r2, #8]
    conv2d_7_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 800fd7c:	4b63      	ldr	r3, [pc, #396]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	4a6e      	ldr	r2, [pc, #440]	; (800ff3c <face_detection_configure_activations+0x284>)
 800fd82:	60d3      	str	r3, [r2, #12]
    
    conv2d_8_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 129024);
 800fd84:	4b61      	ldr	r3, [pc, #388]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	f503 33fc 	add.w	r3, r3, #129024	; 0x1f800
 800fd8c:	4a6c      	ldr	r2, [pc, #432]	; (800ff40 <face_detection_configure_activations+0x288>)
 800fd8e:	6093      	str	r3, [r2, #8]
    conv2d_8_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 129024);
 800fd90:	4b5e      	ldr	r3, [pc, #376]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	f503 33fc 	add.w	r3, r3, #129024	; 0x1f800
 800fd98:	4a69      	ldr	r2, [pc, #420]	; (800ff40 <face_detection_configure_activations+0x288>)
 800fd9a:	60d3      	str	r3, [r2, #12]
    
    conv2d_9_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 800fd9c:	4b5b      	ldr	r3, [pc, #364]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	4a68      	ldr	r2, [pc, #416]	; (800ff44 <face_detection_configure_activations+0x28c>)
 800fda2:	6093      	str	r3, [r2, #8]
    conv2d_9_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 800fda4:	4b59      	ldr	r3, [pc, #356]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	4a66      	ldr	r2, [pc, #408]	; (800ff44 <face_detection_configure_activations+0x28c>)
 800fdaa:	60d3      	str	r3, [r2, #12]
    
    eltwise_10_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 18432);
 800fdac:	4b57      	ldr	r3, [pc, #348]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800fdb4:	4a64      	ldr	r2, [pc, #400]	; (800ff48 <face_detection_configure_activations+0x290>)
 800fdb6:	6093      	str	r3, [r2, #8]
    eltwise_10_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 18432);
 800fdb8:	4b54      	ldr	r3, [pc, #336]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800fdc0:	4a61      	ldr	r2, [pc, #388]	; (800ff48 <face_detection_configure_activations+0x290>)
 800fdc2:	60d3      	str	r3, [r2, #12]
    
    conv2d_11_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 36864);
 800fdc4:	4b51      	ldr	r3, [pc, #324]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 800fdcc:	4a5f      	ldr	r2, [pc, #380]	; (800ff4c <face_detection_configure_activations+0x294>)
 800fdce:	6093      	str	r3, [r2, #8]
    conv2d_11_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 36864);
 800fdd0:	4b4e      	ldr	r3, [pc, #312]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 800fdd8:	4a5c      	ldr	r2, [pc, #368]	; (800ff4c <face_detection_configure_activations+0x294>)
 800fdda:	60d3      	str	r3, [r2, #12]
    
    conv2d_13_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 800fddc:	4b4b      	ldr	r3, [pc, #300]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	4a5b      	ldr	r2, [pc, #364]	; (800ff50 <face_detection_configure_activations+0x298>)
 800fde2:	6093      	str	r3, [r2, #8]
    conv2d_13_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 800fde4:	4b49      	ldr	r3, [pc, #292]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	4a59      	ldr	r2, [pc, #356]	; (800ff50 <face_detection_configure_activations+0x298>)
 800fdea:	60d3      	str	r3, [r2, #12]
    
    conv2d_14_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 27648);
 800fdec:	4b47      	ldr	r3, [pc, #284]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
 800fdf4:	4a57      	ldr	r2, [pc, #348]	; (800ff54 <face_detection_configure_activations+0x29c>)
 800fdf6:	6093      	str	r3, [r2, #8]
    conv2d_14_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 27648);
 800fdf8:	4b44      	ldr	r3, [pc, #272]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
 800fe00:	4a54      	ldr	r2, [pc, #336]	; (800ff54 <face_detection_configure_activations+0x29c>)
 800fe02:	60d3      	str	r3, [r2, #12]
    
    conv2d_15_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 36864);
 800fe04:	4b41      	ldr	r3, [pc, #260]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 800fe0c:	4a52      	ldr	r2, [pc, #328]	; (800ff58 <face_detection_configure_activations+0x2a0>)
 800fe0e:	6093      	str	r3, [r2, #8]
    conv2d_15_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 36864);
 800fe10:	4b3e      	ldr	r3, [pc, #248]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 800fe18:	4a4f      	ldr	r2, [pc, #316]	; (800ff58 <face_detection_configure_activations+0x2a0>)
 800fe1a:	60d3      	str	r3, [r2, #12]
    
    conv2d_16_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 92160);
 800fe1c:	4b3b      	ldr	r3, [pc, #236]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	f503 33b4 	add.w	r3, r3, #92160	; 0x16800
 800fe24:	4a4d      	ldr	r2, [pc, #308]	; (800ff5c <face_detection_configure_activations+0x2a4>)
 800fe26:	6093      	str	r3, [r2, #8]
    conv2d_16_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 92160);
 800fe28:	4b38      	ldr	r3, [pc, #224]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	f503 33b4 	add.w	r3, r3, #92160	; 0x16800
 800fe30:	4a4a      	ldr	r2, [pc, #296]	; (800ff5c <face_detection_configure_activations+0x2a4>)
 800fe32:	60d3      	str	r3, [r2, #12]
    
    conv2d_17_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 800fe34:	4b35      	ldr	r3, [pc, #212]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	4a49      	ldr	r2, [pc, #292]	; (800ff60 <face_detection_configure_activations+0x2a8>)
 800fe3a:	6093      	str	r3, [r2, #8]
    conv2d_17_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 800fe3c:	4b33      	ldr	r3, [pc, #204]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	4a47      	ldr	r2, [pc, #284]	; (800ff60 <face_detection_configure_activations+0x2a8>)
 800fe42:	60d3      	str	r3, [r2, #12]
    
    eltwise_18_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 9216);
 800fe44:	4b31      	ldr	r3, [pc, #196]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800fe4c:	4a45      	ldr	r2, [pc, #276]	; (800ff64 <face_detection_configure_activations+0x2ac>)
 800fe4e:	6093      	str	r3, [r2, #8]
    eltwise_18_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 9216);
 800fe50:	4b2e      	ldr	r3, [pc, #184]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800fe58:	4a42      	ldr	r2, [pc, #264]	; (800ff64 <face_detection_configure_activations+0x2ac>)
 800fe5a:	60d3      	str	r3, [r2, #12]
    
    conv2d_19_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 18432);
 800fe5c:	4b2b      	ldr	r3, [pc, #172]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800fe64:	4a40      	ldr	r2, [pc, #256]	; (800ff68 <face_detection_configure_activations+0x2b0>)
 800fe66:	6093      	str	r3, [r2, #8]
    conv2d_19_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 18432);
 800fe68:	4b28      	ldr	r3, [pc, #160]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800fe70:	4a3d      	ldr	r2, [pc, #244]	; (800ff68 <face_detection_configure_activations+0x2b0>)
 800fe72:	60d3      	str	r3, [r2, #12]
    
    conv2d_20_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 73728);
 800fe74:	4b25      	ldr	r3, [pc, #148]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 800fe7c:	4a3b      	ldr	r2, [pc, #236]	; (800ff6c <face_detection_configure_activations+0x2b4>)
 800fe7e:	6093      	str	r3, [r2, #8]
    conv2d_20_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 73728);
 800fe80:	4b22      	ldr	r3, [pc, #136]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 800fe88:	4a38      	ldr	r2, [pc, #224]	; (800ff6c <face_detection_configure_activations+0x2b4>)
 800fe8a:	60d3      	str	r3, [r2, #12]
    
    conv2d_21_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 800fe8c:	4b1f      	ldr	r3, [pc, #124]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	4a37      	ldr	r2, [pc, #220]	; (800ff70 <face_detection_configure_activations+0x2b8>)
 800fe92:	6093      	str	r3, [r2, #8]
    conv2d_21_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 800fe94:	4b1d      	ldr	r3, [pc, #116]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	4a35      	ldr	r2, [pc, #212]	; (800ff70 <face_detection_configure_activations+0x2b8>)
 800fe9a:	60d3      	str	r3, [r2, #12]
    
    eltwise_22_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 18432);
 800fe9c:	4b1b      	ldr	r3, [pc, #108]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800fea4:	4a33      	ldr	r2, [pc, #204]	; (800ff74 <face_detection_configure_activations+0x2bc>)
 800fea6:	6093      	str	r3, [r2, #8]
    eltwise_22_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 18432);
 800fea8:	4b18      	ldr	r3, [pc, #96]	; (800ff0c <face_detection_configure_activations+0x254>)
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800feb0:	4a30      	ldr	r2, [pc, #192]	; (800ff74 <face_detection_configure_activations+0x2bc>)
 800feb2:	60d3      	str	r3, [r2, #12]
    
    conv2d_23_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 27648);
 800feb4:	4b15      	ldr	r3, [pc, #84]	; (800ff0c <face_detection_configure_activations+0x254>)
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
 800febc:	4a2e      	ldr	r2, [pc, #184]	; (800ff78 <face_detection_configure_activations+0x2c0>)
 800febe:	6093      	str	r3, [r2, #8]
    conv2d_23_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 27648);
 800fec0:	4b12      	ldr	r3, [pc, #72]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
 800fec8:	4a2b      	ldr	r2, [pc, #172]	; (800ff78 <face_detection_configure_activations+0x2c0>)
 800feca:	60d3      	str	r3, [r2, #12]
    
    conv2d_24_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 800fecc:	4b0f      	ldr	r3, [pc, #60]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	4a2a      	ldr	r2, [pc, #168]	; (800ff7c <face_detection_configure_activations+0x2c4>)
 800fed2:	6093      	str	r3, [r2, #8]
    conv2d_24_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 800fed4:	4b0d      	ldr	r3, [pc, #52]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	4a28      	ldr	r2, [pc, #160]	; (800ff7c <face_detection_configure_activations+0x2c4>)
 800feda:	60d3      	str	r3, [r2, #12]
    
    conv2d_25_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 18432);
 800fedc:	4b0b      	ldr	r3, [pc, #44]	; (800ff0c <face_detection_configure_activations+0x254>)
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800fee4:	4a26      	ldr	r2, [pc, #152]	; (800ff80 <face_detection_configure_activations+0x2c8>)
 800fee6:	6093      	str	r3, [r2, #8]
    conv2d_25_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 18432);
 800fee8:	4b08      	ldr	r3, [pc, #32]	; (800ff0c <face_detection_configure_activations+0x254>)
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800fef0:	4a23      	ldr	r2, [pc, #140]	; (800ff80 <face_detection_configure_activations+0x2c8>)
 800fef2:	60d3      	str	r3, [r2, #12]
    
    return true;
 800fef4:	2301      	movs	r3, #1
 800fef6:	e005      	b.n	800ff04 <face_detection_configure_activations+0x24c>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800fef8:	2213      	movs	r2, #19
 800fefa:	2130      	movs	r1, #48	; 0x30
 800fefc:	6878      	ldr	r0, [r7, #4]
 800fefe:	f000 ff3d 	bl	8010d7c <ai_platform_network_set_error>
  return false;
 800ff02:	2300      	movs	r3, #0
}
 800ff04:	4618      	mov	r0, r3
 800ff06:	3708      	adds	r7, #8
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	bd80      	pop	{r7, pc}
 800ff0c:	2407d98c 	.word	0x2407d98c
 800ff10:	000324c0 	.word	0x000324c0
 800ff14:	240005c8 	.word	0x240005c8
 800ff18:	0004d4c0 	.word	0x0004d4c0
 800ff1c:	240005d8 	.word	0x240005d8
 800ff20:	000294c0 	.word	0x000294c0
 800ff24:	240005f8 	.word	0x240005f8
 800ff28:	0005f4c0 	.word	0x0005f4c0
 800ff2c:	24000618 	.word	0x24000618
 800ff30:	24000638 	.word	0x24000638
 800ff34:	24000658 	.word	0x24000658
 800ff38:	24000678 	.word	0x24000678
 800ff3c:	24000698 	.word	0x24000698
 800ff40:	240006b8 	.word	0x240006b8
 800ff44:	240006d8 	.word	0x240006d8
 800ff48:	240006f8 	.word	0x240006f8
 800ff4c:	24000718 	.word	0x24000718
 800ff50:	24000738 	.word	0x24000738
 800ff54:	24000758 	.word	0x24000758
 800ff58:	24000778 	.word	0x24000778
 800ff5c:	24000788 	.word	0x24000788
 800ff60:	240007a8 	.word	0x240007a8
 800ff64:	240007b8 	.word	0x240007b8
 800ff68:	240007d8 	.word	0x240007d8
 800ff6c:	240007e8 	.word	0x240007e8
 800ff70:	24000808 	.word	0x24000808
 800ff74:	24000818 	.word	0x24000818
 800ff78:	24000838 	.word	0x24000838
 800ff7c:	24000848 	.word	0x24000848
 800ff80:	24000868 	.word	0x24000868

0800ff84 <face_detection_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool face_detection_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b082      	sub	sp, #8
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
 800ff8c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_face_detection_weights_map, 1, params)) {
 800ff8e:	683a      	ldr	r2, [r7, #0]
 800ff90:	2101      	movs	r1, #1
 800ff92:	489a      	ldr	r0, [pc, #616]	; (80101fc <face_detection_configure_weights+0x278>)
 800ff94:	f000 fd1c 	bl	80109d0 <ai_platform_get_weights_map>
 800ff98:	4603      	mov	r3, r0
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	f000 8374 	beq.w	8010688 <face_detection_configure_weights+0x704>
    /* Updating weights (byte) offsets */
    
    conv2d_15_bias_array.format |= AI_FMT_FLAG_CONST;
 800ffa0:	4b97      	ldr	r3, [pc, #604]	; (8010200 <face_detection_configure_weights+0x27c>)
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ffa8:	4a95      	ldr	r2, [pc, #596]	; (8010200 <face_detection_configure_weights+0x27c>)
 800ffaa:	6013      	str	r3, [r2, #0]
    conv2d_15_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 0);
 800ffac:	4b93      	ldr	r3, [pc, #588]	; (80101fc <face_detection_configure_weights+0x278>)
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	4a93      	ldr	r2, [pc, #588]	; (8010200 <face_detection_configure_weights+0x27c>)
 800ffb2:	6093      	str	r3, [r2, #8]
    conv2d_15_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 0);
 800ffb4:	4b91      	ldr	r3, [pc, #580]	; (80101fc <face_detection_configure_weights+0x278>)
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	4a91      	ldr	r2, [pc, #580]	; (8010200 <face_detection_configure_weights+0x27c>)
 800ffba:	60d3      	str	r3, [r2, #12]
    
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
 800ffbc:	4b91      	ldr	r3, [pc, #580]	; (8010204 <face_detection_configure_weights+0x280>)
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ffc4:	4a8f      	ldr	r2, [pc, #572]	; (8010204 <face_detection_configure_weights+0x280>)
 800ffc6:	6013      	str	r3, [r2, #0]
    conv2d_16_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 384);
 800ffc8:	4b8c      	ldr	r3, [pc, #560]	; (80101fc <face_detection_configure_weights+0x278>)
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800ffd0:	4a8c      	ldr	r2, [pc, #560]	; (8010204 <face_detection_configure_weights+0x280>)
 800ffd2:	6093      	str	r3, [r2, #8]
    conv2d_16_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 384);
 800ffd4:	4b89      	ldr	r3, [pc, #548]	; (80101fc <face_detection_configure_weights+0x278>)
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800ffdc:	4a89      	ldr	r2, [pc, #548]	; (8010204 <face_detection_configure_weights+0x280>)
 800ffde:	60d3      	str	r3, [r2, #12]
    
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
 800ffe0:	4b89      	ldr	r3, [pc, #548]	; (8010208 <face_detection_configure_weights+0x284>)
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ffe8:	4a87      	ldr	r2, [pc, #540]	; (8010208 <face_detection_configure_weights+0x284>)
 800ffea:	6013      	str	r3, [r2, #0]
    conv2d_16_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 3840);
 800ffec:	4b83      	ldr	r3, [pc, #524]	; (80101fc <face_detection_configure_weights+0x278>)
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	f503 6370 	add.w	r3, r3, #3840	; 0xf00
 800fff4:	4a84      	ldr	r2, [pc, #528]	; (8010208 <face_detection_configure_weights+0x284>)
 800fff6:	6093      	str	r3, [r2, #8]
    conv2d_16_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 3840);
 800fff8:	4b80      	ldr	r3, [pc, #512]	; (80101fc <face_detection_configure_weights+0x278>)
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	f503 6370 	add.w	r3, r3, #3840	; 0xf00
 8010000:	4a81      	ldr	r2, [pc, #516]	; (8010208 <face_detection_configure_weights+0x284>)
 8010002:	60d3      	str	r3, [r2, #12]
    
    conv2d_17_weights_array.format |= AI_FMT_FLAG_CONST;
 8010004:	4b81      	ldr	r3, [pc, #516]	; (801020c <face_detection_configure_weights+0x288>)
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801000c:	4a7f      	ldr	r2, [pc, #508]	; (801020c <face_detection_configure_weights+0x288>)
 801000e:	6013      	str	r3, [r2, #0]
    conv2d_17_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 4224);
 8010010:	4b7a      	ldr	r3, [pc, #488]	; (80101fc <face_detection_configure_weights+0x278>)
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8010018:	4a7c      	ldr	r2, [pc, #496]	; (801020c <face_detection_configure_weights+0x288>)
 801001a:	6093      	str	r3, [r2, #8]
    conv2d_17_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 4224);
 801001c:	4b77      	ldr	r3, [pc, #476]	; (80101fc <face_detection_configure_weights+0x278>)
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8010024:	4a79      	ldr	r2, [pc, #484]	; (801020c <face_detection_configure_weights+0x288>)
 8010026:	60d3      	str	r3, [r2, #12]
    
    conv2d_17_bias_array.format |= AI_FMT_FLAG_CONST;
 8010028:	4b79      	ldr	r3, [pc, #484]	; (8010210 <face_detection_configure_weights+0x28c>)
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010030:	4a77      	ldr	r2, [pc, #476]	; (8010210 <face_detection_configure_weights+0x28c>)
 8010032:	6013      	str	r3, [r2, #0]
    conv2d_17_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 10368);
 8010034:	4b71      	ldr	r3, [pc, #452]	; (80101fc <face_detection_configure_weights+0x278>)
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 801003c:	4a74      	ldr	r2, [pc, #464]	; (8010210 <face_detection_configure_weights+0x28c>)
 801003e:	6093      	str	r3, [r2, #8]
    conv2d_17_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 10368);
 8010040:	4b6e      	ldr	r3, [pc, #440]	; (80101fc <face_detection_configure_weights+0x278>)
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8010048:	4a71      	ldr	r2, [pc, #452]	; (8010210 <face_detection_configure_weights+0x28c>)
 801004a:	60d3      	str	r3, [r2, #12]
    
    conv2d_19_weights_array.format |= AI_FMT_FLAG_CONST;
 801004c:	4b71      	ldr	r3, [pc, #452]	; (8010214 <face_detection_configure_weights+0x290>)
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010054:	4a6f      	ldr	r2, [pc, #444]	; (8010214 <face_detection_configure_weights+0x290>)
 8010056:	6013      	str	r3, [r2, #0]
    conv2d_19_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 10432);
 8010058:	4b68      	ldr	r3, [pc, #416]	; (80101fc <face_detection_configure_weights+0x278>)
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	f503 5323 	add.w	r3, r3, #10432	; 0x28c0
 8010060:	4a6c      	ldr	r2, [pc, #432]	; (8010214 <face_detection_configure_weights+0x290>)
 8010062:	6093      	str	r3, [r2, #8]
    conv2d_19_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 10432);
 8010064:	4b65      	ldr	r3, [pc, #404]	; (80101fc <face_detection_configure_weights+0x278>)
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	f503 5323 	add.w	r3, r3, #10432	; 0x28c0
 801006c:	4a69      	ldr	r2, [pc, #420]	; (8010214 <face_detection_configure_weights+0x290>)
 801006e:	60d3      	str	r3, [r2, #12]
    
    conv2d_19_bias_array.format |= AI_FMT_FLAG_CONST;
 8010070:	4b69      	ldr	r3, [pc, #420]	; (8010218 <face_detection_configure_weights+0x294>)
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010078:	4a67      	ldr	r2, [pc, #412]	; (8010218 <face_detection_configure_weights+0x294>)
 801007a:	6013      	str	r3, [r2, #0]
    conv2d_19_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 16576);
 801007c:	4b5f      	ldr	r3, [pc, #380]	; (80101fc <face_detection_configure_weights+0x278>)
 801007e:	681a      	ldr	r2, [r3, #0]
 8010080:	f244 03c0 	movw	r3, #16576	; 0x40c0
 8010084:	4413      	add	r3, r2
 8010086:	4a64      	ldr	r2, [pc, #400]	; (8010218 <face_detection_configure_weights+0x294>)
 8010088:	6093      	str	r3, [r2, #8]
    conv2d_19_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 16576);
 801008a:	4b5c      	ldr	r3, [pc, #368]	; (80101fc <face_detection_configure_weights+0x278>)
 801008c:	681a      	ldr	r2, [r3, #0]
 801008e:	f244 03c0 	movw	r3, #16576	; 0x40c0
 8010092:	4413      	add	r3, r2
 8010094:	4a60      	ldr	r2, [pc, #384]	; (8010218 <face_detection_configure_weights+0x294>)
 8010096:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8010098:	4b60      	ldr	r3, [pc, #384]	; (801021c <face_detection_configure_weights+0x298>)
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80100a0:	4a5e      	ldr	r2, [pc, #376]	; (801021c <face_detection_configure_weights+0x298>)
 80100a2:	6013      	str	r3, [r2, #0]
    conv2d_0_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 16960);
 80100a4:	4b55      	ldr	r3, [pc, #340]	; (80101fc <face_detection_configure_weights+0x278>)
 80100a6:	681a      	ldr	r2, [r3, #0]
 80100a8:	f244 2340 	movw	r3, #16960	; 0x4240
 80100ac:	4413      	add	r3, r2
 80100ae:	4a5b      	ldr	r2, [pc, #364]	; (801021c <face_detection_configure_weights+0x298>)
 80100b0:	6093      	str	r3, [r2, #8]
    conv2d_0_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 16960);
 80100b2:	4b52      	ldr	r3, [pc, #328]	; (80101fc <face_detection_configure_weights+0x278>)
 80100b4:	681a      	ldr	r2, [r3, #0]
 80100b6:	f244 2340 	movw	r3, #16960	; 0x4240
 80100ba:	4413      	add	r3, r2
 80100bc:	4a57      	ldr	r2, [pc, #348]	; (801021c <face_detection_configure_weights+0x298>)
 80100be:	60d3      	str	r3, [r2, #12]
    
    conv2d_20_weights_array.format |= AI_FMT_FLAG_CONST;
 80100c0:	4b57      	ldr	r3, [pc, #348]	; (8010220 <face_detection_configure_weights+0x29c>)
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80100c8:	4a55      	ldr	r2, [pc, #340]	; (8010220 <face_detection_configure_weights+0x29c>)
 80100ca:	6013      	str	r3, [r2, #0]
    conv2d_20_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 18688);
 80100cc:	4b4b      	ldr	r3, [pc, #300]	; (80101fc <face_detection_configure_weights+0x278>)
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	f503 4392 	add.w	r3, r3, #18688	; 0x4900
 80100d4:	4a52      	ldr	r2, [pc, #328]	; (8010220 <face_detection_configure_weights+0x29c>)
 80100d6:	6093      	str	r3, [r2, #8]
    conv2d_20_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 18688);
 80100d8:	4b48      	ldr	r3, [pc, #288]	; (80101fc <face_detection_configure_weights+0x278>)
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	f503 4392 	add.w	r3, r3, #18688	; 0x4900
 80100e0:	4a4f      	ldr	r2, [pc, #316]	; (8010220 <face_detection_configure_weights+0x29c>)
 80100e2:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_bias_array.format |= AI_FMT_FLAG_CONST;
 80100e4:	4b4f      	ldr	r3, [pc, #316]	; (8010224 <face_detection_configure_weights+0x2a0>)
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80100ec:	4a4d      	ldr	r2, [pc, #308]	; (8010224 <face_detection_configure_weights+0x2a0>)
 80100ee:	6013      	str	r3, [r2, #0]
    conv2d_0_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 22144);
 80100f0:	4b42      	ldr	r3, [pc, #264]	; (80101fc <face_detection_configure_weights+0x278>)
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	f503 43ad 	add.w	r3, r3, #22144	; 0x5680
 80100f8:	4a4a      	ldr	r2, [pc, #296]	; (8010224 <face_detection_configure_weights+0x2a0>)
 80100fa:	6093      	str	r3, [r2, #8]
    conv2d_0_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 22144);
 80100fc:	4b3f      	ldr	r3, [pc, #252]	; (80101fc <face_detection_configure_weights+0x278>)
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	f503 43ad 	add.w	r3, r3, #22144	; 0x5680
 8010104:	4a47      	ldr	r2, [pc, #284]	; (8010224 <face_detection_configure_weights+0x2a0>)
 8010106:	60d3      	str	r3, [r2, #12]
    
    conv2d_20_bias_array.format |= AI_FMT_FLAG_CONST;
 8010108:	4b47      	ldr	r3, [pc, #284]	; (8010228 <face_detection_configure_weights+0x2a4>)
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010110:	4a45      	ldr	r2, [pc, #276]	; (8010228 <face_detection_configure_weights+0x2a4>)
 8010112:	6013      	str	r3, [r2, #0]
    conv2d_20_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 22208);
 8010114:	4b39      	ldr	r3, [pc, #228]	; (80101fc <face_detection_configure_weights+0x278>)
 8010116:	681a      	ldr	r2, [r3, #0]
 8010118:	f245 63c0 	movw	r3, #22208	; 0x56c0
 801011c:	4413      	add	r3, r2
 801011e:	4a42      	ldr	r2, [pc, #264]	; (8010228 <face_detection_configure_weights+0x2a4>)
 8010120:	6093      	str	r3, [r2, #8]
    conv2d_20_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 22208);
 8010122:	4b36      	ldr	r3, [pc, #216]	; (80101fc <face_detection_configure_weights+0x278>)
 8010124:	681a      	ldr	r2, [r3, #0]
 8010126:	f245 63c0 	movw	r3, #22208	; 0x56c0
 801012a:	4413      	add	r3, r2
 801012c:	4a3e      	ldr	r2, [pc, #248]	; (8010228 <face_detection_configure_weights+0x2a4>)
 801012e:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8010130:	4b3e      	ldr	r3, [pc, #248]	; (801022c <face_detection_configure_weights+0x2a8>)
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010138:	4a3c      	ldr	r2, [pc, #240]	; (801022c <face_detection_configure_weights+0x2a8>)
 801013a:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 22592);
 801013c:	4b2f      	ldr	r3, [pc, #188]	; (80101fc <face_detection_configure_weights+0x278>)
 801013e:	681a      	ldr	r2, [r3, #0]
 8010140:	f645 0340 	movw	r3, #22592	; 0x5840
 8010144:	4413      	add	r3, r2
 8010146:	4a39      	ldr	r2, [pc, #228]	; (801022c <face_detection_configure_weights+0x2a8>)
 8010148:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 22592);
 801014a:	4b2c      	ldr	r3, [pc, #176]	; (80101fc <face_detection_configure_weights+0x278>)
 801014c:	681a      	ldr	r2, [r3, #0]
 801014e:	f645 0340 	movw	r3, #22592	; 0x5840
 8010152:	4413      	add	r3, r2
 8010154:	4a35      	ldr	r2, [pc, #212]	; (801022c <face_detection_configure_weights+0x2a8>)
 8010156:	60d3      	str	r3, [r2, #12]
    
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 8010158:	4b35      	ldr	r3, [pc, #212]	; (8010230 <face_detection_configure_weights+0x2ac>)
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010160:	4a33      	ldr	r2, [pc, #204]	; (8010230 <face_detection_configure_weights+0x2ac>)
 8010162:	6013      	str	r3, [r2, #0]
    conv2d_21_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 23168);
 8010164:	4b25      	ldr	r3, [pc, #148]	; (80101fc <face_detection_configure_weights+0x278>)
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
 801016c:	4a30      	ldr	r2, [pc, #192]	; (8010230 <face_detection_configure_weights+0x2ac>)
 801016e:	6093      	str	r3, [r2, #8]
    conv2d_21_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 23168);
 8010170:	4b22      	ldr	r3, [pc, #136]	; (80101fc <face_detection_configure_weights+0x278>)
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
 8010178:	4a2d      	ldr	r2, [pc, #180]	; (8010230 <face_detection_configure_weights+0x2ac>)
 801017a:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 801017c:	4b2d      	ldr	r3, [pc, #180]	; (8010234 <face_detection_configure_weights+0x2b0>)
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010184:	4a2b      	ldr	r2, [pc, #172]	; (8010234 <face_detection_configure_weights+0x2b0>)
 8010186:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 29312);
 8010188:	4b1c      	ldr	r3, [pc, #112]	; (80101fc <face_detection_configure_weights+0x278>)
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	f503 43e5 	add.w	r3, r3, #29312	; 0x7280
 8010190:	4a28      	ldr	r2, [pc, #160]	; (8010234 <face_detection_configure_weights+0x2b0>)
 8010192:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 29312);
 8010194:	4b19      	ldr	r3, [pc, #100]	; (80101fc <face_detection_configure_weights+0x278>)
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	f503 43e5 	add.w	r3, r3, #29312	; 0x7280
 801019c:	4a25      	ldr	r2, [pc, #148]	; (8010234 <face_detection_configure_weights+0x2b0>)
 801019e:	60d3      	str	r3, [r2, #12]
    
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 80101a0:	4b25      	ldr	r3, [pc, #148]	; (8010238 <face_detection_configure_weights+0x2b4>)
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80101a8:	4a23      	ldr	r2, [pc, #140]	; (8010238 <face_detection_configure_weights+0x2b4>)
 80101aa:	6013      	str	r3, [r2, #0]
    conv2d_21_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 29376);
 80101ac:	4b13      	ldr	r3, [pc, #76]	; (80101fc <face_detection_configure_weights+0x278>)
 80101ae:	681a      	ldr	r2, [r3, #0]
 80101b0:	f247 23c0 	movw	r3, #29376	; 0x72c0
 80101b4:	4413      	add	r3, r2
 80101b6:	4a20      	ldr	r2, [pc, #128]	; (8010238 <face_detection_configure_weights+0x2b4>)
 80101b8:	6093      	str	r3, [r2, #8]
    conv2d_21_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 29376);
 80101ba:	4b10      	ldr	r3, [pc, #64]	; (80101fc <face_detection_configure_weights+0x278>)
 80101bc:	681a      	ldr	r2, [r3, #0]
 80101be:	f247 23c0 	movw	r3, #29376	; 0x72c0
 80101c2:	4413      	add	r3, r2
 80101c4:	4a1c      	ldr	r2, [pc, #112]	; (8010238 <face_detection_configure_weights+0x2b4>)
 80101c6:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80101c8:	4b1c      	ldr	r3, [pc, #112]	; (801023c <face_detection_configure_weights+0x2b8>)
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80101d0:	4a1a      	ldr	r2, [pc, #104]	; (801023c <face_detection_configure_weights+0x2b8>)
 80101d2:	6013      	str	r3, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 29440);
 80101d4:	4b09      	ldr	r3, [pc, #36]	; (80101fc <face_detection_configure_weights+0x278>)
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	f503 43e6 	add.w	r3, r3, #29440	; 0x7300
 80101dc:	4a17      	ldr	r2, [pc, #92]	; (801023c <face_detection_configure_weights+0x2b8>)
 80101de:	6093      	str	r3, [r2, #8]
    conv2d_2_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 29440);
 80101e0:	4b06      	ldr	r3, [pc, #24]	; (80101fc <face_detection_configure_weights+0x278>)
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	f503 43e6 	add.w	r3, r3, #29440	; 0x7300
 80101e8:	4a14      	ldr	r2, [pc, #80]	; (801023c <face_detection_configure_weights+0x2b8>)
 80101ea:	60d3      	str	r3, [r2, #12]
    
    conv2d_23_weights_array.format |= AI_FMT_FLAG_CONST;
 80101ec:	4b14      	ldr	r3, [pc, #80]	; (8010240 <face_detection_configure_weights+0x2bc>)
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80101f4:	4a12      	ldr	r2, [pc, #72]	; (8010240 <face_detection_configure_weights+0x2bc>)
 80101f6:	6013      	str	r3, [r2, #0]
 80101f8:	e024      	b.n	8010244 <face_detection_configure_weights+0x2c0>
 80101fa:	bf00      	nop
 80101fc:	2407d990 	.word	0x2407d990
 8010200:	240004d8 	.word	0x240004d8
 8010204:	240004e8 	.word	0x240004e8
 8010208:	240004f8 	.word	0x240004f8
 801020c:	24000508 	.word	0x24000508
 8010210:	24000518 	.word	0x24000518
 8010214:	24000528 	.word	0x24000528
 8010218:	24000538 	.word	0x24000538
 801021c:	24000548 	.word	0x24000548
 8010220:	24000558 	.word	0x24000558
 8010224:	24000568 	.word	0x24000568
 8010228:	24000578 	.word	0x24000578
 801022c:	24000588 	.word	0x24000588
 8010230:	24000598 	.word	0x24000598
 8010234:	240005a8 	.word	0x240005a8
 8010238:	240005b8 	.word	0x240005b8
 801023c:	240005e8 	.word	0x240005e8
 8010240:	24000608 	.word	0x24000608
    conv2d_23_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 29952);
 8010244:	4b9e      	ldr	r3, [pc, #632]	; (80104c0 <face_detection_configure_weights+0x53c>)
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 801024c:	4a9d      	ldr	r2, [pc, #628]	; (80104c4 <face_detection_configure_weights+0x540>)
 801024e:	6093      	str	r3, [r2, #8]
    conv2d_23_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 29952);
 8010250:	4b9b      	ldr	r3, [pc, #620]	; (80104c0 <face_detection_configure_weights+0x53c>)
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8010258:	4a9a      	ldr	r2, [pc, #616]	; (80104c4 <face_detection_configure_weights+0x540>)
 801025a:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 801025c:	4b9a      	ldr	r3, [pc, #616]	; (80104c8 <face_detection_configure_weights+0x544>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010264:	4a98      	ldr	r2, [pc, #608]	; (80104c8 <face_detection_configure_weights+0x544>)
 8010266:	6013      	str	r3, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 36096);
 8010268:	4b95      	ldr	r3, [pc, #596]	; (80104c0 <face_detection_configure_weights+0x53c>)
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	f503 430d 	add.w	r3, r3, #36096	; 0x8d00
 8010270:	4a95      	ldr	r2, [pc, #596]	; (80104c8 <face_detection_configure_weights+0x544>)
 8010272:	6093      	str	r3, [r2, #8]
    conv2d_2_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 36096);
 8010274:	4b92      	ldr	r3, [pc, #584]	; (80104c0 <face_detection_configure_weights+0x53c>)
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	f503 430d 	add.w	r3, r3, #36096	; 0x8d00
 801027c:	4a92      	ldr	r2, [pc, #584]	; (80104c8 <face_detection_configure_weights+0x544>)
 801027e:	60d3      	str	r3, [r2, #12]
    
    conv2d_23_bias_array.format |= AI_FMT_FLAG_CONST;
 8010280:	4b92      	ldr	r3, [pc, #584]	; (80104cc <face_detection_configure_weights+0x548>)
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010288:	4a90      	ldr	r2, [pc, #576]	; (80104cc <face_detection_configure_weights+0x548>)
 801028a:	6013      	str	r3, [r2, #0]
    conv2d_23_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 36128);
 801028c:	4b8c      	ldr	r3, [pc, #560]	; (80104c0 <face_detection_configure_weights+0x53c>)
 801028e:	681a      	ldr	r2, [r3, #0]
 8010290:	f648 5320 	movw	r3, #36128	; 0x8d20
 8010294:	4413      	add	r3, r2
 8010296:	4a8d      	ldr	r2, [pc, #564]	; (80104cc <face_detection_configure_weights+0x548>)
 8010298:	6093      	str	r3, [r2, #8]
    conv2d_23_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 36128);
 801029a:	4b89      	ldr	r3, [pc, #548]	; (80104c0 <face_detection_configure_weights+0x53c>)
 801029c:	681a      	ldr	r2, [r3, #0]
 801029e:	f648 5320 	movw	r3, #36128	; 0x8d20
 80102a2:	4413      	add	r3, r2
 80102a4:	4a89      	ldr	r2, [pc, #548]	; (80104cc <face_detection_configure_weights+0x548>)
 80102a6:	60d3      	str	r3, [r2, #12]
    
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 80102a8:	4b89      	ldr	r3, [pc, #548]	; (80104d0 <face_detection_configure_weights+0x54c>)
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80102b0:	4a87      	ldr	r2, [pc, #540]	; (80104d0 <face_detection_configure_weights+0x54c>)
 80102b2:	6013      	str	r3, [r2, #0]
    conv2d_3_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 36512);
 80102b4:	4b82      	ldr	r3, [pc, #520]	; (80104c0 <face_detection_configure_weights+0x53c>)
 80102b6:	681a      	ldr	r2, [r3, #0]
 80102b8:	f648 63a0 	movw	r3, #36512	; 0x8ea0
 80102bc:	4413      	add	r3, r2
 80102be:	4a84      	ldr	r2, [pc, #528]	; (80104d0 <face_detection_configure_weights+0x54c>)
 80102c0:	6093      	str	r3, [r2, #8]
    conv2d_3_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 36512);
 80102c2:	4b7f      	ldr	r3, [pc, #508]	; (80104c0 <face_detection_configure_weights+0x53c>)
 80102c4:	681a      	ldr	r2, [r3, #0]
 80102c6:	f648 63a0 	movw	r3, #36512	; 0x8ea0
 80102ca:	4413      	add	r3, r2
 80102cc:	4a80      	ldr	r2, [pc, #512]	; (80104d0 <face_detection_configure_weights+0x54c>)
 80102ce:	60d3      	str	r3, [r2, #12]
    
    conv2d_24_weights_array.format |= AI_FMT_FLAG_CONST;
 80102d0:	4b80      	ldr	r3, [pc, #512]	; (80104d4 <face_detection_configure_weights+0x550>)
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80102d8:	4a7e      	ldr	r2, [pc, #504]	; (80104d4 <face_detection_configure_weights+0x550>)
 80102da:	6013      	str	r3, [r2, #0]
    conv2d_24_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 38048);
 80102dc:	4b78      	ldr	r3, [pc, #480]	; (80104c0 <face_detection_configure_weights+0x53c>)
 80102de:	681a      	ldr	r2, [r3, #0]
 80102e0:	f249 43a0 	movw	r3, #38048	; 0x94a0
 80102e4:	4413      	add	r3, r2
 80102e6:	4a7b      	ldr	r2, [pc, #492]	; (80104d4 <face_detection_configure_weights+0x550>)
 80102e8:	6093      	str	r3, [r2, #8]
    conv2d_24_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 38048);
 80102ea:	4b75      	ldr	r3, [pc, #468]	; (80104c0 <face_detection_configure_weights+0x53c>)
 80102ec:	681a      	ldr	r2, [r3, #0]
 80102ee:	f249 43a0 	movw	r3, #38048	; 0x94a0
 80102f2:	4413      	add	r3, r2
 80102f4:	4a77      	ldr	r2, [pc, #476]	; (80104d4 <face_detection_configure_weights+0x550>)
 80102f6:	60d3      	str	r3, [r2, #12]
    
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 80102f8:	4b77      	ldr	r3, [pc, #476]	; (80104d8 <face_detection_configure_weights+0x554>)
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010300:	4a75      	ldr	r2, [pc, #468]	; (80104d8 <face_detection_configure_weights+0x554>)
 8010302:	6013      	str	r3, [r2, #0]
    conv2d_3_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 50336);
 8010304:	4b6e      	ldr	r3, [pc, #440]	; (80104c0 <face_detection_configure_weights+0x53c>)
 8010306:	681a      	ldr	r2, [r3, #0]
 8010308:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
 801030c:	4413      	add	r3, r2
 801030e:	4a72      	ldr	r2, [pc, #456]	; (80104d8 <face_detection_configure_weights+0x554>)
 8010310:	6093      	str	r3, [r2, #8]
    conv2d_3_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 50336);
 8010312:	4b6b      	ldr	r3, [pc, #428]	; (80104c0 <face_detection_configure_weights+0x53c>)
 8010314:	681a      	ldr	r2, [r3, #0]
 8010316:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
 801031a:	4413      	add	r3, r2
 801031c:	4a6e      	ldr	r2, [pc, #440]	; (80104d8 <face_detection_configure_weights+0x554>)
 801031e:	60d3      	str	r3, [r2, #12]
    
    conv2d_24_bias_array.format |= AI_FMT_FLAG_CONST;
 8010320:	4b6e      	ldr	r3, [pc, #440]	; (80104dc <face_detection_configure_weights+0x558>)
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010328:	4a6c      	ldr	r2, [pc, #432]	; (80104dc <face_detection_configure_weights+0x558>)
 801032a:	6013      	str	r3, [r2, #0]
    conv2d_24_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 50528);
 801032c:	4b64      	ldr	r3, [pc, #400]	; (80104c0 <face_detection_configure_weights+0x53c>)
 801032e:	681a      	ldr	r2, [r3, #0]
 8010330:	f24c 5360 	movw	r3, #50528	; 0xc560
 8010334:	4413      	add	r3, r2
 8010336:	4a69      	ldr	r2, [pc, #420]	; (80104dc <face_detection_configure_weights+0x558>)
 8010338:	6093      	str	r3, [r2, #8]
    conv2d_24_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 50528);
 801033a:	4b61      	ldr	r3, [pc, #388]	; (80104c0 <face_detection_configure_weights+0x53c>)
 801033c:	681a      	ldr	r2, [r3, #0]
 801033e:	f24c 5360 	movw	r3, #50528	; 0xc560
 8010342:	4413      	add	r3, r2
 8010344:	4a65      	ldr	r2, [pc, #404]	; (80104dc <face_detection_configure_weights+0x558>)
 8010346:	60d3      	str	r3, [r2, #12]
    
    conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8010348:	4b65      	ldr	r3, [pc, #404]	; (80104e0 <face_detection_configure_weights+0x55c>)
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010350:	4a63      	ldr	r2, [pc, #396]	; (80104e0 <face_detection_configure_weights+0x55c>)
 8010352:	6013      	str	r3, [r2, #0]
    conv2d_5_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 50656);
 8010354:	4b5a      	ldr	r3, [pc, #360]	; (80104c0 <face_detection_configure_weights+0x53c>)
 8010356:	681a      	ldr	r2, [r3, #0]
 8010358:	f24c 53e0 	movw	r3, #50656	; 0xc5e0
 801035c:	4413      	add	r3, r2
 801035e:	4a60      	ldr	r2, [pc, #384]	; (80104e0 <face_detection_configure_weights+0x55c>)
 8010360:	6093      	str	r3, [r2, #8]
    conv2d_5_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 50656);
 8010362:	4b57      	ldr	r3, [pc, #348]	; (80104c0 <face_detection_configure_weights+0x53c>)
 8010364:	681a      	ldr	r2, [r3, #0]
 8010366:	f24c 53e0 	movw	r3, #50656	; 0xc5e0
 801036a:	4413      	add	r3, r2
 801036c:	4a5c      	ldr	r2, [pc, #368]	; (80104e0 <face_detection_configure_weights+0x55c>)
 801036e:	60d3      	str	r3, [r2, #12]
    
    conv2d_25_weights_array.format |= AI_FMT_FLAG_CONST;
 8010370:	4b5c      	ldr	r3, [pc, #368]	; (80104e4 <face_detection_configure_weights+0x560>)
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010378:	4a5a      	ldr	r2, [pc, #360]	; (80104e4 <face_detection_configure_weights+0x560>)
 801037a:	6013      	str	r3, [r2, #0]
    conv2d_25_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 52384);
 801037c:	4b50      	ldr	r3, [pc, #320]	; (80104c0 <face_detection_configure_weights+0x53c>)
 801037e:	681a      	ldr	r2, [r3, #0]
 8010380:	f64c 43a0 	movw	r3, #52384	; 0xcca0
 8010384:	4413      	add	r3, r2
 8010386:	4a57      	ldr	r2, [pc, #348]	; (80104e4 <face_detection_configure_weights+0x560>)
 8010388:	6093      	str	r3, [r2, #8]
    conv2d_25_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 52384);
 801038a:	4b4d      	ldr	r3, [pc, #308]	; (80104c0 <face_detection_configure_weights+0x53c>)
 801038c:	681a      	ldr	r2, [r3, #0]
 801038e:	f64c 43a0 	movw	r3, #52384	; 0xcca0
 8010392:	4413      	add	r3, r2
 8010394:	4a53      	ldr	r2, [pc, #332]	; (80104e4 <face_detection_configure_weights+0x560>)
 8010396:	60d3      	str	r3, [r2, #12]
    
    conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
 8010398:	4b53      	ldr	r3, [pc, #332]	; (80104e8 <face_detection_configure_weights+0x564>)
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80103a0:	4a51      	ldr	r2, [pc, #324]	; (80104e8 <face_detection_configure_weights+0x564>)
 80103a2:	6013      	str	r3, [r2, #0]
    conv2d_5_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 52640);
 80103a4:	4b46      	ldr	r3, [pc, #280]	; (80104c0 <face_detection_configure_weights+0x53c>)
 80103a6:	681a      	ldr	r2, [r3, #0]
 80103a8:	f64c 53a0 	movw	r3, #52640	; 0xcda0
 80103ac:	4413      	add	r3, r2
 80103ae:	4a4e      	ldr	r2, [pc, #312]	; (80104e8 <face_detection_configure_weights+0x564>)
 80103b0:	6093      	str	r3, [r2, #8]
    conv2d_5_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 52640);
 80103b2:	4b43      	ldr	r3, [pc, #268]	; (80104c0 <face_detection_configure_weights+0x53c>)
 80103b4:	681a      	ldr	r2, [r3, #0]
 80103b6:	f64c 53a0 	movw	r3, #52640	; 0xcda0
 80103ba:	4413      	add	r3, r2
 80103bc:	4a4a      	ldr	r2, [pc, #296]	; (80104e8 <face_detection_configure_weights+0x564>)
 80103be:	60d3      	str	r3, [r2, #12]
    
    conv2d_25_bias_array.format |= AI_FMT_FLAG_CONST;
 80103c0:	4b4a      	ldr	r3, [pc, #296]	; (80104ec <face_detection_configure_weights+0x568>)
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80103c8:	4a48      	ldr	r2, [pc, #288]	; (80104ec <face_detection_configure_weights+0x568>)
 80103ca:	6013      	str	r3, [r2, #0]
    conv2d_25_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 52832);
 80103cc:	4b3c      	ldr	r3, [pc, #240]	; (80104c0 <face_detection_configure_weights+0x53c>)
 80103ce:	681a      	ldr	r2, [r3, #0]
 80103d0:	f64c 6360 	movw	r3, #52832	; 0xce60
 80103d4:	4413      	add	r3, r2
 80103d6:	4a45      	ldr	r2, [pc, #276]	; (80104ec <face_detection_configure_weights+0x568>)
 80103d8:	6093      	str	r3, [r2, #8]
    conv2d_25_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 52832);
 80103da:	4b39      	ldr	r3, [pc, #228]	; (80104c0 <face_detection_configure_weights+0x53c>)
 80103dc:	681a      	ldr	r2, [r3, #0]
 80103de:	f64c 6360 	movw	r3, #52832	; 0xce60
 80103e2:	4413      	add	r3, r2
 80103e4:	4a41      	ldr	r2, [pc, #260]	; (80104ec <face_detection_configure_weights+0x568>)
 80103e6:	60d3      	str	r3, [r2, #12]
    
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 80103e8:	4b41      	ldr	r3, [pc, #260]	; (80104f0 <face_detection_configure_weights+0x56c>)
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80103f0:	4a3f      	ldr	r2, [pc, #252]	; (80104f0 <face_detection_configure_weights+0x56c>)
 80103f2:	6013      	str	r3, [r2, #0]
    conv2d_6_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 52840);
 80103f4:	4b32      	ldr	r3, [pc, #200]	; (80104c0 <face_detection_configure_weights+0x53c>)
 80103f6:	681a      	ldr	r2, [r3, #0]
 80103f8:	f64c 6368 	movw	r3, #52840	; 0xce68
 80103fc:	4413      	add	r3, r2
 80103fe:	4a3c      	ldr	r2, [pc, #240]	; (80104f0 <face_detection_configure_weights+0x56c>)
 8010400:	6093      	str	r3, [r2, #8]
    conv2d_6_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 52840);
 8010402:	4b2f      	ldr	r3, [pc, #188]	; (80104c0 <face_detection_configure_weights+0x53c>)
 8010404:	681a      	ldr	r2, [r3, #0]
 8010406:	f64c 6368 	movw	r3, #52840	; 0xce68
 801040a:	4413      	add	r3, r2
 801040c:	4a38      	ldr	r2, [pc, #224]	; (80104f0 <face_detection_configure_weights+0x56c>)
 801040e:	60d3      	str	r3, [r2, #12]
    
    conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 8010410:	4b38      	ldr	r3, [pc, #224]	; (80104f4 <face_detection_configure_weights+0x570>)
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010418:	4a36      	ldr	r2, [pc, #216]	; (80104f4 <face_detection_configure_weights+0x570>)
 801041a:	6013      	str	r3, [r2, #0]
    conv2d_6_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 54376);
 801041c:	4b28      	ldr	r3, [pc, #160]	; (80104c0 <face_detection_configure_weights+0x53c>)
 801041e:	681a      	ldr	r2, [r3, #0]
 8010420:	f24d 4368 	movw	r3, #54376	; 0xd468
 8010424:	4413      	add	r3, r2
 8010426:	4a33      	ldr	r2, [pc, #204]	; (80104f4 <face_detection_configure_weights+0x570>)
 8010428:	6093      	str	r3, [r2, #8]
    conv2d_6_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 54376);
 801042a:	4b25      	ldr	r3, [pc, #148]	; (80104c0 <face_detection_configure_weights+0x53c>)
 801042c:	681a      	ldr	r2, [r3, #0]
 801042e:	f24d 4368 	movw	r3, #54376	; 0xd468
 8010432:	4413      	add	r3, r2
 8010434:	4a2f      	ldr	r2, [pc, #188]	; (80104f4 <face_detection_configure_weights+0x570>)
 8010436:	60d3      	str	r3, [r2, #12]
    
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8010438:	4b2f      	ldr	r3, [pc, #188]	; (80104f8 <face_detection_configure_weights+0x574>)
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010440:	4a2d      	ldr	r2, [pc, #180]	; (80104f8 <face_detection_configure_weights+0x574>)
 8010442:	6013      	str	r3, [r2, #0]
    conv2d_7_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 54408);
 8010444:	4b1e      	ldr	r3, [pc, #120]	; (80104c0 <face_detection_configure_weights+0x53c>)
 8010446:	681a      	ldr	r2, [r3, #0]
 8010448:	f24d 4388 	movw	r3, #54408	; 0xd488
 801044c:	4413      	add	r3, r2
 801044e:	4a2a      	ldr	r2, [pc, #168]	; (80104f8 <face_detection_configure_weights+0x574>)
 8010450:	6093      	str	r3, [r2, #8]
    conv2d_7_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 54408);
 8010452:	4b1b      	ldr	r3, [pc, #108]	; (80104c0 <face_detection_configure_weights+0x53c>)
 8010454:	681a      	ldr	r2, [r3, #0]
 8010456:	f24d 4388 	movw	r3, #54408	; 0xd488
 801045a:	4413      	add	r3, r2
 801045c:	4a26      	ldr	r2, [pc, #152]	; (80104f8 <face_detection_configure_weights+0x574>)
 801045e:	60d3      	str	r3, [r2, #12]
    
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8010460:	4b26      	ldr	r3, [pc, #152]	; (80104fc <face_detection_configure_weights+0x578>)
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010468:	4a24      	ldr	r2, [pc, #144]	; (80104fc <face_detection_configure_weights+0x578>)
 801046a:	6013      	str	r3, [r2, #0]
    conv2d_7_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 55944);
 801046c:	4b14      	ldr	r3, [pc, #80]	; (80104c0 <face_detection_configure_weights+0x53c>)
 801046e:	681a      	ldr	r2, [r3, #0]
 8010470:	f64d 2388 	movw	r3, #55944	; 0xda88
 8010474:	4413      	add	r3, r2
 8010476:	4a21      	ldr	r2, [pc, #132]	; (80104fc <face_detection_configure_weights+0x578>)
 8010478:	6093      	str	r3, [r2, #8]
    conv2d_7_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 55944);
 801047a:	4b11      	ldr	r3, [pc, #68]	; (80104c0 <face_detection_configure_weights+0x53c>)
 801047c:	681a      	ldr	r2, [r3, #0]
 801047e:	f64d 2388 	movw	r3, #55944	; 0xda88
 8010482:	4413      	add	r3, r2
 8010484:	4a1d      	ldr	r2, [pc, #116]	; (80104fc <face_detection_configure_weights+0x578>)
 8010486:	60d3      	str	r3, [r2, #12]
    
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 8010488:	4b1d      	ldr	r3, [pc, #116]	; (8010500 <face_detection_configure_weights+0x57c>)
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010490:	4a1b      	ldr	r2, [pc, #108]	; (8010500 <face_detection_configure_weights+0x57c>)
 8010492:	6013      	str	r3, [r2, #0]
    conv2d_8_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 56136);
 8010494:	4b0a      	ldr	r3, [pc, #40]	; (80104c0 <face_detection_configure_weights+0x53c>)
 8010496:	681a      	ldr	r2, [r3, #0]
 8010498:	f64d 3348 	movw	r3, #56136	; 0xdb48
 801049c:	4413      	add	r3, r2
 801049e:	4a18      	ldr	r2, [pc, #96]	; (8010500 <face_detection_configure_weights+0x57c>)
 80104a0:	6093      	str	r3, [r2, #8]
    conv2d_8_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 56136);
 80104a2:	4b07      	ldr	r3, [pc, #28]	; (80104c0 <face_detection_configure_weights+0x53c>)
 80104a4:	681a      	ldr	r2, [r3, #0]
 80104a6:	f64d 3348 	movw	r3, #56136	; 0xdb48
 80104aa:	4413      	add	r3, r2
 80104ac:	4a14      	ldr	r2, [pc, #80]	; (8010500 <face_detection_configure_weights+0x57c>)
 80104ae:	60d3      	str	r3, [r2, #12]
    
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 80104b0:	4b14      	ldr	r3, [pc, #80]	; (8010504 <face_detection_configure_weights+0x580>)
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80104b8:	4a12      	ldr	r2, [pc, #72]	; (8010504 <face_detection_configure_weights+0x580>)
 80104ba:	6013      	str	r3, [r2, #0]
 80104bc:	e024      	b.n	8010508 <face_detection_configure_weights+0x584>
 80104be:	bf00      	nop
 80104c0:	2407d990 	.word	0x2407d990
 80104c4:	24000608 	.word	0x24000608
 80104c8:	24000628 	.word	0x24000628
 80104cc:	24000648 	.word	0x24000648
 80104d0:	24000668 	.word	0x24000668
 80104d4:	24000688 	.word	0x24000688
 80104d8:	240006a8 	.word	0x240006a8
 80104dc:	240006c8 	.word	0x240006c8
 80104e0:	240006e8 	.word	0x240006e8
 80104e4:	24000708 	.word	0x24000708
 80104e8:	24000728 	.word	0x24000728
 80104ec:	24000748 	.word	0x24000748
 80104f0:	24000768 	.word	0x24000768
 80104f4:	24000798 	.word	0x24000798
 80104f8:	240007c8 	.word	0x240007c8
 80104fc:	240007f8 	.word	0x240007f8
 8010500:	24000828 	.word	0x24000828
 8010504:	24000858 	.word	0x24000858
    conv2d_8_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 57864);
 8010508:	4b64      	ldr	r3, [pc, #400]	; (801069c <face_detection_configure_weights+0x718>)
 801050a:	681a      	ldr	r2, [r3, #0]
 801050c:	f24e 2308 	movw	r3, #57864	; 0xe208
 8010510:	4413      	add	r3, r2
 8010512:	4a63      	ldr	r2, [pc, #396]	; (80106a0 <face_detection_configure_weights+0x71c>)
 8010514:	6093      	str	r3, [r2, #8]
    conv2d_8_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 57864);
 8010516:	4b61      	ldr	r3, [pc, #388]	; (801069c <face_detection_configure_weights+0x718>)
 8010518:	681a      	ldr	r2, [r3, #0]
 801051a:	f24e 2308 	movw	r3, #57864	; 0xe208
 801051e:	4413      	add	r3, r2
 8010520:	4a5f      	ldr	r2, [pc, #380]	; (80106a0 <face_detection_configure_weights+0x71c>)
 8010522:	60d3      	str	r3, [r2, #12]
    
    conv2d_9_weights_array.format |= AI_FMT_FLAG_CONST;
 8010524:	4b5f      	ldr	r3, [pc, #380]	; (80106a4 <face_detection_configure_weights+0x720>)
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801052c:	4a5d      	ldr	r2, [pc, #372]	; (80106a4 <face_detection_configure_weights+0x720>)
 801052e:	6013      	str	r3, [r2, #0]
    conv2d_9_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 58056);
 8010530:	4b5a      	ldr	r3, [pc, #360]	; (801069c <face_detection_configure_weights+0x718>)
 8010532:	681a      	ldr	r2, [r3, #0]
 8010534:	f24e 23c8 	movw	r3, #58056	; 0xe2c8
 8010538:	4413      	add	r3, r2
 801053a:	4a5a      	ldr	r2, [pc, #360]	; (80106a4 <face_detection_configure_weights+0x720>)
 801053c:	6093      	str	r3, [r2, #8]
    conv2d_9_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 58056);
 801053e:	4b57      	ldr	r3, [pc, #348]	; (801069c <face_detection_configure_weights+0x718>)
 8010540:	681a      	ldr	r2, [r3, #0]
 8010542:	f24e 23c8 	movw	r3, #58056	; 0xe2c8
 8010546:	4413      	add	r3, r2
 8010548:	4a56      	ldr	r2, [pc, #344]	; (80106a4 <face_detection_configure_weights+0x720>)
 801054a:	60d3      	str	r3, [r2, #12]
    
    conv2d_9_bias_array.format |= AI_FMT_FLAG_CONST;
 801054c:	4b56      	ldr	r3, [pc, #344]	; (80106a8 <face_detection_configure_weights+0x724>)
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010554:	4a54      	ldr	r2, [pc, #336]	; (80106a8 <face_detection_configure_weights+0x724>)
 8010556:	6013      	str	r3, [r2, #0]
    conv2d_9_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 59592);
 8010558:	4b50      	ldr	r3, [pc, #320]	; (801069c <face_detection_configure_weights+0x718>)
 801055a:	681a      	ldr	r2, [r3, #0]
 801055c:	f64e 03c8 	movw	r3, #59592	; 0xe8c8
 8010560:	4413      	add	r3, r2
 8010562:	4a51      	ldr	r2, [pc, #324]	; (80106a8 <face_detection_configure_weights+0x724>)
 8010564:	6093      	str	r3, [r2, #8]
    conv2d_9_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 59592);
 8010566:	4b4d      	ldr	r3, [pc, #308]	; (801069c <face_detection_configure_weights+0x718>)
 8010568:	681a      	ldr	r2, [r3, #0]
 801056a:	f64e 03c8 	movw	r3, #59592	; 0xe8c8
 801056e:	4413      	add	r3, r2
 8010570:	4a4d      	ldr	r2, [pc, #308]	; (80106a8 <face_detection_configure_weights+0x724>)
 8010572:	60d3      	str	r3, [r2, #12]
    
    conv2d_11_weights_array.format |= AI_FMT_FLAG_CONST;
 8010574:	4b4d      	ldr	r3, [pc, #308]	; (80106ac <face_detection_configure_weights+0x728>)
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801057c:	4a4b      	ldr	r2, [pc, #300]	; (80106ac <face_detection_configure_weights+0x728>)
 801057e:	6013      	str	r3, [r2, #0]
    conv2d_11_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 59624);
 8010580:	4b46      	ldr	r3, [pc, #280]	; (801069c <face_detection_configure_weights+0x718>)
 8010582:	681a      	ldr	r2, [r3, #0]
 8010584:	f64e 03e8 	movw	r3, #59624	; 0xe8e8
 8010588:	4413      	add	r3, r2
 801058a:	4a48      	ldr	r2, [pc, #288]	; (80106ac <face_detection_configure_weights+0x728>)
 801058c:	6093      	str	r3, [r2, #8]
    conv2d_11_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 59624);
 801058e:	4b43      	ldr	r3, [pc, #268]	; (801069c <face_detection_configure_weights+0x718>)
 8010590:	681a      	ldr	r2, [r3, #0]
 8010592:	f64e 03e8 	movw	r3, #59624	; 0xe8e8
 8010596:	4413      	add	r3, r2
 8010598:	4a44      	ldr	r2, [pc, #272]	; (80106ac <face_detection_configure_weights+0x728>)
 801059a:	60d3      	str	r3, [r2, #12]
    
    conv2d_11_bias_array.format |= AI_FMT_FLAG_CONST;
 801059c:	4b44      	ldr	r3, [pc, #272]	; (80106b0 <face_detection_configure_weights+0x72c>)
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80105a4:	4a42      	ldr	r2, [pc, #264]	; (80106b0 <face_detection_configure_weights+0x72c>)
 80105a6:	6013      	str	r3, [r2, #0]
    conv2d_11_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 61160);
 80105a8:	4b3c      	ldr	r3, [pc, #240]	; (801069c <face_detection_configure_weights+0x718>)
 80105aa:	681a      	ldr	r2, [r3, #0]
 80105ac:	f64e 63e8 	movw	r3, #61160	; 0xeee8
 80105b0:	4413      	add	r3, r2
 80105b2:	4a3f      	ldr	r2, [pc, #252]	; (80106b0 <face_detection_configure_weights+0x72c>)
 80105b4:	6093      	str	r3, [r2, #8]
    conv2d_11_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 61160);
 80105b6:	4b39      	ldr	r3, [pc, #228]	; (801069c <face_detection_configure_weights+0x718>)
 80105b8:	681a      	ldr	r2, [r3, #0]
 80105ba:	f64e 63e8 	movw	r3, #61160	; 0xeee8
 80105be:	4413      	add	r3, r2
 80105c0:	4a3b      	ldr	r2, [pc, #236]	; (80106b0 <face_detection_configure_weights+0x72c>)
 80105c2:	60d3      	str	r3, [r2, #12]
    
    conv2d_13_weights_array.format |= AI_FMT_FLAG_CONST;
 80105c4:	4b3b      	ldr	r3, [pc, #236]	; (80106b4 <face_detection_configure_weights+0x730>)
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80105cc:	4a39      	ldr	r2, [pc, #228]	; (80106b4 <face_detection_configure_weights+0x730>)
 80105ce:	6013      	str	r3, [r2, #0]
    conv2d_13_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 61352);
 80105d0:	4b32      	ldr	r3, [pc, #200]	; (801069c <face_detection_configure_weights+0x718>)
 80105d2:	681a      	ldr	r2, [r3, #0]
 80105d4:	f64e 73a8 	movw	r3, #61352	; 0xefa8
 80105d8:	4413      	add	r3, r2
 80105da:	4a36      	ldr	r2, [pc, #216]	; (80106b4 <face_detection_configure_weights+0x730>)
 80105dc:	6093      	str	r3, [r2, #8]
    conv2d_13_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 61352);
 80105de:	4b2f      	ldr	r3, [pc, #188]	; (801069c <face_detection_configure_weights+0x718>)
 80105e0:	681a      	ldr	r2, [r3, #0]
 80105e2:	f64e 73a8 	movw	r3, #61352	; 0xefa8
 80105e6:	4413      	add	r3, r2
 80105e8:	4a32      	ldr	r2, [pc, #200]	; (80106b4 <face_detection_configure_weights+0x730>)
 80105ea:	60d3      	str	r3, [r2, #12]
    
    conv2d_13_bias_array.format |= AI_FMT_FLAG_CONST;
 80105ec:	4b32      	ldr	r3, [pc, #200]	; (80106b8 <face_detection_configure_weights+0x734>)
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80105f4:	4a30      	ldr	r2, [pc, #192]	; (80106b8 <face_detection_configure_weights+0x734>)
 80105f6:	6013      	str	r3, [r2, #0]
    conv2d_13_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 63080);
 80105f8:	4b28      	ldr	r3, [pc, #160]	; (801069c <face_detection_configure_weights+0x718>)
 80105fa:	681a      	ldr	r2, [r3, #0]
 80105fc:	f24f 6368 	movw	r3, #63080	; 0xf668
 8010600:	4413      	add	r3, r2
 8010602:	4a2d      	ldr	r2, [pc, #180]	; (80106b8 <face_detection_configure_weights+0x734>)
 8010604:	6093      	str	r3, [r2, #8]
    conv2d_13_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 63080);
 8010606:	4b25      	ldr	r3, [pc, #148]	; (801069c <face_detection_configure_weights+0x718>)
 8010608:	681a      	ldr	r2, [r3, #0]
 801060a:	f24f 6368 	movw	r3, #63080	; 0xf668
 801060e:	4413      	add	r3, r2
 8010610:	4a29      	ldr	r2, [pc, #164]	; (80106b8 <face_detection_configure_weights+0x734>)
 8010612:	60d3      	str	r3, [r2, #12]
    
    conv2d_14_weights_array.format |= AI_FMT_FLAG_CONST;
 8010614:	4b29      	ldr	r3, [pc, #164]	; (80106bc <face_detection_configure_weights+0x738>)
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801061c:	4a27      	ldr	r2, [pc, #156]	; (80106bc <face_detection_configure_weights+0x738>)
 801061e:	6013      	str	r3, [r2, #0]
    conv2d_14_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 63272);
 8010620:	4b1e      	ldr	r3, [pc, #120]	; (801069c <face_detection_configure_weights+0x718>)
 8010622:	681a      	ldr	r2, [r3, #0]
 8010624:	f24f 7328 	movw	r3, #63272	; 0xf728
 8010628:	4413      	add	r3, r2
 801062a:	4a24      	ldr	r2, [pc, #144]	; (80106bc <face_detection_configure_weights+0x738>)
 801062c:	6093      	str	r3, [r2, #8]
    conv2d_14_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 63272);
 801062e:	4b1b      	ldr	r3, [pc, #108]	; (801069c <face_detection_configure_weights+0x718>)
 8010630:	681a      	ldr	r2, [r3, #0]
 8010632:	f24f 7328 	movw	r3, #63272	; 0xf728
 8010636:	4413      	add	r3, r2
 8010638:	4a20      	ldr	r2, [pc, #128]	; (80106bc <face_detection_configure_weights+0x738>)
 801063a:	60d3      	str	r3, [r2, #12]
    
    conv2d_14_bias_array.format |= AI_FMT_FLAG_CONST;
 801063c:	4b20      	ldr	r3, [pc, #128]	; (80106c0 <face_detection_configure_weights+0x73c>)
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010644:	4a1e      	ldr	r2, [pc, #120]	; (80106c0 <face_detection_configure_weights+0x73c>)
 8010646:	6013      	str	r3, [r2, #0]
    conv2d_14_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 66344);
 8010648:	4b14      	ldr	r3, [pc, #80]	; (801069c <face_detection_configure_weights+0x718>)
 801064a:	681a      	ldr	r2, [r3, #0]
 801064c:	4b1d      	ldr	r3, [pc, #116]	; (80106c4 <face_detection_configure_weights+0x740>)
 801064e:	4413      	add	r3, r2
 8010650:	4a1b      	ldr	r2, [pc, #108]	; (80106c0 <face_detection_configure_weights+0x73c>)
 8010652:	6093      	str	r3, [r2, #8]
    conv2d_14_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 66344);
 8010654:	4b11      	ldr	r3, [pc, #68]	; (801069c <face_detection_configure_weights+0x718>)
 8010656:	681a      	ldr	r2, [r3, #0]
 8010658:	4b1a      	ldr	r3, [pc, #104]	; (80106c4 <face_detection_configure_weights+0x740>)
 801065a:	4413      	add	r3, r2
 801065c:	4a18      	ldr	r2, [pc, #96]	; (80106c0 <face_detection_configure_weights+0x73c>)
 801065e:	60d3      	str	r3, [r2, #12]
    
    conv2d_15_weights_array.format |= AI_FMT_FLAG_CONST;
 8010660:	4b19      	ldr	r3, [pc, #100]	; (80106c8 <face_detection_configure_weights+0x744>)
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010668:	4a17      	ldr	r2, [pc, #92]	; (80106c8 <face_detection_configure_weights+0x744>)
 801066a:	6013      	str	r3, [r2, #0]
    conv2d_15_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 66408);
 801066c:	4b0b      	ldr	r3, [pc, #44]	; (801069c <face_detection_configure_weights+0x718>)
 801066e:	681a      	ldr	r2, [r3, #0]
 8010670:	4b16      	ldr	r3, [pc, #88]	; (80106cc <face_detection_configure_weights+0x748>)
 8010672:	4413      	add	r3, r2
 8010674:	4a14      	ldr	r2, [pc, #80]	; (80106c8 <face_detection_configure_weights+0x744>)
 8010676:	6093      	str	r3, [r2, #8]
    conv2d_15_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 66408);
 8010678:	4b08      	ldr	r3, [pc, #32]	; (801069c <face_detection_configure_weights+0x718>)
 801067a:	681a      	ldr	r2, [r3, #0]
 801067c:	4b13      	ldr	r3, [pc, #76]	; (80106cc <face_detection_configure_weights+0x748>)
 801067e:	4413      	add	r3, r2
 8010680:	4a11      	ldr	r2, [pc, #68]	; (80106c8 <face_detection_configure_weights+0x744>)
 8010682:	60d3      	str	r3, [r2, #12]
    
    return true;
 8010684:	2301      	movs	r3, #1
 8010686:	e005      	b.n	8010694 <face_detection_configure_weights+0x710>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8010688:	2212      	movs	r2, #18
 801068a:	2130      	movs	r1, #48	; 0x30
 801068c:	6878      	ldr	r0, [r7, #4]
 801068e:	f000 fb75 	bl	8010d7c <ai_platform_network_set_error>
  return false;
 8010692:	2300      	movs	r3, #0
}
 8010694:	4618      	mov	r0, r3
 8010696:	3708      	adds	r7, #8
 8010698:	46bd      	mov	sp, r7
 801069a:	bd80      	pop	{r7, pc}
 801069c:	2407d990 	.word	0x2407d990
 80106a0:	24000858 	.word	0x24000858
 80106a4:	24000878 	.word	0x24000878
 80106a8:	24000888 	.word	0x24000888
 80106ac:	24000898 	.word	0x24000898
 80106b0:	240008a8 	.word	0x240008a8
 80106b4:	240008b8 	.word	0x240008b8
 80106b8:	240008c8 	.word	0x240008c8
 80106bc:	240008d8 	.word	0x240008d8
 80106c0:	240008e8 	.word	0x240008e8
 80106c4:	00010328 	.word	0x00010328
 80106c8:	240008f8 	.word	0x240008f8
 80106cc:	00010368 	.word	0x00010368

080106d0 <ai_face_detection_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_face_detection_get_error(ai_handle network)
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b082      	sub	sp, #8
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 80106d8:	6878      	ldr	r0, [r7, #4]
 80106da:	f000 fa43 	bl	8010b64 <ai_platform_network_get_error>
 80106de:	4603      	mov	r3, r0
}
 80106e0:	4618      	mov	r0, r3
 80106e2:	3708      	adds	r7, #8
 80106e4:	46bd      	mov	sp, r7
 80106e6:	bd80      	pop	{r7, pc}

080106e8 <ai_face_detection_create>:

AI_API_ENTRY
ai_error ai_face_detection_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b084      	sub	sp, #16
 80106ec:	af02      	add	r7, sp, #8
 80106ee:	6078      	str	r0, [r7, #4]
 80106f0:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80106f2:	2300      	movs	r3, #0
 80106f4:	9301      	str	r3, [sp, #4]
 80106f6:	2305      	movs	r3, #5
 80106f8:	9300      	str	r3, [sp, #0]
 80106fa:	2301      	movs	r3, #1
 80106fc:	4a04      	ldr	r2, [pc, #16]	; (8010710 <ai_face_detection_create+0x28>)
 80106fe:	6839      	ldr	r1, [r7, #0]
 8010700:	6878      	ldr	r0, [r7, #4]
 8010702:	f000 fe55 	bl	80113b0 <ai_platform_network_create>
 8010706:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8010708:	4618      	mov	r0, r3
 801070a:	3708      	adds	r7, #8
 801070c:	46bd      	mov	sp, r7
 801070e:	bd80      	pop	{r7, pc}
 8010710:	240025b0 	.word	0x240025b0

08010714 <ai_face_detection_create_and_init>:

AI_API_ENTRY
ai_error ai_face_detection_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8010714:	b580      	push	{r7, lr}
 8010716:	b096      	sub	sp, #88	; 0x58
 8010718:	af00      	add	r7, sp, #0
 801071a:	60f8      	str	r0, [r7, #12]
 801071c:	60b9      	str	r1, [r7, #8]
 801071e:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_face_detection_create(network, AI_FACE_DETECTION_DATA_CONFIG);
 8010720:	2100      	movs	r1, #0
 8010722:	68f8      	ldr	r0, [r7, #12]
 8010724:	f7ff ffe0 	bl	80106e8 <ai_face_detection_create>
 8010728:	4603      	mov	r3, r0
 801072a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 801072c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8010730:	2b00      	cmp	r3, #0
 8010732:	d001      	beq.n	8010738 <ai_face_detection_create_and_init+0x24>
        return err;
 8010734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010736:	e05d      	b.n	80107f4 <ai_face_detection_create_and_init+0xe0>
    if (ai_face_detection_data_params_get(&params) != true) {
 8010738:	f107 0314 	add.w	r3, r7, #20
 801073c:	4618      	mov	r0, r3
 801073e:	f000 f8cd 	bl	80108dc <ai_face_detection_data_params_get>
 8010742:	4603      	mov	r3, r0
 8010744:	f083 0301 	eor.w	r3, r3, #1
 8010748:	b2db      	uxtb	r3, r3
 801074a:	2b00      	cmp	r3, #0
 801074c:	d008      	beq.n	8010760 <ai_face_detection_create_and_init+0x4c>
        err = ai_face_detection_get_error(*network);
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	4618      	mov	r0, r3
 8010754:	f7ff ffbc 	bl	80106d0 <ai_face_detection_get_error>
 8010758:	4603      	mov	r3, r0
 801075a:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 801075c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801075e:	e049      	b.n	80107f4 <ai_face_detection_create_and_init+0xe0>
    }
#if defined(AI_FACE_DETECTION_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8010760:	68bb      	ldr	r3, [r7, #8]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d016      	beq.n	8010794 <ai_face_detection_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8010766:	2300      	movs	r3, #0
 8010768:	657b      	str	r3, [r7, #84]	; 0x54
 801076a:	e00e      	b.n	801078a <ai_face_detection_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 801076c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801076e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010770:	009b      	lsls	r3, r3, #2
 8010772:	68ba      	ldr	r2, [r7, #8]
 8010774:	4413      	add	r3, r2
 8010776:	681a      	ldr	r2, [r3, #0]
 8010778:	f107 0314 	add.w	r3, r7, #20
 801077c:	330c      	adds	r3, #12
 801077e:	4618      	mov	r0, r3
 8010780:	f000 f912 	bl	80109a8 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8010784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010786:	3301      	adds	r3, #1
 8010788:	657b      	str	r3, [r7, #84]	; 0x54
 801078a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801078c:	461a      	mov	r2, r3
 801078e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010790:	4293      	cmp	r3, r2
 8010792:	dbeb      	blt.n	801076c <ai_face_detection_create_and_init+0x58>
    }
#endif
#if defined(AI_FACE_DETECTION_DATA_WEIGHTS_COUNT)
    if (weights) {
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d016      	beq.n	80107c8 <ai_face_detection_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 801079a:	2300      	movs	r3, #0
 801079c:	653b      	str	r3, [r7, #80]	; 0x50
 801079e:	e00e      	b.n	80107be <ai_face_detection_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 80107a0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80107a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107a4:	009b      	lsls	r3, r3, #2
 80107a6:	687a      	ldr	r2, [r7, #4]
 80107a8:	4413      	add	r3, r2
 80107aa:	681a      	ldr	r2, [r3, #0]
 80107ac:	f107 0314 	add.w	r3, r7, #20
 80107b0:	3304      	adds	r3, #4
 80107b2:	4618      	mov	r0, r3
 80107b4:	f000 f8f8 	bl	80109a8 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 80107b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107ba:	3301      	adds	r3, #1
 80107bc:	653b      	str	r3, [r7, #80]	; 0x50
 80107be:	8b7b      	ldrh	r3, [r7, #26]
 80107c0:	461a      	mov	r2, r3
 80107c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107c4:	4293      	cmp	r3, r2
 80107c6:	dbeb      	blt.n	80107a0 <ai_face_detection_create_and_init+0x8c>
    }
#endif
    if (ai_face_detection_init(*network, &params) != true) {
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	f107 0214 	add.w	r2, r7, #20
 80107d0:	4611      	mov	r1, r2
 80107d2:	4618      	mov	r0, r3
 80107d4:	f000 f846 	bl	8010864 <ai_face_detection_init>
 80107d8:	4603      	mov	r3, r0
 80107da:	f083 0301 	eor.w	r3, r3, #1
 80107de:	b2db      	uxtb	r3, r3
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d006      	beq.n	80107f2 <ai_face_detection_create_and_init+0xde>
        err = ai_face_detection_get_error(*network);
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	4618      	mov	r0, r3
 80107ea:	f7ff ff71 	bl	80106d0 <ai_face_detection_get_error>
 80107ee:	4603      	mov	r3, r0
 80107f0:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 80107f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80107f4:	4618      	mov	r0, r3
 80107f6:	3758      	adds	r7, #88	; 0x58
 80107f8:	46bd      	mov	sp, r7
 80107fa:	bd80      	pop	{r7, pc}

080107fc <ai_face_detection_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_face_detection_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b082      	sub	sp, #8
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
 8010804:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d104      	bne.n	8010816 <ai_face_detection_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 801080c:	4b06      	ldr	r3, [pc, #24]	; (8010828 <ai_face_detection_inputs_get+0x2c>)
 801080e:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	4a06      	ldr	r2, [pc, #24]	; (801082c <ai_face_detection_inputs_get+0x30>)
 8010814:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8010816:	6839      	ldr	r1, [r7, #0]
 8010818:	6878      	ldr	r0, [r7, #4]
 801081a:	f000 fab5 	bl	8010d88 <ai_platform_inputs_get>
 801081e:	4603      	mov	r3, r0
}
 8010820:	4618      	mov	r0, r3
 8010822:	3708      	adds	r7, #8
 8010824:	46bd      	mov	sp, r7
 8010826:	bd80      	pop	{r7, pc}
 8010828:	240025b0 	.word	0x240025b0
 801082c:	a1c00100 	.word	0xa1c00100

08010830 <ai_face_detection_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_face_detection_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8010830:	b580      	push	{r7, lr}
 8010832:	b082      	sub	sp, #8
 8010834:	af00      	add	r7, sp, #0
 8010836:	6078      	str	r0, [r7, #4]
 8010838:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d104      	bne.n	801084a <ai_face_detection_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8010840:	4b06      	ldr	r3, [pc, #24]	; (801085c <ai_face_detection_outputs_get+0x2c>)
 8010842:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	4a06      	ldr	r2, [pc, #24]	; (8010860 <ai_face_detection_outputs_get+0x30>)
 8010848:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 801084a:	6839      	ldr	r1, [r7, #0]
 801084c:	6878      	ldr	r0, [r7, #4]
 801084e:	f000 fc27 	bl	80110a0 <ai_platform_outputs_get>
 8010852:	4603      	mov	r3, r0
}
 8010854:	4618      	mov	r0, r3
 8010856:	3708      	adds	r7, #8
 8010858:	46bd      	mov	sp, r7
 801085a:	bd80      	pop	{r7, pc}
 801085c:	240025b0 	.word	0x240025b0
 8010860:	a1c00100 	.word	0xa1c00100

08010864 <ai_face_detection_init>:
}

AI_API_ENTRY
ai_bool ai_face_detection_init(
  ai_handle network, const ai_network_params* params)
{
 8010864:	b580      	push	{r7, lr}
 8010866:	b084      	sub	sp, #16
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
 801086c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 801086e:	6839      	ldr	r1, [r7, #0]
 8010870:	6878      	ldr	r0, [r7, #4]
 8010872:	f000 ff77 	bl	8011764 <ai_platform_network_init>
 8010876:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d101      	bne.n	8010882 <ai_face_detection_init+0x1e>
 801087e:	2300      	movs	r3, #0
 8010880:	e028      	b.n	80108d4 <ai_face_detection_init+0x70>

  ai_bool ok = true;
 8010882:	2301      	movs	r3, #1
 8010884:	72fb      	strb	r3, [r7, #11]
  ok &= face_detection_configure_weights(net_ctx, params);
 8010886:	6839      	ldr	r1, [r7, #0]
 8010888:	68f8      	ldr	r0, [r7, #12]
 801088a:	f7ff fb7b 	bl	800ff84 <face_detection_configure_weights>
 801088e:	4603      	mov	r3, r0
 8010890:	461a      	mov	r2, r3
 8010892:	7afb      	ldrb	r3, [r7, #11]
 8010894:	4013      	ands	r3, r2
 8010896:	2b00      	cmp	r3, #0
 8010898:	bf14      	ite	ne
 801089a:	2301      	movne	r3, #1
 801089c:	2300      	moveq	r3, #0
 801089e:	72fb      	strb	r3, [r7, #11]
  ok &= face_detection_configure_activations(net_ctx, params);
 80108a0:	6839      	ldr	r1, [r7, #0]
 80108a2:	68f8      	ldr	r0, [r7, #12]
 80108a4:	f7ff fa08 	bl	800fcb8 <face_detection_configure_activations>
 80108a8:	4603      	mov	r3, r0
 80108aa:	461a      	mov	r2, r3
 80108ac:	7afb      	ldrb	r3, [r7, #11]
 80108ae:	4013      	ands	r3, r2
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	bf14      	ite	ne
 80108b4:	2301      	movne	r3, #1
 80108b6:	2300      	moveq	r3, #0
 80108b8:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80108ba:	6878      	ldr	r0, [r7, #4]
 80108bc:	f001 f8ee 	bl	8011a9c <ai_platform_network_post_init>
 80108c0:	4603      	mov	r3, r0
 80108c2:	461a      	mov	r2, r3
 80108c4:	7afb      	ldrb	r3, [r7, #11]
 80108c6:	4013      	ands	r3, r2
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	bf14      	ite	ne
 80108cc:	2301      	movne	r3, #1
 80108ce:	2300      	moveq	r3, #0
 80108d0:	72fb      	strb	r3, [r7, #11]

  return ok;
 80108d2:	7afb      	ldrb	r3, [r7, #11]
}
 80108d4:	4618      	mov	r0, r3
 80108d6:	3710      	adds	r7, #16
 80108d8:	46bd      	mov	sp, r7
 80108da:	bd80      	pop	{r7, pc}

080108dc <ai_face_detection_data_params_get>:
 * @ingroup face_detection_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_face_detection_data_params_get(ai_network_params* params)
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b086      	sub	sp, #24
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d101      	bne.n	80108ee <ai_face_detection_data_params_get+0x12>
 80108ea:	2300      	movs	r3, #0
 80108ec:	e016      	b.n	801091c <ai_face_detection_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 80108ee:	4a0d      	ldr	r2, [pc, #52]	; (8010924 <ai_face_detection_data_params_get+0x48>)
 80108f0:	f107 0310 	add.w	r3, r7, #16
 80108f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80108f8:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_FACE_DETECTION_DATA_ACTIVATIONS_COUNT, g_face_detection_data_map_activations);
  
  const ai_buffer_array map_weights = 
 80108fc:	4a0a      	ldr	r2, [pc, #40]	; (8010928 <ai_face_detection_data_params_get+0x4c>)
 80108fe:	f107 0308 	add.w	r3, r7, #8
 8010902:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010906:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_FACE_DETECTION_DATA_WEIGHTS_COUNT, g_face_detection_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 801090a:	f107 0210 	add.w	r2, r7, #16
 801090e:	f107 0308 	add.w	r3, r7, #8
 8010912:	4619      	mov	r1, r3
 8010914:	6878      	ldr	r0, [r7, #4]
 8010916:	f000 f90b 	bl	8010b30 <ai_platform_bind_network_params>
 801091a:	4603      	mov	r3, r0
}
 801091c:	4618      	mov	r0, r3
 801091e:	3718      	adds	r7, #24
 8010920:	46bd      	mov	sp, r7
 8010922:	bd80      	pop	{r7, pc}
 8010924:	08014708 	.word	0x08014708
 8010928:	08014710 	.word	0x08014710

0801092c <ai_buffer_get_size>:
 801092c:	b368      	cbz	r0, 801098a <ai_buffer_get_size+0x5e>
 801092e:	4b17      	ldr	r3, [pc, #92]	; (801098c <ai_buffer_get_size+0x60>)
 8010930:	4a17      	ldr	r2, [pc, #92]	; (8010990 <ai_buffer_get_size+0x64>)
 8010932:	b410      	push	{r4}
 8010934:	6804      	ldr	r4, [r0, #0]
 8010936:	4023      	ands	r3, r4
 8010938:	4293      	cmp	r3, r2
 801093a:	d123      	bne.n	8010984 <ai_buffer_get_size+0x58>
 801093c:	b311      	cbz	r1, 8010984 <ai_buffer_get_size+0x58>
 801093e:	6984      	ldr	r4, [r0, #24]
 8010940:	6862      	ldr	r2, [r4, #4]
 8010942:	321f      	adds	r2, #31
 8010944:	f022 021f 	bic.w	r2, r2, #31
 8010948:	7d03      	ldrb	r3, [r0, #20]
 801094a:	6941      	ldr	r1, [r0, #20]
 801094c:	f1a3 0301 	sub.w	r3, r3, #1
 8010950:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8010954:	fab3 f383 	clz	r3, r3
 8010958:	095b      	lsrs	r3, r3, #5
 801095a:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 801095e:	da0c      	bge.n	801097a <ai_buffer_get_size+0x4e>
 8010960:	2b01      	cmp	r3, #1
 8010962:	d103      	bne.n	801096c <ai_buffer_get_size+0x40>
 8010964:	2802      	cmp	r0, #2
 8010966:	f04f 0302 	mov.w	r3, #2
 801096a:	d006      	beq.n	801097a <ai_buffer_get_size+0x4e>
 801096c:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8010970:	3301      	adds	r3, #1
 8010972:	4298      	cmp	r0, r3
 8010974:	fb01 f202 	mul.w	r2, r1, r2
 8010978:	d1f2      	bne.n	8010960 <ai_buffer_get_size+0x34>
 801097a:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 801097e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010982:	4770      	bx	lr
 8010984:	6984      	ldr	r4, [r0, #24]
 8010986:	6862      	ldr	r2, [r4, #4]
 8010988:	e7de      	b.n	8010948 <ai_buffer_get_size+0x1c>
 801098a:	4770      	bx	lr
 801098c:	017fffff 	.word	0x017fffff
 8010990:	000400c0 	.word	0x000400c0

08010994 <ai_buffer_array_sane>:
 8010994:	b138      	cbz	r0, 80109a6 <ai_buffer_array_sane+0x12>
 8010996:	6843      	ldr	r3, [r0, #4]
 8010998:	b123      	cbz	r3, 80109a4 <ai_buffer_array_sane+0x10>
 801099a:	8840      	ldrh	r0, [r0, #2]
 801099c:	3800      	subs	r0, #0
 801099e:	bf18      	it	ne
 80109a0:	2001      	movne	r0, #1
 80109a2:	4770      	bx	lr
 80109a4:	4618      	mov	r0, r3
 80109a6:	4770      	bx	lr

080109a8 <ai_buffer_array_item_set_address>:
 80109a8:	b150      	cbz	r0, 80109c0 <ai_buffer_array_item_set_address+0x18>
 80109aa:	6843      	ldr	r3, [r0, #4]
 80109ac:	b14b      	cbz	r3, 80109c2 <ai_buffer_array_item_set_address+0x1a>
 80109ae:	8840      	ldrh	r0, [r0, #2]
 80109b0:	b900      	cbnz	r0, 80109b4 <ai_buffer_array_item_set_address+0xc>
 80109b2:	4770      	bx	lr
 80109b4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80109b8:	2001      	movs	r0, #1
 80109ba:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80109be:	604a      	str	r2, [r1, #4]
 80109c0:	4770      	bx	lr
 80109c2:	4618      	mov	r0, r3
 80109c4:	4770      	bx	lr
 80109c6:	bf00      	nop

080109c8 <_ai_platform_acquire_crc>:
 80109c8:	2001      	movs	r0, #1
 80109ca:	4770      	bx	lr

080109cc <_ai_platform_release_crc>:
 80109cc:	4770      	bx	lr
 80109ce:	bf00      	nop

080109d0 <ai_platform_get_weights_map>:
 80109d0:	2900      	cmp	r1, #0
 80109d2:	bf18      	it	ne
 80109d4:	2800      	cmpne	r0, #0
 80109d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109d8:	bf0c      	ite	eq
 80109da:	2401      	moveq	r4, #1
 80109dc:	2400      	movne	r4, #0
 80109de:	2a00      	cmp	r2, #0
 80109e0:	bf08      	it	eq
 80109e2:	f044 0401 	orreq.w	r4, r4, #1
 80109e6:	b114      	cbz	r4, 80109ee <ai_platform_get_weights_map+0x1e>
 80109e8:	2400      	movs	r4, #0
 80109ea:	4620      	mov	r0, r4
 80109ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109ee:	4616      	mov	r6, r2
 80109f0:	4b22      	ldr	r3, [pc, #136]	; (8010a7c <ai_platform_get_weights_map+0xac>)
 80109f2:	6812      	ldr	r2, [r2, #0]
 80109f4:	4605      	mov	r5, r0
 80109f6:	460f      	mov	r7, r1
 80109f8:	429a      	cmp	r2, r3
 80109fa:	d022      	beq.n	8010a42 <ai_platform_get_weights_map+0x72>
 80109fc:	6870      	ldr	r0, [r6, #4]
 80109fe:	2800      	cmp	r0, #0
 8010a00:	d0f2      	beq.n	80109e8 <ai_platform_get_weights_map+0x18>
 8010a02:	6806      	ldr	r6, [r0, #0]
 8010a04:	429e      	cmp	r6, r3
 8010a06:	d006      	beq.n	8010a16 <ai_platform_get_weights_map+0x46>
 8010a08:	f1a1 0401 	sub.w	r4, r1, #1
 8010a0c:	6028      	str	r0, [r5, #0]
 8010a0e:	fab4 f484 	clz	r4, r4
 8010a12:	0964      	lsrs	r4, r4, #5
 8010a14:	e7e9      	b.n	80109ea <ai_platform_get_weights_map+0x1a>
 8010a16:	3d04      	subs	r5, #4
 8010a18:	4602      	mov	r2, r0
 8010a1a:	4621      	mov	r1, r4
 8010a1c:	e000      	b.n	8010a20 <ai_platform_get_weights_map+0x50>
 8010a1e:	4619      	mov	r1, r3
 8010a20:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8010a24:	42b3      	cmp	r3, r6
 8010a26:	d025      	beq.n	8010a74 <ai_platform_get_weights_map+0xa4>
 8010a28:	f845 3f04 	str.w	r3, [r5, #4]!
 8010a2c:	1c4b      	adds	r3, r1, #1
 8010a2e:	429f      	cmp	r7, r3
 8010a30:	d8f5      	bhi.n	8010a1e <ai_platform_get_weights_map+0x4e>
 8010a32:	d1da      	bne.n	80109ea <ai_platform_get_weights_map+0x1a>
 8010a34:	3102      	adds	r1, #2
 8010a36:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8010a3a:	42b3      	cmp	r3, r6
 8010a3c:	d1d5      	bne.n	80109ea <ai_platform_get_weights_map+0x1a>
 8010a3e:	2401      	movs	r4, #1
 8010a40:	e7d3      	b.n	80109ea <ai_platform_get_weights_map+0x1a>
 8010a42:	1d30      	adds	r0, r6, #4
 8010a44:	f7ff ffa6 	bl	8010994 <ai_buffer_array_sane>
 8010a48:	2800      	cmp	r0, #0
 8010a4a:	d0cd      	beq.n	80109e8 <ai_platform_get_weights_map+0x18>
 8010a4c:	88f3      	ldrh	r3, [r6, #6]
 8010a4e:	429f      	cmp	r7, r3
 8010a50:	d1ca      	bne.n	80109e8 <ai_platform_get_weights_map+0x18>
 8010a52:	3d04      	subs	r5, #4
 8010a54:	4622      	mov	r2, r4
 8010a56:	68b3      	ldr	r3, [r6, #8]
 8010a58:	4423      	add	r3, r4
 8010a5a:	341c      	adds	r4, #28
 8010a5c:	685b      	ldr	r3, [r3, #4]
 8010a5e:	b123      	cbz	r3, 8010a6a <ai_platform_get_weights_map+0x9a>
 8010a60:	3201      	adds	r2, #1
 8010a62:	f845 3f04 	str.w	r3, [r5, #4]!
 8010a66:	4297      	cmp	r7, r2
 8010a68:	d8f5      	bhi.n	8010a56 <ai_platform_get_weights_map+0x86>
 8010a6a:	1abc      	subs	r4, r7, r2
 8010a6c:	fab4 f484 	clz	r4, r4
 8010a70:	0964      	lsrs	r4, r4, #5
 8010a72:	e7ba      	b.n	80109ea <ai_platform_get_weights_map+0x1a>
 8010a74:	428f      	cmp	r7, r1
 8010a76:	d1b8      	bne.n	80109ea <ai_platform_get_weights_map+0x1a>
 8010a78:	e7e1      	b.n	8010a3e <ai_platform_get_weights_map+0x6e>
 8010a7a:	bf00      	nop
 8010a7c:	a1facade 	.word	0xa1facade

08010a80 <ai_platform_get_activations_map>:
 8010a80:	2900      	cmp	r1, #0
 8010a82:	bf18      	it	ne
 8010a84:	2800      	cmpne	r0, #0
 8010a86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a88:	bf0c      	ite	eq
 8010a8a:	2401      	moveq	r4, #1
 8010a8c:	2400      	movne	r4, #0
 8010a8e:	2a00      	cmp	r2, #0
 8010a90:	bf08      	it	eq
 8010a92:	f044 0401 	orreq.w	r4, r4, #1
 8010a96:	b114      	cbz	r4, 8010a9e <ai_platform_get_activations_map+0x1e>
 8010a98:	2400      	movs	r4, #0
 8010a9a:	4620      	mov	r0, r4
 8010a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a9e:	4616      	mov	r6, r2
 8010aa0:	4b22      	ldr	r3, [pc, #136]	; (8010b2c <ai_platform_get_activations_map+0xac>)
 8010aa2:	6812      	ldr	r2, [r2, #0]
 8010aa4:	4605      	mov	r5, r0
 8010aa6:	460f      	mov	r7, r1
 8010aa8:	429a      	cmp	r2, r3
 8010aaa:	d022      	beq.n	8010af2 <ai_platform_get_activations_map+0x72>
 8010aac:	6a30      	ldr	r0, [r6, #32]
 8010aae:	2800      	cmp	r0, #0
 8010ab0:	d0f2      	beq.n	8010a98 <ai_platform_get_activations_map+0x18>
 8010ab2:	6806      	ldr	r6, [r0, #0]
 8010ab4:	429e      	cmp	r6, r3
 8010ab6:	d006      	beq.n	8010ac6 <ai_platform_get_activations_map+0x46>
 8010ab8:	f1a1 0401 	sub.w	r4, r1, #1
 8010abc:	6028      	str	r0, [r5, #0]
 8010abe:	fab4 f484 	clz	r4, r4
 8010ac2:	0964      	lsrs	r4, r4, #5
 8010ac4:	e7e9      	b.n	8010a9a <ai_platform_get_activations_map+0x1a>
 8010ac6:	3d04      	subs	r5, #4
 8010ac8:	4602      	mov	r2, r0
 8010aca:	4621      	mov	r1, r4
 8010acc:	e000      	b.n	8010ad0 <ai_platform_get_activations_map+0x50>
 8010ace:	4619      	mov	r1, r3
 8010ad0:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8010ad4:	42b3      	cmp	r3, r6
 8010ad6:	d026      	beq.n	8010b26 <ai_platform_get_activations_map+0xa6>
 8010ad8:	f845 3f04 	str.w	r3, [r5, #4]!
 8010adc:	1c4b      	adds	r3, r1, #1
 8010ade:	429f      	cmp	r7, r3
 8010ae0:	d8f5      	bhi.n	8010ace <ai_platform_get_activations_map+0x4e>
 8010ae2:	d1da      	bne.n	8010a9a <ai_platform_get_activations_map+0x1a>
 8010ae4:	3102      	adds	r1, #2
 8010ae6:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8010aea:	42b3      	cmp	r3, r6
 8010aec:	d1d5      	bne.n	8010a9a <ai_platform_get_activations_map+0x1a>
 8010aee:	2401      	movs	r4, #1
 8010af0:	e7d3      	b.n	8010a9a <ai_platform_get_activations_map+0x1a>
 8010af2:	f106 000c 	add.w	r0, r6, #12
 8010af6:	f7ff ff4d 	bl	8010994 <ai_buffer_array_sane>
 8010afa:	2800      	cmp	r0, #0
 8010afc:	d0cc      	beq.n	8010a98 <ai_platform_get_activations_map+0x18>
 8010afe:	89f3      	ldrh	r3, [r6, #14]
 8010b00:	429f      	cmp	r7, r3
 8010b02:	d1c9      	bne.n	8010a98 <ai_platform_get_activations_map+0x18>
 8010b04:	3d04      	subs	r5, #4
 8010b06:	4622      	mov	r2, r4
 8010b08:	6933      	ldr	r3, [r6, #16]
 8010b0a:	4423      	add	r3, r4
 8010b0c:	341c      	adds	r4, #28
 8010b0e:	685b      	ldr	r3, [r3, #4]
 8010b10:	b123      	cbz	r3, 8010b1c <ai_platform_get_activations_map+0x9c>
 8010b12:	3201      	adds	r2, #1
 8010b14:	f845 3f04 	str.w	r3, [r5, #4]!
 8010b18:	4297      	cmp	r7, r2
 8010b1a:	d8f5      	bhi.n	8010b08 <ai_platform_get_activations_map+0x88>
 8010b1c:	1abc      	subs	r4, r7, r2
 8010b1e:	fab4 f484 	clz	r4, r4
 8010b22:	0964      	lsrs	r4, r4, #5
 8010b24:	e7b9      	b.n	8010a9a <ai_platform_get_activations_map+0x1a>
 8010b26:	428f      	cmp	r7, r1
 8010b28:	d1b7      	bne.n	8010a9a <ai_platform_get_activations_map+0x1a>
 8010b2a:	e7e0      	b.n	8010aee <ai_platform_get_activations_map+0x6e>
 8010b2c:	a1facade 	.word	0xa1facade

08010b30 <ai_platform_bind_network_params>:
 8010b30:	2a00      	cmp	r2, #0
 8010b32:	bf18      	it	ne
 8010b34:	2900      	cmpne	r1, #0
 8010b36:	d010      	beq.n	8010b5a <ai_platform_bind_network_params+0x2a>
 8010b38:	b178      	cbz	r0, 8010b5a <ai_platform_bind_network_params+0x2a>
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	4808      	ldr	r0, [pc, #32]	; (8010b60 <ai_platform_bind_network_params+0x30>)
 8010b3e:	f103 0c0c 	add.w	ip, r3, #12
 8010b42:	f843 0b04 	str.w	r0, [r3], #4
 8010b46:	c903      	ldmia	r1, {r0, r1}
 8010b48:	e883 0003 	stmia.w	r3, {r0, r1}
 8010b4c:	2301      	movs	r3, #1
 8010b4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010b52:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010b56:	4618      	mov	r0, r3
 8010b58:	4770      	bx	lr
 8010b5a:	2300      	movs	r3, #0
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	4770      	bx	lr
 8010b60:	a1facade 	.word	0xa1facade

08010b64 <ai_platform_network_get_error>:
 8010b64:	b510      	push	{r4, lr}
 8010b66:	2800      	cmp	r0, #0
 8010b68:	d03f      	beq.n	8010bea <ai_platform_network_get_error+0x86>
 8010b6a:	4b7d      	ldr	r3, [pc, #500]	; (8010d60 <ai_platform_network_get_error+0x1fc>)
 8010b6c:	4604      	mov	r4, r0
 8010b6e:	6802      	ldr	r2, [r0, #0]
 8010b70:	429a      	cmp	r2, r3
 8010b72:	d13a      	bne.n	8010bea <ai_platform_network_get_error+0x86>
 8010b74:	f7ff ff28 	bl	80109c8 <_ai_platform_acquire_crc>
 8010b78:	4b7a      	ldr	r3, [pc, #488]	; (8010d64 <ai_platform_network_get_error+0x200>)
 8010b7a:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010b84:	189a      	adds	r2, r3, r2
 8010b86:	2a01      	cmp	r2, #1
 8010b88:	f240 8086 	bls.w	8010c98 <ai_platform_network_get_error+0x134>
 8010b8c:	f240 4249 	movw	r2, #1097	; 0x449
 8010b90:	4293      	cmp	r3, r2
 8010b92:	f000 8081 	beq.w	8010c98 <ai_platform_network_get_error+0x134>
 8010b96:	4a74      	ldr	r2, [pc, #464]	; (8010d68 <ai_platform_network_get_error+0x204>)
 8010b98:	6813      	ldr	r3, [r2, #0]
 8010b9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010b9e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8010ba2:	f000 8087 	beq.w	8010cb4 <ai_platform_network_get_error+0x150>
 8010ba6:	6813      	ldr	r3, [r2, #0]
 8010ba8:	f240 4183 	movw	r1, #1155	; 0x483
 8010bac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010bb0:	428b      	cmp	r3, r1
 8010bb2:	f000 80a9 	beq.w	8010d08 <ai_platform_network_get_error+0x1a4>
 8010bb6:	6813      	ldr	r3, [r2, #0]
 8010bb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010bbc:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8010bc0:	f000 80c0 	beq.w	8010d44 <ai_platform_network_get_error+0x1e0>
 8010bc4:	6813      	ldr	r3, [r2, #0]
 8010bc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	f040 8082 	bne.w	8010cd4 <ai_platform_network_get_error+0x170>
 8010bd0:	4a66      	ldr	r2, [pc, #408]	; (8010d6c <ai_platform_network_get_error+0x208>)
 8010bd2:	2301      	movs	r3, #1
 8010bd4:	6093      	str	r3, [r2, #8]
 8010bd6:	6893      	ldr	r3, [r2, #8]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d1fc      	bne.n	8010bd6 <ai_platform_network_get_error+0x72>
 8010bdc:	4964      	ldr	r1, [pc, #400]	; (8010d70 <ai_platform_network_get_error+0x20c>)
 8010bde:	4b65      	ldr	r3, [pc, #404]	; (8010d74 <ai_platform_network_get_error+0x210>)
 8010be0:	6011      	str	r1, [r2, #0]
 8010be2:	6812      	ldr	r2, [r2, #0]
 8010be4:	429a      	cmp	r2, r3
 8010be6:	d075      	beq.n	8010cd4 <ai_platform_network_get_error+0x170>
 8010be8:	e7fe      	b.n	8010be8 <ai_platform_network_get_error+0x84>
 8010bea:	f7ff feed 	bl	80109c8 <_ai_platform_acquire_crc>
 8010bee:	4b5d      	ldr	r3, [pc, #372]	; (8010d64 <ai_platform_network_get_error+0x200>)
 8010bf0:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010bfa:	185a      	adds	r2, r3, r1
 8010bfc:	2a01      	cmp	r2, #1
 8010bfe:	d929      	bls.n	8010c54 <ai_platform_network_get_error+0xf0>
 8010c00:	f240 4249 	movw	r2, #1097	; 0x449
 8010c04:	4293      	cmp	r3, r2
 8010c06:	d025      	beq.n	8010c54 <ai_platform_network_get_error+0xf0>
 8010c08:	4a57      	ldr	r2, [pc, #348]	; (8010d68 <ai_platform_network_get_error+0x204>)
 8010c0a:	6813      	ldr	r3, [r2, #0]
 8010c0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010c10:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8010c14:	d02b      	beq.n	8010c6e <ai_platform_network_get_error+0x10a>
 8010c16:	6813      	ldr	r3, [r2, #0]
 8010c18:	f240 4183 	movw	r1, #1155	; 0x483
 8010c1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010c20:	428b      	cmp	r3, r1
 8010c22:	d060      	beq.n	8010ce6 <ai_platform_network_get_error+0x182>
 8010c24:	6813      	ldr	r3, [r2, #0]
 8010c26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010c2a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8010c2e:	d07c      	beq.n	8010d2a <ai_platform_network_get_error+0x1c6>
 8010c30:	6813      	ldr	r3, [r2, #0]
 8010c32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d129      	bne.n	8010c8e <ai_platform_network_get_error+0x12a>
 8010c3a:	4a4c      	ldr	r2, [pc, #304]	; (8010d6c <ai_platform_network_get_error+0x208>)
 8010c3c:	2301      	movs	r3, #1
 8010c3e:	6093      	str	r3, [r2, #8]
 8010c40:	6893      	ldr	r3, [r2, #8]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d1fc      	bne.n	8010c40 <ai_platform_network_get_error+0xdc>
 8010c46:	494a      	ldr	r1, [pc, #296]	; (8010d70 <ai_platform_network_get_error+0x20c>)
 8010c48:	4b4a      	ldr	r3, [pc, #296]	; (8010d74 <ai_platform_network_get_error+0x210>)
 8010c4a:	6011      	str	r1, [r2, #0]
 8010c4c:	6812      	ldr	r2, [r2, #0]
 8010c4e:	429a      	cmp	r2, r3
 8010c50:	d01d      	beq.n	8010c8e <ai_platform_network_get_error+0x12a>
 8010c52:	e7fe      	b.n	8010c52 <ai_platform_network_get_error+0xee>
 8010c54:	4a45      	ldr	r2, [pc, #276]	; (8010d6c <ai_platform_network_get_error+0x208>)
 8010c56:	2301      	movs	r3, #1
 8010c58:	6093      	str	r3, [r2, #8]
 8010c5a:	6893      	ldr	r3, [r2, #8]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d1fc      	bne.n	8010c5a <ai_platform_network_get_error+0xf6>
 8010c60:	4943      	ldr	r1, [pc, #268]	; (8010d70 <ai_platform_network_get_error+0x20c>)
 8010c62:	4b44      	ldr	r3, [pc, #272]	; (8010d74 <ai_platform_network_get_error+0x210>)
 8010c64:	6011      	str	r1, [r2, #0]
 8010c66:	6812      	ldr	r2, [r2, #0]
 8010c68:	429a      	cmp	r2, r3
 8010c6a:	d010      	beq.n	8010c8e <ai_platform_network_get_error+0x12a>
 8010c6c:	e7fe      	b.n	8010c6c <ai_platform_network_get_error+0x108>
 8010c6e:	4a42      	ldr	r2, [pc, #264]	; (8010d78 <ai_platform_network_get_error+0x214>)
 8010c70:	2301      	movs	r3, #1
 8010c72:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8010c76:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d1fb      	bne.n	8010c76 <ai_platform_network_get_error+0x112>
 8010c7e:	493c      	ldr	r1, [pc, #240]	; (8010d70 <ai_platform_network_get_error+0x20c>)
 8010c80:	4b3c      	ldr	r3, [pc, #240]	; (8010d74 <ai_platform_network_get_error+0x210>)
 8010c82:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8010c86:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8010c8a:	429a      	cmp	r2, r3
 8010c8c:	d111      	bne.n	8010cb2 <ai_platform_network_get_error+0x14e>
 8010c8e:	f7ff fe9d 	bl	80109cc <_ai_platform_release_crc>
 8010c92:	f241 0010 	movw	r0, #4112	; 0x1010
 8010c96:	bd10      	pop	{r4, pc}
 8010c98:	4a34      	ldr	r2, [pc, #208]	; (8010d6c <ai_platform_network_get_error+0x208>)
 8010c9a:	2301      	movs	r3, #1
 8010c9c:	6093      	str	r3, [r2, #8]
 8010c9e:	6893      	ldr	r3, [r2, #8]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d1fc      	bne.n	8010c9e <ai_platform_network_get_error+0x13a>
 8010ca4:	4932      	ldr	r1, [pc, #200]	; (8010d70 <ai_platform_network_get_error+0x20c>)
 8010ca6:	4b33      	ldr	r3, [pc, #204]	; (8010d74 <ai_platform_network_get_error+0x210>)
 8010ca8:	6011      	str	r1, [r2, #0]
 8010caa:	6812      	ldr	r2, [r2, #0]
 8010cac:	429a      	cmp	r2, r3
 8010cae:	d011      	beq.n	8010cd4 <ai_platform_network_get_error+0x170>
 8010cb0:	e7fe      	b.n	8010cb0 <ai_platform_network_get_error+0x14c>
 8010cb2:	e7fe      	b.n	8010cb2 <ai_platform_network_get_error+0x14e>
 8010cb4:	4a30      	ldr	r2, [pc, #192]	; (8010d78 <ai_platform_network_get_error+0x214>)
 8010cb6:	2301      	movs	r3, #1
 8010cb8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8010cbc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d1fb      	bne.n	8010cbc <ai_platform_network_get_error+0x158>
 8010cc4:	492a      	ldr	r1, [pc, #168]	; (8010d70 <ai_platform_network_get_error+0x20c>)
 8010cc6:	4b2b      	ldr	r3, [pc, #172]	; (8010d74 <ai_platform_network_get_error+0x210>)
 8010cc8:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8010ccc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8010cd0:	429a      	cmp	r2, r3
 8010cd2:	d107      	bne.n	8010ce4 <ai_platform_network_get_error+0x180>
 8010cd4:	f7ff fe7a 	bl	80109cc <_ai_platform_release_crc>
 8010cd8:	f104 0010 	add.w	r0, r4, #16
 8010cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ce0:	f001 b808 	b.w	8011cf4 <core_get_error>
 8010ce4:	e7fe      	b.n	8010ce4 <ai_platform_network_get_error+0x180>
 8010ce6:	4a24      	ldr	r2, [pc, #144]	; (8010d78 <ai_platform_network_get_error+0x214>)
 8010ce8:	2301      	movs	r3, #1
 8010cea:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8010cee:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d1fb      	bne.n	8010cee <ai_platform_network_get_error+0x18a>
 8010cf6:	491e      	ldr	r1, [pc, #120]	; (8010d70 <ai_platform_network_get_error+0x20c>)
 8010cf8:	4b1e      	ldr	r3, [pc, #120]	; (8010d74 <ai_platform_network_get_error+0x210>)
 8010cfa:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8010cfe:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8010d02:	429a      	cmp	r2, r3
 8010d04:	d0c3      	beq.n	8010c8e <ai_platform_network_get_error+0x12a>
 8010d06:	e7fe      	b.n	8010d06 <ai_platform_network_get_error+0x1a2>
 8010d08:	4a1b      	ldr	r2, [pc, #108]	; (8010d78 <ai_platform_network_get_error+0x214>)
 8010d0a:	2301      	movs	r3, #1
 8010d0c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8010d10:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d1fb      	bne.n	8010d10 <ai_platform_network_get_error+0x1ac>
 8010d18:	4915      	ldr	r1, [pc, #84]	; (8010d70 <ai_platform_network_get_error+0x20c>)
 8010d1a:	4b16      	ldr	r3, [pc, #88]	; (8010d74 <ai_platform_network_get_error+0x210>)
 8010d1c:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8010d20:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8010d24:	429a      	cmp	r2, r3
 8010d26:	d0d5      	beq.n	8010cd4 <ai_platform_network_get_error+0x170>
 8010d28:	e7fe      	b.n	8010d28 <ai_platform_network_get_error+0x1c4>
 8010d2a:	4a10      	ldr	r2, [pc, #64]	; (8010d6c <ai_platform_network_get_error+0x208>)
 8010d2c:	2301      	movs	r3, #1
 8010d2e:	6093      	str	r3, [r2, #8]
 8010d30:	6893      	ldr	r3, [r2, #8]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d1fc      	bne.n	8010d30 <ai_platform_network_get_error+0x1cc>
 8010d36:	490e      	ldr	r1, [pc, #56]	; (8010d70 <ai_platform_network_get_error+0x20c>)
 8010d38:	4b0e      	ldr	r3, [pc, #56]	; (8010d74 <ai_platform_network_get_error+0x210>)
 8010d3a:	6011      	str	r1, [r2, #0]
 8010d3c:	6812      	ldr	r2, [r2, #0]
 8010d3e:	429a      	cmp	r2, r3
 8010d40:	d0a5      	beq.n	8010c8e <ai_platform_network_get_error+0x12a>
 8010d42:	e7fe      	b.n	8010d42 <ai_platform_network_get_error+0x1de>
 8010d44:	4a09      	ldr	r2, [pc, #36]	; (8010d6c <ai_platform_network_get_error+0x208>)
 8010d46:	2301      	movs	r3, #1
 8010d48:	6093      	str	r3, [r2, #8]
 8010d4a:	6893      	ldr	r3, [r2, #8]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d1fc      	bne.n	8010d4a <ai_platform_network_get_error+0x1e6>
 8010d50:	4907      	ldr	r1, [pc, #28]	; (8010d70 <ai_platform_network_get_error+0x20c>)
 8010d52:	4b08      	ldr	r3, [pc, #32]	; (8010d74 <ai_platform_network_get_error+0x210>)
 8010d54:	6011      	str	r1, [r2, #0]
 8010d56:	6812      	ldr	r2, [r2, #0]
 8010d58:	429a      	cmp	r2, r3
 8010d5a:	d0bb      	beq.n	8010cd4 <ai_platform_network_get_error+0x170>
 8010d5c:	e7fe      	b.n	8010d5c <ai_platform_network_get_error+0x1f8>
 8010d5e:	bf00      	nop
 8010d60:	a1c00100 	.word	0xa1c00100
 8010d64:	e0042000 	.word	0xe0042000
 8010d68:	5c001000 	.word	0x5c001000
 8010d6c:	40023000 	.word	0x40023000
 8010d70:	f407a5c2 	.word	0xf407a5c2
 8010d74:	b5e8b5cd 	.word	0xb5e8b5cd
 8010d78:	58024000 	.word	0x58024000

08010d7c <ai_platform_network_set_error>:
 8010d7c:	b110      	cbz	r0, 8010d84 <ai_platform_network_set_error+0x8>
 8010d7e:	3010      	adds	r0, #16
 8010d80:	f000 bfbe 	b.w	8011d00 <core_set_error>
 8010d84:	4770      	bx	lr
 8010d86:	bf00      	nop

08010d88 <ai_platform_inputs_get>:
 8010d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d8c:	b085      	sub	sp, #20
 8010d8e:	9102      	str	r1, [sp, #8]
 8010d90:	2800      	cmp	r0, #0
 8010d92:	f000 8093 	beq.w	8010ebc <ai_platform_inputs_get+0x134>
 8010d96:	4baa      	ldr	r3, [pc, #680]	; (8011040 <ai_platform_inputs_get+0x2b8>)
 8010d98:	4681      	mov	r9, r0
 8010d9a:	6802      	ldr	r2, [r0, #0]
 8010d9c:	429a      	cmp	r2, r3
 8010d9e:	f040 808d 	bne.w	8010ebc <ai_platform_inputs_get+0x134>
 8010da2:	f7ff fe11 	bl	80109c8 <_ai_platform_acquire_crc>
 8010da6:	4ba7      	ldr	r3, [pc, #668]	; (8011044 <ai_platform_inputs_get+0x2bc>)
 8010da8:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010db2:	189a      	adds	r2, r3, r2
 8010db4:	2a01      	cmp	r2, #1
 8010db6:	f240 80da 	bls.w	8010f6e <ai_platform_inputs_get+0x1e6>
 8010dba:	f240 4249 	movw	r2, #1097	; 0x449
 8010dbe:	4293      	cmp	r3, r2
 8010dc0:	f000 80d5 	beq.w	8010f6e <ai_platform_inputs_get+0x1e6>
 8010dc4:	4aa0      	ldr	r2, [pc, #640]	; (8011048 <ai_platform_inputs_get+0x2c0>)
 8010dc6:	6813      	ldr	r3, [r2, #0]
 8010dc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010dcc:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8010dd0:	f000 80dc 	beq.w	8010f8c <ai_platform_inputs_get+0x204>
 8010dd4:	6813      	ldr	r3, [r2, #0]
 8010dd6:	f240 4183 	movw	r1, #1155	; 0x483
 8010dda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010dde:	428b      	cmp	r3, r1
 8010de0:	f000 810e 	beq.w	8011000 <ai_platform_inputs_get+0x278>
 8010de4:	6813      	ldr	r3, [r2, #0]
 8010de6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010dea:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8010dee:	f000 8143 	beq.w	8011078 <ai_platform_inputs_get+0x2f0>
 8010df2:	6813      	ldr	r3, [r2, #0]
 8010df4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	f000 8113 	beq.w	8011024 <ai_platform_inputs_get+0x29c>
 8010dfe:	f7ff fde5 	bl	80109cc <_ai_platform_release_crc>
 8010e02:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	f000 80d2 	beq.w	8010fb0 <ai_platform_inputs_get+0x228>
 8010e0c:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 8010e10:	f1ba 0f00 	cmp.w	sl, #0
 8010e14:	f000 80cc 	beq.w	8010fb0 <ai_platform_inputs_get+0x228>
 8010e18:	2100      	movs	r1, #0
 8010e1a:	f8cd 900c 	str.w	r9, [sp, #12]
 8010e1e:	460d      	mov	r5, r1
 8010e20:	4689      	mov	r9, r1
 8010e22:	e016      	b.n	8010e52 <ai_platform_inputs_get+0xca>
 8010e24:	9a01      	ldr	r2, [sp, #4]
 8010e26:	2301      	movs	r3, #1
 8010e28:	f848 3002 	str.w	r3, [r8, r2]
 8010e2c:	69b2      	ldr	r2, [r6, #24]
 8010e2e:	f04f 0301 	mov.w	r3, #1
 8010e32:	6856      	ldr	r6, [r2, #4]
 8010e34:	3501      	adds	r5, #1
 8010e36:	f109 091c 	add.w	r9, r9, #28
 8010e3a:	7523      	strb	r3, [r4, #20]
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	6962      	ldr	r2, [r4, #20]
 8010e40:	60a7      	str	r7, [r4, #8]
 8010e42:	f36b 221f 	bfi	r2, fp, #8, #24
 8010e46:	6126      	str	r6, [r4, #16]
 8010e48:	61a1      	str	r1, [r4, #24]
 8010e4a:	60e3      	str	r3, [r4, #12]
 8010e4c:	6162      	str	r2, [r4, #20]
 8010e4e:	e9c4 0c00 	strd	r0, ip, [r4]
 8010e52:	f8ba 3000 	ldrh.w	r3, [sl]
 8010e56:	b2ac      	uxth	r4, r5
 8010e58:	42ab      	cmp	r3, r5
 8010e5a:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8010e5e:	9301      	str	r3, [sp, #4]
 8010e60:	f240 80b5 	bls.w	8010fce <ai_platform_inputs_get+0x246>
 8010e64:	f8da 3004 	ldr.w	r3, [sl, #4]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	f000 80b0 	beq.w	8010fce <ai_platform_inputs_get+0x246>
 8010e6e:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8010e72:	2e00      	cmp	r6, #0
 8010e74:	f000 80ab 	beq.w	8010fce <ai_platform_inputs_get+0x246>
 8010e78:	f8da 3008 	ldr.w	r3, [sl, #8]
 8010e7c:	69b2      	ldr	r2, [r6, #24]
 8010e7e:	68f1      	ldr	r1, [r6, #12]
 8010e80:	6810      	ldr	r0, [r2, #0]
 8010e82:	9100      	str	r1, [sp, #0]
 8010e84:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8010e88:	68b3      	ldr	r3, [r6, #8]
 8010e8a:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8010e8e:	444c      	add	r4, r9
 8010e90:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8010e94:	f002 f856 	bl	8012f44 <ai_array_to_buffer_fmt>
 8010e98:	69b2      	ldr	r2, [r6, #24]
 8010e9a:	9900      	ldr	r1, [sp, #0]
 8010e9c:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8010ea0:	2f00      	cmp	r7, #0
 8010ea2:	d0c4      	beq.n	8010e2e <ai_platform_inputs_get+0xa6>
 8010ea4:	2200      	movs	r2, #0
 8010ea6:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 8010eaa:	6832      	ldr	r2, [r6, #0]
 8010eac:	607a      	str	r2, [r7, #4]
 8010eae:	b112      	cbz	r2, 8010eb6 <ai_platform_inputs_get+0x12e>
 8010eb0:	8852      	ldrh	r2, [r2, #2]
 8010eb2:	2a00      	cmp	r2, #0
 8010eb4:	d1b6      	bne.n	8010e24 <ai_platform_inputs_get+0x9c>
 8010eb6:	69b2      	ldr	r2, [r6, #24]
 8010eb8:	2700      	movs	r7, #0
 8010eba:	e7b8      	b.n	8010e2e <ai_platform_inputs_get+0xa6>
 8010ebc:	f7ff fd84 	bl	80109c8 <_ai_platform_acquire_crc>
 8010ec0:	4b60      	ldr	r3, [pc, #384]	; (8011044 <ai_platform_inputs_get+0x2bc>)
 8010ec2:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010ecc:	185a      	adds	r2, r3, r1
 8010ece:	2a01      	cmp	r2, #1
 8010ed0:	d92a      	bls.n	8010f28 <ai_platform_inputs_get+0x1a0>
 8010ed2:	f240 4249 	movw	r2, #1097	; 0x449
 8010ed6:	4293      	cmp	r3, r2
 8010ed8:	d026      	beq.n	8010f28 <ai_platform_inputs_get+0x1a0>
 8010eda:	4a5b      	ldr	r2, [pc, #364]	; (8011048 <ai_platform_inputs_get+0x2c0>)
 8010edc:	6813      	ldr	r3, [r2, #0]
 8010ede:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010ee2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8010ee6:	d02c      	beq.n	8010f42 <ai_platform_inputs_get+0x1ba>
 8010ee8:	6813      	ldr	r3, [r2, #0]
 8010eea:	f240 4183 	movw	r1, #1155	; 0x483
 8010eee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010ef2:	428b      	cmp	r3, r1
 8010ef4:	d073      	beq.n	8010fde <ai_platform_inputs_get+0x256>
 8010ef6:	6813      	ldr	r3, [r2, #0]
 8010ef8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010efc:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8010f00:	f000 80ac 	beq.w	801105c <ai_platform_inputs_get+0x2d4>
 8010f04:	6813      	ldr	r3, [r2, #0]
 8010f06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d129      	bne.n	8010f62 <ai_platform_inputs_get+0x1da>
 8010f0e:	4a4f      	ldr	r2, [pc, #316]	; (801104c <ai_platform_inputs_get+0x2c4>)
 8010f10:	2301      	movs	r3, #1
 8010f12:	6093      	str	r3, [r2, #8]
 8010f14:	6893      	ldr	r3, [r2, #8]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d1fc      	bne.n	8010f14 <ai_platform_inputs_get+0x18c>
 8010f1a:	494d      	ldr	r1, [pc, #308]	; (8011050 <ai_platform_inputs_get+0x2c8>)
 8010f1c:	4b4d      	ldr	r3, [pc, #308]	; (8011054 <ai_platform_inputs_get+0x2cc>)
 8010f1e:	6011      	str	r1, [r2, #0]
 8010f20:	6812      	ldr	r2, [r2, #0]
 8010f22:	429a      	cmp	r2, r3
 8010f24:	d01d      	beq.n	8010f62 <ai_platform_inputs_get+0x1da>
 8010f26:	e7fe      	b.n	8010f26 <ai_platform_inputs_get+0x19e>
 8010f28:	4a48      	ldr	r2, [pc, #288]	; (801104c <ai_platform_inputs_get+0x2c4>)
 8010f2a:	2301      	movs	r3, #1
 8010f2c:	6093      	str	r3, [r2, #8]
 8010f2e:	6893      	ldr	r3, [r2, #8]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d1fc      	bne.n	8010f2e <ai_platform_inputs_get+0x1a6>
 8010f34:	4946      	ldr	r1, [pc, #280]	; (8011050 <ai_platform_inputs_get+0x2c8>)
 8010f36:	4b47      	ldr	r3, [pc, #284]	; (8011054 <ai_platform_inputs_get+0x2cc>)
 8010f38:	6011      	str	r1, [r2, #0]
 8010f3a:	6812      	ldr	r2, [r2, #0]
 8010f3c:	429a      	cmp	r2, r3
 8010f3e:	d010      	beq.n	8010f62 <ai_platform_inputs_get+0x1da>
 8010f40:	e7fe      	b.n	8010f40 <ai_platform_inputs_get+0x1b8>
 8010f42:	4a45      	ldr	r2, [pc, #276]	; (8011058 <ai_platform_inputs_get+0x2d0>)
 8010f44:	2301      	movs	r3, #1
 8010f46:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8010f4a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d1fb      	bne.n	8010f4a <ai_platform_inputs_get+0x1c2>
 8010f52:	493f      	ldr	r1, [pc, #252]	; (8011050 <ai_platform_inputs_get+0x2c8>)
 8010f54:	4b3f      	ldr	r3, [pc, #252]	; (8011054 <ai_platform_inputs_get+0x2cc>)
 8010f56:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8010f5a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8010f5e:	429a      	cmp	r2, r3
 8010f60:	d113      	bne.n	8010f8a <ai_platform_inputs_get+0x202>
 8010f62:	f7ff fd33 	bl	80109cc <_ai_platform_release_crc>
 8010f66:	2000      	movs	r0, #0
 8010f68:	b005      	add	sp, #20
 8010f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f6e:	4a37      	ldr	r2, [pc, #220]	; (801104c <ai_platform_inputs_get+0x2c4>)
 8010f70:	2301      	movs	r3, #1
 8010f72:	6093      	str	r3, [r2, #8]
 8010f74:	6893      	ldr	r3, [r2, #8]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d1fc      	bne.n	8010f74 <ai_platform_inputs_get+0x1ec>
 8010f7a:	4b35      	ldr	r3, [pc, #212]	; (8011050 <ai_platform_inputs_get+0x2c8>)
 8010f7c:	6013      	str	r3, [r2, #0]
 8010f7e:	4b35      	ldr	r3, [pc, #212]	; (8011054 <ai_platform_inputs_get+0x2cc>)
 8010f80:	6812      	ldr	r2, [r2, #0]
 8010f82:	429a      	cmp	r2, r3
 8010f84:	f43f af3b 	beq.w	8010dfe <ai_platform_inputs_get+0x76>
 8010f88:	e7fe      	b.n	8010f88 <ai_platform_inputs_get+0x200>
 8010f8a:	e7fe      	b.n	8010f8a <ai_platform_inputs_get+0x202>
 8010f8c:	4a32      	ldr	r2, [pc, #200]	; (8011058 <ai_platform_inputs_get+0x2d0>)
 8010f8e:	2301      	movs	r3, #1
 8010f90:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8010f94:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d1fb      	bne.n	8010f94 <ai_platform_inputs_get+0x20c>
 8010f9c:	4b2c      	ldr	r3, [pc, #176]	; (8011050 <ai_platform_inputs_get+0x2c8>)
 8010f9e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8010fa2:	4b2c      	ldr	r3, [pc, #176]	; (8011054 <ai_platform_inputs_get+0x2cc>)
 8010fa4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8010fa8:	429a      	cmp	r2, r3
 8010faa:	f43f af28 	beq.w	8010dfe <ai_platform_inputs_get+0x76>
 8010fae:	e7fe      	b.n	8010fae <ai_platform_inputs_get+0x226>
 8010fb0:	2400      	movs	r4, #0
 8010fb2:	2218      	movs	r2, #24
 8010fb4:	2111      	movs	r1, #17
 8010fb6:	f109 0010 	add.w	r0, r9, #16
 8010fba:	f000 fea1 	bl	8011d00 <core_set_error>
 8010fbe:	4620      	mov	r0, r4
 8010fc0:	9b02      	ldr	r3, [sp, #8]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d0d0      	beq.n	8010f68 <ai_platform_inputs_get+0x1e0>
 8010fc6:	801c      	strh	r4, [r3, #0]
 8010fc8:	b005      	add	sp, #20
 8010fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fce:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8010fd2:	2c00      	cmp	r4, #0
 8010fd4:	d0ec      	beq.n	8010fb0 <ai_platform_inputs_get+0x228>
 8010fd6:	f8da 3008 	ldr.w	r3, [sl, #8]
 8010fda:	6858      	ldr	r0, [r3, #4]
 8010fdc:	e7f0      	b.n	8010fc0 <ai_platform_inputs_get+0x238>
 8010fde:	4a1e      	ldr	r2, [pc, #120]	; (8011058 <ai_platform_inputs_get+0x2d0>)
 8010fe0:	2301      	movs	r3, #1
 8010fe2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8010fe6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d1fb      	bne.n	8010fe6 <ai_platform_inputs_get+0x25e>
 8010fee:	4918      	ldr	r1, [pc, #96]	; (8011050 <ai_platform_inputs_get+0x2c8>)
 8010ff0:	4b18      	ldr	r3, [pc, #96]	; (8011054 <ai_platform_inputs_get+0x2cc>)
 8010ff2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8010ff6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8010ffa:	429a      	cmp	r2, r3
 8010ffc:	d0b1      	beq.n	8010f62 <ai_platform_inputs_get+0x1da>
 8010ffe:	e7fe      	b.n	8010ffe <ai_platform_inputs_get+0x276>
 8011000:	4a15      	ldr	r2, [pc, #84]	; (8011058 <ai_platform_inputs_get+0x2d0>)
 8011002:	2301      	movs	r3, #1
 8011004:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011008:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801100c:	2b00      	cmp	r3, #0
 801100e:	d1fb      	bne.n	8011008 <ai_platform_inputs_get+0x280>
 8011010:	4b0f      	ldr	r3, [pc, #60]	; (8011050 <ai_platform_inputs_get+0x2c8>)
 8011012:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8011016:	4b0f      	ldr	r3, [pc, #60]	; (8011054 <ai_platform_inputs_get+0x2cc>)
 8011018:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801101c:	429a      	cmp	r2, r3
 801101e:	f43f aeee 	beq.w	8010dfe <ai_platform_inputs_get+0x76>
 8011022:	e7fe      	b.n	8011022 <ai_platform_inputs_get+0x29a>
 8011024:	4a09      	ldr	r2, [pc, #36]	; (801104c <ai_platform_inputs_get+0x2c4>)
 8011026:	2301      	movs	r3, #1
 8011028:	6093      	str	r3, [r2, #8]
 801102a:	6893      	ldr	r3, [r2, #8]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d1fc      	bne.n	801102a <ai_platform_inputs_get+0x2a2>
 8011030:	4b07      	ldr	r3, [pc, #28]	; (8011050 <ai_platform_inputs_get+0x2c8>)
 8011032:	6013      	str	r3, [r2, #0]
 8011034:	4b07      	ldr	r3, [pc, #28]	; (8011054 <ai_platform_inputs_get+0x2cc>)
 8011036:	6812      	ldr	r2, [r2, #0]
 8011038:	429a      	cmp	r2, r3
 801103a:	f43f aee0 	beq.w	8010dfe <ai_platform_inputs_get+0x76>
 801103e:	e7fe      	b.n	801103e <ai_platform_inputs_get+0x2b6>
 8011040:	a1c00100 	.word	0xa1c00100
 8011044:	e0042000 	.word	0xe0042000
 8011048:	5c001000 	.word	0x5c001000
 801104c:	40023000 	.word	0x40023000
 8011050:	f407a5c2 	.word	0xf407a5c2
 8011054:	b5e8b5cd 	.word	0xb5e8b5cd
 8011058:	58024000 	.word	0x58024000
 801105c:	4a0d      	ldr	r2, [pc, #52]	; (8011094 <ai_platform_inputs_get+0x30c>)
 801105e:	2301      	movs	r3, #1
 8011060:	6093      	str	r3, [r2, #8]
 8011062:	6893      	ldr	r3, [r2, #8]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d1fc      	bne.n	8011062 <ai_platform_inputs_get+0x2da>
 8011068:	490b      	ldr	r1, [pc, #44]	; (8011098 <ai_platform_inputs_get+0x310>)
 801106a:	4b0c      	ldr	r3, [pc, #48]	; (801109c <ai_platform_inputs_get+0x314>)
 801106c:	6011      	str	r1, [r2, #0]
 801106e:	6812      	ldr	r2, [r2, #0]
 8011070:	429a      	cmp	r2, r3
 8011072:	f43f af76 	beq.w	8010f62 <ai_platform_inputs_get+0x1da>
 8011076:	e7fe      	b.n	8011076 <ai_platform_inputs_get+0x2ee>
 8011078:	4a06      	ldr	r2, [pc, #24]	; (8011094 <ai_platform_inputs_get+0x30c>)
 801107a:	2301      	movs	r3, #1
 801107c:	6093      	str	r3, [r2, #8]
 801107e:	6893      	ldr	r3, [r2, #8]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d1fc      	bne.n	801107e <ai_platform_inputs_get+0x2f6>
 8011084:	4b04      	ldr	r3, [pc, #16]	; (8011098 <ai_platform_inputs_get+0x310>)
 8011086:	6013      	str	r3, [r2, #0]
 8011088:	4b04      	ldr	r3, [pc, #16]	; (801109c <ai_platform_inputs_get+0x314>)
 801108a:	6812      	ldr	r2, [r2, #0]
 801108c:	429a      	cmp	r2, r3
 801108e:	f43f aeb6 	beq.w	8010dfe <ai_platform_inputs_get+0x76>
 8011092:	e7fe      	b.n	8011092 <ai_platform_inputs_get+0x30a>
 8011094:	40023000 	.word	0x40023000
 8011098:	f407a5c2 	.word	0xf407a5c2
 801109c:	b5e8b5cd 	.word	0xb5e8b5cd

080110a0 <ai_platform_outputs_get>:
 80110a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110a4:	b085      	sub	sp, #20
 80110a6:	9102      	str	r1, [sp, #8]
 80110a8:	2800      	cmp	r0, #0
 80110aa:	f000 808f 	beq.w	80111cc <ai_platform_outputs_get+0x12c>
 80110ae:	4ba8      	ldr	r3, [pc, #672]	; (8011350 <ai_platform_outputs_get+0x2b0>)
 80110b0:	4681      	mov	r9, r0
 80110b2:	6802      	ldr	r2, [r0, #0]
 80110b4:	429a      	cmp	r2, r3
 80110b6:	f040 8089 	bne.w	80111cc <ai_platform_outputs_get+0x12c>
 80110ba:	f7ff fc85 	bl	80109c8 <_ai_platform_acquire_crc>
 80110be:	4ba5      	ldr	r3, [pc, #660]	; (8011354 <ai_platform_outputs_get+0x2b4>)
 80110c0:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80110ca:	189a      	adds	r2, r3, r2
 80110cc:	2a01      	cmp	r2, #1
 80110ce:	f240 80d6 	bls.w	801127e <ai_platform_outputs_get+0x1de>
 80110d2:	f240 4249 	movw	r2, #1097	; 0x449
 80110d6:	4293      	cmp	r3, r2
 80110d8:	f000 80d1 	beq.w	801127e <ai_platform_outputs_get+0x1de>
 80110dc:	4a9e      	ldr	r2, [pc, #632]	; (8011358 <ai_platform_outputs_get+0x2b8>)
 80110de:	6813      	ldr	r3, [r2, #0]
 80110e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80110e4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80110e8:	f000 80d8 	beq.w	801129c <ai_platform_outputs_get+0x1fc>
 80110ec:	6813      	ldr	r3, [r2, #0]
 80110ee:	f240 4183 	movw	r1, #1155	; 0x483
 80110f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80110f6:	428b      	cmp	r3, r1
 80110f8:	f000 8109 	beq.w	801130e <ai_platform_outputs_get+0x26e>
 80110fc:	6813      	ldr	r3, [r2, #0]
 80110fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011102:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8011106:	f000 813f 	beq.w	8011388 <ai_platform_outputs_get+0x2e8>
 801110a:	6813      	ldr	r3, [r2, #0]
 801110c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011110:	2b00      	cmp	r3, #0
 8011112:	f000 810e 	beq.w	8011332 <ai_platform_outputs_get+0x292>
 8011116:	f7ff fc59 	bl	80109cc <_ai_platform_release_crc>
 801111a:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 801111e:	2b01      	cmp	r3, #1
 8011120:	f240 80db 	bls.w	80112da <ai_platform_outputs_get+0x23a>
 8011124:	2100      	movs	r1, #0
 8011126:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 801112a:	f8cd 900c 	str.w	r9, [sp, #12]
 801112e:	460d      	mov	r5, r1
 8011130:	4689      	mov	r9, r1
 8011132:	e016      	b.n	8011162 <ai_platform_outputs_get+0xc2>
 8011134:	9a01      	ldr	r2, [sp, #4]
 8011136:	2301      	movs	r3, #1
 8011138:	f848 3002 	str.w	r3, [r8, r2]
 801113c:	69b2      	ldr	r2, [r6, #24]
 801113e:	f04f 0301 	mov.w	r3, #1
 8011142:	6856      	ldr	r6, [r2, #4]
 8011144:	3501      	adds	r5, #1
 8011146:	f109 091c 	add.w	r9, r9, #28
 801114a:	7523      	strb	r3, [r4, #20]
 801114c:	2300      	movs	r3, #0
 801114e:	6962      	ldr	r2, [r4, #20]
 8011150:	60a7      	str	r7, [r4, #8]
 8011152:	f36b 221f 	bfi	r2, fp, #8, #24
 8011156:	6126      	str	r6, [r4, #16]
 8011158:	61a1      	str	r1, [r4, #24]
 801115a:	60e3      	str	r3, [r4, #12]
 801115c:	6162      	str	r2, [r4, #20]
 801115e:	e9c4 0c00 	strd	r0, ip, [r4]
 8011162:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8011166:	b2ac      	uxth	r4, r5
 8011168:	42ab      	cmp	r3, r5
 801116a:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 801116e:	9301      	str	r3, [sp, #4]
 8011170:	f240 80a6 	bls.w	80112c0 <ai_platform_outputs_get+0x220>
 8011174:	f8da 3010 	ldr.w	r3, [sl, #16]
 8011178:	2b00      	cmp	r3, #0
 801117a:	f000 80a1 	beq.w	80112c0 <ai_platform_outputs_get+0x220>
 801117e:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8011182:	2e00      	cmp	r6, #0
 8011184:	f000 809c 	beq.w	80112c0 <ai_platform_outputs_get+0x220>
 8011188:	f8da 3014 	ldr.w	r3, [sl, #20]
 801118c:	69b2      	ldr	r2, [r6, #24]
 801118e:	68f1      	ldr	r1, [r6, #12]
 8011190:	6810      	ldr	r0, [r2, #0]
 8011192:	9100      	str	r1, [sp, #0]
 8011194:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8011198:	68b3      	ldr	r3, [r6, #8]
 801119a:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 801119e:	444c      	add	r4, r9
 80111a0:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 80111a4:	f001 fece 	bl	8012f44 <ai_array_to_buffer_fmt>
 80111a8:	69b2      	ldr	r2, [r6, #24]
 80111aa:	9900      	ldr	r1, [sp, #0]
 80111ac:	f8d2 c008 	ldr.w	ip, [r2, #8]
 80111b0:	2f00      	cmp	r7, #0
 80111b2:	d0c4      	beq.n	801113e <ai_platform_outputs_get+0x9e>
 80111b4:	2200      	movs	r2, #0
 80111b6:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 80111ba:	6832      	ldr	r2, [r6, #0]
 80111bc:	607a      	str	r2, [r7, #4]
 80111be:	b112      	cbz	r2, 80111c6 <ai_platform_outputs_get+0x126>
 80111c0:	8852      	ldrh	r2, [r2, #2]
 80111c2:	2a00      	cmp	r2, #0
 80111c4:	d1b6      	bne.n	8011134 <ai_platform_outputs_get+0x94>
 80111c6:	69b2      	ldr	r2, [r6, #24]
 80111c8:	2700      	movs	r7, #0
 80111ca:	e7b8      	b.n	801113e <ai_platform_outputs_get+0x9e>
 80111cc:	f7ff fbfc 	bl	80109c8 <_ai_platform_acquire_crc>
 80111d0:	4b60      	ldr	r3, [pc, #384]	; (8011354 <ai_platform_outputs_get+0x2b4>)
 80111d2:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80111dc:	185a      	adds	r2, r3, r1
 80111de:	2a01      	cmp	r2, #1
 80111e0:	d92a      	bls.n	8011238 <ai_platform_outputs_get+0x198>
 80111e2:	f240 4249 	movw	r2, #1097	; 0x449
 80111e6:	4293      	cmp	r3, r2
 80111e8:	d026      	beq.n	8011238 <ai_platform_outputs_get+0x198>
 80111ea:	4a5b      	ldr	r2, [pc, #364]	; (8011358 <ai_platform_outputs_get+0x2b8>)
 80111ec:	6813      	ldr	r3, [r2, #0]
 80111ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80111f2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80111f6:	d02c      	beq.n	8011252 <ai_platform_outputs_get+0x1b2>
 80111f8:	6813      	ldr	r3, [r2, #0]
 80111fa:	f240 4183 	movw	r1, #1155	; 0x483
 80111fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011202:	428b      	cmp	r3, r1
 8011204:	d072      	beq.n	80112ec <ai_platform_outputs_get+0x24c>
 8011206:	6813      	ldr	r3, [r2, #0]
 8011208:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801120c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8011210:	f000 80ac 	beq.w	801136c <ai_platform_outputs_get+0x2cc>
 8011214:	6813      	ldr	r3, [r2, #0]
 8011216:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801121a:	2b00      	cmp	r3, #0
 801121c:	d129      	bne.n	8011272 <ai_platform_outputs_get+0x1d2>
 801121e:	4a4f      	ldr	r2, [pc, #316]	; (801135c <ai_platform_outputs_get+0x2bc>)
 8011220:	2301      	movs	r3, #1
 8011222:	6093      	str	r3, [r2, #8]
 8011224:	6893      	ldr	r3, [r2, #8]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d1fc      	bne.n	8011224 <ai_platform_outputs_get+0x184>
 801122a:	494d      	ldr	r1, [pc, #308]	; (8011360 <ai_platform_outputs_get+0x2c0>)
 801122c:	4b4d      	ldr	r3, [pc, #308]	; (8011364 <ai_platform_outputs_get+0x2c4>)
 801122e:	6011      	str	r1, [r2, #0]
 8011230:	6812      	ldr	r2, [r2, #0]
 8011232:	429a      	cmp	r2, r3
 8011234:	d01d      	beq.n	8011272 <ai_platform_outputs_get+0x1d2>
 8011236:	e7fe      	b.n	8011236 <ai_platform_outputs_get+0x196>
 8011238:	4a48      	ldr	r2, [pc, #288]	; (801135c <ai_platform_outputs_get+0x2bc>)
 801123a:	2301      	movs	r3, #1
 801123c:	6093      	str	r3, [r2, #8]
 801123e:	6893      	ldr	r3, [r2, #8]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d1fc      	bne.n	801123e <ai_platform_outputs_get+0x19e>
 8011244:	4946      	ldr	r1, [pc, #280]	; (8011360 <ai_platform_outputs_get+0x2c0>)
 8011246:	4b47      	ldr	r3, [pc, #284]	; (8011364 <ai_platform_outputs_get+0x2c4>)
 8011248:	6011      	str	r1, [r2, #0]
 801124a:	6812      	ldr	r2, [r2, #0]
 801124c:	429a      	cmp	r2, r3
 801124e:	d010      	beq.n	8011272 <ai_platform_outputs_get+0x1d2>
 8011250:	e7fe      	b.n	8011250 <ai_platform_outputs_get+0x1b0>
 8011252:	4a45      	ldr	r2, [pc, #276]	; (8011368 <ai_platform_outputs_get+0x2c8>)
 8011254:	2301      	movs	r3, #1
 8011256:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801125a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801125e:	2b00      	cmp	r3, #0
 8011260:	d1fb      	bne.n	801125a <ai_platform_outputs_get+0x1ba>
 8011262:	493f      	ldr	r1, [pc, #252]	; (8011360 <ai_platform_outputs_get+0x2c0>)
 8011264:	4b3f      	ldr	r3, [pc, #252]	; (8011364 <ai_platform_outputs_get+0x2c4>)
 8011266:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 801126a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801126e:	429a      	cmp	r2, r3
 8011270:	d113      	bne.n	801129a <ai_platform_outputs_get+0x1fa>
 8011272:	f7ff fbab 	bl	80109cc <_ai_platform_release_crc>
 8011276:	2000      	movs	r0, #0
 8011278:	b005      	add	sp, #20
 801127a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801127e:	4a37      	ldr	r2, [pc, #220]	; (801135c <ai_platform_outputs_get+0x2bc>)
 8011280:	2301      	movs	r3, #1
 8011282:	6093      	str	r3, [r2, #8]
 8011284:	6893      	ldr	r3, [r2, #8]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d1fc      	bne.n	8011284 <ai_platform_outputs_get+0x1e4>
 801128a:	4b35      	ldr	r3, [pc, #212]	; (8011360 <ai_platform_outputs_get+0x2c0>)
 801128c:	6013      	str	r3, [r2, #0]
 801128e:	4b35      	ldr	r3, [pc, #212]	; (8011364 <ai_platform_outputs_get+0x2c4>)
 8011290:	6812      	ldr	r2, [r2, #0]
 8011292:	429a      	cmp	r2, r3
 8011294:	f43f af3f 	beq.w	8011116 <ai_platform_outputs_get+0x76>
 8011298:	e7fe      	b.n	8011298 <ai_platform_outputs_get+0x1f8>
 801129a:	e7fe      	b.n	801129a <ai_platform_outputs_get+0x1fa>
 801129c:	4a32      	ldr	r2, [pc, #200]	; (8011368 <ai_platform_outputs_get+0x2c8>)
 801129e:	2301      	movs	r3, #1
 80112a0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80112a4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d1fb      	bne.n	80112a4 <ai_platform_outputs_get+0x204>
 80112ac:	4b2c      	ldr	r3, [pc, #176]	; (8011360 <ai_platform_outputs_get+0x2c0>)
 80112ae:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80112b2:	4b2c      	ldr	r3, [pc, #176]	; (8011364 <ai_platform_outputs_get+0x2c4>)
 80112b4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80112b8:	429a      	cmp	r2, r3
 80112ba:	f43f af2c 	beq.w	8011116 <ai_platform_outputs_get+0x76>
 80112be:	e7fe      	b.n	80112be <ai_platform_outputs_get+0x21e>
 80112c0:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80112c4:	b14c      	cbz	r4, 80112da <ai_platform_outputs_get+0x23a>
 80112c6:	f8da 3014 	ldr.w	r3, [sl, #20]
 80112ca:	6858      	ldr	r0, [r3, #4]
 80112cc:	9b02      	ldr	r3, [sp, #8]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d0d2      	beq.n	8011278 <ai_platform_outputs_get+0x1d8>
 80112d2:	801c      	strh	r4, [r3, #0]
 80112d4:	b005      	add	sp, #20
 80112d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112da:	2400      	movs	r4, #0
 80112dc:	2218      	movs	r2, #24
 80112de:	2111      	movs	r1, #17
 80112e0:	f109 0010 	add.w	r0, r9, #16
 80112e4:	f000 fd0c 	bl	8011d00 <core_set_error>
 80112e8:	4620      	mov	r0, r4
 80112ea:	e7ef      	b.n	80112cc <ai_platform_outputs_get+0x22c>
 80112ec:	4a1e      	ldr	r2, [pc, #120]	; (8011368 <ai_platform_outputs_get+0x2c8>)
 80112ee:	2301      	movs	r3, #1
 80112f0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80112f4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d1fb      	bne.n	80112f4 <ai_platform_outputs_get+0x254>
 80112fc:	4918      	ldr	r1, [pc, #96]	; (8011360 <ai_platform_outputs_get+0x2c0>)
 80112fe:	4b19      	ldr	r3, [pc, #100]	; (8011364 <ai_platform_outputs_get+0x2c4>)
 8011300:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8011304:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8011308:	429a      	cmp	r2, r3
 801130a:	d0b2      	beq.n	8011272 <ai_platform_outputs_get+0x1d2>
 801130c:	e7fe      	b.n	801130c <ai_platform_outputs_get+0x26c>
 801130e:	4a16      	ldr	r2, [pc, #88]	; (8011368 <ai_platform_outputs_get+0x2c8>)
 8011310:	2301      	movs	r3, #1
 8011312:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011316:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801131a:	2b00      	cmp	r3, #0
 801131c:	d1fb      	bne.n	8011316 <ai_platform_outputs_get+0x276>
 801131e:	4b10      	ldr	r3, [pc, #64]	; (8011360 <ai_platform_outputs_get+0x2c0>)
 8011320:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8011324:	4b0f      	ldr	r3, [pc, #60]	; (8011364 <ai_platform_outputs_get+0x2c4>)
 8011326:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801132a:	429a      	cmp	r2, r3
 801132c:	f43f aef3 	beq.w	8011116 <ai_platform_outputs_get+0x76>
 8011330:	e7fe      	b.n	8011330 <ai_platform_outputs_get+0x290>
 8011332:	4a0a      	ldr	r2, [pc, #40]	; (801135c <ai_platform_outputs_get+0x2bc>)
 8011334:	2301      	movs	r3, #1
 8011336:	6093      	str	r3, [r2, #8]
 8011338:	6893      	ldr	r3, [r2, #8]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d1fc      	bne.n	8011338 <ai_platform_outputs_get+0x298>
 801133e:	4b08      	ldr	r3, [pc, #32]	; (8011360 <ai_platform_outputs_get+0x2c0>)
 8011340:	6013      	str	r3, [r2, #0]
 8011342:	4b08      	ldr	r3, [pc, #32]	; (8011364 <ai_platform_outputs_get+0x2c4>)
 8011344:	6812      	ldr	r2, [r2, #0]
 8011346:	429a      	cmp	r2, r3
 8011348:	f43f aee5 	beq.w	8011116 <ai_platform_outputs_get+0x76>
 801134c:	e7fe      	b.n	801134c <ai_platform_outputs_get+0x2ac>
 801134e:	bf00      	nop
 8011350:	a1c00100 	.word	0xa1c00100
 8011354:	e0042000 	.word	0xe0042000
 8011358:	5c001000 	.word	0x5c001000
 801135c:	40023000 	.word	0x40023000
 8011360:	f407a5c2 	.word	0xf407a5c2
 8011364:	b5e8b5cd 	.word	0xb5e8b5cd
 8011368:	58024000 	.word	0x58024000
 801136c:	4a0d      	ldr	r2, [pc, #52]	; (80113a4 <ai_platform_outputs_get+0x304>)
 801136e:	2301      	movs	r3, #1
 8011370:	6093      	str	r3, [r2, #8]
 8011372:	6893      	ldr	r3, [r2, #8]
 8011374:	2b00      	cmp	r3, #0
 8011376:	d1fc      	bne.n	8011372 <ai_platform_outputs_get+0x2d2>
 8011378:	490b      	ldr	r1, [pc, #44]	; (80113a8 <ai_platform_outputs_get+0x308>)
 801137a:	4b0c      	ldr	r3, [pc, #48]	; (80113ac <ai_platform_outputs_get+0x30c>)
 801137c:	6011      	str	r1, [r2, #0]
 801137e:	6812      	ldr	r2, [r2, #0]
 8011380:	429a      	cmp	r2, r3
 8011382:	f43f af76 	beq.w	8011272 <ai_platform_outputs_get+0x1d2>
 8011386:	e7fe      	b.n	8011386 <ai_platform_outputs_get+0x2e6>
 8011388:	4a06      	ldr	r2, [pc, #24]	; (80113a4 <ai_platform_outputs_get+0x304>)
 801138a:	2301      	movs	r3, #1
 801138c:	6093      	str	r3, [r2, #8]
 801138e:	6893      	ldr	r3, [r2, #8]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d1fc      	bne.n	801138e <ai_platform_outputs_get+0x2ee>
 8011394:	4b04      	ldr	r3, [pc, #16]	; (80113a8 <ai_platform_outputs_get+0x308>)
 8011396:	6013      	str	r3, [r2, #0]
 8011398:	4b04      	ldr	r3, [pc, #16]	; (80113ac <ai_platform_outputs_get+0x30c>)
 801139a:	6812      	ldr	r2, [r2, #0]
 801139c:	429a      	cmp	r2, r3
 801139e:	f43f aeba 	beq.w	8011116 <ai_platform_outputs_get+0x76>
 80113a2:	e7fe      	b.n	80113a2 <ai_platform_outputs_get+0x302>
 80113a4:	40023000 	.word	0x40023000
 80113a8:	f407a5c2 	.word	0xf407a5c2
 80113ac:	b5e8b5cd 	.word	0xb5e8b5cd

080113b0 <ai_platform_network_create>:
 80113b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80113b4:	b083      	sub	sp, #12
 80113b6:	4604      	mov	r4, r0
 80113b8:	4615      	mov	r5, r2
 80113ba:	461e      	mov	r6, r3
 80113bc:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 80113c0:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 80113c4:	f7ff fb00 	bl	80109c8 <_ai_platform_acquire_crc>
 80113c8:	2800      	cmp	r0, #0
 80113ca:	f000 80bd 	beq.w	8011548 <ai_platform_network_create+0x198>
 80113ce:	4ba5      	ldr	r3, [pc, #660]	; (8011664 <ai_platform_network_create+0x2b4>)
 80113d0:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 80113d4:	4601      	mov	r1, r0
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80113dc:	eb03 020c 	add.w	r2, r3, ip
 80113e0:	2a01      	cmp	r2, #1
 80113e2:	f240 80a8 	bls.w	8011536 <ai_platform_network_create+0x186>
 80113e6:	f240 4249 	movw	r2, #1097	; 0x449
 80113ea:	4293      	cmp	r3, r2
 80113ec:	f000 80a3 	beq.w	8011536 <ai_platform_network_create+0x186>
 80113f0:	4a9d      	ldr	r2, [pc, #628]	; (8011668 <ai_platform_network_create+0x2b8>)
 80113f2:	6813      	ldr	r3, [r2, #0]
 80113f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80113f8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80113fc:	f000 80b9 	beq.w	8011572 <ai_platform_network_create+0x1c2>
 8011400:	6813      	ldr	r3, [r2, #0]
 8011402:	f240 4c83 	movw	ip, #1155	; 0x483
 8011406:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801140a:	4563      	cmp	r3, ip
 801140c:	f000 80a1 	beq.w	8011552 <ai_platform_network_create+0x1a2>
 8011410:	6813      	ldr	r3, [r2, #0]
 8011412:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011416:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801141a:	f000 8153 	beq.w	80116c4 <ai_platform_network_create+0x314>
 801141e:	6813      	ldr	r3, [r2, #0]
 8011420:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011424:	2b00      	cmp	r3, #0
 8011426:	f040 808d 	bne.w	8011544 <ai_platform_network_create+0x194>
 801142a:	4a90      	ldr	r2, [pc, #576]	; (801166c <ai_platform_network_create+0x2bc>)
 801142c:	2318      	movs	r3, #24
 801142e:	6093      	str	r3, [r2, #8]
 8011430:	6893      	ldr	r3, [r2, #8]
 8011432:	2b18      	cmp	r3, #24
 8011434:	f040 8086 	bne.w	8011544 <ai_platform_network_create+0x194>
 8011438:	2301      	movs	r3, #1
 801143a:	6093      	str	r3, [r2, #8]
 801143c:	6893      	ldr	r3, [r2, #8]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d1fc      	bne.n	801143c <ai_platform_network_create+0x8c>
 8011442:	4608      	mov	r0, r1
 8011444:	f7ff fac2 	bl	80109cc <_ai_platform_release_crc>
 8011448:	f7ff fabe 	bl	80109c8 <_ai_platform_acquire_crc>
 801144c:	4b85      	ldr	r3, [pc, #532]	; (8011664 <ai_platform_network_create+0x2b4>)
 801144e:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011458:	189a      	adds	r2, r3, r2
 801145a:	2a01      	cmp	r2, #1
 801145c:	f240 809f 	bls.w	801159e <ai_platform_network_create+0x1ee>
 8011460:	f240 4249 	movw	r2, #1097	; 0x449
 8011464:	4293      	cmp	r3, r2
 8011466:	f000 809a 	beq.w	801159e <ai_platform_network_create+0x1ee>
 801146a:	4a7f      	ldr	r2, [pc, #508]	; (8011668 <ai_platform_network_create+0x2b8>)
 801146c:	6813      	ldr	r3, [r2, #0]
 801146e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011472:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8011476:	f000 80a0 	beq.w	80115ba <ai_platform_network_create+0x20a>
 801147a:	6813      	ldr	r3, [r2, #0]
 801147c:	f240 4183 	movw	r1, #1155	; 0x483
 8011480:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011484:	428b      	cmp	r3, r1
 8011486:	f000 80bf 	beq.w	8011608 <ai_platform_network_create+0x258>
 801148a:	6813      	ldr	r3, [r2, #0]
 801148c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011490:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8011494:	f000 8123 	beq.w	80116de <ai_platform_network_create+0x32e>
 8011498:	6813      	ldr	r3, [r2, #0]
 801149a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801149e:	2b00      	cmp	r3, #0
 80114a0:	f000 80c4 	beq.w	801162c <ai_platform_network_create+0x27c>
 80114a4:	f7ff fa92 	bl	80109cc <_ai_platform_release_crc>
 80114a8:	2c00      	cmp	r4, #0
 80114aa:	f000 80aa 	beq.w	8011602 <ai_platform_network_create+0x252>
 80114ae:	4b70      	ldr	r3, [pc, #448]	; (8011670 <ai_platform_network_create+0x2c0>)
 80114b0:	602b      	str	r3, [r5, #0]
 80114b2:	6025      	str	r5, [r4, #0]
 80114b4:	f000 fc1c 	bl	8011cf0 <core_init>
 80114b8:	2800      	cmp	r0, #0
 80114ba:	f000 8090 	beq.w	80115de <ai_platform_network_create+0x22e>
 80114be:	f7ff fa83 	bl	80109c8 <_ai_platform_acquire_crc>
 80114c2:	4b68      	ldr	r3, [pc, #416]	; (8011664 <ai_platform_network_create+0x2b4>)
 80114c4:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80114ce:	185a      	adds	r2, r3, r1
 80114d0:	2a01      	cmp	r2, #1
 80114d2:	f240 80b9 	bls.w	8011648 <ai_platform_network_create+0x298>
 80114d6:	f240 4249 	movw	r2, #1097	; 0x449
 80114da:	4293      	cmp	r3, r2
 80114dc:	f000 80b4 	beq.w	8011648 <ai_platform_network_create+0x298>
 80114e0:	4a61      	ldr	r2, [pc, #388]	; (8011668 <ai_platform_network_create+0x2b8>)
 80114e2:	6813      	ldr	r3, [r2, #0]
 80114e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80114e8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80114ec:	f000 80c8 	beq.w	8011680 <ai_platform_network_create+0x2d0>
 80114f0:	6813      	ldr	r3, [r2, #0]
 80114f2:	f240 4183 	movw	r1, #1155	; 0x483
 80114f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80114fa:	428b      	cmp	r3, r1
 80114fc:	f000 8107 	beq.w	801170e <ai_platform_network_create+0x35e>
 8011500:	6813      	ldr	r3, [r2, #0]
 8011502:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011506:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801150a:	f000 8111 	beq.w	8011730 <ai_platform_network_create+0x380>
 801150e:	6813      	ldr	r3, [r2, #0]
 8011510:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011514:	2b00      	cmp	r3, #0
 8011516:	f040 80c3 	bne.w	80116a0 <ai_platform_network_create+0x2f0>
 801151a:	4b54      	ldr	r3, [pc, #336]	; (801166c <ai_platform_network_create+0x2bc>)
 801151c:	2201      	movs	r2, #1
 801151e:	609a      	str	r2, [r3, #8]
 8011520:	689a      	ldr	r2, [r3, #8]
 8011522:	2a00      	cmp	r2, #0
 8011524:	d1fc      	bne.n	8011520 <ai_platform_network_create+0x170>
 8011526:	4a53      	ldr	r2, [pc, #332]	; (8011674 <ai_platform_network_create+0x2c4>)
 8011528:	601a      	str	r2, [r3, #0]
 801152a:	681a      	ldr	r2, [r3, #0]
 801152c:	4b52      	ldr	r3, [pc, #328]	; (8011678 <ai_platform_network_create+0x2c8>)
 801152e:	429a      	cmp	r2, r3
 8011530:	f000 80b6 	beq.w	80116a0 <ai_platform_network_create+0x2f0>
 8011534:	e7fe      	b.n	8011534 <ai_platform_network_create+0x184>
 8011536:	4b4d      	ldr	r3, [pc, #308]	; (801166c <ai_platform_network_create+0x2bc>)
 8011538:	2218      	movs	r2, #24
 801153a:	609a      	str	r2, [r3, #8]
 801153c:	689a      	ldr	r2, [r3, #8]
 801153e:	2a18      	cmp	r2, #24
 8011540:	d027      	beq.n	8011592 <ai_platform_network_create+0x1e2>
 8011542:	4608      	mov	r0, r1
 8011544:	f7ff fa42 	bl	80109cc <_ai_platform_release_crc>
 8011548:	f244 1033 	movw	r0, #16691	; 0x4133
 801154c:	b003      	add	sp, #12
 801154e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011552:	4a4a      	ldr	r2, [pc, #296]	; (801167c <ai_platform_network_create+0x2cc>)
 8011554:	2318      	movs	r3, #24
 8011556:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801155a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801155e:	2b18      	cmp	r3, #24
 8011560:	d1f0      	bne.n	8011544 <ai_platform_network_create+0x194>
 8011562:	2301      	movs	r3, #1
 8011564:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011568:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801156c:	2b00      	cmp	r3, #0
 801156e:	d1fb      	bne.n	8011568 <ai_platform_network_create+0x1b8>
 8011570:	e767      	b.n	8011442 <ai_platform_network_create+0x92>
 8011572:	4a42      	ldr	r2, [pc, #264]	; (801167c <ai_platform_network_create+0x2cc>)
 8011574:	2318      	movs	r3, #24
 8011576:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801157a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801157e:	2b18      	cmp	r3, #24
 8011580:	d1e0      	bne.n	8011544 <ai_platform_network_create+0x194>
 8011582:	2301      	movs	r3, #1
 8011584:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011588:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801158c:	2b00      	cmp	r3, #0
 801158e:	d1fb      	bne.n	8011588 <ai_platform_network_create+0x1d8>
 8011590:	e757      	b.n	8011442 <ai_platform_network_create+0x92>
 8011592:	2201      	movs	r2, #1
 8011594:	609a      	str	r2, [r3, #8]
 8011596:	689a      	ldr	r2, [r3, #8]
 8011598:	2a00      	cmp	r2, #0
 801159a:	d1fc      	bne.n	8011596 <ai_platform_network_create+0x1e6>
 801159c:	e751      	b.n	8011442 <ai_platform_network_create+0x92>
 801159e:	4a33      	ldr	r2, [pc, #204]	; (801166c <ai_platform_network_create+0x2bc>)
 80115a0:	2301      	movs	r3, #1
 80115a2:	6093      	str	r3, [r2, #8]
 80115a4:	6891      	ldr	r1, [r2, #8]
 80115a6:	2900      	cmp	r1, #0
 80115a8:	d1fc      	bne.n	80115a4 <ai_platform_network_create+0x1f4>
 80115aa:	4b32      	ldr	r3, [pc, #200]	; (8011674 <ai_platform_network_create+0x2c4>)
 80115ac:	6013      	str	r3, [r2, #0]
 80115ae:	4b32      	ldr	r3, [pc, #200]	; (8011678 <ai_platform_network_create+0x2c8>)
 80115b0:	6812      	ldr	r2, [r2, #0]
 80115b2:	429a      	cmp	r2, r3
 80115b4:	f43f af76 	beq.w	80114a4 <ai_platform_network_create+0xf4>
 80115b8:	e7fe      	b.n	80115b8 <ai_platform_network_create+0x208>
 80115ba:	4a30      	ldr	r2, [pc, #192]	; (801167c <ai_platform_network_create+0x2cc>)
 80115bc:	2301      	movs	r3, #1
 80115be:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80115c2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d1fb      	bne.n	80115c2 <ai_platform_network_create+0x212>
 80115ca:	4b2a      	ldr	r3, [pc, #168]	; (8011674 <ai_platform_network_create+0x2c4>)
 80115cc:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80115d0:	4b29      	ldr	r3, [pc, #164]	; (8011678 <ai_platform_network_create+0x2c8>)
 80115d2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80115d6:	429a      	cmp	r2, r3
 80115d8:	f43f af64 	beq.w	80114a4 <ai_platform_network_create+0xf4>
 80115dc:	e7fe      	b.n	80115dc <ai_platform_network_create+0x22c>
 80115de:	f04f 0930 	mov.w	r9, #48	; 0x30
 80115e2:	2300      	movs	r3, #0
 80115e4:	6023      	str	r3, [r4, #0]
 80115e6:	2410      	movs	r4, #16
 80115e8:	4642      	mov	r2, r8
 80115ea:	4639      	mov	r1, r7
 80115ec:	4630      	mov	r0, r6
 80115ee:	f001 fca3 	bl	8012f38 <ai_version_get>
 80115f2:	4603      	mov	r3, r0
 80115f4:	2000      	movs	r0, #0
 80115f6:	64ab      	str	r3, [r5, #72]	; 0x48
 80115f8:	f369 0007 	bfi	r0, r9, #0, #8
 80115fc:	f364 201f 	bfi	r0, r4, #8, #24
 8011600:	e7a4      	b.n	801154c <ai_platform_network_create+0x19c>
 8011602:	f241 0010 	movw	r0, #4112	; 0x1010
 8011606:	e7a1      	b.n	801154c <ai_platform_network_create+0x19c>
 8011608:	4a1c      	ldr	r2, [pc, #112]	; (801167c <ai_platform_network_create+0x2cc>)
 801160a:	2301      	movs	r3, #1
 801160c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011610:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8011614:	2b00      	cmp	r3, #0
 8011616:	d1fb      	bne.n	8011610 <ai_platform_network_create+0x260>
 8011618:	4b16      	ldr	r3, [pc, #88]	; (8011674 <ai_platform_network_create+0x2c4>)
 801161a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 801161e:	4b16      	ldr	r3, [pc, #88]	; (8011678 <ai_platform_network_create+0x2c8>)
 8011620:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8011624:	429a      	cmp	r2, r3
 8011626:	f43f af3d 	beq.w	80114a4 <ai_platform_network_create+0xf4>
 801162a:	e7fe      	b.n	801162a <ai_platform_network_create+0x27a>
 801162c:	4a0f      	ldr	r2, [pc, #60]	; (801166c <ai_platform_network_create+0x2bc>)
 801162e:	2301      	movs	r3, #1
 8011630:	6093      	str	r3, [r2, #8]
 8011632:	6893      	ldr	r3, [r2, #8]
 8011634:	2b00      	cmp	r3, #0
 8011636:	d1fc      	bne.n	8011632 <ai_platform_network_create+0x282>
 8011638:	4b0e      	ldr	r3, [pc, #56]	; (8011674 <ai_platform_network_create+0x2c4>)
 801163a:	6013      	str	r3, [r2, #0]
 801163c:	4b0e      	ldr	r3, [pc, #56]	; (8011678 <ai_platform_network_create+0x2c8>)
 801163e:	6812      	ldr	r2, [r2, #0]
 8011640:	429a      	cmp	r2, r3
 8011642:	f43f af2f 	beq.w	80114a4 <ai_platform_network_create+0xf4>
 8011646:	e7fe      	b.n	8011646 <ai_platform_network_create+0x296>
 8011648:	4a08      	ldr	r2, [pc, #32]	; (801166c <ai_platform_network_create+0x2bc>)
 801164a:	2301      	movs	r3, #1
 801164c:	6093      	str	r3, [r2, #8]
 801164e:	6893      	ldr	r3, [r2, #8]
 8011650:	2b00      	cmp	r3, #0
 8011652:	d1fc      	bne.n	801164e <ai_platform_network_create+0x29e>
 8011654:	4b07      	ldr	r3, [pc, #28]	; (8011674 <ai_platform_network_create+0x2c4>)
 8011656:	6013      	str	r3, [r2, #0]
 8011658:	4b07      	ldr	r3, [pc, #28]	; (8011678 <ai_platform_network_create+0x2c8>)
 801165a:	6812      	ldr	r2, [r2, #0]
 801165c:	429a      	cmp	r2, r3
 801165e:	d01f      	beq.n	80116a0 <ai_platform_network_create+0x2f0>
 8011660:	e7fe      	b.n	8011660 <ai_platform_network_create+0x2b0>
 8011662:	bf00      	nop
 8011664:	e0042000 	.word	0xe0042000
 8011668:	5c001000 	.word	0x5c001000
 801166c:	40023000 	.word	0x40023000
 8011670:	a1c00100 	.word	0xa1c00100
 8011674:	f407a5c2 	.word	0xf407a5c2
 8011678:	b5e8b5cd 	.word	0xb5e8b5cd
 801167c:	58024000 	.word	0x58024000
 8011680:	4a33      	ldr	r2, [pc, #204]	; (8011750 <ai_platform_network_create+0x3a0>)
 8011682:	2301      	movs	r3, #1
 8011684:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011688:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801168c:	2b00      	cmp	r3, #0
 801168e:	d1fb      	bne.n	8011688 <ai_platform_network_create+0x2d8>
 8011690:	4b30      	ldr	r3, [pc, #192]	; (8011754 <ai_platform_network_create+0x3a4>)
 8011692:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8011696:	4b30      	ldr	r3, [pc, #192]	; (8011758 <ai_platform_network_create+0x3a8>)
 8011698:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801169c:	429a      	cmp	r2, r3
 801169e:	d12c      	bne.n	80116fa <ai_platform_network_create+0x34a>
 80116a0:	f7ff f994 	bl	80109cc <_ai_platform_release_crc>
 80116a4:	2200      	movs	r2, #0
 80116a6:	4639      	mov	r1, r7
 80116a8:	4630      	mov	r0, r6
 80116aa:	f001 fc45 	bl	8012f38 <ai_version_get>
 80116ae:	4681      	mov	r9, r0
 80116b0:	2200      	movs	r2, #0
 80116b2:	2105      	movs	r1, #5
 80116b4:	2001      	movs	r0, #1
 80116b6:	f001 fc3f 	bl	8012f38 <ai_version_get>
 80116ba:	4581      	cmp	r9, r0
 80116bc:	d01e      	beq.n	80116fc <ai_platform_network_create+0x34c>
 80116be:	f04f 0901 	mov.w	r9, #1
 80116c2:	e78e      	b.n	80115e2 <ai_platform_network_create+0x232>
 80116c4:	4b25      	ldr	r3, [pc, #148]	; (801175c <ai_platform_network_create+0x3ac>)
 80116c6:	2218      	movs	r2, #24
 80116c8:	609a      	str	r2, [r3, #8]
 80116ca:	689a      	ldr	r2, [r3, #8]
 80116cc:	2a18      	cmp	r2, #24
 80116ce:	f47f af39 	bne.w	8011544 <ai_platform_network_create+0x194>
 80116d2:	2201      	movs	r2, #1
 80116d4:	609a      	str	r2, [r3, #8]
 80116d6:	689a      	ldr	r2, [r3, #8]
 80116d8:	2a00      	cmp	r2, #0
 80116da:	d1fc      	bne.n	80116d6 <ai_platform_network_create+0x326>
 80116dc:	e6b1      	b.n	8011442 <ai_platform_network_create+0x92>
 80116de:	4a1f      	ldr	r2, [pc, #124]	; (801175c <ai_platform_network_create+0x3ac>)
 80116e0:	2301      	movs	r3, #1
 80116e2:	6093      	str	r3, [r2, #8]
 80116e4:	6893      	ldr	r3, [r2, #8]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d1fc      	bne.n	80116e4 <ai_platform_network_create+0x334>
 80116ea:	4b1a      	ldr	r3, [pc, #104]	; (8011754 <ai_platform_network_create+0x3a4>)
 80116ec:	6013      	str	r3, [r2, #0]
 80116ee:	4b1a      	ldr	r3, [pc, #104]	; (8011758 <ai_platform_network_create+0x3a8>)
 80116f0:	6812      	ldr	r2, [r2, #0]
 80116f2:	429a      	cmp	r2, r3
 80116f4:	f43f aed6 	beq.w	80114a4 <ai_platform_network_create+0xf4>
 80116f8:	e7fe      	b.n	80116f8 <ai_platform_network_create+0x348>
 80116fa:	e7fe      	b.n	80116fa <ai_platform_network_create+0x34a>
 80116fc:	4b18      	ldr	r3, [pc, #96]	; (8011760 <ai_platform_network_create+0x3b0>)
 80116fe:	a801      	add	r0, sp, #4
 8011700:	9301      	str	r3, [sp, #4]
 8011702:	f001 fbb5 	bl	8012e70 <ai_check_custom_types>
 8011706:	b300      	cbz	r0, 801174a <ai_platform_network_create+0x39a>
 8011708:	2400      	movs	r4, #0
 801170a:	46a1      	mov	r9, r4
 801170c:	e76c      	b.n	80115e8 <ai_platform_network_create+0x238>
 801170e:	4b10      	ldr	r3, [pc, #64]	; (8011750 <ai_platform_network_create+0x3a0>)
 8011710:	2201      	movs	r2, #1
 8011712:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8011716:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 801171a:	2a00      	cmp	r2, #0
 801171c:	d1fb      	bne.n	8011716 <ai_platform_network_create+0x366>
 801171e:	4a0d      	ldr	r2, [pc, #52]	; (8011754 <ai_platform_network_create+0x3a4>)
 8011720:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8011724:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8011728:	4b0b      	ldr	r3, [pc, #44]	; (8011758 <ai_platform_network_create+0x3a8>)
 801172a:	429a      	cmp	r2, r3
 801172c:	d0b8      	beq.n	80116a0 <ai_platform_network_create+0x2f0>
 801172e:	e7fe      	b.n	801172e <ai_platform_network_create+0x37e>
 8011730:	4b0a      	ldr	r3, [pc, #40]	; (801175c <ai_platform_network_create+0x3ac>)
 8011732:	2201      	movs	r2, #1
 8011734:	609a      	str	r2, [r3, #8]
 8011736:	689a      	ldr	r2, [r3, #8]
 8011738:	2a00      	cmp	r2, #0
 801173a:	d1fc      	bne.n	8011736 <ai_platform_network_create+0x386>
 801173c:	4a05      	ldr	r2, [pc, #20]	; (8011754 <ai_platform_network_create+0x3a4>)
 801173e:	601a      	str	r2, [r3, #0]
 8011740:	681a      	ldr	r2, [r3, #0]
 8011742:	4b05      	ldr	r3, [pc, #20]	; (8011758 <ai_platform_network_create+0x3a8>)
 8011744:	429a      	cmp	r2, r3
 8011746:	d0ab      	beq.n	80116a0 <ai_platform_network_create+0x2f0>
 8011748:	e7fe      	b.n	8011748 <ai_platform_network_create+0x398>
 801174a:	f04f 0902 	mov.w	r9, #2
 801174e:	e748      	b.n	80115e2 <ai_platform_network_create+0x232>
 8011750:	58024000 	.word	0x58024000
 8011754:	f407a5c2 	.word	0xf407a5c2
 8011758:	b5e8b5cd 	.word	0xb5e8b5cd
 801175c:	40023000 	.word	0x40023000
 8011760:	84048403 	.word	0x84048403

08011764 <ai_platform_network_init>:
 8011764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011768:	2800      	cmp	r0, #0
 801176a:	d052      	beq.n	8011812 <ai_platform_network_init+0xae>
 801176c:	4bab      	ldr	r3, [pc, #684]	; (8011a1c <ai_platform_network_init+0x2b8>)
 801176e:	4604      	mov	r4, r0
 8011770:	6802      	ldr	r2, [r0, #0]
 8011772:	429a      	cmp	r2, r3
 8011774:	d14d      	bne.n	8011812 <ai_platform_network_init+0xae>
 8011776:	460d      	mov	r5, r1
 8011778:	f7ff f926 	bl	80109c8 <_ai_platform_acquire_crc>
 801177c:	4ba8      	ldr	r3, [pc, #672]	; (8011a20 <ai_platform_network_init+0x2bc>)
 801177e:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011788:	189a      	adds	r2, r3, r2
 801178a:	2a01      	cmp	r2, #1
 801178c:	f240 809b 	bls.w	80118c6 <ai_platform_network_init+0x162>
 8011790:	f240 4249 	movw	r2, #1097	; 0x449
 8011794:	4293      	cmp	r3, r2
 8011796:	f000 8096 	beq.w	80118c6 <ai_platform_network_init+0x162>
 801179a:	4aa2      	ldr	r2, [pc, #648]	; (8011a24 <ai_platform_network_init+0x2c0>)
 801179c:	6813      	ldr	r3, [r2, #0]
 801179e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80117a2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80117a6:	f000 809d 	beq.w	80118e4 <ai_platform_network_init+0x180>
 80117aa:	6813      	ldr	r3, [r2, #0]
 80117ac:	f240 4183 	movw	r1, #1155	; 0x483
 80117b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80117b4:	428b      	cmp	r3, r1
 80117b6:	f000 80e4 	beq.w	8011982 <ai_platform_network_init+0x21e>
 80117ba:	6813      	ldr	r3, [r2, #0]
 80117bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80117c0:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80117c4:	f000 811b 	beq.w	80119fe <ai_platform_network_init+0x29a>
 80117c8:	6813      	ldr	r3, [r2, #0]
 80117ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	f000 80f9 	beq.w	80119c6 <ai_platform_network_init+0x262>
 80117d4:	f7ff f8fa 	bl	80109cc <_ai_platform_release_crc>
 80117d8:	2d00      	cmp	r5, #0
 80117da:	f000 8147 	beq.w	8011a6c <ai_platform_network_init+0x308>
 80117de:	4b92      	ldr	r3, [pc, #584]	; (8011a28 <ai_platform_network_init+0x2c4>)
 80117e0:	682a      	ldr	r2, [r5, #0]
 80117e2:	429a      	cmp	r2, r3
 80117e4:	f040 8090 	bne.w	8011908 <ai_platform_network_init+0x1a4>
 80117e8:	692b      	ldr	r3, [r5, #16]
 80117ea:	89ae      	ldrh	r6, [r5, #12]
 80117ec:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 80117f0:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 80117f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80117f6:	e9c4 1207 	strd	r1, r2, [r4, #28]
 80117fa:	2303      	movs	r3, #3
 80117fc:	84a6      	strh	r6, [r4, #36]	; 0x24
 80117fe:	4626      	mov	r6, r4
 8011800:	4620      	mov	r0, r4
 8011802:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 8011806:	60e3      	str	r3, [r4, #12]
 8011808:	f001 fb5a 	bl	8012ec0 <ai_layers_init_all>
 801180c:	4630      	mov	r0, r6
 801180e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011812:	f7ff f8d9 	bl	80109c8 <_ai_platform_acquire_crc>
 8011816:	4b82      	ldr	r3, [pc, #520]	; (8011a20 <ai_platform_network_init+0x2bc>)
 8011818:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011822:	185a      	adds	r2, r3, r1
 8011824:	2a01      	cmp	r2, #1
 8011826:	d92b      	bls.n	8011880 <ai_platform_network_init+0x11c>
 8011828:	f240 4249 	movw	r2, #1097	; 0x449
 801182c:	4293      	cmp	r3, r2
 801182e:	d027      	beq.n	8011880 <ai_platform_network_init+0x11c>
 8011830:	4a7c      	ldr	r2, [pc, #496]	; (8011a24 <ai_platform_network_init+0x2c0>)
 8011832:	6813      	ldr	r3, [r2, #0]
 8011834:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011838:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801183c:	d02d      	beq.n	801189a <ai_platform_network_init+0x136>
 801183e:	6813      	ldr	r3, [r2, #0]
 8011840:	f240 4183 	movw	r1, #1155	; 0x483
 8011844:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011848:	428b      	cmp	r3, r1
 801184a:	f000 8089 	beq.w	8011960 <ai_platform_network_init+0x1fc>
 801184e:	6813      	ldr	r3, [r2, #0]
 8011850:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011854:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8011858:	f000 80c3 	beq.w	80119e2 <ai_platform_network_init+0x27e>
 801185c:	6813      	ldr	r3, [r2, #0]
 801185e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011862:	2b00      	cmp	r3, #0
 8011864:	d129      	bne.n	80118ba <ai_platform_network_init+0x156>
 8011866:	4a71      	ldr	r2, [pc, #452]	; (8011a2c <ai_platform_network_init+0x2c8>)
 8011868:	2301      	movs	r3, #1
 801186a:	6093      	str	r3, [r2, #8]
 801186c:	6893      	ldr	r3, [r2, #8]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d1fc      	bne.n	801186c <ai_platform_network_init+0x108>
 8011872:	496f      	ldr	r1, [pc, #444]	; (8011a30 <ai_platform_network_init+0x2cc>)
 8011874:	4b6f      	ldr	r3, [pc, #444]	; (8011a34 <ai_platform_network_init+0x2d0>)
 8011876:	6011      	str	r1, [r2, #0]
 8011878:	6812      	ldr	r2, [r2, #0]
 801187a:	429a      	cmp	r2, r3
 801187c:	d01d      	beq.n	80118ba <ai_platform_network_init+0x156>
 801187e:	e7fe      	b.n	801187e <ai_platform_network_init+0x11a>
 8011880:	4a6a      	ldr	r2, [pc, #424]	; (8011a2c <ai_platform_network_init+0x2c8>)
 8011882:	2301      	movs	r3, #1
 8011884:	6093      	str	r3, [r2, #8]
 8011886:	6893      	ldr	r3, [r2, #8]
 8011888:	2b00      	cmp	r3, #0
 801188a:	d1fc      	bne.n	8011886 <ai_platform_network_init+0x122>
 801188c:	4968      	ldr	r1, [pc, #416]	; (8011a30 <ai_platform_network_init+0x2cc>)
 801188e:	4b69      	ldr	r3, [pc, #420]	; (8011a34 <ai_platform_network_init+0x2d0>)
 8011890:	6011      	str	r1, [r2, #0]
 8011892:	6812      	ldr	r2, [r2, #0]
 8011894:	429a      	cmp	r2, r3
 8011896:	d010      	beq.n	80118ba <ai_platform_network_init+0x156>
 8011898:	e7fe      	b.n	8011898 <ai_platform_network_init+0x134>
 801189a:	4a67      	ldr	r2, [pc, #412]	; (8011a38 <ai_platform_network_init+0x2d4>)
 801189c:	2301      	movs	r3, #1
 801189e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80118a2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d1fb      	bne.n	80118a2 <ai_platform_network_init+0x13e>
 80118aa:	4961      	ldr	r1, [pc, #388]	; (8011a30 <ai_platform_network_init+0x2cc>)
 80118ac:	4b61      	ldr	r3, [pc, #388]	; (8011a34 <ai_platform_network_init+0x2d0>)
 80118ae:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80118b2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80118b6:	429a      	cmp	r2, r3
 80118b8:	d113      	bne.n	80118e2 <ai_platform_network_init+0x17e>
 80118ba:	2600      	movs	r6, #0
 80118bc:	f7ff f886 	bl	80109cc <_ai_platform_release_crc>
 80118c0:	4630      	mov	r0, r6
 80118c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118c6:	4a59      	ldr	r2, [pc, #356]	; (8011a2c <ai_platform_network_init+0x2c8>)
 80118c8:	2301      	movs	r3, #1
 80118ca:	6093      	str	r3, [r2, #8]
 80118cc:	6893      	ldr	r3, [r2, #8]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d1fc      	bne.n	80118cc <ai_platform_network_init+0x168>
 80118d2:	4b57      	ldr	r3, [pc, #348]	; (8011a30 <ai_platform_network_init+0x2cc>)
 80118d4:	6013      	str	r3, [r2, #0]
 80118d6:	4b57      	ldr	r3, [pc, #348]	; (8011a34 <ai_platform_network_init+0x2d0>)
 80118d8:	6812      	ldr	r2, [r2, #0]
 80118da:	429a      	cmp	r2, r3
 80118dc:	f43f af7a 	beq.w	80117d4 <ai_platform_network_init+0x70>
 80118e0:	e7fe      	b.n	80118e0 <ai_platform_network_init+0x17c>
 80118e2:	e7fe      	b.n	80118e2 <ai_platform_network_init+0x17e>
 80118e4:	4a54      	ldr	r2, [pc, #336]	; (8011a38 <ai_platform_network_init+0x2d4>)
 80118e6:	2301      	movs	r3, #1
 80118e8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80118ec:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d1fb      	bne.n	80118ec <ai_platform_network_init+0x188>
 80118f4:	4b4e      	ldr	r3, [pc, #312]	; (8011a30 <ai_platform_network_init+0x2cc>)
 80118f6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80118fa:	4b4e      	ldr	r3, [pc, #312]	; (8011a34 <ai_platform_network_init+0x2d0>)
 80118fc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8011900:	429a      	cmp	r2, r3
 8011902:	f43f af67 	beq.w	80117d4 <ai_platform_network_init+0x70>
 8011906:	e7fe      	b.n	8011906 <ai_platform_network_init+0x1a2>
 8011908:	2101      	movs	r1, #1
 801190a:	4628      	mov	r0, r5
 801190c:	f105 081c 	add.w	r8, r5, #28
 8011910:	686e      	ldr	r6, [r5, #4]
 8011912:	f7ff f80b 	bl	801092c <ai_buffer_get_size>
 8011916:	4607      	mov	r7, r0
 8011918:	2101      	movs	r1, #1
 801191a:	4640      	mov	r0, r8
 801191c:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8011920:	f7ff f804 	bl	801092c <ai_buffer_get_size>
 8011924:	2f00      	cmp	r7, #0
 8011926:	d13e      	bne.n	80119a6 <ai_platform_network_init+0x242>
 8011928:	2800      	cmp	r0, #0
 801192a:	f000 808e 	beq.w	8011a4a <ai_platform_network_init+0x2e6>
 801192e:	f1b9 0f00 	cmp.w	r9, #0
 8011932:	f000 8094 	beq.w	8011a5e <ai_platform_network_init+0x2fa>
 8011936:	f04f 0c01 	mov.w	ip, #1
 801193a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801193c:	2600      	movs	r6, #0
 801193e:	83e7      	strh	r7, [r4, #30]
 8011940:	4563      	cmp	r3, ip
 8011942:	83a6      	strh	r6, [r4, #28]
 8011944:	d37a      	bcc.n	8011a3c <ai_platform_network_init+0x2d8>
 8011946:	f1bc 0f00 	cmp.w	ip, #0
 801194a:	f000 809c 	beq.w	8011a86 <ai_platform_network_init+0x322>
 801194e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8011950:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8011954:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011956:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 801195a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801195e:	e74c      	b.n	80117fa <ai_platform_network_init+0x96>
 8011960:	4a35      	ldr	r2, [pc, #212]	; (8011a38 <ai_platform_network_init+0x2d4>)
 8011962:	2301      	movs	r3, #1
 8011964:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011968:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801196c:	2b00      	cmp	r3, #0
 801196e:	d1fb      	bne.n	8011968 <ai_platform_network_init+0x204>
 8011970:	492f      	ldr	r1, [pc, #188]	; (8011a30 <ai_platform_network_init+0x2cc>)
 8011972:	4b30      	ldr	r3, [pc, #192]	; (8011a34 <ai_platform_network_init+0x2d0>)
 8011974:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8011978:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801197c:	429a      	cmp	r2, r3
 801197e:	d09c      	beq.n	80118ba <ai_platform_network_init+0x156>
 8011980:	e7fe      	b.n	8011980 <ai_platform_network_init+0x21c>
 8011982:	4a2d      	ldr	r2, [pc, #180]	; (8011a38 <ai_platform_network_init+0x2d4>)
 8011984:	2301      	movs	r3, #1
 8011986:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801198a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801198e:	2b00      	cmp	r3, #0
 8011990:	d1fb      	bne.n	801198a <ai_platform_network_init+0x226>
 8011992:	4b27      	ldr	r3, [pc, #156]	; (8011a30 <ai_platform_network_init+0x2cc>)
 8011994:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8011998:	4b26      	ldr	r3, [pc, #152]	; (8011a34 <ai_platform_network_init+0x2d0>)
 801199a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801199e:	429a      	cmp	r2, r3
 80119a0:	f43f af18 	beq.w	80117d4 <ai_platform_network_init+0x70>
 80119a4:	e7fe      	b.n	80119a4 <ai_platform_network_init+0x240>
 80119a6:	2800      	cmp	r0, #0
 80119a8:	d153      	bne.n	8011a52 <ai_platform_network_init+0x2ee>
 80119aa:	4680      	mov	r8, r0
 80119ac:	4684      	mov	ip, r0
 80119ae:	2e00      	cmp	r6, #0
 80119b0:	d063      	beq.n	8011a7a <ai_platform_network_init+0x316>
 80119b2:	8be6      	ldrh	r6, [r4, #30]
 80119b4:	2e00      	cmp	r6, #0
 80119b6:	d168      	bne.n	8011a8a <ai_platform_network_init+0x326>
 80119b8:	2212      	movs	r2, #18
 80119ba:	2116      	movs	r1, #22
 80119bc:	f104 0010 	add.w	r0, r4, #16
 80119c0:	f000 f99e 	bl	8011d00 <core_set_error>
 80119c4:	e77c      	b.n	80118c0 <ai_platform_network_init+0x15c>
 80119c6:	4a19      	ldr	r2, [pc, #100]	; (8011a2c <ai_platform_network_init+0x2c8>)
 80119c8:	2301      	movs	r3, #1
 80119ca:	6093      	str	r3, [r2, #8]
 80119cc:	6893      	ldr	r3, [r2, #8]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d1fc      	bne.n	80119cc <ai_platform_network_init+0x268>
 80119d2:	4b17      	ldr	r3, [pc, #92]	; (8011a30 <ai_platform_network_init+0x2cc>)
 80119d4:	6013      	str	r3, [r2, #0]
 80119d6:	4b17      	ldr	r3, [pc, #92]	; (8011a34 <ai_platform_network_init+0x2d0>)
 80119d8:	6812      	ldr	r2, [r2, #0]
 80119da:	429a      	cmp	r2, r3
 80119dc:	f43f aefa 	beq.w	80117d4 <ai_platform_network_init+0x70>
 80119e0:	e7fe      	b.n	80119e0 <ai_platform_network_init+0x27c>
 80119e2:	4a12      	ldr	r2, [pc, #72]	; (8011a2c <ai_platform_network_init+0x2c8>)
 80119e4:	2301      	movs	r3, #1
 80119e6:	6093      	str	r3, [r2, #8]
 80119e8:	6893      	ldr	r3, [r2, #8]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d1fc      	bne.n	80119e8 <ai_platform_network_init+0x284>
 80119ee:	4910      	ldr	r1, [pc, #64]	; (8011a30 <ai_platform_network_init+0x2cc>)
 80119f0:	4b10      	ldr	r3, [pc, #64]	; (8011a34 <ai_platform_network_init+0x2d0>)
 80119f2:	6011      	str	r1, [r2, #0]
 80119f4:	6812      	ldr	r2, [r2, #0]
 80119f6:	429a      	cmp	r2, r3
 80119f8:	f43f af5f 	beq.w	80118ba <ai_platform_network_init+0x156>
 80119fc:	e7fe      	b.n	80119fc <ai_platform_network_init+0x298>
 80119fe:	4a0b      	ldr	r2, [pc, #44]	; (8011a2c <ai_platform_network_init+0x2c8>)
 8011a00:	2301      	movs	r3, #1
 8011a02:	6093      	str	r3, [r2, #8]
 8011a04:	6893      	ldr	r3, [r2, #8]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d1fc      	bne.n	8011a04 <ai_platform_network_init+0x2a0>
 8011a0a:	4b09      	ldr	r3, [pc, #36]	; (8011a30 <ai_platform_network_init+0x2cc>)
 8011a0c:	6013      	str	r3, [r2, #0]
 8011a0e:	4b09      	ldr	r3, [pc, #36]	; (8011a34 <ai_platform_network_init+0x2d0>)
 8011a10:	6812      	ldr	r2, [r2, #0]
 8011a12:	429a      	cmp	r2, r3
 8011a14:	f43f aede 	beq.w	80117d4 <ai_platform_network_init+0x70>
 8011a18:	e7fe      	b.n	8011a18 <ai_platform_network_init+0x2b4>
 8011a1a:	bf00      	nop
 8011a1c:	a1c00100 	.word	0xa1c00100
 8011a20:	e0042000 	.word	0xe0042000
 8011a24:	5c001000 	.word	0x5c001000
 8011a28:	a1facade 	.word	0xa1facade
 8011a2c:	40023000 	.word	0x40023000
 8011a30:	f407a5c2 	.word	0xf407a5c2
 8011a34:	b5e8b5cd 	.word	0xb5e8b5cd
 8011a38:	58024000 	.word	0x58024000
 8011a3c:	2213      	movs	r2, #19
 8011a3e:	2116      	movs	r1, #22
 8011a40:	f104 0010 	add.w	r0, r4, #16
 8011a44:	f000 f95c 	bl	8011d00 <core_set_error>
 8011a48:	e73a      	b.n	80118c0 <ai_platform_network_init+0x15c>
 8011a4a:	4607      	mov	r7, r0
 8011a4c:	4680      	mov	r8, r0
 8011a4e:	4684      	mov	ip, r0
 8011a50:	e773      	b.n	801193a <ai_platform_network_init+0x1d6>
 8011a52:	f1b9 0f00 	cmp.w	r9, #0
 8011a56:	d002      	beq.n	8011a5e <ai_platform_network_init+0x2fa>
 8011a58:	f04f 0c01 	mov.w	ip, #1
 8011a5c:	e7a7      	b.n	80119ae <ai_platform_network_init+0x24a>
 8011a5e:	2110      	movs	r1, #16
 8011a60:	2213      	movs	r2, #19
 8011a62:	2600      	movs	r6, #0
 8011a64:	1860      	adds	r0, r4, r1
 8011a66:	f000 f94b 	bl	8011d00 <core_set_error>
 8011a6a:	e729      	b.n	80118c0 <ai_platform_network_init+0x15c>
 8011a6c:	2110      	movs	r1, #16
 8011a6e:	2211      	movs	r2, #17
 8011a70:	462e      	mov	r6, r5
 8011a72:	1860      	adds	r0, r4, r1
 8011a74:	f000 f944 	bl	8011d00 <core_set_error>
 8011a78:	e722      	b.n	80118c0 <ai_platform_network_init+0x15c>
 8011a7a:	2110      	movs	r1, #16
 8011a7c:	2212      	movs	r2, #18
 8011a7e:	1860      	adds	r0, r4, r1
 8011a80:	f000 f93e 	bl	8011d00 <core_set_error>
 8011a84:	e71c      	b.n	80118c0 <ai_platform_network_init+0x15c>
 8011a86:	4666      	mov	r6, ip
 8011a88:	e6b7      	b.n	80117fa <ai_platform_network_init+0x96>
 8011a8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a8c:	6a26      	ldr	r6, [r4, #32]
 8011a8e:	2701      	movs	r7, #1
 8011a90:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011a92:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011a96:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8011a9a:	e74e      	b.n	801193a <ai_platform_network_init+0x1d6>

08011a9c <ai_platform_network_post_init>:
 8011a9c:	b538      	push	{r3, r4, r5, lr}
 8011a9e:	2800      	cmp	r0, #0
 8011aa0:	d04e      	beq.n	8011b40 <ai_platform_network_post_init+0xa4>
 8011aa2:	4b8c      	ldr	r3, [pc, #560]	; (8011cd4 <ai_platform_network_post_init+0x238>)
 8011aa4:	4604      	mov	r4, r0
 8011aa6:	6802      	ldr	r2, [r0, #0]
 8011aa8:	429a      	cmp	r2, r3
 8011aaa:	d149      	bne.n	8011b40 <ai_platform_network_post_init+0xa4>
 8011aac:	f7fe ff8c 	bl	80109c8 <_ai_platform_acquire_crc>
 8011ab0:	4b89      	ldr	r3, [pc, #548]	; (8011cd8 <ai_platform_network_post_init+0x23c>)
 8011ab2:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011abc:	189a      	adds	r2, r3, r2
 8011abe:	2a01      	cmp	r2, #1
 8011ac0:	f240 8095 	bls.w	8011bee <ai_platform_network_post_init+0x152>
 8011ac4:	f240 4249 	movw	r2, #1097	; 0x449
 8011ac8:	4293      	cmp	r3, r2
 8011aca:	f000 8090 	beq.w	8011bee <ai_platform_network_post_init+0x152>
 8011ace:	4a83      	ldr	r2, [pc, #524]	; (8011cdc <ai_platform_network_post_init+0x240>)
 8011ad0:	6813      	ldr	r3, [r2, #0]
 8011ad2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011ad6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8011ada:	f000 8096 	beq.w	8011c0a <ai_platform_network_post_init+0x16e>
 8011ade:	6813      	ldr	r3, [r2, #0]
 8011ae0:	f240 4183 	movw	r1, #1155	; 0x483
 8011ae4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011ae8:	428b      	cmp	r3, r1
 8011aea:	f000 80b8 	beq.w	8011c5e <ai_platform_network_post_init+0x1c2>
 8011aee:	6813      	ldr	r3, [r2, #0]
 8011af0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011af4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8011af8:	f000 80de 	beq.w	8011cb8 <ai_platform_network_post_init+0x21c>
 8011afc:	6813      	ldr	r3, [r2, #0]
 8011afe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	f000 80bd 	beq.w	8011c82 <ai_platform_network_post_init+0x1e6>
 8011b08:	f7fe ff60 	bl	80109cc <_ai_platform_release_crc>
 8011b0c:	68e3      	ldr	r3, [r4, #12]
 8011b0e:	f013 0502 	ands.w	r5, r3, #2
 8011b12:	f000 808c 	beq.w	8011c2e <ai_platform_network_post_init+0x192>
 8011b16:	4620      	mov	r0, r4
 8011b18:	f001 f9e0 	bl	8012edc <ai_layers_post_init_all>
 8011b1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011b1e:	b16b      	cbz	r3, 8011b3c <ai_platform_network_post_init+0xa0>
 8011b20:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8011b22:	e007      	b.n	8011b34 <ai_platform_network_post_init+0x98>
 8011b24:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8011b28:	4798      	blx	r3
 8011b2a:	692b      	ldr	r3, [r5, #16]
 8011b2c:	b133      	cbz	r3, 8011b3c <ai_platform_network_post_init+0xa0>
 8011b2e:	42ab      	cmp	r3, r5
 8011b30:	461d      	mov	r5, r3
 8011b32:	d003      	beq.n	8011b3c <ai_platform_network_post_init+0xa0>
 8011b34:	4629      	mov	r1, r5
 8011b36:	2000      	movs	r0, #0
 8011b38:	2d00      	cmp	r5, #0
 8011b3a:	d1f3      	bne.n	8011b24 <ai_platform_network_post_init+0x88>
 8011b3c:	2001      	movs	r0, #1
 8011b3e:	bd38      	pop	{r3, r4, r5, pc}
 8011b40:	f7fe ff42 	bl	80109c8 <_ai_platform_acquire_crc>
 8011b44:	4b64      	ldr	r3, [pc, #400]	; (8011cd8 <ai_platform_network_post_init+0x23c>)
 8011b46:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011b50:	185a      	adds	r2, r3, r1
 8011b52:	2a01      	cmp	r2, #1
 8011b54:	d92a      	bls.n	8011bac <ai_platform_network_post_init+0x110>
 8011b56:	f240 4249 	movw	r2, #1097	; 0x449
 8011b5a:	4293      	cmp	r3, r2
 8011b5c:	d026      	beq.n	8011bac <ai_platform_network_post_init+0x110>
 8011b5e:	4a5f      	ldr	r2, [pc, #380]	; (8011cdc <ai_platform_network_post_init+0x240>)
 8011b60:	6813      	ldr	r3, [r2, #0]
 8011b62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011b66:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8011b6a:	d02c      	beq.n	8011bc6 <ai_platform_network_post_init+0x12a>
 8011b6c:	6813      	ldr	r3, [r2, #0]
 8011b6e:	f240 4183 	movw	r1, #1155	; 0x483
 8011b72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011b76:	428b      	cmp	r3, r1
 8011b78:	d060      	beq.n	8011c3c <ai_platform_network_post_init+0x1a0>
 8011b7a:	6813      	ldr	r3, [r2, #0]
 8011b7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011b80:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8011b84:	f000 808b 	beq.w	8011c9e <ai_platform_network_post_init+0x202>
 8011b88:	6813      	ldr	r3, [r2, #0]
 8011b8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d129      	bne.n	8011be6 <ai_platform_network_post_init+0x14a>
 8011b92:	4a53      	ldr	r2, [pc, #332]	; (8011ce0 <ai_platform_network_post_init+0x244>)
 8011b94:	2301      	movs	r3, #1
 8011b96:	6093      	str	r3, [r2, #8]
 8011b98:	6893      	ldr	r3, [r2, #8]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d1fc      	bne.n	8011b98 <ai_platform_network_post_init+0xfc>
 8011b9e:	4951      	ldr	r1, [pc, #324]	; (8011ce4 <ai_platform_network_post_init+0x248>)
 8011ba0:	4b51      	ldr	r3, [pc, #324]	; (8011ce8 <ai_platform_network_post_init+0x24c>)
 8011ba2:	6011      	str	r1, [r2, #0]
 8011ba4:	6812      	ldr	r2, [r2, #0]
 8011ba6:	429a      	cmp	r2, r3
 8011ba8:	d01d      	beq.n	8011be6 <ai_platform_network_post_init+0x14a>
 8011baa:	e7fe      	b.n	8011baa <ai_platform_network_post_init+0x10e>
 8011bac:	4a4c      	ldr	r2, [pc, #304]	; (8011ce0 <ai_platform_network_post_init+0x244>)
 8011bae:	2301      	movs	r3, #1
 8011bb0:	6093      	str	r3, [r2, #8]
 8011bb2:	6893      	ldr	r3, [r2, #8]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d1fc      	bne.n	8011bb2 <ai_platform_network_post_init+0x116>
 8011bb8:	494a      	ldr	r1, [pc, #296]	; (8011ce4 <ai_platform_network_post_init+0x248>)
 8011bba:	4b4b      	ldr	r3, [pc, #300]	; (8011ce8 <ai_platform_network_post_init+0x24c>)
 8011bbc:	6011      	str	r1, [r2, #0]
 8011bbe:	6812      	ldr	r2, [r2, #0]
 8011bc0:	429a      	cmp	r2, r3
 8011bc2:	d010      	beq.n	8011be6 <ai_platform_network_post_init+0x14a>
 8011bc4:	e7fe      	b.n	8011bc4 <ai_platform_network_post_init+0x128>
 8011bc6:	4a49      	ldr	r2, [pc, #292]	; (8011cec <ai_platform_network_post_init+0x250>)
 8011bc8:	2301      	movs	r3, #1
 8011bca:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011bce:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d1fb      	bne.n	8011bce <ai_platform_network_post_init+0x132>
 8011bd6:	4943      	ldr	r1, [pc, #268]	; (8011ce4 <ai_platform_network_post_init+0x248>)
 8011bd8:	4b43      	ldr	r3, [pc, #268]	; (8011ce8 <ai_platform_network_post_init+0x24c>)
 8011bda:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8011bde:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8011be2:	429a      	cmp	r2, r3
 8011be4:	d110      	bne.n	8011c08 <ai_platform_network_post_init+0x16c>
 8011be6:	f7fe fef1 	bl	80109cc <_ai_platform_release_crc>
 8011bea:	2000      	movs	r0, #0
 8011bec:	bd38      	pop	{r3, r4, r5, pc}
 8011bee:	4a3c      	ldr	r2, [pc, #240]	; (8011ce0 <ai_platform_network_post_init+0x244>)
 8011bf0:	2301      	movs	r3, #1
 8011bf2:	6093      	str	r3, [r2, #8]
 8011bf4:	6893      	ldr	r3, [r2, #8]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d1fc      	bne.n	8011bf4 <ai_platform_network_post_init+0x158>
 8011bfa:	493a      	ldr	r1, [pc, #232]	; (8011ce4 <ai_platform_network_post_init+0x248>)
 8011bfc:	4b3a      	ldr	r3, [pc, #232]	; (8011ce8 <ai_platform_network_post_init+0x24c>)
 8011bfe:	6011      	str	r1, [r2, #0]
 8011c00:	6812      	ldr	r2, [r2, #0]
 8011c02:	429a      	cmp	r2, r3
 8011c04:	d080      	beq.n	8011b08 <ai_platform_network_post_init+0x6c>
 8011c06:	e7fe      	b.n	8011c06 <ai_platform_network_post_init+0x16a>
 8011c08:	e7fe      	b.n	8011c08 <ai_platform_network_post_init+0x16c>
 8011c0a:	4a38      	ldr	r2, [pc, #224]	; (8011cec <ai_platform_network_post_init+0x250>)
 8011c0c:	2301      	movs	r3, #1
 8011c0e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011c12:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d1fb      	bne.n	8011c12 <ai_platform_network_post_init+0x176>
 8011c1a:	4932      	ldr	r1, [pc, #200]	; (8011ce4 <ai_platform_network_post_init+0x248>)
 8011c1c:	4b32      	ldr	r3, [pc, #200]	; (8011ce8 <ai_platform_network_post_init+0x24c>)
 8011c1e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8011c22:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8011c26:	429a      	cmp	r2, r3
 8011c28:	f43f af6e 	beq.w	8011b08 <ai_platform_network_post_init+0x6c>
 8011c2c:	e7fe      	b.n	8011c2c <ai_platform_network_post_init+0x190>
 8011c2e:	2210      	movs	r2, #16
 8011c30:	2111      	movs	r1, #17
 8011c32:	18a0      	adds	r0, r4, r2
 8011c34:	f000 f864 	bl	8011d00 <core_set_error>
 8011c38:	4628      	mov	r0, r5
 8011c3a:	bd38      	pop	{r3, r4, r5, pc}
 8011c3c:	4a2b      	ldr	r2, [pc, #172]	; (8011cec <ai_platform_network_post_init+0x250>)
 8011c3e:	2301      	movs	r3, #1
 8011c40:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011c44:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d1fb      	bne.n	8011c44 <ai_platform_network_post_init+0x1a8>
 8011c4c:	4925      	ldr	r1, [pc, #148]	; (8011ce4 <ai_platform_network_post_init+0x248>)
 8011c4e:	4b26      	ldr	r3, [pc, #152]	; (8011ce8 <ai_platform_network_post_init+0x24c>)
 8011c50:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8011c54:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8011c58:	429a      	cmp	r2, r3
 8011c5a:	d0c4      	beq.n	8011be6 <ai_platform_network_post_init+0x14a>
 8011c5c:	e7fe      	b.n	8011c5c <ai_platform_network_post_init+0x1c0>
 8011c5e:	4a23      	ldr	r2, [pc, #140]	; (8011cec <ai_platform_network_post_init+0x250>)
 8011c60:	2301      	movs	r3, #1
 8011c62:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011c66:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d1fb      	bne.n	8011c66 <ai_platform_network_post_init+0x1ca>
 8011c6e:	491d      	ldr	r1, [pc, #116]	; (8011ce4 <ai_platform_network_post_init+0x248>)
 8011c70:	4b1d      	ldr	r3, [pc, #116]	; (8011ce8 <ai_platform_network_post_init+0x24c>)
 8011c72:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8011c76:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8011c7a:	429a      	cmp	r2, r3
 8011c7c:	f43f af44 	beq.w	8011b08 <ai_platform_network_post_init+0x6c>
 8011c80:	e7fe      	b.n	8011c80 <ai_platform_network_post_init+0x1e4>
 8011c82:	4a17      	ldr	r2, [pc, #92]	; (8011ce0 <ai_platform_network_post_init+0x244>)
 8011c84:	2301      	movs	r3, #1
 8011c86:	6093      	str	r3, [r2, #8]
 8011c88:	6893      	ldr	r3, [r2, #8]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d1fc      	bne.n	8011c88 <ai_platform_network_post_init+0x1ec>
 8011c8e:	4915      	ldr	r1, [pc, #84]	; (8011ce4 <ai_platform_network_post_init+0x248>)
 8011c90:	4b15      	ldr	r3, [pc, #84]	; (8011ce8 <ai_platform_network_post_init+0x24c>)
 8011c92:	6011      	str	r1, [r2, #0]
 8011c94:	6812      	ldr	r2, [r2, #0]
 8011c96:	429a      	cmp	r2, r3
 8011c98:	f43f af36 	beq.w	8011b08 <ai_platform_network_post_init+0x6c>
 8011c9c:	e7fe      	b.n	8011c9c <ai_platform_network_post_init+0x200>
 8011c9e:	4a10      	ldr	r2, [pc, #64]	; (8011ce0 <ai_platform_network_post_init+0x244>)
 8011ca0:	2301      	movs	r3, #1
 8011ca2:	6093      	str	r3, [r2, #8]
 8011ca4:	6893      	ldr	r3, [r2, #8]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d1fc      	bne.n	8011ca4 <ai_platform_network_post_init+0x208>
 8011caa:	490e      	ldr	r1, [pc, #56]	; (8011ce4 <ai_platform_network_post_init+0x248>)
 8011cac:	4b0e      	ldr	r3, [pc, #56]	; (8011ce8 <ai_platform_network_post_init+0x24c>)
 8011cae:	6011      	str	r1, [r2, #0]
 8011cb0:	6812      	ldr	r2, [r2, #0]
 8011cb2:	429a      	cmp	r2, r3
 8011cb4:	d097      	beq.n	8011be6 <ai_platform_network_post_init+0x14a>
 8011cb6:	e7fe      	b.n	8011cb6 <ai_platform_network_post_init+0x21a>
 8011cb8:	4a09      	ldr	r2, [pc, #36]	; (8011ce0 <ai_platform_network_post_init+0x244>)
 8011cba:	2301      	movs	r3, #1
 8011cbc:	6093      	str	r3, [r2, #8]
 8011cbe:	6893      	ldr	r3, [r2, #8]
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d1fc      	bne.n	8011cbe <ai_platform_network_post_init+0x222>
 8011cc4:	4907      	ldr	r1, [pc, #28]	; (8011ce4 <ai_platform_network_post_init+0x248>)
 8011cc6:	4b08      	ldr	r3, [pc, #32]	; (8011ce8 <ai_platform_network_post_init+0x24c>)
 8011cc8:	6011      	str	r1, [r2, #0]
 8011cca:	6812      	ldr	r2, [r2, #0]
 8011ccc:	429a      	cmp	r2, r3
 8011cce:	f43f af1b 	beq.w	8011b08 <ai_platform_network_post_init+0x6c>
 8011cd2:	e7fe      	b.n	8011cd2 <ai_platform_network_post_init+0x236>
 8011cd4:	a1c00100 	.word	0xa1c00100
 8011cd8:	e0042000 	.word	0xe0042000
 8011cdc:	5c001000 	.word	0x5c001000
 8011ce0:	40023000 	.word	0x40023000
 8011ce4:	f407a5c2 	.word	0xf407a5c2
 8011ce8:	b5e8b5cd 	.word	0xb5e8b5cd
 8011cec:	58024000 	.word	0x58024000

08011cf0 <core_init>:
 8011cf0:	2001      	movs	r0, #1
 8011cf2:	4770      	bx	lr

08011cf4 <core_get_error>:
 8011cf4:	4603      	mov	r3, r0
 8011cf6:	2200      	movs	r2, #0
 8011cf8:	6800      	ldr	r0, [r0, #0]
 8011cfa:	601a      	str	r2, [r3, #0]
 8011cfc:	4770      	bx	lr
 8011cfe:	bf00      	nop

08011d00 <core_set_error>:
 8011d00:	4603      	mov	r3, r0
 8011d02:	7800      	ldrb	r0, [r0, #0]
 8011d04:	b108      	cbz	r0, 8011d0a <core_set_error+0xa>
 8011d06:	2000      	movs	r0, #0
 8011d08:	4770      	bx	lr
 8011d0a:	7019      	strb	r1, [r3, #0]
 8011d0c:	2001      	movs	r0, #1
 8011d0e:	6819      	ldr	r1, [r3, #0]
 8011d10:	f362 211f 	bfi	r1, r2, #8, #24
 8011d14:	6019      	str	r1, [r3, #0]
 8011d16:	4770      	bx	lr

08011d18 <func_dummy>:
 8011d18:	4770      	bx	lr
 8011d1a:	bf00      	nop

08011d1c <ai_conv2d_stripe_f32.constprop.0>:
 8011d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d20:	ed2d 8b0e 	vpush	{d8-d14}
 8011d24:	b09d      	sub	sp, #116	; 0x74
 8011d26:	af00      	add	r7, sp, #0
 8011d28:	f8d7 90ec 	ldr.w	r9, [r7, #236]	; 0xec
 8011d2c:	66f8      	str	r0, [r7, #108]	; 0x6c
 8011d2e:	f1b9 0f01 	cmp.w	r9, #1
 8011d32:	f8d7 60d0 	ldr.w	r6, [r7, #208]	; 0xd0
 8011d36:	f8d7 50e4 	ldr.w	r5, [r7, #228]	; 0xe4
 8011d3a:	f8d7 c0fc 	ldr.w	ip, [r7, #252]	; 0xfc
 8011d3e:	f9b7 e104 	ldrsh.w	lr, [r7, #260]	; 0x104
 8011d42:	6579      	str	r1, [r7, #84]	; 0x54
 8011d44:	e9c7 3219 	strd	r3, r2, [r7, #100]	; 0x64
 8011d48:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8011d4c:	f9b7 2108 	ldrsh.w	r2, [r7, #264]	; 0x108
 8011d50:	663b      	str	r3, [r7, #96]	; 0x60
 8011d52:	e9d7 303c 	ldrd	r3, r0, [r7, #240]	; 0xf0
 8011d56:	f000 812f 	beq.w	8011fb8 <ai_conv2d_stripe_f32.constprop.0+0x29c>
 8011d5a:	45b1      	cmp	r9, r6
 8011d5c:	f000 8278 	beq.w	8012250 <ai_conv2d_stripe_f32.constprop.0+0x534>
 8011d60:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8011d64:	2900      	cmp	r1, #0
 8011d66:	f000 8114 	beq.w	8011f92 <ai_conv2d_stripe_f32.constprop.0+0x276>
 8011d6a:	eba0 0803 	sub.w	r8, r0, r3
 8011d6e:	1898      	adds	r0, r3, r2
 8011d70:	eddf 6a90 	vldr	s13, [pc, #576]	; 8011fb4 <ai_conv2d_stripe_f32.constprop.0+0x298>
 8011d74:	3801      	subs	r0, #1
 8011d76:	fb93 f1f2 	sdiv	r1, r3, r2
 8011d7a:	fb90 f0f2 	sdiv	r0, r0, r2
 8011d7e:	fb02 3111 	mls	r1, r2, r1, r3
 8011d82:	eba2 0a01 	sub.w	sl, r2, r1
 8011d86:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8011d8a:	fb01 f100 	mul.w	r1, r1, r0
 8011d8e:	fb9a f0f2 	sdiv	r0, sl, r2
 8011d92:	fb02 a010 	mls	r0, r2, r0, sl
 8011d96:	62b9      	str	r1, [r7, #40]	; 0x28
 8011d98:	4403      	add	r3, r0
 8011d9a:	eba8 0100 	sub.w	r1, r8, r0
 8011d9e:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8011da2:	4463      	add	r3, ip
 8011da4:	4411      	add	r1, r2
 8011da6:	fb00 f303 	mul.w	r3, r0, r3
 8011daa:	3901      	subs	r1, #1
 8011dac:	fbb6 f4f9 	udiv	r4, r6, r9
 8011db0:	623b      	str	r3, [r7, #32]
 8011db2:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 8011db6:	fb00 f302 	mul.w	r3, r0, r2
 8011dba:	f8c7 a014 	str.w	sl, [r7, #20]
 8011dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011dc0:	fb0e f306 	mul.w	r3, lr, r6
 8011dc4:	1b1b      	subs	r3, r3, r4
 8011dc6:	fb91 fbf2 	sdiv	fp, r1, r2
 8011dca:	009b      	lsls	r3, r3, #2
 8011dcc:	eba5 020b 	sub.w	r2, r5, fp
 8011dd0:	00b1      	lsls	r1, r6, #2
 8011dd2:	46dc      	mov	ip, fp
 8011dd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8011dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011dda:	61f9      	str	r1, [r7, #28]
 8011ddc:	fb04 f303 	mul.w	r3, r4, r3
 8011de0:	fb02 f303 	mul.w	r3, r2, r3
 8011de4:	009b      	lsls	r3, r3, #2
 8011de6:	627b      	str	r3, [r7, #36]	; 0x24
 8011de8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011dec:	fbb3 f3f9 	udiv	r3, r3, r9
 8011df0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011df2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011df6:	009b      	lsls	r3, r3, #2
 8011df8:	633b      	str	r3, [r7, #48]	; 0x30
 8011dfa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011dfe:	f1c3 0800 	rsb	r8, r3, #0
 8011e02:	ebae 0303 	sub.w	r3, lr, r3
 8011e06:	65bb      	str	r3, [r7, #88]	; 0x58
 8011e08:	2300      	movs	r3, #0
 8011e0a:	653b      	str	r3, [r7, #80]	; 0x50
 8011e0c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	f2c0 80c4 	blt.w	8011f9e <ai_conv2d_stripe_f32.constprop.0+0x282>
 8011e16:	2000      	movs	r0, #0
 8011e18:	4673      	mov	r3, lr
 8011e1a:	4672      	mov	r2, lr
 8011e1c:	4601      	mov	r1, r0
 8011e1e:	3b01      	subs	r3, #1
 8011e20:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8011e22:	f8d7 5100 	ldr.w	r5, [r7, #256]	; 0x100
 8011e26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011e2a:	fb93 f3fe 	sdiv	r3, r3, lr
 8011e2e:	4423      	add	r3, r4
 8011e30:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8011e32:	fb0a 4303 	mla	r3, sl, r3, r4
 8011e36:	fb92 f4fe 	sdiv	r4, r2, lr
 8011e3a:	fb0e 2214 	mls	r2, lr, r4, r2
 8011e3e:	f8d7 40d8 	ldr.w	r4, [r7, #216]	; 0xd8
 8011e42:	4444      	add	r4, r8
 8011e44:	42ac      	cmp	r4, r5
 8011e46:	bf94      	ite	ls
 8011e48:	ebc1 0104 	rsbls	r1, r1, r4
 8011e4c:	ebc1 0105 	rsbhi	r1, r1, r5
 8011e50:	6a3c      	ldr	r4, [r7, #32]
 8011e52:	1a89      	subs	r1, r1, r2
 8011e54:	4471      	add	r1, lr
 8011e56:	3901      	subs	r1, #1
 8011e58:	fb91 f6fe 	sdiv	r6, r1, lr
 8011e5c:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8011e60:	4421      	add	r1, r4
 8011e62:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8011e64:	4401      	add	r1, r0
 8011e66:	69f8      	ldr	r0, [r7, #28]
 8011e68:	4411      	add	r1, r2
 8011e6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011e6c:	fb00 2201 	mla	r2, r0, r1, r2
 8011e70:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8011e72:	65fa      	str	r2, [r7, #92]	; 0x5c
 8011e74:	460a      	mov	r2, r1
 8011e76:	2900      	cmp	r1, #0
 8011e78:	bf08      	it	eq
 8011e7a:	4622      	moveq	r2, r4
 8011e7c:	42a2      	cmp	r2, r4
 8011e7e:	637a      	str	r2, [r7, #52]	; 0x34
 8011e80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e82:	fe06 7a87 	vseleq.f32	s14, s13, s14
 8011e86:	fb0e 2116 	mls	r1, lr, r6, r2
 8011e8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8011e8e:	1b92      	subs	r2, r2, r6
 8011e90:	f1b9 0f00 	cmp.w	r9, #0
 8011e94:	d066      	beq.n	8011f64 <ai_conv2d_stripe_f32.constprop.0+0x248>
 8011e96:	fb0a f202 	mul.w	r2, sl, r2
 8011e9a:	fb00 f101 	mul.w	r1, r0, r1
 8011e9e:	643a      	str	r2, [r7, #64]	; 0x40
 8011ea0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8011ea4:	6479      	str	r1, [r7, #68]	; 0x44
 8011ea6:	4591      	cmp	r9, r2
 8011ea8:	d85c      	bhi.n	8011f64 <ai_conv2d_stripe_f32.constprop.0+0x248>
 8011eaa:	2500      	movs	r5, #0
 8011eac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011eae:	46ab      	mov	fp, r5
 8011eb0:	3a01      	subs	r2, #1
 8011eb2:	e9c7 e803 	strd	lr, r8, [r7, #12]
 8011eb6:	61ba      	str	r2, [r7, #24]
 8011eb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011eba:	f04f 0800 	mov.w	r8, #0
 8011ebe:	f8c7 b008 	str.w	fp, [r7, #8]
 8011ec2:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8011ec6:	63ba      	str	r2, [r7, #56]	; 0x38
 8011ec8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011eca:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8011ece:	63fa      	str	r2, [r7, #60]	; 0x3c
 8011ed0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011ed2:	f1bc 0f00 	cmp.w	ip, #0
 8011ed6:	ecf2 7a01 	vldmia	r2!, {s15}
 8011eda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011ede:	63ba      	str	r2, [r7, #56]	; 0x38
 8011ee0:	dd21      	ble.n	8011f26 <ai_conv2d_stripe_f32.constprop.0+0x20a>
 8011ee2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011ee4:	2100      	movs	r1, #0
 8011ee6:	2e00      	cmp	r6, #0
 8011ee8:	dd16      	ble.n	8011f18 <ai_conv2d_stripe_f32.constprop.0+0x1fc>
 8011eea:	2000      	movs	r0, #0
 8011eec:	eb02 040a 	add.w	r4, r2, sl
 8011ef0:	4294      	cmp	r4, r2
 8011ef2:	d90c      	bls.n	8011f0e <ai_conv2d_stripe_f32.constprop.0+0x1f2>
 8011ef4:	4696      	mov	lr, r2
 8011ef6:	469b      	mov	fp, r3
 8011ef8:	ecbe 6a01 	vldmia	lr!, {s12}
 8011efc:	ecfb 5a01 	vldmia	fp!, {s11}
 8011f00:	4574      	cmp	r4, lr
 8011f02:	eee5 7a86 	vfma.f32	s15, s11, s12
 8011f06:	d8f7      	bhi.n	8011ef8 <ai_conv2d_stripe_f32.constprop.0+0x1dc>
 8011f08:	697c      	ldr	r4, [r7, #20]
 8011f0a:	4423      	add	r3, r4
 8011f0c:	4422      	add	r2, r4
 8011f0e:	3001      	adds	r0, #1
 8011f10:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8011f12:	4286      	cmp	r6, r0
 8011f14:	4422      	add	r2, r4
 8011f16:	d1e9      	bne.n	8011eec <ai_conv2d_stripe_f32.constprop.0+0x1d0>
 8011f18:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011f1a:	3101      	adds	r1, #1
 8011f1c:	4402      	add	r2, r0
 8011f1e:	458c      	cmp	ip, r1
 8011f20:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8011f22:	4403      	add	r3, r0
 8011f24:	d1df      	bne.n	8011ee6 <ai_conv2d_stripe_f32.constprop.0+0x1ca>
 8011f26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011f28:	f108 0801 	add.w	r8, r8, #1
 8011f2c:	ece2 7a01 	vstmia	r2!, {s15}
 8011f30:	63fa      	str	r2, [r7, #60]	; 0x3c
 8011f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f34:	4413      	add	r3, r2
 8011f36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011f38:	4542      	cmp	r2, r8
 8011f3a:	d8c9      	bhi.n	8011ed0 <ai_conv2d_stripe_f32.constprop.0+0x1b4>
 8011f3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011f3e:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8011f42:	4452      	add	r2, sl
 8011f44:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8011f48:	f10b 0b01 	add.w	fp, fp, #1
 8011f4c:	65fa      	str	r2, [r7, #92]	; 0x5c
 8011f4e:	69ba      	ldr	r2, [r7, #24]
 8011f50:	4589      	cmp	r9, r1
 8011f52:	bf88      	it	hi
 8011f54:	2200      	movhi	r2, #0
 8011f56:	45d9      	cmp	r9, fp
 8011f58:	f102 0201 	add.w	r2, r2, #1
 8011f5c:	4415      	add	r5, r2
 8011f5e:	d1ab      	bne.n	8011eb8 <ai_conv2d_stripe_f32.constprop.0+0x19c>
 8011f60:	e9d7 e803 	ldrd	lr, r8, [r7, #12]
 8011f64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011f66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011f68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f6a:	440a      	add	r2, r1
 8011f6c:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8011f70:	3301      	adds	r3, #1
 8011f72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8011f74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011f76:	653b      	str	r3, [r7, #80]	; 0x50
 8011f78:	4411      	add	r1, r2
 8011f7a:	eba8 0802 	sub.w	r8, r8, r2
 8011f7e:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8011f82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011f84:	1a8a      	subs	r2, r1, r2
 8011f86:	65ba      	str	r2, [r7, #88]	; 0x58
 8011f88:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8011f8c:	429a      	cmp	r2, r3
 8011f8e:	f47f af3d 	bne.w	8011e0c <ai_conv2d_stripe_f32.constprop.0+0xf0>
 8011f92:	3774      	adds	r7, #116	; 0x74
 8011f94:	46bd      	mov	sp, r7
 8011f96:	ecbd 8b0e 	vpop	{d8-d14}
 8011f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f9e:	fb98 f2fe 	sdiv	r2, r8, lr
 8011fa2:	fb0e 8212 	mls	r2, lr, r2, r8
 8011fa6:	4641      	mov	r1, r8
 8011fa8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011faa:	4640      	mov	r0, r8
 8011fac:	ebae 0202 	sub.w	r2, lr, r2
 8011fb0:	e735      	b.n	8011e1e <ai_conv2d_stripe_f32.constprop.0+0x102>
 8011fb2:	bf00      	nop
 8011fb4:	00000000 	.word	0x00000000
 8011fb8:	fb0e f102 	mul.w	r1, lr, r2
 8011fbc:	2901      	cmp	r1, #1
 8011fbe:	f47f aecf 	bne.w	8011d60 <ai_conv2d_stripe_f32.constprop.0+0x44>
 8011fc2:	1ac2      	subs	r2, r0, r3
 8011fc4:	f8d7 40d8 	ldr.w	r4, [r7, #216]	; 0xd8
 8011fc8:	00b0      	lsls	r0, r6, #2
 8011fca:	eb0c 0103 	add.w	r1, ip, r3
 8011fce:	65fa      	str	r2, [r7, #92]	; 0x5c
 8011fd0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011fd2:	63b8      	str	r0, [r7, #56]	; 0x38
 8011fd4:	f102 4278 	add.w	r2, r2, #4160749568	; 0xf8000000
 8011fd8:	fb00 f004 	mul.w	r0, r0, r4
 8011fdc:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8011fde:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8011fe2:	fb00 4101 	mla	r1, r0, r1, r4
 8011fe6:	65b9      	str	r1, [r7, #88]	; 0x58
 8011fe8:	f080 8263 	bcs.w	80124b2 <ai_conv2d_stripe_f32.constprop.0+0x796>
 8011fec:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8011ff0:	2a00      	cmp	r2, #0
 8011ff2:	d0ce      	beq.n	8011f92 <ai_conv2d_stripe_f32.constprop.0+0x276>
 8011ff4:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8011ff8:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8011ffc:	fb05 f202 	mul.w	r2, r5, r2
 8012000:	ed1f 6a14 	vldr	s12, [pc, #-80]	; 8011fb4 <ai_conv2d_stripe_f32.constprop.0+0x298>
 8012004:	fb00 f303 	mul.w	r3, r0, r3
 8012008:	64bb      	str	r3, [r7, #72]	; 0x48
 801200a:	fb06 f302 	mul.w	r3, r6, r2
 801200e:	009b      	lsls	r3, r3, #2
 8012010:	643b      	str	r3, [r7, #64]	; 0x40
 8012012:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012014:	fb03 f306 	mul.w	r3, r3, r6
 8012018:	009b      	lsls	r3, r3, #2
 801201a:	627b      	str	r3, [r7, #36]	; 0x24
 801201c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8012020:	fb03 f306 	mul.w	r3, r3, r6
 8012024:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012028:	62bb      	str	r3, [r7, #40]	; 0x28
 801202a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801202e:	009b      	lsls	r3, r3, #2
 8012030:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012032:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012034:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012036:	2300      	movs	r3, #0
 8012038:	653b      	str	r3, [r7, #80]	; 0x50
 801203a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801203c:	2b00      	cmp	r3, #0
 801203e:	f000 8104 	beq.w	801224a <ai_conv2d_stripe_f32.constprop.0+0x52e>
 8012042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012044:	ecf3 6a01 	vldmia	r3!, {s13}
 8012048:	64fb      	str	r3, [r7, #76]	; 0x4c
 801204a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801204e:	2b00      	cmp	r3, #0
 8012050:	f000 80e8 	beq.w	8012224 <ai_conv2d_stripe_f32.constprop.0+0x508>
 8012054:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8012058:	f04f 0b00 	mov.w	fp, #0
 801205c:	f8d7 90f8 	ldr.w	r9, [r7, #248]	; 0xf8
 8012060:	425d      	negs	r5, r3
 8012062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012064:	657b      	str	r3, [r7, #84]	; 0x54
 8012066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012068:	647b      	str	r3, [r7, #68]	; 0x44
 801206a:	f1b9 0f00 	cmp.w	r9, #0
 801206e:	f2c0 8219 	blt.w	80124a4 <ai_conv2d_stripe_f32.constprop.0+0x788>
 8012072:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012074:	2300      	movs	r3, #0
 8012076:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012078:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 801207a:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 801207c:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 8012080:	fb02 0c06 	mla	ip, r2, r6, r0
 8012084:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8012088:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801208c:	4428      	add	r0, r5
 801208e:	42a0      	cmp	r0, r4
 8012090:	bf94      	ite	ls
 8012092:	ebc3 0300 	rsbls	r3, r3, r0
 8012096:	ebc3 0304 	rsbhi	r3, r3, r4
 801209a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 801209e:	1ac4      	subs	r4, r0, r3
 80120a0:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 80120a4:	1ac0      	subs	r0, r0, r3
 80120a6:	fb02 f303 	mul.w	r3, r2, r3
 80120aa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80120ac:	2a00      	cmp	r2, #0
 80120ae:	f340 81f6 	ble.w	801249e <ai_conv2d_stripe_f32.constprop.0+0x782>
 80120b2:	fb06 f204 	mul.w	r2, r6, r4
 80120b6:	f023 040f 	bic.w	r4, r3, #15
 80120ba:	eeb0 7a66 	vmov.f32	s14, s13
 80120be:	637a      	str	r2, [r7, #52]	; 0x34
 80120c0:	fb06 f200 	mul.w	r2, r6, r0
 80120c4:	1e60      	subs	r0, r4, #1
 80120c6:	2600      	movs	r6, #0
 80120c8:	0900      	lsrs	r0, r0, #4
 80120ca:	633a      	str	r2, [r7, #48]	; 0x30
 80120cc:	3001      	adds	r0, #1
 80120ce:	0102      	lsls	r2, r0, #4
 80120d0:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 80120d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80120d6:	4662      	mov	r2, ip
 80120d8:	2c00      	cmp	r4, #0
 80120da:	f340 81e8 	ble.w	80124ae <ai_conv2d_stripe_f32.constprop.0+0x792>
 80120de:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 80120e2:	f102 0040 	add.w	r0, r2, #64	; 0x40
 80120e6:	f04f 0800 	mov.w	r8, #0
 80120ea:	ed50 5a0f 	vldr	s11, [r0, #-60]	; 0xffffffc4
 80120ee:	f108 0810 	add.w	r8, r8, #16
 80120f2:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 80120f6:	3040      	adds	r0, #64	; 0x40
 80120f8:	ed5c 3a10 	vldr	s7, [ip, #-64]	; 0xffffffc0
 80120fc:	45a0      	cmp	r8, r4
 80120fe:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8012102:	ed10 4a20 	vldr	s8, [r0, #-128]	; 0xffffff80
 8012106:	ed5c 4a0e 	vldr	s9, [ip, #-56]	; 0xffffffc8
 801210a:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 801210e:	ed10 5a1e 	vldr	s10, [r0, #-120]	; 0xffffff88
 8012112:	eee3 7a84 	vfma.f32	s15, s7, s8
 8012116:	ed50 5a1d 	vldr	s11, [r0, #-116]	; 0xffffff8c
 801211a:	ed1c ea1d 	vldr	s28, [ip, #-116]	; 0xffffff8c
 801211e:	ed5c da1c 	vldr	s27, [ip, #-112]	; 0xffffff90
 8012122:	ed10 da1c 	vldr	s26, [r0, #-112]	; 0xffffff90
 8012126:	ed5c ca1b 	vldr	s25, [ip, #-108]	; 0xffffff94
 801212a:	ed10 ca1b 	vldr	s24, [r0, #-108]	; 0xffffff94
 801212e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8012132:	ed5c ba1a 	vldr	s23, [ip, #-104]	; 0xffffff98
 8012136:	ed10 ba1a 	vldr	s22, [r0, #-104]	; 0xffffff98
 801213a:	ed5c aa19 	vldr	s21, [ip, #-100]	; 0xffffff9c
 801213e:	ed10 aa19 	vldr	s20, [r0, #-100]	; 0xffffff9c
 8012142:	ed5c 9a18 	vldr	s19, [ip, #-96]	; 0xffffffa0
 8012146:	ed10 9a18 	vldr	s18, [r0, #-96]	; 0xffffffa0
 801214a:	eeee 7a25 	vfma.f32	s15, s28, s11
 801214e:	ed5c 8a17 	vldr	s17, [ip, #-92]	; 0xffffffa4
 8012152:	ed10 8a17 	vldr	s16, [r0, #-92]	; 0xffffffa4
 8012156:	ed1c 0a16 	vldr	s0, [ip, #-88]	; 0xffffffa8
 801215a:	ed50 0a16 	vldr	s1, [r0, #-88]	; 0xffffffa8
 801215e:	ed1c 1a15 	vldr	s2, [ip, #-84]	; 0xffffffac
 8012162:	ed50 1a15 	vldr	s3, [r0, #-84]	; 0xffffffac
 8012166:	eeed 7a8d 	vfma.f32	s15, s27, s26
 801216a:	ed1c 2a14 	vldr	s4, [ip, #-80]	; 0xffffffb0
 801216e:	ed50 2a14 	vldr	s5, [r0, #-80]	; 0xffffffb0
 8012172:	ed1c 3a13 	vldr	s6, [ip, #-76]	; 0xffffffb4
 8012176:	ed50 3a13 	vldr	s7, [r0, #-76]	; 0xffffffb4
 801217a:	ed1c 4a12 	vldr	s8, [ip, #-72]	; 0xffffffb8
 801217e:	ed50 4a12 	vldr	s9, [r0, #-72]	; 0xffffffb8
 8012182:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8012186:	ed1c 5a11 	vldr	s10, [ip, #-68]	; 0xffffffbc
 801218a:	ed50 5a11 	vldr	s11, [r0, #-68]	; 0xffffffbc
 801218e:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8012192:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8012196:	eee9 7a89 	vfma.f32	s15, s19, s18
 801219a:	eee8 7a88 	vfma.f32	s15, s17, s16
 801219e:	eee0 7a20 	vfma.f32	s15, s0, s1
 80121a2:	eee1 7a21 	vfma.f32	s15, s2, s3
 80121a6:	eee2 7a22 	vfma.f32	s15, s4, s5
 80121aa:	eee3 7a23 	vfma.f32	s15, s6, s7
 80121ae:	eee4 7a24 	vfma.f32	s15, s8, s9
 80121b2:	eee5 7a25 	vfma.f32	s15, s10, s11
 80121b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80121ba:	db96      	blt.n	80120ea <ai_conv2d_stripe_f32.constprop.0+0x3ce>
 80121bc:	4471      	add	r1, lr
 80121be:	4472      	add	r2, lr
 80121c0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80121c2:	4283      	cmp	r3, r0
 80121c4:	dd11      	ble.n	80121ea <ai_conv2d_stripe_f32.constprop.0+0x4ce>
 80121c6:	4684      	mov	ip, r0
 80121c8:	468a      	mov	sl, r1
 80121ca:	4690      	mov	r8, r2
 80121cc:	f10c 0c01 	add.w	ip, ip, #1
 80121d0:	ecf8 5a01 	vldmia	r8!, {s11}
 80121d4:	ecfa 7a01 	vldmia	sl!, {s15}
 80121d8:	4563      	cmp	r3, ip
 80121da:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80121de:	d1f5      	bne.n	80121cc <ai_conv2d_stripe_f32.constprop.0+0x4b0>
 80121e0:	1a18      	subs	r0, r3, r0
 80121e2:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80121e6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80121ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80121ec:	3601      	adds	r6, #1
 80121ee:	4401      	add	r1, r0
 80121f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80121f2:	4402      	add	r2, r0
 80121f4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80121f6:	42b0      	cmp	r0, r6
 80121f8:	f47f af6e 	bne.w	80120d8 <ai_conv2d_stripe_f32.constprop.0+0x3bc>
 80121fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80121fe:	f10b 0b01 	add.w	fp, fp, #1
 8012202:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012204:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012206:	ed83 7a00 	vstr	s14, [r3]
 801220a:	440b      	add	r3, r1
 801220c:	4491      	add	r9, r2
 801220e:	1aad      	subs	r5, r5, r2
 8012210:	647b      	str	r3, [r7, #68]	; 0x44
 8012212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012216:	4413      	add	r3, r2
 8012218:	657b      	str	r3, [r7, #84]	; 0x54
 801221a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801221e:	455b      	cmp	r3, fp
 8012220:	f47f af23 	bne.w	801206a <ai_conv2d_stripe_f32.constprop.0+0x34e>
 8012224:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012226:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801222a:	440a      	add	r2, r1
 801222c:	3301      	adds	r3, #1
 801222e:	66ba      	str	r2, [r7, #104]	; 0x68
 8012230:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012232:	653b      	str	r3, [r7, #80]	; 0x50
 8012234:	3204      	adds	r2, #4
 8012236:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012238:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801223c:	429a      	cmp	r2, r3
 801223e:	f43f aea8 	beq.w	8011f92 <ai_conv2d_stripe_f32.constprop.0+0x276>
 8012242:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012244:	2b00      	cmp	r3, #0
 8012246:	f47f aefc 	bne.w	8012042 <ai_conv2d_stripe_f32.constprop.0+0x326>
 801224a:	eef0 6a46 	vmov.f32	s13, s12
 801224e:	e6fc      	b.n	801204a <ai_conv2d_stripe_f32.constprop.0+0x32e>
 8012250:	fb0e f102 	mul.w	r1, lr, r2
 8012254:	2901      	cmp	r1, #1
 8012256:	f47f ad83 	bne.w	8011d60 <ai_conv2d_stripe_f32.constprop.0+0x44>
 801225a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801225e:	2a00      	cmp	r2, #0
 8012260:	f43f ae97 	beq.w	8011f92 <ai_conv2d_stripe_f32.constprop.0+0x276>
 8012264:	eb0c 0203 	add.w	r2, ip, r3
 8012268:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 801226c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 8012270:	ed5f 3ab0 	vldr	s7, [pc, #-704]	; 8011fb4 <ai_conv2d_stripe_f32.constprop.0+0x298>
 8012274:	fb01 f202 	mul.w	r2, r1, r2
 8012278:	1ac1      	subs	r1, r0, r3
 801227a:	ea4f 0886 	mov.w	r8, r6, lsl #2
 801227e:	f8c7 60d0 	str.w	r6, [r7, #208]	; 0xd0
 8012282:	61fa      	str	r2, [r7, #28]
 8012284:	1a1a      	subs	r2, r3, r0
 8012286:	64f9      	str	r1, [r7, #76]	; 0x4c
 8012288:	ea4f 1a06 	mov.w	sl, r6, lsl #4
 801228c:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8012290:	442a      	add	r2, r5
 8012292:	fb03 f301 	mul.w	r3, r3, r1
 8012296:	fb01 f202 	mul.w	r2, r1, r2
 801229a:	64bb      	str	r3, [r7, #72]	; 0x48
 801229c:	0093      	lsls	r3, r2, #2
 801229e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80122a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80122a4:	fbb3 f3f6 	udiv	r3, r3, r6
 80122a8:	61bb      	str	r3, [r7, #24]
 80122aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80122ae:	009b      	lsls	r3, r3, #2
 80122b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80122b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80122b6:	f1c3 0b00 	rsb	fp, r3, #0
 80122ba:	00f3      	lsls	r3, r6, #3
 80122bc:	623b      	str	r3, [r7, #32]
 80122be:	2300      	movs	r3, #0
 80122c0:	653b      	str	r3, [r7, #80]	; 0x50
 80122c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	f2c0 80e3 	blt.w	8012492 <ai_conv2d_stripe_f32.constprop.0+0x776>
 80122cc:	2500      	movs	r5, #0
 80122ce:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80122d0:	462b      	mov	r3, r5
 80122d2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80122d6:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 80122da:	445a      	add	r2, fp
 80122dc:	69fc      	ldr	r4, [r7, #28]
 80122de:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 80122e0:	4282      	cmp	r2, r0
 80122e2:	bf28      	it	cs
 80122e4:	4602      	movcs	r2, r0
 80122e6:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 80122ea:	1ad2      	subs	r2, r2, r3
 80122ec:	1904      	adds	r4, r0, r4
 80122ee:	2e00      	cmp	r6, #0
 80122f0:	f000 8228 	beq.w	8012744 <ai_conv2d_stripe_f32.constprop.0+0xa28>
 80122f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80122f6:	647e      	str	r6, [r7, #68]	; 0x44
 80122f8:	429e      	cmp	r6, r3
 80122fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80122fc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8012300:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012304:	fe03 3aa2 	vseleq.f32	s6, s7, s5
 8012308:	1a98      	subs	r0, r3, r2
 801230a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801230e:	fb03 f000 	mul.w	r0, r3, r0
 8012312:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012316:	1a9b      	subs	r3, r3, r2
 8012318:	442c      	add	r4, r5
 801231a:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 801231c:	fb08 5e04 	mla	lr, r8, r4, r5
 8012320:	eb0e 0408 	add.w	r4, lr, r8
 8012324:	45a6      	cmp	lr, r4
 8012326:	62bc      	str	r4, [r7, #40]	; 0x28
 8012328:	f080 809a 	bcs.w	8012460 <ai_conv2d_stripe_f32.constprop.0+0x744>
 801232c:	0080      	lsls	r0, r0, #2
 801232e:	009b      	lsls	r3, r3, #2
 8012330:	6378      	str	r0, [r7, #52]	; 0x34
 8012332:	633b      	str	r3, [r7, #48]	; 0x30
 8012334:	f022 0303 	bic.w	r3, r2, #3
 8012338:	e9d7 0434 	ldrd	r0, r4, [r7, #208]	; 0xd0
 801233c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801233e:	42a0      	cmp	r0, r4
 8012340:	f200 808e 	bhi.w	8012460 <ai_conv2d_stripe_f32.constprop.0+0x744>
 8012344:	1e58      	subs	r0, r3, #1
 8012346:	f04f 0900 	mov.w	r9, #0
 801234a:	0880      	lsrs	r0, r0, #2
 801234c:	f8c7 903c 	str.w	r9, [r7, #60]	; 0x3c
 8012350:	1c43      	adds	r3, r0, #1
 8012352:	fb00 a00a 	mla	r0, r0, sl, sl
 8012356:	6138      	str	r0, [r7, #16]
 8012358:	0118      	lsls	r0, r3, #4
 801235a:	009b      	lsls	r3, r3, #2
 801235c:	6178      	str	r0, [r7, #20]
 801235e:	e9c7 b302 	strd	fp, r3, [r7, #8]
 8012362:	69bb      	ldr	r3, [r7, #24]
 8012364:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012366:	4499      	add	r9, r3
 8012368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801236a:	181c      	adds	r4, r3, r0
 801236c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8012370:	65bc      	str	r4, [r7, #88]	; 0x58
 8012372:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8012374:	627b      	str	r3, [r7, #36]	; 0x24
 8012376:	ea4f 0389 	mov.w	r3, r9, lsl #2
 801237a:	1820      	adds	r0, r4, r0
 801237c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801237e:	6438      	str	r0, [r7, #64]	; 0x40
 8012380:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012382:	ecb3 7a01 	vldmia	r3!, {s14}
 8012386:	65bb      	str	r3, [r7, #88]	; 0x58
 8012388:	ee27 7a03 	vmul.f32	s14, s14, s6
 801238c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801238e:	2b00      	cmp	r3, #0
 8012390:	dd55      	ble.n	801243e <ai_conv2d_stripe_f32.constprop.0+0x722>
 8012392:	4675      	mov	r5, lr
 8012394:	f04f 0b00 	mov.w	fp, #0
 8012398:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801239a:	2b00      	cmp	r3, #0
 801239c:	f340 81d0 	ble.w	8012740 <ai_conv2d_stripe_f32.constprop.0+0xa24>
 80123a0:	6a38      	ldr	r0, [r7, #32]
 80123a2:	f101 0310 	add.w	r3, r1, #16
 80123a6:	2600      	movs	r6, #0
 80123a8:	607a      	str	r2, [r7, #4]
 80123aa:	182c      	adds	r4, r5, r0
 80123ac:	4628      	mov	r0, r5
 80123ae:	eb00 0c08 	add.w	ip, r0, r8
 80123b2:	ed13 4a03 	vldr	s8, [r3, #-12]
 80123b6:	ed53 4a04 	vldr	s9, [r3, #-16]
 80123ba:	3604      	adds	r6, #4
 80123bc:	eddc 7a00 	vldr	s15, [ip]
 80123c0:	eb04 0c08 	add.w	ip, r4, r8
 80123c4:	ed90 5a00 	vldr	s10, [r0]
 80123c8:	3310      	adds	r3, #16
 80123ca:	ee67 7a84 	vmul.f32	s15, s15, s8
 80123ce:	edd4 6a00 	vldr	s13, [r4]
 80123d2:	ed53 5a06 	vldr	s11, [r3, #-24]	; 0xffffffe8
 80123d6:	4450      	add	r0, sl
 80123d8:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 80123dc:	4454      	add	r4, sl
 80123de:	eee4 7a85 	vfma.f32	s15, s9, s10
 80123e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80123e4:	4296      	cmp	r6, r2
 80123e6:	eee5 7aa6 	vfma.f32	s15, s11, s13
 80123ea:	eddc 6a00 	vldr	s13, [ip]
 80123ee:	eee6 7a26 	vfma.f32	s15, s12, s13
 80123f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80123f6:	dbda      	blt.n	80123ae <ai_conv2d_stripe_f32.constprop.0+0x692>
 80123f8:	693b      	ldr	r3, [r7, #16]
 80123fa:	687a      	ldr	r2, [r7, #4]
 80123fc:	441d      	add	r5, r3
 80123fe:	697b      	ldr	r3, [r7, #20]
 8012400:	68fc      	ldr	r4, [r7, #12]
 8012402:	4419      	add	r1, r3
 8012404:	42a2      	cmp	r2, r4
 8012406:	dd11      	ble.n	801242c <ai_conv2d_stripe_f32.constprop.0+0x710>
 8012408:	4620      	mov	r0, r4
 801240a:	462b      	mov	r3, r5
 801240c:	460e      	mov	r6, r1
 801240e:	3001      	adds	r0, #1
 8012410:	edd3 7a00 	vldr	s15, [r3]
 8012414:	ecf6 6a01 	vldmia	r6!, {s13}
 8012418:	4443      	add	r3, r8
 801241a:	4290      	cmp	r0, r2
 801241c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012420:	d1f5      	bne.n	801240e <ai_conv2d_stripe_f32.constprop.0+0x6f2>
 8012422:	1b14      	subs	r4, r2, r4
 8012424:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012428:	fb04 5508 	mla	r5, r4, r8, r5
 801242c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801242e:	f10b 0b01 	add.w	fp, fp, #1
 8012432:	441d      	add	r5, r3
 8012434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012436:	4419      	add	r1, r3
 8012438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801243a:	459b      	cmp	fp, r3
 801243c:	d1ac      	bne.n	8012398 <ai_conv2d_stripe_f32.constprop.0+0x67c>
 801243e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012440:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8012442:	eca3 7a01 	vstmia	r3!, {s14}
 8012446:	643b      	str	r3, [r7, #64]	; 0x40
 8012448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801244a:	4419      	add	r1, r3
 801244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801244e:	4283      	cmp	r3, r0
 8012450:	d196      	bne.n	8012380 <ai_conv2d_stripe_f32.constprop.0+0x664>
 8012452:	f10e 0e04 	add.w	lr, lr, #4
 8012456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012458:	459e      	cmp	lr, r3
 801245a:	d382      	bcc.n	8012362 <ai_conv2d_stripe_f32.constprop.0+0x646>
 801245c:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8012460:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012462:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012466:	440a      	add	r2, r1
 8012468:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801246a:	3301      	adds	r3, #1
 801246c:	66fa      	str	r2, [r7, #108]	; 0x6c
 801246e:	ebab 0b01 	sub.w	fp, fp, r1
 8012472:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8012476:	653b      	str	r3, [r7, #80]	; 0x50
 8012478:	440a      	add	r2, r1
 801247a:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 801247e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8012482:	429a      	cmp	r2, r3
 8012484:	f43f ad85 	beq.w	8011f92 <ai_conv2d_stripe_f32.constprop.0+0x276>
 8012488:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801248c:	2b00      	cmp	r3, #0
 801248e:	f6bf af1d 	bge.w	80122cc <ai_conv2d_stripe_f32.constprop.0+0x5b0>
 8012492:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012494:	465b      	mov	r3, fp
 8012496:	465d      	mov	r5, fp
 8012498:	eb02 010b 	add.w	r1, r2, fp
 801249c:	e719      	b.n	80122d2 <ai_conv2d_stripe_f32.constprop.0+0x5b6>
 801249e:	eeb0 7a66 	vmov.f32	s14, s13
 80124a2:	e6ab      	b.n	80121fc <ai_conv2d_stripe_f32.constprop.0+0x4e0>
 80124a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80124a6:	462b      	mov	r3, r5
 80124a8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80124aa:	442a      	add	r2, r5
 80124ac:	e5e4      	b.n	8012078 <ai_conv2d_stripe_f32.constprop.0+0x35c>
 80124ae:	2000      	movs	r0, #0
 80124b0:	e687      	b.n	80121c2 <ai_conv2d_stripe_f32.constprop.0+0x4a6>
 80124b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80124b6:	4669      	mov	r1, sp
 80124b8:	fb05 f202 	mul.w	r2, r5, r2
 80124bc:	ee0e 1a90 	vmov	s29, r1
 80124c0:	fb06 f202 	mul.w	r2, r6, r2
 80124c4:	0095      	lsls	r5, r2, #2
 80124c6:	637a      	str	r2, [r7, #52]	; 0x34
 80124c8:	1dea      	adds	r2, r5, #7
 80124ca:	f022 0207 	bic.w	r2, r2, #7
 80124ce:	ebad 0d02 	sub.w	sp, sp, r2
 80124d2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80124d6:	46e9      	mov	r9, sp
 80124d8:	2a00      	cmp	r2, #0
 80124da:	f000 812d 	beq.w	8012738 <ai_conv2d_stripe_f32.constprop.0+0xa1c>
 80124de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80124e2:	46ca      	mov	sl, r9
 80124e4:	ed9f 8aa7 	vldr	s16, [pc, #668]	; 8012784 <ai_conv2d_stripe_f32.constprop.0+0xa68>
 80124e8:	46a9      	mov	r9, r5
 80124ea:	fb02 f303 	mul.w	r3, r2, r3
 80124ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80124f0:	f8c7 60d0 	str.w	r6, [r7, #208]	; 0xd0
 80124f4:	647b      	str	r3, [r7, #68]	; 0x44
 80124f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80124f8:	fb03 f306 	mul.w	r3, r3, r6
 80124fc:	009b      	lsls	r3, r3, #2
 80124fe:	623b      	str	r3, [r7, #32]
 8012500:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8012504:	fb03 f306 	mul.w	r3, r3, r6
 8012508:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801250c:	627b      	str	r3, [r7, #36]	; 0x24
 801250e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8012512:	009b      	lsls	r3, r3, #2
 8012514:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012516:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012518:	64bb      	str	r3, [r7, #72]	; 0x48
 801251a:	2300      	movs	r3, #0
 801251c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801251e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012520:	b123      	cbz	r3, 801252c <ai_conv2d_stripe_f32.constprop.0+0x810>
 8012522:	464a      	mov	r2, r9
 8012524:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012526:	4650      	mov	r0, sl
 8012528:	f000 feac 	bl	8013284 <memcpy>
 801252c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801252e:	2b00      	cmp	r3, #0
 8012530:	f000 811c 	beq.w	801276c <ai_conv2d_stripe_f32.constprop.0+0xa50>
 8012534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012536:	ecf3 6a01 	vldmia	r3!, {s13}
 801253a:	64bb      	str	r3, [r7, #72]	; 0x48
 801253c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012540:	2b00      	cmp	r3, #0
 8012542:	f000 80eb 	beq.w	801271c <ai_conv2d_stripe_f32.constprop.0+0xa00>
 8012546:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801254a:	f8c7 901c 	str.w	r9, [r7, #28]
 801254e:	425d      	negs	r5, r3
 8012550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012552:	653b      	str	r3, [r7, #80]	; 0x50
 8012554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012556:	643b      	str	r3, [r7, #64]	; 0x40
 8012558:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801255c:	657b      	str	r3, [r7, #84]	; 0x54
 801255e:	2300      	movs	r3, #0
 8012560:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012564:	2b00      	cmp	r3, #0
 8012566:	f2c0 8107 	blt.w	8012778 <ai_conv2d_stripe_f32.constprop.0+0xa5c>
 801256a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801256c:	2300      	movs	r3, #0
 801256e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012570:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8012574:	f8d7 60e0 	ldr.w	r6, [r7, #224]	; 0xe0
 8012578:	4428      	add	r0, r5
 801257a:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 801257c:	42b0      	cmp	r0, r6
 801257e:	bf94      	ite	ls
 8012580:	ebc3 0300 	rsbls	r3, r3, r0
 8012584:	ebc3 0306 	rsbhi	r3, r3, r6
 8012588:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 801258c:	fb02 a204 	mla	r2, r2, r4, sl
 8012590:	eba0 0c03 	sub.w	ip, r0, r3
 8012594:	1af0      	subs	r0, r6, r3
 8012596:	f8d7 60d0 	ldr.w	r6, [r7, #208]	; 0xd0
 801259a:	fb06 f303 	mul.w	r3, r6, r3
 801259e:	6dfe      	ldr	r6, [r7, #92]	; 0x5c
 80125a0:	2e00      	cmp	r6, #0
 80125a2:	f340 80e6 	ble.w	8012772 <ai_conv2d_stripe_f32.constprop.0+0xa56>
 80125a6:	fb04 f000 	mul.w	r0, r4, r0
 80125aa:	eeb0 7a66 	vmov.f32	s14, s13
 80125ae:	fb04 fc0c 	mul.w	ip, r4, ip
 80125b2:	f023 040f 	bic.w	r4, r3, #15
 80125b6:	6338      	str	r0, [r7, #48]	; 0x30
 80125b8:	2600      	movs	r6, #0
 80125ba:	1e60      	subs	r0, r4, #1
 80125bc:	0900      	lsrs	r0, r0, #4
 80125be:	3001      	adds	r0, #1
 80125c0:	ea4f 1880 	mov.w	r8, r0, lsl #6
 80125c4:	0100      	lsls	r0, r0, #4
 80125c6:	62b8      	str	r0, [r7, #40]	; 0x28
 80125c8:	2c00      	cmp	r4, #0
 80125ca:	f340 80cd 	ble.w	8012768 <ai_conv2d_stripe_f32.constprop.0+0xa4c>
 80125ce:	f101 0e40 	add.w	lr, r1, #64	; 0x40
 80125d2:	f102 0040 	add.w	r0, r2, #64	; 0x40
 80125d6:	f04f 0900 	mov.w	r9, #0
 80125da:	ed10 6a0f 	vldr	s12, [r0, #-60]	; 0xffffffc4
 80125de:	f109 0910 	add.w	r9, r9, #16
 80125e2:	ed5e 7a0f 	vldr	s15, [lr, #-60]	; 0xffffffc4
 80125e6:	3040      	adds	r0, #64	; 0x40
 80125e8:	ed1e 4a10 	vldr	s8, [lr, #-64]	; 0xffffffc0
 80125ec:	45a1      	cmp	r9, r4
 80125ee:	ee67 7a86 	vmul.f32	s15, s15, s12
 80125f2:	ed50 4a20 	vldr	s9, [r0, #-128]	; 0xffffff80
 80125f6:	ed1e 5a0e 	vldr	s10, [lr, #-56]	; 0xffffffc8
 80125fa:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
 80125fe:	ed50 5a1e 	vldr	s11, [r0, #-120]	; 0xffffff88
 8012602:	eee4 7a24 	vfma.f32	s15, s8, s9
 8012606:	ed10 6a1d 	vldr	s12, [r0, #-116]	; 0xffffff8c
 801260a:	ed1e ea1d 	vldr	s28, [lr, #-116]	; 0xffffff8c
 801260e:	ed5e da1c 	vldr	s27, [lr, #-112]	; 0xffffff90
 8012612:	ed10 da1c 	vldr	s26, [r0, #-112]	; 0xffffff90
 8012616:	ed5e ca1b 	vldr	s25, [lr, #-108]	; 0xffffff94
 801261a:	ed10 ca1b 	vldr	s24, [r0, #-108]	; 0xffffff94
 801261e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8012622:	ed5e ba1a 	vldr	s23, [lr, #-104]	; 0xffffff98
 8012626:	ed10 ba1a 	vldr	s22, [r0, #-104]	; 0xffffff98
 801262a:	ed5e aa19 	vldr	s21, [lr, #-100]	; 0xffffff9c
 801262e:	ed10 aa19 	vldr	s20, [r0, #-100]	; 0xffffff9c
 8012632:	ed5e 9a18 	vldr	s19, [lr, #-96]	; 0xffffffa0
 8012636:	ed10 9a18 	vldr	s18, [r0, #-96]	; 0xffffffa0
 801263a:	eeee 7a06 	vfma.f32	s15, s28, s12
 801263e:	ed5e 8a17 	vldr	s17, [lr, #-92]	; 0xffffffa4
 8012642:	ed10 0a17 	vldr	s0, [r0, #-92]	; 0xffffffa4
 8012646:	ed5e 0a16 	vldr	s1, [lr, #-88]	; 0xffffffa8
 801264a:	ed10 1a16 	vldr	s2, [r0, #-88]	; 0xffffffa8
 801264e:	ed5e 1a15 	vldr	s3, [lr, #-84]	; 0xffffffac
 8012652:	ed10 2a15 	vldr	s4, [r0, #-84]	; 0xffffffac
 8012656:	eeed 7a8d 	vfma.f32	s15, s27, s26
 801265a:	ed5e 2a14 	vldr	s5, [lr, #-80]	; 0xffffffb0
 801265e:	ed10 3a14 	vldr	s6, [r0, #-80]	; 0xffffffb0
 8012662:	ed5e 3a13 	vldr	s7, [lr, #-76]	; 0xffffffb4
 8012666:	ed10 4a13 	vldr	s8, [r0, #-76]	; 0xffffffb4
 801266a:	ed5e 4a12 	vldr	s9, [lr, #-72]	; 0xffffffb8
 801266e:	ed10 5a12 	vldr	s10, [r0, #-72]	; 0xffffffb8
 8012672:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8012676:	ed5e 5a11 	vldr	s11, [lr, #-68]	; 0xffffffbc
 801267a:	ed10 6a11 	vldr	s12, [r0, #-68]	; 0xffffffbc
 801267e:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8012682:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8012686:	eee9 7a89 	vfma.f32	s15, s19, s18
 801268a:	eee8 7a80 	vfma.f32	s15, s17, s0
 801268e:	eee0 7a81 	vfma.f32	s15, s1, s2
 8012692:	eee1 7a82 	vfma.f32	s15, s3, s4
 8012696:	eee2 7a83 	vfma.f32	s15, s5, s6
 801269a:	eee3 7a84 	vfma.f32	s15, s7, s8
 801269e:	eee4 7a85 	vfma.f32	s15, s9, s10
 80126a2:	eee5 7a86 	vfma.f32	s15, s11, s12
 80126a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80126aa:	db96      	blt.n	80125da <ai_conv2d_stripe_f32.constprop.0+0x8be>
 80126ac:	4441      	add	r1, r8
 80126ae:	4442      	add	r2, r8
 80126b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80126b2:	4283      	cmp	r3, r0
 80126b4:	dd11      	ble.n	80126da <ai_conv2d_stripe_f32.constprop.0+0x9be>
 80126b6:	4686      	mov	lr, r0
 80126b8:	468b      	mov	fp, r1
 80126ba:	4691      	mov	r9, r2
 80126bc:	f10e 0e01 	add.w	lr, lr, #1
 80126c0:	ecb9 6a01 	vldmia	r9!, {s12}
 80126c4:	ecfb 7a01 	vldmia	fp!, {s15}
 80126c8:	4573      	cmp	r3, lr
 80126ca:	eea6 7a27 	vfma.f32	s14, s12, s15
 80126ce:	d1f5      	bne.n	80126bc <ai_conv2d_stripe_f32.constprop.0+0x9a0>
 80126d0:	1a18      	subs	r0, r3, r0
 80126d2:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80126d6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80126da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80126dc:	3601      	adds	r6, #1
 80126de:	4461      	add	r1, ip
 80126e0:	4402      	add	r2, r0
 80126e2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80126e4:	42b0      	cmp	r0, r6
 80126e6:	f47f af6f 	bne.w	80125c8 <ai_conv2d_stripe_f32.constprop.0+0x8ac>
 80126ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80126ec:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80126ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80126f0:	4401      	add	r1, r0
 80126f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126f4:	ed82 7a00 	vstr	s14, [r2]
 80126f8:	1a2d      	subs	r5, r5, r0
 80126fa:	6579      	str	r1, [r7, #84]	; 0x54
 80126fc:	3301      	adds	r3, #1
 80126fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012700:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012702:	440a      	add	r2, r1
 8012704:	6a39      	ldr	r1, [r7, #32]
 8012706:	643a      	str	r2, [r7, #64]	; 0x40
 8012708:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801270a:	440a      	add	r2, r1
 801270c:	653a      	str	r2, [r7, #80]	; 0x50
 801270e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8012712:	429a      	cmp	r2, r3
 8012714:	f47f af25 	bne.w	8012562 <ai_conv2d_stripe_f32.constprop.0+0x846>
 8012718:	f8d7 901c 	ldr.w	r9, [r7, #28]
 801271c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801271e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012720:	444a      	add	r2, r9
 8012722:	3301      	adds	r3, #1
 8012724:	66ba      	str	r2, [r7, #104]	; 0x68
 8012726:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012728:	64fb      	str	r3, [r7, #76]	; 0x4c
 801272a:	3204      	adds	r2, #4
 801272c:	66fa      	str	r2, [r7, #108]	; 0x6c
 801272e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8012732:	429a      	cmp	r2, r3
 8012734:	f47f aef3 	bne.w	801251e <ai_conv2d_stripe_f32.constprop.0+0x802>
 8012738:	ee1e 3a90 	vmov	r3, s29
 801273c:	469d      	mov	sp, r3
 801273e:	e428      	b.n	8011f92 <ai_conv2d_stripe_f32.constprop.0+0x276>
 8012740:	2400      	movs	r4, #0
 8012742:	e65f      	b.n	8012404 <ai_conv2d_stripe_f32.constprop.0+0x6e8>
 8012744:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012746:	eeb0 3a63 	vmov.f32	s6, s7
 801274a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801274e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012750:	647b      	str	r3, [r7, #68]	; 0x44
 8012752:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012756:	1a98      	subs	r0, r3, r2
 8012758:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801275c:	fb03 f000 	mul.w	r0, r3, r0
 8012760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012764:	1a9b      	subs	r3, r3, r2
 8012766:	e5d7      	b.n	8012318 <ai_conv2d_stripe_f32.constprop.0+0x5fc>
 8012768:	2000      	movs	r0, #0
 801276a:	e7a2      	b.n	80126b2 <ai_conv2d_stripe_f32.constprop.0+0x996>
 801276c:	eef0 6a48 	vmov.f32	s13, s16
 8012770:	e6e4      	b.n	801253c <ai_conv2d_stripe_f32.constprop.0+0x820>
 8012772:	eeb0 7a66 	vmov.f32	s14, s13
 8012776:	e7b8      	b.n	80126ea <ai_conv2d_stripe_f32.constprop.0+0x9ce>
 8012778:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801277a:	462b      	mov	r3, r5
 801277c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801277e:	442a      	add	r2, r5
 8012780:	e6f6      	b.n	8012570 <ai_conv2d_stripe_f32.constprop.0+0x854>
 8012782:	bf00      	nop
 8012784:	00000000 	.word	0x00000000

08012788 <ai_dict_decompress_f32>:
 8012788:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801278c:	9d08      	ldr	r5, [sp, #32]
 801278e:	2b04      	cmp	r3, #4
 8012790:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8012794:	d00e      	beq.n	80127b4 <ai_dict_decompress_f32+0x2c>
 8012796:	2b08      	cmp	r3, #8
 8012798:	d10a      	bne.n	80127b0 <ai_dict_decompress_f32+0x28>
 801279a:	42a8      	cmp	r0, r5
 801279c:	d208      	bcs.n	80127b0 <ai_dict_decompress_f32+0x28>
 801279e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80127a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	f840 3b04 	str.w	r3, [r0], #4
 80127ac:	4285      	cmp	r5, r0
 80127ae:	d8f6      	bhi.n	801279e <ai_dict_decompress_f32+0x16>
 80127b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80127b4:	9b07      	ldr	r3, [sp, #28]
 80127b6:	085e      	lsrs	r6, r3, #1
 80127b8:	f003 0701 	and.w	r7, r3, #1
 80127bc:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 80127c0:	f106 38ff 	add.w	r8, r6, #4294967295
 80127c4:	42a8      	cmp	r0, r5
 80127c6:	d2f3      	bcs.n	80127b0 <ai_dict_decompress_f32+0x28>
 80127c8:	b33e      	cbz	r6, 801281a <ai_dict_decompress_f32+0x92>
 80127ca:	f100 0e08 	add.w	lr, r0, #8
 80127ce:	f101 3cff 	add.w	ip, r1, #4294967295
 80127d2:	eb01 0408 	add.w	r4, r1, r8
 80127d6:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 80127da:	f10e 0e08 	add.w	lr, lr, #8
 80127de:	091b      	lsrs	r3, r3, #4
 80127e0:	4564      	cmp	r4, ip
 80127e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	f84e 3c10 	str.w	r3, [lr, #-16]
 80127ec:	f89c 3000 	ldrb.w	r3, [ip]
 80127f0:	f003 030f 	and.w	r3, r3, #15
 80127f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	f84e 3c0c 	str.w	r3, [lr, #-12]
 80127fe:	d1ea      	bne.n	80127d6 <ai_dict_decompress_f32+0x4e>
 8012800:	4431      	add	r1, r6
 8012802:	4448      	add	r0, r9
 8012804:	2f00      	cmp	r7, #0
 8012806:	d0dd      	beq.n	80127c4 <ai_dict_decompress_f32+0x3c>
 8012808:	f811 3b01 	ldrb.w	r3, [r1], #1
 801280c:	091b      	lsrs	r3, r3, #4
 801280e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	f840 3b04 	str.w	r3, [r0], #4
 8012818:	e7d4      	b.n	80127c4 <ai_dict_decompress_f32+0x3c>
 801281a:	2f00      	cmp	r7, #0
 801281c:	d1f4      	bne.n	8012808 <ai_dict_decompress_f32+0x80>
 801281e:	42a8      	cmp	r0, r5
 8012820:	d3fd      	bcc.n	801281e <ai_dict_decompress_f32+0x96>
 8012822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012826:	bf00      	nop

08012828 <forward_conv2d>:
 8012828:	6982      	ldr	r2, [r0, #24]
 801282a:	8813      	ldrh	r3, [r2, #0]
 801282c:	2b00      	cmp	r3, #0
 801282e:	f000 810f 	beq.w	8012a50 <forward_conv2d+0x228>
 8012832:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012836:	ed2d 8b04 	vpush	{d8-d9}
 801283a:	6852      	ldr	r2, [r2, #4]
 801283c:	b0a9      	sub	sp, #164	; 0xa4
 801283e:	4604      	mov	r4, r0
 8012840:	6851      	ldr	r1, [r2, #4]
 8012842:	b101      	cbz	r1, 8012846 <forward_conv2d+0x1e>
 8012844:	6809      	ldr	r1, [r1, #0]
 8012846:	2b01      	cmp	r3, #1
 8012848:	f000 8152 	beq.w	8012af0 <forward_conv2d+0x2c8>
 801284c:	6915      	ldr	r5, [r2, #16]
 801284e:	b105      	cbz	r5, 8012852 <forward_conv2d+0x2a>
 8012850:	682d      	ldr	r5, [r5, #0]
 8012852:	2b02      	cmp	r3, #2
 8012854:	f000 80fe 	beq.w	8012a54 <forward_conv2d+0x22c>
 8012858:	69d3      	ldr	r3, [r2, #28]
 801285a:	8b12      	ldrh	r2, [r2, #24]
 801285c:	2b00      	cmp	r3, #0
 801285e:	f000 8138 	beq.w	8012ad2 <forward_conv2d+0x2aa>
 8012862:	2a01      	cmp	r2, #1
 8012864:	681e      	ldr	r6, [r3, #0]
 8012866:	f240 813a 	bls.w	8012ade <forward_conv2d+0x2b6>
 801286a:	685a      	ldr	r2, [r3, #4]
 801286c:	ee08 2a10 	vmov	s16, r2
 8012870:	689b      	ldr	r3, [r3, #8]
 8012872:	68ca      	ldr	r2, [r1, #12]
 8012874:	6989      	ldr	r1, [r1, #24]
 8012876:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 801287a:	6889      	ldr	r1, [r1, #8]
 801287c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801287e:	ee09 1a10 	vmov	s18, r1
 8012882:	6851      	ldr	r1, [r2, #4]
 8012884:	f8d6 e00c 	ldr.w	lr, [r6, #12]
 8012888:	911b      	str	r1, [sp, #108]	; 0x6c
 801288a:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801288e:	69b7      	ldr	r7, [r6, #24]
 8012890:	9118      	str	r1, [sp, #96]	; 0x60
 8012892:	68d1      	ldr	r1, [r2, #12]
 8012894:	6892      	ldr	r2, [r2, #8]
 8012896:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801289a:	9223      	str	r2, [sp, #140]	; 0x8c
 801289c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801289e:	f8dc a008 	ldr.w	sl, [ip, #8]
 80128a2:	9224      	str	r2, [sp, #144]	; 0x90
 80128a4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80128a6:	f8d4 b034 	ldr.w	fp, [r4, #52]	; 0x34
 80128aa:	9217      	str	r2, [sp, #92]	; 0x5c
 80128ac:	6802      	ldr	r2, [r0, #0]
 80128ae:	9122      	str	r1, [sp, #136]	; 0x88
 80128b0:	9211      	str	r2, [sp, #68]	; 0x44
 80128b2:	6842      	ldr	r2, [r0, #4]
 80128b4:	921e      	str	r2, [sp, #120]	; 0x78
 80128b6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80128b8:	9210      	str	r2, [sp, #64]	; 0x40
 80128ba:	f8de 2008 	ldr.w	r2, [lr, #8]
 80128be:	9219      	str	r2, [sp, #100]	; 0x64
 80128c0:	f8de 2004 	ldr.w	r2, [lr, #4]
 80128c4:	921a      	str	r2, [sp, #104]	; 0x68
 80128c6:	69e2      	ldr	r2, [r4, #28]
 80128c8:	9225      	str	r2, [sp, #148]	; 0x94
 80128ca:	68ba      	ldr	r2, [r7, #8]
 80128cc:	ee08 2a90 	vmov	s17, r2
 80128d0:	ee18 2a10 	vmov	r2, s16
 80128d4:	b11a      	cbz	r2, 80128de <forward_conv2d+0xb6>
 80128d6:	6992      	ldr	r2, [r2, #24]
 80128d8:	6892      	ldr	r2, [r2, #8]
 80128da:	ee08 2a10 	vmov	s16, r2
 80128de:	69aa      	ldr	r2, [r5, #24]
 80128e0:	f8d4 8020 	ldr.w	r8, [r4, #32]
 80128e4:	6892      	ldr	r2, [r2, #8]
 80128e6:	9216      	str	r2, [sp, #88]	; 0x58
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	f000 80df 	beq.w	8012aac <forward_conv2d+0x284>
 80128ee:	699a      	ldr	r2, [r3, #24]
 80128f0:	2a00      	cmp	r2, #0
 80128f2:	f000 80e4 	beq.w	8012abe <forward_conv2d+0x296>
 80128f6:	695b      	ldr	r3, [r3, #20]
 80128f8:	f8d2 8008 	ldr.w	r8, [r2, #8]
 80128fc:	689b      	ldr	r3, [r3, #8]
 80128fe:	e9d2 0100 	ldrd	r0, r1, [r2]
 8012902:	9327      	str	r3, [sp, #156]	; 0x9c
 8012904:	f000 fb8a 	bl	801301c <ai_array_get_byte_size>
 8012908:	69b7      	ldr	r7, [r6, #24]
 801290a:	9013      	str	r0, [sp, #76]	; 0x4c
 801290c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801290e:	9312      	str	r3, [sp, #72]	; 0x48
 8012910:	2b00      	cmp	r3, #0
 8012912:	f000 80c8 	beq.w	8012aa6 <forward_conv2d+0x27e>
 8012916:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8012918:	fa1f f28b 	uxth.w	r2, fp
 801291c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8012920:	1e71      	subs	r1, r6, #1
 8012922:	3a01      	subs	r2, #1
 8012924:	3b01      	subs	r3, #1
 8012926:	6838      	ldr	r0, [r7, #0]
 8012928:	fb01 6202 	mla	r2, r1, r2, r6
 801292c:	991a      	ldr	r1, [sp, #104]	; 0x68
 801292e:	921c      	str	r2, [sp, #112]	; 0x70
 8012930:	1e4a      	subs	r2, r1, #1
 8012932:	fb02 1303 	mla	r3, r2, r3, r1
 8012936:	931d      	str	r3, [sp, #116]	; 0x74
 8012938:	f3c0 4343 	ubfx	r3, r0, #17, #4
 801293c:	2b04      	cmp	r3, #4
 801293e:	f000 808c 	beq.w	8012a5a <forward_conv2d+0x232>
 8012942:	2b08      	cmp	r3, #8
 8012944:	f000 8089 	beq.w	8012a5a <forward_conv2d+0x232>
 8012948:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801294c:	9315      	str	r3, [sp, #84]	; 0x54
 801294e:	425b      	negs	r3, r3
 8012950:	9314      	str	r3, [sp, #80]	; 0x50
 8012952:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8012954:	2b00      	cmp	r3, #0
 8012956:	d076      	beq.n	8012a46 <forward_conv2d+0x21e>
 8012958:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
 801295c:	4644      	mov	r4, r8
 801295e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8012962:	425b      	negs	r3, r3
 8012964:	921e      	str	r2, [sp, #120]	; 0x78
 8012966:	fa0f f28b 	sxth.w	r2, fp
 801296a:	9321      	str	r3, [sp, #132]	; 0x84
 801296c:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 8012970:	2300      	movs	r3, #0
 8012972:	921f      	str	r2, [sp, #124]	; 0x7c
 8012974:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8012978:	9317      	str	r3, [sp, #92]	; 0x5c
 801297a:	fb0a f30b 	mul.w	r3, sl, fp
 801297e:	9220      	str	r2, [sp, #128]	; 0x80
 8012980:	9326      	str	r3, [sp, #152]	; 0x98
 8012982:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8012984:	ee19 1a10 	vmov	r1, s18
 8012988:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801298a:	920e      	str	r2, [sp, #56]	; 0x38
 801298c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801298e:	2b00      	cmp	r3, #0
 8012990:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8012992:	920d      	str	r2, [sp, #52]	; 0x34
 8012994:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012996:	4638      	mov	r0, r7
 8012998:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 801299c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801299e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80129a0:	930a      	str	r3, [sp, #40]	; 0x28
 80129a2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80129a4:	9307      	str	r3, [sp, #28]
 80129a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80129a8:	9306      	str	r3, [sp, #24]
 80129aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80129ac:	9305      	str	r3, [sp, #20]
 80129ae:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80129b0:	e9cd a303 	strd	sl, r3, [sp, #12]
 80129b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80129b6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80129ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80129bc:	9300      	str	r3, [sp, #0]
 80129be:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80129c0:	4413      	add	r3, r2
 80129c2:	bfa8      	it	ge
 80129c4:	2200      	movge	r2, #0
 80129c6:	9208      	str	r2, [sp, #32]
 80129c8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80129ca:	4293      	cmp	r3, r2
 80129cc:	bf28      	it	cs
 80129ce:	4613      	movcs	r3, r2
 80129d0:	ee18 2a90 	vmov	r2, s17
 80129d4:	9309      	str	r3, [sp, #36]	; 0x24
 80129d6:	ee18 3a10 	vmov	r3, s16
 80129da:	f7ff f99f 	bl	8011d1c <ai_conv2d_stripe_f32.constprop.0>
 80129de:	f1ba 0f00 	cmp.w	sl, #0
 80129e2:	d020      	beq.n	8012a26 <forward_conv2d+0x1fe>
 80129e4:	2600      	movs	r6, #0
 80129e6:	464a      	mov	r2, r9
 80129e8:	f8dd 909c 	ldr.w	r9, [sp, #156]	; 0x9c
 80129ec:	9610      	str	r6, [sp, #64]	; 0x40
 80129ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80129f0:	4629      	mov	r1, r5
 80129f2:	4628      	mov	r0, r5
 80129f4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80129f6:	3301      	adds	r3, #1
 80129f8:	9211      	str	r2, [sp, #68]	; 0x44
 80129fa:	9310      	str	r3, [sp, #64]	; 0x40
 80129fc:	69ab      	ldr	r3, [r5, #24]
 80129fe:	609f      	str	r7, [r3, #8]
 8012a00:	4623      	mov	r3, r4
 8012a02:	444c      	add	r4, r9
 8012a04:	47b0      	blx	r6
 8012a06:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012a08:	445f      	add	r7, fp
 8012a0a:	eba4 0308 	sub.w	r3, r4, r8
 8012a0e:	4293      	cmp	r3, r2
 8012a10:	bfa8      	it	ge
 8012a12:	4644      	movge	r4, r8
 8012a14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012a16:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012a18:	459a      	cmp	sl, r3
 8012a1a:	d1e8      	bne.n	80129ee <forward_conv2d+0x1c6>
 8012a1c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012a1e:	4691      	mov	r9, r2
 8012a20:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8012a22:	4413      	add	r3, r2
 8012a24:	9316      	str	r3, [sp, #88]	; 0x58
 8012a26:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012a28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012a2a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8012a2c:	4413      	add	r3, r2
 8012a2e:	3101      	adds	r1, #1
 8012a30:	9314      	str	r3, [sp, #80]	; 0x50
 8012a32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012a34:	9117      	str	r1, [sp, #92]	; 0x5c
 8012a36:	1a9b      	subs	r3, r3, r2
 8012a38:	9315      	str	r3, [sp, #84]	; 0x54
 8012a3a:	69ab      	ldr	r3, [r5, #24]
 8012a3c:	68da      	ldr	r2, [r3, #12]
 8012a3e:	609a      	str	r2, [r3, #8]
 8012a40:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8012a42:	428b      	cmp	r3, r1
 8012a44:	d19d      	bne.n	8012982 <forward_conv2d+0x15a>
 8012a46:	b029      	add	sp, #164	; 0xa4
 8012a48:	ecbd 8b04 	vpop	{d8-d9}
 8012a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a50:	685b      	ldr	r3, [r3, #4]
 8012a52:	deff      	udf	#255	; 0xff
 8012a54:	2300      	movs	r3, #0
 8012a56:	685b      	ldr	r3, [r3, #4]
 8012a58:	deff      	udf	#255	; 0xff
 8012a5a:	68fa      	ldr	r2, [r7, #12]
 8012a5c:	2a00      	cmp	r2, #0
 8012a5e:	f43f af73 	beq.w	8012948 <forward_conv2d+0x120>
 8012a62:	69a3      	ldr	r3, [r4, #24]
 8012a64:	8819      	ldrh	r1, [r3, #0]
 8012a66:	2903      	cmp	r1, #3
 8012a68:	d945      	bls.n	8012af6 <forward_conv2d+0x2ce>
 8012a6a:	685b      	ldr	r3, [r3, #4]
 8012a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d039      	beq.n	8012ae6 <forward_conv2d+0x2be>
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d036      	beq.n	8012ae6 <forward_conv2d+0x2be>
 8012a78:	699c      	ldr	r4, [r3, #24]
 8012a7a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8012a7e:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8012a82:	68b9      	ldr	r1, [r7, #8]
 8012a84:	4103      	asrs	r3, r0
 8012a86:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8012a8a:	b29b      	uxth	r3, r3
 8012a8c:	9401      	str	r4, [sp, #4]
 8012a8e:	ee18 4a90 	vmov	r4, s17
 8012a92:	2800      	cmp	r0, #0
 8012a94:	bf18      	it	ne
 8012a96:	4604      	movne	r4, r0
 8012a98:	ee08 4a90 	vmov	s17, r4
 8012a9c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8012a9e:	9400      	str	r4, [sp, #0]
 8012aa0:	f7ff fe72 	bl	8012788 <ai_dict_decompress_f32>
 8012aa4:	e750      	b.n	8012948 <forward_conv2d+0x120>
 8012aa6:	4b15      	ldr	r3, [pc, #84]	; (8012afc <forward_conv2d+0x2d4>)
 8012aa8:	9312      	str	r3, [sp, #72]	; 0x48
 8012aaa:	e734      	b.n	8012916 <forward_conv2d+0xee>
 8012aac:	f1b8 0f00 	cmp.w	r8, #0
 8012ab0:	d00b      	beq.n	8012aca <forward_conv2d+0x2a2>
 8012ab2:	9327      	str	r3, [sp, #156]	; 0x9c
 8012ab4:	2301      	movs	r3, #1
 8012ab6:	f8d8 8008 	ldr.w	r8, [r8, #8]
 8012aba:	9313      	str	r3, [sp, #76]	; 0x4c
 8012abc:	e726      	b.n	801290c <forward_conv2d+0xe4>
 8012abe:	f1b8 0f00 	cmp.w	r8, #0
 8012ac2:	d001      	beq.n	8012ac8 <forward_conv2d+0x2a0>
 8012ac4:	f8d8 8008 	ldr.w	r8, [r8, #8]
 8012ac8:	2300      	movs	r3, #0
 8012aca:	9327      	str	r3, [sp, #156]	; 0x9c
 8012acc:	2301      	movs	r3, #1
 8012ace:	9313      	str	r3, [sp, #76]	; 0x4c
 8012ad0:	e71c      	b.n	801290c <forward_conv2d+0xe4>
 8012ad2:	2a01      	cmp	r2, #1
 8012ad4:	d90a      	bls.n	8012aec <forward_conv2d+0x2c4>
 8012ad6:	ee08 3a10 	vmov	s16, r3
 8012ada:	461e      	mov	r6, r3
 8012adc:	e6c9      	b.n	8012872 <forward_conv2d+0x4a>
 8012ade:	2200      	movs	r2, #0
 8012ae0:	ee08 2a10 	vmov	s16, r2
 8012ae4:	e6c4      	b.n	8012870 <forward_conv2d+0x48>
 8012ae6:	2300      	movs	r3, #0
 8012ae8:	699b      	ldr	r3, [r3, #24]
 8012aea:	deff      	udf	#255	; 0xff
 8012aec:	68db      	ldr	r3, [r3, #12]
 8012aee:	deff      	udf	#255	; 0xff
 8012af0:	2300      	movs	r3, #0
 8012af2:	685b      	ldr	r3, [r3, #4]
 8012af4:	deff      	udf	#255	; 0xff
 8012af6:	2300      	movs	r3, #0
 8012af8:	685b      	ldr	r3, [r3, #4]
 8012afa:	deff      	udf	#255	; 0xff
 8012afc:	08011d19 	.word	0x08011d19

08012b00 <nl_func_relu_array_f32>:
 8012b00:	b410      	push	{r4}
 8012b02:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8012b06:	698c      	ldr	r4, [r1, #24]
 8012b08:	6981      	ldr	r1, [r0, #24]
 8012b0a:	4413      	add	r3, r2
 8012b0c:	68a0      	ldr	r0, [r4, #8]
 8012b0e:	6889      	ldr	r1, [r1, #8]
 8012b10:	009a      	lsls	r2, r3, #2
 8012b12:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8012b16:	4298      	cmp	r0, r3
 8012b18:	d80f      	bhi.n	8012b3a <nl_func_relu_array_f32+0x3a>
 8012b1a:	3204      	adds	r2, #4
 8012b1c:	3304      	adds	r3, #4
 8012b1e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8012b40 <nl_func_relu_array_f32+0x40>
 8012b22:	4411      	add	r1, r2
 8012b24:	461a      	mov	r2, r3
 8012b26:	ed73 7a01 	vldmdb	r3!, {s15}
 8012b2a:	3a08      	subs	r2, #8
 8012b2c:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8012b30:	ed61 7a01 	vstmdb	r1!, {s15}
 8012b34:	68a0      	ldr	r0, [r4, #8]
 8012b36:	4290      	cmp	r0, r2
 8012b38:	d9f4      	bls.n	8012b24 <nl_func_relu_array_f32+0x24>
 8012b3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b3e:	4770      	bx	lr
 8012b40:	00000000 	.word	0x00000000

08012b44 <nl_func_sm_channel_f32>:
 8012b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b48:	ed2d 8b02 	vpush	{d8}
 8012b4c:	6989      	ldr	r1, [r1, #24]
 8012b4e:	2a01      	cmp	r2, #1
 8012b50:	6983      	ldr	r3, [r0, #24]
 8012b52:	4617      	mov	r7, r2
 8012b54:	688d      	ldr	r5, [r1, #8]
 8012b56:	689e      	ldr	r6, [r3, #8]
 8012b58:	ed95 8a00 	vldr	s16, [r5]
 8012b5c:	d930      	bls.n	8012bc0 <nl_func_sm_channel_f32+0x7c>
 8012b5e:	1d2b      	adds	r3, r5, #4
 8012b60:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8012b64:	ecf3 7a01 	vldmia	r3!, {s15}
 8012b68:	429a      	cmp	r2, r3
 8012b6a:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 8012b6e:	d1f9      	bne.n	8012b64 <nl_func_sm_channel_f32+0x20>
 8012b70:	2400      	movs	r4, #0
 8012b72:	eddf 8a16 	vldr	s17, [pc, #88]	; 8012bcc <nl_func_sm_channel_f32+0x88>
 8012b76:	46b0      	mov	r8, r6
 8012b78:	ecb5 0a01 	vldmia	r5!, {s0}
 8012b7c:	3401      	adds	r4, #1
 8012b7e:	ee30 0a48 	vsub.f32	s0, s0, s16
 8012b82:	f001 fc87 	bl	8014494 <expf>
 8012b86:	42a7      	cmp	r7, r4
 8012b88:	ee78 8a80 	vadd.f32	s17, s17, s0
 8012b8c:	eca8 0a01 	vstmia	r8!, {s0}
 8012b90:	d8f2      	bhi.n	8012b78 <nl_func_sm_channel_f32+0x34>
 8012b92:	eef5 8a40 	vcmp.f32	s17, #0.0
 8012b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b9a:	d00d      	beq.n	8012bb8 <nl_func_sm_channel_f32+0x74>
 8012b9c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012ba0:	2300      	movs	r3, #0
 8012ba2:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 8012ba6:	edd6 7a00 	vldr	s15, [r6]
 8012baa:	3301      	adds	r3, #1
 8012bac:	429f      	cmp	r7, r3
 8012bae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012bb2:	ece6 7a01 	vstmia	r6!, {s15}
 8012bb6:	d8f6      	bhi.n	8012ba6 <nl_func_sm_channel_f32+0x62>
 8012bb8:	ecbd 8b02 	vpop	{d8}
 8012bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bc0:	2a00      	cmp	r2, #0
 8012bc2:	d1d5      	bne.n	8012b70 <nl_func_sm_channel_f32+0x2c>
 8012bc4:	ecbd 8b02 	vpop	{d8}
 8012bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bcc:	00000000 	.word	0x00000000

08012bd0 <nl_func_clip_array_f32>:
 8012bd0:	b410      	push	{r4}
 8012bd2:	698c      	ldr	r4, [r1, #24]
 8012bd4:	ed93 7a00 	vldr	s14, [r3]
 8012bd8:	edd3 6a01 	vldr	s13, [r3, #4]
 8012bdc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8012be0:	6981      	ldr	r1, [r0, #24]
 8012be2:	4413      	add	r3, r2
 8012be4:	68a0      	ldr	r0, [r4, #8]
 8012be6:	6889      	ldr	r1, [r1, #8]
 8012be8:	009a      	lsls	r2, r3, #2
 8012bea:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8012bee:	4298      	cmp	r0, r3
 8012bf0:	d80f      	bhi.n	8012c12 <nl_func_clip_array_f32+0x42>
 8012bf2:	3204      	adds	r2, #4
 8012bf4:	3304      	adds	r3, #4
 8012bf6:	4411      	add	r1, r2
 8012bf8:	461a      	mov	r2, r3
 8012bfa:	ed73 7a01 	vldmdb	r3!, {s15}
 8012bfe:	3a08      	subs	r2, #8
 8012c00:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
 8012c04:	fec7 7ae6 	vminnm.f32	s15, s15, s13
 8012c08:	ed61 7a01 	vstmdb	r1!, {s15}
 8012c0c:	68a0      	ldr	r0, [r4, #8]
 8012c0e:	4290      	cmp	r0, r2
 8012c10:	d9f2      	bls.n	8012bf8 <nl_func_clip_array_f32+0x28>
 8012c12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c16:	4770      	bx	lr

08012c18 <forward_eltwise>:
 8012c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c1c:	6982      	ldr	r2, [r0, #24]
 8012c1e:	b09d      	sub	sp, #116	; 0x74
 8012c20:	8811      	ldrh	r1, [r2, #0]
 8012c22:	9003      	str	r0, [sp, #12]
 8012c24:	2900      	cmp	r1, #0
 8012c26:	f000 80c7 	beq.w	8012db8 <forward_eltwise+0x1a0>
 8012c2a:	6853      	ldr	r3, [r2, #4]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	f000 8116 	beq.w	8012e5e <forward_eltwise+0x246>
 8012c32:	8818      	ldrh	r0, [r3, #0]
 8012c34:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8012c38:	f1b8 0f00 	cmp.w	r8, #0
 8012c3c:	d001      	beq.n	8012c42 <forward_eltwise+0x2a>
 8012c3e:	f8d8 8000 	ldr.w	r8, [r8]
 8012c42:	2901      	cmp	r1, #1
 8012c44:	f000 810f 	beq.w	8012e66 <forward_eltwise+0x24e>
 8012c48:	691b      	ldr	r3, [r3, #16]
 8012c4a:	9300      	str	r3, [sp, #0]
 8012c4c:	b10b      	cbz	r3, 8012c52 <forward_eltwise+0x3a>
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	9300      	str	r3, [sp, #0]
 8012c52:	2300      	movs	r3, #0
 8012c54:	2801      	cmp	r0, #1
 8012c56:	930d      	str	r3, [sp, #52]	; 0x34
 8012c58:	9312      	str	r3, [sp, #72]	; 0x48
 8012c5a:	9317      	str	r3, [sp, #92]	; 0x5c
 8012c5c:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 8012c60:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 8012c64:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
 8012c68:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 8012c6c:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
 8012c70:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
 8012c74:	ab0d      	add	r3, sp, #52	; 0x34
 8012c76:	9308      	str	r3, [sp, #32]
 8012c78:	ab12      	add	r3, sp, #72	; 0x48
 8012c7a:	930a      	str	r3, [sp, #40]	; 0x28
 8012c7c:	ab17      	add	r3, sp, #92	; 0x5c
 8012c7e:	930c      	str	r3, [sp, #48]	; 0x30
 8012c80:	f240 5302 	movw	r3, #1282	; 0x502
 8012c84:	9307      	str	r3, [sp, #28]
 8012c86:	9309      	str	r3, [sp, #36]	; 0x24
 8012c88:	f240 5301 	movw	r3, #1281	; 0x501
 8012c8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8012c8e:	9b03      	ldr	r3, [sp, #12]
 8012c90:	e9d3 7307 	ldrd	r7, r3, [r3, #28]
 8012c94:	9304      	str	r3, [sp, #16]
 8012c96:	f240 80d8 	bls.w	8012e4a <forward_eltwise+0x232>
 8012c9a:	0083      	lsls	r3, r0, #2
 8012c9c:	9305      	str	r3, [sp, #20]
 8012c9e:	2304      	movs	r3, #4
 8012ca0:	9301      	str	r3, [sp, #4]
 8012ca2:	8813      	ldrh	r3, [r2, #0]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	f000 80e1 	beq.w	8012e6c <forward_eltwise+0x254>
 8012caa:	6853      	ldr	r3, [r2, #4]
 8012cac:	685b      	ldr	r3, [r3, #4]
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	f000 80d7 	beq.w	8012e62 <forward_eltwise+0x24a>
 8012cb4:	9a01      	ldr	r2, [sp, #4]
 8012cb6:	f108 0108 	add.w	r1, r8, #8
 8012cba:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8012cbe:	f853 a002 	ldr.w	sl, [r3, r2]
 8012cc2:	f8da 3008 	ldr.w	r3, [sl, #8]
 8012cc6:	f10a 0908 	add.w	r9, sl, #8
 8012cca:	4043      	eors	r3, r0
 8012ccc:	f033 03ff 	bics.w	r3, r3, #255	; 0xff
 8012cd0:	d10f      	bne.n	8012cf2 <forward_eltwise+0xda>
 8012cd2:	f3c0 2017 	ubfx	r0, r0, #8, #24
 8012cd6:	2800      	cmp	r0, #0
 8012cd8:	f000 8097 	beq.w	8012e0a <forward_eltwise+0x1f2>
 8012cdc:	3801      	subs	r0, #1
 8012cde:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8012ce2:	f8da 300c 	ldr.w	r3, [sl, #12]
 8012ce6:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8012cea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012cee:	429a      	cmp	r2, r3
 8012cf0:	d0f1      	beq.n	8012cd6 <forward_eltwise+0xbe>
 8012cf2:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8012cf6:	464a      	mov	r2, r9
 8012cf8:	a80b      	add	r0, sp, #44	; 0x2c
 8012cfa:	9102      	str	r1, [sp, #8]
 8012cfc:	689d      	ldr	r5, [r3, #8]
 8012cfe:	f8da 3018 	ldr.w	r3, [sl, #24]
 8012d02:	689c      	ldr	r4, [r3, #8]
 8012d04:	9b00      	ldr	r3, [sp, #0]
 8012d06:	699b      	ldr	r3, [r3, #24]
 8012d08:	689e      	ldr	r6, [r3, #8]
 8012d0a:	f000 f9af 	bl	801306c <core_get_broadcasted_shape>
 8012d0e:	f8da 2014 	ldr.w	r2, [sl, #20]
 8012d12:	a807      	add	r0, sp, #28
 8012d14:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8012d18:	f8d2 a004 	ldr.w	sl, [r2, #4]
 8012d1c:	9a00      	ldr	r2, [sp, #0]
 8012d1e:	9902      	ldr	r1, [sp, #8]
 8012d20:	6952      	ldr	r2, [r2, #20]
 8012d22:	685b      	ldr	r3, [r3, #4]
 8012d24:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8012d28:	aa0b      	add	r2, sp, #44	; 0x2c
 8012d2a:	f000 f9c7 	bl	80130bc <core_compute_offsets_in_bytes>
 8012d2e:	4653      	mov	r3, sl
 8012d30:	aa0b      	add	r2, sp, #44	; 0x2c
 8012d32:	4649      	mov	r1, r9
 8012d34:	a809      	add	r0, sp, #36	; 0x24
 8012d36:	f000 f9c1 	bl	80130bc <core_compute_offsets_in_bytes>
 8012d3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012d3c:	68d3      	ldr	r3, [r2, #12]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d058      	beq.n	8012df4 <forward_eltwise+0x1dc>
 8012d42:	2300      	movs	r3, #0
 8012d44:	6891      	ldr	r1, [r2, #8]
 8012d46:	9302      	str	r3, [sp, #8]
 8012d48:	2900      	cmp	r1, #0
 8012d4a:	d053      	beq.n	8012df4 <forward_eltwise+0x1dc>
 8012d4c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8012d4e:	f04f 0b00 	mov.w	fp, #0
 8012d52:	f3c0 2017 	ubfx	r0, r0, #8, #24
 8012d56:	f04f 0a00 	mov.w	sl, #0
 8012d5a:	2804      	cmp	r0, #4
 8012d5c:	bf8c      	ite	hi
 8012d5e:	6913      	ldrhi	r3, [r2, #16]
 8012d60:	2301      	movls	r3, #1
 8012d62:	459a      	cmp	sl, r3
 8012d64:	d22a      	bcs.n	8012dbc <forward_eltwise+0x1a4>
 8012d66:	6851      	ldr	r1, [r2, #4]
 8012d68:	b1a9      	cbz	r1, 8012d96 <forward_eltwise+0x17e>
 8012d6a:	f04f 0900 	mov.w	r9, #0
 8012d6e:	4622      	mov	r2, r4
 8012d70:	4629      	mov	r1, r5
 8012d72:	4630      	mov	r0, r6
 8012d74:	f109 0901 	add.w	r9, r9, #1
 8012d78:	47b8      	blx	r7
 8012d7a:	9b08      	ldr	r3, [sp, #32]
 8012d7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012d7e:	4446      	add	r6, r8
 8012d80:	685b      	ldr	r3, [r3, #4]
 8012d82:	441d      	add	r5, r3
 8012d84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d86:	685b      	ldr	r3, [r3, #4]
 8012d88:	441c      	add	r4, r3
 8012d8a:	6853      	ldr	r3, [r2, #4]
 8012d8c:	454b      	cmp	r3, r9
 8012d8e:	d8ee      	bhi.n	8012d6e <forward_eltwise+0x156>
 8012d90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012d92:	f3c3 2017 	ubfx	r0, r3, #8, #24
 8012d96:	9907      	ldr	r1, [sp, #28]
 8012d98:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 8012d9c:	d302      	bcc.n	8012da4 <forward_eltwise+0x18c>
 8012d9e:	9908      	ldr	r1, [sp, #32]
 8012da0:	690b      	ldr	r3, [r1, #16]
 8012da2:	441d      	add	r5, r3
 8012da4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012da6:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 8012daa:	d302      	bcc.n	8012db2 <forward_eltwise+0x19a>
 8012dac:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012dae:	690b      	ldr	r3, [r1, #16]
 8012db0:	441c      	add	r4, r3
 8012db2:	f10a 0a01 	add.w	sl, sl, #1
 8012db6:	e7d0      	b.n	8012d5a <forward_eltwise+0x142>
 8012db8:	684b      	ldr	r3, [r1, #4]
 8012dba:	deff      	udf	#255	; 0xff
 8012dbc:	9b08      	ldr	r3, [sp, #32]
 8012dbe:	f10b 0b01 	add.w	fp, fp, #1
 8012dc2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8012dc6:	6899      	ldr	r1, [r3, #8]
 8012dc8:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8012dcc:	440d      	add	r5, r1
 8012dce:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8012dd2:	45dc      	cmp	ip, fp
 8012dd4:	440c      	add	r4, r1
 8012dd6:	d8be      	bhi.n	8012d56 <forward_eltwise+0x13e>
 8012dd8:	68d8      	ldr	r0, [r3, #12]
 8012dda:	469e      	mov	lr, r3
 8012ddc:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8012de0:	4661      	mov	r1, ip
 8012de2:	4405      	add	r5, r0
 8012de4:	441c      	add	r4, r3
 8012de6:	9b02      	ldr	r3, [sp, #8]
 8012de8:	3301      	adds	r3, #1
 8012dea:	4618      	mov	r0, r3
 8012dec:	9302      	str	r3, [sp, #8]
 8012dee:	68d3      	ldr	r3, [r2, #12]
 8012df0:	4283      	cmp	r3, r0
 8012df2:	d8a9      	bhi.n	8012d48 <forward_eltwise+0x130>
 8012df4:	9b01      	ldr	r3, [sp, #4]
 8012df6:	9a05      	ldr	r2, [sp, #20]
 8012df8:	3304      	adds	r3, #4
 8012dfa:	4293      	cmp	r3, r2
 8012dfc:	9301      	str	r3, [sp, #4]
 8012dfe:	d024      	beq.n	8012e4a <forward_eltwise+0x232>
 8012e00:	9b03      	ldr	r3, [sp, #12]
 8012e02:	f8dd 8000 	ldr.w	r8, [sp]
 8012e06:	699a      	ldr	r2, [r3, #24]
 8012e08:	e74b      	b.n	8012ca2 <forward_eltwise+0x8a>
 8012e0a:	9b00      	ldr	r3, [sp, #0]
 8012e0c:	464a      	mov	r2, r9
 8012e0e:	f8da 0018 	ldr.w	r0, [sl, #24]
 8012e12:	699b      	ldr	r3, [r3, #24]
 8012e14:	f8d8 4018 	ldr.w	r4, [r8, #24]
 8012e18:	6885      	ldr	r5, [r0, #8]
 8012e1a:	a80b      	add	r0, sp, #44	; 0x2c
 8012e1c:	689e      	ldr	r6, [r3, #8]
 8012e1e:	68a4      	ldr	r4, [r4, #8]
 8012e20:	f000 f924 	bl	801306c <core_get_broadcasted_shape>
 8012e24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012e26:	0a1b      	lsrs	r3, r3, #8
 8012e28:	d012      	beq.n	8012e50 <forward_eltwise+0x238>
 8012e2a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8012e2c:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8012e30:	2301      	movs	r3, #1
 8012e32:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8012e36:	4290      	cmp	r0, r2
 8012e38:	fb01 f303 	mul.w	r3, r1, r3
 8012e3c:	d1f9      	bne.n	8012e32 <forward_eltwise+0x21a>
 8012e3e:	4621      	mov	r1, r4
 8012e40:	462a      	mov	r2, r5
 8012e42:	4630      	mov	r0, r6
 8012e44:	9c04      	ldr	r4, [sp, #16]
 8012e46:	47a0      	blx	r4
 8012e48:	e7d4      	b.n	8012df4 <forward_eltwise+0x1dc>
 8012e4a:	b01d      	add	sp, #116	; 0x74
 8012e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e50:	4621      	mov	r1, r4
 8012e52:	2301      	movs	r3, #1
 8012e54:	462a      	mov	r2, r5
 8012e56:	4630      	mov	r0, r6
 8012e58:	9c04      	ldr	r4, [sp, #16]
 8012e5a:	47a0      	blx	r4
 8012e5c:	e7ca      	b.n	8012df4 <forward_eltwise+0x1dc>
 8012e5e:	4618      	mov	r0, r3
 8012e60:	e6e8      	b.n	8012c34 <forward_eltwise+0x1c>
 8012e62:	689b      	ldr	r3, [r3, #8]
 8012e64:	deff      	udf	#255	; 0xff
 8012e66:	2300      	movs	r3, #0
 8012e68:	685b      	ldr	r3, [r3, #4]
 8012e6a:	deff      	udf	#255	; 0xff
 8012e6c:	685b      	ldr	r3, [r3, #4]
 8012e6e:	deff      	udf	#255	; 0xff

08012e70 <ai_check_custom_types>:
 8012e70:	b082      	sub	sp, #8
 8012e72:	4b12      	ldr	r3, [pc, #72]	; (8012ebc <ai_check_custom_types+0x4c>)
 8012e74:	9301      	str	r3, [sp, #4]
 8012e76:	b118      	cbz	r0, 8012e80 <ai_check_custom_types+0x10>
 8012e78:	7803      	ldrb	r3, [r0, #0]
 8012e7a:	2b03      	cmp	r3, #3
 8012e7c:	d002      	beq.n	8012e84 <ai_check_custom_types+0x14>
 8012e7e:	2000      	movs	r0, #0
 8012e80:	b002      	add	sp, #8
 8012e82:	4770      	bx	lr
 8012e84:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012e88:	4293      	cmp	r3, r2
 8012e8a:	d004      	beq.n	8012e96 <ai_check_custom_types+0x26>
 8012e8c:	2001      	movs	r0, #1
 8012e8e:	f080 0001 	eor.w	r0, r0, #1
 8012e92:	b002      	add	sp, #8
 8012e94:	4770      	bx	lr
 8012e96:	7842      	ldrb	r2, [r0, #1]
 8012e98:	3001      	adds	r0, #1
 8012e9a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012e9e:	429a      	cmp	r2, r3
 8012ea0:	d1f4      	bne.n	8012e8c <ai_check_custom_types+0x1c>
 8012ea2:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8012ea6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012eaa:	429a      	cmp	r2, r3
 8012eac:	d1ee      	bne.n	8012e8c <ai_check_custom_types+0x1c>
 8012eae:	7842      	ldrb	r2, [r0, #1]
 8012eb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012eb4:	429a      	cmp	r2, r3
 8012eb6:	d1e9      	bne.n	8012e8c <ai_check_custom_types+0x1c>
 8012eb8:	2000      	movs	r0, #0
 8012eba:	e7e8      	b.n	8012e8e <ai_check_custom_types+0x1e>
 8012ebc:	84048403 	.word	0x84048403

08012ec0 <ai_layers_init_all>:
 8012ec0:	2100      	movs	r1, #0
 8012ec2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012ec4:	b13b      	cbz	r3, 8012ed6 <ai_layers_init_all+0x16>
 8012ec6:	691a      	ldr	r2, [r3, #16]
 8012ec8:	3101      	adds	r1, #1
 8012eca:	60d8      	str	r0, [r3, #12]
 8012ecc:	429a      	cmp	r2, r3
 8012ece:	4613      	mov	r3, r2
 8012ed0:	d001      	beq.n	8012ed6 <ai_layers_init_all+0x16>
 8012ed2:	2a00      	cmp	r2, #0
 8012ed4:	d1f6      	bne.n	8012ec4 <ai_layers_init_all+0x4>
 8012ed6:	4608      	mov	r0, r1
 8012ed8:	4770      	bx	lr
 8012eda:	bf00      	nop

08012edc <ai_layers_post_init_all>:
 8012edc:	b538      	push	{r3, r4, r5, lr}
 8012ede:	2500      	movs	r5, #0
 8012ee0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8012ee2:	b16c      	cbz	r4, 8012f00 <ai_layers_post_init_all+0x24>
 8012ee4:	6863      	ldr	r3, [r4, #4]
 8012ee6:	07db      	lsls	r3, r3, #31
 8012ee8:	d504      	bpl.n	8012ef4 <ai_layers_post_init_all+0x18>
 8012eea:	6a23      	ldr	r3, [r4, #32]
 8012eec:	4620      	mov	r0, r4
 8012eee:	b10b      	cbz	r3, 8012ef4 <ai_layers_post_init_all+0x18>
 8012ef0:	3501      	adds	r5, #1
 8012ef2:	4798      	blx	r3
 8012ef4:	6923      	ldr	r3, [r4, #16]
 8012ef6:	42a3      	cmp	r3, r4
 8012ef8:	461c      	mov	r4, r3
 8012efa:	d001      	beq.n	8012f00 <ai_layers_post_init_all+0x24>
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d1f0      	bne.n	8012ee2 <ai_layers_post_init_all+0x6>
 8012f00:	4628      	mov	r0, r5
 8012f02:	bd38      	pop	{r3, r4, r5, pc}

08012f04 <ai_sum_f32>:
 8012f04:	edd1 7a00 	vldr	s15, [r1]
 8012f08:	ed92 7a00 	vldr	s14, [r2]
 8012f0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012f10:	edc0 7a00 	vstr	s15, [r0]
 8012f14:	4770      	bx	lr
 8012f16:	bf00      	nop

08012f18 <ai_sum_buffer_f32>:
 8012f18:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8012f1c:	4298      	cmp	r0, r3
 8012f1e:	d209      	bcs.n	8012f34 <ai_sum_buffer_f32+0x1c>
 8012f20:	ecf1 7a01 	vldmia	r1!, {s15}
 8012f24:	ecb2 7a01 	vldmia	r2!, {s14}
 8012f28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012f2c:	ece0 7a01 	vstmia	r0!, {s15}
 8012f30:	4283      	cmp	r3, r0
 8012f32:	d8f5      	bhi.n	8012f20 <ai_sum_buffer_f32+0x8>
 8012f34:	4770      	bx	lr
 8012f36:	bf00      	nop

08012f38 <ai_version_get>:
 8012f38:	0212      	lsls	r2, r2, #8
 8012f3a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8012f3e:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8012f42:	4770      	bx	lr

08012f44 <ai_array_to_buffer_fmt>:
 8012f44:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8012f48:	2b02      	cmp	r3, #2
 8012f4a:	d050      	beq.n	8012fee <ai_array_to_buffer_fmt+0xaa>
 8012f4c:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8012f50:	4b29      	ldr	r3, [pc, #164]	; (8012ff8 <ai_array_to_buffer_fmt+0xb4>)
 8012f52:	429a      	cmp	r2, r3
 8012f54:	d00b      	beq.n	8012f6e <ai_array_to_buffer_fmt+0x2a>
 8012f56:	dc1c      	bgt.n	8012f92 <ai_array_to_buffer_fmt+0x4e>
 8012f58:	4b28      	ldr	r3, [pc, #160]	; (8012ffc <ai_array_to_buffer_fmt+0xb8>)
 8012f5a:	429a      	cmp	r2, r3
 8012f5c:	d007      	beq.n	8012f6e <ai_array_to_buffer_fmt+0x2a>
 8012f5e:	dd0b      	ble.n	8012f78 <ai_array_to_buffer_fmt+0x34>
 8012f60:	4b27      	ldr	r3, [pc, #156]	; (8013000 <ai_array_to_buffer_fmt+0xbc>)
 8012f62:	429a      	cmp	r2, r3
 8012f64:	d003      	beq.n	8012f6e <ai_array_to_buffer_fmt+0x2a>
 8012f66:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8012f6a:	429a      	cmp	r2, r3
 8012f6c:	d131      	bne.n	8012fd2 <ai_array_to_buffer_fmt+0x8e>
 8012f6e:	4613      	mov	r3, r2
 8012f70:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8012f74:	4318      	orrs	r0, r3
 8012f76:	4770      	bx	lr
 8012f78:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8012f7c:	429a      	cmp	r2, r3
 8012f7e:	d0f6      	beq.n	8012f6e <ai_array_to_buffer_fmt+0x2a>
 8012f80:	dd2c      	ble.n	8012fdc <ai_array_to_buffer_fmt+0x98>
 8012f82:	4b20      	ldr	r3, [pc, #128]	; (8013004 <ai_array_to_buffer_fmt+0xc0>)
 8012f84:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8012f88:	429a      	cmp	r2, r3
 8012f8a:	bf18      	it	ne
 8012f8c:	2340      	movne	r3, #64	; 0x40
 8012f8e:	4318      	orrs	r0, r3
 8012f90:	4770      	bx	lr
 8012f92:	4b1d      	ldr	r3, [pc, #116]	; (8013008 <ai_array_to_buffer_fmt+0xc4>)
 8012f94:	429a      	cmp	r2, r3
 8012f96:	d0ea      	beq.n	8012f6e <ai_array_to_buffer_fmt+0x2a>
 8012f98:	dd0e      	ble.n	8012fb8 <ai_array_to_buffer_fmt+0x74>
 8012f9a:	4b1c      	ldr	r3, [pc, #112]	; (801300c <ai_array_to_buffer_fmt+0xc8>)
 8012f9c:	429a      	cmp	r2, r3
 8012f9e:	d0e6      	beq.n	8012f6e <ai_array_to_buffer_fmt+0x2a>
 8012fa0:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8012fa4:	429a      	cmp	r2, r3
 8012fa6:	d0e2      	beq.n	8012f6e <ai_array_to_buffer_fmt+0x2a>
 8012fa8:	4b19      	ldr	r3, [pc, #100]	; (8013010 <ai_array_to_buffer_fmt+0xcc>)
 8012faa:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8012fae:	429a      	cmp	r2, r3
 8012fb0:	bf18      	it	ne
 8012fb2:	2340      	movne	r3, #64	; 0x40
 8012fb4:	4318      	orrs	r0, r3
 8012fb6:	4770      	bx	lr
 8012fb8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8012fbc:	429a      	cmp	r2, r3
 8012fbe:	d0d6      	beq.n	8012f6e <ai_array_to_buffer_fmt+0x2a>
 8012fc0:	3307      	adds	r3, #7
 8012fc2:	429a      	cmp	r2, r3
 8012fc4:	d0d3      	beq.n	8012f6e <ai_array_to_buffer_fmt+0x2a>
 8012fc6:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 8012fca:	429a      	cmp	r2, r3
 8012fcc:	bf18      	it	ne
 8012fce:	2340      	movne	r3, #64	; 0x40
 8012fd0:	e7ce      	b.n	8012f70 <ai_array_to_buffer_fmt+0x2c>
 8012fd2:	4b10      	ldr	r3, [pc, #64]	; (8013014 <ai_array_to_buffer_fmt+0xd0>)
 8012fd4:	429a      	cmp	r2, r3
 8012fd6:	bf18      	it	ne
 8012fd8:	2340      	movne	r3, #64	; 0x40
 8012fda:	e7c9      	b.n	8012f70 <ai_array_to_buffer_fmt+0x2c>
 8012fdc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8012fe0:	429a      	cmp	r2, r3
 8012fe2:	d0c4      	beq.n	8012f6e <ai_array_to_buffer_fmt+0x2a>
 8012fe4:	3380      	adds	r3, #128	; 0x80
 8012fe6:	429a      	cmp	r2, r3
 8012fe8:	bf18      	it	ne
 8012fea:	2340      	movne	r3, #64	; 0x40
 8012fec:	e7c0      	b.n	8012f70 <ai_array_to_buffer_fmt+0x2c>
 8012fee:	4b0a      	ldr	r3, [pc, #40]	; (8013018 <ai_array_to_buffer_fmt+0xd4>)
 8012ff0:	4003      	ands	r3, r0
 8012ff2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012ff6:	e7bb      	b.n	8012f70 <ai_array_to_buffer_fmt+0x2c>
 8012ff8:	00840040 	.word	0x00840040
 8012ffc:	00040840 	.word	0x00040840
 8013000:	00041040 	.word	0x00041040
 8013004:	00040447 	.word	0x00040447
 8013008:	00840840 	.word	0x00840840
 801300c:	00841040 	.word	0x00841040
 8013010:	0084084f 	.word	0x0084084f
 8013014:	0004084f 	.word	0x0004084f
 8013018:	00803fff 	.word	0x00803fff

0801301c <ai_array_get_byte_size>:
 801301c:	b319      	cbz	r1, 8013066 <ai_array_get_byte_size+0x4a>
 801301e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8013022:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8013026:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 801302a:	11c0      	asrs	r0, r0, #7
 801302c:	fb03 f101 	mul.w	r1, r3, r1
 8013030:	2a04      	cmp	r2, #4
 8013032:	f101 0107 	add.w	r1, r1, #7
 8013036:	f021 0107 	bic.w	r1, r1, #7
 801303a:	fa21 f10c 	lsr.w	r1, r1, ip
 801303e:	d00b      	beq.n	8013058 <ai_array_get_byte_size+0x3c>
 8013040:	2a08      	cmp	r2, #8
 8013042:	d002      	beq.n	801304a <ai_array_get_byte_size+0x2e>
 8013044:	3107      	adds	r1, #7
 8013046:	08c8      	lsrs	r0, r1, #3
 8013048:	4770      	bx	lr
 801304a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801304e:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8013052:	3107      	adds	r1, #7
 8013054:	08c8      	lsrs	r0, r1, #3
 8013056:	4770      	bx	lr
 8013058:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801305c:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8013060:	3107      	adds	r1, #7
 8013062:	08c8      	lsrs	r0, r1, #3
 8013064:	4770      	bx	lr
 8013066:	4608      	mov	r0, r1
 8013068:	4770      	bx	lr
 801306a:	bf00      	nop

0801306c <core_get_broadcasted_shape>:
 801306c:	b470      	push	{r4, r5, r6}
 801306e:	6804      	ldr	r4, [r0, #0]
 8013070:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8013074:	b304      	cbz	r4, 80130b8 <core_get_broadcasted_shape+0x4c>
 8013076:	4623      	mov	r3, r4
 8013078:	3b01      	subs	r3, #1
 801307a:	429c      	cmp	r4, r3
 801307c:	d917      	bls.n	80130ae <core_get_broadcasted_shape+0x42>
 801307e:	6815      	ldr	r5, [r2, #0]
 8013080:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8013084:	2401      	movs	r4, #1
 8013086:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 801308a:	d202      	bcs.n	8013092 <core_get_broadcasted_shape+0x26>
 801308c:	6854      	ldr	r4, [r2, #4]
 801308e:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8013092:	680e      	ldr	r6, [r1, #0]
 8013094:	2501      	movs	r5, #1
 8013096:	ebb3 2f16 	cmp.w	r3, r6, lsr #8
 801309a:	d202      	bcs.n	80130a2 <core_get_broadcasted_shape+0x36>
 801309c:	684d      	ldr	r5, [r1, #4]
 801309e:	f855 500c 	ldr.w	r5, [r5, ip]
 80130a2:	42ac      	cmp	r4, r5
 80130a4:	bf38      	it	cc
 80130a6:	462c      	movcc	r4, r5
 80130a8:	6845      	ldr	r5, [r0, #4]
 80130aa:	f845 400c 	str.w	r4, [r5, ip]
 80130ae:	b11b      	cbz	r3, 80130b8 <core_get_broadcasted_shape+0x4c>
 80130b0:	6804      	ldr	r4, [r0, #0]
 80130b2:	f3c4 2417 	ubfx	r4, r4, #8, #24
 80130b6:	e7df      	b.n	8013078 <core_get_broadcasted_shape+0xc>
 80130b8:	bc70      	pop	{r4, r5, r6}
 80130ba:	4770      	bx	lr

080130bc <core_compute_offsets_in_bytes>:
 80130bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130c0:	e9d1 5c00 	ldrd	r5, ip, [r1]
 80130c4:	6857      	ldr	r7, [r2, #4]
 80130c6:	b085      	sub	sp, #20
 80130c8:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80130cc:	687e      	ldr	r6, [r7, #4]
 80130ce:	1ba1      	subs	r1, r4, r6
 80130d0:	bf18      	it	ne
 80130d2:	2101      	movne	r1, #1
 80130d4:	f5b5 6fa0 	cmp.w	r5, #1280	; 0x500
 80130d8:	9101      	str	r1, [sp, #4]
 80130da:	f0c0 809c 	bcc.w	8013216 <core_compute_offsets_in_bytes+0x15a>
 80130de:	f8dc 9010 	ldr.w	r9, [ip, #16]
 80130e2:	fb09 fe04 	mul.w	lr, r9, r4
 80130e6:	6812      	ldr	r2, [r2, #0]
 80130e8:	f8d0 b000 	ldr.w	fp, [r0]
 80130ec:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 80130f0:	e9dc 5202 	ldrd	r5, r2, [ip, #8]
 80130f4:	bf2c      	ite	cs
 80130f6:	f8d7 a010 	ldrcs.w	sl, [r7, #16]
 80130fa:	f04f 0a01 	movcc.w	sl, #1
 80130fe:	9202      	str	r2, [sp, #8]
 8013100:	ebb9 0c0a 	subs.w	ip, r9, sl
 8013104:	e9d7 8202 	ldrd	r8, r2, [r7, #8]
 8013108:	bf18      	it	ne
 801310a:	f04f 0c01 	movne.w	ip, #1
 801310e:	ebb5 0708 	subs.w	r7, r5, r8
 8013112:	9203      	str	r2, [sp, #12]
 8013114:	f3cb 2217 	ubfx	r2, fp, #8, #24
 8013118:	bf18      	it	ne
 801311a:	2701      	movne	r7, #1
 801311c:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
 8013120:	d31f      	bcc.n	8013162 <core_compute_offsets_in_bytes+0xa6>
 8013122:	1ba2      	subs	r2, r4, r6
 8013124:	6841      	ldr	r1, [r0, #4]
 8013126:	fab2 f282 	clz	r2, r2
 801312a:	0952      	lsrs	r2, r2, #5
 801312c:	604a      	str	r2, [r1, #4]
 801312e:	f8d0 b000 	ldr.w	fp, [r0]
 8013132:	f5bb 6fa0 	cmp.w	fp, #1280	; 0x500
 8013136:	f3cb 2217 	ubfx	r2, fp, #8, #24
 801313a:	d312      	bcc.n	8013162 <core_compute_offsets_in_bytes+0xa6>
 801313c:	9a01      	ldr	r2, [sp, #4]
 801313e:	45d1      	cmp	r9, sl
 8013140:	bf14      	ite	ne
 8013142:	2200      	movne	r2, #0
 8013144:	f002 0201 	andeq.w	r2, r2, #1
 8013148:	42b4      	cmp	r4, r6
 801314a:	bf14      	ite	ne
 801314c:	f04f 0900 	movne.w	r9, #0
 8013150:	f00c 0901 	andeq.w	r9, ip, #1
 8013154:	6846      	ldr	r6, [r0, #4]
 8013156:	fb04 2219 	mls	r2, r4, r9, r2
 801315a:	6132      	str	r2, [r6, #16]
 801315c:	6802      	ldr	r2, [r0, #0]
 801315e:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8013162:	2a02      	cmp	r2, #2
 8013164:	fb0e f607 	mul.w	r6, lr, r7
 8013168:	d90f      	bls.n	801318a <core_compute_offsets_in_bytes+0xce>
 801316a:	9a01      	ldr	r2, [sp, #4]
 801316c:	4545      	cmp	r5, r8
 801316e:	bf14      	ite	ne
 8013170:	2200      	movne	r2, #0
 8013172:	f002 0201 	andeq.w	r2, r2, #1
 8013176:	ea0c 0202 	and.w	r2, ip, r2
 801317a:	1b92      	subs	r2, r2, r6
 801317c:	fb04 240c 	mla	r4, r4, ip, r2
 8013180:	6842      	ldr	r2, [r0, #4]
 8013182:	6094      	str	r4, [r2, #8]
 8013184:	6802      	ldr	r2, [r0, #0]
 8013186:	f3c2 2217 	ubfx	r2, r2, #8, #24
 801318a:	e9dd 4102 	ldrd	r4, r1, [sp, #8]
 801318e:	428c      	cmp	r4, r1
 8013190:	d13f      	bne.n	8013212 <core_compute_offsets_in_bytes+0x156>
 8013192:	2f00      	cmp	r7, #0
 8013194:	d03d      	beq.n	8013212 <core_compute_offsets_in_bytes+0x156>
 8013196:	9901      	ldr	r1, [sp, #4]
 8013198:	ea01 010c 	and.w	r1, r1, ip
 801319c:	2a03      	cmp	r2, #3
 801319e:	d910      	bls.n	80131c2 <core_compute_offsets_in_bytes+0x106>
 80131a0:	fb0e f505 	mul.w	r5, lr, r5
 80131a4:	e9dd 2402 	ldrd	r2, r4, [sp, #8]
 80131a8:	ebb2 0c04 	subs.w	ip, r2, r4
 80131ac:	6842      	ldr	r2, [r0, #4]
 80131ae:	bf18      	it	ne
 80131b0:	f04f 0c01 	movne.w	ip, #1
 80131b4:	fb0c 1115 	mls	r1, ip, r5, r1
 80131b8:	440e      	add	r6, r1
 80131ba:	60d6      	str	r6, [r2, #12]
 80131bc:	6802      	ldr	r2, [r0, #0]
 80131be:	f3c2 2217 	ubfx	r2, r2, #8, #24
 80131c2:	2a01      	cmp	r2, #1
 80131c4:	d912      	bls.n	80131ec <core_compute_offsets_in_bytes+0x130>
 80131c6:	6841      	ldr	r1, [r0, #4]
 80131c8:	684a      	ldr	r2, [r1, #4]
 80131ca:	fb03 f202 	mul.w	r2, r3, r2
 80131ce:	604a      	str	r2, [r1, #4]
 80131d0:	6801      	ldr	r1, [r0, #0]
 80131d2:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 80131d6:	f3c1 2217 	ubfx	r2, r1, #8, #24
 80131da:	d307      	bcc.n	80131ec <core_compute_offsets_in_bytes+0x130>
 80131dc:	6841      	ldr	r1, [r0, #4]
 80131de:	690a      	ldr	r2, [r1, #16]
 80131e0:	fb03 f202 	mul.w	r2, r3, r2
 80131e4:	610a      	str	r2, [r1, #16]
 80131e6:	6802      	ldr	r2, [r0, #0]
 80131e8:	f3c2 2217 	ubfx	r2, r2, #8, #24
 80131ec:	2a02      	cmp	r2, #2
 80131ee:	d90d      	bls.n	801320c <core_compute_offsets_in_bytes+0x150>
 80131f0:	6841      	ldr	r1, [r0, #4]
 80131f2:	688a      	ldr	r2, [r1, #8]
 80131f4:	fb03 f202 	mul.w	r2, r3, r2
 80131f8:	608a      	str	r2, [r1, #8]
 80131fa:	6802      	ldr	r2, [r0, #0]
 80131fc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8013200:	d304      	bcc.n	801320c <core_compute_offsets_in_bytes+0x150>
 8013202:	6841      	ldr	r1, [r0, #4]
 8013204:	68ca      	ldr	r2, [r1, #12]
 8013206:	fb02 f303 	mul.w	r3, r2, r3
 801320a:	60cb      	str	r3, [r1, #12]
 801320c:	b005      	add	sp, #20
 801320e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013212:	2100      	movs	r1, #0
 8013214:	e7c2      	b.n	801319c <core_compute_offsets_in_bytes+0xe0>
 8013216:	46a6      	mov	lr, r4
 8013218:	f04f 0901 	mov.w	r9, #1
 801321c:	e763      	b.n	80130e6 <core_compute_offsets_in_bytes+0x2a>
 801321e:	bf00      	nop

08013220 <__errno>:
 8013220:	4b01      	ldr	r3, [pc, #4]	; (8013228 <__errno+0x8>)
 8013222:	6818      	ldr	r0, [r3, #0]
 8013224:	4770      	bx	lr
 8013226:	bf00      	nop
 8013228:	24002654 	.word	0x24002654

0801322c <__libc_init_array>:
 801322c:	b570      	push	{r4, r5, r6, lr}
 801322e:	4d0d      	ldr	r5, [pc, #52]	; (8013264 <__libc_init_array+0x38>)
 8013230:	4c0d      	ldr	r4, [pc, #52]	; (8013268 <__libc_init_array+0x3c>)
 8013232:	1b64      	subs	r4, r4, r5
 8013234:	10a4      	asrs	r4, r4, #2
 8013236:	2600      	movs	r6, #0
 8013238:	42a6      	cmp	r6, r4
 801323a:	d109      	bne.n	8013250 <__libc_init_array+0x24>
 801323c:	4d0b      	ldr	r5, [pc, #44]	; (801326c <__libc_init_array+0x40>)
 801323e:	4c0c      	ldr	r4, [pc, #48]	; (8013270 <__libc_init_array+0x44>)
 8013240:	f001 f9a4 	bl	801458c <_init>
 8013244:	1b64      	subs	r4, r4, r5
 8013246:	10a4      	asrs	r4, r4, #2
 8013248:	2600      	movs	r6, #0
 801324a:	42a6      	cmp	r6, r4
 801324c:	d105      	bne.n	801325a <__libc_init_array+0x2e>
 801324e:	bd70      	pop	{r4, r5, r6, pc}
 8013250:	f855 3b04 	ldr.w	r3, [r5], #4
 8013254:	4798      	blx	r3
 8013256:	3601      	adds	r6, #1
 8013258:	e7ee      	b.n	8013238 <__libc_init_array+0xc>
 801325a:	f855 3b04 	ldr.w	r3, [r5], #4
 801325e:	4798      	blx	r3
 8013260:	3601      	adds	r6, #1
 8013262:	e7f2      	b.n	801324a <__libc_init_array+0x1e>
 8013264:	08026c30 	.word	0x08026c30
 8013268:	08026c30 	.word	0x08026c30
 801326c:	08026c30 	.word	0x08026c30
 8013270:	08026c34 	.word	0x08026c34

08013274 <malloc>:
 8013274:	4b02      	ldr	r3, [pc, #8]	; (8013280 <malloc+0xc>)
 8013276:	4601      	mov	r1, r0
 8013278:	6818      	ldr	r0, [r3, #0]
 801327a:	f000 b885 	b.w	8013388 <_malloc_r>
 801327e:	bf00      	nop
 8013280:	24002654 	.word	0x24002654

08013284 <memcpy>:
 8013284:	440a      	add	r2, r1
 8013286:	4291      	cmp	r1, r2
 8013288:	f100 33ff 	add.w	r3, r0, #4294967295
 801328c:	d100      	bne.n	8013290 <memcpy+0xc>
 801328e:	4770      	bx	lr
 8013290:	b510      	push	{r4, lr}
 8013292:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013296:	f803 4f01 	strb.w	r4, [r3, #1]!
 801329a:	4291      	cmp	r1, r2
 801329c:	d1f9      	bne.n	8013292 <memcpy+0xe>
 801329e:	bd10      	pop	{r4, pc}

080132a0 <memset>:
 80132a0:	4402      	add	r2, r0
 80132a2:	4603      	mov	r3, r0
 80132a4:	4293      	cmp	r3, r2
 80132a6:	d100      	bne.n	80132aa <memset+0xa>
 80132a8:	4770      	bx	lr
 80132aa:	f803 1b01 	strb.w	r1, [r3], #1
 80132ae:	e7f9      	b.n	80132a4 <memset+0x4>

080132b0 <_free_r>:
 80132b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80132b2:	2900      	cmp	r1, #0
 80132b4:	d044      	beq.n	8013340 <_free_r+0x90>
 80132b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80132ba:	9001      	str	r0, [sp, #4]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	f1a1 0404 	sub.w	r4, r1, #4
 80132c2:	bfb8      	it	lt
 80132c4:	18e4      	addlt	r4, r4, r3
 80132c6:	f000 fd17 	bl	8013cf8 <__malloc_lock>
 80132ca:	4a1e      	ldr	r2, [pc, #120]	; (8013344 <_free_r+0x94>)
 80132cc:	9801      	ldr	r0, [sp, #4]
 80132ce:	6813      	ldr	r3, [r2, #0]
 80132d0:	b933      	cbnz	r3, 80132e0 <_free_r+0x30>
 80132d2:	6063      	str	r3, [r4, #4]
 80132d4:	6014      	str	r4, [r2, #0]
 80132d6:	b003      	add	sp, #12
 80132d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80132dc:	f000 bd12 	b.w	8013d04 <__malloc_unlock>
 80132e0:	42a3      	cmp	r3, r4
 80132e2:	d908      	bls.n	80132f6 <_free_r+0x46>
 80132e4:	6825      	ldr	r5, [r4, #0]
 80132e6:	1961      	adds	r1, r4, r5
 80132e8:	428b      	cmp	r3, r1
 80132ea:	bf01      	itttt	eq
 80132ec:	6819      	ldreq	r1, [r3, #0]
 80132ee:	685b      	ldreq	r3, [r3, #4]
 80132f0:	1949      	addeq	r1, r1, r5
 80132f2:	6021      	streq	r1, [r4, #0]
 80132f4:	e7ed      	b.n	80132d2 <_free_r+0x22>
 80132f6:	461a      	mov	r2, r3
 80132f8:	685b      	ldr	r3, [r3, #4]
 80132fa:	b10b      	cbz	r3, 8013300 <_free_r+0x50>
 80132fc:	42a3      	cmp	r3, r4
 80132fe:	d9fa      	bls.n	80132f6 <_free_r+0x46>
 8013300:	6811      	ldr	r1, [r2, #0]
 8013302:	1855      	adds	r5, r2, r1
 8013304:	42a5      	cmp	r5, r4
 8013306:	d10b      	bne.n	8013320 <_free_r+0x70>
 8013308:	6824      	ldr	r4, [r4, #0]
 801330a:	4421      	add	r1, r4
 801330c:	1854      	adds	r4, r2, r1
 801330e:	42a3      	cmp	r3, r4
 8013310:	6011      	str	r1, [r2, #0]
 8013312:	d1e0      	bne.n	80132d6 <_free_r+0x26>
 8013314:	681c      	ldr	r4, [r3, #0]
 8013316:	685b      	ldr	r3, [r3, #4]
 8013318:	6053      	str	r3, [r2, #4]
 801331a:	4421      	add	r1, r4
 801331c:	6011      	str	r1, [r2, #0]
 801331e:	e7da      	b.n	80132d6 <_free_r+0x26>
 8013320:	d902      	bls.n	8013328 <_free_r+0x78>
 8013322:	230c      	movs	r3, #12
 8013324:	6003      	str	r3, [r0, #0]
 8013326:	e7d6      	b.n	80132d6 <_free_r+0x26>
 8013328:	6825      	ldr	r5, [r4, #0]
 801332a:	1961      	adds	r1, r4, r5
 801332c:	428b      	cmp	r3, r1
 801332e:	bf04      	itt	eq
 8013330:	6819      	ldreq	r1, [r3, #0]
 8013332:	685b      	ldreq	r3, [r3, #4]
 8013334:	6063      	str	r3, [r4, #4]
 8013336:	bf04      	itt	eq
 8013338:	1949      	addeq	r1, r1, r5
 801333a:	6021      	streq	r1, [r4, #0]
 801333c:	6054      	str	r4, [r2, #4]
 801333e:	e7ca      	b.n	80132d6 <_free_r+0x26>
 8013340:	b003      	add	sp, #12
 8013342:	bd30      	pop	{r4, r5, pc}
 8013344:	2407db48 	.word	0x2407db48

08013348 <sbrk_aligned>:
 8013348:	b570      	push	{r4, r5, r6, lr}
 801334a:	4e0e      	ldr	r6, [pc, #56]	; (8013384 <sbrk_aligned+0x3c>)
 801334c:	460c      	mov	r4, r1
 801334e:	6831      	ldr	r1, [r6, #0]
 8013350:	4605      	mov	r5, r0
 8013352:	b911      	cbnz	r1, 801335a <sbrk_aligned+0x12>
 8013354:	f000 f91a 	bl	801358c <_sbrk_r>
 8013358:	6030      	str	r0, [r6, #0]
 801335a:	4621      	mov	r1, r4
 801335c:	4628      	mov	r0, r5
 801335e:	f000 f915 	bl	801358c <_sbrk_r>
 8013362:	1c43      	adds	r3, r0, #1
 8013364:	d00a      	beq.n	801337c <sbrk_aligned+0x34>
 8013366:	1cc4      	adds	r4, r0, #3
 8013368:	f024 0403 	bic.w	r4, r4, #3
 801336c:	42a0      	cmp	r0, r4
 801336e:	d007      	beq.n	8013380 <sbrk_aligned+0x38>
 8013370:	1a21      	subs	r1, r4, r0
 8013372:	4628      	mov	r0, r5
 8013374:	f000 f90a 	bl	801358c <_sbrk_r>
 8013378:	3001      	adds	r0, #1
 801337a:	d101      	bne.n	8013380 <sbrk_aligned+0x38>
 801337c:	f04f 34ff 	mov.w	r4, #4294967295
 8013380:	4620      	mov	r0, r4
 8013382:	bd70      	pop	{r4, r5, r6, pc}
 8013384:	2407db4c 	.word	0x2407db4c

08013388 <_malloc_r>:
 8013388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801338c:	1ccd      	adds	r5, r1, #3
 801338e:	f025 0503 	bic.w	r5, r5, #3
 8013392:	3508      	adds	r5, #8
 8013394:	2d0c      	cmp	r5, #12
 8013396:	bf38      	it	cc
 8013398:	250c      	movcc	r5, #12
 801339a:	2d00      	cmp	r5, #0
 801339c:	4607      	mov	r7, r0
 801339e:	db01      	blt.n	80133a4 <_malloc_r+0x1c>
 80133a0:	42a9      	cmp	r1, r5
 80133a2:	d905      	bls.n	80133b0 <_malloc_r+0x28>
 80133a4:	230c      	movs	r3, #12
 80133a6:	603b      	str	r3, [r7, #0]
 80133a8:	2600      	movs	r6, #0
 80133aa:	4630      	mov	r0, r6
 80133ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133b0:	4e2e      	ldr	r6, [pc, #184]	; (801346c <_malloc_r+0xe4>)
 80133b2:	f000 fca1 	bl	8013cf8 <__malloc_lock>
 80133b6:	6833      	ldr	r3, [r6, #0]
 80133b8:	461c      	mov	r4, r3
 80133ba:	bb34      	cbnz	r4, 801340a <_malloc_r+0x82>
 80133bc:	4629      	mov	r1, r5
 80133be:	4638      	mov	r0, r7
 80133c0:	f7ff ffc2 	bl	8013348 <sbrk_aligned>
 80133c4:	1c43      	adds	r3, r0, #1
 80133c6:	4604      	mov	r4, r0
 80133c8:	d14d      	bne.n	8013466 <_malloc_r+0xde>
 80133ca:	6834      	ldr	r4, [r6, #0]
 80133cc:	4626      	mov	r6, r4
 80133ce:	2e00      	cmp	r6, #0
 80133d0:	d140      	bne.n	8013454 <_malloc_r+0xcc>
 80133d2:	6823      	ldr	r3, [r4, #0]
 80133d4:	4631      	mov	r1, r6
 80133d6:	4638      	mov	r0, r7
 80133d8:	eb04 0803 	add.w	r8, r4, r3
 80133dc:	f000 f8d6 	bl	801358c <_sbrk_r>
 80133e0:	4580      	cmp	r8, r0
 80133e2:	d13a      	bne.n	801345a <_malloc_r+0xd2>
 80133e4:	6821      	ldr	r1, [r4, #0]
 80133e6:	3503      	adds	r5, #3
 80133e8:	1a6d      	subs	r5, r5, r1
 80133ea:	f025 0503 	bic.w	r5, r5, #3
 80133ee:	3508      	adds	r5, #8
 80133f0:	2d0c      	cmp	r5, #12
 80133f2:	bf38      	it	cc
 80133f4:	250c      	movcc	r5, #12
 80133f6:	4629      	mov	r1, r5
 80133f8:	4638      	mov	r0, r7
 80133fa:	f7ff ffa5 	bl	8013348 <sbrk_aligned>
 80133fe:	3001      	adds	r0, #1
 8013400:	d02b      	beq.n	801345a <_malloc_r+0xd2>
 8013402:	6823      	ldr	r3, [r4, #0]
 8013404:	442b      	add	r3, r5
 8013406:	6023      	str	r3, [r4, #0]
 8013408:	e00e      	b.n	8013428 <_malloc_r+0xa0>
 801340a:	6822      	ldr	r2, [r4, #0]
 801340c:	1b52      	subs	r2, r2, r5
 801340e:	d41e      	bmi.n	801344e <_malloc_r+0xc6>
 8013410:	2a0b      	cmp	r2, #11
 8013412:	d916      	bls.n	8013442 <_malloc_r+0xba>
 8013414:	1961      	adds	r1, r4, r5
 8013416:	42a3      	cmp	r3, r4
 8013418:	6025      	str	r5, [r4, #0]
 801341a:	bf18      	it	ne
 801341c:	6059      	strne	r1, [r3, #4]
 801341e:	6863      	ldr	r3, [r4, #4]
 8013420:	bf08      	it	eq
 8013422:	6031      	streq	r1, [r6, #0]
 8013424:	5162      	str	r2, [r4, r5]
 8013426:	604b      	str	r3, [r1, #4]
 8013428:	4638      	mov	r0, r7
 801342a:	f104 060b 	add.w	r6, r4, #11
 801342e:	f000 fc69 	bl	8013d04 <__malloc_unlock>
 8013432:	f026 0607 	bic.w	r6, r6, #7
 8013436:	1d23      	adds	r3, r4, #4
 8013438:	1af2      	subs	r2, r6, r3
 801343a:	d0b6      	beq.n	80133aa <_malloc_r+0x22>
 801343c:	1b9b      	subs	r3, r3, r6
 801343e:	50a3      	str	r3, [r4, r2]
 8013440:	e7b3      	b.n	80133aa <_malloc_r+0x22>
 8013442:	6862      	ldr	r2, [r4, #4]
 8013444:	42a3      	cmp	r3, r4
 8013446:	bf0c      	ite	eq
 8013448:	6032      	streq	r2, [r6, #0]
 801344a:	605a      	strne	r2, [r3, #4]
 801344c:	e7ec      	b.n	8013428 <_malloc_r+0xa0>
 801344e:	4623      	mov	r3, r4
 8013450:	6864      	ldr	r4, [r4, #4]
 8013452:	e7b2      	b.n	80133ba <_malloc_r+0x32>
 8013454:	4634      	mov	r4, r6
 8013456:	6876      	ldr	r6, [r6, #4]
 8013458:	e7b9      	b.n	80133ce <_malloc_r+0x46>
 801345a:	230c      	movs	r3, #12
 801345c:	603b      	str	r3, [r7, #0]
 801345e:	4638      	mov	r0, r7
 8013460:	f000 fc50 	bl	8013d04 <__malloc_unlock>
 8013464:	e7a1      	b.n	80133aa <_malloc_r+0x22>
 8013466:	6025      	str	r5, [r4, #0]
 8013468:	e7de      	b.n	8013428 <_malloc_r+0xa0>
 801346a:	bf00      	nop
 801346c:	2407db48 	.word	0x2407db48

08013470 <iprintf>:
 8013470:	b40f      	push	{r0, r1, r2, r3}
 8013472:	4b0a      	ldr	r3, [pc, #40]	; (801349c <iprintf+0x2c>)
 8013474:	b513      	push	{r0, r1, r4, lr}
 8013476:	681c      	ldr	r4, [r3, #0]
 8013478:	b124      	cbz	r4, 8013484 <iprintf+0x14>
 801347a:	69a3      	ldr	r3, [r4, #24]
 801347c:	b913      	cbnz	r3, 8013484 <iprintf+0x14>
 801347e:	4620      	mov	r0, r4
 8013480:	f000 fb34 	bl	8013aec <__sinit>
 8013484:	ab05      	add	r3, sp, #20
 8013486:	9a04      	ldr	r2, [sp, #16]
 8013488:	68a1      	ldr	r1, [r4, #8]
 801348a:	9301      	str	r3, [sp, #4]
 801348c:	4620      	mov	r0, r4
 801348e:	f000 fc69 	bl	8013d64 <_vfiprintf_r>
 8013492:	b002      	add	sp, #8
 8013494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013498:	b004      	add	sp, #16
 801349a:	4770      	bx	lr
 801349c:	24002654 	.word	0x24002654

080134a0 <_puts_r>:
 80134a0:	b570      	push	{r4, r5, r6, lr}
 80134a2:	460e      	mov	r6, r1
 80134a4:	4605      	mov	r5, r0
 80134a6:	b118      	cbz	r0, 80134b0 <_puts_r+0x10>
 80134a8:	6983      	ldr	r3, [r0, #24]
 80134aa:	b90b      	cbnz	r3, 80134b0 <_puts_r+0x10>
 80134ac:	f000 fb1e 	bl	8013aec <__sinit>
 80134b0:	69ab      	ldr	r3, [r5, #24]
 80134b2:	68ac      	ldr	r4, [r5, #8]
 80134b4:	b913      	cbnz	r3, 80134bc <_puts_r+0x1c>
 80134b6:	4628      	mov	r0, r5
 80134b8:	f000 fb18 	bl	8013aec <__sinit>
 80134bc:	4b2c      	ldr	r3, [pc, #176]	; (8013570 <_puts_r+0xd0>)
 80134be:	429c      	cmp	r4, r3
 80134c0:	d120      	bne.n	8013504 <_puts_r+0x64>
 80134c2:	686c      	ldr	r4, [r5, #4]
 80134c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80134c6:	07db      	lsls	r3, r3, #31
 80134c8:	d405      	bmi.n	80134d6 <_puts_r+0x36>
 80134ca:	89a3      	ldrh	r3, [r4, #12]
 80134cc:	0598      	lsls	r0, r3, #22
 80134ce:	d402      	bmi.n	80134d6 <_puts_r+0x36>
 80134d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80134d2:	f000 fba9 	bl	8013c28 <__retarget_lock_acquire_recursive>
 80134d6:	89a3      	ldrh	r3, [r4, #12]
 80134d8:	0719      	lsls	r1, r3, #28
 80134da:	d51d      	bpl.n	8013518 <_puts_r+0x78>
 80134dc:	6923      	ldr	r3, [r4, #16]
 80134de:	b1db      	cbz	r3, 8013518 <_puts_r+0x78>
 80134e0:	3e01      	subs	r6, #1
 80134e2:	68a3      	ldr	r3, [r4, #8]
 80134e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80134e8:	3b01      	subs	r3, #1
 80134ea:	60a3      	str	r3, [r4, #8]
 80134ec:	bb39      	cbnz	r1, 801353e <_puts_r+0x9e>
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	da38      	bge.n	8013564 <_puts_r+0xc4>
 80134f2:	4622      	mov	r2, r4
 80134f4:	210a      	movs	r1, #10
 80134f6:	4628      	mov	r0, r5
 80134f8:	f000 f91e 	bl	8013738 <__swbuf_r>
 80134fc:	3001      	adds	r0, #1
 80134fe:	d011      	beq.n	8013524 <_puts_r+0x84>
 8013500:	250a      	movs	r5, #10
 8013502:	e011      	b.n	8013528 <_puts_r+0x88>
 8013504:	4b1b      	ldr	r3, [pc, #108]	; (8013574 <_puts_r+0xd4>)
 8013506:	429c      	cmp	r4, r3
 8013508:	d101      	bne.n	801350e <_puts_r+0x6e>
 801350a:	68ac      	ldr	r4, [r5, #8]
 801350c:	e7da      	b.n	80134c4 <_puts_r+0x24>
 801350e:	4b1a      	ldr	r3, [pc, #104]	; (8013578 <_puts_r+0xd8>)
 8013510:	429c      	cmp	r4, r3
 8013512:	bf08      	it	eq
 8013514:	68ec      	ldreq	r4, [r5, #12]
 8013516:	e7d5      	b.n	80134c4 <_puts_r+0x24>
 8013518:	4621      	mov	r1, r4
 801351a:	4628      	mov	r0, r5
 801351c:	f000 f95e 	bl	80137dc <__swsetup_r>
 8013520:	2800      	cmp	r0, #0
 8013522:	d0dd      	beq.n	80134e0 <_puts_r+0x40>
 8013524:	f04f 35ff 	mov.w	r5, #4294967295
 8013528:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801352a:	07da      	lsls	r2, r3, #31
 801352c:	d405      	bmi.n	801353a <_puts_r+0x9a>
 801352e:	89a3      	ldrh	r3, [r4, #12]
 8013530:	059b      	lsls	r3, r3, #22
 8013532:	d402      	bmi.n	801353a <_puts_r+0x9a>
 8013534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013536:	f000 fb78 	bl	8013c2a <__retarget_lock_release_recursive>
 801353a:	4628      	mov	r0, r5
 801353c:	bd70      	pop	{r4, r5, r6, pc}
 801353e:	2b00      	cmp	r3, #0
 8013540:	da04      	bge.n	801354c <_puts_r+0xac>
 8013542:	69a2      	ldr	r2, [r4, #24]
 8013544:	429a      	cmp	r2, r3
 8013546:	dc06      	bgt.n	8013556 <_puts_r+0xb6>
 8013548:	290a      	cmp	r1, #10
 801354a:	d004      	beq.n	8013556 <_puts_r+0xb6>
 801354c:	6823      	ldr	r3, [r4, #0]
 801354e:	1c5a      	adds	r2, r3, #1
 8013550:	6022      	str	r2, [r4, #0]
 8013552:	7019      	strb	r1, [r3, #0]
 8013554:	e7c5      	b.n	80134e2 <_puts_r+0x42>
 8013556:	4622      	mov	r2, r4
 8013558:	4628      	mov	r0, r5
 801355a:	f000 f8ed 	bl	8013738 <__swbuf_r>
 801355e:	3001      	adds	r0, #1
 8013560:	d1bf      	bne.n	80134e2 <_puts_r+0x42>
 8013562:	e7df      	b.n	8013524 <_puts_r+0x84>
 8013564:	6823      	ldr	r3, [r4, #0]
 8013566:	250a      	movs	r5, #10
 8013568:	1c5a      	adds	r2, r3, #1
 801356a:	6022      	str	r2, [r4, #0]
 801356c:	701d      	strb	r5, [r3, #0]
 801356e:	e7db      	b.n	8013528 <_puts_r+0x88>
 8013570:	08026a6c 	.word	0x08026a6c
 8013574:	08026a8c 	.word	0x08026a8c
 8013578:	08026a4c 	.word	0x08026a4c

0801357c <puts>:
 801357c:	4b02      	ldr	r3, [pc, #8]	; (8013588 <puts+0xc>)
 801357e:	4601      	mov	r1, r0
 8013580:	6818      	ldr	r0, [r3, #0]
 8013582:	f7ff bf8d 	b.w	80134a0 <_puts_r>
 8013586:	bf00      	nop
 8013588:	24002654 	.word	0x24002654

0801358c <_sbrk_r>:
 801358c:	b538      	push	{r3, r4, r5, lr}
 801358e:	4d06      	ldr	r5, [pc, #24]	; (80135a8 <_sbrk_r+0x1c>)
 8013590:	2300      	movs	r3, #0
 8013592:	4604      	mov	r4, r0
 8013594:	4608      	mov	r0, r1
 8013596:	602b      	str	r3, [r5, #0]
 8013598:	f7f0 ff1c 	bl	80043d4 <_sbrk>
 801359c:	1c43      	adds	r3, r0, #1
 801359e:	d102      	bne.n	80135a6 <_sbrk_r+0x1a>
 80135a0:	682b      	ldr	r3, [r5, #0]
 80135a2:	b103      	cbz	r3, 80135a6 <_sbrk_r+0x1a>
 80135a4:	6023      	str	r3, [r4, #0]
 80135a6:	bd38      	pop	{r3, r4, r5, pc}
 80135a8:	2407db54 	.word	0x2407db54

080135ac <setvbuf>:
 80135ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80135b0:	461d      	mov	r5, r3
 80135b2:	4b5d      	ldr	r3, [pc, #372]	; (8013728 <setvbuf+0x17c>)
 80135b4:	681f      	ldr	r7, [r3, #0]
 80135b6:	4604      	mov	r4, r0
 80135b8:	460e      	mov	r6, r1
 80135ba:	4690      	mov	r8, r2
 80135bc:	b127      	cbz	r7, 80135c8 <setvbuf+0x1c>
 80135be:	69bb      	ldr	r3, [r7, #24]
 80135c0:	b913      	cbnz	r3, 80135c8 <setvbuf+0x1c>
 80135c2:	4638      	mov	r0, r7
 80135c4:	f000 fa92 	bl	8013aec <__sinit>
 80135c8:	4b58      	ldr	r3, [pc, #352]	; (801372c <setvbuf+0x180>)
 80135ca:	429c      	cmp	r4, r3
 80135cc:	d167      	bne.n	801369e <setvbuf+0xf2>
 80135ce:	687c      	ldr	r4, [r7, #4]
 80135d0:	f1b8 0f02 	cmp.w	r8, #2
 80135d4:	d006      	beq.n	80135e4 <setvbuf+0x38>
 80135d6:	f1b8 0f01 	cmp.w	r8, #1
 80135da:	f200 809f 	bhi.w	801371c <setvbuf+0x170>
 80135de:	2d00      	cmp	r5, #0
 80135e0:	f2c0 809c 	blt.w	801371c <setvbuf+0x170>
 80135e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80135e6:	07db      	lsls	r3, r3, #31
 80135e8:	d405      	bmi.n	80135f6 <setvbuf+0x4a>
 80135ea:	89a3      	ldrh	r3, [r4, #12]
 80135ec:	0598      	lsls	r0, r3, #22
 80135ee:	d402      	bmi.n	80135f6 <setvbuf+0x4a>
 80135f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80135f2:	f000 fb19 	bl	8013c28 <__retarget_lock_acquire_recursive>
 80135f6:	4621      	mov	r1, r4
 80135f8:	4638      	mov	r0, r7
 80135fa:	f000 f9e3 	bl	80139c4 <_fflush_r>
 80135fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013600:	b141      	cbz	r1, 8013614 <setvbuf+0x68>
 8013602:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013606:	4299      	cmp	r1, r3
 8013608:	d002      	beq.n	8013610 <setvbuf+0x64>
 801360a:	4638      	mov	r0, r7
 801360c:	f7ff fe50 	bl	80132b0 <_free_r>
 8013610:	2300      	movs	r3, #0
 8013612:	6363      	str	r3, [r4, #52]	; 0x34
 8013614:	2300      	movs	r3, #0
 8013616:	61a3      	str	r3, [r4, #24]
 8013618:	6063      	str	r3, [r4, #4]
 801361a:	89a3      	ldrh	r3, [r4, #12]
 801361c:	0619      	lsls	r1, r3, #24
 801361e:	d503      	bpl.n	8013628 <setvbuf+0x7c>
 8013620:	6921      	ldr	r1, [r4, #16]
 8013622:	4638      	mov	r0, r7
 8013624:	f7ff fe44 	bl	80132b0 <_free_r>
 8013628:	89a3      	ldrh	r3, [r4, #12]
 801362a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 801362e:	f023 0303 	bic.w	r3, r3, #3
 8013632:	f1b8 0f02 	cmp.w	r8, #2
 8013636:	81a3      	strh	r3, [r4, #12]
 8013638:	d06c      	beq.n	8013714 <setvbuf+0x168>
 801363a:	ab01      	add	r3, sp, #4
 801363c:	466a      	mov	r2, sp
 801363e:	4621      	mov	r1, r4
 8013640:	4638      	mov	r0, r7
 8013642:	f000 faf3 	bl	8013c2c <__swhatbuf_r>
 8013646:	89a3      	ldrh	r3, [r4, #12]
 8013648:	4318      	orrs	r0, r3
 801364a:	81a0      	strh	r0, [r4, #12]
 801364c:	2d00      	cmp	r5, #0
 801364e:	d130      	bne.n	80136b2 <setvbuf+0x106>
 8013650:	9d00      	ldr	r5, [sp, #0]
 8013652:	4628      	mov	r0, r5
 8013654:	f7ff fe0e 	bl	8013274 <malloc>
 8013658:	4606      	mov	r6, r0
 801365a:	2800      	cmp	r0, #0
 801365c:	d155      	bne.n	801370a <setvbuf+0x15e>
 801365e:	f8dd 9000 	ldr.w	r9, [sp]
 8013662:	45a9      	cmp	r9, r5
 8013664:	d14a      	bne.n	80136fc <setvbuf+0x150>
 8013666:	f04f 35ff 	mov.w	r5, #4294967295
 801366a:	2200      	movs	r2, #0
 801366c:	60a2      	str	r2, [r4, #8]
 801366e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8013672:	6022      	str	r2, [r4, #0]
 8013674:	6122      	str	r2, [r4, #16]
 8013676:	2201      	movs	r2, #1
 8013678:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801367c:	6162      	str	r2, [r4, #20]
 801367e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013680:	f043 0302 	orr.w	r3, r3, #2
 8013684:	07d2      	lsls	r2, r2, #31
 8013686:	81a3      	strh	r3, [r4, #12]
 8013688:	d405      	bmi.n	8013696 <setvbuf+0xea>
 801368a:	f413 7f00 	tst.w	r3, #512	; 0x200
 801368e:	d102      	bne.n	8013696 <setvbuf+0xea>
 8013690:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013692:	f000 faca 	bl	8013c2a <__retarget_lock_release_recursive>
 8013696:	4628      	mov	r0, r5
 8013698:	b003      	add	sp, #12
 801369a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801369e:	4b24      	ldr	r3, [pc, #144]	; (8013730 <setvbuf+0x184>)
 80136a0:	429c      	cmp	r4, r3
 80136a2:	d101      	bne.n	80136a8 <setvbuf+0xfc>
 80136a4:	68bc      	ldr	r4, [r7, #8]
 80136a6:	e793      	b.n	80135d0 <setvbuf+0x24>
 80136a8:	4b22      	ldr	r3, [pc, #136]	; (8013734 <setvbuf+0x188>)
 80136aa:	429c      	cmp	r4, r3
 80136ac:	bf08      	it	eq
 80136ae:	68fc      	ldreq	r4, [r7, #12]
 80136b0:	e78e      	b.n	80135d0 <setvbuf+0x24>
 80136b2:	2e00      	cmp	r6, #0
 80136b4:	d0cd      	beq.n	8013652 <setvbuf+0xa6>
 80136b6:	69bb      	ldr	r3, [r7, #24]
 80136b8:	b913      	cbnz	r3, 80136c0 <setvbuf+0x114>
 80136ba:	4638      	mov	r0, r7
 80136bc:	f000 fa16 	bl	8013aec <__sinit>
 80136c0:	f1b8 0f01 	cmp.w	r8, #1
 80136c4:	bf08      	it	eq
 80136c6:	89a3      	ldrheq	r3, [r4, #12]
 80136c8:	6026      	str	r6, [r4, #0]
 80136ca:	bf04      	itt	eq
 80136cc:	f043 0301 	orreq.w	r3, r3, #1
 80136d0:	81a3      	strheq	r3, [r4, #12]
 80136d2:	89a2      	ldrh	r2, [r4, #12]
 80136d4:	f012 0308 	ands.w	r3, r2, #8
 80136d8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80136dc:	d01c      	beq.n	8013718 <setvbuf+0x16c>
 80136de:	07d3      	lsls	r3, r2, #31
 80136e0:	bf41      	itttt	mi
 80136e2:	2300      	movmi	r3, #0
 80136e4:	426d      	negmi	r5, r5
 80136e6:	60a3      	strmi	r3, [r4, #8]
 80136e8:	61a5      	strmi	r5, [r4, #24]
 80136ea:	bf58      	it	pl
 80136ec:	60a5      	strpl	r5, [r4, #8]
 80136ee:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80136f0:	f015 0501 	ands.w	r5, r5, #1
 80136f4:	d115      	bne.n	8013722 <setvbuf+0x176>
 80136f6:	f412 7f00 	tst.w	r2, #512	; 0x200
 80136fa:	e7c8      	b.n	801368e <setvbuf+0xe2>
 80136fc:	4648      	mov	r0, r9
 80136fe:	f7ff fdb9 	bl	8013274 <malloc>
 8013702:	4606      	mov	r6, r0
 8013704:	2800      	cmp	r0, #0
 8013706:	d0ae      	beq.n	8013666 <setvbuf+0xba>
 8013708:	464d      	mov	r5, r9
 801370a:	89a3      	ldrh	r3, [r4, #12]
 801370c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013710:	81a3      	strh	r3, [r4, #12]
 8013712:	e7d0      	b.n	80136b6 <setvbuf+0x10a>
 8013714:	2500      	movs	r5, #0
 8013716:	e7a8      	b.n	801366a <setvbuf+0xbe>
 8013718:	60a3      	str	r3, [r4, #8]
 801371a:	e7e8      	b.n	80136ee <setvbuf+0x142>
 801371c:	f04f 35ff 	mov.w	r5, #4294967295
 8013720:	e7b9      	b.n	8013696 <setvbuf+0xea>
 8013722:	2500      	movs	r5, #0
 8013724:	e7b7      	b.n	8013696 <setvbuf+0xea>
 8013726:	bf00      	nop
 8013728:	24002654 	.word	0x24002654
 801372c:	08026a6c 	.word	0x08026a6c
 8013730:	08026a8c 	.word	0x08026a8c
 8013734:	08026a4c 	.word	0x08026a4c

08013738 <__swbuf_r>:
 8013738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801373a:	460e      	mov	r6, r1
 801373c:	4614      	mov	r4, r2
 801373e:	4605      	mov	r5, r0
 8013740:	b118      	cbz	r0, 801374a <__swbuf_r+0x12>
 8013742:	6983      	ldr	r3, [r0, #24]
 8013744:	b90b      	cbnz	r3, 801374a <__swbuf_r+0x12>
 8013746:	f000 f9d1 	bl	8013aec <__sinit>
 801374a:	4b21      	ldr	r3, [pc, #132]	; (80137d0 <__swbuf_r+0x98>)
 801374c:	429c      	cmp	r4, r3
 801374e:	d12b      	bne.n	80137a8 <__swbuf_r+0x70>
 8013750:	686c      	ldr	r4, [r5, #4]
 8013752:	69a3      	ldr	r3, [r4, #24]
 8013754:	60a3      	str	r3, [r4, #8]
 8013756:	89a3      	ldrh	r3, [r4, #12]
 8013758:	071a      	lsls	r2, r3, #28
 801375a:	d52f      	bpl.n	80137bc <__swbuf_r+0x84>
 801375c:	6923      	ldr	r3, [r4, #16]
 801375e:	b36b      	cbz	r3, 80137bc <__swbuf_r+0x84>
 8013760:	6923      	ldr	r3, [r4, #16]
 8013762:	6820      	ldr	r0, [r4, #0]
 8013764:	1ac0      	subs	r0, r0, r3
 8013766:	6963      	ldr	r3, [r4, #20]
 8013768:	b2f6      	uxtb	r6, r6
 801376a:	4283      	cmp	r3, r0
 801376c:	4637      	mov	r7, r6
 801376e:	dc04      	bgt.n	801377a <__swbuf_r+0x42>
 8013770:	4621      	mov	r1, r4
 8013772:	4628      	mov	r0, r5
 8013774:	f000 f926 	bl	80139c4 <_fflush_r>
 8013778:	bb30      	cbnz	r0, 80137c8 <__swbuf_r+0x90>
 801377a:	68a3      	ldr	r3, [r4, #8]
 801377c:	3b01      	subs	r3, #1
 801377e:	60a3      	str	r3, [r4, #8]
 8013780:	6823      	ldr	r3, [r4, #0]
 8013782:	1c5a      	adds	r2, r3, #1
 8013784:	6022      	str	r2, [r4, #0]
 8013786:	701e      	strb	r6, [r3, #0]
 8013788:	6963      	ldr	r3, [r4, #20]
 801378a:	3001      	adds	r0, #1
 801378c:	4283      	cmp	r3, r0
 801378e:	d004      	beq.n	801379a <__swbuf_r+0x62>
 8013790:	89a3      	ldrh	r3, [r4, #12]
 8013792:	07db      	lsls	r3, r3, #31
 8013794:	d506      	bpl.n	80137a4 <__swbuf_r+0x6c>
 8013796:	2e0a      	cmp	r6, #10
 8013798:	d104      	bne.n	80137a4 <__swbuf_r+0x6c>
 801379a:	4621      	mov	r1, r4
 801379c:	4628      	mov	r0, r5
 801379e:	f000 f911 	bl	80139c4 <_fflush_r>
 80137a2:	b988      	cbnz	r0, 80137c8 <__swbuf_r+0x90>
 80137a4:	4638      	mov	r0, r7
 80137a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80137a8:	4b0a      	ldr	r3, [pc, #40]	; (80137d4 <__swbuf_r+0x9c>)
 80137aa:	429c      	cmp	r4, r3
 80137ac:	d101      	bne.n	80137b2 <__swbuf_r+0x7a>
 80137ae:	68ac      	ldr	r4, [r5, #8]
 80137b0:	e7cf      	b.n	8013752 <__swbuf_r+0x1a>
 80137b2:	4b09      	ldr	r3, [pc, #36]	; (80137d8 <__swbuf_r+0xa0>)
 80137b4:	429c      	cmp	r4, r3
 80137b6:	bf08      	it	eq
 80137b8:	68ec      	ldreq	r4, [r5, #12]
 80137ba:	e7ca      	b.n	8013752 <__swbuf_r+0x1a>
 80137bc:	4621      	mov	r1, r4
 80137be:	4628      	mov	r0, r5
 80137c0:	f000 f80c 	bl	80137dc <__swsetup_r>
 80137c4:	2800      	cmp	r0, #0
 80137c6:	d0cb      	beq.n	8013760 <__swbuf_r+0x28>
 80137c8:	f04f 37ff 	mov.w	r7, #4294967295
 80137cc:	e7ea      	b.n	80137a4 <__swbuf_r+0x6c>
 80137ce:	bf00      	nop
 80137d0:	08026a6c 	.word	0x08026a6c
 80137d4:	08026a8c 	.word	0x08026a8c
 80137d8:	08026a4c 	.word	0x08026a4c

080137dc <__swsetup_r>:
 80137dc:	4b32      	ldr	r3, [pc, #200]	; (80138a8 <__swsetup_r+0xcc>)
 80137de:	b570      	push	{r4, r5, r6, lr}
 80137e0:	681d      	ldr	r5, [r3, #0]
 80137e2:	4606      	mov	r6, r0
 80137e4:	460c      	mov	r4, r1
 80137e6:	b125      	cbz	r5, 80137f2 <__swsetup_r+0x16>
 80137e8:	69ab      	ldr	r3, [r5, #24]
 80137ea:	b913      	cbnz	r3, 80137f2 <__swsetup_r+0x16>
 80137ec:	4628      	mov	r0, r5
 80137ee:	f000 f97d 	bl	8013aec <__sinit>
 80137f2:	4b2e      	ldr	r3, [pc, #184]	; (80138ac <__swsetup_r+0xd0>)
 80137f4:	429c      	cmp	r4, r3
 80137f6:	d10f      	bne.n	8013818 <__swsetup_r+0x3c>
 80137f8:	686c      	ldr	r4, [r5, #4]
 80137fa:	89a3      	ldrh	r3, [r4, #12]
 80137fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013800:	0719      	lsls	r1, r3, #28
 8013802:	d42c      	bmi.n	801385e <__swsetup_r+0x82>
 8013804:	06dd      	lsls	r5, r3, #27
 8013806:	d411      	bmi.n	801382c <__swsetup_r+0x50>
 8013808:	2309      	movs	r3, #9
 801380a:	6033      	str	r3, [r6, #0]
 801380c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013810:	81a3      	strh	r3, [r4, #12]
 8013812:	f04f 30ff 	mov.w	r0, #4294967295
 8013816:	e03e      	b.n	8013896 <__swsetup_r+0xba>
 8013818:	4b25      	ldr	r3, [pc, #148]	; (80138b0 <__swsetup_r+0xd4>)
 801381a:	429c      	cmp	r4, r3
 801381c:	d101      	bne.n	8013822 <__swsetup_r+0x46>
 801381e:	68ac      	ldr	r4, [r5, #8]
 8013820:	e7eb      	b.n	80137fa <__swsetup_r+0x1e>
 8013822:	4b24      	ldr	r3, [pc, #144]	; (80138b4 <__swsetup_r+0xd8>)
 8013824:	429c      	cmp	r4, r3
 8013826:	bf08      	it	eq
 8013828:	68ec      	ldreq	r4, [r5, #12]
 801382a:	e7e6      	b.n	80137fa <__swsetup_r+0x1e>
 801382c:	0758      	lsls	r0, r3, #29
 801382e:	d512      	bpl.n	8013856 <__swsetup_r+0x7a>
 8013830:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013832:	b141      	cbz	r1, 8013846 <__swsetup_r+0x6a>
 8013834:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013838:	4299      	cmp	r1, r3
 801383a:	d002      	beq.n	8013842 <__swsetup_r+0x66>
 801383c:	4630      	mov	r0, r6
 801383e:	f7ff fd37 	bl	80132b0 <_free_r>
 8013842:	2300      	movs	r3, #0
 8013844:	6363      	str	r3, [r4, #52]	; 0x34
 8013846:	89a3      	ldrh	r3, [r4, #12]
 8013848:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801384c:	81a3      	strh	r3, [r4, #12]
 801384e:	2300      	movs	r3, #0
 8013850:	6063      	str	r3, [r4, #4]
 8013852:	6923      	ldr	r3, [r4, #16]
 8013854:	6023      	str	r3, [r4, #0]
 8013856:	89a3      	ldrh	r3, [r4, #12]
 8013858:	f043 0308 	orr.w	r3, r3, #8
 801385c:	81a3      	strh	r3, [r4, #12]
 801385e:	6923      	ldr	r3, [r4, #16]
 8013860:	b94b      	cbnz	r3, 8013876 <__swsetup_r+0x9a>
 8013862:	89a3      	ldrh	r3, [r4, #12]
 8013864:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801386c:	d003      	beq.n	8013876 <__swsetup_r+0x9a>
 801386e:	4621      	mov	r1, r4
 8013870:	4630      	mov	r0, r6
 8013872:	f000 fa01 	bl	8013c78 <__smakebuf_r>
 8013876:	89a0      	ldrh	r0, [r4, #12]
 8013878:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801387c:	f010 0301 	ands.w	r3, r0, #1
 8013880:	d00a      	beq.n	8013898 <__swsetup_r+0xbc>
 8013882:	2300      	movs	r3, #0
 8013884:	60a3      	str	r3, [r4, #8]
 8013886:	6963      	ldr	r3, [r4, #20]
 8013888:	425b      	negs	r3, r3
 801388a:	61a3      	str	r3, [r4, #24]
 801388c:	6923      	ldr	r3, [r4, #16]
 801388e:	b943      	cbnz	r3, 80138a2 <__swsetup_r+0xc6>
 8013890:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013894:	d1ba      	bne.n	801380c <__swsetup_r+0x30>
 8013896:	bd70      	pop	{r4, r5, r6, pc}
 8013898:	0781      	lsls	r1, r0, #30
 801389a:	bf58      	it	pl
 801389c:	6963      	ldrpl	r3, [r4, #20]
 801389e:	60a3      	str	r3, [r4, #8]
 80138a0:	e7f4      	b.n	801388c <__swsetup_r+0xb0>
 80138a2:	2000      	movs	r0, #0
 80138a4:	e7f7      	b.n	8013896 <__swsetup_r+0xba>
 80138a6:	bf00      	nop
 80138a8:	24002654 	.word	0x24002654
 80138ac:	08026a6c 	.word	0x08026a6c
 80138b0:	08026a8c 	.word	0x08026a8c
 80138b4:	08026a4c 	.word	0x08026a4c

080138b8 <__sflush_r>:
 80138b8:	898a      	ldrh	r2, [r1, #12]
 80138ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138be:	4605      	mov	r5, r0
 80138c0:	0710      	lsls	r0, r2, #28
 80138c2:	460c      	mov	r4, r1
 80138c4:	d458      	bmi.n	8013978 <__sflush_r+0xc0>
 80138c6:	684b      	ldr	r3, [r1, #4]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	dc05      	bgt.n	80138d8 <__sflush_r+0x20>
 80138cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	dc02      	bgt.n	80138d8 <__sflush_r+0x20>
 80138d2:	2000      	movs	r0, #0
 80138d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80138da:	2e00      	cmp	r6, #0
 80138dc:	d0f9      	beq.n	80138d2 <__sflush_r+0x1a>
 80138de:	2300      	movs	r3, #0
 80138e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80138e4:	682f      	ldr	r7, [r5, #0]
 80138e6:	602b      	str	r3, [r5, #0]
 80138e8:	d032      	beq.n	8013950 <__sflush_r+0x98>
 80138ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80138ec:	89a3      	ldrh	r3, [r4, #12]
 80138ee:	075a      	lsls	r2, r3, #29
 80138f0:	d505      	bpl.n	80138fe <__sflush_r+0x46>
 80138f2:	6863      	ldr	r3, [r4, #4]
 80138f4:	1ac0      	subs	r0, r0, r3
 80138f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80138f8:	b10b      	cbz	r3, 80138fe <__sflush_r+0x46>
 80138fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80138fc:	1ac0      	subs	r0, r0, r3
 80138fe:	2300      	movs	r3, #0
 8013900:	4602      	mov	r2, r0
 8013902:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013904:	6a21      	ldr	r1, [r4, #32]
 8013906:	4628      	mov	r0, r5
 8013908:	47b0      	blx	r6
 801390a:	1c43      	adds	r3, r0, #1
 801390c:	89a3      	ldrh	r3, [r4, #12]
 801390e:	d106      	bne.n	801391e <__sflush_r+0x66>
 8013910:	6829      	ldr	r1, [r5, #0]
 8013912:	291d      	cmp	r1, #29
 8013914:	d82c      	bhi.n	8013970 <__sflush_r+0xb8>
 8013916:	4a2a      	ldr	r2, [pc, #168]	; (80139c0 <__sflush_r+0x108>)
 8013918:	40ca      	lsrs	r2, r1
 801391a:	07d6      	lsls	r6, r2, #31
 801391c:	d528      	bpl.n	8013970 <__sflush_r+0xb8>
 801391e:	2200      	movs	r2, #0
 8013920:	6062      	str	r2, [r4, #4]
 8013922:	04d9      	lsls	r1, r3, #19
 8013924:	6922      	ldr	r2, [r4, #16]
 8013926:	6022      	str	r2, [r4, #0]
 8013928:	d504      	bpl.n	8013934 <__sflush_r+0x7c>
 801392a:	1c42      	adds	r2, r0, #1
 801392c:	d101      	bne.n	8013932 <__sflush_r+0x7a>
 801392e:	682b      	ldr	r3, [r5, #0]
 8013930:	b903      	cbnz	r3, 8013934 <__sflush_r+0x7c>
 8013932:	6560      	str	r0, [r4, #84]	; 0x54
 8013934:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013936:	602f      	str	r7, [r5, #0]
 8013938:	2900      	cmp	r1, #0
 801393a:	d0ca      	beq.n	80138d2 <__sflush_r+0x1a>
 801393c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013940:	4299      	cmp	r1, r3
 8013942:	d002      	beq.n	801394a <__sflush_r+0x92>
 8013944:	4628      	mov	r0, r5
 8013946:	f7ff fcb3 	bl	80132b0 <_free_r>
 801394a:	2000      	movs	r0, #0
 801394c:	6360      	str	r0, [r4, #52]	; 0x34
 801394e:	e7c1      	b.n	80138d4 <__sflush_r+0x1c>
 8013950:	6a21      	ldr	r1, [r4, #32]
 8013952:	2301      	movs	r3, #1
 8013954:	4628      	mov	r0, r5
 8013956:	47b0      	blx	r6
 8013958:	1c41      	adds	r1, r0, #1
 801395a:	d1c7      	bne.n	80138ec <__sflush_r+0x34>
 801395c:	682b      	ldr	r3, [r5, #0]
 801395e:	2b00      	cmp	r3, #0
 8013960:	d0c4      	beq.n	80138ec <__sflush_r+0x34>
 8013962:	2b1d      	cmp	r3, #29
 8013964:	d001      	beq.n	801396a <__sflush_r+0xb2>
 8013966:	2b16      	cmp	r3, #22
 8013968:	d101      	bne.n	801396e <__sflush_r+0xb6>
 801396a:	602f      	str	r7, [r5, #0]
 801396c:	e7b1      	b.n	80138d2 <__sflush_r+0x1a>
 801396e:	89a3      	ldrh	r3, [r4, #12]
 8013970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013974:	81a3      	strh	r3, [r4, #12]
 8013976:	e7ad      	b.n	80138d4 <__sflush_r+0x1c>
 8013978:	690f      	ldr	r7, [r1, #16]
 801397a:	2f00      	cmp	r7, #0
 801397c:	d0a9      	beq.n	80138d2 <__sflush_r+0x1a>
 801397e:	0793      	lsls	r3, r2, #30
 8013980:	680e      	ldr	r6, [r1, #0]
 8013982:	bf08      	it	eq
 8013984:	694b      	ldreq	r3, [r1, #20]
 8013986:	600f      	str	r7, [r1, #0]
 8013988:	bf18      	it	ne
 801398a:	2300      	movne	r3, #0
 801398c:	eba6 0807 	sub.w	r8, r6, r7
 8013990:	608b      	str	r3, [r1, #8]
 8013992:	f1b8 0f00 	cmp.w	r8, #0
 8013996:	dd9c      	ble.n	80138d2 <__sflush_r+0x1a>
 8013998:	6a21      	ldr	r1, [r4, #32]
 801399a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801399c:	4643      	mov	r3, r8
 801399e:	463a      	mov	r2, r7
 80139a0:	4628      	mov	r0, r5
 80139a2:	47b0      	blx	r6
 80139a4:	2800      	cmp	r0, #0
 80139a6:	dc06      	bgt.n	80139b6 <__sflush_r+0xfe>
 80139a8:	89a3      	ldrh	r3, [r4, #12]
 80139aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80139ae:	81a3      	strh	r3, [r4, #12]
 80139b0:	f04f 30ff 	mov.w	r0, #4294967295
 80139b4:	e78e      	b.n	80138d4 <__sflush_r+0x1c>
 80139b6:	4407      	add	r7, r0
 80139b8:	eba8 0800 	sub.w	r8, r8, r0
 80139bc:	e7e9      	b.n	8013992 <__sflush_r+0xda>
 80139be:	bf00      	nop
 80139c0:	20400001 	.word	0x20400001

080139c4 <_fflush_r>:
 80139c4:	b538      	push	{r3, r4, r5, lr}
 80139c6:	690b      	ldr	r3, [r1, #16]
 80139c8:	4605      	mov	r5, r0
 80139ca:	460c      	mov	r4, r1
 80139cc:	b913      	cbnz	r3, 80139d4 <_fflush_r+0x10>
 80139ce:	2500      	movs	r5, #0
 80139d0:	4628      	mov	r0, r5
 80139d2:	bd38      	pop	{r3, r4, r5, pc}
 80139d4:	b118      	cbz	r0, 80139de <_fflush_r+0x1a>
 80139d6:	6983      	ldr	r3, [r0, #24]
 80139d8:	b90b      	cbnz	r3, 80139de <_fflush_r+0x1a>
 80139da:	f000 f887 	bl	8013aec <__sinit>
 80139de:	4b14      	ldr	r3, [pc, #80]	; (8013a30 <_fflush_r+0x6c>)
 80139e0:	429c      	cmp	r4, r3
 80139e2:	d11b      	bne.n	8013a1c <_fflush_r+0x58>
 80139e4:	686c      	ldr	r4, [r5, #4]
 80139e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d0ef      	beq.n	80139ce <_fflush_r+0xa>
 80139ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80139f0:	07d0      	lsls	r0, r2, #31
 80139f2:	d404      	bmi.n	80139fe <_fflush_r+0x3a>
 80139f4:	0599      	lsls	r1, r3, #22
 80139f6:	d402      	bmi.n	80139fe <_fflush_r+0x3a>
 80139f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80139fa:	f000 f915 	bl	8013c28 <__retarget_lock_acquire_recursive>
 80139fe:	4628      	mov	r0, r5
 8013a00:	4621      	mov	r1, r4
 8013a02:	f7ff ff59 	bl	80138b8 <__sflush_r>
 8013a06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013a08:	07da      	lsls	r2, r3, #31
 8013a0a:	4605      	mov	r5, r0
 8013a0c:	d4e0      	bmi.n	80139d0 <_fflush_r+0xc>
 8013a0e:	89a3      	ldrh	r3, [r4, #12]
 8013a10:	059b      	lsls	r3, r3, #22
 8013a12:	d4dd      	bmi.n	80139d0 <_fflush_r+0xc>
 8013a14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013a16:	f000 f908 	bl	8013c2a <__retarget_lock_release_recursive>
 8013a1a:	e7d9      	b.n	80139d0 <_fflush_r+0xc>
 8013a1c:	4b05      	ldr	r3, [pc, #20]	; (8013a34 <_fflush_r+0x70>)
 8013a1e:	429c      	cmp	r4, r3
 8013a20:	d101      	bne.n	8013a26 <_fflush_r+0x62>
 8013a22:	68ac      	ldr	r4, [r5, #8]
 8013a24:	e7df      	b.n	80139e6 <_fflush_r+0x22>
 8013a26:	4b04      	ldr	r3, [pc, #16]	; (8013a38 <_fflush_r+0x74>)
 8013a28:	429c      	cmp	r4, r3
 8013a2a:	bf08      	it	eq
 8013a2c:	68ec      	ldreq	r4, [r5, #12]
 8013a2e:	e7da      	b.n	80139e6 <_fflush_r+0x22>
 8013a30:	08026a6c 	.word	0x08026a6c
 8013a34:	08026a8c 	.word	0x08026a8c
 8013a38:	08026a4c 	.word	0x08026a4c

08013a3c <std>:
 8013a3c:	2300      	movs	r3, #0
 8013a3e:	b510      	push	{r4, lr}
 8013a40:	4604      	mov	r4, r0
 8013a42:	e9c0 3300 	strd	r3, r3, [r0]
 8013a46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013a4a:	6083      	str	r3, [r0, #8]
 8013a4c:	8181      	strh	r1, [r0, #12]
 8013a4e:	6643      	str	r3, [r0, #100]	; 0x64
 8013a50:	81c2      	strh	r2, [r0, #14]
 8013a52:	6183      	str	r3, [r0, #24]
 8013a54:	4619      	mov	r1, r3
 8013a56:	2208      	movs	r2, #8
 8013a58:	305c      	adds	r0, #92	; 0x5c
 8013a5a:	f7ff fc21 	bl	80132a0 <memset>
 8013a5e:	4b05      	ldr	r3, [pc, #20]	; (8013a74 <std+0x38>)
 8013a60:	6263      	str	r3, [r4, #36]	; 0x24
 8013a62:	4b05      	ldr	r3, [pc, #20]	; (8013a78 <std+0x3c>)
 8013a64:	62a3      	str	r3, [r4, #40]	; 0x28
 8013a66:	4b05      	ldr	r3, [pc, #20]	; (8013a7c <std+0x40>)
 8013a68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013a6a:	4b05      	ldr	r3, [pc, #20]	; (8013a80 <std+0x44>)
 8013a6c:	6224      	str	r4, [r4, #32]
 8013a6e:	6323      	str	r3, [r4, #48]	; 0x30
 8013a70:	bd10      	pop	{r4, pc}
 8013a72:	bf00      	nop
 8013a74:	080142ed 	.word	0x080142ed
 8013a78:	0801430f 	.word	0x0801430f
 8013a7c:	08014347 	.word	0x08014347
 8013a80:	0801436b 	.word	0x0801436b

08013a84 <_cleanup_r>:
 8013a84:	4901      	ldr	r1, [pc, #4]	; (8013a8c <_cleanup_r+0x8>)
 8013a86:	f000 b8af 	b.w	8013be8 <_fwalk_reent>
 8013a8a:	bf00      	nop
 8013a8c:	080139c5 	.word	0x080139c5

08013a90 <__sfmoreglue>:
 8013a90:	b570      	push	{r4, r5, r6, lr}
 8013a92:	2268      	movs	r2, #104	; 0x68
 8013a94:	1e4d      	subs	r5, r1, #1
 8013a96:	4355      	muls	r5, r2
 8013a98:	460e      	mov	r6, r1
 8013a9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013a9e:	f7ff fc73 	bl	8013388 <_malloc_r>
 8013aa2:	4604      	mov	r4, r0
 8013aa4:	b140      	cbz	r0, 8013ab8 <__sfmoreglue+0x28>
 8013aa6:	2100      	movs	r1, #0
 8013aa8:	e9c0 1600 	strd	r1, r6, [r0]
 8013aac:	300c      	adds	r0, #12
 8013aae:	60a0      	str	r0, [r4, #8]
 8013ab0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013ab4:	f7ff fbf4 	bl	80132a0 <memset>
 8013ab8:	4620      	mov	r0, r4
 8013aba:	bd70      	pop	{r4, r5, r6, pc}

08013abc <__sfp_lock_acquire>:
 8013abc:	4801      	ldr	r0, [pc, #4]	; (8013ac4 <__sfp_lock_acquire+0x8>)
 8013abe:	f000 b8b3 	b.w	8013c28 <__retarget_lock_acquire_recursive>
 8013ac2:	bf00      	nop
 8013ac4:	2407db51 	.word	0x2407db51

08013ac8 <__sfp_lock_release>:
 8013ac8:	4801      	ldr	r0, [pc, #4]	; (8013ad0 <__sfp_lock_release+0x8>)
 8013aca:	f000 b8ae 	b.w	8013c2a <__retarget_lock_release_recursive>
 8013ace:	bf00      	nop
 8013ad0:	2407db51 	.word	0x2407db51

08013ad4 <__sinit_lock_acquire>:
 8013ad4:	4801      	ldr	r0, [pc, #4]	; (8013adc <__sinit_lock_acquire+0x8>)
 8013ad6:	f000 b8a7 	b.w	8013c28 <__retarget_lock_acquire_recursive>
 8013ada:	bf00      	nop
 8013adc:	2407db52 	.word	0x2407db52

08013ae0 <__sinit_lock_release>:
 8013ae0:	4801      	ldr	r0, [pc, #4]	; (8013ae8 <__sinit_lock_release+0x8>)
 8013ae2:	f000 b8a2 	b.w	8013c2a <__retarget_lock_release_recursive>
 8013ae6:	bf00      	nop
 8013ae8:	2407db52 	.word	0x2407db52

08013aec <__sinit>:
 8013aec:	b510      	push	{r4, lr}
 8013aee:	4604      	mov	r4, r0
 8013af0:	f7ff fff0 	bl	8013ad4 <__sinit_lock_acquire>
 8013af4:	69a3      	ldr	r3, [r4, #24]
 8013af6:	b11b      	cbz	r3, 8013b00 <__sinit+0x14>
 8013af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013afc:	f7ff bff0 	b.w	8013ae0 <__sinit_lock_release>
 8013b00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013b04:	6523      	str	r3, [r4, #80]	; 0x50
 8013b06:	4b13      	ldr	r3, [pc, #76]	; (8013b54 <__sinit+0x68>)
 8013b08:	4a13      	ldr	r2, [pc, #76]	; (8013b58 <__sinit+0x6c>)
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8013b0e:	42a3      	cmp	r3, r4
 8013b10:	bf04      	itt	eq
 8013b12:	2301      	moveq	r3, #1
 8013b14:	61a3      	streq	r3, [r4, #24]
 8013b16:	4620      	mov	r0, r4
 8013b18:	f000 f820 	bl	8013b5c <__sfp>
 8013b1c:	6060      	str	r0, [r4, #4]
 8013b1e:	4620      	mov	r0, r4
 8013b20:	f000 f81c 	bl	8013b5c <__sfp>
 8013b24:	60a0      	str	r0, [r4, #8]
 8013b26:	4620      	mov	r0, r4
 8013b28:	f000 f818 	bl	8013b5c <__sfp>
 8013b2c:	2200      	movs	r2, #0
 8013b2e:	60e0      	str	r0, [r4, #12]
 8013b30:	2104      	movs	r1, #4
 8013b32:	6860      	ldr	r0, [r4, #4]
 8013b34:	f7ff ff82 	bl	8013a3c <std>
 8013b38:	68a0      	ldr	r0, [r4, #8]
 8013b3a:	2201      	movs	r2, #1
 8013b3c:	2109      	movs	r1, #9
 8013b3e:	f7ff ff7d 	bl	8013a3c <std>
 8013b42:	68e0      	ldr	r0, [r4, #12]
 8013b44:	2202      	movs	r2, #2
 8013b46:	2112      	movs	r1, #18
 8013b48:	f7ff ff78 	bl	8013a3c <std>
 8013b4c:	2301      	movs	r3, #1
 8013b4e:	61a3      	str	r3, [r4, #24]
 8013b50:	e7d2      	b.n	8013af8 <__sinit+0xc>
 8013b52:	bf00      	nop
 8013b54:	08026a48 	.word	0x08026a48
 8013b58:	08013a85 	.word	0x08013a85

08013b5c <__sfp>:
 8013b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b5e:	4607      	mov	r7, r0
 8013b60:	f7ff ffac 	bl	8013abc <__sfp_lock_acquire>
 8013b64:	4b1e      	ldr	r3, [pc, #120]	; (8013be0 <__sfp+0x84>)
 8013b66:	681e      	ldr	r6, [r3, #0]
 8013b68:	69b3      	ldr	r3, [r6, #24]
 8013b6a:	b913      	cbnz	r3, 8013b72 <__sfp+0x16>
 8013b6c:	4630      	mov	r0, r6
 8013b6e:	f7ff ffbd 	bl	8013aec <__sinit>
 8013b72:	3648      	adds	r6, #72	; 0x48
 8013b74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013b78:	3b01      	subs	r3, #1
 8013b7a:	d503      	bpl.n	8013b84 <__sfp+0x28>
 8013b7c:	6833      	ldr	r3, [r6, #0]
 8013b7e:	b30b      	cbz	r3, 8013bc4 <__sfp+0x68>
 8013b80:	6836      	ldr	r6, [r6, #0]
 8013b82:	e7f7      	b.n	8013b74 <__sfp+0x18>
 8013b84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013b88:	b9d5      	cbnz	r5, 8013bc0 <__sfp+0x64>
 8013b8a:	4b16      	ldr	r3, [pc, #88]	; (8013be4 <__sfp+0x88>)
 8013b8c:	60e3      	str	r3, [r4, #12]
 8013b8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013b92:	6665      	str	r5, [r4, #100]	; 0x64
 8013b94:	f000 f847 	bl	8013c26 <__retarget_lock_init_recursive>
 8013b98:	f7ff ff96 	bl	8013ac8 <__sfp_lock_release>
 8013b9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013ba0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013ba4:	6025      	str	r5, [r4, #0]
 8013ba6:	61a5      	str	r5, [r4, #24]
 8013ba8:	2208      	movs	r2, #8
 8013baa:	4629      	mov	r1, r5
 8013bac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013bb0:	f7ff fb76 	bl	80132a0 <memset>
 8013bb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013bb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013bbc:	4620      	mov	r0, r4
 8013bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013bc0:	3468      	adds	r4, #104	; 0x68
 8013bc2:	e7d9      	b.n	8013b78 <__sfp+0x1c>
 8013bc4:	2104      	movs	r1, #4
 8013bc6:	4638      	mov	r0, r7
 8013bc8:	f7ff ff62 	bl	8013a90 <__sfmoreglue>
 8013bcc:	4604      	mov	r4, r0
 8013bce:	6030      	str	r0, [r6, #0]
 8013bd0:	2800      	cmp	r0, #0
 8013bd2:	d1d5      	bne.n	8013b80 <__sfp+0x24>
 8013bd4:	f7ff ff78 	bl	8013ac8 <__sfp_lock_release>
 8013bd8:	230c      	movs	r3, #12
 8013bda:	603b      	str	r3, [r7, #0]
 8013bdc:	e7ee      	b.n	8013bbc <__sfp+0x60>
 8013bde:	bf00      	nop
 8013be0:	08026a48 	.word	0x08026a48
 8013be4:	ffff0001 	.word	0xffff0001

08013be8 <_fwalk_reent>:
 8013be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013bec:	4606      	mov	r6, r0
 8013bee:	4688      	mov	r8, r1
 8013bf0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013bf4:	2700      	movs	r7, #0
 8013bf6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013bfa:	f1b9 0901 	subs.w	r9, r9, #1
 8013bfe:	d505      	bpl.n	8013c0c <_fwalk_reent+0x24>
 8013c00:	6824      	ldr	r4, [r4, #0]
 8013c02:	2c00      	cmp	r4, #0
 8013c04:	d1f7      	bne.n	8013bf6 <_fwalk_reent+0xe>
 8013c06:	4638      	mov	r0, r7
 8013c08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c0c:	89ab      	ldrh	r3, [r5, #12]
 8013c0e:	2b01      	cmp	r3, #1
 8013c10:	d907      	bls.n	8013c22 <_fwalk_reent+0x3a>
 8013c12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013c16:	3301      	adds	r3, #1
 8013c18:	d003      	beq.n	8013c22 <_fwalk_reent+0x3a>
 8013c1a:	4629      	mov	r1, r5
 8013c1c:	4630      	mov	r0, r6
 8013c1e:	47c0      	blx	r8
 8013c20:	4307      	orrs	r7, r0
 8013c22:	3568      	adds	r5, #104	; 0x68
 8013c24:	e7e9      	b.n	8013bfa <_fwalk_reent+0x12>

08013c26 <__retarget_lock_init_recursive>:
 8013c26:	4770      	bx	lr

08013c28 <__retarget_lock_acquire_recursive>:
 8013c28:	4770      	bx	lr

08013c2a <__retarget_lock_release_recursive>:
 8013c2a:	4770      	bx	lr

08013c2c <__swhatbuf_r>:
 8013c2c:	b570      	push	{r4, r5, r6, lr}
 8013c2e:	460e      	mov	r6, r1
 8013c30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c34:	2900      	cmp	r1, #0
 8013c36:	b096      	sub	sp, #88	; 0x58
 8013c38:	4614      	mov	r4, r2
 8013c3a:	461d      	mov	r5, r3
 8013c3c:	da08      	bge.n	8013c50 <__swhatbuf_r+0x24>
 8013c3e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013c42:	2200      	movs	r2, #0
 8013c44:	602a      	str	r2, [r5, #0]
 8013c46:	061a      	lsls	r2, r3, #24
 8013c48:	d410      	bmi.n	8013c6c <__swhatbuf_r+0x40>
 8013c4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013c4e:	e00e      	b.n	8013c6e <__swhatbuf_r+0x42>
 8013c50:	466a      	mov	r2, sp
 8013c52:	f000 fbb1 	bl	80143b8 <_fstat_r>
 8013c56:	2800      	cmp	r0, #0
 8013c58:	dbf1      	blt.n	8013c3e <__swhatbuf_r+0x12>
 8013c5a:	9a01      	ldr	r2, [sp, #4]
 8013c5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013c60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013c64:	425a      	negs	r2, r3
 8013c66:	415a      	adcs	r2, r3
 8013c68:	602a      	str	r2, [r5, #0]
 8013c6a:	e7ee      	b.n	8013c4a <__swhatbuf_r+0x1e>
 8013c6c:	2340      	movs	r3, #64	; 0x40
 8013c6e:	2000      	movs	r0, #0
 8013c70:	6023      	str	r3, [r4, #0]
 8013c72:	b016      	add	sp, #88	; 0x58
 8013c74:	bd70      	pop	{r4, r5, r6, pc}
	...

08013c78 <__smakebuf_r>:
 8013c78:	898b      	ldrh	r3, [r1, #12]
 8013c7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013c7c:	079d      	lsls	r5, r3, #30
 8013c7e:	4606      	mov	r6, r0
 8013c80:	460c      	mov	r4, r1
 8013c82:	d507      	bpl.n	8013c94 <__smakebuf_r+0x1c>
 8013c84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013c88:	6023      	str	r3, [r4, #0]
 8013c8a:	6123      	str	r3, [r4, #16]
 8013c8c:	2301      	movs	r3, #1
 8013c8e:	6163      	str	r3, [r4, #20]
 8013c90:	b002      	add	sp, #8
 8013c92:	bd70      	pop	{r4, r5, r6, pc}
 8013c94:	ab01      	add	r3, sp, #4
 8013c96:	466a      	mov	r2, sp
 8013c98:	f7ff ffc8 	bl	8013c2c <__swhatbuf_r>
 8013c9c:	9900      	ldr	r1, [sp, #0]
 8013c9e:	4605      	mov	r5, r0
 8013ca0:	4630      	mov	r0, r6
 8013ca2:	f7ff fb71 	bl	8013388 <_malloc_r>
 8013ca6:	b948      	cbnz	r0, 8013cbc <__smakebuf_r+0x44>
 8013ca8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013cac:	059a      	lsls	r2, r3, #22
 8013cae:	d4ef      	bmi.n	8013c90 <__smakebuf_r+0x18>
 8013cb0:	f023 0303 	bic.w	r3, r3, #3
 8013cb4:	f043 0302 	orr.w	r3, r3, #2
 8013cb8:	81a3      	strh	r3, [r4, #12]
 8013cba:	e7e3      	b.n	8013c84 <__smakebuf_r+0xc>
 8013cbc:	4b0d      	ldr	r3, [pc, #52]	; (8013cf4 <__smakebuf_r+0x7c>)
 8013cbe:	62b3      	str	r3, [r6, #40]	; 0x28
 8013cc0:	89a3      	ldrh	r3, [r4, #12]
 8013cc2:	6020      	str	r0, [r4, #0]
 8013cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013cc8:	81a3      	strh	r3, [r4, #12]
 8013cca:	9b00      	ldr	r3, [sp, #0]
 8013ccc:	6163      	str	r3, [r4, #20]
 8013cce:	9b01      	ldr	r3, [sp, #4]
 8013cd0:	6120      	str	r0, [r4, #16]
 8013cd2:	b15b      	cbz	r3, 8013cec <__smakebuf_r+0x74>
 8013cd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013cd8:	4630      	mov	r0, r6
 8013cda:	f000 fb7f 	bl	80143dc <_isatty_r>
 8013cde:	b128      	cbz	r0, 8013cec <__smakebuf_r+0x74>
 8013ce0:	89a3      	ldrh	r3, [r4, #12]
 8013ce2:	f023 0303 	bic.w	r3, r3, #3
 8013ce6:	f043 0301 	orr.w	r3, r3, #1
 8013cea:	81a3      	strh	r3, [r4, #12]
 8013cec:	89a0      	ldrh	r0, [r4, #12]
 8013cee:	4305      	orrs	r5, r0
 8013cf0:	81a5      	strh	r5, [r4, #12]
 8013cf2:	e7cd      	b.n	8013c90 <__smakebuf_r+0x18>
 8013cf4:	08013a85 	.word	0x08013a85

08013cf8 <__malloc_lock>:
 8013cf8:	4801      	ldr	r0, [pc, #4]	; (8013d00 <__malloc_lock+0x8>)
 8013cfa:	f7ff bf95 	b.w	8013c28 <__retarget_lock_acquire_recursive>
 8013cfe:	bf00      	nop
 8013d00:	2407db50 	.word	0x2407db50

08013d04 <__malloc_unlock>:
 8013d04:	4801      	ldr	r0, [pc, #4]	; (8013d0c <__malloc_unlock+0x8>)
 8013d06:	f7ff bf90 	b.w	8013c2a <__retarget_lock_release_recursive>
 8013d0a:	bf00      	nop
 8013d0c:	2407db50 	.word	0x2407db50

08013d10 <__sfputc_r>:
 8013d10:	6893      	ldr	r3, [r2, #8]
 8013d12:	3b01      	subs	r3, #1
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	b410      	push	{r4}
 8013d18:	6093      	str	r3, [r2, #8]
 8013d1a:	da08      	bge.n	8013d2e <__sfputc_r+0x1e>
 8013d1c:	6994      	ldr	r4, [r2, #24]
 8013d1e:	42a3      	cmp	r3, r4
 8013d20:	db01      	blt.n	8013d26 <__sfputc_r+0x16>
 8013d22:	290a      	cmp	r1, #10
 8013d24:	d103      	bne.n	8013d2e <__sfputc_r+0x1e>
 8013d26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d2a:	f7ff bd05 	b.w	8013738 <__swbuf_r>
 8013d2e:	6813      	ldr	r3, [r2, #0]
 8013d30:	1c58      	adds	r0, r3, #1
 8013d32:	6010      	str	r0, [r2, #0]
 8013d34:	7019      	strb	r1, [r3, #0]
 8013d36:	4608      	mov	r0, r1
 8013d38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d3c:	4770      	bx	lr

08013d3e <__sfputs_r>:
 8013d3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d40:	4606      	mov	r6, r0
 8013d42:	460f      	mov	r7, r1
 8013d44:	4614      	mov	r4, r2
 8013d46:	18d5      	adds	r5, r2, r3
 8013d48:	42ac      	cmp	r4, r5
 8013d4a:	d101      	bne.n	8013d50 <__sfputs_r+0x12>
 8013d4c:	2000      	movs	r0, #0
 8013d4e:	e007      	b.n	8013d60 <__sfputs_r+0x22>
 8013d50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d54:	463a      	mov	r2, r7
 8013d56:	4630      	mov	r0, r6
 8013d58:	f7ff ffda 	bl	8013d10 <__sfputc_r>
 8013d5c:	1c43      	adds	r3, r0, #1
 8013d5e:	d1f3      	bne.n	8013d48 <__sfputs_r+0xa>
 8013d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013d64 <_vfiprintf_r>:
 8013d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d68:	460d      	mov	r5, r1
 8013d6a:	b09d      	sub	sp, #116	; 0x74
 8013d6c:	4614      	mov	r4, r2
 8013d6e:	4698      	mov	r8, r3
 8013d70:	4606      	mov	r6, r0
 8013d72:	b118      	cbz	r0, 8013d7c <_vfiprintf_r+0x18>
 8013d74:	6983      	ldr	r3, [r0, #24]
 8013d76:	b90b      	cbnz	r3, 8013d7c <_vfiprintf_r+0x18>
 8013d78:	f7ff feb8 	bl	8013aec <__sinit>
 8013d7c:	4b89      	ldr	r3, [pc, #548]	; (8013fa4 <_vfiprintf_r+0x240>)
 8013d7e:	429d      	cmp	r5, r3
 8013d80:	d11b      	bne.n	8013dba <_vfiprintf_r+0x56>
 8013d82:	6875      	ldr	r5, [r6, #4]
 8013d84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013d86:	07d9      	lsls	r1, r3, #31
 8013d88:	d405      	bmi.n	8013d96 <_vfiprintf_r+0x32>
 8013d8a:	89ab      	ldrh	r3, [r5, #12]
 8013d8c:	059a      	lsls	r2, r3, #22
 8013d8e:	d402      	bmi.n	8013d96 <_vfiprintf_r+0x32>
 8013d90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013d92:	f7ff ff49 	bl	8013c28 <__retarget_lock_acquire_recursive>
 8013d96:	89ab      	ldrh	r3, [r5, #12]
 8013d98:	071b      	lsls	r3, r3, #28
 8013d9a:	d501      	bpl.n	8013da0 <_vfiprintf_r+0x3c>
 8013d9c:	692b      	ldr	r3, [r5, #16]
 8013d9e:	b9eb      	cbnz	r3, 8013ddc <_vfiprintf_r+0x78>
 8013da0:	4629      	mov	r1, r5
 8013da2:	4630      	mov	r0, r6
 8013da4:	f7ff fd1a 	bl	80137dc <__swsetup_r>
 8013da8:	b1c0      	cbz	r0, 8013ddc <_vfiprintf_r+0x78>
 8013daa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013dac:	07dc      	lsls	r4, r3, #31
 8013dae:	d50e      	bpl.n	8013dce <_vfiprintf_r+0x6a>
 8013db0:	f04f 30ff 	mov.w	r0, #4294967295
 8013db4:	b01d      	add	sp, #116	; 0x74
 8013db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dba:	4b7b      	ldr	r3, [pc, #492]	; (8013fa8 <_vfiprintf_r+0x244>)
 8013dbc:	429d      	cmp	r5, r3
 8013dbe:	d101      	bne.n	8013dc4 <_vfiprintf_r+0x60>
 8013dc0:	68b5      	ldr	r5, [r6, #8]
 8013dc2:	e7df      	b.n	8013d84 <_vfiprintf_r+0x20>
 8013dc4:	4b79      	ldr	r3, [pc, #484]	; (8013fac <_vfiprintf_r+0x248>)
 8013dc6:	429d      	cmp	r5, r3
 8013dc8:	bf08      	it	eq
 8013dca:	68f5      	ldreq	r5, [r6, #12]
 8013dcc:	e7da      	b.n	8013d84 <_vfiprintf_r+0x20>
 8013dce:	89ab      	ldrh	r3, [r5, #12]
 8013dd0:	0598      	lsls	r0, r3, #22
 8013dd2:	d4ed      	bmi.n	8013db0 <_vfiprintf_r+0x4c>
 8013dd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013dd6:	f7ff ff28 	bl	8013c2a <__retarget_lock_release_recursive>
 8013dda:	e7e9      	b.n	8013db0 <_vfiprintf_r+0x4c>
 8013ddc:	2300      	movs	r3, #0
 8013dde:	9309      	str	r3, [sp, #36]	; 0x24
 8013de0:	2320      	movs	r3, #32
 8013de2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013de6:	f8cd 800c 	str.w	r8, [sp, #12]
 8013dea:	2330      	movs	r3, #48	; 0x30
 8013dec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013fb0 <_vfiprintf_r+0x24c>
 8013df0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013df4:	f04f 0901 	mov.w	r9, #1
 8013df8:	4623      	mov	r3, r4
 8013dfa:	469a      	mov	sl, r3
 8013dfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013e00:	b10a      	cbz	r2, 8013e06 <_vfiprintf_r+0xa2>
 8013e02:	2a25      	cmp	r2, #37	; 0x25
 8013e04:	d1f9      	bne.n	8013dfa <_vfiprintf_r+0x96>
 8013e06:	ebba 0b04 	subs.w	fp, sl, r4
 8013e0a:	d00b      	beq.n	8013e24 <_vfiprintf_r+0xc0>
 8013e0c:	465b      	mov	r3, fp
 8013e0e:	4622      	mov	r2, r4
 8013e10:	4629      	mov	r1, r5
 8013e12:	4630      	mov	r0, r6
 8013e14:	f7ff ff93 	bl	8013d3e <__sfputs_r>
 8013e18:	3001      	adds	r0, #1
 8013e1a:	f000 80aa 	beq.w	8013f72 <_vfiprintf_r+0x20e>
 8013e1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013e20:	445a      	add	r2, fp
 8013e22:	9209      	str	r2, [sp, #36]	; 0x24
 8013e24:	f89a 3000 	ldrb.w	r3, [sl]
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	f000 80a2 	beq.w	8013f72 <_vfiprintf_r+0x20e>
 8013e2e:	2300      	movs	r3, #0
 8013e30:	f04f 32ff 	mov.w	r2, #4294967295
 8013e34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013e38:	f10a 0a01 	add.w	sl, sl, #1
 8013e3c:	9304      	str	r3, [sp, #16]
 8013e3e:	9307      	str	r3, [sp, #28]
 8013e40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013e44:	931a      	str	r3, [sp, #104]	; 0x68
 8013e46:	4654      	mov	r4, sl
 8013e48:	2205      	movs	r2, #5
 8013e4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e4e:	4858      	ldr	r0, [pc, #352]	; (8013fb0 <_vfiprintf_r+0x24c>)
 8013e50:	f7ec fa4e 	bl	80002f0 <memchr>
 8013e54:	9a04      	ldr	r2, [sp, #16]
 8013e56:	b9d8      	cbnz	r0, 8013e90 <_vfiprintf_r+0x12c>
 8013e58:	06d1      	lsls	r1, r2, #27
 8013e5a:	bf44      	itt	mi
 8013e5c:	2320      	movmi	r3, #32
 8013e5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013e62:	0713      	lsls	r3, r2, #28
 8013e64:	bf44      	itt	mi
 8013e66:	232b      	movmi	r3, #43	; 0x2b
 8013e68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013e6c:	f89a 3000 	ldrb.w	r3, [sl]
 8013e70:	2b2a      	cmp	r3, #42	; 0x2a
 8013e72:	d015      	beq.n	8013ea0 <_vfiprintf_r+0x13c>
 8013e74:	9a07      	ldr	r2, [sp, #28]
 8013e76:	4654      	mov	r4, sl
 8013e78:	2000      	movs	r0, #0
 8013e7a:	f04f 0c0a 	mov.w	ip, #10
 8013e7e:	4621      	mov	r1, r4
 8013e80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013e84:	3b30      	subs	r3, #48	; 0x30
 8013e86:	2b09      	cmp	r3, #9
 8013e88:	d94e      	bls.n	8013f28 <_vfiprintf_r+0x1c4>
 8013e8a:	b1b0      	cbz	r0, 8013eba <_vfiprintf_r+0x156>
 8013e8c:	9207      	str	r2, [sp, #28]
 8013e8e:	e014      	b.n	8013eba <_vfiprintf_r+0x156>
 8013e90:	eba0 0308 	sub.w	r3, r0, r8
 8013e94:	fa09 f303 	lsl.w	r3, r9, r3
 8013e98:	4313      	orrs	r3, r2
 8013e9a:	9304      	str	r3, [sp, #16]
 8013e9c:	46a2      	mov	sl, r4
 8013e9e:	e7d2      	b.n	8013e46 <_vfiprintf_r+0xe2>
 8013ea0:	9b03      	ldr	r3, [sp, #12]
 8013ea2:	1d19      	adds	r1, r3, #4
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	9103      	str	r1, [sp, #12]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	bfbb      	ittet	lt
 8013eac:	425b      	neglt	r3, r3
 8013eae:	f042 0202 	orrlt.w	r2, r2, #2
 8013eb2:	9307      	strge	r3, [sp, #28]
 8013eb4:	9307      	strlt	r3, [sp, #28]
 8013eb6:	bfb8      	it	lt
 8013eb8:	9204      	strlt	r2, [sp, #16]
 8013eba:	7823      	ldrb	r3, [r4, #0]
 8013ebc:	2b2e      	cmp	r3, #46	; 0x2e
 8013ebe:	d10c      	bne.n	8013eda <_vfiprintf_r+0x176>
 8013ec0:	7863      	ldrb	r3, [r4, #1]
 8013ec2:	2b2a      	cmp	r3, #42	; 0x2a
 8013ec4:	d135      	bne.n	8013f32 <_vfiprintf_r+0x1ce>
 8013ec6:	9b03      	ldr	r3, [sp, #12]
 8013ec8:	1d1a      	adds	r2, r3, #4
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	9203      	str	r2, [sp, #12]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	bfb8      	it	lt
 8013ed2:	f04f 33ff 	movlt.w	r3, #4294967295
 8013ed6:	3402      	adds	r4, #2
 8013ed8:	9305      	str	r3, [sp, #20]
 8013eda:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013fc0 <_vfiprintf_r+0x25c>
 8013ede:	7821      	ldrb	r1, [r4, #0]
 8013ee0:	2203      	movs	r2, #3
 8013ee2:	4650      	mov	r0, sl
 8013ee4:	f7ec fa04 	bl	80002f0 <memchr>
 8013ee8:	b140      	cbz	r0, 8013efc <_vfiprintf_r+0x198>
 8013eea:	2340      	movs	r3, #64	; 0x40
 8013eec:	eba0 000a 	sub.w	r0, r0, sl
 8013ef0:	fa03 f000 	lsl.w	r0, r3, r0
 8013ef4:	9b04      	ldr	r3, [sp, #16]
 8013ef6:	4303      	orrs	r3, r0
 8013ef8:	3401      	adds	r4, #1
 8013efa:	9304      	str	r3, [sp, #16]
 8013efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f00:	482c      	ldr	r0, [pc, #176]	; (8013fb4 <_vfiprintf_r+0x250>)
 8013f02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013f06:	2206      	movs	r2, #6
 8013f08:	f7ec f9f2 	bl	80002f0 <memchr>
 8013f0c:	2800      	cmp	r0, #0
 8013f0e:	d03f      	beq.n	8013f90 <_vfiprintf_r+0x22c>
 8013f10:	4b29      	ldr	r3, [pc, #164]	; (8013fb8 <_vfiprintf_r+0x254>)
 8013f12:	bb1b      	cbnz	r3, 8013f5c <_vfiprintf_r+0x1f8>
 8013f14:	9b03      	ldr	r3, [sp, #12]
 8013f16:	3307      	adds	r3, #7
 8013f18:	f023 0307 	bic.w	r3, r3, #7
 8013f1c:	3308      	adds	r3, #8
 8013f1e:	9303      	str	r3, [sp, #12]
 8013f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f22:	443b      	add	r3, r7
 8013f24:	9309      	str	r3, [sp, #36]	; 0x24
 8013f26:	e767      	b.n	8013df8 <_vfiprintf_r+0x94>
 8013f28:	fb0c 3202 	mla	r2, ip, r2, r3
 8013f2c:	460c      	mov	r4, r1
 8013f2e:	2001      	movs	r0, #1
 8013f30:	e7a5      	b.n	8013e7e <_vfiprintf_r+0x11a>
 8013f32:	2300      	movs	r3, #0
 8013f34:	3401      	adds	r4, #1
 8013f36:	9305      	str	r3, [sp, #20]
 8013f38:	4619      	mov	r1, r3
 8013f3a:	f04f 0c0a 	mov.w	ip, #10
 8013f3e:	4620      	mov	r0, r4
 8013f40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013f44:	3a30      	subs	r2, #48	; 0x30
 8013f46:	2a09      	cmp	r2, #9
 8013f48:	d903      	bls.n	8013f52 <_vfiprintf_r+0x1ee>
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d0c5      	beq.n	8013eda <_vfiprintf_r+0x176>
 8013f4e:	9105      	str	r1, [sp, #20]
 8013f50:	e7c3      	b.n	8013eda <_vfiprintf_r+0x176>
 8013f52:	fb0c 2101 	mla	r1, ip, r1, r2
 8013f56:	4604      	mov	r4, r0
 8013f58:	2301      	movs	r3, #1
 8013f5a:	e7f0      	b.n	8013f3e <_vfiprintf_r+0x1da>
 8013f5c:	ab03      	add	r3, sp, #12
 8013f5e:	9300      	str	r3, [sp, #0]
 8013f60:	462a      	mov	r2, r5
 8013f62:	4b16      	ldr	r3, [pc, #88]	; (8013fbc <_vfiprintf_r+0x258>)
 8013f64:	a904      	add	r1, sp, #16
 8013f66:	4630      	mov	r0, r6
 8013f68:	f3af 8000 	nop.w
 8013f6c:	4607      	mov	r7, r0
 8013f6e:	1c78      	adds	r0, r7, #1
 8013f70:	d1d6      	bne.n	8013f20 <_vfiprintf_r+0x1bc>
 8013f72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013f74:	07d9      	lsls	r1, r3, #31
 8013f76:	d405      	bmi.n	8013f84 <_vfiprintf_r+0x220>
 8013f78:	89ab      	ldrh	r3, [r5, #12]
 8013f7a:	059a      	lsls	r2, r3, #22
 8013f7c:	d402      	bmi.n	8013f84 <_vfiprintf_r+0x220>
 8013f7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013f80:	f7ff fe53 	bl	8013c2a <__retarget_lock_release_recursive>
 8013f84:	89ab      	ldrh	r3, [r5, #12]
 8013f86:	065b      	lsls	r3, r3, #25
 8013f88:	f53f af12 	bmi.w	8013db0 <_vfiprintf_r+0x4c>
 8013f8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013f8e:	e711      	b.n	8013db4 <_vfiprintf_r+0x50>
 8013f90:	ab03      	add	r3, sp, #12
 8013f92:	9300      	str	r3, [sp, #0]
 8013f94:	462a      	mov	r2, r5
 8013f96:	4b09      	ldr	r3, [pc, #36]	; (8013fbc <_vfiprintf_r+0x258>)
 8013f98:	a904      	add	r1, sp, #16
 8013f9a:	4630      	mov	r0, r6
 8013f9c:	f000 f880 	bl	80140a0 <_printf_i>
 8013fa0:	e7e4      	b.n	8013f6c <_vfiprintf_r+0x208>
 8013fa2:	bf00      	nop
 8013fa4:	08026a6c 	.word	0x08026a6c
 8013fa8:	08026a8c 	.word	0x08026a8c
 8013fac:	08026a4c 	.word	0x08026a4c
 8013fb0:	08026aac 	.word	0x08026aac
 8013fb4:	08026ab6 	.word	0x08026ab6
 8013fb8:	00000000 	.word	0x00000000
 8013fbc:	08013d3f 	.word	0x08013d3f
 8013fc0:	08026ab2 	.word	0x08026ab2

08013fc4 <_printf_common>:
 8013fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013fc8:	4616      	mov	r6, r2
 8013fca:	4699      	mov	r9, r3
 8013fcc:	688a      	ldr	r2, [r1, #8]
 8013fce:	690b      	ldr	r3, [r1, #16]
 8013fd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013fd4:	4293      	cmp	r3, r2
 8013fd6:	bfb8      	it	lt
 8013fd8:	4613      	movlt	r3, r2
 8013fda:	6033      	str	r3, [r6, #0]
 8013fdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013fe0:	4607      	mov	r7, r0
 8013fe2:	460c      	mov	r4, r1
 8013fe4:	b10a      	cbz	r2, 8013fea <_printf_common+0x26>
 8013fe6:	3301      	adds	r3, #1
 8013fe8:	6033      	str	r3, [r6, #0]
 8013fea:	6823      	ldr	r3, [r4, #0]
 8013fec:	0699      	lsls	r1, r3, #26
 8013fee:	bf42      	ittt	mi
 8013ff0:	6833      	ldrmi	r3, [r6, #0]
 8013ff2:	3302      	addmi	r3, #2
 8013ff4:	6033      	strmi	r3, [r6, #0]
 8013ff6:	6825      	ldr	r5, [r4, #0]
 8013ff8:	f015 0506 	ands.w	r5, r5, #6
 8013ffc:	d106      	bne.n	801400c <_printf_common+0x48>
 8013ffe:	f104 0a19 	add.w	sl, r4, #25
 8014002:	68e3      	ldr	r3, [r4, #12]
 8014004:	6832      	ldr	r2, [r6, #0]
 8014006:	1a9b      	subs	r3, r3, r2
 8014008:	42ab      	cmp	r3, r5
 801400a:	dc26      	bgt.n	801405a <_printf_common+0x96>
 801400c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014010:	1e13      	subs	r3, r2, #0
 8014012:	6822      	ldr	r2, [r4, #0]
 8014014:	bf18      	it	ne
 8014016:	2301      	movne	r3, #1
 8014018:	0692      	lsls	r2, r2, #26
 801401a:	d42b      	bmi.n	8014074 <_printf_common+0xb0>
 801401c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014020:	4649      	mov	r1, r9
 8014022:	4638      	mov	r0, r7
 8014024:	47c0      	blx	r8
 8014026:	3001      	adds	r0, #1
 8014028:	d01e      	beq.n	8014068 <_printf_common+0xa4>
 801402a:	6823      	ldr	r3, [r4, #0]
 801402c:	68e5      	ldr	r5, [r4, #12]
 801402e:	6832      	ldr	r2, [r6, #0]
 8014030:	f003 0306 	and.w	r3, r3, #6
 8014034:	2b04      	cmp	r3, #4
 8014036:	bf08      	it	eq
 8014038:	1aad      	subeq	r5, r5, r2
 801403a:	68a3      	ldr	r3, [r4, #8]
 801403c:	6922      	ldr	r2, [r4, #16]
 801403e:	bf0c      	ite	eq
 8014040:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014044:	2500      	movne	r5, #0
 8014046:	4293      	cmp	r3, r2
 8014048:	bfc4      	itt	gt
 801404a:	1a9b      	subgt	r3, r3, r2
 801404c:	18ed      	addgt	r5, r5, r3
 801404e:	2600      	movs	r6, #0
 8014050:	341a      	adds	r4, #26
 8014052:	42b5      	cmp	r5, r6
 8014054:	d11a      	bne.n	801408c <_printf_common+0xc8>
 8014056:	2000      	movs	r0, #0
 8014058:	e008      	b.n	801406c <_printf_common+0xa8>
 801405a:	2301      	movs	r3, #1
 801405c:	4652      	mov	r2, sl
 801405e:	4649      	mov	r1, r9
 8014060:	4638      	mov	r0, r7
 8014062:	47c0      	blx	r8
 8014064:	3001      	adds	r0, #1
 8014066:	d103      	bne.n	8014070 <_printf_common+0xac>
 8014068:	f04f 30ff 	mov.w	r0, #4294967295
 801406c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014070:	3501      	adds	r5, #1
 8014072:	e7c6      	b.n	8014002 <_printf_common+0x3e>
 8014074:	18e1      	adds	r1, r4, r3
 8014076:	1c5a      	adds	r2, r3, #1
 8014078:	2030      	movs	r0, #48	; 0x30
 801407a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801407e:	4422      	add	r2, r4
 8014080:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014084:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014088:	3302      	adds	r3, #2
 801408a:	e7c7      	b.n	801401c <_printf_common+0x58>
 801408c:	2301      	movs	r3, #1
 801408e:	4622      	mov	r2, r4
 8014090:	4649      	mov	r1, r9
 8014092:	4638      	mov	r0, r7
 8014094:	47c0      	blx	r8
 8014096:	3001      	adds	r0, #1
 8014098:	d0e6      	beq.n	8014068 <_printf_common+0xa4>
 801409a:	3601      	adds	r6, #1
 801409c:	e7d9      	b.n	8014052 <_printf_common+0x8e>
	...

080140a0 <_printf_i>:
 80140a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80140a4:	7e0f      	ldrb	r7, [r1, #24]
 80140a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80140a8:	2f78      	cmp	r7, #120	; 0x78
 80140aa:	4691      	mov	r9, r2
 80140ac:	4680      	mov	r8, r0
 80140ae:	460c      	mov	r4, r1
 80140b0:	469a      	mov	sl, r3
 80140b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80140b6:	d807      	bhi.n	80140c8 <_printf_i+0x28>
 80140b8:	2f62      	cmp	r7, #98	; 0x62
 80140ba:	d80a      	bhi.n	80140d2 <_printf_i+0x32>
 80140bc:	2f00      	cmp	r7, #0
 80140be:	f000 80d8 	beq.w	8014272 <_printf_i+0x1d2>
 80140c2:	2f58      	cmp	r7, #88	; 0x58
 80140c4:	f000 80a3 	beq.w	801420e <_printf_i+0x16e>
 80140c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80140cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80140d0:	e03a      	b.n	8014148 <_printf_i+0xa8>
 80140d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80140d6:	2b15      	cmp	r3, #21
 80140d8:	d8f6      	bhi.n	80140c8 <_printf_i+0x28>
 80140da:	a101      	add	r1, pc, #4	; (adr r1, 80140e0 <_printf_i+0x40>)
 80140dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80140e0:	08014139 	.word	0x08014139
 80140e4:	0801414d 	.word	0x0801414d
 80140e8:	080140c9 	.word	0x080140c9
 80140ec:	080140c9 	.word	0x080140c9
 80140f0:	080140c9 	.word	0x080140c9
 80140f4:	080140c9 	.word	0x080140c9
 80140f8:	0801414d 	.word	0x0801414d
 80140fc:	080140c9 	.word	0x080140c9
 8014100:	080140c9 	.word	0x080140c9
 8014104:	080140c9 	.word	0x080140c9
 8014108:	080140c9 	.word	0x080140c9
 801410c:	08014259 	.word	0x08014259
 8014110:	0801417d 	.word	0x0801417d
 8014114:	0801423b 	.word	0x0801423b
 8014118:	080140c9 	.word	0x080140c9
 801411c:	080140c9 	.word	0x080140c9
 8014120:	0801427b 	.word	0x0801427b
 8014124:	080140c9 	.word	0x080140c9
 8014128:	0801417d 	.word	0x0801417d
 801412c:	080140c9 	.word	0x080140c9
 8014130:	080140c9 	.word	0x080140c9
 8014134:	08014243 	.word	0x08014243
 8014138:	682b      	ldr	r3, [r5, #0]
 801413a:	1d1a      	adds	r2, r3, #4
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	602a      	str	r2, [r5, #0]
 8014140:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014144:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014148:	2301      	movs	r3, #1
 801414a:	e0a3      	b.n	8014294 <_printf_i+0x1f4>
 801414c:	6820      	ldr	r0, [r4, #0]
 801414e:	6829      	ldr	r1, [r5, #0]
 8014150:	0606      	lsls	r6, r0, #24
 8014152:	f101 0304 	add.w	r3, r1, #4
 8014156:	d50a      	bpl.n	801416e <_printf_i+0xce>
 8014158:	680e      	ldr	r6, [r1, #0]
 801415a:	602b      	str	r3, [r5, #0]
 801415c:	2e00      	cmp	r6, #0
 801415e:	da03      	bge.n	8014168 <_printf_i+0xc8>
 8014160:	232d      	movs	r3, #45	; 0x2d
 8014162:	4276      	negs	r6, r6
 8014164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014168:	485e      	ldr	r0, [pc, #376]	; (80142e4 <_printf_i+0x244>)
 801416a:	230a      	movs	r3, #10
 801416c:	e019      	b.n	80141a2 <_printf_i+0x102>
 801416e:	680e      	ldr	r6, [r1, #0]
 8014170:	602b      	str	r3, [r5, #0]
 8014172:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014176:	bf18      	it	ne
 8014178:	b236      	sxthne	r6, r6
 801417a:	e7ef      	b.n	801415c <_printf_i+0xbc>
 801417c:	682b      	ldr	r3, [r5, #0]
 801417e:	6820      	ldr	r0, [r4, #0]
 8014180:	1d19      	adds	r1, r3, #4
 8014182:	6029      	str	r1, [r5, #0]
 8014184:	0601      	lsls	r1, r0, #24
 8014186:	d501      	bpl.n	801418c <_printf_i+0xec>
 8014188:	681e      	ldr	r6, [r3, #0]
 801418a:	e002      	b.n	8014192 <_printf_i+0xf2>
 801418c:	0646      	lsls	r6, r0, #25
 801418e:	d5fb      	bpl.n	8014188 <_printf_i+0xe8>
 8014190:	881e      	ldrh	r6, [r3, #0]
 8014192:	4854      	ldr	r0, [pc, #336]	; (80142e4 <_printf_i+0x244>)
 8014194:	2f6f      	cmp	r7, #111	; 0x6f
 8014196:	bf0c      	ite	eq
 8014198:	2308      	moveq	r3, #8
 801419a:	230a      	movne	r3, #10
 801419c:	2100      	movs	r1, #0
 801419e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80141a2:	6865      	ldr	r5, [r4, #4]
 80141a4:	60a5      	str	r5, [r4, #8]
 80141a6:	2d00      	cmp	r5, #0
 80141a8:	bfa2      	ittt	ge
 80141aa:	6821      	ldrge	r1, [r4, #0]
 80141ac:	f021 0104 	bicge.w	r1, r1, #4
 80141b0:	6021      	strge	r1, [r4, #0]
 80141b2:	b90e      	cbnz	r6, 80141b8 <_printf_i+0x118>
 80141b4:	2d00      	cmp	r5, #0
 80141b6:	d04d      	beq.n	8014254 <_printf_i+0x1b4>
 80141b8:	4615      	mov	r5, r2
 80141ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80141be:	fb03 6711 	mls	r7, r3, r1, r6
 80141c2:	5dc7      	ldrb	r7, [r0, r7]
 80141c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80141c8:	4637      	mov	r7, r6
 80141ca:	42bb      	cmp	r3, r7
 80141cc:	460e      	mov	r6, r1
 80141ce:	d9f4      	bls.n	80141ba <_printf_i+0x11a>
 80141d0:	2b08      	cmp	r3, #8
 80141d2:	d10b      	bne.n	80141ec <_printf_i+0x14c>
 80141d4:	6823      	ldr	r3, [r4, #0]
 80141d6:	07de      	lsls	r6, r3, #31
 80141d8:	d508      	bpl.n	80141ec <_printf_i+0x14c>
 80141da:	6923      	ldr	r3, [r4, #16]
 80141dc:	6861      	ldr	r1, [r4, #4]
 80141de:	4299      	cmp	r1, r3
 80141e0:	bfde      	ittt	le
 80141e2:	2330      	movle	r3, #48	; 0x30
 80141e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80141e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80141ec:	1b52      	subs	r2, r2, r5
 80141ee:	6122      	str	r2, [r4, #16]
 80141f0:	f8cd a000 	str.w	sl, [sp]
 80141f4:	464b      	mov	r3, r9
 80141f6:	aa03      	add	r2, sp, #12
 80141f8:	4621      	mov	r1, r4
 80141fa:	4640      	mov	r0, r8
 80141fc:	f7ff fee2 	bl	8013fc4 <_printf_common>
 8014200:	3001      	adds	r0, #1
 8014202:	d14c      	bne.n	801429e <_printf_i+0x1fe>
 8014204:	f04f 30ff 	mov.w	r0, #4294967295
 8014208:	b004      	add	sp, #16
 801420a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801420e:	4835      	ldr	r0, [pc, #212]	; (80142e4 <_printf_i+0x244>)
 8014210:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014214:	6829      	ldr	r1, [r5, #0]
 8014216:	6823      	ldr	r3, [r4, #0]
 8014218:	f851 6b04 	ldr.w	r6, [r1], #4
 801421c:	6029      	str	r1, [r5, #0]
 801421e:	061d      	lsls	r5, r3, #24
 8014220:	d514      	bpl.n	801424c <_printf_i+0x1ac>
 8014222:	07df      	lsls	r7, r3, #31
 8014224:	bf44      	itt	mi
 8014226:	f043 0320 	orrmi.w	r3, r3, #32
 801422a:	6023      	strmi	r3, [r4, #0]
 801422c:	b91e      	cbnz	r6, 8014236 <_printf_i+0x196>
 801422e:	6823      	ldr	r3, [r4, #0]
 8014230:	f023 0320 	bic.w	r3, r3, #32
 8014234:	6023      	str	r3, [r4, #0]
 8014236:	2310      	movs	r3, #16
 8014238:	e7b0      	b.n	801419c <_printf_i+0xfc>
 801423a:	6823      	ldr	r3, [r4, #0]
 801423c:	f043 0320 	orr.w	r3, r3, #32
 8014240:	6023      	str	r3, [r4, #0]
 8014242:	2378      	movs	r3, #120	; 0x78
 8014244:	4828      	ldr	r0, [pc, #160]	; (80142e8 <_printf_i+0x248>)
 8014246:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801424a:	e7e3      	b.n	8014214 <_printf_i+0x174>
 801424c:	0659      	lsls	r1, r3, #25
 801424e:	bf48      	it	mi
 8014250:	b2b6      	uxthmi	r6, r6
 8014252:	e7e6      	b.n	8014222 <_printf_i+0x182>
 8014254:	4615      	mov	r5, r2
 8014256:	e7bb      	b.n	80141d0 <_printf_i+0x130>
 8014258:	682b      	ldr	r3, [r5, #0]
 801425a:	6826      	ldr	r6, [r4, #0]
 801425c:	6961      	ldr	r1, [r4, #20]
 801425e:	1d18      	adds	r0, r3, #4
 8014260:	6028      	str	r0, [r5, #0]
 8014262:	0635      	lsls	r5, r6, #24
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	d501      	bpl.n	801426c <_printf_i+0x1cc>
 8014268:	6019      	str	r1, [r3, #0]
 801426a:	e002      	b.n	8014272 <_printf_i+0x1d2>
 801426c:	0670      	lsls	r0, r6, #25
 801426e:	d5fb      	bpl.n	8014268 <_printf_i+0x1c8>
 8014270:	8019      	strh	r1, [r3, #0]
 8014272:	2300      	movs	r3, #0
 8014274:	6123      	str	r3, [r4, #16]
 8014276:	4615      	mov	r5, r2
 8014278:	e7ba      	b.n	80141f0 <_printf_i+0x150>
 801427a:	682b      	ldr	r3, [r5, #0]
 801427c:	1d1a      	adds	r2, r3, #4
 801427e:	602a      	str	r2, [r5, #0]
 8014280:	681d      	ldr	r5, [r3, #0]
 8014282:	6862      	ldr	r2, [r4, #4]
 8014284:	2100      	movs	r1, #0
 8014286:	4628      	mov	r0, r5
 8014288:	f7ec f832 	bl	80002f0 <memchr>
 801428c:	b108      	cbz	r0, 8014292 <_printf_i+0x1f2>
 801428e:	1b40      	subs	r0, r0, r5
 8014290:	6060      	str	r0, [r4, #4]
 8014292:	6863      	ldr	r3, [r4, #4]
 8014294:	6123      	str	r3, [r4, #16]
 8014296:	2300      	movs	r3, #0
 8014298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801429c:	e7a8      	b.n	80141f0 <_printf_i+0x150>
 801429e:	6923      	ldr	r3, [r4, #16]
 80142a0:	462a      	mov	r2, r5
 80142a2:	4649      	mov	r1, r9
 80142a4:	4640      	mov	r0, r8
 80142a6:	47d0      	blx	sl
 80142a8:	3001      	adds	r0, #1
 80142aa:	d0ab      	beq.n	8014204 <_printf_i+0x164>
 80142ac:	6823      	ldr	r3, [r4, #0]
 80142ae:	079b      	lsls	r3, r3, #30
 80142b0:	d413      	bmi.n	80142da <_printf_i+0x23a>
 80142b2:	68e0      	ldr	r0, [r4, #12]
 80142b4:	9b03      	ldr	r3, [sp, #12]
 80142b6:	4298      	cmp	r0, r3
 80142b8:	bfb8      	it	lt
 80142ba:	4618      	movlt	r0, r3
 80142bc:	e7a4      	b.n	8014208 <_printf_i+0x168>
 80142be:	2301      	movs	r3, #1
 80142c0:	4632      	mov	r2, r6
 80142c2:	4649      	mov	r1, r9
 80142c4:	4640      	mov	r0, r8
 80142c6:	47d0      	blx	sl
 80142c8:	3001      	adds	r0, #1
 80142ca:	d09b      	beq.n	8014204 <_printf_i+0x164>
 80142cc:	3501      	adds	r5, #1
 80142ce:	68e3      	ldr	r3, [r4, #12]
 80142d0:	9903      	ldr	r1, [sp, #12]
 80142d2:	1a5b      	subs	r3, r3, r1
 80142d4:	42ab      	cmp	r3, r5
 80142d6:	dcf2      	bgt.n	80142be <_printf_i+0x21e>
 80142d8:	e7eb      	b.n	80142b2 <_printf_i+0x212>
 80142da:	2500      	movs	r5, #0
 80142dc:	f104 0619 	add.w	r6, r4, #25
 80142e0:	e7f5      	b.n	80142ce <_printf_i+0x22e>
 80142e2:	bf00      	nop
 80142e4:	08026abd 	.word	0x08026abd
 80142e8:	08026ace 	.word	0x08026ace

080142ec <__sread>:
 80142ec:	b510      	push	{r4, lr}
 80142ee:	460c      	mov	r4, r1
 80142f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80142f4:	f000 f894 	bl	8014420 <_read_r>
 80142f8:	2800      	cmp	r0, #0
 80142fa:	bfab      	itete	ge
 80142fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80142fe:	89a3      	ldrhlt	r3, [r4, #12]
 8014300:	181b      	addge	r3, r3, r0
 8014302:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014306:	bfac      	ite	ge
 8014308:	6563      	strge	r3, [r4, #84]	; 0x54
 801430a:	81a3      	strhlt	r3, [r4, #12]
 801430c:	bd10      	pop	{r4, pc}

0801430e <__swrite>:
 801430e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014312:	461f      	mov	r7, r3
 8014314:	898b      	ldrh	r3, [r1, #12]
 8014316:	05db      	lsls	r3, r3, #23
 8014318:	4605      	mov	r5, r0
 801431a:	460c      	mov	r4, r1
 801431c:	4616      	mov	r6, r2
 801431e:	d505      	bpl.n	801432c <__swrite+0x1e>
 8014320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014324:	2302      	movs	r3, #2
 8014326:	2200      	movs	r2, #0
 8014328:	f000 f868 	bl	80143fc <_lseek_r>
 801432c:	89a3      	ldrh	r3, [r4, #12]
 801432e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014332:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014336:	81a3      	strh	r3, [r4, #12]
 8014338:	4632      	mov	r2, r6
 801433a:	463b      	mov	r3, r7
 801433c:	4628      	mov	r0, r5
 801433e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014342:	f000 b817 	b.w	8014374 <_write_r>

08014346 <__sseek>:
 8014346:	b510      	push	{r4, lr}
 8014348:	460c      	mov	r4, r1
 801434a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801434e:	f000 f855 	bl	80143fc <_lseek_r>
 8014352:	1c43      	adds	r3, r0, #1
 8014354:	89a3      	ldrh	r3, [r4, #12]
 8014356:	bf15      	itete	ne
 8014358:	6560      	strne	r0, [r4, #84]	; 0x54
 801435a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801435e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014362:	81a3      	strheq	r3, [r4, #12]
 8014364:	bf18      	it	ne
 8014366:	81a3      	strhne	r3, [r4, #12]
 8014368:	bd10      	pop	{r4, pc}

0801436a <__sclose>:
 801436a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801436e:	f000 b813 	b.w	8014398 <_close_r>
	...

08014374 <_write_r>:
 8014374:	b538      	push	{r3, r4, r5, lr}
 8014376:	4d07      	ldr	r5, [pc, #28]	; (8014394 <_write_r+0x20>)
 8014378:	4604      	mov	r4, r0
 801437a:	4608      	mov	r0, r1
 801437c:	4611      	mov	r1, r2
 801437e:	2200      	movs	r2, #0
 8014380:	602a      	str	r2, [r5, #0]
 8014382:	461a      	mov	r2, r3
 8014384:	f7ef f898 	bl	80034b8 <_write>
 8014388:	1c43      	adds	r3, r0, #1
 801438a:	d102      	bne.n	8014392 <_write_r+0x1e>
 801438c:	682b      	ldr	r3, [r5, #0]
 801438e:	b103      	cbz	r3, 8014392 <_write_r+0x1e>
 8014390:	6023      	str	r3, [r4, #0]
 8014392:	bd38      	pop	{r3, r4, r5, pc}
 8014394:	2407db54 	.word	0x2407db54

08014398 <_close_r>:
 8014398:	b538      	push	{r3, r4, r5, lr}
 801439a:	4d06      	ldr	r5, [pc, #24]	; (80143b4 <_close_r+0x1c>)
 801439c:	2300      	movs	r3, #0
 801439e:	4604      	mov	r4, r0
 80143a0:	4608      	mov	r0, r1
 80143a2:	602b      	str	r3, [r5, #0]
 80143a4:	f7ef f8b4 	bl	8003510 <_close>
 80143a8:	1c43      	adds	r3, r0, #1
 80143aa:	d102      	bne.n	80143b2 <_close_r+0x1a>
 80143ac:	682b      	ldr	r3, [r5, #0]
 80143ae:	b103      	cbz	r3, 80143b2 <_close_r+0x1a>
 80143b0:	6023      	str	r3, [r4, #0]
 80143b2:	bd38      	pop	{r3, r4, r5, pc}
 80143b4:	2407db54 	.word	0x2407db54

080143b8 <_fstat_r>:
 80143b8:	b538      	push	{r3, r4, r5, lr}
 80143ba:	4d07      	ldr	r5, [pc, #28]	; (80143d8 <_fstat_r+0x20>)
 80143bc:	2300      	movs	r3, #0
 80143be:	4604      	mov	r4, r0
 80143c0:	4608      	mov	r0, r1
 80143c2:	4611      	mov	r1, r2
 80143c4:	602b      	str	r3, [r5, #0]
 80143c6:	f7ef f8e3 	bl	8003590 <_fstat>
 80143ca:	1c43      	adds	r3, r0, #1
 80143cc:	d102      	bne.n	80143d4 <_fstat_r+0x1c>
 80143ce:	682b      	ldr	r3, [r5, #0]
 80143d0:	b103      	cbz	r3, 80143d4 <_fstat_r+0x1c>
 80143d2:	6023      	str	r3, [r4, #0]
 80143d4:	bd38      	pop	{r3, r4, r5, pc}
 80143d6:	bf00      	nop
 80143d8:	2407db54 	.word	0x2407db54

080143dc <_isatty_r>:
 80143dc:	b538      	push	{r3, r4, r5, lr}
 80143de:	4d06      	ldr	r5, [pc, #24]	; (80143f8 <_isatty_r+0x1c>)
 80143e0:	2300      	movs	r3, #0
 80143e2:	4604      	mov	r4, r0
 80143e4:	4608      	mov	r0, r1
 80143e6:	602b      	str	r3, [r5, #0]
 80143e8:	f7ef f850 	bl	800348c <_isatty>
 80143ec:	1c43      	adds	r3, r0, #1
 80143ee:	d102      	bne.n	80143f6 <_isatty_r+0x1a>
 80143f0:	682b      	ldr	r3, [r5, #0]
 80143f2:	b103      	cbz	r3, 80143f6 <_isatty_r+0x1a>
 80143f4:	6023      	str	r3, [r4, #0]
 80143f6:	bd38      	pop	{r3, r4, r5, pc}
 80143f8:	2407db54 	.word	0x2407db54

080143fc <_lseek_r>:
 80143fc:	b538      	push	{r3, r4, r5, lr}
 80143fe:	4d07      	ldr	r5, [pc, #28]	; (801441c <_lseek_r+0x20>)
 8014400:	4604      	mov	r4, r0
 8014402:	4608      	mov	r0, r1
 8014404:	4611      	mov	r1, r2
 8014406:	2200      	movs	r2, #0
 8014408:	602a      	str	r2, [r5, #0]
 801440a:	461a      	mov	r2, r3
 801440c:	f000 f8b6 	bl	801457c <_lseek>
 8014410:	1c43      	adds	r3, r0, #1
 8014412:	d102      	bne.n	801441a <_lseek_r+0x1e>
 8014414:	682b      	ldr	r3, [r5, #0]
 8014416:	b103      	cbz	r3, 801441a <_lseek_r+0x1e>
 8014418:	6023      	str	r3, [r4, #0]
 801441a:	bd38      	pop	{r3, r4, r5, pc}
 801441c:	2407db54 	.word	0x2407db54

08014420 <_read_r>:
 8014420:	b538      	push	{r3, r4, r5, lr}
 8014422:	4d07      	ldr	r5, [pc, #28]	; (8014440 <_read_r+0x20>)
 8014424:	4604      	mov	r4, r0
 8014426:	4608      	mov	r0, r1
 8014428:	4611      	mov	r1, r2
 801442a:	2200      	movs	r2, #0
 801442c:	602a      	str	r2, [r5, #0]
 801442e:	461a      	mov	r2, r3
 8014430:	f7ef f886 	bl	8003540 <_read>
 8014434:	1c43      	adds	r3, r0, #1
 8014436:	d102      	bne.n	801443e <_read_r+0x1e>
 8014438:	682b      	ldr	r3, [r5, #0]
 801443a:	b103      	cbz	r3, 801443e <_read_r+0x1e>
 801443c:	6023      	str	r3, [r4, #0]
 801443e:	bd38      	pop	{r3, r4, r5, pc}
 8014440:	2407db54 	.word	0x2407db54

08014444 <with_errnof>:
 8014444:	b513      	push	{r0, r1, r4, lr}
 8014446:	4604      	mov	r4, r0
 8014448:	ed8d 0a01 	vstr	s0, [sp, #4]
 801444c:	f7fe fee8 	bl	8013220 <__errno>
 8014450:	ed9d 0a01 	vldr	s0, [sp, #4]
 8014454:	6004      	str	r4, [r0, #0]
 8014456:	b002      	add	sp, #8
 8014458:	bd10      	pop	{r4, pc}

0801445a <xflowf>:
 801445a:	b130      	cbz	r0, 801446a <xflowf+0x10>
 801445c:	eef1 7a40 	vneg.f32	s15, s0
 8014460:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014464:	2022      	movs	r0, #34	; 0x22
 8014466:	f7ff bfed 	b.w	8014444 <with_errnof>
 801446a:	eef0 7a40 	vmov.f32	s15, s0
 801446e:	e7f7      	b.n	8014460 <xflowf+0x6>

08014470 <__math_uflowf>:
 8014470:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014478 <__math_uflowf+0x8>
 8014474:	f7ff bff1 	b.w	801445a <xflowf>
 8014478:	10000000 	.word	0x10000000

0801447c <__math_may_uflowf>:
 801447c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014484 <__math_may_uflowf+0x8>
 8014480:	f7ff bfeb 	b.w	801445a <xflowf>
 8014484:	1a200000 	.word	0x1a200000

08014488 <__math_oflowf>:
 8014488:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014490 <__math_oflowf+0x8>
 801448c:	f7ff bfe5 	b.w	801445a <xflowf>
 8014490:	70000000 	.word	0x70000000

08014494 <expf>:
 8014494:	ee10 2a10 	vmov	r2, s0
 8014498:	f240 412a 	movw	r1, #1066	; 0x42a
 801449c:	f3c2 530a 	ubfx	r3, r2, #20, #11
 80144a0:	428b      	cmp	r3, r1
 80144a2:	b430      	push	{r4, r5}
 80144a4:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 80144a8:	d92a      	bls.n	8014500 <expf+0x6c>
 80144aa:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 80144ae:	d058      	beq.n	8014562 <expf+0xce>
 80144b0:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 80144b4:	d303      	bcc.n	80144be <expf+0x2a>
 80144b6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80144ba:	bc30      	pop	{r4, r5}
 80144bc:	4770      	bx	lr
 80144be:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8014568 <expf+0xd4>
 80144c2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80144c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144ca:	dd03      	ble.n	80144d4 <expf+0x40>
 80144cc:	bc30      	pop	{r4, r5}
 80144ce:	2000      	movs	r0, #0
 80144d0:	f7ff bfda 	b.w	8014488 <__math_oflowf>
 80144d4:	eddf 7a25 	vldr	s15, [pc, #148]	; 801456c <expf+0xd8>
 80144d8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80144dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144e0:	d503      	bpl.n	80144ea <expf+0x56>
 80144e2:	bc30      	pop	{r4, r5}
 80144e4:	2000      	movs	r0, #0
 80144e6:	f7ff bfc3 	b.w	8014470 <__math_uflowf>
 80144ea:	eddf 7a21 	vldr	s15, [pc, #132]	; 8014570 <expf+0xdc>
 80144ee:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80144f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144f6:	d503      	bpl.n	8014500 <expf+0x6c>
 80144f8:	bc30      	pop	{r4, r5}
 80144fa:	2000      	movs	r0, #0
 80144fc:	f7ff bfbe 	b.w	801447c <__math_may_uflowf>
 8014500:	4b1c      	ldr	r3, [pc, #112]	; (8014574 <expf+0xe0>)
 8014502:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8014506:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 801450a:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 801450e:	eeb0 7b44 	vmov.f64	d7, d4
 8014512:	eea5 7b06 	vfma.f64	d7, d5, d6
 8014516:	ee17 0a10 	vmov	r0, s14
 801451a:	ee37 7b44 	vsub.f64	d7, d7, d4
 801451e:	f000 021f 	and.w	r2, r0, #31
 8014522:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8014526:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 801452a:	ee27 4b07 	vmul.f64	d4, d7, d7
 801452e:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 8014532:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8014536:	eea5 6b07 	vfma.f64	d6, d5, d7
 801453a:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 801453e:	684d      	ldr	r5, [r1, #4]
 8014540:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 8014544:	2100      	movs	r1, #0
 8014546:	190a      	adds	r2, r1, r4
 8014548:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 801454c:	eea5 0b07 	vfma.f64	d0, d5, d7
 8014550:	ec43 2b17 	vmov	d7, r2, r3
 8014554:	eea6 0b04 	vfma.f64	d0, d6, d4
 8014558:	ee20 0b07 	vmul.f64	d0, d0, d7
 801455c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8014560:	e7ab      	b.n	80144ba <expf+0x26>
 8014562:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8014578 <expf+0xe4>
 8014566:	e7a8      	b.n	80144ba <expf+0x26>
 8014568:	42b17217 	.word	0x42b17217
 801456c:	c2cff1b4 	.word	0xc2cff1b4
 8014570:	c2ce8ecf 	.word	0xc2ce8ecf
 8014574:	08026ae0 	.word	0x08026ae0
 8014578:	00000000 	.word	0x00000000

0801457c <_lseek>:
 801457c:	4b02      	ldr	r3, [pc, #8]	; (8014588 <_lseek+0xc>)
 801457e:	2258      	movs	r2, #88	; 0x58
 8014580:	601a      	str	r2, [r3, #0]
 8014582:	f04f 30ff 	mov.w	r0, #4294967295
 8014586:	4770      	bx	lr
 8014588:	2407db54 	.word	0x2407db54

0801458c <_init>:
 801458c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801458e:	bf00      	nop
 8014590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014592:	bc08      	pop	{r3}
 8014594:	469e      	mov	lr, r3
 8014596:	4770      	bx	lr

08014598 <_fini>:
 8014598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801459a:	bf00      	nop
 801459c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801459e:	bc08      	pop	{r3}
 80145a0:	469e      	mov	lr, r3
 80145a2:	4770      	bx	lr
