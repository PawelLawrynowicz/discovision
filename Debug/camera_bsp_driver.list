
camera_bsp_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c960  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000746d8  0801cc20  0801cc20  0002cc20  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080912f8  080912f8  000a12f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08091300  08091300  000a1300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08091304  08091304  000a1304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00008248  24000000  08091308  000b0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00056160  24008260  08099550  000b8260  2**5
                  ALLOC
  8 ._user_heap_stack 00001000  20000000  20000000  000c0000  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000b8248  2**0
                  CONTENTS, READONLY
 10 .debug_info   000305e3  00000000  00000000  000b8276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005c55  00000000  00000000  000e8859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ba0  00000000  00000000  000ee4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001910  00000000  00000000  000f0050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003badb  00000000  00000000  000f1960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002dde2  00000000  00000000  0012d43b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016489c  00000000  00000000  0015b21d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002bfab9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007994  00000000  00000000  002bfb0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .stab         00000024  00000000  00000000  002c74a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      0000003f  00000000  00000000  002c74c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24008260 	.word	0x24008260
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0801cbf8 	.word	0x0801cbf8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24008264 	.word	0x24008264
 80002ec:	0801cbf8 	.word	0x0801cbf8

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b9a8 	b.w	80006f8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f83a 	bl	8000428 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__aeabi_f2lz>:
 80003c0:	ee07 0a90 	vmov	s15, r0
 80003c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80003c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003cc:	d401      	bmi.n	80003d2 <__aeabi_f2lz+0x12>
 80003ce:	f000 b80b 	b.w	80003e8 <__aeabi_f2ulz>
 80003d2:	eef1 7a67 	vneg.f32	s15, s15
 80003d6:	b508      	push	{r3, lr}
 80003d8:	ee17 0a90 	vmov	r0, s15
 80003dc:	f000 f804 	bl	80003e8 <__aeabi_f2ulz>
 80003e0:	4240      	negs	r0, r0
 80003e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003e6:	bd08      	pop	{r3, pc}

080003e8 <__aeabi_f2ulz>:
 80003e8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000418 <__aeabi_f2ulz+0x30>
 80003ec:	ee07 0a90 	vmov	s15, r0
 80003f0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000420 <__aeabi_f2ulz+0x38>
 80003f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80003f8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80003fc:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000400:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000404:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000408:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800040c:	ee16 1a10 	vmov	r1, s12
 8000410:	ee17 0a90 	vmov	r0, s15
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	00000000 	.word	0x00000000
 800041c:	3df00000 	.word	0x3df00000
 8000420:	00000000 	.word	0x00000000
 8000424:	41f00000 	.word	0x41f00000

08000428 <__udivmoddi4>:
 8000428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800042c:	9d08      	ldr	r5, [sp, #32]
 800042e:	4604      	mov	r4, r0
 8000430:	468e      	mov	lr, r1
 8000432:	2b00      	cmp	r3, #0
 8000434:	d14d      	bne.n	80004d2 <__udivmoddi4+0xaa>
 8000436:	428a      	cmp	r2, r1
 8000438:	4694      	mov	ip, r2
 800043a:	d969      	bls.n	8000510 <__udivmoddi4+0xe8>
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	b152      	cbz	r2, 8000458 <__udivmoddi4+0x30>
 8000442:	fa01 f302 	lsl.w	r3, r1, r2
 8000446:	f1c2 0120 	rsb	r1, r2, #32
 800044a:	fa20 f101 	lsr.w	r1, r0, r1
 800044e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000452:	ea41 0e03 	orr.w	lr, r1, r3
 8000456:	4094      	lsls	r4, r2
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	0c21      	lsrs	r1, r4, #16
 800045e:	fbbe f6f8 	udiv	r6, lr, r8
 8000462:	fa1f f78c 	uxth.w	r7, ip
 8000466:	fb08 e316 	mls	r3, r8, r6, lr
 800046a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800046e:	fb06 f107 	mul.w	r1, r6, r7
 8000472:	4299      	cmp	r1, r3
 8000474:	d90a      	bls.n	800048c <__udivmoddi4+0x64>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f106 30ff 	add.w	r0, r6, #4294967295
 800047e:	f080 811f 	bcs.w	80006c0 <__udivmoddi4+0x298>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 811c 	bls.w	80006c0 <__udivmoddi4+0x298>
 8000488:	3e02      	subs	r6, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f0f8 	udiv	r0, r3, r8
 8000494:	fb08 3310 	mls	r3, r8, r0, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb00 f707 	mul.w	r7, r0, r7
 80004a0:	42a7      	cmp	r7, r4
 80004a2:	d90a      	bls.n	80004ba <__udivmoddi4+0x92>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80004ac:	f080 810a 	bcs.w	80006c4 <__udivmoddi4+0x29c>
 80004b0:	42a7      	cmp	r7, r4
 80004b2:	f240 8107 	bls.w	80006c4 <__udivmoddi4+0x29c>
 80004b6:	4464      	add	r4, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004be:	1be4      	subs	r4, r4, r7
 80004c0:	2600      	movs	r6, #0
 80004c2:	b11d      	cbz	r5, 80004cc <__udivmoddi4+0xa4>
 80004c4:	40d4      	lsrs	r4, r2
 80004c6:	2300      	movs	r3, #0
 80004c8:	e9c5 4300 	strd	r4, r3, [r5]
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d909      	bls.n	80004ea <__udivmoddi4+0xc2>
 80004d6:	2d00      	cmp	r5, #0
 80004d8:	f000 80ef 	beq.w	80006ba <__udivmoddi4+0x292>
 80004dc:	2600      	movs	r6, #0
 80004de:	e9c5 0100 	strd	r0, r1, [r5]
 80004e2:	4630      	mov	r0, r6
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	fab3 f683 	clz	r6, r3
 80004ee:	2e00      	cmp	r6, #0
 80004f0:	d14a      	bne.n	8000588 <__udivmoddi4+0x160>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d302      	bcc.n	80004fc <__udivmoddi4+0xd4>
 80004f6:	4282      	cmp	r2, r0
 80004f8:	f200 80f9 	bhi.w	80006ee <__udivmoddi4+0x2c6>
 80004fc:	1a84      	subs	r4, r0, r2
 80004fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000502:	2001      	movs	r0, #1
 8000504:	469e      	mov	lr, r3
 8000506:	2d00      	cmp	r5, #0
 8000508:	d0e0      	beq.n	80004cc <__udivmoddi4+0xa4>
 800050a:	e9c5 4e00 	strd	r4, lr, [r5]
 800050e:	e7dd      	b.n	80004cc <__udivmoddi4+0xa4>
 8000510:	b902      	cbnz	r2, 8000514 <__udivmoddi4+0xec>
 8000512:	deff      	udf	#255	; 0xff
 8000514:	fab2 f282 	clz	r2, r2
 8000518:	2a00      	cmp	r2, #0
 800051a:	f040 8092 	bne.w	8000642 <__udivmoddi4+0x21a>
 800051e:	eba1 010c 	sub.w	r1, r1, ip
 8000522:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000526:	fa1f fe8c 	uxth.w	lr, ip
 800052a:	2601      	movs	r6, #1
 800052c:	0c20      	lsrs	r0, r4, #16
 800052e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000532:	fb07 1113 	mls	r1, r7, r3, r1
 8000536:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800053a:	fb0e f003 	mul.w	r0, lr, r3
 800053e:	4288      	cmp	r0, r1
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x12c>
 8000542:	eb1c 0101 	adds.w	r1, ip, r1
 8000546:	f103 38ff 	add.w	r8, r3, #4294967295
 800054a:	d202      	bcs.n	8000552 <__udivmoddi4+0x12a>
 800054c:	4288      	cmp	r0, r1
 800054e:	f200 80cb 	bhi.w	80006e8 <__udivmoddi4+0x2c0>
 8000552:	4643      	mov	r3, r8
 8000554:	1a09      	subs	r1, r1, r0
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb1 f0f7 	udiv	r0, r1, r7
 800055c:	fb07 1110 	mls	r1, r7, r0, r1
 8000560:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000564:	fb0e fe00 	mul.w	lr, lr, r0
 8000568:	45a6      	cmp	lr, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x156>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f100 31ff 	add.w	r1, r0, #4294967295
 8000574:	d202      	bcs.n	800057c <__udivmoddi4+0x154>
 8000576:	45a6      	cmp	lr, r4
 8000578:	f200 80bb 	bhi.w	80006f2 <__udivmoddi4+0x2ca>
 800057c:	4608      	mov	r0, r1
 800057e:	eba4 040e 	sub.w	r4, r4, lr
 8000582:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x9a>
 8000588:	f1c6 0720 	rsb	r7, r6, #32
 800058c:	40b3      	lsls	r3, r6
 800058e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000592:	ea4c 0c03 	orr.w	ip, ip, r3
 8000596:	fa20 f407 	lsr.w	r4, r0, r7
 800059a:	fa01 f306 	lsl.w	r3, r1, r6
 800059e:	431c      	orrs	r4, r3
 80005a0:	40f9      	lsrs	r1, r7
 80005a2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80005a6:	fa00 f306 	lsl.w	r3, r0, r6
 80005aa:	fbb1 f8f9 	udiv	r8, r1, r9
 80005ae:	0c20      	lsrs	r0, r4, #16
 80005b0:	fa1f fe8c 	uxth.w	lr, ip
 80005b4:	fb09 1118 	mls	r1, r9, r8, r1
 80005b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005bc:	fb08 f00e 	mul.w	r0, r8, lr
 80005c0:	4288      	cmp	r0, r1
 80005c2:	fa02 f206 	lsl.w	r2, r2, r6
 80005c6:	d90b      	bls.n	80005e0 <__udivmoddi4+0x1b8>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f108 3aff 	add.w	sl, r8, #4294967295
 80005d0:	f080 8088 	bcs.w	80006e4 <__udivmoddi4+0x2bc>
 80005d4:	4288      	cmp	r0, r1
 80005d6:	f240 8085 	bls.w	80006e4 <__udivmoddi4+0x2bc>
 80005da:	f1a8 0802 	sub.w	r8, r8, #2
 80005de:	4461      	add	r1, ip
 80005e0:	1a09      	subs	r1, r1, r0
 80005e2:	b2a4      	uxth	r4, r4
 80005e4:	fbb1 f0f9 	udiv	r0, r1, r9
 80005e8:	fb09 1110 	mls	r1, r9, r0, r1
 80005ec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80005f4:	458e      	cmp	lr, r1
 80005f6:	d908      	bls.n	800060a <__udivmoddi4+0x1e2>
 80005f8:	eb1c 0101 	adds.w	r1, ip, r1
 80005fc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000600:	d26c      	bcs.n	80006dc <__udivmoddi4+0x2b4>
 8000602:	458e      	cmp	lr, r1
 8000604:	d96a      	bls.n	80006dc <__udivmoddi4+0x2b4>
 8000606:	3802      	subs	r0, #2
 8000608:	4461      	add	r1, ip
 800060a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800060e:	fba0 9402 	umull	r9, r4, r0, r2
 8000612:	eba1 010e 	sub.w	r1, r1, lr
 8000616:	42a1      	cmp	r1, r4
 8000618:	46c8      	mov	r8, r9
 800061a:	46a6      	mov	lr, r4
 800061c:	d356      	bcc.n	80006cc <__udivmoddi4+0x2a4>
 800061e:	d053      	beq.n	80006c8 <__udivmoddi4+0x2a0>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x212>
 8000622:	ebb3 0208 	subs.w	r2, r3, r8
 8000626:	eb61 010e 	sbc.w	r1, r1, lr
 800062a:	fa01 f707 	lsl.w	r7, r1, r7
 800062e:	fa22 f306 	lsr.w	r3, r2, r6
 8000632:	40f1      	lsrs	r1, r6
 8000634:	431f      	orrs	r7, r3
 8000636:	e9c5 7100 	strd	r7, r1, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	f1c2 0320 	rsb	r3, r2, #32
 8000646:	40d8      	lsrs	r0, r3
 8000648:	fa0c fc02 	lsl.w	ip, ip, r2
 800064c:	fa21 f303 	lsr.w	r3, r1, r3
 8000650:	4091      	lsls	r1, r2
 8000652:	4301      	orrs	r1, r0
 8000654:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000658:	fa1f fe8c 	uxth.w	lr, ip
 800065c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000660:	fb07 3610 	mls	r6, r7, r0, r3
 8000664:	0c0b      	lsrs	r3, r1, #16
 8000666:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800066a:	fb00 f60e 	mul.w	r6, r0, lr
 800066e:	429e      	cmp	r6, r3
 8000670:	fa04 f402 	lsl.w	r4, r4, r2
 8000674:	d908      	bls.n	8000688 <__udivmoddi4+0x260>
 8000676:	eb1c 0303 	adds.w	r3, ip, r3
 800067a:	f100 38ff 	add.w	r8, r0, #4294967295
 800067e:	d22f      	bcs.n	80006e0 <__udivmoddi4+0x2b8>
 8000680:	429e      	cmp	r6, r3
 8000682:	d92d      	bls.n	80006e0 <__udivmoddi4+0x2b8>
 8000684:	3802      	subs	r0, #2
 8000686:	4463      	add	r3, ip
 8000688:	1b9b      	subs	r3, r3, r6
 800068a:	b289      	uxth	r1, r1
 800068c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000690:	fb07 3316 	mls	r3, r7, r6, r3
 8000694:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000698:	fb06 f30e 	mul.w	r3, r6, lr
 800069c:	428b      	cmp	r3, r1
 800069e:	d908      	bls.n	80006b2 <__udivmoddi4+0x28a>
 80006a0:	eb1c 0101 	adds.w	r1, ip, r1
 80006a4:	f106 38ff 	add.w	r8, r6, #4294967295
 80006a8:	d216      	bcs.n	80006d8 <__udivmoddi4+0x2b0>
 80006aa:	428b      	cmp	r3, r1
 80006ac:	d914      	bls.n	80006d8 <__udivmoddi4+0x2b0>
 80006ae:	3e02      	subs	r6, #2
 80006b0:	4461      	add	r1, ip
 80006b2:	1ac9      	subs	r1, r1, r3
 80006b4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80006b8:	e738      	b.n	800052c <__udivmoddi4+0x104>
 80006ba:	462e      	mov	r6, r5
 80006bc:	4628      	mov	r0, r5
 80006be:	e705      	b.n	80004cc <__udivmoddi4+0xa4>
 80006c0:	4606      	mov	r6, r0
 80006c2:	e6e3      	b.n	800048c <__udivmoddi4+0x64>
 80006c4:	4618      	mov	r0, r3
 80006c6:	e6f8      	b.n	80004ba <__udivmoddi4+0x92>
 80006c8:	454b      	cmp	r3, r9
 80006ca:	d2a9      	bcs.n	8000620 <__udivmoddi4+0x1f8>
 80006cc:	ebb9 0802 	subs.w	r8, r9, r2
 80006d0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80006d4:	3801      	subs	r0, #1
 80006d6:	e7a3      	b.n	8000620 <__udivmoddi4+0x1f8>
 80006d8:	4646      	mov	r6, r8
 80006da:	e7ea      	b.n	80006b2 <__udivmoddi4+0x28a>
 80006dc:	4620      	mov	r0, r4
 80006de:	e794      	b.n	800060a <__udivmoddi4+0x1e2>
 80006e0:	4640      	mov	r0, r8
 80006e2:	e7d1      	b.n	8000688 <__udivmoddi4+0x260>
 80006e4:	46d0      	mov	r8, sl
 80006e6:	e77b      	b.n	80005e0 <__udivmoddi4+0x1b8>
 80006e8:	3b02      	subs	r3, #2
 80006ea:	4461      	add	r1, ip
 80006ec:	e732      	b.n	8000554 <__udivmoddi4+0x12c>
 80006ee:	4630      	mov	r0, r6
 80006f0:	e709      	b.n	8000506 <__udivmoddi4+0xde>
 80006f2:	4464      	add	r4, ip
 80006f4:	3802      	subs	r0, #2
 80006f6:	e742      	b.n	800057e <__udivmoddi4+0x156>

080006f8 <__aeabi_idiv0>:
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop

080006fc <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000700:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <MX_CRC_Init+0x3c>)
 8000702:	4a0e      	ldr	r2, [pc, #56]	; (800073c <MX_CRC_Init+0x40>)
 8000704:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_CRC_Init+0x3c>)
 8000708:	2200      	movs	r2, #0
 800070a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800070c:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <MX_CRC_Init+0x3c>)
 800070e:	2200      	movs	r2, #0
 8000710:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_CRC_Init+0x3c>)
 8000714:	2200      	movs	r2, #0
 8000716:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000718:	4b07      	ldr	r3, [pc, #28]	; (8000738 <MX_CRC_Init+0x3c>)
 800071a:	2200      	movs	r2, #0
 800071c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_CRC_Init+0x3c>)
 8000720:	2201      	movs	r2, #1
 8000722:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000724:	4804      	ldr	r0, [pc, #16]	; (8000738 <MX_CRC_Init+0x3c>)
 8000726:	f004 f96f 	bl	8004a08 <HAL_CRC_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000730:	f001 f9aa 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	2400827c 	.word	0x2400827c
 800073c:	40023000 	.word	0x40023000

08000740 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a0b      	ldr	r2, [pc, #44]	; (800077c <HAL_CRC_MspInit+0x3c>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d10e      	bne.n	8000770 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <HAL_CRC_MspInit+0x40>)
 8000754:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000758:	4a09      	ldr	r2, [pc, #36]	; (8000780 <HAL_CRC_MspInit+0x40>)
 800075a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800075e:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000762:	4b07      	ldr	r3, [pc, #28]	; (8000780 <HAL_CRC_MspInit+0x40>)
 8000764:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000770:	bf00      	nop
 8000772:	3714      	adds	r7, #20
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	40023000 	.word	0x40023000
 8000780:	58024400 	.word	0x58024400

08000784 <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */
//
  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000788:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <MX_DCMI_Init+0x60>)
 800078a:	4a17      	ldr	r2, [pc, #92]	; (80007e8 <MX_DCMI_Init+0x64>)
 800078c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800078e:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <MX_DCMI_Init+0x60>)
 8000790:	2200      	movs	r2, #0
 8000792:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000794:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <MX_DCMI_Init+0x60>)
 8000796:	2220      	movs	r2, #32
 8000798:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 800079a:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <MX_DCMI_Init+0x60>)
 800079c:	2280      	movs	r2, #128	; 0x80
 800079e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 80007a0:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <MX_DCMI_Init+0x60>)
 80007a2:	2240      	movs	r2, #64	; 0x40
 80007a4:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80007a6:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_DCMI_Init+0x60>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80007ac:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <MX_DCMI_Init+0x60>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_DCMI_Init+0x60>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80007b8:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <MX_DCMI_Init+0x60>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_DCMI_Init+0x60>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80007c4:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <MX_DCMI_Init+0x60>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_DCMI_Init+0x60>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80007d0:	4804      	ldr	r0, [pc, #16]	; (80007e4 <MX_DCMI_Init+0x60>)
 80007d2:	f004 fa0b 	bl	8004bec <HAL_DCMI_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80007dc:	f001 f954 	bl	8001a88 <Error_Handler>
//  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
//  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
//  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
  /* USER CODE END DCMI_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	240082a0 	.word	0x240082a0
 80007e8:	48020000 	.word	0x48020000

080007ec <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08e      	sub	sp, #56	; 0x38
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a76      	ldr	r2, [pc, #472]	; (80009e4 <HAL_DCMI_MspInit+0x1f8>)
 800080a:	4293      	cmp	r3, r2
 800080c:	f040 80e5 	bne.w	80009da <HAL_DCMI_MspInit+0x1ee>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */
//
  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000810:	4b75      	ldr	r3, [pc, #468]	; (80009e8 <HAL_DCMI_MspInit+0x1fc>)
 8000812:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8000816:	4a74      	ldr	r2, [pc, #464]	; (80009e8 <HAL_DCMI_MspInit+0x1fc>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 8000820:	4b71      	ldr	r3, [pc, #452]	; (80009e8 <HAL_DCMI_MspInit+0x1fc>)
 8000822:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	623b      	str	r3, [r7, #32]
 800082c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	4b6e      	ldr	r3, [pc, #440]	; (80009e8 <HAL_DCMI_MspInit+0x1fc>)
 8000830:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000834:	4a6c      	ldr	r2, [pc, #432]	; (80009e8 <HAL_DCMI_MspInit+0x1fc>)
 8000836:	f043 0302 	orr.w	r3, r3, #2
 800083a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800083e:	4b6a      	ldr	r3, [pc, #424]	; (80009e8 <HAL_DCMI_MspInit+0x1fc>)
 8000840:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000844:	f003 0302 	and.w	r3, r3, #2
 8000848:	61fb      	str	r3, [r7, #28]
 800084a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800084c:	4b66      	ldr	r3, [pc, #408]	; (80009e8 <HAL_DCMI_MspInit+0x1fc>)
 800084e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000852:	4a65      	ldr	r2, [pc, #404]	; (80009e8 <HAL_DCMI_MspInit+0x1fc>)
 8000854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000858:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800085c:	4b62      	ldr	r3, [pc, #392]	; (80009e8 <HAL_DCMI_MspInit+0x1fc>)
 800085e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000866:	61bb      	str	r3, [r7, #24]
 8000868:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800086a:	4b5f      	ldr	r3, [pc, #380]	; (80009e8 <HAL_DCMI_MspInit+0x1fc>)
 800086c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000870:	4a5d      	ldr	r2, [pc, #372]	; (80009e8 <HAL_DCMI_MspInit+0x1fc>)
 8000872:	f043 0308 	orr.w	r3, r3, #8
 8000876:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800087a:	4b5b      	ldr	r3, [pc, #364]	; (80009e8 <HAL_DCMI_MspInit+0x1fc>)
 800087c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000880:	f003 0308 	and.w	r3, r3, #8
 8000884:	617b      	str	r3, [r7, #20]
 8000886:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000888:	4b57      	ldr	r3, [pc, #348]	; (80009e8 <HAL_DCMI_MspInit+0x1fc>)
 800088a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800088e:	4a56      	ldr	r2, [pc, #344]	; (80009e8 <HAL_DCMI_MspInit+0x1fc>)
 8000890:	f043 0304 	orr.w	r3, r3, #4
 8000894:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000898:	4b53      	ldr	r3, [pc, #332]	; (80009e8 <HAL_DCMI_MspInit+0x1fc>)
 800089a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800089e:	f003 0304 	and.w	r3, r3, #4
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	4b50      	ldr	r3, [pc, #320]	; (80009e8 <HAL_DCMI_MspInit+0x1fc>)
 80008a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ac:	4a4e      	ldr	r2, [pc, #312]	; (80009e8 <HAL_DCMI_MspInit+0x1fc>)
 80008ae:	f043 0301 	orr.w	r3, r3, #1
 80008b2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008b6:	4b4c      	ldr	r3, [pc, #304]	; (80009e8 <HAL_DCMI_MspInit+0x1fc>)
 80008b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008bc:	f003 0301 	and.w	r3, r3, #1
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	68fb      	ldr	r3, [r7, #12]
    PC7     ------> DCMI_D1
    PC6     ------> DCMI_D0
    PA4     ------> DCMI_HSYNC
    PA6     ------> DCMI_PIXCLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_7;
 80008c4:	f44f 7360 	mov.w	r3, #896	; 0x380
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008d6:	230d      	movs	r3, #13
 80008d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008de:	4619      	mov	r1, r3
 80008e0:	4842      	ldr	r0, [pc, #264]	; (80009ec <HAL_DCMI_MspInit+0x200>)
 80008e2:	f008 fbbd 	bl	8009060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008f8:	230d      	movs	r3, #13
 80008fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000900:	4619      	mov	r1, r3
 8000902:	483b      	ldr	r0, [pc, #236]	; (80009f0 <HAL_DCMI_MspInit+0x204>)
 8000904:	f008 fbac 	bl	8009060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000908:	2308      	movs	r3, #8
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000918:	230d      	movs	r3, #13
 800091a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800091c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000920:	4619      	mov	r1, r3
 8000922:	4834      	ldr	r0, [pc, #208]	; (80009f4 <HAL_DCMI_MspInit+0x208>)
 8000924:	f008 fb9c 	bl	8009060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6;
 8000928:	f44f 632c 	mov.w	r3, #2752	; 0xac0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	2302      	movs	r3, #2
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800093a:	230d      	movs	r3, #13
 800093c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800093e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000942:	4619      	mov	r1, r3
 8000944:	482c      	ldr	r0, [pc, #176]	; (80009f8 <HAL_DCMI_MspInit+0x20c>)
 8000946:	f008 fb8b 	bl	8009060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800094a:	2350      	movs	r3, #80	; 0x50
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800095a:	230d      	movs	r3, #13
 800095c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000962:	4619      	mov	r1, r3
 8000964:	4825      	ldr	r0, [pc, #148]	; (80009fc <HAL_DCMI_MspInit+0x210>)
 8000966:	f008 fb7b 	bl	8009060 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 800096a:	4b25      	ldr	r3, [pc, #148]	; (8000a00 <HAL_DCMI_MspInit+0x214>)
 800096c:	4a25      	ldr	r2, [pc, #148]	; (8000a04 <HAL_DCMI_MspInit+0x218>)
 800096e:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI_PSSI;
 8000970:	4b23      	ldr	r3, [pc, #140]	; (8000a00 <HAL_DCMI_MspInit+0x214>)
 8000972:	224b      	movs	r2, #75	; 0x4b
 8000974:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000976:	4b22      	ldr	r3, [pc, #136]	; (8000a00 <HAL_DCMI_MspInit+0x214>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 800097c:	4b20      	ldr	r3, [pc, #128]	; (8000a00 <HAL_DCMI_MspInit+0x214>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8000982:	4b1f      	ldr	r3, [pc, #124]	; (8000a00 <HAL_DCMI_MspInit+0x214>)
 8000984:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000988:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800098a:	4b1d      	ldr	r3, [pc, #116]	; (8000a00 <HAL_DCMI_MspInit+0x214>)
 800098c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000990:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000992:	4b1b      	ldr	r3, [pc, #108]	; (8000a00 <HAL_DCMI_MspInit+0x214>)
 8000994:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000998:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 800099a:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <HAL_DCMI_MspInit+0x214>)
 800099c:	2200      	movs	r2, #0
 800099e:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 80009a0:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <HAL_DCMI_MspInit+0x214>)
 80009a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009a6:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009a8:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <HAL_DCMI_MspInit+0x214>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80009ae:	4814      	ldr	r0, [pc, #80]	; (8000a00 <HAL_DCMI_MspInit+0x214>)
 80009b0:	f004 fbea 	bl	8005188 <HAL_DMA_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <HAL_DCMI_MspInit+0x1d2>
    {
      Error_Handler();
 80009ba:	f001 f865 	bl	8001a88 <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a0f      	ldr	r2, [pc, #60]	; (8000a00 <HAL_DCMI_MspInit+0x214>)
 80009c2:	649a      	str	r2, [r3, #72]	; 0x48
 80009c4:	4a0e      	ldr	r2, [pc, #56]	; (8000a00 <HAL_DCMI_MspInit+0x214>)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_PSSI_IRQn, 0, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2100      	movs	r1, #0
 80009ce:	204e      	movs	r0, #78	; 0x4e
 80009d0:	f003 ffe5 	bl	800499e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_PSSI_IRQn);
 80009d4:	204e      	movs	r0, #78	; 0x4e
 80009d6:	f003 fffc 	bl	80049d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */
//
  /* USER CODE END DCMI_MspInit 1 */
  }
}
 80009da:	bf00      	nop
 80009dc:	3738      	adds	r7, #56	; 0x38
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	48020000 	.word	0x48020000
 80009e8:	58024400 	.word	0x58024400
 80009ec:	58020400 	.word	0x58020400
 80009f0:	58021800 	.word	0x58021800
 80009f4:	58020c00 	.word	0x58020c00
 80009f8:	58020800 	.word	0x58020800
 80009fc:	58020000 	.word	0x58020000
 8000a00:	240082f0 	.word	0x240082f0
 8000a04:	40020428 	.word	0x40020428

08000a08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <MX_DMA_Init+0x3c>)
 8000a10:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000a14:	4a0b      	ldr	r2, [pc, #44]	; (8000a44 <MX_DMA_Init+0x3c>)
 8000a16:	f043 0302 	orr.w	r3, r3, #2
 8000a1a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_DMA_Init+0x3c>)
 8000a20:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000a24:	f003 0302 	and.w	r3, r3, #2
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2100      	movs	r1, #0
 8000a30:	2039      	movs	r0, #57	; 0x39
 8000a32:	f003 ffb4 	bl	800499e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000a36:	2039      	movs	r0, #57	; 0x39
 8000a38:	f003 ffcb 	bl	80049d2 <HAL_NVIC_EnableIRQ>

}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	58024400 	.word	0x58024400

08000a48 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000a4c:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <MX_DMA2D_Init+0x70>)
 8000a4e:	4a1b      	ldr	r2, [pc, #108]	; (8000abc <MX_DMA2D_Init+0x74>)
 8000a50:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M_PFC;
 8000a52:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <MX_DMA2D_Init+0x70>)
 8000a54:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a58:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000a5a:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <MX_DMA2D_Init+0x70>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000a60:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <MX_DMA2D_Init+0x70>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000a66:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <MX_DMA2D_Init+0x70>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <MX_DMA2D_Init+0x70>)
 8000a6e:	2202      	movs	r2, #2
 8000a70:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_DMA2D_Init+0x70>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_DMA2D_Init+0x70>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_DMA2D_Init+0x70>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_DMA2D_Init+0x70>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <MX_DMA2D_Init+0x70>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a90:	4809      	ldr	r0, [pc, #36]	; (8000ab8 <MX_DMA2D_Init+0x70>)
 8000a92:	f007 fa59 	bl	8007f48 <HAL_DMA2D_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_DMA2D_Init+0x58>
  {
    Error_Handler();
 8000a9c:	f000 fff4 	bl	8001a88 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_DMA2D_Init+0x70>)
 8000aa4:	f007 fcd8 	bl	8008458 <HAL_DMA2D_ConfigLayer>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_DMA2D_Init+0x6a>
  {
    Error_Handler();
 8000aae:	f000 ffeb 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	24008368 	.word	0x24008368
 8000abc:	52001000 	.word	0x52001000

08000ac0 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a0e      	ldr	r2, [pc, #56]	; (8000b08 <HAL_DMA2D_MspInit+0x48>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d116      	bne.n	8000b00 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <HAL_DMA2D_MspInit+0x4c>)
 8000ad4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000ad8:	4a0c      	ldr	r2, [pc, #48]	; (8000b0c <HAL_DMA2D_MspInit+0x4c>)
 8000ada:	f043 0310 	orr.w	r3, r3, #16
 8000ade:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <HAL_DMA2D_MspInit+0x4c>)
 8000ae4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000ae8:	f003 0310 	and.w	r3, r3, #16
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2100      	movs	r1, #0
 8000af4:	205a      	movs	r0, #90	; 0x5a
 8000af6:	f003 ff52 	bl	800499e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000afa:	205a      	movs	r0, #90	; 0x5a
 8000afc:	f003 ff69 	bl	80049d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000b00:	bf00      	nop
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	52001000 	.word	0x52001000
 8000b0c:	58024400 	.word	0x58024400

08000b10 <DMA2D_Convert>:
  }
}

/* USER CODE BEGIN 1 */
void DMA2D_Convert(uint8_t* source, uint32_t* destination)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af02      	add	r7, sp, #8
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  status = HAL_DMA2D_Start(&hdma2d, (uint32_t)source,
 8000b1a:	6879      	ldr	r1, [r7, #4]
 8000b1c:	683a      	ldr	r2, [r7, #0]
 8000b1e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b28:	480c      	ldr	r0, [pc, #48]	; (8000b5c <DMA2D_Convert+0x4c>)
 8000b2a:	f007 fa71 	bl	8008010 <HAL_DMA2D_Start>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	73fb      	strb	r3, [r7, #15]
                        (uint32_t)destination, LTDC_WIDTH, LTDC_HEIGHT);
  if (status != HAL_OK) {
 8000b32:	7bfb      	ldrb	r3, [r7, #15]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <DMA2D_Convert+0x2c>
    Error_Handler();
 8000b38:	f000 ffa6 	bl	8001a88 <Error_Handler>
  }

  status = HAL_DMA2D_PollForTransfer(&hdma2d, 1000);
 8000b3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b40:	4806      	ldr	r0, [pc, #24]	; (8000b5c <DMA2D_Convert+0x4c>)
 8000b42:	f007 fa90 	bl	8008066 <HAL_DMA2D_PollForTransfer>
 8000b46:	4603      	mov	r3, r0
 8000b48:	73fb      	strb	r3, [r7, #15]
  if (status != HAL_OK) {
 8000b4a:	7bfb      	ldrb	r3, [r7, #15]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <DMA2D_Convert+0x44>
    Error_Handler();
 8000b50:	f000 ff9a 	bl	8001a88 <Error_Handler>
  }
}
 8000b54:	bf00      	nop
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	24008368 	.word	0x24008368

08000b60 <drawVLine>:
/* Includes ------------------------------------------------------------------*/
#include "draw.h"

void drawVLine(uint32_t *buffer, int32_t x, int32_t y_start, int32_t y_end){
 8000b60:	b480      	push	{r7}
 8000b62:	b087      	sub	sp, #28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
 8000b6c:	603b      	str	r3, [r7, #0]
	if(y_start<0){
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	da01      	bge.n	8000b78 <drawVLine+0x18>
		y_start=0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	607b      	str	r3, [r7, #4]
	}
	if(y_end>LTDC_HEIGHT){
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8000b7e:	dd02      	ble.n	8000b86 <drawVLine+0x26>
		y_end=LTDC_HEIGHT;
 8000b80:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000b84:	603b      	str	r3, [r7, #0]
	}
	for(uint32_t i = y_start; i<y_end; i++){
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	617b      	str	r3, [r7, #20]
 8000b8a:	e010      	b.n	8000bae <drawVLine+0x4e>
			buffer[x+i*LTDC_WIDTH] = COLOR;
 8000b8c:	697a      	ldr	r2, [r7, #20]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	011b      	lsls	r3, r3, #4
 8000b92:	1a9b      	subs	r3, r3, r2
 8000b94:	015b      	lsls	r3, r3, #5
 8000b96:	461a      	mov	r2, r3
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8000ba6:	601a      	str	r2, [r3, #0]
	for(uint32_t i = y_start; i<y_end; i++){
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	3301      	adds	r3, #1
 8000bac:	617b      	str	r3, [r7, #20]
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	697a      	ldr	r2, [r7, #20]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d3ea      	bcc.n	8000b8c <drawVLine+0x2c>
	}
}
 8000bb6:	bf00      	nop
 8000bb8:	bf00      	nop
 8000bba:	371c      	adds	r7, #28
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <drawHLine>:
void drawHLine(uint32_t *buffer, int32_t x_start, int32_t x_end, int32_t y){
 8000bc4:	b480      	push	{r7}
 8000bc6:	b087      	sub	sp, #28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
 8000bd0:	603b      	str	r3, [r7, #0]
	if(x_start<0){
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	da01      	bge.n	8000bdc <drawHLine+0x18>
		x_start=0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60bb      	str	r3, [r7, #8]
	}
	if(x_end>LTDC_WIDTH){
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000be2:	dd02      	ble.n	8000bea <drawHLine+0x26>
		x_end=LTDC_WIDTH;
 8000be4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000be8:	607b      	str	r3, [r7, #4]
	}
	x_end=x_end+x_end%2;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	bfb8      	it	lt
 8000bf4:	425b      	neglt	r3, r3
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	607b      	str	r3, [r7, #4]
	for(uint32_t i = x_start; i<x_end; i++){
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	e01f      	b.n	8000c42 <drawHLine+0x7e>
		buffer[i+LTDC_WIDTH*y] = COLOR;
 8000c02:	683a      	ldr	r2, [r7, #0]
 8000c04:	4613      	mov	r3, r2
 8000c06:	011b      	lsls	r3, r3, #4
 8000c08:	1a9b      	subs	r3, r3, r2
 8000c0a:	015b      	lsls	r3, r3, #5
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	4413      	add	r3, r2
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	68fa      	ldr	r2, [r7, #12]
 8000c16:	4413      	add	r3, r2
 8000c18:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8000c1c:	601a      	str	r2, [r3, #0]
		buffer[i+(LTDC_WIDTH+LTDC_WIDTH*y)] = COLOR;
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	1c5a      	adds	r2, r3, #1
 8000c22:	4613      	mov	r3, r2
 8000c24:	011b      	lsls	r3, r3, #4
 8000c26:	1a9b      	subs	r3, r3, r2
 8000c28:	015b      	lsls	r3, r3, #5
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	4413      	add	r3, r2
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	4413      	add	r3, r2
 8000c36:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8000c3a:	601a      	str	r2, [r3, #0]
	for(uint32_t i = x_start; i<x_end; i++){
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	697a      	ldr	r2, [r7, #20]
 8000c46:	429a      	cmp	r2, r3
 8000c48:	d3db      	bcc.n	8000c02 <drawHLine+0x3e>
	}
}
 8000c4a:	bf00      	nop
 8000c4c:	bf00      	nop
 8000c4e:	371c      	adds	r7, #28
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <drawRectangle>:
void drawRectangle(uint32_t *buffer, int32_t x_start, int32_t x_end, int32_t y_start, int32_t y_end){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
 8000c64:	603b      	str	r3, [r7, #0]
	drawVLine(buffer, x_start, y_start, y_end);
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	683a      	ldr	r2, [r7, #0]
 8000c6a:	68b9      	ldr	r1, [r7, #8]
 8000c6c:	68f8      	ldr	r0, [r7, #12]
 8000c6e:	f7ff ff77 	bl	8000b60 <drawVLine>
	drawVLine(buffer, x_end, y_start, y_end);
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	683a      	ldr	r2, [r7, #0]
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	68f8      	ldr	r0, [r7, #12]
 8000c7a:	f7ff ff71 	bl	8000b60 <drawVLine>
	drawHLine(buffer, x_start, x_end, y_start);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	68b9      	ldr	r1, [r7, #8]
 8000c84:	68f8      	ldr	r0, [r7, #12]
 8000c86:	f7ff ff9d 	bl	8000bc4 <drawHLine>
	drawHLine(buffer, x_start, x_end, y_end);
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	68b9      	ldr	r1, [r7, #8]
 8000c90:	68f8      	ldr	r0, [r7, #12]
 8000c92:	f7ff ff97 	bl	8000bc4 <drawHLine>
}
 8000c96:	bf00      	nop
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram2;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08c      	sub	sp, #48	; 0x30
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]
 8000cb4:	611a      	str	r2, [r3, #16]
 8000cb6:	615a      	str	r2, [r3, #20]
 8000cb8:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 8000cba:	4b3c      	ldr	r3, [pc, #240]	; (8000dac <MX_FMC_Init+0x10c>)
 8000cbc:	4a3c      	ldr	r2, [pc, #240]	; (8000db0 <MX_FMC_Init+0x110>)
 8000cbe:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 8000cc0:	4b3a      	ldr	r3, [pc, #232]	; (8000dac <MX_FMC_Init+0x10c>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000cc6:	4b39      	ldr	r3, [pc, #228]	; (8000dac <MX_FMC_Init+0x10c>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000ccc:	4b37      	ldr	r3, [pc, #220]	; (8000dac <MX_FMC_Init+0x10c>)
 8000cce:	2204      	movs	r2, #4
 8000cd0:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000cd2:	4b36      	ldr	r3, [pc, #216]	; (8000dac <MX_FMC_Init+0x10c>)
 8000cd4:	2210      	movs	r2, #16
 8000cd6:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000cd8:	4b34      	ldr	r3, [pc, #208]	; (8000dac <MX_FMC_Init+0x10c>)
 8000cda:	2240      	movs	r2, #64	; 0x40
 8000cdc:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000cde:	4b33      	ldr	r3, [pc, #204]	; (8000dac <MX_FMC_Init+0x10c>)
 8000ce0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ce4:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000ce6:	4b31      	ldr	r3, [pc, #196]	; (8000dac <MX_FMC_Init+0x10c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000cec:	4b2f      	ldr	r3, [pc, #188]	; (8000dac <MX_FMC_Init+0x10c>)
 8000cee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cf2:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000cf4:	4b2d      	ldr	r3, [pc, #180]	; (8000dac <MX_FMC_Init+0x10c>)
 8000cf6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cfa:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 8000cfc:	4b2b      	ldr	r3, [pc, #172]	; (8000dac <MX_FMC_Init+0x10c>)
 8000cfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d02:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000d04:	2302      	movs	r3, #2
 8000d06:	617b      	str	r3, [r7, #20]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000d08:	2307      	movs	r3, #7
 8000d0a:	61bb      	str	r3, [r7, #24]
  SdramTiming.SelfRefreshTime = 5;
 8000d0c:	2305      	movs	r3, #5
 8000d0e:	61fb      	str	r3, [r7, #28]
  SdramTiming.RowCycleDelay = 6;
 8000d10:	2306      	movs	r3, #6
 8000d12:	623b      	str	r3, [r7, #32]
  SdramTiming.WriteRecoveryTime = 3;
 8000d14:	2303      	movs	r3, #3
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.RPDelay = 2;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.RCDDelay = 2;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	4619      	mov	r1, r3
 8000d26:	4821      	ldr	r0, [pc, #132]	; (8000dac <MX_FMC_Init+0x10c>)
 8000d28:	f00c fdee 	bl	800d908 <HAL_SDRAM_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_FMC_Init+0x96>
  {
    Error_Handler( );
 8000d32:	f000 fea9 	bl	8001a88 <Error_Handler>

  /* USER CODE BEGIN FMC_Init 2 */
  FMC_SDRAM_CommandTypeDef Command;
  /* Step 1 and Step 2 already done in HAL_SDRAM_Init() */
  /* Step 3: Configure a clock configuration enable command */
	Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE; /* Set MODE bits to "001" */
 8000d36:	2301      	movs	r3, #1
 8000d38:	607b      	str	r3, [r7, #4]
	Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2; /* configure the Target Bank bits */
 8000d3a:	2308      	movs	r3, #8
 8000d3c:	60bb      	str	r3, [r7, #8]
	Command.AutoRefreshNumber      = 1;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	60fb      	str	r3, [r7, #12]
	Command.ModeRegisterDefinition = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
	HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4817      	ldr	r0, [pc, #92]	; (8000dac <MX_FMC_Init+0x10c>)
 8000d50:	f00c fe16 	bl	800d980 <HAL_SDRAM_SendCommand>
	HAL_Delay(1); /* Step 4: Insert 100 us minimum delay - Min HAL Delay is 1ms */
 8000d54:	2001      	movs	r0, #1
 8000d56:	f003 fd23 	bl	80047a0 <HAL_Delay>
	/* Step 5: Configure a PALL (precharge all) command */
	Command.CommandMode            = FMC_SDRAM_CMD_PALL; /* Set MODE bits to "010" */
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	607b      	str	r3, [r7, #4]
	HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000d64:	4619      	mov	r1, r3
 8000d66:	4811      	ldr	r0, [pc, #68]	; (8000dac <MX_FMC_Init+0x10c>)
 8000d68:	f00c fe0a 	bl	800d980 <HAL_SDRAM_SendCommand>
	/* Step 6: Configure an Auto Refresh command */
	Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE; /* Set MODE bits to "011" */
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	607b      	str	r3, [r7, #4]
	Command.AutoRefreshNumber      = 2;
 8000d70:	2302      	movs	r3, #2
 8000d72:	60fb      	str	r3, [r7, #12]
	HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	480b      	ldr	r0, [pc, #44]	; (8000dac <MX_FMC_Init+0x10c>)
 8000d7e:	f00c fdff 	bl	800d980 <HAL_SDRAM_SendCommand>
	/* Step 7: Program the external memory mode register */
	Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;/*set the MODE bits to "100" */
 8000d82:	2304      	movs	r3, #4
 8000d84:	607b      	str	r3, [r7, #4]
	Command.ModeRegisterDefinition =  (uint32_t)0 | 0<<3 | 2<<4 | 0<<7 | 1<<9;
 8000d86:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000d8a:	613b      	str	r3, [r7, #16]
	HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000d92:	4619      	mov	r1, r3
 8000d94:	4805      	ldr	r0, [pc, #20]	; (8000dac <MX_FMC_Init+0x10c>)
 8000d96:	f00c fdf3 	bl	800d980 <HAL_SDRAM_SendCommand>
	/* Step 8: Set the refresh rate counter - refer to section SDRAM refresh timer register in RM0455 */
	/* Set the device refresh rate
	* COUNT = [(SDRAM self refresh time / number of row) x  SDRAM CLK] – 20
					= [(64ms/4096) * 200MHz] - 20 ~= 3115 */
	HAL_SDRAM_ProgramRefreshRate(&hsdram2, 3115);
 8000d9a:	f640 412b 	movw	r1, #3115	; 0xc2b
 8000d9e:	4803      	ldr	r0, [pc, #12]	; (8000dac <MX_FMC_Init+0x10c>)
 8000da0:	f00c fe23 	bl	800d9ea <HAL_SDRAM_ProgramRefreshRate>
  /* USER CODE END FMC_Init 2 */
}
 8000da4:	bf00      	nop
 8000da6:	3730      	adds	r7, #48	; 0x30
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	240083d0 	.word	0x240083d0
 8000db0:	52004140 	.word	0x52004140

08000db4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b0b8      	sub	sp, #224	; 0xe0
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dba:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
 8000dc8:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000dca:	4b58      	ldr	r3, [pc, #352]	; (8000f2c <HAL_FMC_MspInit+0x178>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	f040 80a7 	bne.w	8000f22 <HAL_FMC_MspInit+0x16e>
    return;
  }
  FMC_Initialized = 1;
 8000dd4:	4b55      	ldr	r3, [pc, #340]	; (8000f2c <HAL_FMC_MspInit+0x178>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dda:	f107 0308 	add.w	r3, r7, #8
 8000dde:	22c0      	movs	r2, #192	; 0xc0
 8000de0:	2100      	movs	r1, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f01a fbf8 	bl	801b5d8 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000de8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000dec:	f04f 0300 	mov.w	r3, #0
 8000df0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.PLL2.PLL2M = 12;
 8000df4:	230c      	movs	r3, #12
 8000df6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2N = 200;
 8000df8:	23c8      	movs	r3, #200	; 0xc8
 8000dfa:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000e00:	2302      	movs	r3, #2
 8000e02:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000e04:	2302      	movs	r3, #2
 8000e06:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000e08:	2340      	movs	r3, #64	; 0x40
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 8000e10:	2302      	movs	r3, #2
 8000e12:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e14:	f107 0308 	add.w	r3, r7, #8
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f00a fe77 	bl	800bb0c <HAL_RCCEx_PeriphCLKConfig>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <HAL_FMC_MspInit+0x74>
    {
      Error_Handler();
 8000e24:	f000 fe30 	bl	8001a88 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000e28:	4b41      	ldr	r3, [pc, #260]	; (8000f30 <HAL_FMC_MspInit+0x17c>)
 8000e2a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000e2e:	4a40      	ldr	r2, [pc, #256]	; (8000f30 <HAL_FMC_MspInit+0x17c>)
 8000e30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e34:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8000e38:	4b3d      	ldr	r3, [pc, #244]	; (8000f30 <HAL_FMC_MspInit+0x17c>)
 8000e3a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000e3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
  PE8   ------> FMC_D5
  PE11   ------> FMC_D8
  PH7   ------> FMC_SDCKE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A15_Pin|A14_Pin
 8000e46:	f248 1333 	movw	r3, #33075	; 0x8133
 8000e4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |A11_Pin|A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e60:	230c      	movs	r3, #12
 8000e62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e66:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4831      	ldr	r0, [pc, #196]	; (8000f34 <HAL_FMC_MspInit+0x180>)
 8000e6e:	f008 f8f7 	bl	8009060 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D3_Pin|D2_Pin|D0_Pin|D1_Pin
 8000e72:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000e76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |D13_Pin|D15_Pin|D14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e86:	2303      	movs	r3, #3
 8000e88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e8c:	230c      	movs	r3, #12
 8000e8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e92:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e96:	4619      	mov	r1, r3
 8000e98:	4827      	ldr	r0, [pc, #156]	; (8000f38 <HAL_FMC_MspInit+0x184>)
 8000e9a:	f008 f8e1 	bl	8009060 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL0_Pin|FMC_NBL1_Pin|D9_Pin|D4_Pin
 8000e9e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000ea2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |D10_Pin|D11_Pin|D7_Pin|D6_Pin
                          |D12_Pin|D5_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000eb8:	230c      	movs	r3, #12
 8000eba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ebe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	481d      	ldr	r0, [pc, #116]	; (8000f3c <HAL_FMC_MspInit+0x188>)
 8000ec6:	f008 f8cb 	bl	8009060 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A1_Pin|A0_Pin|A2_Pin|A4_Pin
 8000eca:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000ece:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |A3_Pin|A5_Pin|A7_Pin|SDNRAS_Pin
                          |A9_Pin|A8_Pin|A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ee4:	230c      	movs	r3, #12
 8000ee6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000eea:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4813      	ldr	r0, [pc, #76]	; (8000f40 <HAL_FMC_MspInit+0x18c>)
 8000ef2:	f008 f8b5 	bl	8009060 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNE1_Pin|SDNWE_Pin|SDCKE1_Pin;
 8000ef6:	23e0      	movs	r3, #224	; 0xe0
 8000ef8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f0e:	230c      	movs	r3, #12
 8000f10:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f14:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f18:	4619      	mov	r1, r3
 8000f1a:	480a      	ldr	r0, [pc, #40]	; (8000f44 <HAL_FMC_MspInit+0x190>)
 8000f1c:	f008 f8a0 	bl	8009060 <HAL_GPIO_Init>
 8000f20:	e000      	b.n	8000f24 <HAL_FMC_MspInit+0x170>
    return;
 8000f22:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000f24:	37e0      	adds	r7, #224	; 0xe0
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	24008404 	.word	0x24008404
 8000f30:	58024400 	.word	0x58024400
 8000f34:	58021800 	.word	0x58021800
 8000f38:	58020c00 	.word	0x58020c00
 8000f3c:	58021000 	.word	0x58021000
 8000f40:	58021400 	.word	0x58021400
 8000f44:	58021c00 	.word	0x58021c00

08000f48 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000f50:	f7ff ff30 	bl	8000db4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <MX_GPIO_Init>:
     PA0   ------> I2S6_WS
     PA3   ------> I2S6_MCK
     PB2   ------> OCTOSPIM_P1_CLK
*/
void MX_GPIO_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b090      	sub	sp, #64	; 0x40
 8000f60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	60da      	str	r2, [r3, #12]
 8000f70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f72:	4bc0      	ldr	r3, [pc, #768]	; (8001274 <MX_GPIO_Init+0x318>)
 8000f74:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f78:	4abe      	ldr	r2, [pc, #760]	; (8001274 <MX_GPIO_Init+0x318>)
 8000f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f7e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f82:	4bbc      	ldr	r3, [pc, #752]	; (8001274 <MX_GPIO_Init+0x318>)
 8000f84:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f90:	4bb8      	ldr	r3, [pc, #736]	; (8001274 <MX_GPIO_Init+0x318>)
 8000f92:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f96:	4ab7      	ldr	r2, [pc, #732]	; (8001274 <MX_GPIO_Init+0x318>)
 8000f98:	f043 0302 	orr.w	r3, r3, #2
 8000f9c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000fa0:	4bb4      	ldr	r3, [pc, #720]	; (8001274 <MX_GPIO_Init+0x318>)
 8000fa2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
 8000fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fae:	4bb1      	ldr	r3, [pc, #708]	; (8001274 <MX_GPIO_Init+0x318>)
 8000fb0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fb4:	4aaf      	ldr	r2, [pc, #700]	; (8001274 <MX_GPIO_Init+0x318>)
 8000fb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fba:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000fbe:	4bad      	ldr	r3, [pc, #692]	; (8001274 <MX_GPIO_Init+0x318>)
 8000fc0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fc8:	623b      	str	r3, [r7, #32]
 8000fca:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000fcc:	4ba9      	ldr	r3, [pc, #676]	; (8001274 <MX_GPIO_Init+0x318>)
 8000fce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fd2:	4aa8      	ldr	r2, [pc, #672]	; (8001274 <MX_GPIO_Init+0x318>)
 8000fd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fd8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000fdc:	4ba5      	ldr	r3, [pc, #660]	; (8001274 <MX_GPIO_Init+0x318>)
 8000fde:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fe6:	61fb      	str	r3, [r7, #28]
 8000fe8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fea:	4ba2      	ldr	r3, [pc, #648]	; (8001274 <MX_GPIO_Init+0x318>)
 8000fec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ff0:	4aa0      	ldr	r2, [pc, #640]	; (8001274 <MX_GPIO_Init+0x318>)
 8000ff2:	f043 0308 	orr.w	r3, r3, #8
 8000ff6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ffa:	4b9e      	ldr	r3, [pc, #632]	; (8001274 <MX_GPIO_Init+0x318>)
 8000ffc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001000:	f003 0308 	and.w	r3, r3, #8
 8001004:	61bb      	str	r3, [r7, #24]
 8001006:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001008:	4b9a      	ldr	r3, [pc, #616]	; (8001274 <MX_GPIO_Init+0x318>)
 800100a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800100e:	4a99      	ldr	r2, [pc, #612]	; (8001274 <MX_GPIO_Init+0x318>)
 8001010:	f043 0304 	orr.w	r3, r3, #4
 8001014:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001018:	4b96      	ldr	r3, [pc, #600]	; (8001274 <MX_GPIO_Init+0x318>)
 800101a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800101e:	f003 0304 	and.w	r3, r3, #4
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001026:	4b93      	ldr	r3, [pc, #588]	; (8001274 <MX_GPIO_Init+0x318>)
 8001028:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800102c:	4a91      	ldr	r2, [pc, #580]	; (8001274 <MX_GPIO_Init+0x318>)
 800102e:	f043 0310 	orr.w	r3, r3, #16
 8001032:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001036:	4b8f      	ldr	r3, [pc, #572]	; (8001274 <MX_GPIO_Init+0x318>)
 8001038:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800103c:	f003 0310 	and.w	r3, r3, #16
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001044:	4b8b      	ldr	r3, [pc, #556]	; (8001274 <MX_GPIO_Init+0x318>)
 8001046:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800104a:	4a8a      	ldr	r2, [pc, #552]	; (8001274 <MX_GPIO_Init+0x318>)
 800104c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001050:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001054:	4b87      	ldr	r3, [pc, #540]	; (8001274 <MX_GPIO_Init+0x318>)
 8001056:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800105a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	4b84      	ldr	r3, [pc, #528]	; (8001274 <MX_GPIO_Init+0x318>)
 8001064:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001068:	4a82      	ldr	r2, [pc, #520]	; (8001274 <MX_GPIO_Init+0x318>)
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001072:	4b80      	ldr	r3, [pc, #512]	; (8001274 <MX_GPIO_Init+0x318>)
 8001074:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001080:	4b7c      	ldr	r3, [pc, #496]	; (8001274 <MX_GPIO_Init+0x318>)
 8001082:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001086:	4a7b      	ldr	r2, [pc, #492]	; (8001274 <MX_GPIO_Init+0x318>)
 8001088:	f043 0320 	orr.w	r3, r3, #32
 800108c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001090:	4b78      	ldr	r3, [pc, #480]	; (8001274 <MX_GPIO_Init+0x318>)
 8001092:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001096:	f003 0320 	and.w	r3, r3, #32
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800109e:	4b75      	ldr	r3, [pc, #468]	; (8001274 <MX_GPIO_Init+0x318>)
 80010a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010a4:	4a73      	ldr	r2, [pc, #460]	; (8001274 <MX_GPIO_Init+0x318>)
 80010a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010aa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010ae:	4b71      	ldr	r3, [pc, #452]	; (8001274 <MX_GPIO_Init+0x318>)
 80010b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010b8:	603b      	str	r3, [r7, #0]
 80010ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin, GPIO_PIN_RESET);
 80010bc:	2200      	movs	r2, #0
 80010be:	210e      	movs	r1, #14
 80010c0:	486d      	ldr	r0, [pc, #436]	; (8001278 <MX_GPIO_Init+0x31c>)
 80010c2:	f008 fa87 	bl	80095d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USER_LED1_Pin|USER_LED2_Pin, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	f640 0104 	movw	r1, #2052	; 0x804
 80010cc:	486b      	ldr	r0, [pc, #428]	; (800127c <MX_GPIO_Init+0x320>)
 80010ce:	f008 fa81 	bl	80095d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010d8:	4869      	ldr	r0, [pc, #420]	; (8001280 <MX_GPIO_Init+0x324>)
 80010da:	f008 fa7b 	bl	80095d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_NRST_GPIO_Port, AUDIO_NRST_Pin, GPIO_PIN_SET);
 80010de:	2201      	movs	r2, #1
 80010e0:	2108      	movs	r1, #8
 80010e2:	4866      	ldr	r0, [pc, #408]	; (800127c <MX_GPIO_Init+0x320>)
 80010e4:	f008 fa76 	bl	80095d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_SET);
 80010e8:	2201      	movs	r2, #1
 80010ea:	2106      	movs	r1, #6
 80010ec:	4864      	ldr	r0, [pc, #400]	; (8001280 <MX_GPIO_Init+0x324>)
 80010ee:	f008 fa71 	bl	80095d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = WIFI_GPIO_Pin|WIFI_DATRDY_Pin;
 80010f2:	2330      	movs	r3, #48	; 0x30
 80010f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001100:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001104:	4619      	mov	r1, r3
 8001106:	485c      	ldr	r0, [pc, #368]	; (8001278 <MX_GPIO_Init+0x31c>)
 8001108:	f007 ffaa 	bl	8009060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = I2S6_SDO_Pin|I2S6_SDI_Pin|I2S6_CK_Pin;
 800110c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 800111e:	2305      	movs	r3, #5
 8001120:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001122:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001126:	4619      	mov	r1, r3
 8001128:	4854      	ldr	r0, [pc, #336]	; (800127c <MX_GPIO_Init+0x320>)
 800112a:	f007 ff99 	bl	8009060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 800112e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001132:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001134:	2302      	movs	r3, #2
 8001136:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113c:	2303      	movs	r3, #3
 800113e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001140:	2309      	movs	r3, #9
 8001142:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 8001144:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001148:	4619      	mov	r1, r3
 800114a:	484c      	ldr	r0, [pc, #304]	; (800127c <MX_GPIO_Init+0x320>)
 800114c:	f007 ff88 	bl	8009060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO7_Pin;
 8001150:	2380      	movs	r3, #128	; 0x80
 8001152:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001154:	2302      	movs	r3, #2
 8001156:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115c:	2303      	movs	r3, #3
 800115e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001160:	230a      	movs	r3, #10
 8001162:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO7_GPIO_Port, &GPIO_InitStruct);
 8001164:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001168:	4619      	mov	r1, r3
 800116a:	4846      	ldr	r0, [pc, #280]	; (8001284 <MX_GPIO_Init+0x328>)
 800116c:	f007 ff78 	bl	8009060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin;
 8001170:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 8001174:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117e:	2303      	movs	r3, #3
 8001180:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001182:	230c      	movs	r3, #12
 8001184:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001186:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800118a:	4619      	mov	r1, r3
 800118c:	483e      	ldr	r0, [pc, #248]	; (8001288 <MX_GPIO_Init+0x32c>)
 800118e:	f007 ff67 	bl	8009060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin;
 8001192:	230e      	movs	r3, #14
 8001194:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001196:	2301      	movs	r3, #1
 8001198:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2300      	movs	r3, #0
 80011a0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80011a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011a6:	4619      	mov	r1, r3
 80011a8:	4833      	ldr	r0, [pc, #204]	; (8001278 <MX_GPIO_Init+0x31c>)
 80011aa:	f007 ff59 	bl	8009060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = USER_LED1_Pin|AUDIO_NRST_Pin|USER_LED2_Pin;
 80011ae:	f640 030c 	movw	r3, #2060	; 0x80c
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b4:	2301      	movs	r3, #1
 80011b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011c4:	4619      	mov	r1, r3
 80011c6:	482d      	ldr	r0, [pc, #180]	; (800127c <MX_GPIO_Init+0x320>)
 80011c8:	f007 ff4a 	bl	8009060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 80011cc:	2304      	movs	r3, #4
 80011ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d0:	2302      	movs	r3, #2
 80011d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d8:	2303      	movs	r3, #3
 80011da:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80011dc:	230c      	movs	r3, #12
 80011de:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 80011e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011e4:	4619      	mov	r1, r3
 80011e6:	4827      	ldr	r0, [pc, #156]	; (8001284 <MX_GPIO_Init+0x328>)
 80011e8:	f007 ff3a 	bl	8009060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80011ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f8:	2301      	movs	r3, #1
 80011fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80011fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001200:	4619      	mov	r1, r3
 8001202:	481d      	ldr	r0, [pc, #116]	; (8001278 <MX_GPIO_Init+0x31c>)
 8001204:	f007 ff2c 	bl	8009060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_SCK_Pin;
 8001208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800120c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2300      	movs	r3, #0
 8001218:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800121a:	2305      	movs	r3, #5
 800121c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800121e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001222:	4619      	mov	r1, r3
 8001224:	4816      	ldr	r0, [pc, #88]	; (8001280 <MX_GPIO_Init+0x324>)
 8001226:	f007 ff1b 	bl	8009060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin;
 800122a:	f640 0306 	movw	r3, #2054	; 0x806
 800122e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001230:	2301      	movs	r3, #1
 8001232:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001240:	4619      	mov	r1, r3
 8001242:	480f      	ldr	r0, [pc, #60]	; (8001280 <MX_GPIO_Init+0x324>)
 8001244:	f007 ff0c 	bl	8009060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 8001248:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800124c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800124e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001252:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8001258:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800125c:	4619      	mov	r1, r3
 800125e:	480a      	ldr	r0, [pc, #40]	; (8001288 <MX_GPIO_Init+0x32c>)
 8001260:	f007 fefe 	bl	8009060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCO_Pin;
 8001264:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001268:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126a:	2302      	movs	r3, #2
 800126c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	e00c      	b.n	800128c <MX_GPIO_Init+0x330>
 8001272:	bf00      	nop
 8001274:	58024400 	.word	0x58024400
 8001278:	58022000 	.word	0x58022000
 800127c:	58021800 	.word	0x58021800
 8001280:	58020000 	.word	0x58020000
 8001284:	58020c00 	.word	0x58020c00
 8001288:	58020800 	.word	0x58020800
 800128c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2300      	movs	r3, #0
 8001290:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001292:	2300      	movs	r3, #0
 8001294:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 8001296:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800129a:	4619      	mov	r1, r3
 800129c:	4842      	ldr	r0, [pc, #264]	; (80013a8 <MX_GPIO_Init+0x44c>)
 800129e:	f007 fedf 	bl	8009060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 80012a2:	2340      	movs	r3, #64	; 0x40
 80012a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a6:	2302      	movs	r3, #2
 80012a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ae:	2303      	movs	r3, #3
 80012b0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80012b2:	230a      	movs	r3, #10
 80012b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 80012b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012ba:	4619      	mov	r1, r3
 80012bc:	483b      	ldr	r0, [pc, #236]	; (80013ac <MX_GPIO_Init+0x450>)
 80012be:	f007 fecf 	bl	8009060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 80012c2:	230c      	movs	r3, #12
 80012c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	2302      	movs	r3, #2
 80012c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ce:	2300      	movs	r3, #0
 80012d0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012d2:	2305      	movs	r3, #5
 80012d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012da:	4619      	mov	r1, r3
 80012dc:	4834      	ldr	r0, [pc, #208]	; (80013b0 <MX_GPIO_Init+0x454>)
 80012de:	f007 febf 	bl	8009060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 80012e2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80012e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012e8:	2312      	movs	r3, #18
 80012ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ec:	2301      	movs	r3, #1
 80012ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80012f4:	2304      	movs	r3, #4
 80012f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012fc:	4619      	mov	r1, r3
 80012fe:	482d      	ldr	r0, [pc, #180]	; (80013b4 <MX_GPIO_Init+0x458>)
 8001300:	f007 feae 	bl	8009060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OCSPI1_IO4_Pin|OCSPI1_DQS_Pin;
 8001304:	2322      	movs	r3, #34	; 0x22
 8001306:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001310:	2303      	movs	r3, #3
 8001312:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001314:	230a      	movs	r3, #10
 8001316:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001318:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800131c:	4619      	mov	r1, r3
 800131e:	4824      	ldr	r0, [pc, #144]	; (80013b0 <MX_GPIO_Init+0x454>)
 8001320:	f007 fe9e 	bl	8009060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001324:	2304      	movs	r3, #4
 8001326:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001328:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800132c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001332:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001336:	4619      	mov	r1, r3
 8001338:	481f      	ldr	r0, [pc, #124]	; (80013b8 <MX_GPIO_Init+0x45c>)
 800133a:	f007 fe91 	bl	8009060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO5_Pin;
 800133e:	2308      	movs	r3, #8
 8001340:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	2302      	movs	r3, #2
 8001344:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134a:	2303      	movs	r3, #3
 800134c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800134e:	2309      	movs	r3, #9
 8001350:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO5_GPIO_Port, &GPIO_InitStruct);
 8001352:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001356:	4619      	mov	r1, r3
 8001358:	4817      	ldr	r0, [pc, #92]	; (80013b8 <MX_GPIO_Init+0x45c>)
 800135a:	f007 fe81 	bl	8009060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = I2S6_WS_Pin|I2S6_MCK_Pin;
 800135e:	2309      	movs	r3, #9
 8001360:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	2302      	movs	r3, #2
 8001364:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136a:	2300      	movs	r3, #0
 800136c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 800136e:	2305      	movs	r3, #5
 8001370:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001372:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001376:	4619      	mov	r1, r3
 8001378:	480b      	ldr	r0, [pc, #44]	; (80013a8 <MX_GPIO_Init+0x44c>)
 800137a:	f007 fe71 	bl	8009060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 800137e:	2304      	movs	r3, #4
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138a:	2303      	movs	r3, #3
 800138c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800138e:	2309      	movs	r3, #9
 8001390:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 8001392:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001396:	4619      	mov	r1, r3
 8001398:	4808      	ldr	r0, [pc, #32]	; (80013bc <MX_GPIO_Init+0x460>)
 800139a:	f007 fe61 	bl	8009060 <HAL_GPIO_Init>

}
 800139e:	bf00      	nop
 80013a0:	3740      	adds	r7, #64	; 0x40
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	58020000 	.word	0x58020000
 80013ac:	58021800 	.word	0x58021800
 80013b0:	58020800 	.word	0x58020800
 80013b4:	58020c00 	.word	0x58020c00
 80013b8:	58021c00 	.word	0x58021c00
 80013bc:	58020400 	.word	0x58020400

080013c0 <rescaleImage>:
 *      Author: pwl
 */

#include "img_utils.h"
void rescaleImage(uint32_t *srcImg,uint32_t *dstImg, uint32_t srcWidth, uint32_t srcHeight, uint32_t dstWidth, uint32_t dstHeight)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b08b      	sub	sp, #44	; 0x2c
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
 80013cc:	603b      	str	r3, [r7, #0]
    float scaleX = (float)srcWidth / dstWidth;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	ee07 3a90 	vmov	s15, r3
 80013d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80013d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013da:	ee07 3a90 	vmov	s15, r3
 80013de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013e6:	edc7 7a07 	vstr	s15, [r7, #28]
    float scaleY = (float)srcHeight / dstHeight;
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	ee07 3a90 	vmov	s15, r3
 80013f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80013f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013f6:	ee07 3a90 	vmov	s15, r3
 80013fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001402:	edc7 7a06 	vstr	s15, [r7, #24]

    for (int y = 0; y < dstHeight; y++)
 8001406:	2300      	movs	r3, #0
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
 800140a:	e03c      	b.n	8001486 <rescaleImage+0xc6>
    {
        for (int x = 0; x < dstWidth; x++)
 800140c:	2300      	movs	r3, #0
 800140e:	623b      	str	r3, [r7, #32]
 8001410:	e032      	b.n	8001478 <rescaleImage+0xb8>
        {
            uint32_t srcX = (uint32_t)(x * scaleX);
 8001412:	6a3b      	ldr	r3, [r7, #32]
 8001414:	ee07 3a90 	vmov	s15, r3
 8001418:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800141c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001420:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001424:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001428:	ee17 3a90 	vmov	r3, s15
 800142c:	617b      	str	r3, [r7, #20]
            uint32_t srcY = (uint32_t)(y * scaleY);
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	ee07 3a90 	vmov	s15, r3
 8001434:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001438:	edd7 7a06 	vldr	s15, [r7, #24]
 800143c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001440:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001444:	ee17 3a90 	vmov	r3, s15
 8001448:	613b      	str	r3, [r7, #16]

            dstImg[y * dstWidth + x] = srcImg[srcY * srcWidth + srcX];
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	fb03 f202 	mul.w	r2, r3, r2
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	4413      	add	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	441a      	add	r2, r3
 800145c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001460:	fb03 f101 	mul.w	r1, r3, r1
 8001464:	6a3b      	ldr	r3, [r7, #32]
 8001466:	440b      	add	r3, r1
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	68b9      	ldr	r1, [r7, #8]
 800146c:	440b      	add	r3, r1
 800146e:	6812      	ldr	r2, [r2, #0]
 8001470:	601a      	str	r2, [r3, #0]
        for (int x = 0; x < dstWidth; x++)
 8001472:	6a3b      	ldr	r3, [r7, #32]
 8001474:	3301      	adds	r3, #1
 8001476:	623b      	str	r3, [r7, #32]
 8001478:	6a3b      	ldr	r3, [r7, #32]
 800147a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800147c:	429a      	cmp	r2, r3
 800147e:	d8c8      	bhi.n	8001412 <rescaleImage+0x52>
    for (int y = 0; y < dstHeight; y++)
 8001480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001482:	3301      	adds	r3, #1
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800148a:	429a      	cmp	r2, r3
 800148c:	d8be      	bhi.n	800140c <rescaleImage+0x4c>
        }
    }
}
 800148e:	bf00      	nop
 8001490:	bf00      	nop
 8001492:	372c      	adds	r7, #44	; 0x2c
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08e      	sub	sp, #56	; 0x38
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	2234      	movs	r2, #52	; 0x34
 80014a6:	2100      	movs	r1, #0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f01a f895 	bl	801b5d8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80014ae:	4b38      	ldr	r3, [pc, #224]	; (8001590 <MX_LTDC_Init+0xf4>)
 80014b0:	4a38      	ldr	r2, [pc, #224]	; (8001594 <MX_LTDC_Init+0xf8>)
 80014b2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80014b4:	4b36      	ldr	r3, [pc, #216]	; (8001590 <MX_LTDC_Init+0xf4>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80014ba:	4b35      	ldr	r3, [pc, #212]	; (8001590 <MX_LTDC_Init+0xf4>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AH;
 80014c0:	4b33      	ldr	r3, [pc, #204]	; (8001590 <MX_LTDC_Init+0xf4>)
 80014c2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80014c6:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80014c8:	4b31      	ldr	r3, [pc, #196]	; (8001590 <MX_LTDC_Init+0xf4>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80014ce:	4b30      	ldr	r3, [pc, #192]	; (8001590 <MX_LTDC_Init+0xf4>)
 80014d0:	2207      	movs	r2, #7
 80014d2:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80014d4:	4b2e      	ldr	r3, [pc, #184]	; (8001590 <MX_LTDC_Init+0xf4>)
 80014d6:	2203      	movs	r2, #3
 80014d8:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80014da:	4b2d      	ldr	r3, [pc, #180]	; (8001590 <MX_LTDC_Init+0xf4>)
 80014dc:	220e      	movs	r2, #14
 80014de:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80014e0:	4b2b      	ldr	r3, [pc, #172]	; (8001590 <MX_LTDC_Init+0xf4>)
 80014e2:	2205      	movs	r2, #5
 80014e4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80014e6:	4b2a      	ldr	r3, [pc, #168]	; (8001590 <MX_LTDC_Init+0xf4>)
 80014e8:	f240 228e 	movw	r2, #654	; 0x28e
 80014ec:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80014ee:	4b28      	ldr	r3, [pc, #160]	; (8001590 <MX_LTDC_Init+0xf4>)
 80014f0:	f240 12e5 	movw	r2, #485	; 0x1e5
 80014f4:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 80014f6:	4b26      	ldr	r3, [pc, #152]	; (8001590 <MX_LTDC_Init+0xf4>)
 80014f8:	f44f 7225 	mov.w	r2, #660	; 0x294
 80014fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 80014fe:	4b24      	ldr	r3, [pc, #144]	; (8001590 <MX_LTDC_Init+0xf4>)
 8001500:	f240 12e7 	movw	r2, #487	; 0x1e7
 8001504:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001506:	4b22      	ldr	r3, [pc, #136]	; (8001590 <MX_LTDC_Init+0xf4>)
 8001508:	2200      	movs	r2, #0
 800150a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800150e:	4b20      	ldr	r3, [pc, #128]	; (8001590 <MX_LTDC_Init+0xf4>)
 8001510:	2200      	movs	r2, #0
 8001512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001516:	4b1e      	ldr	r3, [pc, #120]	; (8001590 <MX_LTDC_Init+0xf4>)
 8001518:	2200      	movs	r2, #0
 800151a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800151e:	481c      	ldr	r0, [pc, #112]	; (8001590 <MX_LTDC_Init+0xf4>)
 8001520:	f008 fef8 	bl	800a314 <HAL_LTDC_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_LTDC_Init+0x92>
  {
    Error_Handler();
 800152a:	f000 faad 	bl	8001a88 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800154a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800154e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001550:	2305      	movs	r3, #5
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	2200      	movs	r2, #0
 8001576:	4619      	mov	r1, r3
 8001578:	4805      	ldr	r0, [pc, #20]	; (8001590 <MX_LTDC_Init+0xf4>)
 800157a:	f009 f85d 	bl	800a638 <HAL_LTDC_ConfigLayer>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8001584:	f000 fa80 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001588:	bf00      	nop
 800158a:	3738      	adds	r7, #56	; 0x38
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	24008408 	.word	0x24008408
 8001594:	50001000 	.word	0x50001000

08001598 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b0bc      	sub	sp, #240	; 0xf0
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015b0:	f107 0318 	add.w	r3, r7, #24
 80015b4:	22c0      	movs	r2, #192	; 0xc0
 80015b6:	2100      	movs	r1, #0
 80015b8:	4618      	mov	r0, r3
 80015ba:	f01a f80d 	bl	801b5d8 <memset>
  if(ltdcHandle->Instance==LTDC)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a5a      	ldr	r2, [pc, #360]	; (800172c <HAL_LTDC_MspInit+0x194>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	f040 80ad 	bne.w	8001724 <HAL_LTDC_MspInit+0x18c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80015ca:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80015ce:	f04f 0300 	mov.w	r3, #0
 80015d2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 80015d6:	2318      	movs	r3, #24
 80015d8:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 80015da:	23c0      	movs	r3, #192	; 0xc0
 80015dc:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 17;
 80015de:	2311      	movs	r3, #17
 80015e0:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80015e2:	2302      	movs	r3, #2
 80015e4:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 16;
 80015e6:	2310      	movs	r3, #16
 80015e8:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015f6:	f107 0318 	add.w	r3, r7, #24
 80015fa:	4618      	mov	r0, r3
 80015fc:	f00a fa86 	bl	800bb0c <HAL_RCCEx_PeriphCLKConfig>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_LTDC_MspInit+0x72>
    {
      Error_Handler();
 8001606:	f000 fa3f 	bl	8001a88 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800160a:	4b49      	ldr	r3, [pc, #292]	; (8001730 <HAL_LTDC_MspInit+0x198>)
 800160c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001610:	4a47      	ldr	r2, [pc, #284]	; (8001730 <HAL_LTDC_MspInit+0x198>)
 8001612:	f043 0308 	orr.w	r3, r3, #8
 8001616:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 800161a:	4b45      	ldr	r3, [pc, #276]	; (8001730 <HAL_LTDC_MspInit+0x198>)
 800161c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001620:	f003 0308 	and.w	r3, r3, #8
 8001624:	617b      	str	r3, [r7, #20]
 8001626:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001628:	4b41      	ldr	r3, [pc, #260]	; (8001730 <HAL_LTDC_MspInit+0x198>)
 800162a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800162e:	4a40      	ldr	r2, [pc, #256]	; (8001730 <HAL_LTDC_MspInit+0x198>)
 8001630:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001634:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001638:	4b3d      	ldr	r3, [pc, #244]	; (8001730 <HAL_LTDC_MspInit+0x198>)
 800163a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800163e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001646:	4b3a      	ldr	r3, [pc, #232]	; (8001730 <HAL_LTDC_MspInit+0x198>)
 8001648:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800164c:	4a38      	ldr	r2, [pc, #224]	; (8001730 <HAL_LTDC_MspInit+0x198>)
 800164e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001652:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001656:	4b36      	ldr	r3, [pc, #216]	; (8001730 <HAL_LTDC_MspInit+0x198>)
 8001658:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800165c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001664:	4b32      	ldr	r3, [pc, #200]	; (8001730 <HAL_LTDC_MspInit+0x198>)
 8001666:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800166a:	4a31      	ldr	r2, [pc, #196]	; (8001730 <HAL_LTDC_MspInit+0x198>)
 800166c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001670:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001674:	4b2e      	ldr	r3, [pc, #184]	; (8001730 <HAL_LTDC_MspInit+0x198>)
 8001676:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800167a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_B4_Pin|LCD_B5_Pin
 8001682:	23ff      	movs	r3, #255	; 0xff
 8001684:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_DE_Pin|LCD_G7_Pin|LCD_G6_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	2302      	movs	r3, #2
 800168a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001694:	2303      	movs	r3, #3
 8001696:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800169a:	230e      	movs	r3, #14
 800169c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80016a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016a4:	4619      	mov	r1, r3
 80016a6:	4823      	ldr	r0, [pc, #140]	; (8001734 <HAL_LTDC_MspInit+0x19c>)
 80016a8:	f007 fcda 	bl	8009060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B3_Pin|LCD_B2_Pin|LCD_B1_Pin|LCD_B0_Pin
 80016ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_G4_Pin|LCD_G3_Pin|LCD_G2_Pin|LCD_G1_Pin
                          |LCD_R7_Pin|LCD_G0_Pin|LCD_R1_Pin|LCD_R6_Pin
                          |LCD_R2_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b4:	2302      	movs	r3, #2
 80016b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c0:	2303      	movs	r3, #3
 80016c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016c6:	230e      	movs	r3, #14
 80016c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80016cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016d0:	4619      	mov	r1, r3
 80016d2:	4819      	ldr	r0, [pc, #100]	; (8001738 <HAL_LTDC_MspInit+0x1a0>)
 80016d4:	f007 fcc4 	bl	8009060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_CLK_Pin|LCD_VSYNC_Pin|LCD_R0_Pin;
 80016d8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80016dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e0:	2302      	movs	r3, #2
 80016e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ec:	2303      	movs	r3, #3
 80016ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016f2:	230e      	movs	r3, #14
 80016f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80016f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016fc:	4619      	mov	r1, r3
 80016fe:	480f      	ldr	r0, [pc, #60]	; (800173c <HAL_LTDC_MspInit+0x1a4>)
 8001700:	f007 fcae 	bl	8009060 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001704:	2200      	movs	r2, #0
 8001706:	2100      	movs	r1, #0
 8001708:	2058      	movs	r0, #88	; 0x58
 800170a:	f003 f948 	bl	800499e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800170e:	2058      	movs	r0, #88	; 0x58
 8001710:	f003 f95f 	bl	80049d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 8001714:	2200      	movs	r2, #0
 8001716:	2100      	movs	r1, #0
 8001718:	2059      	movs	r0, #89	; 0x59
 800171a:	f003 f940 	bl	800499e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 800171e:	2059      	movs	r0, #89	; 0x59
 8001720:	f003 f957 	bl	80049d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001724:	bf00      	nop
 8001726:	37f0      	adds	r7, #240	; 0xf0
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	50001000 	.word	0x50001000
 8001730:	58024400 	.word	0x58024400
 8001734:	58022800 	.word	0x58022800
 8001738:	58022400 	.word	0x58022400
 800173c:	58022000 	.word	0x58022000

08001740 <LTDC_Init_from_buffer>:
  /* USER CODE END LTDC_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void LTDC_Init_from_buffer(uint32_t* buffer){
 8001740:	b580      	push	{r7, lr}
 8001742:	b090      	sub	sp, #64	; 0x40
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001748:	f107 030c 	add.w	r3, r7, #12
 800174c:	2234      	movs	r2, #52	; 0x34
 800174e:	2100      	movs	r1, #0
 8001750:	4618      	mov	r0, r3
 8001752:	f019 ff41 	bl	801b5d8 <memset>
	pLayerCfg.WindowX0 = 28;
 8001756:	231c      	movs	r3, #28
 8001758:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = 28+LTDC_WIDTH;
 800175a:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 800175e:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 6;
 8001760:	2306      	movs	r3, #6
 8001762:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = 6+LTDC_HEIGHT;
 8001764:	f44f 738b 	mov.w	r3, #278	; 0x116
 8001768:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800176a:	2300      	movs	r3, #0
 800176c:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 800176e:	23ff      	movs	r3, #255	; 0xff
 8001770:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800177a:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800177c:	2305      	movs	r3, #5
 800177e:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.FBStartAdress = (uint32_t)buffer;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.ImageWidth = LTDC_WIDTH;
 8001784:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001788:	637b      	str	r3, [r7, #52]	; 0x34
	pLayerCfg.ImageHeight = LTDC_HEIGHT;
 800178a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800178e:	63bb      	str	r3, [r7, #56]	; 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	pLayerCfg.Backcolor.Red = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80017a2:	f107 030c 	add.w	r3, r7, #12
 80017a6:	2200      	movs	r2, #0
 80017a8:	4619      	mov	r1, r3
 80017aa:	4806      	ldr	r0, [pc, #24]	; (80017c4 <LTDC_Init_from_buffer+0x84>)
 80017ac:	f008 ff44 	bl	800a638 <HAL_LTDC_ConfigLayer>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <LTDC_Init_from_buffer+0x7a>
	{
	Error_Handler();
 80017b6:	f000 f967 	bl	8001a88 <Error_Handler>
	}
}
 80017ba:	bf00      	nop
 80017bc:	3740      	adds	r7, #64	; 0x40
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	24008408 	.word	0x24008408

080017c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af02      	add	r7, sp, #8
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80017ce:	4b5d      	ldr	r3, [pc, #372]	; (8001944 <main+0x17c>)
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d11b      	bne.n	8001812 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80017da:	f3bf 8f4f 	dsb	sy
}
 80017de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017e0:	f3bf 8f6f 	isb	sy
}
 80017e4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80017e6:	4b57      	ldr	r3, [pc, #348]	; (8001944 <main+0x17c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80017ee:	f3bf 8f4f 	dsb	sy
}
 80017f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017f4:	f3bf 8f6f 	isb	sy
}
 80017f8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80017fa:	4b52      	ldr	r3, [pc, #328]	; (8001944 <main+0x17c>)
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	4a51      	ldr	r2, [pc, #324]	; (8001944 <main+0x17c>)
 8001800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001804:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001806:	f3bf 8f4f 	dsb	sy
}
 800180a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800180c:	f3bf 8f6f 	isb	sy
}
 8001810:	e000      	b.n	8001814 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001812:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001814:	4b4b      	ldr	r3, [pc, #300]	; (8001944 <main+0x17c>)
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d138      	bne.n	8001892 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001820:	4b48      	ldr	r3, [pc, #288]	; (8001944 <main+0x17c>)
 8001822:	2200      	movs	r2, #0
 8001824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001828:	f3bf 8f4f 	dsb	sy
}
 800182c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800182e:	4b45      	ldr	r3, [pc, #276]	; (8001944 <main+0x17c>)
 8001830:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001834:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	0b5b      	lsrs	r3, r3, #13
 800183a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800183e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	08db      	lsrs	r3, r3, #3
 8001844:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001848:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	015a      	lsls	r2, r3, #5
 800184e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001852:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001858:	493a      	ldr	r1, [pc, #232]	; (8001944 <main+0x17c>)
 800185a:	4313      	orrs	r3, r2
 800185c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	1e5a      	subs	r2, r3, #1
 8001864:	607a      	str	r2, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1ef      	bne.n	800184a <main+0x82>
    } while(sets-- != 0U);
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	1e5a      	subs	r2, r3, #1
 800186e:	60ba      	str	r2, [r7, #8]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1e5      	bne.n	8001840 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8001874:	f3bf 8f4f 	dsb	sy
}
 8001878:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800187a:	4b32      	ldr	r3, [pc, #200]	; (8001944 <main+0x17c>)
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	4a31      	ldr	r2, [pc, #196]	; (8001944 <main+0x17c>)
 8001880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001884:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001886:	f3bf 8f4f 	dsb	sy
}
 800188a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800188c:	f3bf 8f6f 	isb	sy
}
 8001890:	e000      	b.n	8001894 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001892:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001894:	f002 fef2 	bl	800467c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001898:	f000 f860 	bl	800195c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800189c:	f7ff fb5e 	bl	8000f5c <MX_GPIO_Init>
  MX_DMA_Init();
 80018a0:	f7ff f8b2 	bl	8000a08 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80018a4:	f002 fe02 	bl	80044ac <MX_USART1_UART_Init>
  MX_DMA2D_Init();
 80018a8:	f7ff f8ce 	bl	8000a48 <MX_DMA2D_Init>
  MX_LTDC_Init();
 80018ac:	f7ff fdf6 	bl	800149c <MX_LTDC_Init>
  MX_DCMI_Init();
 80018b0:	f7fe ff68 	bl	8000784 <MX_DCMI_Init>
  MX_RTC_Init();
 80018b4:	f001 fe46 	bl	8003544 <MX_RTC_Init>
  MX_FMC_Init();
 80018b8:	f7ff f9f2 	bl	8000ca0 <MX_FMC_Init>
  MX_CRC_Init();
 80018bc:	f7fe ff1e 	bl	80006fc <MX_CRC_Init>
  MX_X_CUBE_AI_Init();
 80018c0:	f00e f9aa 	bl	800fc18 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */
    RetargetInit(&huart1);
 80018c4:	4820      	ldr	r0, [pc, #128]	; (8001948 <main+0x180>)
 80018c6:	f001 fd87 	bl	80033d8 <RetargetInit>
    BSP_CAMERA_PwrDown(0);
 80018ca:	2000      	movs	r0, #0
 80018cc:	f002 fb9d 	bl	800400a <BSP_CAMERA_PwrDown>
    if (BSP_CAMERA_Init(0, CAMERA_R480x272, CAMERA_PF_RGB565) !=
 80018d0:	2200      	movs	r2, #0
 80018d2:	2102      	movs	r1, #2
 80018d4:	2000      	movs	r0, #0
 80018d6:	f002 fae7 	bl	8003ea8 <BSP_CAMERA_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <main+0x11c>
        BSP_ERROR_NONE) {
        Error_Handler();
 80018e0:	f000 f8d2 	bl	8001a88 <Error_Handler>
    }
    HAL_Delay(1000);
 80018e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018e8:	f002 ff5a 	bl	80047a0 <HAL_Delay>
    //  buffer[5460] = 255;
    LTDC_Init_from_buffer((uint32_t *)LCD_BUFFER);
 80018ec:	4817      	ldr	r0, [pc, #92]	; (800194c <main+0x184>)
 80018ee:	f7ff ff27 	bl	8001740 <LTDC_Init_from_buffer>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    while (1) {
    	// make photo
        BSP_CAMERA_Start(0, (uint8_t *)CAMERA_BUFFER, CAMERA_MODE_SNAPSHOT);
 80018f2:	2202      	movs	r2, #2
 80018f4:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80018f8:	2000      	movs	r0, #0
 80018fa:	f002 fb1b 	bl	8003f34 <BSP_CAMERA_Start>
        while (camera_frame_ready == 0) {
 80018fe:	bf00      	nop
 8001900:	4b13      	ldr	r3, [pc, #76]	; (8001950 <main+0x188>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d0fb      	beq.n	8001900 <main+0x138>
        };
        BSP_CAMERA_Stop(0);
 8001908:	2000      	movs	r0, #0
 800190a:	f002 fb4d 	bl	8003fa8 <BSP_CAMERA_Stop>
        // process photo
        DMA2D_Convert((uint8_t *)CAMERA_BUFFER, (uint32_t *)LCD_BUFFER);
 800190e:	490f      	ldr	r1, [pc, #60]	; (800194c <main+0x184>)
 8001910:	f04f 4050 	mov.w	r0, #3489660928	; 0xd0000000
 8001914:	f7ff f8fc 	bl	8000b10 <DMA2D_Convert>

        // rescale
        rescaleImage((uint32_t*)LCD_BUFFER, (uint32_t*)rescaledImg, LTDC_WIDTH, LTDC_HEIGHT, RESCALED_IMG, RESCALED_IMG);
 8001918:	23c0      	movs	r3, #192	; 0xc0
 800191a:	9301      	str	r3, [sp, #4]
 800191c:	23c0      	movs	r3, #192	; 0xc0
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001924:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001928:	490a      	ldr	r1, [pc, #40]	; (8001954 <main+0x18c>)
 800192a:	4808      	ldr	r0, [pc, #32]	; (800194c <main+0x184>)
 800192c:	f7ff fd48 	bl	80013c0 <rescaleImage>
//        printf("image print start");
//        for(uint64_t i = 0; i<LTDC_WIDTH*LTDC_HEIGHT; i++){
//        	printf("%u, %u, %u,", (uint8_t)((*(lcd_ptr+i)&0xff0000)>>16), (uint8_t)((*(lcd_ptr+i)&0xff00)>>8), (uint8_t)(*(lcd_ptr+i)&0xff));
//        }
//        printf("end image");
        MX_X_CUBE_AI_Process((uint32_t *)LCD_BUFFER, (uint32_t*)rescaledImg);
 8001930:	4908      	ldr	r1, [pc, #32]	; (8001954 <main+0x18c>)
 8001932:	4806      	ldr	r0, [pc, #24]	; (800194c <main+0x184>)
 8001934:	f00e f97e 	bl	800fc34 <MX_X_CUBE_AI_Process>
  	  	//postProcess((uint32_t *)LCD_BUFFER, LTDC_WIDTH, LTDC_HEIGHT, 96, 96, GRID_SIZE, probabilites);

        HAL_GPIO_TogglePin(USER_LED1_GPIO_Port, USER_LED1_Pin);
 8001938:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800193c:	4806      	ldr	r0, [pc, #24]	; (8001958 <main+0x190>)
 800193e:	f007 fe62 	bl	8009606 <HAL_GPIO_TogglePin>
        BSP_CAMERA_Start(0, (uint8_t *)CAMERA_BUFFER, CAMERA_MODE_SNAPSHOT);
 8001942:	e7d6      	b.n	80018f2 <main+0x12a>
 8001944:	e000ed00 	.word	0xe000ed00
 8001948:	2402cfa4 	.word	0x2402cfa4
 800194c:	d005fa00 	.word	0xd005fa00
 8001950:	240084b0 	.word	0x240084b0
 8001954:	240084b4 	.word	0x240084b4
 8001958:	58021800 	.word	0x58021800

0800195c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b09c      	sub	sp, #112	; 0x70
 8001960:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001966:	224c      	movs	r2, #76	; 0x4c
 8001968:	2100      	movs	r1, #0
 800196a:	4618      	mov	r0, r3
 800196c:	f019 fe34 	bl	801b5d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	2220      	movs	r2, #32
 8001974:	2100      	movs	r1, #0
 8001976:	4618      	mov	r0, r3
 8001978:	f019 fe2e 	bl	801b5d8 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800197c:	4b38      	ldr	r3, [pc, #224]	; (8001a60 <SystemClock_Config+0x104>)
 800197e:	f04f 32ff 	mov.w	r2, #4294967295
 8001982:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001986:	2004      	movs	r0, #4
 8001988:	f009 f83e 	bl	800aa08 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800198c:	2300      	movs	r3, #0
 800198e:	603b      	str	r3, [r7, #0]
 8001990:	4b34      	ldr	r3, [pc, #208]	; (8001a64 <SystemClock_Config+0x108>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	4a33      	ldr	r2, [pc, #204]	; (8001a64 <SystemClock_Config+0x108>)
 8001996:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800199a:	6193      	str	r3, [r2, #24]
 800199c:	4b31      	ldr	r3, [pc, #196]	; (8001a64 <SystemClock_Config+0x108>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019a4:	603b      	str	r3, [r7, #0]
 80019a6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80019a8:	bf00      	nop
 80019aa:	4b2e      	ldr	r3, [pc, #184]	; (8001a64 <SystemClock_Config+0x108>)
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019b6:	d1f8      	bne.n	80019aa <SystemClock_Config+0x4e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80019b8:	f009 f816 	bl	800a9e8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80019bc:	4b28      	ldr	r3, [pc, #160]	; (8001a60 <SystemClock_Config+0x104>)
 80019be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c0:	4a27      	ldr	r2, [pc, #156]	; (8001a60 <SystemClock_Config+0x104>)
 80019c2:	f023 0318 	bic.w	r3, r3, #24
 80019c6:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80019c8:	2305      	movs	r3, #5
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80019d2:	2301      	movs	r3, #1
 80019d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019d6:	2302      	movs	r3, #2
 80019d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019da:	2302      	movs	r3, #2
 80019dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80019de:	230c      	movs	r3, #12
 80019e0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 80019e2:	f44f 738c 	mov.w	r3, #280	; 0x118
 80019e6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80019e8:	2302      	movs	r3, #2
 80019ea:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80019ec:	2303      	movs	r3, #3
 80019ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 80019f0:	2304      	movs	r3, #4
 80019f2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80019f4:	2304      	movs	r3, #4
 80019f6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80019f8:	2300      	movs	r3, #0
 80019fa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a04:	4618      	mov	r0, r3
 8001a06:	f009 f859 	bl	800aabc <HAL_RCC_OscConfig>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001a10:	f000 f83a 	bl	8001a88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a14:	233f      	movs	r3, #63	; 0x3f
 8001a16:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001a20:	2300      	movs	r3, #0
 8001a22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001a24:	2340      	movs	r3, #64	; 0x40
 8001a26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001a28:	2340      	movs	r3, #64	; 0x40
 8001a2a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001a2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a30:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001a32:	2340      	movs	r3, #64	; 0x40
 8001a34:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001a36:	1d3b      	adds	r3, r7, #4
 8001a38:	2107      	movs	r1, #7
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f009 fc70 	bl	800b320 <HAL_RCC_ClockConfig>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001a46:	f000 f81f 	bl	8001a88 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8001a4a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001a4e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8001a52:	2000      	movs	r0, #0
 8001a54:	f009 fe1a 	bl	800b68c <HAL_RCC_MCOConfig>
}
 8001a58:	bf00      	nop
 8001a5a:	3770      	adds	r7, #112	; 0x70
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	58024400 	.word	0x58024400
 8001a64:	58024800 	.word	0x58024800

08001a68 <BSP_CAMERA_FrameEventCallback>:

/* USER CODE BEGIN 4 */

void BSP_CAMERA_FrameEventCallback(uint32_t Instance) {
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
    camera_frame_ready = 1;
 8001a70:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <BSP_CAMERA_FrameEventCallback+0x1c>)
 8001a72:	2201      	movs	r2, #1
 8001a74:	601a      	str	r2, [r3, #0]
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	240084b0 	.word	0x240084b0

08001a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a8c:	b672      	cpsid	i
}
 8001a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state
     */
    __disable_irq();
    while (1) {
 8001a90:	e7fe      	b.n	8001a90 <Error_Handler+0x8>
	...

08001a94 <OV5640_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OV5640_RegisterBusIO(OV5640_Object_t *pObj, OV5640_IO_t *pIO)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d103      	bne.n	8001aac <OV5640_RegisterBusIO+0x18>
  {
    ret = OV5640_ERROR;
 8001aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	e02c      	b.n	8001b06 <OV5640_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	891a      	ldrh	r2, [r3, #8]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	68da      	ldr	r2, [r3, #12]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	691a      	ldr	r2, [r3, #16]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	695a      	ldr	r2, [r3, #20]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a0c      	ldr	r2, [pc, #48]	; (8001b10 <OV5640_RegisterBusIO+0x7c>)
 8001ae0:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a0b      	ldr	r2, [pc, #44]	; (8001b14 <OV5640_RegisterBusIO+0x80>)
 8001ae6:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	621a      	str	r2, [r3, #32]

    if (pObj->IO.Init != NULL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d004      	beq.n	8001b00 <OV5640_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4798      	blx	r3
 8001afc:	60f8      	str	r0, [r7, #12]
 8001afe:	e002      	b.n	8001b06 <OV5640_RegisterBusIO+0x72>
    }
    else
    {
      ret = OV5640_ERROR;
 8001b00:	f04f 33ff 	mov.w	r3, #4294967295
 8001b04:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001b06:	68fb      	ldr	r3, [r7, #12]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	08003317 	.word	0x08003317
 8001b14:	08003349 	.word	0x08003349

08001b18 <OV5640_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_Init(OV5640_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b088      	sub	sp, #32
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 8001b24:	2300      	movs	r3, #0
 8001b26:	61bb      	str	r3, [r7, #24]
    {OV5640_AEC_CTRL1F, 0x14},
    {OV5640_SYSTEM_CTROL0, 0x02},
  };
  uint8_t tmp;

  if (pObj->IsInitialized == 0U)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d165      	bne.n	8001bfe <OV5640_Init+0xe6>
  {
    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	2b04      	cmp	r3, #4
 8001b36:	d80e      	bhi.n	8001b56 <OV5640_Init+0x3e>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00f      	beq.n	8001b5e <OV5640_Init+0x46>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d00c      	beq.n	8001b5e <OV5640_Init+0x46>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d009      	beq.n	8001b5e <OV5640_Init+0x46>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b07      	cmp	r3, #7
 8001b4e:	d006      	beq.n	8001b5e <OV5640_Init+0x46>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b08      	cmp	r3, #8
 8001b54:	d003      	beq.n	8001b5e <OV5640_Init+0x46>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 8001b56:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5a:	61bb      	str	r3, [r7, #24]
 8001b5c:	e04f      	b.n	8001bfe <OV5640_Init+0xe6>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
 8001b62:	e01f      	b.n	8001ba4 <OV5640_Init+0x8c>
      {
        if (ret != OV5640_ERROR)
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b6a:	d018      	beq.n	8001b9e <OV5640_Init+0x86>
        {
          tmp = (uint8_t)OV5640_Common[index][1];
 8001b6c:	4a26      	ldr	r2, [pc, #152]	; (8001c08 <OV5640_Init+0xf0>)
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	885b      	ldrh	r3, [r3, #2]
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	75fb      	strb	r3, [r7, #23]

          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f103 0018 	add.w	r0, r3, #24
 8001b80:	4a21      	ldr	r2, [pc, #132]	; (8001c08 <OV5640_Init+0xf0>)
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001b88:	f107 0217 	add.w	r2, r7, #23
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	f001 fc0b 	bl	80033a8 <ov5640_write_reg>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d002      	beq.n	8001b9e <OV5640_Init+0x86>
          {
            ret = OV5640_ERROR;
 8001b98:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9c:	61bb      	str	r3, [r7, #24]
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	61fb      	str	r3, [r7, #28]
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	2bfd      	cmp	r3, #253	; 0xfd
 8001ba8:	d9dc      	bls.n	8001b64 <OV5640_Init+0x4c>
          }
        }
      }

      if (ret == OV5640_OK)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d126      	bne.n	8001bfe <OV5640_Init+0xe6>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 8001bb0:	68b9      	ldr	r1, [r7, #8]
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f000 f9e0 	bl	8001f78 <OV5640_SetResolution>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <OV5640_Init+0xae>
        {
          ret = OV5640_ERROR;
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc2:	61bb      	str	r3, [r7, #24]
 8001bc4:	e01b      	b.n	8001bfe <OV5640_Init+0xe6>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	f000 f833 	bl	8001c34 <OV5640_SetPixelFormat>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <OV5640_Init+0xc4>
        {
          ret = OV5640_ERROR;
 8001bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd8:	61bb      	str	r3, [r7, #24]
 8001bda:	e010      	b.n	8001bfe <OV5640_Init+0xe6>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(pObj, OV5640_POLARITY_PCLK_HIGH, OV5640_POLARITY_HREF_HIGH,
 8001bdc:	2300      	movs	r3, #0
 8001bde:	2201      	movs	r2, #1
 8001be0:	2101      	movs	r1, #1
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f000 fb64 	bl	80022b0 <OV5640_SetPolarities>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <OV5640_Init+0xde>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 8001bee:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf2:	61bb      	str	r3, [r7, #24]
 8001bf4:	e003      	b.n	8001bfe <OV5640_Init+0xe6>
        }
        else
        {
          pObj->IsInitialized = 1U;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
      }
    }
  }

  return ret;
 8001bfe:	69bb      	ldr	r3, [r7, #24]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3720      	adds	r7, #32
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	0801cd78 	.word	0x0801cd78

08001c0c <OV5640_DeInit>:
  * @brief  De-initializes the camera sensor.
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV5640_DeInit(OV5640_Object_t *pObj)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized == 1U)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d103      	bne.n	8001c26 <OV5640_DeInit+0x1a>
  {
    /* De-initialize camera sensor interface */
    pObj->IsInitialized = 0U;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return OV5640_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <OV5640_SetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_SetPixelFormat(OV5640_Object_t *pObj, uint32_t PixelFormat)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d00f      	beq.n	8001c68 <OV5640_SetPixelFormat+0x34>
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d00c      	beq.n	8001c68 <OV5640_SetPixelFormat+0x34>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d009      	beq.n	8001c68 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	2b07      	cmp	r3, #7
 8001c58:	d006      	beq.n	8001c68 <OV5640_SetPixelFormat+0x34>
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	2b08      	cmp	r3, #8
 8001c5e:	d003      	beq.n	8001c68 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 8001c60:	f04f 33ff 	mov.w	r3, #4294967295
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	e16a      	b.n	8001f3e <OV5640_SetPixelFormat+0x30a>
  }
  else
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	2b07      	cmp	r3, #7
 8001c6e:	f200 80c3 	bhi.w	8001df8 <OV5640_SetPixelFormat+0x1c4>
 8001c72:	a201      	add	r2, pc, #4	; (adr r2, 8001c78 <OV5640_SetPixelFormat+0x44>)
 8001c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c78:	08001cf1 	.word	0x08001cf1
 8001c7c:	08001c99 	.word	0x08001c99
 8001c80:	08001df9 	.word	0x08001df9
 8001c84:	08001df9 	.word	0x08001df9
 8001c88:	08001df9 	.word	0x08001df9
 8001c8c:	08001df9 	.word	0x08001df9
 8001c90:	08001d49 	.word	0x08001d49
 8001c94:	08001da1 	.word	0x08001da1
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8001c98:	2300      	movs	r3, #0
 8001c9a:	613b      	str	r3, [r7, #16]
 8001c9c:	e024      	b.n	8001ce8 <OV5640_SetPixelFormat+0xb4>
        {
          if (ret != OV5640_ERROR)
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca4:	d01d      	beq.n	8001ce2 <OV5640_SetPixelFormat+0xae>
          {
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8001ca6:	4aa8      	ldr	r2, [pc, #672]	; (8001f48 <OV5640_SetPixelFormat+0x314>)
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	885b      	ldrh	r3, [r3, #2]
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f103 0018 	add.w	r0, r3, #24
 8001cba:	4aa3      	ldr	r2, [pc, #652]	; (8001f48 <OV5640_SetPixelFormat+0x314>)
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001cc2:	f107 020f 	add.w	r2, r7, #15
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	f001 fb6e 	bl	80033a8 <ov5640_write_reg>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <OV5640_SetPixelFormat+0xa6>
            {
              ret = OV5640_ERROR;
 8001cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	e003      	b.n	8001ce2 <OV5640_SetPixelFormat+0xae>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001cda:	2101      	movs	r1, #1
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f001 fb00 	bl	80032e2 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d9d7      	bls.n	8001c9e <OV5640_SetPixelFormat+0x6a>
            }
          }
        }
        break;
 8001cee:	e0af      	b.n	8001e50 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	e024      	b.n	8001d40 <OV5640_SetPixelFormat+0x10c>
        {
          if (ret != OV5640_ERROR)
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cfc:	d01d      	beq.n	8001d3a <OV5640_SetPixelFormat+0x106>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8001cfe:	4a93      	ldr	r2, [pc, #588]	; (8001f4c <OV5640_SetPixelFormat+0x318>)
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	885b      	ldrh	r3, [r3, #2]
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f103 0018 	add.w	r0, r3, #24
 8001d12:	4a8e      	ldr	r2, [pc, #568]	; (8001f4c <OV5640_SetPixelFormat+0x318>)
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001d1a:	f107 020f 	add.w	r2, r7, #15
 8001d1e:	2301      	movs	r3, #1
 8001d20:	f001 fb42 	bl	80033a8 <ov5640_write_reg>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <OV5640_SetPixelFormat+0xfe>
            {
              ret = OV5640_ERROR;
 8001d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	e003      	b.n	8001d3a <OV5640_SetPixelFormat+0x106>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001d32:	2101      	movs	r1, #1
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f001 fad4 	bl	80032e2 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d9d7      	bls.n	8001cf6 <OV5640_SetPixelFormat+0xc2>
            }
          }
        }
        break;
 8001d46:	e083      	b.n	8001e50 <OV5640_SetPixelFormat+0x21c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8001d48:	2300      	movs	r3, #0
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	e024      	b.n	8001d98 <OV5640_SetPixelFormat+0x164>
        {
          if (ret != OV5640_ERROR)
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d54:	d01d      	beq.n	8001d92 <OV5640_SetPixelFormat+0x15e>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 8001d56:	4a7e      	ldr	r2, [pc, #504]	; (8001f50 <OV5640_SetPixelFormat+0x31c>)
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	885b      	ldrh	r3, [r3, #2]
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f103 0018 	add.w	r0, r3, #24
 8001d6a:	4a79      	ldr	r2, [pc, #484]	; (8001f50 <OV5640_SetPixelFormat+0x31c>)
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001d72:	f107 020f 	add.w	r2, r7, #15
 8001d76:	2301      	movs	r3, #1
 8001d78:	f001 fb16 	bl	80033a8 <ov5640_write_reg>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <OV5640_SetPixelFormat+0x156>
            {
              ret = OV5640_ERROR;
 8001d82:	f04f 33ff 	mov.w	r3, #4294967295
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	e003      	b.n	8001d92 <OV5640_SetPixelFormat+0x15e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f001 faa8 	bl	80032e2 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	3301      	adds	r3, #1
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d9d7      	bls.n	8001d4e <OV5640_SetPixelFormat+0x11a>
            }
          }
        }
        break;
 8001d9e:	e057      	b.n	8001e50 <OV5640_SetPixelFormat+0x21c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8001da0:	2300      	movs	r3, #0
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	e024      	b.n	8001df0 <OV5640_SetPixelFormat+0x1bc>
        {
          if (ret != OV5640_ERROR)
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dac:	d01d      	beq.n	8001dea <OV5640_SetPixelFormat+0x1b6>
          {
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8001dae:	4a69      	ldr	r2, [pc, #420]	; (8001f54 <OV5640_SetPixelFormat+0x320>)
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	885b      	ldrh	r3, [r3, #2]
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f103 0018 	add.w	r0, r3, #24
 8001dc2:	4a64      	ldr	r2, [pc, #400]	; (8001f54 <OV5640_SetPixelFormat+0x320>)
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001dca:	f107 020f 	add.w	r2, r7, #15
 8001dce:	2301      	movs	r3, #1
 8001dd0:	f001 faea 	bl	80033a8 <ov5640_write_reg>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <OV5640_SetPixelFormat+0x1ae>
            {
              ret = OV5640_ERROR;
 8001dda:	f04f 33ff 	mov.w	r3, #4294967295
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	e003      	b.n	8001dea <OV5640_SetPixelFormat+0x1b6>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001de2:	2101      	movs	r1, #1
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f001 fa7c 	bl	80032e2 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	3301      	adds	r3, #1
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d9d7      	bls.n	8001da6 <OV5640_SetPixelFormat+0x172>
            }
          }
        }
        break;
 8001df6:	e02b      	b.n	8001e50 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8001df8:	2300      	movs	r3, #0
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	e024      	b.n	8001e48 <OV5640_SetPixelFormat+0x214>
        {
          if (ret != OV5640_ERROR)
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e04:	d01d      	beq.n	8001e42 <OV5640_SetPixelFormat+0x20e>
          {
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 8001e06:	4a54      	ldr	r2, [pc, #336]	; (8001f58 <OV5640_SetPixelFormat+0x324>)
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4413      	add	r3, r2
 8001e0e:	885b      	ldrh	r3, [r3, #2]
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f103 0018 	add.w	r0, r3, #24
 8001e1a:	4a4f      	ldr	r2, [pc, #316]	; (8001f58 <OV5640_SetPixelFormat+0x324>)
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001e22:	f107 020f 	add.w	r2, r7, #15
 8001e26:	2301      	movs	r3, #1
 8001e28:	f001 fabe 	bl	80033a8 <ov5640_write_reg>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <OV5640_SetPixelFormat+0x206>
            {
              ret = OV5640_ERROR;
 8001e32:	f04f 33ff 	mov.w	r3, #4294967295
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	e003      	b.n	8001e42 <OV5640_SetPixelFormat+0x20e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f001 fa50 	bl	80032e2 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	3301      	adds	r3, #1
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d9d7      	bls.n	8001dfe <OV5640_SetPixelFormat+0x1ca>
            }
          }
        }
        break;
 8001e4e:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	2b08      	cmp	r3, #8
 8001e54:	d173      	bne.n	8001f3e <OV5640_SetPixelFormat+0x30a>
    {
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f103 0018 	add.w	r0, r3, #24
 8001e5c:	f107 020f 	add.w	r2, r7, #15
 8001e60:	2301      	movs	r3, #1
 8001e62:	f643 0121 	movw	r1, #14369	; 0x3821
 8001e66:	f001 fa88 	bl	800337a <ov5640_read_reg>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <OV5640_SetPixelFormat+0x244>
      {
        ret = OV5640_ERROR;
 8001e70:	f04f 33ff 	mov.w	r3, #4294967295
 8001e74:	617b      	str	r3, [r7, #20]
 8001e76:	e062      	b.n	8001f3e <OV5640_SetPixelFormat+0x30a>
      }
      else
      {
        tmp |= (1 << 5);
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
 8001e7a:	f043 0320 	orr.w	r3, r3, #32
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	73fb      	strb	r3, [r7, #15]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f103 0018 	add.w	r0, r3, #24
 8001e88:	f107 020f 	add.w	r2, r7, #15
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	f643 0121 	movw	r1, #14369	; 0x3821
 8001e92:	f001 fa89 	bl	80033a8 <ov5640_write_reg>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <OV5640_SetPixelFormat+0x270>
        {
          ret = OV5640_ERROR;
 8001e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	e04c      	b.n	8001f3e <OV5640_SetPixelFormat+0x30a>
        }
        else
        {
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f103 0018 	add.w	r0, r3, #24
 8001eaa:	f107 020f 	add.w	r2, r7, #15
 8001eae:	2301      	movs	r3, #1
 8001eb0:	f243 0102 	movw	r1, #12290	; 0x3002
 8001eb4:	f001 fa61 	bl	800337a <ov5640_read_reg>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <OV5640_SetPixelFormat+0x292>
          {
            ret = OV5640_ERROR;
 8001ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec2:	617b      	str	r3, [r7, #20]
 8001ec4:	e03b      	b.n	8001f3e <OV5640_SetPixelFormat+0x30a>
          }
          else
          {
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 8001ec6:	7bfb      	ldrb	r3, [r7, #15]
 8001ec8:	f023 031c 	bic.w	r3, r3, #28
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f103 0018 	add.w	r0, r3, #24
 8001ed6:	f107 020f 	add.w	r2, r7, #15
 8001eda:	2301      	movs	r3, #1
 8001edc:	f243 0102 	movw	r1, #12290	; 0x3002
 8001ee0:	f001 fa62 	bl	80033a8 <ov5640_write_reg>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <OV5640_SetPixelFormat+0x2be>
            {
              ret = OV5640_ERROR;
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295
 8001eee:	617b      	str	r3, [r7, #20]
 8001ef0:	e025      	b.n	8001f3e <OV5640_SetPixelFormat+0x30a>
            }
            else
            {
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f103 0018 	add.w	r0, r3, #24
 8001ef8:	f107 020f 	add.w	r2, r7, #15
 8001efc:	2301      	movs	r3, #1
 8001efe:	f243 0106 	movw	r1, #12294	; 0x3006
 8001f02:	f001 fa3a 	bl	800337a <ov5640_read_reg>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <OV5640_SetPixelFormat+0x2e0>
              {
                ret = OV5640_ERROR;
 8001f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f10:	617b      	str	r3, [r7, #20]
 8001f12:	e014      	b.n	8001f3e <OV5640_SetPixelFormat+0x30a>
              }
              else
              {
                tmp |= ((1 << 5) | (1 << 3));
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
 8001f16:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	73fb      	strb	r3, [r7, #15]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f103 0018 	add.w	r0, r3, #24
 8001f24:	f107 020f 	add.w	r2, r7, #15
 8001f28:	2301      	movs	r3, #1
 8001f2a:	f243 0106 	movw	r1, #12294	; 0x3006
 8001f2e:	f001 fa3b 	bl	80033a8 <ov5640_write_reg>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d002      	beq.n	8001f3e <OV5640_SetPixelFormat+0x30a>
                {
                  ret = OV5640_ERROR;
 8001f38:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3c:	617b      	str	r3, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 8001f3e:	697b      	ldr	r3, [r7, #20]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	0801d170 	.word	0x0801d170
 8001f4c:	0801d178 	.word	0x0801d178
 8001f50:	0801d180 	.word	0x0801d180
 8001f54:	0801d188 	.word	0x0801d188
 8001f58:	0801d190 	.word	0x0801d190

08001f5c <OV5640_GetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_GetPixelFormat(OV5640_Object_t *pObj, uint32_t *PixelFormat)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(PixelFormat);

  return OV5640_ERROR;
 8001f66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
	...

08001f78 <OV5640_SetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_SetResolution(OV5640_Object_t *pObj, uint32_t Resolution)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	2b04      	cmp	r3, #4
 8001f8a:	d903      	bls.n	8001f94 <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 8001f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f90:	617b      	str	r3, [r7, #20]
 8001f92:	e0d8      	b.n	8002146 <OV5640_SetResolution+0x1ce>
  }
  else
  {
    /* Initialize OV5640 */
    switch (Resolution)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	f200 80d1 	bhi.w	800213e <OV5640_SetResolution+0x1c6>
 8001f9c:	a201      	add	r2, pc, #4	; (adr r2, 8001fa4 <OV5640_SetResolution+0x2c>)
 8001f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa2:	bf00      	nop
 8001fa4:	08001fb9 	.word	0x08001fb9
 8001fa8:	08002007 	.word	0x08002007
 8001fac:	08002055 	.word	0x08002055
 8001fb0:	080020a3 	.word	0x080020a3
 8001fb4:	080020f1 	.word	0x080020f1
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8001fb8:	2300      	movs	r3, #0
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	e01f      	b.n	8001ffe <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc4:	d018      	beq.n	8001ff8 <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8001fc6:	4a62      	ldr	r2, [pc, #392]	; (8002150 <OV5640_SetResolution+0x1d8>)
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	885b      	ldrh	r3, [r3, #2]
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f103 0018 	add.w	r0, r3, #24
 8001fda:	4a5d      	ldr	r2, [pc, #372]	; (8002150 <OV5640_SetResolution+0x1d8>)
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001fe2:	f107 020f 	add.w	r2, r7, #15
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	f001 f9de 	bl	80033a8 <ov5640_write_reg>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d002      	beq.n	8001ff8 <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 8001ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff6:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	2b03      	cmp	r3, #3
 8002002:	d9dc      	bls.n	8001fbe <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 8002004:	e09f      	b.n	8002146 <OV5640_SetResolution+0x1ce>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	e01f      	b.n	800204c <OV5640_SetResolution+0xd4>
        {
          if (ret != OV5640_ERROR)
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002012:	d018      	beq.n	8002046 <OV5640_SetResolution+0xce>
          {
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8002014:	4a4f      	ldr	r2, [pc, #316]	; (8002154 <OV5640_SetResolution+0x1dc>)
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	885b      	ldrh	r3, [r3, #2]
 800201e:	b2db      	uxtb	r3, r3
 8002020:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f103 0018 	add.w	r0, r3, #24
 8002028:	4a4a      	ldr	r2, [pc, #296]	; (8002154 <OV5640_SetResolution+0x1dc>)
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002030:	f107 020f 	add.w	r2, r7, #15
 8002034:	2301      	movs	r3, #1
 8002036:	f001 f9b7 	bl	80033a8 <ov5640_write_reg>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d002      	beq.n	8002046 <OV5640_SetResolution+0xce>
            {
              ret = OV5640_ERROR;
 8002040:	f04f 33ff 	mov.w	r3, #4294967295
 8002044:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	3301      	adds	r3, #1
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	2b03      	cmp	r3, #3
 8002050:	d9dc      	bls.n	800200c <OV5640_SetResolution+0x94>
            }
          }
        }
        break;
 8002052:	e078      	b.n	8002146 <OV5640_SetResolution+0x1ce>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8002054:	2300      	movs	r3, #0
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	e01f      	b.n	800209a <OV5640_SetResolution+0x122>
        {
          if (ret != OV5640_ERROR)
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002060:	d018      	beq.n	8002094 <OV5640_SetResolution+0x11c>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 8002062:	4a3d      	ldr	r2, [pc, #244]	; (8002158 <OV5640_SetResolution+0x1e0>)
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	885b      	ldrh	r3, [r3, #2]
 800206c:	b2db      	uxtb	r3, r3
 800206e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f103 0018 	add.w	r0, r3, #24
 8002076:	4a38      	ldr	r2, [pc, #224]	; (8002158 <OV5640_SetResolution+0x1e0>)
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800207e:	f107 020f 	add.w	r2, r7, #15
 8002082:	2301      	movs	r3, #1
 8002084:	f001 f990 	bl	80033a8 <ov5640_write_reg>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d002      	beq.n	8002094 <OV5640_SetResolution+0x11c>
            {
              ret = OV5640_ERROR;
 800208e:	f04f 33ff 	mov.w	r3, #4294967295
 8002092:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	3301      	adds	r3, #1
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	2b03      	cmp	r3, #3
 800209e:	d9dc      	bls.n	800205a <OV5640_SetResolution+0xe2>
            }
          }
        }
        break;
 80020a0:	e051      	b.n	8002146 <OV5640_SetResolution+0x1ce>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 80020a2:	2300      	movs	r3, #0
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	e01f      	b.n	80020e8 <OV5640_SetResolution+0x170>
        {
          if (ret != OV5640_ERROR)
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ae:	d018      	beq.n	80020e2 <OV5640_SetResolution+0x16a>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 80020b0:	4a2a      	ldr	r2, [pc, #168]	; (800215c <OV5640_SetResolution+0x1e4>)
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	885b      	ldrh	r3, [r3, #2]
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f103 0018 	add.w	r0, r3, #24
 80020c4:	4a25      	ldr	r2, [pc, #148]	; (800215c <OV5640_SetResolution+0x1e4>)
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80020cc:	f107 020f 	add.w	r2, r7, #15
 80020d0:	2301      	movs	r3, #1
 80020d2:	f001 f969 	bl	80033a8 <ov5640_write_reg>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d002      	beq.n	80020e2 <OV5640_SetResolution+0x16a>
            {
              ret = OV5640_ERROR;
 80020dc:	f04f 33ff 	mov.w	r3, #4294967295
 80020e0:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	3301      	adds	r3, #1
 80020e6:	613b      	str	r3, [r7, #16]
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	d9dc      	bls.n	80020a8 <OV5640_SetResolution+0x130>
            }
          }
        }
        break;
 80020ee:	e02a      	b.n	8002146 <OV5640_SetResolution+0x1ce>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 80020f0:	2300      	movs	r3, #0
 80020f2:	613b      	str	r3, [r7, #16]
 80020f4:	e01f      	b.n	8002136 <OV5640_SetResolution+0x1be>
        {
          if (ret != OV5640_ERROR)
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020fc:	d018      	beq.n	8002130 <OV5640_SetResolution+0x1b8>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 80020fe:	4a18      	ldr	r2, [pc, #96]	; (8002160 <OV5640_SetResolution+0x1e8>)
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	885b      	ldrh	r3, [r3, #2]
 8002108:	b2db      	uxtb	r3, r3
 800210a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f103 0018 	add.w	r0, r3, #24
 8002112:	4a13      	ldr	r2, [pc, #76]	; (8002160 <OV5640_SetResolution+0x1e8>)
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800211a:	f107 020f 	add.w	r2, r7, #15
 800211e:	2301      	movs	r3, #1
 8002120:	f001 f942 	bl	80033a8 <ov5640_write_reg>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d002      	beq.n	8002130 <OV5640_SetResolution+0x1b8>
            {
              ret = OV5640_ERROR;
 800212a:	f04f 33ff 	mov.w	r3, #4294967295
 800212e:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	3301      	adds	r3, #1
 8002134:	613b      	str	r3, [r7, #16]
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	2b03      	cmp	r3, #3
 800213a:	d9dc      	bls.n	80020f6 <OV5640_SetResolution+0x17e>
            }
          }
        }
        break;
 800213c:	e003      	b.n	8002146 <OV5640_SetResolution+0x1ce>
      default:
        ret = OV5640_ERROR;
 800213e:	f04f 33ff 	mov.w	r3, #4294967295
 8002142:	617b      	str	r3, [r7, #20]
        break;
 8002144:	bf00      	nop
    }
  }

  return ret;
 8002146:	697b      	ldr	r3, [r7, #20]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	0801d198 	.word	0x0801d198
 8002154:	0801d1a8 	.word	0x0801d1a8
 8002158:	0801d1b8 	.word	0x0801d1b8
 800215c:	0801d1c8 	.word	0x0801d1c8
 8002160:	0801d1d8 	.word	0x0801d1d8

08002164 <OV5640_GetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_GetResolution(OV5640_Object_t *pObj, uint32_t *Resolution)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t x_size;
  uint16_t y_size;
  uint8_t tmp;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f103 0018 	add.w	r0, r3, #24
 8002174:	f107 020f 	add.w	r2, r7, #15
 8002178:	2301      	movs	r3, #1
 800217a:	f643 0108 	movw	r1, #14344	; 0x3808
 800217e:	f001 f8fc 	bl	800337a <ov5640_read_reg>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d003      	beq.n	8002190 <OV5640_GetResolution+0x2c>
  {
    ret = OV5640_ERROR;
 8002188:	f04f 33ff 	mov.w	r3, #4294967295
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	e08a      	b.n	80022a6 <OV5640_GetResolution+0x142>
  }
  else
  {
    x_size = (uint16_t)tmp << 8U;
 8002190:	7bfb      	ldrb	r3, [r7, #15]
 8002192:	b29b      	uxth	r3, r3
 8002194:	021b      	lsls	r3, r3, #8
 8002196:	827b      	strh	r3, [r7, #18]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f103 0018 	add.w	r0, r3, #24
 800219e:	f107 020f 	add.w	r2, r7, #15
 80021a2:	2301      	movs	r3, #1
 80021a4:	f643 0109 	movw	r1, #14345	; 0x3809
 80021a8:	f001 f8e7 	bl	800337a <ov5640_read_reg>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <OV5640_GetResolution+0x56>
    {
      ret = OV5640_ERROR;
 80021b2:	f04f 33ff 	mov.w	r3, #4294967295
 80021b6:	617b      	str	r3, [r7, #20]
 80021b8:	e075      	b.n	80022a6 <OV5640_GetResolution+0x142>
    }
    else
    {
      x_size |= tmp;
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
 80021bc:	b29a      	uxth	r2, r3
 80021be:	8a7b      	ldrh	r3, [r7, #18]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	827b      	strh	r3, [r7, #18]

      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f103 0018 	add.w	r0, r3, #24
 80021ca:	f107 020f 	add.w	r2, r7, #15
 80021ce:	2301      	movs	r3, #1
 80021d0:	f643 010a 	movw	r1, #14346	; 0x380a
 80021d4:	f001 f8d1 	bl	800337a <ov5640_read_reg>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <OV5640_GetResolution+0x82>
      {
        ret = OV5640_ERROR;
 80021de:	f04f 33ff 	mov.w	r3, #4294967295
 80021e2:	617b      	str	r3, [r7, #20]
 80021e4:	e05f      	b.n	80022a6 <OV5640_GetResolution+0x142>
      }
      else
      {
        y_size = (uint16_t)tmp << 8U;
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	021b      	lsls	r3, r3, #8
 80021ec:	823b      	strh	r3, [r7, #16]
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f103 0018 	add.w	r0, r3, #24
 80021f4:	f107 020f 	add.w	r2, r7, #15
 80021f8:	2301      	movs	r3, #1
 80021fa:	f643 010b 	movw	r1, #14347	; 0x380b
 80021fe:	f001 f8bc 	bl	800337a <ov5640_read_reg>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <OV5640_GetResolution+0xac>
        {
          ret = OV5640_ERROR;
 8002208:	f04f 33ff 	mov.w	r3, #4294967295
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	e04a      	b.n	80022a6 <OV5640_GetResolution+0x142>
        }
        else
        {
          y_size |= tmp;
 8002210:	7bfb      	ldrb	r3, [r7, #15]
 8002212:	b29a      	uxth	r2, r3
 8002214:	8a3b      	ldrh	r3, [r7, #16]
 8002216:	4313      	orrs	r3, r2
 8002218:	823b      	strh	r3, [r7, #16]

          if ((x_size == 800U) && (y_size == 480U))
 800221a:	8a7b      	ldrh	r3, [r7, #18]
 800221c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002220:	d109      	bne.n	8002236 <OV5640_GetResolution+0xd2>
 8002222:	8a3b      	ldrh	r3, [r7, #16]
 8002224:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002228:	d105      	bne.n	8002236 <OV5640_GetResolution+0xd2>
          {
            *Resolution = OV5640_R800x480;
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	2204      	movs	r2, #4
 800222e:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	e037      	b.n	80022a6 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 640U) && (y_size == 480U))
 8002236:	8a7b      	ldrh	r3, [r7, #18]
 8002238:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800223c:	d109      	bne.n	8002252 <OV5640_GetResolution+0xee>
 800223e:	8a3b      	ldrh	r3, [r7, #16]
 8002240:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002244:	d105      	bne.n	8002252 <OV5640_GetResolution+0xee>
          {
            *Resolution = OV5640_R640x480;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	2203      	movs	r2, #3
 800224a:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	e029      	b.n	80022a6 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 480U) && (y_size == 272U))
 8002252:	8a7b      	ldrh	r3, [r7, #18]
 8002254:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002258:	d109      	bne.n	800226e <OV5640_GetResolution+0x10a>
 800225a:	8a3b      	ldrh	r3, [r7, #16]
 800225c:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8002260:	d105      	bne.n	800226e <OV5640_GetResolution+0x10a>
          {
            *Resolution = OV5640_R480x272;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	2202      	movs	r2, #2
 8002266:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	e01b      	b.n	80022a6 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 320U) && (y_size == 240U))
 800226e:	8a7b      	ldrh	r3, [r7, #18]
 8002270:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002274:	d108      	bne.n	8002288 <OV5640_GetResolution+0x124>
 8002276:	8a3b      	ldrh	r3, [r7, #16]
 8002278:	2bf0      	cmp	r3, #240	; 0xf0
 800227a:	d105      	bne.n	8002288 <OV5640_GetResolution+0x124>
          {
            *Resolution = OV5640_R320x240;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	2201      	movs	r2, #1
 8002280:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	e00e      	b.n	80022a6 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 160U) && (y_size == 120U))
 8002288:	8a7b      	ldrh	r3, [r7, #18]
 800228a:	2ba0      	cmp	r3, #160	; 0xa0
 800228c:	d108      	bne.n	80022a0 <OV5640_GetResolution+0x13c>
 800228e:	8a3b      	ldrh	r3, [r7, #16]
 8002290:	2b78      	cmp	r3, #120	; 0x78
 8002292:	d105      	bne.n	80022a0 <OV5640_GetResolution+0x13c>
          {
            *Resolution = OV5640_R160x120;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
 800229e:	e002      	b.n	80022a6 <OV5640_GetResolution+0x142>
          }
          else
          {
            ret = OV5640_ERROR;
 80022a0:	f04f 33ff 	mov.w	r3, #4294967295
 80022a4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 80022a6:	697b      	ldr	r3, [r7, #20]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <OV5640_SetPolarities>:
  * @param  VsyncPolarity Polarity of the Vsync
  * @retval Component status
  */
int32_t OV5640_SetPolarities(OV5640_Object_t *pObj, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
 80022bc:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]

  if ((pObj == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d011      	beq.n	80022ec <OV5640_SetPolarities+0x3c>
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d002      	beq.n	80022d4 <OV5640_SetPolarities+0x24>
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d10b      	bne.n	80022ec <OV5640_SetPolarities+0x3c>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d002      	beq.n	80022e0 <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d105      	bne.n	80022ec <OV5640_SetPolarities+0x3c>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d006      	beq.n	80022f4 <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 80022ec:	f04f 33ff 	mov.w	r3, #4294967295
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	e01e      	b.n	8002332 <OV5640_SetPolarities+0x82>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	015b      	lsls	r3, r3, #5
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	b2db      	uxtb	r3, r3
 8002304:	4313      	orrs	r3, r2
 8002306:	b2da      	uxtb	r2, r3
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	b2db      	uxtb	r3, r3
 800230c:	4313      	orrs	r3, r2
 800230e:	b2db      	uxtb	r3, r3
 8002310:	74fb      	strb	r3, [r7, #19]

    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f103 0018 	add.w	r0, r3, #24
 8002318:	f107 0213 	add.w	r2, r7, #19
 800231c:	2301      	movs	r3, #1
 800231e:	f244 7140 	movw	r1, #18240	; 0x4740
 8002322:	f001 f841 	bl	80033a8 <ov5640_write_reg>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d002      	beq.n	8002332 <OV5640_SetPolarities+0x82>
    {
      ret = OV5640_ERROR;
 800232c:	f04f 33ff 	mov.w	r3, #4294967295
 8002330:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8002332:	697b      	ldr	r3, [r7, #20]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3718      	adds	r7, #24
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <OV5640_ReadID>:
  * @param  pObj  pointer to component object
  * @param  Id    pointer to component ID
  * @retval Component status
  */
int32_t OV5640_ReadID(OV5640_Object_t *pObj, uint32_t *Id)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  /* Initialize I2C */
  pObj->IO.Init();
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4798      	blx	r3

  /* Prepare the camera to be configured */
  tmp = 0x80;
 800234c:	2380      	movs	r3, #128	; 0x80
 800234e:	72fb      	strb	r3, [r7, #11]
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f103 0018 	add.w	r0, r3, #24
 8002356:	f107 020b 	add.w	r2, r7, #11
 800235a:	2301      	movs	r3, #1
 800235c:	f243 0108 	movw	r1, #12296	; 0x3008
 8002360:	f001 f822 	bl	80033a8 <ov5640_write_reg>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <OV5640_ReadID+0x36>
  {
    ret = OV5640_ERROR;
 800236a:	f04f 33ff 	mov.w	r3, #4294967295
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	e032      	b.n	80023d8 <OV5640_ReadID+0x9c>
  }
  else
  {
    (void)OV5640_Delay(pObj, 500);
 8002372:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 ffb3 	bl	80032e2 <OV5640_Delay>

    if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f103 0018 	add.w	r0, r3, #24
 8002382:	f107 020b 	add.w	r2, r7, #11
 8002386:	2301      	movs	r3, #1
 8002388:	f243 010a 	movw	r1, #12298	; 0x300a
 800238c:	f000 fff5 	bl	800337a <ov5640_read_reg>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <OV5640_ReadID+0x62>
    {
      ret = OV5640_ERROR;
 8002396:	f04f 33ff 	mov.w	r3, #4294967295
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	e01c      	b.n	80023d8 <OV5640_ReadID+0x9c>
    }
    else
    {
      *Id = (uint32_t)tmp << 8U;
 800239e:	7afb      	ldrb	r3, [r7, #11]
 80023a0:	021a      	lsls	r2, r3, #8
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	601a      	str	r2, [r3, #0]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f103 0018 	add.w	r0, r3, #24
 80023ac:	f107 020b 	add.w	r2, r7, #11
 80023b0:	2301      	movs	r3, #1
 80023b2:	f243 010b 	movw	r1, #12299	; 0x300b
 80023b6:	f000 ffe0 	bl	800337a <ov5640_read_reg>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <OV5640_ReadID+0x8c>
      {
        ret = OV5640_ERROR;
 80023c0:	f04f 33ff 	mov.w	r3, #4294967295
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	e007      	b.n	80023d8 <OV5640_ReadID+0x9c>
      }
      else
      {
        *Id |= tmp;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	7afa      	ldrb	r2, [r7, #11]
 80023ce:	431a      	orrs	r2, r3
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	601a      	str	r2, [r3, #0]
        ret = OV5640_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Component status */
  return ret;
 80023d8:	68fb      	ldr	r3, [r7, #12]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <OV5640_GetCapabilities>:
  * @param  pObj          pointer to component object
  * @param  Capabilities  pointer to component Capabilities
  * @retval Component status
  */
int32_t OV5640_GetCapabilities(OV5640_Object_t *pObj, OV5640_Capabilities_t *Capabilities)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b085      	sub	sp, #20
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
 80023ea:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d103      	bne.n	80023fa <OV5640_GetCapabilities+0x18>
  {
    ret = OV5640_ERROR;
 80023f2:	f04f 33ff 	mov.w	r3, #4294967295
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	e01f      	b.n	800243a <OV5640_GetCapabilities+0x58>
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	2201      	movs	r2, #1
 80023fe:	60da      	str	r2, [r3, #12]
    Capabilities->Config_Contrast      = 1;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	2201      	movs	r2, #1
 8002404:	615a      	str	r2, [r3, #20]
    Capabilities->Config_HueDegree     = 1;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	2201      	movs	r2, #1
 800240a:	619a      	str	r2, [r3, #24]
    Capabilities->Config_LightMode     = 1;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	2201      	movs	r2, #1
 8002410:	605a      	str	r2, [r3, #4]
    Capabilities->Config_MirrorFlip    = 1;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	2201      	movs	r2, #1
 8002416:	61da      	str	r2, [r3, #28]
    Capabilities->Config_NightMode     = 1;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	2201      	movs	r2, #1
 800241c:	625a      	str	r2, [r3, #36]	; 0x24
    Capabilities->Config_Resolution    = 1;
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	2201      	movs	r2, #1
 8002422:	601a      	str	r2, [r3, #0]
    Capabilities->Config_Saturation    = 1;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	2201      	movs	r2, #1
 8002428:	611a      	str	r2, [r3, #16]
    Capabilities->Config_SpecialEffect = 1;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	2201      	movs	r2, #1
 800242e:	609a      	str	r2, [r3, #8]
    Capabilities->Config_Zoom          = 1;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	2201      	movs	r2, #1
 8002434:	621a      	str	r2, [r3, #32]

    ret = OV5640_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800243a:	68fb      	ldr	r3, [r7, #12]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <OV5640_SetLightMode>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetLightMode(OV5640_Object_t *pObj, uint32_t LightMode)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
    {OV5640_AWB_G_GAIN_LSB, 0x00},
    {OV5640_AWB_B_GAIN_MSB, 0x04},
    {OV5640_AWB_B_GAIN_LSB, 0xF3},
  };

  tmp = 0x00;
 8002452:	2300      	movs	r3, #0
 8002454:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f103 0018 	add.w	r0, r3, #24
 800245c:	f107 020f 	add.w	r2, r7, #15
 8002460:	2301      	movs	r3, #1
 8002462:	f243 4106 	movw	r1, #13318	; 0x3406
 8002466:	f000 ff9f 	bl	80033a8 <ov5640_write_reg>
 800246a:	6178      	str	r0, [r7, #20]
  if (ret == OV5640_OK)
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10c      	bne.n	800248c <OV5640_SetLightMode+0x44>
  {
    tmp = 0x46;
 8002472:	2346      	movs	r3, #70	; 0x46
 8002474:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f103 0018 	add.w	r0, r3, #24
 800247c:	f107 020f 	add.w	r2, r7, #15
 8002480:	2301      	movs	r3, #1
 8002482:	f245 1190 	movw	r1, #20880	; 0x5190
 8002486:	f000 ff8f 	bl	80033a8 <ov5640_write_reg>
 800248a:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10c      	bne.n	80024ac <OV5640_SetLightMode+0x64>
  {
    tmp = 0xF8;
 8002492:	23f8      	movs	r3, #248	; 0xf8
 8002494:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f103 0018 	add.w	r0, r3, #24
 800249c:	f107 020f 	add.w	r2, r7, #15
 80024a0:	2301      	movs	r3, #1
 80024a2:	f245 1191 	movw	r1, #20881	; 0x5191
 80024a6:	f000 ff7f 	bl	80033a8 <ov5640_write_reg>
 80024aa:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10c      	bne.n	80024cc <OV5640_SetLightMode+0x84>
  {
    tmp = 0x04;
 80024b2:	2304      	movs	r3, #4
 80024b4:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f103 0018 	add.w	r0, r3, #24
 80024bc:	f107 020f 	add.w	r2, r7, #15
 80024c0:	2301      	movs	r3, #1
 80024c2:	f245 1192 	movw	r1, #20882	; 0x5192
 80024c6:	f000 ff6f 	bl	80033a8 <ov5640_write_reg>
 80024ca:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f040 80db 	bne.w	800268a <OV5640_SetLightMode+0x242>
  {
    switch (LightMode)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	2b07      	cmp	r3, #7
 80024da:	f200 80af 	bhi.w	800263c <OV5640_SetLightMode+0x1f4>
 80024de:	a201      	add	r2, pc, #4	; (adr r2, 80024e4 <OV5640_SetLightMode+0x9c>)
 80024e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e4:	08002505 	.word	0x08002505
 80024e8:	08002553 	.word	0x08002553
 80024ec:	0800263d 	.word	0x0800263d
 80024f0:	080025ef 	.word	0x080025ef
 80024f4:	0800263d 	.word	0x0800263d
 80024f8:	0800263d 	.word	0x0800263d
 80024fc:	0800263d 	.word	0x0800263d
 8002500:	080025a1 	.word	0x080025a1
    {
      case OV5640_LIGHT_SUNNY:
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8002504:	2300      	movs	r3, #0
 8002506:	613b      	str	r3, [r7, #16]
 8002508:	e01f      	b.n	800254a <OV5640_SetLightMode+0x102>
        {
          if (ret != OV5640_ERROR)
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002510:	d018      	beq.n	8002544 <OV5640_SetLightMode+0xfc>
          {
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 8002512:	4a61      	ldr	r2, [pc, #388]	; (8002698 <OV5640_SetLightMode+0x250>)
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	885b      	ldrh	r3, [r3, #2]
 800251c:	b2db      	uxtb	r3, r3
 800251e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f103 0018 	add.w	r0, r3, #24
 8002526:	4a5c      	ldr	r2, [pc, #368]	; (8002698 <OV5640_SetLightMode+0x250>)
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800252e:	f107 020f 	add.w	r2, r7, #15
 8002532:	2301      	movs	r3, #1
 8002534:	f000 ff38 	bl	80033a8 <ov5640_write_reg>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d002      	beq.n	8002544 <OV5640_SetLightMode+0xfc>
            {
              ret = OV5640_ERROR;
 800253e:	f04f 33ff 	mov.w	r3, #4294967295
 8002542:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	3301      	adds	r3, #1
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	2b06      	cmp	r3, #6
 800254e:	d9dc      	bls.n	800250a <OV5640_SetLightMode+0xc2>
            }
          }
        }
        break;
 8002550:	e09c      	b.n	800268c <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_OFFICE:
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 8002552:	2300      	movs	r3, #0
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	e01f      	b.n	8002598 <OV5640_SetLightMode+0x150>
        {
          if (ret != OV5640_ERROR)
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800255e:	d018      	beq.n	8002592 <OV5640_SetLightMode+0x14a>
          {
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 8002560:	4a4e      	ldr	r2, [pc, #312]	; (800269c <OV5640_SetLightMode+0x254>)
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	885b      	ldrh	r3, [r3, #2]
 800256a:	b2db      	uxtb	r3, r3
 800256c:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f103 0018 	add.w	r0, r3, #24
 8002574:	4a49      	ldr	r2, [pc, #292]	; (800269c <OV5640_SetLightMode+0x254>)
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800257c:	f107 020f 	add.w	r2, r7, #15
 8002580:	2301      	movs	r3, #1
 8002582:	f000 ff11 	bl	80033a8 <ov5640_write_reg>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d002      	beq.n	8002592 <OV5640_SetLightMode+0x14a>
            {
              ret = OV5640_ERROR;
 800258c:	f04f 33ff 	mov.w	r3, #4294967295
 8002590:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	3301      	adds	r3, #1
 8002596:	613b      	str	r3, [r7, #16]
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	2b06      	cmp	r3, #6
 800259c:	d9dc      	bls.n	8002558 <OV5640_SetLightMode+0x110>
            }
          }
        }
        break;
 800259e:	e075      	b.n	800268c <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_CLOUDY:
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 80025a0:	2300      	movs	r3, #0
 80025a2:	613b      	str	r3, [r7, #16]
 80025a4:	e01f      	b.n	80025e6 <OV5640_SetLightMode+0x19e>
        {
          if (ret != OV5640_ERROR)
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ac:	d018      	beq.n	80025e0 <OV5640_SetLightMode+0x198>
          {
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 80025ae:	4a3c      	ldr	r2, [pc, #240]	; (80026a0 <OV5640_SetLightMode+0x258>)
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	885b      	ldrh	r3, [r3, #2]
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f103 0018 	add.w	r0, r3, #24
 80025c2:	4a37      	ldr	r2, [pc, #220]	; (80026a0 <OV5640_SetLightMode+0x258>)
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80025ca:	f107 020f 	add.w	r2, r7, #15
 80025ce:	2301      	movs	r3, #1
 80025d0:	f000 feea 	bl	80033a8 <ov5640_write_reg>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d002      	beq.n	80025e0 <OV5640_SetLightMode+0x198>
            {
              ret = OV5640_ERROR;
 80025da:	f04f 33ff 	mov.w	r3, #4294967295
 80025de:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	3301      	adds	r3, #1
 80025e4:	613b      	str	r3, [r7, #16]
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	2b06      	cmp	r3, #6
 80025ea:	d9dc      	bls.n	80025a6 <OV5640_SetLightMode+0x15e>
            }
          }
        }
        break;
 80025ec:	e04e      	b.n	800268c <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_HOME:
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 80025ee:	2300      	movs	r3, #0
 80025f0:	613b      	str	r3, [r7, #16]
 80025f2:	e01f      	b.n	8002634 <OV5640_SetLightMode+0x1ec>
        {
          if (ret != OV5640_ERROR)
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fa:	d018      	beq.n	800262e <OV5640_SetLightMode+0x1e6>
          {
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 80025fc:	4a29      	ldr	r2, [pc, #164]	; (80026a4 <OV5640_SetLightMode+0x25c>)
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	885b      	ldrh	r3, [r3, #2]
 8002606:	b2db      	uxtb	r3, r3
 8002608:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f103 0018 	add.w	r0, r3, #24
 8002610:	4a24      	ldr	r2, [pc, #144]	; (80026a4 <OV5640_SetLightMode+0x25c>)
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002618:	f107 020f 	add.w	r2, r7, #15
 800261c:	2301      	movs	r3, #1
 800261e:	f000 fec3 	bl	80033a8 <ov5640_write_reg>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d002      	beq.n	800262e <OV5640_SetLightMode+0x1e6>
            {
              ret = OV5640_ERROR;
 8002628:	f04f 33ff 	mov.w	r3, #4294967295
 800262c:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	3301      	adds	r3, #1
 8002632:	613b      	str	r3, [r7, #16]
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	2b06      	cmp	r3, #6
 8002638:	d9dc      	bls.n	80025f4 <OV5640_SetLightMode+0x1ac>
            }
          }
        }
        break;
 800263a:	e027      	b.n	800268c <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_AUTO:
      default :
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 800263c:	2300      	movs	r3, #0
 800263e:	613b      	str	r3, [r7, #16]
 8002640:	e01f      	b.n	8002682 <OV5640_SetLightMode+0x23a>
        {
          if (ret != OV5640_ERROR)
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002648:	d018      	beq.n	800267c <OV5640_SetLightMode+0x234>
          {
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 800264a:	4a17      	ldr	r2, [pc, #92]	; (80026a8 <OV5640_SetLightMode+0x260>)
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	885b      	ldrh	r3, [r3, #2]
 8002654:	b2db      	uxtb	r3, r3
 8002656:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f103 0018 	add.w	r0, r3, #24
 800265e:	4a12      	ldr	r2, [pc, #72]	; (80026a8 <OV5640_SetLightMode+0x260>)
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002666:	f107 020f 	add.w	r2, r7, #15
 800266a:	2301      	movs	r3, #1
 800266c:	f000 fe9c 	bl	80033a8 <ov5640_write_reg>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <OV5640_SetLightMode+0x234>
            {
              ret = OV5640_ERROR;
 8002676:	f04f 33ff 	mov.w	r3, #4294967295
 800267a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	3301      	adds	r3, #1
 8002680:	613b      	str	r3, [r7, #16]
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	2b06      	cmp	r3, #6
 8002686:	d9dc      	bls.n	8002642 <OV5640_SetLightMode+0x1fa>
            }
          }
        }
        break;
 8002688:	e000      	b.n	800268c <OV5640_SetLightMode+0x244>
    }
  }
 800268a:	bf00      	nop
  return ret;
 800268c:	697b      	ldr	r3, [r7, #20]
}
 800268e:	4618      	mov	r0, r3
 8002690:	3718      	adds	r7, #24
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	0801d1e8 	.word	0x0801d1e8
 800269c:	0801d204 	.word	0x0801d204
 80026a0:	0801d220 	.word	0x0801d220
 80026a4:	0801d23c 	.word	0x0801d23c
 80026a8:	0801d258 	.word	0x0801d258

080026ac <OV5640_SetColorEffect>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetColorEffect(OV5640_Object_t *pObj, uint32_t Effect)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  switch (Effect)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	3b01      	subs	r3, #1
 80026ba:	2b1f      	cmp	r3, #31
 80026bc:	f200 81c0 	bhi.w	8002a40 <OV5640_SetColorEffect+0x394>
 80026c0:	a201      	add	r2, pc, #4	; (adr r2, 80026c8 <OV5640_SetColorEffect+0x1c>)
 80026c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c6:	bf00      	nop
 80026c8:	08002749 	.word	0x08002749
 80026cc:	080027d3 	.word	0x080027d3
 80026d0:	08002a41 	.word	0x08002a41
 80026d4:	0800285d 	.word	0x0800285d
 80026d8:	08002a41 	.word	0x08002a41
 80026dc:	08002a41 	.word	0x08002a41
 80026e0:	08002a41 	.word	0x08002a41
 80026e4:	080028e7 	.word	0x080028e7
 80026e8:	08002a41 	.word	0x08002a41
 80026ec:	08002a41 	.word	0x08002a41
 80026f0:	08002a41 	.word	0x08002a41
 80026f4:	08002a41 	.word	0x08002a41
 80026f8:	08002a41 	.word	0x08002a41
 80026fc:	08002a41 	.word	0x08002a41
 8002700:	08002a41 	.word	0x08002a41
 8002704:	08002971 	.word	0x08002971
 8002708:	08002a41 	.word	0x08002a41
 800270c:	08002a41 	.word	0x08002a41
 8002710:	08002a41 	.word	0x08002a41
 8002714:	08002a41 	.word	0x08002a41
 8002718:	08002a41 	.word	0x08002a41
 800271c:	08002a41 	.word	0x08002a41
 8002720:	08002a41 	.word	0x08002a41
 8002724:	08002a41 	.word	0x08002a41
 8002728:	08002a41 	.word	0x08002a41
 800272c:	08002a41 	.word	0x08002a41
 8002730:	08002a41 	.word	0x08002a41
 8002734:	08002a41 	.word	0x08002a41
 8002738:	08002a41 	.word	0x08002a41
 800273c:	08002a41 	.word	0x08002a41
 8002740:	08002a41 	.word	0x08002a41
 8002744:	080029f9 	.word	0x080029f9
  {
    case OV5640_COLOR_EFFECT_BLUE:
      tmp = 0xFF;
 8002748:	23ff      	movs	r3, #255	; 0xff
 800274a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f103 0018 	add.w	r0, r3, #24
 8002752:	f107 020b 	add.w	r2, r7, #11
 8002756:	2301      	movs	r3, #1
 8002758:	f245 0101 	movw	r1, #20481	; 0x5001
 800275c:	f000 fe24 	bl	80033a8 <ov5640_write_reg>
 8002760:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10c      	bne.n	8002782 <OV5640_SetColorEffect+0xd6>
      {
        tmp = 0x18;
 8002768:	2318      	movs	r3, #24
 800276a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f103 0018 	add.w	r0, r3, #24
 8002772:	f107 020b 	add.w	r2, r7, #11
 8002776:	2301      	movs	r3, #1
 8002778:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800277c:	f000 fe14 	bl	80033a8 <ov5640_write_reg>
 8002780:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10c      	bne.n	80027a2 <OV5640_SetColorEffect+0xf6>
      {
        tmp = 0xA0;
 8002788:	23a0      	movs	r3, #160	; 0xa0
 800278a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f103 0018 	add.w	r0, r3, #24
 8002792:	f107 020b 	add.w	r2, r7, #11
 8002796:	2301      	movs	r3, #1
 8002798:	f245 5183 	movw	r1, #21891	; 0x5583
 800279c:	f000 fe04 	bl	80033a8 <ov5640_write_reg>
 80027a0:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10c      	bne.n	80027c2 <OV5640_SetColorEffect+0x116>
      {
        tmp = 0x40;
 80027a8:	2340      	movs	r3, #64	; 0x40
 80027aa:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f103 0018 	add.w	r0, r3, #24
 80027b2:	f107 020b 	add.w	r2, r7, #11
 80027b6:	2301      	movs	r3, #1
 80027b8:	f245 5184 	movw	r1, #21892	; 0x5584
 80027bc:	f000 fdf4 	bl	80033a8 <ov5640_write_reg>
 80027c0:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 815f 	beq.w	8002a88 <OV5640_SetColorEffect+0x3dc>
      {
        ret = OV5640_ERROR;
 80027ca:	f04f 33ff 	mov.w	r3, #4294967295
 80027ce:	60fb      	str	r3, [r7, #12]
      }
      break;
 80027d0:	e15a      	b.n	8002a88 <OV5640_SetColorEffect+0x3dc>

    case OV5640_COLOR_EFFECT_RED:
      tmp = 0xFF;
 80027d2:	23ff      	movs	r3, #255	; 0xff
 80027d4:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f103 0018 	add.w	r0, r3, #24
 80027dc:	f107 020b 	add.w	r2, r7, #11
 80027e0:	2301      	movs	r3, #1
 80027e2:	f245 0101 	movw	r1, #20481	; 0x5001
 80027e6:	f000 fddf 	bl	80033a8 <ov5640_write_reg>
 80027ea:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10c      	bne.n	800280c <OV5640_SetColorEffect+0x160>
      {
        tmp = 0x18;
 80027f2:	2318      	movs	r3, #24
 80027f4:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f103 0018 	add.w	r0, r3, #24
 80027fc:	f107 020b 	add.w	r2, r7, #11
 8002800:	2301      	movs	r3, #1
 8002802:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002806:	f000 fdcf 	bl	80033a8 <ov5640_write_reg>
 800280a:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10c      	bne.n	800282c <OV5640_SetColorEffect+0x180>
      {
        tmp = 0x80;
 8002812:	2380      	movs	r3, #128	; 0x80
 8002814:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f103 0018 	add.w	r0, r3, #24
 800281c:	f107 020b 	add.w	r2, r7, #11
 8002820:	2301      	movs	r3, #1
 8002822:	f245 5183 	movw	r1, #21891	; 0x5583
 8002826:	f000 fdbf 	bl	80033a8 <ov5640_write_reg>
 800282a:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10c      	bne.n	800284c <OV5640_SetColorEffect+0x1a0>
      {
        tmp = 0xC0;
 8002832:	23c0      	movs	r3, #192	; 0xc0
 8002834:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f103 0018 	add.w	r0, r3, #24
 800283c:	f107 020b 	add.w	r2, r7, #11
 8002840:	2301      	movs	r3, #1
 8002842:	f245 5184 	movw	r1, #21892	; 0x5584
 8002846:	f000 fdaf 	bl	80033a8 <ov5640_write_reg>
 800284a:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 811c 	beq.w	8002a8c <OV5640_SetColorEffect+0x3e0>
      {
        ret = OV5640_ERROR;
 8002854:	f04f 33ff 	mov.w	r3, #4294967295
 8002858:	60fb      	str	r3, [r7, #12]
      }
      break;
 800285a:	e117      	b.n	8002a8c <OV5640_SetColorEffect+0x3e0>

    case OV5640_COLOR_EFFECT_GREEN:
      tmp = 0xFF;
 800285c:	23ff      	movs	r3, #255	; 0xff
 800285e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f103 0018 	add.w	r0, r3, #24
 8002866:	f107 020b 	add.w	r2, r7, #11
 800286a:	2301      	movs	r3, #1
 800286c:	f245 0101 	movw	r1, #20481	; 0x5001
 8002870:	f000 fd9a 	bl	80033a8 <ov5640_write_reg>
 8002874:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10c      	bne.n	8002896 <OV5640_SetColorEffect+0x1ea>
      {
        tmp = 0x18;
 800287c:	2318      	movs	r3, #24
 800287e:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f103 0018 	add.w	r0, r3, #24
 8002886:	f107 020b 	add.w	r2, r7, #11
 800288a:	2301      	movs	r3, #1
 800288c:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002890:	f000 fd8a 	bl	80033a8 <ov5640_write_reg>
 8002894:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10c      	bne.n	80028b6 <OV5640_SetColorEffect+0x20a>
      {
        tmp = 0x60;
 800289c:	2360      	movs	r3, #96	; 0x60
 800289e:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f103 0018 	add.w	r0, r3, #24
 80028a6:	f107 020b 	add.w	r2, r7, #11
 80028aa:	2301      	movs	r3, #1
 80028ac:	f245 5183 	movw	r1, #21891	; 0x5583
 80028b0:	f000 fd7a 	bl	80033a8 <ov5640_write_reg>
 80028b4:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10c      	bne.n	80028d6 <OV5640_SetColorEffect+0x22a>
      {
        tmp = 0x60;
 80028bc:	2360      	movs	r3, #96	; 0x60
 80028be:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f103 0018 	add.w	r0, r3, #24
 80028c6:	f107 020b 	add.w	r2, r7, #11
 80028ca:	2301      	movs	r3, #1
 80028cc:	f245 5184 	movw	r1, #21892	; 0x5584
 80028d0:	f000 fd6a 	bl	80033a8 <ov5640_write_reg>
 80028d4:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 80d9 	beq.w	8002a90 <OV5640_SetColorEffect+0x3e4>
      {
        ret = OV5640_ERROR;
 80028de:	f04f 33ff 	mov.w	r3, #4294967295
 80028e2:	60fb      	str	r3, [r7, #12]
      }
      break;
 80028e4:	e0d4      	b.n	8002a90 <OV5640_SetColorEffect+0x3e4>

    case OV5640_COLOR_EFFECT_BW:
      tmp = 0xFF;
 80028e6:	23ff      	movs	r3, #255	; 0xff
 80028e8:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f103 0018 	add.w	r0, r3, #24
 80028f0:	f107 020b 	add.w	r2, r7, #11
 80028f4:	2301      	movs	r3, #1
 80028f6:	f245 0101 	movw	r1, #20481	; 0x5001
 80028fa:	f000 fd55 	bl	80033a8 <ov5640_write_reg>
 80028fe:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10c      	bne.n	8002920 <OV5640_SetColorEffect+0x274>
      {
        tmp = 0x18;
 8002906:	2318      	movs	r3, #24
 8002908:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f103 0018 	add.w	r0, r3, #24
 8002910:	f107 020b 	add.w	r2, r7, #11
 8002914:	2301      	movs	r3, #1
 8002916:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800291a:	f000 fd45 	bl	80033a8 <ov5640_write_reg>
 800291e:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10c      	bne.n	8002940 <OV5640_SetColorEffect+0x294>
      {
        tmp = 0x80;
 8002926:	2380      	movs	r3, #128	; 0x80
 8002928:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f103 0018 	add.w	r0, r3, #24
 8002930:	f107 020b 	add.w	r2, r7, #11
 8002934:	2301      	movs	r3, #1
 8002936:	f245 5183 	movw	r1, #21891	; 0x5583
 800293a:	f000 fd35 	bl	80033a8 <ov5640_write_reg>
 800293e:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10c      	bne.n	8002960 <OV5640_SetColorEffect+0x2b4>
      {
        tmp = 0x80;
 8002946:	2380      	movs	r3, #128	; 0x80
 8002948:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f103 0018 	add.w	r0, r3, #24
 8002950:	f107 020b 	add.w	r2, r7, #11
 8002954:	2301      	movs	r3, #1
 8002956:	f245 5184 	movw	r1, #21892	; 0x5584
 800295a:	f000 fd25 	bl	80033a8 <ov5640_write_reg>
 800295e:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 8096 	beq.w	8002a94 <OV5640_SetColorEffect+0x3e8>
      {
        ret = OV5640_ERROR;
 8002968:	f04f 33ff 	mov.w	r3, #4294967295
 800296c:	60fb      	str	r3, [r7, #12]
      }
      break;
 800296e:	e091      	b.n	8002a94 <OV5640_SetColorEffect+0x3e8>

    case OV5640_COLOR_EFFECT_SEPIA:
      tmp = 0xFF;
 8002970:	23ff      	movs	r3, #255	; 0xff
 8002972:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f103 0018 	add.w	r0, r3, #24
 800297a:	f107 020b 	add.w	r2, r7, #11
 800297e:	2301      	movs	r3, #1
 8002980:	f245 0101 	movw	r1, #20481	; 0x5001
 8002984:	f000 fd10 	bl	80033a8 <ov5640_write_reg>
 8002988:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10c      	bne.n	80029aa <OV5640_SetColorEffect+0x2fe>
      {
        tmp = 0x18;
 8002990:	2318      	movs	r3, #24
 8002992:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f103 0018 	add.w	r0, r3, #24
 800299a:	f107 020b 	add.w	r2, r7, #11
 800299e:	2301      	movs	r3, #1
 80029a0:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80029a4:	f000 fd00 	bl	80033a8 <ov5640_write_reg>
 80029a8:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d10c      	bne.n	80029ca <OV5640_SetColorEffect+0x31e>
      {
        tmp = 0x40;
 80029b0:	2340      	movs	r3, #64	; 0x40
 80029b2:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f103 0018 	add.w	r0, r3, #24
 80029ba:	f107 020b 	add.w	r2, r7, #11
 80029be:	2301      	movs	r3, #1
 80029c0:	f245 5183 	movw	r1, #21891	; 0x5583
 80029c4:	f000 fcf0 	bl	80033a8 <ov5640_write_reg>
 80029c8:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10c      	bne.n	80029ea <OV5640_SetColorEffect+0x33e>
      {
        tmp = 0xA0;
 80029d0:	23a0      	movs	r3, #160	; 0xa0
 80029d2:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f103 0018 	add.w	r0, r3, #24
 80029da:	f107 020b 	add.w	r2, r7, #11
 80029de:	2301      	movs	r3, #1
 80029e0:	f245 5184 	movw	r1, #21892	; 0x5584
 80029e4:	f000 fce0 	bl	80033a8 <ov5640_write_reg>
 80029e8:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d053      	beq.n	8002a98 <OV5640_SetColorEffect+0x3ec>
      {
        ret = OV5640_ERROR;
 80029f0:	f04f 33ff 	mov.w	r3, #4294967295
 80029f4:	60fb      	str	r3, [r7, #12]
      }
      break;
 80029f6:	e04f      	b.n	8002a98 <OV5640_SetColorEffect+0x3ec>

    case OV5640_COLOR_EFFECT_NEGATIVE:
      tmp = 0xFF;
 80029f8:	23ff      	movs	r3, #255	; 0xff
 80029fa:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f103 0018 	add.w	r0, r3, #24
 8002a02:	f107 020b 	add.w	r2, r7, #11
 8002a06:	2301      	movs	r3, #1
 8002a08:	f245 0101 	movw	r1, #20481	; 0x5001
 8002a0c:	f000 fccc 	bl	80033a8 <ov5640_write_reg>
 8002a10:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10c      	bne.n	8002a32 <OV5640_SetColorEffect+0x386>
      {
        tmp = 0x40;
 8002a18:	2340      	movs	r3, #64	; 0x40
 8002a1a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f103 0018 	add.w	r0, r3, #24
 8002a22:	f107 020b 	add.w	r2, r7, #11
 8002a26:	2301      	movs	r3, #1
 8002a28:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002a2c:	f000 fcbc 	bl	80033a8 <ov5640_write_reg>
 8002a30:	60f8      	str	r0, [r7, #12]
      }
      if (ret != OV5640_OK)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d031      	beq.n	8002a9c <OV5640_SetColorEffect+0x3f0>
      {
        ret = OV5640_ERROR;
 8002a38:	f04f 33ff 	mov.w	r3, #4294967295
 8002a3c:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002a3e:	e02d      	b.n	8002a9c <OV5640_SetColorEffect+0x3f0>

    case OV5640_COLOR_EFFECT_NONE:
    default :
      tmp = 0x7F;
 8002a40:	237f      	movs	r3, #127	; 0x7f
 8002a42:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f103 0018 	add.w	r0, r3, #24
 8002a4a:	f107 020b 	add.w	r2, r7, #11
 8002a4e:	2301      	movs	r3, #1
 8002a50:	f245 0101 	movw	r1, #20481	; 0x5001
 8002a54:	f000 fca8 	bl	80033a8 <ov5640_write_reg>
 8002a58:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10c      	bne.n	8002a7a <OV5640_SetColorEffect+0x3ce>
      {
        tmp = 0x00;
 8002a60:	2300      	movs	r3, #0
 8002a62:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f103 0018 	add.w	r0, r3, #24
 8002a6a:	f107 020b 	add.w	r2, r7, #11
 8002a6e:	2301      	movs	r3, #1
 8002a70:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002a74:	f000 fc98 	bl	80033a8 <ov5640_write_reg>
 8002a78:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00f      	beq.n	8002aa0 <OV5640_SetColorEffect+0x3f4>
      {
        ret = OV5640_ERROR;
 8002a80:	f04f 33ff 	mov.w	r3, #4294967295
 8002a84:	60fb      	str	r3, [r7, #12]
      }

      break;
 8002a86:	e00b      	b.n	8002aa0 <OV5640_SetColorEffect+0x3f4>
      break;
 8002a88:	bf00      	nop
 8002a8a:	e00a      	b.n	8002aa2 <OV5640_SetColorEffect+0x3f6>
      break;
 8002a8c:	bf00      	nop
 8002a8e:	e008      	b.n	8002aa2 <OV5640_SetColorEffect+0x3f6>
      break;
 8002a90:	bf00      	nop
 8002a92:	e006      	b.n	8002aa2 <OV5640_SetColorEffect+0x3f6>
      break;
 8002a94:	bf00      	nop
 8002a96:	e004      	b.n	8002aa2 <OV5640_SetColorEffect+0x3f6>
      break;
 8002a98:	bf00      	nop
 8002a9a:	e002      	b.n	8002aa2 <OV5640_SetColorEffect+0x3f6>
      break;
 8002a9c:	bf00      	nop
 8002a9e:	e000      	b.n	8002aa2 <OV5640_SetColorEffect+0x3f6>
      break;
 8002aa0:	bf00      	nop
  }

  return ret;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <OV5640_SetBrightness>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetBrightness(OV5640_Object_t *pObj, int32_t Level)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8002ab6:	4a34      	ldr	r2, [pc, #208]	; (8002b88 <OV5640_SetBrightness+0xdc>)
 8002ab8:	f107 0310 	add.w	r3, r7, #16
 8002abc:	ca07      	ldmia	r2, {r0, r1, r2}
 8002abe:	c303      	stmia	r3!, {r0, r1}
 8002ac0:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 8002ac2:	23ff      	movs	r3, #255	; 0xff
 8002ac4:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f103 0018 	add.w	r0, r3, #24
 8002acc:	f107 020f 	add.w	r2, r7, #15
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	f245 0101 	movw	r1, #20481	; 0x5001
 8002ad6:	f000 fc67 	bl	80033a8 <ov5640_write_reg>
 8002ada:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d111      	bne.n	8002b06 <OV5640_SetBrightness+0x5a>
  {
    tmp = brightness_level[Level + 4];
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	3304      	adds	r3, #4
 8002ae6:	3320      	adds	r3, #32
 8002ae8:	443b      	add	r3, r7
 8002aea:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002aee:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f103 0018 	add.w	r0, r3, #24
 8002af6:	f107 020f 	add.w	r2, r7, #15
 8002afa:	2301      	movs	r3, #1
 8002afc:	f245 5187 	movw	r1, #21895	; 0x5587
 8002b00:	f000 fc52 	bl	80033a8 <ov5640_write_reg>
 8002b04:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10c      	bne.n	8002b26 <OV5640_SetBrightness+0x7a>
  {
    tmp = 0x04;
 8002b0c:	2304      	movs	r3, #4
 8002b0e:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f103 0018 	add.w	r0, r3, #24
 8002b16:	f107 020f 	add.w	r2, r7, #15
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002b20:	f000 fc42 	bl	80033a8 <ov5640_write_reg>
 8002b24:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d127      	bne.n	8002b7c <OV5640_SetBrightness+0xd0>
  {
    if (Level < 0)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	da12      	bge.n	8002b58 <OV5640_SetBrightness+0xac>
    {
      tmp = 0x01;
 8002b32:	2301      	movs	r3, #1
 8002b34:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f103 0018 	add.w	r0, r3, #24
 8002b3c:	f107 020f 	add.w	r2, r7, #15
 8002b40:	2301      	movs	r3, #1
 8002b42:	f245 5188 	movw	r1, #21896	; 0x5588
 8002b46:	f000 fc2f 	bl	80033a8 <ov5640_write_reg>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d015      	beq.n	8002b7c <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 8002b50:	f04f 33ff 	mov.w	r3, #4294967295
 8002b54:	61fb      	str	r3, [r7, #28]
 8002b56:	e011      	b.n	8002b7c <OV5640_SetBrightness+0xd0>
      }
    }
    else
    {
      tmp = 0x09;
 8002b58:	2309      	movs	r3, #9
 8002b5a:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f103 0018 	add.w	r0, r3, #24
 8002b62:	f107 020f 	add.w	r2, r7, #15
 8002b66:	2301      	movs	r3, #1
 8002b68:	f245 5188 	movw	r1, #21896	; 0x5588
 8002b6c:	f000 fc1c 	bl	80033a8 <ov5640_write_reg>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d002      	beq.n	8002b7c <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 8002b76:	f04f 33ff 	mov.w	r3, #4294967295
 8002b7a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ret;
 8002b7c:	69fb      	ldr	r3, [r7, #28]
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3720      	adds	r7, #32
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	0801cc20 	.word	0x0801cc20

08002b8c <OV5640_SetSaturation>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetSaturation(OV5640_Object_t *pObj, int32_t Level)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 8002b96:	4a30      	ldr	r2, [pc, #192]	; (8002c58 <OV5640_SetSaturation+0xcc>)
 8002b98:	f107 0310 	add.w	r3, r7, #16
 8002b9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b9e:	c303      	stmia	r3!, {r0, r1}
 8002ba0:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 8002ba2:	23ff      	movs	r3, #255	; 0xff
 8002ba4:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f103 0018 	add.w	r0, r3, #24
 8002bac:	f107 020f 	add.w	r2, r7, #15
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	f245 0101 	movw	r1, #20481	; 0x5001
 8002bb6:	f000 fbf7 	bl	80033a8 <ov5640_write_reg>
 8002bba:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d111      	bne.n	8002be6 <OV5640_SetSaturation+0x5a>
  {
    tmp = saturation_level[Level + 4];
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	3320      	adds	r3, #32
 8002bc8:	443b      	add	r3, r7
 8002bca:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002bce:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f103 0018 	add.w	r0, r3, #24
 8002bd6:	f107 020f 	add.w	r2, r7, #15
 8002bda:	2301      	movs	r3, #1
 8002bdc:	f245 5183 	movw	r1, #21891	; 0x5583
 8002be0:	f000 fbe2 	bl	80033a8 <ov5640_write_reg>
 8002be4:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10a      	bne.n	8002c02 <OV5640_SetSaturation+0x76>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f103 0018 	add.w	r0, r3, #24
 8002bf2:	f107 020f 	add.w	r2, r7, #15
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	f245 5184 	movw	r1, #21892	; 0x5584
 8002bfc:	f000 fbd4 	bl	80033a8 <ov5640_write_reg>
 8002c00:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10c      	bne.n	8002c22 <OV5640_SetSaturation+0x96>
  {
    tmp = 0x02;
 8002c08:	2302      	movs	r3, #2
 8002c0a:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f103 0018 	add.w	r0, r3, #24
 8002c12:	f107 020f 	add.w	r2, r7, #15
 8002c16:	2301      	movs	r3, #1
 8002c18:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002c1c:	f000 fbc4 	bl	80033a8 <ov5640_write_reg>
 8002c20:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10c      	bne.n	8002c42 <OV5640_SetSaturation+0xb6>
  {
    tmp = 0x41;
 8002c28:	2341      	movs	r3, #65	; 0x41
 8002c2a:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f103 0018 	add.w	r0, r3, #24
 8002c32:	f107 020f 	add.w	r2, r7, #15
 8002c36:	2301      	movs	r3, #1
 8002c38:	f245 5188 	movw	r1, #21896	; 0x5588
 8002c3c:	f000 fbb4 	bl	80033a8 <ov5640_write_reg>
 8002c40:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d002      	beq.n	8002c4e <OV5640_SetSaturation+0xc2>
  {
    ret = OV5640_ERROR;
 8002c48:	f04f 33ff 	mov.w	r3, #4294967295
 8002c4c:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8002c4e:	69fb      	ldr	r3, [r7, #28]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3720      	adds	r7, #32
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	0801cc2c 	.word	0x0801cc2c

08002c5c <OV5640_SetContrast>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetContrast(OV5640_Object_t *pObj, int32_t Level)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b088      	sub	sp, #32
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 8002c66:	4a30      	ldr	r2, [pc, #192]	; (8002d28 <OV5640_SetContrast+0xcc>)
 8002c68:	f107 0310 	add.w	r3, r7, #16
 8002c6c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c6e:	c303      	stmia	r3!, {r0, r1}
 8002c70:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 8002c72:	23ff      	movs	r3, #255	; 0xff
 8002c74:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f103 0018 	add.w	r0, r3, #24
 8002c7c:	f107 020f 	add.w	r2, r7, #15
 8002c80:	2301      	movs	r3, #1
 8002c82:	f245 0101 	movw	r1, #20481	; 0x5001
 8002c86:	f000 fb8f 	bl	80033a8 <ov5640_write_reg>
 8002c8a:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10c      	bne.n	8002cac <OV5640_SetContrast+0x50>
  {
    tmp = 0x04;
 8002c92:	2304      	movs	r3, #4
 8002c94:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f103 0018 	add.w	r0, r3, #24
 8002c9c:	f107 020f 	add.w	r2, r7, #15
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002ca6:	f000 fb7f 	bl	80033a8 <ov5640_write_reg>
 8002caa:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d111      	bne.n	8002cd6 <OV5640_SetContrast+0x7a>
  {
    tmp = contrast_level[Level + 4];
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	3320      	adds	r3, #32
 8002cb8:	443b      	add	r3, r7
 8002cba:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002cbe:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f103 0018 	add.w	r0, r3, #24
 8002cc6:	f107 020f 	add.w	r2, r7, #15
 8002cca:	2301      	movs	r3, #1
 8002ccc:	f245 5186 	movw	r1, #21894	; 0x5586
 8002cd0:	f000 fb6a 	bl	80033a8 <ov5640_write_reg>
 8002cd4:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10a      	bne.n	8002cf2 <OV5640_SetContrast+0x96>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL5, &tmp, 1);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f103 0018 	add.w	r0, r3, #24
 8002ce2:	f107 020f 	add.w	r2, r7, #15
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	f245 5185 	movw	r1, #21893	; 0x5585
 8002cec:	f000 fb5c 	bl	80033a8 <ov5640_write_reg>
 8002cf0:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10c      	bne.n	8002d12 <OV5640_SetContrast+0xb6>
  {
    tmp = 0x41;
 8002cf8:	2341      	movs	r3, #65	; 0x41
 8002cfa:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f103 0018 	add.w	r0, r3, #24
 8002d02:	f107 020f 	add.w	r2, r7, #15
 8002d06:	2301      	movs	r3, #1
 8002d08:	f245 5188 	movw	r1, #21896	; 0x5588
 8002d0c:	f000 fb4c 	bl	80033a8 <ov5640_write_reg>
 8002d10:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d002      	beq.n	8002d1e <OV5640_SetContrast+0xc2>
  {
    ret = OV5640_ERROR;
 8002d18:	f04f 33ff 	mov.w	r3, #4294967295
 8002d1c:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8002d1e:	69fb      	ldr	r3, [r7, #28]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3720      	adds	r7, #32
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	0801cc38 	.word	0x0801cc38

08002d2c <OV5640_SetHueDegree>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetHueDegree(OV5640_Object_t *pObj, int32_t Degree)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08e      	sub	sp, #56	; 0x38
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 8002d36:	4a3c      	ldr	r2, [pc, #240]	; (8002e28 <OV5640_SetHueDegree+0xfc>)
 8002d38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x6FU
                                     };
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 8002d42:	4a3a      	ldr	r2, [pc, #232]	; (8002e2c <OV5640_SetHueDegree+0x100>)
 8002d44:	f107 031c 	add.w	r3, r7, #28
 8002d48:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x40U
                                     };
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 8002d4e:	4a38      	ldr	r2, [pc, #224]	; (8002e30 <OV5640_SetHueDegree+0x104>)
 8002d50:	f107 0310 	add.w	r3, r7, #16
 8002d54:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x31U
                                     };
  uint8_t tmp;

  tmp = 0xFF;
 8002d5a:	23ff      	movs	r3, #255	; 0xff
 8002d5c:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f103 0018 	add.w	r0, r3, #24
 8002d64:	f107 020f 	add.w	r2, r7, #15
 8002d68:	2301      	movs	r3, #1
 8002d6a:	f245 0101 	movw	r1, #20481	; 0x5001
 8002d6e:	f000 fb1b 	bl	80033a8 <ov5640_write_reg>
 8002d72:	6378      	str	r0, [r7, #52]	; 0x34

  if (ret == OV5640_OK)
 8002d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10c      	bne.n	8002d94 <OV5640_SetHueDegree+0x68>
  {
    tmp = 0x01;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f103 0018 	add.w	r0, r3, #24
 8002d84:	f107 020f 	add.w	r2, r7, #15
 8002d88:	2301      	movs	r3, #1
 8002d8a:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002d8e:	f000 fb0b 	bl	80033a8 <ov5640_write_reg>
 8002d92:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8002d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d111      	bne.n	8002dbe <OV5640_SetHueDegree+0x92>
  {
    tmp = hue_degree_ctrl1[Degree + 6];
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	3306      	adds	r3, #6
 8002d9e:	3338      	adds	r3, #56	; 0x38
 8002da0:	443b      	add	r3, r7
 8002da2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002da6:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f103 0018 	add.w	r0, r3, #24
 8002dae:	f107 020f 	add.w	r2, r7, #15
 8002db2:	2301      	movs	r3, #1
 8002db4:	f245 5181 	movw	r1, #21889	; 0x5581
 8002db8:	f000 faf6 	bl	80033a8 <ov5640_write_reg>
 8002dbc:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8002dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d111      	bne.n	8002de8 <OV5640_SetHueDegree+0xbc>
  {
    tmp = hue_degree_ctrl2[Degree + 6];
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	3306      	adds	r3, #6
 8002dc8:	3338      	adds	r3, #56	; 0x38
 8002dca:	443b      	add	r3, r7
 8002dcc:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002dd0:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f103 0018 	add.w	r0, r3, #24
 8002dd8:	f107 020f 	add.w	r2, r7, #15
 8002ddc:	2301      	movs	r3, #1
 8002dde:	f245 5182 	movw	r1, #21890	; 0x5582
 8002de2:	f000 fae1 	bl	80033a8 <ov5640_write_reg>
 8002de6:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8002de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d111      	bne.n	8002e12 <OV5640_SetHueDegree+0xe6>
  {
    tmp = hue_degree_ctrl8[Degree + 6];
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	3306      	adds	r3, #6
 8002df2:	3338      	adds	r3, #56	; 0x38
 8002df4:	443b      	add	r3, r7
 8002df6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002dfa:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f103 0018 	add.w	r0, r3, #24
 8002e02:	f107 020f 	add.w	r2, r7, #15
 8002e06:	2301      	movs	r3, #1
 8002e08:	f245 5188 	movw	r1, #21896	; 0x5588
 8002e0c:	f000 facc 	bl	80033a8 <ov5640_write_reg>
 8002e10:	6378      	str	r0, [r7, #52]	; 0x34
  }

  if (ret != OV5640_OK)
 8002e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d002      	beq.n	8002e1e <OV5640_SetHueDegree+0xf2>
  {
    ret = OV5640_ERROR;
 8002e18:	f04f 33ff 	mov.w	r3, #4294967295
 8002e1c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  return ret;
 8002e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3738      	adds	r7, #56	; 0x38
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	0801cc44 	.word	0x0801cc44
 8002e2c:	0801cc50 	.word	0x0801cc50
 8002e30:	0801cc5c 	.word	0x0801cc5c

08002e34 <OV5640_MirrorFlipConfig>:
  * @param  pObj  pointer to component object
  * @param  Config To configure mirror, flip, both or none
  * @retval Component status
  */
int32_t OV5640_MirrorFlipConfig(OV5640_Object_t *pObj, uint32_t Config)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp3820 = 0;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	72fb      	strb	r3, [r7, #11]
  uint8_t tmp3821;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f103 0018 	add.w	r0, r3, #24
 8002e48:	f107 020b 	add.w	r2, r7, #11
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	f643 0120 	movw	r1, #14368	; 0x3820
 8002e52:	f000 fa92 	bl	800337a <ov5640_read_reg>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <OV5640_MirrorFlipConfig+0x30>
  {
    ret = OV5640_ERROR;
 8002e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	e0cb      	b.n	8002ffc <OV5640_MirrorFlipConfig+0x1c8>
  }
  else
  {
    tmp3820 &= 0xF9U;
 8002e64:	7afb      	ldrb	r3, [r7, #11]
 8002e66:	f023 0306 	bic.w	r3, r3, #6
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	72fb      	strb	r3, [r7, #11]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f103 0018 	add.w	r0, r3, #24
 8002e74:	f107 020a 	add.w	r2, r7, #10
 8002e78:	2301      	movs	r3, #1
 8002e7a:	f643 0121 	movw	r1, #14369	; 0x3821
 8002e7e:	f000 fa7c 	bl	800337a <ov5640_read_reg>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <OV5640_MirrorFlipConfig+0x5c>
    {
      ret = OV5640_ERROR;
 8002e88:	f04f 33ff 	mov.w	r3, #4294967295
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	e0b5      	b.n	8002ffc <OV5640_MirrorFlipConfig+0x1c8>
    }
    else
    {
      ret = OV5640_OK;
 8002e90:	2300      	movs	r3, #0
 8002e92:	60fb      	str	r3, [r7, #12]
      tmp3821 &= 0xF9U;
 8002e94:	7abb      	ldrb	r3, [r7, #10]
 8002e96:	f023 0306 	bic.w	r3, r3, #6
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	72bb      	strb	r3, [r7, #10]

      switch (Config)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	2b03      	cmp	r3, #3
 8002ea2:	d056      	beq.n	8002f52 <OV5640_MirrorFlipConfig+0x11e>
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	2b03      	cmp	r3, #3
 8002ea8:	d87f      	bhi.n	8002faa <OV5640_MirrorFlipConfig+0x176>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d029      	beq.n	8002f04 <OV5640_MirrorFlipConfig+0xd0>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d179      	bne.n	8002faa <OV5640_MirrorFlipConfig+0x176>
      {
        case OV5640_MIRROR:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f103 0018 	add.w	r0, r3, #24
 8002ebc:	f107 020b 	add.w	r2, r7, #11
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	f643 0120 	movw	r1, #14368	; 0x3820
 8002ec6:	f000 fa6f 	bl	80033a8 <ov5640_write_reg>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <OV5640_MirrorFlipConfig+0xa4>
          {
            ret = OV5640_ERROR;
 8002ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed4:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002ed6:	e08a      	b.n	8002fee <OV5640_MirrorFlipConfig+0x1ba>
            tmp3821 |= 0x06U;
 8002ed8:	7abb      	ldrb	r3, [r7, #10]
 8002eda:	f043 0306 	orr.w	r3, r3, #6
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f103 0018 	add.w	r0, r3, #24
 8002ee8:	f107 020a 	add.w	r2, r7, #10
 8002eec:	2301      	movs	r3, #1
 8002eee:	f643 0121 	movw	r1, #14369	; 0x3821
 8002ef2:	f000 fa59 	bl	80033a8 <ov5640_write_reg>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d078      	beq.n	8002fee <OV5640_MirrorFlipConfig+0x1ba>
              ret = OV5640_ERROR;
 8002efc:	f04f 33ff 	mov.w	r3, #4294967295
 8002f00:	60fb      	str	r3, [r7, #12]
          break;
 8002f02:	e074      	b.n	8002fee <OV5640_MirrorFlipConfig+0x1ba>
        case OV5640_FLIP:
          tmp3820 |= 0x06U;
 8002f04:	7afb      	ldrb	r3, [r7, #11]
 8002f06:	f043 0306 	orr.w	r3, r3, #6
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f103 0018 	add.w	r0, r3, #24
 8002f14:	f107 020b 	add.w	r2, r7, #11
 8002f18:	2301      	movs	r3, #1
 8002f1a:	f643 0120 	movw	r1, #14368	; 0x3820
 8002f1e:	f000 fa43 	bl	80033a8 <ov5640_write_reg>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d003      	beq.n	8002f30 <OV5640_MirrorFlipConfig+0xfc>
          {
            ret = OV5640_ERROR;
 8002f28:	f04f 33ff 	mov.w	r3, #4294967295
 8002f2c:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002f2e:	e060      	b.n	8002ff2 <OV5640_MirrorFlipConfig+0x1be>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f103 0018 	add.w	r0, r3, #24
 8002f36:	f107 020a 	add.w	r2, r7, #10
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	f643 0121 	movw	r1, #14369	; 0x3821
 8002f40:	f000 fa32 	bl	80033a8 <ov5640_write_reg>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d053      	beq.n	8002ff2 <OV5640_MirrorFlipConfig+0x1be>
              ret = OV5640_ERROR;
 8002f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f4e:	60fb      	str	r3, [r7, #12]
          break;
 8002f50:	e04f      	b.n	8002ff2 <OV5640_MirrorFlipConfig+0x1be>
        case OV5640_MIRROR_FLIP:
          tmp3820 |= 0x06U;
 8002f52:	7afb      	ldrb	r3, [r7, #11]
 8002f54:	f043 0306 	orr.w	r3, r3, #6
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f103 0018 	add.w	r0, r3, #24
 8002f62:	f107 020b 	add.w	r2, r7, #11
 8002f66:	2301      	movs	r3, #1
 8002f68:	f643 0120 	movw	r1, #14368	; 0x3820
 8002f6c:	f000 fa1c 	bl	80033a8 <ov5640_write_reg>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <OV5640_MirrorFlipConfig+0x14a>
          {
            ret = OV5640_ERROR;
 8002f76:	f04f 33ff 	mov.w	r3, #4294967295
 8002f7a:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002f7c:	e03b      	b.n	8002ff6 <OV5640_MirrorFlipConfig+0x1c2>
            tmp3821 |= 0x06U;
 8002f7e:	7abb      	ldrb	r3, [r7, #10]
 8002f80:	f043 0306 	orr.w	r3, r3, #6
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f103 0018 	add.w	r0, r3, #24
 8002f8e:	f107 020a 	add.w	r2, r7, #10
 8002f92:	2301      	movs	r3, #1
 8002f94:	f643 0121 	movw	r1, #14369	; 0x3821
 8002f98:	f000 fa06 	bl	80033a8 <ov5640_write_reg>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d029      	beq.n	8002ff6 <OV5640_MirrorFlipConfig+0x1c2>
              ret = OV5640_ERROR;
 8002fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa6:	60fb      	str	r3, [r7, #12]
          break;
 8002fa8:	e025      	b.n	8002ff6 <OV5640_MirrorFlipConfig+0x1c2>

        case OV5640_MIRROR_FLIP_NONE:
        default:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f103 0018 	add.w	r0, r3, #24
 8002fb0:	f107 020b 	add.w	r2, r7, #11
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	f643 0120 	movw	r1, #14368	; 0x3820
 8002fba:	f000 f9f5 	bl	80033a8 <ov5640_write_reg>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <OV5640_MirrorFlipConfig+0x198>
          {
            ret = OV5640_ERROR;
 8002fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc8:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002fca:	e016      	b.n	8002ffa <OV5640_MirrorFlipConfig+0x1c6>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f103 0018 	add.w	r0, r3, #24
 8002fd2:	f107 020a 	add.w	r2, r7, #10
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	f643 0121 	movw	r1, #14369	; 0x3821
 8002fdc:	f000 f9e4 	bl	80033a8 <ov5640_write_reg>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d009      	beq.n	8002ffa <OV5640_MirrorFlipConfig+0x1c6>
              ret = OV5640_ERROR;
 8002fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fea:	60fb      	str	r3, [r7, #12]
          break;
 8002fec:	e005      	b.n	8002ffa <OV5640_MirrorFlipConfig+0x1c6>
          break;
 8002fee:	bf00      	nop
 8002ff0:	e004      	b.n	8002ffc <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002ff2:	bf00      	nop
 8002ff4:	e002      	b.n	8002ffc <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002ff6:	bf00      	nop
 8002ff8:	e000      	b.n	8002ffc <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002ffa:	bf00      	nop
      }
    }
  }

  return ret;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <OV5640_ZoomConfig>:
  * @param  pObj  pointer to component object
  * @param  Zoom  Zoom to be configured
  * @retval Component status
  */
int32_t OV5640_ZoomConfig(OV5640_Object_t *pObj, uint32_t Zoom)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b086      	sub	sp, #24
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
 800300e:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]
  uint32_t res;
  uint32_t zoom;
  uint8_t tmp;

  /* Get camera resolution */
  if (OV5640_GetResolution(pObj, &res) != OV5640_OK)
 8003014:	f107 030c 	add.w	r3, r7, #12
 8003018:	4619      	mov	r1, r3
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7ff f8a2 	bl	8002164 <OV5640_GetResolution>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <OV5640_ZoomConfig+0x28>
  {
    ret = OV5640_ERROR;
 8003026:	f04f 33ff 	mov.w	r3, #4294967295
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	e04e      	b.n	80030cc <OV5640_ZoomConfig+0xc6>
  }
  else
  {
    zoom = Zoom;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	613b      	str	r3, [r7, #16]

    if (zoom == OV5640_ZOOM_x1)
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	2b44      	cmp	r3, #68	; 0x44
 8003036:	d112      	bne.n	800305e <OV5640_ZoomConfig+0x58>
    {
      tmp = 0x10;
 8003038:	2310      	movs	r3, #16
 800303a:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f103 0018 	add.w	r0, r3, #24
 8003042:	f107 020b 	add.w	r2, r7, #11
 8003046:	2301      	movs	r3, #1
 8003048:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 800304c:	f000 f9ac 	bl	80033a8 <ov5640_write_reg>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d03a      	beq.n	80030cc <OV5640_ZoomConfig+0xc6>
      {
        ret = OV5640_ERROR;
 8003056:	f04f 33ff 	mov.w	r3, #4294967295
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	e036      	b.n	80030cc <OV5640_ZoomConfig+0xc6>
      }
    }
    else
    {
      switch (res)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2b02      	cmp	r3, #2
 8003062:	d802      	bhi.n	800306a <OV5640_ZoomConfig+0x64>
 8003064:	2b00      	cmp	r3, #0
 8003066:	d103      	bne.n	8003070 <OV5640_ZoomConfig+0x6a>
          break;
        case OV5640_R640x480:
          zoom = zoom >> 2U;
          break;
        default:
          break;
 8003068:	e00a      	b.n	8003080 <OV5640_ZoomConfig+0x7a>
      switch (res)
 800306a:	2b03      	cmp	r3, #3
 800306c:	d004      	beq.n	8003078 <OV5640_ZoomConfig+0x72>
          break;
 800306e:	e007      	b.n	8003080 <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 1U;
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	085b      	lsrs	r3, r3, #1
 8003074:	613b      	str	r3, [r7, #16]
          break;
 8003076:	e003      	b.n	8003080 <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 2U;
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	089b      	lsrs	r3, r3, #2
 800307c:	613b      	str	r3, [r7, #16]
          break;
 800307e:	bf00      	nop
      }

      tmp = 0x00;
 8003080:	2300      	movs	r3, #0
 8003082:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f103 0018 	add.w	r0, r3, #24
 800308a:	f107 020b 	add.w	r2, r7, #11
 800308e:	2301      	movs	r3, #1
 8003090:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 8003094:	f000 f988 	bl	80033a8 <ov5640_write_reg>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <OV5640_ZoomConfig+0xa0>
      {
        ret = OV5640_ERROR;
 800309e:	f04f 33ff 	mov.w	r3, #4294967295
 80030a2:	617b      	str	r3, [r7, #20]
 80030a4:	e012      	b.n	80030cc <OV5640_ZoomConfig+0xc6>
      }
      else
      {
        tmp = (uint8_t)zoom;
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	72fb      	strb	r3, [r7, #11]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f103 0018 	add.w	r0, r3, #24
 80030b2:	f107 020b 	add.w	r2, r7, #11
 80030b6:	2301      	movs	r3, #1
 80030b8:	f245 6101 	movw	r1, #22017	; 0x5601
 80030bc:	f000 f974 	bl	80033a8 <ov5640_write_reg>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d002      	beq.n	80030cc <OV5640_ZoomConfig+0xc6>
        {
          ret = OV5640_ERROR;
 80030c6:	f04f 33ff 	mov.w	r3, #4294967295
 80030ca:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 80030cc:	697b      	ldr	r3, [r7, #20]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3718      	adds	r7, #24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <OV5640_NightModeConfig>:
  * @param  pObj  pointer to component object
  * @param  Cmd   Enable disable night mode
  * @retval Component status
  */
int32_t OV5640_NightModeConfig(OV5640_Object_t *pObj, uint32_t Cmd)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b084      	sub	sp, #16
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
 80030de:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp = 0;
 80030e0:	2300      	movs	r3, #0
 80030e2:	72fb      	strb	r3, [r7, #11]

  if (Cmd == NIGHT_MODE_ENABLE)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	f040 80ce 	bne.w	8003288 <OV5640_NightModeConfig+0x1b2>
  {
    /* Auto Frame Rate: 15fps ~ 3.75fps night mode for 60/50Hz light environment,
    24Mhz clock input,24Mhz PCLK*/
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL4, &tmp, 1);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f103 0018 	add.w	r0, r3, #24
 80030f2:	f107 020b 	add.w	r2, r7, #11
 80030f6:	2301      	movs	r3, #1
 80030f8:	f243 0138 	movw	r1, #12344	; 0x3038
 80030fc:	f000 f954 	bl	80033a8 <ov5640_write_reg>
 8003100:	60f8      	str	r0, [r7, #12]
    if (ret == OV5640_OK)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d10a      	bne.n	800311e <OV5640_NightModeConfig+0x48>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL5, &tmp, 1);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f103 0018 	add.w	r0, r3, #24
 800310e:	f107 020b 	add.w	r2, r7, #11
 8003112:	2301      	movs	r3, #1
 8003114:	f243 0139 	movw	r1, #12345	; 0x3039
 8003118:	f000 f946 	bl	80033a8 <ov5640_write_reg>
 800311c:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10c      	bne.n	800313e <OV5640_NightModeConfig+0x68>
    {
      tmp = 0x7C;
 8003124:	237c      	movs	r3, #124	; 0x7c
 8003126:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f103 0018 	add.w	r0, r3, #24
 800312e:	f107 020b 	add.w	r2, r7, #11
 8003132:	2301      	movs	r3, #1
 8003134:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8003138:	f000 f936 	bl	80033a8 <ov5640_write_reg>
 800313c:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10c      	bne.n	800315e <OV5640_NightModeConfig+0x88>
    {
      tmp = 0x01;
 8003144:	2301      	movs	r3, #1
 8003146:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f103 0018 	add.w	r0, r3, #24
 800314e:	f107 020b 	add.w	r2, r7, #11
 8003152:	2301      	movs	r3, #1
 8003154:	f643 2108 	movw	r1, #14856	; 0x3a08
 8003158:	f000 f926 	bl	80033a8 <ov5640_write_reg>
 800315c:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10c      	bne.n	800317e <OV5640_NightModeConfig+0xa8>
    {
      tmp = 0x27;
 8003164:	2327      	movs	r3, #39	; 0x27
 8003166:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f103 0018 	add.w	r0, r3, #24
 800316e:	f107 020b 	add.w	r2, r7, #11
 8003172:	2301      	movs	r3, #1
 8003174:	f643 2109 	movw	r1, #14857	; 0x3a09
 8003178:	f000 f916 	bl	80033a8 <ov5640_write_reg>
 800317c:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10c      	bne.n	800319e <OV5640_NightModeConfig+0xc8>
    {
      tmp = 0x00;
 8003184:	2300      	movs	r3, #0
 8003186:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_HIGH, &tmp, 1);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f103 0018 	add.w	r0, r3, #24
 800318e:	f107 020b 	add.w	r2, r7, #11
 8003192:	2301      	movs	r3, #1
 8003194:	f643 210a 	movw	r1, #14858	; 0x3a0a
 8003198:	f000 f906 	bl	80033a8 <ov5640_write_reg>
 800319c:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10c      	bne.n	80031be <OV5640_NightModeConfig+0xe8>
    {
      tmp = 0xF6;
 80031a4:	23f6      	movs	r3, #246	; 0xf6
 80031a6:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f103 0018 	add.w	r0, r3, #24
 80031ae:	f107 020b 	add.w	r2, r7, #11
 80031b2:	2301      	movs	r3, #1
 80031b4:	f643 210b 	movw	r1, #14859	; 0x3a0b
 80031b8:	f000 f8f6 	bl	80033a8 <ov5640_write_reg>
 80031bc:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10c      	bne.n	80031de <OV5640_NightModeConfig+0x108>
    {
      tmp = 0x04;
 80031c4:	2304      	movs	r3, #4
 80031c6:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f103 0018 	add.w	r0, r3, #24
 80031ce:	f107 020b 	add.w	r2, r7, #11
 80031d2:	2301      	movs	r3, #1
 80031d4:	f643 210d 	movw	r1, #14861	; 0x3a0d
 80031d8:	f000 f8e6 	bl	80033a8 <ov5640_write_reg>
 80031dc:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10a      	bne.n	80031fa <OV5640_NightModeConfig+0x124>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0E, &tmp, 1);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f103 0018 	add.w	r0, r3, #24
 80031ea:	f107 020b 	add.w	r2, r7, #11
 80031ee:	2301      	movs	r3, #1
 80031f0:	f643 210e 	movw	r1, #14862	; 0x3a0e
 80031f4:	f000 f8d8 	bl	80033a8 <ov5640_write_reg>
 80031f8:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10c      	bne.n	800321a <OV5640_NightModeConfig+0x144>
    {
      tmp = 0x0B;
 8003200:	230b      	movs	r3, #11
 8003202:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f103 0018 	add.w	r0, r3, #24
 800320a:	f107 020b 	add.w	r2, r7, #11
 800320e:	2301      	movs	r3, #1
 8003210:	f643 2102 	movw	r1, #14850	; 0x3a02
 8003214:	f000 f8c8 	bl	80033a8 <ov5640_write_reg>
 8003218:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10c      	bne.n	800323a <OV5640_NightModeConfig+0x164>
    {
      tmp = 0x88;
 8003220:	2388      	movs	r3, #136	; 0x88
 8003222:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f103 0018 	add.w	r0, r3, #24
 800322a:	f107 020b 	add.w	r2, r7, #11
 800322e:	2301      	movs	r3, #1
 8003230:	f643 2103 	movw	r1, #14851	; 0x3a03
 8003234:	f000 f8b8 	bl	80033a8 <ov5640_write_reg>
 8003238:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10c      	bne.n	800325a <OV5640_NightModeConfig+0x184>
    {
      tmp = 0x0B;
 8003240:	230b      	movs	r3, #11
 8003242:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f103 0018 	add.w	r0, r3, #24
 800324a:	f107 020b 	add.w	r2, r7, #11
 800324e:	2301      	movs	r3, #1
 8003250:	f643 2114 	movw	r1, #14868	; 0x3a14
 8003254:	f000 f8a8 	bl	80033a8 <ov5640_write_reg>
 8003258:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10c      	bne.n	800327a <OV5640_NightModeConfig+0x1a4>
    {
      tmp = 0x88;
 8003260:	2388      	movs	r3, #136	; 0x88
 8003262:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f103 0018 	add.w	r0, r3, #24
 800326a:	f107 020b 	add.w	r2, r7, #11
 800326e:	2301      	movs	r3, #1
 8003270:	f643 2115 	movw	r1, #14869	; 0x3a15
 8003274:	f000 f898 	bl	80033a8 <ov5640_write_reg>
 8003278:	60f8      	str	r0, [r7, #12]
    }
    if (ret != OV5640_OK)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d02b      	beq.n	80032d8 <OV5640_NightModeConfig+0x202>
    {
      ret = OV5640_ERROR;
 8003280:	f04f 33ff 	mov.w	r3, #4294967295
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	e027      	b.n	80032d8 <OV5640_NightModeConfig+0x202>
    }
  }
  else
  {
    if (ov5640_read_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f103 0018 	add.w	r0, r3, #24
 800328e:	f107 020b 	add.w	r2, r7, #11
 8003292:	2301      	movs	r3, #1
 8003294:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8003298:	f000 f86f 	bl	800337a <ov5640_read_reg>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <OV5640_NightModeConfig+0x1d4>
    {
      ret = OV5640_ERROR;
 80032a2:	f04f 33ff 	mov.w	r3, #4294967295
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	e016      	b.n	80032d8 <OV5640_NightModeConfig+0x202>
    }
    else
    {
      ret = OV5640_OK;
 80032aa:	2300      	movs	r3, #0
 80032ac:	60fb      	str	r3, [r7, #12]
      tmp &= 0xFBU;
 80032ae:	7afb      	ldrb	r3, [r7, #11]
 80032b0:	f023 0304 	bic.w	r3, r3, #4
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	72fb      	strb	r3, [r7, #11]
      /* Set Bit 2 to 0 */
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f103 0018 	add.w	r0, r3, #24
 80032be:	f107 020b 	add.w	r2, r7, #11
 80032c2:	2301      	movs	r3, #1
 80032c4:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 80032c8:	f000 f86e 	bl	80033a8 <ov5640_write_reg>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d002      	beq.n	80032d8 <OV5640_NightModeConfig+0x202>
      {
        ret = OV5640_ERROR;
 80032d2:	f04f 33ff 	mov.w	r3, #4294967295
 80032d6:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 80032d8:	68fb      	ldr	r3, [r7, #12]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <OV5640_Delay>:
  * @param pObj   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval OV5640_OK
  */
static int32_t OV5640_Delay(OV5640_Object_t *pObj, uint32_t Delay)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b084      	sub	sp, #16
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
 80032ea:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	4798      	blx	r3
 80032f2:	4603      	mov	r3, r0
 80032f4:	60fb      	str	r3, [r7, #12]
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 80032f6:	bf00      	nop
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	4798      	blx	r3
 80032fe:	4603      	mov	r3, r0
 8003300:	461a      	mov	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	429a      	cmp	r2, r3
 800330a:	d8f5      	bhi.n	80032f8 <OV5640_Delay+0x16>
  {
  }
  return OV5640_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <OV5640_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003316:	b590      	push	{r4, r7, lr}
 8003318:	b087      	sub	sp, #28
 800331a:	af00      	add	r7, sp, #0
 800331c:	60f8      	str	r0, [r7, #12]
 800331e:	607a      	str	r2, [r7, #4]
 8003320:	461a      	mov	r2, r3
 8003322:	460b      	mov	r3, r1
 8003324:	817b      	strh	r3, [r7, #10]
 8003326:	4613      	mov	r3, r2
 8003328:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	691c      	ldr	r4, [r3, #16]
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	8918      	ldrh	r0, [r3, #8]
 8003336:	893b      	ldrh	r3, [r7, #8]
 8003338:	8979      	ldrh	r1, [r7, #10]
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	47a0      	blx	r4
 800333e:	4603      	mov	r3, r0
}
 8003340:	4618      	mov	r0, r3
 8003342:	371c      	adds	r7, #28
 8003344:	46bd      	mov	sp, r7
 8003346:	bd90      	pop	{r4, r7, pc}

08003348 <OV5640_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003348:	b590      	push	{r4, r7, lr}
 800334a:	b087      	sub	sp, #28
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	607a      	str	r2, [r7, #4]
 8003352:	461a      	mov	r2, r3
 8003354:	460b      	mov	r3, r1
 8003356:	817b      	strh	r3, [r7, #10]
 8003358:	4613      	mov	r3, r2
 800335a:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	68dc      	ldr	r4, [r3, #12]
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	8918      	ldrh	r0, [r3, #8]
 8003368:	893b      	ldrh	r3, [r7, #8]
 800336a:	8979      	ldrh	r1, [r7, #10]
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	47a0      	blx	r4
 8003370:	4603      	mov	r3, r0
}
 8003372:	4618      	mov	r0, r3
 8003374:	371c      	adds	r7, #28
 8003376:	46bd      	mov	sp, r7
 8003378:	bd90      	pop	{r4, r7, pc}

0800337a <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 800337a:	b590      	push	{r4, r7, lr}
 800337c:	b085      	sub	sp, #20
 800337e:	af00      	add	r7, sp, #0
 8003380:	60f8      	str	r0, [r7, #12]
 8003382:	607a      	str	r2, [r7, #4]
 8003384:	461a      	mov	r2, r3
 8003386:	460b      	mov	r3, r1
 8003388:	817b      	strh	r3, [r7, #10]
 800338a:	4613      	mov	r3, r2
 800338c:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	685c      	ldr	r4, [r3, #4]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6898      	ldr	r0, [r3, #8]
 8003396:	893b      	ldrh	r3, [r7, #8]
 8003398:	8979      	ldrh	r1, [r7, #10]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	47a0      	blx	r4
 800339e:	4603      	mov	r3, r0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3714      	adds	r7, #20
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd90      	pop	{r4, r7, pc}

080033a8 <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 80033a8:	b590      	push	{r4, r7, lr}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	607a      	str	r2, [r7, #4]
 80033b2:	461a      	mov	r2, r3
 80033b4:	460b      	mov	r3, r1
 80033b6:	817b      	strh	r3, [r7, #10]
 80033b8:	4613      	mov	r3, r2
 80033ba:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681c      	ldr	r4, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6898      	ldr	r0, [r3, #8]
 80033c4:	893b      	ldrh	r3, [r7, #8]
 80033c6:	8979      	ldrh	r1, [r7, #10]
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	47a0      	blx	r4
 80033cc:	4603      	mov	r3, r0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3714      	adds	r7, #20
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd90      	pop	{r4, r7, pc}
	...

080033d8 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80033e0:	4a07      	ldr	r2, [pc, #28]	; (8003400 <RetargetInit+0x28>)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80033e6:	4b07      	ldr	r3, [pc, #28]	; (8003404 <RetargetInit+0x2c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6898      	ldr	r0, [r3, #8]
 80033ec:	2300      	movs	r3, #0
 80033ee:	2202      	movs	r2, #2
 80033f0:	2100      	movs	r1, #0
 80033f2:	f018 fa77 	bl	801b8e4 <setvbuf>
}
 80033f6:	bf00      	nop
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	2402c4b4 	.word	0x2402c4b4
 8003404:	240081e4 	.word	0x240081e4

08003408 <_isatty>:

int _isatty(int fd) {
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	db04      	blt.n	8003420 <_isatty+0x18>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b02      	cmp	r3, #2
 800341a:	dc01      	bgt.n	8003420 <_isatty+0x18>
    return 1;
 800341c:	2301      	movs	r3, #1
 800341e:	e005      	b.n	800342c <_isatty+0x24>

  errno = EBADF;
 8003420:	f018 f89a 	bl	801b558 <__errno>
 8003424:	4603      	mov	r3, r0
 8003426:	2209      	movs	r2, #9
 8003428:	601a      	str	r2, [r3, #0]
  return 0;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <_write>:

int _write(int fd, char* ptr, int len) {
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d002      	beq.n	800344c <_write+0x18>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2b02      	cmp	r3, #2
 800344a:	d111      	bne.n	8003470 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800344c:	4b0e      	ldr	r3, [pc, #56]	; (8003488 <_write+0x54>)
 800344e:	6818      	ldr	r0, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	b29a      	uxth	r2, r3
 8003454:	f04f 33ff 	mov.w	r3, #4294967295
 8003458:	68b9      	ldr	r1, [r7, #8]
 800345a:	f00a fb3e 	bl	800dada <HAL_UART_Transmit>
 800345e:	4603      	mov	r3, r0
 8003460:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003462:	7dfb      	ldrb	r3, [r7, #23]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <_write+0x38>
      return len;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	e008      	b.n	800347e <_write+0x4a>
    else
      return EIO;
 800346c:	2305      	movs	r3, #5
 800346e:	e006      	b.n	800347e <_write+0x4a>
  }
  errno = EBADF;
 8003470:	f018 f872 	bl	801b558 <__errno>
 8003474:	4603      	mov	r3, r0
 8003476:	2209      	movs	r2, #9
 8003478:	601a      	str	r2, [r3, #0]
  return -1;
 800347a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800347e:	4618      	mov	r0, r3
 8003480:	3718      	adds	r7, #24
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	2402c4b4 	.word	0x2402c4b4

0800348c <_close>:

int _close(int fd) {
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	db04      	blt.n	80034a4 <_close+0x18>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b02      	cmp	r3, #2
 800349e:	dc01      	bgt.n	80034a4 <_close+0x18>
    return 0;
 80034a0:	2300      	movs	r3, #0
 80034a2:	e006      	b.n	80034b2 <_close+0x26>

  errno = EBADF;
 80034a4:	f018 f858 	bl	801b558 <__errno>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2209      	movs	r2, #9
 80034ac:	601a      	str	r2, [r3, #0]
  return -1;
 80034ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
	...

080034bc <_read>:

int _read(int fd, char* ptr, int len) {
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d110      	bne.n	80034f0 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80034ce:	4b0e      	ldr	r3, [pc, #56]	; (8003508 <_read+0x4c>)
 80034d0:	6818      	ldr	r0, [r3, #0]
 80034d2:	f04f 33ff 	mov.w	r3, #4294967295
 80034d6:	2201      	movs	r2, #1
 80034d8:	68b9      	ldr	r1, [r7, #8]
 80034da:	f00a fb8c 	bl	800dbf6 <HAL_UART_Receive>
 80034de:	4603      	mov	r3, r0
 80034e0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80034e2:	7dfb      	ldrb	r3, [r7, #23]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <_read+0x30>
      return 1;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e008      	b.n	80034fe <_read+0x42>
    else
      return EIO;
 80034ec:	2305      	movs	r3, #5
 80034ee:	e006      	b.n	80034fe <_read+0x42>
  }
  errno = EBADF;
 80034f0:	f018 f832 	bl	801b558 <__errno>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2209      	movs	r2, #9
 80034f8:	601a      	str	r2, [r3, #0]
  return -1;
 80034fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3718      	adds	r7, #24
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	2402c4b4 	.word	0x2402c4b4

0800350c <_fstat>:

int _fstat(int fd, struct stat* st) {
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	db08      	blt.n	800352e <_fstat+0x22>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b02      	cmp	r3, #2
 8003520:	dc05      	bgt.n	800352e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003528:	605a      	str	r2, [r3, #4]
    return 0;
 800352a:	2300      	movs	r3, #0
 800352c:	e005      	b.n	800353a <_fstat+0x2e>
  }

  errno = EBADF;
 800352e:	f018 f813 	bl	801b558 <__errno>
 8003532:	4603      	mov	r3, r0
 8003534:	2209      	movs	r2, #9
 8003536:	601a      	str	r2, [r3, #0]
  return 0;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
	...

08003544 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003548:	4b11      	ldr	r3, [pc, #68]	; (8003590 <MX_RTC_Init+0x4c>)
 800354a:	4a12      	ldr	r2, [pc, #72]	; (8003594 <MX_RTC_Init+0x50>)
 800354c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800354e:	4b10      	ldr	r3, [pc, #64]	; (8003590 <MX_RTC_Init+0x4c>)
 8003550:	2200      	movs	r2, #0
 8003552:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003554:	4b0e      	ldr	r3, [pc, #56]	; (8003590 <MX_RTC_Init+0x4c>)
 8003556:	227f      	movs	r2, #127	; 0x7f
 8003558:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800355a:	4b0d      	ldr	r3, [pc, #52]	; (8003590 <MX_RTC_Init+0x4c>)
 800355c:	22ff      	movs	r2, #255	; 0xff
 800355e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003560:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <MX_RTC_Init+0x4c>)
 8003562:	2200      	movs	r2, #0
 8003564:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003566:	4b0a      	ldr	r3, [pc, #40]	; (8003590 <MX_RTC_Init+0x4c>)
 8003568:	2200      	movs	r2, #0
 800356a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800356c:	4b08      	ldr	r3, [pc, #32]	; (8003590 <MX_RTC_Init+0x4c>)
 800356e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003572:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003574:	4b06      	ldr	r3, [pc, #24]	; (8003590 <MX_RTC_Init+0x4c>)
 8003576:	2200      	movs	r2, #0
 8003578:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800357a:	4805      	ldr	r0, [pc, #20]	; (8003590 <MX_RTC_Init+0x4c>)
 800357c:	f00a f8a6 	bl	800d6cc <HAL_RTC_Init>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8003586:	f7fe fa7f 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800358a:	bf00      	nop
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	2402c4b8 	.word	0x2402c4b8
 8003594:	58004000 	.word	0x58004000

08003598 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b0b2      	sub	sp, #200	; 0xc8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035a0:	f107 0308 	add.w	r3, r7, #8
 80035a4:	22c0      	movs	r2, #192	; 0xc0
 80035a6:	2100      	movs	r1, #0
 80035a8:	4618      	mov	r0, r3
 80035aa:	f018 f815 	bl	801b5d8 <memset>
  if(rtcHandle->Instance==RTC)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a10      	ldr	r2, [pc, #64]	; (80035f4 <HAL_RTC_MspInit+0x5c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d119      	bne.n	80035ec <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80035b8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80035bc:	f04f 0300 	mov.w	r3, #0
 80035c0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80035c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035cc:	f107 0308 	add.w	r3, r7, #8
 80035d0:	4618      	mov	r0, r3
 80035d2:	f008 fa9b 	bl	800bb0c <HAL_RCCEx_PeriphCLKConfig>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80035dc:	f7fe fa54 	bl	8001a88 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80035e0:	4b05      	ldr	r3, [pc, #20]	; (80035f8 <HAL_RTC_MspInit+0x60>)
 80035e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e4:	4a04      	ldr	r2, [pc, #16]	; (80035f8 <HAL_RTC_MspInit+0x60>)
 80035e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035ea:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80035ec:	bf00      	nop
 80035ee:	37c8      	adds	r7, #200	; 0xc8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	58004000 	.word	0x58004000
 80035f8:	58024400 	.word	0x58024400

080035fc <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8003602:	2300      	movs	r3, #0
 8003604:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 8003606:	4b16      	ldr	r3, [pc, #88]	; (8003660 <BSP_I2C4_Init+0x64>)
 8003608:	4a16      	ldr	r2, [pc, #88]	; (8003664 <BSP_I2C4_Init+0x68>)
 800360a:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 800360c:	4b16      	ldr	r3, [pc, #88]	; (8003668 <BSP_I2C4_Init+0x6c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d11f      	bne.n	8003654 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 8003614:	4b14      	ldr	r3, [pc, #80]	; (8003668 <BSP_I2C4_Init+0x6c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	3301      	adds	r3, #1
 800361a:	4a13      	ldr	r2, [pc, #76]	; (8003668 <BSP_I2C4_Init+0x6c>)
 800361c:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800361e:	4810      	ldr	r0, [pc, #64]	; (8003660 <BSP_I2C4_Init+0x64>)
 8003620:	f006 fb0e 	bl	8009c40 <HAL_I2C_GetState>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d114      	bne.n	8003654 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 800362a:	480d      	ldr	r0, [pc, #52]	; (8003660 <BSP_I2C4_Init+0x64>)
 800362c:	f000 fb60 	bl	8003cf0 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8003630:	f008 fa56 	bl	800bae0 <HAL_RCC_GetPCLK2Freq>
 8003634:	4603      	mov	r3, r0
 8003636:	490d      	ldr	r1, [pc, #52]	; (800366c <BSP_I2C4_Init+0x70>)
 8003638:	4618      	mov	r0, r3
 800363a:	f000 f8e3 	bl	8003804 <I2C_GetTiming>
 800363e:	4603      	mov	r3, r0
 8003640:	4619      	mov	r1, r3
 8003642:	4807      	ldr	r0, [pc, #28]	; (8003660 <BSP_I2C4_Init+0x64>)
 8003644:	f000 f838 	bl	80036b8 <MX_I2C4_Init>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d002      	beq.n	8003654 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800364e:	f06f 0307 	mvn.w	r3, #7
 8003652:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 8003654:	687b      	ldr	r3, [r7, #4]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	2402cee8 	.word	0x2402cee8
 8003664:	58001c00 	.word	0x58001c00
 8003668:	2402c4e0 	.word	0x2402c4e0
 800366c:	000186a0 	.word	0x000186a0

08003670 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8003676:	2300      	movs	r3, #0
 8003678:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 800367a:	4b0d      	ldr	r3, [pc, #52]	; (80036b0 <BSP_I2C4_DeInit+0x40>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	3b01      	subs	r3, #1
 8003680:	4a0b      	ldr	r2, [pc, #44]	; (80036b0 <BSP_I2C4_DeInit+0x40>)
 8003682:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 8003684:	4b0a      	ldr	r3, [pc, #40]	; (80036b0 <BSP_I2C4_DeInit+0x40>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10b      	bne.n	80036a4 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 800368c:	4809      	ldr	r0, [pc, #36]	; (80036b4 <BSP_I2C4_DeInit+0x44>)
 800368e:	f000 fb9b 	bl	8003dc8 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8003692:	4808      	ldr	r0, [pc, #32]	; (80036b4 <BSP_I2C4_DeInit+0x44>)
 8003694:	f006 f862 	bl	800975c <HAL_I2C_DeInit>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d002      	beq.n	80036a4 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800369e:	f06f 0307 	mvn.w	r3, #7
 80036a2:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 80036a4:	687b      	ldr	r3, [r7, #4]
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	2402c4e0 	.word	0x2402c4e0
 80036b4:	2402cee8 	.word	0x2402cee8

080036b8 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036c2:	2300      	movs	r3, #0
 80036c4:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f005 ffa0 	bl	800963c <HAL_I2C_Init>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d002      	beq.n	8003708 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	73fb      	strb	r3, [r7, #15]
 8003706:	e014      	b.n	8003732 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8003708:	2300      	movs	r3, #0
 800370a:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800370c:	68b9      	ldr	r1, [r7, #8]
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f006 fd68 	bl	800a1e4 <HAL_I2CEx_ConfigAnalogFilter>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d002      	beq.n	8003720 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	73fb      	strb	r3, [r7, #15]
 800371e:	e008      	b.n	8003732 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8003720:	2100      	movs	r1, #0
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f006 fda9 	bl	800a27a <HAL_I2CEx_ConfigDigitalFilter>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8003732:	7bfb      	ldrb	r3, [r7, #15]
}
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <BSP_I2C4_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b088      	sub	sp, #32
 8003740:	af02      	add	r7, sp, #8
 8003742:	60ba      	str	r2, [r7, #8]
 8003744:	461a      	mov	r2, r3
 8003746:	4603      	mov	r3, r0
 8003748:	81fb      	strh	r3, [r7, #14]
 800374a:	460b      	mov	r3, r1
 800374c:	81bb      	strh	r3, [r7, #12]
 800374e:	4613      	mov	r3, r2
 8003750:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
 #if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 8003752:	89b9      	ldrh	r1, [r7, #12]
 8003754:	89f8      	ldrh	r0, [r7, #14]
 8003756:	88fb      	ldrh	r3, [r7, #6]
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	2202      	movs	r2, #2
 800375e:	f000 fb57 	bl	8003e10 <I2C4_WriteReg>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d102      	bne.n	800376e <BSP_I2C4_WriteReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 8003768:	2300      	movs	r3, #0
 800376a:	617b      	str	r3, [r7, #20]
 800376c:	e00c      	b.n	8003788 <BSP_I2C4_WriteReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800376e:	4809      	ldr	r0, [pc, #36]	; (8003794 <BSP_I2C4_WriteReg16+0x58>)
 8003770:	f006 fa74 	bl	8009c5c <HAL_I2C_GetError>
 8003774:	4603      	mov	r3, r0
 8003776:	2b04      	cmp	r3, #4
 8003778:	d103      	bne.n	8003782 <BSP_I2C4_WriteReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800377a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	e002      	b.n	8003788 <BSP_I2C4_WriteReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003782:	f06f 0303 	mvn.w	r3, #3
 8003786:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8003788:	697b      	ldr	r3, [r7, #20]
}
 800378a:	4618      	mov	r0, r3
 800378c:	3718      	adds	r7, #24
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	2402cee8 	.word	0x2402cee8

08003798 <BSP_I2C4_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b088      	sub	sp, #32
 800379c:	af02      	add	r7, sp, #8
 800379e:	60ba      	str	r2, [r7, #8]
 80037a0:	461a      	mov	r2, r3
 80037a2:	4603      	mov	r3, r0
 80037a4:	81fb      	strh	r3, [r7, #14]
 80037a6:	460b      	mov	r3, r1
 80037a8:	81bb      	strh	r3, [r7, #12]
 80037aa:	4613      	mov	r3, r2
 80037ac:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 80037ae:	89b9      	ldrh	r1, [r7, #12]
 80037b0:	89f8      	ldrh	r0, [r7, #14]
 80037b2:	88fb      	ldrh	r3, [r7, #6]
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2202      	movs	r2, #2
 80037ba:	f000 fb4f 	bl	8003e5c <I2C4_ReadReg>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d102      	bne.n	80037ca <BSP_I2C4_ReadReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 80037c4:	2300      	movs	r3, #0
 80037c6:	617b      	str	r3, [r7, #20]
 80037c8:	e00c      	b.n	80037e4 <BSP_I2C4_ReadReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80037ca:	4809      	ldr	r0, [pc, #36]	; (80037f0 <BSP_I2C4_ReadReg16+0x58>)
 80037cc:	f006 fa46 	bl	8009c5c <HAL_I2C_GetError>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d103      	bne.n	80037de <BSP_I2C4_ReadReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80037d6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	e002      	b.n	80037e4 <BSP_I2C4_ReadReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80037de:	f06f 0303 	mvn.w	r3, #3
 80037e2:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 80037e4:	697b      	ldr	r3, [r7, #20]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3718      	adds	r7, #24
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	2402cee8 	.word	0x2402cee8

080037f4 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 80037f8:	f000 ffc6 	bl	8004788 <HAL_GetTick>
 80037fc:	4603      	mov	r3, r0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800380e:	2300      	movs	r3, #0
 8003810:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d06b      	beq.n	80038f0 <I2C_GetTiming+0xec>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d068      	beq.n	80038f0 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800381e:	2300      	movs	r3, #0
 8003820:	613b      	str	r3, [r7, #16]
 8003822:	e060      	b.n	80038e6 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8003824:	4a35      	ldr	r2, [pc, #212]	; (80038fc <I2C_GetTiming+0xf8>)
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	212c      	movs	r1, #44	; 0x2c
 800382a:	fb01 f303 	mul.w	r3, r1, r3
 800382e:	4413      	add	r3, r2
 8003830:	3304      	adds	r3, #4
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	429a      	cmp	r2, r3
 8003838:	d352      	bcc.n	80038e0 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800383a:	4a30      	ldr	r2, [pc, #192]	; (80038fc <I2C_GetTiming+0xf8>)
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	212c      	movs	r1, #44	; 0x2c
 8003840:	fb01 f303 	mul.w	r3, r1, r3
 8003844:	4413      	add	r3, r2
 8003846:	3308      	adds	r3, #8
 8003848:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	429a      	cmp	r2, r3
 800384e:	d847      	bhi.n	80038e0 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8003850:	6939      	ldr	r1, [r7, #16]
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f856 	bl	8003904 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8003858:	6939      	ldr	r1, [r7, #16]
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f940 	bl	8003ae0 <I2C_Compute_SCLL_SCLH>
 8003860:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2b7f      	cmp	r3, #127	; 0x7f
 8003866:	d842      	bhi.n	80038ee <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003868:	4925      	ldr	r1, [pc, #148]	; (8003900 <I2C_GetTiming+0xfc>)
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	4613      	mov	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4413      	add	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	440b      	add	r3, r1
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800387a:	4821      	ldr	r0, [pc, #132]	; (8003900 <I2C_GetTiming+0xfc>)
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	4613      	mov	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4413      	add	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4403      	add	r3, r0
 8003888:	3304      	adds	r3, #4
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	051b      	lsls	r3, r3, #20
 800388e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003892:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8003894:	481a      	ldr	r0, [pc, #104]	; (8003900 <I2C_GetTiming+0xfc>)
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	4613      	mov	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4403      	add	r3, r0
 80038a2:	3308      	adds	r3, #8
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	041b      	lsls	r3, r3, #16
 80038a8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80038ac:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80038ae:	4814      	ldr	r0, [pc, #80]	; (8003900 <I2C_GetTiming+0xfc>)
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	4613      	mov	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	4413      	add	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4403      	add	r3, r0
 80038bc:	330c      	adds	r3, #12
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	021b      	lsls	r3, r3, #8
 80038c2:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80038c4:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 80038c6:	480e      	ldr	r0, [pc, #56]	; (8003900 <I2C_GetTiming+0xfc>)
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	4613      	mov	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4413      	add	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4403      	add	r3, r0
 80038d4:	3310      	adds	r3, #16
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80038da:	430b      	orrs	r3, r1
 80038dc:	617b      	str	r3, [r7, #20]
        }
        break;
 80038de:	e006      	b.n	80038ee <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	3301      	adds	r3, #1
 80038e4:	613b      	str	r3, [r7, #16]
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d99b      	bls.n	8003824 <I2C_GetTiming+0x20>
 80038ec:	e000      	b.n	80038f0 <I2C_GetTiming+0xec>
        break;
 80038ee:	bf00      	nop
      }
    }
  }

  return ret;
 80038f0:	697b      	ldr	r3, [r7, #20]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	0801d274 	.word	0x0801d274
 8003900:	2402c4e4 	.word	0x2402c4e4

08003904 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8003904:	b480      	push	{r7}
 8003906:	b08f      	sub	sp, #60	; 0x3c
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800390e:	2310      	movs	r3, #16
 8003910:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	085a      	lsrs	r2, r3, #1
 8003916:	4b6e      	ldr	r3, [pc, #440]	; (8003ad0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8003918:	4413      	add	r3, r2
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003920:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8003922:	2332      	movs	r3, #50	; 0x32
 8003924:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8003926:	f44f 7382 	mov.w	r3, #260	; 0x104
 800392a:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800392c:	4a69      	ldr	r2, [pc, #420]	; (8003ad4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	212c      	movs	r1, #44	; 0x2c
 8003932:	fb01 f303 	mul.w	r3, r1, r3
 8003936:	4413      	add	r3, r2
 8003938:	3324      	adds	r3, #36	; 0x24
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4618      	mov	r0, r3
 800393e:	4a65      	ldr	r2, [pc, #404]	; (8003ad4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	212c      	movs	r1, #44	; 0x2c
 8003944:	fb01 f303 	mul.w	r3, r1, r3
 8003948:	4413      	add	r3, r2
 800394a:	330c      	adds	r3, #12
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8003950:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8003952:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8003954:	495f      	ldr	r1, [pc, #380]	; (8003ad4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	202c      	movs	r0, #44	; 0x2c
 800395a:	fb00 f303 	mul.w	r3, r0, r3
 800395e:	440b      	add	r3, r1
 8003960:	3328      	adds	r3, #40	; 0x28
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	3303      	adds	r3, #3
 8003966:	69f9      	ldr	r1, [r7, #28]
 8003968:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003970:	4a58      	ldr	r2, [pc, #352]	; (8003ad4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	212c      	movs	r1, #44	; 0x2c
 8003976:	fb01 f303 	mul.w	r3, r1, r3
 800397a:	4413      	add	r3, r2
 800397c:	3310      	adds	r3, #16
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	4a54      	ldr	r2, [pc, #336]	; (8003ad4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	212c      	movs	r1, #44	; 0x2c
 8003988:	fb01 f303 	mul.w	r3, r1, r3
 800398c:	4413      	add	r3, r2
 800398e:	3320      	adds	r3, #32
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8003994:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003996:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8003998:	494e      	ldr	r1, [pc, #312]	; (8003ad4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	202c      	movs	r0, #44	; 0x2c
 800399e:	fb00 f303 	mul.w	r3, r0, r3
 80039a2:	440b      	add	r3, r1
 80039a4:	3328      	adds	r3, #40	; 0x28
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	3304      	adds	r3, #4
 80039aa:	69f9      	ldr	r1, [r7, #28]
 80039ac:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 80039b4:	4a47      	ldr	r2, [pc, #284]	; (8003ad4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	212c      	movs	r1, #44	; 0x2c
 80039ba:	fb01 f303 	mul.w	r3, r1, r3
 80039be:	4413      	add	r3, r2
 80039c0:	3320      	adds	r3, #32
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	4a43      	ldr	r2, [pc, #268]	; (8003ad4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	212c      	movs	r1, #44	; 0x2c
 80039cc:	fb01 f303 	mul.w	r3, r1, r3
 80039d0:	4413      	add	r3, r2
 80039d2:	3314      	adds	r3, #20
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4403      	add	r3, r0
 80039d8:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 80039da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039dc:	2b00      	cmp	r3, #0
 80039de:	dc01      	bgt.n	80039e4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 80039e0:	2300      	movs	r3, #0
 80039e2:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 80039e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	dc01      	bgt.n	80039ee <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 80039ea:	2300      	movs	r3, #0
 80039ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80039ee:	2300      	movs	r3, #0
 80039f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80039f2:	e062      	b.n	8003aba <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80039f4:	2300      	movs	r3, #0
 80039f6:	627b      	str	r3, [r7, #36]	; 0x24
 80039f8:	e059      	b.n	8003aae <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	3301      	adds	r3, #1
 80039fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a00:	3201      	adds	r2, #1
 8003a02:	fb03 f202 	mul.w	r2, r3, r2
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	fb02 f303 	mul.w	r3, r2, r3
 8003a0c:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d348      	bcc.n	8003aa8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8003a16:	2300      	movs	r3, #0
 8003a18:	623b      	str	r3, [r7, #32]
 8003a1a:	e042      	b.n	8003aa2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8003a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1e:	3301      	adds	r3, #1
 8003a20:	6a3a      	ldr	r2, [r7, #32]
 8003a22:	fb03 f202 	mul.w	r2, r3, r2
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	fb02 f303 	mul.w	r3, r2, r3
 8003a2c:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8003a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d332      	bcc.n	8003a9c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8003a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d82e      	bhi.n	8003a9c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 8003a3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d02a      	beq.n	8003a9c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8003a46:	4b24      	ldr	r3, [pc, #144]	; (8003ad8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	4924      	ldr	r1, [pc, #144]	; (8003adc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a58:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8003a5a:	4b1f      	ldr	r3, [pc, #124]	; (8003ad8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	491f      	ldr	r1, [pc, #124]	; (8003adc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8003a60:	4613      	mov	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	3304      	adds	r3, #4
 8003a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a6e:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8003a70:	4b19      	ldr	r3, [pc, #100]	; (8003ad8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	4919      	ldr	r1, [pc, #100]	; (8003adc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8003a76:	4613      	mov	r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	4413      	add	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	440b      	add	r3, r1
 8003a80:	3308      	adds	r3, #8
 8003a82:	6a3a      	ldr	r2, [r7, #32]
 8003a84:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8003a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a88:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 8003a8a:	4b13      	ldr	r3, [pc, #76]	; (8003ad8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	4a11      	ldr	r2, [pc, #68]	; (8003ad8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003a92:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8003a94:	4b10      	ldr	r3, [pc, #64]	; (8003ad8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2b7f      	cmp	r3, #127	; 0x7f
 8003a9a:	d812      	bhi.n	8003ac2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	623b      	str	r3, [r7, #32]
 8003aa2:	6a3b      	ldr	r3, [r7, #32]
 8003aa4:	2b0f      	cmp	r3, #15
 8003aa6:	d9b9      	bls.n	8003a1c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aaa:	3301      	adds	r3, #1
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	2b0f      	cmp	r3, #15
 8003ab2:	d9a2      	bls.n	80039fa <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8003ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003abc:	2b0f      	cmp	r3, #15
 8003abe:	d999      	bls.n	80039f4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8003ac0:	e000      	b.n	8003ac4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8003ac2:	bf00      	nop
          }
        }
      }
    }
  }
}
 8003ac4:	373c      	adds	r7, #60	; 0x3c
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	3b9aca00 	.word	0x3b9aca00
 8003ad4:	0801d274 	.word	0x0801d274
 8003ad8:	2402cee4 	.word	0x2402cee4
 8003adc:	2402c4e4 	.word	0x2402c4e4

08003ae0 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b093      	sub	sp, #76	; 0x4c
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 8003aea:	f04f 33ff 	mov.w	r3, #4294967295
 8003aee:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	085a      	lsrs	r2, r3, #1
 8003af4:	4b7a      	ldr	r3, [pc, #488]	; (8003ce0 <I2C_Compute_SCLL_SCLH+0x200>)
 8003af6:	4413      	add	r3, r2
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	fbb3 f3f2 	udiv	r3, r3, r2
 8003afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8003b00:	4a78      	ldr	r2, [pc, #480]	; (8003ce4 <I2C_Compute_SCLL_SCLH+0x204>)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	212c      	movs	r1, #44	; 0x2c
 8003b06:	fb01 f303 	mul.w	r3, r1, r3
 8003b0a:	4413      	add	r3, r2
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	085a      	lsrs	r2, r3, #1
 8003b10:	4b73      	ldr	r3, [pc, #460]	; (8003ce0 <I2C_Compute_SCLL_SCLH+0x200>)
 8003b12:	4413      	add	r3, r2
 8003b14:	4973      	ldr	r1, [pc, #460]	; (8003ce4 <I2C_Compute_SCLL_SCLH+0x204>)
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	202c      	movs	r0, #44	; 0x2c
 8003b1a:	fb00 f202 	mul.w	r2, r0, r2
 8003b1e:	440a      	add	r2, r1
 8003b20:	6812      	ldr	r2, [r2, #0]
 8003b22:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b26:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8003b28:	2332      	movs	r3, #50	; 0x32
 8003b2a:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8003b2c:	4a6d      	ldr	r2, [pc, #436]	; (8003ce4 <I2C_Compute_SCLL_SCLH+0x204>)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	212c      	movs	r1, #44	; 0x2c
 8003b32:	fb01 f303 	mul.w	r3, r1, r3
 8003b36:	4413      	add	r3, r2
 8003b38:	3328      	adds	r3, #40	; 0x28
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3e:	fb02 f303 	mul.w	r3, r2, r3
 8003b42:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8003b44:	4a67      	ldr	r2, [pc, #412]	; (8003ce4 <I2C_Compute_SCLL_SCLH+0x204>)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	212c      	movs	r1, #44	; 0x2c
 8003b4a:	fb01 f303 	mul.w	r3, r1, r3
 8003b4e:	4413      	add	r3, r2
 8003b50:	3304      	adds	r3, #4
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a62      	ldr	r2, [pc, #392]	; (8003ce0 <I2C_Compute_SCLL_SCLH+0x200>)
 8003b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b5a:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8003b5c:	4a61      	ldr	r2, [pc, #388]	; (8003ce4 <I2C_Compute_SCLL_SCLH+0x204>)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	212c      	movs	r1, #44	; 0x2c
 8003b62:	fb01 f303 	mul.w	r3, r1, r3
 8003b66:	4413      	add	r3, r2
 8003b68:	3308      	adds	r3, #8
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a5c      	ldr	r2, [pc, #368]	; (8003ce0 <I2C_Compute_SCLL_SCLH+0x200>)
 8003b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b72:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8003b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b76:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003b78:	2300      	movs	r3, #0
 8003b7a:	637b      	str	r3, [r7, #52]	; 0x34
 8003b7c:	e0a3      	b.n	8003cc6 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8003b7e:	495a      	ldr	r1, [pc, #360]	; (8003ce8 <I2C_Compute_SCLL_SCLH+0x208>)
 8003b80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b82:	4613      	mov	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4413      	add	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b92:	fb02 f303 	mul.w	r3, r2, r3
 8003b96:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003b98:	2300      	movs	r3, #0
 8003b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b9c:	e08c      	b.n	8003cb8 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8003b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba0:	6a3b      	ldr	r3, [r7, #32]
 8003ba2:	441a      	add	r2, r3
 8003ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	6979      	ldr	r1, [r7, #20]
 8003baa:	fb03 f101 	mul.w	r1, r3, r1
 8003bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	440b      	add	r3, r1
 8003bb4:	4413      	add	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8003bb8:	4a4a      	ldr	r2, [pc, #296]	; (8003ce4 <I2C_Compute_SCLL_SCLH+0x204>)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	212c      	movs	r1, #44	; 0x2c
 8003bbe:	fb01 f303 	mul.w	r3, r1, r3
 8003bc2:	4413      	add	r3, r2
 8003bc4:	3318      	adds	r3, #24
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d971      	bls.n	8003cb2 <I2C_Compute_SCLL_SCLH+0x1d2>
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	1ad2      	subs	r2, r2, r3
 8003bd4:	6a3b      	ldr	r3, [r7, #32]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	089b      	lsrs	r3, r3, #2
 8003bda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d268      	bcs.n	8003cb2 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003be0:	2300      	movs	r3, #0
 8003be2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003be4:	e062      	b.n	8003cac <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8003be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be8:	6a3b      	ldr	r3, [r7, #32]
 8003bea:	441a      	add	r2, r3
 8003bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bee:	3301      	adds	r3, #1
 8003bf0:	6979      	ldr	r1, [r7, #20]
 8003bf2:	fb03 f101 	mul.w	r1, r3, r1
 8003bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	440b      	add	r3, r1
 8003bfc:	4413      	add	r3, r2
 8003bfe:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	441a      	add	r2, r3
 8003c06:	4937      	ldr	r1, [pc, #220]	; (8003ce4 <I2C_Compute_SCLL_SCLH+0x204>)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	202c      	movs	r0, #44	; 0x2c
 8003c0c:	fb00 f303 	mul.w	r3, r0, r3
 8003c10:	440b      	add	r3, r1
 8003c12:	3320      	adds	r3, #32
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	441a      	add	r2, r3
 8003c18:	4932      	ldr	r1, [pc, #200]	; (8003ce4 <I2C_Compute_SCLL_SCLH+0x204>)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	202c      	movs	r0, #44	; 0x2c
 8003c1e:	fb00 f303 	mul.w	r3, r0, r3
 8003c22:	440b      	add	r3, r1
 8003c24:	3324      	adds	r3, #36	; 0x24
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4413      	add	r3, r2
 8003c2a:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d338      	bcc.n	8003ca6 <I2C_Compute_SCLL_SCLH+0x1c6>
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d834      	bhi.n	8003ca6 <I2C_Compute_SCLL_SCLH+0x1c6>
 8003c3c:	4a29      	ldr	r2, [pc, #164]	; (8003ce4 <I2C_Compute_SCLL_SCLH+0x204>)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	212c      	movs	r1, #44	; 0x2c
 8003c42:	fb01 f303 	mul.w	r3, r1, r3
 8003c46:	4413      	add	r3, r2
 8003c48:	331c      	adds	r3, #28
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d329      	bcc.n	8003ca6 <I2C_Compute_SCLL_SCLH+0x1c6>
 8003c52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d225      	bcs.n	8003ca6 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8003c5a:	68ba      	ldr	r2, [r7, #8]
 8003c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 8003c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	da02      	bge.n	8003c6e <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8003c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6a:	425b      	negs	r3, r3
 8003c6c:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8003c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d917      	bls.n	8003ca6 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8003c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c78:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 8003c7a:	491b      	ldr	r1, [pc, #108]	; (8003ce8 <I2C_Compute_SCLL_SCLH+0x208>)
 8003c7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c7e:	4613      	mov	r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4413      	add	r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	440b      	add	r3, r1
 8003c88:	3310      	adds	r3, #16
 8003c8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c8c:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8003c8e:	4916      	ldr	r1, [pc, #88]	; (8003ce8 <I2C_Compute_SCLL_SCLH+0x208>)
 8003c90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c92:	4613      	mov	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4413      	add	r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	440b      	add	r3, r1
 8003c9c:	330c      	adds	r3, #12
 8003c9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ca0:	601a      	str	r2, [r3, #0]
              ret = count;
 8003ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ca4:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca8:	3301      	adds	r3, #1
 8003caa:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cae:	2bff      	cmp	r3, #255	; 0xff
 8003cb0:	d999      	bls.n	8003be6 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cba:	2bff      	cmp	r3, #255	; 0xff
 8003cbc:	f67f af6f 	bls.w	8003b9e <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	637b      	str	r3, [r7, #52]	; 0x34
 8003cc6:	4b09      	ldr	r3, [pc, #36]	; (8003cec <I2C_Compute_SCLL_SCLH+0x20c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	f4ff af56 	bcc.w	8003b7e <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8003cd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	374c      	adds	r7, #76	; 0x4c
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr
 8003ce0:	3b9aca00 	.word	0x3b9aca00
 8003ce4:	0801d274 	.word	0x0801d274
 8003ce8:	2402c4e4 	.word	0x2402c4e4
 8003cec:	2402cee4 	.word	0x2402cee4

08003cf0 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b08a      	sub	sp, #40	; 0x28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8003cf8:	4b31      	ldr	r3, [pc, #196]	; (8003dc0 <I2C4_MspInit+0xd0>)
 8003cfa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003cfe:	4a30      	ldr	r2, [pc, #192]	; (8003dc0 <I2C4_MspInit+0xd0>)
 8003d00:	f043 0308 	orr.w	r3, r3, #8
 8003d04:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003d08:	4b2d      	ldr	r3, [pc, #180]	; (8003dc0 <I2C4_MspInit+0xd0>)
 8003d0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003d0e:	f003 0308 	and.w	r3, r3, #8
 8003d12:	613b      	str	r3, [r7, #16]
 8003d14:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8003d16:	4b2a      	ldr	r3, [pc, #168]	; (8003dc0 <I2C4_MspInit+0xd0>)
 8003d18:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003d1c:	4a28      	ldr	r2, [pc, #160]	; (8003dc0 <I2C4_MspInit+0xd0>)
 8003d1e:	f043 0308 	orr.w	r3, r3, #8
 8003d22:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003d26:	4b26      	ldr	r3, [pc, #152]	; (8003dc0 <I2C4_MspInit+0xd0>)
 8003d28:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003d2c:	f003 0308 	and.w	r3, r3, #8
 8003d30:	60fb      	str	r3, [r7, #12]
 8003d32:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8003d34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d38:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8003d3a:	2312      	movs	r3, #18
 8003d3c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8003d42:	2302      	movs	r3, #2
 8003d44:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8003d46:	2304      	movs	r3, #4
 8003d48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8003d4a:	f107 0314 	add.w	r3, r7, #20
 8003d4e:	4619      	mov	r1, r3
 8003d50:	481c      	ldr	r0, [pc, #112]	; (8003dc4 <I2C4_MspInit+0xd4>)
 8003d52:	f005 f985 	bl	8009060 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8003d56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d5a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8003d5c:	2312      	movs	r3, #18
 8003d5e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003d60:	2300      	movs	r3, #0
 8003d62:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8003d64:	2302      	movs	r3, #2
 8003d66:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8003d68:	2304      	movs	r3, #4
 8003d6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8003d6c:	f107 0314 	add.w	r3, r7, #20
 8003d70:	4619      	mov	r1, r3
 8003d72:	4814      	ldr	r0, [pc, #80]	; (8003dc4 <I2C4_MspInit+0xd4>)
 8003d74:	f005 f974 	bl	8009060 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8003d78:	4b11      	ldr	r3, [pc, #68]	; (8003dc0 <I2C4_MspInit+0xd0>)
 8003d7a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003d7e:	4a10      	ldr	r2, [pc, #64]	; (8003dc0 <I2C4_MspInit+0xd0>)
 8003d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d84:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8003d88:	4b0d      	ldr	r3, [pc, #52]	; (8003dc0 <I2C4_MspInit+0xd0>)
 8003d8a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d92:	60bb      	str	r3, [r7, #8]
 8003d94:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8003d96:	4b0a      	ldr	r3, [pc, #40]	; (8003dc0 <I2C4_MspInit+0xd0>)
 8003d98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d9c:	4a08      	ldr	r2, [pc, #32]	; (8003dc0 <I2C4_MspInit+0xd0>)
 8003d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003da2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8003da6:	4b06      	ldr	r3, [pc, #24]	; (8003dc0 <I2C4_MspInit+0xd0>)
 8003da8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dac:	4a04      	ldr	r2, [pc, #16]	; (8003dc0 <I2C4_MspInit+0xd0>)
 8003dae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003db2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8003db6:	bf00      	nop
 8003db8:	3728      	adds	r7, #40	; 0x28
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	58024400 	.word	0x58024400
 8003dc4:	58020c00 	.word	0x58020c00

08003dc8 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b088      	sub	sp, #32
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 8003dd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dd4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	4619      	mov	r1, r3
 8003dda:	480b      	ldr	r0, [pc, #44]	; (8003e08 <I2C4_MspDeInit+0x40>)
 8003ddc:	f005 faf0 	bl	80093c0 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 8003de0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003de4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	4619      	mov	r1, r3
 8003dea:	4807      	ldr	r0, [pc, #28]	; (8003e08 <I2C4_MspDeInit+0x40>)
 8003dec:	f005 fae8 	bl	80093c0 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8003df0:	4b06      	ldr	r3, [pc, #24]	; (8003e0c <I2C4_MspDeInit+0x44>)
 8003df2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003df6:	4a05      	ldr	r2, [pc, #20]	; (8003e0c <I2C4_MspDeInit+0x44>)
 8003df8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dfc:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 8003e00:	bf00      	nop
 8003e02:	3720      	adds	r7, #32
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	58020c00 	.word	0x58020c00
 8003e0c:	58024400 	.word	0x58024400

08003e10 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b088      	sub	sp, #32
 8003e14:	af04      	add	r7, sp, #16
 8003e16:	607b      	str	r3, [r7, #4]
 8003e18:	4603      	mov	r3, r0
 8003e1a:	81fb      	strh	r3, [r7, #14]
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	81bb      	strh	r3, [r7, #12]
 8003e20:	4613      	mov	r3, r2
 8003e22:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003e24:	8978      	ldrh	r0, [r7, #10]
 8003e26:	89ba      	ldrh	r2, [r7, #12]
 8003e28:	89f9      	ldrh	r1, [r7, #14]
 8003e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e2e:	9302      	str	r3, [sp, #8]
 8003e30:	8b3b      	ldrh	r3, [r7, #24]
 8003e32:	9301      	str	r3, [sp, #4]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	4603      	mov	r3, r0
 8003e3a:	4807      	ldr	r0, [pc, #28]	; (8003e58 <I2C4_WriteReg+0x48>)
 8003e3c:	f005 fcd2 	bl	80097e4 <HAL_I2C_Mem_Write>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8003e46:	2300      	movs	r3, #0
 8003e48:	e001      	b.n	8003e4e <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8003e4a:	f06f 0307 	mvn.w	r3, #7
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	2402cee8 	.word	0x2402cee8

08003e5c <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b088      	sub	sp, #32
 8003e60:	af04      	add	r7, sp, #16
 8003e62:	607b      	str	r3, [r7, #4]
 8003e64:	4603      	mov	r3, r0
 8003e66:	81fb      	strh	r3, [r7, #14]
 8003e68:	460b      	mov	r3, r1
 8003e6a:	81bb      	strh	r3, [r7, #12]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003e70:	8978      	ldrh	r0, [r7, #10]
 8003e72:	89ba      	ldrh	r2, [r7, #12]
 8003e74:	89f9      	ldrh	r1, [r7, #14]
 8003e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e7a:	9302      	str	r3, [sp, #8]
 8003e7c:	8b3b      	ldrh	r3, [r7, #24]
 8003e7e:	9301      	str	r3, [sp, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	4603      	mov	r3, r0
 8003e86:	4807      	ldr	r0, [pc, #28]	; (8003ea4 <I2C4_ReadReg+0x48>)
 8003e88:	f005 fdc0 	bl	8009a0c <HAL_I2C_Mem_Read>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8003e92:	2300      	movs	r3, #0
 8003e94:	e001      	b.n	8003e9a <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8003e96:	f06f 0307 	mvn.w	r3, #7
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	2402cee8 	.word	0x2402cee8

08003ea8 <BSP_CAMERA_Init>:
  *         naming QQVGA, QVGA, VGA ...
  * @param  PixelFormat Capture pixel format
  * @retval BSP status
  */
int32_t BSP_CAMERA_Init(uint32_t Instance, uint32_t Resolution, uint32_t PixelFormat)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	617b      	str	r3, [r7, #20]

#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif /*USE_BSP_IO_CLASS*/

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <BSP_CAMERA_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003ebe:	f06f 0301 	mvn.w	r3, #1
 8003ec2:	617b      	str	r3, [r7, #20]
 8003ec4:	e02d      	b.n	8003f22 <BSP_CAMERA_Init+0x7a>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#else
    /* DCMI Initialization */
    HAL_DCMI_MspInit(&hdcmi);
 8003ec6:	4819      	ldr	r0, [pc, #100]	; (8003f2c <BSP_CAMERA_Init+0x84>)
 8003ec8:	f7fc fc90 	bl	80007ec <HAL_DCMI_MspInit>
#endif
    /* Initialize the camera driver structure */
    MX_DCMI_Init();
 8003ecc:	f7fc fc5a 	bl	8000784 <MX_DCMI_Init>

    if(BSP_CAMERA_HwReset(0) != BSP_ERROR_NONE)
 8003ed0:	2000      	movs	r0, #0
 8003ed2:	f000 f887 	bl	8003fe4 <BSP_CAMERA_HwReset>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d003      	beq.n	8003ee4 <BSP_CAMERA_Init+0x3c>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8003edc:	f06f 0307 	mvn.w	r3, #7
 8003ee0:	617b      	str	r3, [r7, #20]
 8003ee2:	e01e      	b.n	8003f22 <BSP_CAMERA_Init+0x7a>
          ret = OV5640_Probe(Resolution, PixelFormat);
        }
#endif /* USE_CAMERA_SENSOR_OV5640 */
#else
#if (USE_CAMERA_SENSOR_OV5640 == 1)
        ret = OV5640_Probe(Resolution, PixelFormat);
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	68b8      	ldr	r0, [r7, #8]
 8003ee8:	f000 f93e 	bl	8004168 <OV5640_Probe>
 8003eec:	6178      	str	r0, [r7, #20]
#endif /* USE_CAMERA_SENSOR_OV5640 */
#endif /* USE_CAMERA_SENSOR_S5K5CAG */

        if(ret != BSP_ERROR_NONE)
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d003      	beq.n	8003efc <BSP_CAMERA_Init+0x54>
        {
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003ef4:	f06f 0306 	mvn.w	r3, #6
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	e012      	b.n	8003f22 <BSP_CAMERA_Init+0x7a>
          else
          {
            ret = BSP_ERROR_NONE;
          }
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS == 1) */
          Camera_Ctx[Instance].Resolution = Resolution;
 8003efc:	490c      	ldr	r1, [pc, #48]	; (8003f30 <BSP_CAMERA_Init+0x88>)
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4613      	mov	r3, r2
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	4413      	add	r3, r2
 8003f06:	011b      	lsls	r3, r3, #4
 8003f08:	440b      	add	r3, r1
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	601a      	str	r2, [r3, #0]
          Camera_Ctx[Instance].PixelFormat = PixelFormat;
 8003f0e:	4908      	ldr	r1, [pc, #32]	; (8003f30 <BSP_CAMERA_Init+0x88>)
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	4613      	mov	r3, r2
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	4413      	add	r3, r2
 8003f18:	011b      	lsls	r3, r3, #4
 8003f1a:	440b      	add	r3, r1
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	601a      	str	r2, [r3, #0]
#endif
    }
  }

  /* BSP status */
  return ret;
 8003f22:	697b      	ldr	r3, [r7, #20]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3718      	adds	r7, #24
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	240082a0 	.word	0x240082a0
 8003f30:	2402cf40 	.word	0x2402cf40

08003f34 <BSP_CAMERA_Start>:
  * @param  pBff     pointer to the camera output buffer
  * @param  Mode CAMERA_MODE_CONTINUOUS or CAMERA_MODE_SNAPSHOT
  * @retval BSP status
  */
int32_t BSP_CAMERA_Start(uint32_t Instance, uint8_t *pBff, uint32_t Mode)
{
 8003f34:	b590      	push	{r4, r7, lr}
 8003f36:	b087      	sub	sp, #28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <BSP_CAMERA_Start+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003f46:	f06f 0301 	mvn.w	r3, #1
 8003f4a:	617b      	str	r3, [r7, #20]
 8003f4c:	e022      	b.n	8003f94 <BSP_CAMERA_Start+0x60>
  }
  else if(HAL_DCMI_Start_DMA(&hdcmi, Mode, (uint32_t)pBff, (uint32_t)GetSize(Camera_Ctx[Instance].Resolution, Camera_Ctx[Instance].PixelFormat)) != HAL_OK)
 8003f4e:	68bc      	ldr	r4, [r7, #8]
 8003f50:	4913      	ldr	r1, [pc, #76]	; (8003fa0 <BSP_CAMERA_Start+0x6c>)
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	4613      	mov	r3, r2
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	4413      	add	r3, r2
 8003f5a:	011b      	lsls	r3, r3, #4
 8003f5c:	440b      	add	r3, r1
 8003f5e:	6818      	ldr	r0, [r3, #0]
 8003f60:	490f      	ldr	r1, [pc, #60]	; (8003fa0 <BSP_CAMERA_Start+0x6c>)
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	4613      	mov	r3, r2
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	4413      	add	r3, r2
 8003f6a:	011b      	lsls	r3, r3, #4
 8003f6c:	440b      	add	r3, r1
 8003f6e:	3304      	adds	r3, #4
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4619      	mov	r1, r3
 8003f74:	f000 f8a6 	bl	80040c4 <GetSize>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	4622      	mov	r2, r4
 8003f7c:	6879      	ldr	r1, [r7, #4]
 8003f7e:	4809      	ldr	r0, [pc, #36]	; (8003fa4 <BSP_CAMERA_Start+0x70>)
 8003f80:	f000 feae 	bl	8004ce0 <HAL_DCMI_Start_DMA>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d002      	beq.n	8003f90 <BSP_CAMERA_Start+0x5c>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 8003f8a:	f06f 0303 	mvn.w	r3, #3
 8003f8e:	e002      	b.n	8003f96 <BSP_CAMERA_Start+0x62>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8003f90:	2300      	movs	r3, #0
 8003f92:	617b      	str	r3, [r7, #20]
  }

  /* Return BSP status */
  return ret;
 8003f94:	697b      	ldr	r3, [r7, #20]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	371c      	adds	r7, #28
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd90      	pop	{r4, r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	2402cf40 	.word	0x2402cf40
 8003fa4:	240082a0 	.word	0x240082a0

08003fa8 <BSP_CAMERA_Stop>:
  * @brief  Stop the CAMERA capture
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_Stop(uint32_t Instance)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <BSP_CAMERA_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003fb6:	f06f 0301 	mvn.w	r3, #1
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	e00b      	b.n	8003fd6 <BSP_CAMERA_Stop+0x2e>
  }
  else if(HAL_DCMI_Stop(&hdcmi) != HAL_OK)
 8003fbe:	4808      	ldr	r0, [pc, #32]	; (8003fe0 <BSP_CAMERA_Stop+0x38>)
 8003fc0:	f000 ff50 	bl	8004e64 <HAL_DCMI_Stop>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <BSP_CAMERA_Stop+0x2a>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8003fca:	f06f 0303 	mvn.w	r3, #3
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	e001      	b.n	8003fd6 <BSP_CAMERA_Stop+0x2e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	240082a0 	.word	0x240082a0

08003fe4 <BSP_CAMERA_HwReset>:
  * @brief  CAMERA hardware reset
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_HwReset(uint32_t Instance)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003fec:	2300      	movs	r3, #0
 8003fee:	60fb      	str	r3, [r7, #12]
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d002      	beq.n	8003ffc <BSP_CAMERA_HwReset+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003ff6:	f06f 0301 	mvn.w	r3, #1
 8003ffa:	60fb      	str	r3, [r7, #12]
      }
    }
#endif
  }

  return ret;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <BSP_CAMERA_PwrDown>:
  * @brief  CAMERA power down
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_PwrDown(uint32_t Instance)
{
 800400a:	b480      	push	{r7}
 800400c:	b085      	sub	sp, #20
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8004012:	2300      	movs	r3, #0
 8004014:	60fb      	str	r3, [r7, #12]
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif

  if(Instance >= CAMERA_INSTANCES_NBR)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d002      	beq.n	8004022 <BSP_CAMERA_PwrDown+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800401c:	f06f 0301 	mvn.w	r3, #1
 8004020:	60fb      	str	r3, [r7, #12]
      }
    }
#endif
  }

  return ret;
 8004022:	68fb      	ldr	r3, [r7, #12]
}
 8004024:	4618      	mov	r0, r3
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <BSP_CAMERA_LineEventCallback>:
  * @brief  Line Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_LineEventCallback(uint32_t Instance)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <BSP_CAMERA_VsyncEventCallback>:
  * @brief  Vsync Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_VsyncEventCallback(uint32_t Instance)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <BSP_CAMERA_ErrorCallback>:
  * @brief  Error callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_ErrorCallback(uint32_t Instance)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <HAL_DCMI_LineEventCallback>:
  * @brief  Line event callback
  * @param  hdcmi  pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_LineEventCallback(0);
 8004074:	2000      	movs	r0, #0
 8004076:	f7ff ffdb 	bl	8004030 <BSP_CAMERA_LineEventCallback>
}
 800407a:	bf00      	nop
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <HAL_DCMI_FrameEventCallback>:
  * @brief  Frame event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
 {
 8004082:	b580      	push	{r7, lr}
 8004084:	b082      	sub	sp, #8
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_FrameEventCallback(0);
 800408a:	2000      	movs	r0, #0
 800408c:	f7fd fcec 	bl	8001a68 <BSP_CAMERA_FrameEventCallback>
}
 8004090:	bf00      	nop
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <HAL_DCMI_VsyncEventCallback>:
  * @brief  Vsync event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_VsyncEventCallback(0);
 80040a0:	2000      	movs	r0, #0
 80040a2:	f7ff ffcf 	bl	8004044 <BSP_CAMERA_VsyncEventCallback>
}
 80040a6:	bf00      	nop
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <HAL_DCMI_ErrorCallback>:
  * @brief  Error callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b082      	sub	sp, #8
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_ErrorCallback(0);
 80040b6:	2000      	movs	r0, #0
 80040b8:	f7ff ffce 	bl	8004058 <BSP_CAMERA_ErrorCallback>
}
 80040bc:	bf00      	nop
 80040be:	3708      	adds	r7, #8
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <GetSize>:
  * @param  Resolution  the current resolution.
  * @param  PixelFormat Pixel format
  * @retval capture size in pixels unit.
  */
static int32_t GetSize(uint32_t Resolution, uint32_t PixelFormat)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t size = 0;
 80040ce:	2300      	movs	r3, #0
 80040d0:	60fb      	str	r3, [r7, #12]
  uint32_t pf_div;
  if(PixelFormat == CAMERA_PF_RGB888)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d102      	bne.n	80040de <GetSize+0x1a>
  {
    pf_div = 3; /* each pixel on 3 bytes so 3/4 words */
 80040d8:	2303      	movs	r3, #3
 80040da:	60bb      	str	r3, [r7, #8]
 80040dc:	e001      	b.n	80040e2 <GetSize+0x1e>
  }
  else
  {
    pf_div = 2; /* each pixel on 2 bytes so 1/2 words*/
 80040de:	2302      	movs	r3, #2
 80040e0:	60bb      	str	r3, [r7, #8]
  }
  /* Get capture size */
  switch (Resolution)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b04      	cmp	r3, #4
 80040e6:	d834      	bhi.n	8004152 <GetSize+0x8e>
 80040e8:	a201      	add	r2, pc, #4	; (adr r2, 80040f0 <GetSize+0x2c>)
 80040ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ee:	bf00      	nop
 80040f0:	08004105 	.word	0x08004105
 80040f4:	08004115 	.word	0x08004115
 80040f8:	08004125 	.word	0x08004125
 80040fc:	08004135 	.word	0x08004135
 8004100:	08004145 	.word	0x08004145
  {
  case CAMERA_R160x120:
    size =  ((uint32_t)(160*120)*pf_div)/4U;
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 800410a:	fb02 f303 	mul.w	r3, r2, r3
 800410e:	089b      	lsrs	r3, r3, #2
 8004110:	60fb      	str	r3, [r7, #12]
    break;
 8004112:	e01f      	b.n	8004154 <GetSize+0x90>
  case CAMERA_R320x240:
    size =  ((uint32_t)(320*240)*pf_div)/4U;
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 800411a:	fb02 f303 	mul.w	r3, r2, r3
 800411e:	089b      	lsrs	r3, r3, #2
 8004120:	60fb      	str	r3, [r7, #12]
    break;
 8004122:	e017      	b.n	8004154 <GetSize+0x90>
  case CAMERA_R480x272:
    size =  ((uint32_t)(480*272)*pf_div)/4U;
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	4613      	mov	r3, r2
 8004128:	021b      	lsls	r3, r3, #8
 800412a:	1a9b      	subs	r3, r3, r2
 800412c:	025b      	lsls	r3, r3, #9
 800412e:	089b      	lsrs	r3, r3, #2
 8004130:	60fb      	str	r3, [r7, #12]
    break;
 8004132:	e00f      	b.n	8004154 <GetSize+0x90>
  case CAMERA_R640x480:
    size =  ((uint32_t)(640*480)*pf_div)/4U;
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
 800413a:	fb02 f303 	mul.w	r3, r2, r3
 800413e:	089b      	lsrs	r3, r3, #2
 8004140:	60fb      	str	r3, [r7, #12]
    break;
 8004142:	e007      	b.n	8004154 <GetSize+0x90>
  case CAMERA_R800x480:
    size =  ((uint32_t)(800*480)*pf_div)/4U;
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	4a07      	ldr	r2, [pc, #28]	; (8004164 <GetSize+0xa0>)
 8004148:	fb02 f303 	mul.w	r3, r2, r3
 800414c:	089b      	lsrs	r3, r3, #2
 800414e:	60fb      	str	r3, [r7, #12]
    break;
 8004150:	e000      	b.n	8004154 <GetSize+0x90>
  default:
    break;
 8004152:	bf00      	nop
  }

  return (int32_t)size;
 8004154:	68fb      	ldr	r3, [r7, #12]
}
 8004156:	4618      	mov	r0, r3
 8004158:	3714      	adds	r7, #20
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	0005dc00 	.word	0x0005dc00

08004168 <OV5640_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t OV5640_Probe(uint32_t Resolution, uint32_t PixelFormat)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b08a      	sub	sp, #40	; 0x28
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  OV5640_IO_t              IOCtx;
  uint32_t                  id;
  static OV5640_Object_t   OV5640Obj;

  /* Configure the audio driver */
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
 8004172:	2378      	movs	r3, #120	; 0x78
 8004174:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 8004176:	4b2c      	ldr	r3, [pc, #176]	; (8004228 <OV5640_Probe+0xc0>)
 8004178:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800417a:	4b2c      	ldr	r3, [pc, #176]	; (800422c <OV5640_Probe+0xc4>)
 800417c:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 800417e:	4b2c      	ldr	r3, [pc, #176]	; (8004230 <OV5640_Probe+0xc8>)
 8004180:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 8004182:	4b2c      	ldr	r3, [pc, #176]	; (8004234 <OV5640_Probe+0xcc>)
 8004184:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8004186:	4b2c      	ldr	r3, [pc, #176]	; (8004238 <OV5640_Probe+0xd0>)
 8004188:	623b      	str	r3, [r7, #32]

  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 800418a:	f107 030c 	add.w	r3, r7, #12
 800418e:	4619      	mov	r1, r3
 8004190:	482a      	ldr	r0, [pc, #168]	; (800423c <OV5640_Probe+0xd4>)
 8004192:	f7fd fc7f 	bl	8001a94 <OV5640_RegisterBusIO>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <OV5640_Probe+0x3c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800419c:	f06f 0304 	mvn.w	r3, #4
 80041a0:	627b      	str	r3, [r7, #36]	; 0x24
 80041a2:	e03c      	b.n	800421e <OV5640_Probe+0xb6>
  }
  else if(OV5640_ReadID(&OV5640Obj, &id) != OV5640_OK)
 80041a4:	f107 0308 	add.w	r3, r7, #8
 80041a8:	4619      	mov	r1, r3
 80041aa:	4824      	ldr	r0, [pc, #144]	; (800423c <OV5640_Probe+0xd4>)
 80041ac:	f7fe f8c6 	bl	800233c <OV5640_ReadID>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <OV5640_Probe+0x56>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80041b6:	f06f 0304 	mvn.w	r3, #4
 80041ba:	627b      	str	r3, [r7, #36]	; 0x24
 80041bc:	e02f      	b.n	800421e <OV5640_Probe+0xb6>
  }
  else
  {
    if(id != OV5640_ID)
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	f245 6240 	movw	r2, #22080	; 0x5640
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d003      	beq.n	80041d0 <OV5640_Probe+0x68>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80041c8:	f06f 0306 	mvn.w	r3, #6
 80041cc:	627b      	str	r3, [r7, #36]	; 0x24
 80041ce:	e026      	b.n	800421e <OV5640_Probe+0xb6>
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 80041d0:	4b1b      	ldr	r3, [pc, #108]	; (8004240 <OV5640_Probe+0xd8>)
 80041d2:	4a1c      	ldr	r2, [pc, #112]	; (8004244 <OV5640_Probe+0xdc>)
 80041d4:	601a      	str	r2, [r3, #0]
      Camera_CompObj = &OV5640Obj;
 80041d6:	4b1c      	ldr	r3, [pc, #112]	; (8004248 <OV5640_Probe+0xe0>)
 80041d8:	4a18      	ldr	r2, [pc, #96]	; (800423c <OV5640_Probe+0xd4>)
 80041da:	601a      	str	r2, [r3, #0]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 80041dc:	4b18      	ldr	r3, [pc, #96]	; (8004240 <OV5640_Probe+0xd8>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a19      	ldr	r2, [pc, #100]	; (8004248 <OV5640_Probe+0xe0>)
 80041e4:	6810      	ldr	r0, [r2, #0]
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	6879      	ldr	r1, [r7, #4]
 80041ea:	4798      	blx	r3
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <OV5640_Probe+0x92>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80041f2:	f06f 0304 	mvn.w	r3, #4
 80041f6:	627b      	str	r3, [r7, #36]	; 0x24
 80041f8:	e011      	b.n	800421e <OV5640_Probe+0xb6>
      }
	  else if(Camera_Drv->GetCapabilities(Camera_CompObj, Camera_Cap) != OV5640_OK)
 80041fa:	4b11      	ldr	r3, [pc, #68]	; (8004240 <OV5640_Probe+0xd8>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	4a11      	ldr	r2, [pc, #68]	; (8004248 <OV5640_Probe+0xe0>)
 8004202:	6812      	ldr	r2, [r2, #0]
 8004204:	4911      	ldr	r1, [pc, #68]	; (800424c <OV5640_Probe+0xe4>)
 8004206:	6809      	ldr	r1, [r1, #0]
 8004208:	4610      	mov	r0, r2
 800420a:	4798      	blx	r3
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <OV5640_Probe+0xb2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004212:	f06f 0304 	mvn.w	r3, #4
 8004216:	627b      	str	r3, [r7, #36]	; 0x24
 8004218:	e001      	b.n	800421e <OV5640_Probe+0xb6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800421a:	2300      	movs	r3, #0
 800421c:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004220:	4618      	mov	r0, r3
 8004222:	3728      	adds	r7, #40	; 0x28
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	080035fd 	.word	0x080035fd
 800422c:	08003671 	.word	0x08003671
 8004230:	08003799 	.word	0x08003799
 8004234:	0800373d 	.word	0x0800373d
 8004238:	080037f5 	.word	0x080037f5
 800423c:	2402cf78 	.word	0x2402cf78
 8004240:	2402cf70 	.word	0x2402cf70
 8004244:	24000000 	.word	0x24000000
 8004248:	2402cf3c 	.word	0x2402cf3c
 800424c:	2402cf74 	.word	0x2402cf74

08004250 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004256:	4b0a      	ldr	r3, [pc, #40]	; (8004280 <HAL_MspInit+0x30>)
 8004258:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800425c:	4a08      	ldr	r2, [pc, #32]	; (8004280 <HAL_MspInit+0x30>)
 800425e:	f043 0302 	orr.w	r3, r3, #2
 8004262:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8004266:	4b06      	ldr	r3, [pc, #24]	; (8004280 <HAL_MspInit+0x30>)
 8004268:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	607b      	str	r3, [r7, #4]
 8004272:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	58024400 	.word	0x58024400

08004284 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004288:	e7fe      	b.n	8004288 <NMI_Handler+0x4>

0800428a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800428a:	b480      	push	{r7}
 800428c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800428e:	e7fe      	b.n	800428e <HardFault_Handler+0x4>

08004290 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004294:	e7fe      	b.n	8004294 <MemManage_Handler+0x4>

08004296 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004296:	b480      	push	{r7}
 8004298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800429a:	e7fe      	b.n	800429a <BusFault_Handler+0x4>

0800429c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042a0:	e7fe      	b.n	80042a0 <UsageFault_Handler+0x4>

080042a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042a2:	b480      	push	{r7}
 80042a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80042a6:	bf00      	nop
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042b4:	bf00      	nop
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042be:	b480      	push	{r7}
 80042c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042c2:	bf00      	nop
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042d0:	f000 fa46 	bl	8004760 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042d4:	bf00      	nop
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80042dc:	4802      	ldr	r0, [pc, #8]	; (80042e8 <USART1_IRQHandler+0x10>)
 80042de:	f009 fd53 	bl	800dd88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80042e2:	bf00      	nop
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	2402cfa4 	.word	0x2402cfa4

080042ec <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80042f0:	4802      	ldr	r0, [pc, #8]	; (80042fc <DMA2_Stream1_IRQHandler+0x10>)
 80042f2:	f002 faa7 	bl	8006844 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80042f6:	bf00      	nop
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	240082f0 	.word	0x240082f0

08004300 <DCMI_PSSI_IRQHandler>:

/**
  * @brief This function handles DCMI and PSSI global interrupt.
  */
void DCMI_PSSI_IRQHandler(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_PSSI_IRQn 0 */

  /* USER CODE END DCMI_PSSI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8004304:	4802      	ldr	r0, [pc, #8]	; (8004310 <DCMI_PSSI_IRQHandler+0x10>)
 8004306:	f000 fe0d 	bl	8004f24 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_PSSI_IRQn 1 */

  /* USER CODE END DCMI_PSSI_IRQn 1 */
}
 800430a:	bf00      	nop
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	240082a0 	.word	0x240082a0

08004314 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004318:	4802      	ldr	r0, [pc, #8]	; (8004324 <LTDC_IRQHandler+0x10>)
 800431a:	f006 f8cb 	bl	800a4b4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800431e:	bf00      	nop
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	24008408 	.word	0x24008408

08004328 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC Error global Interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800432c:	4802      	ldr	r0, [pc, #8]	; (8004338 <LTDC_ER_IRQHandler+0x10>)
 800432e:	f006 f8c1 	bl	800a4b4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 8004332:	bf00      	nop
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	24008408 	.word	0x24008408

0800433c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004340:	4802      	ldr	r0, [pc, #8]	; (800434c <DMA2D_IRQHandler+0x10>)
 8004342:	f003 ff79 	bl	8008238 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8004346:	bf00      	nop
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	24008368 	.word	0x24008368

08004350 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004358:	4a14      	ldr	r2, [pc, #80]	; (80043ac <_sbrk+0x5c>)
 800435a:	4b15      	ldr	r3, [pc, #84]	; (80043b0 <_sbrk+0x60>)
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004364:	4b13      	ldr	r3, [pc, #76]	; (80043b4 <_sbrk+0x64>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d102      	bne.n	8004372 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800436c:	4b11      	ldr	r3, [pc, #68]	; (80043b4 <_sbrk+0x64>)
 800436e:	4a12      	ldr	r2, [pc, #72]	; (80043b8 <_sbrk+0x68>)
 8004370:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004372:	4b10      	ldr	r3, [pc, #64]	; (80043b4 <_sbrk+0x64>)
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4413      	add	r3, r2
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	429a      	cmp	r2, r3
 800437e:	d207      	bcs.n	8004390 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004380:	f017 f8ea 	bl	801b558 <__errno>
 8004384:	4603      	mov	r3, r0
 8004386:	220c      	movs	r2, #12
 8004388:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800438a:	f04f 33ff 	mov.w	r3, #4294967295
 800438e:	e009      	b.n	80043a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004390:	4b08      	ldr	r3, [pc, #32]	; (80043b4 <_sbrk+0x64>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004396:	4b07      	ldr	r3, [pc, #28]	; (80043b4 <_sbrk+0x64>)
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4413      	add	r3, r2
 800439e:	4a05      	ldr	r2, [pc, #20]	; (80043b4 <_sbrk+0x64>)
 80043a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80043a2:	68fb      	ldr	r3, [r7, #12]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3718      	adds	r7, #24
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	24100000 	.word	0x24100000
 80043b0:	00000800 	.word	0x00000800
 80043b4:	2402cfa0 	.word	0x2402cfa0
 80043b8:	20000000 	.word	0x20000000

080043bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80043c0:	4b32      	ldr	r3, [pc, #200]	; (800448c <SystemInit+0xd0>)
 80043c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c6:	4a31      	ldr	r2, [pc, #196]	; (800448c <SystemInit+0xd0>)
 80043c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80043d0:	4b2f      	ldr	r3, [pc, #188]	; (8004490 <SystemInit+0xd4>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 030f 	and.w	r3, r3, #15
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d807      	bhi.n	80043ec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80043dc:	4b2c      	ldr	r3, [pc, #176]	; (8004490 <SystemInit+0xd4>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f023 030f 	bic.w	r3, r3, #15
 80043e4:	4a2a      	ldr	r2, [pc, #168]	; (8004490 <SystemInit+0xd4>)
 80043e6:	f043 0303 	orr.w	r3, r3, #3
 80043ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80043ec:	4b29      	ldr	r3, [pc, #164]	; (8004494 <SystemInit+0xd8>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a28      	ldr	r2, [pc, #160]	; (8004494 <SystemInit+0xd8>)
 80043f2:	f043 0301 	orr.w	r3, r3, #1
 80043f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80043f8:	4b26      	ldr	r3, [pc, #152]	; (8004494 <SystemInit+0xd8>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80043fe:	4b25      	ldr	r3, [pc, #148]	; (8004494 <SystemInit+0xd8>)
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	4924      	ldr	r1, [pc, #144]	; (8004494 <SystemInit+0xd8>)
 8004404:	4b24      	ldr	r3, [pc, #144]	; (8004498 <SystemInit+0xdc>)
 8004406:	4013      	ands	r3, r2
 8004408:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800440a:	4b21      	ldr	r3, [pc, #132]	; (8004490 <SystemInit+0xd4>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 030c 	and.w	r3, r3, #12
 8004412:	2b00      	cmp	r3, #0
 8004414:	d007      	beq.n	8004426 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004416:	4b1e      	ldr	r3, [pc, #120]	; (8004490 <SystemInit+0xd4>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f023 030f 	bic.w	r3, r3, #15
 800441e:	4a1c      	ldr	r2, [pc, #112]	; (8004490 <SystemInit+0xd4>)
 8004420:	f043 0303 	orr.w	r3, r3, #3
 8004424:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8004426:	4b1b      	ldr	r3, [pc, #108]	; (8004494 <SystemInit+0xd8>)
 8004428:	2200      	movs	r2, #0
 800442a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800442c:	4b19      	ldr	r3, [pc, #100]	; (8004494 <SystemInit+0xd8>)
 800442e:	2200      	movs	r2, #0
 8004430:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8004432:	4b18      	ldr	r3, [pc, #96]	; (8004494 <SystemInit+0xd8>)
 8004434:	2200      	movs	r2, #0
 8004436:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004438:	4b16      	ldr	r3, [pc, #88]	; (8004494 <SystemInit+0xd8>)
 800443a:	4a18      	ldr	r2, [pc, #96]	; (800449c <SystemInit+0xe0>)
 800443c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800443e:	4b15      	ldr	r3, [pc, #84]	; (8004494 <SystemInit+0xd8>)
 8004440:	4a17      	ldr	r2, [pc, #92]	; (80044a0 <SystemInit+0xe4>)
 8004442:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004444:	4b13      	ldr	r3, [pc, #76]	; (8004494 <SystemInit+0xd8>)
 8004446:	4a17      	ldr	r2, [pc, #92]	; (80044a4 <SystemInit+0xe8>)
 8004448:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800444a:	4b12      	ldr	r3, [pc, #72]	; (8004494 <SystemInit+0xd8>)
 800444c:	2200      	movs	r2, #0
 800444e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004450:	4b10      	ldr	r3, [pc, #64]	; (8004494 <SystemInit+0xd8>)
 8004452:	4a14      	ldr	r2, [pc, #80]	; (80044a4 <SystemInit+0xe8>)
 8004454:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004456:	4b0f      	ldr	r3, [pc, #60]	; (8004494 <SystemInit+0xd8>)
 8004458:	2200      	movs	r2, #0
 800445a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800445c:	4b0d      	ldr	r3, [pc, #52]	; (8004494 <SystemInit+0xd8>)
 800445e:	4a11      	ldr	r2, [pc, #68]	; (80044a4 <SystemInit+0xe8>)
 8004460:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004462:	4b0c      	ldr	r3, [pc, #48]	; (8004494 <SystemInit+0xd8>)
 8004464:	2200      	movs	r2, #0
 8004466:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004468:	4b0a      	ldr	r3, [pc, #40]	; (8004494 <SystemInit+0xd8>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a09      	ldr	r2, [pc, #36]	; (8004494 <SystemInit+0xd8>)
 800446e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004472:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004474:	4b07      	ldr	r3, [pc, #28]	; (8004494 <SystemInit+0xd8>)
 8004476:	2200      	movs	r2, #0
 8004478:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800447a:	4b0b      	ldr	r3, [pc, #44]	; (80044a8 <SystemInit+0xec>)
 800447c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004480:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004482:	bf00      	nop
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	e000ed00 	.word	0xe000ed00
 8004490:	52002000 	.word	0x52002000
 8004494:	58024400 	.word	0x58024400
 8004498:	eaf6ed7f 	.word	0xeaf6ed7f
 800449c:	02020200 	.word	0x02020200
 80044a0:	01ff0000 	.word	0x01ff0000
 80044a4:	01010280 	.word	0x01010280
 80044a8:	52004000 	.word	0x52004000

080044ac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80044b0:	4b22      	ldr	r3, [pc, #136]	; (800453c <MX_USART1_UART_Init+0x90>)
 80044b2:	4a23      	ldr	r2, [pc, #140]	; (8004540 <MX_USART1_UART_Init+0x94>)
 80044b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80044b6:	4b21      	ldr	r3, [pc, #132]	; (800453c <MX_USART1_UART_Init+0x90>)
 80044b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80044bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80044be:	4b1f      	ldr	r3, [pc, #124]	; (800453c <MX_USART1_UART_Init+0x90>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80044c4:	4b1d      	ldr	r3, [pc, #116]	; (800453c <MX_USART1_UART_Init+0x90>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80044ca:	4b1c      	ldr	r3, [pc, #112]	; (800453c <MX_USART1_UART_Init+0x90>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80044d0:	4b1a      	ldr	r3, [pc, #104]	; (800453c <MX_USART1_UART_Init+0x90>)
 80044d2:	220c      	movs	r2, #12
 80044d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044d6:	4b19      	ldr	r3, [pc, #100]	; (800453c <MX_USART1_UART_Init+0x90>)
 80044d8:	2200      	movs	r2, #0
 80044da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80044dc:	4b17      	ldr	r3, [pc, #92]	; (800453c <MX_USART1_UART_Init+0x90>)
 80044de:	2200      	movs	r2, #0
 80044e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80044e2:	4b16      	ldr	r3, [pc, #88]	; (800453c <MX_USART1_UART_Init+0x90>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80044e8:	4b14      	ldr	r3, [pc, #80]	; (800453c <MX_USART1_UART_Init+0x90>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80044ee:	4b13      	ldr	r3, [pc, #76]	; (800453c <MX_USART1_UART_Init+0x90>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80044f4:	4811      	ldr	r0, [pc, #68]	; (800453c <MX_USART1_UART_Init+0x90>)
 80044f6:	f009 faa0 	bl	800da3a <HAL_UART_Init>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004500:	f7fd fac2 	bl	8001a88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004504:	2100      	movs	r1, #0
 8004506:	480d      	ldr	r0, [pc, #52]	; (800453c <MX_USART1_UART_Init+0x90>)
 8004508:	f00b f936 	bl	800f778 <HAL_UARTEx_SetTxFifoThreshold>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004512:	f7fd fab9 	bl	8001a88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004516:	2100      	movs	r1, #0
 8004518:	4808      	ldr	r0, [pc, #32]	; (800453c <MX_USART1_UART_Init+0x90>)
 800451a:	f00b f96b 	bl	800f7f4 <HAL_UARTEx_SetRxFifoThreshold>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004524:	f7fd fab0 	bl	8001a88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004528:	4804      	ldr	r0, [pc, #16]	; (800453c <MX_USART1_UART_Init+0x90>)
 800452a:	f00b f8ec 	bl	800f706 <HAL_UARTEx_DisableFifoMode>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004534:	f7fd faa8 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004538:	bf00      	nop
 800453a:	bd80      	pop	{r7, pc}
 800453c:	2402cfa4 	.word	0x2402cfa4
 8004540:	40011000 	.word	0x40011000

08004544 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b0ba      	sub	sp, #232	; 0xe8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800454c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004550:	2200      	movs	r2, #0
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	605a      	str	r2, [r3, #4]
 8004556:	609a      	str	r2, [r3, #8]
 8004558:	60da      	str	r2, [r3, #12]
 800455a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800455c:	f107 0310 	add.w	r3, r7, #16
 8004560:	22c0      	movs	r2, #192	; 0xc0
 8004562:	2100      	movs	r1, #0
 8004564:	4618      	mov	r0, r3
 8004566:	f017 f837 	bl	801b5d8 <memset>
  if(uartHandle->Instance==USART1)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a2b      	ldr	r2, [pc, #172]	; (800461c <HAL_UART_MspInit+0xd8>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d14e      	bne.n	8004612 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004574:	f04f 0201 	mov.w	r2, #1
 8004578:	f04f 0300 	mov.w	r3, #0
 800457c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8004580:	2300      	movs	r3, #0
 8004582:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004586:	f107 0310 	add.w	r3, r7, #16
 800458a:	4618      	mov	r0, r3
 800458c:	f007 fabe 	bl	800bb0c <HAL_RCCEx_PeriphCLKConfig>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8004596:	f7fd fa77 	bl	8001a88 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800459a:	4b21      	ldr	r3, [pc, #132]	; (8004620 <HAL_UART_MspInit+0xdc>)
 800459c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80045a0:	4a1f      	ldr	r2, [pc, #124]	; (8004620 <HAL_UART_MspInit+0xdc>)
 80045a2:	f043 0310 	orr.w	r3, r3, #16
 80045a6:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80045aa:	4b1d      	ldr	r3, [pc, #116]	; (8004620 <HAL_UART_MspInit+0xdc>)
 80045ac:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80045b0:	f003 0310 	and.w	r3, r3, #16
 80045b4:	60fb      	str	r3, [r7, #12]
 80045b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045b8:	4b19      	ldr	r3, [pc, #100]	; (8004620 <HAL_UART_MspInit+0xdc>)
 80045ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80045be:	4a18      	ldr	r2, [pc, #96]	; (8004620 <HAL_UART_MspInit+0xdc>)
 80045c0:	f043 0301 	orr.w	r3, r3, #1
 80045c4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80045c8:	4b15      	ldr	r3, [pc, #84]	; (8004620 <HAL_UART_MspInit+0xdc>)
 80045ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	60bb      	str	r3, [r7, #8]
 80045d4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 80045d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80045da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045de:	2302      	movs	r3, #2
 80045e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e4:	2300      	movs	r3, #0
 80045e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045ea:	2300      	movs	r3, #0
 80045ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80045f0:	2307      	movs	r3, #7
 80045f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045f6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80045fa:	4619      	mov	r1, r3
 80045fc:	4809      	ldr	r0, [pc, #36]	; (8004624 <HAL_UART_MspInit+0xe0>)
 80045fe:	f004 fd2f 	bl	8009060 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004602:	2200      	movs	r2, #0
 8004604:	2100      	movs	r1, #0
 8004606:	2025      	movs	r0, #37	; 0x25
 8004608:	f000 f9c9 	bl	800499e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800460c:	2025      	movs	r0, #37	; 0x25
 800460e:	f000 f9e0 	bl	80049d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004612:	bf00      	nop
 8004614:	37e8      	adds	r7, #232	; 0xe8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	40011000 	.word	0x40011000
 8004620:	58024400 	.word	0x58024400
 8004624:	58020000 	.word	0x58020000

08004628 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004628:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004660 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800462c:	f7ff fec6 	bl	80043bc <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004630:	480c      	ldr	r0, [pc, #48]	; (8004664 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004632:	490d      	ldr	r1, [pc, #52]	; (8004668 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004634:	4a0d      	ldr	r2, [pc, #52]	; (800466c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004638:	e002      	b.n	8004640 <LoopCopyDataInit>

0800463a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800463a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800463c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800463e:	3304      	adds	r3, #4

08004640 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8004640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004644:	d3f9      	bcc.n	800463a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004646:	4a0a      	ldr	r2, [pc, #40]	; (8004670 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004648:	4c0a      	ldr	r4, [pc, #40]	; (8004674 <LoopFillZerobss+0x22>)
  movs r3, #0
 800464a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800464c:	e001      	b.n	8004652 <LoopFillZerobss>

0800464e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800464e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004650:	3204      	adds	r2, #4

08004652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004654:	d3fb      	bcc.n	800464e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004656:	f016 ff85 	bl	801b564 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800465a:	f7fd f8b5 	bl	80017c8 <main>
  bx  lr
 800465e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004660:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8004664:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004668:	24008248 	.word	0x24008248
  ldr r2, =_sidata
 800466c:	08091308 	.word	0x08091308
  ldr r2, =_sbss
 8004670:	24008260 	.word	0x24008260
  ldr r4, =_ebss
 8004674:	2405e3c0 	.word	0x2405e3c0

08004678 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004678:	e7fe      	b.n	8004678 <ADC_IRQHandler>
	...

0800467c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004682:	2003      	movs	r0, #3
 8004684:	f000 f980 	bl	8004988 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004688:	f007 f86a 	bl	800b760 <HAL_RCC_GetSysClockFreq>
 800468c:	4602      	mov	r2, r0
 800468e:	4b15      	ldr	r3, [pc, #84]	; (80046e4 <HAL_Init+0x68>)
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	0a1b      	lsrs	r3, r3, #8
 8004694:	f003 030f 	and.w	r3, r3, #15
 8004698:	4913      	ldr	r1, [pc, #76]	; (80046e8 <HAL_Init+0x6c>)
 800469a:	5ccb      	ldrb	r3, [r1, r3]
 800469c:	f003 031f 	and.w	r3, r3, #31
 80046a0:	fa22 f303 	lsr.w	r3, r2, r3
 80046a4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80046a6:	4b0f      	ldr	r3, [pc, #60]	; (80046e4 <HAL_Init+0x68>)
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	f003 030f 	and.w	r3, r3, #15
 80046ae:	4a0e      	ldr	r2, [pc, #56]	; (80046e8 <HAL_Init+0x6c>)
 80046b0:	5cd3      	ldrb	r3, [r2, r3]
 80046b2:	f003 031f 	and.w	r3, r3, #31
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	fa22 f303 	lsr.w	r3, r2, r3
 80046bc:	4a0b      	ldr	r2, [pc, #44]	; (80046ec <HAL_Init+0x70>)
 80046be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80046c0:	4a0b      	ldr	r2, [pc, #44]	; (80046f0 <HAL_Init+0x74>)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80046c6:	2000      	movs	r0, #0
 80046c8:	f000 f814 	bl	80046f4 <HAL_InitTick>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e002      	b.n	80046dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80046d6:	f7ff fdbb 	bl	8004250 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3708      	adds	r7, #8
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	58024400 	.word	0x58024400
 80046e8:	0801d2f8 	.word	0x0801d2f8
 80046ec:	24000048 	.word	0x24000048
 80046f0:	24000044 	.word	0x24000044

080046f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80046fc:	4b15      	ldr	r3, [pc, #84]	; (8004754 <HAL_InitTick+0x60>)
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e021      	b.n	800474c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004708:	4b13      	ldr	r3, [pc, #76]	; (8004758 <HAL_InitTick+0x64>)
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	4b11      	ldr	r3, [pc, #68]	; (8004754 <HAL_InitTick+0x60>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	4619      	mov	r1, r3
 8004712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004716:	fbb3 f3f1 	udiv	r3, r3, r1
 800471a:	fbb2 f3f3 	udiv	r3, r2, r3
 800471e:	4618      	mov	r0, r3
 8004720:	f000 f965 	bl	80049ee <HAL_SYSTICK_Config>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e00e      	b.n	800474c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b0f      	cmp	r3, #15
 8004732:	d80a      	bhi.n	800474a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004734:	2200      	movs	r2, #0
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	f04f 30ff 	mov.w	r0, #4294967295
 800473c:	f000 f92f 	bl	800499e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004740:	4a06      	ldr	r2, [pc, #24]	; (800475c <HAL_InitTick+0x68>)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004746:	2300      	movs	r3, #0
 8004748:	e000      	b.n	800474c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
}
 800474c:	4618      	mov	r0, r3
 800474e:	3708      	adds	r7, #8
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	24000050 	.word	0x24000050
 8004758:	24000044 	.word	0x24000044
 800475c:	2400004c 	.word	0x2400004c

08004760 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004760:	b480      	push	{r7}
 8004762:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004764:	4b06      	ldr	r3, [pc, #24]	; (8004780 <HAL_IncTick+0x20>)
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	461a      	mov	r2, r3
 800476a:	4b06      	ldr	r3, [pc, #24]	; (8004784 <HAL_IncTick+0x24>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4413      	add	r3, r2
 8004770:	4a04      	ldr	r2, [pc, #16]	; (8004784 <HAL_IncTick+0x24>)
 8004772:	6013      	str	r3, [r2, #0]
}
 8004774:	bf00      	nop
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	24000050 	.word	0x24000050
 8004784:	2402d038 	.word	0x2402d038

08004788 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
  return uwTick;
 800478c:	4b03      	ldr	r3, [pc, #12]	; (800479c <HAL_GetTick+0x14>)
 800478e:	681b      	ldr	r3, [r3, #0]
}
 8004790:	4618      	mov	r0, r3
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	2402d038 	.word	0x2402d038

080047a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047a8:	f7ff ffee 	bl	8004788 <HAL_GetTick>
 80047ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b8:	d005      	beq.n	80047c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80047ba:	4b0a      	ldr	r3, [pc, #40]	; (80047e4 <HAL_Delay+0x44>)
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	461a      	mov	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4413      	add	r3, r2
 80047c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80047c6:	bf00      	nop
 80047c8:	f7ff ffde 	bl	8004788 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d8f7      	bhi.n	80047c8 <HAL_Delay+0x28>
  {
  }
}
 80047d8:	bf00      	nop
 80047da:	bf00      	nop
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	24000050 	.word	0x24000050

080047e8 <__NVIC_SetPriorityGrouping>:
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f003 0307 	and.w	r3, r3, #7
 80047f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047f8:	4b0b      	ldr	r3, [pc, #44]	; (8004828 <__NVIC_SetPriorityGrouping+0x40>)
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004804:	4013      	ands	r3, r2
 8004806:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004810:	4b06      	ldr	r3, [pc, #24]	; (800482c <__NVIC_SetPriorityGrouping+0x44>)
 8004812:	4313      	orrs	r3, r2
 8004814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004816:	4a04      	ldr	r2, [pc, #16]	; (8004828 <__NVIC_SetPriorityGrouping+0x40>)
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	60d3      	str	r3, [r2, #12]
}
 800481c:	bf00      	nop
 800481e:	3714      	adds	r7, #20
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	e000ed00 	.word	0xe000ed00
 800482c:	05fa0000 	.word	0x05fa0000

08004830 <__NVIC_GetPriorityGrouping>:
{
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004834:	4b04      	ldr	r3, [pc, #16]	; (8004848 <__NVIC_GetPriorityGrouping+0x18>)
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	0a1b      	lsrs	r3, r3, #8
 800483a:	f003 0307 	and.w	r3, r3, #7
}
 800483e:	4618      	mov	r0, r3
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	e000ed00 	.word	0xe000ed00

0800484c <__NVIC_EnableIRQ>:
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	4603      	mov	r3, r0
 8004854:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004856:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800485a:	2b00      	cmp	r3, #0
 800485c:	db0b      	blt.n	8004876 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800485e:	88fb      	ldrh	r3, [r7, #6]
 8004860:	f003 021f 	and.w	r2, r3, #31
 8004864:	4907      	ldr	r1, [pc, #28]	; (8004884 <__NVIC_EnableIRQ+0x38>)
 8004866:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800486a:	095b      	lsrs	r3, r3, #5
 800486c:	2001      	movs	r0, #1
 800486e:	fa00 f202 	lsl.w	r2, r0, r2
 8004872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004876:	bf00      	nop
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	e000e100 	.word	0xe000e100

08004888 <__NVIC_SetPriority>:
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	4603      	mov	r3, r0
 8004890:	6039      	str	r1, [r7, #0]
 8004892:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004894:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004898:	2b00      	cmp	r3, #0
 800489a:	db0a      	blt.n	80048b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	b2da      	uxtb	r2, r3
 80048a0:	490c      	ldr	r1, [pc, #48]	; (80048d4 <__NVIC_SetPriority+0x4c>)
 80048a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048a6:	0112      	lsls	r2, r2, #4
 80048a8:	b2d2      	uxtb	r2, r2
 80048aa:	440b      	add	r3, r1
 80048ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80048b0:	e00a      	b.n	80048c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	b2da      	uxtb	r2, r3
 80048b6:	4908      	ldr	r1, [pc, #32]	; (80048d8 <__NVIC_SetPriority+0x50>)
 80048b8:	88fb      	ldrh	r3, [r7, #6]
 80048ba:	f003 030f 	and.w	r3, r3, #15
 80048be:	3b04      	subs	r3, #4
 80048c0:	0112      	lsls	r2, r2, #4
 80048c2:	b2d2      	uxtb	r2, r2
 80048c4:	440b      	add	r3, r1
 80048c6:	761a      	strb	r2, [r3, #24]
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr
 80048d4:	e000e100 	.word	0xe000e100
 80048d8:	e000ed00 	.word	0xe000ed00

080048dc <NVIC_EncodePriority>:
{
 80048dc:	b480      	push	{r7}
 80048de:	b089      	sub	sp, #36	; 0x24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f003 0307 	and.w	r3, r3, #7
 80048ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	f1c3 0307 	rsb	r3, r3, #7
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	bf28      	it	cs
 80048fa:	2304      	movcs	r3, #4
 80048fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	3304      	adds	r3, #4
 8004902:	2b06      	cmp	r3, #6
 8004904:	d902      	bls.n	800490c <NVIC_EncodePriority+0x30>
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	3b03      	subs	r3, #3
 800490a:	e000      	b.n	800490e <NVIC_EncodePriority+0x32>
 800490c:	2300      	movs	r3, #0
 800490e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004910:	f04f 32ff 	mov.w	r2, #4294967295
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	fa02 f303 	lsl.w	r3, r2, r3
 800491a:	43da      	mvns	r2, r3
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	401a      	ands	r2, r3
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004924:	f04f 31ff 	mov.w	r1, #4294967295
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	fa01 f303 	lsl.w	r3, r1, r3
 800492e:	43d9      	mvns	r1, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004934:	4313      	orrs	r3, r2
}
 8004936:	4618      	mov	r0, r3
 8004938:	3724      	adds	r7, #36	; 0x24
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
	...

08004944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3b01      	subs	r3, #1
 8004950:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004954:	d301      	bcc.n	800495a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004956:	2301      	movs	r3, #1
 8004958:	e00f      	b.n	800497a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800495a:	4a0a      	ldr	r2, [pc, #40]	; (8004984 <SysTick_Config+0x40>)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	3b01      	subs	r3, #1
 8004960:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004962:	210f      	movs	r1, #15
 8004964:	f04f 30ff 	mov.w	r0, #4294967295
 8004968:	f7ff ff8e 	bl	8004888 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800496c:	4b05      	ldr	r3, [pc, #20]	; (8004984 <SysTick_Config+0x40>)
 800496e:	2200      	movs	r2, #0
 8004970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004972:	4b04      	ldr	r3, [pc, #16]	; (8004984 <SysTick_Config+0x40>)
 8004974:	2207      	movs	r2, #7
 8004976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	e000e010 	.word	0xe000e010

08004988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f7ff ff29 	bl	80047e8 <__NVIC_SetPriorityGrouping>
}
 8004996:	bf00      	nop
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b086      	sub	sp, #24
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	4603      	mov	r3, r0
 80049a6:	60b9      	str	r1, [r7, #8]
 80049a8:	607a      	str	r2, [r7, #4]
 80049aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80049ac:	f7ff ff40 	bl	8004830 <__NVIC_GetPriorityGrouping>
 80049b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	68b9      	ldr	r1, [r7, #8]
 80049b6:	6978      	ldr	r0, [r7, #20]
 80049b8:	f7ff ff90 	bl	80048dc <NVIC_EncodePriority>
 80049bc:	4602      	mov	r2, r0
 80049be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80049c2:	4611      	mov	r1, r2
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7ff ff5f 	bl	8004888 <__NVIC_SetPriority>
}
 80049ca:	bf00      	nop
 80049cc:	3718      	adds	r7, #24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b082      	sub	sp, #8
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	4603      	mov	r3, r0
 80049da:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff ff33 	bl	800484c <__NVIC_EnableIRQ>
}
 80049e6:	bf00      	nop
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b082      	sub	sp, #8
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7ff ffa4 	bl	8004944 <SysTick_Config>
 80049fc:	4603      	mov	r3, r0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
	...

08004a08 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e054      	b.n	8004ac4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	7f5b      	ldrb	r3, [r3, #29]
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d105      	bne.n	8004a30 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7fb fe88 	bl	8000740 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	791b      	ldrb	r3, [r3, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10c      	bne.n	8004a58 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a22      	ldr	r2, [pc, #136]	; (8004acc <HAL_CRC_Init+0xc4>)
 8004a44:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 0218 	bic.w	r2, r2, #24
 8004a54:	609a      	str	r2, [r3, #8]
 8004a56:	e00c      	b.n	8004a72 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6899      	ldr	r1, [r3, #8]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	461a      	mov	r2, r3
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f834 	bl	8004ad0 <HAL_CRCEx_Polynomial_Set>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e028      	b.n	8004ac4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	795b      	ldrb	r3, [r3, #5]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d105      	bne.n	8004a86 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a82:	611a      	str	r2, [r3, #16]
 8004a84:	e004      	b.n	8004a90 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6912      	ldr	r2, [r2, #16]
 8004a8e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	695a      	ldr	r2, [r3, #20]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	699a      	ldr	r2, [r3, #24]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3708      	adds	r7, #8
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	04c11db7 	.word	0x04c11db7

08004ad0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004adc:	2300      	movs	r3, #0
 8004ade:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004ae0:	231f      	movs	r3, #31
 8004ae2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d102      	bne.n	8004af4 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	75fb      	strb	r3, [r7, #23]
 8004af2:	e063      	b.n	8004bbc <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004af4:	bf00      	nop
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1e5a      	subs	r2, r3, #1
 8004afa:	613a      	str	r2, [r7, #16]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d009      	beq.n	8004b14 <HAL_CRCEx_Polynomial_Set+0x44>
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	f003 031f 	and.w	r3, r3, #31
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	fa22 f303 	lsr.w	r3, r2, r3
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d0f0      	beq.n	8004af6 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b18      	cmp	r3, #24
 8004b18:	d846      	bhi.n	8004ba8 <HAL_CRCEx_Polynomial_Set+0xd8>
 8004b1a:	a201      	add	r2, pc, #4	; (adr r2, 8004b20 <HAL_CRCEx_Polynomial_Set+0x50>)
 8004b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b20:	08004baf 	.word	0x08004baf
 8004b24:	08004ba9 	.word	0x08004ba9
 8004b28:	08004ba9 	.word	0x08004ba9
 8004b2c:	08004ba9 	.word	0x08004ba9
 8004b30:	08004ba9 	.word	0x08004ba9
 8004b34:	08004ba9 	.word	0x08004ba9
 8004b38:	08004ba9 	.word	0x08004ba9
 8004b3c:	08004ba9 	.word	0x08004ba9
 8004b40:	08004b9d 	.word	0x08004b9d
 8004b44:	08004ba9 	.word	0x08004ba9
 8004b48:	08004ba9 	.word	0x08004ba9
 8004b4c:	08004ba9 	.word	0x08004ba9
 8004b50:	08004ba9 	.word	0x08004ba9
 8004b54:	08004ba9 	.word	0x08004ba9
 8004b58:	08004ba9 	.word	0x08004ba9
 8004b5c:	08004ba9 	.word	0x08004ba9
 8004b60:	08004b91 	.word	0x08004b91
 8004b64:	08004ba9 	.word	0x08004ba9
 8004b68:	08004ba9 	.word	0x08004ba9
 8004b6c:	08004ba9 	.word	0x08004ba9
 8004b70:	08004ba9 	.word	0x08004ba9
 8004b74:	08004ba9 	.word	0x08004ba9
 8004b78:	08004ba9 	.word	0x08004ba9
 8004b7c:	08004ba9 	.word	0x08004ba9
 8004b80:	08004b85 	.word	0x08004b85
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	2b06      	cmp	r3, #6
 8004b88:	d913      	bls.n	8004bb2 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004b8e:	e010      	b.n	8004bb2 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	2b07      	cmp	r3, #7
 8004b94:	d90f      	bls.n	8004bb6 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004b9a:	e00c      	b.n	8004bb6 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	2b0f      	cmp	r3, #15
 8004ba0:	d90b      	bls.n	8004bba <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004ba6:	e008      	b.n	8004bba <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	75fb      	strb	r3, [r7, #23]
        break;
 8004bac:	e006      	b.n	8004bbc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004bae:	bf00      	nop
 8004bb0:	e004      	b.n	8004bbc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004bb2:	bf00      	nop
 8004bb4:	e002      	b.n	8004bbc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004bb6:	bf00      	nop
 8004bb8:	e000      	b.n	8004bbc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004bba:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8004bbc:	7dfb      	ldrb	r3, [r7, #23]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10d      	bne.n	8004bde <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f023 0118 	bic.w	r1, r3, #24
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	371c      	adds	r7, #28
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e069      	b.n	8004cd2 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d102      	bne.n	8004c10 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7fb fdee 	bl	80007ec <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2202      	movs	r2, #2
 8004c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d002      	beq.n	8004c26 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6819      	ldr	r1, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	4b2a      	ldr	r3, [pc, #168]	; (8004cdc <HAL_DCMI_Init+0xf0>)
 8004c32:	400b      	ands	r3, r1
 8004c34:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6819      	ldr	r1, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004c4a:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004c56:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004c62:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c68:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004c6e:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c74:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004c7a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	430a      	orrs	r2, r1
 8004c82:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	2b10      	cmp	r3, #16
 8004c8a:	d112      	bne.n	8004cb2 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	7f1b      	ldrb	r3, [r3, #28]
 8004c90:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	7f5b      	ldrb	r3, [r3, #29]
 8004c96:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004c98:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	7f9b      	ldrb	r3, [r3, #30]
 8004c9e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004ca0:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	7fdb      	ldrb	r3, [r3, #31]
 8004ca8:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004cae:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004cb0:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68da      	ldr	r2, [r3, #12]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f042 021e 	orr.w	r2, r2, #30
 8004cc0:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	ffe0f007 	.word	0xffe0f007

08004ce0 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b088      	sub	sp, #32
 8004ce4:	af02      	add	r7, sp, #8
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
 8004cec:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d101      	bne.n	8004cfc <HAL_DCMI_Start_DMA+0x1c>
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	e0ab      	b.n	8004e54 <HAL_DCMI_Start_DMA+0x174>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2202      	movs	r2, #2
 8004d08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d1a:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 0202 	bic.w	r2, r2, #2
 8004d2a:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6819      	ldr	r1, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68ba      	ldr	r2, [r7, #8]
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d40:	4a46      	ldr	r2, [pc, #280]	; (8004e5c <HAL_DCMI_Start_DMA+0x17c>)
 8004d42:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d48:	4a45      	ldr	r2, [pc, #276]	; (8004e60 <HAL_DCMI_Start_DMA+0x180>)
 8004d4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d50:	2200      	movs	r2, #0
 8004d52:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d72:	d219      	bcs.n	8004da8 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	3328      	adds	r3, #40	; 0x28
 8004d7e:	4619      	mov	r1, r3
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	f000 fd90 	bl	80058a8 <HAL_DMA_Start_IT>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d055      	beq.n	8004e3a <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2240      	movs	r2, #64	; 0x40
 8004d92:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e055      	b.n	8004e54 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dac:	4a2b      	ldr	r2, [pc, #172]	; (8004e5c <HAL_DCMI_Start_DMA+0x17c>)
 8004dae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2201      	movs	r2, #1
 8004db4:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8004dc2:	e009      	b.n	8004dd8 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc8:	085a      	lsrs	r2, r3, #1
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd2:	005a      	lsls	r2, r3, #1
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004de0:	d2f0      	bcs.n	8004dc4 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de6:	1e9a      	subs	r2, r3, #2
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3328      	adds	r3, #40	; 0x28
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	f003 fc73 	bl	8008700 <HAL_DMAEx_MultiBufferStart_IT>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00c      	beq.n	8004e3a <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2240      	movs	r2, #64	; 0x40
 8004e24:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e00c      	b.n	8004e54 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f042 0201 	orr.w	r2, r2, #1
 8004e48:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3718      	adds	r7, #24
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	08005029 	.word	0x08005029
 8004e60:	0800514f 	.word	0x0800514f

08004e64 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8004e6c:	4b2b      	ldr	r3, [pc, #172]	; (8004f1c <HAL_DCMI_Stop+0xb8>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a2b      	ldr	r2, [pc, #172]	; (8004f20 <HAL_DCMI_Stop+0xbc>)
 8004e72:	fba2 2303 	umull	r2, r3, r2, r3
 8004e76:	0a5b      	lsrs	r3, r3, #9
 8004e78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e7c:	fb02 f303 	mul.w	r3, r2, r3
 8004e80:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004e82:	2300      	movs	r3, #0
 8004e84:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d101      	bne.n	8004e94 <HAL_DCMI_Stop+0x30>
 8004e90:	2302      	movs	r3, #2
 8004e92:	e03f      	b.n	8004f14 <HAL_DCMI_Stop+0xb0>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f022 0201 	bic.w	r2, r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d108      	bne.n	8004ed2 <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ec4:	f043 0220 	orr.w	r2, r3, #32
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	72fb      	strb	r3, [r7, #11]
      break;
 8004ed0:	e006      	b.n	8004ee0 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0301 	and.w	r3, r3, #1
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1e9      	bne.n	8004eb4 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004eee:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f000 ff41 	bl	8005d7c <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8004f12:	7afb      	ldrb	r3, [r7, #11]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	24000044 	.word	0x24000044
 8004f20:	10624dd3 	.word	0x10624dd3

08004f24 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f003 0304 	and.w	r3, r3, #4
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d016      	beq.n	8004f6c <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2204      	movs	r2, #4
 8004f44:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f4a:	f043 0202 	orr.w	r2, r3, #2
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2204      	movs	r2, #4
 8004f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f5e:	4a31      	ldr	r2, [pc, #196]	; (8005024 <HAL_DCMI_IRQHandler+0x100>)
 8004f60:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f66:	4618      	mov	r0, r3
 8004f68:	f001 fa26 	bl	80063b8 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d016      	beq.n	8004fa4 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f82:	f043 0201 	orr.w	r2, r3, #1
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2204      	movs	r2, #4
 8004f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f96:	4a23      	ldr	r2, [pc, #140]	; (8005024 <HAL_DCMI_IRQHandler+0x100>)
 8004f98:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f001 fa0a 	bl	80063b8 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f003 0310 	and.w	r3, r3, #16
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d006      	beq.n	8004fbc <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2210      	movs	r2, #16
 8004fb4:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7ff f858 	bl	800406c <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f003 0308 	and.w	r3, r3, #8
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d006      	beq.n	8004fd4 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2208      	movs	r2, #8
 8004fcc:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f7ff f862 	bl	8004098 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d01d      	beq.n	800501a <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0302 	and.w	r3, r3, #2
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d107      	bne.n	8004ffc <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68da      	ldr	r2, [r3, #12]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f022 021e 	bic.w	r2, r2, #30
 8004ffa:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68da      	ldr	r2, [r3, #12]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f022 0201 	bic.w	r2, r2, #1
 800500a:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2201      	movs	r2, #1
 8005012:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f7ff f834 	bl	8004082 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 800501a:	bf00      	nop
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	0800514f 	.word	0x0800514f

08005028 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005034:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503a:	2b00      	cmp	r3, #0
 800503c:	d043      	beq.n	80050c6 <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800504a:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	2b00      	cmp	r3, #0
 8005056:	d118      	bne.n	800508a <DCMI_DMAXferCplt+0x62>
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d015      	beq.n	800508a <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005070:	00da      	lsls	r2, r3, #3
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	4413      	add	r3, r2
 8005076:	2200      	movs	r2, #0
 8005078:	4619      	mov	r1, r3
 800507a:	f003 fe9f 	bl	8008dbc <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005082:	1e5a      	subs	r2, r3, #1
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	639a      	str	r2, [r3, #56]	; 0x38
 8005088:	e044      	b.n	8005114 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d13c      	bne.n	8005114 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ac:	00da      	lsls	r2, r3, #3
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	4413      	add	r3, r2
 80050b2:	2201      	movs	r2, #1
 80050b4:	4619      	mov	r1, r3
 80050b6:	f003 fe81 	bl	8008dbc <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050be:	1e5a      	subs	r2, r3, #1
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	639a      	str	r2, [r3, #56]	; 0x38
 80050c4:	e026      	b.n	8005114 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d006      	beq.n	80050e4 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80050e0:	60da      	str	r2, [r3, #12]
 80050e2:	e017      	b.n	8005114 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10f      	bne.n	8005114 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f8:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050fe:	0099      	lsls	r1, r3, #2
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	440a      	add	r2, r1
 800510a:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511c:	429a      	cmp	r2, r3
 800511e:	d112      	bne.n	8005146 <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68da      	ldr	r2, [r3, #12]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f042 0201 	orr.w	r2, r2, #1
 800512e:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b02      	cmp	r3, #2
 800513c:	d103      	bne.n	8005146 <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 8005146:	bf00      	nop
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b084      	sub	sp, #16
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515a:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005162:	2b02      	cmp	r3, #2
 8005164:	d009      	beq.n	800517a <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005172:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f7fe ff97 	bl	80040ae <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8005180:	bf00      	nop
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005190:	f7ff fafa 	bl	8004788 <HAL_GetTick>
 8005194:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d101      	bne.n	80051a0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e37f      	b.n	80058a0 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a66      	ldr	r2, [pc, #408]	; (8005340 <HAL_DMA_Init+0x1b8>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d04a      	beq.n	8005240 <HAL_DMA_Init+0xb8>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a65      	ldr	r2, [pc, #404]	; (8005344 <HAL_DMA_Init+0x1bc>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d045      	beq.n	8005240 <HAL_DMA_Init+0xb8>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a63      	ldr	r2, [pc, #396]	; (8005348 <HAL_DMA_Init+0x1c0>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d040      	beq.n	8005240 <HAL_DMA_Init+0xb8>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a62      	ldr	r2, [pc, #392]	; (800534c <HAL_DMA_Init+0x1c4>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d03b      	beq.n	8005240 <HAL_DMA_Init+0xb8>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a60      	ldr	r2, [pc, #384]	; (8005350 <HAL_DMA_Init+0x1c8>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d036      	beq.n	8005240 <HAL_DMA_Init+0xb8>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a5f      	ldr	r2, [pc, #380]	; (8005354 <HAL_DMA_Init+0x1cc>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d031      	beq.n	8005240 <HAL_DMA_Init+0xb8>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a5d      	ldr	r2, [pc, #372]	; (8005358 <HAL_DMA_Init+0x1d0>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d02c      	beq.n	8005240 <HAL_DMA_Init+0xb8>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a5c      	ldr	r2, [pc, #368]	; (800535c <HAL_DMA_Init+0x1d4>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d027      	beq.n	8005240 <HAL_DMA_Init+0xb8>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a5a      	ldr	r2, [pc, #360]	; (8005360 <HAL_DMA_Init+0x1d8>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d022      	beq.n	8005240 <HAL_DMA_Init+0xb8>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a59      	ldr	r2, [pc, #356]	; (8005364 <HAL_DMA_Init+0x1dc>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d01d      	beq.n	8005240 <HAL_DMA_Init+0xb8>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a57      	ldr	r2, [pc, #348]	; (8005368 <HAL_DMA_Init+0x1e0>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d018      	beq.n	8005240 <HAL_DMA_Init+0xb8>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a56      	ldr	r2, [pc, #344]	; (800536c <HAL_DMA_Init+0x1e4>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d013      	beq.n	8005240 <HAL_DMA_Init+0xb8>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a54      	ldr	r2, [pc, #336]	; (8005370 <HAL_DMA_Init+0x1e8>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d00e      	beq.n	8005240 <HAL_DMA_Init+0xb8>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a53      	ldr	r2, [pc, #332]	; (8005374 <HAL_DMA_Init+0x1ec>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d009      	beq.n	8005240 <HAL_DMA_Init+0xb8>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a51      	ldr	r2, [pc, #324]	; (8005378 <HAL_DMA_Init+0x1f0>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d004      	beq.n	8005240 <HAL_DMA_Init+0xb8>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a50      	ldr	r2, [pc, #320]	; (800537c <HAL_DMA_Init+0x1f4>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d101      	bne.n	8005244 <HAL_DMA_Init+0xbc>
 8005240:	2301      	movs	r3, #1
 8005242:	e000      	b.n	8005246 <HAL_DMA_Init+0xbe>
 8005244:	2300      	movs	r3, #0
 8005246:	2b00      	cmp	r3, #0
 8005248:	f000 813c 	beq.w	80054c4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2202      	movs	r2, #2
 8005250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a37      	ldr	r2, [pc, #220]	; (8005340 <HAL_DMA_Init+0x1b8>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d04a      	beq.n	80052fc <HAL_DMA_Init+0x174>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a36      	ldr	r2, [pc, #216]	; (8005344 <HAL_DMA_Init+0x1bc>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d045      	beq.n	80052fc <HAL_DMA_Init+0x174>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a34      	ldr	r2, [pc, #208]	; (8005348 <HAL_DMA_Init+0x1c0>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d040      	beq.n	80052fc <HAL_DMA_Init+0x174>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a33      	ldr	r2, [pc, #204]	; (800534c <HAL_DMA_Init+0x1c4>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d03b      	beq.n	80052fc <HAL_DMA_Init+0x174>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a31      	ldr	r2, [pc, #196]	; (8005350 <HAL_DMA_Init+0x1c8>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d036      	beq.n	80052fc <HAL_DMA_Init+0x174>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a30      	ldr	r2, [pc, #192]	; (8005354 <HAL_DMA_Init+0x1cc>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d031      	beq.n	80052fc <HAL_DMA_Init+0x174>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a2e      	ldr	r2, [pc, #184]	; (8005358 <HAL_DMA_Init+0x1d0>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d02c      	beq.n	80052fc <HAL_DMA_Init+0x174>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a2d      	ldr	r2, [pc, #180]	; (800535c <HAL_DMA_Init+0x1d4>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d027      	beq.n	80052fc <HAL_DMA_Init+0x174>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a2b      	ldr	r2, [pc, #172]	; (8005360 <HAL_DMA_Init+0x1d8>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d022      	beq.n	80052fc <HAL_DMA_Init+0x174>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a2a      	ldr	r2, [pc, #168]	; (8005364 <HAL_DMA_Init+0x1dc>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d01d      	beq.n	80052fc <HAL_DMA_Init+0x174>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a28      	ldr	r2, [pc, #160]	; (8005368 <HAL_DMA_Init+0x1e0>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d018      	beq.n	80052fc <HAL_DMA_Init+0x174>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a27      	ldr	r2, [pc, #156]	; (800536c <HAL_DMA_Init+0x1e4>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d013      	beq.n	80052fc <HAL_DMA_Init+0x174>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a25      	ldr	r2, [pc, #148]	; (8005370 <HAL_DMA_Init+0x1e8>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d00e      	beq.n	80052fc <HAL_DMA_Init+0x174>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a24      	ldr	r2, [pc, #144]	; (8005374 <HAL_DMA_Init+0x1ec>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d009      	beq.n	80052fc <HAL_DMA_Init+0x174>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a22      	ldr	r2, [pc, #136]	; (8005378 <HAL_DMA_Init+0x1f0>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d004      	beq.n	80052fc <HAL_DMA_Init+0x174>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a21      	ldr	r2, [pc, #132]	; (800537c <HAL_DMA_Init+0x1f4>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d108      	bne.n	800530e <HAL_DMA_Init+0x186>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f022 0201 	bic.w	r2, r2, #1
 800530a:	601a      	str	r2, [r3, #0]
 800530c:	e007      	b.n	800531e <HAL_DMA_Init+0x196>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f022 0201 	bic.w	r2, r2, #1
 800531c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800531e:	e02f      	b.n	8005380 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005320:	f7ff fa32 	bl	8004788 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b05      	cmp	r3, #5
 800532c:	d928      	bls.n	8005380 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2220      	movs	r2, #32
 8005332:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2203      	movs	r2, #3
 8005338:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e2af      	b.n	80058a0 <HAL_DMA_Init+0x718>
 8005340:	40020010 	.word	0x40020010
 8005344:	40020028 	.word	0x40020028
 8005348:	40020040 	.word	0x40020040
 800534c:	40020058 	.word	0x40020058
 8005350:	40020070 	.word	0x40020070
 8005354:	40020088 	.word	0x40020088
 8005358:	400200a0 	.word	0x400200a0
 800535c:	400200b8 	.word	0x400200b8
 8005360:	40020410 	.word	0x40020410
 8005364:	40020428 	.word	0x40020428
 8005368:	40020440 	.word	0x40020440
 800536c:	40020458 	.word	0x40020458
 8005370:	40020470 	.word	0x40020470
 8005374:	40020488 	.word	0x40020488
 8005378:	400204a0 	.word	0x400204a0
 800537c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1c8      	bne.n	8005320 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	4b73      	ldr	r3, [pc, #460]	; (8005568 <HAL_DMA_Init+0x3e0>)
 800539a:	4013      	ands	r3, r2
 800539c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80053a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053b2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053be:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a1b      	ldr	r3, [r3, #32]
 80053c4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d0:	2b04      	cmp	r3, #4
 80053d2:	d107      	bne.n	80053e4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053dc:	4313      	orrs	r3, r2
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	2b28      	cmp	r3, #40	; 0x28
 80053ea:	d903      	bls.n	80053f4 <HAL_DMA_Init+0x26c>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	2b2e      	cmp	r3, #46	; 0x2e
 80053f2:	d91f      	bls.n	8005434 <HAL_DMA_Init+0x2ac>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	2b3e      	cmp	r3, #62	; 0x3e
 80053fa:	d903      	bls.n	8005404 <HAL_DMA_Init+0x27c>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	2b42      	cmp	r3, #66	; 0x42
 8005402:	d917      	bls.n	8005434 <HAL_DMA_Init+0x2ac>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	2b46      	cmp	r3, #70	; 0x46
 800540a:	d903      	bls.n	8005414 <HAL_DMA_Init+0x28c>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	2b48      	cmp	r3, #72	; 0x48
 8005412:	d90f      	bls.n	8005434 <HAL_DMA_Init+0x2ac>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	2b4e      	cmp	r3, #78	; 0x4e
 800541a:	d903      	bls.n	8005424 <HAL_DMA_Init+0x29c>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	2b52      	cmp	r3, #82	; 0x52
 8005422:	d907      	bls.n	8005434 <HAL_DMA_Init+0x2ac>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	2b73      	cmp	r3, #115	; 0x73
 800542a:	d905      	bls.n	8005438 <HAL_DMA_Init+0x2b0>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	2b77      	cmp	r3, #119	; 0x77
 8005432:	d801      	bhi.n	8005438 <HAL_DMA_Init+0x2b0>
 8005434:	2301      	movs	r3, #1
 8005436:	e000      	b.n	800543a <HAL_DMA_Init+0x2b2>
 8005438:	2300      	movs	r3, #0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d003      	beq.n	8005446 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005444:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	695b      	ldr	r3, [r3, #20]
 8005454:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f023 0307 	bic.w	r3, r3, #7
 800545c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	4313      	orrs	r3, r2
 8005466:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546c:	2b04      	cmp	r3, #4
 800546e:	d117      	bne.n	80054a0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	4313      	orrs	r3, r2
 8005478:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00e      	beq.n	80054a0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f002 fbd6 	bl	8007c34 <DMA_CheckFifoParam>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d008      	beq.n	80054a0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2240      	movs	r2, #64	; 0x40
 8005492:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e1ff      	b.n	80058a0 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f002 fb11 	bl	8007ad0 <DMA_CalcBaseAndBitshift>
 80054ae:	4603      	mov	r3, r0
 80054b0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b6:	f003 031f 	and.w	r3, r3, #31
 80054ba:	223f      	movs	r2, #63	; 0x3f
 80054bc:	409a      	lsls	r2, r3
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	609a      	str	r2, [r3, #8]
 80054c2:	e0fe      	b.n	80056c2 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a28      	ldr	r2, [pc, #160]	; (800556c <HAL_DMA_Init+0x3e4>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d04a      	beq.n	8005564 <HAL_DMA_Init+0x3dc>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a27      	ldr	r2, [pc, #156]	; (8005570 <HAL_DMA_Init+0x3e8>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d045      	beq.n	8005564 <HAL_DMA_Init+0x3dc>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a25      	ldr	r2, [pc, #148]	; (8005574 <HAL_DMA_Init+0x3ec>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d040      	beq.n	8005564 <HAL_DMA_Init+0x3dc>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a24      	ldr	r2, [pc, #144]	; (8005578 <HAL_DMA_Init+0x3f0>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d03b      	beq.n	8005564 <HAL_DMA_Init+0x3dc>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a22      	ldr	r2, [pc, #136]	; (800557c <HAL_DMA_Init+0x3f4>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d036      	beq.n	8005564 <HAL_DMA_Init+0x3dc>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a21      	ldr	r2, [pc, #132]	; (8005580 <HAL_DMA_Init+0x3f8>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d031      	beq.n	8005564 <HAL_DMA_Init+0x3dc>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a1f      	ldr	r2, [pc, #124]	; (8005584 <HAL_DMA_Init+0x3fc>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d02c      	beq.n	8005564 <HAL_DMA_Init+0x3dc>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a1e      	ldr	r2, [pc, #120]	; (8005588 <HAL_DMA_Init+0x400>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d027      	beq.n	8005564 <HAL_DMA_Init+0x3dc>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a1c      	ldr	r2, [pc, #112]	; (800558c <HAL_DMA_Init+0x404>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d022      	beq.n	8005564 <HAL_DMA_Init+0x3dc>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a1b      	ldr	r2, [pc, #108]	; (8005590 <HAL_DMA_Init+0x408>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d01d      	beq.n	8005564 <HAL_DMA_Init+0x3dc>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a19      	ldr	r2, [pc, #100]	; (8005594 <HAL_DMA_Init+0x40c>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d018      	beq.n	8005564 <HAL_DMA_Init+0x3dc>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a18      	ldr	r2, [pc, #96]	; (8005598 <HAL_DMA_Init+0x410>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d013      	beq.n	8005564 <HAL_DMA_Init+0x3dc>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a16      	ldr	r2, [pc, #88]	; (800559c <HAL_DMA_Init+0x414>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d00e      	beq.n	8005564 <HAL_DMA_Init+0x3dc>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a15      	ldr	r2, [pc, #84]	; (80055a0 <HAL_DMA_Init+0x418>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d009      	beq.n	8005564 <HAL_DMA_Init+0x3dc>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a13      	ldr	r2, [pc, #76]	; (80055a4 <HAL_DMA_Init+0x41c>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d004      	beq.n	8005564 <HAL_DMA_Init+0x3dc>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a12      	ldr	r2, [pc, #72]	; (80055a8 <HAL_DMA_Init+0x420>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d123      	bne.n	80055ac <HAL_DMA_Init+0x424>
 8005564:	2301      	movs	r3, #1
 8005566:	e022      	b.n	80055ae <HAL_DMA_Init+0x426>
 8005568:	fe10803f 	.word	0xfe10803f
 800556c:	48022c08 	.word	0x48022c08
 8005570:	48022c1c 	.word	0x48022c1c
 8005574:	48022c30 	.word	0x48022c30
 8005578:	48022c44 	.word	0x48022c44
 800557c:	48022c58 	.word	0x48022c58
 8005580:	48022c6c 	.word	0x48022c6c
 8005584:	48022c80 	.word	0x48022c80
 8005588:	48022c94 	.word	0x48022c94
 800558c:	58025408 	.word	0x58025408
 8005590:	5802541c 	.word	0x5802541c
 8005594:	58025430 	.word	0x58025430
 8005598:	58025444 	.word	0x58025444
 800559c:	58025458 	.word	0x58025458
 80055a0:	5802546c 	.word	0x5802546c
 80055a4:	58025480 	.word	0x58025480
 80055a8:	58025494 	.word	0x58025494
 80055ac:	2300      	movs	r3, #0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d07e      	beq.n	80056b0 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a80      	ldr	r2, [pc, #512]	; (80057b8 <HAL_DMA_Init+0x630>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d021      	beq.n	8005600 <HAL_DMA_Init+0x478>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a7e      	ldr	r2, [pc, #504]	; (80057bc <HAL_DMA_Init+0x634>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d01c      	beq.n	8005600 <HAL_DMA_Init+0x478>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a7d      	ldr	r2, [pc, #500]	; (80057c0 <HAL_DMA_Init+0x638>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d017      	beq.n	8005600 <HAL_DMA_Init+0x478>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a7b      	ldr	r2, [pc, #492]	; (80057c4 <HAL_DMA_Init+0x63c>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d012      	beq.n	8005600 <HAL_DMA_Init+0x478>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a7a      	ldr	r2, [pc, #488]	; (80057c8 <HAL_DMA_Init+0x640>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d00d      	beq.n	8005600 <HAL_DMA_Init+0x478>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a78      	ldr	r2, [pc, #480]	; (80057cc <HAL_DMA_Init+0x644>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d008      	beq.n	8005600 <HAL_DMA_Init+0x478>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a77      	ldr	r2, [pc, #476]	; (80057d0 <HAL_DMA_Init+0x648>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d003      	beq.n	8005600 <HAL_DMA_Init+0x478>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a75      	ldr	r2, [pc, #468]	; (80057d4 <HAL_DMA_Init+0x64c>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2202      	movs	r2, #2
 8005606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	4b6e      	ldr	r3, [pc, #440]	; (80057d8 <HAL_DMA_Init+0x650>)
 800561e:	4013      	ands	r3, r2
 8005620:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	2b40      	cmp	r3, #64	; 0x40
 8005628:	d008      	beq.n	800563c <HAL_DMA_Init+0x4b4>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	2b80      	cmp	r3, #128	; 0x80
 8005630:	d102      	bne.n	8005638 <HAL_DMA_Init+0x4b0>
 8005632:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005636:	e002      	b.n	800563e <HAL_DMA_Init+0x4b6>
 8005638:	2300      	movs	r3, #0
 800563a:	e000      	b.n	800563e <HAL_DMA_Init+0x4b6>
 800563c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	68d2      	ldr	r2, [r2, #12]
 8005642:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005644:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800564c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005654:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800565c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005664:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800566c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	4313      	orrs	r3, r2
 8005672:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	461a      	mov	r2, r3
 8005682:	4b56      	ldr	r3, [pc, #344]	; (80057dc <HAL_DMA_Init+0x654>)
 8005684:	4413      	add	r3, r2
 8005686:	4a56      	ldr	r2, [pc, #344]	; (80057e0 <HAL_DMA_Init+0x658>)
 8005688:	fba2 2303 	umull	r2, r3, r2, r3
 800568c:	091b      	lsrs	r3, r3, #4
 800568e:	009a      	lsls	r2, r3, #2
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f002 fa1b 	bl	8007ad0 <DMA_CalcBaseAndBitshift>
 800569a:	4603      	mov	r3, r0
 800569c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056a2:	f003 031f 	and.w	r3, r3, #31
 80056a6:	2201      	movs	r2, #1
 80056a8:	409a      	lsls	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	605a      	str	r2, [r3, #4]
 80056ae:	e008      	b.n	80056c2 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2240      	movs	r2, #64	; 0x40
 80056b4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2203      	movs	r2, #3
 80056ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e0ee      	b.n	80058a0 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a47      	ldr	r2, [pc, #284]	; (80057e4 <HAL_DMA_Init+0x65c>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d072      	beq.n	80057b2 <HAL_DMA_Init+0x62a>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a45      	ldr	r2, [pc, #276]	; (80057e8 <HAL_DMA_Init+0x660>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d06d      	beq.n	80057b2 <HAL_DMA_Init+0x62a>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a44      	ldr	r2, [pc, #272]	; (80057ec <HAL_DMA_Init+0x664>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d068      	beq.n	80057b2 <HAL_DMA_Init+0x62a>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a42      	ldr	r2, [pc, #264]	; (80057f0 <HAL_DMA_Init+0x668>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d063      	beq.n	80057b2 <HAL_DMA_Init+0x62a>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a41      	ldr	r2, [pc, #260]	; (80057f4 <HAL_DMA_Init+0x66c>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d05e      	beq.n	80057b2 <HAL_DMA_Init+0x62a>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a3f      	ldr	r2, [pc, #252]	; (80057f8 <HAL_DMA_Init+0x670>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d059      	beq.n	80057b2 <HAL_DMA_Init+0x62a>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a3e      	ldr	r2, [pc, #248]	; (80057fc <HAL_DMA_Init+0x674>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d054      	beq.n	80057b2 <HAL_DMA_Init+0x62a>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a3c      	ldr	r2, [pc, #240]	; (8005800 <HAL_DMA_Init+0x678>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d04f      	beq.n	80057b2 <HAL_DMA_Init+0x62a>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a3b      	ldr	r2, [pc, #236]	; (8005804 <HAL_DMA_Init+0x67c>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d04a      	beq.n	80057b2 <HAL_DMA_Init+0x62a>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a39      	ldr	r2, [pc, #228]	; (8005808 <HAL_DMA_Init+0x680>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d045      	beq.n	80057b2 <HAL_DMA_Init+0x62a>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a38      	ldr	r2, [pc, #224]	; (800580c <HAL_DMA_Init+0x684>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d040      	beq.n	80057b2 <HAL_DMA_Init+0x62a>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a36      	ldr	r2, [pc, #216]	; (8005810 <HAL_DMA_Init+0x688>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d03b      	beq.n	80057b2 <HAL_DMA_Init+0x62a>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a35      	ldr	r2, [pc, #212]	; (8005814 <HAL_DMA_Init+0x68c>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d036      	beq.n	80057b2 <HAL_DMA_Init+0x62a>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a33      	ldr	r2, [pc, #204]	; (8005818 <HAL_DMA_Init+0x690>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d031      	beq.n	80057b2 <HAL_DMA_Init+0x62a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a32      	ldr	r2, [pc, #200]	; (800581c <HAL_DMA_Init+0x694>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d02c      	beq.n	80057b2 <HAL_DMA_Init+0x62a>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a30      	ldr	r2, [pc, #192]	; (8005820 <HAL_DMA_Init+0x698>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d027      	beq.n	80057b2 <HAL_DMA_Init+0x62a>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a14      	ldr	r2, [pc, #80]	; (80057b8 <HAL_DMA_Init+0x630>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d022      	beq.n	80057b2 <HAL_DMA_Init+0x62a>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a12      	ldr	r2, [pc, #72]	; (80057bc <HAL_DMA_Init+0x634>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d01d      	beq.n	80057b2 <HAL_DMA_Init+0x62a>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a11      	ldr	r2, [pc, #68]	; (80057c0 <HAL_DMA_Init+0x638>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d018      	beq.n	80057b2 <HAL_DMA_Init+0x62a>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a0f      	ldr	r2, [pc, #60]	; (80057c4 <HAL_DMA_Init+0x63c>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d013      	beq.n	80057b2 <HAL_DMA_Init+0x62a>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a0e      	ldr	r2, [pc, #56]	; (80057c8 <HAL_DMA_Init+0x640>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d00e      	beq.n	80057b2 <HAL_DMA_Init+0x62a>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a0c      	ldr	r2, [pc, #48]	; (80057cc <HAL_DMA_Init+0x644>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d009      	beq.n	80057b2 <HAL_DMA_Init+0x62a>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a0b      	ldr	r2, [pc, #44]	; (80057d0 <HAL_DMA_Init+0x648>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d004      	beq.n	80057b2 <HAL_DMA_Init+0x62a>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a09      	ldr	r2, [pc, #36]	; (80057d4 <HAL_DMA_Init+0x64c>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d138      	bne.n	8005824 <HAL_DMA_Init+0x69c>
 80057b2:	2301      	movs	r3, #1
 80057b4:	e037      	b.n	8005826 <HAL_DMA_Init+0x69e>
 80057b6:	bf00      	nop
 80057b8:	58025408 	.word	0x58025408
 80057bc:	5802541c 	.word	0x5802541c
 80057c0:	58025430 	.word	0x58025430
 80057c4:	58025444 	.word	0x58025444
 80057c8:	58025458 	.word	0x58025458
 80057cc:	5802546c 	.word	0x5802546c
 80057d0:	58025480 	.word	0x58025480
 80057d4:	58025494 	.word	0x58025494
 80057d8:	fffe000f 	.word	0xfffe000f
 80057dc:	a7fdabf8 	.word	0xa7fdabf8
 80057e0:	cccccccd 	.word	0xcccccccd
 80057e4:	40020010 	.word	0x40020010
 80057e8:	40020028 	.word	0x40020028
 80057ec:	40020040 	.word	0x40020040
 80057f0:	40020058 	.word	0x40020058
 80057f4:	40020070 	.word	0x40020070
 80057f8:	40020088 	.word	0x40020088
 80057fc:	400200a0 	.word	0x400200a0
 8005800:	400200b8 	.word	0x400200b8
 8005804:	40020410 	.word	0x40020410
 8005808:	40020428 	.word	0x40020428
 800580c:	40020440 	.word	0x40020440
 8005810:	40020458 	.word	0x40020458
 8005814:	40020470 	.word	0x40020470
 8005818:	40020488 	.word	0x40020488
 800581c:	400204a0 	.word	0x400204a0
 8005820:	400204b8 	.word	0x400204b8
 8005824:	2300      	movs	r3, #0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d032      	beq.n	8005890 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f002 fa7e 	bl	8007d2c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	2b80      	cmp	r3, #128	; 0x80
 8005836:	d102      	bne.n	800583e <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685a      	ldr	r2, [r3, #4]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005846:	b2d2      	uxtb	r2, r2
 8005848:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005852:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d010      	beq.n	800587e <HAL_DMA_Init+0x6f6>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	2b08      	cmp	r3, #8
 8005862:	d80c      	bhi.n	800587e <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f002 fafb 	bl	8007e60 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800586e:	2200      	movs	r2, #0
 8005870:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800587a:	605a      	str	r2, [r3, #4]
 800587c:	e008      	b.n	8005890 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3718      	adds	r7, #24
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b086      	sub	sp, #24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
 80058b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058b6:	2300      	movs	r3, #0
 80058b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d101      	bne.n	80058c4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e226      	b.n	8005d12 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d101      	bne.n	80058d2 <HAL_DMA_Start_IT+0x2a>
 80058ce:	2302      	movs	r3, #2
 80058d0:	e21f      	b.n	8005d12 <HAL_DMA_Start_IT+0x46a>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	f040 820a 	bne.w	8005cfc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2202      	movs	r2, #2
 80058ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a68      	ldr	r2, [pc, #416]	; (8005a9c <HAL_DMA_Start_IT+0x1f4>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d04a      	beq.n	8005996 <HAL_DMA_Start_IT+0xee>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a66      	ldr	r2, [pc, #408]	; (8005aa0 <HAL_DMA_Start_IT+0x1f8>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d045      	beq.n	8005996 <HAL_DMA_Start_IT+0xee>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a65      	ldr	r2, [pc, #404]	; (8005aa4 <HAL_DMA_Start_IT+0x1fc>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d040      	beq.n	8005996 <HAL_DMA_Start_IT+0xee>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a63      	ldr	r2, [pc, #396]	; (8005aa8 <HAL_DMA_Start_IT+0x200>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d03b      	beq.n	8005996 <HAL_DMA_Start_IT+0xee>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a62      	ldr	r2, [pc, #392]	; (8005aac <HAL_DMA_Start_IT+0x204>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d036      	beq.n	8005996 <HAL_DMA_Start_IT+0xee>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a60      	ldr	r2, [pc, #384]	; (8005ab0 <HAL_DMA_Start_IT+0x208>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d031      	beq.n	8005996 <HAL_DMA_Start_IT+0xee>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a5f      	ldr	r2, [pc, #380]	; (8005ab4 <HAL_DMA_Start_IT+0x20c>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d02c      	beq.n	8005996 <HAL_DMA_Start_IT+0xee>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a5d      	ldr	r2, [pc, #372]	; (8005ab8 <HAL_DMA_Start_IT+0x210>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d027      	beq.n	8005996 <HAL_DMA_Start_IT+0xee>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a5c      	ldr	r2, [pc, #368]	; (8005abc <HAL_DMA_Start_IT+0x214>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d022      	beq.n	8005996 <HAL_DMA_Start_IT+0xee>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a5a      	ldr	r2, [pc, #360]	; (8005ac0 <HAL_DMA_Start_IT+0x218>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d01d      	beq.n	8005996 <HAL_DMA_Start_IT+0xee>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a59      	ldr	r2, [pc, #356]	; (8005ac4 <HAL_DMA_Start_IT+0x21c>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d018      	beq.n	8005996 <HAL_DMA_Start_IT+0xee>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a57      	ldr	r2, [pc, #348]	; (8005ac8 <HAL_DMA_Start_IT+0x220>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d013      	beq.n	8005996 <HAL_DMA_Start_IT+0xee>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a56      	ldr	r2, [pc, #344]	; (8005acc <HAL_DMA_Start_IT+0x224>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d00e      	beq.n	8005996 <HAL_DMA_Start_IT+0xee>
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a54      	ldr	r2, [pc, #336]	; (8005ad0 <HAL_DMA_Start_IT+0x228>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d009      	beq.n	8005996 <HAL_DMA_Start_IT+0xee>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a53      	ldr	r2, [pc, #332]	; (8005ad4 <HAL_DMA_Start_IT+0x22c>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d004      	beq.n	8005996 <HAL_DMA_Start_IT+0xee>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a51      	ldr	r2, [pc, #324]	; (8005ad8 <HAL_DMA_Start_IT+0x230>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d108      	bne.n	80059a8 <HAL_DMA_Start_IT+0x100>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f022 0201 	bic.w	r2, r2, #1
 80059a4:	601a      	str	r2, [r3, #0]
 80059a6:	e007      	b.n	80059b8 <HAL_DMA_Start_IT+0x110>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 0201 	bic.w	r2, r2, #1
 80059b6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	68b9      	ldr	r1, [r7, #8]
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f001 fea2 	bl	8007708 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a34      	ldr	r2, [pc, #208]	; (8005a9c <HAL_DMA_Start_IT+0x1f4>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d04a      	beq.n	8005a64 <HAL_DMA_Start_IT+0x1bc>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a33      	ldr	r2, [pc, #204]	; (8005aa0 <HAL_DMA_Start_IT+0x1f8>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d045      	beq.n	8005a64 <HAL_DMA_Start_IT+0x1bc>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a31      	ldr	r2, [pc, #196]	; (8005aa4 <HAL_DMA_Start_IT+0x1fc>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d040      	beq.n	8005a64 <HAL_DMA_Start_IT+0x1bc>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a30      	ldr	r2, [pc, #192]	; (8005aa8 <HAL_DMA_Start_IT+0x200>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d03b      	beq.n	8005a64 <HAL_DMA_Start_IT+0x1bc>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a2e      	ldr	r2, [pc, #184]	; (8005aac <HAL_DMA_Start_IT+0x204>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d036      	beq.n	8005a64 <HAL_DMA_Start_IT+0x1bc>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a2d      	ldr	r2, [pc, #180]	; (8005ab0 <HAL_DMA_Start_IT+0x208>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d031      	beq.n	8005a64 <HAL_DMA_Start_IT+0x1bc>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a2b      	ldr	r2, [pc, #172]	; (8005ab4 <HAL_DMA_Start_IT+0x20c>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d02c      	beq.n	8005a64 <HAL_DMA_Start_IT+0x1bc>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a2a      	ldr	r2, [pc, #168]	; (8005ab8 <HAL_DMA_Start_IT+0x210>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d027      	beq.n	8005a64 <HAL_DMA_Start_IT+0x1bc>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a28      	ldr	r2, [pc, #160]	; (8005abc <HAL_DMA_Start_IT+0x214>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d022      	beq.n	8005a64 <HAL_DMA_Start_IT+0x1bc>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a27      	ldr	r2, [pc, #156]	; (8005ac0 <HAL_DMA_Start_IT+0x218>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d01d      	beq.n	8005a64 <HAL_DMA_Start_IT+0x1bc>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a25      	ldr	r2, [pc, #148]	; (8005ac4 <HAL_DMA_Start_IT+0x21c>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d018      	beq.n	8005a64 <HAL_DMA_Start_IT+0x1bc>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a24      	ldr	r2, [pc, #144]	; (8005ac8 <HAL_DMA_Start_IT+0x220>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d013      	beq.n	8005a64 <HAL_DMA_Start_IT+0x1bc>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a22      	ldr	r2, [pc, #136]	; (8005acc <HAL_DMA_Start_IT+0x224>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d00e      	beq.n	8005a64 <HAL_DMA_Start_IT+0x1bc>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a21      	ldr	r2, [pc, #132]	; (8005ad0 <HAL_DMA_Start_IT+0x228>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d009      	beq.n	8005a64 <HAL_DMA_Start_IT+0x1bc>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a1f      	ldr	r2, [pc, #124]	; (8005ad4 <HAL_DMA_Start_IT+0x22c>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d004      	beq.n	8005a64 <HAL_DMA_Start_IT+0x1bc>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a1e      	ldr	r2, [pc, #120]	; (8005ad8 <HAL_DMA_Start_IT+0x230>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d101      	bne.n	8005a68 <HAL_DMA_Start_IT+0x1c0>
 8005a64:	2301      	movs	r3, #1
 8005a66:	e000      	b.n	8005a6a <HAL_DMA_Start_IT+0x1c2>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d036      	beq.n	8005adc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f023 021e 	bic.w	r2, r3, #30
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f042 0216 	orr.w	r2, r2, #22
 8005a80:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d03e      	beq.n	8005b08 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f042 0208 	orr.w	r2, r2, #8
 8005a98:	601a      	str	r2, [r3, #0]
 8005a9a:	e035      	b.n	8005b08 <HAL_DMA_Start_IT+0x260>
 8005a9c:	40020010 	.word	0x40020010
 8005aa0:	40020028 	.word	0x40020028
 8005aa4:	40020040 	.word	0x40020040
 8005aa8:	40020058 	.word	0x40020058
 8005aac:	40020070 	.word	0x40020070
 8005ab0:	40020088 	.word	0x40020088
 8005ab4:	400200a0 	.word	0x400200a0
 8005ab8:	400200b8 	.word	0x400200b8
 8005abc:	40020410 	.word	0x40020410
 8005ac0:	40020428 	.word	0x40020428
 8005ac4:	40020440 	.word	0x40020440
 8005ac8:	40020458 	.word	0x40020458
 8005acc:	40020470 	.word	0x40020470
 8005ad0:	40020488 	.word	0x40020488
 8005ad4:	400204a0 	.word	0x400204a0
 8005ad8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f023 020e 	bic.w	r2, r3, #14
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f042 020a 	orr.w	r2, r2, #10
 8005aee:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d007      	beq.n	8005b08 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f042 0204 	orr.w	r2, r2, #4
 8005b06:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a83      	ldr	r2, [pc, #524]	; (8005d1c <HAL_DMA_Start_IT+0x474>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d072      	beq.n	8005bf8 <HAL_DMA_Start_IT+0x350>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a82      	ldr	r2, [pc, #520]	; (8005d20 <HAL_DMA_Start_IT+0x478>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d06d      	beq.n	8005bf8 <HAL_DMA_Start_IT+0x350>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a80      	ldr	r2, [pc, #512]	; (8005d24 <HAL_DMA_Start_IT+0x47c>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d068      	beq.n	8005bf8 <HAL_DMA_Start_IT+0x350>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a7f      	ldr	r2, [pc, #508]	; (8005d28 <HAL_DMA_Start_IT+0x480>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d063      	beq.n	8005bf8 <HAL_DMA_Start_IT+0x350>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a7d      	ldr	r2, [pc, #500]	; (8005d2c <HAL_DMA_Start_IT+0x484>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d05e      	beq.n	8005bf8 <HAL_DMA_Start_IT+0x350>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a7c      	ldr	r2, [pc, #496]	; (8005d30 <HAL_DMA_Start_IT+0x488>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d059      	beq.n	8005bf8 <HAL_DMA_Start_IT+0x350>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a7a      	ldr	r2, [pc, #488]	; (8005d34 <HAL_DMA_Start_IT+0x48c>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d054      	beq.n	8005bf8 <HAL_DMA_Start_IT+0x350>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a79      	ldr	r2, [pc, #484]	; (8005d38 <HAL_DMA_Start_IT+0x490>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d04f      	beq.n	8005bf8 <HAL_DMA_Start_IT+0x350>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a77      	ldr	r2, [pc, #476]	; (8005d3c <HAL_DMA_Start_IT+0x494>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d04a      	beq.n	8005bf8 <HAL_DMA_Start_IT+0x350>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a76      	ldr	r2, [pc, #472]	; (8005d40 <HAL_DMA_Start_IT+0x498>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d045      	beq.n	8005bf8 <HAL_DMA_Start_IT+0x350>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a74      	ldr	r2, [pc, #464]	; (8005d44 <HAL_DMA_Start_IT+0x49c>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d040      	beq.n	8005bf8 <HAL_DMA_Start_IT+0x350>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a73      	ldr	r2, [pc, #460]	; (8005d48 <HAL_DMA_Start_IT+0x4a0>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d03b      	beq.n	8005bf8 <HAL_DMA_Start_IT+0x350>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a71      	ldr	r2, [pc, #452]	; (8005d4c <HAL_DMA_Start_IT+0x4a4>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d036      	beq.n	8005bf8 <HAL_DMA_Start_IT+0x350>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a70      	ldr	r2, [pc, #448]	; (8005d50 <HAL_DMA_Start_IT+0x4a8>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d031      	beq.n	8005bf8 <HAL_DMA_Start_IT+0x350>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a6e      	ldr	r2, [pc, #440]	; (8005d54 <HAL_DMA_Start_IT+0x4ac>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d02c      	beq.n	8005bf8 <HAL_DMA_Start_IT+0x350>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a6d      	ldr	r2, [pc, #436]	; (8005d58 <HAL_DMA_Start_IT+0x4b0>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d027      	beq.n	8005bf8 <HAL_DMA_Start_IT+0x350>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a6b      	ldr	r2, [pc, #428]	; (8005d5c <HAL_DMA_Start_IT+0x4b4>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d022      	beq.n	8005bf8 <HAL_DMA_Start_IT+0x350>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a6a      	ldr	r2, [pc, #424]	; (8005d60 <HAL_DMA_Start_IT+0x4b8>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d01d      	beq.n	8005bf8 <HAL_DMA_Start_IT+0x350>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a68      	ldr	r2, [pc, #416]	; (8005d64 <HAL_DMA_Start_IT+0x4bc>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d018      	beq.n	8005bf8 <HAL_DMA_Start_IT+0x350>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a67      	ldr	r2, [pc, #412]	; (8005d68 <HAL_DMA_Start_IT+0x4c0>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d013      	beq.n	8005bf8 <HAL_DMA_Start_IT+0x350>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a65      	ldr	r2, [pc, #404]	; (8005d6c <HAL_DMA_Start_IT+0x4c4>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d00e      	beq.n	8005bf8 <HAL_DMA_Start_IT+0x350>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a64      	ldr	r2, [pc, #400]	; (8005d70 <HAL_DMA_Start_IT+0x4c8>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d009      	beq.n	8005bf8 <HAL_DMA_Start_IT+0x350>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a62      	ldr	r2, [pc, #392]	; (8005d74 <HAL_DMA_Start_IT+0x4cc>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d004      	beq.n	8005bf8 <HAL_DMA_Start_IT+0x350>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a61      	ldr	r2, [pc, #388]	; (8005d78 <HAL_DMA_Start_IT+0x4d0>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d101      	bne.n	8005bfc <HAL_DMA_Start_IT+0x354>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e000      	b.n	8005bfe <HAL_DMA_Start_IT+0x356>
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d01a      	beq.n	8005c38 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d007      	beq.n	8005c20 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c1e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d007      	beq.n	8005c38 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c36:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a37      	ldr	r2, [pc, #220]	; (8005d1c <HAL_DMA_Start_IT+0x474>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d04a      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x430>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a36      	ldr	r2, [pc, #216]	; (8005d20 <HAL_DMA_Start_IT+0x478>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d045      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x430>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a34      	ldr	r2, [pc, #208]	; (8005d24 <HAL_DMA_Start_IT+0x47c>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d040      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x430>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a33      	ldr	r2, [pc, #204]	; (8005d28 <HAL_DMA_Start_IT+0x480>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d03b      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x430>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a31      	ldr	r2, [pc, #196]	; (8005d2c <HAL_DMA_Start_IT+0x484>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d036      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x430>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a30      	ldr	r2, [pc, #192]	; (8005d30 <HAL_DMA_Start_IT+0x488>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d031      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x430>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a2e      	ldr	r2, [pc, #184]	; (8005d34 <HAL_DMA_Start_IT+0x48c>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d02c      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x430>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a2d      	ldr	r2, [pc, #180]	; (8005d38 <HAL_DMA_Start_IT+0x490>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d027      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x430>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a2b      	ldr	r2, [pc, #172]	; (8005d3c <HAL_DMA_Start_IT+0x494>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d022      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x430>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a2a      	ldr	r2, [pc, #168]	; (8005d40 <HAL_DMA_Start_IT+0x498>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d01d      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x430>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a28      	ldr	r2, [pc, #160]	; (8005d44 <HAL_DMA_Start_IT+0x49c>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d018      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x430>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a27      	ldr	r2, [pc, #156]	; (8005d48 <HAL_DMA_Start_IT+0x4a0>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d013      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x430>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a25      	ldr	r2, [pc, #148]	; (8005d4c <HAL_DMA_Start_IT+0x4a4>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d00e      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x430>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a24      	ldr	r2, [pc, #144]	; (8005d50 <HAL_DMA_Start_IT+0x4a8>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d009      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x430>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a22      	ldr	r2, [pc, #136]	; (8005d54 <HAL_DMA_Start_IT+0x4ac>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d004      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x430>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a21      	ldr	r2, [pc, #132]	; (8005d58 <HAL_DMA_Start_IT+0x4b0>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d108      	bne.n	8005cea <HAL_DMA_Start_IT+0x442>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f042 0201 	orr.w	r2, r2, #1
 8005ce6:	601a      	str	r2, [r3, #0]
 8005ce8:	e012      	b.n	8005d10 <HAL_DMA_Start_IT+0x468>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f042 0201 	orr.w	r2, r2, #1
 8005cf8:	601a      	str	r2, [r3, #0]
 8005cfa:	e009      	b.n	8005d10 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d02:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3718      	adds	r7, #24
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	40020010 	.word	0x40020010
 8005d20:	40020028 	.word	0x40020028
 8005d24:	40020040 	.word	0x40020040
 8005d28:	40020058 	.word	0x40020058
 8005d2c:	40020070 	.word	0x40020070
 8005d30:	40020088 	.word	0x40020088
 8005d34:	400200a0 	.word	0x400200a0
 8005d38:	400200b8 	.word	0x400200b8
 8005d3c:	40020410 	.word	0x40020410
 8005d40:	40020428 	.word	0x40020428
 8005d44:	40020440 	.word	0x40020440
 8005d48:	40020458 	.word	0x40020458
 8005d4c:	40020470 	.word	0x40020470
 8005d50:	40020488 	.word	0x40020488
 8005d54:	400204a0 	.word	0x400204a0
 8005d58:	400204b8 	.word	0x400204b8
 8005d5c:	58025408 	.word	0x58025408
 8005d60:	5802541c 	.word	0x5802541c
 8005d64:	58025430 	.word	0x58025430
 8005d68:	58025444 	.word	0x58025444
 8005d6c:	58025458 	.word	0x58025458
 8005d70:	5802546c 	.word	0x5802546c
 8005d74:	58025480 	.word	0x58025480
 8005d78:	58025494 	.word	0x58025494

08005d7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005d84:	f7fe fd00 	bl	8004788 <HAL_GetTick>
 8005d88:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d101      	bne.n	8005d94 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e2dc      	b.n	800634e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d008      	beq.n	8005db2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2280      	movs	r2, #128	; 0x80
 8005da4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e2cd      	b.n	800634e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a76      	ldr	r2, [pc, #472]	; (8005f90 <HAL_DMA_Abort+0x214>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d04a      	beq.n	8005e52 <HAL_DMA_Abort+0xd6>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a74      	ldr	r2, [pc, #464]	; (8005f94 <HAL_DMA_Abort+0x218>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d045      	beq.n	8005e52 <HAL_DMA_Abort+0xd6>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a73      	ldr	r2, [pc, #460]	; (8005f98 <HAL_DMA_Abort+0x21c>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d040      	beq.n	8005e52 <HAL_DMA_Abort+0xd6>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a71      	ldr	r2, [pc, #452]	; (8005f9c <HAL_DMA_Abort+0x220>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d03b      	beq.n	8005e52 <HAL_DMA_Abort+0xd6>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a70      	ldr	r2, [pc, #448]	; (8005fa0 <HAL_DMA_Abort+0x224>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d036      	beq.n	8005e52 <HAL_DMA_Abort+0xd6>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a6e      	ldr	r2, [pc, #440]	; (8005fa4 <HAL_DMA_Abort+0x228>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d031      	beq.n	8005e52 <HAL_DMA_Abort+0xd6>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a6d      	ldr	r2, [pc, #436]	; (8005fa8 <HAL_DMA_Abort+0x22c>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d02c      	beq.n	8005e52 <HAL_DMA_Abort+0xd6>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a6b      	ldr	r2, [pc, #428]	; (8005fac <HAL_DMA_Abort+0x230>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d027      	beq.n	8005e52 <HAL_DMA_Abort+0xd6>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a6a      	ldr	r2, [pc, #424]	; (8005fb0 <HAL_DMA_Abort+0x234>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d022      	beq.n	8005e52 <HAL_DMA_Abort+0xd6>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a68      	ldr	r2, [pc, #416]	; (8005fb4 <HAL_DMA_Abort+0x238>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d01d      	beq.n	8005e52 <HAL_DMA_Abort+0xd6>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a67      	ldr	r2, [pc, #412]	; (8005fb8 <HAL_DMA_Abort+0x23c>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d018      	beq.n	8005e52 <HAL_DMA_Abort+0xd6>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a65      	ldr	r2, [pc, #404]	; (8005fbc <HAL_DMA_Abort+0x240>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d013      	beq.n	8005e52 <HAL_DMA_Abort+0xd6>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a64      	ldr	r2, [pc, #400]	; (8005fc0 <HAL_DMA_Abort+0x244>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d00e      	beq.n	8005e52 <HAL_DMA_Abort+0xd6>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a62      	ldr	r2, [pc, #392]	; (8005fc4 <HAL_DMA_Abort+0x248>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d009      	beq.n	8005e52 <HAL_DMA_Abort+0xd6>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a61      	ldr	r2, [pc, #388]	; (8005fc8 <HAL_DMA_Abort+0x24c>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d004      	beq.n	8005e52 <HAL_DMA_Abort+0xd6>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a5f      	ldr	r2, [pc, #380]	; (8005fcc <HAL_DMA_Abort+0x250>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d101      	bne.n	8005e56 <HAL_DMA_Abort+0xda>
 8005e52:	2301      	movs	r3, #1
 8005e54:	e000      	b.n	8005e58 <HAL_DMA_Abort+0xdc>
 8005e56:	2300      	movs	r3, #0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d013      	beq.n	8005e84 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f022 021e 	bic.w	r2, r2, #30
 8005e6a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	695a      	ldr	r2, [r3, #20]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e7a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	617b      	str	r3, [r7, #20]
 8005e82:	e00a      	b.n	8005e9a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f022 020e 	bic.w	r2, r2, #14
 8005e92:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a3c      	ldr	r2, [pc, #240]	; (8005f90 <HAL_DMA_Abort+0x214>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d072      	beq.n	8005f8a <HAL_DMA_Abort+0x20e>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a3a      	ldr	r2, [pc, #232]	; (8005f94 <HAL_DMA_Abort+0x218>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d06d      	beq.n	8005f8a <HAL_DMA_Abort+0x20e>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a39      	ldr	r2, [pc, #228]	; (8005f98 <HAL_DMA_Abort+0x21c>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d068      	beq.n	8005f8a <HAL_DMA_Abort+0x20e>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a37      	ldr	r2, [pc, #220]	; (8005f9c <HAL_DMA_Abort+0x220>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d063      	beq.n	8005f8a <HAL_DMA_Abort+0x20e>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a36      	ldr	r2, [pc, #216]	; (8005fa0 <HAL_DMA_Abort+0x224>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d05e      	beq.n	8005f8a <HAL_DMA_Abort+0x20e>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a34      	ldr	r2, [pc, #208]	; (8005fa4 <HAL_DMA_Abort+0x228>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d059      	beq.n	8005f8a <HAL_DMA_Abort+0x20e>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a33      	ldr	r2, [pc, #204]	; (8005fa8 <HAL_DMA_Abort+0x22c>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d054      	beq.n	8005f8a <HAL_DMA_Abort+0x20e>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a31      	ldr	r2, [pc, #196]	; (8005fac <HAL_DMA_Abort+0x230>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d04f      	beq.n	8005f8a <HAL_DMA_Abort+0x20e>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a30      	ldr	r2, [pc, #192]	; (8005fb0 <HAL_DMA_Abort+0x234>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d04a      	beq.n	8005f8a <HAL_DMA_Abort+0x20e>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a2e      	ldr	r2, [pc, #184]	; (8005fb4 <HAL_DMA_Abort+0x238>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d045      	beq.n	8005f8a <HAL_DMA_Abort+0x20e>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a2d      	ldr	r2, [pc, #180]	; (8005fb8 <HAL_DMA_Abort+0x23c>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d040      	beq.n	8005f8a <HAL_DMA_Abort+0x20e>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a2b      	ldr	r2, [pc, #172]	; (8005fbc <HAL_DMA_Abort+0x240>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d03b      	beq.n	8005f8a <HAL_DMA_Abort+0x20e>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a2a      	ldr	r2, [pc, #168]	; (8005fc0 <HAL_DMA_Abort+0x244>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d036      	beq.n	8005f8a <HAL_DMA_Abort+0x20e>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a28      	ldr	r2, [pc, #160]	; (8005fc4 <HAL_DMA_Abort+0x248>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d031      	beq.n	8005f8a <HAL_DMA_Abort+0x20e>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a27      	ldr	r2, [pc, #156]	; (8005fc8 <HAL_DMA_Abort+0x24c>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d02c      	beq.n	8005f8a <HAL_DMA_Abort+0x20e>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a25      	ldr	r2, [pc, #148]	; (8005fcc <HAL_DMA_Abort+0x250>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d027      	beq.n	8005f8a <HAL_DMA_Abort+0x20e>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a24      	ldr	r2, [pc, #144]	; (8005fd0 <HAL_DMA_Abort+0x254>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d022      	beq.n	8005f8a <HAL_DMA_Abort+0x20e>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a22      	ldr	r2, [pc, #136]	; (8005fd4 <HAL_DMA_Abort+0x258>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d01d      	beq.n	8005f8a <HAL_DMA_Abort+0x20e>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a21      	ldr	r2, [pc, #132]	; (8005fd8 <HAL_DMA_Abort+0x25c>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d018      	beq.n	8005f8a <HAL_DMA_Abort+0x20e>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a1f      	ldr	r2, [pc, #124]	; (8005fdc <HAL_DMA_Abort+0x260>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d013      	beq.n	8005f8a <HAL_DMA_Abort+0x20e>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a1e      	ldr	r2, [pc, #120]	; (8005fe0 <HAL_DMA_Abort+0x264>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d00e      	beq.n	8005f8a <HAL_DMA_Abort+0x20e>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a1c      	ldr	r2, [pc, #112]	; (8005fe4 <HAL_DMA_Abort+0x268>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d009      	beq.n	8005f8a <HAL_DMA_Abort+0x20e>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a1b      	ldr	r2, [pc, #108]	; (8005fe8 <HAL_DMA_Abort+0x26c>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d004      	beq.n	8005f8a <HAL_DMA_Abort+0x20e>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a19      	ldr	r2, [pc, #100]	; (8005fec <HAL_DMA_Abort+0x270>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d132      	bne.n	8005ff0 <HAL_DMA_Abort+0x274>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e031      	b.n	8005ff2 <HAL_DMA_Abort+0x276>
 8005f8e:	bf00      	nop
 8005f90:	40020010 	.word	0x40020010
 8005f94:	40020028 	.word	0x40020028
 8005f98:	40020040 	.word	0x40020040
 8005f9c:	40020058 	.word	0x40020058
 8005fa0:	40020070 	.word	0x40020070
 8005fa4:	40020088 	.word	0x40020088
 8005fa8:	400200a0 	.word	0x400200a0
 8005fac:	400200b8 	.word	0x400200b8
 8005fb0:	40020410 	.word	0x40020410
 8005fb4:	40020428 	.word	0x40020428
 8005fb8:	40020440 	.word	0x40020440
 8005fbc:	40020458 	.word	0x40020458
 8005fc0:	40020470 	.word	0x40020470
 8005fc4:	40020488 	.word	0x40020488
 8005fc8:	400204a0 	.word	0x400204a0
 8005fcc:	400204b8 	.word	0x400204b8
 8005fd0:	58025408 	.word	0x58025408
 8005fd4:	5802541c 	.word	0x5802541c
 8005fd8:	58025430 	.word	0x58025430
 8005fdc:	58025444 	.word	0x58025444
 8005fe0:	58025458 	.word	0x58025458
 8005fe4:	5802546c 	.word	0x5802546c
 8005fe8:	58025480 	.word	0x58025480
 8005fec:	58025494 	.word	0x58025494
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d007      	beq.n	8006006 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006000:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006004:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a6d      	ldr	r2, [pc, #436]	; (80061c0 <HAL_DMA_Abort+0x444>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d04a      	beq.n	80060a6 <HAL_DMA_Abort+0x32a>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a6b      	ldr	r2, [pc, #428]	; (80061c4 <HAL_DMA_Abort+0x448>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d045      	beq.n	80060a6 <HAL_DMA_Abort+0x32a>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a6a      	ldr	r2, [pc, #424]	; (80061c8 <HAL_DMA_Abort+0x44c>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d040      	beq.n	80060a6 <HAL_DMA_Abort+0x32a>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a68      	ldr	r2, [pc, #416]	; (80061cc <HAL_DMA_Abort+0x450>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d03b      	beq.n	80060a6 <HAL_DMA_Abort+0x32a>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a67      	ldr	r2, [pc, #412]	; (80061d0 <HAL_DMA_Abort+0x454>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d036      	beq.n	80060a6 <HAL_DMA_Abort+0x32a>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a65      	ldr	r2, [pc, #404]	; (80061d4 <HAL_DMA_Abort+0x458>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d031      	beq.n	80060a6 <HAL_DMA_Abort+0x32a>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a64      	ldr	r2, [pc, #400]	; (80061d8 <HAL_DMA_Abort+0x45c>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d02c      	beq.n	80060a6 <HAL_DMA_Abort+0x32a>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a62      	ldr	r2, [pc, #392]	; (80061dc <HAL_DMA_Abort+0x460>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d027      	beq.n	80060a6 <HAL_DMA_Abort+0x32a>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a61      	ldr	r2, [pc, #388]	; (80061e0 <HAL_DMA_Abort+0x464>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d022      	beq.n	80060a6 <HAL_DMA_Abort+0x32a>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a5f      	ldr	r2, [pc, #380]	; (80061e4 <HAL_DMA_Abort+0x468>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d01d      	beq.n	80060a6 <HAL_DMA_Abort+0x32a>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a5e      	ldr	r2, [pc, #376]	; (80061e8 <HAL_DMA_Abort+0x46c>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d018      	beq.n	80060a6 <HAL_DMA_Abort+0x32a>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a5c      	ldr	r2, [pc, #368]	; (80061ec <HAL_DMA_Abort+0x470>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d013      	beq.n	80060a6 <HAL_DMA_Abort+0x32a>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a5b      	ldr	r2, [pc, #364]	; (80061f0 <HAL_DMA_Abort+0x474>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d00e      	beq.n	80060a6 <HAL_DMA_Abort+0x32a>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a59      	ldr	r2, [pc, #356]	; (80061f4 <HAL_DMA_Abort+0x478>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d009      	beq.n	80060a6 <HAL_DMA_Abort+0x32a>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a58      	ldr	r2, [pc, #352]	; (80061f8 <HAL_DMA_Abort+0x47c>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d004      	beq.n	80060a6 <HAL_DMA_Abort+0x32a>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a56      	ldr	r2, [pc, #344]	; (80061fc <HAL_DMA_Abort+0x480>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d108      	bne.n	80060b8 <HAL_DMA_Abort+0x33c>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 0201 	bic.w	r2, r2, #1
 80060b4:	601a      	str	r2, [r3, #0]
 80060b6:	e007      	b.n	80060c8 <HAL_DMA_Abort+0x34c>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f022 0201 	bic.w	r2, r2, #1
 80060c6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80060c8:	e013      	b.n	80060f2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80060ca:	f7fe fb5d 	bl	8004788 <HAL_GetTick>
 80060ce:	4602      	mov	r2, r0
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	2b05      	cmp	r3, #5
 80060d6:	d90c      	bls.n	80060f2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2220      	movs	r2, #32
 80060dc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2203      	movs	r2, #3
 80060e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e12d      	b.n	800634e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0301 	and.w	r3, r3, #1
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1e5      	bne.n	80060ca <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a2f      	ldr	r2, [pc, #188]	; (80061c0 <HAL_DMA_Abort+0x444>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d04a      	beq.n	800619e <HAL_DMA_Abort+0x422>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a2d      	ldr	r2, [pc, #180]	; (80061c4 <HAL_DMA_Abort+0x448>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d045      	beq.n	800619e <HAL_DMA_Abort+0x422>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a2c      	ldr	r2, [pc, #176]	; (80061c8 <HAL_DMA_Abort+0x44c>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d040      	beq.n	800619e <HAL_DMA_Abort+0x422>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a2a      	ldr	r2, [pc, #168]	; (80061cc <HAL_DMA_Abort+0x450>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d03b      	beq.n	800619e <HAL_DMA_Abort+0x422>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a29      	ldr	r2, [pc, #164]	; (80061d0 <HAL_DMA_Abort+0x454>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d036      	beq.n	800619e <HAL_DMA_Abort+0x422>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a27      	ldr	r2, [pc, #156]	; (80061d4 <HAL_DMA_Abort+0x458>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d031      	beq.n	800619e <HAL_DMA_Abort+0x422>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a26      	ldr	r2, [pc, #152]	; (80061d8 <HAL_DMA_Abort+0x45c>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d02c      	beq.n	800619e <HAL_DMA_Abort+0x422>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a24      	ldr	r2, [pc, #144]	; (80061dc <HAL_DMA_Abort+0x460>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d027      	beq.n	800619e <HAL_DMA_Abort+0x422>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a23      	ldr	r2, [pc, #140]	; (80061e0 <HAL_DMA_Abort+0x464>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d022      	beq.n	800619e <HAL_DMA_Abort+0x422>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a21      	ldr	r2, [pc, #132]	; (80061e4 <HAL_DMA_Abort+0x468>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d01d      	beq.n	800619e <HAL_DMA_Abort+0x422>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a20      	ldr	r2, [pc, #128]	; (80061e8 <HAL_DMA_Abort+0x46c>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d018      	beq.n	800619e <HAL_DMA_Abort+0x422>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a1e      	ldr	r2, [pc, #120]	; (80061ec <HAL_DMA_Abort+0x470>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d013      	beq.n	800619e <HAL_DMA_Abort+0x422>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a1d      	ldr	r2, [pc, #116]	; (80061f0 <HAL_DMA_Abort+0x474>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d00e      	beq.n	800619e <HAL_DMA_Abort+0x422>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a1b      	ldr	r2, [pc, #108]	; (80061f4 <HAL_DMA_Abort+0x478>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d009      	beq.n	800619e <HAL_DMA_Abort+0x422>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a1a      	ldr	r2, [pc, #104]	; (80061f8 <HAL_DMA_Abort+0x47c>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d004      	beq.n	800619e <HAL_DMA_Abort+0x422>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a18      	ldr	r2, [pc, #96]	; (80061fc <HAL_DMA_Abort+0x480>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d101      	bne.n	80061a2 <HAL_DMA_Abort+0x426>
 800619e:	2301      	movs	r3, #1
 80061a0:	e000      	b.n	80061a4 <HAL_DMA_Abort+0x428>
 80061a2:	2300      	movs	r3, #0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d02b      	beq.n	8006200 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ac:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061b2:	f003 031f 	and.w	r3, r3, #31
 80061b6:	223f      	movs	r2, #63	; 0x3f
 80061b8:	409a      	lsls	r2, r3
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	609a      	str	r2, [r3, #8]
 80061be:	e02a      	b.n	8006216 <HAL_DMA_Abort+0x49a>
 80061c0:	40020010 	.word	0x40020010
 80061c4:	40020028 	.word	0x40020028
 80061c8:	40020040 	.word	0x40020040
 80061cc:	40020058 	.word	0x40020058
 80061d0:	40020070 	.word	0x40020070
 80061d4:	40020088 	.word	0x40020088
 80061d8:	400200a0 	.word	0x400200a0
 80061dc:	400200b8 	.word	0x400200b8
 80061e0:	40020410 	.word	0x40020410
 80061e4:	40020428 	.word	0x40020428
 80061e8:	40020440 	.word	0x40020440
 80061ec:	40020458 	.word	0x40020458
 80061f0:	40020470 	.word	0x40020470
 80061f4:	40020488 	.word	0x40020488
 80061f8:	400204a0 	.word	0x400204a0
 80061fc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006204:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800620a:	f003 031f 	and.w	r3, r3, #31
 800620e:	2201      	movs	r2, #1
 8006210:	409a      	lsls	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a4f      	ldr	r2, [pc, #316]	; (8006358 <HAL_DMA_Abort+0x5dc>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d072      	beq.n	8006306 <HAL_DMA_Abort+0x58a>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a4d      	ldr	r2, [pc, #308]	; (800635c <HAL_DMA_Abort+0x5e0>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d06d      	beq.n	8006306 <HAL_DMA_Abort+0x58a>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a4c      	ldr	r2, [pc, #304]	; (8006360 <HAL_DMA_Abort+0x5e4>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d068      	beq.n	8006306 <HAL_DMA_Abort+0x58a>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a4a      	ldr	r2, [pc, #296]	; (8006364 <HAL_DMA_Abort+0x5e8>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d063      	beq.n	8006306 <HAL_DMA_Abort+0x58a>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a49      	ldr	r2, [pc, #292]	; (8006368 <HAL_DMA_Abort+0x5ec>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d05e      	beq.n	8006306 <HAL_DMA_Abort+0x58a>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a47      	ldr	r2, [pc, #284]	; (800636c <HAL_DMA_Abort+0x5f0>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d059      	beq.n	8006306 <HAL_DMA_Abort+0x58a>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a46      	ldr	r2, [pc, #280]	; (8006370 <HAL_DMA_Abort+0x5f4>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d054      	beq.n	8006306 <HAL_DMA_Abort+0x58a>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a44      	ldr	r2, [pc, #272]	; (8006374 <HAL_DMA_Abort+0x5f8>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d04f      	beq.n	8006306 <HAL_DMA_Abort+0x58a>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a43      	ldr	r2, [pc, #268]	; (8006378 <HAL_DMA_Abort+0x5fc>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d04a      	beq.n	8006306 <HAL_DMA_Abort+0x58a>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a41      	ldr	r2, [pc, #260]	; (800637c <HAL_DMA_Abort+0x600>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d045      	beq.n	8006306 <HAL_DMA_Abort+0x58a>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a40      	ldr	r2, [pc, #256]	; (8006380 <HAL_DMA_Abort+0x604>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d040      	beq.n	8006306 <HAL_DMA_Abort+0x58a>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a3e      	ldr	r2, [pc, #248]	; (8006384 <HAL_DMA_Abort+0x608>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d03b      	beq.n	8006306 <HAL_DMA_Abort+0x58a>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a3d      	ldr	r2, [pc, #244]	; (8006388 <HAL_DMA_Abort+0x60c>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d036      	beq.n	8006306 <HAL_DMA_Abort+0x58a>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a3b      	ldr	r2, [pc, #236]	; (800638c <HAL_DMA_Abort+0x610>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d031      	beq.n	8006306 <HAL_DMA_Abort+0x58a>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a3a      	ldr	r2, [pc, #232]	; (8006390 <HAL_DMA_Abort+0x614>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d02c      	beq.n	8006306 <HAL_DMA_Abort+0x58a>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a38      	ldr	r2, [pc, #224]	; (8006394 <HAL_DMA_Abort+0x618>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d027      	beq.n	8006306 <HAL_DMA_Abort+0x58a>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a37      	ldr	r2, [pc, #220]	; (8006398 <HAL_DMA_Abort+0x61c>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d022      	beq.n	8006306 <HAL_DMA_Abort+0x58a>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a35      	ldr	r2, [pc, #212]	; (800639c <HAL_DMA_Abort+0x620>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d01d      	beq.n	8006306 <HAL_DMA_Abort+0x58a>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a34      	ldr	r2, [pc, #208]	; (80063a0 <HAL_DMA_Abort+0x624>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d018      	beq.n	8006306 <HAL_DMA_Abort+0x58a>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a32      	ldr	r2, [pc, #200]	; (80063a4 <HAL_DMA_Abort+0x628>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d013      	beq.n	8006306 <HAL_DMA_Abort+0x58a>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a31      	ldr	r2, [pc, #196]	; (80063a8 <HAL_DMA_Abort+0x62c>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d00e      	beq.n	8006306 <HAL_DMA_Abort+0x58a>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a2f      	ldr	r2, [pc, #188]	; (80063ac <HAL_DMA_Abort+0x630>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d009      	beq.n	8006306 <HAL_DMA_Abort+0x58a>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a2e      	ldr	r2, [pc, #184]	; (80063b0 <HAL_DMA_Abort+0x634>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d004      	beq.n	8006306 <HAL_DMA_Abort+0x58a>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a2c      	ldr	r2, [pc, #176]	; (80063b4 <HAL_DMA_Abort+0x638>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d101      	bne.n	800630a <HAL_DMA_Abort+0x58e>
 8006306:	2301      	movs	r3, #1
 8006308:	e000      	b.n	800630c <HAL_DMA_Abort+0x590>
 800630a:	2300      	movs	r3, #0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d015      	beq.n	800633c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006318:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00c      	beq.n	800633c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800632c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006330:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800633a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3718      	adds	r7, #24
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	40020010 	.word	0x40020010
 800635c:	40020028 	.word	0x40020028
 8006360:	40020040 	.word	0x40020040
 8006364:	40020058 	.word	0x40020058
 8006368:	40020070 	.word	0x40020070
 800636c:	40020088 	.word	0x40020088
 8006370:	400200a0 	.word	0x400200a0
 8006374:	400200b8 	.word	0x400200b8
 8006378:	40020410 	.word	0x40020410
 800637c:	40020428 	.word	0x40020428
 8006380:	40020440 	.word	0x40020440
 8006384:	40020458 	.word	0x40020458
 8006388:	40020470 	.word	0x40020470
 800638c:	40020488 	.word	0x40020488
 8006390:	400204a0 	.word	0x400204a0
 8006394:	400204b8 	.word	0x400204b8
 8006398:	58025408 	.word	0x58025408
 800639c:	5802541c 	.word	0x5802541c
 80063a0:	58025430 	.word	0x58025430
 80063a4:	58025444 	.word	0x58025444
 80063a8:	58025458 	.word	0x58025458
 80063ac:	5802546c 	.word	0x5802546c
 80063b0:	58025480 	.word	0x58025480
 80063b4:	58025494 	.word	0x58025494

080063b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e237      	b.n	800683a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d004      	beq.n	80063e0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2280      	movs	r2, #128	; 0x80
 80063da:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e22c      	b.n	800683a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a5c      	ldr	r2, [pc, #368]	; (8006558 <HAL_DMA_Abort_IT+0x1a0>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d04a      	beq.n	8006480 <HAL_DMA_Abort_IT+0xc8>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a5b      	ldr	r2, [pc, #364]	; (800655c <HAL_DMA_Abort_IT+0x1a4>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d045      	beq.n	8006480 <HAL_DMA_Abort_IT+0xc8>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a59      	ldr	r2, [pc, #356]	; (8006560 <HAL_DMA_Abort_IT+0x1a8>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d040      	beq.n	8006480 <HAL_DMA_Abort_IT+0xc8>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a58      	ldr	r2, [pc, #352]	; (8006564 <HAL_DMA_Abort_IT+0x1ac>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d03b      	beq.n	8006480 <HAL_DMA_Abort_IT+0xc8>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a56      	ldr	r2, [pc, #344]	; (8006568 <HAL_DMA_Abort_IT+0x1b0>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d036      	beq.n	8006480 <HAL_DMA_Abort_IT+0xc8>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a55      	ldr	r2, [pc, #340]	; (800656c <HAL_DMA_Abort_IT+0x1b4>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d031      	beq.n	8006480 <HAL_DMA_Abort_IT+0xc8>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a53      	ldr	r2, [pc, #332]	; (8006570 <HAL_DMA_Abort_IT+0x1b8>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d02c      	beq.n	8006480 <HAL_DMA_Abort_IT+0xc8>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a52      	ldr	r2, [pc, #328]	; (8006574 <HAL_DMA_Abort_IT+0x1bc>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d027      	beq.n	8006480 <HAL_DMA_Abort_IT+0xc8>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a50      	ldr	r2, [pc, #320]	; (8006578 <HAL_DMA_Abort_IT+0x1c0>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d022      	beq.n	8006480 <HAL_DMA_Abort_IT+0xc8>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a4f      	ldr	r2, [pc, #316]	; (800657c <HAL_DMA_Abort_IT+0x1c4>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d01d      	beq.n	8006480 <HAL_DMA_Abort_IT+0xc8>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a4d      	ldr	r2, [pc, #308]	; (8006580 <HAL_DMA_Abort_IT+0x1c8>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d018      	beq.n	8006480 <HAL_DMA_Abort_IT+0xc8>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a4c      	ldr	r2, [pc, #304]	; (8006584 <HAL_DMA_Abort_IT+0x1cc>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d013      	beq.n	8006480 <HAL_DMA_Abort_IT+0xc8>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a4a      	ldr	r2, [pc, #296]	; (8006588 <HAL_DMA_Abort_IT+0x1d0>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d00e      	beq.n	8006480 <HAL_DMA_Abort_IT+0xc8>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a49      	ldr	r2, [pc, #292]	; (800658c <HAL_DMA_Abort_IT+0x1d4>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d009      	beq.n	8006480 <HAL_DMA_Abort_IT+0xc8>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a47      	ldr	r2, [pc, #284]	; (8006590 <HAL_DMA_Abort_IT+0x1d8>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d004      	beq.n	8006480 <HAL_DMA_Abort_IT+0xc8>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a46      	ldr	r2, [pc, #280]	; (8006594 <HAL_DMA_Abort_IT+0x1dc>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d101      	bne.n	8006484 <HAL_DMA_Abort_IT+0xcc>
 8006480:	2301      	movs	r3, #1
 8006482:	e000      	b.n	8006486 <HAL_DMA_Abort_IT+0xce>
 8006484:	2300      	movs	r3, #0
 8006486:	2b00      	cmp	r3, #0
 8006488:	f000 8086 	beq.w	8006598 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2204      	movs	r2, #4
 8006490:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a2f      	ldr	r2, [pc, #188]	; (8006558 <HAL_DMA_Abort_IT+0x1a0>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d04a      	beq.n	8006534 <HAL_DMA_Abort_IT+0x17c>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a2e      	ldr	r2, [pc, #184]	; (800655c <HAL_DMA_Abort_IT+0x1a4>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d045      	beq.n	8006534 <HAL_DMA_Abort_IT+0x17c>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a2c      	ldr	r2, [pc, #176]	; (8006560 <HAL_DMA_Abort_IT+0x1a8>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d040      	beq.n	8006534 <HAL_DMA_Abort_IT+0x17c>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a2b      	ldr	r2, [pc, #172]	; (8006564 <HAL_DMA_Abort_IT+0x1ac>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d03b      	beq.n	8006534 <HAL_DMA_Abort_IT+0x17c>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a29      	ldr	r2, [pc, #164]	; (8006568 <HAL_DMA_Abort_IT+0x1b0>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d036      	beq.n	8006534 <HAL_DMA_Abort_IT+0x17c>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a28      	ldr	r2, [pc, #160]	; (800656c <HAL_DMA_Abort_IT+0x1b4>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d031      	beq.n	8006534 <HAL_DMA_Abort_IT+0x17c>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a26      	ldr	r2, [pc, #152]	; (8006570 <HAL_DMA_Abort_IT+0x1b8>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d02c      	beq.n	8006534 <HAL_DMA_Abort_IT+0x17c>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a25      	ldr	r2, [pc, #148]	; (8006574 <HAL_DMA_Abort_IT+0x1bc>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d027      	beq.n	8006534 <HAL_DMA_Abort_IT+0x17c>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a23      	ldr	r2, [pc, #140]	; (8006578 <HAL_DMA_Abort_IT+0x1c0>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d022      	beq.n	8006534 <HAL_DMA_Abort_IT+0x17c>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a22      	ldr	r2, [pc, #136]	; (800657c <HAL_DMA_Abort_IT+0x1c4>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d01d      	beq.n	8006534 <HAL_DMA_Abort_IT+0x17c>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a20      	ldr	r2, [pc, #128]	; (8006580 <HAL_DMA_Abort_IT+0x1c8>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d018      	beq.n	8006534 <HAL_DMA_Abort_IT+0x17c>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a1f      	ldr	r2, [pc, #124]	; (8006584 <HAL_DMA_Abort_IT+0x1cc>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d013      	beq.n	8006534 <HAL_DMA_Abort_IT+0x17c>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a1d      	ldr	r2, [pc, #116]	; (8006588 <HAL_DMA_Abort_IT+0x1d0>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d00e      	beq.n	8006534 <HAL_DMA_Abort_IT+0x17c>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a1c      	ldr	r2, [pc, #112]	; (800658c <HAL_DMA_Abort_IT+0x1d4>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d009      	beq.n	8006534 <HAL_DMA_Abort_IT+0x17c>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a1a      	ldr	r2, [pc, #104]	; (8006590 <HAL_DMA_Abort_IT+0x1d8>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d004      	beq.n	8006534 <HAL_DMA_Abort_IT+0x17c>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a19      	ldr	r2, [pc, #100]	; (8006594 <HAL_DMA_Abort_IT+0x1dc>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d108      	bne.n	8006546 <HAL_DMA_Abort_IT+0x18e>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f022 0201 	bic.w	r2, r2, #1
 8006542:	601a      	str	r2, [r3, #0]
 8006544:	e178      	b.n	8006838 <HAL_DMA_Abort_IT+0x480>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f022 0201 	bic.w	r2, r2, #1
 8006554:	601a      	str	r2, [r3, #0]
 8006556:	e16f      	b.n	8006838 <HAL_DMA_Abort_IT+0x480>
 8006558:	40020010 	.word	0x40020010
 800655c:	40020028 	.word	0x40020028
 8006560:	40020040 	.word	0x40020040
 8006564:	40020058 	.word	0x40020058
 8006568:	40020070 	.word	0x40020070
 800656c:	40020088 	.word	0x40020088
 8006570:	400200a0 	.word	0x400200a0
 8006574:	400200b8 	.word	0x400200b8
 8006578:	40020410 	.word	0x40020410
 800657c:	40020428 	.word	0x40020428
 8006580:	40020440 	.word	0x40020440
 8006584:	40020458 	.word	0x40020458
 8006588:	40020470 	.word	0x40020470
 800658c:	40020488 	.word	0x40020488
 8006590:	400204a0 	.word	0x400204a0
 8006594:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f022 020e 	bic.w	r2, r2, #14
 80065a6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a6c      	ldr	r2, [pc, #432]	; (8006760 <HAL_DMA_Abort_IT+0x3a8>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d04a      	beq.n	8006648 <HAL_DMA_Abort_IT+0x290>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a6b      	ldr	r2, [pc, #428]	; (8006764 <HAL_DMA_Abort_IT+0x3ac>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d045      	beq.n	8006648 <HAL_DMA_Abort_IT+0x290>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a69      	ldr	r2, [pc, #420]	; (8006768 <HAL_DMA_Abort_IT+0x3b0>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d040      	beq.n	8006648 <HAL_DMA_Abort_IT+0x290>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a68      	ldr	r2, [pc, #416]	; (800676c <HAL_DMA_Abort_IT+0x3b4>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d03b      	beq.n	8006648 <HAL_DMA_Abort_IT+0x290>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a66      	ldr	r2, [pc, #408]	; (8006770 <HAL_DMA_Abort_IT+0x3b8>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d036      	beq.n	8006648 <HAL_DMA_Abort_IT+0x290>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a65      	ldr	r2, [pc, #404]	; (8006774 <HAL_DMA_Abort_IT+0x3bc>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d031      	beq.n	8006648 <HAL_DMA_Abort_IT+0x290>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a63      	ldr	r2, [pc, #396]	; (8006778 <HAL_DMA_Abort_IT+0x3c0>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d02c      	beq.n	8006648 <HAL_DMA_Abort_IT+0x290>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a62      	ldr	r2, [pc, #392]	; (800677c <HAL_DMA_Abort_IT+0x3c4>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d027      	beq.n	8006648 <HAL_DMA_Abort_IT+0x290>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a60      	ldr	r2, [pc, #384]	; (8006780 <HAL_DMA_Abort_IT+0x3c8>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d022      	beq.n	8006648 <HAL_DMA_Abort_IT+0x290>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a5f      	ldr	r2, [pc, #380]	; (8006784 <HAL_DMA_Abort_IT+0x3cc>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d01d      	beq.n	8006648 <HAL_DMA_Abort_IT+0x290>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a5d      	ldr	r2, [pc, #372]	; (8006788 <HAL_DMA_Abort_IT+0x3d0>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d018      	beq.n	8006648 <HAL_DMA_Abort_IT+0x290>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a5c      	ldr	r2, [pc, #368]	; (800678c <HAL_DMA_Abort_IT+0x3d4>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d013      	beq.n	8006648 <HAL_DMA_Abort_IT+0x290>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a5a      	ldr	r2, [pc, #360]	; (8006790 <HAL_DMA_Abort_IT+0x3d8>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d00e      	beq.n	8006648 <HAL_DMA_Abort_IT+0x290>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a59      	ldr	r2, [pc, #356]	; (8006794 <HAL_DMA_Abort_IT+0x3dc>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d009      	beq.n	8006648 <HAL_DMA_Abort_IT+0x290>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a57      	ldr	r2, [pc, #348]	; (8006798 <HAL_DMA_Abort_IT+0x3e0>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d004      	beq.n	8006648 <HAL_DMA_Abort_IT+0x290>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a56      	ldr	r2, [pc, #344]	; (800679c <HAL_DMA_Abort_IT+0x3e4>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d108      	bne.n	800665a <HAL_DMA_Abort_IT+0x2a2>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f022 0201 	bic.w	r2, r2, #1
 8006656:	601a      	str	r2, [r3, #0]
 8006658:	e007      	b.n	800666a <HAL_DMA_Abort_IT+0x2b2>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f022 0201 	bic.w	r2, r2, #1
 8006668:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a3c      	ldr	r2, [pc, #240]	; (8006760 <HAL_DMA_Abort_IT+0x3a8>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d072      	beq.n	800675a <HAL_DMA_Abort_IT+0x3a2>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a3a      	ldr	r2, [pc, #232]	; (8006764 <HAL_DMA_Abort_IT+0x3ac>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d06d      	beq.n	800675a <HAL_DMA_Abort_IT+0x3a2>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a39      	ldr	r2, [pc, #228]	; (8006768 <HAL_DMA_Abort_IT+0x3b0>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d068      	beq.n	800675a <HAL_DMA_Abort_IT+0x3a2>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a37      	ldr	r2, [pc, #220]	; (800676c <HAL_DMA_Abort_IT+0x3b4>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d063      	beq.n	800675a <HAL_DMA_Abort_IT+0x3a2>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a36      	ldr	r2, [pc, #216]	; (8006770 <HAL_DMA_Abort_IT+0x3b8>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d05e      	beq.n	800675a <HAL_DMA_Abort_IT+0x3a2>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a34      	ldr	r2, [pc, #208]	; (8006774 <HAL_DMA_Abort_IT+0x3bc>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d059      	beq.n	800675a <HAL_DMA_Abort_IT+0x3a2>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a33      	ldr	r2, [pc, #204]	; (8006778 <HAL_DMA_Abort_IT+0x3c0>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d054      	beq.n	800675a <HAL_DMA_Abort_IT+0x3a2>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a31      	ldr	r2, [pc, #196]	; (800677c <HAL_DMA_Abort_IT+0x3c4>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d04f      	beq.n	800675a <HAL_DMA_Abort_IT+0x3a2>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a30      	ldr	r2, [pc, #192]	; (8006780 <HAL_DMA_Abort_IT+0x3c8>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d04a      	beq.n	800675a <HAL_DMA_Abort_IT+0x3a2>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a2e      	ldr	r2, [pc, #184]	; (8006784 <HAL_DMA_Abort_IT+0x3cc>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d045      	beq.n	800675a <HAL_DMA_Abort_IT+0x3a2>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a2d      	ldr	r2, [pc, #180]	; (8006788 <HAL_DMA_Abort_IT+0x3d0>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d040      	beq.n	800675a <HAL_DMA_Abort_IT+0x3a2>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a2b      	ldr	r2, [pc, #172]	; (800678c <HAL_DMA_Abort_IT+0x3d4>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d03b      	beq.n	800675a <HAL_DMA_Abort_IT+0x3a2>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a2a      	ldr	r2, [pc, #168]	; (8006790 <HAL_DMA_Abort_IT+0x3d8>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d036      	beq.n	800675a <HAL_DMA_Abort_IT+0x3a2>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a28      	ldr	r2, [pc, #160]	; (8006794 <HAL_DMA_Abort_IT+0x3dc>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d031      	beq.n	800675a <HAL_DMA_Abort_IT+0x3a2>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a27      	ldr	r2, [pc, #156]	; (8006798 <HAL_DMA_Abort_IT+0x3e0>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d02c      	beq.n	800675a <HAL_DMA_Abort_IT+0x3a2>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a25      	ldr	r2, [pc, #148]	; (800679c <HAL_DMA_Abort_IT+0x3e4>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d027      	beq.n	800675a <HAL_DMA_Abort_IT+0x3a2>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a24      	ldr	r2, [pc, #144]	; (80067a0 <HAL_DMA_Abort_IT+0x3e8>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d022      	beq.n	800675a <HAL_DMA_Abort_IT+0x3a2>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a22      	ldr	r2, [pc, #136]	; (80067a4 <HAL_DMA_Abort_IT+0x3ec>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d01d      	beq.n	800675a <HAL_DMA_Abort_IT+0x3a2>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a21      	ldr	r2, [pc, #132]	; (80067a8 <HAL_DMA_Abort_IT+0x3f0>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d018      	beq.n	800675a <HAL_DMA_Abort_IT+0x3a2>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a1f      	ldr	r2, [pc, #124]	; (80067ac <HAL_DMA_Abort_IT+0x3f4>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d013      	beq.n	800675a <HAL_DMA_Abort_IT+0x3a2>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a1e      	ldr	r2, [pc, #120]	; (80067b0 <HAL_DMA_Abort_IT+0x3f8>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d00e      	beq.n	800675a <HAL_DMA_Abort_IT+0x3a2>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a1c      	ldr	r2, [pc, #112]	; (80067b4 <HAL_DMA_Abort_IT+0x3fc>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d009      	beq.n	800675a <HAL_DMA_Abort_IT+0x3a2>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a1b      	ldr	r2, [pc, #108]	; (80067b8 <HAL_DMA_Abort_IT+0x400>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d004      	beq.n	800675a <HAL_DMA_Abort_IT+0x3a2>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a19      	ldr	r2, [pc, #100]	; (80067bc <HAL_DMA_Abort_IT+0x404>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d132      	bne.n	80067c0 <HAL_DMA_Abort_IT+0x408>
 800675a:	2301      	movs	r3, #1
 800675c:	e031      	b.n	80067c2 <HAL_DMA_Abort_IT+0x40a>
 800675e:	bf00      	nop
 8006760:	40020010 	.word	0x40020010
 8006764:	40020028 	.word	0x40020028
 8006768:	40020040 	.word	0x40020040
 800676c:	40020058 	.word	0x40020058
 8006770:	40020070 	.word	0x40020070
 8006774:	40020088 	.word	0x40020088
 8006778:	400200a0 	.word	0x400200a0
 800677c:	400200b8 	.word	0x400200b8
 8006780:	40020410 	.word	0x40020410
 8006784:	40020428 	.word	0x40020428
 8006788:	40020440 	.word	0x40020440
 800678c:	40020458 	.word	0x40020458
 8006790:	40020470 	.word	0x40020470
 8006794:	40020488 	.word	0x40020488
 8006798:	400204a0 	.word	0x400204a0
 800679c:	400204b8 	.word	0x400204b8
 80067a0:	58025408 	.word	0x58025408
 80067a4:	5802541c 	.word	0x5802541c
 80067a8:	58025430 	.word	0x58025430
 80067ac:	58025444 	.word	0x58025444
 80067b0:	58025458 	.word	0x58025458
 80067b4:	5802546c 	.word	0x5802546c
 80067b8:	58025480 	.word	0x58025480
 80067bc:	58025494 	.word	0x58025494
 80067c0:	2300      	movs	r3, #0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d028      	beq.n	8006818 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067d4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067da:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067e0:	f003 031f 	and.w	r3, r3, #31
 80067e4:	2201      	movs	r2, #1
 80067e6:	409a      	lsls	r2, r3
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80067f4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00c      	beq.n	8006818 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006808:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800680c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006816:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800682c:	2b00      	cmp	r3, #0
 800682e:	d003      	beq.n	8006838 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop

08006844 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b08a      	sub	sp, #40	; 0x28
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800684c:	2300      	movs	r3, #0
 800684e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006850:	4b67      	ldr	r3, [pc, #412]	; (80069f0 <HAL_DMA_IRQHandler+0x1ac>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a67      	ldr	r2, [pc, #412]	; (80069f4 <HAL_DMA_IRQHandler+0x1b0>)
 8006856:	fba2 2303 	umull	r2, r3, r2, r3
 800685a:	0a9b      	lsrs	r3, r3, #10
 800685c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006862:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006868:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800686a:	6a3b      	ldr	r3, [r7, #32]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a5f      	ldr	r2, [pc, #380]	; (80069f8 <HAL_DMA_IRQHandler+0x1b4>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d04a      	beq.n	8006916 <HAL_DMA_IRQHandler+0xd2>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a5d      	ldr	r2, [pc, #372]	; (80069fc <HAL_DMA_IRQHandler+0x1b8>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d045      	beq.n	8006916 <HAL_DMA_IRQHandler+0xd2>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a5c      	ldr	r2, [pc, #368]	; (8006a00 <HAL_DMA_IRQHandler+0x1bc>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d040      	beq.n	8006916 <HAL_DMA_IRQHandler+0xd2>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a5a      	ldr	r2, [pc, #360]	; (8006a04 <HAL_DMA_IRQHandler+0x1c0>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d03b      	beq.n	8006916 <HAL_DMA_IRQHandler+0xd2>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a59      	ldr	r2, [pc, #356]	; (8006a08 <HAL_DMA_IRQHandler+0x1c4>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d036      	beq.n	8006916 <HAL_DMA_IRQHandler+0xd2>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a57      	ldr	r2, [pc, #348]	; (8006a0c <HAL_DMA_IRQHandler+0x1c8>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d031      	beq.n	8006916 <HAL_DMA_IRQHandler+0xd2>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a56      	ldr	r2, [pc, #344]	; (8006a10 <HAL_DMA_IRQHandler+0x1cc>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d02c      	beq.n	8006916 <HAL_DMA_IRQHandler+0xd2>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a54      	ldr	r2, [pc, #336]	; (8006a14 <HAL_DMA_IRQHandler+0x1d0>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d027      	beq.n	8006916 <HAL_DMA_IRQHandler+0xd2>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a53      	ldr	r2, [pc, #332]	; (8006a18 <HAL_DMA_IRQHandler+0x1d4>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d022      	beq.n	8006916 <HAL_DMA_IRQHandler+0xd2>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a51      	ldr	r2, [pc, #324]	; (8006a1c <HAL_DMA_IRQHandler+0x1d8>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d01d      	beq.n	8006916 <HAL_DMA_IRQHandler+0xd2>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a50      	ldr	r2, [pc, #320]	; (8006a20 <HAL_DMA_IRQHandler+0x1dc>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d018      	beq.n	8006916 <HAL_DMA_IRQHandler+0xd2>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a4e      	ldr	r2, [pc, #312]	; (8006a24 <HAL_DMA_IRQHandler+0x1e0>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d013      	beq.n	8006916 <HAL_DMA_IRQHandler+0xd2>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a4d      	ldr	r2, [pc, #308]	; (8006a28 <HAL_DMA_IRQHandler+0x1e4>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d00e      	beq.n	8006916 <HAL_DMA_IRQHandler+0xd2>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a4b      	ldr	r2, [pc, #300]	; (8006a2c <HAL_DMA_IRQHandler+0x1e8>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d009      	beq.n	8006916 <HAL_DMA_IRQHandler+0xd2>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a4a      	ldr	r2, [pc, #296]	; (8006a30 <HAL_DMA_IRQHandler+0x1ec>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d004      	beq.n	8006916 <HAL_DMA_IRQHandler+0xd2>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a48      	ldr	r2, [pc, #288]	; (8006a34 <HAL_DMA_IRQHandler+0x1f0>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d101      	bne.n	800691a <HAL_DMA_IRQHandler+0xd6>
 8006916:	2301      	movs	r3, #1
 8006918:	e000      	b.n	800691c <HAL_DMA_IRQHandler+0xd8>
 800691a:	2300      	movs	r3, #0
 800691c:	2b00      	cmp	r3, #0
 800691e:	f000 842b 	beq.w	8007178 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006926:	f003 031f 	and.w	r3, r3, #31
 800692a:	2208      	movs	r2, #8
 800692c:	409a      	lsls	r2, r3
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	4013      	ands	r3, r2
 8006932:	2b00      	cmp	r3, #0
 8006934:	f000 80a2 	beq.w	8006a7c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a2e      	ldr	r2, [pc, #184]	; (80069f8 <HAL_DMA_IRQHandler+0x1b4>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d04a      	beq.n	80069d8 <HAL_DMA_IRQHandler+0x194>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a2d      	ldr	r2, [pc, #180]	; (80069fc <HAL_DMA_IRQHandler+0x1b8>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d045      	beq.n	80069d8 <HAL_DMA_IRQHandler+0x194>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a2b      	ldr	r2, [pc, #172]	; (8006a00 <HAL_DMA_IRQHandler+0x1bc>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d040      	beq.n	80069d8 <HAL_DMA_IRQHandler+0x194>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a2a      	ldr	r2, [pc, #168]	; (8006a04 <HAL_DMA_IRQHandler+0x1c0>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d03b      	beq.n	80069d8 <HAL_DMA_IRQHandler+0x194>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a28      	ldr	r2, [pc, #160]	; (8006a08 <HAL_DMA_IRQHandler+0x1c4>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d036      	beq.n	80069d8 <HAL_DMA_IRQHandler+0x194>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a27      	ldr	r2, [pc, #156]	; (8006a0c <HAL_DMA_IRQHandler+0x1c8>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d031      	beq.n	80069d8 <HAL_DMA_IRQHandler+0x194>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a25      	ldr	r2, [pc, #148]	; (8006a10 <HAL_DMA_IRQHandler+0x1cc>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d02c      	beq.n	80069d8 <HAL_DMA_IRQHandler+0x194>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a24      	ldr	r2, [pc, #144]	; (8006a14 <HAL_DMA_IRQHandler+0x1d0>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d027      	beq.n	80069d8 <HAL_DMA_IRQHandler+0x194>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a22      	ldr	r2, [pc, #136]	; (8006a18 <HAL_DMA_IRQHandler+0x1d4>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d022      	beq.n	80069d8 <HAL_DMA_IRQHandler+0x194>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a21      	ldr	r2, [pc, #132]	; (8006a1c <HAL_DMA_IRQHandler+0x1d8>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d01d      	beq.n	80069d8 <HAL_DMA_IRQHandler+0x194>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a1f      	ldr	r2, [pc, #124]	; (8006a20 <HAL_DMA_IRQHandler+0x1dc>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d018      	beq.n	80069d8 <HAL_DMA_IRQHandler+0x194>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a1e      	ldr	r2, [pc, #120]	; (8006a24 <HAL_DMA_IRQHandler+0x1e0>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d013      	beq.n	80069d8 <HAL_DMA_IRQHandler+0x194>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a1c      	ldr	r2, [pc, #112]	; (8006a28 <HAL_DMA_IRQHandler+0x1e4>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d00e      	beq.n	80069d8 <HAL_DMA_IRQHandler+0x194>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a1b      	ldr	r2, [pc, #108]	; (8006a2c <HAL_DMA_IRQHandler+0x1e8>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d009      	beq.n	80069d8 <HAL_DMA_IRQHandler+0x194>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a19      	ldr	r2, [pc, #100]	; (8006a30 <HAL_DMA_IRQHandler+0x1ec>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d004      	beq.n	80069d8 <HAL_DMA_IRQHandler+0x194>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a18      	ldr	r2, [pc, #96]	; (8006a34 <HAL_DMA_IRQHandler+0x1f0>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d12f      	bne.n	8006a38 <HAL_DMA_IRQHandler+0x1f4>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0304 	and.w	r3, r3, #4
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	bf14      	ite	ne
 80069e6:	2301      	movne	r3, #1
 80069e8:	2300      	moveq	r3, #0
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	e02e      	b.n	8006a4c <HAL_DMA_IRQHandler+0x208>
 80069ee:	bf00      	nop
 80069f0:	24000044 	.word	0x24000044
 80069f4:	1b4e81b5 	.word	0x1b4e81b5
 80069f8:	40020010 	.word	0x40020010
 80069fc:	40020028 	.word	0x40020028
 8006a00:	40020040 	.word	0x40020040
 8006a04:	40020058 	.word	0x40020058
 8006a08:	40020070 	.word	0x40020070
 8006a0c:	40020088 	.word	0x40020088
 8006a10:	400200a0 	.word	0x400200a0
 8006a14:	400200b8 	.word	0x400200b8
 8006a18:	40020410 	.word	0x40020410
 8006a1c:	40020428 	.word	0x40020428
 8006a20:	40020440 	.word	0x40020440
 8006a24:	40020458 	.word	0x40020458
 8006a28:	40020470 	.word	0x40020470
 8006a2c:	40020488 	.word	0x40020488
 8006a30:	400204a0 	.word	0x400204a0
 8006a34:	400204b8 	.word	0x400204b8
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 0308 	and.w	r3, r3, #8
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	bf14      	ite	ne
 8006a46:	2301      	movne	r3, #1
 8006a48:	2300      	moveq	r3, #0
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d015      	beq.n	8006a7c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f022 0204 	bic.w	r2, r2, #4
 8006a5e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a64:	f003 031f 	and.w	r3, r3, #31
 8006a68:	2208      	movs	r2, #8
 8006a6a:	409a      	lsls	r2, r3
 8006a6c:	6a3b      	ldr	r3, [r7, #32]
 8006a6e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a74:	f043 0201 	orr.w	r2, r3, #1
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a80:	f003 031f 	and.w	r3, r3, #31
 8006a84:	69ba      	ldr	r2, [r7, #24]
 8006a86:	fa22 f303 	lsr.w	r3, r2, r3
 8006a8a:	f003 0301 	and.w	r3, r3, #1
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d06e      	beq.n	8006b70 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a69      	ldr	r2, [pc, #420]	; (8006c3c <HAL_DMA_IRQHandler+0x3f8>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d04a      	beq.n	8006b32 <HAL_DMA_IRQHandler+0x2ee>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a67      	ldr	r2, [pc, #412]	; (8006c40 <HAL_DMA_IRQHandler+0x3fc>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d045      	beq.n	8006b32 <HAL_DMA_IRQHandler+0x2ee>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a66      	ldr	r2, [pc, #408]	; (8006c44 <HAL_DMA_IRQHandler+0x400>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d040      	beq.n	8006b32 <HAL_DMA_IRQHandler+0x2ee>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a64      	ldr	r2, [pc, #400]	; (8006c48 <HAL_DMA_IRQHandler+0x404>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d03b      	beq.n	8006b32 <HAL_DMA_IRQHandler+0x2ee>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a63      	ldr	r2, [pc, #396]	; (8006c4c <HAL_DMA_IRQHandler+0x408>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d036      	beq.n	8006b32 <HAL_DMA_IRQHandler+0x2ee>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a61      	ldr	r2, [pc, #388]	; (8006c50 <HAL_DMA_IRQHandler+0x40c>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d031      	beq.n	8006b32 <HAL_DMA_IRQHandler+0x2ee>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a60      	ldr	r2, [pc, #384]	; (8006c54 <HAL_DMA_IRQHandler+0x410>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d02c      	beq.n	8006b32 <HAL_DMA_IRQHandler+0x2ee>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a5e      	ldr	r2, [pc, #376]	; (8006c58 <HAL_DMA_IRQHandler+0x414>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d027      	beq.n	8006b32 <HAL_DMA_IRQHandler+0x2ee>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a5d      	ldr	r2, [pc, #372]	; (8006c5c <HAL_DMA_IRQHandler+0x418>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d022      	beq.n	8006b32 <HAL_DMA_IRQHandler+0x2ee>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a5b      	ldr	r2, [pc, #364]	; (8006c60 <HAL_DMA_IRQHandler+0x41c>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d01d      	beq.n	8006b32 <HAL_DMA_IRQHandler+0x2ee>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a5a      	ldr	r2, [pc, #360]	; (8006c64 <HAL_DMA_IRQHandler+0x420>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d018      	beq.n	8006b32 <HAL_DMA_IRQHandler+0x2ee>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a58      	ldr	r2, [pc, #352]	; (8006c68 <HAL_DMA_IRQHandler+0x424>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d013      	beq.n	8006b32 <HAL_DMA_IRQHandler+0x2ee>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a57      	ldr	r2, [pc, #348]	; (8006c6c <HAL_DMA_IRQHandler+0x428>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d00e      	beq.n	8006b32 <HAL_DMA_IRQHandler+0x2ee>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a55      	ldr	r2, [pc, #340]	; (8006c70 <HAL_DMA_IRQHandler+0x42c>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d009      	beq.n	8006b32 <HAL_DMA_IRQHandler+0x2ee>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a54      	ldr	r2, [pc, #336]	; (8006c74 <HAL_DMA_IRQHandler+0x430>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d004      	beq.n	8006b32 <HAL_DMA_IRQHandler+0x2ee>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a52      	ldr	r2, [pc, #328]	; (8006c78 <HAL_DMA_IRQHandler+0x434>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d10a      	bne.n	8006b48 <HAL_DMA_IRQHandler+0x304>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	bf14      	ite	ne
 8006b40:	2301      	movne	r3, #1
 8006b42:	2300      	moveq	r3, #0
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	e003      	b.n	8006b50 <HAL_DMA_IRQHandler+0x30c>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2300      	movs	r3, #0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00d      	beq.n	8006b70 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b58:	f003 031f 	and.w	r3, r3, #31
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	409a      	lsls	r2, r3
 8006b60:	6a3b      	ldr	r3, [r7, #32]
 8006b62:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b68:	f043 0202 	orr.w	r2, r3, #2
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b74:	f003 031f 	and.w	r3, r3, #31
 8006b78:	2204      	movs	r2, #4
 8006b7a:	409a      	lsls	r2, r3
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	4013      	ands	r3, r2
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	f000 808f 	beq.w	8006ca4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a2c      	ldr	r2, [pc, #176]	; (8006c3c <HAL_DMA_IRQHandler+0x3f8>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d04a      	beq.n	8006c26 <HAL_DMA_IRQHandler+0x3e2>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a2a      	ldr	r2, [pc, #168]	; (8006c40 <HAL_DMA_IRQHandler+0x3fc>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d045      	beq.n	8006c26 <HAL_DMA_IRQHandler+0x3e2>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a29      	ldr	r2, [pc, #164]	; (8006c44 <HAL_DMA_IRQHandler+0x400>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d040      	beq.n	8006c26 <HAL_DMA_IRQHandler+0x3e2>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a27      	ldr	r2, [pc, #156]	; (8006c48 <HAL_DMA_IRQHandler+0x404>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d03b      	beq.n	8006c26 <HAL_DMA_IRQHandler+0x3e2>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a26      	ldr	r2, [pc, #152]	; (8006c4c <HAL_DMA_IRQHandler+0x408>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d036      	beq.n	8006c26 <HAL_DMA_IRQHandler+0x3e2>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a24      	ldr	r2, [pc, #144]	; (8006c50 <HAL_DMA_IRQHandler+0x40c>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d031      	beq.n	8006c26 <HAL_DMA_IRQHandler+0x3e2>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a23      	ldr	r2, [pc, #140]	; (8006c54 <HAL_DMA_IRQHandler+0x410>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d02c      	beq.n	8006c26 <HAL_DMA_IRQHandler+0x3e2>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a21      	ldr	r2, [pc, #132]	; (8006c58 <HAL_DMA_IRQHandler+0x414>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d027      	beq.n	8006c26 <HAL_DMA_IRQHandler+0x3e2>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a20      	ldr	r2, [pc, #128]	; (8006c5c <HAL_DMA_IRQHandler+0x418>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d022      	beq.n	8006c26 <HAL_DMA_IRQHandler+0x3e2>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a1e      	ldr	r2, [pc, #120]	; (8006c60 <HAL_DMA_IRQHandler+0x41c>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d01d      	beq.n	8006c26 <HAL_DMA_IRQHandler+0x3e2>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a1d      	ldr	r2, [pc, #116]	; (8006c64 <HAL_DMA_IRQHandler+0x420>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d018      	beq.n	8006c26 <HAL_DMA_IRQHandler+0x3e2>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a1b      	ldr	r2, [pc, #108]	; (8006c68 <HAL_DMA_IRQHandler+0x424>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d013      	beq.n	8006c26 <HAL_DMA_IRQHandler+0x3e2>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a1a      	ldr	r2, [pc, #104]	; (8006c6c <HAL_DMA_IRQHandler+0x428>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d00e      	beq.n	8006c26 <HAL_DMA_IRQHandler+0x3e2>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a18      	ldr	r2, [pc, #96]	; (8006c70 <HAL_DMA_IRQHandler+0x42c>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d009      	beq.n	8006c26 <HAL_DMA_IRQHandler+0x3e2>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a17      	ldr	r2, [pc, #92]	; (8006c74 <HAL_DMA_IRQHandler+0x430>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d004      	beq.n	8006c26 <HAL_DMA_IRQHandler+0x3e2>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a15      	ldr	r2, [pc, #84]	; (8006c78 <HAL_DMA_IRQHandler+0x434>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d12a      	bne.n	8006c7c <HAL_DMA_IRQHandler+0x438>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0302 	and.w	r3, r3, #2
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	bf14      	ite	ne
 8006c34:	2301      	movne	r3, #1
 8006c36:	2300      	moveq	r3, #0
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	e023      	b.n	8006c84 <HAL_DMA_IRQHandler+0x440>
 8006c3c:	40020010 	.word	0x40020010
 8006c40:	40020028 	.word	0x40020028
 8006c44:	40020040 	.word	0x40020040
 8006c48:	40020058 	.word	0x40020058
 8006c4c:	40020070 	.word	0x40020070
 8006c50:	40020088 	.word	0x40020088
 8006c54:	400200a0 	.word	0x400200a0
 8006c58:	400200b8 	.word	0x400200b8
 8006c5c:	40020410 	.word	0x40020410
 8006c60:	40020428 	.word	0x40020428
 8006c64:	40020440 	.word	0x40020440
 8006c68:	40020458 	.word	0x40020458
 8006c6c:	40020470 	.word	0x40020470
 8006c70:	40020488 	.word	0x40020488
 8006c74:	400204a0 	.word	0x400204a0
 8006c78:	400204b8 	.word	0x400204b8
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2300      	movs	r3, #0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00d      	beq.n	8006ca4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c8c:	f003 031f 	and.w	r3, r3, #31
 8006c90:	2204      	movs	r2, #4
 8006c92:	409a      	lsls	r2, r3
 8006c94:	6a3b      	ldr	r3, [r7, #32]
 8006c96:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c9c:	f043 0204 	orr.w	r2, r3, #4
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ca8:	f003 031f 	and.w	r3, r3, #31
 8006cac:	2210      	movs	r2, #16
 8006cae:	409a      	lsls	r2, r3
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f000 80a6 	beq.w	8006e06 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a85      	ldr	r2, [pc, #532]	; (8006ed4 <HAL_DMA_IRQHandler+0x690>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d04a      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x516>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a83      	ldr	r2, [pc, #524]	; (8006ed8 <HAL_DMA_IRQHandler+0x694>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d045      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x516>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a82      	ldr	r2, [pc, #520]	; (8006edc <HAL_DMA_IRQHandler+0x698>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d040      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x516>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a80      	ldr	r2, [pc, #512]	; (8006ee0 <HAL_DMA_IRQHandler+0x69c>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d03b      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x516>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a7f      	ldr	r2, [pc, #508]	; (8006ee4 <HAL_DMA_IRQHandler+0x6a0>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d036      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x516>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a7d      	ldr	r2, [pc, #500]	; (8006ee8 <HAL_DMA_IRQHandler+0x6a4>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d031      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x516>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a7c      	ldr	r2, [pc, #496]	; (8006eec <HAL_DMA_IRQHandler+0x6a8>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d02c      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x516>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a7a      	ldr	r2, [pc, #488]	; (8006ef0 <HAL_DMA_IRQHandler+0x6ac>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d027      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x516>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a79      	ldr	r2, [pc, #484]	; (8006ef4 <HAL_DMA_IRQHandler+0x6b0>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d022      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x516>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a77      	ldr	r2, [pc, #476]	; (8006ef8 <HAL_DMA_IRQHandler+0x6b4>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d01d      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x516>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a76      	ldr	r2, [pc, #472]	; (8006efc <HAL_DMA_IRQHandler+0x6b8>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d018      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x516>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a74      	ldr	r2, [pc, #464]	; (8006f00 <HAL_DMA_IRQHandler+0x6bc>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d013      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x516>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a73      	ldr	r2, [pc, #460]	; (8006f04 <HAL_DMA_IRQHandler+0x6c0>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d00e      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x516>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a71      	ldr	r2, [pc, #452]	; (8006f08 <HAL_DMA_IRQHandler+0x6c4>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d009      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x516>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a70      	ldr	r2, [pc, #448]	; (8006f0c <HAL_DMA_IRQHandler+0x6c8>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d004      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x516>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a6e      	ldr	r2, [pc, #440]	; (8006f10 <HAL_DMA_IRQHandler+0x6cc>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d10a      	bne.n	8006d70 <HAL_DMA_IRQHandler+0x52c>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0308 	and.w	r3, r3, #8
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	bf14      	ite	ne
 8006d68:	2301      	movne	r3, #1
 8006d6a:	2300      	moveq	r3, #0
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	e009      	b.n	8006d84 <HAL_DMA_IRQHandler+0x540>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 0304 	and.w	r3, r3, #4
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	bf14      	ite	ne
 8006d7e:	2301      	movne	r3, #1
 8006d80:	2300      	moveq	r3, #0
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d03e      	beq.n	8006e06 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d8c:	f003 031f 	and.w	r3, r3, #31
 8006d90:	2210      	movs	r2, #16
 8006d92:	409a      	lsls	r2, r3
 8006d94:	6a3b      	ldr	r3, [r7, #32]
 8006d96:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d018      	beq.n	8006dd8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d108      	bne.n	8006dc6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d024      	beq.n	8006e06 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	4798      	blx	r3
 8006dc4:	e01f      	b.n	8006e06 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d01b      	beq.n	8006e06 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	4798      	blx	r3
 8006dd6:	e016      	b.n	8006e06 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d107      	bne.n	8006df6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f022 0208 	bic.w	r2, r2, #8
 8006df4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d003      	beq.n	8006e06 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e0a:	f003 031f 	and.w	r3, r3, #31
 8006e0e:	2220      	movs	r2, #32
 8006e10:	409a      	lsls	r2, r3
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	4013      	ands	r3, r2
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f000 8110 	beq.w	800703c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a2c      	ldr	r2, [pc, #176]	; (8006ed4 <HAL_DMA_IRQHandler+0x690>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d04a      	beq.n	8006ebc <HAL_DMA_IRQHandler+0x678>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a2b      	ldr	r2, [pc, #172]	; (8006ed8 <HAL_DMA_IRQHandler+0x694>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d045      	beq.n	8006ebc <HAL_DMA_IRQHandler+0x678>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a29      	ldr	r2, [pc, #164]	; (8006edc <HAL_DMA_IRQHandler+0x698>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d040      	beq.n	8006ebc <HAL_DMA_IRQHandler+0x678>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a28      	ldr	r2, [pc, #160]	; (8006ee0 <HAL_DMA_IRQHandler+0x69c>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d03b      	beq.n	8006ebc <HAL_DMA_IRQHandler+0x678>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a26      	ldr	r2, [pc, #152]	; (8006ee4 <HAL_DMA_IRQHandler+0x6a0>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d036      	beq.n	8006ebc <HAL_DMA_IRQHandler+0x678>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a25      	ldr	r2, [pc, #148]	; (8006ee8 <HAL_DMA_IRQHandler+0x6a4>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d031      	beq.n	8006ebc <HAL_DMA_IRQHandler+0x678>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a23      	ldr	r2, [pc, #140]	; (8006eec <HAL_DMA_IRQHandler+0x6a8>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d02c      	beq.n	8006ebc <HAL_DMA_IRQHandler+0x678>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a22      	ldr	r2, [pc, #136]	; (8006ef0 <HAL_DMA_IRQHandler+0x6ac>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d027      	beq.n	8006ebc <HAL_DMA_IRQHandler+0x678>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a20      	ldr	r2, [pc, #128]	; (8006ef4 <HAL_DMA_IRQHandler+0x6b0>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d022      	beq.n	8006ebc <HAL_DMA_IRQHandler+0x678>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a1f      	ldr	r2, [pc, #124]	; (8006ef8 <HAL_DMA_IRQHandler+0x6b4>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d01d      	beq.n	8006ebc <HAL_DMA_IRQHandler+0x678>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a1d      	ldr	r2, [pc, #116]	; (8006efc <HAL_DMA_IRQHandler+0x6b8>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d018      	beq.n	8006ebc <HAL_DMA_IRQHandler+0x678>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a1c      	ldr	r2, [pc, #112]	; (8006f00 <HAL_DMA_IRQHandler+0x6bc>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d013      	beq.n	8006ebc <HAL_DMA_IRQHandler+0x678>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a1a      	ldr	r2, [pc, #104]	; (8006f04 <HAL_DMA_IRQHandler+0x6c0>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d00e      	beq.n	8006ebc <HAL_DMA_IRQHandler+0x678>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a19      	ldr	r2, [pc, #100]	; (8006f08 <HAL_DMA_IRQHandler+0x6c4>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d009      	beq.n	8006ebc <HAL_DMA_IRQHandler+0x678>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a17      	ldr	r2, [pc, #92]	; (8006f0c <HAL_DMA_IRQHandler+0x6c8>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d004      	beq.n	8006ebc <HAL_DMA_IRQHandler+0x678>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a16      	ldr	r2, [pc, #88]	; (8006f10 <HAL_DMA_IRQHandler+0x6cc>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d12b      	bne.n	8006f14 <HAL_DMA_IRQHandler+0x6d0>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 0310 	and.w	r3, r3, #16
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	bf14      	ite	ne
 8006eca:	2301      	movne	r3, #1
 8006ecc:	2300      	moveq	r3, #0
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	e02a      	b.n	8006f28 <HAL_DMA_IRQHandler+0x6e4>
 8006ed2:	bf00      	nop
 8006ed4:	40020010 	.word	0x40020010
 8006ed8:	40020028 	.word	0x40020028
 8006edc:	40020040 	.word	0x40020040
 8006ee0:	40020058 	.word	0x40020058
 8006ee4:	40020070 	.word	0x40020070
 8006ee8:	40020088 	.word	0x40020088
 8006eec:	400200a0 	.word	0x400200a0
 8006ef0:	400200b8 	.word	0x400200b8
 8006ef4:	40020410 	.word	0x40020410
 8006ef8:	40020428 	.word	0x40020428
 8006efc:	40020440 	.word	0x40020440
 8006f00:	40020458 	.word	0x40020458
 8006f04:	40020470 	.word	0x40020470
 8006f08:	40020488 	.word	0x40020488
 8006f0c:	400204a0 	.word	0x400204a0
 8006f10:	400204b8 	.word	0x400204b8
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0302 	and.w	r3, r3, #2
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	bf14      	ite	ne
 8006f22:	2301      	movne	r3, #1
 8006f24:	2300      	moveq	r3, #0
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f000 8087 	beq.w	800703c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f32:	f003 031f 	and.w	r3, r3, #31
 8006f36:	2220      	movs	r2, #32
 8006f38:	409a      	lsls	r2, r3
 8006f3a:	6a3b      	ldr	r3, [r7, #32]
 8006f3c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b04      	cmp	r3, #4
 8006f48:	d139      	bne.n	8006fbe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f022 0216 	bic.w	r2, r2, #22
 8006f58:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	695a      	ldr	r2, [r3, #20]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f68:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d103      	bne.n	8006f7a <HAL_DMA_IRQHandler+0x736>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d007      	beq.n	8006f8a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f022 0208 	bic.w	r2, r2, #8
 8006f88:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f8e:	f003 031f 	and.w	r3, r3, #31
 8006f92:	223f      	movs	r2, #63	; 0x3f
 8006f94:	409a      	lsls	r2, r3
 8006f96:	6a3b      	ldr	r3, [r7, #32]
 8006f98:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	f000 8382 	beq.w	80076b8 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	4798      	blx	r3
          }
          return;
 8006fbc:	e37c      	b.n	80076b8 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d018      	beq.n	8006ffe <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d108      	bne.n	8006fec <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d02c      	beq.n	800703c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	4798      	blx	r3
 8006fea:	e027      	b.n	800703c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d023      	beq.n	800703c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	4798      	blx	r3
 8006ffc:	e01e      	b.n	800703c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007008:	2b00      	cmp	r3, #0
 800700a:	d10f      	bne.n	800702c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f022 0210 	bic.w	r2, r2, #16
 800701a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007030:	2b00      	cmp	r3, #0
 8007032:	d003      	beq.n	800703c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007040:	2b00      	cmp	r3, #0
 8007042:	f000 833e 	beq.w	80076c2 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800704a:	f003 0301 	and.w	r3, r3, #1
 800704e:	2b00      	cmp	r3, #0
 8007050:	f000 8088 	beq.w	8007164 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2204      	movs	r2, #4
 8007058:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a89      	ldr	r2, [pc, #548]	; (8007288 <HAL_DMA_IRQHandler+0xa44>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d04a      	beq.n	80070fc <HAL_DMA_IRQHandler+0x8b8>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a88      	ldr	r2, [pc, #544]	; (800728c <HAL_DMA_IRQHandler+0xa48>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d045      	beq.n	80070fc <HAL_DMA_IRQHandler+0x8b8>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a86      	ldr	r2, [pc, #536]	; (8007290 <HAL_DMA_IRQHandler+0xa4c>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d040      	beq.n	80070fc <HAL_DMA_IRQHandler+0x8b8>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a85      	ldr	r2, [pc, #532]	; (8007294 <HAL_DMA_IRQHandler+0xa50>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d03b      	beq.n	80070fc <HAL_DMA_IRQHandler+0x8b8>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a83      	ldr	r2, [pc, #524]	; (8007298 <HAL_DMA_IRQHandler+0xa54>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d036      	beq.n	80070fc <HAL_DMA_IRQHandler+0x8b8>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a82      	ldr	r2, [pc, #520]	; (800729c <HAL_DMA_IRQHandler+0xa58>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d031      	beq.n	80070fc <HAL_DMA_IRQHandler+0x8b8>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a80      	ldr	r2, [pc, #512]	; (80072a0 <HAL_DMA_IRQHandler+0xa5c>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d02c      	beq.n	80070fc <HAL_DMA_IRQHandler+0x8b8>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a7f      	ldr	r2, [pc, #508]	; (80072a4 <HAL_DMA_IRQHandler+0xa60>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d027      	beq.n	80070fc <HAL_DMA_IRQHandler+0x8b8>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a7d      	ldr	r2, [pc, #500]	; (80072a8 <HAL_DMA_IRQHandler+0xa64>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d022      	beq.n	80070fc <HAL_DMA_IRQHandler+0x8b8>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a7c      	ldr	r2, [pc, #496]	; (80072ac <HAL_DMA_IRQHandler+0xa68>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d01d      	beq.n	80070fc <HAL_DMA_IRQHandler+0x8b8>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a7a      	ldr	r2, [pc, #488]	; (80072b0 <HAL_DMA_IRQHandler+0xa6c>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d018      	beq.n	80070fc <HAL_DMA_IRQHandler+0x8b8>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a79      	ldr	r2, [pc, #484]	; (80072b4 <HAL_DMA_IRQHandler+0xa70>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d013      	beq.n	80070fc <HAL_DMA_IRQHandler+0x8b8>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a77      	ldr	r2, [pc, #476]	; (80072b8 <HAL_DMA_IRQHandler+0xa74>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d00e      	beq.n	80070fc <HAL_DMA_IRQHandler+0x8b8>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a76      	ldr	r2, [pc, #472]	; (80072bc <HAL_DMA_IRQHandler+0xa78>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d009      	beq.n	80070fc <HAL_DMA_IRQHandler+0x8b8>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a74      	ldr	r2, [pc, #464]	; (80072c0 <HAL_DMA_IRQHandler+0xa7c>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d004      	beq.n	80070fc <HAL_DMA_IRQHandler+0x8b8>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a73      	ldr	r2, [pc, #460]	; (80072c4 <HAL_DMA_IRQHandler+0xa80>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d108      	bne.n	800710e <HAL_DMA_IRQHandler+0x8ca>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f022 0201 	bic.w	r2, r2, #1
 800710a:	601a      	str	r2, [r3, #0]
 800710c:	e007      	b.n	800711e <HAL_DMA_IRQHandler+0x8da>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f022 0201 	bic.w	r2, r2, #1
 800711c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	3301      	adds	r3, #1
 8007122:	60fb      	str	r3, [r7, #12]
 8007124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007126:	429a      	cmp	r2, r3
 8007128:	d307      	bcc.n	800713a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0301 	and.w	r3, r3, #1
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1f2      	bne.n	800711e <HAL_DMA_IRQHandler+0x8da>
 8007138:	e000      	b.n	800713c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800713a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 0301 	and.w	r3, r3, #1
 8007146:	2b00      	cmp	r3, #0
 8007148:	d004      	beq.n	8007154 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2203      	movs	r2, #3
 800714e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007152:	e003      	b.n	800715c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007168:	2b00      	cmp	r3, #0
 800716a:	f000 82aa 	beq.w	80076c2 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	4798      	blx	r3
 8007176:	e2a4      	b.n	80076c2 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a52      	ldr	r2, [pc, #328]	; (80072c8 <HAL_DMA_IRQHandler+0xa84>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d04a      	beq.n	8007218 <HAL_DMA_IRQHandler+0x9d4>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a51      	ldr	r2, [pc, #324]	; (80072cc <HAL_DMA_IRQHandler+0xa88>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d045      	beq.n	8007218 <HAL_DMA_IRQHandler+0x9d4>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a4f      	ldr	r2, [pc, #316]	; (80072d0 <HAL_DMA_IRQHandler+0xa8c>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d040      	beq.n	8007218 <HAL_DMA_IRQHandler+0x9d4>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a4e      	ldr	r2, [pc, #312]	; (80072d4 <HAL_DMA_IRQHandler+0xa90>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d03b      	beq.n	8007218 <HAL_DMA_IRQHandler+0x9d4>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a4c      	ldr	r2, [pc, #304]	; (80072d8 <HAL_DMA_IRQHandler+0xa94>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d036      	beq.n	8007218 <HAL_DMA_IRQHandler+0x9d4>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a4b      	ldr	r2, [pc, #300]	; (80072dc <HAL_DMA_IRQHandler+0xa98>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d031      	beq.n	8007218 <HAL_DMA_IRQHandler+0x9d4>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a49      	ldr	r2, [pc, #292]	; (80072e0 <HAL_DMA_IRQHandler+0xa9c>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d02c      	beq.n	8007218 <HAL_DMA_IRQHandler+0x9d4>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a48      	ldr	r2, [pc, #288]	; (80072e4 <HAL_DMA_IRQHandler+0xaa0>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d027      	beq.n	8007218 <HAL_DMA_IRQHandler+0x9d4>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a46      	ldr	r2, [pc, #280]	; (80072e8 <HAL_DMA_IRQHandler+0xaa4>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d022      	beq.n	8007218 <HAL_DMA_IRQHandler+0x9d4>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a45      	ldr	r2, [pc, #276]	; (80072ec <HAL_DMA_IRQHandler+0xaa8>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d01d      	beq.n	8007218 <HAL_DMA_IRQHandler+0x9d4>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a43      	ldr	r2, [pc, #268]	; (80072f0 <HAL_DMA_IRQHandler+0xaac>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d018      	beq.n	8007218 <HAL_DMA_IRQHandler+0x9d4>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a42      	ldr	r2, [pc, #264]	; (80072f4 <HAL_DMA_IRQHandler+0xab0>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d013      	beq.n	8007218 <HAL_DMA_IRQHandler+0x9d4>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a40      	ldr	r2, [pc, #256]	; (80072f8 <HAL_DMA_IRQHandler+0xab4>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d00e      	beq.n	8007218 <HAL_DMA_IRQHandler+0x9d4>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a3f      	ldr	r2, [pc, #252]	; (80072fc <HAL_DMA_IRQHandler+0xab8>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d009      	beq.n	8007218 <HAL_DMA_IRQHandler+0x9d4>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a3d      	ldr	r2, [pc, #244]	; (8007300 <HAL_DMA_IRQHandler+0xabc>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d004      	beq.n	8007218 <HAL_DMA_IRQHandler+0x9d4>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a3c      	ldr	r2, [pc, #240]	; (8007304 <HAL_DMA_IRQHandler+0xac0>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d101      	bne.n	800721c <HAL_DMA_IRQHandler+0x9d8>
 8007218:	2301      	movs	r3, #1
 800721a:	e000      	b.n	800721e <HAL_DMA_IRQHandler+0x9da>
 800721c:	2300      	movs	r3, #0
 800721e:	2b00      	cmp	r3, #0
 8007220:	f000 824f 	beq.w	80076c2 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007230:	f003 031f 	and.w	r3, r3, #31
 8007234:	2204      	movs	r2, #4
 8007236:	409a      	lsls	r2, r3
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	4013      	ands	r3, r2
 800723c:	2b00      	cmp	r3, #0
 800723e:	f000 80dd 	beq.w	80073fc <HAL_DMA_IRQHandler+0xbb8>
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	f003 0304 	and.w	r3, r3, #4
 8007248:	2b00      	cmp	r3, #0
 800724a:	f000 80d7 	beq.w	80073fc <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007252:	f003 031f 	and.w	r3, r3, #31
 8007256:	2204      	movs	r2, #4
 8007258:	409a      	lsls	r2, r3
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007264:	2b00      	cmp	r3, #0
 8007266:	d059      	beq.n	800731c <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800726e:	2b00      	cmp	r3, #0
 8007270:	d14a      	bne.n	8007308 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007276:	2b00      	cmp	r3, #0
 8007278:	f000 8220 	beq.w	80076bc <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007284:	e21a      	b.n	80076bc <HAL_DMA_IRQHandler+0xe78>
 8007286:	bf00      	nop
 8007288:	40020010 	.word	0x40020010
 800728c:	40020028 	.word	0x40020028
 8007290:	40020040 	.word	0x40020040
 8007294:	40020058 	.word	0x40020058
 8007298:	40020070 	.word	0x40020070
 800729c:	40020088 	.word	0x40020088
 80072a0:	400200a0 	.word	0x400200a0
 80072a4:	400200b8 	.word	0x400200b8
 80072a8:	40020410 	.word	0x40020410
 80072ac:	40020428 	.word	0x40020428
 80072b0:	40020440 	.word	0x40020440
 80072b4:	40020458 	.word	0x40020458
 80072b8:	40020470 	.word	0x40020470
 80072bc:	40020488 	.word	0x40020488
 80072c0:	400204a0 	.word	0x400204a0
 80072c4:	400204b8 	.word	0x400204b8
 80072c8:	48022c08 	.word	0x48022c08
 80072cc:	48022c1c 	.word	0x48022c1c
 80072d0:	48022c30 	.word	0x48022c30
 80072d4:	48022c44 	.word	0x48022c44
 80072d8:	48022c58 	.word	0x48022c58
 80072dc:	48022c6c 	.word	0x48022c6c
 80072e0:	48022c80 	.word	0x48022c80
 80072e4:	48022c94 	.word	0x48022c94
 80072e8:	58025408 	.word	0x58025408
 80072ec:	5802541c 	.word	0x5802541c
 80072f0:	58025430 	.word	0x58025430
 80072f4:	58025444 	.word	0x58025444
 80072f8:	58025458 	.word	0x58025458
 80072fc:	5802546c 	.word	0x5802546c
 8007300:	58025480 	.word	0x58025480
 8007304:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730c:	2b00      	cmp	r3, #0
 800730e:	f000 81d5 	beq.w	80076bc <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800731a:	e1cf      	b.n	80076bc <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	f003 0320 	and.w	r3, r3, #32
 8007322:	2b00      	cmp	r3, #0
 8007324:	d160      	bne.n	80073e8 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a7f      	ldr	r2, [pc, #508]	; (8007528 <HAL_DMA_IRQHandler+0xce4>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d04a      	beq.n	80073c6 <HAL_DMA_IRQHandler+0xb82>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a7d      	ldr	r2, [pc, #500]	; (800752c <HAL_DMA_IRQHandler+0xce8>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d045      	beq.n	80073c6 <HAL_DMA_IRQHandler+0xb82>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a7c      	ldr	r2, [pc, #496]	; (8007530 <HAL_DMA_IRQHandler+0xcec>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d040      	beq.n	80073c6 <HAL_DMA_IRQHandler+0xb82>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a7a      	ldr	r2, [pc, #488]	; (8007534 <HAL_DMA_IRQHandler+0xcf0>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d03b      	beq.n	80073c6 <HAL_DMA_IRQHandler+0xb82>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a79      	ldr	r2, [pc, #484]	; (8007538 <HAL_DMA_IRQHandler+0xcf4>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d036      	beq.n	80073c6 <HAL_DMA_IRQHandler+0xb82>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a77      	ldr	r2, [pc, #476]	; (800753c <HAL_DMA_IRQHandler+0xcf8>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d031      	beq.n	80073c6 <HAL_DMA_IRQHandler+0xb82>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a76      	ldr	r2, [pc, #472]	; (8007540 <HAL_DMA_IRQHandler+0xcfc>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d02c      	beq.n	80073c6 <HAL_DMA_IRQHandler+0xb82>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a74      	ldr	r2, [pc, #464]	; (8007544 <HAL_DMA_IRQHandler+0xd00>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d027      	beq.n	80073c6 <HAL_DMA_IRQHandler+0xb82>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a73      	ldr	r2, [pc, #460]	; (8007548 <HAL_DMA_IRQHandler+0xd04>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d022      	beq.n	80073c6 <HAL_DMA_IRQHandler+0xb82>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a71      	ldr	r2, [pc, #452]	; (800754c <HAL_DMA_IRQHandler+0xd08>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d01d      	beq.n	80073c6 <HAL_DMA_IRQHandler+0xb82>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a70      	ldr	r2, [pc, #448]	; (8007550 <HAL_DMA_IRQHandler+0xd0c>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d018      	beq.n	80073c6 <HAL_DMA_IRQHandler+0xb82>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a6e      	ldr	r2, [pc, #440]	; (8007554 <HAL_DMA_IRQHandler+0xd10>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d013      	beq.n	80073c6 <HAL_DMA_IRQHandler+0xb82>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a6d      	ldr	r2, [pc, #436]	; (8007558 <HAL_DMA_IRQHandler+0xd14>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d00e      	beq.n	80073c6 <HAL_DMA_IRQHandler+0xb82>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a6b      	ldr	r2, [pc, #428]	; (800755c <HAL_DMA_IRQHandler+0xd18>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d009      	beq.n	80073c6 <HAL_DMA_IRQHandler+0xb82>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a6a      	ldr	r2, [pc, #424]	; (8007560 <HAL_DMA_IRQHandler+0xd1c>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d004      	beq.n	80073c6 <HAL_DMA_IRQHandler+0xb82>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a68      	ldr	r2, [pc, #416]	; (8007564 <HAL_DMA_IRQHandler+0xd20>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d108      	bne.n	80073d8 <HAL_DMA_IRQHandler+0xb94>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f022 0208 	bic.w	r2, r2, #8
 80073d4:	601a      	str	r2, [r3, #0]
 80073d6:	e007      	b.n	80073e8 <HAL_DMA_IRQHandler+0xba4>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f022 0204 	bic.w	r2, r2, #4
 80073e6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	f000 8165 	beq.w	80076bc <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80073fa:	e15f      	b.n	80076bc <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007400:	f003 031f 	and.w	r3, r3, #31
 8007404:	2202      	movs	r2, #2
 8007406:	409a      	lsls	r2, r3
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	4013      	ands	r3, r2
 800740c:	2b00      	cmp	r3, #0
 800740e:	f000 80c5 	beq.w	800759c <HAL_DMA_IRQHandler+0xd58>
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	f003 0302 	and.w	r3, r3, #2
 8007418:	2b00      	cmp	r3, #0
 800741a:	f000 80bf 	beq.w	800759c <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007422:	f003 031f 	and.w	r3, r3, #31
 8007426:	2202      	movs	r2, #2
 8007428:	409a      	lsls	r2, r3
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d018      	beq.n	800746a <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800743e:	2b00      	cmp	r3, #0
 8007440:	d109      	bne.n	8007456 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007446:	2b00      	cmp	r3, #0
 8007448:	f000 813a 	beq.w	80076c0 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007454:	e134      	b.n	80076c0 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800745a:	2b00      	cmp	r3, #0
 800745c:	f000 8130 	beq.w	80076c0 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007468:	e12a      	b.n	80076c0 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	f003 0320 	and.w	r3, r3, #32
 8007470:	2b00      	cmp	r3, #0
 8007472:	f040 8089 	bne.w	8007588 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a2b      	ldr	r2, [pc, #172]	; (8007528 <HAL_DMA_IRQHandler+0xce4>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d04a      	beq.n	8007516 <HAL_DMA_IRQHandler+0xcd2>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a29      	ldr	r2, [pc, #164]	; (800752c <HAL_DMA_IRQHandler+0xce8>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d045      	beq.n	8007516 <HAL_DMA_IRQHandler+0xcd2>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a28      	ldr	r2, [pc, #160]	; (8007530 <HAL_DMA_IRQHandler+0xcec>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d040      	beq.n	8007516 <HAL_DMA_IRQHandler+0xcd2>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a26      	ldr	r2, [pc, #152]	; (8007534 <HAL_DMA_IRQHandler+0xcf0>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d03b      	beq.n	8007516 <HAL_DMA_IRQHandler+0xcd2>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a25      	ldr	r2, [pc, #148]	; (8007538 <HAL_DMA_IRQHandler+0xcf4>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d036      	beq.n	8007516 <HAL_DMA_IRQHandler+0xcd2>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a23      	ldr	r2, [pc, #140]	; (800753c <HAL_DMA_IRQHandler+0xcf8>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d031      	beq.n	8007516 <HAL_DMA_IRQHandler+0xcd2>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a22      	ldr	r2, [pc, #136]	; (8007540 <HAL_DMA_IRQHandler+0xcfc>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d02c      	beq.n	8007516 <HAL_DMA_IRQHandler+0xcd2>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a20      	ldr	r2, [pc, #128]	; (8007544 <HAL_DMA_IRQHandler+0xd00>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d027      	beq.n	8007516 <HAL_DMA_IRQHandler+0xcd2>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a1f      	ldr	r2, [pc, #124]	; (8007548 <HAL_DMA_IRQHandler+0xd04>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d022      	beq.n	8007516 <HAL_DMA_IRQHandler+0xcd2>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a1d      	ldr	r2, [pc, #116]	; (800754c <HAL_DMA_IRQHandler+0xd08>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d01d      	beq.n	8007516 <HAL_DMA_IRQHandler+0xcd2>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a1c      	ldr	r2, [pc, #112]	; (8007550 <HAL_DMA_IRQHandler+0xd0c>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d018      	beq.n	8007516 <HAL_DMA_IRQHandler+0xcd2>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a1a      	ldr	r2, [pc, #104]	; (8007554 <HAL_DMA_IRQHandler+0xd10>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d013      	beq.n	8007516 <HAL_DMA_IRQHandler+0xcd2>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a19      	ldr	r2, [pc, #100]	; (8007558 <HAL_DMA_IRQHandler+0xd14>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d00e      	beq.n	8007516 <HAL_DMA_IRQHandler+0xcd2>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a17      	ldr	r2, [pc, #92]	; (800755c <HAL_DMA_IRQHandler+0xd18>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d009      	beq.n	8007516 <HAL_DMA_IRQHandler+0xcd2>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a16      	ldr	r2, [pc, #88]	; (8007560 <HAL_DMA_IRQHandler+0xd1c>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d004      	beq.n	8007516 <HAL_DMA_IRQHandler+0xcd2>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a14      	ldr	r2, [pc, #80]	; (8007564 <HAL_DMA_IRQHandler+0xd20>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d128      	bne.n	8007568 <HAL_DMA_IRQHandler+0xd24>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f022 0214 	bic.w	r2, r2, #20
 8007524:	601a      	str	r2, [r3, #0]
 8007526:	e027      	b.n	8007578 <HAL_DMA_IRQHandler+0xd34>
 8007528:	40020010 	.word	0x40020010
 800752c:	40020028 	.word	0x40020028
 8007530:	40020040 	.word	0x40020040
 8007534:	40020058 	.word	0x40020058
 8007538:	40020070 	.word	0x40020070
 800753c:	40020088 	.word	0x40020088
 8007540:	400200a0 	.word	0x400200a0
 8007544:	400200b8 	.word	0x400200b8
 8007548:	40020410 	.word	0x40020410
 800754c:	40020428 	.word	0x40020428
 8007550:	40020440 	.word	0x40020440
 8007554:	40020458 	.word	0x40020458
 8007558:	40020470 	.word	0x40020470
 800755c:	40020488 	.word	0x40020488
 8007560:	400204a0 	.word	0x400204a0
 8007564:	400204b8 	.word	0x400204b8
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f022 020a 	bic.w	r2, r2, #10
 8007576:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800758c:	2b00      	cmp	r3, #0
 800758e:	f000 8097 	beq.w	80076c0 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800759a:	e091      	b.n	80076c0 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075a0:	f003 031f 	and.w	r3, r3, #31
 80075a4:	2208      	movs	r2, #8
 80075a6:	409a      	lsls	r2, r3
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	4013      	ands	r3, r2
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f000 8088 	beq.w	80076c2 <HAL_DMA_IRQHandler+0xe7e>
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	f003 0308 	and.w	r3, r3, #8
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f000 8082 	beq.w	80076c2 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a41      	ldr	r2, [pc, #260]	; (80076c8 <HAL_DMA_IRQHandler+0xe84>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d04a      	beq.n	800765e <HAL_DMA_IRQHandler+0xe1a>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a3f      	ldr	r2, [pc, #252]	; (80076cc <HAL_DMA_IRQHandler+0xe88>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d045      	beq.n	800765e <HAL_DMA_IRQHandler+0xe1a>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a3e      	ldr	r2, [pc, #248]	; (80076d0 <HAL_DMA_IRQHandler+0xe8c>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d040      	beq.n	800765e <HAL_DMA_IRQHandler+0xe1a>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a3c      	ldr	r2, [pc, #240]	; (80076d4 <HAL_DMA_IRQHandler+0xe90>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d03b      	beq.n	800765e <HAL_DMA_IRQHandler+0xe1a>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a3b      	ldr	r2, [pc, #236]	; (80076d8 <HAL_DMA_IRQHandler+0xe94>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d036      	beq.n	800765e <HAL_DMA_IRQHandler+0xe1a>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a39      	ldr	r2, [pc, #228]	; (80076dc <HAL_DMA_IRQHandler+0xe98>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d031      	beq.n	800765e <HAL_DMA_IRQHandler+0xe1a>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a38      	ldr	r2, [pc, #224]	; (80076e0 <HAL_DMA_IRQHandler+0xe9c>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d02c      	beq.n	800765e <HAL_DMA_IRQHandler+0xe1a>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a36      	ldr	r2, [pc, #216]	; (80076e4 <HAL_DMA_IRQHandler+0xea0>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d027      	beq.n	800765e <HAL_DMA_IRQHandler+0xe1a>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a35      	ldr	r2, [pc, #212]	; (80076e8 <HAL_DMA_IRQHandler+0xea4>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d022      	beq.n	800765e <HAL_DMA_IRQHandler+0xe1a>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a33      	ldr	r2, [pc, #204]	; (80076ec <HAL_DMA_IRQHandler+0xea8>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d01d      	beq.n	800765e <HAL_DMA_IRQHandler+0xe1a>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a32      	ldr	r2, [pc, #200]	; (80076f0 <HAL_DMA_IRQHandler+0xeac>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d018      	beq.n	800765e <HAL_DMA_IRQHandler+0xe1a>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a30      	ldr	r2, [pc, #192]	; (80076f4 <HAL_DMA_IRQHandler+0xeb0>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d013      	beq.n	800765e <HAL_DMA_IRQHandler+0xe1a>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a2f      	ldr	r2, [pc, #188]	; (80076f8 <HAL_DMA_IRQHandler+0xeb4>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d00e      	beq.n	800765e <HAL_DMA_IRQHandler+0xe1a>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a2d      	ldr	r2, [pc, #180]	; (80076fc <HAL_DMA_IRQHandler+0xeb8>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d009      	beq.n	800765e <HAL_DMA_IRQHandler+0xe1a>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a2c      	ldr	r2, [pc, #176]	; (8007700 <HAL_DMA_IRQHandler+0xebc>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d004      	beq.n	800765e <HAL_DMA_IRQHandler+0xe1a>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a2a      	ldr	r2, [pc, #168]	; (8007704 <HAL_DMA_IRQHandler+0xec0>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d108      	bne.n	8007670 <HAL_DMA_IRQHandler+0xe2c>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f022 021c 	bic.w	r2, r2, #28
 800766c:	601a      	str	r2, [r3, #0]
 800766e:	e007      	b.n	8007680 <HAL_DMA_IRQHandler+0xe3c>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f022 020e 	bic.w	r2, r2, #14
 800767e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007684:	f003 031f 	and.w	r3, r3, #31
 8007688:	2201      	movs	r2, #1
 800768a:	409a      	lsls	r2, r3
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2201      	movs	r2, #1
 800769a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d009      	beq.n	80076c2 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	4798      	blx	r3
 80076b6:	e004      	b.n	80076c2 <HAL_DMA_IRQHandler+0xe7e>
          return;
 80076b8:	bf00      	nop
 80076ba:	e002      	b.n	80076c2 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80076bc:	bf00      	nop
 80076be:	e000      	b.n	80076c2 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80076c0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80076c2:	3728      	adds	r7, #40	; 0x28
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	40020010 	.word	0x40020010
 80076cc:	40020028 	.word	0x40020028
 80076d0:	40020040 	.word	0x40020040
 80076d4:	40020058 	.word	0x40020058
 80076d8:	40020070 	.word	0x40020070
 80076dc:	40020088 	.word	0x40020088
 80076e0:	400200a0 	.word	0x400200a0
 80076e4:	400200b8 	.word	0x400200b8
 80076e8:	40020410 	.word	0x40020410
 80076ec:	40020428 	.word	0x40020428
 80076f0:	40020440 	.word	0x40020440
 80076f4:	40020458 	.word	0x40020458
 80076f8:	40020470 	.word	0x40020470
 80076fc:	40020488 	.word	0x40020488
 8007700:	400204a0 	.word	0x400204a0
 8007704:	400204b8 	.word	0x400204b8

08007708 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007708:	b480      	push	{r7}
 800770a:	b087      	sub	sp, #28
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	607a      	str	r2, [r7, #4]
 8007714:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800771a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007720:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a7f      	ldr	r2, [pc, #508]	; (8007924 <DMA_SetConfig+0x21c>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d072      	beq.n	8007812 <DMA_SetConfig+0x10a>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a7d      	ldr	r2, [pc, #500]	; (8007928 <DMA_SetConfig+0x220>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d06d      	beq.n	8007812 <DMA_SetConfig+0x10a>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a7c      	ldr	r2, [pc, #496]	; (800792c <DMA_SetConfig+0x224>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d068      	beq.n	8007812 <DMA_SetConfig+0x10a>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a7a      	ldr	r2, [pc, #488]	; (8007930 <DMA_SetConfig+0x228>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d063      	beq.n	8007812 <DMA_SetConfig+0x10a>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a79      	ldr	r2, [pc, #484]	; (8007934 <DMA_SetConfig+0x22c>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d05e      	beq.n	8007812 <DMA_SetConfig+0x10a>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a77      	ldr	r2, [pc, #476]	; (8007938 <DMA_SetConfig+0x230>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d059      	beq.n	8007812 <DMA_SetConfig+0x10a>
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a76      	ldr	r2, [pc, #472]	; (800793c <DMA_SetConfig+0x234>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d054      	beq.n	8007812 <DMA_SetConfig+0x10a>
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a74      	ldr	r2, [pc, #464]	; (8007940 <DMA_SetConfig+0x238>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d04f      	beq.n	8007812 <DMA_SetConfig+0x10a>
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a73      	ldr	r2, [pc, #460]	; (8007944 <DMA_SetConfig+0x23c>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d04a      	beq.n	8007812 <DMA_SetConfig+0x10a>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a71      	ldr	r2, [pc, #452]	; (8007948 <DMA_SetConfig+0x240>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d045      	beq.n	8007812 <DMA_SetConfig+0x10a>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a70      	ldr	r2, [pc, #448]	; (800794c <DMA_SetConfig+0x244>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d040      	beq.n	8007812 <DMA_SetConfig+0x10a>
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a6e      	ldr	r2, [pc, #440]	; (8007950 <DMA_SetConfig+0x248>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d03b      	beq.n	8007812 <DMA_SetConfig+0x10a>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a6d      	ldr	r2, [pc, #436]	; (8007954 <DMA_SetConfig+0x24c>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d036      	beq.n	8007812 <DMA_SetConfig+0x10a>
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a6b      	ldr	r2, [pc, #428]	; (8007958 <DMA_SetConfig+0x250>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d031      	beq.n	8007812 <DMA_SetConfig+0x10a>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a6a      	ldr	r2, [pc, #424]	; (800795c <DMA_SetConfig+0x254>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d02c      	beq.n	8007812 <DMA_SetConfig+0x10a>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a68      	ldr	r2, [pc, #416]	; (8007960 <DMA_SetConfig+0x258>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d027      	beq.n	8007812 <DMA_SetConfig+0x10a>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a67      	ldr	r2, [pc, #412]	; (8007964 <DMA_SetConfig+0x25c>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d022      	beq.n	8007812 <DMA_SetConfig+0x10a>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a65      	ldr	r2, [pc, #404]	; (8007968 <DMA_SetConfig+0x260>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d01d      	beq.n	8007812 <DMA_SetConfig+0x10a>
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a64      	ldr	r2, [pc, #400]	; (800796c <DMA_SetConfig+0x264>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d018      	beq.n	8007812 <DMA_SetConfig+0x10a>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a62      	ldr	r2, [pc, #392]	; (8007970 <DMA_SetConfig+0x268>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d013      	beq.n	8007812 <DMA_SetConfig+0x10a>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a61      	ldr	r2, [pc, #388]	; (8007974 <DMA_SetConfig+0x26c>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d00e      	beq.n	8007812 <DMA_SetConfig+0x10a>
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a5f      	ldr	r2, [pc, #380]	; (8007978 <DMA_SetConfig+0x270>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d009      	beq.n	8007812 <DMA_SetConfig+0x10a>
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a5e      	ldr	r2, [pc, #376]	; (800797c <DMA_SetConfig+0x274>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d004      	beq.n	8007812 <DMA_SetConfig+0x10a>
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a5c      	ldr	r2, [pc, #368]	; (8007980 <DMA_SetConfig+0x278>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d101      	bne.n	8007816 <DMA_SetConfig+0x10e>
 8007812:	2301      	movs	r3, #1
 8007814:	e000      	b.n	8007818 <DMA_SetConfig+0x110>
 8007816:	2300      	movs	r3, #0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00d      	beq.n	8007838 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007820:	68fa      	ldr	r2, [r7, #12]
 8007822:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007824:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800782a:	2b00      	cmp	r3, #0
 800782c:	d004      	beq.n	8007838 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007836:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a39      	ldr	r2, [pc, #228]	; (8007924 <DMA_SetConfig+0x21c>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d04a      	beq.n	80078d8 <DMA_SetConfig+0x1d0>
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a38      	ldr	r2, [pc, #224]	; (8007928 <DMA_SetConfig+0x220>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d045      	beq.n	80078d8 <DMA_SetConfig+0x1d0>
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a36      	ldr	r2, [pc, #216]	; (800792c <DMA_SetConfig+0x224>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d040      	beq.n	80078d8 <DMA_SetConfig+0x1d0>
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a35      	ldr	r2, [pc, #212]	; (8007930 <DMA_SetConfig+0x228>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d03b      	beq.n	80078d8 <DMA_SetConfig+0x1d0>
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a33      	ldr	r2, [pc, #204]	; (8007934 <DMA_SetConfig+0x22c>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d036      	beq.n	80078d8 <DMA_SetConfig+0x1d0>
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a32      	ldr	r2, [pc, #200]	; (8007938 <DMA_SetConfig+0x230>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d031      	beq.n	80078d8 <DMA_SetConfig+0x1d0>
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a30      	ldr	r2, [pc, #192]	; (800793c <DMA_SetConfig+0x234>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d02c      	beq.n	80078d8 <DMA_SetConfig+0x1d0>
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a2f      	ldr	r2, [pc, #188]	; (8007940 <DMA_SetConfig+0x238>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d027      	beq.n	80078d8 <DMA_SetConfig+0x1d0>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a2d      	ldr	r2, [pc, #180]	; (8007944 <DMA_SetConfig+0x23c>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d022      	beq.n	80078d8 <DMA_SetConfig+0x1d0>
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a2c      	ldr	r2, [pc, #176]	; (8007948 <DMA_SetConfig+0x240>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d01d      	beq.n	80078d8 <DMA_SetConfig+0x1d0>
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a2a      	ldr	r2, [pc, #168]	; (800794c <DMA_SetConfig+0x244>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d018      	beq.n	80078d8 <DMA_SetConfig+0x1d0>
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a29      	ldr	r2, [pc, #164]	; (8007950 <DMA_SetConfig+0x248>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d013      	beq.n	80078d8 <DMA_SetConfig+0x1d0>
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a27      	ldr	r2, [pc, #156]	; (8007954 <DMA_SetConfig+0x24c>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d00e      	beq.n	80078d8 <DMA_SetConfig+0x1d0>
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a26      	ldr	r2, [pc, #152]	; (8007958 <DMA_SetConfig+0x250>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d009      	beq.n	80078d8 <DMA_SetConfig+0x1d0>
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a24      	ldr	r2, [pc, #144]	; (800795c <DMA_SetConfig+0x254>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d004      	beq.n	80078d8 <DMA_SetConfig+0x1d0>
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a23      	ldr	r2, [pc, #140]	; (8007960 <DMA_SetConfig+0x258>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d101      	bne.n	80078dc <DMA_SetConfig+0x1d4>
 80078d8:	2301      	movs	r3, #1
 80078da:	e000      	b.n	80078de <DMA_SetConfig+0x1d6>
 80078dc:	2300      	movs	r3, #0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d059      	beq.n	8007996 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078e6:	f003 031f 	and.w	r3, r3, #31
 80078ea:	223f      	movs	r2, #63	; 0x3f
 80078ec:	409a      	lsls	r2, r3
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007900:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	683a      	ldr	r2, [r7, #0]
 8007908:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	2b40      	cmp	r3, #64	; 0x40
 8007910:	d138      	bne.n	8007984 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	68ba      	ldr	r2, [r7, #8]
 8007920:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007922:	e0ae      	b.n	8007a82 <DMA_SetConfig+0x37a>
 8007924:	40020010 	.word	0x40020010
 8007928:	40020028 	.word	0x40020028
 800792c:	40020040 	.word	0x40020040
 8007930:	40020058 	.word	0x40020058
 8007934:	40020070 	.word	0x40020070
 8007938:	40020088 	.word	0x40020088
 800793c:	400200a0 	.word	0x400200a0
 8007940:	400200b8 	.word	0x400200b8
 8007944:	40020410 	.word	0x40020410
 8007948:	40020428 	.word	0x40020428
 800794c:	40020440 	.word	0x40020440
 8007950:	40020458 	.word	0x40020458
 8007954:	40020470 	.word	0x40020470
 8007958:	40020488 	.word	0x40020488
 800795c:	400204a0 	.word	0x400204a0
 8007960:	400204b8 	.word	0x400204b8
 8007964:	58025408 	.word	0x58025408
 8007968:	5802541c 	.word	0x5802541c
 800796c:	58025430 	.word	0x58025430
 8007970:	58025444 	.word	0x58025444
 8007974:	58025458 	.word	0x58025458
 8007978:	5802546c 	.word	0x5802546c
 800797c:	58025480 	.word	0x58025480
 8007980:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	68ba      	ldr	r2, [r7, #8]
 800798a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	60da      	str	r2, [r3, #12]
}
 8007994:	e075      	b.n	8007a82 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a3d      	ldr	r2, [pc, #244]	; (8007a90 <DMA_SetConfig+0x388>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d04a      	beq.n	8007a36 <DMA_SetConfig+0x32e>
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a3b      	ldr	r2, [pc, #236]	; (8007a94 <DMA_SetConfig+0x38c>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d045      	beq.n	8007a36 <DMA_SetConfig+0x32e>
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a3a      	ldr	r2, [pc, #232]	; (8007a98 <DMA_SetConfig+0x390>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d040      	beq.n	8007a36 <DMA_SetConfig+0x32e>
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a38      	ldr	r2, [pc, #224]	; (8007a9c <DMA_SetConfig+0x394>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d03b      	beq.n	8007a36 <DMA_SetConfig+0x32e>
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a37      	ldr	r2, [pc, #220]	; (8007aa0 <DMA_SetConfig+0x398>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d036      	beq.n	8007a36 <DMA_SetConfig+0x32e>
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a35      	ldr	r2, [pc, #212]	; (8007aa4 <DMA_SetConfig+0x39c>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d031      	beq.n	8007a36 <DMA_SetConfig+0x32e>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a34      	ldr	r2, [pc, #208]	; (8007aa8 <DMA_SetConfig+0x3a0>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d02c      	beq.n	8007a36 <DMA_SetConfig+0x32e>
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a32      	ldr	r2, [pc, #200]	; (8007aac <DMA_SetConfig+0x3a4>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d027      	beq.n	8007a36 <DMA_SetConfig+0x32e>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a31      	ldr	r2, [pc, #196]	; (8007ab0 <DMA_SetConfig+0x3a8>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d022      	beq.n	8007a36 <DMA_SetConfig+0x32e>
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a2f      	ldr	r2, [pc, #188]	; (8007ab4 <DMA_SetConfig+0x3ac>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d01d      	beq.n	8007a36 <DMA_SetConfig+0x32e>
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a2e      	ldr	r2, [pc, #184]	; (8007ab8 <DMA_SetConfig+0x3b0>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d018      	beq.n	8007a36 <DMA_SetConfig+0x32e>
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a2c      	ldr	r2, [pc, #176]	; (8007abc <DMA_SetConfig+0x3b4>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d013      	beq.n	8007a36 <DMA_SetConfig+0x32e>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a2b      	ldr	r2, [pc, #172]	; (8007ac0 <DMA_SetConfig+0x3b8>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d00e      	beq.n	8007a36 <DMA_SetConfig+0x32e>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a29      	ldr	r2, [pc, #164]	; (8007ac4 <DMA_SetConfig+0x3bc>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d009      	beq.n	8007a36 <DMA_SetConfig+0x32e>
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a28      	ldr	r2, [pc, #160]	; (8007ac8 <DMA_SetConfig+0x3c0>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d004      	beq.n	8007a36 <DMA_SetConfig+0x32e>
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a26      	ldr	r2, [pc, #152]	; (8007acc <DMA_SetConfig+0x3c4>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d101      	bne.n	8007a3a <DMA_SetConfig+0x332>
 8007a36:	2301      	movs	r3, #1
 8007a38:	e000      	b.n	8007a3c <DMA_SetConfig+0x334>
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d020      	beq.n	8007a82 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a44:	f003 031f 	and.w	r3, r3, #31
 8007a48:	2201      	movs	r2, #1
 8007a4a:	409a      	lsls	r2, r3
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	683a      	ldr	r2, [r7, #0]
 8007a56:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	2b40      	cmp	r3, #64	; 0x40
 8007a5e:	d108      	bne.n	8007a72 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68ba      	ldr	r2, [r7, #8]
 8007a6e:	60da      	str	r2, [r3, #12]
}
 8007a70:	e007      	b.n	8007a82 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	68ba      	ldr	r2, [r7, #8]
 8007a78:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	60da      	str	r2, [r3, #12]
}
 8007a82:	bf00      	nop
 8007a84:	371c      	adds	r7, #28
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop
 8007a90:	48022c08 	.word	0x48022c08
 8007a94:	48022c1c 	.word	0x48022c1c
 8007a98:	48022c30 	.word	0x48022c30
 8007a9c:	48022c44 	.word	0x48022c44
 8007aa0:	48022c58 	.word	0x48022c58
 8007aa4:	48022c6c 	.word	0x48022c6c
 8007aa8:	48022c80 	.word	0x48022c80
 8007aac:	48022c94 	.word	0x48022c94
 8007ab0:	58025408 	.word	0x58025408
 8007ab4:	5802541c 	.word	0x5802541c
 8007ab8:	58025430 	.word	0x58025430
 8007abc:	58025444 	.word	0x58025444
 8007ac0:	58025458 	.word	0x58025458
 8007ac4:	5802546c 	.word	0x5802546c
 8007ac8:	58025480 	.word	0x58025480
 8007acc:	58025494 	.word	0x58025494

08007ad0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a42      	ldr	r2, [pc, #264]	; (8007be8 <DMA_CalcBaseAndBitshift+0x118>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d04a      	beq.n	8007b78 <DMA_CalcBaseAndBitshift+0xa8>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a41      	ldr	r2, [pc, #260]	; (8007bec <DMA_CalcBaseAndBitshift+0x11c>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d045      	beq.n	8007b78 <DMA_CalcBaseAndBitshift+0xa8>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a3f      	ldr	r2, [pc, #252]	; (8007bf0 <DMA_CalcBaseAndBitshift+0x120>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d040      	beq.n	8007b78 <DMA_CalcBaseAndBitshift+0xa8>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a3e      	ldr	r2, [pc, #248]	; (8007bf4 <DMA_CalcBaseAndBitshift+0x124>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d03b      	beq.n	8007b78 <DMA_CalcBaseAndBitshift+0xa8>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a3c      	ldr	r2, [pc, #240]	; (8007bf8 <DMA_CalcBaseAndBitshift+0x128>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d036      	beq.n	8007b78 <DMA_CalcBaseAndBitshift+0xa8>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a3b      	ldr	r2, [pc, #236]	; (8007bfc <DMA_CalcBaseAndBitshift+0x12c>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d031      	beq.n	8007b78 <DMA_CalcBaseAndBitshift+0xa8>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a39      	ldr	r2, [pc, #228]	; (8007c00 <DMA_CalcBaseAndBitshift+0x130>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d02c      	beq.n	8007b78 <DMA_CalcBaseAndBitshift+0xa8>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a38      	ldr	r2, [pc, #224]	; (8007c04 <DMA_CalcBaseAndBitshift+0x134>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d027      	beq.n	8007b78 <DMA_CalcBaseAndBitshift+0xa8>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a36      	ldr	r2, [pc, #216]	; (8007c08 <DMA_CalcBaseAndBitshift+0x138>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d022      	beq.n	8007b78 <DMA_CalcBaseAndBitshift+0xa8>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a35      	ldr	r2, [pc, #212]	; (8007c0c <DMA_CalcBaseAndBitshift+0x13c>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d01d      	beq.n	8007b78 <DMA_CalcBaseAndBitshift+0xa8>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a33      	ldr	r2, [pc, #204]	; (8007c10 <DMA_CalcBaseAndBitshift+0x140>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d018      	beq.n	8007b78 <DMA_CalcBaseAndBitshift+0xa8>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a32      	ldr	r2, [pc, #200]	; (8007c14 <DMA_CalcBaseAndBitshift+0x144>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d013      	beq.n	8007b78 <DMA_CalcBaseAndBitshift+0xa8>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a30      	ldr	r2, [pc, #192]	; (8007c18 <DMA_CalcBaseAndBitshift+0x148>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d00e      	beq.n	8007b78 <DMA_CalcBaseAndBitshift+0xa8>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a2f      	ldr	r2, [pc, #188]	; (8007c1c <DMA_CalcBaseAndBitshift+0x14c>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d009      	beq.n	8007b78 <DMA_CalcBaseAndBitshift+0xa8>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a2d      	ldr	r2, [pc, #180]	; (8007c20 <DMA_CalcBaseAndBitshift+0x150>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d004      	beq.n	8007b78 <DMA_CalcBaseAndBitshift+0xa8>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a2c      	ldr	r2, [pc, #176]	; (8007c24 <DMA_CalcBaseAndBitshift+0x154>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d101      	bne.n	8007b7c <DMA_CalcBaseAndBitshift+0xac>
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e000      	b.n	8007b7e <DMA_CalcBaseAndBitshift+0xae>
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d024      	beq.n	8007bcc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	3b10      	subs	r3, #16
 8007b8a:	4a27      	ldr	r2, [pc, #156]	; (8007c28 <DMA_CalcBaseAndBitshift+0x158>)
 8007b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b90:	091b      	lsrs	r3, r3, #4
 8007b92:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f003 0307 	and.w	r3, r3, #7
 8007b9a:	4a24      	ldr	r2, [pc, #144]	; (8007c2c <DMA_CalcBaseAndBitshift+0x15c>)
 8007b9c:	5cd3      	ldrb	r3, [r2, r3]
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2b03      	cmp	r3, #3
 8007ba8:	d908      	bls.n	8007bbc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	461a      	mov	r2, r3
 8007bb0:	4b1f      	ldr	r3, [pc, #124]	; (8007c30 <DMA_CalcBaseAndBitshift+0x160>)
 8007bb2:	4013      	ands	r3, r2
 8007bb4:	1d1a      	adds	r2, r3, #4
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	659a      	str	r2, [r3, #88]	; 0x58
 8007bba:	e00d      	b.n	8007bd8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	4b1b      	ldr	r3, [pc, #108]	; (8007c30 <DMA_CalcBaseAndBitshift+0x160>)
 8007bc4:	4013      	ands	r3, r2
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	6593      	str	r3, [r2, #88]	; 0x58
 8007bca:	e005      	b.n	8007bd8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3714      	adds	r7, #20
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr
 8007be8:	40020010 	.word	0x40020010
 8007bec:	40020028 	.word	0x40020028
 8007bf0:	40020040 	.word	0x40020040
 8007bf4:	40020058 	.word	0x40020058
 8007bf8:	40020070 	.word	0x40020070
 8007bfc:	40020088 	.word	0x40020088
 8007c00:	400200a0 	.word	0x400200a0
 8007c04:	400200b8 	.word	0x400200b8
 8007c08:	40020410 	.word	0x40020410
 8007c0c:	40020428 	.word	0x40020428
 8007c10:	40020440 	.word	0x40020440
 8007c14:	40020458 	.word	0x40020458
 8007c18:	40020470 	.word	0x40020470
 8007c1c:	40020488 	.word	0x40020488
 8007c20:	400204a0 	.word	0x400204a0
 8007c24:	400204b8 	.word	0x400204b8
 8007c28:	aaaaaaab 	.word	0xaaaaaaab
 8007c2c:	0801d308 	.word	0x0801d308
 8007c30:	fffffc00 	.word	0xfffffc00

08007c34 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	699b      	ldr	r3, [r3, #24]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d120      	bne.n	8007c8a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4c:	2b03      	cmp	r3, #3
 8007c4e:	d858      	bhi.n	8007d02 <DMA_CheckFifoParam+0xce>
 8007c50:	a201      	add	r2, pc, #4	; (adr r2, 8007c58 <DMA_CheckFifoParam+0x24>)
 8007c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c56:	bf00      	nop
 8007c58:	08007c69 	.word	0x08007c69
 8007c5c:	08007c7b 	.word	0x08007c7b
 8007c60:	08007c69 	.word	0x08007c69
 8007c64:	08007d03 	.word	0x08007d03
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d048      	beq.n	8007d06 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007c78:	e045      	b.n	8007d06 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007c82:	d142      	bne.n	8007d0a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007c88:	e03f      	b.n	8007d0a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	699b      	ldr	r3, [r3, #24]
 8007c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c92:	d123      	bne.n	8007cdc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c98:	2b03      	cmp	r3, #3
 8007c9a:	d838      	bhi.n	8007d0e <DMA_CheckFifoParam+0xda>
 8007c9c:	a201      	add	r2, pc, #4	; (adr r2, 8007ca4 <DMA_CheckFifoParam+0x70>)
 8007c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca2:	bf00      	nop
 8007ca4:	08007cb5 	.word	0x08007cb5
 8007ca8:	08007cbb 	.word	0x08007cbb
 8007cac:	08007cb5 	.word	0x08007cb5
 8007cb0:	08007ccd 	.word	0x08007ccd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	73fb      	strb	r3, [r7, #15]
        break;
 8007cb8:	e030      	b.n	8007d1c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d025      	beq.n	8007d12 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007cca:	e022      	b.n	8007d12 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007cd4:	d11f      	bne.n	8007d16 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007cda:	e01c      	b.n	8007d16 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce0:	2b02      	cmp	r3, #2
 8007ce2:	d902      	bls.n	8007cea <DMA_CheckFifoParam+0xb6>
 8007ce4:	2b03      	cmp	r3, #3
 8007ce6:	d003      	beq.n	8007cf0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007ce8:	e018      	b.n	8007d1c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	73fb      	strb	r3, [r7, #15]
        break;
 8007cee:	e015      	b.n	8007d1c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00e      	beq.n	8007d1a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	73fb      	strb	r3, [r7, #15]
    break;
 8007d00:	e00b      	b.n	8007d1a <DMA_CheckFifoParam+0xe6>
        break;
 8007d02:	bf00      	nop
 8007d04:	e00a      	b.n	8007d1c <DMA_CheckFifoParam+0xe8>
        break;
 8007d06:	bf00      	nop
 8007d08:	e008      	b.n	8007d1c <DMA_CheckFifoParam+0xe8>
        break;
 8007d0a:	bf00      	nop
 8007d0c:	e006      	b.n	8007d1c <DMA_CheckFifoParam+0xe8>
        break;
 8007d0e:	bf00      	nop
 8007d10:	e004      	b.n	8007d1c <DMA_CheckFifoParam+0xe8>
        break;
 8007d12:	bf00      	nop
 8007d14:	e002      	b.n	8007d1c <DMA_CheckFifoParam+0xe8>
        break;
 8007d16:	bf00      	nop
 8007d18:	e000      	b.n	8007d1c <DMA_CheckFifoParam+0xe8>
    break;
 8007d1a:	bf00      	nop
    }
  }

  return status;
 8007d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3714      	adds	r7, #20
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop

08007d2c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a38      	ldr	r2, [pc, #224]	; (8007e20 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d022      	beq.n	8007d8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a36      	ldr	r2, [pc, #216]	; (8007e24 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d01d      	beq.n	8007d8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a35      	ldr	r2, [pc, #212]	; (8007e28 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d018      	beq.n	8007d8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a33      	ldr	r2, [pc, #204]	; (8007e2c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d013      	beq.n	8007d8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a32      	ldr	r2, [pc, #200]	; (8007e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d00e      	beq.n	8007d8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a30      	ldr	r2, [pc, #192]	; (8007e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d009      	beq.n	8007d8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a2f      	ldr	r2, [pc, #188]	; (8007e38 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d004      	beq.n	8007d8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a2d      	ldr	r2, [pc, #180]	; (8007e3c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d101      	bne.n	8007d8e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e000      	b.n	8007d90 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007d8e:	2300      	movs	r3, #0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d01a      	beq.n	8007dca <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	3b08      	subs	r3, #8
 8007d9c:	4a28      	ldr	r2, [pc, #160]	; (8007e40 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007da2:	091b      	lsrs	r3, r3, #4
 8007da4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	4b26      	ldr	r3, [pc, #152]	; (8007e44 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007daa:	4413      	add	r3, r2
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	461a      	mov	r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	4a24      	ldr	r2, [pc, #144]	; (8007e48 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007db8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f003 031f 	and.w	r3, r3, #31
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	409a      	lsls	r2, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007dc8:	e024      	b.n	8007e14 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	3b10      	subs	r3, #16
 8007dd2:	4a1e      	ldr	r2, [pc, #120]	; (8007e4c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8007dd8:	091b      	lsrs	r3, r3, #4
 8007dda:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	4a1c      	ldr	r2, [pc, #112]	; (8007e50 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d806      	bhi.n	8007df2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	4a1b      	ldr	r2, [pc, #108]	; (8007e54 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d902      	bls.n	8007df2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	3308      	adds	r3, #8
 8007df0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	4b18      	ldr	r3, [pc, #96]	; (8007e58 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007df6:	4413      	add	r3, r2
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a16      	ldr	r2, [pc, #88]	; (8007e5c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007e04:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f003 031f 	and.w	r3, r3, #31
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	409a      	lsls	r2, r3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007e14:	bf00      	nop
 8007e16:	3714      	adds	r7, #20
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr
 8007e20:	58025408 	.word	0x58025408
 8007e24:	5802541c 	.word	0x5802541c
 8007e28:	58025430 	.word	0x58025430
 8007e2c:	58025444 	.word	0x58025444
 8007e30:	58025458 	.word	0x58025458
 8007e34:	5802546c 	.word	0x5802546c
 8007e38:	58025480 	.word	0x58025480
 8007e3c:	58025494 	.word	0x58025494
 8007e40:	cccccccd 	.word	0xcccccccd
 8007e44:	16009600 	.word	0x16009600
 8007e48:	58025880 	.word	0x58025880
 8007e4c:	aaaaaaab 	.word	0xaaaaaaab
 8007e50:	400204b8 	.word	0x400204b8
 8007e54:	4002040f 	.word	0x4002040f
 8007e58:	10008200 	.word	0x10008200
 8007e5c:	40020880 	.word	0x40020880

08007e60 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d04a      	beq.n	8007f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2b08      	cmp	r3, #8
 8007e7a:	d847      	bhi.n	8007f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a25      	ldr	r2, [pc, #148]	; (8007f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d022      	beq.n	8007ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a24      	ldr	r2, [pc, #144]	; (8007f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d01d      	beq.n	8007ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a22      	ldr	r2, [pc, #136]	; (8007f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d018      	beq.n	8007ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a21      	ldr	r2, [pc, #132]	; (8007f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d013      	beq.n	8007ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a1f      	ldr	r2, [pc, #124]	; (8007f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d00e      	beq.n	8007ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a1e      	ldr	r2, [pc, #120]	; (8007f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d009      	beq.n	8007ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a1c      	ldr	r2, [pc, #112]	; (8007f30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d004      	beq.n	8007ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a1b      	ldr	r2, [pc, #108]	; (8007f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d101      	bne.n	8007ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e000      	b.n	8007ed2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00a      	beq.n	8007eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	4b17      	ldr	r3, [pc, #92]	; (8007f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007eda:	4413      	add	r3, r2
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	461a      	mov	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4a15      	ldr	r2, [pc, #84]	; (8007f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007ee8:	671a      	str	r2, [r3, #112]	; 0x70
 8007eea:	e009      	b.n	8007f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007eec:	68fa      	ldr	r2, [r7, #12]
 8007eee:	4b14      	ldr	r3, [pc, #80]	; (8007f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007ef0:	4413      	add	r3, r2
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	4a11      	ldr	r2, [pc, #68]	; (8007f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007efe:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	3b01      	subs	r3, #1
 8007f04:	2201      	movs	r2, #1
 8007f06:	409a      	lsls	r2, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007f0c:	bf00      	nop
 8007f0e:	3714      	adds	r7, #20
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr
 8007f18:	58025408 	.word	0x58025408
 8007f1c:	5802541c 	.word	0x5802541c
 8007f20:	58025430 	.word	0x58025430
 8007f24:	58025444 	.word	0x58025444
 8007f28:	58025458 	.word	0x58025458
 8007f2c:	5802546c 	.word	0x5802546c
 8007f30:	58025480 	.word	0x58025480
 8007f34:	58025494 	.word	0x58025494
 8007f38:	1600963f 	.word	0x1600963f
 8007f3c:	58025940 	.word	0x58025940
 8007f40:	1000823f 	.word	0x1000823f
 8007f44:	40020940 	.word	0x40020940

08007f48 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d101      	bne.n	8007f5a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e04f      	b.n	8007ffa <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d106      	bne.n	8007f74 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f7f8 fda6 	bl	8000ac0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2202      	movs	r2, #2
 8007f78:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	681a      	ldr	r2, [r3, #0]
 8007f82:	4b20      	ldr	r3, [pc, #128]	; (8008004 <HAL_DMA2D_Init+0xbc>)
 8007f84:	4013      	ands	r3, r2
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	6851      	ldr	r1, [r2, #4]
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	69d2      	ldr	r2, [r2, #28]
 8007f8e:	4311      	orrs	r1, r2
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	6812      	ldr	r2, [r2, #0]
 8007f94:	430b      	orrs	r3, r1
 8007f96:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f9e:	4b1a      	ldr	r3, [pc, #104]	; (8008008 <HAL_DMA2D_Init+0xc0>)
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	6891      	ldr	r1, [r2, #8]
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	6992      	ldr	r2, [r2, #24]
 8007faa:	4311      	orrs	r1, r2
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	6812      	ldr	r2, [r2, #0]
 8007fb0:	430b      	orrs	r3, r1
 8007fb2:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007fba:	4b14      	ldr	r3, [pc, #80]	; (800800c <HAL_DMA2D_Init+0xc4>)
 8007fbc:	4013      	ands	r3, r2
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	68d1      	ldr	r1, [r2, #12]
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	6812      	ldr	r2, [r2, #0]
 8007fc6:	430b      	orrs	r3, r1
 8007fc8:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fd0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	691b      	ldr	r3, [r3, #16]
 8007fd8:	051a      	lsls	r2, r3, #20
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	695b      	ldr	r3, [r3, #20]
 8007fde:	055b      	lsls	r3, r3, #21
 8007fe0:	431a      	orrs	r2, r3
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	430a      	orrs	r2, r1
 8007fe8:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3708      	adds	r7, #8
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	fff8ffbf 	.word	0xfff8ffbf
 8008008:	fffffef8 	.word	0xfffffef8
 800800c:	ffff0000 	.word	0xffff0000

08008010 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b086      	sub	sp, #24
 8008014:	af02      	add	r7, sp, #8
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	607a      	str	r2, [r7, #4]
 800801c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8008024:	2b01      	cmp	r3, #1
 8008026:	d101      	bne.n	800802c <HAL_DMA2D_Start+0x1c>
 8008028:	2302      	movs	r3, #2
 800802a:	e018      	b.n	800805e <HAL_DMA2D_Start+0x4e>
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2202      	movs	r2, #2
 8008038:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	9300      	str	r3, [sp, #0]
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	68b9      	ldr	r1, [r7, #8]
 8008046:	68f8      	ldr	r0, [r7, #12]
 8008048:	f000 fab4 	bl	80085b4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f042 0201 	orr.w	r2, r2, #1
 800805a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3710      	adds	r7, #16
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}

08008066 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8008066:	b580      	push	{r7, lr}
 8008068:	b086      	sub	sp, #24
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
 800806e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8008070:	2300      	movs	r3, #0
 8008072:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f003 0301 	and.w	r3, r3, #1
 800807e:	2b00      	cmp	r3, #0
 8008080:	d056      	beq.n	8008130 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8008082:	f7fc fb81 	bl	8004788 <HAL_GetTick>
 8008086:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8008088:	e04b      	b.n	8008122 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8008098:	2b00      	cmp	r3, #0
 800809a:	d023      	beq.n	80080e4 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f003 0320 	and.w	r3, r3, #32
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d005      	beq.n	80080b2 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080aa:	f043 0202 	orr.w	r2, r3, #2
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f003 0301 	and.w	r3, r3, #1
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d005      	beq.n	80080c8 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080c0:	f043 0201 	orr.w	r2, r3, #1
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2221      	movs	r2, #33	; 0x21
 80080ce:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2204      	movs	r2, #4
 80080d4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80080e0:	2301      	movs	r3, #1
 80080e2:	e0a5      	b.n	8008230 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ea:	d01a      	beq.n	8008122 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80080ec:	f7fc fb4c 	bl	8004788 <HAL_GetTick>
 80080f0:	4602      	mov	r2, r0
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	1ad3      	subs	r3, r2, r3
 80080f6:	683a      	ldr	r2, [r7, #0]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d302      	bcc.n	8008102 <HAL_DMA2D_PollForTransfer+0x9c>
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d10f      	bne.n	8008122 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008106:	f043 0220 	orr.w	r2, r3, #32
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2203      	movs	r2, #3
 8008112:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 800811e:	2303      	movs	r3, #3
 8008120:	e086      	b.n	8008230 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	f003 0302 	and.w	r3, r3, #2
 800812c:	2b00      	cmp	r3, #0
 800812e:	d0ac      	beq.n	800808a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	69db      	ldr	r3, [r3, #28]
 8008136:	f003 0320 	and.w	r3, r3, #32
 800813a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008142:	f003 0320 	and.w	r3, r3, #32
 8008146:	693a      	ldr	r2, [r7, #16]
 8008148:	4313      	orrs	r3, r2
 800814a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d061      	beq.n	8008216 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8008152:	f7fc fb19 	bl	8004788 <HAL_GetTick>
 8008156:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8008158:	e056      	b.n	8008208 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8008168:	2b00      	cmp	r3, #0
 800816a:	d02e      	beq.n	80081ca <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f003 0308 	and.w	r3, r3, #8
 8008172:	2b00      	cmp	r3, #0
 8008174:	d005      	beq.n	8008182 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800817a:	f043 0204 	orr.w	r2, r3, #4
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f003 0320 	and.w	r3, r3, #32
 8008188:	2b00      	cmp	r3, #0
 800818a:	d005      	beq.n	8008198 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008190:	f043 0202 	orr.w	r2, r3, #2
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f003 0301 	and.w	r3, r3, #1
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d005      	beq.n	80081ae <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081a6:	f043 0201 	orr.w	r2, r3, #1
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2229      	movs	r2, #41	; 0x29
 80081b4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2204      	movs	r2, #4
 80081ba:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	e032      	b.n	8008230 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d0:	d01a      	beq.n	8008208 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80081d2:	f7fc fad9 	bl	8004788 <HAL_GetTick>
 80081d6:	4602      	mov	r2, r0
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	683a      	ldr	r2, [r7, #0]
 80081de:	429a      	cmp	r2, r3
 80081e0:	d302      	bcc.n	80081e8 <HAL_DMA2D_PollForTransfer+0x182>
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d10f      	bne.n	8008208 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081ec:	f043 0220 	orr.w	r2, r3, #32
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2203      	movs	r2, #3
 80081f8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8008204:	2303      	movs	r3, #3
 8008206:	e013      	b.n	8008230 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	f003 0310 	and.w	r3, r3, #16
 8008212:	2b00      	cmp	r3, #0
 8008214:	d0a1      	beq.n	800815a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	2212      	movs	r2, #18
 800821c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2201      	movs	r2, #1
 8008222:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	3718      	adds	r7, #24
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f003 0301 	and.w	r3, r3, #1
 8008256:	2b00      	cmp	r3, #0
 8008258:	d026      	beq.n	80082a8 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008260:	2b00      	cmp	r3, #0
 8008262:	d021      	beq.n	80082a8 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008272:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008278:	f043 0201 	orr.w	r2, r3, #1
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	2201      	movs	r2, #1
 8008286:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2204      	movs	r2, #4
 800828c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829c:	2b00      	cmp	r3, #0
 800829e:	d003      	beq.n	80082a8 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f003 0320 	and.w	r3, r3, #32
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d026      	beq.n	8008300 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d021      	beq.n	8008300 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80082ca:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2220      	movs	r2, #32
 80082d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082d8:	f043 0202 	orr.w	r2, r3, #2
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2204      	movs	r2, #4
 80082e4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d003      	beq.n	8008300 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f003 0308 	and.w	r3, r3, #8
 8008306:	2b00      	cmp	r3, #0
 8008308:	d026      	beq.n	8008358 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008310:	2b00      	cmp	r3, #0
 8008312:	d021      	beq.n	8008358 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008322:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	2208      	movs	r2, #8
 800832a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008330:	f043 0204 	orr.w	r2, r3, #4
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2204      	movs	r2, #4
 800833c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834c:	2b00      	cmp	r3, #0
 800834e:	d003      	beq.n	8008358 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f003 0304 	and.w	r3, r3, #4
 800835e:	2b00      	cmp	r3, #0
 8008360:	d013      	beq.n	800838a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008368:	2b00      	cmp	r3, #0
 800836a:	d00e      	beq.n	800838a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800837a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2204      	movs	r2, #4
 8008382:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 f853 	bl	8008430 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f003 0302 	and.w	r3, r3, #2
 8008390:	2b00      	cmp	r3, #0
 8008392:	d024      	beq.n	80083de <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800839a:	2b00      	cmp	r3, #0
 800839c:	d01f      	beq.n	80083de <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80083ac:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2202      	movs	r2, #2
 80083b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2201      	movs	r2, #1
 80083c2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a1b      	ldr	r3, [r3, #32]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d003      	beq.n	80083de <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a1b      	ldr	r3, [r3, #32]
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f003 0310 	and.w	r3, r3, #16
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d01f      	beq.n	8008428 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d01a      	beq.n	8008428 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008400:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	2210      	movs	r2, #16
 8008408:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2201      	movs	r2, #1
 8008416:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f80e 	bl	8008444 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8008428:	bf00      	nop
 800842a:	3710      	adds	r7, #16
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8008438:	bf00      	nop
 800843a:	370c      	adds	r7, #12
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800844c:	bf00      	nop
 800844e:	370c      	adds	r7, #12
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8008458:	b480      	push	{r7}
 800845a:	b087      	sub	sp, #28
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8008474:	2b01      	cmp	r3, #1
 8008476:	d101      	bne.n	800847c <HAL_DMA2D_ConfigLayer+0x24>
 8008478:	2302      	movs	r3, #2
 800847a:	e092      	b.n	80085a2 <HAL_DMA2D_ConfigLayer+0x14a>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2202      	movs	r2, #2
 8008488:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800848c:	683a      	ldr	r2, [r7, #0]
 800848e:	4613      	mov	r3, r2
 8008490:	00db      	lsls	r3, r3, #3
 8008492:	1a9b      	subs	r3, r3, r2
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	3328      	adds	r3, #40	; 0x28
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	4413      	add	r3, r2
 800849c:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	685a      	ldr	r2, [r3, #4]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	041b      	lsls	r3, r3, #16
 80084a8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80084b0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	695b      	ldr	r3, [r3, #20]
 80084b6:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80084b8:	4313      	orrs	r3, r2
 80084ba:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80084bc:	4b3c      	ldr	r3, [pc, #240]	; (80085b0 <HAL_DMA2D_ConfigLayer+0x158>)
 80084be:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	2b0a      	cmp	r3, #10
 80084c6:	d003      	beq.n	80084d0 <HAL_DMA2D_ConfigLayer+0x78>
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	2b09      	cmp	r3, #9
 80084ce:	d107      	bne.n	80084e0 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80084d8:	693a      	ldr	r2, [r7, #16]
 80084da:	4313      	orrs	r3, r2
 80084dc:	613b      	str	r3, [r7, #16]
 80084de:	e005      	b.n	80084ec <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	061b      	lsls	r3, r3, #24
 80084e6:	693a      	ldr	r2, [r7, #16]
 80084e8:	4313      	orrs	r3, r2
 80084ea:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d120      	bne.n	8008534 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	43db      	mvns	r3, r3
 80084fc:	ea02 0103 	and.w	r1, r2, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	430a      	orrs	r2, r1
 8008508:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	6812      	ldr	r2, [r2, #0]
 8008512:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	2b0a      	cmp	r3, #10
 800851a:	d003      	beq.n	8008524 <HAL_DMA2D_ConfigLayer+0xcc>
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	2b09      	cmp	r3, #9
 8008522:	d135      	bne.n	8008590 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	68da      	ldr	r2, [r3, #12]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8008530:	629a      	str	r2, [r3, #40]	; 0x28
 8008532:	e02d      	b.n	8008590 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	2b0b      	cmp	r3, #11
 800853a:	d109      	bne.n	8008550 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	699b      	ldr	r3, [r3, #24]
 8008540:	049b      	lsls	r3, r3, #18
 8008542:	693a      	ldr	r2, [r7, #16]
 8008544:	4313      	orrs	r3, r2
 8008546:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800854e:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	69da      	ldr	r2, [r3, #28]
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	43db      	mvns	r3, r3
 800855a:	ea02 0103 	and.w	r1, r2, r3
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	693a      	ldr	r2, [r7, #16]
 8008564:	430a      	orrs	r2, r1
 8008566:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	6812      	ldr	r2, [r2, #0]
 8008570:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	2b0a      	cmp	r3, #10
 8008578:	d003      	beq.n	8008582 <HAL_DMA2D_ConfigLayer+0x12a>
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	2b09      	cmp	r3, #9
 8008580:	d106      	bne.n	8008590 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	68da      	ldr	r2, [r3, #12]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800858e:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2201      	movs	r2, #1
 8008594:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	371c      	adds	r7, #28
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr
 80085ae:	bf00      	nop
 80085b0:	ff33000f 	.word	0xff33000f

080085b4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b08b      	sub	sp, #44	; 0x2c
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	607a      	str	r2, [r7, #4]
 80085c0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085c8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	041a      	lsls	r2, r3, #16
 80085d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d2:	431a      	orrs	r2, r3
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	430a      	orrs	r2, r1
 80085da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80085ec:	d174      	bne.n	80086d8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80085f4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80085fc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008604:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	b2db      	uxtb	r3, r3
 800860a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d108      	bne.n	8008626 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8008614:	69ba      	ldr	r2, [r7, #24]
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	431a      	orrs	r2, r3
 800861a:	6a3b      	ldr	r3, [r7, #32]
 800861c:	4313      	orrs	r3, r2
 800861e:	697a      	ldr	r2, [r7, #20]
 8008620:	4313      	orrs	r3, r2
 8008622:	627b      	str	r3, [r7, #36]	; 0x24
 8008624:	e053      	b.n	80086ce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	2b01      	cmp	r3, #1
 800862c:	d106      	bne.n	800863c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800862e:	69ba      	ldr	r2, [r7, #24]
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	4313      	orrs	r3, r2
 8008634:	697a      	ldr	r2, [r7, #20]
 8008636:	4313      	orrs	r3, r2
 8008638:	627b      	str	r3, [r7, #36]	; 0x24
 800863a:	e048      	b.n	80086ce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	2b02      	cmp	r3, #2
 8008642:	d111      	bne.n	8008668 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8008644:	69fb      	ldr	r3, [r7, #28]
 8008646:	0cdb      	lsrs	r3, r3, #19
 8008648:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	0a9b      	lsrs	r3, r3, #10
 800864e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	08db      	lsrs	r3, r3, #3
 8008654:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8008656:	69bb      	ldr	r3, [r7, #24]
 8008658:	015a      	lsls	r2, r3, #5
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	02db      	lsls	r3, r3, #11
 800865e:	4313      	orrs	r3, r2
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	4313      	orrs	r3, r2
 8008664:	627b      	str	r3, [r7, #36]	; 0x24
 8008666:	e032      	b.n	80086ce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	2b03      	cmp	r3, #3
 800866e:	d117      	bne.n	80086a0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8008670:	6a3b      	ldr	r3, [r7, #32]
 8008672:	0fdb      	lsrs	r3, r3, #31
 8008674:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	0cdb      	lsrs	r3, r3, #19
 800867a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	0adb      	lsrs	r3, r3, #11
 8008680:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	08db      	lsrs	r3, r3, #3
 8008686:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8008688:	69bb      	ldr	r3, [r7, #24]
 800868a:	015a      	lsls	r2, r3, #5
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	029b      	lsls	r3, r3, #10
 8008690:	431a      	orrs	r2, r3
 8008692:	6a3b      	ldr	r3, [r7, #32]
 8008694:	03db      	lsls	r3, r3, #15
 8008696:	4313      	orrs	r3, r2
 8008698:	697a      	ldr	r2, [r7, #20]
 800869a:	4313      	orrs	r3, r2
 800869c:	627b      	str	r3, [r7, #36]	; 0x24
 800869e:	e016      	b.n	80086ce <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80086a0:	6a3b      	ldr	r3, [r7, #32]
 80086a2:	0f1b      	lsrs	r3, r3, #28
 80086a4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	0d1b      	lsrs	r3, r3, #20
 80086aa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80086ac:	69bb      	ldr	r3, [r7, #24]
 80086ae:	0b1b      	lsrs	r3, r3, #12
 80086b0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	091b      	lsrs	r3, r3, #4
 80086b6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80086b8:	69bb      	ldr	r3, [r7, #24]
 80086ba:	011a      	lsls	r2, r3, #4
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	021b      	lsls	r3, r3, #8
 80086c0:	431a      	orrs	r2, r3
 80086c2:	6a3b      	ldr	r3, [r7, #32]
 80086c4:	031b      	lsls	r3, r3, #12
 80086c6:	4313      	orrs	r3, r2
 80086c8:	697a      	ldr	r2, [r7, #20]
 80086ca:	4313      	orrs	r3, r2
 80086cc:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086d4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80086d6:	e00d      	b.n	80086f4 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80086e0:	d104      	bne.n	80086ec <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	68ba      	ldr	r2, [r7, #8]
 80086e8:	615a      	str	r2, [r3, #20]
}
 80086ea:	e003      	b.n	80086f4 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	68ba      	ldr	r2, [r7, #8]
 80086f2:	60da      	str	r2, [r3, #12]
}
 80086f4:	bf00      	nop
 80086f6:	372c      	adds	r7, #44	; 0x2c
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b086      	sub	sp, #24
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	607a      	str	r2, [r7, #4]
 800870c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800870e:	2300      	movs	r3, #0
 8008710:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	2b80      	cmp	r3, #128	; 0x80
 8008718:	d105      	bne.n	8008726 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008720:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008722:	2301      	movs	r3, #1
 8008724:	e315      	b.n	8008d52 <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800872c:	2b01      	cmp	r3, #1
 800872e:	d101      	bne.n	8008734 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8008730:	2302      	movs	r3, #2
 8008732:	e30e      	b.n	8008d52 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008742:	b2db      	uxtb	r3, r3
 8008744:	2b01      	cmp	r3, #1
 8008746:	f040 82fd 	bne.w	8008d44 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2202      	movs	r2, #2
 800874e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2200      	movs	r2, #0
 8008756:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a82      	ldr	r2, [pc, #520]	; (8008968 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d04a      	beq.n	80087f8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a81      	ldr	r2, [pc, #516]	; (800896c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d045      	beq.n	80087f8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a7f      	ldr	r2, [pc, #508]	; (8008970 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d040      	beq.n	80087f8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a7e      	ldr	r2, [pc, #504]	; (8008974 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d03b      	beq.n	80087f8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a7c      	ldr	r2, [pc, #496]	; (8008978 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d036      	beq.n	80087f8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a7b      	ldr	r2, [pc, #492]	; (800897c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d031      	beq.n	80087f8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a79      	ldr	r2, [pc, #484]	; (8008980 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d02c      	beq.n	80087f8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a78      	ldr	r2, [pc, #480]	; (8008984 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d027      	beq.n	80087f8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a76      	ldr	r2, [pc, #472]	; (8008988 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d022      	beq.n	80087f8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a75      	ldr	r2, [pc, #468]	; (800898c <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d01d      	beq.n	80087f8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a73      	ldr	r2, [pc, #460]	; (8008990 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d018      	beq.n	80087f8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a72      	ldr	r2, [pc, #456]	; (8008994 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d013      	beq.n	80087f8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a70      	ldr	r2, [pc, #448]	; (8008998 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d00e      	beq.n	80087f8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a6f      	ldr	r2, [pc, #444]	; (800899c <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d009      	beq.n	80087f8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a6d      	ldr	r2, [pc, #436]	; (80089a0 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d004      	beq.n	80087f8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a6c      	ldr	r2, [pc, #432]	; (80089a4 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d101      	bne.n	80087fc <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 80087f8:	2301      	movs	r3, #1
 80087fa:	e000      	b.n	80087fe <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 80087fc:	2300      	movs	r3, #0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d018      	beq.n	8008834 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008810:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	683a      	ldr	r2, [r7, #0]
 8008818:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800881e:	3308      	adds	r3, #8
 8008820:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008826:	f003 031f 	and.w	r3, r3, #31
 800882a:	223f      	movs	r2, #63	; 0x3f
 800882c:	409a      	lsls	r2, r3
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	601a      	str	r2, [r3, #0]
 8008832:	e018      	b.n	8008866 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	6819      	ldr	r1, [r3, #0]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	f248 0320 	movw	r3, #32800	; 0x8020
 8008842:	430b      	orrs	r3, r1
 8008844:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	683a      	ldr	r2, [r7, #0]
 800884c:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008852:	3304      	adds	r3, #4
 8008854:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800885a:	f003 031f 	and.w	r3, r3, #31
 800885e:	2201      	movs	r2, #1
 8008860:	409a      	lsls	r2, r3
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008866:	6a3b      	ldr	r3, [r7, #32]
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	68b9      	ldr	r1, [r7, #8]
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	f000 fb41 	bl	8008ef4 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a3c      	ldr	r2, [pc, #240]	; (8008968 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d072      	beq.n	8008962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a3a      	ldr	r2, [pc, #232]	; (800896c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d06d      	beq.n	8008962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a39      	ldr	r2, [pc, #228]	; (8008970 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d068      	beq.n	8008962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a37      	ldr	r2, [pc, #220]	; (8008974 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d063      	beq.n	8008962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a36      	ldr	r2, [pc, #216]	; (8008978 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d05e      	beq.n	8008962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a34      	ldr	r2, [pc, #208]	; (800897c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d059      	beq.n	8008962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a33      	ldr	r2, [pc, #204]	; (8008980 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d054      	beq.n	8008962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a31      	ldr	r2, [pc, #196]	; (8008984 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d04f      	beq.n	8008962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a30      	ldr	r2, [pc, #192]	; (8008988 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d04a      	beq.n	8008962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a2e      	ldr	r2, [pc, #184]	; (800898c <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d045      	beq.n	8008962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a2d      	ldr	r2, [pc, #180]	; (8008990 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d040      	beq.n	8008962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a2b      	ldr	r2, [pc, #172]	; (8008994 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d03b      	beq.n	8008962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a2a      	ldr	r2, [pc, #168]	; (8008998 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d036      	beq.n	8008962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a28      	ldr	r2, [pc, #160]	; (800899c <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d031      	beq.n	8008962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a27      	ldr	r2, [pc, #156]	; (80089a0 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d02c      	beq.n	8008962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a25      	ldr	r2, [pc, #148]	; (80089a4 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d027      	beq.n	8008962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a24      	ldr	r2, [pc, #144]	; (80089a8 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d022      	beq.n	8008962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a22      	ldr	r2, [pc, #136]	; (80089ac <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d01d      	beq.n	8008962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a21      	ldr	r2, [pc, #132]	; (80089b0 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d018      	beq.n	8008962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a1f      	ldr	r2, [pc, #124]	; (80089b4 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d013      	beq.n	8008962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a1e      	ldr	r2, [pc, #120]	; (80089b8 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d00e      	beq.n	8008962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a1c      	ldr	r2, [pc, #112]	; (80089bc <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d009      	beq.n	8008962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a1b      	ldr	r2, [pc, #108]	; (80089c0 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d004      	beq.n	8008962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a19      	ldr	r2, [pc, #100]	; (80089c4 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d132      	bne.n	80089c8 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8008962:	2301      	movs	r3, #1
 8008964:	e031      	b.n	80089ca <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8008966:	bf00      	nop
 8008968:	40020010 	.word	0x40020010
 800896c:	40020028 	.word	0x40020028
 8008970:	40020040 	.word	0x40020040
 8008974:	40020058 	.word	0x40020058
 8008978:	40020070 	.word	0x40020070
 800897c:	40020088 	.word	0x40020088
 8008980:	400200a0 	.word	0x400200a0
 8008984:	400200b8 	.word	0x400200b8
 8008988:	40020410 	.word	0x40020410
 800898c:	40020428 	.word	0x40020428
 8008990:	40020440 	.word	0x40020440
 8008994:	40020458 	.word	0x40020458
 8008998:	40020470 	.word	0x40020470
 800899c:	40020488 	.word	0x40020488
 80089a0:	400204a0 	.word	0x400204a0
 80089a4:	400204b8 	.word	0x400204b8
 80089a8:	58025408 	.word	0x58025408
 80089ac:	5802541c 	.word	0x5802541c
 80089b0:	58025430 	.word	0x58025430
 80089b4:	58025444 	.word	0x58025444
 80089b8:	58025458 	.word	0x58025458
 80089bc:	5802546c 	.word	0x5802546c
 80089c0:	58025480 	.word	0x58025480
 80089c4:	58025494 	.word	0x58025494
 80089c8:	2300      	movs	r3, #0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d00d      	beq.n	80089ea <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089d2:	68fa      	ldr	r2, [r7, #12]
 80089d4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80089d6:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d004      	beq.n	80089ea <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089e4:	68fa      	ldr	r2, [r7, #12]
 80089e6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80089e8:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a3b      	ldr	r2, [pc, #236]	; (8008adc <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d04a      	beq.n	8008a8a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a39      	ldr	r2, [pc, #228]	; (8008ae0 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d045      	beq.n	8008a8a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a38      	ldr	r2, [pc, #224]	; (8008ae4 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d040      	beq.n	8008a8a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a36      	ldr	r2, [pc, #216]	; (8008ae8 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d03b      	beq.n	8008a8a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a35      	ldr	r2, [pc, #212]	; (8008aec <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d036      	beq.n	8008a8a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a33      	ldr	r2, [pc, #204]	; (8008af0 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d031      	beq.n	8008a8a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a32      	ldr	r2, [pc, #200]	; (8008af4 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d02c      	beq.n	8008a8a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a30      	ldr	r2, [pc, #192]	; (8008af8 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d027      	beq.n	8008a8a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a2f      	ldr	r2, [pc, #188]	; (8008afc <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d022      	beq.n	8008a8a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a2d      	ldr	r2, [pc, #180]	; (8008b00 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d01d      	beq.n	8008a8a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a2c      	ldr	r2, [pc, #176]	; (8008b04 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d018      	beq.n	8008a8a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a2a      	ldr	r2, [pc, #168]	; (8008b08 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d013      	beq.n	8008a8a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a29      	ldr	r2, [pc, #164]	; (8008b0c <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d00e      	beq.n	8008a8a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a27      	ldr	r2, [pc, #156]	; (8008b10 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d009      	beq.n	8008a8a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a26      	ldr	r2, [pc, #152]	; (8008b14 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d004      	beq.n	8008a8a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a24      	ldr	r2, [pc, #144]	; (8008b18 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d101      	bne.n	8008a8e <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e000      	b.n	8008a90 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8008a8e:	2300      	movs	r3, #0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d043      	beq.n	8008b1c <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f023 021e 	bic.w	r2, r3, #30
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f042 0216 	orr.w	r2, r2, #22
 8008aa6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	695a      	ldr	r2, [r3, #20]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008ab6:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d103      	bne.n	8008ac8 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d043      	beq.n	8008b50 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f042 0208 	orr.w	r2, r2, #8
 8008ad6:	601a      	str	r2, [r3, #0]
 8008ad8:	e03a      	b.n	8008b50 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8008ada:	bf00      	nop
 8008adc:	40020010 	.word	0x40020010
 8008ae0:	40020028 	.word	0x40020028
 8008ae4:	40020040 	.word	0x40020040
 8008ae8:	40020058 	.word	0x40020058
 8008aec:	40020070 	.word	0x40020070
 8008af0:	40020088 	.word	0x40020088
 8008af4:	400200a0 	.word	0x400200a0
 8008af8:	400200b8 	.word	0x400200b8
 8008afc:	40020410 	.word	0x40020410
 8008b00:	40020428 	.word	0x40020428
 8008b04:	40020440 	.word	0x40020440
 8008b08:	40020458 	.word	0x40020458
 8008b0c:	40020470 	.word	0x40020470
 8008b10:	40020488 	.word	0x40020488
 8008b14:	400204a0 	.word	0x400204a0
 8008b18:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f023 020e 	bic.w	r2, r3, #14
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f042 020a 	orr.w	r2, r2, #10
 8008b2e:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d103      	bne.n	8008b40 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d007      	beq.n	8008b50 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f042 0204 	orr.w	r2, r2, #4
 8008b4e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a81      	ldr	r2, [pc, #516]	; (8008d5c <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d072      	beq.n	8008c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a80      	ldr	r2, [pc, #512]	; (8008d60 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d06d      	beq.n	8008c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a7e      	ldr	r2, [pc, #504]	; (8008d64 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d068      	beq.n	8008c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a7d      	ldr	r2, [pc, #500]	; (8008d68 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d063      	beq.n	8008c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a7b      	ldr	r2, [pc, #492]	; (8008d6c <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d05e      	beq.n	8008c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a7a      	ldr	r2, [pc, #488]	; (8008d70 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d059      	beq.n	8008c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a78      	ldr	r2, [pc, #480]	; (8008d74 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d054      	beq.n	8008c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a77      	ldr	r2, [pc, #476]	; (8008d78 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d04f      	beq.n	8008c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a75      	ldr	r2, [pc, #468]	; (8008d7c <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d04a      	beq.n	8008c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a74      	ldr	r2, [pc, #464]	; (8008d80 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d045      	beq.n	8008c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a72      	ldr	r2, [pc, #456]	; (8008d84 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d040      	beq.n	8008c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a71      	ldr	r2, [pc, #452]	; (8008d88 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d03b      	beq.n	8008c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a6f      	ldr	r2, [pc, #444]	; (8008d8c <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d036      	beq.n	8008c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a6e      	ldr	r2, [pc, #440]	; (8008d90 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d031      	beq.n	8008c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a6c      	ldr	r2, [pc, #432]	; (8008d94 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d02c      	beq.n	8008c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a6b      	ldr	r2, [pc, #428]	; (8008d98 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d027      	beq.n	8008c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a69      	ldr	r2, [pc, #420]	; (8008d9c <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d022      	beq.n	8008c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a68      	ldr	r2, [pc, #416]	; (8008da0 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d01d      	beq.n	8008c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a66      	ldr	r2, [pc, #408]	; (8008da4 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d018      	beq.n	8008c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a65      	ldr	r2, [pc, #404]	; (8008da8 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d013      	beq.n	8008c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a63      	ldr	r2, [pc, #396]	; (8008dac <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d00e      	beq.n	8008c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a62      	ldr	r2, [pc, #392]	; (8008db0 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d009      	beq.n	8008c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a60      	ldr	r2, [pc, #384]	; (8008db4 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d004      	beq.n	8008c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a5f      	ldr	r2, [pc, #380]	; (8008db8 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d101      	bne.n	8008c44 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8008c40:	2301      	movs	r3, #1
 8008c42:	e000      	b.n	8008c46 <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8008c44:	2300      	movs	r3, #0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d01a      	beq.n	8008c80 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d007      	beq.n	8008c68 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c66:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d007      	beq.n	8008c80 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c7e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a35      	ldr	r2, [pc, #212]	; (8008d5c <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d04a      	beq.n	8008d20 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a34      	ldr	r2, [pc, #208]	; (8008d60 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d045      	beq.n	8008d20 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a32      	ldr	r2, [pc, #200]	; (8008d64 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d040      	beq.n	8008d20 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a31      	ldr	r2, [pc, #196]	; (8008d68 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d03b      	beq.n	8008d20 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a2f      	ldr	r2, [pc, #188]	; (8008d6c <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d036      	beq.n	8008d20 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a2e      	ldr	r2, [pc, #184]	; (8008d70 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d031      	beq.n	8008d20 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a2c      	ldr	r2, [pc, #176]	; (8008d74 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d02c      	beq.n	8008d20 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a2b      	ldr	r2, [pc, #172]	; (8008d78 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d027      	beq.n	8008d20 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a29      	ldr	r2, [pc, #164]	; (8008d7c <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d022      	beq.n	8008d20 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a28      	ldr	r2, [pc, #160]	; (8008d80 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d01d      	beq.n	8008d20 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a26      	ldr	r2, [pc, #152]	; (8008d84 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d018      	beq.n	8008d20 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a25      	ldr	r2, [pc, #148]	; (8008d88 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d013      	beq.n	8008d20 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a23      	ldr	r2, [pc, #140]	; (8008d8c <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d00e      	beq.n	8008d20 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a22      	ldr	r2, [pc, #136]	; (8008d90 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d009      	beq.n	8008d20 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a20      	ldr	r2, [pc, #128]	; (8008d94 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d004      	beq.n	8008d20 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a1f      	ldr	r2, [pc, #124]	; (8008d98 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d108      	bne.n	8008d32 <HAL_DMAEx_MultiBufferStart_IT+0x632>
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f042 0201 	orr.w	r2, r2, #1
 8008d2e:	601a      	str	r2, [r3, #0]
 8008d30:	e00e      	b.n	8008d50 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f042 0201 	orr.w	r2, r2, #1
 8008d40:	601a      	str	r2, [r3, #0]
 8008d42:	e005      	b.n	8008d50 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d4a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008d50:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3718      	adds	r7, #24
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	40020010 	.word	0x40020010
 8008d60:	40020028 	.word	0x40020028
 8008d64:	40020040 	.word	0x40020040
 8008d68:	40020058 	.word	0x40020058
 8008d6c:	40020070 	.word	0x40020070
 8008d70:	40020088 	.word	0x40020088
 8008d74:	400200a0 	.word	0x400200a0
 8008d78:	400200b8 	.word	0x400200b8
 8008d7c:	40020410 	.word	0x40020410
 8008d80:	40020428 	.word	0x40020428
 8008d84:	40020440 	.word	0x40020440
 8008d88:	40020458 	.word	0x40020458
 8008d8c:	40020470 	.word	0x40020470
 8008d90:	40020488 	.word	0x40020488
 8008d94:	400204a0 	.word	0x400204a0
 8008d98:	400204b8 	.word	0x400204b8
 8008d9c:	58025408 	.word	0x58025408
 8008da0:	5802541c 	.word	0x5802541c
 8008da4:	58025430 	.word	0x58025430
 8008da8:	58025444 	.word	0x58025444
 8008dac:	58025458 	.word	0x58025458
 8008db0:	5802546c 	.word	0x5802546c
 8008db4:	58025480 	.word	0x58025480
 8008db8:	58025494 	.word	0x58025494

08008dbc <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b085      	sub	sp, #20
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	60f8      	str	r0, [r7, #12]
 8008dc4:	60b9      	str	r1, [r7, #8]
 8008dc6:	4613      	mov	r3, r2
 8008dc8:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a39      	ldr	r2, [pc, #228]	; (8008eb4 <HAL_DMAEx_ChangeMemory+0xf8>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d04a      	beq.n	8008e6a <HAL_DMAEx_ChangeMemory+0xae>
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a37      	ldr	r2, [pc, #220]	; (8008eb8 <HAL_DMAEx_ChangeMemory+0xfc>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d045      	beq.n	8008e6a <HAL_DMAEx_ChangeMemory+0xae>
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a36      	ldr	r2, [pc, #216]	; (8008ebc <HAL_DMAEx_ChangeMemory+0x100>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d040      	beq.n	8008e6a <HAL_DMAEx_ChangeMemory+0xae>
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a34      	ldr	r2, [pc, #208]	; (8008ec0 <HAL_DMAEx_ChangeMemory+0x104>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d03b      	beq.n	8008e6a <HAL_DMAEx_ChangeMemory+0xae>
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a33      	ldr	r2, [pc, #204]	; (8008ec4 <HAL_DMAEx_ChangeMemory+0x108>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d036      	beq.n	8008e6a <HAL_DMAEx_ChangeMemory+0xae>
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a31      	ldr	r2, [pc, #196]	; (8008ec8 <HAL_DMAEx_ChangeMemory+0x10c>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d031      	beq.n	8008e6a <HAL_DMAEx_ChangeMemory+0xae>
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a30      	ldr	r2, [pc, #192]	; (8008ecc <HAL_DMAEx_ChangeMemory+0x110>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d02c      	beq.n	8008e6a <HAL_DMAEx_ChangeMemory+0xae>
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a2e      	ldr	r2, [pc, #184]	; (8008ed0 <HAL_DMAEx_ChangeMemory+0x114>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d027      	beq.n	8008e6a <HAL_DMAEx_ChangeMemory+0xae>
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a2d      	ldr	r2, [pc, #180]	; (8008ed4 <HAL_DMAEx_ChangeMemory+0x118>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d022      	beq.n	8008e6a <HAL_DMAEx_ChangeMemory+0xae>
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a2b      	ldr	r2, [pc, #172]	; (8008ed8 <HAL_DMAEx_ChangeMemory+0x11c>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d01d      	beq.n	8008e6a <HAL_DMAEx_ChangeMemory+0xae>
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a2a      	ldr	r2, [pc, #168]	; (8008edc <HAL_DMAEx_ChangeMemory+0x120>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d018      	beq.n	8008e6a <HAL_DMAEx_ChangeMemory+0xae>
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a28      	ldr	r2, [pc, #160]	; (8008ee0 <HAL_DMAEx_ChangeMemory+0x124>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d013      	beq.n	8008e6a <HAL_DMAEx_ChangeMemory+0xae>
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a27      	ldr	r2, [pc, #156]	; (8008ee4 <HAL_DMAEx_ChangeMemory+0x128>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d00e      	beq.n	8008e6a <HAL_DMAEx_ChangeMemory+0xae>
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a25      	ldr	r2, [pc, #148]	; (8008ee8 <HAL_DMAEx_ChangeMemory+0x12c>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d009      	beq.n	8008e6a <HAL_DMAEx_ChangeMemory+0xae>
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a24      	ldr	r2, [pc, #144]	; (8008eec <HAL_DMAEx_ChangeMemory+0x130>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d004      	beq.n	8008e6a <HAL_DMAEx_ChangeMemory+0xae>
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a22      	ldr	r2, [pc, #136]	; (8008ef0 <HAL_DMAEx_ChangeMemory+0x134>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d101      	bne.n	8008e6e <HAL_DMAEx_ChangeMemory+0xb2>
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e000      	b.n	8008e70 <HAL_DMAEx_ChangeMemory+0xb4>
 8008e6e:	2300      	movs	r3, #0
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d00c      	beq.n	8008e8e <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 8008e74:	79fb      	ldrb	r3, [r7, #7]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d104      	bne.n	8008e84 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	68ba      	ldr	r2, [r7, #8]
 8008e80:	60da      	str	r2, [r3, #12]
 8008e82:	e010      	b.n	8008ea6 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68ba      	ldr	r2, [r7, #8]
 8008e8a:	611a      	str	r2, [r3, #16]
 8008e8c:	e00b      	b.n	8008ea6 <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 8008e8e:	79fb      	ldrb	r3, [r7, #7]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d104      	bne.n	8008e9e <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	68ba      	ldr	r2, [r7, #8]
 8008e9a:	60da      	str	r2, [r3, #12]
 8008e9c:	e003      	b.n	8008ea6 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	68ba      	ldr	r2, [r7, #8]
 8008ea4:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 8008ea6:	2300      	movs	r3, #0
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3714      	adds	r7, #20
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr
 8008eb4:	40020010 	.word	0x40020010
 8008eb8:	40020028 	.word	0x40020028
 8008ebc:	40020040 	.word	0x40020040
 8008ec0:	40020058 	.word	0x40020058
 8008ec4:	40020070 	.word	0x40020070
 8008ec8:	40020088 	.word	0x40020088
 8008ecc:	400200a0 	.word	0x400200a0
 8008ed0:	400200b8 	.word	0x400200b8
 8008ed4:	40020410 	.word	0x40020410
 8008ed8:	40020428 	.word	0x40020428
 8008edc:	40020440 	.word	0x40020440
 8008ee0:	40020458 	.word	0x40020458
 8008ee4:	40020470 	.word	0x40020470
 8008ee8:	40020488 	.word	0x40020488
 8008eec:	400204a0 	.word	0x400204a0
 8008ef0:	400204b8 	.word	0x400204b8

08008ef4 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b085      	sub	sp, #20
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	607a      	str	r2, [r7, #4]
 8008f00:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a46      	ldr	r2, [pc, #280]	; (8009020 <DMA_MultiBufferSetConfig+0x12c>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d04a      	beq.n	8008fa2 <DMA_MultiBufferSetConfig+0xae>
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a44      	ldr	r2, [pc, #272]	; (8009024 <DMA_MultiBufferSetConfig+0x130>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d045      	beq.n	8008fa2 <DMA_MultiBufferSetConfig+0xae>
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a43      	ldr	r2, [pc, #268]	; (8009028 <DMA_MultiBufferSetConfig+0x134>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d040      	beq.n	8008fa2 <DMA_MultiBufferSetConfig+0xae>
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a41      	ldr	r2, [pc, #260]	; (800902c <DMA_MultiBufferSetConfig+0x138>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d03b      	beq.n	8008fa2 <DMA_MultiBufferSetConfig+0xae>
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a40      	ldr	r2, [pc, #256]	; (8009030 <DMA_MultiBufferSetConfig+0x13c>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d036      	beq.n	8008fa2 <DMA_MultiBufferSetConfig+0xae>
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a3e      	ldr	r2, [pc, #248]	; (8009034 <DMA_MultiBufferSetConfig+0x140>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d031      	beq.n	8008fa2 <DMA_MultiBufferSetConfig+0xae>
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a3d      	ldr	r2, [pc, #244]	; (8009038 <DMA_MultiBufferSetConfig+0x144>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d02c      	beq.n	8008fa2 <DMA_MultiBufferSetConfig+0xae>
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a3b      	ldr	r2, [pc, #236]	; (800903c <DMA_MultiBufferSetConfig+0x148>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d027      	beq.n	8008fa2 <DMA_MultiBufferSetConfig+0xae>
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a3a      	ldr	r2, [pc, #232]	; (8009040 <DMA_MultiBufferSetConfig+0x14c>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d022      	beq.n	8008fa2 <DMA_MultiBufferSetConfig+0xae>
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a38      	ldr	r2, [pc, #224]	; (8009044 <DMA_MultiBufferSetConfig+0x150>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d01d      	beq.n	8008fa2 <DMA_MultiBufferSetConfig+0xae>
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a37      	ldr	r2, [pc, #220]	; (8009048 <DMA_MultiBufferSetConfig+0x154>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d018      	beq.n	8008fa2 <DMA_MultiBufferSetConfig+0xae>
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a35      	ldr	r2, [pc, #212]	; (800904c <DMA_MultiBufferSetConfig+0x158>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d013      	beq.n	8008fa2 <DMA_MultiBufferSetConfig+0xae>
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a34      	ldr	r2, [pc, #208]	; (8009050 <DMA_MultiBufferSetConfig+0x15c>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d00e      	beq.n	8008fa2 <DMA_MultiBufferSetConfig+0xae>
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a32      	ldr	r2, [pc, #200]	; (8009054 <DMA_MultiBufferSetConfig+0x160>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d009      	beq.n	8008fa2 <DMA_MultiBufferSetConfig+0xae>
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a31      	ldr	r2, [pc, #196]	; (8009058 <DMA_MultiBufferSetConfig+0x164>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d004      	beq.n	8008fa2 <DMA_MultiBufferSetConfig+0xae>
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a2f      	ldr	r2, [pc, #188]	; (800905c <DMA_MultiBufferSetConfig+0x168>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d101      	bne.n	8008fa6 <DMA_MultiBufferSetConfig+0xb2>
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e000      	b.n	8008fa8 <DMA_MultiBufferSetConfig+0xb4>
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d019      	beq.n	8008fe0 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	683a      	ldr	r2, [r7, #0]
 8008fb2:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	2b40      	cmp	r3, #64	; 0x40
 8008fba:	d108      	bne.n	8008fce <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	68ba      	ldr	r2, [r7, #8]
 8008fca:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8008fcc:	e021      	b.n	8009012 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	68ba      	ldr	r2, [r7, #8]
 8008fd4:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	60da      	str	r2, [r3, #12]
}
 8008fde:	e018      	b.n	8009012 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	683a      	ldr	r2, [r7, #0]
 8008fe6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	2b40      	cmp	r3, #64	; 0x40
 8008fee:	d108      	bne.n	8009002 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	68ba      	ldr	r2, [r7, #8]
 8008ffe:	60da      	str	r2, [r3, #12]
}
 8009000:	e007      	b.n	8009012 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	68ba      	ldr	r2, [r7, #8]
 8009008:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	60da      	str	r2, [r3, #12]
}
 8009012:	bf00      	nop
 8009014:	3714      	adds	r7, #20
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr
 800901e:	bf00      	nop
 8009020:	40020010 	.word	0x40020010
 8009024:	40020028 	.word	0x40020028
 8009028:	40020040 	.word	0x40020040
 800902c:	40020058 	.word	0x40020058
 8009030:	40020070 	.word	0x40020070
 8009034:	40020088 	.word	0x40020088
 8009038:	400200a0 	.word	0x400200a0
 800903c:	400200b8 	.word	0x400200b8
 8009040:	40020410 	.word	0x40020410
 8009044:	40020428 	.word	0x40020428
 8009048:	40020440 	.word	0x40020440
 800904c:	40020458 	.word	0x40020458
 8009050:	40020470 	.word	0x40020470
 8009054:	40020488 	.word	0x40020488
 8009058:	400204a0 	.word	0x400204a0
 800905c:	400204b8 	.word	0x400204b8

08009060 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009060:	b480      	push	{r7}
 8009062:	b089      	sub	sp, #36	; 0x24
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800906a:	2300      	movs	r3, #0
 800906c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800906e:	4b89      	ldr	r3, [pc, #548]	; (8009294 <HAL_GPIO_Init+0x234>)
 8009070:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009072:	e194      	b.n	800939e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	2101      	movs	r1, #1
 800907a:	69fb      	ldr	r3, [r7, #28]
 800907c:	fa01 f303 	lsl.w	r3, r1, r3
 8009080:	4013      	ands	r3, r2
 8009082:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	2b00      	cmp	r3, #0
 8009088:	f000 8186 	beq.w	8009398 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	f003 0303 	and.w	r3, r3, #3
 8009094:	2b01      	cmp	r3, #1
 8009096:	d005      	beq.n	80090a4 <HAL_GPIO_Init+0x44>
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	f003 0303 	and.w	r3, r3, #3
 80090a0:	2b02      	cmp	r3, #2
 80090a2:	d130      	bne.n	8009106 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80090aa:	69fb      	ldr	r3, [r7, #28]
 80090ac:	005b      	lsls	r3, r3, #1
 80090ae:	2203      	movs	r2, #3
 80090b0:	fa02 f303 	lsl.w	r3, r2, r3
 80090b4:	43db      	mvns	r3, r3
 80090b6:	69ba      	ldr	r2, [r7, #24]
 80090b8:	4013      	ands	r3, r2
 80090ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	68da      	ldr	r2, [r3, #12]
 80090c0:	69fb      	ldr	r3, [r7, #28]
 80090c2:	005b      	lsls	r3, r3, #1
 80090c4:	fa02 f303 	lsl.w	r3, r2, r3
 80090c8:	69ba      	ldr	r2, [r7, #24]
 80090ca:	4313      	orrs	r3, r2
 80090cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	69ba      	ldr	r2, [r7, #24]
 80090d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80090da:	2201      	movs	r2, #1
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	fa02 f303 	lsl.w	r3, r2, r3
 80090e2:	43db      	mvns	r3, r3
 80090e4:	69ba      	ldr	r2, [r7, #24]
 80090e6:	4013      	ands	r3, r2
 80090e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	091b      	lsrs	r3, r3, #4
 80090f0:	f003 0201 	and.w	r2, r3, #1
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	fa02 f303 	lsl.w	r3, r2, r3
 80090fa:	69ba      	ldr	r2, [r7, #24]
 80090fc:	4313      	orrs	r3, r2
 80090fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	69ba      	ldr	r2, [r7, #24]
 8009104:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	f003 0303 	and.w	r3, r3, #3
 800910e:	2b03      	cmp	r3, #3
 8009110:	d017      	beq.n	8009142 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	68db      	ldr	r3, [r3, #12]
 8009116:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009118:	69fb      	ldr	r3, [r7, #28]
 800911a:	005b      	lsls	r3, r3, #1
 800911c:	2203      	movs	r2, #3
 800911e:	fa02 f303 	lsl.w	r3, r2, r3
 8009122:	43db      	mvns	r3, r3
 8009124:	69ba      	ldr	r2, [r7, #24]
 8009126:	4013      	ands	r3, r2
 8009128:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	689a      	ldr	r2, [r3, #8]
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	005b      	lsls	r3, r3, #1
 8009132:	fa02 f303 	lsl.w	r3, r2, r3
 8009136:	69ba      	ldr	r2, [r7, #24]
 8009138:	4313      	orrs	r3, r2
 800913a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	69ba      	ldr	r2, [r7, #24]
 8009140:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	f003 0303 	and.w	r3, r3, #3
 800914a:	2b02      	cmp	r3, #2
 800914c:	d123      	bne.n	8009196 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	08da      	lsrs	r2, r3, #3
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	3208      	adds	r2, #8
 8009156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800915a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800915c:	69fb      	ldr	r3, [r7, #28]
 800915e:	f003 0307 	and.w	r3, r3, #7
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	220f      	movs	r2, #15
 8009166:	fa02 f303 	lsl.w	r3, r2, r3
 800916a:	43db      	mvns	r3, r3
 800916c:	69ba      	ldr	r2, [r7, #24]
 800916e:	4013      	ands	r3, r2
 8009170:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	691a      	ldr	r2, [r3, #16]
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	f003 0307 	and.w	r3, r3, #7
 800917c:	009b      	lsls	r3, r3, #2
 800917e:	fa02 f303 	lsl.w	r3, r2, r3
 8009182:	69ba      	ldr	r2, [r7, #24]
 8009184:	4313      	orrs	r3, r2
 8009186:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	08da      	lsrs	r2, r3, #3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	3208      	adds	r2, #8
 8009190:	69b9      	ldr	r1, [r7, #24]
 8009192:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	005b      	lsls	r3, r3, #1
 80091a0:	2203      	movs	r2, #3
 80091a2:	fa02 f303 	lsl.w	r3, r2, r3
 80091a6:	43db      	mvns	r3, r3
 80091a8:	69ba      	ldr	r2, [r7, #24]
 80091aa:	4013      	ands	r3, r2
 80091ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	f003 0203 	and.w	r2, r3, #3
 80091b6:	69fb      	ldr	r3, [r7, #28]
 80091b8:	005b      	lsls	r3, r3, #1
 80091ba:	fa02 f303 	lsl.w	r3, r2, r3
 80091be:	69ba      	ldr	r2, [r7, #24]
 80091c0:	4313      	orrs	r3, r2
 80091c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	69ba      	ldr	r2, [r7, #24]
 80091c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	f000 80e0 	beq.w	8009398 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80091d8:	4b2f      	ldr	r3, [pc, #188]	; (8009298 <HAL_GPIO_Init+0x238>)
 80091da:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80091de:	4a2e      	ldr	r2, [pc, #184]	; (8009298 <HAL_GPIO_Init+0x238>)
 80091e0:	f043 0302 	orr.w	r3, r3, #2
 80091e4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80091e8:	4b2b      	ldr	r3, [pc, #172]	; (8009298 <HAL_GPIO_Init+0x238>)
 80091ea:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80091ee:	f003 0302 	and.w	r3, r3, #2
 80091f2:	60fb      	str	r3, [r7, #12]
 80091f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80091f6:	4a29      	ldr	r2, [pc, #164]	; (800929c <HAL_GPIO_Init+0x23c>)
 80091f8:	69fb      	ldr	r3, [r7, #28]
 80091fa:	089b      	lsrs	r3, r3, #2
 80091fc:	3302      	adds	r3, #2
 80091fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009202:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009204:	69fb      	ldr	r3, [r7, #28]
 8009206:	f003 0303 	and.w	r3, r3, #3
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	220f      	movs	r2, #15
 800920e:	fa02 f303 	lsl.w	r3, r2, r3
 8009212:	43db      	mvns	r3, r3
 8009214:	69ba      	ldr	r2, [r7, #24]
 8009216:	4013      	ands	r3, r2
 8009218:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4a20      	ldr	r2, [pc, #128]	; (80092a0 <HAL_GPIO_Init+0x240>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d052      	beq.n	80092c8 <HAL_GPIO_Init+0x268>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	4a1f      	ldr	r2, [pc, #124]	; (80092a4 <HAL_GPIO_Init+0x244>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d031      	beq.n	800928e <HAL_GPIO_Init+0x22e>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	4a1e      	ldr	r2, [pc, #120]	; (80092a8 <HAL_GPIO_Init+0x248>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d02b      	beq.n	800928a <HAL_GPIO_Init+0x22a>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4a1d      	ldr	r2, [pc, #116]	; (80092ac <HAL_GPIO_Init+0x24c>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d025      	beq.n	8009286 <HAL_GPIO_Init+0x226>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4a1c      	ldr	r2, [pc, #112]	; (80092b0 <HAL_GPIO_Init+0x250>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d01f      	beq.n	8009282 <HAL_GPIO_Init+0x222>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4a1b      	ldr	r2, [pc, #108]	; (80092b4 <HAL_GPIO_Init+0x254>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d019      	beq.n	800927e <HAL_GPIO_Init+0x21e>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4a1a      	ldr	r2, [pc, #104]	; (80092b8 <HAL_GPIO_Init+0x258>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d013      	beq.n	800927a <HAL_GPIO_Init+0x21a>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4a19      	ldr	r2, [pc, #100]	; (80092bc <HAL_GPIO_Init+0x25c>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d00d      	beq.n	8009276 <HAL_GPIO_Init+0x216>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4a18      	ldr	r2, [pc, #96]	; (80092c0 <HAL_GPIO_Init+0x260>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d007      	beq.n	8009272 <HAL_GPIO_Init+0x212>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	4a17      	ldr	r2, [pc, #92]	; (80092c4 <HAL_GPIO_Init+0x264>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d101      	bne.n	800926e <HAL_GPIO_Init+0x20e>
 800926a:	2309      	movs	r3, #9
 800926c:	e02d      	b.n	80092ca <HAL_GPIO_Init+0x26a>
 800926e:	230a      	movs	r3, #10
 8009270:	e02b      	b.n	80092ca <HAL_GPIO_Init+0x26a>
 8009272:	2308      	movs	r3, #8
 8009274:	e029      	b.n	80092ca <HAL_GPIO_Init+0x26a>
 8009276:	2307      	movs	r3, #7
 8009278:	e027      	b.n	80092ca <HAL_GPIO_Init+0x26a>
 800927a:	2306      	movs	r3, #6
 800927c:	e025      	b.n	80092ca <HAL_GPIO_Init+0x26a>
 800927e:	2305      	movs	r3, #5
 8009280:	e023      	b.n	80092ca <HAL_GPIO_Init+0x26a>
 8009282:	2304      	movs	r3, #4
 8009284:	e021      	b.n	80092ca <HAL_GPIO_Init+0x26a>
 8009286:	2303      	movs	r3, #3
 8009288:	e01f      	b.n	80092ca <HAL_GPIO_Init+0x26a>
 800928a:	2302      	movs	r3, #2
 800928c:	e01d      	b.n	80092ca <HAL_GPIO_Init+0x26a>
 800928e:	2301      	movs	r3, #1
 8009290:	e01b      	b.n	80092ca <HAL_GPIO_Init+0x26a>
 8009292:	bf00      	nop
 8009294:	58000080 	.word	0x58000080
 8009298:	58024400 	.word	0x58024400
 800929c:	58000400 	.word	0x58000400
 80092a0:	58020000 	.word	0x58020000
 80092a4:	58020400 	.word	0x58020400
 80092a8:	58020800 	.word	0x58020800
 80092ac:	58020c00 	.word	0x58020c00
 80092b0:	58021000 	.word	0x58021000
 80092b4:	58021400 	.word	0x58021400
 80092b8:	58021800 	.word	0x58021800
 80092bc:	58021c00 	.word	0x58021c00
 80092c0:	58022000 	.word	0x58022000
 80092c4:	58022400 	.word	0x58022400
 80092c8:	2300      	movs	r3, #0
 80092ca:	69fa      	ldr	r2, [r7, #28]
 80092cc:	f002 0203 	and.w	r2, r2, #3
 80092d0:	0092      	lsls	r2, r2, #2
 80092d2:	4093      	lsls	r3, r2
 80092d4:	69ba      	ldr	r2, [r7, #24]
 80092d6:	4313      	orrs	r3, r2
 80092d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80092da:	4938      	ldr	r1, [pc, #224]	; (80093bc <HAL_GPIO_Init+0x35c>)
 80092dc:	69fb      	ldr	r3, [r7, #28]
 80092de:	089b      	lsrs	r3, r3, #2
 80092e0:	3302      	adds	r3, #2
 80092e2:	69ba      	ldr	r2, [r7, #24]
 80092e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80092e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	43db      	mvns	r3, r3
 80092f4:	69ba      	ldr	r2, [r7, #24]
 80092f6:	4013      	ands	r3, r2
 80092f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009302:	2b00      	cmp	r3, #0
 8009304:	d003      	beq.n	800930e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8009306:	69ba      	ldr	r2, [r7, #24]
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	4313      	orrs	r3, r2
 800930c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800930e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009312:	69bb      	ldr	r3, [r7, #24]
 8009314:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	43db      	mvns	r3, r3
 8009322:	69ba      	ldr	r2, [r7, #24]
 8009324:	4013      	ands	r3, r2
 8009326:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009330:	2b00      	cmp	r3, #0
 8009332:	d003      	beq.n	800933c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009334:	69ba      	ldr	r2, [r7, #24]
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	4313      	orrs	r3, r2
 800933a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800933c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	43db      	mvns	r3, r3
 800934e:	69ba      	ldr	r2, [r7, #24]
 8009350:	4013      	ands	r3, r2
 8009352:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800935c:	2b00      	cmp	r3, #0
 800935e:	d003      	beq.n	8009368 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8009360:	69ba      	ldr	r2, [r7, #24]
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	4313      	orrs	r3, r2
 8009366:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	69ba      	ldr	r2, [r7, #24]
 800936c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	43db      	mvns	r3, r3
 8009378:	69ba      	ldr	r2, [r7, #24]
 800937a:	4013      	ands	r3, r2
 800937c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009386:	2b00      	cmp	r3, #0
 8009388:	d003      	beq.n	8009392 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800938a:	69ba      	ldr	r2, [r7, #24]
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	4313      	orrs	r3, r2
 8009390:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	69ba      	ldr	r2, [r7, #24]
 8009396:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	3301      	adds	r3, #1
 800939c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	69fb      	ldr	r3, [r7, #28]
 80093a4:	fa22 f303 	lsr.w	r3, r2, r3
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	f47f ae63 	bne.w	8009074 <HAL_GPIO_Init+0x14>
  }
}
 80093ae:	bf00      	nop
 80093b0:	bf00      	nop
 80093b2:	3724      	adds	r7, #36	; 0x24
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr
 80093bc:	58000400 	.word	0x58000400

080093c0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b087      	sub	sp, #28
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80093ca:	2300      	movs	r3, #0
 80093cc:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80093ce:	4b75      	ldr	r3, [pc, #468]	; (80095a4 <HAL_GPIO_DeInit+0x1e4>)
 80093d0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 80093d2:	e0d9      	b.n	8009588 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80093d4:	2201      	movs	r2, #1
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	fa02 f303 	lsl.w	r3, r2, r3
 80093dc:	683a      	ldr	r2, [r7, #0]
 80093de:	4013      	ands	r3, r2
 80093e0:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	f000 80cc 	beq.w	8009582 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80093ea:	4a6f      	ldr	r2, [pc, #444]	; (80095a8 <HAL_GPIO_DeInit+0x1e8>)
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	089b      	lsrs	r3, r3, #2
 80093f0:	3302      	adds	r3, #2
 80093f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093f6:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	f003 0303 	and.w	r3, r3, #3
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	220f      	movs	r2, #15
 8009402:	fa02 f303 	lsl.w	r3, r2, r3
 8009406:	68ba      	ldr	r2, [r7, #8]
 8009408:	4013      	ands	r3, r2
 800940a:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	4a67      	ldr	r2, [pc, #412]	; (80095ac <HAL_GPIO_DeInit+0x1ec>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d037      	beq.n	8009484 <HAL_GPIO_DeInit+0xc4>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	4a66      	ldr	r2, [pc, #408]	; (80095b0 <HAL_GPIO_DeInit+0x1f0>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d031      	beq.n	8009480 <HAL_GPIO_DeInit+0xc0>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	4a65      	ldr	r2, [pc, #404]	; (80095b4 <HAL_GPIO_DeInit+0x1f4>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d02b      	beq.n	800947c <HAL_GPIO_DeInit+0xbc>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	4a64      	ldr	r2, [pc, #400]	; (80095b8 <HAL_GPIO_DeInit+0x1f8>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d025      	beq.n	8009478 <HAL_GPIO_DeInit+0xb8>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4a63      	ldr	r2, [pc, #396]	; (80095bc <HAL_GPIO_DeInit+0x1fc>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d01f      	beq.n	8009474 <HAL_GPIO_DeInit+0xb4>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4a62      	ldr	r2, [pc, #392]	; (80095c0 <HAL_GPIO_DeInit+0x200>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d019      	beq.n	8009470 <HAL_GPIO_DeInit+0xb0>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	4a61      	ldr	r2, [pc, #388]	; (80095c4 <HAL_GPIO_DeInit+0x204>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d013      	beq.n	800946c <HAL_GPIO_DeInit+0xac>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4a60      	ldr	r2, [pc, #384]	; (80095c8 <HAL_GPIO_DeInit+0x208>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d00d      	beq.n	8009468 <HAL_GPIO_DeInit+0xa8>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	4a5f      	ldr	r2, [pc, #380]	; (80095cc <HAL_GPIO_DeInit+0x20c>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d007      	beq.n	8009464 <HAL_GPIO_DeInit+0xa4>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	4a5e      	ldr	r2, [pc, #376]	; (80095d0 <HAL_GPIO_DeInit+0x210>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d101      	bne.n	8009460 <HAL_GPIO_DeInit+0xa0>
 800945c:	2309      	movs	r3, #9
 800945e:	e012      	b.n	8009486 <HAL_GPIO_DeInit+0xc6>
 8009460:	230a      	movs	r3, #10
 8009462:	e010      	b.n	8009486 <HAL_GPIO_DeInit+0xc6>
 8009464:	2308      	movs	r3, #8
 8009466:	e00e      	b.n	8009486 <HAL_GPIO_DeInit+0xc6>
 8009468:	2307      	movs	r3, #7
 800946a:	e00c      	b.n	8009486 <HAL_GPIO_DeInit+0xc6>
 800946c:	2306      	movs	r3, #6
 800946e:	e00a      	b.n	8009486 <HAL_GPIO_DeInit+0xc6>
 8009470:	2305      	movs	r3, #5
 8009472:	e008      	b.n	8009486 <HAL_GPIO_DeInit+0xc6>
 8009474:	2304      	movs	r3, #4
 8009476:	e006      	b.n	8009486 <HAL_GPIO_DeInit+0xc6>
 8009478:	2303      	movs	r3, #3
 800947a:	e004      	b.n	8009486 <HAL_GPIO_DeInit+0xc6>
 800947c:	2302      	movs	r3, #2
 800947e:	e002      	b.n	8009486 <HAL_GPIO_DeInit+0xc6>
 8009480:	2301      	movs	r3, #1
 8009482:	e000      	b.n	8009486 <HAL_GPIO_DeInit+0xc6>
 8009484:	2300      	movs	r3, #0
 8009486:	697a      	ldr	r2, [r7, #20]
 8009488:	f002 0203 	and.w	r2, r2, #3
 800948c:	0092      	lsls	r2, r2, #2
 800948e:	4093      	lsls	r3, r2
 8009490:	68ba      	ldr	r2, [r7, #8]
 8009492:	429a      	cmp	r2, r3
 8009494:	d136      	bne.n	8009504 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	43db      	mvns	r3, r3
 800949e:	401a      	ands	r2, r3
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	685a      	ldr	r2, [r3, #4]
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	43db      	mvns	r3, r3
 80094ac:	401a      	ands	r2, r3
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80094b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094b6:	685a      	ldr	r2, [r3, #4]
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	43db      	mvns	r3, r3
 80094bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80094c0:	4013      	ands	r3, r2
 80094c2:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80094c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	43db      	mvns	r3, r3
 80094ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80094d2:	4013      	ands	r3, r2
 80094d4:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	f003 0303 	and.w	r3, r3, #3
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	220f      	movs	r2, #15
 80094e0:	fa02 f303 	lsl.w	r3, r2, r3
 80094e4:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80094e6:	4a30      	ldr	r2, [pc, #192]	; (80095a8 <HAL_GPIO_DeInit+0x1e8>)
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	089b      	lsrs	r3, r3, #2
 80094ec:	3302      	adds	r3, #2
 80094ee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	43da      	mvns	r2, r3
 80094f6:	482c      	ldr	r0, [pc, #176]	; (80095a8 <HAL_GPIO_DeInit+0x1e8>)
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	089b      	lsrs	r3, r3, #2
 80094fc:	400a      	ands	r2, r1
 80094fe:	3302      	adds	r3, #2
 8009500:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	005b      	lsls	r3, r3, #1
 800950c:	2103      	movs	r1, #3
 800950e:	fa01 f303 	lsl.w	r3, r1, r3
 8009512:	431a      	orrs	r2, r3
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	08da      	lsrs	r2, r3, #3
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	3208      	adds	r2, #8
 8009520:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	f003 0307 	and.w	r3, r3, #7
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	220f      	movs	r2, #15
 800952e:	fa02 f303 	lsl.w	r3, r2, r3
 8009532:	43db      	mvns	r3, r3
 8009534:	697a      	ldr	r2, [r7, #20]
 8009536:	08d2      	lsrs	r2, r2, #3
 8009538:	4019      	ands	r1, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	3208      	adds	r2, #8
 800953e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	68da      	ldr	r2, [r3, #12]
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	005b      	lsls	r3, r3, #1
 800954a:	2103      	movs	r1, #3
 800954c:	fa01 f303 	lsl.w	r3, r1, r3
 8009550:	43db      	mvns	r3, r3
 8009552:	401a      	ands	r2, r3
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	685a      	ldr	r2, [r3, #4]
 800955c:	2101      	movs	r1, #1
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	fa01 f303 	lsl.w	r3, r1, r3
 8009564:	43db      	mvns	r3, r3
 8009566:	401a      	ands	r2, r3
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	689a      	ldr	r2, [r3, #8]
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	005b      	lsls	r3, r3, #1
 8009574:	2103      	movs	r1, #3
 8009576:	fa01 f303 	lsl.w	r3, r1, r3
 800957a:	43db      	mvns	r3, r3
 800957c:	401a      	ands	r2, r3
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	609a      	str	r2, [r3, #8]
    }

    position++;
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	3301      	adds	r3, #1
 8009586:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8009588:	683a      	ldr	r2, [r7, #0]
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	fa22 f303 	lsr.w	r3, r2, r3
 8009590:	2b00      	cmp	r3, #0
 8009592:	f47f af1f 	bne.w	80093d4 <HAL_GPIO_DeInit+0x14>
  }
}
 8009596:	bf00      	nop
 8009598:	bf00      	nop
 800959a:	371c      	adds	r7, #28
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr
 80095a4:	58000080 	.word	0x58000080
 80095a8:	58000400 	.word	0x58000400
 80095ac:	58020000 	.word	0x58020000
 80095b0:	58020400 	.word	0x58020400
 80095b4:	58020800 	.word	0x58020800
 80095b8:	58020c00 	.word	0x58020c00
 80095bc:	58021000 	.word	0x58021000
 80095c0:	58021400 	.word	0x58021400
 80095c4:	58021800 	.word	0x58021800
 80095c8:	58021c00 	.word	0x58021c00
 80095cc:	58022000 	.word	0x58022000
 80095d0:	58022400 	.word	0x58022400

080095d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	460b      	mov	r3, r1
 80095de:	807b      	strh	r3, [r7, #2]
 80095e0:	4613      	mov	r3, r2
 80095e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80095e4:	787b      	ldrb	r3, [r7, #1]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d003      	beq.n	80095f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80095ea:	887a      	ldrh	r2, [r7, #2]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80095f0:	e003      	b.n	80095fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80095f2:	887b      	ldrh	r3, [r7, #2]
 80095f4:	041a      	lsls	r2, r3, #16
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	619a      	str	r2, [r3, #24]
}
 80095fa:	bf00      	nop
 80095fc:	370c      	adds	r7, #12
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr

08009606 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009606:	b480      	push	{r7}
 8009608:	b085      	sub	sp, #20
 800960a:	af00      	add	r7, sp, #0
 800960c:	6078      	str	r0, [r7, #4]
 800960e:	460b      	mov	r3, r1
 8009610:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	695b      	ldr	r3, [r3, #20]
 8009616:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009618:	887a      	ldrh	r2, [r7, #2]
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	4013      	ands	r3, r2
 800961e:	041a      	lsls	r2, r3, #16
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	43d9      	mvns	r1, r3
 8009624:	887b      	ldrh	r3, [r7, #2]
 8009626:	400b      	ands	r3, r1
 8009628:	431a      	orrs	r2, r3
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	619a      	str	r2, [r3, #24]
}
 800962e:	bf00      	nop
 8009630:	3714      	adds	r7, #20
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr
	...

0800963c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d101      	bne.n	800964e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800964a:	2301      	movs	r3, #1
 800964c:	e07f      	b.n	800974e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009654:	b2db      	uxtb	r3, r3
 8009656:	2b00      	cmp	r3, #0
 8009658:	d106      	bne.n	8009668 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2200      	movs	r2, #0
 800965e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 f8a9 	bl	80097ba <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2224      	movs	r2, #36	; 0x24
 800966c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	681a      	ldr	r2, [r3, #0]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f022 0201 	bic.w	r2, r2, #1
 800967e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	685a      	ldr	r2, [r3, #4]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800968c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	689a      	ldr	r2, [r3, #8]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800969c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	68db      	ldr	r3, [r3, #12]
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d107      	bne.n	80096b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	689a      	ldr	r2, [r3, #8]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80096b2:	609a      	str	r2, [r3, #8]
 80096b4:	e006      	b.n	80096c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	689a      	ldr	r2, [r3, #8]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80096c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	68db      	ldr	r3, [r3, #12]
 80096c8:	2b02      	cmp	r3, #2
 80096ca:	d104      	bne.n	80096d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80096d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	6859      	ldr	r1, [r3, #4]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681a      	ldr	r2, [r3, #0]
 80096e0:	4b1d      	ldr	r3, [pc, #116]	; (8009758 <HAL_I2C_Init+0x11c>)
 80096e2:	430b      	orrs	r3, r1
 80096e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	68da      	ldr	r2, [r3, #12]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80096f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	691a      	ldr	r2, [r3, #16]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	695b      	ldr	r3, [r3, #20]
 80096fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	699b      	ldr	r3, [r3, #24]
 8009706:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	430a      	orrs	r2, r1
 800970e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	69d9      	ldr	r1, [r3, #28]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6a1a      	ldr	r2, [r3, #32]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	430a      	orrs	r2, r1
 800971e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f042 0201 	orr.w	r2, r2, #1
 800972e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2200      	movs	r2, #0
 8009734:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2220      	movs	r2, #32
 800973a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2200      	movs	r2, #0
 8009742:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800974c:	2300      	movs	r3, #0
}
 800974e:	4618      	mov	r0, r3
 8009750:	3708      	adds	r7, #8
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	02008000 	.word	0x02008000

0800975c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b082      	sub	sp, #8
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d101      	bne.n	800976e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800976a:	2301      	movs	r3, #1
 800976c:	e021      	b.n	80097b2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2224      	movs	r2, #36	; 0x24
 8009772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f022 0201 	bic.w	r2, r2, #1
 8009784:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 f821 	bl	80097ce <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2200      	movs	r2, #0
 8009790:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2200      	movs	r2, #0
 8009796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2200      	movs	r2, #0
 800979e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2200      	movs	r2, #0
 80097a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80097b0:	2300      	movs	r3, #0
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3708      	adds	r7, #8
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}

080097ba <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80097ba:	b480      	push	{r7}
 80097bc:	b083      	sub	sp, #12
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80097c2:	bf00      	nop
 80097c4:	370c      	adds	r7, #12
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr

080097ce <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80097ce:	b480      	push	{r7}
 80097d0:	b083      	sub	sp, #12
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80097d6:	bf00      	nop
 80097d8:	370c      	adds	r7, #12
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr
	...

080097e4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b088      	sub	sp, #32
 80097e8:	af02      	add	r7, sp, #8
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	4608      	mov	r0, r1
 80097ee:	4611      	mov	r1, r2
 80097f0:	461a      	mov	r2, r3
 80097f2:	4603      	mov	r3, r0
 80097f4:	817b      	strh	r3, [r7, #10]
 80097f6:	460b      	mov	r3, r1
 80097f8:	813b      	strh	r3, [r7, #8]
 80097fa:	4613      	mov	r3, r2
 80097fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009804:	b2db      	uxtb	r3, r3
 8009806:	2b20      	cmp	r3, #32
 8009808:	f040 80f9 	bne.w	80099fe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800980c:	6a3b      	ldr	r3, [r7, #32]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d002      	beq.n	8009818 <HAL_I2C_Mem_Write+0x34>
 8009812:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009814:	2b00      	cmp	r3, #0
 8009816:	d105      	bne.n	8009824 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800981e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009820:	2301      	movs	r3, #1
 8009822:	e0ed      	b.n	8009a00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800982a:	2b01      	cmp	r3, #1
 800982c:	d101      	bne.n	8009832 <HAL_I2C_Mem_Write+0x4e>
 800982e:	2302      	movs	r3, #2
 8009830:	e0e6      	b.n	8009a00 <HAL_I2C_Mem_Write+0x21c>
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2201      	movs	r2, #1
 8009836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800983a:	f7fa ffa5 	bl	8004788 <HAL_GetTick>
 800983e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	9300      	str	r3, [sp, #0]
 8009844:	2319      	movs	r3, #25
 8009846:	2201      	movs	r2, #1
 8009848:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800984c:	68f8      	ldr	r0, [r7, #12]
 800984e:	f000 fadd 	bl	8009e0c <I2C_WaitOnFlagUntilTimeout>
 8009852:	4603      	mov	r3, r0
 8009854:	2b00      	cmp	r3, #0
 8009856:	d001      	beq.n	800985c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009858:	2301      	movs	r3, #1
 800985a:	e0d1      	b.n	8009a00 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2221      	movs	r2, #33	; 0x21
 8009860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2240      	movs	r2, #64	; 0x40
 8009868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2200      	movs	r2, #0
 8009870:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	6a3a      	ldr	r2, [r7, #32]
 8009876:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800987c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2200      	movs	r2, #0
 8009882:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009884:	88f8      	ldrh	r0, [r7, #6]
 8009886:	893a      	ldrh	r2, [r7, #8]
 8009888:	8979      	ldrh	r1, [r7, #10]
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	9301      	str	r3, [sp, #4]
 800988e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009890:	9300      	str	r3, [sp, #0]
 8009892:	4603      	mov	r3, r0
 8009894:	68f8      	ldr	r0, [r7, #12]
 8009896:	f000 f9ed 	bl	8009c74 <I2C_RequestMemoryWrite>
 800989a:	4603      	mov	r3, r0
 800989c:	2b00      	cmp	r3, #0
 800989e:	d005      	beq.n	80098ac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2200      	movs	r2, #0
 80098a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80098a8:	2301      	movs	r3, #1
 80098aa:	e0a9      	b.n	8009a00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	2bff      	cmp	r3, #255	; 0xff
 80098b4:	d90e      	bls.n	80098d4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	22ff      	movs	r2, #255	; 0xff
 80098ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098c0:	b2da      	uxtb	r2, r3
 80098c2:	8979      	ldrh	r1, [r7, #10]
 80098c4:	2300      	movs	r3, #0
 80098c6:	9300      	str	r3, [sp, #0]
 80098c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80098cc:	68f8      	ldr	r0, [r7, #12]
 80098ce:	f000 fc57 	bl	800a180 <I2C_TransferConfig>
 80098d2:	e00f      	b.n	80098f4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098d8:	b29a      	uxth	r2, r3
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098e2:	b2da      	uxtb	r2, r3
 80098e4:	8979      	ldrh	r1, [r7, #10]
 80098e6:	2300      	movs	r3, #0
 80098e8:	9300      	str	r3, [sp, #0]
 80098ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80098ee:	68f8      	ldr	r0, [r7, #12]
 80098f0:	f000 fc46 	bl	800a180 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80098f4:	697a      	ldr	r2, [r7, #20]
 80098f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80098f8:	68f8      	ldr	r0, [r7, #12]
 80098fa:	f000 fad6 	bl	8009eaa <I2C_WaitOnTXISFlagUntilTimeout>
 80098fe:	4603      	mov	r3, r0
 8009900:	2b00      	cmp	r3, #0
 8009902:	d001      	beq.n	8009908 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009904:	2301      	movs	r3, #1
 8009906:	e07b      	b.n	8009a00 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800990c:	781a      	ldrb	r2, [r3, #0]
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009918:	1c5a      	adds	r2, r3, #1
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009922:	b29b      	uxth	r3, r3
 8009924:	3b01      	subs	r3, #1
 8009926:	b29a      	uxth	r2, r3
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009930:	3b01      	subs	r3, #1
 8009932:	b29a      	uxth	r2, r3
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800993c:	b29b      	uxth	r3, r3
 800993e:	2b00      	cmp	r3, #0
 8009940:	d034      	beq.n	80099ac <HAL_I2C_Mem_Write+0x1c8>
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009946:	2b00      	cmp	r3, #0
 8009948:	d130      	bne.n	80099ac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	9300      	str	r3, [sp, #0]
 800994e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009950:	2200      	movs	r2, #0
 8009952:	2180      	movs	r1, #128	; 0x80
 8009954:	68f8      	ldr	r0, [r7, #12]
 8009956:	f000 fa59 	bl	8009e0c <I2C_WaitOnFlagUntilTimeout>
 800995a:	4603      	mov	r3, r0
 800995c:	2b00      	cmp	r3, #0
 800995e:	d001      	beq.n	8009964 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009960:	2301      	movs	r3, #1
 8009962:	e04d      	b.n	8009a00 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009968:	b29b      	uxth	r3, r3
 800996a:	2bff      	cmp	r3, #255	; 0xff
 800996c:	d90e      	bls.n	800998c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	22ff      	movs	r2, #255	; 0xff
 8009972:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009978:	b2da      	uxtb	r2, r3
 800997a:	8979      	ldrh	r1, [r7, #10]
 800997c:	2300      	movs	r3, #0
 800997e:	9300      	str	r3, [sp, #0]
 8009980:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009984:	68f8      	ldr	r0, [r7, #12]
 8009986:	f000 fbfb 	bl	800a180 <I2C_TransferConfig>
 800998a:	e00f      	b.n	80099ac <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009990:	b29a      	uxth	r2, r3
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800999a:	b2da      	uxtb	r2, r3
 800999c:	8979      	ldrh	r1, [r7, #10]
 800999e:	2300      	movs	r3, #0
 80099a0:	9300      	str	r3, [sp, #0]
 80099a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80099a6:	68f8      	ldr	r0, [r7, #12]
 80099a8:	f000 fbea 	bl	800a180 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d19e      	bne.n	80098f4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099b6:	697a      	ldr	r2, [r7, #20]
 80099b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099ba:	68f8      	ldr	r0, [r7, #12]
 80099bc:	f000 fabc 	bl	8009f38 <I2C_WaitOnSTOPFlagUntilTimeout>
 80099c0:	4603      	mov	r3, r0
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d001      	beq.n	80099ca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80099c6:	2301      	movs	r3, #1
 80099c8:	e01a      	b.n	8009a00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	2220      	movs	r2, #32
 80099d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	6859      	ldr	r1, [r3, #4]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681a      	ldr	r2, [r3, #0]
 80099dc:	4b0a      	ldr	r3, [pc, #40]	; (8009a08 <HAL_I2C_Mem_Write+0x224>)
 80099de:	400b      	ands	r3, r1
 80099e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2220      	movs	r2, #32
 80099e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2200      	movs	r2, #0
 80099ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2200      	movs	r2, #0
 80099f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80099fa:	2300      	movs	r3, #0
 80099fc:	e000      	b.n	8009a00 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80099fe:	2302      	movs	r3, #2
  }
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3718      	adds	r7, #24
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	fe00e800 	.word	0xfe00e800

08009a0c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b088      	sub	sp, #32
 8009a10:	af02      	add	r7, sp, #8
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	4608      	mov	r0, r1
 8009a16:	4611      	mov	r1, r2
 8009a18:	461a      	mov	r2, r3
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	817b      	strh	r3, [r7, #10]
 8009a1e:	460b      	mov	r3, r1
 8009a20:	813b      	strh	r3, [r7, #8]
 8009a22:	4613      	mov	r3, r2
 8009a24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	2b20      	cmp	r3, #32
 8009a30:	f040 80fd 	bne.w	8009c2e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a34:	6a3b      	ldr	r3, [r7, #32]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d002      	beq.n	8009a40 <HAL_I2C_Mem_Read+0x34>
 8009a3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d105      	bne.n	8009a4c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a46:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	e0f1      	b.n	8009c30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d101      	bne.n	8009a5a <HAL_I2C_Mem_Read+0x4e>
 8009a56:	2302      	movs	r3, #2
 8009a58:	e0ea      	b.n	8009c30 <HAL_I2C_Mem_Read+0x224>
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009a62:	f7fa fe91 	bl	8004788 <HAL_GetTick>
 8009a66:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	9300      	str	r3, [sp, #0]
 8009a6c:	2319      	movs	r3, #25
 8009a6e:	2201      	movs	r2, #1
 8009a70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009a74:	68f8      	ldr	r0, [r7, #12]
 8009a76:	f000 f9c9 	bl	8009e0c <I2C_WaitOnFlagUntilTimeout>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d001      	beq.n	8009a84 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009a80:	2301      	movs	r3, #1
 8009a82:	e0d5      	b.n	8009c30 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2222      	movs	r2, #34	; 0x22
 8009a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	2240      	movs	r2, #64	; 0x40
 8009a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2200      	movs	r2, #0
 8009a98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	6a3a      	ldr	r2, [r7, #32]
 8009a9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009aac:	88f8      	ldrh	r0, [r7, #6]
 8009aae:	893a      	ldrh	r2, [r7, #8]
 8009ab0:	8979      	ldrh	r1, [r7, #10]
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	9301      	str	r3, [sp, #4]
 8009ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab8:	9300      	str	r3, [sp, #0]
 8009aba:	4603      	mov	r3, r0
 8009abc:	68f8      	ldr	r0, [r7, #12]
 8009abe:	f000 f92d 	bl	8009d1c <I2C_RequestMemoryRead>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d005      	beq.n	8009ad4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2200      	movs	r2, #0
 8009acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e0ad      	b.n	8009c30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	2bff      	cmp	r3, #255	; 0xff
 8009adc:	d90e      	bls.n	8009afc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	22ff      	movs	r2, #255	; 0xff
 8009ae2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ae8:	b2da      	uxtb	r2, r3
 8009aea:	8979      	ldrh	r1, [r7, #10]
 8009aec:	4b52      	ldr	r3, [pc, #328]	; (8009c38 <HAL_I2C_Mem_Read+0x22c>)
 8009aee:	9300      	str	r3, [sp, #0]
 8009af0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009af4:	68f8      	ldr	r0, [r7, #12]
 8009af6:	f000 fb43 	bl	800a180 <I2C_TransferConfig>
 8009afa:	e00f      	b.n	8009b1c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b00:	b29a      	uxth	r2, r3
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b0a:	b2da      	uxtb	r2, r3
 8009b0c:	8979      	ldrh	r1, [r7, #10]
 8009b0e:	4b4a      	ldr	r3, [pc, #296]	; (8009c38 <HAL_I2C_Mem_Read+0x22c>)
 8009b10:	9300      	str	r3, [sp, #0]
 8009b12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009b16:	68f8      	ldr	r0, [r7, #12]
 8009b18:	f000 fb32 	bl	800a180 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	9300      	str	r3, [sp, #0]
 8009b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b22:	2200      	movs	r2, #0
 8009b24:	2104      	movs	r1, #4
 8009b26:	68f8      	ldr	r0, [r7, #12]
 8009b28:	f000 f970 	bl	8009e0c <I2C_WaitOnFlagUntilTimeout>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d001      	beq.n	8009b36 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8009b32:	2301      	movs	r3, #1
 8009b34:	e07c      	b.n	8009c30 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b40:	b2d2      	uxtb	r2, r2
 8009b42:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b48:	1c5a      	adds	r2, r3, #1
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b52:	3b01      	subs	r3, #1
 8009b54:	b29a      	uxth	r2, r3
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	3b01      	subs	r3, #1
 8009b62:	b29a      	uxth	r2, r3
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b6c:	b29b      	uxth	r3, r3
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d034      	beq.n	8009bdc <HAL_I2C_Mem_Read+0x1d0>
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d130      	bne.n	8009bdc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	9300      	str	r3, [sp, #0]
 8009b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b80:	2200      	movs	r2, #0
 8009b82:	2180      	movs	r1, #128	; 0x80
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	f000 f941 	bl	8009e0c <I2C_WaitOnFlagUntilTimeout>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d001      	beq.n	8009b94 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009b90:	2301      	movs	r3, #1
 8009b92:	e04d      	b.n	8009c30 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	2bff      	cmp	r3, #255	; 0xff
 8009b9c:	d90e      	bls.n	8009bbc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	22ff      	movs	r2, #255	; 0xff
 8009ba2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ba8:	b2da      	uxtb	r2, r3
 8009baa:	8979      	ldrh	r1, [r7, #10]
 8009bac:	2300      	movs	r3, #0
 8009bae:	9300      	str	r3, [sp, #0]
 8009bb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009bb4:	68f8      	ldr	r0, [r7, #12]
 8009bb6:	f000 fae3 	bl	800a180 <I2C_TransferConfig>
 8009bba:	e00f      	b.n	8009bdc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bc0:	b29a      	uxth	r2, r3
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bca:	b2da      	uxtb	r2, r3
 8009bcc:	8979      	ldrh	r1, [r7, #10]
 8009bce:	2300      	movs	r3, #0
 8009bd0:	9300      	str	r3, [sp, #0]
 8009bd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009bd6:	68f8      	ldr	r0, [r7, #12]
 8009bd8:	f000 fad2 	bl	800a180 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d19a      	bne.n	8009b1c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009be6:	697a      	ldr	r2, [r7, #20]
 8009be8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009bea:	68f8      	ldr	r0, [r7, #12]
 8009bec:	f000 f9a4 	bl	8009f38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d001      	beq.n	8009bfa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e01a      	b.n	8009c30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	2220      	movs	r2, #32
 8009c00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	6859      	ldr	r1, [r3, #4]
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	4b0b      	ldr	r3, [pc, #44]	; (8009c3c <HAL_I2C_Mem_Read+0x230>)
 8009c0e:	400b      	ands	r3, r1
 8009c10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2220      	movs	r2, #32
 8009c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	e000      	b.n	8009c30 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009c2e:	2302      	movs	r3, #2
  }
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3718      	adds	r7, #24
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	80002400 	.word	0x80002400
 8009c3c:	fe00e800 	.word	0xfe00e800

08009c40 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b083      	sub	sp, #12
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c4e:	b2db      	uxtb	r3, r3
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	370c      	adds	r7, #12
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr

08009c5c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b083      	sub	sp, #12
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	370c      	adds	r7, #12
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b086      	sub	sp, #24
 8009c78:	af02      	add	r7, sp, #8
 8009c7a:	60f8      	str	r0, [r7, #12]
 8009c7c:	4608      	mov	r0, r1
 8009c7e:	4611      	mov	r1, r2
 8009c80:	461a      	mov	r2, r3
 8009c82:	4603      	mov	r3, r0
 8009c84:	817b      	strh	r3, [r7, #10]
 8009c86:	460b      	mov	r3, r1
 8009c88:	813b      	strh	r3, [r7, #8]
 8009c8a:	4613      	mov	r3, r2
 8009c8c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009c8e:	88fb      	ldrh	r3, [r7, #6]
 8009c90:	b2da      	uxtb	r2, r3
 8009c92:	8979      	ldrh	r1, [r7, #10]
 8009c94:	4b20      	ldr	r3, [pc, #128]	; (8009d18 <I2C_RequestMemoryWrite+0xa4>)
 8009c96:	9300      	str	r3, [sp, #0]
 8009c98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009c9c:	68f8      	ldr	r0, [r7, #12]
 8009c9e:	f000 fa6f 	bl	800a180 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ca2:	69fa      	ldr	r2, [r7, #28]
 8009ca4:	69b9      	ldr	r1, [r7, #24]
 8009ca6:	68f8      	ldr	r0, [r7, #12]
 8009ca8:	f000 f8ff 	bl	8009eaa <I2C_WaitOnTXISFlagUntilTimeout>
 8009cac:	4603      	mov	r3, r0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d001      	beq.n	8009cb6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	e02c      	b.n	8009d10 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009cb6:	88fb      	ldrh	r3, [r7, #6]
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d105      	bne.n	8009cc8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009cbc:	893b      	ldrh	r3, [r7, #8]
 8009cbe:	b2da      	uxtb	r2, r3
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	629a      	str	r2, [r3, #40]	; 0x28
 8009cc6:	e015      	b.n	8009cf4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009cc8:	893b      	ldrh	r3, [r7, #8]
 8009cca:	0a1b      	lsrs	r3, r3, #8
 8009ccc:	b29b      	uxth	r3, r3
 8009cce:	b2da      	uxtb	r2, r3
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009cd6:	69fa      	ldr	r2, [r7, #28]
 8009cd8:	69b9      	ldr	r1, [r7, #24]
 8009cda:	68f8      	ldr	r0, [r7, #12]
 8009cdc:	f000 f8e5 	bl	8009eaa <I2C_WaitOnTXISFlagUntilTimeout>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d001      	beq.n	8009cea <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	e012      	b.n	8009d10 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009cea:	893b      	ldrh	r3, [r7, #8]
 8009cec:	b2da      	uxtb	r2, r3
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009cf4:	69fb      	ldr	r3, [r7, #28]
 8009cf6:	9300      	str	r3, [sp, #0]
 8009cf8:	69bb      	ldr	r3, [r7, #24]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	2180      	movs	r1, #128	; 0x80
 8009cfe:	68f8      	ldr	r0, [r7, #12]
 8009d00:	f000 f884 	bl	8009e0c <I2C_WaitOnFlagUntilTimeout>
 8009d04:	4603      	mov	r3, r0
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d001      	beq.n	8009d0e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	e000      	b.n	8009d10 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009d0e:	2300      	movs	r3, #0
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3710      	adds	r7, #16
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	80002000 	.word	0x80002000

08009d1c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b086      	sub	sp, #24
 8009d20:	af02      	add	r7, sp, #8
 8009d22:	60f8      	str	r0, [r7, #12]
 8009d24:	4608      	mov	r0, r1
 8009d26:	4611      	mov	r1, r2
 8009d28:	461a      	mov	r2, r3
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	817b      	strh	r3, [r7, #10]
 8009d2e:	460b      	mov	r3, r1
 8009d30:	813b      	strh	r3, [r7, #8]
 8009d32:	4613      	mov	r3, r2
 8009d34:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009d36:	88fb      	ldrh	r3, [r7, #6]
 8009d38:	b2da      	uxtb	r2, r3
 8009d3a:	8979      	ldrh	r1, [r7, #10]
 8009d3c:	4b20      	ldr	r3, [pc, #128]	; (8009dc0 <I2C_RequestMemoryRead+0xa4>)
 8009d3e:	9300      	str	r3, [sp, #0]
 8009d40:	2300      	movs	r3, #0
 8009d42:	68f8      	ldr	r0, [r7, #12]
 8009d44:	f000 fa1c 	bl	800a180 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d48:	69fa      	ldr	r2, [r7, #28]
 8009d4a:	69b9      	ldr	r1, [r7, #24]
 8009d4c:	68f8      	ldr	r0, [r7, #12]
 8009d4e:	f000 f8ac 	bl	8009eaa <I2C_WaitOnTXISFlagUntilTimeout>
 8009d52:	4603      	mov	r3, r0
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d001      	beq.n	8009d5c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	e02c      	b.n	8009db6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009d5c:	88fb      	ldrh	r3, [r7, #6]
 8009d5e:	2b01      	cmp	r3, #1
 8009d60:	d105      	bne.n	8009d6e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009d62:	893b      	ldrh	r3, [r7, #8]
 8009d64:	b2da      	uxtb	r2, r3
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	629a      	str	r2, [r3, #40]	; 0x28
 8009d6c:	e015      	b.n	8009d9a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009d6e:	893b      	ldrh	r3, [r7, #8]
 8009d70:	0a1b      	lsrs	r3, r3, #8
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	b2da      	uxtb	r2, r3
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d7c:	69fa      	ldr	r2, [r7, #28]
 8009d7e:	69b9      	ldr	r1, [r7, #24]
 8009d80:	68f8      	ldr	r0, [r7, #12]
 8009d82:	f000 f892 	bl	8009eaa <I2C_WaitOnTXISFlagUntilTimeout>
 8009d86:	4603      	mov	r3, r0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d001      	beq.n	8009d90 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	e012      	b.n	8009db6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009d90:	893b      	ldrh	r3, [r7, #8]
 8009d92:	b2da      	uxtb	r2, r3
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009d9a:	69fb      	ldr	r3, [r7, #28]
 8009d9c:	9300      	str	r3, [sp, #0]
 8009d9e:	69bb      	ldr	r3, [r7, #24]
 8009da0:	2200      	movs	r2, #0
 8009da2:	2140      	movs	r1, #64	; 0x40
 8009da4:	68f8      	ldr	r0, [r7, #12]
 8009da6:	f000 f831 	bl	8009e0c <I2C_WaitOnFlagUntilTimeout>
 8009daa:	4603      	mov	r3, r0
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d001      	beq.n	8009db4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009db0:	2301      	movs	r3, #1
 8009db2:	e000      	b.n	8009db6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009db4:	2300      	movs	r3, #0
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3710      	adds	r7, #16
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
 8009dbe:	bf00      	nop
 8009dc0:	80002000 	.word	0x80002000

08009dc4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b083      	sub	sp, #12
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	699b      	ldr	r3, [r3, #24]
 8009dd2:	f003 0302 	and.w	r3, r3, #2
 8009dd6:	2b02      	cmp	r3, #2
 8009dd8:	d103      	bne.n	8009de2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	2200      	movs	r2, #0
 8009de0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	699b      	ldr	r3, [r3, #24]
 8009de8:	f003 0301 	and.w	r3, r3, #1
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d007      	beq.n	8009e00 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	699a      	ldr	r2, [r3, #24]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f042 0201 	orr.w	r2, r2, #1
 8009dfe:	619a      	str	r2, [r3, #24]
  }
}
 8009e00:	bf00      	nop
 8009e02:	370c      	adds	r7, #12
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr

08009e0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b084      	sub	sp, #16
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	60f8      	str	r0, [r7, #12]
 8009e14:	60b9      	str	r1, [r7, #8]
 8009e16:	603b      	str	r3, [r7, #0]
 8009e18:	4613      	mov	r3, r2
 8009e1a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009e1c:	e031      	b.n	8009e82 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e24:	d02d      	beq.n	8009e82 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e26:	f7fa fcaf 	bl	8004788 <HAL_GetTick>
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	69bb      	ldr	r3, [r7, #24]
 8009e2e:	1ad3      	subs	r3, r2, r3
 8009e30:	683a      	ldr	r2, [r7, #0]
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d302      	bcc.n	8009e3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d122      	bne.n	8009e82 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	699a      	ldr	r2, [r3, #24]
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	4013      	ands	r3, r2
 8009e46:	68ba      	ldr	r2, [r7, #8]
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	bf0c      	ite	eq
 8009e4c:	2301      	moveq	r3, #1
 8009e4e:	2300      	movne	r3, #0
 8009e50:	b2db      	uxtb	r3, r3
 8009e52:	461a      	mov	r2, r3
 8009e54:	79fb      	ldrb	r3, [r7, #7]
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d113      	bne.n	8009e82 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e5e:	f043 0220 	orr.w	r2, r3, #32
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2220      	movs	r2, #32
 8009e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2200      	movs	r2, #0
 8009e72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8009e7e:	2301      	movs	r3, #1
 8009e80:	e00f      	b.n	8009ea2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	699a      	ldr	r2, [r3, #24]
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	4013      	ands	r3, r2
 8009e8c:	68ba      	ldr	r2, [r7, #8]
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	bf0c      	ite	eq
 8009e92:	2301      	moveq	r3, #1
 8009e94:	2300      	movne	r3, #0
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	461a      	mov	r2, r3
 8009e9a:	79fb      	ldrb	r3, [r7, #7]
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d0be      	beq.n	8009e1e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ea0:	2300      	movs	r3, #0
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3710      	adds	r7, #16
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}

08009eaa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009eaa:	b580      	push	{r7, lr}
 8009eac:	b084      	sub	sp, #16
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	60f8      	str	r0, [r7, #12]
 8009eb2:	60b9      	str	r1, [r7, #8]
 8009eb4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009eb6:	e033      	b.n	8009f20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009eb8:	687a      	ldr	r2, [r7, #4]
 8009eba:	68b9      	ldr	r1, [r7, #8]
 8009ebc:	68f8      	ldr	r0, [r7, #12]
 8009ebe:	f000 f87f 	bl	8009fc0 <I2C_IsErrorOccurred>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d001      	beq.n	8009ecc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	e031      	b.n	8009f30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ed2:	d025      	beq.n	8009f20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ed4:	f7fa fc58 	bl	8004788 <HAL_GetTick>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	1ad3      	subs	r3, r2, r3
 8009ede:	68ba      	ldr	r2, [r7, #8]
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d302      	bcc.n	8009eea <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d11a      	bne.n	8009f20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	699b      	ldr	r3, [r3, #24]
 8009ef0:	f003 0302 	and.w	r3, r3, #2
 8009ef4:	2b02      	cmp	r3, #2
 8009ef6:	d013      	beq.n	8009f20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009efc:	f043 0220 	orr.w	r2, r3, #32
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	2220      	movs	r2, #32
 8009f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2200      	movs	r2, #0
 8009f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	e007      	b.n	8009f30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	699b      	ldr	r3, [r3, #24]
 8009f26:	f003 0302 	and.w	r3, r3, #2
 8009f2a:	2b02      	cmp	r3, #2
 8009f2c:	d1c4      	bne.n	8009eb8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009f2e:	2300      	movs	r3, #0
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3710      	adds	r7, #16
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009f44:	e02f      	b.n	8009fa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	68b9      	ldr	r1, [r7, #8]
 8009f4a:	68f8      	ldr	r0, [r7, #12]
 8009f4c:	f000 f838 	bl	8009fc0 <I2C_IsErrorOccurred>
 8009f50:	4603      	mov	r3, r0
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d001      	beq.n	8009f5a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009f56:	2301      	movs	r3, #1
 8009f58:	e02d      	b.n	8009fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f5a:	f7fa fc15 	bl	8004788 <HAL_GetTick>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	1ad3      	subs	r3, r2, r3
 8009f64:	68ba      	ldr	r2, [r7, #8]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d302      	bcc.n	8009f70 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d11a      	bne.n	8009fa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	699b      	ldr	r3, [r3, #24]
 8009f76:	f003 0320 	and.w	r3, r3, #32
 8009f7a:	2b20      	cmp	r3, #32
 8009f7c:	d013      	beq.n	8009fa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f82:	f043 0220 	orr.w	r2, r3, #32
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2220      	movs	r2, #32
 8009f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2200      	movs	r2, #0
 8009f96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	e007      	b.n	8009fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	699b      	ldr	r3, [r3, #24]
 8009fac:	f003 0320 	and.w	r3, r3, #32
 8009fb0:	2b20      	cmp	r3, #32
 8009fb2:	d1c8      	bne.n	8009f46 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009fb4:	2300      	movs	r3, #0
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3710      	adds	r7, #16
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
	...

08009fc0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b08a      	sub	sp, #40	; 0x28
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	60f8      	str	r0, [r7, #12]
 8009fc8:	60b9      	str	r1, [r7, #8]
 8009fca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	699b      	ldr	r3, [r3, #24]
 8009fd8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009fe2:	69bb      	ldr	r3, [r7, #24]
 8009fe4:	f003 0310 	and.w	r3, r3, #16
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d068      	beq.n	800a0be <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	2210      	movs	r2, #16
 8009ff2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009ff4:	e049      	b.n	800a08a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ffc:	d045      	beq.n	800a08a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009ffe:	f7fa fbc3 	bl	8004788 <HAL_GetTick>
 800a002:	4602      	mov	r2, r0
 800a004:	69fb      	ldr	r3, [r7, #28]
 800a006:	1ad3      	subs	r3, r2, r3
 800a008:	68ba      	ldr	r2, [r7, #8]
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d302      	bcc.n	800a014 <I2C_IsErrorOccurred+0x54>
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d13a      	bne.n	800a08a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a01e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a026:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	699b      	ldr	r3, [r3, #24]
 800a02e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a032:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a036:	d121      	bne.n	800a07c <I2C_IsErrorOccurred+0xbc>
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a03e:	d01d      	beq.n	800a07c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800a040:	7cfb      	ldrb	r3, [r7, #19]
 800a042:	2b20      	cmp	r3, #32
 800a044:	d01a      	beq.n	800a07c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	685a      	ldr	r2, [r3, #4]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a054:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a056:	f7fa fb97 	bl	8004788 <HAL_GetTick>
 800a05a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a05c:	e00e      	b.n	800a07c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a05e:	f7fa fb93 	bl	8004788 <HAL_GetTick>
 800a062:	4602      	mov	r2, r0
 800a064:	69fb      	ldr	r3, [r7, #28]
 800a066:	1ad3      	subs	r3, r2, r3
 800a068:	2b19      	cmp	r3, #25
 800a06a:	d907      	bls.n	800a07c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800a06c:	6a3b      	ldr	r3, [r7, #32]
 800a06e:	f043 0320 	orr.w	r3, r3, #32
 800a072:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800a074:	2301      	movs	r3, #1
 800a076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800a07a:	e006      	b.n	800a08a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	699b      	ldr	r3, [r3, #24]
 800a082:	f003 0320 	and.w	r3, r3, #32
 800a086:	2b20      	cmp	r3, #32
 800a088:	d1e9      	bne.n	800a05e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	699b      	ldr	r3, [r3, #24]
 800a090:	f003 0320 	and.w	r3, r3, #32
 800a094:	2b20      	cmp	r3, #32
 800a096:	d003      	beq.n	800a0a0 <I2C_IsErrorOccurred+0xe0>
 800a098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d0aa      	beq.n	8009ff6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a0a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d103      	bne.n	800a0b0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	2220      	movs	r2, #32
 800a0ae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a0b0:	6a3b      	ldr	r3, [r7, #32]
 800a0b2:	f043 0304 	orr.w	r3, r3, #4
 800a0b6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	699b      	ldr	r3, [r3, #24]
 800a0c4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a0c6:	69bb      	ldr	r3, [r7, #24]
 800a0c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d00b      	beq.n	800a0e8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a0d0:	6a3b      	ldr	r3, [r7, #32]
 800a0d2:	f043 0301 	orr.w	r3, r3, #1
 800a0d6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a0e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a0e8:	69bb      	ldr	r3, [r7, #24]
 800a0ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d00b      	beq.n	800a10a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a0f2:	6a3b      	ldr	r3, [r7, #32]
 800a0f4:	f043 0308 	orr.w	r3, r3, #8
 800a0f8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a102:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a104:	2301      	movs	r3, #1
 800a106:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a10a:	69bb      	ldr	r3, [r7, #24]
 800a10c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a110:	2b00      	cmp	r3, #0
 800a112:	d00b      	beq.n	800a12c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a114:	6a3b      	ldr	r3, [r7, #32]
 800a116:	f043 0302 	orr.w	r3, r3, #2
 800a11a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a124:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a126:	2301      	movs	r3, #1
 800a128:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800a12c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a130:	2b00      	cmp	r3, #0
 800a132:	d01c      	beq.n	800a16e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a134:	68f8      	ldr	r0, [r7, #12]
 800a136:	f7ff fe45 	bl	8009dc4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	6859      	ldr	r1, [r3, #4]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	4b0d      	ldr	r3, [pc, #52]	; (800a17c <I2C_IsErrorOccurred+0x1bc>)
 800a146:	400b      	ands	r3, r1
 800a148:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a14e:	6a3b      	ldr	r3, [r7, #32]
 800a150:	431a      	orrs	r2, r3
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2220      	movs	r2, #32
 800a15a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2200      	movs	r2, #0
 800a162:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2200      	movs	r2, #0
 800a16a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800a16e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a172:	4618      	mov	r0, r3
 800a174:	3728      	adds	r7, #40	; 0x28
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}
 800a17a:	bf00      	nop
 800a17c:	fe00e800 	.word	0xfe00e800

0800a180 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a180:	b480      	push	{r7}
 800a182:	b087      	sub	sp, #28
 800a184:	af00      	add	r7, sp, #0
 800a186:	60f8      	str	r0, [r7, #12]
 800a188:	607b      	str	r3, [r7, #4]
 800a18a:	460b      	mov	r3, r1
 800a18c:	817b      	strh	r3, [r7, #10]
 800a18e:	4613      	mov	r3, r2
 800a190:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a192:	897b      	ldrh	r3, [r7, #10]
 800a194:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a198:	7a7b      	ldrb	r3, [r7, #9]
 800a19a:	041b      	lsls	r3, r3, #16
 800a19c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a1a0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a1a6:	6a3b      	ldr	r3, [r7, #32]
 800a1a8:	4313      	orrs	r3, r2
 800a1aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a1ae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	685a      	ldr	r2, [r3, #4]
 800a1b6:	6a3b      	ldr	r3, [r7, #32]
 800a1b8:	0d5b      	lsrs	r3, r3, #21
 800a1ba:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a1be:	4b08      	ldr	r3, [pc, #32]	; (800a1e0 <I2C_TransferConfig+0x60>)
 800a1c0:	430b      	orrs	r3, r1
 800a1c2:	43db      	mvns	r3, r3
 800a1c4:	ea02 0103 	and.w	r1, r2, r3
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	697a      	ldr	r2, [r7, #20]
 800a1ce:	430a      	orrs	r2, r1
 800a1d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a1d2:	bf00      	nop
 800a1d4:	371c      	adds	r7, #28
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1dc:	4770      	bx	lr
 800a1de:	bf00      	nop
 800a1e0:	03ff63ff 	.word	0x03ff63ff

0800a1e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	2b20      	cmp	r3, #32
 800a1f8:	d138      	bne.n	800a26c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a200:	2b01      	cmp	r3, #1
 800a202:	d101      	bne.n	800a208 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a204:	2302      	movs	r3, #2
 800a206:	e032      	b.n	800a26e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2201      	movs	r2, #1
 800a20c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2224      	movs	r2, #36	; 0x24
 800a214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f022 0201 	bic.w	r2, r2, #1
 800a226:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	681a      	ldr	r2, [r3, #0]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a236:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	6819      	ldr	r1, [r3, #0]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	683a      	ldr	r2, [r7, #0]
 800a244:	430a      	orrs	r2, r1
 800a246:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	681a      	ldr	r2, [r3, #0]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f042 0201 	orr.w	r2, r2, #1
 800a256:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2220      	movs	r2, #32
 800a25c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2200      	movs	r2, #0
 800a264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a268:	2300      	movs	r3, #0
 800a26a:	e000      	b.n	800a26e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a26c:	2302      	movs	r3, #2
  }
}
 800a26e:	4618      	mov	r0, r3
 800a270:	370c      	adds	r7, #12
 800a272:	46bd      	mov	sp, r7
 800a274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a278:	4770      	bx	lr

0800a27a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a27a:	b480      	push	{r7}
 800a27c:	b085      	sub	sp, #20
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
 800a282:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a28a:	b2db      	uxtb	r3, r3
 800a28c:	2b20      	cmp	r3, #32
 800a28e:	d139      	bne.n	800a304 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a296:	2b01      	cmp	r3, #1
 800a298:	d101      	bne.n	800a29e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a29a:	2302      	movs	r3, #2
 800a29c:	e033      	b.n	800a306 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2201      	movs	r2, #1
 800a2a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2224      	movs	r2, #36	; 0x24
 800a2aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f022 0201 	bic.w	r2, r2, #1
 800a2bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a2cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	021b      	lsls	r3, r3, #8
 800a2d2:	68fa      	ldr	r2, [r7, #12]
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	68fa      	ldr	r2, [r7, #12]
 800a2de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	681a      	ldr	r2, [r3, #0]
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f042 0201 	orr.w	r2, r2, #1
 800a2ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2220      	movs	r2, #32
 800a2f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a300:	2300      	movs	r3, #0
 800a302:	e000      	b.n	800a306 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a304:	2302      	movs	r3, #2
  }
}
 800a306:	4618      	mov	r0, r3
 800a308:	3714      	adds	r7, #20
 800a30a:	46bd      	mov	sp, r7
 800a30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a310:	4770      	bx	lr
	...

0800a314 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b084      	sub	sp, #16
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d101      	bne.n	800a326 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800a322:	2301      	movs	r3, #1
 800a324:	e0bf      	b.n	800a4a6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d106      	bne.n	800a340 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2200      	movs	r2, #0
 800a336:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f7f7 f92c 	bl	8001598 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2202      	movs	r2, #2
 800a344:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	699a      	ldr	r2, [r3, #24]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800a356:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	6999      	ldr	r1, [r3, #24]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	685a      	ldr	r2, [r3, #4]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a36c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	691b      	ldr	r3, [r3, #16]
 800a372:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	430a      	orrs	r2, r1
 800a37a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	6899      	ldr	r1, [r3, #8]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681a      	ldr	r2, [r3, #0]
 800a386:	4b4a      	ldr	r3, [pc, #296]	; (800a4b0 <HAL_LTDC_Init+0x19c>)
 800a388:	400b      	ands	r3, r1
 800a38a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	695b      	ldr	r3, [r3, #20]
 800a390:	041b      	lsls	r3, r3, #16
 800a392:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	6899      	ldr	r1, [r3, #8]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	699a      	ldr	r2, [r3, #24]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	431a      	orrs	r2, r3
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	430a      	orrs	r2, r1
 800a3a8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	68d9      	ldr	r1, [r3, #12]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	4b3e      	ldr	r3, [pc, #248]	; (800a4b0 <HAL_LTDC_Init+0x19c>)
 800a3b6:	400b      	ands	r3, r1
 800a3b8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	69db      	ldr	r3, [r3, #28]
 800a3be:	041b      	lsls	r3, r3, #16
 800a3c0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	68d9      	ldr	r1, [r3, #12]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6a1a      	ldr	r2, [r3, #32]
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	431a      	orrs	r2, r3
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	430a      	orrs	r2, r1
 800a3d6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	6919      	ldr	r1, [r3, #16]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681a      	ldr	r2, [r3, #0]
 800a3e2:	4b33      	ldr	r3, [pc, #204]	; (800a4b0 <HAL_LTDC_Init+0x19c>)
 800a3e4:	400b      	ands	r3, r1
 800a3e6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ec:	041b      	lsls	r3, r3, #16
 800a3ee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	6919      	ldr	r1, [r3, #16]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	431a      	orrs	r2, r3
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	430a      	orrs	r2, r1
 800a404:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	6959      	ldr	r1, [r3, #20]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681a      	ldr	r2, [r3, #0]
 800a410:	4b27      	ldr	r3, [pc, #156]	; (800a4b0 <HAL_LTDC_Init+0x19c>)
 800a412:	400b      	ands	r3, r1
 800a414:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a41a:	041b      	lsls	r3, r3, #16
 800a41c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	6959      	ldr	r1, [r3, #20]
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	431a      	orrs	r2, r3
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	430a      	orrs	r2, r1
 800a432:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a43a:	021b      	lsls	r3, r3, #8
 800a43c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800a444:	041b      	lsls	r3, r3, #16
 800a446:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800a456:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a45e:	68ba      	ldr	r2, [r7, #8]
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	4313      	orrs	r3, r2
 800a464:	687a      	ldr	r2, [r7, #4]
 800a466:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800a46a:	431a      	orrs	r2, r3
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	430a      	orrs	r2, r1
 800a472:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f042 0206 	orr.w	r2, r2, #6
 800a482:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	699a      	ldr	r2, [r3, #24]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f042 0201 	orr.w	r2, r2, #1
 800a492:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2200      	movs	r2, #0
 800a498:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800a4a4:	2300      	movs	r3, #0
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3710      	adds	r7, #16
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
 800a4ae:	bf00      	nop
 800a4b0:	f000f800 	.word	0xf000f800

0800a4b4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b084      	sub	sp, #16
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4c2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4ca:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f003 0304 	and.w	r3, r3, #4
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d023      	beq.n	800a51e <HAL_LTDC_IRQHandler+0x6a>
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	f003 0304 	and.w	r3, r3, #4
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d01e      	beq.n	800a51e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f022 0204 	bic.w	r2, r2, #4
 800a4ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2204      	movs	r2, #4
 800a4f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a4fe:	f043 0201 	orr.w	r2, r3, #1
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2204      	movs	r2, #4
 800a50c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f000 f86f 	bl	800a5fc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f003 0302 	and.w	r3, r3, #2
 800a524:	2b00      	cmp	r3, #0
 800a526:	d023      	beq.n	800a570 <HAL_LTDC_IRQHandler+0xbc>
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	f003 0302 	and.w	r3, r3, #2
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d01e      	beq.n	800a570 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f022 0202 	bic.w	r2, r2, #2
 800a540:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	2202      	movs	r2, #2
 800a548:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a550:	f043 0202 	orr.w	r2, r3, #2
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2204      	movs	r2, #4
 800a55e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f000 f846 	bl	800a5fc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	f003 0301 	and.w	r3, r3, #1
 800a576:	2b00      	cmp	r3, #0
 800a578:	d01b      	beq.n	800a5b2 <HAL_LTDC_IRQHandler+0xfe>
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	f003 0301 	and.w	r3, r3, #1
 800a580:	2b00      	cmp	r3, #0
 800a582:	d016      	beq.n	800a5b2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f022 0201 	bic.w	r2, r2, #1
 800a592:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	2201      	movs	r2, #1
 800a59a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2201      	movs	r2, #1
 800a5a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f000 f82f 	bl	800a610 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f003 0308 	and.w	r3, r3, #8
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d01b      	beq.n	800a5f4 <HAL_LTDC_IRQHandler+0x140>
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	f003 0308 	and.w	r3, r3, #8
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d016      	beq.n	800a5f4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f022 0208 	bic.w	r2, r2, #8
 800a5d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	2208      	movs	r2, #8
 800a5dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 f818 	bl	800a624 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800a5f4:	bf00      	nop
 800a5f6:	3710      	adds	r7, #16
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b083      	sub	sp, #12
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800a604:	bf00      	nop
 800a606:	370c      	adds	r7, #12
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr

0800a610 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a610:	b480      	push	{r7}
 800a612:	b083      	sub	sp, #12
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800a618:	bf00      	nop
 800a61a:	370c      	adds	r7, #12
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr

0800a624 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a624:	b480      	push	{r7}
 800a626:	b083      	sub	sp, #12
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800a62c:	bf00      	nop
 800a62e:	370c      	adds	r7, #12
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a638:	b5b0      	push	{r4, r5, r7, lr}
 800a63a:	b084      	sub	sp, #16
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	60f8      	str	r0, [r7, #12]
 800a640:	60b9      	str	r1, [r7, #8]
 800a642:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d101      	bne.n	800a652 <HAL_LTDC_ConfigLayer+0x1a>
 800a64e:	2302      	movs	r3, #2
 800a650:	e02c      	b.n	800a6ac <HAL_LTDC_ConfigLayer+0x74>
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	2201      	movs	r2, #1
 800a656:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2202      	movs	r2, #2
 800a65e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a662:	68fa      	ldr	r2, [r7, #12]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2134      	movs	r1, #52	; 0x34
 800a668:	fb01 f303 	mul.w	r3, r1, r3
 800a66c:	4413      	add	r3, r2
 800a66e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	4614      	mov	r4, r2
 800a676:	461d      	mov	r5, r3
 800a678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a67a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a67c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a67e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a684:	682b      	ldr	r3, [r5, #0]
 800a686:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a688:	687a      	ldr	r2, [r7, #4]
 800a68a:	68b9      	ldr	r1, [r7, #8]
 800a68c:	68f8      	ldr	r0, [r7, #12]
 800a68e:	f000 f811 	bl	800a6b4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	2201      	movs	r2, #1
 800a698:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2201      	movs	r2, #1
 800a69e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800a6aa:	2300      	movs	r3, #0
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3710      	adds	r7, #16
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bdb0      	pop	{r4, r5, r7, pc}

0800a6b4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b089      	sub	sp, #36	; 0x24
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	60f8      	str	r0, [r7, #12]
 800a6bc:	60b9      	str	r1, [r7, #8]
 800a6be:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	685a      	ldr	r2, [r3, #4]
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	68db      	ldr	r3, [r3, #12]
 800a6ca:	0c1b      	lsrs	r3, r3, #16
 800a6cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a6d0:	4413      	add	r3, r2
 800a6d2:	041b      	lsls	r3, r3, #16
 800a6d4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	461a      	mov	r2, r3
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	01db      	lsls	r3, r3, #7
 800a6e0:	4413      	add	r3, r2
 800a6e2:	3384      	adds	r3, #132	; 0x84
 800a6e4:	685b      	ldr	r3, [r3, #4]
 800a6e6:	68fa      	ldr	r2, [r7, #12]
 800a6e8:	6812      	ldr	r2, [r2, #0]
 800a6ea:	4611      	mov	r1, r2
 800a6ec:	687a      	ldr	r2, [r7, #4]
 800a6ee:	01d2      	lsls	r2, r2, #7
 800a6f0:	440a      	add	r2, r1
 800a6f2:	3284      	adds	r2, #132	; 0x84
 800a6f4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a6f8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	68db      	ldr	r3, [r3, #12]
 800a704:	0c1b      	lsrs	r3, r3, #16
 800a706:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a70a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a70c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	4619      	mov	r1, r3
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	01db      	lsls	r3, r3, #7
 800a718:	440b      	add	r3, r1
 800a71a:	3384      	adds	r3, #132	; 0x84
 800a71c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a71e:	69fb      	ldr	r3, [r7, #28]
 800a720:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a722:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	68da      	ldr	r2, [r3, #12]
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	68db      	ldr	r3, [r3, #12]
 800a72e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a732:	4413      	add	r3, r2
 800a734:	041b      	lsls	r3, r3, #16
 800a736:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	461a      	mov	r2, r3
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	01db      	lsls	r3, r3, #7
 800a742:	4413      	add	r3, r2
 800a744:	3384      	adds	r3, #132	; 0x84
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	68fa      	ldr	r2, [r7, #12]
 800a74a:	6812      	ldr	r2, [r2, #0]
 800a74c:	4611      	mov	r1, r2
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	01d2      	lsls	r2, r2, #7
 800a752:	440a      	add	r2, r1
 800a754:	3284      	adds	r2, #132	; 0x84
 800a756:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a75a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	689a      	ldr	r2, [r3, #8]
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	68db      	ldr	r3, [r3, #12]
 800a766:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a76a:	4413      	add	r3, r2
 800a76c:	1c5a      	adds	r2, r3, #1
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	4619      	mov	r1, r3
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	01db      	lsls	r3, r3, #7
 800a778:	440b      	add	r3, r1
 800a77a:	3384      	adds	r3, #132	; 0x84
 800a77c:	4619      	mov	r1, r3
 800a77e:	69fb      	ldr	r3, [r7, #28]
 800a780:	4313      	orrs	r3, r2
 800a782:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	461a      	mov	r2, r3
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	01db      	lsls	r3, r3, #7
 800a78e:	4413      	add	r3, r2
 800a790:	3384      	adds	r3, #132	; 0x84
 800a792:	691b      	ldr	r3, [r3, #16]
 800a794:	68fa      	ldr	r2, [r7, #12]
 800a796:	6812      	ldr	r2, [r2, #0]
 800a798:	4611      	mov	r1, r2
 800a79a:	687a      	ldr	r2, [r7, #4]
 800a79c:	01d2      	lsls	r2, r2, #7
 800a79e:	440a      	add	r2, r1
 800a7a0:	3284      	adds	r2, #132	; 0x84
 800a7a2:	f023 0307 	bic.w	r3, r3, #7
 800a7a6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	01db      	lsls	r3, r3, #7
 800a7b2:	4413      	add	r3, r2
 800a7b4:	3384      	adds	r3, #132	; 0x84
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	691b      	ldr	r3, [r3, #16]
 800a7bc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a7c4:	021b      	lsls	r3, r3, #8
 800a7c6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a7ce:	041b      	lsls	r3, r3, #16
 800a7d0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	699b      	ldr	r3, [r3, #24]
 800a7d6:	061b      	lsls	r3, r3, #24
 800a7d8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	461a      	mov	r2, r3
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	01db      	lsls	r3, r3, #7
 800a7e4:	4413      	add	r3, r2
 800a7e6:	3384      	adds	r3, #132	; 0x84
 800a7e8:	699b      	ldr	r3, [r3, #24]
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	01db      	lsls	r3, r3, #7
 800a7f4:	4413      	add	r3, r2
 800a7f6:	3384      	adds	r3, #132	; 0x84
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a804:	461a      	mov	r2, r3
 800a806:	69fb      	ldr	r3, [r7, #28]
 800a808:	431a      	orrs	r2, r3
 800a80a:	69bb      	ldr	r3, [r7, #24]
 800a80c:	431a      	orrs	r2, r3
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	4619      	mov	r1, r3
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	01db      	lsls	r3, r3, #7
 800a818:	440b      	add	r3, r1
 800a81a:	3384      	adds	r3, #132	; 0x84
 800a81c:	4619      	mov	r1, r3
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	4313      	orrs	r3, r2
 800a822:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	461a      	mov	r2, r3
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	01db      	lsls	r3, r3, #7
 800a82e:	4413      	add	r3, r2
 800a830:	3384      	adds	r3, #132	; 0x84
 800a832:	695b      	ldr	r3, [r3, #20]
 800a834:	68fa      	ldr	r2, [r7, #12]
 800a836:	6812      	ldr	r2, [r2, #0]
 800a838:	4611      	mov	r1, r2
 800a83a:	687a      	ldr	r2, [r7, #4]
 800a83c:	01d2      	lsls	r2, r2, #7
 800a83e:	440a      	add	r2, r1
 800a840:	3284      	adds	r2, #132	; 0x84
 800a842:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a846:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	461a      	mov	r2, r3
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	01db      	lsls	r3, r3, #7
 800a852:	4413      	add	r3, r2
 800a854:	3384      	adds	r3, #132	; 0x84
 800a856:	461a      	mov	r2, r3
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	695b      	ldr	r3, [r3, #20]
 800a85c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	461a      	mov	r2, r3
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	01db      	lsls	r3, r3, #7
 800a868:	4413      	add	r3, r2
 800a86a:	3384      	adds	r3, #132	; 0x84
 800a86c:	69da      	ldr	r2, [r3, #28]
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	4619      	mov	r1, r3
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	01db      	lsls	r3, r3, #7
 800a878:	440b      	add	r3, r1
 800a87a:	3384      	adds	r3, #132	; 0x84
 800a87c:	4619      	mov	r1, r3
 800a87e:	4b58      	ldr	r3, [pc, #352]	; (800a9e0 <LTDC_SetConfig+0x32c>)
 800a880:	4013      	ands	r3, r2
 800a882:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	69da      	ldr	r2, [r3, #28]
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	6a1b      	ldr	r3, [r3, #32]
 800a88c:	68f9      	ldr	r1, [r7, #12]
 800a88e:	6809      	ldr	r1, [r1, #0]
 800a890:	4608      	mov	r0, r1
 800a892:	6879      	ldr	r1, [r7, #4]
 800a894:	01c9      	lsls	r1, r1, #7
 800a896:	4401      	add	r1, r0
 800a898:	3184      	adds	r1, #132	; 0x84
 800a89a:	4313      	orrs	r3, r2
 800a89c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	01db      	lsls	r3, r3, #7
 800a8a8:	4413      	add	r3, r2
 800a8aa:	3384      	adds	r3, #132	; 0x84
 800a8ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	461a      	mov	r2, r3
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	01db      	lsls	r3, r3, #7
 800a8b8:	4413      	add	r3, r2
 800a8ba:	3384      	adds	r3, #132	; 0x84
 800a8bc:	461a      	mov	r2, r3
 800a8be:	2300      	movs	r3, #0
 800a8c0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	01db      	lsls	r3, r3, #7
 800a8cc:	4413      	add	r3, r2
 800a8ce:	3384      	adds	r3, #132	; 0x84
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	691b      	ldr	r3, [r3, #16]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d102      	bne.n	800a8e6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800a8e0:	2304      	movs	r3, #4
 800a8e2:	61fb      	str	r3, [r7, #28]
 800a8e4:	e01b      	b.n	800a91e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	691b      	ldr	r3, [r3, #16]
 800a8ea:	2b01      	cmp	r3, #1
 800a8ec:	d102      	bne.n	800a8f4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800a8ee:	2303      	movs	r3, #3
 800a8f0:	61fb      	str	r3, [r7, #28]
 800a8f2:	e014      	b.n	800a91e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	691b      	ldr	r3, [r3, #16]
 800a8f8:	2b04      	cmp	r3, #4
 800a8fa:	d00b      	beq.n	800a914 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a900:	2b02      	cmp	r3, #2
 800a902:	d007      	beq.n	800a914 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a908:	2b03      	cmp	r3, #3
 800a90a:	d003      	beq.n	800a914 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a910:	2b07      	cmp	r3, #7
 800a912:	d102      	bne.n	800a91a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800a914:	2302      	movs	r3, #2
 800a916:	61fb      	str	r3, [r7, #28]
 800a918:	e001      	b.n	800a91e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800a91a:	2301      	movs	r3, #1
 800a91c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	461a      	mov	r2, r3
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	01db      	lsls	r3, r3, #7
 800a928:	4413      	add	r3, r2
 800a92a:	3384      	adds	r3, #132	; 0x84
 800a92c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a92e:	68fa      	ldr	r2, [r7, #12]
 800a930:	6812      	ldr	r2, [r2, #0]
 800a932:	4611      	mov	r1, r2
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	01d2      	lsls	r2, r2, #7
 800a938:	440a      	add	r2, r1
 800a93a:	3284      	adds	r2, #132	; 0x84
 800a93c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800a940:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a946:	69fa      	ldr	r2, [r7, #28]
 800a948:	fb02 f303 	mul.w	r3, r2, r3
 800a94c:	041a      	lsls	r2, r3, #16
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	6859      	ldr	r1, [r3, #4]
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	1acb      	subs	r3, r1, r3
 800a958:	69f9      	ldr	r1, [r7, #28]
 800a95a:	fb01 f303 	mul.w	r3, r1, r3
 800a95e:	3307      	adds	r3, #7
 800a960:	68f9      	ldr	r1, [r7, #12]
 800a962:	6809      	ldr	r1, [r1, #0]
 800a964:	4608      	mov	r0, r1
 800a966:	6879      	ldr	r1, [r7, #4]
 800a968:	01c9      	lsls	r1, r1, #7
 800a96a:	4401      	add	r1, r0
 800a96c:	3184      	adds	r1, #132	; 0x84
 800a96e:	4313      	orrs	r3, r2
 800a970:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	461a      	mov	r2, r3
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	01db      	lsls	r3, r3, #7
 800a97c:	4413      	add	r3, r2
 800a97e:	3384      	adds	r3, #132	; 0x84
 800a980:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	4619      	mov	r1, r3
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	01db      	lsls	r3, r3, #7
 800a98c:	440b      	add	r3, r1
 800a98e:	3384      	adds	r3, #132	; 0x84
 800a990:	4619      	mov	r1, r3
 800a992:	4b14      	ldr	r3, [pc, #80]	; (800a9e4 <LTDC_SetConfig+0x330>)
 800a994:	4013      	ands	r3, r2
 800a996:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	461a      	mov	r2, r3
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	01db      	lsls	r3, r3, #7
 800a9a2:	4413      	add	r3, r2
 800a9a4:	3384      	adds	r3, #132	; 0x84
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ac:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	01db      	lsls	r3, r3, #7
 800a9b8:	4413      	add	r3, r2
 800a9ba:	3384      	adds	r3, #132	; 0x84
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	68fa      	ldr	r2, [r7, #12]
 800a9c0:	6812      	ldr	r2, [r2, #0]
 800a9c2:	4611      	mov	r1, r2
 800a9c4:	687a      	ldr	r2, [r7, #4]
 800a9c6:	01d2      	lsls	r2, r2, #7
 800a9c8:	440a      	add	r2, r1
 800a9ca:	3284      	adds	r2, #132	; 0x84
 800a9cc:	f043 0301 	orr.w	r3, r3, #1
 800a9d0:	6013      	str	r3, [r2, #0]
}
 800a9d2:	bf00      	nop
 800a9d4:	3724      	adds	r7, #36	; 0x24
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr
 800a9de:	bf00      	nop
 800a9e0:	fffff8f8 	.word	0xfffff8f8
 800a9e4:	fffff800 	.word	0xfffff800

0800a9e8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 800a9ec:	4b05      	ldr	r3, [pc, #20]	; (800aa04 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4a04      	ldr	r2, [pc, #16]	; (800aa04 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a9f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9f6:	6013      	str	r3, [r2, #0]
}
 800a9f8:	bf00      	nop
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr
 800aa02:	bf00      	nop
 800aa04:	58024800 	.word	0x58024800

0800aa08 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b084      	sub	sp, #16
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800aa10:	4b29      	ldr	r3, [pc, #164]	; (800aab8 <HAL_PWREx_ConfigSupply+0xb0>)
 800aa12:	68db      	ldr	r3, [r3, #12]
 800aa14:	f003 0307 	and.w	r3, r3, #7
 800aa18:	2b06      	cmp	r3, #6
 800aa1a:	d00a      	beq.n	800aa32 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800aa1c:	4b26      	ldr	r3, [pc, #152]	; (800aab8 <HAL_PWREx_ConfigSupply+0xb0>)
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa24:	687a      	ldr	r2, [r7, #4]
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d001      	beq.n	800aa2e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	e040      	b.n	800aab0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	e03e      	b.n	800aab0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800aa32:	4b21      	ldr	r3, [pc, #132]	; (800aab8 <HAL_PWREx_ConfigSupply+0xb0>)
 800aa34:	68db      	ldr	r3, [r3, #12]
 800aa36:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800aa3a:	491f      	ldr	r1, [pc, #124]	; (800aab8 <HAL_PWREx_ConfigSupply+0xb0>)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800aa42:	f7f9 fea1 	bl	8004788 <HAL_GetTick>
 800aa46:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800aa48:	e009      	b.n	800aa5e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800aa4a:	f7f9 fe9d 	bl	8004788 <HAL_GetTick>
 800aa4e:	4602      	mov	r2, r0
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	1ad3      	subs	r3, r2, r3
 800aa54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aa58:	d901      	bls.n	800aa5e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	e028      	b.n	800aab0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800aa5e:	4b16      	ldr	r3, [pc, #88]	; (800aab8 <HAL_PWREx_ConfigSupply+0xb0>)
 800aa60:	685b      	ldr	r3, [r3, #4]
 800aa62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aa66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa6a:	d1ee      	bne.n	800aa4a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2b1e      	cmp	r3, #30
 800aa70:	d008      	beq.n	800aa84 <HAL_PWREx_ConfigSupply+0x7c>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2b2e      	cmp	r3, #46	; 0x2e
 800aa76:	d005      	beq.n	800aa84 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2b1d      	cmp	r3, #29
 800aa7c:	d002      	beq.n	800aa84 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2b2d      	cmp	r3, #45	; 0x2d
 800aa82:	d114      	bne.n	800aaae <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800aa84:	f7f9 fe80 	bl	8004788 <HAL_GetTick>
 800aa88:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800aa8a:	e009      	b.n	800aaa0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800aa8c:	f7f9 fe7c 	bl	8004788 <HAL_GetTick>
 800aa90:	4602      	mov	r2, r0
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	1ad3      	subs	r3, r2, r3
 800aa96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aa9a:	d901      	bls.n	800aaa0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	e007      	b.n	800aab0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800aaa0:	4b05      	ldr	r3, [pc, #20]	; (800aab8 <HAL_PWREx_ConfigSupply+0xb0>)
 800aaa2:	68db      	ldr	r3, [r3, #12]
 800aaa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aaa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aaac:	d1ee      	bne.n	800aa8c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800aaae:	2300      	movs	r3, #0
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3710      	adds	r7, #16
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}
 800aab8:	58024800 	.word	0x58024800

0800aabc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b08c      	sub	sp, #48	; 0x30
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d102      	bne.n	800aad0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800aaca:	2301      	movs	r3, #1
 800aacc:	f000 bc1f 	b.w	800b30e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f003 0301 	and.w	r3, r3, #1
 800aad8:	2b00      	cmp	r3, #0
 800aada:	f000 80b3 	beq.w	800ac44 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aade:	4b95      	ldr	r3, [pc, #596]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800aae0:	691b      	ldr	r3, [r3, #16]
 800aae2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aae6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aae8:	4b92      	ldr	r3, [pc, #584]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800aaea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaec:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800aaee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf0:	2b10      	cmp	r3, #16
 800aaf2:	d007      	beq.n	800ab04 <HAL_RCC_OscConfig+0x48>
 800aaf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf6:	2b18      	cmp	r3, #24
 800aaf8:	d112      	bne.n	800ab20 <HAL_RCC_OscConfig+0x64>
 800aafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafc:	f003 0303 	and.w	r3, r3, #3
 800ab00:	2b02      	cmp	r3, #2
 800ab02:	d10d      	bne.n	800ab20 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ab04:	4b8b      	ldr	r3, [pc, #556]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	f000 8098 	beq.w	800ac42 <HAL_RCC_OscConfig+0x186>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	f040 8093 	bne.w	800ac42 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	e3f6      	b.n	800b30e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab28:	d106      	bne.n	800ab38 <HAL_RCC_OscConfig+0x7c>
 800ab2a:	4b82      	ldr	r3, [pc, #520]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	4a81      	ldr	r2, [pc, #516]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800ab30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab34:	6013      	str	r3, [r2, #0]
 800ab36:	e058      	b.n	800abea <HAL_RCC_OscConfig+0x12e>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	685b      	ldr	r3, [r3, #4]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d112      	bne.n	800ab66 <HAL_RCC_OscConfig+0xaa>
 800ab40:	4b7c      	ldr	r3, [pc, #496]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	4a7b      	ldr	r2, [pc, #492]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800ab46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab4a:	6013      	str	r3, [r2, #0]
 800ab4c:	4b79      	ldr	r3, [pc, #484]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4a78      	ldr	r2, [pc, #480]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800ab52:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ab56:	6013      	str	r3, [r2, #0]
 800ab58:	4b76      	ldr	r3, [pc, #472]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4a75      	ldr	r2, [pc, #468]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800ab5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ab62:	6013      	str	r3, [r2, #0]
 800ab64:	e041      	b.n	800abea <HAL_RCC_OscConfig+0x12e>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ab6e:	d112      	bne.n	800ab96 <HAL_RCC_OscConfig+0xda>
 800ab70:	4b70      	ldr	r3, [pc, #448]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	4a6f      	ldr	r2, [pc, #444]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800ab76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ab7a:	6013      	str	r3, [r2, #0]
 800ab7c:	4b6d      	ldr	r3, [pc, #436]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4a6c      	ldr	r2, [pc, #432]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800ab82:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ab86:	6013      	str	r3, [r2, #0]
 800ab88:	4b6a      	ldr	r3, [pc, #424]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	4a69      	ldr	r2, [pc, #420]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800ab8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab92:	6013      	str	r3, [r2, #0]
 800ab94:	e029      	b.n	800abea <HAL_RCC_OscConfig+0x12e>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800ab9e:	d112      	bne.n	800abc6 <HAL_RCC_OscConfig+0x10a>
 800aba0:	4b64      	ldr	r3, [pc, #400]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4a63      	ldr	r2, [pc, #396]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800aba6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800abaa:	6013      	str	r3, [r2, #0]
 800abac:	4b61      	ldr	r3, [pc, #388]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	4a60      	ldr	r2, [pc, #384]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800abb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800abb6:	6013      	str	r3, [r2, #0]
 800abb8:	4b5e      	ldr	r3, [pc, #376]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a5d      	ldr	r2, [pc, #372]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800abbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800abc2:	6013      	str	r3, [r2, #0]
 800abc4:	e011      	b.n	800abea <HAL_RCC_OscConfig+0x12e>
 800abc6:	4b5b      	ldr	r3, [pc, #364]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4a5a      	ldr	r2, [pc, #360]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800abcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800abd0:	6013      	str	r3, [r2, #0]
 800abd2:	4b58      	ldr	r3, [pc, #352]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	4a57      	ldr	r2, [pc, #348]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800abd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800abdc:	6013      	str	r3, [r2, #0]
 800abde:	4b55      	ldr	r3, [pc, #340]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	4a54      	ldr	r2, [pc, #336]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800abe4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800abe8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d013      	beq.n	800ac1a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abf2:	f7f9 fdc9 	bl	8004788 <HAL_GetTick>
 800abf6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800abf8:	e008      	b.n	800ac0c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800abfa:	f7f9 fdc5 	bl	8004788 <HAL_GetTick>
 800abfe:	4602      	mov	r2, r0
 800ac00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac02:	1ad3      	subs	r3, r2, r3
 800ac04:	2b64      	cmp	r3, #100	; 0x64
 800ac06:	d901      	bls.n	800ac0c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800ac08:	2303      	movs	r3, #3
 800ac0a:	e380      	b.n	800b30e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ac0c:	4b49      	ldr	r3, [pc, #292]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d0f0      	beq.n	800abfa <HAL_RCC_OscConfig+0x13e>
 800ac18:	e014      	b.n	800ac44 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac1a:	f7f9 fdb5 	bl	8004788 <HAL_GetTick>
 800ac1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ac20:	e008      	b.n	800ac34 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ac22:	f7f9 fdb1 	bl	8004788 <HAL_GetTick>
 800ac26:	4602      	mov	r2, r0
 800ac28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac2a:	1ad3      	subs	r3, r2, r3
 800ac2c:	2b64      	cmp	r3, #100	; 0x64
 800ac2e:	d901      	bls.n	800ac34 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800ac30:	2303      	movs	r3, #3
 800ac32:	e36c      	b.n	800b30e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ac34:	4b3f      	ldr	r3, [pc, #252]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d1f0      	bne.n	800ac22 <HAL_RCC_OscConfig+0x166>
 800ac40:	e000      	b.n	800ac44 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac42:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f003 0302 	and.w	r3, r3, #2
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	f000 808c 	beq.w	800ad6a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ac52:	4b38      	ldr	r3, [pc, #224]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800ac54:	691b      	ldr	r3, [r3, #16]
 800ac56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac5a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ac5c:	4b35      	ldr	r3, [pc, #212]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800ac5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac60:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ac62:	6a3b      	ldr	r3, [r7, #32]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d007      	beq.n	800ac78 <HAL_RCC_OscConfig+0x1bc>
 800ac68:	6a3b      	ldr	r3, [r7, #32]
 800ac6a:	2b18      	cmp	r3, #24
 800ac6c:	d137      	bne.n	800acde <HAL_RCC_OscConfig+0x222>
 800ac6e:	69fb      	ldr	r3, [r7, #28]
 800ac70:	f003 0303 	and.w	r3, r3, #3
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d132      	bne.n	800acde <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ac78:	4b2e      	ldr	r3, [pc, #184]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f003 0304 	and.w	r3, r3, #4
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d005      	beq.n	800ac90 <HAL_RCC_OscConfig+0x1d4>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	68db      	ldr	r3, [r3, #12]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d101      	bne.n	800ac90 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	e33e      	b.n	800b30e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ac90:	4b28      	ldr	r3, [pc, #160]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f023 0219 	bic.w	r2, r3, #25
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	68db      	ldr	r3, [r3, #12]
 800ac9c:	4925      	ldr	r1, [pc, #148]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aca2:	f7f9 fd71 	bl	8004788 <HAL_GetTick>
 800aca6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aca8:	e008      	b.n	800acbc <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800acaa:	f7f9 fd6d 	bl	8004788 <HAL_GetTick>
 800acae:	4602      	mov	r2, r0
 800acb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb2:	1ad3      	subs	r3, r2, r3
 800acb4:	2b02      	cmp	r3, #2
 800acb6:	d901      	bls.n	800acbc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800acb8:	2303      	movs	r3, #3
 800acba:	e328      	b.n	800b30e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800acbc:	4b1d      	ldr	r3, [pc, #116]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f003 0304 	and.w	r3, r3, #4
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d0f0      	beq.n	800acaa <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800acc8:	4b1a      	ldr	r3, [pc, #104]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	691b      	ldr	r3, [r3, #16]
 800acd4:	061b      	lsls	r3, r3, #24
 800acd6:	4917      	ldr	r1, [pc, #92]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800acd8:	4313      	orrs	r3, r2
 800acda:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800acdc:	e045      	b.n	800ad6a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	68db      	ldr	r3, [r3, #12]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d028      	beq.n	800ad38 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ace6:	4b13      	ldr	r3, [pc, #76]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f023 0219 	bic.w	r2, r3, #25
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	68db      	ldr	r3, [r3, #12]
 800acf2:	4910      	ldr	r1, [pc, #64]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800acf4:	4313      	orrs	r3, r2
 800acf6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acf8:	f7f9 fd46 	bl	8004788 <HAL_GetTick>
 800acfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800acfe:	e008      	b.n	800ad12 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ad00:	f7f9 fd42 	bl	8004788 <HAL_GetTick>
 800ad04:	4602      	mov	r2, r0
 800ad06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad08:	1ad3      	subs	r3, r2, r3
 800ad0a:	2b02      	cmp	r3, #2
 800ad0c:	d901      	bls.n	800ad12 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800ad0e:	2303      	movs	r3, #3
 800ad10:	e2fd      	b.n	800b30e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ad12:	4b08      	ldr	r3, [pc, #32]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f003 0304 	and.w	r3, r3, #4
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d0f0      	beq.n	800ad00 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ad1e:	4b05      	ldr	r3, [pc, #20]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800ad20:	685b      	ldr	r3, [r3, #4]
 800ad22:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	691b      	ldr	r3, [r3, #16]
 800ad2a:	061b      	lsls	r3, r3, #24
 800ad2c:	4901      	ldr	r1, [pc, #4]	; (800ad34 <HAL_RCC_OscConfig+0x278>)
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	604b      	str	r3, [r1, #4]
 800ad32:	e01a      	b.n	800ad6a <HAL_RCC_OscConfig+0x2ae>
 800ad34:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ad38:	4b97      	ldr	r3, [pc, #604]	; (800af98 <HAL_RCC_OscConfig+0x4dc>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4a96      	ldr	r2, [pc, #600]	; (800af98 <HAL_RCC_OscConfig+0x4dc>)
 800ad3e:	f023 0301 	bic.w	r3, r3, #1
 800ad42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad44:	f7f9 fd20 	bl	8004788 <HAL_GetTick>
 800ad48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ad4a:	e008      	b.n	800ad5e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ad4c:	f7f9 fd1c 	bl	8004788 <HAL_GetTick>
 800ad50:	4602      	mov	r2, r0
 800ad52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad54:	1ad3      	subs	r3, r2, r3
 800ad56:	2b02      	cmp	r3, #2
 800ad58:	d901      	bls.n	800ad5e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800ad5a:	2303      	movs	r3, #3
 800ad5c:	e2d7      	b.n	800b30e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ad5e:	4b8e      	ldr	r3, [pc, #568]	; (800af98 <HAL_RCC_OscConfig+0x4dc>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f003 0304 	and.w	r3, r3, #4
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d1f0      	bne.n	800ad4c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f003 0310 	and.w	r3, r3, #16
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d06a      	beq.n	800ae4c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ad76:	4b88      	ldr	r3, [pc, #544]	; (800af98 <HAL_RCC_OscConfig+0x4dc>)
 800ad78:	691b      	ldr	r3, [r3, #16]
 800ad7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ad7e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ad80:	4b85      	ldr	r3, [pc, #532]	; (800af98 <HAL_RCC_OscConfig+0x4dc>)
 800ad82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad84:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ad86:	69bb      	ldr	r3, [r7, #24]
 800ad88:	2b08      	cmp	r3, #8
 800ad8a:	d007      	beq.n	800ad9c <HAL_RCC_OscConfig+0x2e0>
 800ad8c:	69bb      	ldr	r3, [r7, #24]
 800ad8e:	2b18      	cmp	r3, #24
 800ad90:	d11b      	bne.n	800adca <HAL_RCC_OscConfig+0x30e>
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	f003 0303 	and.w	r3, r3, #3
 800ad98:	2b01      	cmp	r3, #1
 800ad9a:	d116      	bne.n	800adca <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ad9c:	4b7e      	ldr	r3, [pc, #504]	; (800af98 <HAL_RCC_OscConfig+0x4dc>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d005      	beq.n	800adb4 <HAL_RCC_OscConfig+0x2f8>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	69db      	ldr	r3, [r3, #28]
 800adac:	2b80      	cmp	r3, #128	; 0x80
 800adae:	d001      	beq.n	800adb4 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800adb0:	2301      	movs	r3, #1
 800adb2:	e2ac      	b.n	800b30e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800adb4:	4b78      	ldr	r3, [pc, #480]	; (800af98 <HAL_RCC_OscConfig+0x4dc>)
 800adb6:	68db      	ldr	r3, [r3, #12]
 800adb8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6a1b      	ldr	r3, [r3, #32]
 800adc0:	061b      	lsls	r3, r3, #24
 800adc2:	4975      	ldr	r1, [pc, #468]	; (800af98 <HAL_RCC_OscConfig+0x4dc>)
 800adc4:	4313      	orrs	r3, r2
 800adc6:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800adc8:	e040      	b.n	800ae4c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	69db      	ldr	r3, [r3, #28]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d023      	beq.n	800ae1a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800add2:	4b71      	ldr	r3, [pc, #452]	; (800af98 <HAL_RCC_OscConfig+0x4dc>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4a70      	ldr	r2, [pc, #448]	; (800af98 <HAL_RCC_OscConfig+0x4dc>)
 800add8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800addc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adde:	f7f9 fcd3 	bl	8004788 <HAL_GetTick>
 800ade2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ade4:	e008      	b.n	800adf8 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ade6:	f7f9 fccf 	bl	8004788 <HAL_GetTick>
 800adea:	4602      	mov	r2, r0
 800adec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adee:	1ad3      	subs	r3, r2, r3
 800adf0:	2b02      	cmp	r3, #2
 800adf2:	d901      	bls.n	800adf8 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800adf4:	2303      	movs	r3, #3
 800adf6:	e28a      	b.n	800b30e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800adf8:	4b67      	ldr	r3, [pc, #412]	; (800af98 <HAL_RCC_OscConfig+0x4dc>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d0f0      	beq.n	800ade6 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ae04:	4b64      	ldr	r3, [pc, #400]	; (800af98 <HAL_RCC_OscConfig+0x4dc>)
 800ae06:	68db      	ldr	r3, [r3, #12]
 800ae08:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6a1b      	ldr	r3, [r3, #32]
 800ae10:	061b      	lsls	r3, r3, #24
 800ae12:	4961      	ldr	r1, [pc, #388]	; (800af98 <HAL_RCC_OscConfig+0x4dc>)
 800ae14:	4313      	orrs	r3, r2
 800ae16:	60cb      	str	r3, [r1, #12]
 800ae18:	e018      	b.n	800ae4c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800ae1a:	4b5f      	ldr	r3, [pc, #380]	; (800af98 <HAL_RCC_OscConfig+0x4dc>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	4a5e      	ldr	r2, [pc, #376]	; (800af98 <HAL_RCC_OscConfig+0x4dc>)
 800ae20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae26:	f7f9 fcaf 	bl	8004788 <HAL_GetTick>
 800ae2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ae2c:	e008      	b.n	800ae40 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ae2e:	f7f9 fcab 	bl	8004788 <HAL_GetTick>
 800ae32:	4602      	mov	r2, r0
 800ae34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae36:	1ad3      	subs	r3, r2, r3
 800ae38:	2b02      	cmp	r3, #2
 800ae3a:	d901      	bls.n	800ae40 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800ae3c:	2303      	movs	r3, #3
 800ae3e:	e266      	b.n	800b30e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ae40:	4b55      	ldr	r3, [pc, #340]	; (800af98 <HAL_RCC_OscConfig+0x4dc>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d1f0      	bne.n	800ae2e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f003 0308 	and.w	r3, r3, #8
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d036      	beq.n	800aec6 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	695b      	ldr	r3, [r3, #20]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d019      	beq.n	800ae94 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ae60:	4b4d      	ldr	r3, [pc, #308]	; (800af98 <HAL_RCC_OscConfig+0x4dc>)
 800ae62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae64:	4a4c      	ldr	r2, [pc, #304]	; (800af98 <HAL_RCC_OscConfig+0x4dc>)
 800ae66:	f043 0301 	orr.w	r3, r3, #1
 800ae6a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae6c:	f7f9 fc8c 	bl	8004788 <HAL_GetTick>
 800ae70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ae72:	e008      	b.n	800ae86 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ae74:	f7f9 fc88 	bl	8004788 <HAL_GetTick>
 800ae78:	4602      	mov	r2, r0
 800ae7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae7c:	1ad3      	subs	r3, r2, r3
 800ae7e:	2b02      	cmp	r3, #2
 800ae80:	d901      	bls.n	800ae86 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800ae82:	2303      	movs	r3, #3
 800ae84:	e243      	b.n	800b30e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ae86:	4b44      	ldr	r3, [pc, #272]	; (800af98 <HAL_RCC_OscConfig+0x4dc>)
 800ae88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae8a:	f003 0302 	and.w	r3, r3, #2
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d0f0      	beq.n	800ae74 <HAL_RCC_OscConfig+0x3b8>
 800ae92:	e018      	b.n	800aec6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ae94:	4b40      	ldr	r3, [pc, #256]	; (800af98 <HAL_RCC_OscConfig+0x4dc>)
 800ae96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae98:	4a3f      	ldr	r2, [pc, #252]	; (800af98 <HAL_RCC_OscConfig+0x4dc>)
 800ae9a:	f023 0301 	bic.w	r3, r3, #1
 800ae9e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aea0:	f7f9 fc72 	bl	8004788 <HAL_GetTick>
 800aea4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aea6:	e008      	b.n	800aeba <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aea8:	f7f9 fc6e 	bl	8004788 <HAL_GetTick>
 800aeac:	4602      	mov	r2, r0
 800aeae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb0:	1ad3      	subs	r3, r2, r3
 800aeb2:	2b02      	cmp	r3, #2
 800aeb4:	d901      	bls.n	800aeba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800aeb6:	2303      	movs	r3, #3
 800aeb8:	e229      	b.n	800b30e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aeba:	4b37      	ldr	r3, [pc, #220]	; (800af98 <HAL_RCC_OscConfig+0x4dc>)
 800aebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aebe:	f003 0302 	and.w	r3, r3, #2
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d1f0      	bne.n	800aea8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f003 0320 	and.w	r3, r3, #32
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d036      	beq.n	800af40 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	699b      	ldr	r3, [r3, #24]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d019      	beq.n	800af0e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800aeda:	4b2f      	ldr	r3, [pc, #188]	; (800af98 <HAL_RCC_OscConfig+0x4dc>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	4a2e      	ldr	r2, [pc, #184]	; (800af98 <HAL_RCC_OscConfig+0x4dc>)
 800aee0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aee4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800aee6:	f7f9 fc4f 	bl	8004788 <HAL_GetTick>
 800aeea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aeec:	e008      	b.n	800af00 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aeee:	f7f9 fc4b 	bl	8004788 <HAL_GetTick>
 800aef2:	4602      	mov	r2, r0
 800aef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef6:	1ad3      	subs	r3, r2, r3
 800aef8:	2b02      	cmp	r3, #2
 800aefa:	d901      	bls.n	800af00 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800aefc:	2303      	movs	r3, #3
 800aefe:	e206      	b.n	800b30e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800af00:	4b25      	ldr	r3, [pc, #148]	; (800af98 <HAL_RCC_OscConfig+0x4dc>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d0f0      	beq.n	800aeee <HAL_RCC_OscConfig+0x432>
 800af0c:	e018      	b.n	800af40 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800af0e:	4b22      	ldr	r3, [pc, #136]	; (800af98 <HAL_RCC_OscConfig+0x4dc>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	4a21      	ldr	r2, [pc, #132]	; (800af98 <HAL_RCC_OscConfig+0x4dc>)
 800af14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af18:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800af1a:	f7f9 fc35 	bl	8004788 <HAL_GetTick>
 800af1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800af20:	e008      	b.n	800af34 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800af22:	f7f9 fc31 	bl	8004788 <HAL_GetTick>
 800af26:	4602      	mov	r2, r0
 800af28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af2a:	1ad3      	subs	r3, r2, r3
 800af2c:	2b02      	cmp	r3, #2
 800af2e:	d901      	bls.n	800af34 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800af30:	2303      	movs	r3, #3
 800af32:	e1ec      	b.n	800b30e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800af34:	4b18      	ldr	r3, [pc, #96]	; (800af98 <HAL_RCC_OscConfig+0x4dc>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d1f0      	bne.n	800af22 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f003 0304 	and.w	r3, r3, #4
 800af48:	2b00      	cmp	r3, #0
 800af4a:	f000 80af 	beq.w	800b0ac <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800af4e:	4b13      	ldr	r3, [pc, #76]	; (800af9c <HAL_RCC_OscConfig+0x4e0>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	4a12      	ldr	r2, [pc, #72]	; (800af9c <HAL_RCC_OscConfig+0x4e0>)
 800af54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800af5a:	f7f9 fc15 	bl	8004788 <HAL_GetTick>
 800af5e:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800af60:	e008      	b.n	800af74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af62:	f7f9 fc11 	bl	8004788 <HAL_GetTick>
 800af66:	4602      	mov	r2, r0
 800af68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6a:	1ad3      	subs	r3, r2, r3
 800af6c:	2b64      	cmp	r3, #100	; 0x64
 800af6e:	d901      	bls.n	800af74 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800af70:	2303      	movs	r3, #3
 800af72:	e1cc      	b.n	800b30e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800af74:	4b09      	ldr	r3, [pc, #36]	; (800af9c <HAL_RCC_OscConfig+0x4e0>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d0f0      	beq.n	800af62 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	689b      	ldr	r3, [r3, #8]
 800af84:	2b01      	cmp	r3, #1
 800af86:	d10b      	bne.n	800afa0 <HAL_RCC_OscConfig+0x4e4>
 800af88:	4b03      	ldr	r3, [pc, #12]	; (800af98 <HAL_RCC_OscConfig+0x4dc>)
 800af8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af8c:	4a02      	ldr	r2, [pc, #8]	; (800af98 <HAL_RCC_OscConfig+0x4dc>)
 800af8e:	f043 0301 	orr.w	r3, r3, #1
 800af92:	6713      	str	r3, [r2, #112]	; 0x70
 800af94:	e05b      	b.n	800b04e <HAL_RCC_OscConfig+0x592>
 800af96:	bf00      	nop
 800af98:	58024400 	.word	0x58024400
 800af9c:	58024800 	.word	0x58024800
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	689b      	ldr	r3, [r3, #8]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d112      	bne.n	800afce <HAL_RCC_OscConfig+0x512>
 800afa8:	4b9d      	ldr	r3, [pc, #628]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800afaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afac:	4a9c      	ldr	r2, [pc, #624]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800afae:	f023 0301 	bic.w	r3, r3, #1
 800afb2:	6713      	str	r3, [r2, #112]	; 0x70
 800afb4:	4b9a      	ldr	r3, [pc, #616]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800afb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afb8:	4a99      	ldr	r2, [pc, #612]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800afba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800afbe:	6713      	str	r3, [r2, #112]	; 0x70
 800afc0:	4b97      	ldr	r3, [pc, #604]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800afc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afc4:	4a96      	ldr	r2, [pc, #600]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800afc6:	f023 0304 	bic.w	r3, r3, #4
 800afca:	6713      	str	r3, [r2, #112]	; 0x70
 800afcc:	e03f      	b.n	800b04e <HAL_RCC_OscConfig+0x592>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	689b      	ldr	r3, [r3, #8]
 800afd2:	2b05      	cmp	r3, #5
 800afd4:	d112      	bne.n	800affc <HAL_RCC_OscConfig+0x540>
 800afd6:	4b92      	ldr	r3, [pc, #584]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800afd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afda:	4a91      	ldr	r2, [pc, #580]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800afdc:	f043 0304 	orr.w	r3, r3, #4
 800afe0:	6713      	str	r3, [r2, #112]	; 0x70
 800afe2:	4b8f      	ldr	r3, [pc, #572]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800afe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afe6:	4a8e      	ldr	r2, [pc, #568]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800afe8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800afec:	6713      	str	r3, [r2, #112]	; 0x70
 800afee:	4b8c      	ldr	r3, [pc, #560]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800aff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aff2:	4a8b      	ldr	r2, [pc, #556]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800aff4:	f043 0301 	orr.w	r3, r3, #1
 800aff8:	6713      	str	r3, [r2, #112]	; 0x70
 800affa:	e028      	b.n	800b04e <HAL_RCC_OscConfig+0x592>
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	689b      	ldr	r3, [r3, #8]
 800b000:	2b85      	cmp	r3, #133	; 0x85
 800b002:	d112      	bne.n	800b02a <HAL_RCC_OscConfig+0x56e>
 800b004:	4b86      	ldr	r3, [pc, #536]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b008:	4a85      	ldr	r2, [pc, #532]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b00a:	f043 0304 	orr.w	r3, r3, #4
 800b00e:	6713      	str	r3, [r2, #112]	; 0x70
 800b010:	4b83      	ldr	r3, [pc, #524]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b014:	4a82      	ldr	r2, [pc, #520]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b01a:	6713      	str	r3, [r2, #112]	; 0x70
 800b01c:	4b80      	ldr	r3, [pc, #512]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b01e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b020:	4a7f      	ldr	r2, [pc, #508]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b022:	f043 0301 	orr.w	r3, r3, #1
 800b026:	6713      	str	r3, [r2, #112]	; 0x70
 800b028:	e011      	b.n	800b04e <HAL_RCC_OscConfig+0x592>
 800b02a:	4b7d      	ldr	r3, [pc, #500]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b02c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b02e:	4a7c      	ldr	r2, [pc, #496]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b030:	f023 0301 	bic.w	r3, r3, #1
 800b034:	6713      	str	r3, [r2, #112]	; 0x70
 800b036:	4b7a      	ldr	r3, [pc, #488]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b03a:	4a79      	ldr	r2, [pc, #484]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b03c:	f023 0304 	bic.w	r3, r3, #4
 800b040:	6713      	str	r3, [r2, #112]	; 0x70
 800b042:	4b77      	ldr	r3, [pc, #476]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b046:	4a76      	ldr	r2, [pc, #472]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b048:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b04c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	689b      	ldr	r3, [r3, #8]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d015      	beq.n	800b082 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b056:	f7f9 fb97 	bl	8004788 <HAL_GetTick>
 800b05a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b05c:	e00a      	b.n	800b074 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b05e:	f7f9 fb93 	bl	8004788 <HAL_GetTick>
 800b062:	4602      	mov	r2, r0
 800b064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b066:	1ad3      	subs	r3, r2, r3
 800b068:	f241 3288 	movw	r2, #5000	; 0x1388
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d901      	bls.n	800b074 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800b070:	2303      	movs	r3, #3
 800b072:	e14c      	b.n	800b30e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b074:	4b6a      	ldr	r3, [pc, #424]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b078:	f003 0302 	and.w	r3, r3, #2
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d0ee      	beq.n	800b05e <HAL_RCC_OscConfig+0x5a2>
 800b080:	e014      	b.n	800b0ac <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b082:	f7f9 fb81 	bl	8004788 <HAL_GetTick>
 800b086:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b088:	e00a      	b.n	800b0a0 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b08a:	f7f9 fb7d 	bl	8004788 <HAL_GetTick>
 800b08e:	4602      	mov	r2, r0
 800b090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b092:	1ad3      	subs	r3, r2, r3
 800b094:	f241 3288 	movw	r2, #5000	; 0x1388
 800b098:	4293      	cmp	r3, r2
 800b09a:	d901      	bls.n	800b0a0 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800b09c:	2303      	movs	r3, #3
 800b09e:	e136      	b.n	800b30e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b0a0:	4b5f      	ldr	r3, [pc, #380]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b0a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0a4:	f003 0302 	and.w	r3, r3, #2
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d1ee      	bne.n	800b08a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	f000 812b 	beq.w	800b30c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b0b6:	4b5a      	ldr	r3, [pc, #360]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b0b8:	691b      	ldr	r3, [r3, #16]
 800b0ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b0be:	2b18      	cmp	r3, #24
 800b0c0:	f000 80bb 	beq.w	800b23a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c8:	2b02      	cmp	r3, #2
 800b0ca:	f040 8095 	bne.w	800b1f8 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b0ce:	4b54      	ldr	r3, [pc, #336]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	4a53      	ldr	r2, [pc, #332]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b0d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b0d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0da:	f7f9 fb55 	bl	8004788 <HAL_GetTick>
 800b0de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b0e0:	e008      	b.n	800b0f4 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b0e2:	f7f9 fb51 	bl	8004788 <HAL_GetTick>
 800b0e6:	4602      	mov	r2, r0
 800b0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ea:	1ad3      	subs	r3, r2, r3
 800b0ec:	2b02      	cmp	r3, #2
 800b0ee:	d901      	bls.n	800b0f4 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800b0f0:	2303      	movs	r3, #3
 800b0f2:	e10c      	b.n	800b30e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b0f4:	4b4a      	ldr	r3, [pc, #296]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d1f0      	bne.n	800b0e2 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b100:	4b47      	ldr	r3, [pc, #284]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b102:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b104:	4b47      	ldr	r3, [pc, #284]	; (800b224 <HAL_RCC_OscConfig+0x768>)
 800b106:	4013      	ands	r3, r2
 800b108:	687a      	ldr	r2, [r7, #4]
 800b10a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b110:	0112      	lsls	r2, r2, #4
 800b112:	430a      	orrs	r2, r1
 800b114:	4942      	ldr	r1, [pc, #264]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b116:	4313      	orrs	r3, r2
 800b118:	628b      	str	r3, [r1, #40]	; 0x28
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b11e:	3b01      	subs	r3, #1
 800b120:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b128:	3b01      	subs	r3, #1
 800b12a:	025b      	lsls	r3, r3, #9
 800b12c:	b29b      	uxth	r3, r3
 800b12e:	431a      	orrs	r2, r3
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b134:	3b01      	subs	r3, #1
 800b136:	041b      	lsls	r3, r3, #16
 800b138:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b13c:	431a      	orrs	r2, r3
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b142:	3b01      	subs	r3, #1
 800b144:	061b      	lsls	r3, r3, #24
 800b146:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b14a:	4935      	ldr	r1, [pc, #212]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b14c:	4313      	orrs	r3, r2
 800b14e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800b150:	4b33      	ldr	r3, [pc, #204]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b154:	4a32      	ldr	r2, [pc, #200]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b156:	f023 0301 	bic.w	r3, r3, #1
 800b15a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b15c:	4b30      	ldr	r3, [pc, #192]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b15e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b160:	4b31      	ldr	r3, [pc, #196]	; (800b228 <HAL_RCC_OscConfig+0x76c>)
 800b162:	4013      	ands	r3, r2
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b168:	00d2      	lsls	r2, r2, #3
 800b16a:	492d      	ldr	r1, [pc, #180]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b16c:	4313      	orrs	r3, r2
 800b16e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b170:	4b2b      	ldr	r3, [pc, #172]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b174:	f023 020c 	bic.w	r2, r3, #12
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b17c:	4928      	ldr	r1, [pc, #160]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b17e:	4313      	orrs	r3, r2
 800b180:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b182:	4b27      	ldr	r3, [pc, #156]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b186:	f023 0202 	bic.w	r2, r3, #2
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b18e:	4924      	ldr	r1, [pc, #144]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b190:	4313      	orrs	r3, r2
 800b192:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b194:	4b22      	ldr	r3, [pc, #136]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b198:	4a21      	ldr	r2, [pc, #132]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b19a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b19e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1a0:	4b1f      	ldr	r3, [pc, #124]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1a4:	4a1e      	ldr	r2, [pc, #120]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b1a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b1ac:	4b1c      	ldr	r3, [pc, #112]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1b0:	4a1b      	ldr	r2, [pc, #108]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b1b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b1b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800b1b8:	4b19      	ldr	r3, [pc, #100]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1bc:	4a18      	ldr	r2, [pc, #96]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b1be:	f043 0301 	orr.w	r3, r3, #1
 800b1c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b1c4:	4b16      	ldr	r3, [pc, #88]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	4a15      	ldr	r2, [pc, #84]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b1ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b1ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1d0:	f7f9 fada 	bl	8004788 <HAL_GetTick>
 800b1d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b1d6:	e008      	b.n	800b1ea <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b1d8:	f7f9 fad6 	bl	8004788 <HAL_GetTick>
 800b1dc:	4602      	mov	r2, r0
 800b1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e0:	1ad3      	subs	r3, r2, r3
 800b1e2:	2b02      	cmp	r3, #2
 800b1e4:	d901      	bls.n	800b1ea <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800b1e6:	2303      	movs	r3, #3
 800b1e8:	e091      	b.n	800b30e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b1ea:	4b0d      	ldr	r3, [pc, #52]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d0f0      	beq.n	800b1d8 <HAL_RCC_OscConfig+0x71c>
 800b1f6:	e089      	b.n	800b30c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b1f8:	4b09      	ldr	r3, [pc, #36]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4a08      	ldr	r2, [pc, #32]	; (800b220 <HAL_RCC_OscConfig+0x764>)
 800b1fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b202:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b204:	f7f9 fac0 	bl	8004788 <HAL_GetTick>
 800b208:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b20a:	e00f      	b.n	800b22c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b20c:	f7f9 fabc 	bl	8004788 <HAL_GetTick>
 800b210:	4602      	mov	r2, r0
 800b212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b214:	1ad3      	subs	r3, r2, r3
 800b216:	2b02      	cmp	r3, #2
 800b218:	d908      	bls.n	800b22c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800b21a:	2303      	movs	r3, #3
 800b21c:	e077      	b.n	800b30e <HAL_RCC_OscConfig+0x852>
 800b21e:	bf00      	nop
 800b220:	58024400 	.word	0x58024400
 800b224:	fffffc0c 	.word	0xfffffc0c
 800b228:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b22c:	4b3a      	ldr	r3, [pc, #232]	; (800b318 <HAL_RCC_OscConfig+0x85c>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b234:	2b00      	cmp	r3, #0
 800b236:	d1e9      	bne.n	800b20c <HAL_RCC_OscConfig+0x750>
 800b238:	e068      	b.n	800b30c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b23a:	4b37      	ldr	r3, [pc, #220]	; (800b318 <HAL_RCC_OscConfig+0x85c>)
 800b23c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b23e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b240:	4b35      	ldr	r3, [pc, #212]	; (800b318 <HAL_RCC_OscConfig+0x85c>)
 800b242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b244:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b24a:	2b01      	cmp	r3, #1
 800b24c:	d031      	beq.n	800b2b2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	f003 0203 	and.w	r2, r3, #3
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b258:	429a      	cmp	r2, r3
 800b25a:	d12a      	bne.n	800b2b2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	091b      	lsrs	r3, r3, #4
 800b260:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b268:	429a      	cmp	r2, r3
 800b26a:	d122      	bne.n	800b2b2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b276:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b278:	429a      	cmp	r2, r3
 800b27a:	d11a      	bne.n	800b2b2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	0a5b      	lsrs	r3, r3, #9
 800b280:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b288:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b28a:	429a      	cmp	r2, r3
 800b28c:	d111      	bne.n	800b2b2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	0c1b      	lsrs	r3, r3, #16
 800b292:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b29a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b29c:	429a      	cmp	r2, r3
 800b29e:	d108      	bne.n	800b2b2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	0e1b      	lsrs	r3, r3, #24
 800b2a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b2ae:	429a      	cmp	r2, r3
 800b2b0:	d001      	beq.n	800b2b6 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	e02b      	b.n	800b30e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b2b6:	4b18      	ldr	r3, [pc, #96]	; (800b318 <HAL_RCC_OscConfig+0x85c>)
 800b2b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2ba:	08db      	lsrs	r3, r3, #3
 800b2bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b2c0:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2c6:	693a      	ldr	r2, [r7, #16]
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d01f      	beq.n	800b30c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800b2cc:	4b12      	ldr	r3, [pc, #72]	; (800b318 <HAL_RCC_OscConfig+0x85c>)
 800b2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2d0:	4a11      	ldr	r2, [pc, #68]	; (800b318 <HAL_RCC_OscConfig+0x85c>)
 800b2d2:	f023 0301 	bic.w	r3, r3, #1
 800b2d6:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b2d8:	f7f9 fa56 	bl	8004788 <HAL_GetTick>
 800b2dc:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b2de:	bf00      	nop
 800b2e0:	f7f9 fa52 	bl	8004788 <HAL_GetTick>
 800b2e4:	4602      	mov	r2, r0
 800b2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d0f9      	beq.n	800b2e0 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b2ec:	4b0a      	ldr	r3, [pc, #40]	; (800b318 <HAL_RCC_OscConfig+0x85c>)
 800b2ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2f0:	4b0a      	ldr	r3, [pc, #40]	; (800b31c <HAL_RCC_OscConfig+0x860>)
 800b2f2:	4013      	ands	r3, r2
 800b2f4:	687a      	ldr	r2, [r7, #4]
 800b2f6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b2f8:	00d2      	lsls	r2, r2, #3
 800b2fa:	4907      	ldr	r1, [pc, #28]	; (800b318 <HAL_RCC_OscConfig+0x85c>)
 800b2fc:	4313      	orrs	r3, r2
 800b2fe:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800b300:	4b05      	ldr	r3, [pc, #20]	; (800b318 <HAL_RCC_OscConfig+0x85c>)
 800b302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b304:	4a04      	ldr	r2, [pc, #16]	; (800b318 <HAL_RCC_OscConfig+0x85c>)
 800b306:	f043 0301 	orr.w	r3, r3, #1
 800b30a:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800b30c:	2300      	movs	r3, #0
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3730      	adds	r7, #48	; 0x30
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}
 800b316:	bf00      	nop
 800b318:	58024400 	.word	0x58024400
 800b31c:	ffff0007 	.word	0xffff0007

0800b320 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b086      	sub	sp, #24
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d101      	bne.n	800b334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b330:	2301      	movs	r3, #1
 800b332:	e19c      	b.n	800b66e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b334:	4b8a      	ldr	r3, [pc, #552]	; (800b560 <HAL_RCC_ClockConfig+0x240>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f003 030f 	and.w	r3, r3, #15
 800b33c:	683a      	ldr	r2, [r7, #0]
 800b33e:	429a      	cmp	r2, r3
 800b340:	d910      	bls.n	800b364 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b342:	4b87      	ldr	r3, [pc, #540]	; (800b560 <HAL_RCC_ClockConfig+0x240>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f023 020f 	bic.w	r2, r3, #15
 800b34a:	4985      	ldr	r1, [pc, #532]	; (800b560 <HAL_RCC_ClockConfig+0x240>)
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	4313      	orrs	r3, r2
 800b350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b352:	4b83      	ldr	r3, [pc, #524]	; (800b560 <HAL_RCC_ClockConfig+0x240>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f003 030f 	and.w	r3, r3, #15
 800b35a:	683a      	ldr	r2, [r7, #0]
 800b35c:	429a      	cmp	r2, r3
 800b35e:	d001      	beq.n	800b364 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b360:	2301      	movs	r3, #1
 800b362:	e184      	b.n	800b66e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f003 0304 	and.w	r3, r3, #4
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d010      	beq.n	800b392 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	691a      	ldr	r2, [r3, #16]
 800b374:	4b7b      	ldr	r3, [pc, #492]	; (800b564 <HAL_RCC_ClockConfig+0x244>)
 800b376:	699b      	ldr	r3, [r3, #24]
 800b378:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b37c:	429a      	cmp	r2, r3
 800b37e:	d908      	bls.n	800b392 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b380:	4b78      	ldr	r3, [pc, #480]	; (800b564 <HAL_RCC_ClockConfig+0x244>)
 800b382:	699b      	ldr	r3, [r3, #24]
 800b384:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	691b      	ldr	r3, [r3, #16]
 800b38c:	4975      	ldr	r1, [pc, #468]	; (800b564 <HAL_RCC_ClockConfig+0x244>)
 800b38e:	4313      	orrs	r3, r2
 800b390:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f003 0308 	and.w	r3, r3, #8
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d010      	beq.n	800b3c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	695a      	ldr	r2, [r3, #20]
 800b3a2:	4b70      	ldr	r3, [pc, #448]	; (800b564 <HAL_RCC_ClockConfig+0x244>)
 800b3a4:	69db      	ldr	r3, [r3, #28]
 800b3a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d908      	bls.n	800b3c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b3ae:	4b6d      	ldr	r3, [pc, #436]	; (800b564 <HAL_RCC_ClockConfig+0x244>)
 800b3b0:	69db      	ldr	r3, [r3, #28]
 800b3b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	695b      	ldr	r3, [r3, #20]
 800b3ba:	496a      	ldr	r1, [pc, #424]	; (800b564 <HAL_RCC_ClockConfig+0x244>)
 800b3bc:	4313      	orrs	r3, r2
 800b3be:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f003 0310 	and.w	r3, r3, #16
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d010      	beq.n	800b3ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	699a      	ldr	r2, [r3, #24]
 800b3d0:	4b64      	ldr	r3, [pc, #400]	; (800b564 <HAL_RCC_ClockConfig+0x244>)
 800b3d2:	69db      	ldr	r3, [r3, #28]
 800b3d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d908      	bls.n	800b3ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b3dc:	4b61      	ldr	r3, [pc, #388]	; (800b564 <HAL_RCC_ClockConfig+0x244>)
 800b3de:	69db      	ldr	r3, [r3, #28]
 800b3e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	699b      	ldr	r3, [r3, #24]
 800b3e8:	495e      	ldr	r1, [pc, #376]	; (800b564 <HAL_RCC_ClockConfig+0x244>)
 800b3ea:	4313      	orrs	r3, r2
 800b3ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f003 0320 	and.w	r3, r3, #32
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d010      	beq.n	800b41c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	69da      	ldr	r2, [r3, #28]
 800b3fe:	4b59      	ldr	r3, [pc, #356]	; (800b564 <HAL_RCC_ClockConfig+0x244>)
 800b400:	6a1b      	ldr	r3, [r3, #32]
 800b402:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b406:	429a      	cmp	r2, r3
 800b408:	d908      	bls.n	800b41c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b40a:	4b56      	ldr	r3, [pc, #344]	; (800b564 <HAL_RCC_ClockConfig+0x244>)
 800b40c:	6a1b      	ldr	r3, [r3, #32]
 800b40e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	69db      	ldr	r3, [r3, #28]
 800b416:	4953      	ldr	r1, [pc, #332]	; (800b564 <HAL_RCC_ClockConfig+0x244>)
 800b418:	4313      	orrs	r3, r2
 800b41a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f003 0302 	and.w	r3, r3, #2
 800b424:	2b00      	cmp	r3, #0
 800b426:	d010      	beq.n	800b44a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	68da      	ldr	r2, [r3, #12]
 800b42c:	4b4d      	ldr	r3, [pc, #308]	; (800b564 <HAL_RCC_ClockConfig+0x244>)
 800b42e:	699b      	ldr	r3, [r3, #24]
 800b430:	f003 030f 	and.w	r3, r3, #15
 800b434:	429a      	cmp	r2, r3
 800b436:	d908      	bls.n	800b44a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b438:	4b4a      	ldr	r3, [pc, #296]	; (800b564 <HAL_RCC_ClockConfig+0x244>)
 800b43a:	699b      	ldr	r3, [r3, #24]
 800b43c:	f023 020f 	bic.w	r2, r3, #15
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	68db      	ldr	r3, [r3, #12]
 800b444:	4947      	ldr	r1, [pc, #284]	; (800b564 <HAL_RCC_ClockConfig+0x244>)
 800b446:	4313      	orrs	r3, r2
 800b448:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f003 0301 	and.w	r3, r3, #1
 800b452:	2b00      	cmp	r3, #0
 800b454:	d055      	beq.n	800b502 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b456:	4b43      	ldr	r3, [pc, #268]	; (800b564 <HAL_RCC_ClockConfig+0x244>)
 800b458:	699b      	ldr	r3, [r3, #24]
 800b45a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	689b      	ldr	r3, [r3, #8]
 800b462:	4940      	ldr	r1, [pc, #256]	; (800b564 <HAL_RCC_ClockConfig+0x244>)
 800b464:	4313      	orrs	r3, r2
 800b466:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	685b      	ldr	r3, [r3, #4]
 800b46c:	2b02      	cmp	r3, #2
 800b46e:	d107      	bne.n	800b480 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b470:	4b3c      	ldr	r3, [pc, #240]	; (800b564 <HAL_RCC_ClockConfig+0x244>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d121      	bne.n	800b4c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b47c:	2301      	movs	r3, #1
 800b47e:	e0f6      	b.n	800b66e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	2b03      	cmp	r3, #3
 800b486:	d107      	bne.n	800b498 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b488:	4b36      	ldr	r3, [pc, #216]	; (800b564 <HAL_RCC_ClockConfig+0x244>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b490:	2b00      	cmp	r3, #0
 800b492:	d115      	bne.n	800b4c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b494:	2301      	movs	r3, #1
 800b496:	e0ea      	b.n	800b66e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	685b      	ldr	r3, [r3, #4]
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	d107      	bne.n	800b4b0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b4a0:	4b30      	ldr	r3, [pc, #192]	; (800b564 <HAL_RCC_ClockConfig+0x244>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d109      	bne.n	800b4c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	e0de      	b.n	800b66e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b4b0:	4b2c      	ldr	r3, [pc, #176]	; (800b564 <HAL_RCC_ClockConfig+0x244>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f003 0304 	and.w	r3, r3, #4
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d101      	bne.n	800b4c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	e0d6      	b.n	800b66e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b4c0:	4b28      	ldr	r3, [pc, #160]	; (800b564 <HAL_RCC_ClockConfig+0x244>)
 800b4c2:	691b      	ldr	r3, [r3, #16]
 800b4c4:	f023 0207 	bic.w	r2, r3, #7
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	4925      	ldr	r1, [pc, #148]	; (800b564 <HAL_RCC_ClockConfig+0x244>)
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4d2:	f7f9 f959 	bl	8004788 <HAL_GetTick>
 800b4d6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b4d8:	e00a      	b.n	800b4f0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b4da:	f7f9 f955 	bl	8004788 <HAL_GetTick>
 800b4de:	4602      	mov	r2, r0
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	1ad3      	subs	r3, r2, r3
 800b4e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d901      	bls.n	800b4f0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b4ec:	2303      	movs	r3, #3
 800b4ee:	e0be      	b.n	800b66e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b4f0:	4b1c      	ldr	r3, [pc, #112]	; (800b564 <HAL_RCC_ClockConfig+0x244>)
 800b4f2:	691b      	ldr	r3, [r3, #16]
 800b4f4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	685b      	ldr	r3, [r3, #4]
 800b4fc:	00db      	lsls	r3, r3, #3
 800b4fe:	429a      	cmp	r2, r3
 800b500:	d1eb      	bne.n	800b4da <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f003 0302 	and.w	r3, r3, #2
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d010      	beq.n	800b530 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	68da      	ldr	r2, [r3, #12]
 800b512:	4b14      	ldr	r3, [pc, #80]	; (800b564 <HAL_RCC_ClockConfig+0x244>)
 800b514:	699b      	ldr	r3, [r3, #24]
 800b516:	f003 030f 	and.w	r3, r3, #15
 800b51a:	429a      	cmp	r2, r3
 800b51c:	d208      	bcs.n	800b530 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b51e:	4b11      	ldr	r3, [pc, #68]	; (800b564 <HAL_RCC_ClockConfig+0x244>)
 800b520:	699b      	ldr	r3, [r3, #24]
 800b522:	f023 020f 	bic.w	r2, r3, #15
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	68db      	ldr	r3, [r3, #12]
 800b52a:	490e      	ldr	r1, [pc, #56]	; (800b564 <HAL_RCC_ClockConfig+0x244>)
 800b52c:	4313      	orrs	r3, r2
 800b52e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b530:	4b0b      	ldr	r3, [pc, #44]	; (800b560 <HAL_RCC_ClockConfig+0x240>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f003 030f 	and.w	r3, r3, #15
 800b538:	683a      	ldr	r2, [r7, #0]
 800b53a:	429a      	cmp	r2, r3
 800b53c:	d214      	bcs.n	800b568 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b53e:	4b08      	ldr	r3, [pc, #32]	; (800b560 <HAL_RCC_ClockConfig+0x240>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f023 020f 	bic.w	r2, r3, #15
 800b546:	4906      	ldr	r1, [pc, #24]	; (800b560 <HAL_RCC_ClockConfig+0x240>)
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	4313      	orrs	r3, r2
 800b54c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b54e:	4b04      	ldr	r3, [pc, #16]	; (800b560 <HAL_RCC_ClockConfig+0x240>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f003 030f 	and.w	r3, r3, #15
 800b556:	683a      	ldr	r2, [r7, #0]
 800b558:	429a      	cmp	r2, r3
 800b55a:	d005      	beq.n	800b568 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b55c:	2301      	movs	r3, #1
 800b55e:	e086      	b.n	800b66e <HAL_RCC_ClockConfig+0x34e>
 800b560:	52002000 	.word	0x52002000
 800b564:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f003 0304 	and.w	r3, r3, #4
 800b570:	2b00      	cmp	r3, #0
 800b572:	d010      	beq.n	800b596 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	691a      	ldr	r2, [r3, #16]
 800b578:	4b3f      	ldr	r3, [pc, #252]	; (800b678 <HAL_RCC_ClockConfig+0x358>)
 800b57a:	699b      	ldr	r3, [r3, #24]
 800b57c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b580:	429a      	cmp	r2, r3
 800b582:	d208      	bcs.n	800b596 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b584:	4b3c      	ldr	r3, [pc, #240]	; (800b678 <HAL_RCC_ClockConfig+0x358>)
 800b586:	699b      	ldr	r3, [r3, #24]
 800b588:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	691b      	ldr	r3, [r3, #16]
 800b590:	4939      	ldr	r1, [pc, #228]	; (800b678 <HAL_RCC_ClockConfig+0x358>)
 800b592:	4313      	orrs	r3, r2
 800b594:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f003 0308 	and.w	r3, r3, #8
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d010      	beq.n	800b5c4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	695a      	ldr	r2, [r3, #20]
 800b5a6:	4b34      	ldr	r3, [pc, #208]	; (800b678 <HAL_RCC_ClockConfig+0x358>)
 800b5a8:	69db      	ldr	r3, [r3, #28]
 800b5aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b5ae:	429a      	cmp	r2, r3
 800b5b0:	d208      	bcs.n	800b5c4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b5b2:	4b31      	ldr	r3, [pc, #196]	; (800b678 <HAL_RCC_ClockConfig+0x358>)
 800b5b4:	69db      	ldr	r3, [r3, #28]
 800b5b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	695b      	ldr	r3, [r3, #20]
 800b5be:	492e      	ldr	r1, [pc, #184]	; (800b678 <HAL_RCC_ClockConfig+0x358>)
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f003 0310 	and.w	r3, r3, #16
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d010      	beq.n	800b5f2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	699a      	ldr	r2, [r3, #24]
 800b5d4:	4b28      	ldr	r3, [pc, #160]	; (800b678 <HAL_RCC_ClockConfig+0x358>)
 800b5d6:	69db      	ldr	r3, [r3, #28]
 800b5d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	d208      	bcs.n	800b5f2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b5e0:	4b25      	ldr	r3, [pc, #148]	; (800b678 <HAL_RCC_ClockConfig+0x358>)
 800b5e2:	69db      	ldr	r3, [r3, #28]
 800b5e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	699b      	ldr	r3, [r3, #24]
 800b5ec:	4922      	ldr	r1, [pc, #136]	; (800b678 <HAL_RCC_ClockConfig+0x358>)
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f003 0320 	and.w	r3, r3, #32
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d010      	beq.n	800b620 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	69da      	ldr	r2, [r3, #28]
 800b602:	4b1d      	ldr	r3, [pc, #116]	; (800b678 <HAL_RCC_ClockConfig+0x358>)
 800b604:	6a1b      	ldr	r3, [r3, #32]
 800b606:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d208      	bcs.n	800b620 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b60e:	4b1a      	ldr	r3, [pc, #104]	; (800b678 <HAL_RCC_ClockConfig+0x358>)
 800b610:	6a1b      	ldr	r3, [r3, #32]
 800b612:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	69db      	ldr	r3, [r3, #28]
 800b61a:	4917      	ldr	r1, [pc, #92]	; (800b678 <HAL_RCC_ClockConfig+0x358>)
 800b61c:	4313      	orrs	r3, r2
 800b61e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800b620:	f000 f89e 	bl	800b760 <HAL_RCC_GetSysClockFreq>
 800b624:	4602      	mov	r2, r0
 800b626:	4b14      	ldr	r3, [pc, #80]	; (800b678 <HAL_RCC_ClockConfig+0x358>)
 800b628:	699b      	ldr	r3, [r3, #24]
 800b62a:	0a1b      	lsrs	r3, r3, #8
 800b62c:	f003 030f 	and.w	r3, r3, #15
 800b630:	4912      	ldr	r1, [pc, #72]	; (800b67c <HAL_RCC_ClockConfig+0x35c>)
 800b632:	5ccb      	ldrb	r3, [r1, r3]
 800b634:	f003 031f 	and.w	r3, r3, #31
 800b638:	fa22 f303 	lsr.w	r3, r2, r3
 800b63c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b63e:	4b0e      	ldr	r3, [pc, #56]	; (800b678 <HAL_RCC_ClockConfig+0x358>)
 800b640:	699b      	ldr	r3, [r3, #24]
 800b642:	f003 030f 	and.w	r3, r3, #15
 800b646:	4a0d      	ldr	r2, [pc, #52]	; (800b67c <HAL_RCC_ClockConfig+0x35c>)
 800b648:	5cd3      	ldrb	r3, [r2, r3]
 800b64a:	f003 031f 	and.w	r3, r3, #31
 800b64e:	693a      	ldr	r2, [r7, #16]
 800b650:	fa22 f303 	lsr.w	r3, r2, r3
 800b654:	4a0a      	ldr	r2, [pc, #40]	; (800b680 <HAL_RCC_ClockConfig+0x360>)
 800b656:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b658:	4a0a      	ldr	r2, [pc, #40]	; (800b684 <HAL_RCC_ClockConfig+0x364>)
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b65e:	4b0a      	ldr	r3, [pc, #40]	; (800b688 <HAL_RCC_ClockConfig+0x368>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	4618      	mov	r0, r3
 800b664:	f7f9 f846 	bl	80046f4 <HAL_InitTick>
 800b668:	4603      	mov	r3, r0
 800b66a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b66c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3718      	adds	r7, #24
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
 800b676:	bf00      	nop
 800b678:	58024400 	.word	0x58024400
 800b67c:	0801d2f8 	.word	0x0801d2f8
 800b680:	24000048 	.word	0x24000048
 800b684:	24000044 	.word	0x24000044
 800b688:	2400004c 	.word	0x2400004c

0800b68c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b08c      	sub	sp, #48	; 0x30
 800b690:	af00      	add	r7, sp, #0
 800b692:	60f8      	str	r0, [r7, #12]
 800b694:	60b9      	str	r1, [r7, #8]
 800b696:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d12a      	bne.n	800b6f4 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800b69e:	4b2d      	ldr	r3, [pc, #180]	; (800b754 <HAL_RCC_MCOConfig+0xc8>)
 800b6a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b6a4:	4a2b      	ldr	r2, [pc, #172]	; (800b754 <HAL_RCC_MCOConfig+0xc8>)
 800b6a6:	f043 0301 	orr.w	r3, r3, #1
 800b6aa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800b6ae:	4b29      	ldr	r3, [pc, #164]	; (800b754 <HAL_RCC_MCOConfig+0xc8>)
 800b6b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b6b4:	f003 0301 	and.w	r3, r3, #1
 800b6b8:	61bb      	str	r3, [r7, #24]
 800b6ba:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800b6bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6c2:	2302      	movs	r3, #2
 800b6c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b6c6:	2303      	movs	r3, #3
 800b6c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b6d2:	f107 031c 	add.w	r3, r7, #28
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	481f      	ldr	r0, [pc, #124]	; (800b758 <HAL_RCC_MCOConfig+0xcc>)
 800b6da:	f7fd fcc1 	bl	8009060 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800b6de:	4b1d      	ldr	r3, [pc, #116]	; (800b754 <HAL_RCC_MCOConfig+0xc8>)
 800b6e0:	691b      	ldr	r3, [r3, #16]
 800b6e2:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800b6e6:	68b9      	ldr	r1, [r7, #8]
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	430b      	orrs	r3, r1
 800b6ec:	4919      	ldr	r1, [pc, #100]	; (800b754 <HAL_RCC_MCOConfig+0xc8>)
 800b6ee:	4313      	orrs	r3, r2
 800b6f0:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800b6f2:	e02a      	b.n	800b74a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800b6f4:	4b17      	ldr	r3, [pc, #92]	; (800b754 <HAL_RCC_MCOConfig+0xc8>)
 800b6f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b6fa:	4a16      	ldr	r2, [pc, #88]	; (800b754 <HAL_RCC_MCOConfig+0xc8>)
 800b6fc:	f043 0304 	orr.w	r3, r3, #4
 800b700:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800b704:	4b13      	ldr	r3, [pc, #76]	; (800b754 <HAL_RCC_MCOConfig+0xc8>)
 800b706:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b70a:	f003 0304 	and.w	r3, r3, #4
 800b70e:	617b      	str	r3, [r7, #20]
 800b710:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b712:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b716:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b718:	2302      	movs	r3, #2
 800b71a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b71c:	2303      	movs	r3, #3
 800b71e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b720:	2300      	movs	r3, #0
 800b722:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b724:	2300      	movs	r3, #0
 800b726:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b728:	f107 031c 	add.w	r3, r7, #28
 800b72c:	4619      	mov	r1, r3
 800b72e:	480b      	ldr	r0, [pc, #44]	; (800b75c <HAL_RCC_MCOConfig+0xd0>)
 800b730:	f7fd fc96 	bl	8009060 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800b734:	4b07      	ldr	r3, [pc, #28]	; (800b754 <HAL_RCC_MCOConfig+0xc8>)
 800b736:	691b      	ldr	r3, [r3, #16]
 800b738:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	01d9      	lsls	r1, r3, #7
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	430b      	orrs	r3, r1
 800b744:	4903      	ldr	r1, [pc, #12]	; (800b754 <HAL_RCC_MCOConfig+0xc8>)
 800b746:	4313      	orrs	r3, r2
 800b748:	610b      	str	r3, [r1, #16]
}
 800b74a:	bf00      	nop
 800b74c:	3730      	adds	r7, #48	; 0x30
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}
 800b752:	bf00      	nop
 800b754:	58024400 	.word	0x58024400
 800b758:	58020000 	.word	0x58020000
 800b75c:	58020800 	.word	0x58020800

0800b760 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b760:	b480      	push	{r7}
 800b762:	b089      	sub	sp, #36	; 0x24
 800b764:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b766:	4bb3      	ldr	r3, [pc, #716]	; (800ba34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b768:	691b      	ldr	r3, [r3, #16]
 800b76a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b76e:	2b18      	cmp	r3, #24
 800b770:	f200 8155 	bhi.w	800ba1e <HAL_RCC_GetSysClockFreq+0x2be>
 800b774:	a201      	add	r2, pc, #4	; (adr r2, 800b77c <HAL_RCC_GetSysClockFreq+0x1c>)
 800b776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b77a:	bf00      	nop
 800b77c:	0800b7e1 	.word	0x0800b7e1
 800b780:	0800ba1f 	.word	0x0800ba1f
 800b784:	0800ba1f 	.word	0x0800ba1f
 800b788:	0800ba1f 	.word	0x0800ba1f
 800b78c:	0800ba1f 	.word	0x0800ba1f
 800b790:	0800ba1f 	.word	0x0800ba1f
 800b794:	0800ba1f 	.word	0x0800ba1f
 800b798:	0800ba1f 	.word	0x0800ba1f
 800b79c:	0800b807 	.word	0x0800b807
 800b7a0:	0800ba1f 	.word	0x0800ba1f
 800b7a4:	0800ba1f 	.word	0x0800ba1f
 800b7a8:	0800ba1f 	.word	0x0800ba1f
 800b7ac:	0800ba1f 	.word	0x0800ba1f
 800b7b0:	0800ba1f 	.word	0x0800ba1f
 800b7b4:	0800ba1f 	.word	0x0800ba1f
 800b7b8:	0800ba1f 	.word	0x0800ba1f
 800b7bc:	0800b80d 	.word	0x0800b80d
 800b7c0:	0800ba1f 	.word	0x0800ba1f
 800b7c4:	0800ba1f 	.word	0x0800ba1f
 800b7c8:	0800ba1f 	.word	0x0800ba1f
 800b7cc:	0800ba1f 	.word	0x0800ba1f
 800b7d0:	0800ba1f 	.word	0x0800ba1f
 800b7d4:	0800ba1f 	.word	0x0800ba1f
 800b7d8:	0800ba1f 	.word	0x0800ba1f
 800b7dc:	0800b813 	.word	0x0800b813
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7e0:	4b94      	ldr	r3, [pc, #592]	; (800ba34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f003 0320 	and.w	r3, r3, #32
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d009      	beq.n	800b800 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b7ec:	4b91      	ldr	r3, [pc, #580]	; (800ba34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	08db      	lsrs	r3, r3, #3
 800b7f2:	f003 0303 	and.w	r3, r3, #3
 800b7f6:	4a90      	ldr	r2, [pc, #576]	; (800ba38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b7f8:	fa22 f303 	lsr.w	r3, r2, r3
 800b7fc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b7fe:	e111      	b.n	800ba24 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b800:	4b8d      	ldr	r3, [pc, #564]	; (800ba38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b802:	61bb      	str	r3, [r7, #24]
      break;
 800b804:	e10e      	b.n	800ba24 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b806:	4b8d      	ldr	r3, [pc, #564]	; (800ba3c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b808:	61bb      	str	r3, [r7, #24]
      break;
 800b80a:	e10b      	b.n	800ba24 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b80c:	4b8c      	ldr	r3, [pc, #560]	; (800ba40 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b80e:	61bb      	str	r3, [r7, #24]
      break;
 800b810:	e108      	b.n	800ba24 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b812:	4b88      	ldr	r3, [pc, #544]	; (800ba34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b816:	f003 0303 	and.w	r3, r3, #3
 800b81a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b81c:	4b85      	ldr	r3, [pc, #532]	; (800ba34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b81e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b820:	091b      	lsrs	r3, r3, #4
 800b822:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b826:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b828:	4b82      	ldr	r3, [pc, #520]	; (800ba34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b82c:	f003 0301 	and.w	r3, r3, #1
 800b830:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b832:	4b80      	ldr	r3, [pc, #512]	; (800ba34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b836:	08db      	lsrs	r3, r3, #3
 800b838:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b83c:	68fa      	ldr	r2, [r7, #12]
 800b83e:	fb02 f303 	mul.w	r3, r2, r3
 800b842:	ee07 3a90 	vmov	s15, r3
 800b846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b84a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	2b00      	cmp	r3, #0
 800b852:	f000 80e1 	beq.w	800ba18 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	2b02      	cmp	r3, #2
 800b85a:	f000 8083 	beq.w	800b964 <HAL_RCC_GetSysClockFreq+0x204>
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	2b02      	cmp	r3, #2
 800b862:	f200 80a1 	bhi.w	800b9a8 <HAL_RCC_GetSysClockFreq+0x248>
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d003      	beq.n	800b874 <HAL_RCC_GetSysClockFreq+0x114>
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	2b01      	cmp	r3, #1
 800b870:	d056      	beq.n	800b920 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b872:	e099      	b.n	800b9a8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b874:	4b6f      	ldr	r3, [pc, #444]	; (800ba34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f003 0320 	and.w	r3, r3, #32
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d02d      	beq.n	800b8dc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b880:	4b6c      	ldr	r3, [pc, #432]	; (800ba34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	08db      	lsrs	r3, r3, #3
 800b886:	f003 0303 	and.w	r3, r3, #3
 800b88a:	4a6b      	ldr	r2, [pc, #428]	; (800ba38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b88c:	fa22 f303 	lsr.w	r3, r2, r3
 800b890:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	ee07 3a90 	vmov	s15, r3
 800b898:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	ee07 3a90 	vmov	s15, r3
 800b8a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8aa:	4b62      	ldr	r3, [pc, #392]	; (800ba34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b8ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8b2:	ee07 3a90 	vmov	s15, r3
 800b8b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8ba:	ed97 6a02 	vldr	s12, [r7, #8]
 800b8be:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ba44 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b8c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8d6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b8da:	e087      	b.n	800b9ec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	ee07 3a90 	vmov	s15, r3
 800b8e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8e6:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ba48 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b8ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8ee:	4b51      	ldr	r3, [pc, #324]	; (800ba34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b8f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8f6:	ee07 3a90 	vmov	s15, r3
 800b8fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8fe:	ed97 6a02 	vldr	s12, [r7, #8]
 800b902:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ba44 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b90a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b90e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b91a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b91e:	e065      	b.n	800b9ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	ee07 3a90 	vmov	s15, r3
 800b926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b92a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ba4c <HAL_RCC_GetSysClockFreq+0x2ec>
 800b92e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b932:	4b40      	ldr	r3, [pc, #256]	; (800ba34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b93a:	ee07 3a90 	vmov	s15, r3
 800b93e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b942:	ed97 6a02 	vldr	s12, [r7, #8]
 800b946:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ba44 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b94a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b94e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b95a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b95e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b962:	e043      	b.n	800b9ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	ee07 3a90 	vmov	s15, r3
 800b96a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b96e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800ba50 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b976:	4b2f      	ldr	r3, [pc, #188]	; (800ba34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b97a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b97e:	ee07 3a90 	vmov	s15, r3
 800b982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b986:	ed97 6a02 	vldr	s12, [r7, #8]
 800b98a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ba44 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b98e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b99a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b99e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b9a6:	e021      	b.n	800b9ec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	ee07 3a90 	vmov	s15, r3
 800b9ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9b2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ba4c <HAL_RCC_GetSysClockFreq+0x2ec>
 800b9b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9ba:	4b1e      	ldr	r3, [pc, #120]	; (800ba34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b9bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9c2:	ee07 3a90 	vmov	s15, r3
 800b9c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9ca:	ed97 6a02 	vldr	s12, [r7, #8]
 800b9ce:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ba44 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b9d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b9ea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b9ec:	4b11      	ldr	r3, [pc, #68]	; (800ba34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b9ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9f0:	0a5b      	lsrs	r3, r3, #9
 800b9f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	ee07 3a90 	vmov	s15, r3
 800ba00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ba04:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba10:	ee17 3a90 	vmov	r3, s15
 800ba14:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800ba16:	e005      	b.n	800ba24 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	61bb      	str	r3, [r7, #24]
      break;
 800ba1c:	e002      	b.n	800ba24 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800ba1e:	4b07      	ldr	r3, [pc, #28]	; (800ba3c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ba20:	61bb      	str	r3, [r7, #24]
      break;
 800ba22:	bf00      	nop
  }

  return sysclockfreq;
 800ba24:	69bb      	ldr	r3, [r7, #24]
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	3724      	adds	r7, #36	; 0x24
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba30:	4770      	bx	lr
 800ba32:	bf00      	nop
 800ba34:	58024400 	.word	0x58024400
 800ba38:	03d09000 	.word	0x03d09000
 800ba3c:	003d0900 	.word	0x003d0900
 800ba40:	016e3600 	.word	0x016e3600
 800ba44:	46000000 	.word	0x46000000
 800ba48:	4c742400 	.word	0x4c742400
 800ba4c:	4a742400 	.word	0x4a742400
 800ba50:	4bb71b00 	.word	0x4bb71b00

0800ba54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b082      	sub	sp, #8
 800ba58:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800ba5a:	f7ff fe81 	bl	800b760 <HAL_RCC_GetSysClockFreq>
 800ba5e:	4602      	mov	r2, r0
 800ba60:	4b10      	ldr	r3, [pc, #64]	; (800baa4 <HAL_RCC_GetHCLKFreq+0x50>)
 800ba62:	699b      	ldr	r3, [r3, #24]
 800ba64:	0a1b      	lsrs	r3, r3, #8
 800ba66:	f003 030f 	and.w	r3, r3, #15
 800ba6a:	490f      	ldr	r1, [pc, #60]	; (800baa8 <HAL_RCC_GetHCLKFreq+0x54>)
 800ba6c:	5ccb      	ldrb	r3, [r1, r3]
 800ba6e:	f003 031f 	and.w	r3, r3, #31
 800ba72:	fa22 f303 	lsr.w	r3, r2, r3
 800ba76:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800ba78:	4b0a      	ldr	r3, [pc, #40]	; (800baa4 <HAL_RCC_GetHCLKFreq+0x50>)
 800ba7a:	699b      	ldr	r3, [r3, #24]
 800ba7c:	f003 030f 	and.w	r3, r3, #15
 800ba80:	4a09      	ldr	r2, [pc, #36]	; (800baa8 <HAL_RCC_GetHCLKFreq+0x54>)
 800ba82:	5cd3      	ldrb	r3, [r2, r3]
 800ba84:	f003 031f 	and.w	r3, r3, #31
 800ba88:	687a      	ldr	r2, [r7, #4]
 800ba8a:	fa22 f303 	lsr.w	r3, r2, r3
 800ba8e:	4a07      	ldr	r2, [pc, #28]	; (800baac <HAL_RCC_GetHCLKFreq+0x58>)
 800ba90:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ba92:	4a07      	ldr	r2, [pc, #28]	; (800bab0 <HAL_RCC_GetHCLKFreq+0x5c>)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ba98:	4b04      	ldr	r3, [pc, #16]	; (800baac <HAL_RCC_GetHCLKFreq+0x58>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3708      	adds	r7, #8
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}
 800baa4:	58024400 	.word	0x58024400
 800baa8:	0801d2f8 	.word	0x0801d2f8
 800baac:	24000048 	.word	0x24000048
 800bab0:	24000044 	.word	0x24000044

0800bab4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800bab8:	f7ff ffcc 	bl	800ba54 <HAL_RCC_GetHCLKFreq>
 800babc:	4602      	mov	r2, r0
 800babe:	4b06      	ldr	r3, [pc, #24]	; (800bad8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bac0:	69db      	ldr	r3, [r3, #28]
 800bac2:	091b      	lsrs	r3, r3, #4
 800bac4:	f003 0307 	and.w	r3, r3, #7
 800bac8:	4904      	ldr	r1, [pc, #16]	; (800badc <HAL_RCC_GetPCLK1Freq+0x28>)
 800baca:	5ccb      	ldrb	r3, [r1, r3]
 800bacc:	f003 031f 	and.w	r3, r3, #31
 800bad0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	bd80      	pop	{r7, pc}
 800bad8:	58024400 	.word	0x58024400
 800badc:	0801d2f8 	.word	0x0801d2f8

0800bae0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800bae4:	f7ff ffb6 	bl	800ba54 <HAL_RCC_GetHCLKFreq>
 800bae8:	4602      	mov	r2, r0
 800baea:	4b06      	ldr	r3, [pc, #24]	; (800bb04 <HAL_RCC_GetPCLK2Freq+0x24>)
 800baec:	69db      	ldr	r3, [r3, #28]
 800baee:	0a1b      	lsrs	r3, r3, #8
 800baf0:	f003 0307 	and.w	r3, r3, #7
 800baf4:	4904      	ldr	r1, [pc, #16]	; (800bb08 <HAL_RCC_GetPCLK2Freq+0x28>)
 800baf6:	5ccb      	ldrb	r3, [r1, r3]
 800baf8:	f003 031f 	and.w	r3, r3, #31
 800bafc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	bd80      	pop	{r7, pc}
 800bb04:	58024400 	.word	0x58024400
 800bb08:	0801d2f8 	.word	0x0801d2f8

0800bb0c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bb0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bb10:	b0c8      	sub	sp, #288	; 0x120
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bb18:	2300      	movs	r3, #0
 800bb1a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bb1e:	2300      	movs	r3, #0
 800bb20:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bb24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb2c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800bb30:	2500      	movs	r5, #0
 800bb32:	ea54 0305 	orrs.w	r3, r4, r5
 800bb36:	d049      	beq.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800bb38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb3e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bb42:	d02f      	beq.n	800bba4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800bb44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bb48:	d828      	bhi.n	800bb9c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800bb4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bb4e:	d01a      	beq.n	800bb86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800bb50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bb54:	d822      	bhi.n	800bb9c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d003      	beq.n	800bb62 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800bb5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb5e:	d007      	beq.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800bb60:	e01c      	b.n	800bb9c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb62:	4ba7      	ldr	r3, [pc, #668]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bb64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb66:	4aa6      	ldr	r2, [pc, #664]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bb68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800bb6e:	e01a      	b.n	800bba6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bb70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb74:	3308      	adds	r3, #8
 800bb76:	2102      	movs	r1, #2
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f001 fc43 	bl	800d404 <RCCEx_PLL2_Config>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800bb84:	e00f      	b.n	800bba6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bb86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb8a:	3328      	adds	r3, #40	; 0x28
 800bb8c:	2102      	movs	r1, #2
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f001 fcea 	bl	800d568 <RCCEx_PLL3_Config>
 800bb94:	4603      	mov	r3, r0
 800bb96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800bb9a:	e004      	b.n	800bba6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bba2:	e000      	b.n	800bba6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800bba4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bba6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d10a      	bne.n	800bbc4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800bbae:	4b94      	ldr	r3, [pc, #592]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bbb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbb2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800bbb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bbba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbbc:	4a90      	ldr	r2, [pc, #576]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bbbe:	430b      	orrs	r3, r1
 800bbc0:	6513      	str	r3, [r2, #80]	; 0x50
 800bbc2:	e003      	b.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbc4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bbc8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bbcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800bbd8:	f04f 0900 	mov.w	r9, #0
 800bbdc:	ea58 0309 	orrs.w	r3, r8, r9
 800bbe0:	d047      	beq.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800bbe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bbe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbe8:	2b04      	cmp	r3, #4
 800bbea:	d82a      	bhi.n	800bc42 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800bbec:	a201      	add	r2, pc, #4	; (adr r2, 800bbf4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800bbee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbf2:	bf00      	nop
 800bbf4:	0800bc09 	.word	0x0800bc09
 800bbf8:	0800bc17 	.word	0x0800bc17
 800bbfc:	0800bc2d 	.word	0x0800bc2d
 800bc00:	0800bc4b 	.word	0x0800bc4b
 800bc04:	0800bc4b 	.word	0x0800bc4b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc08:	4b7d      	ldr	r3, [pc, #500]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bc0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc0c:	4a7c      	ldr	r2, [pc, #496]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bc0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bc14:	e01a      	b.n	800bc4c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc1a:	3308      	adds	r3, #8
 800bc1c:	2100      	movs	r1, #0
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f001 fbf0 	bl	800d404 <RCCEx_PLL2_Config>
 800bc24:	4603      	mov	r3, r0
 800bc26:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bc2a:	e00f      	b.n	800bc4c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bc2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc30:	3328      	adds	r3, #40	; 0x28
 800bc32:	2100      	movs	r1, #0
 800bc34:	4618      	mov	r0, r3
 800bc36:	f001 fc97 	bl	800d568 <RCCEx_PLL3_Config>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bc40:	e004      	b.n	800bc4c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc42:	2301      	movs	r3, #1
 800bc44:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bc48:	e000      	b.n	800bc4c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800bc4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc4c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d10a      	bne.n	800bc6a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bc54:	4b6a      	ldr	r3, [pc, #424]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bc56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc58:	f023 0107 	bic.w	r1, r3, #7
 800bc5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc62:	4a67      	ldr	r2, [pc, #412]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bc64:	430b      	orrs	r3, r1
 800bc66:	6513      	str	r3, [r2, #80]	; 0x50
 800bc68:	e003      	b.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc6a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bc6e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800bc72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc7a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800bc7e:	f04f 0b00 	mov.w	fp, #0
 800bc82:	ea5a 030b 	orrs.w	r3, sl, fp
 800bc86:	d054      	beq.n	800bd32 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800bc88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc8e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800bc92:	d036      	beq.n	800bd02 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800bc94:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800bc98:	d82f      	bhi.n	800bcfa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800bc9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc9e:	d032      	beq.n	800bd06 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bca4:	d829      	bhi.n	800bcfa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800bca6:	2bc0      	cmp	r3, #192	; 0xc0
 800bca8:	d02f      	beq.n	800bd0a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800bcaa:	2bc0      	cmp	r3, #192	; 0xc0
 800bcac:	d825      	bhi.n	800bcfa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800bcae:	2b80      	cmp	r3, #128	; 0x80
 800bcb0:	d018      	beq.n	800bce4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800bcb2:	2b80      	cmp	r3, #128	; 0x80
 800bcb4:	d821      	bhi.n	800bcfa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d002      	beq.n	800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800bcba:	2b40      	cmp	r3, #64	; 0x40
 800bcbc:	d007      	beq.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800bcbe:	e01c      	b.n	800bcfa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bcc0:	4b4f      	ldr	r3, [pc, #316]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bcc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcc4:	4a4e      	ldr	r2, [pc, #312]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bcc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bcca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800bccc:	e01e      	b.n	800bd0c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bcce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bcd2:	3308      	adds	r3, #8
 800bcd4:	2100      	movs	r1, #0
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f001 fb94 	bl	800d404 <RCCEx_PLL2_Config>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800bce2:	e013      	b.n	800bd0c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bce8:	3328      	adds	r3, #40	; 0x28
 800bcea:	2100      	movs	r1, #0
 800bcec:	4618      	mov	r0, r3
 800bcee:	f001 fc3b 	bl	800d568 <RCCEx_PLL3_Config>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800bcf8:	e008      	b.n	800bd0c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bd00:	e004      	b.n	800bd0c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800bd02:	bf00      	nop
 800bd04:	e002      	b.n	800bd0c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800bd06:	bf00      	nop
 800bd08:	e000      	b.n	800bd0c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800bd0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd0c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d10a      	bne.n	800bd2a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800bd14:	4b3a      	ldr	r3, [pc, #232]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bd16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd18:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800bd1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd22:	4a37      	ldr	r2, [pc, #220]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bd24:	430b      	orrs	r3, r1
 800bd26:	6513      	str	r3, [r2, #80]	; 0x50
 800bd28:	e003      	b.n	800bd32 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd2a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bd2e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800bd32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd3a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800bd3e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800bd42:	2300      	movs	r3, #0
 800bd44:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800bd48:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800bd4c:	460b      	mov	r3, r1
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	d05c      	beq.n	800be0c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800bd52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd58:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800bd5c:	d03b      	beq.n	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800bd5e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800bd62:	d834      	bhi.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800bd64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd68:	d037      	beq.n	800bdda <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800bd6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd6e:	d82e      	bhi.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800bd70:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800bd74:	d033      	beq.n	800bdde <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bd76:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800bd7a:	d828      	bhi.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800bd7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd80:	d01a      	beq.n	800bdb8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800bd82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd86:	d822      	bhi.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d003      	beq.n	800bd94 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800bd8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd90:	d007      	beq.n	800bda2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800bd92:	e01c      	b.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd94:	4b1a      	ldr	r3, [pc, #104]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bd96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd98:	4a19      	ldr	r2, [pc, #100]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bd9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800bda0:	e01e      	b.n	800bde0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bda2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bda6:	3308      	adds	r3, #8
 800bda8:	2100      	movs	r1, #0
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f001 fb2a 	bl	800d404 <RCCEx_PLL2_Config>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800bdb6:	e013      	b.n	800bde0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bdb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bdbc:	3328      	adds	r3, #40	; 0x28
 800bdbe:	2100      	movs	r1, #0
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f001 fbd1 	bl	800d568 <RCCEx_PLL3_Config>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800bdcc:	e008      	b.n	800bde0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bdce:	2301      	movs	r3, #1
 800bdd0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bdd4:	e004      	b.n	800bde0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800bdd6:	bf00      	nop
 800bdd8:	e002      	b.n	800bde0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800bdda:	bf00      	nop
 800bddc:	e000      	b.n	800bde0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800bdde:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bde0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d10d      	bne.n	800be04 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800bde8:	4b05      	ldr	r3, [pc, #20]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bdea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdec:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800bdf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bdf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bdf6:	4a02      	ldr	r2, [pc, #8]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bdf8:	430b      	orrs	r3, r1
 800bdfa:	6513      	str	r3, [r2, #80]	; 0x50
 800bdfc:	e006      	b.n	800be0c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800bdfe:	bf00      	nop
 800be00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be04:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800be08:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800be0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be14:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800be18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800be1c:	2300      	movs	r3, #0
 800be1e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800be22:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800be26:	460b      	mov	r3, r1
 800be28:	4313      	orrs	r3, r2
 800be2a:	d03a      	beq.n	800bea2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800be2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be32:	2b30      	cmp	r3, #48	; 0x30
 800be34:	d01f      	beq.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800be36:	2b30      	cmp	r3, #48	; 0x30
 800be38:	d819      	bhi.n	800be6e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800be3a:	2b20      	cmp	r3, #32
 800be3c:	d00c      	beq.n	800be58 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800be3e:	2b20      	cmp	r3, #32
 800be40:	d815      	bhi.n	800be6e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800be42:	2b00      	cmp	r3, #0
 800be44:	d019      	beq.n	800be7a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800be46:	2b10      	cmp	r3, #16
 800be48:	d111      	bne.n	800be6e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be4a:	4bae      	ldr	r3, [pc, #696]	; (800c104 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800be4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be4e:	4aad      	ldr	r2, [pc, #692]	; (800c104 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800be50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800be56:	e011      	b.n	800be7c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800be58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be5c:	3308      	adds	r3, #8
 800be5e:	2102      	movs	r1, #2
 800be60:	4618      	mov	r0, r3
 800be62:	f001 facf 	bl	800d404 <RCCEx_PLL2_Config>
 800be66:	4603      	mov	r3, r0
 800be68:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800be6c:	e006      	b.n	800be7c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800be6e:	2301      	movs	r3, #1
 800be70:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800be74:	e002      	b.n	800be7c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800be76:	bf00      	nop
 800be78:	e000      	b.n	800be7c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800be7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be7c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800be80:	2b00      	cmp	r3, #0
 800be82:	d10a      	bne.n	800be9a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800be84:	4b9f      	ldr	r3, [pc, #636]	; (800c104 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800be86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be88:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800be8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be92:	4a9c      	ldr	r2, [pc, #624]	; (800c104 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800be94:	430b      	orrs	r3, r1
 800be96:	64d3      	str	r3, [r2, #76]	; 0x4c
 800be98:	e003      	b.n	800bea2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be9a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800be9e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beaa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800beae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800beb2:	2300      	movs	r3, #0
 800beb4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800beb8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800bebc:	460b      	mov	r3, r1
 800bebe:	4313      	orrs	r3, r2
 800bec0:	d051      	beq.n	800bf66 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800bec2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bec6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bec8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800becc:	d035      	beq.n	800bf3a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800bece:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bed2:	d82e      	bhi.n	800bf32 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800bed4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bed8:	d031      	beq.n	800bf3e <HAL_RCCEx_PeriphCLKConfig+0x432>
 800beda:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bede:	d828      	bhi.n	800bf32 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800bee0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bee4:	d01a      	beq.n	800bf1c <HAL_RCCEx_PeriphCLKConfig+0x410>
 800bee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800beea:	d822      	bhi.n	800bf32 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800beec:	2b00      	cmp	r3, #0
 800beee:	d003      	beq.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800bef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bef4:	d007      	beq.n	800bf06 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800bef6:	e01c      	b.n	800bf32 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bef8:	4b82      	ldr	r3, [pc, #520]	; (800c104 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800befa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800befc:	4a81      	ldr	r2, [pc, #516]	; (800c104 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800befe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bf04:	e01c      	b.n	800bf40 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bf06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf0a:	3308      	adds	r3, #8
 800bf0c:	2100      	movs	r1, #0
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f001 fa78 	bl	800d404 <RCCEx_PLL2_Config>
 800bf14:	4603      	mov	r3, r0
 800bf16:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bf1a:	e011      	b.n	800bf40 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bf1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf20:	3328      	adds	r3, #40	; 0x28
 800bf22:	2100      	movs	r1, #0
 800bf24:	4618      	mov	r0, r3
 800bf26:	f001 fb1f 	bl	800d568 <RCCEx_PLL3_Config>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bf30:	e006      	b.n	800bf40 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf32:	2301      	movs	r3, #1
 800bf34:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bf38:	e002      	b.n	800bf40 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800bf3a:	bf00      	nop
 800bf3c:	e000      	b.n	800bf40 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800bf3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d10a      	bne.n	800bf5e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bf48:	4b6e      	ldr	r3, [pc, #440]	; (800c104 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bf4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf4c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800bf50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf56:	4a6b      	ldr	r2, [pc, #428]	; (800c104 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bf58:	430b      	orrs	r3, r1
 800bf5a:	6513      	str	r3, [r2, #80]	; 0x50
 800bf5c:	e003      	b.n	800bf66 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf5e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bf62:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bf66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800bf72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bf76:	2300      	movs	r3, #0
 800bf78:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bf7c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800bf80:	460b      	mov	r3, r1
 800bf82:	4313      	orrs	r3, r2
 800bf84:	d053      	beq.n	800c02e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800bf86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bf8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bf90:	d033      	beq.n	800bffa <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800bf92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bf96:	d82c      	bhi.n	800bff2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bf98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bf9c:	d02f      	beq.n	800bffe <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800bf9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bfa2:	d826      	bhi.n	800bff2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bfa4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bfa8:	d02b      	beq.n	800c002 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bfaa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bfae:	d820      	bhi.n	800bff2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bfb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bfb4:	d012      	beq.n	800bfdc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800bfb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bfba:	d81a      	bhi.n	800bff2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d022      	beq.n	800c006 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800bfc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfc4:	d115      	bne.n	800bff2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bfc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bfca:	3308      	adds	r3, #8
 800bfcc:	2101      	movs	r1, #1
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f001 fa18 	bl	800d404 <RCCEx_PLL2_Config>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bfda:	e015      	b.n	800c008 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bfdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bfe0:	3328      	adds	r3, #40	; 0x28
 800bfe2:	2101      	movs	r1, #1
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f001 fabf 	bl	800d568 <RCCEx_PLL3_Config>
 800bfea:	4603      	mov	r3, r0
 800bfec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bff0:	e00a      	b.n	800c008 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bff2:	2301      	movs	r3, #1
 800bff4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bff8:	e006      	b.n	800c008 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bffa:	bf00      	nop
 800bffc:	e004      	b.n	800c008 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bffe:	bf00      	nop
 800c000:	e002      	b.n	800c008 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800c002:	bf00      	nop
 800c004:	e000      	b.n	800c008 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800c006:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c008:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d10a      	bne.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c010:	4b3c      	ldr	r3, [pc, #240]	; (800c104 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c014:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800c018:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c01c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c01e:	4a39      	ldr	r2, [pc, #228]	; (800c104 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c020:	430b      	orrs	r3, r1
 800c022:	6513      	str	r3, [r2, #80]	; 0x50
 800c024:	e003      	b.n	800c02e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c026:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c02a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c02e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c036:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800c03a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c03e:	2300      	movs	r3, #0
 800c040:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c044:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800c048:	460b      	mov	r3, r1
 800c04a:	4313      	orrs	r3, r2
 800c04c:	d060      	beq.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800c04e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c052:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c056:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800c05a:	d039      	beq.n	800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800c05c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800c060:	d832      	bhi.n	800c0c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800c062:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c066:	d035      	beq.n	800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800c068:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c06c:	d82c      	bhi.n	800c0c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800c06e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c072:	d031      	beq.n	800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800c074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c078:	d826      	bhi.n	800c0c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800c07a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c07e:	d02d      	beq.n	800c0dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800c080:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c084:	d820      	bhi.n	800c0c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800c086:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c08a:	d012      	beq.n	800c0b2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800c08c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c090:	d81a      	bhi.n	800c0c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800c092:	2b00      	cmp	r3, #0
 800c094:	d024      	beq.n	800c0e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800c096:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c09a:	d115      	bne.n	800c0c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c09c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0a0:	3308      	adds	r3, #8
 800c0a2:	2101      	movs	r1, #1
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f001 f9ad 	bl	800d404 <RCCEx_PLL2_Config>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c0b0:	e017      	b.n	800c0e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c0b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0b6:	3328      	adds	r3, #40	; 0x28
 800c0b8:	2101      	movs	r1, #1
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f001 fa54 	bl	800d568 <RCCEx_PLL3_Config>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c0c6:	e00c      	b.n	800c0e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c0ce:	e008      	b.n	800c0e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c0d0:	bf00      	nop
 800c0d2:	e006      	b.n	800c0e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c0d4:	bf00      	nop
 800c0d6:	e004      	b.n	800c0e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c0d8:	bf00      	nop
 800c0da:	e002      	b.n	800c0e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c0dc:	bf00      	nop
 800c0de:	e000      	b.n	800c0e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c0e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c0e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d10e      	bne.n	800c108 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c0ea:	4b06      	ldr	r3, [pc, #24]	; (800c104 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c0ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0ee:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c0f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c0fa:	4a02      	ldr	r2, [pc, #8]	; (800c104 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c0fc:	430b      	orrs	r3, r1
 800c0fe:	6593      	str	r3, [r2, #88]	; 0x58
 800c100:	e006      	b.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800c102:	bf00      	nop
 800c104:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c108:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c10c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c110:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c118:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800c11c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c120:	2300      	movs	r3, #0
 800c122:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c126:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c12a:	460b      	mov	r3, r1
 800c12c:	4313      	orrs	r3, r2
 800c12e:	d037      	beq.n	800c1a0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800c130:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c134:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c136:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c13a:	d00e      	beq.n	800c15a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800c13c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c140:	d816      	bhi.n	800c170 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800c142:	2b00      	cmp	r3, #0
 800c144:	d018      	beq.n	800c178 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800c146:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c14a:	d111      	bne.n	800c170 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c14c:	4bc4      	ldr	r3, [pc, #784]	; (800c460 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c150:	4ac3      	ldr	r2, [pc, #780]	; (800c460 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c152:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c156:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c158:	e00f      	b.n	800c17a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c15a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c15e:	3308      	adds	r3, #8
 800c160:	2101      	movs	r1, #1
 800c162:	4618      	mov	r0, r3
 800c164:	f001 f94e 	bl	800d404 <RCCEx_PLL2_Config>
 800c168:	4603      	mov	r3, r0
 800c16a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c16e:	e004      	b.n	800c17a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c170:	2301      	movs	r3, #1
 800c172:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c176:	e000      	b.n	800c17a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800c178:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c17a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d10a      	bne.n	800c198 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c182:	4bb7      	ldr	r3, [pc, #732]	; (800c460 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c186:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c18a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c18e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c190:	4ab3      	ldr	r2, [pc, #716]	; (800c460 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c192:	430b      	orrs	r3, r1
 800c194:	6513      	str	r3, [r2, #80]	; 0x50
 800c196:	e003      	b.n	800c1a0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c198:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c19c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c1a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800c1ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c1b6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800c1ba:	460b      	mov	r3, r1
 800c1bc:	4313      	orrs	r3, r2
 800c1be:	d039      	beq.n	800c234 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800c1c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c1c6:	2b03      	cmp	r3, #3
 800c1c8:	d81c      	bhi.n	800c204 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800c1ca:	a201      	add	r2, pc, #4	; (adr r2, 800c1d0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800c1cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1d0:	0800c20d 	.word	0x0800c20d
 800c1d4:	0800c1e1 	.word	0x0800c1e1
 800c1d8:	0800c1ef 	.word	0x0800c1ef
 800c1dc:	0800c20d 	.word	0x0800c20d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c1e0:	4b9f      	ldr	r3, [pc, #636]	; (800c460 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c1e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1e4:	4a9e      	ldr	r2, [pc, #632]	; (800c460 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c1e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c1ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c1ec:	e00f      	b.n	800c20e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c1ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1f2:	3308      	adds	r3, #8
 800c1f4:	2102      	movs	r1, #2
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f001 f904 	bl	800d404 <RCCEx_PLL2_Config>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c202:	e004      	b.n	800c20e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c204:	2301      	movs	r3, #1
 800c206:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c20a:	e000      	b.n	800c20e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800c20c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c20e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c212:	2b00      	cmp	r3, #0
 800c214:	d10a      	bne.n	800c22c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c216:	4b92      	ldr	r3, [pc, #584]	; (800c460 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c21a:	f023 0103 	bic.w	r1, r3, #3
 800c21e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c224:	4a8e      	ldr	r2, [pc, #568]	; (800c460 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c226:	430b      	orrs	r3, r1
 800c228:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c22a:	e003      	b.n	800c234 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c22c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c230:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c234:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c23c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800c240:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c244:	2300      	movs	r3, #0
 800c246:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c24a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800c24e:	460b      	mov	r3, r1
 800c250:	4313      	orrs	r3, r2
 800c252:	f000 8099 	beq.w	800c388 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c256:	4b83      	ldr	r3, [pc, #524]	; (800c464 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	4a82      	ldr	r2, [pc, #520]	; (800c464 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c25c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c260:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c262:	f7f8 fa91 	bl	8004788 <HAL_GetTick>
 800c266:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c26a:	e00b      	b.n	800c284 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c26c:	f7f8 fa8c 	bl	8004788 <HAL_GetTick>
 800c270:	4602      	mov	r2, r0
 800c272:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c276:	1ad3      	subs	r3, r2, r3
 800c278:	2b64      	cmp	r3, #100	; 0x64
 800c27a:	d903      	bls.n	800c284 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800c27c:	2303      	movs	r3, #3
 800c27e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c282:	e005      	b.n	800c290 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c284:	4b77      	ldr	r3, [pc, #476]	; (800c464 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d0ed      	beq.n	800c26c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800c290:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c294:	2b00      	cmp	r3, #0
 800c296:	d173      	bne.n	800c380 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c298:	4b71      	ldr	r3, [pc, #452]	; (800c460 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c29a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c29c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c2a4:	4053      	eors	r3, r2
 800c2a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d015      	beq.n	800c2da <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c2ae:	4b6c      	ldr	r3, [pc, #432]	; (800c460 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c2b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c2b6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c2ba:	4b69      	ldr	r3, [pc, #420]	; (800c460 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c2bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2be:	4a68      	ldr	r2, [pc, #416]	; (800c460 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c2c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c2c4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c2c6:	4b66      	ldr	r3, [pc, #408]	; (800c460 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c2c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2ca:	4a65      	ldr	r2, [pc, #404]	; (800c460 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c2cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c2d0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c2d2:	4a63      	ldr	r2, [pc, #396]	; (800c460 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c2d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2d8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c2da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c2e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2e6:	d118      	bne.n	800c31a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c2e8:	f7f8 fa4e 	bl	8004788 <HAL_GetTick>
 800c2ec:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c2f0:	e00d      	b.n	800c30e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c2f2:	f7f8 fa49 	bl	8004788 <HAL_GetTick>
 800c2f6:	4602      	mov	r2, r0
 800c2f8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c2fc:	1ad2      	subs	r2, r2, r3
 800c2fe:	f241 3388 	movw	r3, #5000	; 0x1388
 800c302:	429a      	cmp	r2, r3
 800c304:	d903      	bls.n	800c30e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800c306:	2303      	movs	r3, #3
 800c308:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800c30c:	e005      	b.n	800c31a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c30e:	4b54      	ldr	r3, [pc, #336]	; (800c460 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c312:	f003 0302 	and.w	r3, r3, #2
 800c316:	2b00      	cmp	r3, #0
 800c318:	d0eb      	beq.n	800c2f2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800c31a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d129      	bne.n	800c376 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c322:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c326:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c32a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c32e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c332:	d10e      	bne.n	800c352 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800c334:	4b4a      	ldr	r3, [pc, #296]	; (800c460 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c336:	691b      	ldr	r3, [r3, #16]
 800c338:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800c33c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c340:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c344:	091a      	lsrs	r2, r3, #4
 800c346:	4b48      	ldr	r3, [pc, #288]	; (800c468 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800c348:	4013      	ands	r3, r2
 800c34a:	4a45      	ldr	r2, [pc, #276]	; (800c460 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c34c:	430b      	orrs	r3, r1
 800c34e:	6113      	str	r3, [r2, #16]
 800c350:	e005      	b.n	800c35e <HAL_RCCEx_PeriphCLKConfig+0x852>
 800c352:	4b43      	ldr	r3, [pc, #268]	; (800c460 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c354:	691b      	ldr	r3, [r3, #16]
 800c356:	4a42      	ldr	r2, [pc, #264]	; (800c460 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c358:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c35c:	6113      	str	r3, [r2, #16]
 800c35e:	4b40      	ldr	r3, [pc, #256]	; (800c460 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c360:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800c362:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c366:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c36a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c36e:	4a3c      	ldr	r2, [pc, #240]	; (800c460 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c370:	430b      	orrs	r3, r1
 800c372:	6713      	str	r3, [r2, #112]	; 0x70
 800c374:	e008      	b.n	800c388 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c376:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c37a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800c37e:	e003      	b.n	800c388 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c380:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c384:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c388:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c390:	f002 0301 	and.w	r3, r2, #1
 800c394:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c398:	2300      	movs	r3, #0
 800c39a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c39e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c3a2:	460b      	mov	r3, r1
 800c3a4:	4313      	orrs	r3, r2
 800c3a6:	f000 8090 	beq.w	800c4ca <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800c3aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3b2:	2b28      	cmp	r3, #40	; 0x28
 800c3b4:	d870      	bhi.n	800c498 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800c3b6:	a201      	add	r2, pc, #4	; (adr r2, 800c3bc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800c3b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3bc:	0800c4a1 	.word	0x0800c4a1
 800c3c0:	0800c499 	.word	0x0800c499
 800c3c4:	0800c499 	.word	0x0800c499
 800c3c8:	0800c499 	.word	0x0800c499
 800c3cc:	0800c499 	.word	0x0800c499
 800c3d0:	0800c499 	.word	0x0800c499
 800c3d4:	0800c499 	.word	0x0800c499
 800c3d8:	0800c499 	.word	0x0800c499
 800c3dc:	0800c46d 	.word	0x0800c46d
 800c3e0:	0800c499 	.word	0x0800c499
 800c3e4:	0800c499 	.word	0x0800c499
 800c3e8:	0800c499 	.word	0x0800c499
 800c3ec:	0800c499 	.word	0x0800c499
 800c3f0:	0800c499 	.word	0x0800c499
 800c3f4:	0800c499 	.word	0x0800c499
 800c3f8:	0800c499 	.word	0x0800c499
 800c3fc:	0800c483 	.word	0x0800c483
 800c400:	0800c499 	.word	0x0800c499
 800c404:	0800c499 	.word	0x0800c499
 800c408:	0800c499 	.word	0x0800c499
 800c40c:	0800c499 	.word	0x0800c499
 800c410:	0800c499 	.word	0x0800c499
 800c414:	0800c499 	.word	0x0800c499
 800c418:	0800c499 	.word	0x0800c499
 800c41c:	0800c4a1 	.word	0x0800c4a1
 800c420:	0800c499 	.word	0x0800c499
 800c424:	0800c499 	.word	0x0800c499
 800c428:	0800c499 	.word	0x0800c499
 800c42c:	0800c499 	.word	0x0800c499
 800c430:	0800c499 	.word	0x0800c499
 800c434:	0800c499 	.word	0x0800c499
 800c438:	0800c499 	.word	0x0800c499
 800c43c:	0800c4a1 	.word	0x0800c4a1
 800c440:	0800c499 	.word	0x0800c499
 800c444:	0800c499 	.word	0x0800c499
 800c448:	0800c499 	.word	0x0800c499
 800c44c:	0800c499 	.word	0x0800c499
 800c450:	0800c499 	.word	0x0800c499
 800c454:	0800c499 	.word	0x0800c499
 800c458:	0800c499 	.word	0x0800c499
 800c45c:	0800c4a1 	.word	0x0800c4a1
 800c460:	58024400 	.word	0x58024400
 800c464:	58024800 	.word	0x58024800
 800c468:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c46c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c470:	3308      	adds	r3, #8
 800c472:	2101      	movs	r1, #1
 800c474:	4618      	mov	r0, r3
 800c476:	f000 ffc5 	bl	800d404 <RCCEx_PLL2_Config>
 800c47a:	4603      	mov	r3, r0
 800c47c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c480:	e00f      	b.n	800c4a2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c482:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c486:	3328      	adds	r3, #40	; 0x28
 800c488:	2101      	movs	r1, #1
 800c48a:	4618      	mov	r0, r3
 800c48c:	f001 f86c 	bl	800d568 <RCCEx_PLL3_Config>
 800c490:	4603      	mov	r3, r0
 800c492:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c496:	e004      	b.n	800c4a2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c498:	2301      	movs	r3, #1
 800c49a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c49e:	e000      	b.n	800c4a2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800c4a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c4a2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d10b      	bne.n	800c4c2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c4aa:	4bc0      	ldr	r3, [pc, #768]	; (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c4ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4ae:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800c4b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4ba:	4abc      	ldr	r2, [pc, #752]	; (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c4bc:	430b      	orrs	r3, r1
 800c4be:	6553      	str	r3, [r2, #84]	; 0x54
 800c4c0:	e003      	b.n	800c4ca <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c4c6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c4ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d2:	f002 0302 	and.w	r3, r2, #2
 800c4d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c4da:	2300      	movs	r3, #0
 800c4dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c4e0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800c4e4:	460b      	mov	r3, r1
 800c4e6:	4313      	orrs	r3, r2
 800c4e8:	d043      	beq.n	800c572 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c4ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c4f2:	2b05      	cmp	r3, #5
 800c4f4:	d824      	bhi.n	800c540 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800c4f6:	a201      	add	r2, pc, #4	; (adr r2, 800c4fc <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800c4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4fc:	0800c549 	.word	0x0800c549
 800c500:	0800c515 	.word	0x0800c515
 800c504:	0800c52b 	.word	0x0800c52b
 800c508:	0800c549 	.word	0x0800c549
 800c50c:	0800c549 	.word	0x0800c549
 800c510:	0800c549 	.word	0x0800c549
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c514:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c518:	3308      	adds	r3, #8
 800c51a:	2101      	movs	r1, #1
 800c51c:	4618      	mov	r0, r3
 800c51e:	f000 ff71 	bl	800d404 <RCCEx_PLL2_Config>
 800c522:	4603      	mov	r3, r0
 800c524:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c528:	e00f      	b.n	800c54a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c52a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c52e:	3328      	adds	r3, #40	; 0x28
 800c530:	2101      	movs	r1, #1
 800c532:	4618      	mov	r0, r3
 800c534:	f001 f818 	bl	800d568 <RCCEx_PLL3_Config>
 800c538:	4603      	mov	r3, r0
 800c53a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c53e:	e004      	b.n	800c54a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c540:	2301      	movs	r3, #1
 800c542:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c546:	e000      	b.n	800c54a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800c548:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c54a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d10b      	bne.n	800c56a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c552:	4b96      	ldr	r3, [pc, #600]	; (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c556:	f023 0107 	bic.w	r1, r3, #7
 800c55a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c55e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c562:	4a92      	ldr	r2, [pc, #584]	; (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c564:	430b      	orrs	r3, r1
 800c566:	6553      	str	r3, [r2, #84]	; 0x54
 800c568:	e003      	b.n	800c572 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c56a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c56e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c572:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c57a:	f002 0304 	and.w	r3, r2, #4
 800c57e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c582:	2300      	movs	r3, #0
 800c584:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c588:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800c58c:	460b      	mov	r3, r1
 800c58e:	4313      	orrs	r3, r2
 800c590:	d043      	beq.n	800c61a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c592:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c596:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c59a:	2b05      	cmp	r3, #5
 800c59c:	d824      	bhi.n	800c5e8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800c59e:	a201      	add	r2, pc, #4	; (adr r2, 800c5a4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800c5a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5a4:	0800c5f1 	.word	0x0800c5f1
 800c5a8:	0800c5bd 	.word	0x0800c5bd
 800c5ac:	0800c5d3 	.word	0x0800c5d3
 800c5b0:	0800c5f1 	.word	0x0800c5f1
 800c5b4:	0800c5f1 	.word	0x0800c5f1
 800c5b8:	0800c5f1 	.word	0x0800c5f1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c5bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5c0:	3308      	adds	r3, #8
 800c5c2:	2101      	movs	r1, #1
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f000 ff1d 	bl	800d404 <RCCEx_PLL2_Config>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c5d0:	e00f      	b.n	800c5f2 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c5d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5d6:	3328      	adds	r3, #40	; 0x28
 800c5d8:	2101      	movs	r1, #1
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f000 ffc4 	bl	800d568 <RCCEx_PLL3_Config>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c5e6:	e004      	b.n	800c5f2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c5ee:	e000      	b.n	800c5f2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800c5f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c5f2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d10b      	bne.n	800c612 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c5fa:	4b6c      	ldr	r3, [pc, #432]	; (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c5fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5fe:	f023 0107 	bic.w	r1, r3, #7
 800c602:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c606:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c60a:	4a68      	ldr	r2, [pc, #416]	; (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c60c:	430b      	orrs	r3, r1
 800c60e:	6593      	str	r3, [r2, #88]	; 0x58
 800c610:	e003      	b.n	800c61a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c612:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c616:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c61a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c622:	f002 0320 	and.w	r3, r2, #32
 800c626:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c62a:	2300      	movs	r3, #0
 800c62c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c630:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c634:	460b      	mov	r3, r1
 800c636:	4313      	orrs	r3, r2
 800c638:	d055      	beq.n	800c6e6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c63a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c63e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c642:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c646:	d033      	beq.n	800c6b0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c648:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c64c:	d82c      	bhi.n	800c6a8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c64e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c652:	d02f      	beq.n	800c6b4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c658:	d826      	bhi.n	800c6a8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c65a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c65e:	d02b      	beq.n	800c6b8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c660:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c664:	d820      	bhi.n	800c6a8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c666:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c66a:	d012      	beq.n	800c692 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800c66c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c670:	d81a      	bhi.n	800c6a8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c672:	2b00      	cmp	r3, #0
 800c674:	d022      	beq.n	800c6bc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800c676:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c67a:	d115      	bne.n	800c6a8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c67c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c680:	3308      	adds	r3, #8
 800c682:	2100      	movs	r1, #0
 800c684:	4618      	mov	r0, r3
 800c686:	f000 febd 	bl	800d404 <RCCEx_PLL2_Config>
 800c68a:	4603      	mov	r3, r0
 800c68c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c690:	e015      	b.n	800c6be <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c692:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c696:	3328      	adds	r3, #40	; 0x28
 800c698:	2102      	movs	r1, #2
 800c69a:	4618      	mov	r0, r3
 800c69c:	f000 ff64 	bl	800d568 <RCCEx_PLL3_Config>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c6a6:	e00a      	b.n	800c6be <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c6ae:	e006      	b.n	800c6be <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c6b0:	bf00      	nop
 800c6b2:	e004      	b.n	800c6be <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c6b4:	bf00      	nop
 800c6b6:	e002      	b.n	800c6be <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c6b8:	bf00      	nop
 800c6ba:	e000      	b.n	800c6be <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c6bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c6be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d10b      	bne.n	800c6de <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c6c6:	4b39      	ldr	r3, [pc, #228]	; (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c6c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6ca:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c6ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c6d6:	4a35      	ldr	r2, [pc, #212]	; (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c6d8:	430b      	orrs	r3, r1
 800c6da:	6553      	str	r3, [r2, #84]	; 0x54
 800c6dc:	e003      	b.n	800c6e6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6de:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c6e2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c6e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ee:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800c6f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c6fc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800c700:	460b      	mov	r3, r1
 800c702:	4313      	orrs	r3, r2
 800c704:	d058      	beq.n	800c7b8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c706:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c70a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c70e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c712:	d033      	beq.n	800c77c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c714:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c718:	d82c      	bhi.n	800c774 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c71a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c71e:	d02f      	beq.n	800c780 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c724:	d826      	bhi.n	800c774 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c726:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c72a:	d02b      	beq.n	800c784 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c72c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c730:	d820      	bhi.n	800c774 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c732:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c736:	d012      	beq.n	800c75e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800c738:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c73c:	d81a      	bhi.n	800c774 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d022      	beq.n	800c788 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800c742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c746:	d115      	bne.n	800c774 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c748:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c74c:	3308      	adds	r3, #8
 800c74e:	2100      	movs	r1, #0
 800c750:	4618      	mov	r0, r3
 800c752:	f000 fe57 	bl	800d404 <RCCEx_PLL2_Config>
 800c756:	4603      	mov	r3, r0
 800c758:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c75c:	e015      	b.n	800c78a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c75e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c762:	3328      	adds	r3, #40	; 0x28
 800c764:	2102      	movs	r1, #2
 800c766:	4618      	mov	r0, r3
 800c768:	f000 fefe 	bl	800d568 <RCCEx_PLL3_Config>
 800c76c:	4603      	mov	r3, r0
 800c76e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c772:	e00a      	b.n	800c78a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c774:	2301      	movs	r3, #1
 800c776:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c77a:	e006      	b.n	800c78a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c77c:	bf00      	nop
 800c77e:	e004      	b.n	800c78a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c780:	bf00      	nop
 800c782:	e002      	b.n	800c78a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c784:	bf00      	nop
 800c786:	e000      	b.n	800c78a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c788:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c78a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d10e      	bne.n	800c7b0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c792:	4b06      	ldr	r3, [pc, #24]	; (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c796:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800c79a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c79e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c7a2:	4a02      	ldr	r2, [pc, #8]	; (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c7a4:	430b      	orrs	r3, r1
 800c7a6:	6593      	str	r3, [r2, #88]	; 0x58
 800c7a8:	e006      	b.n	800c7b8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800c7aa:	bf00      	nop
 800c7ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c7b4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c7b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800c7c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c7ce:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800c7d2:	460b      	mov	r3, r1
 800c7d4:	4313      	orrs	r3, r2
 800c7d6:	d055      	beq.n	800c884 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c7d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c7e0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c7e4:	d033      	beq.n	800c84e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c7e6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c7ea:	d82c      	bhi.n	800c846 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c7ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c7f0:	d02f      	beq.n	800c852 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c7f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c7f6:	d826      	bhi.n	800c846 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c7f8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c7fc:	d02b      	beq.n	800c856 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c7fe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c802:	d820      	bhi.n	800c846 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c804:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c808:	d012      	beq.n	800c830 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800c80a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c80e:	d81a      	bhi.n	800c846 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c810:	2b00      	cmp	r3, #0
 800c812:	d022      	beq.n	800c85a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800c814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c818:	d115      	bne.n	800c846 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c81a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c81e:	3308      	adds	r3, #8
 800c820:	2100      	movs	r1, #0
 800c822:	4618      	mov	r0, r3
 800c824:	f000 fdee 	bl	800d404 <RCCEx_PLL2_Config>
 800c828:	4603      	mov	r3, r0
 800c82a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c82e:	e015      	b.n	800c85c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c830:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c834:	3328      	adds	r3, #40	; 0x28
 800c836:	2102      	movs	r1, #2
 800c838:	4618      	mov	r0, r3
 800c83a:	f000 fe95 	bl	800d568 <RCCEx_PLL3_Config>
 800c83e:	4603      	mov	r3, r0
 800c840:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c844:	e00a      	b.n	800c85c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c846:	2301      	movs	r3, #1
 800c848:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c84c:	e006      	b.n	800c85c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c84e:	bf00      	nop
 800c850:	e004      	b.n	800c85c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c852:	bf00      	nop
 800c854:	e002      	b.n	800c85c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c856:	bf00      	nop
 800c858:	e000      	b.n	800c85c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c85a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c85c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c860:	2b00      	cmp	r3, #0
 800c862:	d10b      	bne.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c864:	4ba1      	ldr	r3, [pc, #644]	; (800caec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c868:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c86c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c870:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c874:	4a9d      	ldr	r2, [pc, #628]	; (800caec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c876:	430b      	orrs	r3, r1
 800c878:	6593      	str	r3, [r2, #88]	; 0x58
 800c87a:	e003      	b.n	800c884 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c87c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c880:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c884:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88c:	f002 0308 	and.w	r3, r2, #8
 800c890:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c894:	2300      	movs	r3, #0
 800c896:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c89a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c89e:	460b      	mov	r3, r1
 800c8a0:	4313      	orrs	r3, r2
 800c8a2:	d01e      	beq.n	800c8e2 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c8a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c8a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c8b0:	d10c      	bne.n	800c8cc <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c8b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c8b6:	3328      	adds	r3, #40	; 0x28
 800c8b8:	2102      	movs	r1, #2
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f000 fe54 	bl	800d568 <RCCEx_PLL3_Config>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d002      	beq.n	800c8cc <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c8cc:	4b87      	ldr	r3, [pc, #540]	; (800caec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c8ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8d0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c8d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c8d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8dc:	4a83      	ldr	r2, [pc, #524]	; (800caec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c8de:	430b      	orrs	r3, r1
 800c8e0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c8e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ea:	f002 0310 	and.w	r3, r2, #16
 800c8ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c8f8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c8fc:	460b      	mov	r3, r1
 800c8fe:	4313      	orrs	r3, r2
 800c900:	d01e      	beq.n	800c940 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c902:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c906:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c90a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c90e:	d10c      	bne.n	800c92a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c910:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c914:	3328      	adds	r3, #40	; 0x28
 800c916:	2102      	movs	r1, #2
 800c918:	4618      	mov	r0, r3
 800c91a:	f000 fe25 	bl	800d568 <RCCEx_PLL3_Config>
 800c91e:	4603      	mov	r3, r0
 800c920:	2b00      	cmp	r3, #0
 800c922:	d002      	beq.n	800c92a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800c924:	2301      	movs	r3, #1
 800c926:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c92a:	4b70      	ldr	r3, [pc, #448]	; (800caec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c92c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c92e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c932:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c936:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c93a:	4a6c      	ldr	r2, [pc, #432]	; (800caec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c93c:	430b      	orrs	r3, r1
 800c93e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c940:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c948:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c94c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c950:	2300      	movs	r3, #0
 800c952:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c956:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c95a:	460b      	mov	r3, r1
 800c95c:	4313      	orrs	r3, r2
 800c95e:	d03e      	beq.n	800c9de <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c960:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c964:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c968:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c96c:	d022      	beq.n	800c9b4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800c96e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c972:	d81b      	bhi.n	800c9ac <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c974:	2b00      	cmp	r3, #0
 800c976:	d003      	beq.n	800c980 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800c978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c97c:	d00b      	beq.n	800c996 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800c97e:	e015      	b.n	800c9ac <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c980:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c984:	3308      	adds	r3, #8
 800c986:	2100      	movs	r1, #0
 800c988:	4618      	mov	r0, r3
 800c98a:	f000 fd3b 	bl	800d404 <RCCEx_PLL2_Config>
 800c98e:	4603      	mov	r3, r0
 800c990:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c994:	e00f      	b.n	800c9b6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c996:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c99a:	3328      	adds	r3, #40	; 0x28
 800c99c:	2102      	movs	r1, #2
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f000 fde2 	bl	800d568 <RCCEx_PLL3_Config>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c9aa:	e004      	b.n	800c9b6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c9b2:	e000      	b.n	800c9b6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800c9b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c9b6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d10b      	bne.n	800c9d6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c9be:	4b4b      	ldr	r3, [pc, #300]	; (800caec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c9c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9c2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c9c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c9ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c9ce:	4a47      	ldr	r2, [pc, #284]	; (800caec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c9d0:	430b      	orrs	r3, r1
 800c9d2:	6593      	str	r3, [r2, #88]	; 0x58
 800c9d4:	e003      	b.n	800c9de <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9d6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c9da:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c9de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c9ea:	67bb      	str	r3, [r7, #120]	; 0x78
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c9f0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c9f4:	460b      	mov	r3, r1
 800c9f6:	4313      	orrs	r3, r2
 800c9f8:	d03b      	beq.n	800ca72 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c9fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c9fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca02:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ca06:	d01f      	beq.n	800ca48 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800ca08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ca0c:	d818      	bhi.n	800ca40 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800ca0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca12:	d003      	beq.n	800ca1c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800ca14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ca18:	d007      	beq.n	800ca2a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800ca1a:	e011      	b.n	800ca40 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca1c:	4b33      	ldr	r3, [pc, #204]	; (800caec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ca1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca20:	4a32      	ldr	r2, [pc, #200]	; (800caec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ca22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ca26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ca28:	e00f      	b.n	800ca4a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ca2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ca2e:	3328      	adds	r3, #40	; 0x28
 800ca30:	2101      	movs	r1, #1
 800ca32:	4618      	mov	r0, r3
 800ca34:	f000 fd98 	bl	800d568 <RCCEx_PLL3_Config>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800ca3e:	e004      	b.n	800ca4a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ca40:	2301      	movs	r3, #1
 800ca42:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800ca46:	e000      	b.n	800ca4a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800ca48:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ca4a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d10b      	bne.n	800ca6a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ca52:	4b26      	ldr	r3, [pc, #152]	; (800caec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ca54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca56:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ca5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ca5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca62:	4a22      	ldr	r2, [pc, #136]	; (800caec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ca64:	430b      	orrs	r3, r1
 800ca66:	6553      	str	r3, [r2, #84]	; 0x54
 800ca68:	e003      	b.n	800ca72 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca6a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ca6e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ca72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ca76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca7a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800ca7e:	673b      	str	r3, [r7, #112]	; 0x70
 800ca80:	2300      	movs	r3, #0
 800ca82:	677b      	str	r3, [r7, #116]	; 0x74
 800ca84:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800ca88:	460b      	mov	r3, r1
 800ca8a:	4313      	orrs	r3, r2
 800ca8c:	d034      	beq.n	800caf8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ca8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ca92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d003      	beq.n	800caa0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800ca98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca9c:	d007      	beq.n	800caae <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800ca9e:	e011      	b.n	800cac4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800caa0:	4b12      	ldr	r3, [pc, #72]	; (800caec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800caa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caa4:	4a11      	ldr	r2, [pc, #68]	; (800caec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800caa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800caaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800caac:	e00e      	b.n	800cacc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800caae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cab2:	3308      	adds	r3, #8
 800cab4:	2102      	movs	r1, #2
 800cab6:	4618      	mov	r0, r3
 800cab8:	f000 fca4 	bl	800d404 <RCCEx_PLL2_Config>
 800cabc:	4603      	mov	r3, r0
 800cabe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800cac2:	e003      	b.n	800cacc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800cac4:	2301      	movs	r3, #1
 800cac6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800caca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cacc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d10d      	bne.n	800caf0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800cad4:	4b05      	ldr	r3, [pc, #20]	; (800caec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800cad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cad8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cadc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cae2:	4a02      	ldr	r2, [pc, #8]	; (800caec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800cae4:	430b      	orrs	r3, r1
 800cae6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cae8:	e006      	b.n	800caf8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800caea:	bf00      	nop
 800caec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800caf0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800caf4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800caf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb00:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800cb04:	66bb      	str	r3, [r7, #104]	; 0x68
 800cb06:	2300      	movs	r3, #0
 800cb08:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cb0a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800cb0e:	460b      	mov	r3, r1
 800cb10:	4313      	orrs	r3, r2
 800cb12:	d00c      	beq.n	800cb2e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800cb14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cb18:	3328      	adds	r3, #40	; 0x28
 800cb1a:	2102      	movs	r1, #2
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f000 fd23 	bl	800d568 <RCCEx_PLL3_Config>
 800cb22:	4603      	mov	r3, r0
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d002      	beq.n	800cb2e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800cb28:	2301      	movs	r3, #1
 800cb2a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800cb2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cb32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb36:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800cb3a:	663b      	str	r3, [r7, #96]	; 0x60
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	667b      	str	r3, [r7, #100]	; 0x64
 800cb40:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800cb44:	460b      	mov	r3, r1
 800cb46:	4313      	orrs	r3, r2
 800cb48:	d038      	beq.n	800cbbc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800cb4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cb4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cb56:	d018      	beq.n	800cb8a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800cb58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cb5c:	d811      	bhi.n	800cb82 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800cb5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb62:	d014      	beq.n	800cb8e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800cb64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb68:	d80b      	bhi.n	800cb82 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d011      	beq.n	800cb92 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800cb6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb72:	d106      	bne.n	800cb82 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cb74:	4bc3      	ldr	r3, [pc, #780]	; (800ce84 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cb76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb78:	4ac2      	ldr	r2, [pc, #776]	; (800ce84 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cb7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cb7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800cb80:	e008      	b.n	800cb94 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cb82:	2301      	movs	r3, #1
 800cb84:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800cb88:	e004      	b.n	800cb94 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800cb8a:	bf00      	nop
 800cb8c:	e002      	b.n	800cb94 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800cb8e:	bf00      	nop
 800cb90:	e000      	b.n	800cb94 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800cb92:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cb94:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d10b      	bne.n	800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cb9c:	4bb9      	ldr	r3, [pc, #740]	; (800ce84 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cb9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cba0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800cba4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cbac:	4ab5      	ldr	r2, [pc, #724]	; (800ce84 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cbae:	430b      	orrs	r3, r1
 800cbb0:	6553      	str	r3, [r2, #84]	; 0x54
 800cbb2:	e003      	b.n	800cbbc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cbb4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cbb8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800cbbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800cbc8:	65bb      	str	r3, [r7, #88]	; 0x58
 800cbca:	2300      	movs	r3, #0
 800cbcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cbce:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800cbd2:	460b      	mov	r3, r1
 800cbd4:	4313      	orrs	r3, r2
 800cbd6:	d009      	beq.n	800cbec <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800cbd8:	4baa      	ldr	r3, [pc, #680]	; (800ce84 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cbda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbdc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cbe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cbe4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cbe6:	4aa7      	ldr	r2, [pc, #668]	; (800ce84 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cbe8:	430b      	orrs	r3, r1
 800cbea:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800cbec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800cbf8:	653b      	str	r3, [r7, #80]	; 0x50
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	657b      	str	r3, [r7, #84]	; 0x54
 800cbfe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800cc02:	460b      	mov	r3, r1
 800cc04:	4313      	orrs	r3, r2
 800cc06:	d009      	beq.n	800cc1c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800cc08:	4b9e      	ldr	r3, [pc, #632]	; (800ce84 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cc0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc0c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800cc10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cc14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc16:	4a9b      	ldr	r2, [pc, #620]	; (800ce84 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cc18:	430b      	orrs	r3, r1
 800cc1a:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800cc1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc24:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800cc28:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc2e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800cc32:	460b      	mov	r3, r1
 800cc34:	4313      	orrs	r3, r2
 800cc36:	d009      	beq.n	800cc4c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800cc38:	4b92      	ldr	r3, [pc, #584]	; (800ce84 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cc3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc3c:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 800cc40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cc44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc46:	4a8f      	ldr	r2, [pc, #572]	; (800ce84 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cc48:	430b      	orrs	r3, r1
 800cc4a:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800cc4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cc50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc54:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800cc58:	643b      	str	r3, [r7, #64]	; 0x40
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	647b      	str	r3, [r7, #68]	; 0x44
 800cc5e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800cc62:	460b      	mov	r3, r1
 800cc64:	4313      	orrs	r3, r2
 800cc66:	d00e      	beq.n	800cc86 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cc68:	4b86      	ldr	r3, [pc, #536]	; (800ce84 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cc6a:	691b      	ldr	r3, [r3, #16]
 800cc6c:	4a85      	ldr	r2, [pc, #532]	; (800ce84 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cc6e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cc72:	6113      	str	r3, [r2, #16]
 800cc74:	4b83      	ldr	r3, [pc, #524]	; (800ce84 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cc76:	6919      	ldr	r1, [r3, #16]
 800cc78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cc7c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800cc80:	4a80      	ldr	r2, [pc, #512]	; (800ce84 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cc82:	430b      	orrs	r3, r1
 800cc84:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800cc86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cc8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc8e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800cc92:	63bb      	str	r3, [r7, #56]	; 0x38
 800cc94:	2300      	movs	r3, #0
 800cc96:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc98:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800cc9c:	460b      	mov	r3, r1
 800cc9e:	4313      	orrs	r3, r2
 800cca0:	d009      	beq.n	800ccb6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800cca2:	4b78      	ldr	r3, [pc, #480]	; (800ce84 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cca6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ccaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ccae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccb0:	4a74      	ldr	r2, [pc, #464]	; (800ce84 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ccb2:	430b      	orrs	r3, r1
 800ccb4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ccb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ccba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccbe:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800ccc2:	633b      	str	r3, [r7, #48]	; 0x30
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	637b      	str	r3, [r7, #52]	; 0x34
 800ccc8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800cccc:	460b      	mov	r3, r1
 800ccce:	4313      	orrs	r3, r2
 800ccd0:	d00a      	beq.n	800cce8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ccd2:	4b6c      	ldr	r3, [pc, #432]	; (800ce84 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ccd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccd6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800ccda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ccde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cce2:	4a68      	ldr	r2, [pc, #416]	; (800ce84 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cce4:	430b      	orrs	r3, r1
 800cce6:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800cce8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ccec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf0:	2100      	movs	r1, #0
 800ccf2:	62b9      	str	r1, [r7, #40]	; 0x28
 800ccf4:	f003 0301 	and.w	r3, r3, #1
 800ccf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ccfa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800ccfe:	460b      	mov	r3, r1
 800cd00:	4313      	orrs	r3, r2
 800cd02:	d011      	beq.n	800cd28 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cd04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cd08:	3308      	adds	r3, #8
 800cd0a:	2100      	movs	r1, #0
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f000 fb79 	bl	800d404 <RCCEx_PLL2_Config>
 800cd12:	4603      	mov	r3, r0
 800cd14:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800cd18:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d003      	beq.n	800cd28 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd20:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cd24:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800cd28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd30:	2100      	movs	r1, #0
 800cd32:	6239      	str	r1, [r7, #32]
 800cd34:	f003 0302 	and.w	r3, r3, #2
 800cd38:	627b      	str	r3, [r7, #36]	; 0x24
 800cd3a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800cd3e:	460b      	mov	r3, r1
 800cd40:	4313      	orrs	r3, r2
 800cd42:	d011      	beq.n	800cd68 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cd44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cd48:	3308      	adds	r3, #8
 800cd4a:	2101      	movs	r1, #1
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f000 fb59 	bl	800d404 <RCCEx_PLL2_Config>
 800cd52:	4603      	mov	r3, r0
 800cd54:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800cd58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d003      	beq.n	800cd68 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd60:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cd64:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800cd68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd70:	2100      	movs	r1, #0
 800cd72:	61b9      	str	r1, [r7, #24]
 800cd74:	f003 0304 	and.w	r3, r3, #4
 800cd78:	61fb      	str	r3, [r7, #28]
 800cd7a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800cd7e:	460b      	mov	r3, r1
 800cd80:	4313      	orrs	r3, r2
 800cd82:	d011      	beq.n	800cda8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cd84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cd88:	3308      	adds	r3, #8
 800cd8a:	2102      	movs	r1, #2
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f000 fb39 	bl	800d404 <RCCEx_PLL2_Config>
 800cd92:	4603      	mov	r3, r0
 800cd94:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800cd98:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d003      	beq.n	800cda8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cda0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cda4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800cda8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cdac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb0:	2100      	movs	r1, #0
 800cdb2:	6139      	str	r1, [r7, #16]
 800cdb4:	f003 0308 	and.w	r3, r3, #8
 800cdb8:	617b      	str	r3, [r7, #20]
 800cdba:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800cdbe:	460b      	mov	r3, r1
 800cdc0:	4313      	orrs	r3, r2
 800cdc2:	d011      	beq.n	800cde8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cdc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cdc8:	3328      	adds	r3, #40	; 0x28
 800cdca:	2100      	movs	r1, #0
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f000 fbcb 	bl	800d568 <RCCEx_PLL3_Config>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800cdd8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d003      	beq.n	800cde8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cde0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cde4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800cde8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cdec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdf0:	2100      	movs	r1, #0
 800cdf2:	60b9      	str	r1, [r7, #8]
 800cdf4:	f003 0310 	and.w	r3, r3, #16
 800cdf8:	60fb      	str	r3, [r7, #12]
 800cdfa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800cdfe:	460b      	mov	r3, r1
 800ce00:	4313      	orrs	r3, r2
 800ce02:	d011      	beq.n	800ce28 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ce04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ce08:	3328      	adds	r3, #40	; 0x28
 800ce0a:	2101      	movs	r1, #1
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	f000 fbab 	bl	800d568 <RCCEx_PLL3_Config>
 800ce12:	4603      	mov	r3, r0
 800ce14:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800ce18:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d003      	beq.n	800ce28 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce20:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ce24:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ce28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ce2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce30:	2100      	movs	r1, #0
 800ce32:	6039      	str	r1, [r7, #0]
 800ce34:	f003 0320 	and.w	r3, r3, #32
 800ce38:	607b      	str	r3, [r7, #4]
 800ce3a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ce3e:	460b      	mov	r3, r1
 800ce40:	4313      	orrs	r3, r2
 800ce42:	d011      	beq.n	800ce68 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ce44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ce48:	3328      	adds	r3, #40	; 0x28
 800ce4a:	2102      	movs	r1, #2
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f000 fb8b 	bl	800d568 <RCCEx_PLL3_Config>
 800ce52:	4603      	mov	r3, r0
 800ce54:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800ce58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d003      	beq.n	800ce68 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce60:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ce64:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 800ce68:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d101      	bne.n	800ce74 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800ce70:	2300      	movs	r3, #0
 800ce72:	e000      	b.n	800ce76 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800ce74:	2301      	movs	r3, #1
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ce82:	bf00      	nop
 800ce84:	58024400 	.word	0x58024400

0800ce88 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800ce8c:	f7fe fde2 	bl	800ba54 <HAL_RCC_GetHCLKFreq>
 800ce90:	4602      	mov	r2, r0
 800ce92:	4b06      	ldr	r3, [pc, #24]	; (800ceac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ce94:	6a1b      	ldr	r3, [r3, #32]
 800ce96:	091b      	lsrs	r3, r3, #4
 800ce98:	f003 0307 	and.w	r3, r3, #7
 800ce9c:	4904      	ldr	r1, [pc, #16]	; (800ceb0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ce9e:	5ccb      	ldrb	r3, [r1, r3]
 800cea0:	f003 031f 	and.w	r3, r3, #31
 800cea4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	bd80      	pop	{r7, pc}
 800ceac:	58024400 	.word	0x58024400
 800ceb0:	0801d2f8 	.word	0x0801d2f8

0800ceb4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ceb4:	b480      	push	{r7}
 800ceb6:	b089      	sub	sp, #36	; 0x24
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cebc:	4ba1      	ldr	r3, [pc, #644]	; (800d144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cec0:	f003 0303 	and.w	r3, r3, #3
 800cec4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800cec6:	4b9f      	ldr	r3, [pc, #636]	; (800d144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceca:	0b1b      	lsrs	r3, r3, #12
 800cecc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ced0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ced2:	4b9c      	ldr	r3, [pc, #624]	; (800d144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ced4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced6:	091b      	lsrs	r3, r3, #4
 800ced8:	f003 0301 	and.w	r3, r3, #1
 800cedc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800cede:	4b99      	ldr	r3, [pc, #612]	; (800d144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cee2:	08db      	lsrs	r3, r3, #3
 800cee4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cee8:	693a      	ldr	r2, [r7, #16]
 800ceea:	fb02 f303 	mul.w	r3, r2, r3
 800ceee:	ee07 3a90 	vmov	s15, r3
 800cef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cef6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	f000 8111 	beq.w	800d124 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800cf02:	69bb      	ldr	r3, [r7, #24]
 800cf04:	2b02      	cmp	r3, #2
 800cf06:	f000 8083 	beq.w	800d010 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800cf0a:	69bb      	ldr	r3, [r7, #24]
 800cf0c:	2b02      	cmp	r3, #2
 800cf0e:	f200 80a1 	bhi.w	800d054 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cf12:	69bb      	ldr	r3, [r7, #24]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d003      	beq.n	800cf20 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cf18:	69bb      	ldr	r3, [r7, #24]
 800cf1a:	2b01      	cmp	r3, #1
 800cf1c:	d056      	beq.n	800cfcc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cf1e:	e099      	b.n	800d054 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf20:	4b88      	ldr	r3, [pc, #544]	; (800d144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	f003 0320 	and.w	r3, r3, #32
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d02d      	beq.n	800cf88 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf2c:	4b85      	ldr	r3, [pc, #532]	; (800d144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	08db      	lsrs	r3, r3, #3
 800cf32:	f003 0303 	and.w	r3, r3, #3
 800cf36:	4a84      	ldr	r2, [pc, #528]	; (800d148 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cf38:	fa22 f303 	lsr.w	r3, r2, r3
 800cf3c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cf3e:	68bb      	ldr	r3, [r7, #8]
 800cf40:	ee07 3a90 	vmov	s15, r3
 800cf44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf48:	697b      	ldr	r3, [r7, #20]
 800cf4a:	ee07 3a90 	vmov	s15, r3
 800cf4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf56:	4b7b      	ldr	r3, [pc, #492]	; (800d144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf5e:	ee07 3a90 	vmov	s15, r3
 800cf62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf66:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf6a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d14c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cf6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf82:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cf86:	e087      	b.n	800d098 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	ee07 3a90 	vmov	s15, r3
 800cf8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf92:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d150 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800cf96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf9a:	4b6a      	ldr	r3, [pc, #424]	; (800d144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfa2:	ee07 3a90 	vmov	s15, r3
 800cfa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfaa:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfae:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d14c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cfb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cfca:	e065      	b.n	800d098 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	ee07 3a90 	vmov	s15, r3
 800cfd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfd6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d154 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cfda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfde:	4b59      	ldr	r3, [pc, #356]	; (800d144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cfe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfe6:	ee07 3a90 	vmov	s15, r3
 800cfea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfee:	ed97 6a03 	vldr	s12, [r7, #12]
 800cff2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d14c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cffe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d00a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d00e:	e043      	b.n	800d098 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d010:	697b      	ldr	r3, [r7, #20]
 800d012:	ee07 3a90 	vmov	s15, r3
 800d016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d01a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d158 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d01e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d022:	4b48      	ldr	r3, [pc, #288]	; (800d144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d02a:	ee07 3a90 	vmov	s15, r3
 800d02e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d032:	ed97 6a03 	vldr	s12, [r7, #12]
 800d036:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d14c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d03a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d03e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d042:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d04a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d04e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d052:	e021      	b.n	800d098 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d054:	697b      	ldr	r3, [r7, #20]
 800d056:	ee07 3a90 	vmov	s15, r3
 800d05a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d05e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d154 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d066:	4b37      	ldr	r3, [pc, #220]	; (800d144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d06a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d06e:	ee07 3a90 	vmov	s15, r3
 800d072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d076:	ed97 6a03 	vldr	s12, [r7, #12]
 800d07a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d14c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d07e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d08a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d08e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d092:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d096:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d098:	4b2a      	ldr	r3, [pc, #168]	; (800d144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d09a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d09c:	0a5b      	lsrs	r3, r3, #9
 800d09e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0a2:	ee07 3a90 	vmov	s15, r3
 800d0a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d0b2:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0be:	ee17 2a90 	vmov	r2, s15
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d0c6:	4b1f      	ldr	r3, [pc, #124]	; (800d144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ca:	0c1b      	lsrs	r3, r3, #16
 800d0cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0d0:	ee07 3a90 	vmov	s15, r3
 800d0d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d0e0:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0ec:	ee17 2a90 	vmov	r2, s15
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d0f4:	4b13      	ldr	r3, [pc, #76]	; (800d144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0f8:	0e1b      	lsrs	r3, r3, #24
 800d0fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0fe:	ee07 3a90 	vmov	s15, r3
 800d102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d106:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d10a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d10e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d112:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d116:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d11a:	ee17 2a90 	vmov	r2, s15
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d122:	e008      	b.n	800d136 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2200      	movs	r2, #0
 800d128:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2200      	movs	r2, #0
 800d12e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2200      	movs	r2, #0
 800d134:	609a      	str	r2, [r3, #8]
}
 800d136:	bf00      	nop
 800d138:	3724      	adds	r7, #36	; 0x24
 800d13a:	46bd      	mov	sp, r7
 800d13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d140:	4770      	bx	lr
 800d142:	bf00      	nop
 800d144:	58024400 	.word	0x58024400
 800d148:	03d09000 	.word	0x03d09000
 800d14c:	46000000 	.word	0x46000000
 800d150:	4c742400 	.word	0x4c742400
 800d154:	4a742400 	.word	0x4a742400
 800d158:	4bb71b00 	.word	0x4bb71b00

0800d15c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d15c:	b480      	push	{r7}
 800d15e:	b089      	sub	sp, #36	; 0x24
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d164:	4ba1      	ldr	r3, [pc, #644]	; (800d3ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d168:	f003 0303 	and.w	r3, r3, #3
 800d16c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d16e:	4b9f      	ldr	r3, [pc, #636]	; (800d3ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d172:	0d1b      	lsrs	r3, r3, #20
 800d174:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d178:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d17a:	4b9c      	ldr	r3, [pc, #624]	; (800d3ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d17c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d17e:	0a1b      	lsrs	r3, r3, #8
 800d180:	f003 0301 	and.w	r3, r3, #1
 800d184:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d186:	4b99      	ldr	r3, [pc, #612]	; (800d3ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d18a:	08db      	lsrs	r3, r3, #3
 800d18c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d190:	693a      	ldr	r2, [r7, #16]
 800d192:	fb02 f303 	mul.w	r3, r2, r3
 800d196:	ee07 3a90 	vmov	s15, r3
 800d19a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d19e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	f000 8111 	beq.w	800d3cc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d1aa:	69bb      	ldr	r3, [r7, #24]
 800d1ac:	2b02      	cmp	r3, #2
 800d1ae:	f000 8083 	beq.w	800d2b8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d1b2:	69bb      	ldr	r3, [r7, #24]
 800d1b4:	2b02      	cmp	r3, #2
 800d1b6:	f200 80a1 	bhi.w	800d2fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d1ba:	69bb      	ldr	r3, [r7, #24]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d003      	beq.n	800d1c8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d1c0:	69bb      	ldr	r3, [r7, #24]
 800d1c2:	2b01      	cmp	r3, #1
 800d1c4:	d056      	beq.n	800d274 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d1c6:	e099      	b.n	800d2fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d1c8:	4b88      	ldr	r3, [pc, #544]	; (800d3ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	f003 0320 	and.w	r3, r3, #32
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d02d      	beq.n	800d230 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d1d4:	4b85      	ldr	r3, [pc, #532]	; (800d3ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	08db      	lsrs	r3, r3, #3
 800d1da:	f003 0303 	and.w	r3, r3, #3
 800d1de:	4a84      	ldr	r2, [pc, #528]	; (800d3f0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d1e0:	fa22 f303 	lsr.w	r3, r2, r3
 800d1e4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d1e6:	68bb      	ldr	r3, [r7, #8]
 800d1e8:	ee07 3a90 	vmov	s15, r3
 800d1ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	ee07 3a90 	vmov	s15, r3
 800d1f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1fe:	4b7b      	ldr	r3, [pc, #492]	; (800d3ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d206:	ee07 3a90 	vmov	s15, r3
 800d20a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d20e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d212:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d3f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d21a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d21e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d22a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d22e:	e087      	b.n	800d340 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d230:	697b      	ldr	r3, [r7, #20]
 800d232:	ee07 3a90 	vmov	s15, r3
 800d236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d23a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d3f8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d23e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d242:	4b6a      	ldr	r3, [pc, #424]	; (800d3ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d24a:	ee07 3a90 	vmov	s15, r3
 800d24e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d252:	ed97 6a03 	vldr	s12, [r7, #12]
 800d256:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d3f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d25a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d25e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d262:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d26a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d26e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d272:	e065      	b.n	800d340 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	ee07 3a90 	vmov	s15, r3
 800d27a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d27e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d3fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d286:	4b59      	ldr	r3, [pc, #356]	; (800d3ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d28a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d28e:	ee07 3a90 	vmov	s15, r3
 800d292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d296:	ed97 6a03 	vldr	s12, [r7, #12]
 800d29a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d3f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d29e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d2b6:	e043      	b.n	800d340 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d2b8:	697b      	ldr	r3, [r7, #20]
 800d2ba:	ee07 3a90 	vmov	s15, r3
 800d2be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2c2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d400 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d2c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2ca:	4b48      	ldr	r3, [pc, #288]	; (800d3ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2d2:	ee07 3a90 	vmov	s15, r3
 800d2d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2da:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2de:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d3f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d2e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d2fa:	e021      	b.n	800d340 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d2fc:	697b      	ldr	r3, [r7, #20]
 800d2fe:	ee07 3a90 	vmov	s15, r3
 800d302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d306:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d3fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d30a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d30e:	4b37      	ldr	r3, [pc, #220]	; (800d3ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d316:	ee07 3a90 	vmov	s15, r3
 800d31a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d31e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d322:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d3f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d32a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d32e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d33a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d33e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d340:	4b2a      	ldr	r3, [pc, #168]	; (800d3ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d344:	0a5b      	lsrs	r3, r3, #9
 800d346:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d34a:	ee07 3a90 	vmov	s15, r3
 800d34e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d352:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d356:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d35a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d35e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d362:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d366:	ee17 2a90 	vmov	r2, s15
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d36e:	4b1f      	ldr	r3, [pc, #124]	; (800d3ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d372:	0c1b      	lsrs	r3, r3, #16
 800d374:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d378:	ee07 3a90 	vmov	s15, r3
 800d37c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d380:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d384:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d388:	edd7 6a07 	vldr	s13, [r7, #28]
 800d38c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d390:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d394:	ee17 2a90 	vmov	r2, s15
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d39c:	4b13      	ldr	r3, [pc, #76]	; (800d3ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d39e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3a0:	0e1b      	lsrs	r3, r3, #24
 800d3a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3a6:	ee07 3a90 	vmov	s15, r3
 800d3aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d3b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d3b6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d3ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3c2:	ee17 2a90 	vmov	r2, s15
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d3ca:	e008      	b.n	800d3de <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	609a      	str	r2, [r3, #8]
}
 800d3de:	bf00      	nop
 800d3e0:	3724      	adds	r7, #36	; 0x24
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e8:	4770      	bx	lr
 800d3ea:	bf00      	nop
 800d3ec:	58024400 	.word	0x58024400
 800d3f0:	03d09000 	.word	0x03d09000
 800d3f4:	46000000 	.word	0x46000000
 800d3f8:	4c742400 	.word	0x4c742400
 800d3fc:	4a742400 	.word	0x4a742400
 800d400:	4bb71b00 	.word	0x4bb71b00

0800d404 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b084      	sub	sp, #16
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d40e:	2300      	movs	r3, #0
 800d410:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d412:	4b53      	ldr	r3, [pc, #332]	; (800d560 <RCCEx_PLL2_Config+0x15c>)
 800d414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d416:	f003 0303 	and.w	r3, r3, #3
 800d41a:	2b03      	cmp	r3, #3
 800d41c:	d101      	bne.n	800d422 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d41e:	2301      	movs	r3, #1
 800d420:	e099      	b.n	800d556 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d422:	4b4f      	ldr	r3, [pc, #316]	; (800d560 <RCCEx_PLL2_Config+0x15c>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	4a4e      	ldr	r2, [pc, #312]	; (800d560 <RCCEx_PLL2_Config+0x15c>)
 800d428:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d42c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d42e:	f7f7 f9ab 	bl	8004788 <HAL_GetTick>
 800d432:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d434:	e008      	b.n	800d448 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d436:	f7f7 f9a7 	bl	8004788 <HAL_GetTick>
 800d43a:	4602      	mov	r2, r0
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	1ad3      	subs	r3, r2, r3
 800d440:	2b02      	cmp	r3, #2
 800d442:	d901      	bls.n	800d448 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d444:	2303      	movs	r3, #3
 800d446:	e086      	b.n	800d556 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d448:	4b45      	ldr	r3, [pc, #276]	; (800d560 <RCCEx_PLL2_Config+0x15c>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d450:	2b00      	cmp	r3, #0
 800d452:	d1f0      	bne.n	800d436 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d454:	4b42      	ldr	r3, [pc, #264]	; (800d560 <RCCEx_PLL2_Config+0x15c>)
 800d456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d458:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	031b      	lsls	r3, r3, #12
 800d462:	493f      	ldr	r1, [pc, #252]	; (800d560 <RCCEx_PLL2_Config+0x15c>)
 800d464:	4313      	orrs	r3, r2
 800d466:	628b      	str	r3, [r1, #40]	; 0x28
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	685b      	ldr	r3, [r3, #4]
 800d46c:	3b01      	subs	r3, #1
 800d46e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	689b      	ldr	r3, [r3, #8]
 800d476:	3b01      	subs	r3, #1
 800d478:	025b      	lsls	r3, r3, #9
 800d47a:	b29b      	uxth	r3, r3
 800d47c:	431a      	orrs	r2, r3
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	68db      	ldr	r3, [r3, #12]
 800d482:	3b01      	subs	r3, #1
 800d484:	041b      	lsls	r3, r3, #16
 800d486:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d48a:	431a      	orrs	r2, r3
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	691b      	ldr	r3, [r3, #16]
 800d490:	3b01      	subs	r3, #1
 800d492:	061b      	lsls	r3, r3, #24
 800d494:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d498:	4931      	ldr	r1, [pc, #196]	; (800d560 <RCCEx_PLL2_Config+0x15c>)
 800d49a:	4313      	orrs	r3, r2
 800d49c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d49e:	4b30      	ldr	r3, [pc, #192]	; (800d560 <RCCEx_PLL2_Config+0x15c>)
 800d4a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	695b      	ldr	r3, [r3, #20]
 800d4aa:	492d      	ldr	r1, [pc, #180]	; (800d560 <RCCEx_PLL2_Config+0x15c>)
 800d4ac:	4313      	orrs	r3, r2
 800d4ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d4b0:	4b2b      	ldr	r3, [pc, #172]	; (800d560 <RCCEx_PLL2_Config+0x15c>)
 800d4b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4b4:	f023 0220 	bic.w	r2, r3, #32
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	699b      	ldr	r3, [r3, #24]
 800d4bc:	4928      	ldr	r1, [pc, #160]	; (800d560 <RCCEx_PLL2_Config+0x15c>)
 800d4be:	4313      	orrs	r3, r2
 800d4c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d4c2:	4b27      	ldr	r3, [pc, #156]	; (800d560 <RCCEx_PLL2_Config+0x15c>)
 800d4c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4c6:	4a26      	ldr	r2, [pc, #152]	; (800d560 <RCCEx_PLL2_Config+0x15c>)
 800d4c8:	f023 0310 	bic.w	r3, r3, #16
 800d4cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d4ce:	4b24      	ldr	r3, [pc, #144]	; (800d560 <RCCEx_PLL2_Config+0x15c>)
 800d4d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d4d2:	4b24      	ldr	r3, [pc, #144]	; (800d564 <RCCEx_PLL2_Config+0x160>)
 800d4d4:	4013      	ands	r3, r2
 800d4d6:	687a      	ldr	r2, [r7, #4]
 800d4d8:	69d2      	ldr	r2, [r2, #28]
 800d4da:	00d2      	lsls	r2, r2, #3
 800d4dc:	4920      	ldr	r1, [pc, #128]	; (800d560 <RCCEx_PLL2_Config+0x15c>)
 800d4de:	4313      	orrs	r3, r2
 800d4e0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d4e2:	4b1f      	ldr	r3, [pc, #124]	; (800d560 <RCCEx_PLL2_Config+0x15c>)
 800d4e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4e6:	4a1e      	ldr	r2, [pc, #120]	; (800d560 <RCCEx_PLL2_Config+0x15c>)
 800d4e8:	f043 0310 	orr.w	r3, r3, #16
 800d4ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d106      	bne.n	800d502 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d4f4:	4b1a      	ldr	r3, [pc, #104]	; (800d560 <RCCEx_PLL2_Config+0x15c>)
 800d4f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4f8:	4a19      	ldr	r2, [pc, #100]	; (800d560 <RCCEx_PLL2_Config+0x15c>)
 800d4fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d4fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d500:	e00f      	b.n	800d522 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	2b01      	cmp	r3, #1
 800d506:	d106      	bne.n	800d516 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d508:	4b15      	ldr	r3, [pc, #84]	; (800d560 <RCCEx_PLL2_Config+0x15c>)
 800d50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d50c:	4a14      	ldr	r2, [pc, #80]	; (800d560 <RCCEx_PLL2_Config+0x15c>)
 800d50e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d512:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d514:	e005      	b.n	800d522 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d516:	4b12      	ldr	r3, [pc, #72]	; (800d560 <RCCEx_PLL2_Config+0x15c>)
 800d518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d51a:	4a11      	ldr	r2, [pc, #68]	; (800d560 <RCCEx_PLL2_Config+0x15c>)
 800d51c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d520:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d522:	4b0f      	ldr	r3, [pc, #60]	; (800d560 <RCCEx_PLL2_Config+0x15c>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	4a0e      	ldr	r2, [pc, #56]	; (800d560 <RCCEx_PLL2_Config+0x15c>)
 800d528:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d52c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d52e:	f7f7 f92b 	bl	8004788 <HAL_GetTick>
 800d532:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d534:	e008      	b.n	800d548 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d536:	f7f7 f927 	bl	8004788 <HAL_GetTick>
 800d53a:	4602      	mov	r2, r0
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	1ad3      	subs	r3, r2, r3
 800d540:	2b02      	cmp	r3, #2
 800d542:	d901      	bls.n	800d548 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d544:	2303      	movs	r3, #3
 800d546:	e006      	b.n	800d556 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d548:	4b05      	ldr	r3, [pc, #20]	; (800d560 <RCCEx_PLL2_Config+0x15c>)
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d550:	2b00      	cmp	r3, #0
 800d552:	d0f0      	beq.n	800d536 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d554:	7bfb      	ldrb	r3, [r7, #15]
}
 800d556:	4618      	mov	r0, r3
 800d558:	3710      	adds	r7, #16
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}
 800d55e:	bf00      	nop
 800d560:	58024400 	.word	0x58024400
 800d564:	ffff0007 	.word	0xffff0007

0800d568 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b084      	sub	sp, #16
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
 800d570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d572:	2300      	movs	r3, #0
 800d574:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d576:	4b53      	ldr	r3, [pc, #332]	; (800d6c4 <RCCEx_PLL3_Config+0x15c>)
 800d578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d57a:	f003 0303 	and.w	r3, r3, #3
 800d57e:	2b03      	cmp	r3, #3
 800d580:	d101      	bne.n	800d586 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d582:	2301      	movs	r3, #1
 800d584:	e099      	b.n	800d6ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d586:	4b4f      	ldr	r3, [pc, #316]	; (800d6c4 <RCCEx_PLL3_Config+0x15c>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	4a4e      	ldr	r2, [pc, #312]	; (800d6c4 <RCCEx_PLL3_Config+0x15c>)
 800d58c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d590:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d592:	f7f7 f8f9 	bl	8004788 <HAL_GetTick>
 800d596:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d598:	e008      	b.n	800d5ac <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d59a:	f7f7 f8f5 	bl	8004788 <HAL_GetTick>
 800d59e:	4602      	mov	r2, r0
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	1ad3      	subs	r3, r2, r3
 800d5a4:	2b02      	cmp	r3, #2
 800d5a6:	d901      	bls.n	800d5ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d5a8:	2303      	movs	r3, #3
 800d5aa:	e086      	b.n	800d6ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d5ac:	4b45      	ldr	r3, [pc, #276]	; (800d6c4 <RCCEx_PLL3_Config+0x15c>)
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d1f0      	bne.n	800d59a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d5b8:	4b42      	ldr	r3, [pc, #264]	; (800d6c4 <RCCEx_PLL3_Config+0x15c>)
 800d5ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5bc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	051b      	lsls	r3, r3, #20
 800d5c6:	493f      	ldr	r1, [pc, #252]	; (800d6c4 <RCCEx_PLL3_Config+0x15c>)
 800d5c8:	4313      	orrs	r3, r2
 800d5ca:	628b      	str	r3, [r1, #40]	; 0x28
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	685b      	ldr	r3, [r3, #4]
 800d5d0:	3b01      	subs	r3, #1
 800d5d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	689b      	ldr	r3, [r3, #8]
 800d5da:	3b01      	subs	r3, #1
 800d5dc:	025b      	lsls	r3, r3, #9
 800d5de:	b29b      	uxth	r3, r3
 800d5e0:	431a      	orrs	r2, r3
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	68db      	ldr	r3, [r3, #12]
 800d5e6:	3b01      	subs	r3, #1
 800d5e8:	041b      	lsls	r3, r3, #16
 800d5ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d5ee:	431a      	orrs	r2, r3
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	691b      	ldr	r3, [r3, #16]
 800d5f4:	3b01      	subs	r3, #1
 800d5f6:	061b      	lsls	r3, r3, #24
 800d5f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d5fc:	4931      	ldr	r1, [pc, #196]	; (800d6c4 <RCCEx_PLL3_Config+0x15c>)
 800d5fe:	4313      	orrs	r3, r2
 800d600:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d602:	4b30      	ldr	r3, [pc, #192]	; (800d6c4 <RCCEx_PLL3_Config+0x15c>)
 800d604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d606:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	695b      	ldr	r3, [r3, #20]
 800d60e:	492d      	ldr	r1, [pc, #180]	; (800d6c4 <RCCEx_PLL3_Config+0x15c>)
 800d610:	4313      	orrs	r3, r2
 800d612:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d614:	4b2b      	ldr	r3, [pc, #172]	; (800d6c4 <RCCEx_PLL3_Config+0x15c>)
 800d616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d618:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	699b      	ldr	r3, [r3, #24]
 800d620:	4928      	ldr	r1, [pc, #160]	; (800d6c4 <RCCEx_PLL3_Config+0x15c>)
 800d622:	4313      	orrs	r3, r2
 800d624:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d626:	4b27      	ldr	r3, [pc, #156]	; (800d6c4 <RCCEx_PLL3_Config+0x15c>)
 800d628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d62a:	4a26      	ldr	r2, [pc, #152]	; (800d6c4 <RCCEx_PLL3_Config+0x15c>)
 800d62c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d630:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d632:	4b24      	ldr	r3, [pc, #144]	; (800d6c4 <RCCEx_PLL3_Config+0x15c>)
 800d634:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d636:	4b24      	ldr	r3, [pc, #144]	; (800d6c8 <RCCEx_PLL3_Config+0x160>)
 800d638:	4013      	ands	r3, r2
 800d63a:	687a      	ldr	r2, [r7, #4]
 800d63c:	69d2      	ldr	r2, [r2, #28]
 800d63e:	00d2      	lsls	r2, r2, #3
 800d640:	4920      	ldr	r1, [pc, #128]	; (800d6c4 <RCCEx_PLL3_Config+0x15c>)
 800d642:	4313      	orrs	r3, r2
 800d644:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d646:	4b1f      	ldr	r3, [pc, #124]	; (800d6c4 <RCCEx_PLL3_Config+0x15c>)
 800d648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d64a:	4a1e      	ldr	r2, [pc, #120]	; (800d6c4 <RCCEx_PLL3_Config+0x15c>)
 800d64c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d650:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d106      	bne.n	800d666 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d658:	4b1a      	ldr	r3, [pc, #104]	; (800d6c4 <RCCEx_PLL3_Config+0x15c>)
 800d65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d65c:	4a19      	ldr	r2, [pc, #100]	; (800d6c4 <RCCEx_PLL3_Config+0x15c>)
 800d65e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d662:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d664:	e00f      	b.n	800d686 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	2b01      	cmp	r3, #1
 800d66a:	d106      	bne.n	800d67a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d66c:	4b15      	ldr	r3, [pc, #84]	; (800d6c4 <RCCEx_PLL3_Config+0x15c>)
 800d66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d670:	4a14      	ldr	r2, [pc, #80]	; (800d6c4 <RCCEx_PLL3_Config+0x15c>)
 800d672:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d676:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d678:	e005      	b.n	800d686 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d67a:	4b12      	ldr	r3, [pc, #72]	; (800d6c4 <RCCEx_PLL3_Config+0x15c>)
 800d67c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d67e:	4a11      	ldr	r2, [pc, #68]	; (800d6c4 <RCCEx_PLL3_Config+0x15c>)
 800d680:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d684:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d686:	4b0f      	ldr	r3, [pc, #60]	; (800d6c4 <RCCEx_PLL3_Config+0x15c>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	4a0e      	ldr	r2, [pc, #56]	; (800d6c4 <RCCEx_PLL3_Config+0x15c>)
 800d68c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d690:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d692:	f7f7 f879 	bl	8004788 <HAL_GetTick>
 800d696:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d698:	e008      	b.n	800d6ac <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d69a:	f7f7 f875 	bl	8004788 <HAL_GetTick>
 800d69e:	4602      	mov	r2, r0
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	1ad3      	subs	r3, r2, r3
 800d6a4:	2b02      	cmp	r3, #2
 800d6a6:	d901      	bls.n	800d6ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d6a8:	2303      	movs	r3, #3
 800d6aa:	e006      	b.n	800d6ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d6ac:	4b05      	ldr	r3, [pc, #20]	; (800d6c4 <RCCEx_PLL3_Config+0x15c>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d0f0      	beq.n	800d69a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d6b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	3710      	adds	r7, #16
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	bd80      	pop	{r7, pc}
 800d6c2:	bf00      	nop
 800d6c4:	58024400 	.word	0x58024400
 800d6c8:	ffff0007 	.word	0xffff0007

0800d6cc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b084      	sub	sp, #16
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d6d4:	2301      	movs	r3, #1
 800d6d6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d074      	beq.n	800d7c8 <HAL_RTC_Init+0xfc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800d6e4:	b2db      	uxtb	r3, r3
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d106      	bne.n	800d6f8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f7f5 ff50 	bl	8003598 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2202      	movs	r2, #2
 800d6fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	68db      	ldr	r3, [r3, #12]
 800d706:	f003 0310 	and.w	r3, r3, #16
 800d70a:	2b10      	cmp	r3, #16
 800d70c:	d053      	beq.n	800d7b6 <HAL_RTC_Init+0xea>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	22ca      	movs	r2, #202	; 0xca
 800d714:	625a      	str	r2, [r3, #36]	; 0x24
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	2253      	movs	r2, #83	; 0x53
 800d71c:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	f000 f87e 	bl	800d820 <RTC_EnterInitMode>
 800d724:	4603      	mov	r3, r0
 800d726:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d728:	7bfb      	ldrb	r3, [r7, #15]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d124      	bne.n	800d778 <HAL_RTC_Init+0xac>
      {
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	6999      	ldr	r1, [r3, #24]
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681a      	ldr	r2, [r3, #0]
 800d738:	4b26      	ldr	r3, [pc, #152]	; (800d7d4 <HAL_RTC_Init+0x108>)
 800d73a:	400b      	ands	r3, r1
 800d73c:	6193      	str	r3, [r2, #24]
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	6999      	ldr	r1, [r3, #24]
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	685a      	ldr	r2, [r3, #4]
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	691b      	ldr	r3, [r3, #16]
 800d74c:	431a      	orrs	r2, r3
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	699b      	ldr	r3, [r3, #24]
 800d752:	431a      	orrs	r2, r3
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	430a      	orrs	r2, r1
 800d75a:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	689b      	ldr	r3, [r3, #8]
 800d760:	0419      	lsls	r1, r3, #16
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	68da      	ldr	r2, [r3, #12]
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	430a      	orrs	r2, r1
 800d76c:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f000 f88c 	bl	800d88c <RTC_ExitInitMode>
 800d774:	4603      	mov	r3, r0
 800d776:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800d778:	7bfb      	ldrb	r3, [r7, #15]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d116      	bne.n	800d7ac <HAL_RTC_Init+0xe0>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	699a      	ldr	r2, [r3, #24]
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800d78c:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	6999      	ldr	r1, [r3, #24]
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	6a1a      	ldr	r2, [r3, #32]
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	69db      	ldr	r3, [r3, #28]
 800d79c:	431a      	orrs	r2, r3
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	695b      	ldr	r3, [r3, #20]
 800d7a2:	431a      	orrs	r2, r3
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	430a      	orrs	r2, r1
 800d7aa:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	22ff      	movs	r2, #255	; 0xff
 800d7b2:	625a      	str	r2, [r3, #36]	; 0x24
 800d7b4:	e001      	b.n	800d7ba <HAL_RTC_Init+0xee>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d7ba:	7bfb      	ldrb	r3, [r7, #15]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d103      	bne.n	800d7c8 <HAL_RTC_Init+0xfc>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	2201      	movs	r2, #1
 800d7c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  /* return status */
  return status;
 800d7c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	3710      	adds	r7, #16
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}
 800d7d2:	bf00      	nop
 800d7d4:	fb8fffbf 	.word	0xfb8fffbf

0800d7d8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b084      	sub	sp, #16
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	4a0d      	ldr	r2, [pc, #52]	; (800d81c <HAL_RTC_WaitForSynchro+0x44>)
 800d7e6:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800d7e8:	f7f6 ffce 	bl	8004788 <HAL_GetTick>
 800d7ec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800d7ee:	e009      	b.n	800d804 <HAL_RTC_WaitForSynchro+0x2c>
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d7f0:	f7f6 ffca 	bl	8004788 <HAL_GetTick>
 800d7f4:	4602      	mov	r2, r0
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	1ad3      	subs	r3, r2, r3
 800d7fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d7fe:	d901      	bls.n	800d804 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800d800:	2303      	movs	r3, #3
 800d802:	e007      	b.n	800d814 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	68db      	ldr	r3, [r3, #12]
 800d80a:	f003 0320 	and.w	r3, r3, #32
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d0ee      	beq.n	800d7f0 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800d812:	2300      	movs	r3, #0
}
 800d814:	4618      	mov	r0, r3
 800d816:	3710      	adds	r7, #16
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}
 800d81c:	0001005f 	.word	0x0001005f

0800d820 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b084      	sub	sp, #16
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d828:	2300      	movs	r3, #0
 800d82a:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(TAMP)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	68db      	ldr	r3, [r3, #12]
 800d832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d836:	2b00      	cmp	r3, #0
 800d838:	d123      	bne.n	800d882 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	68da      	ldr	r2, [r3, #12]
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d848:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d84a:	f7f6 ff9d 	bl	8004788 <HAL_GetTick>
 800d84e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d850:	e00d      	b.n	800d86e <RTC_EnterInitMode+0x4e>

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d852:	f7f6 ff99 	bl	8004788 <HAL_GetTick>
 800d856:	4602      	mov	r2, r0
 800d858:	68bb      	ldr	r3, [r7, #8]
 800d85a:	1ad3      	subs	r3, r2, r3
 800d85c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d860:	d905      	bls.n	800d86e <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800d862:	2303      	movs	r3, #3
 800d864:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2203      	movs	r2, #3
 800d86a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	68db      	ldr	r3, [r3, #12]
 800d874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d102      	bne.n	800d882 <RTC_EnterInitMode+0x62>
 800d87c:	7bfb      	ldrb	r3, [r7, #15]
 800d87e:	2b03      	cmp	r3, #3
 800d880:	d1e7      	bne.n	800d852 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 800d882:	7bfb      	ldrb	r3, [r7, #15]
}
 800d884:	4618      	mov	r0, r3
 800d886:	3710      	adds	r7, #16
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}

0800d88c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b084      	sub	sp, #16
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d894:	2300      	movs	r3, #0
 800d896:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800d898:	4b1a      	ldr	r3, [pc, #104]	; (800d904 <RTC_ExitInitMode+0x78>)
 800d89a:	68db      	ldr	r3, [r3, #12]
 800d89c:	4a19      	ldr	r2, [pc, #100]	; (800d904 <RTC_ExitInitMode+0x78>)
 800d89e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d8a2:	60d3      	str	r3, [r2, #12]
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800d8a4:	4b17      	ldr	r3, [pc, #92]	; (800d904 <RTC_ExitInitMode+0x78>)
 800d8a6:	699b      	ldr	r3, [r3, #24]
 800d8a8:	f003 0320 	and.w	r3, r3, #32
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d10c      	bne.n	800d8ca <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d8b0:	6878      	ldr	r0, [r7, #4]
 800d8b2:	f7ff ff91 	bl	800d7d8 <HAL_RTC_WaitForSynchro>
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d01e      	beq.n	800d8fa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2203      	movs	r2, #3
 800d8c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800d8c4:	2303      	movs	r3, #3
 800d8c6:	73fb      	strb	r3, [r7, #15]
 800d8c8:	e017      	b.n	800d8fa <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d8ca:	4b0e      	ldr	r3, [pc, #56]	; (800d904 <RTC_ExitInitMode+0x78>)
 800d8cc:	699b      	ldr	r3, [r3, #24]
 800d8ce:	4a0d      	ldr	r2, [pc, #52]	; (800d904 <RTC_ExitInitMode+0x78>)
 800d8d0:	f023 0320 	bic.w	r3, r3, #32
 800d8d4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d8d6:	6878      	ldr	r0, [r7, #4]
 800d8d8:	f7ff ff7e 	bl	800d7d8 <HAL_RTC_WaitForSynchro>
 800d8dc:	4603      	mov	r3, r0
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d005      	beq.n	800d8ee <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	2203      	movs	r2, #3
 800d8e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800d8ea:	2303      	movs	r3, #3
 800d8ec:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d8ee:	4b05      	ldr	r3, [pc, #20]	; (800d904 <RTC_ExitInitMode+0x78>)
 800d8f0:	699b      	ldr	r3, [r3, #24]
 800d8f2:	4a04      	ldr	r2, [pc, #16]	; (800d904 <RTC_ExitInitMode+0x78>)
 800d8f4:	f043 0320 	orr.w	r3, r3, #32
 800d8f8:	6193      	str	r3, [r2, #24]
  }

  return status;
 800d8fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	3710      	adds	r7, #16
 800d900:	46bd      	mov	sp, r7
 800d902:	bd80      	pop	{r7, pc}
 800d904:	58004000 	.word	0x58004000

0800d908 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b082      	sub	sp, #8
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
 800d910:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d101      	bne.n	800d91c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800d918:	2301      	movs	r3, #1
 800d91a:	e02b      	b.n	800d974 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d922:	b2db      	uxtb	r3, r3
 800d924:	2b00      	cmp	r3, #0
 800d926:	d106      	bne.n	800d936 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2200      	movs	r2, #0
 800d92c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800d930:	6878      	ldr	r0, [r7, #4]
 800d932:	f7f3 fb09 	bl	8000f48 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2202      	movs	r2, #2
 800d93a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681a      	ldr	r2, [r3, #0]
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	3304      	adds	r3, #4
 800d946:	4619      	mov	r1, r3
 800d948:	4610      	mov	r0, r2
 800d94a:	f001 ffdf 	bl	800f90c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	6818      	ldr	r0, [r3, #0]
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	685b      	ldr	r3, [r3, #4]
 800d956:	461a      	mov	r2, r3
 800d958:	6839      	ldr	r1, [r7, #0]
 800d95a:	f002 f833 	bl	800f9c4 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800d95e:	4b07      	ldr	r3, [pc, #28]	; (800d97c <HAL_SDRAM_Init+0x74>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	4a06      	ldr	r2, [pc, #24]	; (800d97c <HAL_SDRAM_Init+0x74>)
 800d964:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d968:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2201      	movs	r2, #1
 800d96e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d972:	2300      	movs	r3, #0
}
 800d974:	4618      	mov	r0, r3
 800d976:	3708      	adds	r7, #8
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}
 800d97c:	52004000 	.word	0x52004000

0800d980 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b086      	sub	sp, #24
 800d984:	af00      	add	r7, sp, #0
 800d986:	60f8      	str	r0, [r7, #12]
 800d988:	60b9      	str	r1, [r7, #8]
 800d98a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d992:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800d994:	7dfb      	ldrb	r3, [r7, #23]
 800d996:	2b02      	cmp	r3, #2
 800d998:	d101      	bne.n	800d99e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800d99a:	2302      	movs	r3, #2
 800d99c:	e021      	b.n	800d9e2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800d99e:	7dfb      	ldrb	r3, [r7, #23]
 800d9a0:	2b01      	cmp	r3, #1
 800d9a2:	d002      	beq.n	800d9aa <HAL_SDRAM_SendCommand+0x2a>
 800d9a4:	7dfb      	ldrb	r3, [r7, #23]
 800d9a6:	2b05      	cmp	r3, #5
 800d9a8:	d118      	bne.n	800d9dc <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	2202      	movs	r2, #2
 800d9ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	687a      	ldr	r2, [r7, #4]
 800d9b8:	68b9      	ldr	r1, [r7, #8]
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f002 f86c 	bl	800fa98 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	2b02      	cmp	r3, #2
 800d9c6:	d104      	bne.n	800d9d2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	2205      	movs	r2, #5
 800d9cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d9d0:	e006      	b.n	800d9e0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	2201      	movs	r2, #1
 800d9d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d9da:	e001      	b.n	800d9e0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800d9dc:	2301      	movs	r3, #1
 800d9de:	e000      	b.n	800d9e2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800d9e0:	2300      	movs	r3, #0
}
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	3718      	adds	r7, #24
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd80      	pop	{r7, pc}

0800d9ea <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800d9ea:	b580      	push	{r7, lr}
 800d9ec:	b082      	sub	sp, #8
 800d9ee:	af00      	add	r7, sp, #0
 800d9f0:	6078      	str	r0, [r7, #4]
 800d9f2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d9fa:	b2db      	uxtb	r3, r3
 800d9fc:	2b02      	cmp	r3, #2
 800d9fe:	d101      	bne.n	800da04 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800da00:	2302      	movs	r3, #2
 800da02:	e016      	b.n	800da32 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800da0a:	b2db      	uxtb	r3, r3
 800da0c:	2b01      	cmp	r3, #1
 800da0e:	d10f      	bne.n	800da30 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2202      	movs	r2, #2
 800da14:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	6839      	ldr	r1, [r7, #0]
 800da1e:	4618      	mov	r0, r3
 800da20:	f002 f85e 	bl	800fae0 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2201      	movs	r2, #1
 800da28:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800da2c:	2300      	movs	r3, #0
 800da2e:	e000      	b.n	800da32 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800da30:	2301      	movs	r3, #1
}
 800da32:	4618      	mov	r0, r3
 800da34:	3708      	adds	r7, #8
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}

0800da3a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800da3a:	b580      	push	{r7, lr}
 800da3c:	b082      	sub	sp, #8
 800da3e:	af00      	add	r7, sp, #0
 800da40:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d101      	bne.n	800da4c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800da48:	2301      	movs	r3, #1
 800da4a:	e042      	b.n	800dad2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da52:	2b00      	cmp	r3, #0
 800da54:	d106      	bne.n	800da64 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2200      	movs	r2, #0
 800da5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f7f6 fd70 	bl	8004544 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2224      	movs	r2, #36	; 0x24
 800da68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	681a      	ldr	r2, [r3, #0]
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	f022 0201 	bic.w	r2, r2, #1
 800da7a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	f000 fd5d 	bl	800e53c <UART_SetConfig>
 800da82:	4603      	mov	r3, r0
 800da84:	2b01      	cmp	r3, #1
 800da86:	d101      	bne.n	800da8c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800da88:	2301      	movs	r3, #1
 800da8a:	e022      	b.n	800dad2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da90:	2b00      	cmp	r3, #0
 800da92:	d002      	beq.n	800da9a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800da94:	6878      	ldr	r0, [r7, #4]
 800da96:	f001 fbbd 	bl	800f214 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	685a      	ldr	r2, [r3, #4]
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800daa8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	689a      	ldr	r2, [r3, #8]
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dab8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	681a      	ldr	r2, [r3, #0]
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	f042 0201 	orr.w	r2, r2, #1
 800dac8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800daca:	6878      	ldr	r0, [r7, #4]
 800dacc:	f001 fc44 	bl	800f358 <UART_CheckIdleState>
 800dad0:	4603      	mov	r3, r0
}
 800dad2:	4618      	mov	r0, r3
 800dad4:	3708      	adds	r7, #8
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}

0800dada <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dada:	b580      	push	{r7, lr}
 800dadc:	b08a      	sub	sp, #40	; 0x28
 800dade:	af02      	add	r7, sp, #8
 800dae0:	60f8      	str	r0, [r7, #12]
 800dae2:	60b9      	str	r1, [r7, #8]
 800dae4:	603b      	str	r3, [r7, #0]
 800dae6:	4613      	mov	r3, r2
 800dae8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800daf0:	2b20      	cmp	r3, #32
 800daf2:	d17b      	bne.n	800dbec <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d002      	beq.n	800db00 <HAL_UART_Transmit+0x26>
 800dafa:	88fb      	ldrh	r3, [r7, #6]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d101      	bne.n	800db04 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800db00:	2301      	movs	r3, #1
 800db02:	e074      	b.n	800dbee <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	2200      	movs	r2, #0
 800db08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	2221      	movs	r2, #33	; 0x21
 800db10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800db14:	f7f6 fe38 	bl	8004788 <HAL_GetTick>
 800db18:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	88fa      	ldrh	r2, [r7, #6]
 800db1e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	88fa      	ldrh	r2, [r7, #6]
 800db26:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	689b      	ldr	r3, [r3, #8]
 800db2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db32:	d108      	bne.n	800db46 <HAL_UART_Transmit+0x6c>
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	691b      	ldr	r3, [r3, #16]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d104      	bne.n	800db46 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800db3c:	2300      	movs	r3, #0
 800db3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	61bb      	str	r3, [r7, #24]
 800db44:	e003      	b.n	800db4e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800db46:	68bb      	ldr	r3, [r7, #8]
 800db48:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800db4a:	2300      	movs	r3, #0
 800db4c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800db4e:	e030      	b.n	800dbb2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	9300      	str	r3, [sp, #0]
 800db54:	697b      	ldr	r3, [r7, #20]
 800db56:	2200      	movs	r2, #0
 800db58:	2180      	movs	r1, #128	; 0x80
 800db5a:	68f8      	ldr	r0, [r7, #12]
 800db5c:	f001 fca6 	bl	800f4ac <UART_WaitOnFlagUntilTimeout>
 800db60:	4603      	mov	r3, r0
 800db62:	2b00      	cmp	r3, #0
 800db64:	d005      	beq.n	800db72 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	2220      	movs	r2, #32
 800db6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800db6e:	2303      	movs	r3, #3
 800db70:	e03d      	b.n	800dbee <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800db72:	69fb      	ldr	r3, [r7, #28]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d10b      	bne.n	800db90 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800db78:	69bb      	ldr	r3, [r7, #24]
 800db7a:	881b      	ldrh	r3, [r3, #0]
 800db7c:	461a      	mov	r2, r3
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800db86:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800db88:	69bb      	ldr	r3, [r7, #24]
 800db8a:	3302      	adds	r3, #2
 800db8c:	61bb      	str	r3, [r7, #24]
 800db8e:	e007      	b.n	800dba0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800db90:	69fb      	ldr	r3, [r7, #28]
 800db92:	781a      	ldrb	r2, [r3, #0]
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800db9a:	69fb      	ldr	r3, [r7, #28]
 800db9c:	3301      	adds	r3, #1
 800db9e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dba6:	b29b      	uxth	r3, r3
 800dba8:	3b01      	subs	r3, #1
 800dbaa:	b29a      	uxth	r2, r3
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dbb8:	b29b      	uxth	r3, r3
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d1c8      	bne.n	800db50 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	9300      	str	r3, [sp, #0]
 800dbc2:	697b      	ldr	r3, [r7, #20]
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	2140      	movs	r1, #64	; 0x40
 800dbc8:	68f8      	ldr	r0, [r7, #12]
 800dbca:	f001 fc6f 	bl	800f4ac <UART_WaitOnFlagUntilTimeout>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d005      	beq.n	800dbe0 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	2220      	movs	r2, #32
 800dbd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800dbdc:	2303      	movs	r3, #3
 800dbde:	e006      	b.n	800dbee <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	2220      	movs	r2, #32
 800dbe4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800dbe8:	2300      	movs	r3, #0
 800dbea:	e000      	b.n	800dbee <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800dbec:	2302      	movs	r3, #2
  }
}
 800dbee:	4618      	mov	r0, r3
 800dbf0:	3720      	adds	r7, #32
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}

0800dbf6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dbf6:	b580      	push	{r7, lr}
 800dbf8:	b08a      	sub	sp, #40	; 0x28
 800dbfa:	af02      	add	r7, sp, #8
 800dbfc:	60f8      	str	r0, [r7, #12]
 800dbfe:	60b9      	str	r1, [r7, #8]
 800dc00:	603b      	str	r3, [r7, #0]
 800dc02:	4613      	mov	r3, r2
 800dc04:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc0c:	2b20      	cmp	r3, #32
 800dc0e:	f040 80b5 	bne.w	800dd7c <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d002      	beq.n	800dc1e <HAL_UART_Receive+0x28>
 800dc18:	88fb      	ldrh	r3, [r7, #6]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d101      	bne.n	800dc22 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800dc1e:	2301      	movs	r3, #1
 800dc20:	e0ad      	b.n	800dd7e <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2200      	movs	r2, #0
 800dc26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	2222      	movs	r2, #34	; 0x22
 800dc2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	2200      	movs	r2, #0
 800dc36:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dc38:	f7f6 fda6 	bl	8004788 <HAL_GetTick>
 800dc3c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	88fa      	ldrh	r2, [r7, #6]
 800dc42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	88fa      	ldrh	r2, [r7, #6]
 800dc4a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	689b      	ldr	r3, [r3, #8]
 800dc52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc56:	d10e      	bne.n	800dc76 <HAL_UART_Receive+0x80>
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	691b      	ldr	r3, [r3, #16]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d105      	bne.n	800dc6c <HAL_UART_Receive+0x76>
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	f240 12ff 	movw	r2, #511	; 0x1ff
 800dc66:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800dc6a:	e02d      	b.n	800dcc8 <HAL_UART_Receive+0xd2>
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	22ff      	movs	r2, #255	; 0xff
 800dc70:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800dc74:	e028      	b.n	800dcc8 <HAL_UART_Receive+0xd2>
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	689b      	ldr	r3, [r3, #8]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d10d      	bne.n	800dc9a <HAL_UART_Receive+0xa4>
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	691b      	ldr	r3, [r3, #16]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d104      	bne.n	800dc90 <HAL_UART_Receive+0x9a>
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	22ff      	movs	r2, #255	; 0xff
 800dc8a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800dc8e:	e01b      	b.n	800dcc8 <HAL_UART_Receive+0xd2>
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	227f      	movs	r2, #127	; 0x7f
 800dc94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800dc98:	e016      	b.n	800dcc8 <HAL_UART_Receive+0xd2>
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	689b      	ldr	r3, [r3, #8]
 800dc9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dca2:	d10d      	bne.n	800dcc0 <HAL_UART_Receive+0xca>
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	691b      	ldr	r3, [r3, #16]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d104      	bne.n	800dcb6 <HAL_UART_Receive+0xc0>
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	227f      	movs	r2, #127	; 0x7f
 800dcb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800dcb4:	e008      	b.n	800dcc8 <HAL_UART_Receive+0xd2>
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	223f      	movs	r2, #63	; 0x3f
 800dcba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800dcbe:	e003      	b.n	800dcc8 <HAL_UART_Receive+0xd2>
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dcce:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	689b      	ldr	r3, [r3, #8]
 800dcd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dcd8:	d108      	bne.n	800dcec <HAL_UART_Receive+0xf6>
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	691b      	ldr	r3, [r3, #16]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d104      	bne.n	800dcec <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800dce2:	2300      	movs	r3, #0
 800dce4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800dce6:	68bb      	ldr	r3, [r7, #8]
 800dce8:	61bb      	str	r3, [r7, #24]
 800dcea:	e003      	b.n	800dcf4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800dcec:	68bb      	ldr	r3, [r7, #8]
 800dcee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800dcf4:	e036      	b.n	800dd64 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	9300      	str	r3, [sp, #0]
 800dcfa:	697b      	ldr	r3, [r7, #20]
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	2120      	movs	r1, #32
 800dd00:	68f8      	ldr	r0, [r7, #12]
 800dd02:	f001 fbd3 	bl	800f4ac <UART_WaitOnFlagUntilTimeout>
 800dd06:	4603      	mov	r3, r0
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d005      	beq.n	800dd18 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	2220      	movs	r2, #32
 800dd10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800dd14:	2303      	movs	r3, #3
 800dd16:	e032      	b.n	800dd7e <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800dd18:	69fb      	ldr	r3, [r7, #28]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d10c      	bne.n	800dd38 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd24:	b29a      	uxth	r2, r3
 800dd26:	8a7b      	ldrh	r3, [r7, #18]
 800dd28:	4013      	ands	r3, r2
 800dd2a:	b29a      	uxth	r2, r3
 800dd2c:	69bb      	ldr	r3, [r7, #24]
 800dd2e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800dd30:	69bb      	ldr	r3, [r7, #24]
 800dd32:	3302      	adds	r3, #2
 800dd34:	61bb      	str	r3, [r7, #24]
 800dd36:	e00c      	b.n	800dd52 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd3e:	b2da      	uxtb	r2, r3
 800dd40:	8a7b      	ldrh	r3, [r7, #18]
 800dd42:	b2db      	uxtb	r3, r3
 800dd44:	4013      	ands	r3, r2
 800dd46:	b2da      	uxtb	r2, r3
 800dd48:	69fb      	ldr	r3, [r7, #28]
 800dd4a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800dd4c:	69fb      	ldr	r3, [r7, #28]
 800dd4e:	3301      	adds	r3, #1
 800dd50:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dd58:	b29b      	uxth	r3, r3
 800dd5a:	3b01      	subs	r3, #1
 800dd5c:	b29a      	uxth	r2, r3
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dd6a:	b29b      	uxth	r3, r3
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d1c2      	bne.n	800dcf6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	2220      	movs	r2, #32
 800dd74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	e000      	b.n	800dd7e <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800dd7c:	2302      	movs	r3, #2
  }
}
 800dd7e:	4618      	mov	r0, r3
 800dd80:	3720      	adds	r7, #32
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd80      	pop	{r7, pc}
	...

0800dd88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b0ba      	sub	sp, #232	; 0xe8
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	69db      	ldr	r3, [r3, #28]
 800dd96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	689b      	ldr	r3, [r3, #8]
 800ddaa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ddae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ddb2:	f640 030f 	movw	r3, #2063	; 0x80f
 800ddb6:	4013      	ands	r3, r2
 800ddb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ddbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d11b      	bne.n	800ddfc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ddc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ddc8:	f003 0320 	and.w	r3, r3, #32
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d015      	beq.n	800ddfc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ddd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ddd4:	f003 0320 	and.w	r3, r3, #32
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d105      	bne.n	800dde8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dddc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dde0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d009      	beq.n	800ddfc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	f000 8377 	beq.w	800e4e0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	4798      	blx	r3
      }
      return;
 800ddfa:	e371      	b.n	800e4e0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ddfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800de00:	2b00      	cmp	r3, #0
 800de02:	f000 8123 	beq.w	800e04c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800de06:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800de0a:	4b8d      	ldr	r3, [pc, #564]	; (800e040 <HAL_UART_IRQHandler+0x2b8>)
 800de0c:	4013      	ands	r3, r2
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d106      	bne.n	800de20 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800de12:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800de16:	4b8b      	ldr	r3, [pc, #556]	; (800e044 <HAL_UART_IRQHandler+0x2bc>)
 800de18:	4013      	ands	r3, r2
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	f000 8116 	beq.w	800e04c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800de20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de24:	f003 0301 	and.w	r3, r3, #1
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d011      	beq.n	800de50 <HAL_UART_IRQHandler+0xc8>
 800de2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de34:	2b00      	cmp	r3, #0
 800de36:	d00b      	beq.n	800de50 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	2201      	movs	r2, #1
 800de3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de46:	f043 0201 	orr.w	r2, r3, #1
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800de50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de54:	f003 0302 	and.w	r3, r3, #2
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d011      	beq.n	800de80 <HAL_UART_IRQHandler+0xf8>
 800de5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800de60:	f003 0301 	and.w	r3, r3, #1
 800de64:	2b00      	cmp	r3, #0
 800de66:	d00b      	beq.n	800de80 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	2202      	movs	r2, #2
 800de6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de76:	f043 0204 	orr.w	r2, r3, #4
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800de80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de84:	f003 0304 	and.w	r3, r3, #4
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d011      	beq.n	800deb0 <HAL_UART_IRQHandler+0x128>
 800de8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800de90:	f003 0301 	and.w	r3, r3, #1
 800de94:	2b00      	cmp	r3, #0
 800de96:	d00b      	beq.n	800deb0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	2204      	movs	r2, #4
 800de9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dea6:	f043 0202 	orr.w	r2, r3, #2
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800deb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800deb4:	f003 0308 	and.w	r3, r3, #8
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d017      	beq.n	800deec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800debc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dec0:	f003 0320 	and.w	r3, r3, #32
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d105      	bne.n	800ded4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800dec8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800decc:	4b5c      	ldr	r3, [pc, #368]	; (800e040 <HAL_UART_IRQHandler+0x2b8>)
 800dece:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d00b      	beq.n	800deec <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	2208      	movs	r2, #8
 800deda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dee2:	f043 0208 	orr.w	r2, r3, #8
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800deec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800def0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800def4:	2b00      	cmp	r3, #0
 800def6:	d012      	beq.n	800df1e <HAL_UART_IRQHandler+0x196>
 800def8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800defc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800df00:	2b00      	cmp	r3, #0
 800df02:	d00c      	beq.n	800df1e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800df0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df14:	f043 0220 	orr.w	r2, r3, #32
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df24:	2b00      	cmp	r3, #0
 800df26:	f000 82dd 	beq.w	800e4e4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800df2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df2e:	f003 0320 	and.w	r3, r3, #32
 800df32:	2b00      	cmp	r3, #0
 800df34:	d013      	beq.n	800df5e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800df36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df3a:	f003 0320 	and.w	r3, r3, #32
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d105      	bne.n	800df4e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800df42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d007      	beq.n	800df5e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df52:	2b00      	cmp	r3, #0
 800df54:	d003      	beq.n	800df5e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df5a:	6878      	ldr	r0, [r7, #4]
 800df5c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	689b      	ldr	r3, [r3, #8]
 800df6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df72:	2b40      	cmp	r3, #64	; 0x40
 800df74:	d005      	beq.n	800df82 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800df76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800df7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d054      	beq.n	800e02c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f001 fafa 	bl	800f57c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	689b      	ldr	r3, [r3, #8]
 800df8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df92:	2b40      	cmp	r3, #64	; 0x40
 800df94:	d146      	bne.n	800e024 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	3308      	adds	r3, #8
 800df9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfa0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dfa4:	e853 3f00 	ldrex	r3, [r3]
 800dfa8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800dfac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dfb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dfb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	3308      	adds	r3, #8
 800dfbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800dfc2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800dfc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800dfce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800dfd2:	e841 2300 	strex	r3, r2, [r1]
 800dfd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800dfda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d1d9      	bne.n	800df96 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d017      	beq.n	800e01c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dff2:	4a15      	ldr	r2, [pc, #84]	; (800e048 <HAL_UART_IRQHandler+0x2c0>)
 800dff4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dffc:	4618      	mov	r0, r3
 800dffe:	f7f8 f9db 	bl	80063b8 <HAL_DMA_Abort_IT>
 800e002:	4603      	mov	r3, r0
 800e004:	2b00      	cmp	r3, #0
 800e006:	d019      	beq.n	800e03c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e00e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e010:	687a      	ldr	r2, [r7, #4]
 800e012:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800e016:	4610      	mov	r0, r2
 800e018:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e01a:	e00f      	b.n	800e03c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e01c:	6878      	ldr	r0, [r7, #4]
 800e01e:	f000 fa77 	bl	800e510 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e022:	e00b      	b.n	800e03c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f000 fa73 	bl	800e510 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e02a:	e007      	b.n	800e03c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e02c:	6878      	ldr	r0, [r7, #4]
 800e02e:	f000 fa6f 	bl	800e510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	2200      	movs	r2, #0
 800e036:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800e03a:	e253      	b.n	800e4e4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e03c:	bf00      	nop
    return;
 800e03e:	e251      	b.n	800e4e4 <HAL_UART_IRQHandler+0x75c>
 800e040:	10000001 	.word	0x10000001
 800e044:	04000120 	.word	0x04000120
 800e048:	0800f649 	.word	0x0800f649

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e050:	2b01      	cmp	r3, #1
 800e052:	f040 81e7 	bne.w	800e424 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e05a:	f003 0310 	and.w	r3, r3, #16
 800e05e:	2b00      	cmp	r3, #0
 800e060:	f000 81e0 	beq.w	800e424 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e068:	f003 0310 	and.w	r3, r3, #16
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	f000 81d9 	beq.w	800e424 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	2210      	movs	r2, #16
 800e078:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	689b      	ldr	r3, [r3, #8]
 800e080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e084:	2b40      	cmp	r3, #64	; 0x40
 800e086:	f040 8151 	bne.w	800e32c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	4a96      	ldr	r2, [pc, #600]	; (800e2ec <HAL_UART_IRQHandler+0x564>)
 800e094:	4293      	cmp	r3, r2
 800e096:	d068      	beq.n	800e16a <HAL_UART_IRQHandler+0x3e2>
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	4a93      	ldr	r2, [pc, #588]	; (800e2f0 <HAL_UART_IRQHandler+0x568>)
 800e0a2:	4293      	cmp	r3, r2
 800e0a4:	d061      	beq.n	800e16a <HAL_UART_IRQHandler+0x3e2>
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	4a91      	ldr	r2, [pc, #580]	; (800e2f4 <HAL_UART_IRQHandler+0x56c>)
 800e0b0:	4293      	cmp	r3, r2
 800e0b2:	d05a      	beq.n	800e16a <HAL_UART_IRQHandler+0x3e2>
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	4a8e      	ldr	r2, [pc, #568]	; (800e2f8 <HAL_UART_IRQHandler+0x570>)
 800e0be:	4293      	cmp	r3, r2
 800e0c0:	d053      	beq.n	800e16a <HAL_UART_IRQHandler+0x3e2>
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	4a8c      	ldr	r2, [pc, #560]	; (800e2fc <HAL_UART_IRQHandler+0x574>)
 800e0cc:	4293      	cmp	r3, r2
 800e0ce:	d04c      	beq.n	800e16a <HAL_UART_IRQHandler+0x3e2>
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	4a89      	ldr	r2, [pc, #548]	; (800e300 <HAL_UART_IRQHandler+0x578>)
 800e0da:	4293      	cmp	r3, r2
 800e0dc:	d045      	beq.n	800e16a <HAL_UART_IRQHandler+0x3e2>
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	4a87      	ldr	r2, [pc, #540]	; (800e304 <HAL_UART_IRQHandler+0x57c>)
 800e0e8:	4293      	cmp	r3, r2
 800e0ea:	d03e      	beq.n	800e16a <HAL_UART_IRQHandler+0x3e2>
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	4a84      	ldr	r2, [pc, #528]	; (800e308 <HAL_UART_IRQHandler+0x580>)
 800e0f6:	4293      	cmp	r3, r2
 800e0f8:	d037      	beq.n	800e16a <HAL_UART_IRQHandler+0x3e2>
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	4a82      	ldr	r2, [pc, #520]	; (800e30c <HAL_UART_IRQHandler+0x584>)
 800e104:	4293      	cmp	r3, r2
 800e106:	d030      	beq.n	800e16a <HAL_UART_IRQHandler+0x3e2>
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	4a7f      	ldr	r2, [pc, #508]	; (800e310 <HAL_UART_IRQHandler+0x588>)
 800e112:	4293      	cmp	r3, r2
 800e114:	d029      	beq.n	800e16a <HAL_UART_IRQHandler+0x3e2>
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	4a7d      	ldr	r2, [pc, #500]	; (800e314 <HAL_UART_IRQHandler+0x58c>)
 800e120:	4293      	cmp	r3, r2
 800e122:	d022      	beq.n	800e16a <HAL_UART_IRQHandler+0x3e2>
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	4a7a      	ldr	r2, [pc, #488]	; (800e318 <HAL_UART_IRQHandler+0x590>)
 800e12e:	4293      	cmp	r3, r2
 800e130:	d01b      	beq.n	800e16a <HAL_UART_IRQHandler+0x3e2>
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	4a78      	ldr	r2, [pc, #480]	; (800e31c <HAL_UART_IRQHandler+0x594>)
 800e13c:	4293      	cmp	r3, r2
 800e13e:	d014      	beq.n	800e16a <HAL_UART_IRQHandler+0x3e2>
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	4a75      	ldr	r2, [pc, #468]	; (800e320 <HAL_UART_IRQHandler+0x598>)
 800e14a:	4293      	cmp	r3, r2
 800e14c:	d00d      	beq.n	800e16a <HAL_UART_IRQHandler+0x3e2>
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	4a73      	ldr	r2, [pc, #460]	; (800e324 <HAL_UART_IRQHandler+0x59c>)
 800e158:	4293      	cmp	r3, r2
 800e15a:	d006      	beq.n	800e16a <HAL_UART_IRQHandler+0x3e2>
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	4a70      	ldr	r2, [pc, #448]	; (800e328 <HAL_UART_IRQHandler+0x5a0>)
 800e166:	4293      	cmp	r3, r2
 800e168:	d106      	bne.n	800e178 <HAL_UART_IRQHandler+0x3f0>
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	685b      	ldr	r3, [r3, #4]
 800e174:	b29b      	uxth	r3, r3
 800e176:	e005      	b.n	800e184 <HAL_UART_IRQHandler+0x3fc>
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	685b      	ldr	r3, [r3, #4]
 800e182:	b29b      	uxth	r3, r3
 800e184:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e188:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	f000 81ab 	beq.w	800e4e8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e198:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e19c:	429a      	cmp	r2, r3
 800e19e:	f080 81a3 	bcs.w	800e4e8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e1a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e1b2:	69db      	ldr	r3, [r3, #28]
 800e1b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e1b8:	f000 8087 	beq.w	800e2ca <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e1c8:	e853 3f00 	ldrex	r3, [r3]
 800e1cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e1d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e1d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e1d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	461a      	mov	r2, r3
 800e1e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e1e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e1ea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e1f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e1f6:	e841 2300 	strex	r3, r2, [r1]
 800e1fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e1fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e202:	2b00      	cmp	r3, #0
 800e204:	d1da      	bne.n	800e1bc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	3308      	adds	r3, #8
 800e20c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e20e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e210:	e853 3f00 	ldrex	r3, [r3]
 800e214:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e216:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e218:	f023 0301 	bic.w	r3, r3, #1
 800e21c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	3308      	adds	r3, #8
 800e226:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e22a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e22e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e230:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e232:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e236:	e841 2300 	strex	r3, r2, [r1]
 800e23a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e23c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d1e1      	bne.n	800e206 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	3308      	adds	r3, #8
 800e248:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e24a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e24c:	e853 3f00 	ldrex	r3, [r3]
 800e250:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e258:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	3308      	adds	r3, #8
 800e262:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e266:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e268:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e26a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e26c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e26e:	e841 2300 	strex	r3, r2, [r1]
 800e272:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e274:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e276:	2b00      	cmp	r3, #0
 800e278:	d1e3      	bne.n	800e242 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	2220      	movs	r2, #32
 800e27e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	2200      	movs	r2, #0
 800e286:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e28e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e290:	e853 3f00 	ldrex	r3, [r3]
 800e294:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e298:	f023 0310 	bic.w	r3, r3, #16
 800e29c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	461a      	mov	r2, r3
 800e2a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e2aa:	65bb      	str	r3, [r7, #88]	; 0x58
 800e2ac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e2b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e2b2:	e841 2300 	strex	r3, r2, [r1]
 800e2b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e2b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d1e4      	bne.n	800e288 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f7f7 fd59 	bl	8005d7c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	2202      	movs	r2, #2
 800e2ce:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e2dc:	b29b      	uxth	r3, r3
 800e2de:	1ad3      	subs	r3, r2, r3
 800e2e0:	b29b      	uxth	r3, r3
 800e2e2:	4619      	mov	r1, r3
 800e2e4:	6878      	ldr	r0, [r7, #4]
 800e2e6:	f000 f91d 	bl	800e524 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e2ea:	e0fd      	b.n	800e4e8 <HAL_UART_IRQHandler+0x760>
 800e2ec:	40020010 	.word	0x40020010
 800e2f0:	40020028 	.word	0x40020028
 800e2f4:	40020040 	.word	0x40020040
 800e2f8:	40020058 	.word	0x40020058
 800e2fc:	40020070 	.word	0x40020070
 800e300:	40020088 	.word	0x40020088
 800e304:	400200a0 	.word	0x400200a0
 800e308:	400200b8 	.word	0x400200b8
 800e30c:	40020410 	.word	0x40020410
 800e310:	40020428 	.word	0x40020428
 800e314:	40020440 	.word	0x40020440
 800e318:	40020458 	.word	0x40020458
 800e31c:	40020470 	.word	0x40020470
 800e320:	40020488 	.word	0x40020488
 800e324:	400204a0 	.word	0x400204a0
 800e328:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e338:	b29b      	uxth	r3, r3
 800e33a:	1ad3      	subs	r3, r2, r3
 800e33c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e346:	b29b      	uxth	r3, r3
 800e348:	2b00      	cmp	r3, #0
 800e34a:	f000 80cf 	beq.w	800e4ec <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800e34e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e352:	2b00      	cmp	r3, #0
 800e354:	f000 80ca 	beq.w	800e4ec <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e35e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e360:	e853 3f00 	ldrex	r3, [r3]
 800e364:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e368:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e36c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	461a      	mov	r2, r3
 800e376:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e37a:	647b      	str	r3, [r7, #68]	; 0x44
 800e37c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e37e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e380:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e382:	e841 2300 	strex	r3, r2, [r1]
 800e386:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d1e4      	bne.n	800e358 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	3308      	adds	r3, #8
 800e394:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e398:	e853 3f00 	ldrex	r3, [r3]
 800e39c:	623b      	str	r3, [r7, #32]
   return(result);
 800e39e:	6a3a      	ldr	r2, [r7, #32]
 800e3a0:	4b55      	ldr	r3, [pc, #340]	; (800e4f8 <HAL_UART_IRQHandler+0x770>)
 800e3a2:	4013      	ands	r3, r2
 800e3a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	3308      	adds	r3, #8
 800e3ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e3b2:	633a      	str	r2, [r7, #48]	; 0x30
 800e3b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e3b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3ba:	e841 2300 	strex	r3, r2, [r1]
 800e3be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d1e3      	bne.n	800e38e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2220      	movs	r2, #32
 800e3ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3e0:	693b      	ldr	r3, [r7, #16]
 800e3e2:	e853 3f00 	ldrex	r3, [r3]
 800e3e6:	60fb      	str	r3, [r7, #12]
   return(result);
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	f023 0310 	bic.w	r3, r3, #16
 800e3ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	461a      	mov	r2, r3
 800e3f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e3fc:	61fb      	str	r3, [r7, #28]
 800e3fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e400:	69b9      	ldr	r1, [r7, #24]
 800e402:	69fa      	ldr	r2, [r7, #28]
 800e404:	e841 2300 	strex	r3, r2, [r1]
 800e408:	617b      	str	r3, [r7, #20]
   return(result);
 800e40a:	697b      	ldr	r3, [r7, #20]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d1e4      	bne.n	800e3da <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2202      	movs	r2, #2
 800e414:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e416:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e41a:	4619      	mov	r1, r3
 800e41c:	6878      	ldr	r0, [r7, #4]
 800e41e:	f000 f881 	bl	800e524 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e422:	e063      	b.n	800e4ec <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e428:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d00e      	beq.n	800e44e <HAL_UART_IRQHandler+0x6c6>
 800e430:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e434:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d008      	beq.n	800e44e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e444:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e446:	6878      	ldr	r0, [r7, #4]
 800e448:	f001 f93f 	bl	800f6ca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e44c:	e051      	b.n	800e4f2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e44e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e456:	2b00      	cmp	r3, #0
 800e458:	d014      	beq.n	800e484 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e45a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e45e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e462:	2b00      	cmp	r3, #0
 800e464:	d105      	bne.n	800e472 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e466:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e46a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d008      	beq.n	800e484 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e476:	2b00      	cmp	r3, #0
 800e478:	d03a      	beq.n	800e4f0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	4798      	blx	r3
    }
    return;
 800e482:	e035      	b.n	800e4f0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d009      	beq.n	800e4a4 <HAL_UART_IRQHandler+0x71c>
 800e490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d003      	beq.n	800e4a4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800e49c:	6878      	ldr	r0, [r7, #4]
 800e49e:	f001 f8e9 	bl	800f674 <UART_EndTransmit_IT>
    return;
 800e4a2:	e026      	b.n	800e4f2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e4a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d009      	beq.n	800e4c4 <HAL_UART_IRQHandler+0x73c>
 800e4b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d003      	beq.n	800e4c4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e4bc:	6878      	ldr	r0, [r7, #4]
 800e4be:	f001 f918 	bl	800f6f2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e4c2:	e016      	b.n	800e4f2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e4c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d010      	beq.n	800e4f2 <HAL_UART_IRQHandler+0x76a>
 800e4d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	da0c      	bge.n	800e4f2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e4d8:	6878      	ldr	r0, [r7, #4]
 800e4da:	f001 f900 	bl	800f6de <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e4de:	e008      	b.n	800e4f2 <HAL_UART_IRQHandler+0x76a>
      return;
 800e4e0:	bf00      	nop
 800e4e2:	e006      	b.n	800e4f2 <HAL_UART_IRQHandler+0x76a>
    return;
 800e4e4:	bf00      	nop
 800e4e6:	e004      	b.n	800e4f2 <HAL_UART_IRQHandler+0x76a>
      return;
 800e4e8:	bf00      	nop
 800e4ea:	e002      	b.n	800e4f2 <HAL_UART_IRQHandler+0x76a>
      return;
 800e4ec:	bf00      	nop
 800e4ee:	e000      	b.n	800e4f2 <HAL_UART_IRQHandler+0x76a>
    return;
 800e4f0:	bf00      	nop
  }
}
 800e4f2:	37e8      	adds	r7, #232	; 0xe8
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	bd80      	pop	{r7, pc}
 800e4f8:	effffffe 	.word	0xeffffffe

0800e4fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	b083      	sub	sp, #12
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e504:	bf00      	nop
 800e506:	370c      	adds	r7, #12
 800e508:	46bd      	mov	sp, r7
 800e50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50e:	4770      	bx	lr

0800e510 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e510:	b480      	push	{r7}
 800e512:	b083      	sub	sp, #12
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e518:	bf00      	nop
 800e51a:	370c      	adds	r7, #12
 800e51c:	46bd      	mov	sp, r7
 800e51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e522:	4770      	bx	lr

0800e524 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e524:	b480      	push	{r7}
 800e526:	b083      	sub	sp, #12
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
 800e52c:	460b      	mov	r3, r1
 800e52e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e530:	bf00      	nop
 800e532:	370c      	adds	r7, #12
 800e534:	46bd      	mov	sp, r7
 800e536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53a:	4770      	bx	lr

0800e53c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e53c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e540:	b092      	sub	sp, #72	; 0x48
 800e542:	af00      	add	r7, sp, #0
 800e544:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e546:	2300      	movs	r3, #0
 800e548:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e54c:	697b      	ldr	r3, [r7, #20]
 800e54e:	689a      	ldr	r2, [r3, #8]
 800e550:	697b      	ldr	r3, [r7, #20]
 800e552:	691b      	ldr	r3, [r3, #16]
 800e554:	431a      	orrs	r2, r3
 800e556:	697b      	ldr	r3, [r7, #20]
 800e558:	695b      	ldr	r3, [r3, #20]
 800e55a:	431a      	orrs	r2, r3
 800e55c:	697b      	ldr	r3, [r7, #20]
 800e55e:	69db      	ldr	r3, [r3, #28]
 800e560:	4313      	orrs	r3, r2
 800e562:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e564:	697b      	ldr	r3, [r7, #20]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	681a      	ldr	r2, [r3, #0]
 800e56a:	4bbe      	ldr	r3, [pc, #760]	; (800e864 <UART_SetConfig+0x328>)
 800e56c:	4013      	ands	r3, r2
 800e56e:	697a      	ldr	r2, [r7, #20]
 800e570:	6812      	ldr	r2, [r2, #0]
 800e572:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e574:	430b      	orrs	r3, r1
 800e576:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e578:	697b      	ldr	r3, [r7, #20]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	685b      	ldr	r3, [r3, #4]
 800e57e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e582:	697b      	ldr	r3, [r7, #20]
 800e584:	68da      	ldr	r2, [r3, #12]
 800e586:	697b      	ldr	r3, [r7, #20]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	430a      	orrs	r2, r1
 800e58c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e58e:	697b      	ldr	r3, [r7, #20]
 800e590:	699b      	ldr	r3, [r3, #24]
 800e592:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e594:	697b      	ldr	r3, [r7, #20]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	4ab3      	ldr	r2, [pc, #716]	; (800e868 <UART_SetConfig+0x32c>)
 800e59a:	4293      	cmp	r3, r2
 800e59c:	d004      	beq.n	800e5a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e59e:	697b      	ldr	r3, [r7, #20]
 800e5a0:	6a1b      	ldr	r3, [r3, #32]
 800e5a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e5a4:	4313      	orrs	r3, r2
 800e5a6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e5a8:	697b      	ldr	r3, [r7, #20]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	689a      	ldr	r2, [r3, #8]
 800e5ae:	4baf      	ldr	r3, [pc, #700]	; (800e86c <UART_SetConfig+0x330>)
 800e5b0:	4013      	ands	r3, r2
 800e5b2:	697a      	ldr	r2, [r7, #20]
 800e5b4:	6812      	ldr	r2, [r2, #0]
 800e5b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e5b8:	430b      	orrs	r3, r1
 800e5ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e5bc:	697b      	ldr	r3, [r7, #20]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5c2:	f023 010f 	bic.w	r1, r3, #15
 800e5c6:	697b      	ldr	r3, [r7, #20]
 800e5c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e5ca:	697b      	ldr	r3, [r7, #20]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	430a      	orrs	r2, r1
 800e5d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e5d2:	697b      	ldr	r3, [r7, #20]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	4aa6      	ldr	r2, [pc, #664]	; (800e870 <UART_SetConfig+0x334>)
 800e5d8:	4293      	cmp	r3, r2
 800e5da:	d177      	bne.n	800e6cc <UART_SetConfig+0x190>
 800e5dc:	4ba5      	ldr	r3, [pc, #660]	; (800e874 <UART_SetConfig+0x338>)
 800e5de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e5e4:	2b28      	cmp	r3, #40	; 0x28
 800e5e6:	d86d      	bhi.n	800e6c4 <UART_SetConfig+0x188>
 800e5e8:	a201      	add	r2, pc, #4	; (adr r2, 800e5f0 <UART_SetConfig+0xb4>)
 800e5ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5ee:	bf00      	nop
 800e5f0:	0800e695 	.word	0x0800e695
 800e5f4:	0800e6c5 	.word	0x0800e6c5
 800e5f8:	0800e6c5 	.word	0x0800e6c5
 800e5fc:	0800e6c5 	.word	0x0800e6c5
 800e600:	0800e6c5 	.word	0x0800e6c5
 800e604:	0800e6c5 	.word	0x0800e6c5
 800e608:	0800e6c5 	.word	0x0800e6c5
 800e60c:	0800e6c5 	.word	0x0800e6c5
 800e610:	0800e69d 	.word	0x0800e69d
 800e614:	0800e6c5 	.word	0x0800e6c5
 800e618:	0800e6c5 	.word	0x0800e6c5
 800e61c:	0800e6c5 	.word	0x0800e6c5
 800e620:	0800e6c5 	.word	0x0800e6c5
 800e624:	0800e6c5 	.word	0x0800e6c5
 800e628:	0800e6c5 	.word	0x0800e6c5
 800e62c:	0800e6c5 	.word	0x0800e6c5
 800e630:	0800e6a5 	.word	0x0800e6a5
 800e634:	0800e6c5 	.word	0x0800e6c5
 800e638:	0800e6c5 	.word	0x0800e6c5
 800e63c:	0800e6c5 	.word	0x0800e6c5
 800e640:	0800e6c5 	.word	0x0800e6c5
 800e644:	0800e6c5 	.word	0x0800e6c5
 800e648:	0800e6c5 	.word	0x0800e6c5
 800e64c:	0800e6c5 	.word	0x0800e6c5
 800e650:	0800e6ad 	.word	0x0800e6ad
 800e654:	0800e6c5 	.word	0x0800e6c5
 800e658:	0800e6c5 	.word	0x0800e6c5
 800e65c:	0800e6c5 	.word	0x0800e6c5
 800e660:	0800e6c5 	.word	0x0800e6c5
 800e664:	0800e6c5 	.word	0x0800e6c5
 800e668:	0800e6c5 	.word	0x0800e6c5
 800e66c:	0800e6c5 	.word	0x0800e6c5
 800e670:	0800e6b5 	.word	0x0800e6b5
 800e674:	0800e6c5 	.word	0x0800e6c5
 800e678:	0800e6c5 	.word	0x0800e6c5
 800e67c:	0800e6c5 	.word	0x0800e6c5
 800e680:	0800e6c5 	.word	0x0800e6c5
 800e684:	0800e6c5 	.word	0x0800e6c5
 800e688:	0800e6c5 	.word	0x0800e6c5
 800e68c:	0800e6c5 	.word	0x0800e6c5
 800e690:	0800e6bd 	.word	0x0800e6bd
 800e694:	2301      	movs	r3, #1
 800e696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e69a:	e326      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e69c:	2304      	movs	r3, #4
 800e69e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6a2:	e322      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e6a4:	2308      	movs	r3, #8
 800e6a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6aa:	e31e      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e6ac:	2310      	movs	r3, #16
 800e6ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6b2:	e31a      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e6b4:	2320      	movs	r3, #32
 800e6b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6ba:	e316      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e6bc:	2340      	movs	r3, #64	; 0x40
 800e6be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6c2:	e312      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e6c4:	2380      	movs	r3, #128	; 0x80
 800e6c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6ca:	e30e      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e6cc:	697b      	ldr	r3, [r7, #20]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	4a69      	ldr	r2, [pc, #420]	; (800e878 <UART_SetConfig+0x33c>)
 800e6d2:	4293      	cmp	r3, r2
 800e6d4:	d130      	bne.n	800e738 <UART_SetConfig+0x1fc>
 800e6d6:	4b67      	ldr	r3, [pc, #412]	; (800e874 <UART_SetConfig+0x338>)
 800e6d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6da:	f003 0307 	and.w	r3, r3, #7
 800e6de:	2b05      	cmp	r3, #5
 800e6e0:	d826      	bhi.n	800e730 <UART_SetConfig+0x1f4>
 800e6e2:	a201      	add	r2, pc, #4	; (adr r2, 800e6e8 <UART_SetConfig+0x1ac>)
 800e6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6e8:	0800e701 	.word	0x0800e701
 800e6ec:	0800e709 	.word	0x0800e709
 800e6f0:	0800e711 	.word	0x0800e711
 800e6f4:	0800e719 	.word	0x0800e719
 800e6f8:	0800e721 	.word	0x0800e721
 800e6fc:	0800e729 	.word	0x0800e729
 800e700:	2300      	movs	r3, #0
 800e702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e706:	e2f0      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e708:	2304      	movs	r3, #4
 800e70a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e70e:	e2ec      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e710:	2308      	movs	r3, #8
 800e712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e716:	e2e8      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e718:	2310      	movs	r3, #16
 800e71a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e71e:	e2e4      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e720:	2320      	movs	r3, #32
 800e722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e726:	e2e0      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e728:	2340      	movs	r3, #64	; 0x40
 800e72a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e72e:	e2dc      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e730:	2380      	movs	r3, #128	; 0x80
 800e732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e736:	e2d8      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e738:	697b      	ldr	r3, [r7, #20]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	4a4f      	ldr	r2, [pc, #316]	; (800e87c <UART_SetConfig+0x340>)
 800e73e:	4293      	cmp	r3, r2
 800e740:	d130      	bne.n	800e7a4 <UART_SetConfig+0x268>
 800e742:	4b4c      	ldr	r3, [pc, #304]	; (800e874 <UART_SetConfig+0x338>)
 800e744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e746:	f003 0307 	and.w	r3, r3, #7
 800e74a:	2b05      	cmp	r3, #5
 800e74c:	d826      	bhi.n	800e79c <UART_SetConfig+0x260>
 800e74e:	a201      	add	r2, pc, #4	; (adr r2, 800e754 <UART_SetConfig+0x218>)
 800e750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e754:	0800e76d 	.word	0x0800e76d
 800e758:	0800e775 	.word	0x0800e775
 800e75c:	0800e77d 	.word	0x0800e77d
 800e760:	0800e785 	.word	0x0800e785
 800e764:	0800e78d 	.word	0x0800e78d
 800e768:	0800e795 	.word	0x0800e795
 800e76c:	2300      	movs	r3, #0
 800e76e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e772:	e2ba      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e774:	2304      	movs	r3, #4
 800e776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e77a:	e2b6      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e77c:	2308      	movs	r3, #8
 800e77e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e782:	e2b2      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e784:	2310      	movs	r3, #16
 800e786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e78a:	e2ae      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e78c:	2320      	movs	r3, #32
 800e78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e792:	e2aa      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e794:	2340      	movs	r3, #64	; 0x40
 800e796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e79a:	e2a6      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e79c:	2380      	movs	r3, #128	; 0x80
 800e79e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7a2:	e2a2      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e7a4:	697b      	ldr	r3, [r7, #20]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	4a35      	ldr	r2, [pc, #212]	; (800e880 <UART_SetConfig+0x344>)
 800e7aa:	4293      	cmp	r3, r2
 800e7ac:	d130      	bne.n	800e810 <UART_SetConfig+0x2d4>
 800e7ae:	4b31      	ldr	r3, [pc, #196]	; (800e874 <UART_SetConfig+0x338>)
 800e7b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7b2:	f003 0307 	and.w	r3, r3, #7
 800e7b6:	2b05      	cmp	r3, #5
 800e7b8:	d826      	bhi.n	800e808 <UART_SetConfig+0x2cc>
 800e7ba:	a201      	add	r2, pc, #4	; (adr r2, 800e7c0 <UART_SetConfig+0x284>)
 800e7bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7c0:	0800e7d9 	.word	0x0800e7d9
 800e7c4:	0800e7e1 	.word	0x0800e7e1
 800e7c8:	0800e7e9 	.word	0x0800e7e9
 800e7cc:	0800e7f1 	.word	0x0800e7f1
 800e7d0:	0800e7f9 	.word	0x0800e7f9
 800e7d4:	0800e801 	.word	0x0800e801
 800e7d8:	2300      	movs	r3, #0
 800e7da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7de:	e284      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e7e0:	2304      	movs	r3, #4
 800e7e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7e6:	e280      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e7e8:	2308      	movs	r3, #8
 800e7ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7ee:	e27c      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e7f0:	2310      	movs	r3, #16
 800e7f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7f6:	e278      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e7f8:	2320      	movs	r3, #32
 800e7fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7fe:	e274      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e800:	2340      	movs	r3, #64	; 0x40
 800e802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e806:	e270      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e808:	2380      	movs	r3, #128	; 0x80
 800e80a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e80e:	e26c      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e810:	697b      	ldr	r3, [r7, #20]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	4a1b      	ldr	r2, [pc, #108]	; (800e884 <UART_SetConfig+0x348>)
 800e816:	4293      	cmp	r3, r2
 800e818:	d142      	bne.n	800e8a0 <UART_SetConfig+0x364>
 800e81a:	4b16      	ldr	r3, [pc, #88]	; (800e874 <UART_SetConfig+0x338>)
 800e81c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e81e:	f003 0307 	and.w	r3, r3, #7
 800e822:	2b05      	cmp	r3, #5
 800e824:	d838      	bhi.n	800e898 <UART_SetConfig+0x35c>
 800e826:	a201      	add	r2, pc, #4	; (adr r2, 800e82c <UART_SetConfig+0x2f0>)
 800e828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e82c:	0800e845 	.word	0x0800e845
 800e830:	0800e84d 	.word	0x0800e84d
 800e834:	0800e855 	.word	0x0800e855
 800e838:	0800e85d 	.word	0x0800e85d
 800e83c:	0800e889 	.word	0x0800e889
 800e840:	0800e891 	.word	0x0800e891
 800e844:	2300      	movs	r3, #0
 800e846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e84a:	e24e      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e84c:	2304      	movs	r3, #4
 800e84e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e852:	e24a      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e854:	2308      	movs	r3, #8
 800e856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e85a:	e246      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e85c:	2310      	movs	r3, #16
 800e85e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e862:	e242      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e864:	cfff69f3 	.word	0xcfff69f3
 800e868:	58000c00 	.word	0x58000c00
 800e86c:	11fff4ff 	.word	0x11fff4ff
 800e870:	40011000 	.word	0x40011000
 800e874:	58024400 	.word	0x58024400
 800e878:	40004400 	.word	0x40004400
 800e87c:	40004800 	.word	0x40004800
 800e880:	40004c00 	.word	0x40004c00
 800e884:	40005000 	.word	0x40005000
 800e888:	2320      	movs	r3, #32
 800e88a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e88e:	e22c      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e890:	2340      	movs	r3, #64	; 0x40
 800e892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e896:	e228      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e898:	2380      	movs	r3, #128	; 0x80
 800e89a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e89e:	e224      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e8a0:	697b      	ldr	r3, [r7, #20]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	4ab1      	ldr	r2, [pc, #708]	; (800eb6c <UART_SetConfig+0x630>)
 800e8a6:	4293      	cmp	r3, r2
 800e8a8:	d176      	bne.n	800e998 <UART_SetConfig+0x45c>
 800e8aa:	4bb1      	ldr	r3, [pc, #708]	; (800eb70 <UART_SetConfig+0x634>)
 800e8ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e8b2:	2b28      	cmp	r3, #40	; 0x28
 800e8b4:	d86c      	bhi.n	800e990 <UART_SetConfig+0x454>
 800e8b6:	a201      	add	r2, pc, #4	; (adr r2, 800e8bc <UART_SetConfig+0x380>)
 800e8b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8bc:	0800e961 	.word	0x0800e961
 800e8c0:	0800e991 	.word	0x0800e991
 800e8c4:	0800e991 	.word	0x0800e991
 800e8c8:	0800e991 	.word	0x0800e991
 800e8cc:	0800e991 	.word	0x0800e991
 800e8d0:	0800e991 	.word	0x0800e991
 800e8d4:	0800e991 	.word	0x0800e991
 800e8d8:	0800e991 	.word	0x0800e991
 800e8dc:	0800e969 	.word	0x0800e969
 800e8e0:	0800e991 	.word	0x0800e991
 800e8e4:	0800e991 	.word	0x0800e991
 800e8e8:	0800e991 	.word	0x0800e991
 800e8ec:	0800e991 	.word	0x0800e991
 800e8f0:	0800e991 	.word	0x0800e991
 800e8f4:	0800e991 	.word	0x0800e991
 800e8f8:	0800e991 	.word	0x0800e991
 800e8fc:	0800e971 	.word	0x0800e971
 800e900:	0800e991 	.word	0x0800e991
 800e904:	0800e991 	.word	0x0800e991
 800e908:	0800e991 	.word	0x0800e991
 800e90c:	0800e991 	.word	0x0800e991
 800e910:	0800e991 	.word	0x0800e991
 800e914:	0800e991 	.word	0x0800e991
 800e918:	0800e991 	.word	0x0800e991
 800e91c:	0800e979 	.word	0x0800e979
 800e920:	0800e991 	.word	0x0800e991
 800e924:	0800e991 	.word	0x0800e991
 800e928:	0800e991 	.word	0x0800e991
 800e92c:	0800e991 	.word	0x0800e991
 800e930:	0800e991 	.word	0x0800e991
 800e934:	0800e991 	.word	0x0800e991
 800e938:	0800e991 	.word	0x0800e991
 800e93c:	0800e981 	.word	0x0800e981
 800e940:	0800e991 	.word	0x0800e991
 800e944:	0800e991 	.word	0x0800e991
 800e948:	0800e991 	.word	0x0800e991
 800e94c:	0800e991 	.word	0x0800e991
 800e950:	0800e991 	.word	0x0800e991
 800e954:	0800e991 	.word	0x0800e991
 800e958:	0800e991 	.word	0x0800e991
 800e95c:	0800e989 	.word	0x0800e989
 800e960:	2301      	movs	r3, #1
 800e962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e966:	e1c0      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e968:	2304      	movs	r3, #4
 800e96a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e96e:	e1bc      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e970:	2308      	movs	r3, #8
 800e972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e976:	e1b8      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e978:	2310      	movs	r3, #16
 800e97a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e97e:	e1b4      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e980:	2320      	movs	r3, #32
 800e982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e986:	e1b0      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e988:	2340      	movs	r3, #64	; 0x40
 800e98a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e98e:	e1ac      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e990:	2380      	movs	r3, #128	; 0x80
 800e992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e996:	e1a8      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e998:	697b      	ldr	r3, [r7, #20]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	4a75      	ldr	r2, [pc, #468]	; (800eb74 <UART_SetConfig+0x638>)
 800e99e:	4293      	cmp	r3, r2
 800e9a0:	d130      	bne.n	800ea04 <UART_SetConfig+0x4c8>
 800e9a2:	4b73      	ldr	r3, [pc, #460]	; (800eb70 <UART_SetConfig+0x634>)
 800e9a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9a6:	f003 0307 	and.w	r3, r3, #7
 800e9aa:	2b05      	cmp	r3, #5
 800e9ac:	d826      	bhi.n	800e9fc <UART_SetConfig+0x4c0>
 800e9ae:	a201      	add	r2, pc, #4	; (adr r2, 800e9b4 <UART_SetConfig+0x478>)
 800e9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9b4:	0800e9cd 	.word	0x0800e9cd
 800e9b8:	0800e9d5 	.word	0x0800e9d5
 800e9bc:	0800e9dd 	.word	0x0800e9dd
 800e9c0:	0800e9e5 	.word	0x0800e9e5
 800e9c4:	0800e9ed 	.word	0x0800e9ed
 800e9c8:	0800e9f5 	.word	0x0800e9f5
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9d2:	e18a      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e9d4:	2304      	movs	r3, #4
 800e9d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9da:	e186      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e9dc:	2308      	movs	r3, #8
 800e9de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9e2:	e182      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e9e4:	2310      	movs	r3, #16
 800e9e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9ea:	e17e      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e9ec:	2320      	movs	r3, #32
 800e9ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9f2:	e17a      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e9f4:	2340      	movs	r3, #64	; 0x40
 800e9f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9fa:	e176      	b.n	800ecea <UART_SetConfig+0x7ae>
 800e9fc:	2380      	movs	r3, #128	; 0x80
 800e9fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea02:	e172      	b.n	800ecea <UART_SetConfig+0x7ae>
 800ea04:	697b      	ldr	r3, [r7, #20]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	4a5b      	ldr	r2, [pc, #364]	; (800eb78 <UART_SetConfig+0x63c>)
 800ea0a:	4293      	cmp	r3, r2
 800ea0c:	d130      	bne.n	800ea70 <UART_SetConfig+0x534>
 800ea0e:	4b58      	ldr	r3, [pc, #352]	; (800eb70 <UART_SetConfig+0x634>)
 800ea10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea12:	f003 0307 	and.w	r3, r3, #7
 800ea16:	2b05      	cmp	r3, #5
 800ea18:	d826      	bhi.n	800ea68 <UART_SetConfig+0x52c>
 800ea1a:	a201      	add	r2, pc, #4	; (adr r2, 800ea20 <UART_SetConfig+0x4e4>)
 800ea1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea20:	0800ea39 	.word	0x0800ea39
 800ea24:	0800ea41 	.word	0x0800ea41
 800ea28:	0800ea49 	.word	0x0800ea49
 800ea2c:	0800ea51 	.word	0x0800ea51
 800ea30:	0800ea59 	.word	0x0800ea59
 800ea34:	0800ea61 	.word	0x0800ea61
 800ea38:	2300      	movs	r3, #0
 800ea3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea3e:	e154      	b.n	800ecea <UART_SetConfig+0x7ae>
 800ea40:	2304      	movs	r3, #4
 800ea42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea46:	e150      	b.n	800ecea <UART_SetConfig+0x7ae>
 800ea48:	2308      	movs	r3, #8
 800ea4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea4e:	e14c      	b.n	800ecea <UART_SetConfig+0x7ae>
 800ea50:	2310      	movs	r3, #16
 800ea52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea56:	e148      	b.n	800ecea <UART_SetConfig+0x7ae>
 800ea58:	2320      	movs	r3, #32
 800ea5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea5e:	e144      	b.n	800ecea <UART_SetConfig+0x7ae>
 800ea60:	2340      	movs	r3, #64	; 0x40
 800ea62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea66:	e140      	b.n	800ecea <UART_SetConfig+0x7ae>
 800ea68:	2380      	movs	r3, #128	; 0x80
 800ea6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea6e:	e13c      	b.n	800ecea <UART_SetConfig+0x7ae>
 800ea70:	697b      	ldr	r3, [r7, #20]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	4a41      	ldr	r2, [pc, #260]	; (800eb7c <UART_SetConfig+0x640>)
 800ea76:	4293      	cmp	r3, r2
 800ea78:	f040 8082 	bne.w	800eb80 <UART_SetConfig+0x644>
 800ea7c:	4b3c      	ldr	r3, [pc, #240]	; (800eb70 <UART_SetConfig+0x634>)
 800ea7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ea84:	2b28      	cmp	r3, #40	; 0x28
 800ea86:	d86d      	bhi.n	800eb64 <UART_SetConfig+0x628>
 800ea88:	a201      	add	r2, pc, #4	; (adr r2, 800ea90 <UART_SetConfig+0x554>)
 800ea8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea8e:	bf00      	nop
 800ea90:	0800eb35 	.word	0x0800eb35
 800ea94:	0800eb65 	.word	0x0800eb65
 800ea98:	0800eb65 	.word	0x0800eb65
 800ea9c:	0800eb65 	.word	0x0800eb65
 800eaa0:	0800eb65 	.word	0x0800eb65
 800eaa4:	0800eb65 	.word	0x0800eb65
 800eaa8:	0800eb65 	.word	0x0800eb65
 800eaac:	0800eb65 	.word	0x0800eb65
 800eab0:	0800eb3d 	.word	0x0800eb3d
 800eab4:	0800eb65 	.word	0x0800eb65
 800eab8:	0800eb65 	.word	0x0800eb65
 800eabc:	0800eb65 	.word	0x0800eb65
 800eac0:	0800eb65 	.word	0x0800eb65
 800eac4:	0800eb65 	.word	0x0800eb65
 800eac8:	0800eb65 	.word	0x0800eb65
 800eacc:	0800eb65 	.word	0x0800eb65
 800ead0:	0800eb45 	.word	0x0800eb45
 800ead4:	0800eb65 	.word	0x0800eb65
 800ead8:	0800eb65 	.word	0x0800eb65
 800eadc:	0800eb65 	.word	0x0800eb65
 800eae0:	0800eb65 	.word	0x0800eb65
 800eae4:	0800eb65 	.word	0x0800eb65
 800eae8:	0800eb65 	.word	0x0800eb65
 800eaec:	0800eb65 	.word	0x0800eb65
 800eaf0:	0800eb4d 	.word	0x0800eb4d
 800eaf4:	0800eb65 	.word	0x0800eb65
 800eaf8:	0800eb65 	.word	0x0800eb65
 800eafc:	0800eb65 	.word	0x0800eb65
 800eb00:	0800eb65 	.word	0x0800eb65
 800eb04:	0800eb65 	.word	0x0800eb65
 800eb08:	0800eb65 	.word	0x0800eb65
 800eb0c:	0800eb65 	.word	0x0800eb65
 800eb10:	0800eb55 	.word	0x0800eb55
 800eb14:	0800eb65 	.word	0x0800eb65
 800eb18:	0800eb65 	.word	0x0800eb65
 800eb1c:	0800eb65 	.word	0x0800eb65
 800eb20:	0800eb65 	.word	0x0800eb65
 800eb24:	0800eb65 	.word	0x0800eb65
 800eb28:	0800eb65 	.word	0x0800eb65
 800eb2c:	0800eb65 	.word	0x0800eb65
 800eb30:	0800eb5d 	.word	0x0800eb5d
 800eb34:	2301      	movs	r3, #1
 800eb36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb3a:	e0d6      	b.n	800ecea <UART_SetConfig+0x7ae>
 800eb3c:	2304      	movs	r3, #4
 800eb3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb42:	e0d2      	b.n	800ecea <UART_SetConfig+0x7ae>
 800eb44:	2308      	movs	r3, #8
 800eb46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb4a:	e0ce      	b.n	800ecea <UART_SetConfig+0x7ae>
 800eb4c:	2310      	movs	r3, #16
 800eb4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb52:	e0ca      	b.n	800ecea <UART_SetConfig+0x7ae>
 800eb54:	2320      	movs	r3, #32
 800eb56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb5a:	e0c6      	b.n	800ecea <UART_SetConfig+0x7ae>
 800eb5c:	2340      	movs	r3, #64	; 0x40
 800eb5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb62:	e0c2      	b.n	800ecea <UART_SetConfig+0x7ae>
 800eb64:	2380      	movs	r3, #128	; 0x80
 800eb66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb6a:	e0be      	b.n	800ecea <UART_SetConfig+0x7ae>
 800eb6c:	40011400 	.word	0x40011400
 800eb70:	58024400 	.word	0x58024400
 800eb74:	40007800 	.word	0x40007800
 800eb78:	40007c00 	.word	0x40007c00
 800eb7c:	40011800 	.word	0x40011800
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	4aad      	ldr	r2, [pc, #692]	; (800ee3c <UART_SetConfig+0x900>)
 800eb86:	4293      	cmp	r3, r2
 800eb88:	d176      	bne.n	800ec78 <UART_SetConfig+0x73c>
 800eb8a:	4bad      	ldr	r3, [pc, #692]	; (800ee40 <UART_SetConfig+0x904>)
 800eb8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800eb92:	2b28      	cmp	r3, #40	; 0x28
 800eb94:	d86c      	bhi.n	800ec70 <UART_SetConfig+0x734>
 800eb96:	a201      	add	r2, pc, #4	; (adr r2, 800eb9c <UART_SetConfig+0x660>)
 800eb98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb9c:	0800ec41 	.word	0x0800ec41
 800eba0:	0800ec71 	.word	0x0800ec71
 800eba4:	0800ec71 	.word	0x0800ec71
 800eba8:	0800ec71 	.word	0x0800ec71
 800ebac:	0800ec71 	.word	0x0800ec71
 800ebb0:	0800ec71 	.word	0x0800ec71
 800ebb4:	0800ec71 	.word	0x0800ec71
 800ebb8:	0800ec71 	.word	0x0800ec71
 800ebbc:	0800ec49 	.word	0x0800ec49
 800ebc0:	0800ec71 	.word	0x0800ec71
 800ebc4:	0800ec71 	.word	0x0800ec71
 800ebc8:	0800ec71 	.word	0x0800ec71
 800ebcc:	0800ec71 	.word	0x0800ec71
 800ebd0:	0800ec71 	.word	0x0800ec71
 800ebd4:	0800ec71 	.word	0x0800ec71
 800ebd8:	0800ec71 	.word	0x0800ec71
 800ebdc:	0800ec51 	.word	0x0800ec51
 800ebe0:	0800ec71 	.word	0x0800ec71
 800ebe4:	0800ec71 	.word	0x0800ec71
 800ebe8:	0800ec71 	.word	0x0800ec71
 800ebec:	0800ec71 	.word	0x0800ec71
 800ebf0:	0800ec71 	.word	0x0800ec71
 800ebf4:	0800ec71 	.word	0x0800ec71
 800ebf8:	0800ec71 	.word	0x0800ec71
 800ebfc:	0800ec59 	.word	0x0800ec59
 800ec00:	0800ec71 	.word	0x0800ec71
 800ec04:	0800ec71 	.word	0x0800ec71
 800ec08:	0800ec71 	.word	0x0800ec71
 800ec0c:	0800ec71 	.word	0x0800ec71
 800ec10:	0800ec71 	.word	0x0800ec71
 800ec14:	0800ec71 	.word	0x0800ec71
 800ec18:	0800ec71 	.word	0x0800ec71
 800ec1c:	0800ec61 	.word	0x0800ec61
 800ec20:	0800ec71 	.word	0x0800ec71
 800ec24:	0800ec71 	.word	0x0800ec71
 800ec28:	0800ec71 	.word	0x0800ec71
 800ec2c:	0800ec71 	.word	0x0800ec71
 800ec30:	0800ec71 	.word	0x0800ec71
 800ec34:	0800ec71 	.word	0x0800ec71
 800ec38:	0800ec71 	.word	0x0800ec71
 800ec3c:	0800ec69 	.word	0x0800ec69
 800ec40:	2301      	movs	r3, #1
 800ec42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec46:	e050      	b.n	800ecea <UART_SetConfig+0x7ae>
 800ec48:	2304      	movs	r3, #4
 800ec4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec4e:	e04c      	b.n	800ecea <UART_SetConfig+0x7ae>
 800ec50:	2308      	movs	r3, #8
 800ec52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec56:	e048      	b.n	800ecea <UART_SetConfig+0x7ae>
 800ec58:	2310      	movs	r3, #16
 800ec5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec5e:	e044      	b.n	800ecea <UART_SetConfig+0x7ae>
 800ec60:	2320      	movs	r3, #32
 800ec62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec66:	e040      	b.n	800ecea <UART_SetConfig+0x7ae>
 800ec68:	2340      	movs	r3, #64	; 0x40
 800ec6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec6e:	e03c      	b.n	800ecea <UART_SetConfig+0x7ae>
 800ec70:	2380      	movs	r3, #128	; 0x80
 800ec72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec76:	e038      	b.n	800ecea <UART_SetConfig+0x7ae>
 800ec78:	697b      	ldr	r3, [r7, #20]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	4a71      	ldr	r2, [pc, #452]	; (800ee44 <UART_SetConfig+0x908>)
 800ec7e:	4293      	cmp	r3, r2
 800ec80:	d130      	bne.n	800ece4 <UART_SetConfig+0x7a8>
 800ec82:	4b6f      	ldr	r3, [pc, #444]	; (800ee40 <UART_SetConfig+0x904>)
 800ec84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec86:	f003 0307 	and.w	r3, r3, #7
 800ec8a:	2b05      	cmp	r3, #5
 800ec8c:	d826      	bhi.n	800ecdc <UART_SetConfig+0x7a0>
 800ec8e:	a201      	add	r2, pc, #4	; (adr r2, 800ec94 <UART_SetConfig+0x758>)
 800ec90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec94:	0800ecad 	.word	0x0800ecad
 800ec98:	0800ecb5 	.word	0x0800ecb5
 800ec9c:	0800ecbd 	.word	0x0800ecbd
 800eca0:	0800ecc5 	.word	0x0800ecc5
 800eca4:	0800eccd 	.word	0x0800eccd
 800eca8:	0800ecd5 	.word	0x0800ecd5
 800ecac:	2302      	movs	r3, #2
 800ecae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecb2:	e01a      	b.n	800ecea <UART_SetConfig+0x7ae>
 800ecb4:	2304      	movs	r3, #4
 800ecb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecba:	e016      	b.n	800ecea <UART_SetConfig+0x7ae>
 800ecbc:	2308      	movs	r3, #8
 800ecbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecc2:	e012      	b.n	800ecea <UART_SetConfig+0x7ae>
 800ecc4:	2310      	movs	r3, #16
 800ecc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecca:	e00e      	b.n	800ecea <UART_SetConfig+0x7ae>
 800eccc:	2320      	movs	r3, #32
 800ecce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecd2:	e00a      	b.n	800ecea <UART_SetConfig+0x7ae>
 800ecd4:	2340      	movs	r3, #64	; 0x40
 800ecd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecda:	e006      	b.n	800ecea <UART_SetConfig+0x7ae>
 800ecdc:	2380      	movs	r3, #128	; 0x80
 800ecde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ece2:	e002      	b.n	800ecea <UART_SetConfig+0x7ae>
 800ece4:	2380      	movs	r3, #128	; 0x80
 800ece6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ecea:	697b      	ldr	r3, [r7, #20]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	4a55      	ldr	r2, [pc, #340]	; (800ee44 <UART_SetConfig+0x908>)
 800ecf0:	4293      	cmp	r3, r2
 800ecf2:	f040 80f8 	bne.w	800eee6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ecf6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ecfa:	2b20      	cmp	r3, #32
 800ecfc:	dc46      	bgt.n	800ed8c <UART_SetConfig+0x850>
 800ecfe:	2b02      	cmp	r3, #2
 800ed00:	db75      	blt.n	800edee <UART_SetConfig+0x8b2>
 800ed02:	3b02      	subs	r3, #2
 800ed04:	2b1e      	cmp	r3, #30
 800ed06:	d872      	bhi.n	800edee <UART_SetConfig+0x8b2>
 800ed08:	a201      	add	r2, pc, #4	; (adr r2, 800ed10 <UART_SetConfig+0x7d4>)
 800ed0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed0e:	bf00      	nop
 800ed10:	0800ed93 	.word	0x0800ed93
 800ed14:	0800edef 	.word	0x0800edef
 800ed18:	0800ed9b 	.word	0x0800ed9b
 800ed1c:	0800edef 	.word	0x0800edef
 800ed20:	0800edef 	.word	0x0800edef
 800ed24:	0800edef 	.word	0x0800edef
 800ed28:	0800edab 	.word	0x0800edab
 800ed2c:	0800edef 	.word	0x0800edef
 800ed30:	0800edef 	.word	0x0800edef
 800ed34:	0800edef 	.word	0x0800edef
 800ed38:	0800edef 	.word	0x0800edef
 800ed3c:	0800edef 	.word	0x0800edef
 800ed40:	0800edef 	.word	0x0800edef
 800ed44:	0800edef 	.word	0x0800edef
 800ed48:	0800edbb 	.word	0x0800edbb
 800ed4c:	0800edef 	.word	0x0800edef
 800ed50:	0800edef 	.word	0x0800edef
 800ed54:	0800edef 	.word	0x0800edef
 800ed58:	0800edef 	.word	0x0800edef
 800ed5c:	0800edef 	.word	0x0800edef
 800ed60:	0800edef 	.word	0x0800edef
 800ed64:	0800edef 	.word	0x0800edef
 800ed68:	0800edef 	.word	0x0800edef
 800ed6c:	0800edef 	.word	0x0800edef
 800ed70:	0800edef 	.word	0x0800edef
 800ed74:	0800edef 	.word	0x0800edef
 800ed78:	0800edef 	.word	0x0800edef
 800ed7c:	0800edef 	.word	0x0800edef
 800ed80:	0800edef 	.word	0x0800edef
 800ed84:	0800edef 	.word	0x0800edef
 800ed88:	0800ede1 	.word	0x0800ede1
 800ed8c:	2b40      	cmp	r3, #64	; 0x40
 800ed8e:	d02a      	beq.n	800ede6 <UART_SetConfig+0x8aa>
 800ed90:	e02d      	b.n	800edee <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ed92:	f7fe f879 	bl	800ce88 <HAL_RCCEx_GetD3PCLK1Freq>
 800ed96:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ed98:	e02f      	b.n	800edfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ed9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f7fe f888 	bl	800ceb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800eda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eda6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eda8:	e027      	b.n	800edfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800edaa:	f107 0318 	add.w	r3, r7, #24
 800edae:	4618      	mov	r0, r3
 800edb0:	f7fe f9d4 	bl	800d15c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800edb4:	69fb      	ldr	r3, [r7, #28]
 800edb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800edb8:	e01f      	b.n	800edfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800edba:	4b21      	ldr	r3, [pc, #132]	; (800ee40 <UART_SetConfig+0x904>)
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	f003 0320 	and.w	r3, r3, #32
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d009      	beq.n	800edda <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800edc6:	4b1e      	ldr	r3, [pc, #120]	; (800ee40 <UART_SetConfig+0x904>)
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	08db      	lsrs	r3, r3, #3
 800edcc:	f003 0303 	and.w	r3, r3, #3
 800edd0:	4a1d      	ldr	r2, [pc, #116]	; (800ee48 <UART_SetConfig+0x90c>)
 800edd2:	fa22 f303 	lsr.w	r3, r2, r3
 800edd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800edd8:	e00f      	b.n	800edfa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800edda:	4b1b      	ldr	r3, [pc, #108]	; (800ee48 <UART_SetConfig+0x90c>)
 800eddc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800edde:	e00c      	b.n	800edfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ede0:	4b1a      	ldr	r3, [pc, #104]	; (800ee4c <UART_SetConfig+0x910>)
 800ede2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ede4:	e009      	b.n	800edfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ede6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800edea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800edec:	e005      	b.n	800edfa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800edee:	2300      	movs	r3, #0
 800edf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800edf2:	2301      	movs	r3, #1
 800edf4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800edf8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800edfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	f000 81ee 	beq.w	800f1de <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ee02:	697b      	ldr	r3, [r7, #20]
 800ee04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee06:	4a12      	ldr	r2, [pc, #72]	; (800ee50 <UART_SetConfig+0x914>)
 800ee08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee0c:	461a      	mov	r2, r3
 800ee0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee10:	fbb3 f3f2 	udiv	r3, r3, r2
 800ee14:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ee16:	697b      	ldr	r3, [r7, #20]
 800ee18:	685a      	ldr	r2, [r3, #4]
 800ee1a:	4613      	mov	r3, r2
 800ee1c:	005b      	lsls	r3, r3, #1
 800ee1e:	4413      	add	r3, r2
 800ee20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee22:	429a      	cmp	r2, r3
 800ee24:	d305      	bcc.n	800ee32 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ee26:	697b      	ldr	r3, [r7, #20]
 800ee28:	685b      	ldr	r3, [r3, #4]
 800ee2a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ee2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee2e:	429a      	cmp	r2, r3
 800ee30:	d910      	bls.n	800ee54 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800ee32:	2301      	movs	r3, #1
 800ee34:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ee38:	e1d1      	b.n	800f1de <UART_SetConfig+0xca2>
 800ee3a:	bf00      	nop
 800ee3c:	40011c00 	.word	0x40011c00
 800ee40:	58024400 	.word	0x58024400
 800ee44:	58000c00 	.word	0x58000c00
 800ee48:	03d09000 	.word	0x03d09000
 800ee4c:	003d0900 	.word	0x003d0900
 800ee50:	0801d310 	.word	0x0801d310
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ee54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee56:	2200      	movs	r2, #0
 800ee58:	60bb      	str	r3, [r7, #8]
 800ee5a:	60fa      	str	r2, [r7, #12]
 800ee5c:	697b      	ldr	r3, [r7, #20]
 800ee5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee60:	4ac0      	ldr	r2, [pc, #768]	; (800f164 <UART_SetConfig+0xc28>)
 800ee62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee66:	b29b      	uxth	r3, r3
 800ee68:	2200      	movs	r2, #0
 800ee6a:	603b      	str	r3, [r7, #0]
 800ee6c:	607a      	str	r2, [r7, #4]
 800ee6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ee76:	f7f1 fa8b 	bl	8000390 <__aeabi_uldivmod>
 800ee7a:	4602      	mov	r2, r0
 800ee7c:	460b      	mov	r3, r1
 800ee7e:	4610      	mov	r0, r2
 800ee80:	4619      	mov	r1, r3
 800ee82:	f04f 0200 	mov.w	r2, #0
 800ee86:	f04f 0300 	mov.w	r3, #0
 800ee8a:	020b      	lsls	r3, r1, #8
 800ee8c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ee90:	0202      	lsls	r2, r0, #8
 800ee92:	6979      	ldr	r1, [r7, #20]
 800ee94:	6849      	ldr	r1, [r1, #4]
 800ee96:	0849      	lsrs	r1, r1, #1
 800ee98:	2000      	movs	r0, #0
 800ee9a:	460c      	mov	r4, r1
 800ee9c:	4605      	mov	r5, r0
 800ee9e:	eb12 0804 	adds.w	r8, r2, r4
 800eea2:	eb43 0905 	adc.w	r9, r3, r5
 800eea6:	697b      	ldr	r3, [r7, #20]
 800eea8:	685b      	ldr	r3, [r3, #4]
 800eeaa:	2200      	movs	r2, #0
 800eeac:	469a      	mov	sl, r3
 800eeae:	4693      	mov	fp, r2
 800eeb0:	4652      	mov	r2, sl
 800eeb2:	465b      	mov	r3, fp
 800eeb4:	4640      	mov	r0, r8
 800eeb6:	4649      	mov	r1, r9
 800eeb8:	f7f1 fa6a 	bl	8000390 <__aeabi_uldivmod>
 800eebc:	4602      	mov	r2, r0
 800eebe:	460b      	mov	r3, r1
 800eec0:	4613      	mov	r3, r2
 800eec2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800eec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eec6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800eeca:	d308      	bcc.n	800eede <UART_SetConfig+0x9a2>
 800eecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eece:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eed2:	d204      	bcs.n	800eede <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800eed4:	697b      	ldr	r3, [r7, #20]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eeda:	60da      	str	r2, [r3, #12]
 800eedc:	e17f      	b.n	800f1de <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800eede:	2301      	movs	r3, #1
 800eee0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800eee4:	e17b      	b.n	800f1de <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800eee6:	697b      	ldr	r3, [r7, #20]
 800eee8:	69db      	ldr	r3, [r3, #28]
 800eeea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eeee:	f040 80bd 	bne.w	800f06c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800eef2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800eef6:	2b20      	cmp	r3, #32
 800eef8:	dc48      	bgt.n	800ef8c <UART_SetConfig+0xa50>
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	db7b      	blt.n	800eff6 <UART_SetConfig+0xaba>
 800eefe:	2b20      	cmp	r3, #32
 800ef00:	d879      	bhi.n	800eff6 <UART_SetConfig+0xaba>
 800ef02:	a201      	add	r2, pc, #4	; (adr r2, 800ef08 <UART_SetConfig+0x9cc>)
 800ef04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef08:	0800ef93 	.word	0x0800ef93
 800ef0c:	0800ef9b 	.word	0x0800ef9b
 800ef10:	0800eff7 	.word	0x0800eff7
 800ef14:	0800eff7 	.word	0x0800eff7
 800ef18:	0800efa3 	.word	0x0800efa3
 800ef1c:	0800eff7 	.word	0x0800eff7
 800ef20:	0800eff7 	.word	0x0800eff7
 800ef24:	0800eff7 	.word	0x0800eff7
 800ef28:	0800efb3 	.word	0x0800efb3
 800ef2c:	0800eff7 	.word	0x0800eff7
 800ef30:	0800eff7 	.word	0x0800eff7
 800ef34:	0800eff7 	.word	0x0800eff7
 800ef38:	0800eff7 	.word	0x0800eff7
 800ef3c:	0800eff7 	.word	0x0800eff7
 800ef40:	0800eff7 	.word	0x0800eff7
 800ef44:	0800eff7 	.word	0x0800eff7
 800ef48:	0800efc3 	.word	0x0800efc3
 800ef4c:	0800eff7 	.word	0x0800eff7
 800ef50:	0800eff7 	.word	0x0800eff7
 800ef54:	0800eff7 	.word	0x0800eff7
 800ef58:	0800eff7 	.word	0x0800eff7
 800ef5c:	0800eff7 	.word	0x0800eff7
 800ef60:	0800eff7 	.word	0x0800eff7
 800ef64:	0800eff7 	.word	0x0800eff7
 800ef68:	0800eff7 	.word	0x0800eff7
 800ef6c:	0800eff7 	.word	0x0800eff7
 800ef70:	0800eff7 	.word	0x0800eff7
 800ef74:	0800eff7 	.word	0x0800eff7
 800ef78:	0800eff7 	.word	0x0800eff7
 800ef7c:	0800eff7 	.word	0x0800eff7
 800ef80:	0800eff7 	.word	0x0800eff7
 800ef84:	0800eff7 	.word	0x0800eff7
 800ef88:	0800efe9 	.word	0x0800efe9
 800ef8c:	2b40      	cmp	r3, #64	; 0x40
 800ef8e:	d02e      	beq.n	800efee <UART_SetConfig+0xab2>
 800ef90:	e031      	b.n	800eff6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ef92:	f7fc fd8f 	bl	800bab4 <HAL_RCC_GetPCLK1Freq>
 800ef96:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ef98:	e033      	b.n	800f002 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ef9a:	f7fc fda1 	bl	800bae0 <HAL_RCC_GetPCLK2Freq>
 800ef9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800efa0:	e02f      	b.n	800f002 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800efa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800efa6:	4618      	mov	r0, r3
 800efa8:	f7fd ff84 	bl	800ceb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800efac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800efb0:	e027      	b.n	800f002 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800efb2:	f107 0318 	add.w	r3, r7, #24
 800efb6:	4618      	mov	r0, r3
 800efb8:	f7fe f8d0 	bl	800d15c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800efbc:	69fb      	ldr	r3, [r7, #28]
 800efbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800efc0:	e01f      	b.n	800f002 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800efc2:	4b69      	ldr	r3, [pc, #420]	; (800f168 <UART_SetConfig+0xc2c>)
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	f003 0320 	and.w	r3, r3, #32
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d009      	beq.n	800efe2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800efce:	4b66      	ldr	r3, [pc, #408]	; (800f168 <UART_SetConfig+0xc2c>)
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	08db      	lsrs	r3, r3, #3
 800efd4:	f003 0303 	and.w	r3, r3, #3
 800efd8:	4a64      	ldr	r2, [pc, #400]	; (800f16c <UART_SetConfig+0xc30>)
 800efda:	fa22 f303 	lsr.w	r3, r2, r3
 800efde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800efe0:	e00f      	b.n	800f002 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800efe2:	4b62      	ldr	r3, [pc, #392]	; (800f16c <UART_SetConfig+0xc30>)
 800efe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800efe6:	e00c      	b.n	800f002 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800efe8:	4b61      	ldr	r3, [pc, #388]	; (800f170 <UART_SetConfig+0xc34>)
 800efea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800efec:	e009      	b.n	800f002 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800efee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eff4:	e005      	b.n	800f002 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800eff6:	2300      	movs	r3, #0
 800eff8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800effa:	2301      	movs	r3, #1
 800effc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f000:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f004:	2b00      	cmp	r3, #0
 800f006:	f000 80ea 	beq.w	800f1de <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f00a:	697b      	ldr	r3, [r7, #20]
 800f00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f00e:	4a55      	ldr	r2, [pc, #340]	; (800f164 <UART_SetConfig+0xc28>)
 800f010:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f014:	461a      	mov	r2, r3
 800f016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f018:	fbb3 f3f2 	udiv	r3, r3, r2
 800f01c:	005a      	lsls	r2, r3, #1
 800f01e:	697b      	ldr	r3, [r7, #20]
 800f020:	685b      	ldr	r3, [r3, #4]
 800f022:	085b      	lsrs	r3, r3, #1
 800f024:	441a      	add	r2, r3
 800f026:	697b      	ldr	r3, [r7, #20]
 800f028:	685b      	ldr	r3, [r3, #4]
 800f02a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f02e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f032:	2b0f      	cmp	r3, #15
 800f034:	d916      	bls.n	800f064 <UART_SetConfig+0xb28>
 800f036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f03c:	d212      	bcs.n	800f064 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f040:	b29b      	uxth	r3, r3
 800f042:	f023 030f 	bic.w	r3, r3, #15
 800f046:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f04a:	085b      	lsrs	r3, r3, #1
 800f04c:	b29b      	uxth	r3, r3
 800f04e:	f003 0307 	and.w	r3, r3, #7
 800f052:	b29a      	uxth	r2, r3
 800f054:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f056:	4313      	orrs	r3, r2
 800f058:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f05a:	697b      	ldr	r3, [r7, #20]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f060:	60da      	str	r2, [r3, #12]
 800f062:	e0bc      	b.n	800f1de <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f064:	2301      	movs	r3, #1
 800f066:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f06a:	e0b8      	b.n	800f1de <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f06c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f070:	2b20      	cmp	r3, #32
 800f072:	dc4b      	bgt.n	800f10c <UART_SetConfig+0xbd0>
 800f074:	2b00      	cmp	r3, #0
 800f076:	f2c0 8087 	blt.w	800f188 <UART_SetConfig+0xc4c>
 800f07a:	2b20      	cmp	r3, #32
 800f07c:	f200 8084 	bhi.w	800f188 <UART_SetConfig+0xc4c>
 800f080:	a201      	add	r2, pc, #4	; (adr r2, 800f088 <UART_SetConfig+0xb4c>)
 800f082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f086:	bf00      	nop
 800f088:	0800f113 	.word	0x0800f113
 800f08c:	0800f11b 	.word	0x0800f11b
 800f090:	0800f189 	.word	0x0800f189
 800f094:	0800f189 	.word	0x0800f189
 800f098:	0800f123 	.word	0x0800f123
 800f09c:	0800f189 	.word	0x0800f189
 800f0a0:	0800f189 	.word	0x0800f189
 800f0a4:	0800f189 	.word	0x0800f189
 800f0a8:	0800f133 	.word	0x0800f133
 800f0ac:	0800f189 	.word	0x0800f189
 800f0b0:	0800f189 	.word	0x0800f189
 800f0b4:	0800f189 	.word	0x0800f189
 800f0b8:	0800f189 	.word	0x0800f189
 800f0bc:	0800f189 	.word	0x0800f189
 800f0c0:	0800f189 	.word	0x0800f189
 800f0c4:	0800f189 	.word	0x0800f189
 800f0c8:	0800f143 	.word	0x0800f143
 800f0cc:	0800f189 	.word	0x0800f189
 800f0d0:	0800f189 	.word	0x0800f189
 800f0d4:	0800f189 	.word	0x0800f189
 800f0d8:	0800f189 	.word	0x0800f189
 800f0dc:	0800f189 	.word	0x0800f189
 800f0e0:	0800f189 	.word	0x0800f189
 800f0e4:	0800f189 	.word	0x0800f189
 800f0e8:	0800f189 	.word	0x0800f189
 800f0ec:	0800f189 	.word	0x0800f189
 800f0f0:	0800f189 	.word	0x0800f189
 800f0f4:	0800f189 	.word	0x0800f189
 800f0f8:	0800f189 	.word	0x0800f189
 800f0fc:	0800f189 	.word	0x0800f189
 800f100:	0800f189 	.word	0x0800f189
 800f104:	0800f189 	.word	0x0800f189
 800f108:	0800f17b 	.word	0x0800f17b
 800f10c:	2b40      	cmp	r3, #64	; 0x40
 800f10e:	d037      	beq.n	800f180 <UART_SetConfig+0xc44>
 800f110:	e03a      	b.n	800f188 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f112:	f7fc fccf 	bl	800bab4 <HAL_RCC_GetPCLK1Freq>
 800f116:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f118:	e03c      	b.n	800f194 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f11a:	f7fc fce1 	bl	800bae0 <HAL_RCC_GetPCLK2Freq>
 800f11e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f120:	e038      	b.n	800f194 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f126:	4618      	mov	r0, r3
 800f128:	f7fd fec4 	bl	800ceb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f12e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f130:	e030      	b.n	800f194 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f132:	f107 0318 	add.w	r3, r7, #24
 800f136:	4618      	mov	r0, r3
 800f138:	f7fe f810 	bl	800d15c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f13c:	69fb      	ldr	r3, [r7, #28]
 800f13e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f140:	e028      	b.n	800f194 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f142:	4b09      	ldr	r3, [pc, #36]	; (800f168 <UART_SetConfig+0xc2c>)
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	f003 0320 	and.w	r3, r3, #32
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d012      	beq.n	800f174 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f14e:	4b06      	ldr	r3, [pc, #24]	; (800f168 <UART_SetConfig+0xc2c>)
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	08db      	lsrs	r3, r3, #3
 800f154:	f003 0303 	and.w	r3, r3, #3
 800f158:	4a04      	ldr	r2, [pc, #16]	; (800f16c <UART_SetConfig+0xc30>)
 800f15a:	fa22 f303 	lsr.w	r3, r2, r3
 800f15e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f160:	e018      	b.n	800f194 <UART_SetConfig+0xc58>
 800f162:	bf00      	nop
 800f164:	0801d310 	.word	0x0801d310
 800f168:	58024400 	.word	0x58024400
 800f16c:	03d09000 	.word	0x03d09000
 800f170:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800f174:	4b24      	ldr	r3, [pc, #144]	; (800f208 <UART_SetConfig+0xccc>)
 800f176:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f178:	e00c      	b.n	800f194 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f17a:	4b24      	ldr	r3, [pc, #144]	; (800f20c <UART_SetConfig+0xcd0>)
 800f17c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f17e:	e009      	b.n	800f194 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f180:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f184:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f186:	e005      	b.n	800f194 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800f188:	2300      	movs	r3, #0
 800f18a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f18c:	2301      	movs	r3, #1
 800f18e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f192:	bf00      	nop
    }

    if (pclk != 0U)
 800f194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f196:	2b00      	cmp	r3, #0
 800f198:	d021      	beq.n	800f1de <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f19a:	697b      	ldr	r3, [r7, #20]
 800f19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f19e:	4a1c      	ldr	r2, [pc, #112]	; (800f210 <UART_SetConfig+0xcd4>)
 800f1a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f1a4:	461a      	mov	r2, r3
 800f1a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1a8:	fbb3 f2f2 	udiv	r2, r3, r2
 800f1ac:	697b      	ldr	r3, [r7, #20]
 800f1ae:	685b      	ldr	r3, [r3, #4]
 800f1b0:	085b      	lsrs	r3, r3, #1
 800f1b2:	441a      	add	r2, r3
 800f1b4:	697b      	ldr	r3, [r7, #20]
 800f1b6:	685b      	ldr	r3, [r3, #4]
 800f1b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f1bc:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1c0:	2b0f      	cmp	r3, #15
 800f1c2:	d909      	bls.n	800f1d8 <UART_SetConfig+0xc9c>
 800f1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f1ca:	d205      	bcs.n	800f1d8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ce:	b29a      	uxth	r2, r3
 800f1d0:	697b      	ldr	r3, [r7, #20]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	60da      	str	r2, [r3, #12]
 800f1d6:	e002      	b.n	800f1de <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f1d8:	2301      	movs	r3, #1
 800f1da:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f1de:	697b      	ldr	r3, [r7, #20]
 800f1e0:	2201      	movs	r2, #1
 800f1e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f1e6:	697b      	ldr	r3, [r7, #20]
 800f1e8:	2201      	movs	r2, #1
 800f1ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f1ee:	697b      	ldr	r3, [r7, #20]
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f1f4:	697b      	ldr	r3, [r7, #20]
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f1fa:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	3748      	adds	r7, #72	; 0x48
 800f202:	46bd      	mov	sp, r7
 800f204:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f208:	03d09000 	.word	0x03d09000
 800f20c:	003d0900 	.word	0x003d0900
 800f210:	0801d310 	.word	0x0801d310

0800f214 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f214:	b480      	push	{r7}
 800f216:	b083      	sub	sp, #12
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f220:	f003 0301 	and.w	r3, r3, #1
 800f224:	2b00      	cmp	r3, #0
 800f226:	d00a      	beq.n	800f23e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	685b      	ldr	r3, [r3, #4]
 800f22e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	430a      	orrs	r2, r1
 800f23c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f242:	f003 0302 	and.w	r3, r3, #2
 800f246:	2b00      	cmp	r3, #0
 800f248:	d00a      	beq.n	800f260 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	685b      	ldr	r3, [r3, #4]
 800f250:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	430a      	orrs	r2, r1
 800f25e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f264:	f003 0304 	and.w	r3, r3, #4
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d00a      	beq.n	800f282 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	685b      	ldr	r3, [r3, #4]
 800f272:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	430a      	orrs	r2, r1
 800f280:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f286:	f003 0308 	and.w	r3, r3, #8
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d00a      	beq.n	800f2a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	685b      	ldr	r3, [r3, #4]
 800f294:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	430a      	orrs	r2, r1
 800f2a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2a8:	f003 0310 	and.w	r3, r3, #16
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d00a      	beq.n	800f2c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	689b      	ldr	r3, [r3, #8]
 800f2b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	430a      	orrs	r2, r1
 800f2c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2ca:	f003 0320 	and.w	r3, r3, #32
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d00a      	beq.n	800f2e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	689b      	ldr	r3, [r3, #8]
 800f2d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	430a      	orrs	r2, r1
 800f2e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d01a      	beq.n	800f32a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	685b      	ldr	r3, [r3, #4]
 800f2fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	430a      	orrs	r2, r1
 800f308:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f30e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f312:	d10a      	bne.n	800f32a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	685b      	ldr	r3, [r3, #4]
 800f31a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	430a      	orrs	r2, r1
 800f328:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f32e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f332:	2b00      	cmp	r3, #0
 800f334:	d00a      	beq.n	800f34c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	685b      	ldr	r3, [r3, #4]
 800f33c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	430a      	orrs	r2, r1
 800f34a:	605a      	str	r2, [r3, #4]
  }
}
 800f34c:	bf00      	nop
 800f34e:	370c      	adds	r7, #12
 800f350:	46bd      	mov	sp, r7
 800f352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f356:	4770      	bx	lr

0800f358 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b098      	sub	sp, #96	; 0x60
 800f35c:	af02      	add	r7, sp, #8
 800f35e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	2200      	movs	r2, #0
 800f364:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f368:	f7f5 fa0e 	bl	8004788 <HAL_GetTick>
 800f36c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	f003 0308 	and.w	r3, r3, #8
 800f378:	2b08      	cmp	r3, #8
 800f37a:	d12f      	bne.n	800f3dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f37c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f380:	9300      	str	r3, [sp, #0]
 800f382:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f384:	2200      	movs	r2, #0
 800f386:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	f000 f88e 	bl	800f4ac <UART_WaitOnFlagUntilTimeout>
 800f390:	4603      	mov	r3, r0
 800f392:	2b00      	cmp	r3, #0
 800f394:	d022      	beq.n	800f3dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f39e:	e853 3f00 	ldrex	r3, [r3]
 800f3a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f3a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f3aa:	653b      	str	r3, [r7, #80]	; 0x50
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	461a      	mov	r2, r3
 800f3b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3b4:	647b      	str	r3, [r7, #68]	; 0x44
 800f3b6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f3ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f3bc:	e841 2300 	strex	r3, r2, [r1]
 800f3c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f3c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d1e6      	bne.n	800f396 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	2220      	movs	r2, #32
 800f3cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f3d8:	2303      	movs	r3, #3
 800f3da:	e063      	b.n	800f4a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	f003 0304 	and.w	r3, r3, #4
 800f3e6:	2b04      	cmp	r3, #4
 800f3e8:	d149      	bne.n	800f47e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f3ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f3ee:	9300      	str	r3, [sp, #0]
 800f3f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f3f8:	6878      	ldr	r0, [r7, #4]
 800f3fa:	f000 f857 	bl	800f4ac <UART_WaitOnFlagUntilTimeout>
 800f3fe:	4603      	mov	r3, r0
 800f400:	2b00      	cmp	r3, #0
 800f402:	d03c      	beq.n	800f47e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f40c:	e853 3f00 	ldrex	r3, [r3]
 800f410:	623b      	str	r3, [r7, #32]
   return(result);
 800f412:	6a3b      	ldr	r3, [r7, #32]
 800f414:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f418:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	461a      	mov	r2, r3
 800f420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f422:	633b      	str	r3, [r7, #48]	; 0x30
 800f424:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f426:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f42a:	e841 2300 	strex	r3, r2, [r1]
 800f42e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f432:	2b00      	cmp	r3, #0
 800f434:	d1e6      	bne.n	800f404 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	3308      	adds	r3, #8
 800f43c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f43e:	693b      	ldr	r3, [r7, #16]
 800f440:	e853 3f00 	ldrex	r3, [r3]
 800f444:	60fb      	str	r3, [r7, #12]
   return(result);
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	f023 0301 	bic.w	r3, r3, #1
 800f44c:	64bb      	str	r3, [r7, #72]	; 0x48
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	3308      	adds	r3, #8
 800f454:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f456:	61fa      	str	r2, [r7, #28]
 800f458:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f45a:	69b9      	ldr	r1, [r7, #24]
 800f45c:	69fa      	ldr	r2, [r7, #28]
 800f45e:	e841 2300 	strex	r3, r2, [r1]
 800f462:	617b      	str	r3, [r7, #20]
   return(result);
 800f464:	697b      	ldr	r3, [r7, #20]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d1e5      	bne.n	800f436 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	2220      	movs	r2, #32
 800f46e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	2200      	movs	r2, #0
 800f476:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f47a:	2303      	movs	r3, #3
 800f47c:	e012      	b.n	800f4a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	2220      	movs	r2, #32
 800f482:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	2220      	movs	r2, #32
 800f48a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	2200      	movs	r2, #0
 800f492:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	2200      	movs	r2, #0
 800f498:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	2200      	movs	r2, #0
 800f49e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f4a2:	2300      	movs	r3, #0
}
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	3758      	adds	r7, #88	; 0x58
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	bd80      	pop	{r7, pc}

0800f4ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b084      	sub	sp, #16
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	60f8      	str	r0, [r7, #12]
 800f4b4:	60b9      	str	r1, [r7, #8]
 800f4b6:	603b      	str	r3, [r7, #0]
 800f4b8:	4613      	mov	r3, r2
 800f4ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f4bc:	e049      	b.n	800f552 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f4be:	69bb      	ldr	r3, [r7, #24]
 800f4c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4c4:	d045      	beq.n	800f552 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f4c6:	f7f5 f95f 	bl	8004788 <HAL_GetTick>
 800f4ca:	4602      	mov	r2, r0
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	1ad3      	subs	r3, r2, r3
 800f4d0:	69ba      	ldr	r2, [r7, #24]
 800f4d2:	429a      	cmp	r2, r3
 800f4d4:	d302      	bcc.n	800f4dc <UART_WaitOnFlagUntilTimeout+0x30>
 800f4d6:	69bb      	ldr	r3, [r7, #24]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d101      	bne.n	800f4e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f4dc:	2303      	movs	r3, #3
 800f4de:	e048      	b.n	800f572 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	f003 0304 	and.w	r3, r3, #4
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d031      	beq.n	800f552 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	69db      	ldr	r3, [r3, #28]
 800f4f4:	f003 0308 	and.w	r3, r3, #8
 800f4f8:	2b08      	cmp	r3, #8
 800f4fa:	d110      	bne.n	800f51e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	2208      	movs	r2, #8
 800f502:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800f504:	68f8      	ldr	r0, [r7, #12]
 800f506:	f000 f839 	bl	800f57c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	2208      	movs	r2, #8
 800f50e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	2200      	movs	r2, #0
 800f516:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800f51a:	2301      	movs	r3, #1
 800f51c:	e029      	b.n	800f572 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	69db      	ldr	r3, [r3, #28]
 800f524:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f528:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f52c:	d111      	bne.n	800f552 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f536:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f538:	68f8      	ldr	r0, [r7, #12]
 800f53a:	f000 f81f 	bl	800f57c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	2220      	movs	r2, #32
 800f542:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	2200      	movs	r2, #0
 800f54a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f54e:	2303      	movs	r3, #3
 800f550:	e00f      	b.n	800f572 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	69da      	ldr	r2, [r3, #28]
 800f558:	68bb      	ldr	r3, [r7, #8]
 800f55a:	4013      	ands	r3, r2
 800f55c:	68ba      	ldr	r2, [r7, #8]
 800f55e:	429a      	cmp	r2, r3
 800f560:	bf0c      	ite	eq
 800f562:	2301      	moveq	r3, #1
 800f564:	2300      	movne	r3, #0
 800f566:	b2db      	uxtb	r3, r3
 800f568:	461a      	mov	r2, r3
 800f56a:	79fb      	ldrb	r3, [r7, #7]
 800f56c:	429a      	cmp	r2, r3
 800f56e:	d0a6      	beq.n	800f4be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f570:	2300      	movs	r3, #0
}
 800f572:	4618      	mov	r0, r3
 800f574:	3710      	adds	r7, #16
 800f576:	46bd      	mov	sp, r7
 800f578:	bd80      	pop	{r7, pc}
	...

0800f57c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f57c:	b480      	push	{r7}
 800f57e:	b095      	sub	sp, #84	; 0x54
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f58a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f58c:	e853 3f00 	ldrex	r3, [r3]
 800f590:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f594:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f598:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	461a      	mov	r2, r3
 800f5a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5a2:	643b      	str	r3, [r7, #64]	; 0x40
 800f5a4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f5a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f5aa:	e841 2300 	strex	r3, r2, [r1]
 800f5ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d1e6      	bne.n	800f584 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	3308      	adds	r3, #8
 800f5bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5be:	6a3b      	ldr	r3, [r7, #32]
 800f5c0:	e853 3f00 	ldrex	r3, [r3]
 800f5c4:	61fb      	str	r3, [r7, #28]
   return(result);
 800f5c6:	69fa      	ldr	r2, [r7, #28]
 800f5c8:	4b1e      	ldr	r3, [pc, #120]	; (800f644 <UART_EndRxTransfer+0xc8>)
 800f5ca:	4013      	ands	r3, r2
 800f5cc:	64bb      	str	r3, [r7, #72]	; 0x48
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	3308      	adds	r3, #8
 800f5d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f5d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f5d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f5dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f5de:	e841 2300 	strex	r3, r2, [r1]
 800f5e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d1e5      	bne.n	800f5b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5ee:	2b01      	cmp	r3, #1
 800f5f0:	d118      	bne.n	800f624 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	e853 3f00 	ldrex	r3, [r3]
 800f5fe:	60bb      	str	r3, [r7, #8]
   return(result);
 800f600:	68bb      	ldr	r3, [r7, #8]
 800f602:	f023 0310 	bic.w	r3, r3, #16
 800f606:	647b      	str	r3, [r7, #68]	; 0x44
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	461a      	mov	r2, r3
 800f60e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f610:	61bb      	str	r3, [r7, #24]
 800f612:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f614:	6979      	ldr	r1, [r7, #20]
 800f616:	69ba      	ldr	r2, [r7, #24]
 800f618:	e841 2300 	strex	r3, r2, [r1]
 800f61c:	613b      	str	r3, [r7, #16]
   return(result);
 800f61e:	693b      	ldr	r3, [r7, #16]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d1e6      	bne.n	800f5f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	2220      	movs	r2, #32
 800f628:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	2200      	movs	r2, #0
 800f630:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	2200      	movs	r2, #0
 800f636:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f638:	bf00      	nop
 800f63a:	3754      	adds	r7, #84	; 0x54
 800f63c:	46bd      	mov	sp, r7
 800f63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f642:	4770      	bx	lr
 800f644:	effffffe 	.word	0xeffffffe

0800f648 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b084      	sub	sp, #16
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f654:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	2200      	movs	r2, #0
 800f65a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	2200      	movs	r2, #0
 800f662:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f666:	68f8      	ldr	r0, [r7, #12]
 800f668:	f7fe ff52 	bl	800e510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f66c:	bf00      	nop
 800f66e:	3710      	adds	r7, #16
 800f670:	46bd      	mov	sp, r7
 800f672:	bd80      	pop	{r7, pc}

0800f674 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b088      	sub	sp, #32
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	e853 3f00 	ldrex	r3, [r3]
 800f688:	60bb      	str	r3, [r7, #8]
   return(result);
 800f68a:	68bb      	ldr	r3, [r7, #8]
 800f68c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f690:	61fb      	str	r3, [r7, #28]
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	461a      	mov	r2, r3
 800f698:	69fb      	ldr	r3, [r7, #28]
 800f69a:	61bb      	str	r3, [r7, #24]
 800f69c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f69e:	6979      	ldr	r1, [r7, #20]
 800f6a0:	69ba      	ldr	r2, [r7, #24]
 800f6a2:	e841 2300 	strex	r3, r2, [r1]
 800f6a6:	613b      	str	r3, [r7, #16]
   return(result);
 800f6a8:	693b      	ldr	r3, [r7, #16]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d1e6      	bne.n	800f67c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	2220      	movs	r2, #32
 800f6b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	2200      	movs	r2, #0
 800f6ba:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f6bc:	6878      	ldr	r0, [r7, #4]
 800f6be:	f7fe ff1d 	bl	800e4fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f6c2:	bf00      	nop
 800f6c4:	3720      	adds	r7, #32
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	bd80      	pop	{r7, pc}

0800f6ca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f6ca:	b480      	push	{r7}
 800f6cc:	b083      	sub	sp, #12
 800f6ce:	af00      	add	r7, sp, #0
 800f6d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f6d2:	bf00      	nop
 800f6d4:	370c      	adds	r7, #12
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6dc:	4770      	bx	lr

0800f6de <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f6de:	b480      	push	{r7}
 800f6e0:	b083      	sub	sp, #12
 800f6e2:	af00      	add	r7, sp, #0
 800f6e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f6e6:	bf00      	nop
 800f6e8:	370c      	adds	r7, #12
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f0:	4770      	bx	lr

0800f6f2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f6f2:	b480      	push	{r7}
 800f6f4:	b083      	sub	sp, #12
 800f6f6:	af00      	add	r7, sp, #0
 800f6f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f6fa:	bf00      	nop
 800f6fc:	370c      	adds	r7, #12
 800f6fe:	46bd      	mov	sp, r7
 800f700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f704:	4770      	bx	lr

0800f706 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f706:	b480      	push	{r7}
 800f708:	b085      	sub	sp, #20
 800f70a:	af00      	add	r7, sp, #0
 800f70c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f714:	2b01      	cmp	r3, #1
 800f716:	d101      	bne.n	800f71c <HAL_UARTEx_DisableFifoMode+0x16>
 800f718:	2302      	movs	r3, #2
 800f71a:	e027      	b.n	800f76c <HAL_UARTEx_DisableFifoMode+0x66>
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2201      	movs	r2, #1
 800f720:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	2224      	movs	r2, #36	; 0x24
 800f728:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	681a      	ldr	r2, [r3, #0]
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	f022 0201 	bic.w	r2, r2, #1
 800f742:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f74a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2200      	movs	r2, #0
 800f750:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	68fa      	ldr	r2, [r7, #12]
 800f758:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	2220      	movs	r2, #32
 800f75e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	2200      	movs	r2, #0
 800f766:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f76a:	2300      	movs	r3, #0
}
 800f76c:	4618      	mov	r0, r3
 800f76e:	3714      	adds	r7, #20
 800f770:	46bd      	mov	sp, r7
 800f772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f776:	4770      	bx	lr

0800f778 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f778:	b580      	push	{r7, lr}
 800f77a:	b084      	sub	sp, #16
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
 800f780:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f788:	2b01      	cmp	r3, #1
 800f78a:	d101      	bne.n	800f790 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f78c:	2302      	movs	r3, #2
 800f78e:	e02d      	b.n	800f7ec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	2201      	movs	r2, #1
 800f794:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	2224      	movs	r2, #36	; 0x24
 800f79c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	681a      	ldr	r2, [r3, #0]
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	f022 0201 	bic.w	r2, r2, #1
 800f7b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	689b      	ldr	r3, [r3, #8]
 800f7be:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	683a      	ldr	r2, [r7, #0]
 800f7c8:	430a      	orrs	r2, r1
 800f7ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f7cc:	6878      	ldr	r0, [r7, #4]
 800f7ce:	f000 f84f 	bl	800f870 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	68fa      	ldr	r2, [r7, #12]
 800f7d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	2220      	movs	r2, #32
 800f7de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f7ea:	2300      	movs	r3, #0
}
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	3710      	adds	r7, #16
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	bd80      	pop	{r7, pc}

0800f7f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b084      	sub	sp, #16
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
 800f7fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f804:	2b01      	cmp	r3, #1
 800f806:	d101      	bne.n	800f80c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f808:	2302      	movs	r3, #2
 800f80a:	e02d      	b.n	800f868 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2201      	movs	r2, #1
 800f810:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	2224      	movs	r2, #36	; 0x24
 800f818:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	681a      	ldr	r2, [r3, #0]
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	f022 0201 	bic.w	r2, r2, #1
 800f832:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	689b      	ldr	r3, [r3, #8]
 800f83a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	683a      	ldr	r2, [r7, #0]
 800f844:	430a      	orrs	r2, r1
 800f846:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f848:	6878      	ldr	r0, [r7, #4]
 800f84a:	f000 f811 	bl	800f870 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	68fa      	ldr	r2, [r7, #12]
 800f854:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	2220      	movs	r2, #32
 800f85a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	2200      	movs	r2, #0
 800f862:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f866:	2300      	movs	r3, #0
}
 800f868:	4618      	mov	r0, r3
 800f86a:	3710      	adds	r7, #16
 800f86c:	46bd      	mov	sp, r7
 800f86e:	bd80      	pop	{r7, pc}

0800f870 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f870:	b480      	push	{r7}
 800f872:	b085      	sub	sp, #20
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d108      	bne.n	800f892 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	2201      	movs	r2, #1
 800f884:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2201      	movs	r2, #1
 800f88c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f890:	e031      	b.n	800f8f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f892:	2310      	movs	r3, #16
 800f894:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f896:	2310      	movs	r3, #16
 800f898:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	689b      	ldr	r3, [r3, #8]
 800f8a0:	0e5b      	lsrs	r3, r3, #25
 800f8a2:	b2db      	uxtb	r3, r3
 800f8a4:	f003 0307 	and.w	r3, r3, #7
 800f8a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	689b      	ldr	r3, [r3, #8]
 800f8b0:	0f5b      	lsrs	r3, r3, #29
 800f8b2:	b2db      	uxtb	r3, r3
 800f8b4:	f003 0307 	and.w	r3, r3, #7
 800f8b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f8ba:	7bbb      	ldrb	r3, [r7, #14]
 800f8bc:	7b3a      	ldrb	r2, [r7, #12]
 800f8be:	4911      	ldr	r1, [pc, #68]	; (800f904 <UARTEx_SetNbDataToProcess+0x94>)
 800f8c0:	5c8a      	ldrb	r2, [r1, r2]
 800f8c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f8c6:	7b3a      	ldrb	r2, [r7, #12]
 800f8c8:	490f      	ldr	r1, [pc, #60]	; (800f908 <UARTEx_SetNbDataToProcess+0x98>)
 800f8ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f8cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800f8d0:	b29a      	uxth	r2, r3
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f8d8:	7bfb      	ldrb	r3, [r7, #15]
 800f8da:	7b7a      	ldrb	r2, [r7, #13]
 800f8dc:	4909      	ldr	r1, [pc, #36]	; (800f904 <UARTEx_SetNbDataToProcess+0x94>)
 800f8de:	5c8a      	ldrb	r2, [r1, r2]
 800f8e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f8e4:	7b7a      	ldrb	r2, [r7, #13]
 800f8e6:	4908      	ldr	r1, [pc, #32]	; (800f908 <UARTEx_SetNbDataToProcess+0x98>)
 800f8e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f8ea:	fb93 f3f2 	sdiv	r3, r3, r2
 800f8ee:	b29a      	uxth	r2, r3
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f8f6:	bf00      	nop
 800f8f8:	3714      	adds	r7, #20
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f900:	4770      	bx	lr
 800f902:	bf00      	nop
 800f904:	0801d328 	.word	0x0801d328
 800f908:	0801d330 	.word	0x0801d330

0800f90c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800f90c:	b480      	push	{r7}
 800f90e:	b083      	sub	sp, #12
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
 800f914:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800f916:	683b      	ldr	r3, [r7, #0]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d121      	bne.n	800f962 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	681a      	ldr	r2, [r3, #0]
 800f922:	4b27      	ldr	r3, [pc, #156]	; (800f9c0 <FMC_SDRAM_Init+0xb4>)
 800f924:	4013      	ands	r3, r2
 800f926:	683a      	ldr	r2, [r7, #0]
 800f928:	6851      	ldr	r1, [r2, #4]
 800f92a:	683a      	ldr	r2, [r7, #0]
 800f92c:	6892      	ldr	r2, [r2, #8]
 800f92e:	4311      	orrs	r1, r2
 800f930:	683a      	ldr	r2, [r7, #0]
 800f932:	68d2      	ldr	r2, [r2, #12]
 800f934:	4311      	orrs	r1, r2
 800f936:	683a      	ldr	r2, [r7, #0]
 800f938:	6912      	ldr	r2, [r2, #16]
 800f93a:	4311      	orrs	r1, r2
 800f93c:	683a      	ldr	r2, [r7, #0]
 800f93e:	6952      	ldr	r2, [r2, #20]
 800f940:	4311      	orrs	r1, r2
 800f942:	683a      	ldr	r2, [r7, #0]
 800f944:	6992      	ldr	r2, [r2, #24]
 800f946:	4311      	orrs	r1, r2
 800f948:	683a      	ldr	r2, [r7, #0]
 800f94a:	69d2      	ldr	r2, [r2, #28]
 800f94c:	4311      	orrs	r1, r2
 800f94e:	683a      	ldr	r2, [r7, #0]
 800f950:	6a12      	ldr	r2, [r2, #32]
 800f952:	4311      	orrs	r1, r2
 800f954:	683a      	ldr	r2, [r7, #0]
 800f956:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800f958:	430a      	orrs	r2, r1
 800f95a:	431a      	orrs	r2, r3
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	601a      	str	r2, [r3, #0]
 800f960:	e026      	b.n	800f9b0 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800f96a:	683b      	ldr	r3, [r7, #0]
 800f96c:	69d9      	ldr	r1, [r3, #28]
 800f96e:	683b      	ldr	r3, [r7, #0]
 800f970:	6a1b      	ldr	r3, [r3, #32]
 800f972:	4319      	orrs	r1, r3
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f978:	430b      	orrs	r3, r1
 800f97a:	431a      	orrs	r2, r3
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	685a      	ldr	r2, [r3, #4]
 800f984:	4b0e      	ldr	r3, [pc, #56]	; (800f9c0 <FMC_SDRAM_Init+0xb4>)
 800f986:	4013      	ands	r3, r2
 800f988:	683a      	ldr	r2, [r7, #0]
 800f98a:	6851      	ldr	r1, [r2, #4]
 800f98c:	683a      	ldr	r2, [r7, #0]
 800f98e:	6892      	ldr	r2, [r2, #8]
 800f990:	4311      	orrs	r1, r2
 800f992:	683a      	ldr	r2, [r7, #0]
 800f994:	68d2      	ldr	r2, [r2, #12]
 800f996:	4311      	orrs	r1, r2
 800f998:	683a      	ldr	r2, [r7, #0]
 800f99a:	6912      	ldr	r2, [r2, #16]
 800f99c:	4311      	orrs	r1, r2
 800f99e:	683a      	ldr	r2, [r7, #0]
 800f9a0:	6952      	ldr	r2, [r2, #20]
 800f9a2:	4311      	orrs	r1, r2
 800f9a4:	683a      	ldr	r2, [r7, #0]
 800f9a6:	6992      	ldr	r2, [r2, #24]
 800f9a8:	430a      	orrs	r2, r1
 800f9aa:	431a      	orrs	r2, r3
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800f9b0:	2300      	movs	r3, #0
}
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	370c      	adds	r7, #12
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9bc:	4770      	bx	lr
 800f9be:	bf00      	nop
 800f9c0:	ffff8000 	.word	0xffff8000

0800f9c4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f9c4:	b480      	push	{r7}
 800f9c6:	b085      	sub	sp, #20
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	60f8      	str	r0, [r7, #12]
 800f9cc:	60b9      	str	r1, [r7, #8]
 800f9ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d128      	bne.n	800fa28 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	689b      	ldr	r3, [r3, #8]
 800f9da:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800f9de:	68bb      	ldr	r3, [r7, #8]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	1e59      	subs	r1, r3, #1
 800f9e4:	68bb      	ldr	r3, [r7, #8]
 800f9e6:	685b      	ldr	r3, [r3, #4]
 800f9e8:	3b01      	subs	r3, #1
 800f9ea:	011b      	lsls	r3, r3, #4
 800f9ec:	4319      	orrs	r1, r3
 800f9ee:	68bb      	ldr	r3, [r7, #8]
 800f9f0:	689b      	ldr	r3, [r3, #8]
 800f9f2:	3b01      	subs	r3, #1
 800f9f4:	021b      	lsls	r3, r3, #8
 800f9f6:	4319      	orrs	r1, r3
 800f9f8:	68bb      	ldr	r3, [r7, #8]
 800f9fa:	68db      	ldr	r3, [r3, #12]
 800f9fc:	3b01      	subs	r3, #1
 800f9fe:	031b      	lsls	r3, r3, #12
 800fa00:	4319      	orrs	r1, r3
 800fa02:	68bb      	ldr	r3, [r7, #8]
 800fa04:	691b      	ldr	r3, [r3, #16]
 800fa06:	3b01      	subs	r3, #1
 800fa08:	041b      	lsls	r3, r3, #16
 800fa0a:	4319      	orrs	r1, r3
 800fa0c:	68bb      	ldr	r3, [r7, #8]
 800fa0e:	695b      	ldr	r3, [r3, #20]
 800fa10:	3b01      	subs	r3, #1
 800fa12:	051b      	lsls	r3, r3, #20
 800fa14:	4319      	orrs	r1, r3
 800fa16:	68bb      	ldr	r3, [r7, #8]
 800fa18:	699b      	ldr	r3, [r3, #24]
 800fa1a:	3b01      	subs	r3, #1
 800fa1c:	061b      	lsls	r3, r3, #24
 800fa1e:	430b      	orrs	r3, r1
 800fa20:	431a      	orrs	r2, r3
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	609a      	str	r2, [r3, #8]
 800fa26:	e02d      	b.n	800fa84 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	689a      	ldr	r2, [r3, #8]
 800fa2c:	4b19      	ldr	r3, [pc, #100]	; (800fa94 <FMC_SDRAM_Timing_Init+0xd0>)
 800fa2e:	4013      	ands	r3, r2
 800fa30:	68ba      	ldr	r2, [r7, #8]
 800fa32:	68d2      	ldr	r2, [r2, #12]
 800fa34:	3a01      	subs	r2, #1
 800fa36:	0311      	lsls	r1, r2, #12
 800fa38:	68ba      	ldr	r2, [r7, #8]
 800fa3a:	6952      	ldr	r2, [r2, #20]
 800fa3c:	3a01      	subs	r2, #1
 800fa3e:	0512      	lsls	r2, r2, #20
 800fa40:	430a      	orrs	r2, r1
 800fa42:	431a      	orrs	r2, r3
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	68db      	ldr	r3, [r3, #12]
 800fa4c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800fa50:	68bb      	ldr	r3, [r7, #8]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	1e59      	subs	r1, r3, #1
 800fa56:	68bb      	ldr	r3, [r7, #8]
 800fa58:	685b      	ldr	r3, [r3, #4]
 800fa5a:	3b01      	subs	r3, #1
 800fa5c:	011b      	lsls	r3, r3, #4
 800fa5e:	4319      	orrs	r1, r3
 800fa60:	68bb      	ldr	r3, [r7, #8]
 800fa62:	689b      	ldr	r3, [r3, #8]
 800fa64:	3b01      	subs	r3, #1
 800fa66:	021b      	lsls	r3, r3, #8
 800fa68:	4319      	orrs	r1, r3
 800fa6a:	68bb      	ldr	r3, [r7, #8]
 800fa6c:	691b      	ldr	r3, [r3, #16]
 800fa6e:	3b01      	subs	r3, #1
 800fa70:	041b      	lsls	r3, r3, #16
 800fa72:	4319      	orrs	r1, r3
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	699b      	ldr	r3, [r3, #24]
 800fa78:	3b01      	subs	r3, #1
 800fa7a:	061b      	lsls	r3, r3, #24
 800fa7c:	430b      	orrs	r3, r1
 800fa7e:	431a      	orrs	r2, r3
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800fa84:	2300      	movs	r3, #0
}
 800fa86:	4618      	mov	r0, r3
 800fa88:	3714      	adds	r7, #20
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa90:	4770      	bx	lr
 800fa92:	bf00      	nop
 800fa94:	ff0f0fff 	.word	0xff0f0fff

0800fa98 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800fa98:	b480      	push	{r7}
 800fa9a:	b085      	sub	sp, #20
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	60f8      	str	r0, [r7, #12]
 800faa0:	60b9      	str	r1, [r7, #8]
 800faa2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	691a      	ldr	r2, [r3, #16]
 800faa8:	4b0c      	ldr	r3, [pc, #48]	; (800fadc <FMC_SDRAM_SendCommand+0x44>)
 800faaa:	4013      	ands	r3, r2
 800faac:	68ba      	ldr	r2, [r7, #8]
 800faae:	6811      	ldr	r1, [r2, #0]
 800fab0:	68ba      	ldr	r2, [r7, #8]
 800fab2:	6852      	ldr	r2, [r2, #4]
 800fab4:	4311      	orrs	r1, r2
 800fab6:	68ba      	ldr	r2, [r7, #8]
 800fab8:	6892      	ldr	r2, [r2, #8]
 800faba:	3a01      	subs	r2, #1
 800fabc:	0152      	lsls	r2, r2, #5
 800fabe:	4311      	orrs	r1, r2
 800fac0:	68ba      	ldr	r2, [r7, #8]
 800fac2:	68d2      	ldr	r2, [r2, #12]
 800fac4:	0252      	lsls	r2, r2, #9
 800fac6:	430a      	orrs	r2, r1
 800fac8:	431a      	orrs	r2, r3
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800face:	2300      	movs	r3, #0
}
 800fad0:	4618      	mov	r0, r3
 800fad2:	3714      	adds	r7, #20
 800fad4:	46bd      	mov	sp, r7
 800fad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fada:	4770      	bx	lr
 800fadc:	ffc00000 	.word	0xffc00000

0800fae0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800fae0:	b480      	push	{r7}
 800fae2:	b083      	sub	sp, #12
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
 800fae8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	695a      	ldr	r2, [r3, #20]
 800faee:	4b07      	ldr	r3, [pc, #28]	; (800fb0c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800faf0:	4013      	ands	r3, r2
 800faf2:	683a      	ldr	r2, [r7, #0]
 800faf4:	0052      	lsls	r2, r2, #1
 800faf6:	431a      	orrs	r2, r3
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800fafc:	2300      	movs	r3, #0
}
 800fafe:	4618      	mov	r0, r3
 800fb00:	370c      	adds	r7, #12
 800fb02:	46bd      	mov	sp, r7
 800fb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb08:	4770      	bx	lr
 800fb0a:	bf00      	nop
 800fb0c:	ffffc001 	.word	0xffffc001

0800fb10 <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b082      	sub	sp, #8
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
 800fb18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 800fb1a:	683b      	ldr	r3, [r7, #0]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d009      	beq.n	800fb34 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 800fb20:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800fb22:	461a      	mov	r2, r3
        err.type, err.code);
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800fb2a:	6839      	ldr	r1, [r7, #0]
 800fb2c:	4806      	ldr	r0, [pc, #24]	; (800fb48 <ai_log_err+0x38>)
 800fb2e:	f00b fe3b 	bl	801b7a8 <iprintf>
 800fb32:	e008      	b.n	800fb46 <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 800fb34:	793b      	ldrb	r3, [r7, #4]
 800fb36:	4619      	mov	r1, r3
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800fb3e:	461a      	mov	r2, r3
 800fb40:	4802      	ldr	r0, [pc, #8]	; (800fb4c <ai_log_err+0x3c>)
 800fb42:	f00b fe31 	bl	801b7a8 <iprintf>

  do {} while (1);
 800fb46:	e7fe      	b.n	800fb46 <ai_log_err+0x36>
 800fb48:	0801cc68 	.word	0x0801cc68
 800fb4c:	0801cc9c 	.word	0x0801cc9c

0800fb50 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b086      	sub	sp, #24
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_face_detection_create_and_init(&face_detection, act_addr, NULL);
 800fb58:	2200      	movs	r2, #0
 800fb5a:	6879      	ldr	r1, [r7, #4]
 800fb5c:	4828      	ldr	r0, [pc, #160]	; (800fc00 <ai_boostrap+0xb0>)
 800fb5e:	f002 fbdb 	bl	8012318 <ai_face_detection_create_and_init>
 800fb62:	4603      	mov	r3, r0
 800fb64:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 800fb66:	7b3b      	ldrb	r3, [r7, #12]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d006      	beq.n	800fb7a <ai_boostrap+0x2a>
    ai_log_err(err, "ai_face_detection_create_and_init");
 800fb6c:	4925      	ldr	r1, [pc, #148]	; (800fc04 <ai_boostrap+0xb4>)
 800fb6e:	68f8      	ldr	r0, [r7, #12]
 800fb70:	f7ff ffce 	bl	800fb10 <ai_log_err>
    return -1;
 800fb74:	f04f 33ff 	mov.w	r3, #4294967295
 800fb78:	e03e      	b.n	800fbf8 <ai_boostrap+0xa8>
  }

  ai_input = ai_face_detection_inputs_get(face_detection, NULL);
 800fb7a:	4b21      	ldr	r3, [pc, #132]	; (800fc00 <ai_boostrap+0xb0>)
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	2100      	movs	r1, #0
 800fb80:	4618      	mov	r0, r3
 800fb82:	f002 fc3d 	bl	8012400 <ai_face_detection_inputs_get>
 800fb86:	4603      	mov	r3, r0
 800fb88:	4a1f      	ldr	r2, [pc, #124]	; (800fc08 <ai_boostrap+0xb8>)
 800fb8a:	6013      	str	r3, [r2, #0]
  ai_output = ai_face_detection_outputs_get(face_detection, NULL);
 800fb8c:	4b1c      	ldr	r3, [pc, #112]	; (800fc00 <ai_boostrap+0xb0>)
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	2100      	movs	r1, #0
 800fb92:	4618      	mov	r0, r3
 800fb94:	f002 fc4e 	bl	8012434 <ai_face_detection_outputs_get>
 800fb98:	4603      	mov	r3, r0
 800fb9a:	4a1c      	ldr	r2, [pc, #112]	; (800fc0c <ai_boostrap+0xbc>)
 800fb9c:	6013      	str	r3, [r2, #0]

#if defined(AI_FACE_DETECTION_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_FACE_DETECTION_IN_NUM; idx++) {
 800fb9e:	2300      	movs	r3, #0
 800fba0:	617b      	str	r3, [r7, #20]
 800fba2:	e00f      	b.n	800fbc4 <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 800fba4:	4b18      	ldr	r3, [pc, #96]	; (800fc08 <ai_boostrap+0xb8>)
 800fba6:	6819      	ldr	r1, [r3, #0]
 800fba8:	697a      	ldr	r2, [r7, #20]
 800fbaa:	4613      	mov	r3, r2
 800fbac:	00db      	lsls	r3, r3, #3
 800fbae:	1a9b      	subs	r3, r3, r2
 800fbb0:	009b      	lsls	r3, r3, #2
 800fbb2:	440b      	add	r3, r1
 800fbb4:	685a      	ldr	r2, [r3, #4]
 800fbb6:	4916      	ldr	r1, [pc, #88]	; (800fc10 <ai_boostrap+0xc0>)
 800fbb8:	697b      	ldr	r3, [r7, #20]
 800fbba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_FACE_DETECTION_IN_NUM; idx++) {
 800fbbe:	697b      	ldr	r3, [r7, #20]
 800fbc0:	3301      	adds	r3, #1
 800fbc2:	617b      	str	r3, [r7, #20]
 800fbc4:	697b      	ldr	r3, [r7, #20]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	ddec      	ble.n	800fba4 <ai_boostrap+0x54>

#if defined(AI_FACE_DETECTION_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_FACE_DETECTION_OUT_NUM; idx++) {
 800fbca:	2300      	movs	r3, #0
 800fbcc:	613b      	str	r3, [r7, #16]
 800fbce:	e00f      	b.n	800fbf0 <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 800fbd0:	4b0e      	ldr	r3, [pc, #56]	; (800fc0c <ai_boostrap+0xbc>)
 800fbd2:	6819      	ldr	r1, [r3, #0]
 800fbd4:	693a      	ldr	r2, [r7, #16]
 800fbd6:	4613      	mov	r3, r2
 800fbd8:	00db      	lsls	r3, r3, #3
 800fbda:	1a9b      	subs	r3, r3, r2
 800fbdc:	009b      	lsls	r3, r3, #2
 800fbde:	440b      	add	r3, r1
 800fbe0:	685a      	ldr	r2, [r3, #4]
 800fbe2:	490c      	ldr	r1, [pc, #48]	; (800fc14 <ai_boostrap+0xc4>)
 800fbe4:	693b      	ldr	r3, [r7, #16]
 800fbe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_FACE_DETECTION_OUT_NUM; idx++) {
 800fbea:	693b      	ldr	r3, [r7, #16]
 800fbec:	3301      	adds	r3, #1
 800fbee:	613b      	str	r3, [r7, #16]
 800fbf0:	693b      	ldr	r3, [r7, #16]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	ddec      	ble.n	800fbd0 <ai_boostrap+0x80>
  for (int idx=0; idx < AI_FACE_DETECTION_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 800fbf6:	2300      	movs	r3, #0
}
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	3718      	adds	r7, #24
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	bd80      	pop	{r7, pc}
 800fc00:	2405dec4 	.word	0x2405dec4
 800fc04:	0801cccc 	.word	0x0801cccc
 800fc08:	2405dec8 	.word	0x2405dec8
 800fc0c:	2405decc 	.word	0x2405decc
 800fc10:	2402d03c 	.word	0x2402d03c
 800fc14:	2402d040 	.word	0x2402d040

0800fc18 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 800fc1c:	4803      	ldr	r0, [pc, #12]	; (800fc2c <MX_X_CUBE_AI_Init+0x14>)
 800fc1e:	f00b fe49 	bl	801b8b4 <puts>

  ai_boostrap(data_activations0);
 800fc22:	4803      	ldr	r0, [pc, #12]	; (800fc30 <MX_X_CUBE_AI_Init+0x18>)
 800fc24:	f7ff ff94 	bl	800fb50 <ai_boostrap>
    /* USER CODE END 5 */
}
 800fc28:	bf00      	nop
 800fc2a:	bd80      	pop	{r7, pc}
 800fc2c:	0801cd08 	.word	0x0801cd08
 800fc30:	24000054 	.word	0x24000054

0800fc34 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(uint32_t *buffer, uint32_t*rescaled_Img)
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	f5ad 2d80 	sub.w	sp, sp, #262144	; 0x40000
 800fc3a:	f5ad 6dd4 	sub.w	sp, sp, #1696	; 0x6a0
 800fc3e:	af02      	add	r7, sp, #8
 800fc40:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 800fc44:	f2a3 6394 	subw	r3, r3, #1684	; 0x694
 800fc48:	6018      	str	r0, [r3, #0]
 800fc4a:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 800fc4e:	f5a3 63d3 	sub.w	r3, r3, #1688	; 0x698
 800fc52:	6019      	str	r1, [r3, #0]
	//float nn_input[AI_FACE_DETECTION_IN_1_SIZE];
	float nn_output[AI_FACE_DETECTION_OUT_1_SIZE];

	uint8_t input[AI_FACE_DETECTION_IN_1_SIZE];

	for(uint32_t i = 0; i<RESCALED_IMG*RESCALED_IMG; i++){
 800fc54:	2300      	movs	r3, #0
 800fc56:	4a96      	ldr	r2, [pc, #600]	; (800feb0 <MX_X_CUBE_AI_Process+0x27c>)
 800fc58:	443a      	add	r2, r7
 800fc5a:	6013      	str	r3, [r2, #0]
 800fc5c:	e04f      	b.n	800fcfe <MX_X_CUBE_AI_Process+0xca>
		input[3*i] = (rescaled_Img[i]&0xff0000)>>16;
 800fc5e:	4b94      	ldr	r3, [pc, #592]	; (800feb0 <MX_X_CUBE_AI_Process+0x27c>)
 800fc60:	443b      	add	r3, r7
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	009b      	lsls	r3, r3, #2
 800fc66:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800fc6a:	f5a2 62d3 	sub.w	r2, r2, #1688	; 0x698
 800fc6e:	6812      	ldr	r2, [r2, #0]
 800fc70:	4413      	add	r3, r2
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	0c19      	lsrs	r1, r3, #16
 800fc76:	4b8e      	ldr	r3, [pc, #568]	; (800feb0 <MX_X_CUBE_AI_Process+0x27c>)
 800fc78:	443b      	add	r3, r7
 800fc7a:	681a      	ldr	r2, [r3, #0]
 800fc7c:	4613      	mov	r3, r2
 800fc7e:	005b      	lsls	r3, r3, #1
 800fc80:	4413      	add	r3, r2
 800fc82:	b2c9      	uxtb	r1, r1
 800fc84:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800fc88:	f2a2 628c 	subw	r2, r2, #1676	; 0x68c
 800fc8c:	54d1      	strb	r1, [r2, r3]
		input[3*i+1] = (rescaled_Img[i]&0xff00)>>8;
 800fc8e:	4b88      	ldr	r3, [pc, #544]	; (800feb0 <MX_X_CUBE_AI_Process+0x27c>)
 800fc90:	443b      	add	r3, r7
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	009b      	lsls	r3, r3, #2
 800fc96:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800fc9a:	f5a2 62d3 	sub.w	r2, r2, #1688	; 0x698
 800fc9e:	6812      	ldr	r2, [r2, #0]
 800fca0:	4413      	add	r3, r2
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	0a19      	lsrs	r1, r3, #8
 800fca6:	4b82      	ldr	r3, [pc, #520]	; (800feb0 <MX_X_CUBE_AI_Process+0x27c>)
 800fca8:	443b      	add	r3, r7
 800fcaa:	681a      	ldr	r2, [r3, #0]
 800fcac:	4613      	mov	r3, r2
 800fcae:	005b      	lsls	r3, r3, #1
 800fcb0:	4413      	add	r3, r2
 800fcb2:	3301      	adds	r3, #1
 800fcb4:	b2c9      	uxtb	r1, r1
 800fcb6:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800fcba:	f2a2 628c 	subw	r2, r2, #1676	; 0x68c
 800fcbe:	54d1      	strb	r1, [r2, r3]
		input[3*i+2] = (rescaled_Img[i]&0xff);
 800fcc0:	4b7b      	ldr	r3, [pc, #492]	; (800feb0 <MX_X_CUBE_AI_Process+0x27c>)
 800fcc2:	443b      	add	r3, r7
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	009b      	lsls	r3, r3, #2
 800fcc8:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800fccc:	f5a2 62d3 	sub.w	r2, r2, #1688	; 0x698
 800fcd0:	6812      	ldr	r2, [r2, #0]
 800fcd2:	4413      	add	r3, r2
 800fcd4:	6819      	ldr	r1, [r3, #0]
 800fcd6:	4b76      	ldr	r3, [pc, #472]	; (800feb0 <MX_X_CUBE_AI_Process+0x27c>)
 800fcd8:	443b      	add	r3, r7
 800fcda:	681a      	ldr	r2, [r3, #0]
 800fcdc:	4613      	mov	r3, r2
 800fcde:	005b      	lsls	r3, r3, #1
 800fce0:	4413      	add	r3, r2
 800fce2:	3302      	adds	r3, #2
 800fce4:	b2c9      	uxtb	r1, r1
 800fce6:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800fcea:	f2a2 628c 	subw	r2, r2, #1676	; 0x68c
 800fcee:	54d1      	strb	r1, [r2, r3]
	for(uint32_t i = 0; i<RESCALED_IMG*RESCALED_IMG; i++){
 800fcf0:	4b6f      	ldr	r3, [pc, #444]	; (800feb0 <MX_X_CUBE_AI_Process+0x27c>)
 800fcf2:	443b      	add	r3, r7
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	3301      	adds	r3, #1
 800fcf8:	4a6d      	ldr	r2, [pc, #436]	; (800feb0 <MX_X_CUBE_AI_Process+0x27c>)
 800fcfa:	443a      	add	r2, r7
 800fcfc:	6013      	str	r3, [r2, #0]
 800fcfe:	4b6c      	ldr	r3, [pc, #432]	; (800feb0 <MX_X_CUBE_AI_Process+0x27c>)
 800fd00:	443b      	add	r3, r7
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 800fd08:	d3a9      	bcc.n	800fc5e <MX_X_CUBE_AI_Process+0x2a>
//		input[i]=input[i]/255;
//	}

//	nn_input[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) ? 127.0 : -127.0;
//	nn_input[1] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) ? 127.0 : -127.0;
	ai_input->data = input;
 800fd0a:	4b6a      	ldr	r3, [pc, #424]	; (800feb4 <MX_X_CUBE_AI_Process+0x280>)
 800fd0c:	681a      	ldr	r2, [r3, #0]
 800fd0e:	4b6a      	ldr	r3, [pc, #424]	; (800feb8 <MX_X_CUBE_AI_Process+0x284>)
 800fd10:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 800fd14:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
 800fd18:	443b      	add	r3, r7
 800fd1a:	6053      	str	r3, [r2, #4]
	ai_output->data = nn_output;
 800fd1c:	4b67      	ldr	r3, [pc, #412]	; (800febc <MX_X_CUBE_AI_Process+0x288>)
 800fd1e:	681a      	ldr	r2, [r3, #0]
 800fd20:	4b67      	ldr	r3, [pc, #412]	; (800fec0 <MX_X_CUBE_AI_Process+0x28c>)
 800fd22:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 800fd26:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
 800fd2a:	443b      	add	r3, r7
 800fd2c:	6053      	str	r3, [r2, #4]
	batch = ai_face_detection_run(face_detection, ai_input, ai_output);
 800fd2e:	4b65      	ldr	r3, [pc, #404]	; (800fec4 <MX_X_CUBE_AI_Process+0x290>)
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	4a60      	ldr	r2, [pc, #384]	; (800feb4 <MX_X_CUBE_AI_Process+0x280>)
 800fd34:	6811      	ldr	r1, [r2, #0]
 800fd36:	4a61      	ldr	r2, [pc, #388]	; (800febc <MX_X_CUBE_AI_Process+0x288>)
 800fd38:	6812      	ldr	r2, [r2, #0]
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f002 fbd0 	bl	80124e0 <ai_face_detection_run>
 800fd40:	4b61      	ldr	r3, [pc, #388]	; (800fec8 <MX_X_CUBE_AI_Process+0x294>)
 800fd42:	443b      	add	r3, r7
 800fd44:	6018      	str	r0, [r3, #0]
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, nn_output[0]>=0 ? 1 : 0);
//	printf("%f\r\n", nn_output[0]);
	//postProcess(buffer, LTDC_WIDTH, LTDC_HEIGHT, 96, 96, GRID_SIZE, nn_output);

	for(uint32_t i=1; i<AI_FACE_DETECTION_OUT_1_SIZE; i+=10){
 800fd46:	2301      	movs	r3, #1
 800fd48:	4a60      	ldr	r2, [pc, #384]	; (800fecc <MX_X_CUBE_AI_Process+0x298>)
 800fd4a:	443a      	add	r2, r7
 800fd4c:	6013      	str	r3, [r2, #0]
 800fd4e:	e090      	b.n	800fe72 <MX_X_CUBE_AI_Process+0x23e>
		if(nn_output[i]>0.9f){
 800fd50:	4b5f      	ldr	r3, [pc, #380]	; (800fed0 <MX_X_CUBE_AI_Process+0x29c>)
 800fd52:	443b      	add	r3, r7
 800fd54:	f2a3 628c 	subw	r2, r3, #1676	; 0x68c
 800fd58:	4b5c      	ldr	r3, [pc, #368]	; (800fecc <MX_X_CUBE_AI_Process+0x298>)
 800fd5a:	443b      	add	r3, r7
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	009b      	lsls	r3, r3, #2
 800fd60:	4413      	add	r3, r2
 800fd62:	edd3 7a00 	vldr	s15, [r3]
 800fd66:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 800fed4 <MX_X_CUBE_AI_Process+0x2a0>
 800fd6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fd6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd72:	dd77      	ble.n	800fe64 <MX_X_CUBE_AI_Process+0x230>
			float x_start = nn_output[i+5]*LTDC_WIDTH_FLOAT;
 800fd74:	4b55      	ldr	r3, [pc, #340]	; (800fecc <MX_X_CUBE_AI_Process+0x298>)
 800fd76:	443b      	add	r3, r7
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	3305      	adds	r3, #5
 800fd7c:	4a54      	ldr	r2, [pc, #336]	; (800fed0 <MX_X_CUBE_AI_Process+0x29c>)
 800fd7e:	443a      	add	r2, r7
 800fd80:	f2a2 628c 	subw	r2, r2, #1676	; 0x68c
 800fd84:	009b      	lsls	r3, r3, #2
 800fd86:	4413      	add	r3, r2
 800fd88:	edd3 7a00 	vldr	s15, [r3]
 800fd8c:	ed9f 7a52 	vldr	s14, [pc, #328]	; 800fed8 <MX_X_CUBE_AI_Process+0x2a4>
 800fd90:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fd94:	4b51      	ldr	r3, [pc, #324]	; (800fedc <MX_X_CUBE_AI_Process+0x2a8>)
 800fd96:	443b      	add	r3, r7
 800fd98:	edc3 7a00 	vstr	s15, [r3]
			float x_end = nn_output[i+7]*LTDC_WIDTH_FLOAT;
 800fd9c:	4b4b      	ldr	r3, [pc, #300]	; (800fecc <MX_X_CUBE_AI_Process+0x298>)
 800fd9e:	443b      	add	r3, r7
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	3307      	adds	r3, #7
 800fda4:	4a4a      	ldr	r2, [pc, #296]	; (800fed0 <MX_X_CUBE_AI_Process+0x29c>)
 800fda6:	443a      	add	r2, r7
 800fda8:	f2a2 628c 	subw	r2, r2, #1676	; 0x68c
 800fdac:	009b      	lsls	r3, r3, #2
 800fdae:	4413      	add	r3, r2
 800fdb0:	edd3 7a00 	vldr	s15, [r3]
 800fdb4:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800fed8 <MX_X_CUBE_AI_Process+0x2a4>
 800fdb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fdbc:	4b48      	ldr	r3, [pc, #288]	; (800fee0 <MX_X_CUBE_AI_Process+0x2ac>)
 800fdbe:	443b      	add	r3, r7
 800fdc0:	edc3 7a00 	vstr	s15, [r3]
			float y_start = nn_output[i+6]*LTDC_HEIGHT_FLOAT;
 800fdc4:	4b41      	ldr	r3, [pc, #260]	; (800fecc <MX_X_CUBE_AI_Process+0x298>)
 800fdc6:	443b      	add	r3, r7
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	3306      	adds	r3, #6
 800fdcc:	4a40      	ldr	r2, [pc, #256]	; (800fed0 <MX_X_CUBE_AI_Process+0x29c>)
 800fdce:	443a      	add	r2, r7
 800fdd0:	f2a2 628c 	subw	r2, r2, #1676	; 0x68c
 800fdd4:	009b      	lsls	r3, r3, #2
 800fdd6:	4413      	add	r3, r2
 800fdd8:	edd3 7a00 	vldr	s15, [r3]
 800fddc:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800fee4 <MX_X_CUBE_AI_Process+0x2b0>
 800fde0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fde4:	4b40      	ldr	r3, [pc, #256]	; (800fee8 <MX_X_CUBE_AI_Process+0x2b4>)
 800fde6:	443b      	add	r3, r7
 800fde8:	edc3 7a00 	vstr	s15, [r3]
			float y_end = nn_output[i+8]*LTDC_HEIGHT_FLOAT;
 800fdec:	4b37      	ldr	r3, [pc, #220]	; (800fecc <MX_X_CUBE_AI_Process+0x298>)
 800fdee:	443b      	add	r3, r7
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	3308      	adds	r3, #8
 800fdf4:	4a36      	ldr	r2, [pc, #216]	; (800fed0 <MX_X_CUBE_AI_Process+0x29c>)
 800fdf6:	443a      	add	r2, r7
 800fdf8:	f2a2 628c 	subw	r2, r2, #1676	; 0x68c
 800fdfc:	009b      	lsls	r3, r3, #2
 800fdfe:	4413      	add	r3, r2
 800fe00:	edd3 7a00 	vldr	s15, [r3]
 800fe04:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800fee4 <MX_X_CUBE_AI_Process+0x2b0>
 800fe08:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fe0c:	4b37      	ldr	r3, [pc, #220]	; (800feec <MX_X_CUBE_AI_Process+0x2b8>)
 800fe0e:	443b      	add	r3, r7
 800fe10:	edc3 7a00 	vstr	s15, [r3]

			drawRectangle(buffer, (int32_t)x_start, (int32_t)x_end, (int32_t)y_start, (int32_t)y_end);
 800fe14:	4b31      	ldr	r3, [pc, #196]	; (800fedc <MX_X_CUBE_AI_Process+0x2a8>)
 800fe16:	443b      	add	r3, r7
 800fe18:	edd3 7a00 	vldr	s15, [r3]
 800fe1c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800fe20:	4b2f      	ldr	r3, [pc, #188]	; (800fee0 <MX_X_CUBE_AI_Process+0x2ac>)
 800fe22:	443b      	add	r3, r7
 800fe24:	edd3 7a00 	vldr	s15, [r3]
 800fe28:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800fe2c:	4b2e      	ldr	r3, [pc, #184]	; (800fee8 <MX_X_CUBE_AI_Process+0x2b4>)
 800fe2e:	443b      	add	r3, r7
 800fe30:	edd3 7a00 	vldr	s15, [r3]
 800fe34:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 800fe38:	4b2c      	ldr	r3, [pc, #176]	; (800feec <MX_X_CUBE_AI_Process+0x2b8>)
 800fe3a:	443b      	add	r3, r7
 800fe3c:	edd3 7a00 	vldr	s15, [r3]
 800fe40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fe44:	ee17 2a90 	vmov	r2, s15
 800fe48:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 800fe4c:	f2a3 6094 	subw	r0, r3, #1684	; 0x694
 800fe50:	9200      	str	r2, [sp, #0]
 800fe52:	ee16 3a10 	vmov	r3, s12
 800fe56:	ee16 2a90 	vmov	r2, s13
 800fe5a:	ee17 1a10 	vmov	r1, s14
 800fe5e:	6800      	ldr	r0, [r0, #0]
 800fe60:	f7f0 fefa 	bl	8000c58 <drawRectangle>
	for(uint32_t i=1; i<AI_FACE_DETECTION_OUT_1_SIZE; i+=10){
 800fe64:	4b19      	ldr	r3, [pc, #100]	; (800fecc <MX_X_CUBE_AI_Process+0x298>)
 800fe66:	443b      	add	r3, r7
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	330a      	adds	r3, #10
 800fe6c:	4a17      	ldr	r2, [pc, #92]	; (800fecc <MX_X_CUBE_AI_Process+0x298>)
 800fe6e:	443a      	add	r2, r7
 800fe70:	6013      	str	r3, [r2, #0]
 800fe72:	4b16      	ldr	r3, [pc, #88]	; (800fecc <MX_X_CUBE_AI_Process+0x298>)
 800fe74:	443b      	add	r3, r7
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	f249 529b 	movw	r2, #38299	; 0x959b
 800fe7c:	4293      	cmp	r3, r2
 800fe7e:	f67f af67 	bls.w	800fd50 <MX_X_CUBE_AI_Process+0x11c>

		}
	}

	if (batch != 1) {
 800fe82:	4b11      	ldr	r3, [pc, #68]	; (800fec8 <MX_X_CUBE_AI_Process+0x294>)
 800fe84:	443b      	add	r3, r7
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	2b01      	cmp	r3, #1
 800fe8a:	d009      	beq.n	800fea0 <MX_X_CUBE_AI_Process+0x26c>
	ai_log_err(ai_face_detection_get_error(face_detection), "aiface_detection_face_detection");
 800fe8c:	4b0d      	ldr	r3, [pc, #52]	; (800fec4 <MX_X_CUBE_AI_Process+0x290>)
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	4618      	mov	r0, r3
 800fe92:	f002 fa1f 	bl	80122d4 <ai_face_detection_get_error>
 800fe96:	4603      	mov	r3, r0
 800fe98:	4915      	ldr	r1, [pc, #84]	; (800fef0 <MX_X_CUBE_AI_Process+0x2bc>)
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	f7ff fe38 	bl	800fb10 <ai_log_err>
	}
    /* USER CODE END 6 */
}
 800fea0:	bf00      	nop
 800fea2:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
 800fea6:	f507 67d3 	add.w	r7, r7, #1688	; 0x698
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}
 800feae:	bf00      	nop
 800feb0:	00040694 	.word	0x00040694
 800feb4:	2405dec8 	.word	0x2405dec8
 800feb8:	fffbf974 	.word	0xfffbf974
 800febc:	2405decc 	.word	0x2405decc
 800fec0:	fffda974 	.word	0xfffda974
 800fec4:	2405dec4 	.word	0x2405dec4
 800fec8:	0004068c 	.word	0x0004068c
 800fecc:	00040690 	.word	0x00040690
 800fed0:	0001b698 	.word	0x0001b698
 800fed4:	3f666666 	.word	0x3f666666
 800fed8:	43f00000 	.word	0x43f00000
 800fedc:	00040688 	.word	0x00040688
 800fee0:	00040684 	.word	0x00040684
 800fee4:	43880000 	.word	0x43880000
 800fee8:	00040680 	.word	0x00040680
 800feec:	0004067c 	.word	0x0004067c
 800fef0:	0801cd28 	.word	0x0801cd28

0800fef4 <face_detection_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool face_detection_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b082      	sub	sp, #8
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
 800fefc:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_face_detection_activations_map, 1, params)) {
 800fefe:	683a      	ldr	r2, [r7, #0]
 800ff00:	2101      	movs	r1, #1
 800ff02:	4894      	ldr	r0, [pc, #592]	; (8010154 <face_detection_configure_activations+0x260>)
 800ff04:	f002 fbce 	bl	80126a4 <ai_platform_get_activations_map>
 800ff08:	4603      	mov	r3, r0
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	f001 813a 	beq.w	8011184 <face_detection_configure_activations+0x1290>
    /* Updating activations (byte) offsets */
    
    serving_default_input_10_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 74380);
 800ff10:	4b90      	ldr	r3, [pc, #576]	; (8010154 <face_detection_configure_activations+0x260>)
 800ff12:	681a      	ldr	r2, [r3, #0]
 800ff14:	4b90      	ldr	r3, [pc, #576]	; (8010158 <face_detection_configure_activations+0x264>)
 800ff16:	4413      	add	r3, r2
 800ff18:	4a90      	ldr	r2, [pc, #576]	; (801015c <face_detection_configure_activations+0x268>)
 800ff1a:	6093      	str	r3, [r2, #8]
    serving_default_input_10_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 74380);
 800ff1c:	4b8d      	ldr	r3, [pc, #564]	; (8010154 <face_detection_configure_activations+0x260>)
 800ff1e:	681a      	ldr	r2, [r3, #0]
 800ff20:	4b8d      	ldr	r3, [pc, #564]	; (8010158 <face_detection_configure_activations+0x264>)
 800ff22:	4413      	add	r3, r2
 800ff24:	4a8d      	ldr	r2, [pc, #564]	; (801015c <face_detection_configure_activations+0x268>)
 800ff26:	60d3      	str	r3, [r2, #12]
    
    concat_149_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 184972);
 800ff28:	4b8a      	ldr	r3, [pc, #552]	; (8010154 <face_detection_configure_activations+0x260>)
 800ff2a:	681a      	ldr	r2, [r3, #0]
 800ff2c:	4b8c      	ldr	r3, [pc, #560]	; (8010160 <face_detection_configure_activations+0x26c>)
 800ff2e:	4413      	add	r3, r2
 800ff30:	4a8c      	ldr	r2, [pc, #560]	; (8010164 <face_detection_configure_activations+0x270>)
 800ff32:	6093      	str	r3, [r2, #8]
    concat_149_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 184972);
 800ff34:	4b87      	ldr	r3, [pc, #540]	; (8010154 <face_detection_configure_activations+0x260>)
 800ff36:	681a      	ldr	r2, [r3, #0]
 800ff38:	4b89      	ldr	r3, [pc, #548]	; (8010160 <face_detection_configure_activations+0x26c>)
 800ff3a:	4413      	add	r3, r2
 800ff3c:	4a89      	ldr	r2, [pc, #548]	; (8010164 <face_detection_configure_activations+0x270>)
 800ff3e:	60d3      	str	r3, [r2, #12]
    
    conversion_0_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 74380);
 800ff40:	4b84      	ldr	r3, [pc, #528]	; (8010154 <face_detection_configure_activations+0x260>)
 800ff42:	681a      	ldr	r2, [r3, #0]
 800ff44:	4b84      	ldr	r3, [pc, #528]	; (8010158 <face_detection_configure_activations+0x264>)
 800ff46:	4413      	add	r3, r2
 800ff48:	4a87      	ldr	r2, [pc, #540]	; (8010168 <face_detection_configure_activations+0x274>)
 800ff4a:	6093      	str	r3, [r2, #8]
    conversion_0_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 74380);
 800ff4c:	4b81      	ldr	r3, [pc, #516]	; (8010154 <face_detection_configure_activations+0x260>)
 800ff4e:	681a      	ldr	r2, [r3, #0]
 800ff50:	4b81      	ldr	r3, [pc, #516]	; (8010158 <face_detection_configure_activations+0x264>)
 800ff52:	4413      	add	r3, r2
 800ff54:	4a84      	ldr	r2, [pc, #528]	; (8010168 <face_detection_configure_activations+0x274>)
 800ff56:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 73728);
 800ff58:	4b7e      	ldr	r3, [pc, #504]	; (8010154 <face_detection_configure_activations+0x260>)
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 800ff60:	4a82      	ldr	r2, [pc, #520]	; (801016c <face_detection_configure_activations+0x278>)
 800ff62:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 73728);
 800ff64:	4b7b      	ldr	r3, [pc, #492]	; (8010154 <face_detection_configure_activations+0x260>)
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 800ff6c:	4a7f      	ldr	r2, [pc, #508]	; (801016c <face_detection_configure_activations+0x278>)
 800ff6e:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 800ff70:	4b78      	ldr	r3, [pc, #480]	; (8010154 <face_detection_configure_activations+0x260>)
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	4a7e      	ldr	r2, [pc, #504]	; (8010170 <face_detection_configure_activations+0x27c>)
 800ff76:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 800ff78:	4b76      	ldr	r3, [pc, #472]	; (8010154 <face_detection_configure_activations+0x260>)
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	4a7c      	ldr	r2, [pc, #496]	; (8010170 <face_detection_configure_activations+0x27c>)
 800ff7e:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 800ff80:	4b74      	ldr	r3, [pc, #464]	; (8010154 <face_detection_configure_activations+0x260>)
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	4a7b      	ldr	r2, [pc, #492]	; (8010174 <face_detection_configure_activations+0x280>)
 800ff86:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 800ff88:	4b72      	ldr	r3, [pc, #456]	; (8010154 <face_detection_configure_activations+0x260>)
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	4a79      	ldr	r2, [pc, #484]	; (8010174 <face_detection_configure_activations+0x280>)
 800ff8e:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 108140);
 800ff90:	4b70      	ldr	r3, [pc, #448]	; (8010154 <face_detection_configure_activations+0x260>)
 800ff92:	681a      	ldr	r2, [r3, #0]
 800ff94:	4b78      	ldr	r3, [pc, #480]	; (8010178 <face_detection_configure_activations+0x284>)
 800ff96:	4413      	add	r3, r2
 800ff98:	4a78      	ldr	r2, [pc, #480]	; (801017c <face_detection_configure_activations+0x288>)
 800ff9a:	6093      	str	r3, [r2, #8]
    conv2d_2_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 108140);
 800ff9c:	4b6d      	ldr	r3, [pc, #436]	; (8010154 <face_detection_configure_activations+0x260>)
 800ff9e:	681a      	ldr	r2, [r3, #0]
 800ffa0:	4b75      	ldr	r3, [pc, #468]	; (8010178 <face_detection_configure_activations+0x284>)
 800ffa2:	4413      	add	r3, r2
 800ffa4:	4a75      	ldr	r2, [pc, #468]	; (801017c <face_detection_configure_activations+0x288>)
 800ffa6:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 800ffa8:	4b6a      	ldr	r3, [pc, #424]	; (8010154 <face_detection_configure_activations+0x260>)
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	4a74      	ldr	r2, [pc, #464]	; (8010180 <face_detection_configure_activations+0x28c>)
 800ffae:	6093      	str	r3, [r2, #8]
    conv2d_2_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 800ffb0:	4b68      	ldr	r3, [pc, #416]	; (8010154 <face_detection_configure_activations+0x260>)
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	4a72      	ldr	r2, [pc, #456]	; (8010180 <face_detection_configure_activations+0x28c>)
 800ffb6:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 300);
 800ffb8:	4b66      	ldr	r3, [pc, #408]	; (8010154 <face_detection_configure_activations+0x260>)
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800ffc0:	4a70      	ldr	r2, [pc, #448]	; (8010184 <face_detection_configure_activations+0x290>)
 800ffc2:	6093      	str	r3, [r2, #8]
    conv2d_2_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 300);
 800ffc4:	4b63      	ldr	r3, [pc, #396]	; (8010154 <face_detection_configure_activations+0x260>)
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800ffcc:	4a6d      	ldr	r2, [pc, #436]	; (8010184 <face_detection_configure_activations+0x290>)
 800ffce:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 107372);
 800ffd0:	4b60      	ldr	r3, [pc, #384]	; (8010154 <face_detection_configure_activations+0x260>)
 800ffd2:	681a      	ldr	r2, [r3, #0]
 800ffd4:	4b6c      	ldr	r3, [pc, #432]	; (8010188 <face_detection_configure_activations+0x294>)
 800ffd6:	4413      	add	r3, r2
 800ffd8:	4a6c      	ldr	r2, [pc, #432]	; (801018c <face_detection_configure_activations+0x298>)
 800ffda:	6093      	str	r3, [r2, #8]
    conv2d_2_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 107372);
 800ffdc:	4b5d      	ldr	r3, [pc, #372]	; (8010154 <face_detection_configure_activations+0x260>)
 800ffde:	681a      	ldr	r2, [r3, #0]
 800ffe0:	4b69      	ldr	r3, [pc, #420]	; (8010188 <face_detection_configure_activations+0x294>)
 800ffe2:	4413      	add	r3, r2
 800ffe4:	4a69      	ldr	r2, [pc, #420]	; (801018c <face_detection_configure_activations+0x298>)
 800ffe6:	60d3      	str	r3, [r2, #12]
    
    conv2d_3_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 800ffe8:	4b5a      	ldr	r3, [pc, #360]	; (8010154 <face_detection_configure_activations+0x260>)
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	4a68      	ldr	r2, [pc, #416]	; (8010190 <face_detection_configure_activations+0x29c>)
 800ffee:	6093      	str	r3, [r2, #8]
    conv2d_3_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 800fff0:	4b58      	ldr	r3, [pc, #352]	; (8010154 <face_detection_configure_activations+0x260>)
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	4a66      	ldr	r2, [pc, #408]	; (8010190 <face_detection_configure_activations+0x29c>)
 800fff6:	60d3      	str	r3, [r2, #12]
    
    conv2d_3_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 32108);
 800fff8:	4b56      	ldr	r3, [pc, #344]	; (8010154 <face_detection_configure_activations+0x260>)
 800fffa:	681a      	ldr	r2, [r3, #0]
 800fffc:	f647 536c 	movw	r3, #32108	; 0x7d6c
 8010000:	4413      	add	r3, r2
 8010002:	4a64      	ldr	r2, [pc, #400]	; (8010194 <face_detection_configure_activations+0x2a0>)
 8010004:	6093      	str	r3, [r2, #8]
    conv2d_3_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 32108);
 8010006:	4b53      	ldr	r3, [pc, #332]	; (8010154 <face_detection_configure_activations+0x260>)
 8010008:	681a      	ldr	r2, [r3, #0]
 801000a:	f647 536c 	movw	r3, #32108	; 0x7d6c
 801000e:	4413      	add	r3, r2
 8010010:	4a60      	ldr	r2, [pc, #384]	; (8010194 <face_detection_configure_activations+0x2a0>)
 8010012:	60d3      	str	r3, [r2, #12]
    
    conv2d_3_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 32108);
 8010014:	4b4f      	ldr	r3, [pc, #316]	; (8010154 <face_detection_configure_activations+0x260>)
 8010016:	681a      	ldr	r2, [r3, #0]
 8010018:	f647 536c 	movw	r3, #32108	; 0x7d6c
 801001c:	4413      	add	r3, r2
 801001e:	4a5e      	ldr	r2, [pc, #376]	; (8010198 <face_detection_configure_activations+0x2a4>)
 8010020:	6093      	str	r3, [r2, #8]
    conv2d_3_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 32108);
 8010022:	4b4c      	ldr	r3, [pc, #304]	; (8010154 <face_detection_configure_activations+0x260>)
 8010024:	681a      	ldr	r2, [r3, #0]
 8010026:	f647 536c 	movw	r3, #32108	; 0x7d6c
 801002a:	4413      	add	r3, r2
 801002c:	4a5a      	ldr	r2, [pc, #360]	; (8010198 <face_detection_configure_activations+0x2a4>)
 801002e:	60d3      	str	r3, [r2, #12]
    
    conv2d_5_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 29020);
 8010030:	4b48      	ldr	r3, [pc, #288]	; (8010154 <face_detection_configure_activations+0x260>)
 8010032:	681a      	ldr	r2, [r3, #0]
 8010034:	f247 135c 	movw	r3, #29020	; 0x715c
 8010038:	4413      	add	r3, r2
 801003a:	4a58      	ldr	r2, [pc, #352]	; (801019c <face_detection_configure_activations+0x2a8>)
 801003c:	6093      	str	r3, [r2, #8]
    conv2d_5_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 29020);
 801003e:	4b45      	ldr	r3, [pc, #276]	; (8010154 <face_detection_configure_activations+0x260>)
 8010040:	681a      	ldr	r2, [r3, #0]
 8010042:	f247 135c 	movw	r3, #29020	; 0x715c
 8010046:	4413      	add	r3, r2
 8010048:	4a54      	ldr	r2, [pc, #336]	; (801019c <face_detection_configure_activations+0x2a8>)
 801004a:	60d3      	str	r3, [r2, #12]
    
    conv2d_5_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 801004c:	4b41      	ldr	r3, [pc, #260]	; (8010154 <face_detection_configure_activations+0x260>)
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	4a53      	ldr	r2, [pc, #332]	; (80101a0 <face_detection_configure_activations+0x2ac>)
 8010052:	6093      	str	r3, [r2, #8]
    conv2d_5_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010054:	4b3f      	ldr	r3, [pc, #252]	; (8010154 <face_detection_configure_activations+0x260>)
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	4a51      	ldr	r2, [pc, #324]	; (80101a0 <face_detection_configure_activations+0x2ac>)
 801005a:	60d3      	str	r3, [r2, #12]
    
    conv2d_5_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 28252);
 801005c:	4b3d      	ldr	r3, [pc, #244]	; (8010154 <face_detection_configure_activations+0x260>)
 801005e:	681a      	ldr	r2, [r3, #0]
 8010060:	f646 635c 	movw	r3, #28252	; 0x6e5c
 8010064:	4413      	add	r3, r2
 8010066:	4a4f      	ldr	r2, [pc, #316]	; (80101a4 <face_detection_configure_activations+0x2b0>)
 8010068:	6093      	str	r3, [r2, #8]
    conv2d_5_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 28252);
 801006a:	4b3a      	ldr	r3, [pc, #232]	; (8010154 <face_detection_configure_activations+0x260>)
 801006c:	681a      	ldr	r2, [r3, #0]
 801006e:	f646 635c 	movw	r3, #28252	; 0x6e5c
 8010072:	4413      	add	r3, r2
 8010074:	4a4b      	ldr	r2, [pc, #300]	; (80101a4 <face_detection_configure_activations+0x2b0>)
 8010076:	60d3      	str	r3, [r2, #12]
    
    conv2d_5_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 28252);
 8010078:	4b36      	ldr	r3, [pc, #216]	; (8010154 <face_detection_configure_activations+0x260>)
 801007a:	681a      	ldr	r2, [r3, #0]
 801007c:	f646 635c 	movw	r3, #28252	; 0x6e5c
 8010080:	4413      	add	r3, r2
 8010082:	4a49      	ldr	r2, [pc, #292]	; (80101a8 <face_detection_configure_activations+0x2b4>)
 8010084:	6093      	str	r3, [r2, #8]
    conv2d_5_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 28252);
 8010086:	4b33      	ldr	r3, [pc, #204]	; (8010154 <face_detection_configure_activations+0x260>)
 8010088:	681a      	ldr	r2, [r3, #0]
 801008a:	f646 635c 	movw	r3, #28252	; 0x6e5c
 801008e:	4413      	add	r3, r2
 8010090:	4a45      	ldr	r2, [pc, #276]	; (80101a8 <face_detection_configure_activations+0x2b4>)
 8010092:	60d3      	str	r3, [r2, #12]
    
    conv2d_6_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010094:	4b2f      	ldr	r3, [pc, #188]	; (8010154 <face_detection_configure_activations+0x260>)
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	4a44      	ldr	r2, [pc, #272]	; (80101ac <face_detection_configure_activations+0x2b8>)
 801009a:	6093      	str	r3, [r2, #8]
    conv2d_6_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 801009c:	4b2d      	ldr	r3, [pc, #180]	; (8010154 <face_detection_configure_activations+0x260>)
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	4a42      	ldr	r2, [pc, #264]	; (80101ac <face_detection_configure_activations+0x2b8>)
 80100a2:	60d3      	str	r3, [r2, #12]
    
    conv2d_6_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 65116);
 80100a4:	4b2b      	ldr	r3, [pc, #172]	; (8010154 <face_detection_configure_activations+0x260>)
 80100a6:	681a      	ldr	r2, [r3, #0]
 80100a8:	f64f 635c 	movw	r3, #65116	; 0xfe5c
 80100ac:	4413      	add	r3, r2
 80100ae:	4a40      	ldr	r2, [pc, #256]	; (80101b0 <face_detection_configure_activations+0x2bc>)
 80100b0:	6093      	str	r3, [r2, #8]
    conv2d_6_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 65116);
 80100b2:	4b28      	ldr	r3, [pc, #160]	; (8010154 <face_detection_configure_activations+0x260>)
 80100b4:	681a      	ldr	r2, [r3, #0]
 80100b6:	f64f 635c 	movw	r3, #65116	; 0xfe5c
 80100ba:	4413      	add	r3, r2
 80100bc:	4a3c      	ldr	r2, [pc, #240]	; (80101b0 <face_detection_configure_activations+0x2bc>)
 80100be:	60d3      	str	r3, [r2, #12]
    
    conv2d_6_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 65116);
 80100c0:	4b24      	ldr	r3, [pc, #144]	; (8010154 <face_detection_configure_activations+0x260>)
 80100c2:	681a      	ldr	r2, [r3, #0]
 80100c4:	f64f 635c 	movw	r3, #65116	; 0xfe5c
 80100c8:	4413      	add	r3, r2
 80100ca:	4a3a      	ldr	r2, [pc, #232]	; (80101b4 <face_detection_configure_activations+0x2c0>)
 80100cc:	6093      	str	r3, [r2, #8]
    conv2d_6_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 65116);
 80100ce:	4b21      	ldr	r3, [pc, #132]	; (8010154 <face_detection_configure_activations+0x260>)
 80100d0:	681a      	ldr	r2, [r3, #0]
 80100d2:	f64f 635c 	movw	r3, #65116	; 0xfe5c
 80100d6:	4413      	add	r3, r2
 80100d8:	4a36      	ldr	r2, [pc, #216]	; (80101b4 <face_detection_configure_activations+0x2c0>)
 80100da:	60d3      	str	r3, [r2, #12]
    
    conv2d_7_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 58844);
 80100dc:	4b1d      	ldr	r3, [pc, #116]	; (8010154 <face_detection_configure_activations+0x260>)
 80100de:	681a      	ldr	r2, [r3, #0]
 80100e0:	f24e 53dc 	movw	r3, #58844	; 0xe5dc
 80100e4:	4413      	add	r3, r2
 80100e6:	4a34      	ldr	r2, [pc, #208]	; (80101b8 <face_detection_configure_activations+0x2c4>)
 80100e8:	6093      	str	r3, [r2, #8]
    conv2d_7_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 58844);
 80100ea:	4b1a      	ldr	r3, [pc, #104]	; (8010154 <face_detection_configure_activations+0x260>)
 80100ec:	681a      	ldr	r2, [r3, #0]
 80100ee:	f24e 53dc 	movw	r3, #58844	; 0xe5dc
 80100f2:	4413      	add	r3, r2
 80100f4:	4a30      	ldr	r2, [pc, #192]	; (80101b8 <face_detection_configure_activations+0x2c4>)
 80100f6:	60d3      	str	r3, [r2, #12]
    
    conv2d_7_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 80100f8:	4b16      	ldr	r3, [pc, #88]	; (8010154 <face_detection_configure_activations+0x260>)
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	4a2f      	ldr	r2, [pc, #188]	; (80101bc <face_detection_configure_activations+0x2c8>)
 80100fe:	6093      	str	r3, [r2, #8]
    conv2d_7_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010100:	4b14      	ldr	r3, [pc, #80]	; (8010154 <face_detection_configure_activations+0x260>)
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	4a2d      	ldr	r2, [pc, #180]	; (80101bc <face_detection_configure_activations+0x2c8>)
 8010106:	60d3      	str	r3, [r2, #12]
    
    conv2d_7_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 57308);
 8010108:	4b12      	ldr	r3, [pc, #72]	; (8010154 <face_detection_configure_activations+0x260>)
 801010a:	681a      	ldr	r2, [r3, #0]
 801010c:	f64d 73dc 	movw	r3, #57308	; 0xdfdc
 8010110:	4413      	add	r3, r2
 8010112:	4a2b      	ldr	r2, [pc, #172]	; (80101c0 <face_detection_configure_activations+0x2cc>)
 8010114:	6093      	str	r3, [r2, #8]
    conv2d_7_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 57308);
 8010116:	4b0f      	ldr	r3, [pc, #60]	; (8010154 <face_detection_configure_activations+0x260>)
 8010118:	681a      	ldr	r2, [r3, #0]
 801011a:	f64d 73dc 	movw	r3, #57308	; 0xdfdc
 801011e:	4413      	add	r3, r2
 8010120:	4a27      	ldr	r2, [pc, #156]	; (80101c0 <face_detection_configure_activations+0x2cc>)
 8010122:	60d3      	str	r3, [r2, #12]
    
    conv2d_7_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 57308);
 8010124:	4b0b      	ldr	r3, [pc, #44]	; (8010154 <face_detection_configure_activations+0x260>)
 8010126:	681a      	ldr	r2, [r3, #0]
 8010128:	f64d 73dc 	movw	r3, #57308	; 0xdfdc
 801012c:	4413      	add	r3, r2
 801012e:	4a25      	ldr	r2, [pc, #148]	; (80101c4 <face_detection_configure_activations+0x2d0>)
 8010130:	6093      	str	r3, [r2, #8]
    conv2d_7_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 57308);
 8010132:	4b08      	ldr	r3, [pc, #32]	; (8010154 <face_detection_configure_activations+0x260>)
 8010134:	681a      	ldr	r2, [r3, #0]
 8010136:	f64d 73dc 	movw	r3, #57308	; 0xdfdc
 801013a:	4413      	add	r3, r2
 801013c:	4a21      	ldr	r2, [pc, #132]	; (80101c4 <face_detection_configure_activations+0x2d0>)
 801013e:	60d3      	str	r3, [r2, #12]
    
    conv2d_8_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010140:	4b04      	ldr	r3, [pc, #16]	; (8010154 <face_detection_configure_activations+0x260>)
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	4a20      	ldr	r2, [pc, #128]	; (80101c8 <face_detection_configure_activations+0x2d4>)
 8010146:	6093      	str	r3, [r2, #8]
    conv2d_8_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010148:	4b02      	ldr	r3, [pc, #8]	; (8010154 <face_detection_configure_activations+0x260>)
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	4a1e      	ldr	r2, [pc, #120]	; (80101c8 <face_detection_configure_activations+0x2d4>)
 801014e:	60d3      	str	r3, [r2, #12]
 8010150:	e03c      	b.n	80101cc <face_detection_configure_activations+0x2d8>
 8010152:	bf00      	nop
 8010154:	2405ded0 	.word	0x2405ded0
 8010158:	0001228c 	.word	0x0001228c
 801015c:	24000528 	.word	0x24000528
 8010160:	0002d28c 	.word	0x0002d28c
 8010164:	24000508 	.word	0x24000508
 8010168:	24000538 	.word	0x24000538
 801016c:	24000cc8 	.word	0x24000cc8
 8010170:	24000cf8 	.word	0x24000cf8
 8010174:	24000558 	.word	0x24000558
 8010178:	0001a66c 	.word	0x0001a66c
 801017c:	24000568 	.word	0x24000568
 8010180:	24000d28 	.word	0x24000d28
 8010184:	24000d58 	.word	0x24000d58
 8010188:	0001a36c 	.word	0x0001a36c
 801018c:	24000588 	.word	0x24000588
 8010190:	24000d88 	.word	0x24000d88
 8010194:	24000db8 	.word	0x24000db8
 8010198:	24000598 	.word	0x24000598
 801019c:	240005b8 	.word	0x240005b8
 80101a0:	24000de8 	.word	0x24000de8
 80101a4:	24000e18 	.word	0x24000e18
 80101a8:	240005c8 	.word	0x240005c8
 80101ac:	24000e28 	.word	0x24000e28
 80101b0:	24000e38 	.word	0x24000e38
 80101b4:	240005e8 	.word	0x240005e8
 80101b8:	240005f8 	.word	0x240005f8
 80101bc:	24000e48 	.word	0x24000e48
 80101c0:	24000e58 	.word	0x24000e58
 80101c4:	24000618 	.word	0x24000618
 80101c8:	24000e68 	.word	0x24000e68
    
    conv2d_8_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 55772);
 80101cc:	4b92      	ldr	r3, [pc, #584]	; (8010418 <face_detection_configure_activations+0x524>)
 80101ce:	681a      	ldr	r2, [r3, #0]
 80101d0:	f64d 13dc 	movw	r3, #55772	; 0xd9dc
 80101d4:	4413      	add	r3, r2
 80101d6:	4a91      	ldr	r2, [pc, #580]	; (801041c <face_detection_configure_activations+0x528>)
 80101d8:	6093      	str	r3, [r2, #8]
    conv2d_8_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 55772);
 80101da:	4b8f      	ldr	r3, [pc, #572]	; (8010418 <face_detection_configure_activations+0x524>)
 80101dc:	681a      	ldr	r2, [r3, #0]
 80101de:	f64d 13dc 	movw	r3, #55772	; 0xd9dc
 80101e2:	4413      	add	r3, r2
 80101e4:	4a8d      	ldr	r2, [pc, #564]	; (801041c <face_detection_configure_activations+0x528>)
 80101e6:	60d3      	str	r3, [r2, #12]
    
    conv2d_8_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 55772);
 80101e8:	4b8b      	ldr	r3, [pc, #556]	; (8010418 <face_detection_configure_activations+0x524>)
 80101ea:	681a      	ldr	r2, [r3, #0]
 80101ec:	f64d 13dc 	movw	r3, #55772	; 0xd9dc
 80101f0:	4413      	add	r3, r2
 80101f2:	4a8b      	ldr	r2, [pc, #556]	; (8010420 <face_detection_configure_activations+0x52c>)
 80101f4:	6093      	str	r3, [r2, #8]
    conv2d_8_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 55772);
 80101f6:	4b88      	ldr	r3, [pc, #544]	; (8010418 <face_detection_configure_activations+0x524>)
 80101f8:	681a      	ldr	r2, [r3, #0]
 80101fa:	f64d 13dc 	movw	r3, #55772	; 0xd9dc
 80101fe:	4413      	add	r3, r2
 8010200:	4a87      	ldr	r2, [pc, #540]	; (8010420 <face_detection_configure_activations+0x52c>)
 8010202:	60d3      	str	r3, [r2, #12]
    
    conv2d_10_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 52668);
 8010204:	4b84      	ldr	r3, [pc, #528]	; (8010418 <face_detection_configure_activations+0x524>)
 8010206:	681a      	ldr	r2, [r3, #0]
 8010208:	f64c 53bc 	movw	r3, #52668	; 0xcdbc
 801020c:	4413      	add	r3, r2
 801020e:	4a85      	ldr	r2, [pc, #532]	; (8010424 <face_detection_configure_activations+0x530>)
 8010210:	6093      	str	r3, [r2, #8]
    conv2d_10_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 52668);
 8010212:	4b81      	ldr	r3, [pc, #516]	; (8010418 <face_detection_configure_activations+0x524>)
 8010214:	681a      	ldr	r2, [r3, #0]
 8010216:	f64c 53bc 	movw	r3, #52668	; 0xcdbc
 801021a:	4413      	add	r3, r2
 801021c:	4a81      	ldr	r2, [pc, #516]	; (8010424 <face_detection_configure_activations+0x530>)
 801021e:	60d3      	str	r3, [r2, #12]
    
    conv2d_10_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010220:	4b7d      	ldr	r3, [pc, #500]	; (8010418 <face_detection_configure_activations+0x524>)
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	4a80      	ldr	r2, [pc, #512]	; (8010428 <face_detection_configure_activations+0x534>)
 8010226:	6093      	str	r3, [r2, #8]
    conv2d_10_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010228:	4b7b      	ldr	r3, [pc, #492]	; (8010418 <face_detection_configure_activations+0x524>)
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	4a7e      	ldr	r2, [pc, #504]	; (8010428 <face_detection_configure_activations+0x534>)
 801022e:	60d3      	str	r3, [r2, #12]
    
    conv2d_10_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 1188);
 8010230:	4b79      	ldr	r3, [pc, #484]	; (8010418 <face_detection_configure_activations+0x524>)
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8010238:	4a7c      	ldr	r2, [pc, #496]	; (801042c <face_detection_configure_activations+0x538>)
 801023a:	6093      	str	r3, [r2, #8]
    conv2d_10_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 1188);
 801023c:	4b76      	ldr	r3, [pc, #472]	; (8010418 <face_detection_configure_activations+0x524>)
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8010244:	4a79      	ldr	r2, [pc, #484]	; (801042c <face_detection_configure_activations+0x538>)
 8010246:	60d3      	str	r3, [r2, #12]
    
    conv2d_10_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 19620);
 8010248:	4b73      	ldr	r3, [pc, #460]	; (8010418 <face_detection_configure_activations+0x524>)
 801024a:	681a      	ldr	r2, [r3, #0]
 801024c:	f644 43a4 	movw	r3, #19620	; 0x4ca4
 8010250:	4413      	add	r3, r2
 8010252:	4a77      	ldr	r2, [pc, #476]	; (8010430 <face_detection_configure_activations+0x53c>)
 8010254:	6093      	str	r3, [r2, #8]
    conv2d_10_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 19620);
 8010256:	4b70      	ldr	r3, [pc, #448]	; (8010418 <face_detection_configure_activations+0x524>)
 8010258:	681a      	ldr	r2, [r3, #0]
 801025a:	f644 43a4 	movw	r3, #19620	; 0x4ca4
 801025e:	4413      	add	r3, r2
 8010260:	4a73      	ldr	r2, [pc, #460]	; (8010430 <face_detection_configure_activations+0x53c>)
 8010262:	60d3      	str	r3, [r2, #12]
    
    conv2d_11_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010264:	4b6c      	ldr	r3, [pc, #432]	; (8010418 <face_detection_configure_activations+0x524>)
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	4a72      	ldr	r2, [pc, #456]	; (8010434 <face_detection_configure_activations+0x540>)
 801026a:	6093      	str	r3, [r2, #8]
    conv2d_11_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 801026c:	4b6a      	ldr	r3, [pc, #424]	; (8010418 <face_detection_configure_activations+0x524>)
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	4a70      	ldr	r2, [pc, #448]	; (8010434 <face_detection_configure_activations+0x540>)
 8010272:	60d3      	str	r3, [r2, #12]
    
    conv2d_11_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 38052);
 8010274:	4b68      	ldr	r3, [pc, #416]	; (8010418 <face_detection_configure_activations+0x524>)
 8010276:	681a      	ldr	r2, [r3, #0]
 8010278:	f249 43a4 	movw	r3, #38052	; 0x94a4
 801027c:	4413      	add	r3, r2
 801027e:	4a6e      	ldr	r2, [pc, #440]	; (8010438 <face_detection_configure_activations+0x544>)
 8010280:	6093      	str	r3, [r2, #8]
    conv2d_11_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 38052);
 8010282:	4b65      	ldr	r3, [pc, #404]	; (8010418 <face_detection_configure_activations+0x524>)
 8010284:	681a      	ldr	r2, [r3, #0]
 8010286:	f249 43a4 	movw	r3, #38052	; 0x94a4
 801028a:	4413      	add	r3, r2
 801028c:	4a6a      	ldr	r2, [pc, #424]	; (8010438 <face_detection_configure_activations+0x544>)
 801028e:	60d3      	str	r3, [r2, #12]
    
    conv2d_11_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 74916);
 8010290:	4b61      	ldr	r3, [pc, #388]	; (8010418 <face_detection_configure_activations+0x524>)
 8010292:	681a      	ldr	r2, [r3, #0]
 8010294:	4b69      	ldr	r3, [pc, #420]	; (801043c <face_detection_configure_activations+0x548>)
 8010296:	4413      	add	r3, r2
 8010298:	4a69      	ldr	r2, [pc, #420]	; (8010440 <face_detection_configure_activations+0x54c>)
 801029a:	6093      	str	r3, [r2, #8]
    conv2d_11_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 74916);
 801029c:	4b5e      	ldr	r3, [pc, #376]	; (8010418 <face_detection_configure_activations+0x524>)
 801029e:	681a      	ldr	r2, [r3, #0]
 80102a0:	4b66      	ldr	r3, [pc, #408]	; (801043c <face_detection_configure_activations+0x548>)
 80102a2:	4413      	add	r3, r2
 80102a4:	4a66      	ldr	r2, [pc, #408]	; (8010440 <face_detection_configure_activations+0x54c>)
 80102a6:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 80102a8:	4b5b      	ldr	r3, [pc, #364]	; (8010418 <face_detection_configure_activations+0x524>)
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	4a65      	ldr	r2, [pc, #404]	; (8010444 <face_detection_configure_activations+0x550>)
 80102ae:	6093      	str	r3, [r2, #8]
    conv2d_12_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 80102b0:	4b59      	ldr	r3, [pc, #356]	; (8010418 <face_detection_configure_activations+0x524>)
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	4a63      	ldr	r2, [pc, #396]	; (8010444 <face_detection_configure_activations+0x550>)
 80102b6:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 43264);
 80102b8:	4b57      	ldr	r3, [pc, #348]	; (8010418 <face_detection_configure_activations+0x524>)
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	f503 4329 	add.w	r3, r3, #43264	; 0xa900
 80102c0:	4a61      	ldr	r2, [pc, #388]	; (8010448 <face_detection_configure_activations+0x554>)
 80102c2:	6093      	str	r3, [r2, #8]
    conv2d_12_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 43264);
 80102c4:	4b54      	ldr	r3, [pc, #336]	; (8010418 <face_detection_configure_activations+0x524>)
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	f503 4329 	add.w	r3, r3, #43264	; 0xa900
 80102cc:	4a5e      	ldr	r2, [pc, #376]	; (8010448 <face_detection_configure_activations+0x554>)
 80102ce:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 45636);
 80102d0:	4b51      	ldr	r3, [pc, #324]	; (8010418 <face_detection_configure_activations+0x524>)
 80102d2:	681a      	ldr	r2, [r3, #0]
 80102d4:	f24b 2344 	movw	r3, #45636	; 0xb244
 80102d8:	4413      	add	r3, r2
 80102da:	4a5c      	ldr	r2, [pc, #368]	; (801044c <face_detection_configure_activations+0x558>)
 80102dc:	6093      	str	r3, [r2, #8]
    conv2d_12_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 45636);
 80102de:	4b4e      	ldr	r3, [pc, #312]	; (8010418 <face_detection_configure_activations+0x524>)
 80102e0:	681a      	ldr	r2, [r3, #0]
 80102e2:	f24b 2344 	movw	r3, #45636	; 0xb244
 80102e6:	4413      	add	r3, r2
 80102e8:	4a58      	ldr	r2, [pc, #352]	; (801044c <face_detection_configure_activations+0x558>)
 80102ea:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 82500);
 80102ec:	4b4a      	ldr	r3, [pc, #296]	; (8010418 <face_detection_configure_activations+0x524>)
 80102ee:	681a      	ldr	r2, [r3, #0]
 80102f0:	4b57      	ldr	r3, [pc, #348]	; (8010450 <face_detection_configure_activations+0x55c>)
 80102f2:	4413      	add	r3, r2
 80102f4:	4a57      	ldr	r2, [pc, #348]	; (8010454 <face_detection_configure_activations+0x560>)
 80102f6:	6093      	str	r3, [r2, #8]
    conv2d_12_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 82500);
 80102f8:	4b47      	ldr	r3, [pc, #284]	; (8010418 <face_detection_configure_activations+0x524>)
 80102fa:	681a      	ldr	r2, [r3, #0]
 80102fc:	4b54      	ldr	r3, [pc, #336]	; (8010450 <face_detection_configure_activations+0x55c>)
 80102fe:	4413      	add	r3, r2
 8010300:	4a54      	ldr	r2, [pc, #336]	; (8010454 <face_detection_configure_activations+0x560>)
 8010302:	60d3      	str	r3, [r2, #12]
    
    conv2d_13_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010304:	4b44      	ldr	r3, [pc, #272]	; (8010418 <face_detection_configure_activations+0x524>)
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	4a53      	ldr	r2, [pc, #332]	; (8010458 <face_detection_configure_activations+0x564>)
 801030a:	6093      	str	r3, [r2, #8]
    conv2d_13_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 801030c:	4b42      	ldr	r3, [pc, #264]	; (8010418 <face_detection_configure_activations+0x524>)
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	4a51      	ldr	r2, [pc, #324]	; (8010458 <face_detection_configure_activations+0x564>)
 8010312:	60d3      	str	r3, [r2, #12]
    
    conv2d_13_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 896);
 8010314:	4b40      	ldr	r3, [pc, #256]	; (8010418 <face_detection_configure_activations+0x524>)
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	f503 7360 	add.w	r3, r3, #896	; 0x380
 801031c:	4a4f      	ldr	r2, [pc, #316]	; (801045c <face_detection_configure_activations+0x568>)
 801031e:	6093      	str	r3, [r2, #8]
    conv2d_13_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 896);
 8010320:	4b3d      	ldr	r3, [pc, #244]	; (8010418 <face_detection_configure_activations+0x524>)
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8010328:	4a4c      	ldr	r2, [pc, #304]	; (801045c <face_detection_configure_activations+0x568>)
 801032a:	60d3      	str	r3, [r2, #12]
    
    conv2d_13_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 37760);
 801032c:	4b3a      	ldr	r3, [pc, #232]	; (8010418 <face_detection_configure_activations+0x524>)
 801032e:	681a      	ldr	r2, [r3, #0]
 8010330:	f249 3380 	movw	r3, #37760	; 0x9380
 8010334:	4413      	add	r3, r2
 8010336:	4a4a      	ldr	r2, [pc, #296]	; (8010460 <face_detection_configure_activations+0x56c>)
 8010338:	6093      	str	r3, [r2, #8]
    conv2d_13_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 37760);
 801033a:	4b37      	ldr	r3, [pc, #220]	; (8010418 <face_detection_configure_activations+0x524>)
 801033c:	681a      	ldr	r2, [r3, #0]
 801033e:	f249 3380 	movw	r3, #37760	; 0x9380
 8010342:	4413      	add	r3, r2
 8010344:	4a46      	ldr	r2, [pc, #280]	; (8010460 <face_detection_configure_activations+0x56c>)
 8010346:	60d3      	str	r3, [r2, #12]
    
    conv2d_16_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 74624);
 8010348:	4b33      	ldr	r3, [pc, #204]	; (8010418 <face_detection_configure_activations+0x524>)
 801034a:	681a      	ldr	r2, [r3, #0]
 801034c:	4b45      	ldr	r3, [pc, #276]	; (8010464 <face_detection_configure_activations+0x570>)
 801034e:	4413      	add	r3, r2
 8010350:	4a45      	ldr	r2, [pc, #276]	; (8010468 <face_detection_configure_activations+0x574>)
 8010352:	6093      	str	r3, [r2, #8]
    conv2d_16_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 74624);
 8010354:	4b30      	ldr	r3, [pc, #192]	; (8010418 <face_detection_configure_activations+0x524>)
 8010356:	681a      	ldr	r2, [r3, #0]
 8010358:	4b42      	ldr	r3, [pc, #264]	; (8010464 <face_detection_configure_activations+0x570>)
 801035a:	4413      	add	r3, r2
 801035c:	4a42      	ldr	r2, [pc, #264]	; (8010468 <face_detection_configure_activations+0x574>)
 801035e:	60d3      	str	r3, [r2, #12]
    
    conv2d_16_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010360:	4b2d      	ldr	r3, [pc, #180]	; (8010418 <face_detection_configure_activations+0x524>)
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	4a41      	ldr	r2, [pc, #260]	; (801046c <face_detection_configure_activations+0x578>)
 8010366:	6093      	str	r3, [r2, #8]
    conv2d_16_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010368:	4b2b      	ldr	r3, [pc, #172]	; (8010418 <face_detection_configure_activations+0x524>)
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	4a3f      	ldr	r2, [pc, #252]	; (801046c <face_detection_configure_activations+0x578>)
 801036e:	60d3      	str	r3, [r2, #12]
    
    conv2d_16_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 2372);
 8010370:	4b29      	ldr	r3, [pc, #164]	; (8010418 <face_detection_configure_activations+0x524>)
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8010378:	4a3d      	ldr	r2, [pc, #244]	; (8010470 <face_detection_configure_activations+0x57c>)
 801037a:	6093      	str	r3, [r2, #8]
    conv2d_16_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 2372);
 801037c:	4b26      	ldr	r3, [pc, #152]	; (8010418 <face_detection_configure_activations+0x524>)
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8010384:	4a3a      	ldr	r2, [pc, #232]	; (8010470 <face_detection_configure_activations+0x57c>)
 8010386:	60d3      	str	r3, [r2, #12]
    
    conv2d_16_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 11588);
 8010388:	4b23      	ldr	r3, [pc, #140]	; (8010418 <face_detection_configure_activations+0x524>)
 801038a:	681a      	ldr	r2, [r3, #0]
 801038c:	f642 5344 	movw	r3, #11588	; 0x2d44
 8010390:	4413      	add	r3, r2
 8010392:	4a38      	ldr	r2, [pc, #224]	; (8010474 <face_detection_configure_activations+0x580>)
 8010394:	6093      	str	r3, [r2, #8]
    conv2d_16_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 11588);
 8010396:	4b20      	ldr	r3, [pc, #128]	; (8010418 <face_detection_configure_activations+0x524>)
 8010398:	681a      	ldr	r2, [r3, #0]
 801039a:	f642 5344 	movw	r3, #11588	; 0x2d44
 801039e:	4413      	add	r3, r2
 80103a0:	4a34      	ldr	r2, [pc, #208]	; (8010474 <face_detection_configure_activations+0x580>)
 80103a2:	60d3      	str	r3, [r2, #12]
    
    conv2d_17_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 80103a4:	4b1c      	ldr	r3, [pc, #112]	; (8010418 <face_detection_configure_activations+0x524>)
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	4a33      	ldr	r2, [pc, #204]	; (8010478 <face_detection_configure_activations+0x584>)
 80103aa:	6093      	str	r3, [r2, #8]
    conv2d_17_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 80103ac:	4b1a      	ldr	r3, [pc, #104]	; (8010418 <face_detection_configure_activations+0x524>)
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	4a31      	ldr	r2, [pc, #196]	; (8010478 <face_detection_configure_activations+0x584>)
 80103b2:	60d3      	str	r3, [r2, #12]
    
    conv2d_17_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 74624);
 80103b4:	4b18      	ldr	r3, [pc, #96]	; (8010418 <face_detection_configure_activations+0x524>)
 80103b6:	681a      	ldr	r2, [r3, #0]
 80103b8:	4b2a      	ldr	r3, [pc, #168]	; (8010464 <face_detection_configure_activations+0x570>)
 80103ba:	4413      	add	r3, r2
 80103bc:	4a2f      	ldr	r2, [pc, #188]	; (801047c <face_detection_configure_activations+0x588>)
 80103be:	6093      	str	r3, [r2, #8]
    conv2d_17_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 74624);
 80103c0:	4b15      	ldr	r3, [pc, #84]	; (8010418 <face_detection_configure_activations+0x524>)
 80103c2:	681a      	ldr	r2, [r3, #0]
 80103c4:	4b27      	ldr	r3, [pc, #156]	; (8010464 <face_detection_configure_activations+0x570>)
 80103c6:	4413      	add	r3, r2
 80103c8:	4a2c      	ldr	r2, [pc, #176]	; (801047c <face_detection_configure_activations+0x588>)
 80103ca:	60d3      	str	r3, [r2, #12]
    
    conv2d_17_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 93056);
 80103cc:	4b12      	ldr	r3, [pc, #72]	; (8010418 <face_detection_configure_activations+0x524>)
 80103ce:	681a      	ldr	r2, [r3, #0]
 80103d0:	4b2b      	ldr	r3, [pc, #172]	; (8010480 <face_detection_configure_activations+0x58c>)
 80103d2:	4413      	add	r3, r2
 80103d4:	4a2b      	ldr	r2, [pc, #172]	; (8010484 <face_detection_configure_activations+0x590>)
 80103d6:	6093      	str	r3, [r2, #8]
    conv2d_17_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 93056);
 80103d8:	4b0f      	ldr	r3, [pc, #60]	; (8010418 <face_detection_configure_activations+0x524>)
 80103da:	681a      	ldr	r2, [r3, #0]
 80103dc:	4b28      	ldr	r3, [pc, #160]	; (8010480 <face_detection_configure_activations+0x58c>)
 80103de:	4413      	add	r3, r2
 80103e0:	4a28      	ldr	r2, [pc, #160]	; (8010484 <face_detection_configure_activations+0x590>)
 80103e2:	60d3      	str	r3, [r2, #12]
    
    conv2d_18_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 80103e4:	4b0c      	ldr	r3, [pc, #48]	; (8010418 <face_detection_configure_activations+0x524>)
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	4a27      	ldr	r2, [pc, #156]	; (8010488 <face_detection_configure_activations+0x594>)
 80103ea:	6093      	str	r3, [r2, #8]
    conv2d_18_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 80103ec:	4b0a      	ldr	r3, [pc, #40]	; (8010418 <face_detection_configure_activations+0x524>)
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	4a25      	ldr	r2, [pc, #148]	; (8010488 <face_detection_configure_activations+0x594>)
 80103f2:	60d3      	str	r3, [r2, #12]
    
    conv2d_18_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 25088);
 80103f4:	4b08      	ldr	r3, [pc, #32]	; (8010418 <face_detection_configure_activations+0x524>)
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	f503 43c4 	add.w	r3, r3, #25088	; 0x6200
 80103fc:	4a23      	ldr	r2, [pc, #140]	; (801048c <face_detection_configure_activations+0x598>)
 80103fe:	6093      	str	r3, [r2, #8]
    conv2d_18_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 25088);
 8010400:	4b05      	ldr	r3, [pc, #20]	; (8010418 <face_detection_configure_activations+0x524>)
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	f503 43c4 	add.w	r3, r3, #25088	; 0x6200
 8010408:	4a20      	ldr	r2, [pc, #128]	; (801048c <face_detection_configure_activations+0x598>)
 801040a:	60d3      	str	r3, [r2, #12]
    
    conv2d_18_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 74624);
 801040c:	4b02      	ldr	r3, [pc, #8]	; (8010418 <face_detection_configure_activations+0x524>)
 801040e:	681a      	ldr	r2, [r3, #0]
 8010410:	4b14      	ldr	r3, [pc, #80]	; (8010464 <face_detection_configure_activations+0x570>)
 8010412:	4413      	add	r3, r2
 8010414:	e03c      	b.n	8010490 <face_detection_configure_activations+0x59c>
 8010416:	bf00      	nop
 8010418:	2405ded0 	.word	0x2405ded0
 801041c:	24000e78 	.word	0x24000e78
 8010420:	24000628 	.word	0x24000628
 8010424:	24000648 	.word	0x24000648
 8010428:	24000e88 	.word	0x24000e88
 801042c:	24000e98 	.word	0x24000e98
 8010430:	24000658 	.word	0x24000658
 8010434:	24000ea8 	.word	0x24000ea8
 8010438:	24000eb8 	.word	0x24000eb8
 801043c:	000124a4 	.word	0x000124a4
 8010440:	24000678 	.word	0x24000678
 8010444:	24000688 	.word	0x24000688
 8010448:	24000ec8 	.word	0x24000ec8
 801044c:	24000ed8 	.word	0x24000ed8
 8010450:	00014244 	.word	0x00014244
 8010454:	240006a8 	.word	0x240006a8
 8010458:	24000ee8 	.word	0x24000ee8
 801045c:	24000ef8 	.word	0x24000ef8
 8010460:	240006b8 	.word	0x240006b8
 8010464:	00012380 	.word	0x00012380
 8010468:	240006d8 	.word	0x240006d8
 801046c:	24000f08 	.word	0x24000f08
 8010470:	24000f18 	.word	0x24000f18
 8010474:	240006e8 	.word	0x240006e8
 8010478:	24000f28 	.word	0x24000f28
 801047c:	24000f38 	.word	0x24000f38
 8010480:	00016b80 	.word	0x00016b80
 8010484:	24000708 	.word	0x24000708
 8010488:	24000718 	.word	0x24000718
 801048c:	24000f48 	.word	0x24000f48
 8010490:	4a8b      	ldr	r2, [pc, #556]	; (80106c0 <face_detection_configure_activations+0x7cc>)
 8010492:	6093      	str	r3, [r2, #8]
    conv2d_18_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 74624);
 8010494:	4b8b      	ldr	r3, [pc, #556]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 8010496:	681a      	ldr	r2, [r3, #0]
 8010498:	4b8b      	ldr	r3, [pc, #556]	; (80106c8 <face_detection_configure_activations+0x7d4>)
 801049a:	4413      	add	r3, r2
 801049c:	4a88      	ldr	r2, [pc, #544]	; (80106c0 <face_detection_configure_activations+0x7cc>)
 801049e:	60d3      	str	r3, [r2, #12]
    
    conv2d_18_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 93056);
 80104a0:	4b88      	ldr	r3, [pc, #544]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 80104a2:	681a      	ldr	r2, [r3, #0]
 80104a4:	4b89      	ldr	r3, [pc, #548]	; (80106cc <face_detection_configure_activations+0x7d8>)
 80104a6:	4413      	add	r3, r2
 80104a8:	4a89      	ldr	r2, [pc, #548]	; (80106d0 <face_detection_configure_activations+0x7dc>)
 80104aa:	6093      	str	r3, [r2, #8]
    conv2d_18_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 93056);
 80104ac:	4b85      	ldr	r3, [pc, #532]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 80104ae:	681a      	ldr	r2, [r3, #0]
 80104b0:	4b86      	ldr	r3, [pc, #536]	; (80106cc <face_detection_configure_activations+0x7d8>)
 80104b2:	4413      	add	r3, r2
 80104b4:	4a86      	ldr	r2, [pc, #536]	; (80106d0 <face_detection_configure_activations+0x7dc>)
 80104b6:	60d3      	str	r3, [r2, #12]
    
    conv2d_19_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 80104b8:	4b82      	ldr	r3, [pc, #520]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	4a85      	ldr	r2, [pc, #532]	; (80106d4 <face_detection_configure_activations+0x7e0>)
 80104be:	6093      	str	r3, [r2, #8]
    conv2d_19_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 80104c0:	4b80      	ldr	r3, [pc, #512]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	4a83      	ldr	r2, [pc, #524]	; (80106d4 <face_detection_configure_activations+0x7e0>)
 80104c6:	60d3      	str	r3, [r2, #12]
    
    conv2d_19_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 1792);
 80104c8:	4b7e      	ldr	r3, [pc, #504]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 80104d0:	4a81      	ldr	r2, [pc, #516]	; (80106d8 <face_detection_configure_activations+0x7e4>)
 80104d2:	6093      	str	r3, [r2, #8]
    conv2d_19_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 1792);
 80104d4:	4b7b      	ldr	r3, [pc, #492]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 80104dc:	4a7e      	ldr	r2, [pc, #504]	; (80106d8 <face_detection_configure_activations+0x7e4>)
 80104de:	60d3      	str	r3, [r2, #12]
    
    conv2d_19_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 74624);
 80104e0:	4b78      	ldr	r3, [pc, #480]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 80104e2:	681a      	ldr	r2, [r3, #0]
 80104e4:	4b78      	ldr	r3, [pc, #480]	; (80106c8 <face_detection_configure_activations+0x7d4>)
 80104e6:	4413      	add	r3, r2
 80104e8:	4a7c      	ldr	r2, [pc, #496]	; (80106dc <face_detection_configure_activations+0x7e8>)
 80104ea:	6093      	str	r3, [r2, #8]
    conv2d_19_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 74624);
 80104ec:	4b75      	ldr	r3, [pc, #468]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 80104ee:	681a      	ldr	r2, [r3, #0]
 80104f0:	4b75      	ldr	r3, [pc, #468]	; (80106c8 <face_detection_configure_activations+0x7d4>)
 80104f2:	4413      	add	r3, r2
 80104f4:	4a79      	ldr	r2, [pc, #484]	; (80106dc <face_detection_configure_activations+0x7e8>)
 80104f6:	60d3      	str	r3, [r2, #12]
    
    conv2d_20_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 80104f8:	4b72      	ldr	r3, [pc, #456]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	4a78      	ldr	r2, [pc, #480]	; (80106e0 <face_detection_configure_activations+0x7ec>)
 80104fe:	6093      	str	r3, [r2, #8]
    conv2d_20_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010500:	4b70      	ldr	r3, [pc, #448]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	4a76      	ldr	r2, [pc, #472]	; (80106e0 <face_detection_configure_activations+0x7ec>)
 8010506:	60d3      	str	r3, [r2, #12]
    
    conv2d_20_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 25088);
 8010508:	4b6e      	ldr	r3, [pc, #440]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	f503 43c4 	add.w	r3, r3, #25088	; 0x6200
 8010510:	4a74      	ldr	r2, [pc, #464]	; (80106e4 <face_detection_configure_activations+0x7f0>)
 8010512:	6093      	str	r3, [r2, #8]
    conv2d_20_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 25088);
 8010514:	4b6b      	ldr	r3, [pc, #428]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	f503 43c4 	add.w	r3, r3, #25088	; 0x6200
 801051c:	4a71      	ldr	r2, [pc, #452]	; (80106e4 <face_detection_configure_activations+0x7f0>)
 801051e:	60d3      	str	r3, [r2, #12]
    
    conv2d_20_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 74624);
 8010520:	4b68      	ldr	r3, [pc, #416]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 8010522:	681a      	ldr	r2, [r3, #0]
 8010524:	4b68      	ldr	r3, [pc, #416]	; (80106c8 <face_detection_configure_activations+0x7d4>)
 8010526:	4413      	add	r3, r2
 8010528:	4a6f      	ldr	r2, [pc, #444]	; (80106e8 <face_detection_configure_activations+0x7f4>)
 801052a:	6093      	str	r3, [r2, #8]
    conv2d_20_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 74624);
 801052c:	4b65      	ldr	r3, [pc, #404]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 801052e:	681a      	ldr	r2, [r3, #0]
 8010530:	4b65      	ldr	r3, [pc, #404]	; (80106c8 <face_detection_configure_activations+0x7d4>)
 8010532:	4413      	add	r3, r2
 8010534:	4a6c      	ldr	r2, [pc, #432]	; (80106e8 <face_detection_configure_activations+0x7f4>)
 8010536:	60d3      	str	r3, [r2, #12]
    
    conv2d_20_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 93056);
 8010538:	4b62      	ldr	r3, [pc, #392]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 801053a:	681a      	ldr	r2, [r3, #0]
 801053c:	4b63      	ldr	r3, [pc, #396]	; (80106cc <face_detection_configure_activations+0x7d8>)
 801053e:	4413      	add	r3, r2
 8010540:	4a6a      	ldr	r2, [pc, #424]	; (80106ec <face_detection_configure_activations+0x7f8>)
 8010542:	6093      	str	r3, [r2, #8]
    conv2d_20_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 93056);
 8010544:	4b5f      	ldr	r3, [pc, #380]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 8010546:	681a      	ldr	r2, [r3, #0]
 8010548:	4b60      	ldr	r3, [pc, #384]	; (80106cc <face_detection_configure_activations+0x7d8>)
 801054a:	4413      	add	r3, r2
 801054c:	4a67      	ldr	r2, [pc, #412]	; (80106ec <face_detection_configure_activations+0x7f8>)
 801054e:	60d3      	str	r3, [r2, #12]
    
    conv2d_21_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010550:	4b5c      	ldr	r3, [pc, #368]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	4a66      	ldr	r2, [pc, #408]	; (80106f0 <face_detection_configure_activations+0x7fc>)
 8010556:	6093      	str	r3, [r2, #8]
    conv2d_21_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010558:	4b5a      	ldr	r3, [pc, #360]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	4a64      	ldr	r2, [pc, #400]	; (80106f0 <face_detection_configure_activations+0x7fc>)
 801055e:	60d3      	str	r3, [r2, #12]
    
    conv2d_21_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 1792);
 8010560:	4b58      	ldr	r3, [pc, #352]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8010568:	4a62      	ldr	r2, [pc, #392]	; (80106f4 <face_detection_configure_activations+0x800>)
 801056a:	6093      	str	r3, [r2, #8]
    conv2d_21_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 1792);
 801056c:	4b55      	ldr	r3, [pc, #340]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8010574:	4a5f      	ldr	r2, [pc, #380]	; (80106f4 <face_detection_configure_activations+0x800>)
 8010576:	60d3      	str	r3, [r2, #12]
    
    conv2d_21_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 74624);
 8010578:	4b52      	ldr	r3, [pc, #328]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 801057a:	681a      	ldr	r2, [r3, #0]
 801057c:	4b52      	ldr	r3, [pc, #328]	; (80106c8 <face_detection_configure_activations+0x7d4>)
 801057e:	4413      	add	r3, r2
 8010580:	4a5d      	ldr	r2, [pc, #372]	; (80106f8 <face_detection_configure_activations+0x804>)
 8010582:	6093      	str	r3, [r2, #8]
    conv2d_21_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 74624);
 8010584:	4b4f      	ldr	r3, [pc, #316]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 8010586:	681a      	ldr	r2, [r3, #0]
 8010588:	4b4f      	ldr	r3, [pc, #316]	; (80106c8 <face_detection_configure_activations+0x7d4>)
 801058a:	4413      	add	r3, r2
 801058c:	4a5a      	ldr	r2, [pc, #360]	; (80106f8 <face_detection_configure_activations+0x804>)
 801058e:	60d3      	str	r3, [r2, #12]
    
    conv2d_22_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010590:	4b4c      	ldr	r3, [pc, #304]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	4a59      	ldr	r2, [pc, #356]	; (80106fc <face_detection_configure_activations+0x808>)
 8010596:	6093      	str	r3, [r2, #8]
    conv2d_22_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010598:	4b4a      	ldr	r3, [pc, #296]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	4a57      	ldr	r2, [pc, #348]	; (80106fc <face_detection_configure_activations+0x808>)
 801059e:	60d3      	str	r3, [r2, #12]
    
    conv2d_22_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 25088);
 80105a0:	4b48      	ldr	r3, [pc, #288]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	f503 43c4 	add.w	r3, r3, #25088	; 0x6200
 80105a8:	4a55      	ldr	r2, [pc, #340]	; (8010700 <face_detection_configure_activations+0x80c>)
 80105aa:	6093      	str	r3, [r2, #8]
    conv2d_22_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 25088);
 80105ac:	4b45      	ldr	r3, [pc, #276]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	f503 43c4 	add.w	r3, r3, #25088	; 0x6200
 80105b4:	4a52      	ldr	r2, [pc, #328]	; (8010700 <face_detection_configure_activations+0x80c>)
 80105b6:	60d3      	str	r3, [r2, #12]
    
    conv2d_22_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 74624);
 80105b8:	4b42      	ldr	r3, [pc, #264]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 80105ba:	681a      	ldr	r2, [r3, #0]
 80105bc:	4b42      	ldr	r3, [pc, #264]	; (80106c8 <face_detection_configure_activations+0x7d4>)
 80105be:	4413      	add	r3, r2
 80105c0:	4a50      	ldr	r2, [pc, #320]	; (8010704 <face_detection_configure_activations+0x810>)
 80105c2:	6093      	str	r3, [r2, #8]
    conv2d_22_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 74624);
 80105c4:	4b3f      	ldr	r3, [pc, #252]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 80105c6:	681a      	ldr	r2, [r3, #0]
 80105c8:	4b3f      	ldr	r3, [pc, #252]	; (80106c8 <face_detection_configure_activations+0x7d4>)
 80105ca:	4413      	add	r3, r2
 80105cc:	4a4d      	ldr	r2, [pc, #308]	; (8010704 <face_detection_configure_activations+0x810>)
 80105ce:	60d3      	str	r3, [r2, #12]
    
    conv2d_22_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 93056);
 80105d0:	4b3c      	ldr	r3, [pc, #240]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 80105d2:	681a      	ldr	r2, [r3, #0]
 80105d4:	4b3d      	ldr	r3, [pc, #244]	; (80106cc <face_detection_configure_activations+0x7d8>)
 80105d6:	4413      	add	r3, r2
 80105d8:	4a4b      	ldr	r2, [pc, #300]	; (8010708 <face_detection_configure_activations+0x814>)
 80105da:	6093      	str	r3, [r2, #8]
    conv2d_22_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 93056);
 80105dc:	4b39      	ldr	r3, [pc, #228]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 80105de:	681a      	ldr	r2, [r3, #0]
 80105e0:	4b3a      	ldr	r3, [pc, #232]	; (80106cc <face_detection_configure_activations+0x7d8>)
 80105e2:	4413      	add	r3, r2
 80105e4:	4a48      	ldr	r2, [pc, #288]	; (8010708 <face_detection_configure_activations+0x814>)
 80105e6:	60d3      	str	r3, [r2, #12]
    
    conv2d_23_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 80105e8:	4b36      	ldr	r3, [pc, #216]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	4a47      	ldr	r2, [pc, #284]	; (801070c <face_detection_configure_activations+0x818>)
 80105ee:	6093      	str	r3, [r2, #8]
    conv2d_23_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 80105f0:	4b34      	ldr	r3, [pc, #208]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	4a45      	ldr	r2, [pc, #276]	; (801070c <face_detection_configure_activations+0x818>)
 80105f6:	60d3      	str	r3, [r2, #12]
    
    conv2d_23_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 1792);
 80105f8:	4b32      	ldr	r3, [pc, #200]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8010600:	4a43      	ldr	r2, [pc, #268]	; (8010710 <face_detection_configure_activations+0x81c>)
 8010602:	6093      	str	r3, [r2, #8]
    conv2d_23_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 1792);
 8010604:	4b2f      	ldr	r3, [pc, #188]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 801060c:	4a40      	ldr	r2, [pc, #256]	; (8010710 <face_detection_configure_activations+0x81c>)
 801060e:	60d3      	str	r3, [r2, #12]
    
    conv2d_23_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 74624);
 8010610:	4b2c      	ldr	r3, [pc, #176]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 8010612:	681a      	ldr	r2, [r3, #0]
 8010614:	4b2c      	ldr	r3, [pc, #176]	; (80106c8 <face_detection_configure_activations+0x7d4>)
 8010616:	4413      	add	r3, r2
 8010618:	4a3e      	ldr	r2, [pc, #248]	; (8010714 <face_detection_configure_activations+0x820>)
 801061a:	6093      	str	r3, [r2, #8]
    conv2d_23_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 74624);
 801061c:	4b29      	ldr	r3, [pc, #164]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 801061e:	681a      	ldr	r2, [r3, #0]
 8010620:	4b29      	ldr	r3, [pc, #164]	; (80106c8 <face_detection_configure_activations+0x7d4>)
 8010622:	4413      	add	r3, r2
 8010624:	4a3b      	ldr	r2, [pc, #236]	; (8010714 <face_detection_configure_activations+0x820>)
 8010626:	60d3      	str	r3, [r2, #12]
    
    conv2d_24_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010628:	4b26      	ldr	r3, [pc, #152]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	4a3a      	ldr	r2, [pc, #232]	; (8010718 <face_detection_configure_activations+0x824>)
 801062e:	6093      	str	r3, [r2, #8]
    conv2d_24_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010630:	4b24      	ldr	r3, [pc, #144]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	4a38      	ldr	r2, [pc, #224]	; (8010718 <face_detection_configure_activations+0x824>)
 8010636:	60d3      	str	r3, [r2, #12]
    
    conv2d_24_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 25088);
 8010638:	4b22      	ldr	r3, [pc, #136]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	f503 43c4 	add.w	r3, r3, #25088	; 0x6200
 8010640:	4a36      	ldr	r2, [pc, #216]	; (801071c <face_detection_configure_activations+0x828>)
 8010642:	6093      	str	r3, [r2, #8]
    conv2d_24_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 25088);
 8010644:	4b1f      	ldr	r3, [pc, #124]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	f503 43c4 	add.w	r3, r3, #25088	; 0x6200
 801064c:	4a33      	ldr	r2, [pc, #204]	; (801071c <face_detection_configure_activations+0x828>)
 801064e:	60d3      	str	r3, [r2, #12]
    
    conv2d_24_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 74624);
 8010650:	4b1c      	ldr	r3, [pc, #112]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 8010652:	681a      	ldr	r2, [r3, #0]
 8010654:	4b1c      	ldr	r3, [pc, #112]	; (80106c8 <face_detection_configure_activations+0x7d4>)
 8010656:	4413      	add	r3, r2
 8010658:	4a31      	ldr	r2, [pc, #196]	; (8010720 <face_detection_configure_activations+0x82c>)
 801065a:	6093      	str	r3, [r2, #8]
    conv2d_24_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 74624);
 801065c:	4b19      	ldr	r3, [pc, #100]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 801065e:	681a      	ldr	r2, [r3, #0]
 8010660:	4b19      	ldr	r3, [pc, #100]	; (80106c8 <face_detection_configure_activations+0x7d4>)
 8010662:	4413      	add	r3, r2
 8010664:	4a2e      	ldr	r2, [pc, #184]	; (8010720 <face_detection_configure_activations+0x82c>)
 8010666:	60d3      	str	r3, [r2, #12]
    
    conv2d_24_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 93056);
 8010668:	4b16      	ldr	r3, [pc, #88]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 801066a:	681a      	ldr	r2, [r3, #0]
 801066c:	4b17      	ldr	r3, [pc, #92]	; (80106cc <face_detection_configure_activations+0x7d8>)
 801066e:	4413      	add	r3, r2
 8010670:	4a2c      	ldr	r2, [pc, #176]	; (8010724 <face_detection_configure_activations+0x830>)
 8010672:	6093      	str	r3, [r2, #8]
    conv2d_24_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 93056);
 8010674:	4b13      	ldr	r3, [pc, #76]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 8010676:	681a      	ldr	r2, [r3, #0]
 8010678:	4b14      	ldr	r3, [pc, #80]	; (80106cc <face_detection_configure_activations+0x7d8>)
 801067a:	4413      	add	r3, r2
 801067c:	4a29      	ldr	r2, [pc, #164]	; (8010724 <face_detection_configure_activations+0x830>)
 801067e:	60d3      	str	r3, [r2, #12]
    
    conv2d_25_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010680:	4b10      	ldr	r3, [pc, #64]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	4a28      	ldr	r2, [pc, #160]	; (8010728 <face_detection_configure_activations+0x834>)
 8010686:	6093      	str	r3, [r2, #8]
    conv2d_25_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010688:	4b0e      	ldr	r3, [pc, #56]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	4a26      	ldr	r2, [pc, #152]	; (8010728 <face_detection_configure_activations+0x834>)
 801068e:	60d3      	str	r3, [r2, #12]
    
    conv2d_25_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 1792);
 8010690:	4b0c      	ldr	r3, [pc, #48]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8010698:	4a24      	ldr	r2, [pc, #144]	; (801072c <face_detection_configure_activations+0x838>)
 801069a:	6093      	str	r3, [r2, #8]
    conv2d_25_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 1792);
 801069c:	4b09      	ldr	r3, [pc, #36]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 80106a4:	4a21      	ldr	r2, [pc, #132]	; (801072c <face_detection_configure_activations+0x838>)
 80106a6:	60d3      	str	r3, [r2, #12]
    
    conv2d_25_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 74624);
 80106a8:	4b06      	ldr	r3, [pc, #24]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 80106aa:	681a      	ldr	r2, [r3, #0]
 80106ac:	4b06      	ldr	r3, [pc, #24]	; (80106c8 <face_detection_configure_activations+0x7d4>)
 80106ae:	4413      	add	r3, r2
 80106b0:	4a1f      	ldr	r2, [pc, #124]	; (8010730 <face_detection_configure_activations+0x83c>)
 80106b2:	6093      	str	r3, [r2, #8]
    conv2d_25_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 74624);
 80106b4:	4b03      	ldr	r3, [pc, #12]	; (80106c4 <face_detection_configure_activations+0x7d0>)
 80106b6:	681a      	ldr	r2, [r3, #0]
 80106b8:	4b03      	ldr	r3, [pc, #12]	; (80106c8 <face_detection_configure_activations+0x7d4>)
 80106ba:	4413      	add	r3, r2
 80106bc:	e03a      	b.n	8010734 <face_detection_configure_activations+0x840>
 80106be:	bf00      	nop
 80106c0:	24000f58 	.word	0x24000f58
 80106c4:	2405ded0 	.word	0x2405ded0
 80106c8:	00012380 	.word	0x00012380
 80106cc:	00016b80 	.word	0x00016b80
 80106d0:	24000738 	.word	0x24000738
 80106d4:	24000f68 	.word	0x24000f68
 80106d8:	24000f78 	.word	0x24000f78
 80106dc:	24000748 	.word	0x24000748
 80106e0:	24000768 	.word	0x24000768
 80106e4:	24000f88 	.word	0x24000f88
 80106e8:	24000f98 	.word	0x24000f98
 80106ec:	24000778 	.word	0x24000778
 80106f0:	24000fc8 	.word	0x24000fc8
 80106f4:	24000fd8 	.word	0x24000fd8
 80106f8:	24000798 	.word	0x24000798
 80106fc:	240007a8 	.word	0x240007a8
 8010700:	24001008 	.word	0x24001008
 8010704:	24001018 	.word	0x24001018
 8010708:	240007c8 	.word	0x240007c8
 801070c:	24001048 	.word	0x24001048
 8010710:	24001068 	.word	0x24001068
 8010714:	240007d8 	.word	0x240007d8
 8010718:	240007f8 	.word	0x240007f8
 801071c:	24001088 	.word	0x24001088
 8010720:	240010a8 	.word	0x240010a8
 8010724:	24000808 	.word	0x24000808
 8010728:	240010c8 	.word	0x240010c8
 801072c:	240010e8 	.word	0x240010e8
 8010730:	24000828 	.word	0x24000828
 8010734:	4a90      	ldr	r2, [pc, #576]	; (8010978 <face_detection_configure_activations+0xa84>)
 8010736:	60d3      	str	r3, [r2, #12]
    
    conv2d_26_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010738:	4b90      	ldr	r3, [pc, #576]	; (801097c <face_detection_configure_activations+0xa88>)
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	4a90      	ldr	r2, [pc, #576]	; (8010980 <face_detection_configure_activations+0xa8c>)
 801073e:	6093      	str	r3, [r2, #8]
    conv2d_26_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010740:	4b8e      	ldr	r3, [pc, #568]	; (801097c <face_detection_configure_activations+0xa88>)
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	4a8e      	ldr	r2, [pc, #568]	; (8010980 <face_detection_configure_activations+0xa8c>)
 8010746:	60d3      	str	r3, [r2, #12]
    
    conv2d_26_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 25088);
 8010748:	4b8c      	ldr	r3, [pc, #560]	; (801097c <face_detection_configure_activations+0xa88>)
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	f503 43c4 	add.w	r3, r3, #25088	; 0x6200
 8010750:	4a8c      	ldr	r2, [pc, #560]	; (8010984 <face_detection_configure_activations+0xa90>)
 8010752:	6093      	str	r3, [r2, #8]
    conv2d_26_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 25088);
 8010754:	4b89      	ldr	r3, [pc, #548]	; (801097c <face_detection_configure_activations+0xa88>)
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	f503 43c4 	add.w	r3, r3, #25088	; 0x6200
 801075c:	4a89      	ldr	r2, [pc, #548]	; (8010984 <face_detection_configure_activations+0xa90>)
 801075e:	60d3      	str	r3, [r2, #12]
    
    conv2d_26_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 74624);
 8010760:	4b86      	ldr	r3, [pc, #536]	; (801097c <face_detection_configure_activations+0xa88>)
 8010762:	681a      	ldr	r2, [r3, #0]
 8010764:	4b88      	ldr	r3, [pc, #544]	; (8010988 <face_detection_configure_activations+0xa94>)
 8010766:	4413      	add	r3, r2
 8010768:	4a88      	ldr	r2, [pc, #544]	; (801098c <face_detection_configure_activations+0xa98>)
 801076a:	6093      	str	r3, [r2, #8]
    conv2d_26_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 74624);
 801076c:	4b83      	ldr	r3, [pc, #524]	; (801097c <face_detection_configure_activations+0xa88>)
 801076e:	681a      	ldr	r2, [r3, #0]
 8010770:	4b85      	ldr	r3, [pc, #532]	; (8010988 <face_detection_configure_activations+0xa94>)
 8010772:	4413      	add	r3, r2
 8010774:	4a85      	ldr	r2, [pc, #532]	; (801098c <face_detection_configure_activations+0xa98>)
 8010776:	60d3      	str	r3, [r2, #12]
    
    conv2d_26_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 93056);
 8010778:	4b80      	ldr	r3, [pc, #512]	; (801097c <face_detection_configure_activations+0xa88>)
 801077a:	681a      	ldr	r2, [r3, #0]
 801077c:	4b84      	ldr	r3, [pc, #528]	; (8010990 <face_detection_configure_activations+0xa9c>)
 801077e:	4413      	add	r3, r2
 8010780:	4a84      	ldr	r2, [pc, #528]	; (8010994 <face_detection_configure_activations+0xaa0>)
 8010782:	6093      	str	r3, [r2, #8]
    conv2d_26_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 93056);
 8010784:	4b7d      	ldr	r3, [pc, #500]	; (801097c <face_detection_configure_activations+0xa88>)
 8010786:	681a      	ldr	r2, [r3, #0]
 8010788:	4b81      	ldr	r3, [pc, #516]	; (8010990 <face_detection_configure_activations+0xa9c>)
 801078a:	4413      	add	r3, r2
 801078c:	4a81      	ldr	r2, [pc, #516]	; (8010994 <face_detection_configure_activations+0xaa0>)
 801078e:	60d3      	str	r3, [r2, #12]
    
    conv2d_27_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010790:	4b7a      	ldr	r3, [pc, #488]	; (801097c <face_detection_configure_activations+0xa88>)
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	4a80      	ldr	r2, [pc, #512]	; (8010998 <face_detection_configure_activations+0xaa4>)
 8010796:	6093      	str	r3, [r2, #8]
    conv2d_27_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010798:	4b78      	ldr	r3, [pc, #480]	; (801097c <face_detection_configure_activations+0xa88>)
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	4a7e      	ldr	r2, [pc, #504]	; (8010998 <face_detection_configure_activations+0xaa4>)
 801079e:	60d3      	str	r3, [r2, #12]
    
    conv2d_27_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 1792);
 80107a0:	4b76      	ldr	r3, [pc, #472]	; (801097c <face_detection_configure_activations+0xa88>)
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 80107a8:	4a7c      	ldr	r2, [pc, #496]	; (801099c <face_detection_configure_activations+0xaa8>)
 80107aa:	6093      	str	r3, [r2, #8]
    conv2d_27_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 1792);
 80107ac:	4b73      	ldr	r3, [pc, #460]	; (801097c <face_detection_configure_activations+0xa88>)
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 80107b4:	4a79      	ldr	r2, [pc, #484]	; (801099c <face_detection_configure_activations+0xaa8>)
 80107b6:	60d3      	str	r3, [r2, #12]
    
    conv2d_27_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 74624);
 80107b8:	4b70      	ldr	r3, [pc, #448]	; (801097c <face_detection_configure_activations+0xa88>)
 80107ba:	681a      	ldr	r2, [r3, #0]
 80107bc:	4b72      	ldr	r3, [pc, #456]	; (8010988 <face_detection_configure_activations+0xa94>)
 80107be:	4413      	add	r3, r2
 80107c0:	4a77      	ldr	r2, [pc, #476]	; (80109a0 <face_detection_configure_activations+0xaac>)
 80107c2:	6093      	str	r3, [r2, #8]
    conv2d_27_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 74624);
 80107c4:	4b6d      	ldr	r3, [pc, #436]	; (801097c <face_detection_configure_activations+0xa88>)
 80107c6:	681a      	ldr	r2, [r3, #0]
 80107c8:	4b6f      	ldr	r3, [pc, #444]	; (8010988 <face_detection_configure_activations+0xa94>)
 80107ca:	4413      	add	r3, r2
 80107cc:	4a74      	ldr	r2, [pc, #464]	; (80109a0 <face_detection_configure_activations+0xaac>)
 80107ce:	60d3      	str	r3, [r2, #12]
    
    conv2d_30_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 80107d0:	4b6a      	ldr	r3, [pc, #424]	; (801097c <face_detection_configure_activations+0xa88>)
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	4a73      	ldr	r2, [pc, #460]	; (80109a4 <face_detection_configure_activations+0xab0>)
 80107d6:	6093      	str	r3, [r2, #8]
    conv2d_30_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 80107d8:	4b68      	ldr	r3, [pc, #416]	; (801097c <face_detection_configure_activations+0xa88>)
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	4a71      	ldr	r2, [pc, #452]	; (80109a4 <face_detection_configure_activations+0xab0>)
 80107de:	60d3      	str	r3, [r2, #12]
    
    conv2d_30_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 21632);
 80107e0:	4b66      	ldr	r3, [pc, #408]	; (801097c <face_detection_configure_activations+0xa88>)
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	f503 43a9 	add.w	r3, r3, #21632	; 0x5480
 80107e8:	4a6f      	ldr	r2, [pc, #444]	; (80109a8 <face_detection_configure_activations+0xab4>)
 80107ea:	6093      	str	r3, [r2, #8]
    conv2d_30_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 21632);
 80107ec:	4b63      	ldr	r3, [pc, #396]	; (801097c <face_detection_configure_activations+0xa88>)
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	f503 43a9 	add.w	r3, r3, #21632	; 0x5480
 80107f4:	4a6c      	ldr	r2, [pc, #432]	; (80109a8 <face_detection_configure_activations+0xab4>)
 80107f6:	60d3      	str	r3, [r2, #12]
    
    conv2d_30_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 26372);
 80107f8:	4b60      	ldr	r3, [pc, #384]	; (801097c <face_detection_configure_activations+0xa88>)
 80107fa:	681a      	ldr	r2, [r3, #0]
 80107fc:	f246 7304 	movw	r3, #26372	; 0x6704
 8010800:	4413      	add	r3, r2
 8010802:	4a6a      	ldr	r2, [pc, #424]	; (80109ac <face_detection_configure_activations+0xab8>)
 8010804:	6093      	str	r3, [r2, #8]
    conv2d_30_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 26372);
 8010806:	4b5d      	ldr	r3, [pc, #372]	; (801097c <face_detection_configure_activations+0xa88>)
 8010808:	681a      	ldr	r2, [r3, #0]
 801080a:	f246 7304 	movw	r3, #26372	; 0x6704
 801080e:	4413      	add	r3, r2
 8010810:	4a66      	ldr	r2, [pc, #408]	; (80109ac <face_detection_configure_activations+0xab8>)
 8010812:	60d3      	str	r3, [r2, #12]
    
    conv2d_30_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 30980);
 8010814:	4b59      	ldr	r3, [pc, #356]	; (801097c <face_detection_configure_activations+0xa88>)
 8010816:	681a      	ldr	r2, [r3, #0]
 8010818:	f647 1304 	movw	r3, #30980	; 0x7904
 801081c:	4413      	add	r3, r2
 801081e:	4a64      	ldr	r2, [pc, #400]	; (80109b0 <face_detection_configure_activations+0xabc>)
 8010820:	6093      	str	r3, [r2, #8]
    conv2d_30_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 30980);
 8010822:	4b56      	ldr	r3, [pc, #344]	; (801097c <face_detection_configure_activations+0xa88>)
 8010824:	681a      	ldr	r2, [r3, #0]
 8010826:	f647 1304 	movw	r3, #30980	; 0x7904
 801082a:	4413      	add	r3, r2
 801082c:	4a60      	ldr	r2, [pc, #384]	; (80109b0 <face_detection_configure_activations+0xabc>)
 801082e:	60d3      	str	r3, [r2, #12]
    
    conv2d_31_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010830:	4b52      	ldr	r3, [pc, #328]	; (801097c <face_detection_configure_activations+0xa88>)
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	4a5f      	ldr	r2, [pc, #380]	; (80109b4 <face_detection_configure_activations+0xac0>)
 8010836:	6093      	str	r3, [r2, #8]
    conv2d_31_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010838:	4b50      	ldr	r3, [pc, #320]	; (801097c <face_detection_configure_activations+0xa88>)
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	4a5d      	ldr	r2, [pc, #372]	; (80109b4 <face_detection_configure_activations+0xac0>)
 801083e:	60d3      	str	r3, [r2, #12]
    
    conv2d_31_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 3072);
 8010840:	4b4e      	ldr	r3, [pc, #312]	; (801097c <face_detection_configure_activations+0xa88>)
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8010848:	4a5b      	ldr	r2, [pc, #364]	; (80109b8 <face_detection_configure_activations+0xac4>)
 801084a:	6093      	str	r3, [r2, #8]
    conv2d_31_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 3072);
 801084c:	4b4b      	ldr	r3, [pc, #300]	; (801097c <face_detection_configure_activations+0xa88>)
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8010854:	4a58      	ldr	r2, [pc, #352]	; (80109b8 <face_detection_configure_activations+0xac4>)
 8010856:	60d3      	str	r3, [r2, #12]
    
    conv2d_31_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 12288);
 8010858:	4b48      	ldr	r3, [pc, #288]	; (801097c <face_detection_configure_activations+0xa88>)
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010860:	4a56      	ldr	r2, [pc, #344]	; (80109bc <face_detection_configure_activations+0xac8>)
 8010862:	6093      	str	r3, [r2, #8]
    conv2d_31_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 12288);
 8010864:	4b45      	ldr	r3, [pc, #276]	; (801097c <face_detection_configure_activations+0xa88>)
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801086c:	4a53      	ldr	r2, [pc, #332]	; (80109bc <face_detection_configure_activations+0xac8>)
 801086e:	60d3      	str	r3, [r2, #12]
    
    conv2d_32_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 93056);
 8010870:	4b42      	ldr	r3, [pc, #264]	; (801097c <face_detection_configure_activations+0xa88>)
 8010872:	681a      	ldr	r2, [r3, #0]
 8010874:	4b46      	ldr	r3, [pc, #280]	; (8010990 <face_detection_configure_activations+0xa9c>)
 8010876:	4413      	add	r3, r2
 8010878:	4a51      	ldr	r2, [pc, #324]	; (80109c0 <face_detection_configure_activations+0xacc>)
 801087a:	6093      	str	r3, [r2, #8]
    conv2d_32_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 93056);
 801087c:	4b3f      	ldr	r3, [pc, #252]	; (801097c <face_detection_configure_activations+0xa88>)
 801087e:	681a      	ldr	r2, [r3, #0]
 8010880:	4b43      	ldr	r3, [pc, #268]	; (8010990 <face_detection_configure_activations+0xa9c>)
 8010882:	4413      	add	r3, r2
 8010884:	4a4e      	ldr	r2, [pc, #312]	; (80109c0 <face_detection_configure_activations+0xacc>)
 8010886:	60d3      	str	r3, [r2, #12]
    
    conv2d_32_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010888:	4b3c      	ldr	r3, [pc, #240]	; (801097c <face_detection_configure_activations+0xa88>)
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	4a4d      	ldr	r2, [pc, #308]	; (80109c4 <face_detection_configure_activations+0xad0>)
 801088e:	6093      	str	r3, [r2, #8]
    conv2d_32_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010890:	4b3a      	ldr	r3, [pc, #232]	; (801097c <face_detection_configure_activations+0xa88>)
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	4a4b      	ldr	r2, [pc, #300]	; (80109c4 <face_detection_configure_activations+0xad0>)
 8010896:	60d3      	str	r3, [r2, #12]
    
    conv2d_32_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 9476);
 8010898:	4b38      	ldr	r3, [pc, #224]	; (801097c <face_detection_configure_activations+0xa88>)
 801089a:	681a      	ldr	r2, [r3, #0]
 801089c:	f242 5304 	movw	r3, #9476	; 0x2504
 80108a0:	4413      	add	r3, r2
 80108a2:	4a49      	ldr	r2, [pc, #292]	; (80109c8 <face_detection_configure_activations+0xad4>)
 80108a4:	6093      	str	r3, [r2, #8]
    conv2d_32_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 9476);
 80108a6:	4b35      	ldr	r3, [pc, #212]	; (801097c <face_detection_configure_activations+0xa88>)
 80108a8:	681a      	ldr	r2, [r3, #0]
 80108aa:	f242 5304 	movw	r3, #9476	; 0x2504
 80108ae:	4413      	add	r3, r2
 80108b0:	4a45      	ldr	r2, [pc, #276]	; (80109c8 <face_detection_configure_activations+0xad4>)
 80108b2:	60d3      	str	r3, [r2, #12]
    
    conv2d_32_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 18692);
 80108b4:	4b31      	ldr	r3, [pc, #196]	; (801097c <face_detection_configure_activations+0xa88>)
 80108b6:	681a      	ldr	r2, [r3, #0]
 80108b8:	f644 1304 	movw	r3, #18692	; 0x4904
 80108bc:	4413      	add	r3, r2
 80108be:	4a43      	ldr	r2, [pc, #268]	; (80109cc <face_detection_configure_activations+0xad8>)
 80108c0:	6093      	str	r3, [r2, #8]
    conv2d_32_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 18692);
 80108c2:	4b2e      	ldr	r3, [pc, #184]	; (801097c <face_detection_configure_activations+0xa88>)
 80108c4:	681a      	ldr	r2, [r3, #0]
 80108c6:	f644 1304 	movw	r3, #18692	; 0x4904
 80108ca:	4413      	add	r3, r2
 80108cc:	4a3f      	ldr	r2, [pc, #252]	; (80109cc <face_detection_configure_activations+0xad8>)
 80108ce:	60d3      	str	r3, [r2, #12]
    
    conv2d_33_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 80108d0:	4b2a      	ldr	r3, [pc, #168]	; (801097c <face_detection_configure_activations+0xa88>)
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	4a3e      	ldr	r2, [pc, #248]	; (80109d0 <face_detection_configure_activations+0xadc>)
 80108d6:	6093      	str	r3, [r2, #8]
    conv2d_33_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 80108d8:	4b28      	ldr	r3, [pc, #160]	; (801097c <face_detection_configure_activations+0xa88>)
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	4a3c      	ldr	r2, [pc, #240]	; (80109d0 <face_detection_configure_activations+0xadc>)
 80108de:	60d3      	str	r3, [r2, #12]
    
    conv2d_33_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 3584);
 80108e0:	4b26      	ldr	r3, [pc, #152]	; (801097c <face_detection_configure_activations+0xa88>)
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80108e8:	4a3a      	ldr	r2, [pc, #232]	; (80109d4 <face_detection_configure_activations+0xae0>)
 80108ea:	6093      	str	r3, [r2, #8]
    conv2d_33_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 3584);
 80108ec:	4b23      	ldr	r3, [pc, #140]	; (801097c <face_detection_configure_activations+0xa88>)
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80108f4:	4a37      	ldr	r2, [pc, #220]	; (80109d4 <face_detection_configure_activations+0xae0>)
 80108f6:	60d3      	str	r3, [r2, #12]
    
    conv2d_33_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 27908);
 80108f8:	4b20      	ldr	r3, [pc, #128]	; (801097c <face_detection_configure_activations+0xa88>)
 80108fa:	681a      	ldr	r2, [r3, #0]
 80108fc:	f646 5304 	movw	r3, #27908	; 0x6d04
 8010900:	4413      	add	r3, r2
 8010902:	4a35      	ldr	r2, [pc, #212]	; (80109d8 <face_detection_configure_activations+0xae4>)
 8010904:	6093      	str	r3, [r2, #8]
    conv2d_33_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 27908);
 8010906:	4b1d      	ldr	r3, [pc, #116]	; (801097c <face_detection_configure_activations+0xa88>)
 8010908:	681a      	ldr	r2, [r3, #0]
 801090a:	f646 5304 	movw	r3, #27908	; 0x6d04
 801090e:	4413      	add	r3, r2
 8010910:	4a31      	ldr	r2, [pc, #196]	; (80109d8 <face_detection_configure_activations+0xae4>)
 8010912:	60d3      	str	r3, [r2, #12]
    
    conv2d_35_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010914:	4b19      	ldr	r3, [pc, #100]	; (801097c <face_detection_configure_activations+0xa88>)
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	4a30      	ldr	r2, [pc, #192]	; (80109dc <face_detection_configure_activations+0xae8>)
 801091a:	6093      	str	r3, [r2, #8]
    conv2d_35_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 801091c:	4b17      	ldr	r3, [pc, #92]	; (801097c <face_detection_configure_activations+0xa88>)
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	4a2e      	ldr	r2, [pc, #184]	; (80109dc <face_detection_configure_activations+0xae8>)
 8010922:	60d3      	str	r3, [r2, #12]
    
    conv2d_35_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 16384);
 8010924:	4b15      	ldr	r3, [pc, #84]	; (801097c <face_detection_configure_activations+0xa88>)
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801092c:	4a2c      	ldr	r2, [pc, #176]	; (80109e0 <face_detection_configure_activations+0xaec>)
 801092e:	6093      	str	r3, [r2, #8]
    conv2d_35_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 16384);
 8010930:	4b12      	ldr	r3, [pc, #72]	; (801097c <face_detection_configure_activations+0xa88>)
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010938:	4a29      	ldr	r2, [pc, #164]	; (80109e0 <face_detection_configure_activations+0xaec>)
 801093a:	60d3      	str	r3, [r2, #12]
    
    conv2d_35_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 93056);
 801093c:	4b0f      	ldr	r3, [pc, #60]	; (801097c <face_detection_configure_activations+0xa88>)
 801093e:	681a      	ldr	r2, [r3, #0]
 8010940:	4b13      	ldr	r3, [pc, #76]	; (8010990 <face_detection_configure_activations+0xa9c>)
 8010942:	4413      	add	r3, r2
 8010944:	4a27      	ldr	r2, [pc, #156]	; (80109e4 <face_detection_configure_activations+0xaf0>)
 8010946:	6093      	str	r3, [r2, #8]
    conv2d_35_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 93056);
 8010948:	4b0c      	ldr	r3, [pc, #48]	; (801097c <face_detection_configure_activations+0xa88>)
 801094a:	681a      	ldr	r2, [r3, #0]
 801094c:	4b10      	ldr	r3, [pc, #64]	; (8010990 <face_detection_configure_activations+0xa9c>)
 801094e:	4413      	add	r3, r2
 8010950:	4a24      	ldr	r2, [pc, #144]	; (80109e4 <face_detection_configure_activations+0xaf0>)
 8010952:	60d3      	str	r3, [r2, #12]
    
    conv2d_35_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 95360);
 8010954:	4b09      	ldr	r3, [pc, #36]	; (801097c <face_detection_configure_activations+0xa88>)
 8010956:	681a      	ldr	r2, [r3, #0]
 8010958:	4b23      	ldr	r3, [pc, #140]	; (80109e8 <face_detection_configure_activations+0xaf4>)
 801095a:	4413      	add	r3, r2
 801095c:	4a23      	ldr	r2, [pc, #140]	; (80109ec <face_detection_configure_activations+0xaf8>)
 801095e:	6093      	str	r3, [r2, #8]
    conv2d_35_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 95360);
 8010960:	4b06      	ldr	r3, [pc, #24]	; (801097c <face_detection_configure_activations+0xa88>)
 8010962:	681a      	ldr	r2, [r3, #0]
 8010964:	4b20      	ldr	r3, [pc, #128]	; (80109e8 <face_detection_configure_activations+0xaf4>)
 8010966:	4413      	add	r3, r2
 8010968:	4a20      	ldr	r2, [pc, #128]	; (80109ec <face_detection_configure_activations+0xaf8>)
 801096a:	60d3      	str	r3, [r2, #12]
    
    conv2d_36_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 801096c:	4b03      	ldr	r3, [pc, #12]	; (801097c <face_detection_configure_activations+0xa88>)
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	4a1f      	ldr	r2, [pc, #124]	; (80109f0 <face_detection_configure_activations+0xafc>)
 8010972:	6093      	str	r3, [r2, #8]
 8010974:	e03e      	b.n	80109f4 <face_detection_configure_activations+0xb00>
 8010976:	bf00      	nop
 8010978:	24000828 	.word	0x24000828
 801097c:	2405ded0 	.word	0x2405ded0
 8010980:	24000838 	.word	0x24000838
 8010984:	24001108 	.word	0x24001108
 8010988:	00012380 	.word	0x00012380
 801098c:	24000148 	.word	0x24000148
 8010990:	00016b80 	.word	0x00016b80
 8010994:	24000858 	.word	0x24000858
 8010998:	24001138 	.word	0x24001138
 801099c:	24000068 	.word	0x24000068
 80109a0:	24000868 	.word	0x24000868
 80109a4:	24000888 	.word	0x24000888
 80109a8:	24000088 	.word	0x24000088
 80109ac:	240000a8 	.word	0x240000a8
 80109b0:	24000898 	.word	0x24000898
 80109b4:	240000c8 	.word	0x240000c8
 80109b8:	240000e8 	.word	0x240000e8
 80109bc:	240008b8 	.word	0x240008b8
 80109c0:	240008c8 	.word	0x240008c8
 80109c4:	24000108 	.word	0x24000108
 80109c8:	24000128 	.word	0x24000128
 80109cc:	240008e8 	.word	0x240008e8
 80109d0:	24000158 	.word	0x24000158
 80109d4:	24000178 	.word	0x24000178
 80109d8:	240008f8 	.word	0x240008f8
 80109dc:	24000918 	.word	0x24000918
 80109e0:	24000198 	.word	0x24000198
 80109e4:	240001b8 	.word	0x240001b8
 80109e8:	00017480 	.word	0x00017480
 80109ec:	24000928 	.word	0x24000928
 80109f0:	240001d8 	.word	0x240001d8
    conv2d_36_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 80109f4:	4b92      	ldr	r3, [pc, #584]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	4a92      	ldr	r2, [pc, #584]	; (8010c44 <face_detection_configure_activations+0xd50>)
 80109fa:	60d3      	str	r3, [r2, #12]
    
    conv2d_36_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 3584);
 80109fc:	4b90      	ldr	r3, [pc, #576]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010a04:	4a90      	ldr	r2, [pc, #576]	; (8010c48 <face_detection_configure_activations+0xd54>)
 8010a06:	6093      	str	r3, [r2, #8]
    conv2d_36_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 3584);
 8010a08:	4b8d      	ldr	r3, [pc, #564]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010a10:	4a8d      	ldr	r2, [pc, #564]	; (8010c48 <face_detection_configure_activations+0xd54>)
 8010a12:	60d3      	str	r3, [r2, #12]
    
    conv2d_36_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 5888);
 8010a14:	4b8a      	ldr	r3, [pc, #552]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 8010a1c:	4a8b      	ldr	r2, [pc, #556]	; (8010c4c <face_detection_configure_activations+0xd58>)
 8010a1e:	6093      	str	r3, [r2, #8]
    conv2d_36_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 5888);
 8010a20:	4b87      	ldr	r3, [pc, #540]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 8010a28:	4a88      	ldr	r2, [pc, #544]	; (8010c4c <face_detection_configure_activations+0xd58>)
 8010a2a:	60d3      	str	r3, [r2, #12]
    
    conv2d_37_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 8192);
 8010a2c:	4b84      	ldr	r3, [pc, #528]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8010a34:	4a86      	ldr	r2, [pc, #536]	; (8010c50 <face_detection_configure_activations+0xd5c>)
 8010a36:	6093      	str	r3, [r2, #8]
    conv2d_37_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 8192);
 8010a38:	4b81      	ldr	r3, [pc, #516]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8010a40:	4a83      	ldr	r2, [pc, #524]	; (8010c50 <face_detection_configure_activations+0xd5c>)
 8010a42:	60d3      	str	r3, [r2, #12]
    
    conv2d_37_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 14592);
 8010a44:	4b7e      	ldr	r3, [pc, #504]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	f503 5364 	add.w	r3, r3, #14592	; 0x3900
 8010a4c:	4a81      	ldr	r2, [pc, #516]	; (8010c54 <face_detection_configure_activations+0xd60>)
 8010a4e:	6093      	str	r3, [r2, #8]
    conv2d_37_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 14592);
 8010a50:	4b7b      	ldr	r3, [pc, #492]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	f503 5364 	add.w	r3, r3, #14592	; 0x3900
 8010a58:	4a7e      	ldr	r2, [pc, #504]	; (8010c54 <face_detection_configure_activations+0xd60>)
 8010a5a:	60d3      	str	r3, [r2, #12]
    
    conv2d_37_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010a5c:	4b78      	ldr	r3, [pc, #480]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	4a7d      	ldr	r2, [pc, #500]	; (8010c58 <face_detection_configure_activations+0xd64>)
 8010a62:	6093      	str	r3, [r2, #8]
    conv2d_37_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010a64:	4b76      	ldr	r3, [pc, #472]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	4a7b      	ldr	r2, [pc, #492]	; (8010c58 <face_detection_configure_activations+0xd64>)
 8010a6a:	60d3      	str	r3, [r2, #12]
    
    conv2d_37_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 2304);
 8010a6c:	4b74      	ldr	r3, [pc, #464]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a74:	4a79      	ldr	r2, [pc, #484]	; (8010c5c <face_detection_configure_activations+0xd68>)
 8010a76:	6093      	str	r3, [r2, #8]
    conv2d_37_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 2304);
 8010a78:	4b71      	ldr	r3, [pc, #452]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a80:	4a76      	ldr	r2, [pc, #472]	; (8010c5c <face_detection_configure_activations+0xd68>)
 8010a82:	60d3      	str	r3, [r2, #12]
    
    conv2d_38_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 4608);
 8010a84:	4b6e      	ldr	r3, [pc, #440]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8010a8c:	4a74      	ldr	r2, [pc, #464]	; (8010c60 <face_detection_configure_activations+0xd6c>)
 8010a8e:	6093      	str	r3, [r2, #8]
    conv2d_38_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 4608);
 8010a90:	4b6b      	ldr	r3, [pc, #428]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8010a98:	4a71      	ldr	r2, [pc, #452]	; (8010c60 <face_detection_configure_activations+0xd6c>)
 8010a9a:	60d3      	str	r3, [r2, #12]
    
    conv2d_38_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010a9c:	4b68      	ldr	r3, [pc, #416]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	4a70      	ldr	r2, [pc, #448]	; (8010c64 <face_detection_configure_activations+0xd70>)
 8010aa2:	6093      	str	r3, [r2, #8]
    conv2d_38_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010aa4:	4b66      	ldr	r3, [pc, #408]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	4a6e      	ldr	r2, [pc, #440]	; (8010c64 <face_detection_configure_activations+0xd70>)
 8010aaa:	60d3      	str	r3, [r2, #12]
    
    conv2d_38_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 8192);
 8010aac:	4b64      	ldr	r3, [pc, #400]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8010ab4:	4a6c      	ldr	r2, [pc, #432]	; (8010c68 <face_detection_configure_activations+0xd74>)
 8010ab6:	6093      	str	r3, [r2, #8]
    conv2d_38_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 8192);
 8010ab8:	4b61      	ldr	r3, [pc, #388]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8010ac0:	4a69      	ldr	r2, [pc, #420]	; (8010c68 <face_detection_configure_activations+0xd74>)
 8010ac2:	60d3      	str	r3, [r2, #12]
    
    pool_40_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010ac4:	4b5e      	ldr	r3, [pc, #376]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	4a68      	ldr	r2, [pc, #416]	; (8010c6c <face_detection_configure_activations+0xd78>)
 8010aca:	6093      	str	r3, [r2, #8]
    pool_40_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010acc:	4b5c      	ldr	r3, [pc, #368]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	4a66      	ldr	r2, [pc, #408]	; (8010c6c <face_detection_configure_activations+0xd78>)
 8010ad2:	60d3      	str	r3, [r2, #12]
    
    conv2d_45_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 256);
 8010ad4:	4b5a      	ldr	r3, [pc, #360]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8010adc:	4a64      	ldr	r2, [pc, #400]	; (8010c70 <face_detection_configure_activations+0xd7c>)
 8010ade:	6093      	str	r3, [r2, #8]
    conv2d_45_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 256);
 8010ae0:	4b57      	ldr	r3, [pc, #348]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8010ae8:	4a61      	ldr	r2, [pc, #388]	; (8010c70 <face_detection_configure_activations+0xd7c>)
 8010aea:	60d3      	str	r3, [r2, #12]
    
    conv2d_45_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 1600);
 8010aec:	4b54      	ldr	r3, [pc, #336]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8010af4:	4a5f      	ldr	r2, [pc, #380]	; (8010c74 <face_detection_configure_activations+0xd80>)
 8010af6:	6093      	str	r3, [r2, #8]
    conv2d_45_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 1600);
 8010af8:	4b51      	ldr	r3, [pc, #324]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8010b00:	4a5c      	ldr	r2, [pc, #368]	; (8010c74 <face_detection_configure_activations+0xd80>)
 8010b02:	60d3      	str	r3, [r2, #12]
    
    conv2d_46_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010b04:	4b4e      	ldr	r3, [pc, #312]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	4a5b      	ldr	r2, [pc, #364]	; (8010c78 <face_detection_configure_activations+0xd84>)
 8010b0a:	6093      	str	r3, [r2, #8]
    conv2d_46_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010b0c:	4b4c      	ldr	r3, [pc, #304]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	4a59      	ldr	r2, [pc, #356]	; (8010c78 <face_detection_configure_activations+0xd84>)
 8010b12:	60d3      	str	r3, [r2, #12]
    
    conv2d_46_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 1632);
 8010b14:	4b4a      	ldr	r3, [pc, #296]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8010b1c:	4a57      	ldr	r2, [pc, #348]	; (8010c7c <face_detection_configure_activations+0xd88>)
 8010b1e:	6093      	str	r3, [r2, #8]
    conv2d_46_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 1632);
 8010b20:	4b47      	ldr	r3, [pc, #284]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8010b28:	4a54      	ldr	r2, [pc, #336]	; (8010c7c <face_detection_configure_activations+0xd88>)
 8010b2a:	60d3      	str	r3, [r2, #12]
    
    conv2d_46_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 288);
 8010b2c:	4b44      	ldr	r3, [pc, #272]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8010b34:	4a52      	ldr	r2, [pc, #328]	; (8010c80 <face_detection_configure_activations+0xd8c>)
 8010b36:	6093      	str	r3, [r2, #8]
    conv2d_46_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 288);
 8010b38:	4b41      	ldr	r3, [pc, #260]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8010b40:	4a4f      	ldr	r2, [pc, #316]	; (8010c80 <face_detection_configure_activations+0xd8c>)
 8010b42:	60d3      	str	r3, [r2, #12]
    
    conv2d_51_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010b44:	4b3e      	ldr	r3, [pc, #248]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	4a4e      	ldr	r2, [pc, #312]	; (8010c84 <face_detection_configure_activations+0xd90>)
 8010b4a:	6093      	str	r3, [r2, #8]
    conv2d_51_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010b4c:	4b3c      	ldr	r3, [pc, #240]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	4a4c      	ldr	r2, [pc, #304]	; (8010c84 <face_detection_configure_activations+0xd90>)
 8010b52:	60d3      	str	r3, [r2, #12]
    
    conv2d_51_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 1632);
 8010b54:	4b3a      	ldr	r3, [pc, #232]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8010b5c:	4a4a      	ldr	r2, [pc, #296]	; (8010c88 <face_detection_configure_activations+0xd94>)
 8010b5e:	6093      	str	r3, [r2, #8]
    conv2d_51_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 1632);
 8010b60:	4b37      	ldr	r3, [pc, #220]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8010b68:	4a47      	ldr	r2, [pc, #284]	; (8010c88 <face_detection_configure_activations+0xd94>)
 8010b6a:	60d3      	str	r3, [r2, #12]
    
    conv2d_51_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 300);
 8010b6c:	4b34      	ldr	r3, [pc, #208]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8010b74:	4a45      	ldr	r2, [pc, #276]	; (8010c8c <face_detection_configure_activations+0xd98>)
 8010b76:	6093      	str	r3, [r2, #8]
    conv2d_51_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 300);
 8010b78:	4b31      	ldr	r3, [pc, #196]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8010b80:	4a42      	ldr	r2, [pc, #264]	; (8010c8c <face_detection_configure_activations+0xd98>)
 8010b82:	60d3      	str	r3, [r2, #12]
    
    tile_64_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010b84:	4b2e      	ldr	r3, [pc, #184]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	4a41      	ldr	r2, [pc, #260]	; (8010c90 <face_detection_configure_activations+0xd9c>)
 8010b8a:	6093      	str	r3, [r2, #8]
    tile_64_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010b8c:	4b2c      	ldr	r3, [pc, #176]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	4a3f      	ldr	r2, [pc, #252]	; (8010c90 <face_detection_configure_activations+0xd9c>)
 8010b92:	60d3      	str	r3, [r2, #12]
    
    pad_65_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 320);
 8010b94:	4b2a      	ldr	r3, [pc, #168]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010b9c:	4a3d      	ldr	r2, [pc, #244]	; (8010c94 <face_detection_configure_activations+0xda0>)
 8010b9e:	6093      	str	r3, [r2, #8]
    pad_65_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 320);
 8010ba0:	4b27      	ldr	r3, [pc, #156]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010ba8:	4a3a      	ldr	r2, [pc, #232]	; (8010c94 <face_detection_configure_activations+0xda0>)
 8010baa:	60d3      	str	r3, [r2, #12]
    
    conv2d_39_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 608);
 8010bac:	4b24      	ldr	r3, [pc, #144]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8010bb4:	4a38      	ldr	r2, [pc, #224]	; (8010c98 <face_detection_configure_activations+0xda4>)
 8010bb6:	6093      	str	r3, [r2, #8]
    conv2d_39_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 608);
 8010bb8:	4b21      	ldr	r3, [pc, #132]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8010bc0:	4a35      	ldr	r2, [pc, #212]	; (8010c98 <face_detection_configure_activations+0xda4>)
 8010bc2:	60d3      	str	r3, [r2, #12]
    
    conv2d_39_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010bc4:	4b1e      	ldr	r3, [pc, #120]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	4a34      	ldr	r2, [pc, #208]	; (8010c9c <face_detection_configure_activations+0xda8>)
 8010bca:	6093      	str	r3, [r2, #8]
    conv2d_39_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010bcc:	4b1c      	ldr	r3, [pc, #112]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	4a32      	ldr	r2, [pc, #200]	; (8010c9c <face_detection_configure_activations+0xda8>)
 8010bd2:	60d3      	str	r3, [r2, #12]
    
    eltwise_66_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 608);
 8010bd4:	4b1a      	ldr	r3, [pc, #104]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8010bdc:	4a30      	ldr	r2, [pc, #192]	; (8010ca0 <face_detection_configure_activations+0xdac>)
 8010bde:	6093      	str	r3, [r2, #8]
    eltwise_66_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 608);
 8010be0:	4b17      	ldr	r3, [pc, #92]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8010be8:	4a2d      	ldr	r2, [pc, #180]	; (8010ca0 <face_detection_configure_activations+0xdac>)
 8010bea:	60d3      	str	r3, [r2, #12]
    
    eltwise_66_0_conversion_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 896);
 8010bec:	4b14      	ldr	r3, [pc, #80]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8010bf4:	4a2b      	ldr	r2, [pc, #172]	; (8010ca4 <face_detection_configure_activations+0xdb0>)
 8010bf6:	6093      	str	r3, [r2, #8]
    eltwise_66_0_conversion_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 896);
 8010bf8:	4b11      	ldr	r3, [pc, #68]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8010c00:	4a28      	ldr	r2, [pc, #160]	; (8010ca4 <face_detection_configure_activations+0xdb0>)
 8010c02:	60d3      	str	r3, [r2, #12]
    
    upsample_85_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 2048);
 8010c04:	4b0e      	ldr	r3, [pc, #56]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c0c:	4a26      	ldr	r2, [pc, #152]	; (8010ca8 <face_detection_configure_activations+0xdb4>)
 8010c0e:	6093      	str	r3, [r2, #8]
    upsample_85_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 2048);
 8010c10:	4b0b      	ldr	r3, [pc, #44]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c18:	4a23      	ldr	r2, [pc, #140]	; (8010ca8 <face_detection_configure_activations+0xdb4>)
 8010c1a:	60d3      	str	r3, [r2, #12]
    
    upsample_85_0_conversion_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 896);
 8010c1c:	4b08      	ldr	r3, [pc, #32]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8010c24:	4a21      	ldr	r2, [pc, #132]	; (8010cac <face_detection_configure_activations+0xdb8>)
 8010c26:	6093      	str	r3, [r2, #8]
    upsample_85_0_conversion_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 896);
 8010c28:	4b05      	ldr	r3, [pc, #20]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8010c30:	4a1e      	ldr	r2, [pc, #120]	; (8010cac <face_detection_configure_activations+0xdb8>)
 8010c32:	60d3      	str	r3, [r2, #12]
    
    conv2d_67_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 2048);
 8010c34:	4b02      	ldr	r3, [pc, #8]	; (8010c40 <face_detection_configure_activations+0xd4c>)
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c3c:	e038      	b.n	8010cb0 <face_detection_configure_activations+0xdbc>
 8010c3e:	bf00      	nop
 8010c40:	2405ded0 	.word	0x2405ded0
 8010c44:	240001d8 	.word	0x240001d8
 8010c48:	240001f8 	.word	0x240001f8
 8010c4c:	24000948 	.word	0x24000948
 8010c50:	24000958 	.word	0x24000958
 8010c54:	24000218 	.word	0x24000218
 8010c58:	24000238 	.word	0x24000238
 8010c5c:	24000978 	.word	0x24000978
 8010c60:	24000258 	.word	0x24000258
 8010c64:	24000278 	.word	0x24000278
 8010c68:	24000988 	.word	0x24000988
 8010c6c:	240009a8 	.word	0x240009a8
 8010c70:	24000298 	.word	0x24000298
 8010c74:	240009b8 	.word	0x240009b8
 8010c78:	240009d8 	.word	0x240009d8
 8010c7c:	240002b8 	.word	0x240002b8
 8010c80:	240009e8 	.word	0x240009e8
 8010c84:	24000a08 	.word	0x24000a08
 8010c88:	240002d8 	.word	0x240002d8
 8010c8c:	24000a18 	.word	0x24000a18
 8010c90:	24000a38 	.word	0x24000a38
 8010c94:	24000a48 	.word	0x24000a48
 8010c98:	24000308 	.word	0x24000308
 8010c9c:	24000a68 	.word	0x24000a68
 8010ca0:	24000a78 	.word	0x24000a78
 8010ca4:	24000a98 	.word	0x24000a98
 8010ca8:	24000aa8 	.word	0x24000aa8
 8010cac:	24000ac8 	.word	0x24000ac8
 8010cb0:	4a95      	ldr	r2, [pc, #596]	; (8010f08 <face_detection_configure_activations+0x1014>)
 8010cb2:	6093      	str	r3, [r2, #8]
    conv2d_67_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 2048);
 8010cb4:	4b95      	ldr	r3, [pc, #596]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010cbc:	4a92      	ldr	r2, [pc, #584]	; (8010f08 <face_detection_configure_activations+0x1014>)
 8010cbe:	60d3      	str	r3, [r2, #12]
    
    conv2d_67_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 2848);
 8010cc0:	4b92      	ldr	r3, [pc, #584]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	f503 6332 	add.w	r3, r3, #2848	; 0xb20
 8010cc8:	4a91      	ldr	r2, [pc, #580]	; (8010f10 <face_detection_configure_activations+0x101c>)
 8010cca:	6093      	str	r3, [r2, #8]
    conv2d_67_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 2848);
 8010ccc:	4b8f      	ldr	r3, [pc, #572]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	f503 6332 	add.w	r3, r3, #2848	; 0xb20
 8010cd4:	4a8e      	ldr	r2, [pc, #568]	; (8010f10 <face_detection_configure_activations+0x101c>)
 8010cd6:	60d3      	str	r3, [r2, #12]
    
    conv2d_67_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010cd8:	4b8c      	ldr	r3, [pc, #560]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	4a8d      	ldr	r2, [pc, #564]	; (8010f14 <face_detection_configure_activations+0x1020>)
 8010cde:	6093      	str	r3, [r2, #8]
    conv2d_67_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010ce0:	4b8a      	ldr	r3, [pc, #552]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	4a8b      	ldr	r2, [pc, #556]	; (8010f14 <face_detection_configure_activations+0x1020>)
 8010ce6:	60d3      	str	r3, [r2, #12]
    
    conv2d_72_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 2048);
 8010ce8:	4b88      	ldr	r3, [pc, #544]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010cf0:	4a89      	ldr	r2, [pc, #548]	; (8010f18 <face_detection_configure_activations+0x1024>)
 8010cf2:	6093      	str	r3, [r2, #8]
    conv2d_72_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 2048);
 8010cf4:	4b85      	ldr	r3, [pc, #532]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010cfc:	4a86      	ldr	r2, [pc, #536]	; (8010f18 <face_detection_configure_activations+0x1024>)
 8010cfe:	60d3      	str	r3, [r2, #12]
    
    conv2d_72_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 2848);
 8010d00:	4b82      	ldr	r3, [pc, #520]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	f503 6332 	add.w	r3, r3, #2848	; 0xb20
 8010d08:	4a84      	ldr	r2, [pc, #528]	; (8010f1c <face_detection_configure_activations+0x1028>)
 8010d0a:	6093      	str	r3, [r2, #8]
    conv2d_72_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 2848);
 8010d0c:	4b7f      	ldr	r3, [pc, #508]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	f503 6332 	add.w	r3, r3, #2848	; 0xb20
 8010d14:	4a81      	ldr	r2, [pc, #516]	; (8010f1c <face_detection_configure_activations+0x1028>)
 8010d16:	60d3      	str	r3, [r2, #12]
    
    conv2d_72_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 180);
 8010d18:	4b7c      	ldr	r3, [pc, #496]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	33b4      	adds	r3, #180	; 0xb4
 8010d1e:	4a80      	ldr	r2, [pc, #512]	; (8010f20 <face_detection_configure_activations+0x102c>)
 8010d20:	6093      	str	r3, [r2, #8]
    conv2d_72_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 180);
 8010d22:	4b7a      	ldr	r3, [pc, #488]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	33b4      	adds	r3, #180	; 0xb4
 8010d28:	4a7d      	ldr	r2, [pc, #500]	; (8010f20 <face_detection_configure_activations+0x102c>)
 8010d2a:	60d3      	str	r3, [r2, #12]
    
    conv2d_34_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 2048);
 8010d2c:	4b77      	ldr	r3, [pc, #476]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d34:	4a7b      	ldr	r2, [pc, #492]	; (8010f24 <face_detection_configure_activations+0x1030>)
 8010d36:	6093      	str	r3, [r2, #8]
    conv2d_34_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 2048);
 8010d38:	4b74      	ldr	r3, [pc, #464]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d40:	4a78      	ldr	r2, [pc, #480]	; (8010f24 <face_detection_configure_activations+0x1030>)
 8010d42:	60d3      	str	r3, [r2, #12]
    
    conv2d_34_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 3392);
 8010d44:	4b71      	ldr	r3, [pc, #452]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	f503 6354 	add.w	r3, r3, #3392	; 0xd40
 8010d4c:	4a76      	ldr	r2, [pc, #472]	; (8010f28 <face_detection_configure_activations+0x1034>)
 8010d4e:	6093      	str	r3, [r2, #8]
    conv2d_34_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 3392);
 8010d50:	4b6e      	ldr	r3, [pc, #440]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	f503 6354 	add.w	r3, r3, #3392	; 0xd40
 8010d58:	4a73      	ldr	r2, [pc, #460]	; (8010f28 <face_detection_configure_activations+0x1034>)
 8010d5a:	60d3      	str	r3, [r2, #12]
    
    eltwise_86_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 2048);
 8010d5c:	4b6b      	ldr	r3, [pc, #428]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d64:	4a71      	ldr	r2, [pc, #452]	; (8010f2c <face_detection_configure_activations+0x1038>)
 8010d66:	6093      	str	r3, [r2, #8]
    eltwise_86_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 2048);
 8010d68:	4b68      	ldr	r3, [pc, #416]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d70:	4a6e      	ldr	r2, [pc, #440]	; (8010f2c <face_detection_configure_activations+0x1038>)
 8010d72:	60d3      	str	r3, [r2, #12]
    
    eltwise_86_0_conversion_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 3200);
 8010d74:	4b65      	ldr	r3, [pc, #404]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 8010d7c:	4a6c      	ldr	r2, [pc, #432]	; (8010f30 <face_detection_configure_activations+0x103c>)
 8010d7e:	6093      	str	r3, [r2, #8]
    eltwise_86_0_conversion_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 3200);
 8010d80:	4b62      	ldr	r3, [pc, #392]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 8010d88:	4a69      	ldr	r2, [pc, #420]	; (8010f30 <face_detection_configure_activations+0x103c>)
 8010d8a:	60d3      	str	r3, [r2, #12]
    
    upsample_105_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 7808);
 8010d8c:	4b5f      	ldr	r3, [pc, #380]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 8010d94:	4a67      	ldr	r2, [pc, #412]	; (8010f34 <face_detection_configure_activations+0x1040>)
 8010d96:	6093      	str	r3, [r2, #8]
    upsample_105_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 7808);
 8010d98:	4b5c      	ldr	r3, [pc, #368]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 8010da0:	4a64      	ldr	r2, [pc, #400]	; (8010f34 <face_detection_configure_activations+0x1040>)
 8010da2:	60d3      	str	r3, [r2, #12]
    
    upsample_105_0_conversion_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 3200);
 8010da4:	4b59      	ldr	r3, [pc, #356]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 8010dac:	4a62      	ldr	r2, [pc, #392]	; (8010f38 <face_detection_configure_activations+0x1044>)
 8010dae:	6093      	str	r3, [r2, #8]
    upsample_105_0_conversion_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 3200);
 8010db0:	4b56      	ldr	r3, [pc, #344]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 8010db8:	4a5f      	ldr	r2, [pc, #380]	; (8010f38 <face_detection_configure_activations+0x1044>)
 8010dba:	60d3      	str	r3, [r2, #12]
    
    conv2d_87_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 7808);
 8010dbc:	4b53      	ldr	r3, [pc, #332]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 8010dc4:	4a5d      	ldr	r2, [pc, #372]	; (8010f3c <face_detection_configure_activations+0x1048>)
 8010dc6:	6093      	str	r3, [r2, #8]
    conv2d_87_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 7808);
 8010dc8:	4b50      	ldr	r3, [pc, #320]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 8010dd0:	4a5a      	ldr	r2, [pc, #360]	; (8010f3c <face_detection_configure_activations+0x1048>)
 8010dd2:	60d3      	str	r3, [r2, #12]
    
    conv2d_87_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 9856);
 8010dd4:	4b4d      	ldr	r3, [pc, #308]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	f503 531a 	add.w	r3, r3, #9856	; 0x2680
 8010ddc:	4a58      	ldr	r2, [pc, #352]	; (8010f40 <face_detection_configure_activations+0x104c>)
 8010dde:	6093      	str	r3, [r2, #8]
    conv2d_87_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 9856);
 8010de0:	4b4a      	ldr	r3, [pc, #296]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	f503 531a 	add.w	r3, r3, #9856	; 0x2680
 8010de8:	4a55      	ldr	r2, [pc, #340]	; (8010f40 <face_detection_configure_activations+0x104c>)
 8010dea:	60d3      	str	r3, [r2, #12]
    
    conv2d_87_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 320);
 8010dec:	4b47      	ldr	r3, [pc, #284]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010df4:	4a53      	ldr	r2, [pc, #332]	; (8010f44 <face_detection_configure_activations+0x1050>)
 8010df6:	6093      	str	r3, [r2, #8]
    conv2d_87_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 320);
 8010df8:	4b44      	ldr	r3, [pc, #272]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010e00:	4a50      	ldr	r2, [pc, #320]	; (8010f44 <face_detection_configure_activations+0x1050>)
 8010e02:	60d3      	str	r3, [r2, #12]
    
    conv2d_92_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 7808);
 8010e04:	4b41      	ldr	r3, [pc, #260]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 8010e0c:	4a4e      	ldr	r2, [pc, #312]	; (8010f48 <face_detection_configure_activations+0x1054>)
 8010e0e:	6093      	str	r3, [r2, #8]
    conv2d_92_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 7808);
 8010e10:	4b3e      	ldr	r3, [pc, #248]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 8010e18:	4a4b      	ldr	r2, [pc, #300]	; (8010f48 <face_detection_configure_activations+0x1054>)
 8010e1a:	60d3      	str	r3, [r2, #12]
    
    conv2d_92_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 9856);
 8010e1c:	4b3b      	ldr	r3, [pc, #236]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	f503 531a 	add.w	r3, r3, #9856	; 0x2680
 8010e24:	4a49      	ldr	r2, [pc, #292]	; (8010f4c <face_detection_configure_activations+0x1058>)
 8010e26:	6093      	str	r3, [r2, #8]
    conv2d_92_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 9856);
 8010e28:	4b38      	ldr	r3, [pc, #224]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	f503 531a 	add.w	r3, r3, #9856	; 0x2680
 8010e30:	4a46      	ldr	r2, [pc, #280]	; (8010f4c <face_detection_configure_activations+0x1058>)
 8010e32:	60d3      	str	r3, [r2, #12]
    
    conv2d_92_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 680);
 8010e34:	4b35      	ldr	r3, [pc, #212]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8010e3c:	4a44      	ldr	r2, [pc, #272]	; (8010f50 <face_detection_configure_activations+0x105c>)
 8010e3e:	6093      	str	r3, [r2, #8]
    conv2d_92_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 680);
 8010e40:	4b32      	ldr	r3, [pc, #200]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8010e48:	4a41      	ldr	r2, [pc, #260]	; (8010f50 <face_detection_configure_activations+0x105c>)
 8010e4a:	60d3      	str	r3, [r2, #12]
    
    conv2d_28_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 1400);
 8010e4c:	4b2f      	ldr	r3, [pc, #188]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8010e54:	4a3f      	ldr	r2, [pc, #252]	; (8010f54 <face_detection_configure_activations+0x1060>)
 8010e56:	6093      	str	r3, [r2, #8]
    conv2d_28_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 1400);
 8010e58:	4b2c      	ldr	r3, [pc, #176]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8010e60:	4a3c      	ldr	r2, [pc, #240]	; (8010f54 <face_detection_configure_activations+0x1060>)
 8010e62:	60d3      	str	r3, [r2, #12]
    
    conv2d_28_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 7808);
 8010e64:	4b29      	ldr	r3, [pc, #164]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 8010e6c:	4a3a      	ldr	r2, [pc, #232]	; (8010f58 <face_detection_configure_activations+0x1064>)
 8010e6e:	6093      	str	r3, [r2, #8]
    conv2d_28_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 7808);
 8010e70:	4b26      	ldr	r3, [pc, #152]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 8010e78:	4a37      	ldr	r2, [pc, #220]	; (8010f58 <face_detection_configure_activations+0x1064>)
 8010e7a:	60d3      	str	r3, [r2, #12]
    
    eltwise_106_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 12416);
 8010e7c:	4b23      	ldr	r3, [pc, #140]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	f503 5342 	add.w	r3, r3, #12416	; 0x3080
 8010e84:	4a35      	ldr	r2, [pc, #212]	; (8010f5c <face_detection_configure_activations+0x1068>)
 8010e86:	6093      	str	r3, [r2, #8]
    eltwise_106_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 12416);
 8010e88:	4b20      	ldr	r3, [pc, #128]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	f503 5342 	add.w	r3, r3, #12416	; 0x3080
 8010e90:	4a32      	ldr	r2, [pc, #200]	; (8010f5c <face_detection_configure_activations+0x1068>)
 8010e92:	60d3      	str	r3, [r2, #12]
    
    eltwise_106_0_conversion_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 17024);
 8010e94:	4b1d      	ldr	r3, [pc, #116]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	f503 4385 	add.w	r3, r3, #17024	; 0x4280
 8010e9c:	4a30      	ldr	r2, [pc, #192]	; (8010f60 <face_detection_configure_activations+0x106c>)
 8010e9e:	6093      	str	r3, [r2, #8]
    eltwise_106_0_conversion_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 17024);
 8010ea0:	4b1a      	ldr	r3, [pc, #104]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	f503 4385 	add.w	r3, r3, #17024	; 0x4280
 8010ea8:	4a2d      	ldr	r2, [pc, #180]	; (8010f60 <face_detection_configure_activations+0x106c>)
 8010eaa:	60d3      	str	r3, [r2, #12]
    
    upsample_125_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 74624);
 8010eac:	4b17      	ldr	r3, [pc, #92]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010eae:	681a      	ldr	r2, [r3, #0]
 8010eb0:	4b2c      	ldr	r3, [pc, #176]	; (8010f64 <face_detection_configure_activations+0x1070>)
 8010eb2:	4413      	add	r3, r2
 8010eb4:	4a2c      	ldr	r2, [pc, #176]	; (8010f68 <face_detection_configure_activations+0x1074>)
 8010eb6:	6093      	str	r3, [r2, #8]
    upsample_125_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 74624);
 8010eb8:	4b14      	ldr	r3, [pc, #80]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010eba:	681a      	ldr	r2, [r3, #0]
 8010ebc:	4b29      	ldr	r3, [pc, #164]	; (8010f64 <face_detection_configure_activations+0x1070>)
 8010ebe:	4413      	add	r3, r2
 8010ec0:	4a29      	ldr	r2, [pc, #164]	; (8010f68 <face_detection_configure_activations+0x1074>)
 8010ec2:	60d3      	str	r3, [r2, #12]
    
    upsample_125_0_conversion_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 17024);
 8010ec4:	4b11      	ldr	r3, [pc, #68]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	f503 4385 	add.w	r3, r3, #17024	; 0x4280
 8010ecc:	4a27      	ldr	r2, [pc, #156]	; (8010f6c <face_detection_configure_activations+0x1078>)
 8010ece:	6093      	str	r3, [r2, #8]
    upsample_125_0_conversion_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 17024);
 8010ed0:	4b0e      	ldr	r3, [pc, #56]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	f503 4385 	add.w	r3, r3, #17024	; 0x4280
 8010ed8:	4a24      	ldr	r2, [pc, #144]	; (8010f6c <face_detection_configure_activations+0x1078>)
 8010eda:	60d3      	str	r3, [r2, #12]
    
    conv2d_107_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 1400);
 8010edc:	4b0b      	ldr	r3, [pc, #44]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8010ee4:	4a22      	ldr	r2, [pc, #136]	; (8010f70 <face_detection_configure_activations+0x107c>)
 8010ee6:	6093      	str	r3, [r2, #8]
    conv2d_107_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 1400);
 8010ee8:	4b08      	ldr	r3, [pc, #32]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8010ef0:	4a1f      	ldr	r2, [pc, #124]	; (8010f70 <face_detection_configure_activations+0x107c>)
 8010ef2:	60d3      	str	r3, [r2, #12]
    
    conv2d_107_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 74624);
 8010ef4:	4b05      	ldr	r3, [pc, #20]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010ef6:	681a      	ldr	r2, [r3, #0]
 8010ef8:	4b1a      	ldr	r3, [pc, #104]	; (8010f64 <face_detection_configure_activations+0x1070>)
 8010efa:	4413      	add	r3, r2
 8010efc:	4a1d      	ldr	r2, [pc, #116]	; (8010f74 <face_detection_configure_activations+0x1080>)
 8010efe:	6093      	str	r3, [r2, #8]
    conv2d_107_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 74624);
 8010f00:	4b02      	ldr	r3, [pc, #8]	; (8010f0c <face_detection_configure_activations+0x1018>)
 8010f02:	681a      	ldr	r2, [r3, #0]
 8010f04:	e038      	b.n	8010f78 <face_detection_configure_activations+0x1084>
 8010f06:	bf00      	nop
 8010f08:	24000ad8 	.word	0x24000ad8
 8010f0c:	2405ded0 	.word	0x2405ded0
 8010f10:	24000328 	.word	0x24000328
 8010f14:	24000af8 	.word	0x24000af8
 8010f18:	24000b08 	.word	0x24000b08
 8010f1c:	24000348 	.word	0x24000348
 8010f20:	24000b28 	.word	0x24000b28
 8010f24:	24000368 	.word	0x24000368
 8010f28:	24000b38 	.word	0x24000b38
 8010f2c:	24000b58 	.word	0x24000b58
 8010f30:	24000b68 	.word	0x24000b68
 8010f34:	24000b88 	.word	0x24000b88
 8010f38:	24000b98 	.word	0x24000b98
 8010f3c:	24000bb8 	.word	0x24000bb8
 8010f40:	24000398 	.word	0x24000398
 8010f44:	24000bc8 	.word	0x24000bc8
 8010f48:	24000be8 	.word	0x24000be8
 8010f4c:	240003b8 	.word	0x240003b8
 8010f50:	24000bf8 	.word	0x24000bf8
 8010f54:	240003d8 	.word	0x240003d8
 8010f58:	24000c18 	.word	0x24000c18
 8010f5c:	24000c28 	.word	0x24000c28
 8010f60:	24000c48 	.word	0x24000c48
 8010f64:	00012380 	.word	0x00012380
 8010f68:	24000c58 	.word	0x24000c58
 8010f6c:	24000c78 	.word	0x24000c78
 8010f70:	24000c88 	.word	0x24000c88
 8010f74:	240003f8 	.word	0x240003f8
 8010f78:	4b87      	ldr	r3, [pc, #540]	; (8011198 <face_detection_configure_activations+0x12a4>)
 8010f7a:	4413      	add	r3, r2
 8010f7c:	4a87      	ldr	r2, [pc, #540]	; (801119c <face_detection_configure_activations+0x12a8>)
 8010f7e:	60d3      	str	r3, [r2, #12]
    
    conv2d_107_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 7672);
 8010f80:	4b87      	ldr	r3, [pc, #540]	; (80111a0 <face_detection_configure_activations+0x12ac>)
 8010f82:	681a      	ldr	r2, [r3, #0]
 8010f84:	f641 53f8 	movw	r3, #7672	; 0x1df8
 8010f88:	4413      	add	r3, r2
 8010f8a:	4a86      	ldr	r2, [pc, #536]	; (80111a4 <face_detection_configure_activations+0x12b0>)
 8010f8c:	6093      	str	r3, [r2, #8]
    conv2d_107_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 7672);
 8010f8e:	4b84      	ldr	r3, [pc, #528]	; (80111a0 <face_detection_configure_activations+0x12ac>)
 8010f90:	681a      	ldr	r2, [r3, #0]
 8010f92:	f641 53f8 	movw	r3, #7672	; 0x1df8
 8010f96:	4413      	add	r3, r2
 8010f98:	4a82      	ldr	r2, [pc, #520]	; (80111a4 <face_detection_configure_activations+0x12b0>)
 8010f9a:	60d3      	str	r3, [r2, #12]
    
    conv2d_112_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 1400);
 8010f9c:	4b80      	ldr	r3, [pc, #512]	; (80111a0 <face_detection_configure_activations+0x12ac>)
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8010fa4:	4a80      	ldr	r2, [pc, #512]	; (80111a8 <face_detection_configure_activations+0x12b4>)
 8010fa6:	6093      	str	r3, [r2, #8]
    conv2d_112_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 1400);
 8010fa8:	4b7d      	ldr	r3, [pc, #500]	; (80111a0 <face_detection_configure_activations+0x12ac>)
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8010fb0:	4a7d      	ldr	r2, [pc, #500]	; (80111a8 <face_detection_configure_activations+0x12b4>)
 8010fb2:	60d3      	str	r3, [r2, #12]
    
    conv2d_112_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 9112);
 8010fb4:	4b7a      	ldr	r3, [pc, #488]	; (80111a0 <face_detection_configure_activations+0x12ac>)
 8010fb6:	681a      	ldr	r2, [r3, #0]
 8010fb8:	f242 3398 	movw	r3, #9112	; 0x2398
 8010fbc:	4413      	add	r3, r2
 8010fbe:	4a7b      	ldr	r2, [pc, #492]	; (80111ac <face_detection_configure_activations+0x12b8>)
 8010fc0:	6093      	str	r3, [r2, #8]
    conv2d_112_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 9112);
 8010fc2:	4b77      	ldr	r3, [pc, #476]	; (80111a0 <face_detection_configure_activations+0x12ac>)
 8010fc4:	681a      	ldr	r2, [r3, #0]
 8010fc6:	f242 3398 	movw	r3, #9112	; 0x2398
 8010fca:	4413      	add	r3, r2
 8010fcc:	4a77      	ldr	r2, [pc, #476]	; (80111ac <face_detection_configure_activations+0x12b8>)
 8010fce:	60d3      	str	r3, [r2, #12]
    
    conv2d_112_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 74624);
 8010fd0:	4b73      	ldr	r3, [pc, #460]	; (80111a0 <face_detection_configure_activations+0x12ac>)
 8010fd2:	681a      	ldr	r2, [r3, #0]
 8010fd4:	4b70      	ldr	r3, [pc, #448]	; (8011198 <face_detection_configure_activations+0x12a4>)
 8010fd6:	4413      	add	r3, r2
 8010fd8:	4a75      	ldr	r2, [pc, #468]	; (80111b0 <face_detection_configure_activations+0x12bc>)
 8010fda:	6093      	str	r3, [r2, #8]
    conv2d_112_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 74624);
 8010fdc:	4b70      	ldr	r3, [pc, #448]	; (80111a0 <face_detection_configure_activations+0x12ac>)
 8010fde:	681a      	ldr	r2, [r3, #0]
 8010fe0:	4b6d      	ldr	r3, [pc, #436]	; (8011198 <face_detection_configure_activations+0x12a4>)
 8010fe2:	4413      	add	r3, r2
 8010fe4:	4a72      	ldr	r2, [pc, #456]	; (80111b0 <face_detection_configure_activations+0x12bc>)
 8010fe6:	60d3      	str	r3, [r2, #12]
    
    conv2d_14_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 1400);
 8010fe8:	4b6d      	ldr	r3, [pc, #436]	; (80111a0 <face_detection_configure_activations+0x12ac>)
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8010ff0:	4a70      	ldr	r2, [pc, #448]	; (80111b4 <face_detection_configure_activations+0x12c0>)
 8010ff2:	6093      	str	r3, [r2, #8]
    conv2d_14_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 1400);
 8010ff4:	4b6a      	ldr	r3, [pc, #424]	; (80111a0 <face_detection_configure_activations+0x12ac>)
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8010ffc:	4a6d      	ldr	r2, [pc, #436]	; (80111b4 <face_detection_configure_activations+0x12c0>)
 8010ffe:	60d3      	str	r3, [r2, #12]
    
    conv2d_14_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 77504);
 8011000:	4b67      	ldr	r3, [pc, #412]	; (80111a0 <face_detection_configure_activations+0x12ac>)
 8011002:	681a      	ldr	r2, [r3, #0]
 8011004:	4b6c      	ldr	r3, [pc, #432]	; (80111b8 <face_detection_configure_activations+0x12c4>)
 8011006:	4413      	add	r3, r2
 8011008:	4a6c      	ldr	r2, [pc, #432]	; (80111bc <face_detection_configure_activations+0x12c8>)
 801100a:	6093      	str	r3, [r2, #8]
    conv2d_14_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 77504);
 801100c:	4b64      	ldr	r3, [pc, #400]	; (80111a0 <face_detection_configure_activations+0x12ac>)
 801100e:	681a      	ldr	r2, [r3, #0]
 8011010:	4b69      	ldr	r3, [pc, #420]	; (80111b8 <face_detection_configure_activations+0x12c4>)
 8011012:	4413      	add	r3, r2
 8011014:	4a69      	ldr	r2, [pc, #420]	; (80111bc <face_detection_configure_activations+0x12c8>)
 8011016:	60d3      	str	r3, [r2, #12]
    
    eltwise_126_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 35456);
 8011018:	4b61      	ldr	r3, [pc, #388]	; (80111a0 <face_detection_configure_activations+0x12ac>)
 801101a:	681a      	ldr	r2, [r3, #0]
 801101c:	f648 2380 	movw	r3, #35456	; 0x8a80
 8011020:	4413      	add	r3, r2
 8011022:	4a67      	ldr	r2, [pc, #412]	; (80111c0 <face_detection_configure_activations+0x12cc>)
 8011024:	6093      	str	r3, [r2, #8]
    eltwise_126_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 35456);
 8011026:	4b5e      	ldr	r3, [pc, #376]	; (80111a0 <face_detection_configure_activations+0x12ac>)
 8011028:	681a      	ldr	r2, [r3, #0]
 801102a:	f648 2380 	movw	r3, #35456	; 0x8a80
 801102e:	4413      	add	r3, r2
 8011030:	4a63      	ldr	r2, [pc, #396]	; (80111c0 <face_detection_configure_activations+0x12cc>)
 8011032:	60d3      	str	r3, [r2, #12]
    
    conv2d_127_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 9112);
 8011034:	4b5a      	ldr	r3, [pc, #360]	; (80111a0 <face_detection_configure_activations+0x12ac>)
 8011036:	681a      	ldr	r2, [r3, #0]
 8011038:	f242 3398 	movw	r3, #9112	; 0x2398
 801103c:	4413      	add	r3, r2
 801103e:	4a61      	ldr	r2, [pc, #388]	; (80111c4 <face_detection_configure_activations+0x12d0>)
 8011040:	6093      	str	r3, [r2, #8]
    conv2d_127_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 9112);
 8011042:	4b57      	ldr	r3, [pc, #348]	; (80111a0 <face_detection_configure_activations+0x12ac>)
 8011044:	681a      	ldr	r2, [r3, #0]
 8011046:	f242 3398 	movw	r3, #9112	; 0x2398
 801104a:	4413      	add	r3, r2
 801104c:	4a5d      	ldr	r2, [pc, #372]	; (80111c4 <face_detection_configure_activations+0x12d0>)
 801104e:	60d3      	str	r3, [r2, #12]
    
    conv2d_127_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 53888);
 8011050:	4b53      	ldr	r3, [pc, #332]	; (80111a0 <face_detection_configure_activations+0x12ac>)
 8011052:	681a      	ldr	r2, [r3, #0]
 8011054:	f24d 2380 	movw	r3, #53888	; 0xd280
 8011058:	4413      	add	r3, r2
 801105a:	4a5b      	ldr	r2, [pc, #364]	; (80111c8 <face_detection_configure_activations+0x12d4>)
 801105c:	6093      	str	r3, [r2, #8]
    conv2d_127_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 53888);
 801105e:	4b50      	ldr	r3, [pc, #320]	; (80111a0 <face_detection_configure_activations+0x12ac>)
 8011060:	681a      	ldr	r2, [r3, #0]
 8011062:	f24d 2380 	movw	r3, #53888	; 0xd280
 8011066:	4413      	add	r3, r2
 8011068:	4a57      	ldr	r2, [pc, #348]	; (80111c8 <face_detection_configure_activations+0x12d4>)
 801106a:	60d3      	str	r3, [r2, #12]
    
    conv2d_127_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 1400);
 801106c:	4b4c      	ldr	r3, [pc, #304]	; (80111a0 <face_detection_configure_activations+0x12ac>)
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8011074:	4a55      	ldr	r2, [pc, #340]	; (80111cc <face_detection_configure_activations+0x12d8>)
 8011076:	6093      	str	r3, [r2, #8]
    conv2d_127_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 1400);
 8011078:	4b49      	ldr	r3, [pc, #292]	; (80111a0 <face_detection_configure_activations+0x12ac>)
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8011080:	4a52      	ldr	r2, [pc, #328]	; (80111cc <face_detection_configure_activations+0x12d8>)
 8011082:	60d3      	str	r3, [r2, #12]
    
    concat_132_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 9112);
 8011084:	4b46      	ldr	r3, [pc, #280]	; (80111a0 <face_detection_configure_activations+0x12ac>)
 8011086:	681a      	ldr	r2, [r3, #0]
 8011088:	f242 3398 	movw	r3, #9112	; 0x2398
 801108c:	4413      	add	r3, r2
 801108e:	4a50      	ldr	r2, [pc, #320]	; (80111d0 <face_detection_configure_activations+0x12dc>)
 8011090:	6093      	str	r3, [r2, #8]
    concat_132_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 9112);
 8011092:	4b43      	ldr	r3, [pc, #268]	; (80111a0 <face_detection_configure_activations+0x12ac>)
 8011094:	681a      	ldr	r2, [r3, #0]
 8011096:	f242 3398 	movw	r3, #9112	; 0x2398
 801109a:	4413      	add	r3, r2
 801109c:	4a4c      	ldr	r2, [pc, #304]	; (80111d0 <face_detection_configure_activations+0x12dc>)
 801109e:	60d3      	str	r3, [r2, #12]
    
    concat_132_0_conversion_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 77504);
 80110a0:	4b3f      	ldr	r3, [pc, #252]	; (80111a0 <face_detection_configure_activations+0x12ac>)
 80110a2:	681a      	ldr	r2, [r3, #0]
 80110a4:	4b44      	ldr	r3, [pc, #272]	; (80111b8 <face_detection_configure_activations+0x12c4>)
 80110a6:	4413      	add	r3, r2
 80110a8:	4a4a      	ldr	r2, [pc, #296]	; (80111d4 <face_detection_configure_activations+0x12e0>)
 80110aa:	6093      	str	r3, [r2, #8]
    concat_132_0_conversion_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 77504);
 80110ac:	4b3c      	ldr	r3, [pc, #240]	; (80111a0 <face_detection_configure_activations+0x12ac>)
 80110ae:	681a      	ldr	r2, [r3, #0]
 80110b0:	4b41      	ldr	r3, [pc, #260]	; (80111b8 <face_detection_configure_activations+0x12c4>)
 80110b2:	4413      	add	r3, r2
 80110b4:	4a47      	ldr	r2, [pc, #284]	; (80111d4 <face_detection_configure_activations+0x12e0>)
 80110b6:	60d3      	str	r3, [r2, #12]
    
    nl_133_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 1400);
 80110b8:	4b39      	ldr	r3, [pc, #228]	; (80111a0 <face_detection_configure_activations+0x12ac>)
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 80110c0:	4a45      	ldr	r2, [pc, #276]	; (80111d8 <face_detection_configure_activations+0x12e4>)
 80110c2:	6093      	str	r3, [r2, #8]
    nl_133_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 1400);
 80110c4:	4b36      	ldr	r3, [pc, #216]	; (80111a0 <face_detection_configure_activations+0x12ac>)
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 80110cc:	4a42      	ldr	r2, [pc, #264]	; (80111d8 <face_detection_configure_activations+0x12e4>)
 80110ce:	60d3      	str	r3, [r2, #12]
    
    nl_133_0_conversion_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 53888);
 80110d0:	4b33      	ldr	r3, [pc, #204]	; (80111a0 <face_detection_configure_activations+0x12ac>)
 80110d2:	681a      	ldr	r2, [r3, #0]
 80110d4:	f24d 2380 	movw	r3, #53888	; 0xd280
 80110d8:	4413      	add	r3, r2
 80110da:	4a40      	ldr	r2, [pc, #256]	; (80111dc <face_detection_configure_activations+0x12e8>)
 80110dc:	6093      	str	r3, [r2, #8]
    nl_133_0_conversion_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 53888);
 80110de:	4b30      	ldr	r3, [pc, #192]	; (80111a0 <face_detection_configure_activations+0x12ac>)
 80110e0:	681a      	ldr	r2, [r3, #0]
 80110e2:	f24d 2380 	movw	r3, #53888	; 0xd280
 80110e6:	4413      	add	r3, r2
 80110e8:	4a3c      	ldr	r2, [pc, #240]	; (80111dc <face_detection_configure_activations+0x12e8>)
 80110ea:	60d3      	str	r3, [r2, #12]
    
    conv2d_135_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 1400);
 80110ec:	4b2c      	ldr	r3, [pc, #176]	; (80111a0 <face_detection_configure_activations+0x12ac>)
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 80110f4:	4a3a      	ldr	r2, [pc, #232]	; (80111e0 <face_detection_configure_activations+0x12ec>)
 80110f6:	6093      	str	r3, [r2, #8]
    conv2d_135_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 1400);
 80110f8:	4b29      	ldr	r3, [pc, #164]	; (80111a0 <face_detection_configure_activations+0x12ac>)
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8011100:	4a37      	ldr	r2, [pc, #220]	; (80111e0 <face_detection_configure_activations+0x12ec>)
 8011102:	60d3      	str	r3, [r2, #12]
    
    conv2d_135_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 23032);
 8011104:	4b26      	ldr	r3, [pc, #152]	; (80111a0 <face_detection_configure_activations+0x12ac>)
 8011106:	681a      	ldr	r2, [r3, #0]
 8011108:	f645 13f8 	movw	r3, #23032	; 0x59f8
 801110c:	4413      	add	r3, r2
 801110e:	4a35      	ldr	r2, [pc, #212]	; (80111e4 <face_detection_configure_activations+0x12f0>)
 8011110:	6093      	str	r3, [r2, #8]
    conv2d_135_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 23032);
 8011112:	4b23      	ldr	r3, [pc, #140]	; (80111a0 <face_detection_configure_activations+0x12ac>)
 8011114:	681a      	ldr	r2, [r3, #0]
 8011116:	f645 13f8 	movw	r3, #23032	; 0x59f8
 801111a:	4413      	add	r3, r2
 801111c:	4a31      	ldr	r2, [pc, #196]	; (80111e4 <face_detection_configure_activations+0x12f0>)
 801111e:	60d3      	str	r3, [r2, #12]
    
    conv2d_135_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 29504);
 8011120:	4b1f      	ldr	r3, [pc, #124]	; (80111a0 <face_detection_configure_activations+0x12ac>)
 8011122:	681a      	ldr	r2, [r3, #0]
 8011124:	f247 3340 	movw	r3, #29504	; 0x7340
 8011128:	4413      	add	r3, r2
 801112a:	4a2f      	ldr	r2, [pc, #188]	; (80111e8 <face_detection_configure_activations+0x12f4>)
 801112c:	6093      	str	r3, [r2, #8]
    conv2d_135_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 29504);
 801112e:	4b1c      	ldr	r3, [pc, #112]	; (80111a0 <face_detection_configure_activations+0x12ac>)
 8011130:	681a      	ldr	r2, [r3, #0]
 8011132:	f247 3340 	movw	r3, #29504	; 0x7340
 8011136:	4413      	add	r3, r2
 8011138:	4a2b      	ldr	r2, [pc, #172]	; (80111e8 <face_detection_configure_activations+0x12f4>)
 801113a:	60d3      	str	r3, [r2, #12]
    
    concat_140_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 77504);
 801113c:	4b18      	ldr	r3, [pc, #96]	; (80111a0 <face_detection_configure_activations+0x12ac>)
 801113e:	681a      	ldr	r2, [r3, #0]
 8011140:	4b1d      	ldr	r3, [pc, #116]	; (80111b8 <face_detection_configure_activations+0x12c4>)
 8011142:	4413      	add	r3, r2
 8011144:	4a29      	ldr	r2, [pc, #164]	; (80111ec <face_detection_configure_activations+0x12f8>)
 8011146:	6093      	str	r3, [r2, #8]
    concat_140_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 77504);
 8011148:	4b15      	ldr	r3, [pc, #84]	; (80111a0 <face_detection_configure_activations+0x12ac>)
 801114a:	681a      	ldr	r2, [r3, #0]
 801114c:	4b1a      	ldr	r3, [pc, #104]	; (80111b8 <face_detection_configure_activations+0x12c4>)
 801114e:	4413      	add	r3, r2
 8011150:	4a26      	ldr	r2, [pc, #152]	; (80111ec <face_detection_configure_activations+0x12f8>)
 8011152:	60d3      	str	r3, [r2, #12]
    
    concat_150_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8011154:	4b12      	ldr	r3, [pc, #72]	; (80111a0 <face_detection_configure_activations+0x12ac>)
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	4a25      	ldr	r2, [pc, #148]	; (80111f0 <face_detection_configure_activations+0x12fc>)
 801115a:	6093      	str	r3, [r2, #8]
    concat_150_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 801115c:	4b10      	ldr	r3, [pc, #64]	; (80111a0 <face_detection_configure_activations+0x12ac>)
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	4a23      	ldr	r2, [pc, #140]	; (80111f0 <face_detection_configure_activations+0x12fc>)
 8011162:	60d3      	str	r3, [r2, #12]
    
    conversion_151_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 38300);
 8011164:	4b0e      	ldr	r3, [pc, #56]	; (80111a0 <face_detection_configure_activations+0x12ac>)
 8011166:	681a      	ldr	r2, [r3, #0]
 8011168:	f249 539c 	movw	r3, #38300	; 0x959c
 801116c:	4413      	add	r3, r2
 801116e:	4a21      	ldr	r2, [pc, #132]	; (80111f4 <face_detection_configure_activations+0x1300>)
 8011170:	6093      	str	r3, [r2, #8]
    conversion_151_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 38300);
 8011172:	4b0b      	ldr	r3, [pc, #44]	; (80111a0 <face_detection_configure_activations+0x12ac>)
 8011174:	681a      	ldr	r2, [r3, #0]
 8011176:	f249 539c 	movw	r3, #38300	; 0x959c
 801117a:	4413      	add	r3, r2
 801117c:	4a1d      	ldr	r2, [pc, #116]	; (80111f4 <face_detection_configure_activations+0x1300>)
 801117e:	60d3      	str	r3, [r2, #12]
    
    return true;
 8011180:	2301      	movs	r3, #1
 8011182:	e005      	b.n	8011190 <face_detection_configure_activations+0x129c>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8011184:	2213      	movs	r2, #19
 8011186:	2130      	movs	r1, #48	; 0x30
 8011188:	6878      	ldr	r0, [r7, #4]
 801118a:	f001 fc09 	bl	80129a0 <ai_platform_network_set_error>
  return false;
 801118e:	2300      	movs	r3, #0
}
 8011190:	4618      	mov	r0, r3
 8011192:	3708      	adds	r7, #8
 8011194:	46bd      	mov	sp, r7
 8011196:	bd80      	pop	{r7, pc}
 8011198:	00012380 	.word	0x00012380
 801119c:	240003f8 	.word	0x240003f8
 80111a0:	2405ded0 	.word	0x2405ded0
 80111a4:	24000ca8 	.word	0x24000ca8
 80111a8:	24000cb8 	.word	0x24000cb8
 80111ac:	24000428 	.word	0x24000428
 80111b0:	24000cd8 	.word	0x24000cd8
 80111b4:	24000448 	.word	0x24000448
 80111b8:	00012ec0 	.word	0x00012ec0
 80111bc:	24000ce8 	.word	0x24000ce8
 80111c0:	24000d08 	.word	0x24000d08
 80111c4:	24000d18 	.word	0x24000d18
 80111c8:	24000468 	.word	0x24000468
 80111cc:	24000d38 	.word	0x24000d38
 80111d0:	24000d48 	.word	0x24000d48
 80111d4:	24000d68 	.word	0x24000d68
 80111d8:	24000d78 	.word	0x24000d78
 80111dc:	24000d98 	.word	0x24000d98
 80111e0:	24000da8 	.word	0x24000da8
 80111e4:	24000488 	.word	0x24000488
 80111e8:	24000dc8 	.word	0x24000dc8
 80111ec:	24000dd8 	.word	0x24000dd8
 80111f0:	24000df8 	.word	0x24000df8
 80111f4:	24000e08 	.word	0x24000e08

080111f8 <face_detection_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool face_detection_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b082      	sub	sp, #8
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]
 8011200:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_face_detection_weights_map, 1, params)) {
 8011202:	683a      	ldr	r2, [r7, #0]
 8011204:	2101      	movs	r1, #1
 8011206:	4898      	ldr	r0, [pc, #608]	; (8011468 <face_detection_configure_weights+0x270>)
 8011208:	f001 f9f4 	bl	80125f4 <ai_platform_get_weights_map>
 801120c:	4603      	mov	r3, r0
 801120e:	2b00      	cmp	r3, #0
 8011210:	f001 8050 	beq.w	80122b4 <face_detection_configure_weights+0x10bc>
    /* Updating weights (byte) offsets */
    
    conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 8011214:	4b95      	ldr	r3, [pc, #596]	; (801146c <face_detection_configure_weights+0x274>)
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801121c:	4a93      	ldr	r2, [pc, #588]	; (801146c <face_detection_configure_weights+0x274>)
 801121e:	6013      	str	r3, [r2, #0]
    conv2d_6_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 0);
 8011220:	4b91      	ldr	r3, [pc, #580]	; (8011468 <face_detection_configure_weights+0x270>)
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	4a91      	ldr	r2, [pc, #580]	; (801146c <face_detection_configure_weights+0x274>)
 8011226:	6093      	str	r3, [r2, #8]
    conv2d_6_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 0);
 8011228:	4b8f      	ldr	r3, [pc, #572]	; (8011468 <face_detection_configure_weights+0x270>)
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	4a8f      	ldr	r2, [pc, #572]	; (801146c <face_detection_configure_weights+0x274>)
 801122e:	60d3      	str	r3, [r2, #12]
    
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8011230:	4b8f      	ldr	r3, [pc, #572]	; (8011470 <face_detection_configure_weights+0x278>)
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011238:	4a8d      	ldr	r2, [pc, #564]	; (8011470 <face_detection_configure_weights+0x278>)
 801123a:	6013      	str	r3, [r2, #0]
    conv2d_7_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 128);
 801123c:	4b8a      	ldr	r3, [pc, #552]	; (8011468 <face_detection_configure_weights+0x270>)
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	3380      	adds	r3, #128	; 0x80
 8011242:	4a8b      	ldr	r2, [pc, #556]	; (8011470 <face_detection_configure_weights+0x278>)
 8011244:	6093      	str	r3, [r2, #8]
    conv2d_7_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 128);
 8011246:	4b88      	ldr	r3, [pc, #544]	; (8011468 <face_detection_configure_weights+0x270>)
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	3380      	adds	r3, #128	; 0x80
 801124c:	4a88      	ldr	r2, [pc, #544]	; (8011470 <face_detection_configure_weights+0x278>)
 801124e:	60d3      	str	r3, [r2, #12]
    
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8011250:	4b88      	ldr	r3, [pc, #544]	; (8011474 <face_detection_configure_weights+0x27c>)
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011258:	4a86      	ldr	r2, [pc, #536]	; (8011474 <face_detection_configure_weights+0x27c>)
 801125a:	6013      	str	r3, [r2, #0]
    conv2d_7_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 416);
 801125c:	4b82      	ldr	r3, [pc, #520]	; (8011468 <face_detection_configure_weights+0x270>)
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8011264:	4a83      	ldr	r2, [pc, #524]	; (8011474 <face_detection_configure_weights+0x27c>)
 8011266:	6093      	str	r3, [r2, #8]
    conv2d_7_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 416);
 8011268:	4b7f      	ldr	r3, [pc, #508]	; (8011468 <face_detection_configure_weights+0x270>)
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8011270:	4a80      	ldr	r2, [pc, #512]	; (8011474 <face_detection_configure_weights+0x27c>)
 8011272:	60d3      	str	r3, [r2, #12]
    
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 8011274:	4b80      	ldr	r3, [pc, #512]	; (8011478 <face_detection_configure_weights+0x280>)
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801127c:	4a7e      	ldr	r2, [pc, #504]	; (8011478 <face_detection_configure_weights+0x280>)
 801127e:	6013      	str	r3, [r2, #0]
    conv2d_8_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 544);
 8011280:	4b79      	ldr	r3, [pc, #484]	; (8011468 <face_detection_configure_weights+0x270>)
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8011288:	4a7b      	ldr	r2, [pc, #492]	; (8011478 <face_detection_configure_weights+0x280>)
 801128a:	6093      	str	r3, [r2, #8]
    conv2d_8_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 544);
 801128c:	4b76      	ldr	r3, [pc, #472]	; (8011468 <face_detection_configure_weights+0x270>)
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8011294:	4a78      	ldr	r2, [pc, #480]	; (8011478 <face_detection_configure_weights+0x280>)
 8011296:	60d3      	str	r3, [r2, #12]
    
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 8011298:	4b78      	ldr	r3, [pc, #480]	; (801147c <face_detection_configure_weights+0x284>)
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80112a0:	4a76      	ldr	r2, [pc, #472]	; (801147c <face_detection_configure_weights+0x284>)
 80112a2:	6013      	str	r3, [r2, #0]
    conv2d_8_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 1568);
 80112a4:	4b70      	ldr	r3, [pc, #448]	; (8011468 <face_detection_configure_weights+0x270>)
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 80112ac:	4a73      	ldr	r2, [pc, #460]	; (801147c <face_detection_configure_weights+0x284>)
 80112ae:	6093      	str	r3, [r2, #8]
    conv2d_8_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 1568);
 80112b0:	4b6d      	ldr	r3, [pc, #436]	; (8011468 <face_detection_configure_weights+0x270>)
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 80112b8:	4a70      	ldr	r2, [pc, #448]	; (801147c <face_detection_configure_weights+0x284>)
 80112ba:	60d3      	str	r3, [r2, #12]
    
    conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 80112bc:	4b70      	ldr	r3, [pc, #448]	; (8011480 <face_detection_configure_weights+0x288>)
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80112c4:	4a6e      	ldr	r2, [pc, #440]	; (8011480 <face_detection_configure_weights+0x288>)
 80112c6:	6013      	str	r3, [r2, #0]
    conv2d_10_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 1696);
 80112c8:	4b67      	ldr	r3, [pc, #412]	; (8011468 <face_detection_configure_weights+0x270>)
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 80112d0:	4a6b      	ldr	r2, [pc, #428]	; (8011480 <face_detection_configure_weights+0x288>)
 80112d2:	6093      	str	r3, [r2, #8]
    conv2d_10_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 1696);
 80112d4:	4b64      	ldr	r3, [pc, #400]	; (8011468 <face_detection_configure_weights+0x270>)
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 80112dc:	4a68      	ldr	r2, [pc, #416]	; (8011480 <face_detection_configure_weights+0x288>)
 80112de:	60d3      	str	r3, [r2, #12]
    
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 80112e0:	4b68      	ldr	r3, [pc, #416]	; (8011484 <face_detection_configure_weights+0x28c>)
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80112e8:	4a66      	ldr	r2, [pc, #408]	; (8011484 <face_detection_configure_weights+0x28c>)
 80112ea:	6013      	str	r3, [r2, #0]
    conv2d_10_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 1984);
 80112ec:	4b5e      	ldr	r3, [pc, #376]	; (8011468 <face_detection_configure_weights+0x270>)
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 80112f4:	4a63      	ldr	r2, [pc, #396]	; (8011484 <face_detection_configure_weights+0x28c>)
 80112f6:	6093      	str	r3, [r2, #8]
    conv2d_10_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 1984);
 80112f8:	4b5b      	ldr	r3, [pc, #364]	; (8011468 <face_detection_configure_weights+0x270>)
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8011300:	4a60      	ldr	r2, [pc, #384]	; (8011484 <face_detection_configure_weights+0x28c>)
 8011302:	60d3      	str	r3, [r2, #12]
    
    conv2d_11_weights_array.format |= AI_FMT_FLAG_CONST;
 8011304:	4b60      	ldr	r3, [pc, #384]	; (8011488 <face_detection_configure_weights+0x290>)
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801130c:	4a5e      	ldr	r2, [pc, #376]	; (8011488 <face_detection_configure_weights+0x290>)
 801130e:	6013      	str	r3, [r2, #0]
    conv2d_11_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 2112);
 8011310:	4b55      	ldr	r3, [pc, #340]	; (8011468 <face_detection_configure_weights+0x270>)
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8011318:	4a5b      	ldr	r2, [pc, #364]	; (8011488 <face_detection_configure_weights+0x290>)
 801131a:	6093      	str	r3, [r2, #8]
    conv2d_11_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 2112);
 801131c:	4b52      	ldr	r3, [pc, #328]	; (8011468 <face_detection_configure_weights+0x270>)
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8011324:	4a58      	ldr	r2, [pc, #352]	; (8011488 <face_detection_configure_weights+0x290>)
 8011326:	60d3      	str	r3, [r2, #12]
    
    conv2d_11_bias_array.format |= AI_FMT_FLAG_CONST;
 8011328:	4b58      	ldr	r3, [pc, #352]	; (801148c <face_detection_configure_weights+0x294>)
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011330:	4a56      	ldr	r2, [pc, #344]	; (801148c <face_detection_configure_weights+0x294>)
 8011332:	6013      	str	r3, [r2, #0]
    conv2d_11_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 4160);
 8011334:	4b4c      	ldr	r3, [pc, #304]	; (8011468 <face_detection_configure_weights+0x270>)
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801133c:	4a53      	ldr	r2, [pc, #332]	; (801148c <face_detection_configure_weights+0x294>)
 801133e:	6093      	str	r3, [r2, #8]
    conv2d_11_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 4160);
 8011340:	4b49      	ldr	r3, [pc, #292]	; (8011468 <face_detection_configure_weights+0x270>)
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8011348:	4a50      	ldr	r2, [pc, #320]	; (801148c <face_detection_configure_weights+0x294>)
 801134a:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_weights_array.format |= AI_FMT_FLAG_CONST;
 801134c:	4b50      	ldr	r3, [pc, #320]	; (8011490 <face_detection_configure_weights+0x298>)
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011354:	4a4e      	ldr	r2, [pc, #312]	; (8011490 <face_detection_configure_weights+0x298>)
 8011356:	6013      	str	r3, [r2, #0]
    conv2d_12_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 4416);
 8011358:	4b43      	ldr	r3, [pc, #268]	; (8011468 <face_detection_configure_weights+0x270>)
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8011360:	4a4b      	ldr	r2, [pc, #300]	; (8011490 <face_detection_configure_weights+0x298>)
 8011362:	6093      	str	r3, [r2, #8]
    conv2d_12_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 4416);
 8011364:	4b40      	ldr	r3, [pc, #256]	; (8011468 <face_detection_configure_weights+0x270>)
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801136c:	4a48      	ldr	r2, [pc, #288]	; (8011490 <face_detection_configure_weights+0x298>)
 801136e:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_bias_array.format |= AI_FMT_FLAG_CONST;
 8011370:	4b48      	ldr	r3, [pc, #288]	; (8011494 <face_detection_configure_weights+0x29c>)
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011378:	4a46      	ldr	r2, [pc, #280]	; (8011494 <face_detection_configure_weights+0x29c>)
 801137a:	6013      	str	r3, [r2, #0]
    conv2d_12_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 4992);
 801137c:	4b3a      	ldr	r3, [pc, #232]	; (8011468 <face_detection_configure_weights+0x270>)
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8011384:	4a43      	ldr	r2, [pc, #268]	; (8011494 <face_detection_configure_weights+0x29c>)
 8011386:	6093      	str	r3, [r2, #8]
    conv2d_12_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 4992);
 8011388:	4b37      	ldr	r3, [pc, #220]	; (8011468 <face_detection_configure_weights+0x270>)
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8011390:	4a40      	ldr	r2, [pc, #256]	; (8011494 <face_detection_configure_weights+0x29c>)
 8011392:	60d3      	str	r3, [r2, #12]
    
    conv2d_13_weights_array.format |= AI_FMT_FLAG_CONST;
 8011394:	4b40      	ldr	r3, [pc, #256]	; (8011498 <face_detection_configure_weights+0x2a0>)
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801139c:	4a3e      	ldr	r2, [pc, #248]	; (8011498 <face_detection_configure_weights+0x2a0>)
 801139e:	6013      	str	r3, [r2, #0]
    conv2d_13_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 5248);
 80113a0:	4b31      	ldr	r3, [pc, #196]	; (8011468 <face_detection_configure_weights+0x270>)
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 80113a8:	4a3b      	ldr	r2, [pc, #236]	; (8011498 <face_detection_configure_weights+0x2a0>)
 80113aa:	6093      	str	r3, [r2, #8]
    conv2d_13_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 5248);
 80113ac:	4b2e      	ldr	r3, [pc, #184]	; (8011468 <face_detection_configure_weights+0x270>)
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 80113b4:	4a38      	ldr	r2, [pc, #224]	; (8011498 <face_detection_configure_weights+0x2a0>)
 80113b6:	60d3      	str	r3, [r2, #12]
    
    conv2d_13_bias_array.format |= AI_FMT_FLAG_CONST;
 80113b8:	4b38      	ldr	r3, [pc, #224]	; (801149c <face_detection_configure_weights+0x2a4>)
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80113c0:	4a36      	ldr	r2, [pc, #216]	; (801149c <face_detection_configure_weights+0x2a4>)
 80113c2:	6013      	str	r3, [r2, #0]
    conv2d_13_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 9344);
 80113c4:	4b28      	ldr	r3, [pc, #160]	; (8011468 <face_detection_configure_weights+0x270>)
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	f503 5312 	add.w	r3, r3, #9344	; 0x2480
 80113cc:	4a33      	ldr	r2, [pc, #204]	; (801149c <face_detection_configure_weights+0x2a4>)
 80113ce:	6093      	str	r3, [r2, #8]
    conv2d_13_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 9344);
 80113d0:	4b25      	ldr	r3, [pc, #148]	; (8011468 <face_detection_configure_weights+0x270>)
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	f503 5312 	add.w	r3, r3, #9344	; 0x2480
 80113d8:	4a30      	ldr	r2, [pc, #192]	; (801149c <face_detection_configure_weights+0x2a4>)
 80113da:	60d3      	str	r3, [r2, #12]
    
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
 80113dc:	4b30      	ldr	r3, [pc, #192]	; (80114a0 <face_detection_configure_weights+0x2a8>)
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80113e4:	4a2e      	ldr	r2, [pc, #184]	; (80114a0 <face_detection_configure_weights+0x2a8>)
 80113e6:	6013      	str	r3, [r2, #0]
    conv2d_16_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 9600);
 80113e8:	4b1f      	ldr	r3, [pc, #124]	; (8011468 <face_detection_configure_weights+0x270>)
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	f503 5316 	add.w	r3, r3, #9600	; 0x2580
 80113f0:	4a2b      	ldr	r2, [pc, #172]	; (80114a0 <face_detection_configure_weights+0x2a8>)
 80113f2:	6093      	str	r3, [r2, #8]
    conv2d_16_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 9600);
 80113f4:	4b1c      	ldr	r3, [pc, #112]	; (8011468 <face_detection_configure_weights+0x270>)
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	f503 5316 	add.w	r3, r3, #9600	; 0x2580
 80113fc:	4a28      	ldr	r2, [pc, #160]	; (80114a0 <face_detection_configure_weights+0x2a8>)
 80113fe:	60d3      	str	r3, [r2, #12]
    
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
 8011400:	4b28      	ldr	r3, [pc, #160]	; (80114a4 <face_detection_configure_weights+0x2ac>)
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011408:	4a26      	ldr	r2, [pc, #152]	; (80114a4 <face_detection_configure_weights+0x2ac>)
 801140a:	6013      	str	r3, [r2, #0]
    conv2d_16_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 10176);
 801140c:	4b16      	ldr	r3, [pc, #88]	; (8011468 <face_detection_configure_weights+0x270>)
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	f503 531f 	add.w	r3, r3, #10176	; 0x27c0
 8011414:	4a23      	ldr	r2, [pc, #140]	; (80114a4 <face_detection_configure_weights+0x2ac>)
 8011416:	6093      	str	r3, [r2, #8]
    conv2d_16_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 10176);
 8011418:	4b13      	ldr	r3, [pc, #76]	; (8011468 <face_detection_configure_weights+0x270>)
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	f503 531f 	add.w	r3, r3, #10176	; 0x27c0
 8011420:	4a20      	ldr	r2, [pc, #128]	; (80114a4 <face_detection_configure_weights+0x2ac>)
 8011422:	60d3      	str	r3, [r2, #12]
    
    conv2d_17_weights_array.format |= AI_FMT_FLAG_CONST;
 8011424:	4b20      	ldr	r3, [pc, #128]	; (80114a8 <face_detection_configure_weights+0x2b0>)
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801142c:	4a1e      	ldr	r2, [pc, #120]	; (80114a8 <face_detection_configure_weights+0x2b0>)
 801142e:	6013      	str	r3, [r2, #0]
    conv2d_17_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 10432);
 8011430:	4b0d      	ldr	r3, [pc, #52]	; (8011468 <face_detection_configure_weights+0x270>)
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	f503 5323 	add.w	r3, r3, #10432	; 0x28c0
 8011438:	4a1b      	ldr	r2, [pc, #108]	; (80114a8 <face_detection_configure_weights+0x2b0>)
 801143a:	6093      	str	r3, [r2, #8]
    conv2d_17_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 10432);
 801143c:	4b0a      	ldr	r3, [pc, #40]	; (8011468 <face_detection_configure_weights+0x270>)
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	f503 5323 	add.w	r3, r3, #10432	; 0x28c0
 8011444:	4a18      	ldr	r2, [pc, #96]	; (80114a8 <face_detection_configure_weights+0x2b0>)
 8011446:	60d3      	str	r3, [r2, #12]
    
    conv2d_17_bias_array.format |= AI_FMT_FLAG_CONST;
 8011448:	4b18      	ldr	r3, [pc, #96]	; (80114ac <face_detection_configure_weights+0x2b4>)
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011450:	4a16      	ldr	r2, [pc, #88]	; (80114ac <face_detection_configure_weights+0x2b4>)
 8011452:	6013      	str	r3, [r2, #0]
    conv2d_17_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 18624);
 8011454:	4b04      	ldr	r3, [pc, #16]	; (8011468 <face_detection_configure_weights+0x270>)
 8011456:	681a      	ldr	r2, [r3, #0]
 8011458:	f644 03c0 	movw	r3, #18624	; 0x48c0
 801145c:	4413      	add	r3, r2
 801145e:	4a13      	ldr	r2, [pc, #76]	; (80114ac <face_detection_configure_weights+0x2b4>)
 8011460:	6093      	str	r3, [r2, #8]
    conv2d_17_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 18624);
 8011462:	4b01      	ldr	r3, [pc, #4]	; (8011468 <face_detection_configure_weights+0x270>)
 8011464:	681a      	ldr	r2, [r3, #0]
 8011466:	e023      	b.n	80114b0 <face_detection_configure_weights+0x2b8>
 8011468:	2405ded4 	.word	0x2405ded4
 801146c:	24000058 	.word	0x24000058
 8011470:	24000078 	.word	0x24000078
 8011474:	24000098 	.word	0x24000098
 8011478:	240000b8 	.word	0x240000b8
 801147c:	240000d8 	.word	0x240000d8
 8011480:	240000f8 	.word	0x240000f8
 8011484:	24000118 	.word	0x24000118
 8011488:	24000138 	.word	0x24000138
 801148c:	24000168 	.word	0x24000168
 8011490:	24000188 	.word	0x24000188
 8011494:	240001a8 	.word	0x240001a8
 8011498:	240001c8 	.word	0x240001c8
 801149c:	240001e8 	.word	0x240001e8
 80114a0:	24000208 	.word	0x24000208
 80114a4:	24000228 	.word	0x24000228
 80114a8:	24000248 	.word	0x24000248
 80114ac:	24000268 	.word	0x24000268
 80114b0:	f644 03c0 	movw	r3, #18624	; 0x48c0
 80114b4:	4413      	add	r3, r2
 80114b6:	4a99      	ldr	r2, [pc, #612]	; (801171c <face_detection_configure_weights+0x524>)
 80114b8:	60d3      	str	r3, [r2, #12]
    
    conv2d_18_weights_array.format |= AI_FMT_FLAG_CONST;
 80114ba:	4b99      	ldr	r3, [pc, #612]	; (8011720 <face_detection_configure_weights+0x528>)
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80114c2:	4a97      	ldr	r2, [pc, #604]	; (8011720 <face_detection_configure_weights+0x528>)
 80114c4:	6013      	str	r3, [r2, #0]
    conv2d_18_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 19136);
 80114c6:	4b97      	ldr	r3, [pc, #604]	; (8011724 <face_detection_configure_weights+0x52c>)
 80114c8:	681a      	ldr	r2, [r3, #0]
 80114ca:	f644 23c0 	movw	r3, #19136	; 0x4ac0
 80114ce:	4413      	add	r3, r2
 80114d0:	4a93      	ldr	r2, [pc, #588]	; (8011720 <face_detection_configure_weights+0x528>)
 80114d2:	6093      	str	r3, [r2, #8]
    conv2d_18_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 19136);
 80114d4:	4b93      	ldr	r3, [pc, #588]	; (8011724 <face_detection_configure_weights+0x52c>)
 80114d6:	681a      	ldr	r2, [r3, #0]
 80114d8:	f644 23c0 	movw	r3, #19136	; 0x4ac0
 80114dc:	4413      	add	r3, r2
 80114de:	4a90      	ldr	r2, [pc, #576]	; (8011720 <face_detection_configure_weights+0x528>)
 80114e0:	60d3      	str	r3, [r2, #12]
    
    conv2d_18_bias_array.format |= AI_FMT_FLAG_CONST;
 80114e2:	4b91      	ldr	r3, [pc, #580]	; (8011728 <face_detection_configure_weights+0x530>)
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80114ea:	4a8f      	ldr	r2, [pc, #572]	; (8011728 <face_detection_configure_weights+0x530>)
 80114ec:	6013      	str	r3, [r2, #0]
    conv2d_18_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 20288);
 80114ee:	4b8d      	ldr	r3, [pc, #564]	; (8011724 <face_detection_configure_weights+0x52c>)
 80114f0:	681a      	ldr	r2, [r3, #0]
 80114f2:	f644 7340 	movw	r3, #20288	; 0x4f40
 80114f6:	4413      	add	r3, r2
 80114f8:	4a8b      	ldr	r2, [pc, #556]	; (8011728 <face_detection_configure_weights+0x530>)
 80114fa:	6093      	str	r3, [r2, #8]
    conv2d_18_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 20288);
 80114fc:	4b89      	ldr	r3, [pc, #548]	; (8011724 <face_detection_configure_weights+0x52c>)
 80114fe:	681a      	ldr	r2, [r3, #0]
 8011500:	f644 7340 	movw	r3, #20288	; 0x4f40
 8011504:	4413      	add	r3, r2
 8011506:	4a88      	ldr	r2, [pc, #544]	; (8011728 <face_detection_configure_weights+0x530>)
 8011508:	60d3      	str	r3, [r2, #12]
    
    conv2d_19_weights_array.format |= AI_FMT_FLAG_CONST;
 801150a:	4b88      	ldr	r3, [pc, #544]	; (801172c <face_detection_configure_weights+0x534>)
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011512:	4a86      	ldr	r2, [pc, #536]	; (801172c <face_detection_configure_weights+0x534>)
 8011514:	6013      	str	r3, [r2, #0]
    conv2d_19_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 20800);
 8011516:	4b83      	ldr	r3, [pc, #524]	; (8011724 <face_detection_configure_weights+0x52c>)
 8011518:	681a      	ldr	r2, [r3, #0]
 801151a:	f245 1340 	movw	r3, #20800	; 0x5140
 801151e:	4413      	add	r3, r2
 8011520:	4a82      	ldr	r2, [pc, #520]	; (801172c <face_detection_configure_weights+0x534>)
 8011522:	6093      	str	r3, [r2, #8]
    conv2d_19_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 20800);
 8011524:	4b7f      	ldr	r3, [pc, #508]	; (8011724 <face_detection_configure_weights+0x52c>)
 8011526:	681a      	ldr	r2, [r3, #0]
 8011528:	f245 1340 	movw	r3, #20800	; 0x5140
 801152c:	4413      	add	r3, r2
 801152e:	4a7f      	ldr	r2, [pc, #508]	; (801172c <face_detection_configure_weights+0x534>)
 8011530:	60d3      	str	r3, [r2, #12]
    
    conv2d_19_bias_array.format |= AI_FMT_FLAG_CONST;
 8011532:	4b7f      	ldr	r3, [pc, #508]	; (8011730 <face_detection_configure_weights+0x538>)
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801153a:	4a7d      	ldr	r2, [pc, #500]	; (8011730 <face_detection_configure_weights+0x538>)
 801153c:	6013      	str	r3, [r2, #0]
    conv2d_19_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 37184);
 801153e:	4b79      	ldr	r3, [pc, #484]	; (8011724 <face_detection_configure_weights+0x52c>)
 8011540:	681a      	ldr	r2, [r3, #0]
 8011542:	f249 1340 	movw	r3, #37184	; 0x9140
 8011546:	4413      	add	r3, r2
 8011548:	4a79      	ldr	r2, [pc, #484]	; (8011730 <face_detection_configure_weights+0x538>)
 801154a:	6093      	str	r3, [r2, #8]
    conv2d_19_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 37184);
 801154c:	4b75      	ldr	r3, [pc, #468]	; (8011724 <face_detection_configure_weights+0x52c>)
 801154e:	681a      	ldr	r2, [r3, #0]
 8011550:	f249 1340 	movw	r3, #37184	; 0x9140
 8011554:	4413      	add	r3, r2
 8011556:	4a76      	ldr	r2, [pc, #472]	; (8011730 <face_detection_configure_weights+0x538>)
 8011558:	60d3      	str	r3, [r2, #12]
    
    conv2d_20_weights_array.format |= AI_FMT_FLAG_CONST;
 801155a:	4b76      	ldr	r3, [pc, #472]	; (8011734 <face_detection_configure_weights+0x53c>)
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011562:	4a74      	ldr	r2, [pc, #464]	; (8011734 <face_detection_configure_weights+0x53c>)
 8011564:	6013      	str	r3, [r2, #0]
    conv2d_20_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 37696);
 8011566:	4b6f      	ldr	r3, [pc, #444]	; (8011724 <face_detection_configure_weights+0x52c>)
 8011568:	681a      	ldr	r2, [r3, #0]
 801156a:	f249 3340 	movw	r3, #37696	; 0x9340
 801156e:	4413      	add	r3, r2
 8011570:	4a70      	ldr	r2, [pc, #448]	; (8011734 <face_detection_configure_weights+0x53c>)
 8011572:	6093      	str	r3, [r2, #8]
    conv2d_20_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 37696);
 8011574:	4b6b      	ldr	r3, [pc, #428]	; (8011724 <face_detection_configure_weights+0x52c>)
 8011576:	681a      	ldr	r2, [r3, #0]
 8011578:	f249 3340 	movw	r3, #37696	; 0x9340
 801157c:	4413      	add	r3, r2
 801157e:	4a6d      	ldr	r2, [pc, #436]	; (8011734 <face_detection_configure_weights+0x53c>)
 8011580:	60d3      	str	r3, [r2, #12]
    
    conv2d_20_bias_array.format |= AI_FMT_FLAG_CONST;
 8011582:	4b6d      	ldr	r3, [pc, #436]	; (8011738 <face_detection_configure_weights+0x540>)
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801158a:	4a6b      	ldr	r2, [pc, #428]	; (8011738 <face_detection_configure_weights+0x540>)
 801158c:	6013      	str	r3, [r2, #0]
    conv2d_20_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 38848);
 801158e:	4b65      	ldr	r3, [pc, #404]	; (8011724 <face_detection_configure_weights+0x52c>)
 8011590:	681a      	ldr	r2, [r3, #0]
 8011592:	f249 73c0 	movw	r3, #38848	; 0x97c0
 8011596:	4413      	add	r3, r2
 8011598:	4a67      	ldr	r2, [pc, #412]	; (8011738 <face_detection_configure_weights+0x540>)
 801159a:	6093      	str	r3, [r2, #8]
    conv2d_20_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 38848);
 801159c:	4b61      	ldr	r3, [pc, #388]	; (8011724 <face_detection_configure_weights+0x52c>)
 801159e:	681a      	ldr	r2, [r3, #0]
 80115a0:	f249 73c0 	movw	r3, #38848	; 0x97c0
 80115a4:	4413      	add	r3, r2
 80115a6:	4a64      	ldr	r2, [pc, #400]	; (8011738 <face_detection_configure_weights+0x540>)
 80115a8:	60d3      	str	r3, [r2, #12]
    
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 80115aa:	4b64      	ldr	r3, [pc, #400]	; (801173c <face_detection_configure_weights+0x544>)
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80115b2:	4a62      	ldr	r2, [pc, #392]	; (801173c <face_detection_configure_weights+0x544>)
 80115b4:	6013      	str	r3, [r2, #0]
    conv2d_21_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 39360);
 80115b6:	4b5b      	ldr	r3, [pc, #364]	; (8011724 <face_detection_configure_weights+0x52c>)
 80115b8:	681a      	ldr	r2, [r3, #0]
 80115ba:	f649 13c0 	movw	r3, #39360	; 0x99c0
 80115be:	4413      	add	r3, r2
 80115c0:	4a5e      	ldr	r2, [pc, #376]	; (801173c <face_detection_configure_weights+0x544>)
 80115c2:	6093      	str	r3, [r2, #8]
    conv2d_21_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 39360);
 80115c4:	4b57      	ldr	r3, [pc, #348]	; (8011724 <face_detection_configure_weights+0x52c>)
 80115c6:	681a      	ldr	r2, [r3, #0]
 80115c8:	f649 13c0 	movw	r3, #39360	; 0x99c0
 80115cc:	4413      	add	r3, r2
 80115ce:	4a5b      	ldr	r2, [pc, #364]	; (801173c <face_detection_configure_weights+0x544>)
 80115d0:	60d3      	str	r3, [r2, #12]
    
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 80115d2:	4b5b      	ldr	r3, [pc, #364]	; (8011740 <face_detection_configure_weights+0x548>)
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80115da:	4a59      	ldr	r2, [pc, #356]	; (8011740 <face_detection_configure_weights+0x548>)
 80115dc:	6013      	str	r3, [r2, #0]
    conv2d_21_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 55744);
 80115de:	4b51      	ldr	r3, [pc, #324]	; (8011724 <face_detection_configure_weights+0x52c>)
 80115e0:	681a      	ldr	r2, [r3, #0]
 80115e2:	f64d 13c0 	movw	r3, #55744	; 0xd9c0
 80115e6:	4413      	add	r3, r2
 80115e8:	4a55      	ldr	r2, [pc, #340]	; (8011740 <face_detection_configure_weights+0x548>)
 80115ea:	6093      	str	r3, [r2, #8]
    conv2d_21_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 55744);
 80115ec:	4b4d      	ldr	r3, [pc, #308]	; (8011724 <face_detection_configure_weights+0x52c>)
 80115ee:	681a      	ldr	r2, [r3, #0]
 80115f0:	f64d 13c0 	movw	r3, #55744	; 0xd9c0
 80115f4:	4413      	add	r3, r2
 80115f6:	4a52      	ldr	r2, [pc, #328]	; (8011740 <face_detection_configure_weights+0x548>)
 80115f8:	60d3      	str	r3, [r2, #12]
    
    conv2d_22_weights_array.format |= AI_FMT_FLAG_CONST;
 80115fa:	4b52      	ldr	r3, [pc, #328]	; (8011744 <face_detection_configure_weights+0x54c>)
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011602:	4a50      	ldr	r2, [pc, #320]	; (8011744 <face_detection_configure_weights+0x54c>)
 8011604:	6013      	str	r3, [r2, #0]
    conv2d_22_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 56256);
 8011606:	4b47      	ldr	r3, [pc, #284]	; (8011724 <face_detection_configure_weights+0x52c>)
 8011608:	681a      	ldr	r2, [r3, #0]
 801160a:	f64d 33c0 	movw	r3, #56256	; 0xdbc0
 801160e:	4413      	add	r3, r2
 8011610:	4a4c      	ldr	r2, [pc, #304]	; (8011744 <face_detection_configure_weights+0x54c>)
 8011612:	6093      	str	r3, [r2, #8]
    conv2d_22_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 56256);
 8011614:	4b43      	ldr	r3, [pc, #268]	; (8011724 <face_detection_configure_weights+0x52c>)
 8011616:	681a      	ldr	r2, [r3, #0]
 8011618:	f64d 33c0 	movw	r3, #56256	; 0xdbc0
 801161c:	4413      	add	r3, r2
 801161e:	4a49      	ldr	r2, [pc, #292]	; (8011744 <face_detection_configure_weights+0x54c>)
 8011620:	60d3      	str	r3, [r2, #12]
    
    conv2d_22_bias_array.format |= AI_FMT_FLAG_CONST;
 8011622:	4b49      	ldr	r3, [pc, #292]	; (8011748 <face_detection_configure_weights+0x550>)
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801162a:	4a47      	ldr	r2, [pc, #284]	; (8011748 <face_detection_configure_weights+0x550>)
 801162c:	6013      	str	r3, [r2, #0]
    conv2d_22_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 57408);
 801162e:	4b3d      	ldr	r3, [pc, #244]	; (8011724 <face_detection_configure_weights+0x52c>)
 8011630:	681a      	ldr	r2, [r3, #0]
 8011632:	f24e 0340 	movw	r3, #57408	; 0xe040
 8011636:	4413      	add	r3, r2
 8011638:	4a43      	ldr	r2, [pc, #268]	; (8011748 <face_detection_configure_weights+0x550>)
 801163a:	6093      	str	r3, [r2, #8]
    conv2d_22_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 57408);
 801163c:	4b39      	ldr	r3, [pc, #228]	; (8011724 <face_detection_configure_weights+0x52c>)
 801163e:	681a      	ldr	r2, [r3, #0]
 8011640:	f24e 0340 	movw	r3, #57408	; 0xe040
 8011644:	4413      	add	r3, r2
 8011646:	4a40      	ldr	r2, [pc, #256]	; (8011748 <face_detection_configure_weights+0x550>)
 8011648:	60d3      	str	r3, [r2, #12]
    
    conv2d_23_weights_array.format |= AI_FMT_FLAG_CONST;
 801164a:	4b40      	ldr	r3, [pc, #256]	; (801174c <face_detection_configure_weights+0x554>)
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011652:	4a3e      	ldr	r2, [pc, #248]	; (801174c <face_detection_configure_weights+0x554>)
 8011654:	6013      	str	r3, [r2, #0]
    conv2d_23_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 57920);
 8011656:	4b33      	ldr	r3, [pc, #204]	; (8011724 <face_detection_configure_weights+0x52c>)
 8011658:	681a      	ldr	r2, [r3, #0]
 801165a:	f24e 2340 	movw	r3, #57920	; 0xe240
 801165e:	4413      	add	r3, r2
 8011660:	4a3a      	ldr	r2, [pc, #232]	; (801174c <face_detection_configure_weights+0x554>)
 8011662:	6093      	str	r3, [r2, #8]
    conv2d_23_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 57920);
 8011664:	4b2f      	ldr	r3, [pc, #188]	; (8011724 <face_detection_configure_weights+0x52c>)
 8011666:	681a      	ldr	r2, [r3, #0]
 8011668:	f24e 2340 	movw	r3, #57920	; 0xe240
 801166c:	4413      	add	r3, r2
 801166e:	4a37      	ldr	r2, [pc, #220]	; (801174c <face_detection_configure_weights+0x554>)
 8011670:	60d3      	str	r3, [r2, #12]
    
    conv2d_23_bias_array.format |= AI_FMT_FLAG_CONST;
 8011672:	4b37      	ldr	r3, [pc, #220]	; (8011750 <face_detection_configure_weights+0x558>)
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801167a:	4a35      	ldr	r2, [pc, #212]	; (8011750 <face_detection_configure_weights+0x558>)
 801167c:	6013      	str	r3, [r2, #0]
    conv2d_23_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 74304);
 801167e:	4b29      	ldr	r3, [pc, #164]	; (8011724 <face_detection_configure_weights+0x52c>)
 8011680:	681a      	ldr	r2, [r3, #0]
 8011682:	4b34      	ldr	r3, [pc, #208]	; (8011754 <face_detection_configure_weights+0x55c>)
 8011684:	4413      	add	r3, r2
 8011686:	4a32      	ldr	r2, [pc, #200]	; (8011750 <face_detection_configure_weights+0x558>)
 8011688:	6093      	str	r3, [r2, #8]
    conv2d_23_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 74304);
 801168a:	4b26      	ldr	r3, [pc, #152]	; (8011724 <face_detection_configure_weights+0x52c>)
 801168c:	681a      	ldr	r2, [r3, #0]
 801168e:	4b31      	ldr	r3, [pc, #196]	; (8011754 <face_detection_configure_weights+0x55c>)
 8011690:	4413      	add	r3, r2
 8011692:	4a2f      	ldr	r2, [pc, #188]	; (8011750 <face_detection_configure_weights+0x558>)
 8011694:	60d3      	str	r3, [r2, #12]
    
    conv2d_24_weights_array.format |= AI_FMT_FLAG_CONST;
 8011696:	4b30      	ldr	r3, [pc, #192]	; (8011758 <face_detection_configure_weights+0x560>)
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801169e:	4a2e      	ldr	r2, [pc, #184]	; (8011758 <face_detection_configure_weights+0x560>)
 80116a0:	6013      	str	r3, [r2, #0]
    conv2d_24_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 74816);
 80116a2:	4b20      	ldr	r3, [pc, #128]	; (8011724 <face_detection_configure_weights+0x52c>)
 80116a4:	681a      	ldr	r2, [r3, #0]
 80116a6:	4b2d      	ldr	r3, [pc, #180]	; (801175c <face_detection_configure_weights+0x564>)
 80116a8:	4413      	add	r3, r2
 80116aa:	4a2b      	ldr	r2, [pc, #172]	; (8011758 <face_detection_configure_weights+0x560>)
 80116ac:	6093      	str	r3, [r2, #8]
    conv2d_24_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 74816);
 80116ae:	4b1d      	ldr	r3, [pc, #116]	; (8011724 <face_detection_configure_weights+0x52c>)
 80116b0:	681a      	ldr	r2, [r3, #0]
 80116b2:	4b2a      	ldr	r3, [pc, #168]	; (801175c <face_detection_configure_weights+0x564>)
 80116b4:	4413      	add	r3, r2
 80116b6:	4a28      	ldr	r2, [pc, #160]	; (8011758 <face_detection_configure_weights+0x560>)
 80116b8:	60d3      	str	r3, [r2, #12]
    
    conv2d_24_bias_array.format |= AI_FMT_FLAG_CONST;
 80116ba:	4b29      	ldr	r3, [pc, #164]	; (8011760 <face_detection_configure_weights+0x568>)
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80116c2:	4a27      	ldr	r2, [pc, #156]	; (8011760 <face_detection_configure_weights+0x568>)
 80116c4:	6013      	str	r3, [r2, #0]
    conv2d_24_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 75968);
 80116c6:	4b17      	ldr	r3, [pc, #92]	; (8011724 <face_detection_configure_weights+0x52c>)
 80116c8:	681a      	ldr	r2, [r3, #0]
 80116ca:	4b26      	ldr	r3, [pc, #152]	; (8011764 <face_detection_configure_weights+0x56c>)
 80116cc:	4413      	add	r3, r2
 80116ce:	4a24      	ldr	r2, [pc, #144]	; (8011760 <face_detection_configure_weights+0x568>)
 80116d0:	6093      	str	r3, [r2, #8]
    conv2d_24_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 75968);
 80116d2:	4b14      	ldr	r3, [pc, #80]	; (8011724 <face_detection_configure_weights+0x52c>)
 80116d4:	681a      	ldr	r2, [r3, #0]
 80116d6:	4b23      	ldr	r3, [pc, #140]	; (8011764 <face_detection_configure_weights+0x56c>)
 80116d8:	4413      	add	r3, r2
 80116da:	4a21      	ldr	r2, [pc, #132]	; (8011760 <face_detection_configure_weights+0x568>)
 80116dc:	60d3      	str	r3, [r2, #12]
    
    conv2d_25_weights_array.format |= AI_FMT_FLAG_CONST;
 80116de:	4b22      	ldr	r3, [pc, #136]	; (8011768 <face_detection_configure_weights+0x570>)
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80116e6:	4a20      	ldr	r2, [pc, #128]	; (8011768 <face_detection_configure_weights+0x570>)
 80116e8:	6013      	str	r3, [r2, #0]
    conv2d_25_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 76480);
 80116ea:	4b0e      	ldr	r3, [pc, #56]	; (8011724 <face_detection_configure_weights+0x52c>)
 80116ec:	681a      	ldr	r2, [r3, #0]
 80116ee:	4b1f      	ldr	r3, [pc, #124]	; (801176c <face_detection_configure_weights+0x574>)
 80116f0:	4413      	add	r3, r2
 80116f2:	4a1d      	ldr	r2, [pc, #116]	; (8011768 <face_detection_configure_weights+0x570>)
 80116f4:	6093      	str	r3, [r2, #8]
    conv2d_25_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 76480);
 80116f6:	4b0b      	ldr	r3, [pc, #44]	; (8011724 <face_detection_configure_weights+0x52c>)
 80116f8:	681a      	ldr	r2, [r3, #0]
 80116fa:	4b1c      	ldr	r3, [pc, #112]	; (801176c <face_detection_configure_weights+0x574>)
 80116fc:	4413      	add	r3, r2
 80116fe:	4a1a      	ldr	r2, [pc, #104]	; (8011768 <face_detection_configure_weights+0x570>)
 8011700:	60d3      	str	r3, [r2, #12]
    
    conv2d_25_bias_array.format |= AI_FMT_FLAG_CONST;
 8011702:	4b1b      	ldr	r3, [pc, #108]	; (8011770 <face_detection_configure_weights+0x578>)
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801170a:	4a19      	ldr	r2, [pc, #100]	; (8011770 <face_detection_configure_weights+0x578>)
 801170c:	6013      	str	r3, [r2, #0]
    conv2d_25_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 92864);
 801170e:	4b05      	ldr	r3, [pc, #20]	; (8011724 <face_detection_configure_weights+0x52c>)
 8011710:	681a      	ldr	r2, [r3, #0]
 8011712:	4b18      	ldr	r3, [pc, #96]	; (8011774 <face_detection_configure_weights+0x57c>)
 8011714:	4413      	add	r3, r2
 8011716:	4a16      	ldr	r2, [pc, #88]	; (8011770 <face_detection_configure_weights+0x578>)
 8011718:	6093      	str	r3, [r2, #8]
 801171a:	e02d      	b.n	8011778 <face_detection_configure_weights+0x580>
 801171c:	24000268 	.word	0x24000268
 8011720:	24000288 	.word	0x24000288
 8011724:	2405ded4 	.word	0x2405ded4
 8011728:	240002a8 	.word	0x240002a8
 801172c:	240002c8 	.word	0x240002c8
 8011730:	240002e8 	.word	0x240002e8
 8011734:	240002f8 	.word	0x240002f8
 8011738:	24000318 	.word	0x24000318
 801173c:	24000338 	.word	0x24000338
 8011740:	24000358 	.word	0x24000358
 8011744:	24000378 	.word	0x24000378
 8011748:	24000388 	.word	0x24000388
 801174c:	240003a8 	.word	0x240003a8
 8011750:	240003c8 	.word	0x240003c8
 8011754:	00012240 	.word	0x00012240
 8011758:	240003e8 	.word	0x240003e8
 801175c:	00012440 	.word	0x00012440
 8011760:	24000408 	.word	0x24000408
 8011764:	000128c0 	.word	0x000128c0
 8011768:	24000418 	.word	0x24000418
 801176c:	00012ac0 	.word	0x00012ac0
 8011770:	24000438 	.word	0x24000438
 8011774:	00016ac0 	.word	0x00016ac0
    conv2d_25_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 92864);
 8011778:	4b8e      	ldr	r3, [pc, #568]	; (80119b4 <face_detection_configure_weights+0x7bc>)
 801177a:	681a      	ldr	r2, [r3, #0]
 801177c:	4b8e      	ldr	r3, [pc, #568]	; (80119b8 <face_detection_configure_weights+0x7c0>)
 801177e:	4413      	add	r3, r2
 8011780:	4a8e      	ldr	r2, [pc, #568]	; (80119bc <face_detection_configure_weights+0x7c4>)
 8011782:	60d3      	str	r3, [r2, #12]
    
    conv2d_26_weights_array.format |= AI_FMT_FLAG_CONST;
 8011784:	4b8e      	ldr	r3, [pc, #568]	; (80119c0 <face_detection_configure_weights+0x7c8>)
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801178c:	4a8c      	ldr	r2, [pc, #560]	; (80119c0 <face_detection_configure_weights+0x7c8>)
 801178e:	6013      	str	r3, [r2, #0]
    conv2d_26_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 93376);
 8011790:	4b88      	ldr	r3, [pc, #544]	; (80119b4 <face_detection_configure_weights+0x7bc>)
 8011792:	681a      	ldr	r2, [r3, #0]
 8011794:	4b8b      	ldr	r3, [pc, #556]	; (80119c4 <face_detection_configure_weights+0x7cc>)
 8011796:	4413      	add	r3, r2
 8011798:	4a89      	ldr	r2, [pc, #548]	; (80119c0 <face_detection_configure_weights+0x7c8>)
 801179a:	6093      	str	r3, [r2, #8]
    conv2d_26_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 93376);
 801179c:	4b85      	ldr	r3, [pc, #532]	; (80119b4 <face_detection_configure_weights+0x7bc>)
 801179e:	681a      	ldr	r2, [r3, #0]
 80117a0:	4b88      	ldr	r3, [pc, #544]	; (80119c4 <face_detection_configure_weights+0x7cc>)
 80117a2:	4413      	add	r3, r2
 80117a4:	4a86      	ldr	r2, [pc, #536]	; (80119c0 <face_detection_configure_weights+0x7c8>)
 80117a6:	60d3      	str	r3, [r2, #12]
    
    conv2d_26_bias_array.format |= AI_FMT_FLAG_CONST;
 80117a8:	4b87      	ldr	r3, [pc, #540]	; (80119c8 <face_detection_configure_weights+0x7d0>)
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80117b0:	4a85      	ldr	r2, [pc, #532]	; (80119c8 <face_detection_configure_weights+0x7d0>)
 80117b2:	6013      	str	r3, [r2, #0]
    conv2d_26_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 94528);
 80117b4:	4b7f      	ldr	r3, [pc, #508]	; (80119b4 <face_detection_configure_weights+0x7bc>)
 80117b6:	681a      	ldr	r2, [r3, #0]
 80117b8:	4b84      	ldr	r3, [pc, #528]	; (80119cc <face_detection_configure_weights+0x7d4>)
 80117ba:	4413      	add	r3, r2
 80117bc:	4a82      	ldr	r2, [pc, #520]	; (80119c8 <face_detection_configure_weights+0x7d0>)
 80117be:	6093      	str	r3, [r2, #8]
    conv2d_26_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 94528);
 80117c0:	4b7c      	ldr	r3, [pc, #496]	; (80119b4 <face_detection_configure_weights+0x7bc>)
 80117c2:	681a      	ldr	r2, [r3, #0]
 80117c4:	4b81      	ldr	r3, [pc, #516]	; (80119cc <face_detection_configure_weights+0x7d4>)
 80117c6:	4413      	add	r3, r2
 80117c8:	4a7f      	ldr	r2, [pc, #508]	; (80119c8 <face_detection_configure_weights+0x7d0>)
 80117ca:	60d3      	str	r3, [r2, #12]
    
    conv2d_27_weights_array.format |= AI_FMT_FLAG_CONST;
 80117cc:	4b80      	ldr	r3, [pc, #512]	; (80119d0 <face_detection_configure_weights+0x7d8>)
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80117d4:	4a7e      	ldr	r2, [pc, #504]	; (80119d0 <face_detection_configure_weights+0x7d8>)
 80117d6:	6013      	str	r3, [r2, #0]
    conv2d_27_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 95040);
 80117d8:	4b76      	ldr	r3, [pc, #472]	; (80119b4 <face_detection_configure_weights+0x7bc>)
 80117da:	681a      	ldr	r2, [r3, #0]
 80117dc:	4b7d      	ldr	r3, [pc, #500]	; (80119d4 <face_detection_configure_weights+0x7dc>)
 80117de:	4413      	add	r3, r2
 80117e0:	4a7b      	ldr	r2, [pc, #492]	; (80119d0 <face_detection_configure_weights+0x7d8>)
 80117e2:	6093      	str	r3, [r2, #8]
    conv2d_27_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 95040);
 80117e4:	4b73      	ldr	r3, [pc, #460]	; (80119b4 <face_detection_configure_weights+0x7bc>)
 80117e6:	681a      	ldr	r2, [r3, #0]
 80117e8:	4b7a      	ldr	r3, [pc, #488]	; (80119d4 <face_detection_configure_weights+0x7dc>)
 80117ea:	4413      	add	r3, r2
 80117ec:	4a78      	ldr	r2, [pc, #480]	; (80119d0 <face_detection_configure_weights+0x7d8>)
 80117ee:	60d3      	str	r3, [r2, #12]
    
    conv2d_27_bias_array.format |= AI_FMT_FLAG_CONST;
 80117f0:	4b79      	ldr	r3, [pc, #484]	; (80119d8 <face_detection_configure_weights+0x7e0>)
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80117f8:	4a77      	ldr	r2, [pc, #476]	; (80119d8 <face_detection_configure_weights+0x7e0>)
 80117fa:	6013      	str	r3, [r2, #0]
    conv2d_27_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 111424);
 80117fc:	4b6d      	ldr	r3, [pc, #436]	; (80119b4 <face_detection_configure_weights+0x7bc>)
 80117fe:	681a      	ldr	r2, [r3, #0]
 8011800:	4b76      	ldr	r3, [pc, #472]	; (80119dc <face_detection_configure_weights+0x7e4>)
 8011802:	4413      	add	r3, r2
 8011804:	4a74      	ldr	r2, [pc, #464]	; (80119d8 <face_detection_configure_weights+0x7e0>)
 8011806:	6093      	str	r3, [r2, #8]
    conv2d_27_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 111424);
 8011808:	4b6a      	ldr	r3, [pc, #424]	; (80119b4 <face_detection_configure_weights+0x7bc>)
 801180a:	681a      	ldr	r2, [r3, #0]
 801180c:	4b73      	ldr	r3, [pc, #460]	; (80119dc <face_detection_configure_weights+0x7e4>)
 801180e:	4413      	add	r3, r2
 8011810:	4a71      	ldr	r2, [pc, #452]	; (80119d8 <face_detection_configure_weights+0x7e0>)
 8011812:	60d3      	str	r3, [r2, #12]
    
    conv2d_30_weights_array.format |= AI_FMT_FLAG_CONST;
 8011814:	4b72      	ldr	r3, [pc, #456]	; (80119e0 <face_detection_configure_weights+0x7e8>)
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801181c:	4a70      	ldr	r2, [pc, #448]	; (80119e0 <face_detection_configure_weights+0x7e8>)
 801181e:	6013      	str	r3, [r2, #0]
    conv2d_30_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 111936);
 8011820:	4b64      	ldr	r3, [pc, #400]	; (80119b4 <face_detection_configure_weights+0x7bc>)
 8011822:	681a      	ldr	r2, [r3, #0]
 8011824:	4b6f      	ldr	r3, [pc, #444]	; (80119e4 <face_detection_configure_weights+0x7ec>)
 8011826:	4413      	add	r3, r2
 8011828:	4a6d      	ldr	r2, [pc, #436]	; (80119e0 <face_detection_configure_weights+0x7e8>)
 801182a:	6093      	str	r3, [r2, #8]
    conv2d_30_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 111936);
 801182c:	4b61      	ldr	r3, [pc, #388]	; (80119b4 <face_detection_configure_weights+0x7bc>)
 801182e:	681a      	ldr	r2, [r3, #0]
 8011830:	4b6c      	ldr	r3, [pc, #432]	; (80119e4 <face_detection_configure_weights+0x7ec>)
 8011832:	4413      	add	r3, r2
 8011834:	4a6a      	ldr	r2, [pc, #424]	; (80119e0 <face_detection_configure_weights+0x7e8>)
 8011836:	60d3      	str	r3, [r2, #12]
    
    conv2d_30_bias_array.format |= AI_FMT_FLAG_CONST;
 8011838:	4b6b      	ldr	r3, [pc, #428]	; (80119e8 <face_detection_configure_weights+0x7f0>)
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011840:	4a69      	ldr	r2, [pc, #420]	; (80119e8 <face_detection_configure_weights+0x7f0>)
 8011842:	6013      	str	r3, [r2, #0]
    conv2d_30_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 113088);
 8011844:	4b5b      	ldr	r3, [pc, #364]	; (80119b4 <face_detection_configure_weights+0x7bc>)
 8011846:	681a      	ldr	r2, [r3, #0]
 8011848:	4b68      	ldr	r3, [pc, #416]	; (80119ec <face_detection_configure_weights+0x7f4>)
 801184a:	4413      	add	r3, r2
 801184c:	4a66      	ldr	r2, [pc, #408]	; (80119e8 <face_detection_configure_weights+0x7f0>)
 801184e:	6093      	str	r3, [r2, #8]
    conv2d_30_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 113088);
 8011850:	4b58      	ldr	r3, [pc, #352]	; (80119b4 <face_detection_configure_weights+0x7bc>)
 8011852:	681a      	ldr	r2, [r3, #0]
 8011854:	4b65      	ldr	r3, [pc, #404]	; (80119ec <face_detection_configure_weights+0x7f4>)
 8011856:	4413      	add	r3, r2
 8011858:	4a63      	ldr	r2, [pc, #396]	; (80119e8 <face_detection_configure_weights+0x7f0>)
 801185a:	60d3      	str	r3, [r2, #12]
    
    conv2d_31_weights_array.format |= AI_FMT_FLAG_CONST;
 801185c:	4b64      	ldr	r3, [pc, #400]	; (80119f0 <face_detection_configure_weights+0x7f8>)
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011864:	4a62      	ldr	r2, [pc, #392]	; (80119f0 <face_detection_configure_weights+0x7f8>)
 8011866:	6013      	str	r3, [r2, #0]
    conv2d_31_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 113600);
 8011868:	4b52      	ldr	r3, [pc, #328]	; (80119b4 <face_detection_configure_weights+0x7bc>)
 801186a:	681a      	ldr	r2, [r3, #0]
 801186c:	4b61      	ldr	r3, [pc, #388]	; (80119f4 <face_detection_configure_weights+0x7fc>)
 801186e:	4413      	add	r3, r2
 8011870:	4a5f      	ldr	r2, [pc, #380]	; (80119f0 <face_detection_configure_weights+0x7f8>)
 8011872:	6093      	str	r3, [r2, #8]
    conv2d_31_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 113600);
 8011874:	4b4f      	ldr	r3, [pc, #316]	; (80119b4 <face_detection_configure_weights+0x7bc>)
 8011876:	681a      	ldr	r2, [r3, #0]
 8011878:	4b5e      	ldr	r3, [pc, #376]	; (80119f4 <face_detection_configure_weights+0x7fc>)
 801187a:	4413      	add	r3, r2
 801187c:	4a5c      	ldr	r2, [pc, #368]	; (80119f0 <face_detection_configure_weights+0x7f8>)
 801187e:	60d3      	str	r3, [r2, #12]
    
    conv2d_31_bias_array.format |= AI_FMT_FLAG_CONST;
 8011880:	4b5d      	ldr	r3, [pc, #372]	; (80119f8 <face_detection_configure_weights+0x800>)
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011888:	4a5b      	ldr	r2, [pc, #364]	; (80119f8 <face_detection_configure_weights+0x800>)
 801188a:	6013      	str	r3, [r2, #0]
    conv2d_31_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 146368);
 801188c:	4b49      	ldr	r3, [pc, #292]	; (80119b4 <face_detection_configure_weights+0x7bc>)
 801188e:	681a      	ldr	r2, [r3, #0]
 8011890:	4b5a      	ldr	r3, [pc, #360]	; (80119fc <face_detection_configure_weights+0x804>)
 8011892:	4413      	add	r3, r2
 8011894:	4a58      	ldr	r2, [pc, #352]	; (80119f8 <face_detection_configure_weights+0x800>)
 8011896:	6093      	str	r3, [r2, #8]
    conv2d_31_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 146368);
 8011898:	4b46      	ldr	r3, [pc, #280]	; (80119b4 <face_detection_configure_weights+0x7bc>)
 801189a:	681a      	ldr	r2, [r3, #0]
 801189c:	4b57      	ldr	r3, [pc, #348]	; (80119fc <face_detection_configure_weights+0x804>)
 801189e:	4413      	add	r3, r2
 80118a0:	4a55      	ldr	r2, [pc, #340]	; (80119f8 <face_detection_configure_weights+0x800>)
 80118a2:	60d3      	str	r3, [r2, #12]
    
    conv2d_32_weights_array.format |= AI_FMT_FLAG_CONST;
 80118a4:	4b56      	ldr	r3, [pc, #344]	; (8011a00 <face_detection_configure_weights+0x808>)
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80118ac:	4a54      	ldr	r2, [pc, #336]	; (8011a00 <face_detection_configure_weights+0x808>)
 80118ae:	6013      	str	r3, [r2, #0]
    conv2d_32_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 147392);
 80118b0:	4b40      	ldr	r3, [pc, #256]	; (80119b4 <face_detection_configure_weights+0x7bc>)
 80118b2:	681a      	ldr	r2, [r3, #0]
 80118b4:	4b53      	ldr	r3, [pc, #332]	; (8011a04 <face_detection_configure_weights+0x80c>)
 80118b6:	4413      	add	r3, r2
 80118b8:	4a51      	ldr	r2, [pc, #324]	; (8011a00 <face_detection_configure_weights+0x808>)
 80118ba:	6093      	str	r3, [r2, #8]
    conv2d_32_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 147392);
 80118bc:	4b3d      	ldr	r3, [pc, #244]	; (80119b4 <face_detection_configure_weights+0x7bc>)
 80118be:	681a      	ldr	r2, [r3, #0]
 80118c0:	4b50      	ldr	r3, [pc, #320]	; (8011a04 <face_detection_configure_weights+0x80c>)
 80118c2:	4413      	add	r3, r2
 80118c4:	4a4e      	ldr	r2, [pc, #312]	; (8011a00 <face_detection_configure_weights+0x808>)
 80118c6:	60d3      	str	r3, [r2, #12]
    
    conv2d_32_bias_array.format |= AI_FMT_FLAG_CONST;
 80118c8:	4b4f      	ldr	r3, [pc, #316]	; (8011a08 <face_detection_configure_weights+0x810>)
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80118d0:	4a4d      	ldr	r2, [pc, #308]	; (8011a08 <face_detection_configure_weights+0x810>)
 80118d2:	6013      	str	r3, [r2, #0]
    conv2d_32_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 149696);
 80118d4:	4b37      	ldr	r3, [pc, #220]	; (80119b4 <face_detection_configure_weights+0x7bc>)
 80118d6:	681a      	ldr	r2, [r3, #0]
 80118d8:	4b4c      	ldr	r3, [pc, #304]	; (8011a0c <face_detection_configure_weights+0x814>)
 80118da:	4413      	add	r3, r2
 80118dc:	4a4a      	ldr	r2, [pc, #296]	; (8011a08 <face_detection_configure_weights+0x810>)
 80118de:	6093      	str	r3, [r2, #8]
    conv2d_32_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 149696);
 80118e0:	4b34      	ldr	r3, [pc, #208]	; (80119b4 <face_detection_configure_weights+0x7bc>)
 80118e2:	681a      	ldr	r2, [r3, #0]
 80118e4:	4b49      	ldr	r3, [pc, #292]	; (8011a0c <face_detection_configure_weights+0x814>)
 80118e6:	4413      	add	r3, r2
 80118e8:	4a47      	ldr	r2, [pc, #284]	; (8011a08 <face_detection_configure_weights+0x810>)
 80118ea:	60d3      	str	r3, [r2, #12]
    
    conv2d_33_weights_array.format |= AI_FMT_FLAG_CONST;
 80118ec:	4b48      	ldr	r3, [pc, #288]	; (8011a10 <face_detection_configure_weights+0x818>)
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80118f4:	4a46      	ldr	r2, [pc, #280]	; (8011a10 <face_detection_configure_weights+0x818>)
 80118f6:	6013      	str	r3, [r2, #0]
    conv2d_33_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 150720);
 80118f8:	4b2e      	ldr	r3, [pc, #184]	; (80119b4 <face_detection_configure_weights+0x7bc>)
 80118fa:	681a      	ldr	r2, [r3, #0]
 80118fc:	4b45      	ldr	r3, [pc, #276]	; (8011a14 <face_detection_configure_weights+0x81c>)
 80118fe:	4413      	add	r3, r2
 8011900:	4a43      	ldr	r2, [pc, #268]	; (8011a10 <face_detection_configure_weights+0x818>)
 8011902:	6093      	str	r3, [r2, #8]
    conv2d_33_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 150720);
 8011904:	4b2b      	ldr	r3, [pc, #172]	; (80119b4 <face_detection_configure_weights+0x7bc>)
 8011906:	681a      	ldr	r2, [r3, #0]
 8011908:	4b42      	ldr	r3, [pc, #264]	; (8011a14 <face_detection_configure_weights+0x81c>)
 801190a:	4413      	add	r3, r2
 801190c:	4a40      	ldr	r2, [pc, #256]	; (8011a10 <face_detection_configure_weights+0x818>)
 801190e:	60d3      	str	r3, [r2, #12]
    
    conv2d_33_bias_array.format |= AI_FMT_FLAG_CONST;
 8011910:	4b41      	ldr	r3, [pc, #260]	; (8011a18 <face_detection_configure_weights+0x820>)
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011918:	4a3f      	ldr	r2, [pc, #252]	; (8011a18 <face_detection_configure_weights+0x820>)
 801191a:	6013      	str	r3, [r2, #0]
    conv2d_33_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 216256);
 801191c:	4b25      	ldr	r3, [pc, #148]	; (80119b4 <face_detection_configure_weights+0x7bc>)
 801191e:	681a      	ldr	r2, [r3, #0]
 8011920:	4b3e      	ldr	r3, [pc, #248]	; (8011a1c <face_detection_configure_weights+0x824>)
 8011922:	4413      	add	r3, r2
 8011924:	4a3c      	ldr	r2, [pc, #240]	; (8011a18 <face_detection_configure_weights+0x820>)
 8011926:	6093      	str	r3, [r2, #8]
    conv2d_33_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 216256);
 8011928:	4b22      	ldr	r3, [pc, #136]	; (80119b4 <face_detection_configure_weights+0x7bc>)
 801192a:	681a      	ldr	r2, [r3, #0]
 801192c:	4b3b      	ldr	r3, [pc, #236]	; (8011a1c <face_detection_configure_weights+0x824>)
 801192e:	4413      	add	r3, r2
 8011930:	4a39      	ldr	r2, [pc, #228]	; (8011a18 <face_detection_configure_weights+0x820>)
 8011932:	60d3      	str	r3, [r2, #12]
    
    conv2d_35_weights_array.format |= AI_FMT_FLAG_CONST;
 8011934:	4b3a      	ldr	r3, [pc, #232]	; (8011a20 <face_detection_configure_weights+0x828>)
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801193c:	4a38      	ldr	r2, [pc, #224]	; (8011a20 <face_detection_configure_weights+0x828>)
 801193e:	6013      	str	r3, [r2, #0]
    conv2d_35_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 217280);
 8011940:	4b1c      	ldr	r3, [pc, #112]	; (80119b4 <face_detection_configure_weights+0x7bc>)
 8011942:	681a      	ldr	r2, [r3, #0]
 8011944:	4b37      	ldr	r3, [pc, #220]	; (8011a24 <face_detection_configure_weights+0x82c>)
 8011946:	4413      	add	r3, r2
 8011948:	4a35      	ldr	r2, [pc, #212]	; (8011a20 <face_detection_configure_weights+0x828>)
 801194a:	6093      	str	r3, [r2, #8]
    conv2d_35_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 217280);
 801194c:	4b19      	ldr	r3, [pc, #100]	; (80119b4 <face_detection_configure_weights+0x7bc>)
 801194e:	681a      	ldr	r2, [r3, #0]
 8011950:	4b34      	ldr	r3, [pc, #208]	; (8011a24 <face_detection_configure_weights+0x82c>)
 8011952:	4413      	add	r3, r2
 8011954:	4a32      	ldr	r2, [pc, #200]	; (8011a20 <face_detection_configure_weights+0x828>)
 8011956:	60d3      	str	r3, [r2, #12]
    
    conv2d_35_bias_array.format |= AI_FMT_FLAG_CONST;
 8011958:	4b33      	ldr	r3, [pc, #204]	; (8011a28 <face_detection_configure_weights+0x830>)
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011960:	4a31      	ldr	r2, [pc, #196]	; (8011a28 <face_detection_configure_weights+0x830>)
 8011962:	6013      	str	r3, [r2, #0]
    conv2d_35_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 219584);
 8011964:	4b13      	ldr	r3, [pc, #76]	; (80119b4 <face_detection_configure_weights+0x7bc>)
 8011966:	681a      	ldr	r2, [r3, #0]
 8011968:	4b30      	ldr	r3, [pc, #192]	; (8011a2c <face_detection_configure_weights+0x834>)
 801196a:	4413      	add	r3, r2
 801196c:	4a2e      	ldr	r2, [pc, #184]	; (8011a28 <face_detection_configure_weights+0x830>)
 801196e:	6093      	str	r3, [r2, #8]
    conv2d_35_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 219584);
 8011970:	4b10      	ldr	r3, [pc, #64]	; (80119b4 <face_detection_configure_weights+0x7bc>)
 8011972:	681a      	ldr	r2, [r3, #0]
 8011974:	4b2d      	ldr	r3, [pc, #180]	; (8011a2c <face_detection_configure_weights+0x834>)
 8011976:	4413      	add	r3, r2
 8011978:	4a2b      	ldr	r2, [pc, #172]	; (8011a28 <face_detection_configure_weights+0x830>)
 801197a:	60d3      	str	r3, [r2, #12]
    
    conv2d_36_weights_array.format |= AI_FMT_FLAG_CONST;
 801197c:	4b2c      	ldr	r3, [pc, #176]	; (8011a30 <face_detection_configure_weights+0x838>)
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011984:	4a2a      	ldr	r2, [pc, #168]	; (8011a30 <face_detection_configure_weights+0x838>)
 8011986:	6013      	str	r3, [r2, #0]
    conv2d_36_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 220608);
 8011988:	4b0a      	ldr	r3, [pc, #40]	; (80119b4 <face_detection_configure_weights+0x7bc>)
 801198a:	681a      	ldr	r2, [r3, #0]
 801198c:	4b29      	ldr	r3, [pc, #164]	; (8011a34 <face_detection_configure_weights+0x83c>)
 801198e:	4413      	add	r3, r2
 8011990:	4a27      	ldr	r2, [pc, #156]	; (8011a30 <face_detection_configure_weights+0x838>)
 8011992:	6093      	str	r3, [r2, #8]
    conv2d_36_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 220608);
 8011994:	4b07      	ldr	r3, [pc, #28]	; (80119b4 <face_detection_configure_weights+0x7bc>)
 8011996:	681a      	ldr	r2, [r3, #0]
 8011998:	4b26      	ldr	r3, [pc, #152]	; (8011a34 <face_detection_configure_weights+0x83c>)
 801199a:	4413      	add	r3, r2
 801199c:	4a24      	ldr	r2, [pc, #144]	; (8011a30 <face_detection_configure_weights+0x838>)
 801199e:	60d3      	str	r3, [r2, #12]
    
    conv2d_36_bias_array.format |= AI_FMT_FLAG_CONST;
 80119a0:	4b25      	ldr	r3, [pc, #148]	; (8011a38 <face_detection_configure_weights+0x840>)
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80119a8:	4a23      	ldr	r2, [pc, #140]	; (8011a38 <face_detection_configure_weights+0x840>)
 80119aa:	6013      	str	r3, [r2, #0]
    conv2d_36_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 286144);
 80119ac:	4b01      	ldr	r3, [pc, #4]	; (80119b4 <face_detection_configure_weights+0x7bc>)
 80119ae:	681a      	ldr	r2, [r3, #0]
 80119b0:	e044      	b.n	8011a3c <face_detection_configure_weights+0x844>
 80119b2:	bf00      	nop
 80119b4:	2405ded4 	.word	0x2405ded4
 80119b8:	00016ac0 	.word	0x00016ac0
 80119bc:	24000438 	.word	0x24000438
 80119c0:	24000458 	.word	0x24000458
 80119c4:	00016cc0 	.word	0x00016cc0
 80119c8:	24000478 	.word	0x24000478
 80119cc:	00017140 	.word	0x00017140
 80119d0:	24000498 	.word	0x24000498
 80119d4:	00017340 	.word	0x00017340
 80119d8:	240004a8 	.word	0x240004a8
 80119dc:	0001b340 	.word	0x0001b340
 80119e0:	240004b8 	.word	0x240004b8
 80119e4:	0001b540 	.word	0x0001b540
 80119e8:	240004c8 	.word	0x240004c8
 80119ec:	0001b9c0 	.word	0x0001b9c0
 80119f0:	240004d8 	.word	0x240004d8
 80119f4:	0001bbc0 	.word	0x0001bbc0
 80119f8:	240004e8 	.word	0x240004e8
 80119fc:	00023bc0 	.word	0x00023bc0
 8011a00:	240004f8 	.word	0x240004f8
 8011a04:	00023fc0 	.word	0x00023fc0
 8011a08:	24000518 	.word	0x24000518
 8011a0c:	000248c0 	.word	0x000248c0
 8011a10:	24000548 	.word	0x24000548
 8011a14:	00024cc0 	.word	0x00024cc0
 8011a18:	24000578 	.word	0x24000578
 8011a1c:	00034cc0 	.word	0x00034cc0
 8011a20:	240005a8 	.word	0x240005a8
 8011a24:	000350c0 	.word	0x000350c0
 8011a28:	240005d8 	.word	0x240005d8
 8011a2c:	000359c0 	.word	0x000359c0
 8011a30:	24000608 	.word	0x24000608
 8011a34:	00035dc0 	.word	0x00035dc0
 8011a38:	24000638 	.word	0x24000638
 8011a3c:	4b8f      	ldr	r3, [pc, #572]	; (8011c7c <face_detection_configure_weights+0xa84>)
 8011a3e:	4413      	add	r3, r2
 8011a40:	4a8f      	ldr	r2, [pc, #572]	; (8011c80 <face_detection_configure_weights+0xa88>)
 8011a42:	6093      	str	r3, [r2, #8]
    conv2d_36_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 286144);
 8011a44:	4b8f      	ldr	r3, [pc, #572]	; (8011c84 <face_detection_configure_weights+0xa8c>)
 8011a46:	681a      	ldr	r2, [r3, #0]
 8011a48:	4b8c      	ldr	r3, [pc, #560]	; (8011c7c <face_detection_configure_weights+0xa84>)
 8011a4a:	4413      	add	r3, r2
 8011a4c:	4a8c      	ldr	r2, [pc, #560]	; (8011c80 <face_detection_configure_weights+0xa88>)
 8011a4e:	60d3      	str	r3, [r2, #12]
    
    conv2d_37_weights_array.format |= AI_FMT_FLAG_CONST;
 8011a50:	4b8d      	ldr	r3, [pc, #564]	; (8011c88 <face_detection_configure_weights+0xa90>)
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011a58:	4a8b      	ldr	r2, [pc, #556]	; (8011c88 <face_detection_configure_weights+0xa90>)
 8011a5a:	6013      	str	r3, [r2, #0]
    conv2d_37_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 287168);
 8011a5c:	4b89      	ldr	r3, [pc, #548]	; (8011c84 <face_detection_configure_weights+0xa8c>)
 8011a5e:	681a      	ldr	r2, [r3, #0]
 8011a60:	4b8a      	ldr	r3, [pc, #552]	; (8011c8c <face_detection_configure_weights+0xa94>)
 8011a62:	4413      	add	r3, r2
 8011a64:	4a88      	ldr	r2, [pc, #544]	; (8011c88 <face_detection_configure_weights+0xa90>)
 8011a66:	6093      	str	r3, [r2, #8]
    conv2d_37_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 287168);
 8011a68:	4b86      	ldr	r3, [pc, #536]	; (8011c84 <face_detection_configure_weights+0xa8c>)
 8011a6a:	681a      	ldr	r2, [r3, #0]
 8011a6c:	4b87      	ldr	r3, [pc, #540]	; (8011c8c <face_detection_configure_weights+0xa94>)
 8011a6e:	4413      	add	r3, r2
 8011a70:	4a85      	ldr	r2, [pc, #532]	; (8011c88 <face_detection_configure_weights+0xa90>)
 8011a72:	60d3      	str	r3, [r2, #12]
    
    conv2d_37_bias_array.format |= AI_FMT_FLAG_CONST;
 8011a74:	4b86      	ldr	r3, [pc, #536]	; (8011c90 <face_detection_configure_weights+0xa98>)
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011a7c:	4a84      	ldr	r2, [pc, #528]	; (8011c90 <face_detection_configure_weights+0xa98>)
 8011a7e:	6013      	str	r3, [r2, #0]
    conv2d_37_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 289472);
 8011a80:	4b80      	ldr	r3, [pc, #512]	; (8011c84 <face_detection_configure_weights+0xa8c>)
 8011a82:	681a      	ldr	r2, [r3, #0]
 8011a84:	4b83      	ldr	r3, [pc, #524]	; (8011c94 <face_detection_configure_weights+0xa9c>)
 8011a86:	4413      	add	r3, r2
 8011a88:	4a81      	ldr	r2, [pc, #516]	; (8011c90 <face_detection_configure_weights+0xa98>)
 8011a8a:	6093      	str	r3, [r2, #8]
    conv2d_37_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 289472);
 8011a8c:	4b7d      	ldr	r3, [pc, #500]	; (8011c84 <face_detection_configure_weights+0xa8c>)
 8011a8e:	681a      	ldr	r2, [r3, #0]
 8011a90:	4b80      	ldr	r3, [pc, #512]	; (8011c94 <face_detection_configure_weights+0xa9c>)
 8011a92:	4413      	add	r3, r2
 8011a94:	4a7e      	ldr	r2, [pc, #504]	; (8011c90 <face_detection_configure_weights+0xa98>)
 8011a96:	60d3      	str	r3, [r2, #12]
    
    conv2d_38_weights_array.format |= AI_FMT_FLAG_CONST;
 8011a98:	4b7f      	ldr	r3, [pc, #508]	; (8011c98 <face_detection_configure_weights+0xaa0>)
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011aa0:	4a7d      	ldr	r2, [pc, #500]	; (8011c98 <face_detection_configure_weights+0xaa0>)
 8011aa2:	6013      	str	r3, [r2, #0]
    conv2d_38_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 290496);
 8011aa4:	4b77      	ldr	r3, [pc, #476]	; (8011c84 <face_detection_configure_weights+0xa8c>)
 8011aa6:	681a      	ldr	r2, [r3, #0]
 8011aa8:	4b7c      	ldr	r3, [pc, #496]	; (8011c9c <face_detection_configure_weights+0xaa4>)
 8011aaa:	4413      	add	r3, r2
 8011aac:	4a7a      	ldr	r2, [pc, #488]	; (8011c98 <face_detection_configure_weights+0xaa0>)
 8011aae:	6093      	str	r3, [r2, #8]
    conv2d_38_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 290496);
 8011ab0:	4b74      	ldr	r3, [pc, #464]	; (8011c84 <face_detection_configure_weights+0xa8c>)
 8011ab2:	681a      	ldr	r2, [r3, #0]
 8011ab4:	4b79      	ldr	r3, [pc, #484]	; (8011c9c <face_detection_configure_weights+0xaa4>)
 8011ab6:	4413      	add	r3, r2
 8011ab8:	4a77      	ldr	r2, [pc, #476]	; (8011c98 <face_detection_configure_weights+0xaa0>)
 8011aba:	60d3      	str	r3, [r2, #12]
    
    conv2d_38_bias_array.format |= AI_FMT_FLAG_CONST;
 8011abc:	4b78      	ldr	r3, [pc, #480]	; (8011ca0 <face_detection_configure_weights+0xaa8>)
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011ac4:	4a76      	ldr	r2, [pc, #472]	; (8011ca0 <face_detection_configure_weights+0xaa8>)
 8011ac6:	6013      	str	r3, [r2, #0]
    conv2d_38_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 356032);
 8011ac8:	4b6e      	ldr	r3, [pc, #440]	; (8011c84 <face_detection_configure_weights+0xa8c>)
 8011aca:	681a      	ldr	r2, [r3, #0]
 8011acc:	4b75      	ldr	r3, [pc, #468]	; (8011ca4 <face_detection_configure_weights+0xaac>)
 8011ace:	4413      	add	r3, r2
 8011ad0:	4a73      	ldr	r2, [pc, #460]	; (8011ca0 <face_detection_configure_weights+0xaa8>)
 8011ad2:	6093      	str	r3, [r2, #8]
    conv2d_38_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 356032);
 8011ad4:	4b6b      	ldr	r3, [pc, #428]	; (8011c84 <face_detection_configure_weights+0xa8c>)
 8011ad6:	681a      	ldr	r2, [r3, #0]
 8011ad8:	4b72      	ldr	r3, [pc, #456]	; (8011ca4 <face_detection_configure_weights+0xaac>)
 8011ada:	4413      	add	r3, r2
 8011adc:	4a70      	ldr	r2, [pc, #448]	; (8011ca0 <face_detection_configure_weights+0xaa8>)
 8011ade:	60d3      	str	r3, [r2, #12]
    
    conv2d_45_weights_array.format |= AI_FMT_FLAG_CONST;
 8011ae0:	4b71      	ldr	r3, [pc, #452]	; (8011ca8 <face_detection_configure_weights+0xab0>)
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011ae8:	4a6f      	ldr	r2, [pc, #444]	; (8011ca8 <face_detection_configure_weights+0xab0>)
 8011aea:	6013      	str	r3, [r2, #0]
    conv2d_45_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 357056);
 8011aec:	4b65      	ldr	r3, [pc, #404]	; (8011c84 <face_detection_configure_weights+0xa8c>)
 8011aee:	681a      	ldr	r2, [r3, #0]
 8011af0:	4b6e      	ldr	r3, [pc, #440]	; (8011cac <face_detection_configure_weights+0xab4>)
 8011af2:	4413      	add	r3, r2
 8011af4:	4a6c      	ldr	r2, [pc, #432]	; (8011ca8 <face_detection_configure_weights+0xab0>)
 8011af6:	6093      	str	r3, [r2, #8]
    conv2d_45_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 357056);
 8011af8:	4b62      	ldr	r3, [pc, #392]	; (8011c84 <face_detection_configure_weights+0xa8c>)
 8011afa:	681a      	ldr	r2, [r3, #0]
 8011afc:	4b6b      	ldr	r3, [pc, #428]	; (8011cac <face_detection_configure_weights+0xab4>)
 8011afe:	4413      	add	r3, r2
 8011b00:	4a69      	ldr	r2, [pc, #420]	; (8011ca8 <face_detection_configure_weights+0xab0>)
 8011b02:	60d3      	str	r3, [r2, #12]
    
    conv2d_45_bias_array.format |= AI_FMT_FLAG_CONST;
 8011b04:	4b6a      	ldr	r3, [pc, #424]	; (8011cb0 <face_detection_configure_weights+0xab8>)
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011b0c:	4a68      	ldr	r2, [pc, #416]	; (8011cb0 <face_detection_configure_weights+0xab8>)
 8011b0e:	6013      	str	r3, [r2, #0]
    conv2d_45_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 365248);
 8011b10:	4b5c      	ldr	r3, [pc, #368]	; (8011c84 <face_detection_configure_weights+0xa8c>)
 8011b12:	681a      	ldr	r2, [r3, #0]
 8011b14:	4b67      	ldr	r3, [pc, #412]	; (8011cb4 <face_detection_configure_weights+0xabc>)
 8011b16:	4413      	add	r3, r2
 8011b18:	4a65      	ldr	r2, [pc, #404]	; (8011cb0 <face_detection_configure_weights+0xab8>)
 8011b1a:	6093      	str	r3, [r2, #8]
    conv2d_45_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 365248);
 8011b1c:	4b59      	ldr	r3, [pc, #356]	; (8011c84 <face_detection_configure_weights+0xa8c>)
 8011b1e:	681a      	ldr	r2, [r3, #0]
 8011b20:	4b64      	ldr	r3, [pc, #400]	; (8011cb4 <face_detection_configure_weights+0xabc>)
 8011b22:	4413      	add	r3, r2
 8011b24:	4a62      	ldr	r2, [pc, #392]	; (8011cb0 <face_detection_configure_weights+0xab8>)
 8011b26:	60d3      	str	r3, [r2, #12]
    
    conv2d_46_weights_array.format |= AI_FMT_FLAG_CONST;
 8011b28:	4b63      	ldr	r3, [pc, #396]	; (8011cb8 <face_detection_configure_weights+0xac0>)
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011b30:	4a61      	ldr	r2, [pc, #388]	; (8011cb8 <face_detection_configure_weights+0xac0>)
 8011b32:	6013      	str	r3, [r2, #0]
    conv2d_46_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 365376);
 8011b34:	4b53      	ldr	r3, [pc, #332]	; (8011c84 <face_detection_configure_weights+0xa8c>)
 8011b36:	681a      	ldr	r2, [r3, #0]
 8011b38:	4b60      	ldr	r3, [pc, #384]	; (8011cbc <face_detection_configure_weights+0xac4>)
 8011b3a:	4413      	add	r3, r2
 8011b3c:	4a5e      	ldr	r2, [pc, #376]	; (8011cb8 <face_detection_configure_weights+0xac0>)
 8011b3e:	6093      	str	r3, [r2, #8]
    conv2d_46_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 365376);
 8011b40:	4b50      	ldr	r3, [pc, #320]	; (8011c84 <face_detection_configure_weights+0xa8c>)
 8011b42:	681a      	ldr	r2, [r3, #0]
 8011b44:	4b5d      	ldr	r3, [pc, #372]	; (8011cbc <face_detection_configure_weights+0xac4>)
 8011b46:	4413      	add	r3, r2
 8011b48:	4a5b      	ldr	r2, [pc, #364]	; (8011cb8 <face_detection_configure_weights+0xac0>)
 8011b4a:	60d3      	str	r3, [r2, #12]
    
    conv2d_46_bias_array.format |= AI_FMT_FLAG_CONST;
 8011b4c:	4b5c      	ldr	r3, [pc, #368]	; (8011cc0 <face_detection_configure_weights+0xac8>)
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011b54:	4a5a      	ldr	r2, [pc, #360]	; (8011cc0 <face_detection_configure_weights+0xac8>)
 8011b56:	6013      	str	r3, [r2, #0]
    conv2d_46_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 368256);
 8011b58:	4b4a      	ldr	r3, [pc, #296]	; (8011c84 <face_detection_configure_weights+0xa8c>)
 8011b5a:	681a      	ldr	r2, [r3, #0]
 8011b5c:	4b59      	ldr	r3, [pc, #356]	; (8011cc4 <face_detection_configure_weights+0xacc>)
 8011b5e:	4413      	add	r3, r2
 8011b60:	4a57      	ldr	r2, [pc, #348]	; (8011cc0 <face_detection_configure_weights+0xac8>)
 8011b62:	6093      	str	r3, [r2, #8]
    conv2d_46_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 368256);
 8011b64:	4b47      	ldr	r3, [pc, #284]	; (8011c84 <face_detection_configure_weights+0xa8c>)
 8011b66:	681a      	ldr	r2, [r3, #0]
 8011b68:	4b56      	ldr	r3, [pc, #344]	; (8011cc4 <face_detection_configure_weights+0xacc>)
 8011b6a:	4413      	add	r3, r2
 8011b6c:	4a54      	ldr	r2, [pc, #336]	; (8011cc0 <face_detection_configure_weights+0xac8>)
 8011b6e:	60d3      	str	r3, [r2, #12]
    
    conv2d_51_weights_array.format |= AI_FMT_FLAG_CONST;
 8011b70:	4b55      	ldr	r3, [pc, #340]	; (8011cc8 <face_detection_configure_weights+0xad0>)
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011b78:	4a53      	ldr	r2, [pc, #332]	; (8011cc8 <face_detection_configure_weights+0xad0>)
 8011b7a:	6013      	str	r3, [r2, #0]
    conv2d_51_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 368296);
 8011b7c:	4b41      	ldr	r3, [pc, #260]	; (8011c84 <face_detection_configure_weights+0xa8c>)
 8011b7e:	681a      	ldr	r2, [r3, #0]
 8011b80:	4b52      	ldr	r3, [pc, #328]	; (8011ccc <face_detection_configure_weights+0xad4>)
 8011b82:	4413      	add	r3, r2
 8011b84:	4a50      	ldr	r2, [pc, #320]	; (8011cc8 <face_detection_configure_weights+0xad0>)
 8011b86:	6093      	str	r3, [r2, #8]
    conv2d_51_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 368296);
 8011b88:	4b3e      	ldr	r3, [pc, #248]	; (8011c84 <face_detection_configure_weights+0xa8c>)
 8011b8a:	681a      	ldr	r2, [r3, #0]
 8011b8c:	4b4f      	ldr	r3, [pc, #316]	; (8011ccc <face_detection_configure_weights+0xad4>)
 8011b8e:	4413      	add	r3, r2
 8011b90:	4a4d      	ldr	r2, [pc, #308]	; (8011cc8 <face_detection_configure_weights+0xad0>)
 8011b92:	60d3      	str	r3, [r2, #12]
    
    conv2d_51_bias_array.format |= AI_FMT_FLAG_CONST;
 8011b94:	4b4e      	ldr	r3, [pc, #312]	; (8011cd0 <face_detection_configure_weights+0xad8>)
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011b9c:	4a4c      	ldr	r2, [pc, #304]	; (8011cd0 <face_detection_configure_weights+0xad8>)
 8011b9e:	6013      	str	r3, [r2, #0]
    conv2d_51_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 374056);
 8011ba0:	4b38      	ldr	r3, [pc, #224]	; (8011c84 <face_detection_configure_weights+0xa8c>)
 8011ba2:	681a      	ldr	r2, [r3, #0]
 8011ba4:	4b4b      	ldr	r3, [pc, #300]	; (8011cd4 <face_detection_configure_weights+0xadc>)
 8011ba6:	4413      	add	r3, r2
 8011ba8:	4a49      	ldr	r2, [pc, #292]	; (8011cd0 <face_detection_configure_weights+0xad8>)
 8011baa:	6093      	str	r3, [r2, #8]
    conv2d_51_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 374056);
 8011bac:	4b35      	ldr	r3, [pc, #212]	; (8011c84 <face_detection_configure_weights+0xa8c>)
 8011bae:	681a      	ldr	r2, [r3, #0]
 8011bb0:	4b48      	ldr	r3, [pc, #288]	; (8011cd4 <face_detection_configure_weights+0xadc>)
 8011bb2:	4413      	add	r3, r2
 8011bb4:	4a46      	ldr	r2, [pc, #280]	; (8011cd0 <face_detection_configure_weights+0xad8>)
 8011bb6:	60d3      	str	r3, [r2, #12]
    
    conv2d_39_weights_array.format |= AI_FMT_FLAG_CONST;
 8011bb8:	4b47      	ldr	r3, [pc, #284]	; (8011cd8 <face_detection_configure_weights+0xae0>)
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011bc0:	4a45      	ldr	r2, [pc, #276]	; (8011cd8 <face_detection_configure_weights+0xae0>)
 8011bc2:	6013      	str	r3, [r2, #0]
    conv2d_39_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 374136);
 8011bc4:	4b2f      	ldr	r3, [pc, #188]	; (8011c84 <face_detection_configure_weights+0xa8c>)
 8011bc6:	681a      	ldr	r2, [r3, #0]
 8011bc8:	4b44      	ldr	r3, [pc, #272]	; (8011cdc <face_detection_configure_weights+0xae4>)
 8011bca:	4413      	add	r3, r2
 8011bcc:	4a42      	ldr	r2, [pc, #264]	; (8011cd8 <face_detection_configure_weights+0xae0>)
 8011bce:	6093      	str	r3, [r2, #8]
    conv2d_39_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 374136);
 8011bd0:	4b2c      	ldr	r3, [pc, #176]	; (8011c84 <face_detection_configure_weights+0xa8c>)
 8011bd2:	681a      	ldr	r2, [r3, #0]
 8011bd4:	4b41      	ldr	r3, [pc, #260]	; (8011cdc <face_detection_configure_weights+0xae4>)
 8011bd6:	4413      	add	r3, r2
 8011bd8:	4a3f      	ldr	r2, [pc, #252]	; (8011cd8 <face_detection_configure_weights+0xae0>)
 8011bda:	60d3      	str	r3, [r2, #12]
    
    conv2d_39_bias_array.format |= AI_FMT_FLAG_CONST;
 8011bdc:	4b40      	ldr	r3, [pc, #256]	; (8011ce0 <face_detection_configure_weights+0xae8>)
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011be4:	4a3e      	ldr	r2, [pc, #248]	; (8011ce0 <face_detection_configure_weights+0xae8>)
 8011be6:	6013      	str	r3, [r2, #0]
    conv2d_39_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 382328);
 8011be8:	4b26      	ldr	r3, [pc, #152]	; (8011c84 <face_detection_configure_weights+0xa8c>)
 8011bea:	681a      	ldr	r2, [r3, #0]
 8011bec:	4b3d      	ldr	r3, [pc, #244]	; (8011ce4 <face_detection_configure_weights+0xaec>)
 8011bee:	4413      	add	r3, r2
 8011bf0:	4a3b      	ldr	r2, [pc, #236]	; (8011ce0 <face_detection_configure_weights+0xae8>)
 8011bf2:	6093      	str	r3, [r2, #8]
    conv2d_39_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 382328);
 8011bf4:	4b23      	ldr	r3, [pc, #140]	; (8011c84 <face_detection_configure_weights+0xa8c>)
 8011bf6:	681a      	ldr	r2, [r3, #0]
 8011bf8:	4b3a      	ldr	r3, [pc, #232]	; (8011ce4 <face_detection_configure_weights+0xaec>)
 8011bfa:	4413      	add	r3, r2
 8011bfc:	4a38      	ldr	r2, [pc, #224]	; (8011ce0 <face_detection_configure_weights+0xae8>)
 8011bfe:	60d3      	str	r3, [r2, #12]
    
    conv2d_67_weights_array.format |= AI_FMT_FLAG_CONST;
 8011c00:	4b39      	ldr	r3, [pc, #228]	; (8011ce8 <face_detection_configure_weights+0xaf0>)
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011c08:	4a37      	ldr	r2, [pc, #220]	; (8011ce8 <face_detection_configure_weights+0xaf0>)
 8011c0a:	6013      	str	r3, [r2, #0]
    conv2d_67_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 382456);
 8011c0c:	4b1d      	ldr	r3, [pc, #116]	; (8011c84 <face_detection_configure_weights+0xa8c>)
 8011c0e:	681a      	ldr	r2, [r3, #0]
 8011c10:	4b36      	ldr	r3, [pc, #216]	; (8011cec <face_detection_configure_weights+0xaf4>)
 8011c12:	4413      	add	r3, r2
 8011c14:	4a34      	ldr	r2, [pc, #208]	; (8011ce8 <face_detection_configure_weights+0xaf0>)
 8011c16:	6093      	str	r3, [r2, #8]
    conv2d_67_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 382456);
 8011c18:	4b1a      	ldr	r3, [pc, #104]	; (8011c84 <face_detection_configure_weights+0xa8c>)
 8011c1a:	681a      	ldr	r2, [r3, #0]
 8011c1c:	4b33      	ldr	r3, [pc, #204]	; (8011cec <face_detection_configure_weights+0xaf4>)
 8011c1e:	4413      	add	r3, r2
 8011c20:	4a31      	ldr	r2, [pc, #196]	; (8011ce8 <face_detection_configure_weights+0xaf0>)
 8011c22:	60d3      	str	r3, [r2, #12]
    
    conv2d_67_bias_array.format |= AI_FMT_FLAG_CONST;
 8011c24:	4b32      	ldr	r3, [pc, #200]	; (8011cf0 <face_detection_configure_weights+0xaf8>)
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011c2c:	4a30      	ldr	r2, [pc, #192]	; (8011cf0 <face_detection_configure_weights+0xaf8>)
 8011c2e:	6013      	str	r3, [r2, #0]
    conv2d_67_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 388216);
 8011c30:	4b14      	ldr	r3, [pc, #80]	; (8011c84 <face_detection_configure_weights+0xa8c>)
 8011c32:	681a      	ldr	r2, [r3, #0]
 8011c34:	4b2f      	ldr	r3, [pc, #188]	; (8011cf4 <face_detection_configure_weights+0xafc>)
 8011c36:	4413      	add	r3, r2
 8011c38:	4a2d      	ldr	r2, [pc, #180]	; (8011cf0 <face_detection_configure_weights+0xaf8>)
 8011c3a:	6093      	str	r3, [r2, #8]
    conv2d_67_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 388216);
 8011c3c:	4b11      	ldr	r3, [pc, #68]	; (8011c84 <face_detection_configure_weights+0xa8c>)
 8011c3e:	681a      	ldr	r2, [r3, #0]
 8011c40:	4b2c      	ldr	r3, [pc, #176]	; (8011cf4 <face_detection_configure_weights+0xafc>)
 8011c42:	4413      	add	r3, r2
 8011c44:	4a2a      	ldr	r2, [pc, #168]	; (8011cf0 <face_detection_configure_weights+0xaf8>)
 8011c46:	60d3      	str	r3, [r2, #12]
    
    conv2d_72_weights_array.format |= AI_FMT_FLAG_CONST;
 8011c48:	4b2b      	ldr	r3, [pc, #172]	; (8011cf8 <face_detection_configure_weights+0xb00>)
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011c50:	4a29      	ldr	r2, [pc, #164]	; (8011cf8 <face_detection_configure_weights+0xb00>)
 8011c52:	6013      	str	r3, [r2, #0]
    conv2d_72_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 388296);
 8011c54:	4b0b      	ldr	r3, [pc, #44]	; (8011c84 <face_detection_configure_weights+0xa8c>)
 8011c56:	681a      	ldr	r2, [r3, #0]
 8011c58:	4b28      	ldr	r3, [pc, #160]	; (8011cfc <face_detection_configure_weights+0xb04>)
 8011c5a:	4413      	add	r3, r2
 8011c5c:	4a26      	ldr	r2, [pc, #152]	; (8011cf8 <face_detection_configure_weights+0xb00>)
 8011c5e:	6093      	str	r3, [r2, #8]
    conv2d_72_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 388296);
 8011c60:	4b08      	ldr	r3, [pc, #32]	; (8011c84 <face_detection_configure_weights+0xa8c>)
 8011c62:	681a      	ldr	r2, [r3, #0]
 8011c64:	4b25      	ldr	r3, [pc, #148]	; (8011cfc <face_detection_configure_weights+0xb04>)
 8011c66:	4413      	add	r3, r2
 8011c68:	4a23      	ldr	r2, [pc, #140]	; (8011cf8 <face_detection_configure_weights+0xb00>)
 8011c6a:	60d3      	str	r3, [r2, #12]
    
    conv2d_72_bias_array.format |= AI_FMT_FLAG_CONST;
 8011c6c:	4b24      	ldr	r3, [pc, #144]	; (8011d00 <face_detection_configure_weights+0xb08>)
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011c74:	4a22      	ldr	r2, [pc, #136]	; (8011d00 <face_detection_configure_weights+0xb08>)
 8011c76:	6013      	str	r3, [r2, #0]
 8011c78:	e044      	b.n	8011d04 <face_detection_configure_weights+0xb0c>
 8011c7a:	bf00      	nop
 8011c7c:	00045dc0 	.word	0x00045dc0
 8011c80:	24000638 	.word	0x24000638
 8011c84:	2405ded4 	.word	0x2405ded4
 8011c88:	24000668 	.word	0x24000668
 8011c8c:	000461c0 	.word	0x000461c0
 8011c90:	24000698 	.word	0x24000698
 8011c94:	00046ac0 	.word	0x00046ac0
 8011c98:	240006c8 	.word	0x240006c8
 8011c9c:	00046ec0 	.word	0x00046ec0
 8011ca0:	240006f8 	.word	0x240006f8
 8011ca4:	00056ec0 	.word	0x00056ec0
 8011ca8:	24000728 	.word	0x24000728
 8011cac:	000572c0 	.word	0x000572c0
 8011cb0:	24000758 	.word	0x24000758
 8011cb4:	000592c0 	.word	0x000592c0
 8011cb8:	24000788 	.word	0x24000788
 8011cbc:	00059340 	.word	0x00059340
 8011cc0:	240007b8 	.word	0x240007b8
 8011cc4:	00059e80 	.word	0x00059e80
 8011cc8:	240007e8 	.word	0x240007e8
 8011ccc:	00059ea8 	.word	0x00059ea8
 8011cd0:	24000818 	.word	0x24000818
 8011cd4:	0005b528 	.word	0x0005b528
 8011cd8:	24000848 	.word	0x24000848
 8011cdc:	0005b578 	.word	0x0005b578
 8011ce0:	24000878 	.word	0x24000878
 8011ce4:	0005d578 	.word	0x0005d578
 8011ce8:	240008a8 	.word	0x240008a8
 8011cec:	0005d5f8 	.word	0x0005d5f8
 8011cf0:	240008d8 	.word	0x240008d8
 8011cf4:	0005ec78 	.word	0x0005ec78
 8011cf8:	24000908 	.word	0x24000908
 8011cfc:	0005ecc8 	.word	0x0005ecc8
 8011d00:	24000938 	.word	0x24000938
    conv2d_72_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 391176);
 8011d04:	4b8f      	ldr	r3, [pc, #572]	; (8011f44 <face_detection_configure_weights+0xd4c>)
 8011d06:	681a      	ldr	r2, [r3, #0]
 8011d08:	4b8f      	ldr	r3, [pc, #572]	; (8011f48 <face_detection_configure_weights+0xd50>)
 8011d0a:	4413      	add	r3, r2
 8011d0c:	4a8f      	ldr	r2, [pc, #572]	; (8011f4c <face_detection_configure_weights+0xd54>)
 8011d0e:	6093      	str	r3, [r2, #8]
    conv2d_72_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 391176);
 8011d10:	4b8c      	ldr	r3, [pc, #560]	; (8011f44 <face_detection_configure_weights+0xd4c>)
 8011d12:	681a      	ldr	r2, [r3, #0]
 8011d14:	4b8c      	ldr	r3, [pc, #560]	; (8011f48 <face_detection_configure_weights+0xd50>)
 8011d16:	4413      	add	r3, r2
 8011d18:	4a8c      	ldr	r2, [pc, #560]	; (8011f4c <face_detection_configure_weights+0xd54>)
 8011d1a:	60d3      	str	r3, [r2, #12]
    
    conv2d_34_weights_array.format |= AI_FMT_FLAG_CONST;
 8011d1c:	4b8c      	ldr	r3, [pc, #560]	; (8011f50 <face_detection_configure_weights+0xd58>)
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011d24:	4a8a      	ldr	r2, [pc, #552]	; (8011f50 <face_detection_configure_weights+0xd58>)
 8011d26:	6013      	str	r3, [r2, #0]
    conv2d_34_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 391216);
 8011d28:	4b86      	ldr	r3, [pc, #536]	; (8011f44 <face_detection_configure_weights+0xd4c>)
 8011d2a:	681a      	ldr	r2, [r3, #0]
 8011d2c:	4b89      	ldr	r3, [pc, #548]	; (8011f54 <face_detection_configure_weights+0xd5c>)
 8011d2e:	4413      	add	r3, r2
 8011d30:	4a87      	ldr	r2, [pc, #540]	; (8011f50 <face_detection_configure_weights+0xd58>)
 8011d32:	6093      	str	r3, [r2, #8]
    conv2d_34_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 391216);
 8011d34:	4b83      	ldr	r3, [pc, #524]	; (8011f44 <face_detection_configure_weights+0xd4c>)
 8011d36:	681a      	ldr	r2, [r3, #0]
 8011d38:	4b86      	ldr	r3, [pc, #536]	; (8011f54 <face_detection_configure_weights+0xd5c>)
 8011d3a:	4413      	add	r3, r2
 8011d3c:	4a84      	ldr	r2, [pc, #528]	; (8011f50 <face_detection_configure_weights+0xd58>)
 8011d3e:	60d3      	str	r3, [r2, #12]
    
    conv2d_34_bias_array.format |= AI_FMT_FLAG_CONST;
 8011d40:	4b85      	ldr	r3, [pc, #532]	; (8011f58 <face_detection_configure_weights+0xd60>)
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011d48:	4a83      	ldr	r2, [pc, #524]	; (8011f58 <face_detection_configure_weights+0xd60>)
 8011d4a:	6013      	str	r3, [r2, #0]
    conv2d_34_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 399408);
 8011d4c:	4b7d      	ldr	r3, [pc, #500]	; (8011f44 <face_detection_configure_weights+0xd4c>)
 8011d4e:	681a      	ldr	r2, [r3, #0]
 8011d50:	4b82      	ldr	r3, [pc, #520]	; (8011f5c <face_detection_configure_weights+0xd64>)
 8011d52:	4413      	add	r3, r2
 8011d54:	4a80      	ldr	r2, [pc, #512]	; (8011f58 <face_detection_configure_weights+0xd60>)
 8011d56:	6093      	str	r3, [r2, #8]
    conv2d_34_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 399408);
 8011d58:	4b7a      	ldr	r3, [pc, #488]	; (8011f44 <face_detection_configure_weights+0xd4c>)
 8011d5a:	681a      	ldr	r2, [r3, #0]
 8011d5c:	4b7f      	ldr	r3, [pc, #508]	; (8011f5c <face_detection_configure_weights+0xd64>)
 8011d5e:	4413      	add	r3, r2
 8011d60:	4a7d      	ldr	r2, [pc, #500]	; (8011f58 <face_detection_configure_weights+0xd60>)
 8011d62:	60d3      	str	r3, [r2, #12]
    
    conv2d_87_weights_array.format |= AI_FMT_FLAG_CONST;
 8011d64:	4b7e      	ldr	r3, [pc, #504]	; (8011f60 <face_detection_configure_weights+0xd68>)
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011d6c:	4a7c      	ldr	r2, [pc, #496]	; (8011f60 <face_detection_configure_weights+0xd68>)
 8011d6e:	6013      	str	r3, [r2, #0]
    conv2d_87_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 399536);
 8011d70:	4b74      	ldr	r3, [pc, #464]	; (8011f44 <face_detection_configure_weights+0xd4c>)
 8011d72:	681a      	ldr	r2, [r3, #0]
 8011d74:	4b7b      	ldr	r3, [pc, #492]	; (8011f64 <face_detection_configure_weights+0xd6c>)
 8011d76:	4413      	add	r3, r2
 8011d78:	4a79      	ldr	r2, [pc, #484]	; (8011f60 <face_detection_configure_weights+0xd68>)
 8011d7a:	6093      	str	r3, [r2, #8]
    conv2d_87_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 399536);
 8011d7c:	4b71      	ldr	r3, [pc, #452]	; (8011f44 <face_detection_configure_weights+0xd4c>)
 8011d7e:	681a      	ldr	r2, [r3, #0]
 8011d80:	4b78      	ldr	r3, [pc, #480]	; (8011f64 <face_detection_configure_weights+0xd6c>)
 8011d82:	4413      	add	r3, r2
 8011d84:	4a76      	ldr	r2, [pc, #472]	; (8011f60 <face_detection_configure_weights+0xd68>)
 8011d86:	60d3      	str	r3, [r2, #12]
    
    conv2d_87_bias_array.format |= AI_FMT_FLAG_CONST;
 8011d88:	4b77      	ldr	r3, [pc, #476]	; (8011f68 <face_detection_configure_weights+0xd70>)
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011d90:	4a75      	ldr	r2, [pc, #468]	; (8011f68 <face_detection_configure_weights+0xd70>)
 8011d92:	6013      	str	r3, [r2, #0]
    conv2d_87_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 402416);
 8011d94:	4b6b      	ldr	r3, [pc, #428]	; (8011f44 <face_detection_configure_weights+0xd4c>)
 8011d96:	681a      	ldr	r2, [r3, #0]
 8011d98:	4b74      	ldr	r3, [pc, #464]	; (8011f6c <face_detection_configure_weights+0xd74>)
 8011d9a:	4413      	add	r3, r2
 8011d9c:	4a72      	ldr	r2, [pc, #456]	; (8011f68 <face_detection_configure_weights+0xd70>)
 8011d9e:	6093      	str	r3, [r2, #8]
    conv2d_87_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 402416);
 8011da0:	4b68      	ldr	r3, [pc, #416]	; (8011f44 <face_detection_configure_weights+0xd4c>)
 8011da2:	681a      	ldr	r2, [r3, #0]
 8011da4:	4b71      	ldr	r3, [pc, #452]	; (8011f6c <face_detection_configure_weights+0xd74>)
 8011da6:	4413      	add	r3, r2
 8011da8:	4a6f      	ldr	r2, [pc, #444]	; (8011f68 <face_detection_configure_weights+0xd70>)
 8011daa:	60d3      	str	r3, [r2, #12]
    
    conv2d_92_weights_array.format |= AI_FMT_FLAG_CONST;
 8011dac:	4b70      	ldr	r3, [pc, #448]	; (8011f70 <face_detection_configure_weights+0xd78>)
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011db4:	4a6e      	ldr	r2, [pc, #440]	; (8011f70 <face_detection_configure_weights+0xd78>)
 8011db6:	6013      	str	r3, [r2, #0]
    conv2d_92_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 402456);
 8011db8:	4b62      	ldr	r3, [pc, #392]	; (8011f44 <face_detection_configure_weights+0xd4c>)
 8011dba:	681a      	ldr	r2, [r3, #0]
 8011dbc:	4b6d      	ldr	r3, [pc, #436]	; (8011f74 <face_detection_configure_weights+0xd7c>)
 8011dbe:	4413      	add	r3, r2
 8011dc0:	4a6b      	ldr	r2, [pc, #428]	; (8011f70 <face_detection_configure_weights+0xd78>)
 8011dc2:	6093      	str	r3, [r2, #8]
    conv2d_92_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 402456);
 8011dc4:	4b5f      	ldr	r3, [pc, #380]	; (8011f44 <face_detection_configure_weights+0xd4c>)
 8011dc6:	681a      	ldr	r2, [r3, #0]
 8011dc8:	4b6a      	ldr	r3, [pc, #424]	; (8011f74 <face_detection_configure_weights+0xd7c>)
 8011dca:	4413      	add	r3, r2
 8011dcc:	4a68      	ldr	r2, [pc, #416]	; (8011f70 <face_detection_configure_weights+0xd78>)
 8011dce:	60d3      	str	r3, [r2, #12]
    
    conv2d_92_bias_array.format |= AI_FMT_FLAG_CONST;
 8011dd0:	4b69      	ldr	r3, [pc, #420]	; (8011f78 <face_detection_configure_weights+0xd80>)
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011dd8:	4a67      	ldr	r2, [pc, #412]	; (8011f78 <face_detection_configure_weights+0xd80>)
 8011dda:	6013      	str	r3, [r2, #0]
    conv2d_92_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 408216);
 8011ddc:	4b59      	ldr	r3, [pc, #356]	; (8011f44 <face_detection_configure_weights+0xd4c>)
 8011dde:	681a      	ldr	r2, [r3, #0]
 8011de0:	4b66      	ldr	r3, [pc, #408]	; (8011f7c <face_detection_configure_weights+0xd84>)
 8011de2:	4413      	add	r3, r2
 8011de4:	4a64      	ldr	r2, [pc, #400]	; (8011f78 <face_detection_configure_weights+0xd80>)
 8011de6:	6093      	str	r3, [r2, #8]
    conv2d_92_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 408216);
 8011de8:	4b56      	ldr	r3, [pc, #344]	; (8011f44 <face_detection_configure_weights+0xd4c>)
 8011dea:	681a      	ldr	r2, [r3, #0]
 8011dec:	4b63      	ldr	r3, [pc, #396]	; (8011f7c <face_detection_configure_weights+0xd84>)
 8011dee:	4413      	add	r3, r2
 8011df0:	4a61      	ldr	r2, [pc, #388]	; (8011f78 <face_detection_configure_weights+0xd80>)
 8011df2:	60d3      	str	r3, [r2, #12]
    
    conv2d_28_weights_array.format |= AI_FMT_FLAG_CONST;
 8011df4:	4b62      	ldr	r3, [pc, #392]	; (8011f80 <face_detection_configure_weights+0xd88>)
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011dfc:	4a60      	ldr	r2, [pc, #384]	; (8011f80 <face_detection_configure_weights+0xd88>)
 8011dfe:	6013      	str	r3, [r2, #0]
    conv2d_28_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 408296);
 8011e00:	4b50      	ldr	r3, [pc, #320]	; (8011f44 <face_detection_configure_weights+0xd4c>)
 8011e02:	681a      	ldr	r2, [r3, #0]
 8011e04:	4b5f      	ldr	r3, [pc, #380]	; (8011f84 <face_detection_configure_weights+0xd8c>)
 8011e06:	4413      	add	r3, r2
 8011e08:	4a5d      	ldr	r2, [pc, #372]	; (8011f80 <face_detection_configure_weights+0xd88>)
 8011e0a:	6093      	str	r3, [r2, #8]
    conv2d_28_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 408296);
 8011e0c:	4b4d      	ldr	r3, [pc, #308]	; (8011f44 <face_detection_configure_weights+0xd4c>)
 8011e0e:	681a      	ldr	r2, [r3, #0]
 8011e10:	4b5c      	ldr	r3, [pc, #368]	; (8011f84 <face_detection_configure_weights+0xd8c>)
 8011e12:	4413      	add	r3, r2
 8011e14:	4a5a      	ldr	r2, [pc, #360]	; (8011f80 <face_detection_configure_weights+0xd88>)
 8011e16:	60d3      	str	r3, [r2, #12]
    
    conv2d_28_bias_array.format |= AI_FMT_FLAG_CONST;
 8011e18:	4b5b      	ldr	r3, [pc, #364]	; (8011f88 <face_detection_configure_weights+0xd90>)
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011e20:	4a59      	ldr	r2, [pc, #356]	; (8011f88 <face_detection_configure_weights+0xd90>)
 8011e22:	6013      	str	r3, [r2, #0]
    conv2d_28_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 412392);
 8011e24:	4b47      	ldr	r3, [pc, #284]	; (8011f44 <face_detection_configure_weights+0xd4c>)
 8011e26:	681a      	ldr	r2, [r3, #0]
 8011e28:	4b58      	ldr	r3, [pc, #352]	; (8011f8c <face_detection_configure_weights+0xd94>)
 8011e2a:	4413      	add	r3, r2
 8011e2c:	4a56      	ldr	r2, [pc, #344]	; (8011f88 <face_detection_configure_weights+0xd90>)
 8011e2e:	6093      	str	r3, [r2, #8]
    conv2d_28_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 412392);
 8011e30:	4b44      	ldr	r3, [pc, #272]	; (8011f44 <face_detection_configure_weights+0xd4c>)
 8011e32:	681a      	ldr	r2, [r3, #0]
 8011e34:	4b55      	ldr	r3, [pc, #340]	; (8011f8c <face_detection_configure_weights+0xd94>)
 8011e36:	4413      	add	r3, r2
 8011e38:	4a53      	ldr	r2, [pc, #332]	; (8011f88 <face_detection_configure_weights+0xd90>)
 8011e3a:	60d3      	str	r3, [r2, #12]
    
    conv2d_107_weights_array.format |= AI_FMT_FLAG_CONST;
 8011e3c:	4b54      	ldr	r3, [pc, #336]	; (8011f90 <face_detection_configure_weights+0xd98>)
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011e44:	4a52      	ldr	r2, [pc, #328]	; (8011f90 <face_detection_configure_weights+0xd98>)
 8011e46:	6013      	str	r3, [r2, #0]
    conv2d_107_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 412520);
 8011e48:	4b3e      	ldr	r3, [pc, #248]	; (8011f44 <face_detection_configure_weights+0xd4c>)
 8011e4a:	681a      	ldr	r2, [r3, #0]
 8011e4c:	4b51      	ldr	r3, [pc, #324]	; (8011f94 <face_detection_configure_weights+0xd9c>)
 8011e4e:	4413      	add	r3, r2
 8011e50:	4a4f      	ldr	r2, [pc, #316]	; (8011f90 <face_detection_configure_weights+0xd98>)
 8011e52:	6093      	str	r3, [r2, #8]
    conv2d_107_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 412520);
 8011e54:	4b3b      	ldr	r3, [pc, #236]	; (8011f44 <face_detection_configure_weights+0xd4c>)
 8011e56:	681a      	ldr	r2, [r3, #0]
 8011e58:	4b4e      	ldr	r3, [pc, #312]	; (8011f94 <face_detection_configure_weights+0xd9c>)
 8011e5a:	4413      	add	r3, r2
 8011e5c:	4a4c      	ldr	r2, [pc, #304]	; (8011f90 <face_detection_configure_weights+0xd98>)
 8011e5e:	60d3      	str	r3, [r2, #12]
    
    conv2d_107_bias_array.format |= AI_FMT_FLAG_CONST;
 8011e60:	4b4d      	ldr	r3, [pc, #308]	; (8011f98 <face_detection_configure_weights+0xda0>)
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011e68:	4a4b      	ldr	r2, [pc, #300]	; (8011f98 <face_detection_configure_weights+0xda0>)
 8011e6a:	6013      	str	r3, [r2, #0]
    conv2d_107_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 415400);
 8011e6c:	4b35      	ldr	r3, [pc, #212]	; (8011f44 <face_detection_configure_weights+0xd4c>)
 8011e6e:	681a      	ldr	r2, [r3, #0]
 8011e70:	4b4a      	ldr	r3, [pc, #296]	; (8011f9c <face_detection_configure_weights+0xda4>)
 8011e72:	4413      	add	r3, r2
 8011e74:	4a48      	ldr	r2, [pc, #288]	; (8011f98 <face_detection_configure_weights+0xda0>)
 8011e76:	6093      	str	r3, [r2, #8]
    conv2d_107_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 415400);
 8011e78:	4b32      	ldr	r3, [pc, #200]	; (8011f44 <face_detection_configure_weights+0xd4c>)
 8011e7a:	681a      	ldr	r2, [r3, #0]
 8011e7c:	4b47      	ldr	r3, [pc, #284]	; (8011f9c <face_detection_configure_weights+0xda4>)
 8011e7e:	4413      	add	r3, r2
 8011e80:	4a45      	ldr	r2, [pc, #276]	; (8011f98 <face_detection_configure_weights+0xda0>)
 8011e82:	60d3      	str	r3, [r2, #12]
    
    conv2d_112_weights_array.format |= AI_FMT_FLAG_CONST;
 8011e84:	4b46      	ldr	r3, [pc, #280]	; (8011fa0 <face_detection_configure_weights+0xda8>)
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011e8c:	4a44      	ldr	r2, [pc, #272]	; (8011fa0 <face_detection_configure_weights+0xda8>)
 8011e8e:	6013      	str	r3, [r2, #0]
    conv2d_112_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 415440);
 8011e90:	4b2c      	ldr	r3, [pc, #176]	; (8011f44 <face_detection_configure_weights+0xd4c>)
 8011e92:	681a      	ldr	r2, [r3, #0]
 8011e94:	4b43      	ldr	r3, [pc, #268]	; (8011fa4 <face_detection_configure_weights+0xdac>)
 8011e96:	4413      	add	r3, r2
 8011e98:	4a41      	ldr	r2, [pc, #260]	; (8011fa0 <face_detection_configure_weights+0xda8>)
 8011e9a:	6093      	str	r3, [r2, #8]
    conv2d_112_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 415440);
 8011e9c:	4b29      	ldr	r3, [pc, #164]	; (8011f44 <face_detection_configure_weights+0xd4c>)
 8011e9e:	681a      	ldr	r2, [r3, #0]
 8011ea0:	4b40      	ldr	r3, [pc, #256]	; (8011fa4 <face_detection_configure_weights+0xdac>)
 8011ea2:	4413      	add	r3, r2
 8011ea4:	4a3e      	ldr	r2, [pc, #248]	; (8011fa0 <face_detection_configure_weights+0xda8>)
 8011ea6:	60d3      	str	r3, [r2, #12]
    
    conv2d_112_bias_array.format |= AI_FMT_FLAG_CONST;
 8011ea8:	4b3f      	ldr	r3, [pc, #252]	; (8011fa8 <face_detection_configure_weights+0xdb0>)
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011eb0:	4a3d      	ldr	r2, [pc, #244]	; (8011fa8 <face_detection_configure_weights+0xdb0>)
 8011eb2:	6013      	str	r3, [r2, #0]
    conv2d_112_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 421200);
 8011eb4:	4b23      	ldr	r3, [pc, #140]	; (8011f44 <face_detection_configure_weights+0xd4c>)
 8011eb6:	681a      	ldr	r2, [r3, #0]
 8011eb8:	4b3c      	ldr	r3, [pc, #240]	; (8011fac <face_detection_configure_weights+0xdb4>)
 8011eba:	4413      	add	r3, r2
 8011ebc:	4a3a      	ldr	r2, [pc, #232]	; (8011fa8 <face_detection_configure_weights+0xdb0>)
 8011ebe:	6093      	str	r3, [r2, #8]
    conv2d_112_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 421200);
 8011ec0:	4b20      	ldr	r3, [pc, #128]	; (8011f44 <face_detection_configure_weights+0xd4c>)
 8011ec2:	681a      	ldr	r2, [r3, #0]
 8011ec4:	4b39      	ldr	r3, [pc, #228]	; (8011fac <face_detection_configure_weights+0xdb4>)
 8011ec6:	4413      	add	r3, r2
 8011ec8:	4a37      	ldr	r2, [pc, #220]	; (8011fa8 <face_detection_configure_weights+0xdb0>)
 8011eca:	60d3      	str	r3, [r2, #12]
    
    conv2d_14_weights_array.format |= AI_FMT_FLAG_CONST;
 8011ecc:	4b38      	ldr	r3, [pc, #224]	; (8011fb0 <face_detection_configure_weights+0xdb8>)
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011ed4:	4a36      	ldr	r2, [pc, #216]	; (8011fb0 <face_detection_configure_weights+0xdb8>)
 8011ed6:	6013      	str	r3, [r2, #0]
    conv2d_14_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 421280);
 8011ed8:	4b1a      	ldr	r3, [pc, #104]	; (8011f44 <face_detection_configure_weights+0xd4c>)
 8011eda:	681a      	ldr	r2, [r3, #0]
 8011edc:	4b35      	ldr	r3, [pc, #212]	; (8011fb4 <face_detection_configure_weights+0xdbc>)
 8011ede:	4413      	add	r3, r2
 8011ee0:	4a33      	ldr	r2, [pc, #204]	; (8011fb0 <face_detection_configure_weights+0xdb8>)
 8011ee2:	6093      	str	r3, [r2, #8]
    conv2d_14_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 421280);
 8011ee4:	4b17      	ldr	r3, [pc, #92]	; (8011f44 <face_detection_configure_weights+0xd4c>)
 8011ee6:	681a      	ldr	r2, [r3, #0]
 8011ee8:	4b32      	ldr	r3, [pc, #200]	; (8011fb4 <face_detection_configure_weights+0xdbc>)
 8011eea:	4413      	add	r3, r2
 8011eec:	4a30      	ldr	r2, [pc, #192]	; (8011fb0 <face_detection_configure_weights+0xdb8>)
 8011eee:	60d3      	str	r3, [r2, #12]
    
    conv2d_14_bias_array.format |= AI_FMT_FLAG_CONST;
 8011ef0:	4b31      	ldr	r3, [pc, #196]	; (8011fb8 <face_detection_configure_weights+0xdc0>)
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011ef8:	4a2f      	ldr	r2, [pc, #188]	; (8011fb8 <face_detection_configure_weights+0xdc0>)
 8011efa:	6013      	str	r3, [r2, #0]
    conv2d_14_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 423328);
 8011efc:	4b11      	ldr	r3, [pc, #68]	; (8011f44 <face_detection_configure_weights+0xd4c>)
 8011efe:	681a      	ldr	r2, [r3, #0]
 8011f00:	4b2e      	ldr	r3, [pc, #184]	; (8011fbc <face_detection_configure_weights+0xdc4>)
 8011f02:	4413      	add	r3, r2
 8011f04:	4a2c      	ldr	r2, [pc, #176]	; (8011fb8 <face_detection_configure_weights+0xdc0>)
 8011f06:	6093      	str	r3, [r2, #8]
    conv2d_14_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 423328);
 8011f08:	4b0e      	ldr	r3, [pc, #56]	; (8011f44 <face_detection_configure_weights+0xd4c>)
 8011f0a:	681a      	ldr	r2, [r3, #0]
 8011f0c:	4b2b      	ldr	r3, [pc, #172]	; (8011fbc <face_detection_configure_weights+0xdc4>)
 8011f0e:	4413      	add	r3, r2
 8011f10:	4a29      	ldr	r2, [pc, #164]	; (8011fb8 <face_detection_configure_weights+0xdc0>)
 8011f12:	60d3      	str	r3, [r2, #12]
    
    conv2d_127_weights_array.format |= AI_FMT_FLAG_CONST;
 8011f14:	4b2a      	ldr	r3, [pc, #168]	; (8011fc0 <face_detection_configure_weights+0xdc8>)
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011f1c:	4a28      	ldr	r2, [pc, #160]	; (8011fc0 <face_detection_configure_weights+0xdc8>)
 8011f1e:	6013      	str	r3, [r2, #0]
    conv2d_127_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 423456);
 8011f20:	4b08      	ldr	r3, [pc, #32]	; (8011f44 <face_detection_configure_weights+0xd4c>)
 8011f22:	681a      	ldr	r2, [r3, #0]
 8011f24:	4b27      	ldr	r3, [pc, #156]	; (8011fc4 <face_detection_configure_weights+0xdcc>)
 8011f26:	4413      	add	r3, r2
 8011f28:	4a25      	ldr	r2, [pc, #148]	; (8011fc0 <face_detection_configure_weights+0xdc8>)
 8011f2a:	6093      	str	r3, [r2, #8]
    conv2d_127_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 423456);
 8011f2c:	4b05      	ldr	r3, [pc, #20]	; (8011f44 <face_detection_configure_weights+0xd4c>)
 8011f2e:	681a      	ldr	r2, [r3, #0]
 8011f30:	4b24      	ldr	r3, [pc, #144]	; (8011fc4 <face_detection_configure_weights+0xdcc>)
 8011f32:	4413      	add	r3, r2
 8011f34:	4a22      	ldr	r2, [pc, #136]	; (8011fc0 <face_detection_configure_weights+0xdc8>)
 8011f36:	60d3      	str	r3, [r2, #12]
    
    conv2d_127_bias_array.format |= AI_FMT_FLAG_CONST;
 8011f38:	4b23      	ldr	r3, [pc, #140]	; (8011fc8 <face_detection_configure_weights+0xdd0>)
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011f40:	e044      	b.n	8011fcc <face_detection_configure_weights+0xdd4>
 8011f42:	bf00      	nop
 8011f44:	2405ded4 	.word	0x2405ded4
 8011f48:	0005f808 	.word	0x0005f808
 8011f4c:	24000938 	.word	0x24000938
 8011f50:	24000968 	.word	0x24000968
 8011f54:	0005f830 	.word	0x0005f830
 8011f58:	24000998 	.word	0x24000998
 8011f5c:	00061830 	.word	0x00061830
 8011f60:	240009c8 	.word	0x240009c8
 8011f64:	000618b0 	.word	0x000618b0
 8011f68:	240009f8 	.word	0x240009f8
 8011f6c:	000623f0 	.word	0x000623f0
 8011f70:	24000a28 	.word	0x24000a28
 8011f74:	00062418 	.word	0x00062418
 8011f78:	24000a58 	.word	0x24000a58
 8011f7c:	00063a98 	.word	0x00063a98
 8011f80:	24000a88 	.word	0x24000a88
 8011f84:	00063ae8 	.word	0x00063ae8
 8011f88:	24000ab8 	.word	0x24000ab8
 8011f8c:	00064ae8 	.word	0x00064ae8
 8011f90:	24000ae8 	.word	0x24000ae8
 8011f94:	00064b68 	.word	0x00064b68
 8011f98:	24000b18 	.word	0x24000b18
 8011f9c:	000656a8 	.word	0x000656a8
 8011fa0:	24000b48 	.word	0x24000b48
 8011fa4:	000656d0 	.word	0x000656d0
 8011fa8:	24000b78 	.word	0x24000b78
 8011fac:	00066d50 	.word	0x00066d50
 8011fb0:	24000ba8 	.word	0x24000ba8
 8011fb4:	00066da0 	.word	0x00066da0
 8011fb8:	24000bd8 	.word	0x24000bd8
 8011fbc:	000675a0 	.word	0x000675a0
 8011fc0:	24000c08 	.word	0x24000c08
 8011fc4:	00067620 	.word	0x00067620
 8011fc8:	24000c38 	.word	0x24000c38
 8011fcc:	4a8e      	ldr	r2, [pc, #568]	; (8012208 <face_detection_configure_weights+0x1010>)
 8011fce:	6013      	str	r3, [r2, #0]
    conv2d_127_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 426336);
 8011fd0:	4b8e      	ldr	r3, [pc, #568]	; (801220c <face_detection_configure_weights+0x1014>)
 8011fd2:	681a      	ldr	r2, [r3, #0]
 8011fd4:	4b8e      	ldr	r3, [pc, #568]	; (8012210 <face_detection_configure_weights+0x1018>)
 8011fd6:	4413      	add	r3, r2
 8011fd8:	4a8b      	ldr	r2, [pc, #556]	; (8012208 <face_detection_configure_weights+0x1010>)
 8011fda:	6093      	str	r3, [r2, #8]
    conv2d_127_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 426336);
 8011fdc:	4b8b      	ldr	r3, [pc, #556]	; (801220c <face_detection_configure_weights+0x1014>)
 8011fde:	681a      	ldr	r2, [r3, #0]
 8011fe0:	4b8b      	ldr	r3, [pc, #556]	; (8012210 <face_detection_configure_weights+0x1018>)
 8011fe2:	4413      	add	r3, r2
 8011fe4:	4a88      	ldr	r2, [pc, #544]	; (8012208 <face_detection_configure_weights+0x1010>)
 8011fe6:	60d3      	str	r3, [r2, #12]
    
    conv2d_135_weights_array.format |= AI_FMT_FLAG_CONST;
 8011fe8:	4b8a      	ldr	r3, [pc, #552]	; (8012214 <face_detection_configure_weights+0x101c>)
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011ff0:	4a88      	ldr	r2, [pc, #544]	; (8012214 <face_detection_configure_weights+0x101c>)
 8011ff2:	6013      	str	r3, [r2, #0]
    conv2d_135_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 426376);
 8011ff4:	4b85      	ldr	r3, [pc, #532]	; (801220c <face_detection_configure_weights+0x1014>)
 8011ff6:	681a      	ldr	r2, [r3, #0]
 8011ff8:	4b87      	ldr	r3, [pc, #540]	; (8012218 <face_detection_configure_weights+0x1020>)
 8011ffa:	4413      	add	r3, r2
 8011ffc:	4a85      	ldr	r2, [pc, #532]	; (8012214 <face_detection_configure_weights+0x101c>)
 8011ffe:	6093      	str	r3, [r2, #8]
    conv2d_135_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 426376);
 8012000:	4b82      	ldr	r3, [pc, #520]	; (801220c <face_detection_configure_weights+0x1014>)
 8012002:	681a      	ldr	r2, [r3, #0]
 8012004:	4b84      	ldr	r3, [pc, #528]	; (8012218 <face_detection_configure_weights+0x1020>)
 8012006:	4413      	add	r3, r2
 8012008:	4a82      	ldr	r2, [pc, #520]	; (8012214 <face_detection_configure_weights+0x101c>)
 801200a:	60d3      	str	r3, [r2, #12]
    
    conv2d_135_bias_array.format |= AI_FMT_FLAG_CONST;
 801200c:	4b83      	ldr	r3, [pc, #524]	; (801221c <face_detection_configure_weights+0x1024>)
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012014:	4a81      	ldr	r2, [pc, #516]	; (801221c <face_detection_configure_weights+0x1024>)
 8012016:	6013      	str	r3, [r2, #0]
    conv2d_135_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 432136);
 8012018:	4b7c      	ldr	r3, [pc, #496]	; (801220c <face_detection_configure_weights+0x1014>)
 801201a:	681a      	ldr	r2, [r3, #0]
 801201c:	4b80      	ldr	r3, [pc, #512]	; (8012220 <face_detection_configure_weights+0x1028>)
 801201e:	4413      	add	r3, r2
 8012020:	4a7e      	ldr	r2, [pc, #504]	; (801221c <face_detection_configure_weights+0x1024>)
 8012022:	6093      	str	r3, [r2, #8]
    conv2d_135_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 432136);
 8012024:	4b79      	ldr	r3, [pc, #484]	; (801220c <face_detection_configure_weights+0x1014>)
 8012026:	681a      	ldr	r2, [r3, #0]
 8012028:	4b7d      	ldr	r3, [pc, #500]	; (8012220 <face_detection_configure_weights+0x1028>)
 801202a:	4413      	add	r3, r2
 801202c:	4a7b      	ldr	r2, [pc, #492]	; (801221c <face_detection_configure_weights+0x1024>)
 801202e:	60d3      	str	r3, [r2, #12]
    
    reshape_63_const_array.format |= AI_FMT_FLAG_CONST;
 8012030:	4b7c      	ldr	r3, [pc, #496]	; (8012224 <face_detection_configure_weights+0x102c>)
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012038:	4a7a      	ldr	r2, [pc, #488]	; (8012224 <face_detection_configure_weights+0x102c>)
 801203a:	6013      	str	r3, [r2, #0]
    reshape_63_const_array.data = AI_PTR(g_face_detection_weights_map[0] + 432216);
 801203c:	4b73      	ldr	r3, [pc, #460]	; (801220c <face_detection_configure_weights+0x1014>)
 801203e:	681a      	ldr	r2, [r3, #0]
 8012040:	4b79      	ldr	r3, [pc, #484]	; (8012228 <face_detection_configure_weights+0x1030>)
 8012042:	4413      	add	r3, r2
 8012044:	4a77      	ldr	r2, [pc, #476]	; (8012224 <face_detection_configure_weights+0x102c>)
 8012046:	6093      	str	r3, [r2, #8]
    reshape_63_const_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 432216);
 8012048:	4b70      	ldr	r3, [pc, #448]	; (801220c <face_detection_configure_weights+0x1014>)
 801204a:	681a      	ldr	r2, [r3, #0]
 801204c:	4b76      	ldr	r3, [pc, #472]	; (8012228 <face_detection_configure_weights+0x1030>)
 801204e:	4413      	add	r3, r2
 8012050:	4a74      	ldr	r2, [pc, #464]	; (8012224 <face_detection_configure_weights+0x102c>)
 8012052:	60d3      	str	r3, [r2, #12]
    
    reshape_84_const_array.format |= AI_FMT_FLAG_CONST;
 8012054:	4b75      	ldr	r3, [pc, #468]	; (801222c <face_detection_configure_weights+0x1034>)
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801205c:	4a73      	ldr	r2, [pc, #460]	; (801222c <face_detection_configure_weights+0x1034>)
 801205e:	6013      	str	r3, [r2, #0]
    reshape_84_const_array.data = AI_PTR(g_face_detection_weights_map[0] + 432236);
 8012060:	4b6a      	ldr	r3, [pc, #424]	; (801220c <face_detection_configure_weights+0x1014>)
 8012062:	681a      	ldr	r2, [r3, #0]
 8012064:	4b72      	ldr	r3, [pc, #456]	; (8012230 <face_detection_configure_weights+0x1038>)
 8012066:	4413      	add	r3, r2
 8012068:	4a70      	ldr	r2, [pc, #448]	; (801222c <face_detection_configure_weights+0x1034>)
 801206a:	6093      	str	r3, [r2, #8]
    reshape_84_const_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 432236);
 801206c:	4b67      	ldr	r3, [pc, #412]	; (801220c <face_detection_configure_weights+0x1014>)
 801206e:	681a      	ldr	r2, [r3, #0]
 8012070:	4b6f      	ldr	r3, [pc, #444]	; (8012230 <face_detection_configure_weights+0x1038>)
 8012072:	4413      	add	r3, r2
 8012074:	4a6d      	ldr	r2, [pc, #436]	; (801222c <face_detection_configure_weights+0x1034>)
 8012076:	60d3      	str	r3, [r2, #12]
    
    reshape_104_const_array.format |= AI_FMT_FLAG_CONST;
 8012078:	4b6e      	ldr	r3, [pc, #440]	; (8012234 <face_detection_configure_weights+0x103c>)
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012080:	4a6c      	ldr	r2, [pc, #432]	; (8012234 <face_detection_configure_weights+0x103c>)
 8012082:	6013      	str	r3, [r2, #0]
    reshape_104_const_array.data = AI_PTR(g_face_detection_weights_map[0] + 432416);
 8012084:	4b61      	ldr	r3, [pc, #388]	; (801220c <face_detection_configure_weights+0x1014>)
 8012086:	681a      	ldr	r2, [r3, #0]
 8012088:	4b6b      	ldr	r3, [pc, #428]	; (8012238 <face_detection_configure_weights+0x1040>)
 801208a:	4413      	add	r3, r2
 801208c:	4a69      	ldr	r2, [pc, #420]	; (8012234 <face_detection_configure_weights+0x103c>)
 801208e:	6093      	str	r3, [r2, #8]
    reshape_104_const_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 432416);
 8012090:	4b5e      	ldr	r3, [pc, #376]	; (801220c <face_detection_configure_weights+0x1014>)
 8012092:	681a      	ldr	r2, [r3, #0]
 8012094:	4b68      	ldr	r3, [pc, #416]	; (8012238 <face_detection_configure_weights+0x1040>)
 8012096:	4413      	add	r3, r2
 8012098:	4a66      	ldr	r2, [pc, #408]	; (8012234 <face_detection_configure_weights+0x103c>)
 801209a:	60d3      	str	r3, [r2, #12]
    
    reshape_124_const_array.format |= AI_FMT_FLAG_CONST;
 801209c:	4b67      	ldr	r3, [pc, #412]	; (801223c <face_detection_configure_weights+0x1044>)
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80120a4:	4a65      	ldr	r2, [pc, #404]	; (801223c <face_detection_configure_weights+0x1044>)
 80120a6:	6013      	str	r3, [r2, #0]
    reshape_124_const_array.data = AI_PTR(g_face_detection_weights_map[0] + 433136);
 80120a8:	4b58      	ldr	r3, [pc, #352]	; (801220c <face_detection_configure_weights+0x1014>)
 80120aa:	681a      	ldr	r2, [r3, #0]
 80120ac:	4b64      	ldr	r3, [pc, #400]	; (8012240 <face_detection_configure_weights+0x1048>)
 80120ae:	4413      	add	r3, r2
 80120b0:	4a62      	ldr	r2, [pc, #392]	; (801223c <face_detection_configure_weights+0x1044>)
 80120b2:	6093      	str	r3, [r2, #8]
    reshape_124_const_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 433136);
 80120b4:	4b55      	ldr	r3, [pc, #340]	; (801220c <face_detection_configure_weights+0x1014>)
 80120b6:	681a      	ldr	r2, [r3, #0]
 80120b8:	4b61      	ldr	r3, [pc, #388]	; (8012240 <face_detection_configure_weights+0x1048>)
 80120ba:	4413      	add	r3, r2
 80120bc:	4a5f      	ldr	r2, [pc, #380]	; (801223c <face_detection_configure_weights+0x1044>)
 80120be:	60d3      	str	r3, [r2, #12]
    
    reshape_148_const_array.format |= AI_FMT_FLAG_CONST;
 80120c0:	4b60      	ldr	r3, [pc, #384]	; (8012244 <face_detection_configure_weights+0x104c>)
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80120c8:	4a5e      	ldr	r2, [pc, #376]	; (8012244 <face_detection_configure_weights+0x104c>)
 80120ca:	6013      	str	r3, [r2, #0]
    reshape_148_const_array.data = AI_PTR(g_face_detection_weights_map[0] + 436016);
 80120cc:	4b4f      	ldr	r3, [pc, #316]	; (801220c <face_detection_configure_weights+0x1014>)
 80120ce:	681a      	ldr	r2, [r3, #0]
 80120d0:	4b5d      	ldr	r3, [pc, #372]	; (8012248 <face_detection_configure_weights+0x1050>)
 80120d2:	4413      	add	r3, r2
 80120d4:	4a5b      	ldr	r2, [pc, #364]	; (8012244 <face_detection_configure_weights+0x104c>)
 80120d6:	6093      	str	r3, [r2, #8]
    reshape_148_const_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 436016);
 80120d8:	4b4c      	ldr	r3, [pc, #304]	; (801220c <face_detection_configure_weights+0x1014>)
 80120da:	681a      	ldr	r2, [r3, #0]
 80120dc:	4b5a      	ldr	r3, [pc, #360]	; (8012248 <face_detection_configure_weights+0x1050>)
 80120de:	4413      	add	r3, r2
 80120e0:	4a58      	ldr	r2, [pc, #352]	; (8012244 <face_detection_configure_weights+0x104c>)
 80120e2:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80120e4:	4b59      	ldr	r3, [pc, #356]	; (801224c <face_detection_configure_weights+0x1054>)
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80120ec:	4a57      	ldr	r2, [pc, #348]	; (801224c <face_detection_configure_weights+0x1054>)
 80120ee:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 447536);
 80120f0:	4b46      	ldr	r3, [pc, #280]	; (801220c <face_detection_configure_weights+0x1014>)
 80120f2:	681a      	ldr	r2, [r3, #0]
 80120f4:	4b56      	ldr	r3, [pc, #344]	; (8012250 <face_detection_configure_weights+0x1058>)
 80120f6:	4413      	add	r3, r2
 80120f8:	4a54      	ldr	r2, [pc, #336]	; (801224c <face_detection_configure_weights+0x1054>)
 80120fa:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 447536);
 80120fc:	4b43      	ldr	r3, [pc, #268]	; (801220c <face_detection_configure_weights+0x1014>)
 80120fe:	681a      	ldr	r2, [r3, #0]
 8012100:	4b53      	ldr	r3, [pc, #332]	; (8012250 <face_detection_configure_weights+0x1058>)
 8012102:	4413      	add	r3, r2
 8012104:	4a51      	ldr	r2, [pc, #324]	; (801224c <face_detection_configure_weights+0x1054>)
 8012106:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8012108:	4b52      	ldr	r3, [pc, #328]	; (8012254 <face_detection_configure_weights+0x105c>)
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012110:	4a50      	ldr	r2, [pc, #320]	; (8012254 <face_detection_configure_weights+0x105c>)
 8012112:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 447752);
 8012114:	4b3d      	ldr	r3, [pc, #244]	; (801220c <face_detection_configure_weights+0x1014>)
 8012116:	681a      	ldr	r2, [r3, #0]
 8012118:	4b4f      	ldr	r3, [pc, #316]	; (8012258 <face_detection_configure_weights+0x1060>)
 801211a:	4413      	add	r3, r2
 801211c:	4a4d      	ldr	r2, [pc, #308]	; (8012254 <face_detection_configure_weights+0x105c>)
 801211e:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 447752);
 8012120:	4b3a      	ldr	r3, [pc, #232]	; (801220c <face_detection_configure_weights+0x1014>)
 8012122:	681a      	ldr	r2, [r3, #0]
 8012124:	4b4c      	ldr	r3, [pc, #304]	; (8012258 <face_detection_configure_weights+0x1060>)
 8012126:	4413      	add	r3, r2
 8012128:	4a4a      	ldr	r2, [pc, #296]	; (8012254 <face_detection_configure_weights+0x105c>)
 801212a:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 801212c:	4b4b      	ldr	r3, [pc, #300]	; (801225c <face_detection_configure_weights+0x1064>)
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012134:	4a49      	ldr	r2, [pc, #292]	; (801225c <face_detection_configure_weights+0x1064>)
 8012136:	6013      	str	r3, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 447784);
 8012138:	4b34      	ldr	r3, [pc, #208]	; (801220c <face_detection_configure_weights+0x1014>)
 801213a:	681a      	ldr	r2, [r3, #0]
 801213c:	4b48      	ldr	r3, [pc, #288]	; (8012260 <face_detection_configure_weights+0x1068>)
 801213e:	4413      	add	r3, r2
 8012140:	4a46      	ldr	r2, [pc, #280]	; (801225c <face_detection_configure_weights+0x1064>)
 8012142:	6093      	str	r3, [r2, #8]
    conv2d_2_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 447784);
 8012144:	4b31      	ldr	r3, [pc, #196]	; (801220c <face_detection_configure_weights+0x1014>)
 8012146:	681a      	ldr	r2, [r3, #0]
 8012148:	4b45      	ldr	r3, [pc, #276]	; (8012260 <face_detection_configure_weights+0x1068>)
 801214a:	4413      	add	r3, r2
 801214c:	4a43      	ldr	r2, [pc, #268]	; (801225c <face_detection_configure_weights+0x1064>)
 801214e:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8012150:	4b44      	ldr	r3, [pc, #272]	; (8012264 <face_detection_configure_weights+0x106c>)
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012158:	4a42      	ldr	r2, [pc, #264]	; (8012264 <face_detection_configure_weights+0x106c>)
 801215a:	6013      	str	r3, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 447856);
 801215c:	4b2b      	ldr	r3, [pc, #172]	; (801220c <face_detection_configure_weights+0x1014>)
 801215e:	681a      	ldr	r2, [r3, #0]
 8012160:	4b41      	ldr	r3, [pc, #260]	; (8012268 <face_detection_configure_weights+0x1070>)
 8012162:	4413      	add	r3, r2
 8012164:	4a3f      	ldr	r2, [pc, #252]	; (8012264 <face_detection_configure_weights+0x106c>)
 8012166:	6093      	str	r3, [r2, #8]
    conv2d_2_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 447856);
 8012168:	4b28      	ldr	r3, [pc, #160]	; (801220c <face_detection_configure_weights+0x1014>)
 801216a:	681a      	ldr	r2, [r3, #0]
 801216c:	4b3e      	ldr	r3, [pc, #248]	; (8012268 <face_detection_configure_weights+0x1070>)
 801216e:	4413      	add	r3, r2
 8012170:	4a3c      	ldr	r2, [pc, #240]	; (8012264 <face_detection_configure_weights+0x106c>)
 8012172:	60d3      	str	r3, [r2, #12]
    
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8012174:	4b3d      	ldr	r3, [pc, #244]	; (801226c <face_detection_configure_weights+0x1074>)
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801217c:	4a3b      	ldr	r2, [pc, #236]	; (801226c <face_detection_configure_weights+0x1074>)
 801217e:	6013      	str	r3, [r2, #0]
    conv2d_3_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 447888);
 8012180:	4b22      	ldr	r3, [pc, #136]	; (801220c <face_detection_configure_weights+0x1014>)
 8012182:	681a      	ldr	r2, [r3, #0]
 8012184:	4b3a      	ldr	r3, [pc, #232]	; (8012270 <face_detection_configure_weights+0x1078>)
 8012186:	4413      	add	r3, r2
 8012188:	4a38      	ldr	r2, [pc, #224]	; (801226c <face_detection_configure_weights+0x1074>)
 801218a:	6093      	str	r3, [r2, #8]
    conv2d_3_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 447888);
 801218c:	4b1f      	ldr	r3, [pc, #124]	; (801220c <face_detection_configure_weights+0x1014>)
 801218e:	681a      	ldr	r2, [r3, #0]
 8012190:	4b37      	ldr	r3, [pc, #220]	; (8012270 <face_detection_configure_weights+0x1078>)
 8012192:	4413      	add	r3, r2
 8012194:	4a35      	ldr	r2, [pc, #212]	; (801226c <face_detection_configure_weights+0x1074>)
 8012196:	60d3      	str	r3, [r2, #12]
    
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8012198:	4b36      	ldr	r3, [pc, #216]	; (8012274 <face_detection_configure_weights+0x107c>)
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80121a0:	4a34      	ldr	r2, [pc, #208]	; (8012274 <face_detection_configure_weights+0x107c>)
 80121a2:	6013      	str	r3, [r2, #0]
    conv2d_3_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 448016);
 80121a4:	4b19      	ldr	r3, [pc, #100]	; (801220c <face_detection_configure_weights+0x1014>)
 80121a6:	681a      	ldr	r2, [r3, #0]
 80121a8:	4b33      	ldr	r3, [pc, #204]	; (8012278 <face_detection_configure_weights+0x1080>)
 80121aa:	4413      	add	r3, r2
 80121ac:	4a31      	ldr	r2, [pc, #196]	; (8012274 <face_detection_configure_weights+0x107c>)
 80121ae:	6093      	str	r3, [r2, #8]
    conv2d_3_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 448016);
 80121b0:	4b16      	ldr	r3, [pc, #88]	; (801220c <face_detection_configure_weights+0x1014>)
 80121b2:	681a      	ldr	r2, [r3, #0]
 80121b4:	4b30      	ldr	r3, [pc, #192]	; (8012278 <face_detection_configure_weights+0x1080>)
 80121b6:	4413      	add	r3, r2
 80121b8:	4a2e      	ldr	r2, [pc, #184]	; (8012274 <face_detection_configure_weights+0x107c>)
 80121ba:	60d3      	str	r3, [r2, #12]
    
    conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
 80121bc:	4b2f      	ldr	r3, [pc, #188]	; (801227c <face_detection_configure_weights+0x1084>)
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80121c4:	4a2d      	ldr	r2, [pc, #180]	; (801227c <face_detection_configure_weights+0x1084>)
 80121c6:	6013      	str	r3, [r2, #0]
    conv2d_5_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 448080);
 80121c8:	4b10      	ldr	r3, [pc, #64]	; (801220c <face_detection_configure_weights+0x1014>)
 80121ca:	681a      	ldr	r2, [r3, #0]
 80121cc:	4b2c      	ldr	r3, [pc, #176]	; (8012280 <face_detection_configure_weights+0x1088>)
 80121ce:	4413      	add	r3, r2
 80121d0:	4a2a      	ldr	r2, [pc, #168]	; (801227c <face_detection_configure_weights+0x1084>)
 80121d2:	6093      	str	r3, [r2, #8]
    conv2d_5_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 448080);
 80121d4:	4b0d      	ldr	r3, [pc, #52]	; (801220c <face_detection_configure_weights+0x1014>)
 80121d6:	681a      	ldr	r2, [r3, #0]
 80121d8:	4b29      	ldr	r3, [pc, #164]	; (8012280 <face_detection_configure_weights+0x1088>)
 80121da:	4413      	add	r3, r2
 80121dc:	4a27      	ldr	r2, [pc, #156]	; (801227c <face_detection_configure_weights+0x1084>)
 80121de:	60d3      	str	r3, [r2, #12]
    
    conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
 80121e0:	4b28      	ldr	r3, [pc, #160]	; (8012284 <face_detection_configure_weights+0x108c>)
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80121e8:	4a26      	ldr	r2, [pc, #152]	; (8012284 <face_detection_configure_weights+0x108c>)
 80121ea:	6013      	str	r3, [r2, #0]
    conv2d_5_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 448224);
 80121ec:	4b07      	ldr	r3, [pc, #28]	; (801220c <face_detection_configure_weights+0x1014>)
 80121ee:	681a      	ldr	r2, [r3, #0]
 80121f0:	4b25      	ldr	r3, [pc, #148]	; (8012288 <face_detection_configure_weights+0x1090>)
 80121f2:	4413      	add	r3, r2
 80121f4:	4a23      	ldr	r2, [pc, #140]	; (8012284 <face_detection_configure_weights+0x108c>)
 80121f6:	6093      	str	r3, [r2, #8]
    conv2d_5_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 448224);
 80121f8:	4b04      	ldr	r3, [pc, #16]	; (801220c <face_detection_configure_weights+0x1014>)
 80121fa:	681a      	ldr	r2, [r3, #0]
 80121fc:	4b22      	ldr	r3, [pc, #136]	; (8012288 <face_detection_configure_weights+0x1090>)
 80121fe:	4413      	add	r3, r2
 8012200:	4a20      	ldr	r2, [pc, #128]	; (8012284 <face_detection_configure_weights+0x108c>)
 8012202:	60d3      	str	r3, [r2, #12]
 8012204:	e042      	b.n	801228c <face_detection_configure_weights+0x1094>
 8012206:	bf00      	nop
 8012208:	24000c38 	.word	0x24000c38
 801220c:	2405ded4 	.word	0x2405ded4
 8012210:	00068160 	.word	0x00068160
 8012214:	24000c68 	.word	0x24000c68
 8012218:	00068188 	.word	0x00068188
 801221c:	24000c98 	.word	0x24000c98
 8012220:	00069808 	.word	0x00069808
 8012224:	24000fa8 	.word	0x24000fa8
 8012228:	00069858 	.word	0x00069858
 801222c:	24000fb8 	.word	0x24000fb8
 8012230:	0006986c 	.word	0x0006986c
 8012234:	24000fe8 	.word	0x24000fe8
 8012238:	00069920 	.word	0x00069920
 801223c:	24000ff8 	.word	0x24000ff8
 8012240:	00069bf0 	.word	0x00069bf0
 8012244:	24001028 	.word	0x24001028
 8012248:	0006a730 	.word	0x0006a730
 801224c:	24001038 	.word	0x24001038
 8012250:	0006d430 	.word	0x0006d430
 8012254:	24001058 	.word	0x24001058
 8012258:	0006d508 	.word	0x0006d508
 801225c:	24001078 	.word	0x24001078
 8012260:	0006d528 	.word	0x0006d528
 8012264:	24001098 	.word	0x24001098
 8012268:	0006d570 	.word	0x0006d570
 801226c:	240010b8 	.word	0x240010b8
 8012270:	0006d590 	.word	0x0006d590
 8012274:	240010d8 	.word	0x240010d8
 8012278:	0006d610 	.word	0x0006d610
 801227c:	240010f8 	.word	0x240010f8
 8012280:	0006d650 	.word	0x0006d650
 8012284:	24001118 	.word	0x24001118
 8012288:	0006d6e0 	.word	0x0006d6e0
    
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 801228c:	4b0e      	ldr	r3, [pc, #56]	; (80122c8 <face_detection_configure_weights+0x10d0>)
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012294:	4a0c      	ldr	r2, [pc, #48]	; (80122c8 <face_detection_configure_weights+0x10d0>)
 8012296:	6013      	str	r3, [r2, #0]
    conv2d_6_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 448288);
 8012298:	4b0c      	ldr	r3, [pc, #48]	; (80122cc <face_detection_configure_weights+0x10d4>)
 801229a:	681a      	ldr	r2, [r3, #0]
 801229c:	4b0c      	ldr	r3, [pc, #48]	; (80122d0 <face_detection_configure_weights+0x10d8>)
 801229e:	4413      	add	r3, r2
 80122a0:	4a09      	ldr	r2, [pc, #36]	; (80122c8 <face_detection_configure_weights+0x10d0>)
 80122a2:	6093      	str	r3, [r2, #8]
    conv2d_6_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 448288);
 80122a4:	4b09      	ldr	r3, [pc, #36]	; (80122cc <face_detection_configure_weights+0x10d4>)
 80122a6:	681a      	ldr	r2, [r3, #0]
 80122a8:	4b09      	ldr	r3, [pc, #36]	; (80122d0 <face_detection_configure_weights+0x10d8>)
 80122aa:	4413      	add	r3, r2
 80122ac:	4a06      	ldr	r2, [pc, #24]	; (80122c8 <face_detection_configure_weights+0x10d0>)
 80122ae:	60d3      	str	r3, [r2, #12]
    
    return true;
 80122b0:	2301      	movs	r3, #1
 80122b2:	e005      	b.n	80122c0 <face_detection_configure_weights+0x10c8>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80122b4:	2212      	movs	r2, #18
 80122b6:	2130      	movs	r1, #48	; 0x30
 80122b8:	6878      	ldr	r0, [r7, #4]
 80122ba:	f000 fb71 	bl	80129a0 <ai_platform_network_set_error>
  return false;
 80122be:	2300      	movs	r3, #0
}
 80122c0:	4618      	mov	r0, r3
 80122c2:	3708      	adds	r7, #8
 80122c4:	46bd      	mov	sp, r7
 80122c6:	bd80      	pop	{r7, pc}
 80122c8:	24001128 	.word	0x24001128
 80122cc:	2405ded4 	.word	0x2405ded4
 80122d0:	0006d720 	.word	0x0006d720

080122d4 <ai_face_detection_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_face_detection_get_error(ai_handle network)
{
 80122d4:	b580      	push	{r7, lr}
 80122d6:	b082      	sub	sp, #8
 80122d8:	af00      	add	r7, sp, #0
 80122da:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 80122dc:	6878      	ldr	r0, [r7, #4]
 80122de:	f000 fa53 	bl	8012788 <ai_platform_network_get_error>
 80122e2:	4603      	mov	r3, r0
}
 80122e4:	4618      	mov	r0, r3
 80122e6:	3708      	adds	r7, #8
 80122e8:	46bd      	mov	sp, r7
 80122ea:	bd80      	pop	{r7, pc}

080122ec <ai_face_detection_create>:

AI_API_ENTRY
ai_error ai_face_detection_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b084      	sub	sp, #16
 80122f0:	af02      	add	r7, sp, #8
 80122f2:	6078      	str	r0, [r7, #4]
 80122f4:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80122f6:	2300      	movs	r3, #0
 80122f8:	9301      	str	r3, [sp, #4]
 80122fa:	2305      	movs	r3, #5
 80122fc:	9300      	str	r3, [sp, #0]
 80122fe:	2301      	movs	r3, #1
 8012300:	4a04      	ldr	r2, [pc, #16]	; (8012314 <ai_face_detection_create+0x28>)
 8012302:	6839      	ldr	r1, [r7, #0]
 8012304:	6878      	ldr	r0, [r7, #4]
 8012306:	f000 fe65 	bl	8012fd4 <ai_platform_network_create>
 801230a:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 801230c:	4618      	mov	r0, r3
 801230e:	3708      	adds	r7, #8
 8012310:	46bd      	mov	sp, r7
 8012312:	bd80      	pop	{r7, pc}
 8012314:	24008140 	.word	0x24008140

08012318 <ai_face_detection_create_and_init>:

AI_API_ENTRY
ai_error ai_face_detection_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8012318:	b580      	push	{r7, lr}
 801231a:	b096      	sub	sp, #88	; 0x58
 801231c:	af00      	add	r7, sp, #0
 801231e:	60f8      	str	r0, [r7, #12]
 8012320:	60b9      	str	r1, [r7, #8]
 8012322:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_face_detection_create(network, AI_FACE_DETECTION_DATA_CONFIG);
 8012324:	2100      	movs	r1, #0
 8012326:	68f8      	ldr	r0, [r7, #12]
 8012328:	f7ff ffe0 	bl	80122ec <ai_face_detection_create>
 801232c:	4603      	mov	r3, r0
 801232e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8012330:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8012334:	2b00      	cmp	r3, #0
 8012336:	d001      	beq.n	801233c <ai_face_detection_create_and_init+0x24>
        return err;
 8012338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801233a:	e05d      	b.n	80123f8 <ai_face_detection_create_and_init+0xe0>
    if (ai_face_detection_data_params_get(&params) != true) {
 801233c:	f107 0314 	add.w	r3, r7, #20
 8012340:	4618      	mov	r0, r3
 8012342:	f000 f8dd 	bl	8012500 <ai_face_detection_data_params_get>
 8012346:	4603      	mov	r3, r0
 8012348:	f083 0301 	eor.w	r3, r3, #1
 801234c:	b2db      	uxtb	r3, r3
 801234e:	2b00      	cmp	r3, #0
 8012350:	d008      	beq.n	8012364 <ai_face_detection_create_and_init+0x4c>
        err = ai_face_detection_get_error(*network);
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	4618      	mov	r0, r3
 8012358:	f7ff ffbc 	bl	80122d4 <ai_face_detection_get_error>
 801235c:	4603      	mov	r3, r0
 801235e:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8012360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012362:	e049      	b.n	80123f8 <ai_face_detection_create_and_init+0xe0>
    }
#if defined(AI_FACE_DETECTION_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8012364:	68bb      	ldr	r3, [r7, #8]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d016      	beq.n	8012398 <ai_face_detection_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 801236a:	2300      	movs	r3, #0
 801236c:	657b      	str	r3, [r7, #84]	; 0x54
 801236e:	e00e      	b.n	801238e <ai_face_detection_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8012370:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012374:	009b      	lsls	r3, r3, #2
 8012376:	68ba      	ldr	r2, [r7, #8]
 8012378:	4413      	add	r3, r2
 801237a:	681a      	ldr	r2, [r3, #0]
 801237c:	f107 0314 	add.w	r3, r7, #20
 8012380:	330c      	adds	r3, #12
 8012382:	4618      	mov	r0, r3
 8012384:	f000 f922 	bl	80125cc <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8012388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801238a:	3301      	adds	r3, #1
 801238c:	657b      	str	r3, [r7, #84]	; 0x54
 801238e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012390:	461a      	mov	r2, r3
 8012392:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012394:	4293      	cmp	r3, r2
 8012396:	dbeb      	blt.n	8012370 <ai_face_detection_create_and_init+0x58>
    }
#endif
#if defined(AI_FACE_DETECTION_DATA_WEIGHTS_COUNT)
    if (weights) {
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	2b00      	cmp	r3, #0
 801239c:	d016      	beq.n	80123cc <ai_face_detection_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 801239e:	2300      	movs	r3, #0
 80123a0:	653b      	str	r3, [r7, #80]	; 0x50
 80123a2:	e00e      	b.n	80123c2 <ai_face_detection_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 80123a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80123a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123a8:	009b      	lsls	r3, r3, #2
 80123aa:	687a      	ldr	r2, [r7, #4]
 80123ac:	4413      	add	r3, r2
 80123ae:	681a      	ldr	r2, [r3, #0]
 80123b0:	f107 0314 	add.w	r3, r7, #20
 80123b4:	3304      	adds	r3, #4
 80123b6:	4618      	mov	r0, r3
 80123b8:	f000 f908 	bl	80125cc <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 80123bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123be:	3301      	adds	r3, #1
 80123c0:	653b      	str	r3, [r7, #80]	; 0x50
 80123c2:	8b7b      	ldrh	r3, [r7, #26]
 80123c4:	461a      	mov	r2, r3
 80123c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123c8:	4293      	cmp	r3, r2
 80123ca:	dbeb      	blt.n	80123a4 <ai_face_detection_create_and_init+0x8c>
    }
#endif
    if (ai_face_detection_init(*network, &params) != true) {
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	f107 0214 	add.w	r2, r7, #20
 80123d4:	4611      	mov	r1, r2
 80123d6:	4618      	mov	r0, r3
 80123d8:	f000 f846 	bl	8012468 <ai_face_detection_init>
 80123dc:	4603      	mov	r3, r0
 80123de:	f083 0301 	eor.w	r3, r3, #1
 80123e2:	b2db      	uxtb	r3, r3
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d006      	beq.n	80123f6 <ai_face_detection_create_and_init+0xde>
        err = ai_face_detection_get_error(*network);
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	4618      	mov	r0, r3
 80123ee:	f7ff ff71 	bl	80122d4 <ai_face_detection_get_error>
 80123f2:	4603      	mov	r3, r0
 80123f4:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 80123f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80123f8:	4618      	mov	r0, r3
 80123fa:	3758      	adds	r7, #88	; 0x58
 80123fc:	46bd      	mov	sp, r7
 80123fe:	bd80      	pop	{r7, pc}

08012400 <ai_face_detection_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_face_detection_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8012400:	b580      	push	{r7, lr}
 8012402:	b082      	sub	sp, #8
 8012404:	af00      	add	r7, sp, #0
 8012406:	6078      	str	r0, [r7, #4]
 8012408:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d104      	bne.n	801241a <ai_face_detection_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8012410:	4b06      	ldr	r3, [pc, #24]	; (801242c <ai_face_detection_inputs_get+0x2c>)
 8012412:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	4a06      	ldr	r2, [pc, #24]	; (8012430 <ai_face_detection_inputs_get+0x30>)
 8012418:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 801241a:	6839      	ldr	r1, [r7, #0]
 801241c:	6878      	ldr	r0, [r7, #4]
 801241e:	f000 fac5 	bl	80129ac <ai_platform_inputs_get>
 8012422:	4603      	mov	r3, r0
}
 8012424:	4618      	mov	r0, r3
 8012426:	3708      	adds	r7, #8
 8012428:	46bd      	mov	sp, r7
 801242a:	bd80      	pop	{r7, pc}
 801242c:	24008140 	.word	0x24008140
 8012430:	a1c00100 	.word	0xa1c00100

08012434 <ai_face_detection_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_face_detection_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8012434:	b580      	push	{r7, lr}
 8012436:	b082      	sub	sp, #8
 8012438:	af00      	add	r7, sp, #0
 801243a:	6078      	str	r0, [r7, #4]
 801243c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d104      	bne.n	801244e <ai_face_detection_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8012444:	4b06      	ldr	r3, [pc, #24]	; (8012460 <ai_face_detection_outputs_get+0x2c>)
 8012446:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	4a06      	ldr	r2, [pc, #24]	; (8012464 <ai_face_detection_outputs_get+0x30>)
 801244c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 801244e:	6839      	ldr	r1, [r7, #0]
 8012450:	6878      	ldr	r0, [r7, #4]
 8012452:	f000 fc37 	bl	8012cc4 <ai_platform_outputs_get>
 8012456:	4603      	mov	r3, r0
}
 8012458:	4618      	mov	r0, r3
 801245a:	3708      	adds	r7, #8
 801245c:	46bd      	mov	sp, r7
 801245e:	bd80      	pop	{r7, pc}
 8012460:	24008140 	.word	0x24008140
 8012464:	a1c00100 	.word	0xa1c00100

08012468 <ai_face_detection_init>:
}

AI_API_ENTRY
ai_bool ai_face_detection_init(
  ai_handle network, const ai_network_params* params)
{
 8012468:	b580      	push	{r7, lr}
 801246a:	b084      	sub	sp, #16
 801246c:	af00      	add	r7, sp, #0
 801246e:	6078      	str	r0, [r7, #4]
 8012470:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8012472:	6839      	ldr	r1, [r7, #0]
 8012474:	6878      	ldr	r0, [r7, #4]
 8012476:	f000 ff87 	bl	8013388 <ai_platform_network_init>
 801247a:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d101      	bne.n	8012486 <ai_face_detection_init+0x1e>
 8012482:	2300      	movs	r3, #0
 8012484:	e028      	b.n	80124d8 <ai_face_detection_init+0x70>

  ai_bool ok = true;
 8012486:	2301      	movs	r3, #1
 8012488:	72fb      	strb	r3, [r7, #11]
  ok &= face_detection_configure_weights(net_ctx, params);
 801248a:	6839      	ldr	r1, [r7, #0]
 801248c:	68f8      	ldr	r0, [r7, #12]
 801248e:	f7fe feb3 	bl	80111f8 <face_detection_configure_weights>
 8012492:	4603      	mov	r3, r0
 8012494:	461a      	mov	r2, r3
 8012496:	7afb      	ldrb	r3, [r7, #11]
 8012498:	4013      	ands	r3, r2
 801249a:	2b00      	cmp	r3, #0
 801249c:	bf14      	ite	ne
 801249e:	2301      	movne	r3, #1
 80124a0:	2300      	moveq	r3, #0
 80124a2:	72fb      	strb	r3, [r7, #11]
  ok &= face_detection_configure_activations(net_ctx, params);
 80124a4:	6839      	ldr	r1, [r7, #0]
 80124a6:	68f8      	ldr	r0, [r7, #12]
 80124a8:	f7fd fd24 	bl	800fef4 <face_detection_configure_activations>
 80124ac:	4603      	mov	r3, r0
 80124ae:	461a      	mov	r2, r3
 80124b0:	7afb      	ldrb	r3, [r7, #11]
 80124b2:	4013      	ands	r3, r2
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	bf14      	ite	ne
 80124b8:	2301      	movne	r3, #1
 80124ba:	2300      	moveq	r3, #0
 80124bc:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80124be:	6878      	ldr	r0, [r7, #4]
 80124c0:	f001 f8fe 	bl	80136c0 <ai_platform_network_post_init>
 80124c4:	4603      	mov	r3, r0
 80124c6:	461a      	mov	r2, r3
 80124c8:	7afb      	ldrb	r3, [r7, #11]
 80124ca:	4013      	ands	r3, r2
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	bf14      	ite	ne
 80124d0:	2301      	movne	r3, #1
 80124d2:	2300      	moveq	r3, #0
 80124d4:	72fb      	strb	r3, [r7, #11]

  return ok;
 80124d6:	7afb      	ldrb	r3, [r7, #11]
}
 80124d8:	4618      	mov	r0, r3
 80124da:	3710      	adds	r7, #16
 80124dc:	46bd      	mov	sp, r7
 80124de:	bd80      	pop	{r7, pc}

080124e0 <ai_face_detection_run>:


AI_API_ENTRY
ai_i32 ai_face_detection_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b084      	sub	sp, #16
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	60f8      	str	r0, [r7, #12]
 80124e8:	60b9      	str	r1, [r7, #8]
 80124ea:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80124ec:	687a      	ldr	r2, [r7, #4]
 80124ee:	68b9      	ldr	r1, [r7, #8]
 80124f0:	68f8      	ldr	r0, [r7, #12]
 80124f2:	f001 fa0f 	bl	8013914 <ai_platform_network_process>
 80124f6:	4603      	mov	r3, r0
}
 80124f8:	4618      	mov	r0, r3
 80124fa:	3710      	adds	r7, #16
 80124fc:	46bd      	mov	sp, r7
 80124fe:	bd80      	pop	{r7, pc}

08012500 <ai_face_detection_data_params_get>:
 * @ingroup face_detection_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_face_detection_data_params_get(ai_network_params* params)
{
 8012500:	b580      	push	{r7, lr}
 8012502:	b086      	sub	sp, #24
 8012504:	af00      	add	r7, sp, #0
 8012506:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d101      	bne.n	8012512 <ai_face_detection_data_params_get+0x12>
 801250e:	2300      	movs	r3, #0
 8012510:	e016      	b.n	8012540 <ai_face_detection_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8012512:	4a0d      	ldr	r2, [pc, #52]	; (8012548 <ai_face_detection_data_params_get+0x48>)
 8012514:	f107 0310 	add.w	r3, r7, #16
 8012518:	e892 0003 	ldmia.w	r2, {r0, r1}
 801251c:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_FACE_DETECTION_DATA_ACTIVATIONS_COUNT, g_face_detection_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8012520:	4a0a      	ldr	r2, [pc, #40]	; (801254c <ai_face_detection_data_params_get+0x4c>)
 8012522:	f107 0308 	add.w	r3, r7, #8
 8012526:	e892 0003 	ldmia.w	r2, {r0, r1}
 801252a:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_FACE_DETECTION_DATA_WEIGHTS_COUNT, g_face_detection_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 801252e:	f107 0210 	add.w	r2, r7, #16
 8012532:	f107 0308 	add.w	r3, r7, #8
 8012536:	4619      	mov	r1, r3
 8012538:	6878      	ldr	r0, [r7, #4]
 801253a:	f000 f90b 	bl	8012754 <ai_platform_bind_network_params>
 801253e:	4603      	mov	r3, r0
}
 8012540:	4618      	mov	r0, r3
 8012542:	3718      	adds	r7, #24
 8012544:	46bd      	mov	sp, r7
 8012546:	bd80      	pop	{r7, pc}
 8012548:	0801cd68 	.word	0x0801cd68
 801254c:	0801cd70 	.word	0x0801cd70

08012550 <ai_buffer_get_size>:
 8012550:	b368      	cbz	r0, 80125ae <ai_buffer_get_size+0x5e>
 8012552:	4b17      	ldr	r3, [pc, #92]	; (80125b0 <ai_buffer_get_size+0x60>)
 8012554:	4a17      	ldr	r2, [pc, #92]	; (80125b4 <ai_buffer_get_size+0x64>)
 8012556:	b410      	push	{r4}
 8012558:	6804      	ldr	r4, [r0, #0]
 801255a:	4023      	ands	r3, r4
 801255c:	4293      	cmp	r3, r2
 801255e:	d123      	bne.n	80125a8 <ai_buffer_get_size+0x58>
 8012560:	b311      	cbz	r1, 80125a8 <ai_buffer_get_size+0x58>
 8012562:	6984      	ldr	r4, [r0, #24]
 8012564:	6862      	ldr	r2, [r4, #4]
 8012566:	321f      	adds	r2, #31
 8012568:	f022 021f 	bic.w	r2, r2, #31
 801256c:	7d03      	ldrb	r3, [r0, #20]
 801256e:	6941      	ldr	r1, [r0, #20]
 8012570:	f1a3 0301 	sub.w	r3, r3, #1
 8012574:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8012578:	fab3 f383 	clz	r3, r3
 801257c:	095b      	lsrs	r3, r3, #5
 801257e:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8012582:	da0c      	bge.n	801259e <ai_buffer_get_size+0x4e>
 8012584:	2b01      	cmp	r3, #1
 8012586:	d103      	bne.n	8012590 <ai_buffer_get_size+0x40>
 8012588:	2802      	cmp	r0, #2
 801258a:	f04f 0302 	mov.w	r3, #2
 801258e:	d006      	beq.n	801259e <ai_buffer_get_size+0x4e>
 8012590:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8012594:	3301      	adds	r3, #1
 8012596:	4298      	cmp	r0, r3
 8012598:	fb01 f202 	mul.w	r2, r1, r2
 801259c:	d1f2      	bne.n	8012584 <ai_buffer_get_size+0x34>
 801259e:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80125a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80125a6:	4770      	bx	lr
 80125a8:	6984      	ldr	r4, [r0, #24]
 80125aa:	6862      	ldr	r2, [r4, #4]
 80125ac:	e7de      	b.n	801256c <ai_buffer_get_size+0x1c>
 80125ae:	4770      	bx	lr
 80125b0:	017fffff 	.word	0x017fffff
 80125b4:	000400c0 	.word	0x000400c0

080125b8 <ai_buffer_array_sane>:
 80125b8:	b138      	cbz	r0, 80125ca <ai_buffer_array_sane+0x12>
 80125ba:	6843      	ldr	r3, [r0, #4]
 80125bc:	b123      	cbz	r3, 80125c8 <ai_buffer_array_sane+0x10>
 80125be:	8840      	ldrh	r0, [r0, #2]
 80125c0:	3800      	subs	r0, #0
 80125c2:	bf18      	it	ne
 80125c4:	2001      	movne	r0, #1
 80125c6:	4770      	bx	lr
 80125c8:	4618      	mov	r0, r3
 80125ca:	4770      	bx	lr

080125cc <ai_buffer_array_item_set_address>:
 80125cc:	b150      	cbz	r0, 80125e4 <ai_buffer_array_item_set_address+0x18>
 80125ce:	6843      	ldr	r3, [r0, #4]
 80125d0:	b14b      	cbz	r3, 80125e6 <ai_buffer_array_item_set_address+0x1a>
 80125d2:	8840      	ldrh	r0, [r0, #2]
 80125d4:	b900      	cbnz	r0, 80125d8 <ai_buffer_array_item_set_address+0xc>
 80125d6:	4770      	bx	lr
 80125d8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80125dc:	2001      	movs	r0, #1
 80125de:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80125e2:	604a      	str	r2, [r1, #4]
 80125e4:	4770      	bx	lr
 80125e6:	4618      	mov	r0, r3
 80125e8:	4770      	bx	lr
 80125ea:	bf00      	nop

080125ec <_ai_platform_acquire_crc>:
 80125ec:	2001      	movs	r0, #1
 80125ee:	4770      	bx	lr

080125f0 <_ai_platform_release_crc>:
 80125f0:	4770      	bx	lr
 80125f2:	bf00      	nop

080125f4 <ai_platform_get_weights_map>:
 80125f4:	2900      	cmp	r1, #0
 80125f6:	bf18      	it	ne
 80125f8:	2800      	cmpne	r0, #0
 80125fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125fc:	bf0c      	ite	eq
 80125fe:	2401      	moveq	r4, #1
 8012600:	2400      	movne	r4, #0
 8012602:	2a00      	cmp	r2, #0
 8012604:	bf08      	it	eq
 8012606:	f044 0401 	orreq.w	r4, r4, #1
 801260a:	b114      	cbz	r4, 8012612 <ai_platform_get_weights_map+0x1e>
 801260c:	2400      	movs	r4, #0
 801260e:	4620      	mov	r0, r4
 8012610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012612:	4616      	mov	r6, r2
 8012614:	4b22      	ldr	r3, [pc, #136]	; (80126a0 <ai_platform_get_weights_map+0xac>)
 8012616:	6812      	ldr	r2, [r2, #0]
 8012618:	4605      	mov	r5, r0
 801261a:	460f      	mov	r7, r1
 801261c:	429a      	cmp	r2, r3
 801261e:	d022      	beq.n	8012666 <ai_platform_get_weights_map+0x72>
 8012620:	6870      	ldr	r0, [r6, #4]
 8012622:	2800      	cmp	r0, #0
 8012624:	d0f2      	beq.n	801260c <ai_platform_get_weights_map+0x18>
 8012626:	6806      	ldr	r6, [r0, #0]
 8012628:	429e      	cmp	r6, r3
 801262a:	d006      	beq.n	801263a <ai_platform_get_weights_map+0x46>
 801262c:	f1a1 0401 	sub.w	r4, r1, #1
 8012630:	6028      	str	r0, [r5, #0]
 8012632:	fab4 f484 	clz	r4, r4
 8012636:	0964      	lsrs	r4, r4, #5
 8012638:	e7e9      	b.n	801260e <ai_platform_get_weights_map+0x1a>
 801263a:	3d04      	subs	r5, #4
 801263c:	4602      	mov	r2, r0
 801263e:	4621      	mov	r1, r4
 8012640:	e000      	b.n	8012644 <ai_platform_get_weights_map+0x50>
 8012642:	4619      	mov	r1, r3
 8012644:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8012648:	42b3      	cmp	r3, r6
 801264a:	d025      	beq.n	8012698 <ai_platform_get_weights_map+0xa4>
 801264c:	f845 3f04 	str.w	r3, [r5, #4]!
 8012650:	1c4b      	adds	r3, r1, #1
 8012652:	429f      	cmp	r7, r3
 8012654:	d8f5      	bhi.n	8012642 <ai_platform_get_weights_map+0x4e>
 8012656:	d1da      	bne.n	801260e <ai_platform_get_weights_map+0x1a>
 8012658:	3102      	adds	r1, #2
 801265a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 801265e:	42b3      	cmp	r3, r6
 8012660:	d1d5      	bne.n	801260e <ai_platform_get_weights_map+0x1a>
 8012662:	2401      	movs	r4, #1
 8012664:	e7d3      	b.n	801260e <ai_platform_get_weights_map+0x1a>
 8012666:	1d30      	adds	r0, r6, #4
 8012668:	f7ff ffa6 	bl	80125b8 <ai_buffer_array_sane>
 801266c:	2800      	cmp	r0, #0
 801266e:	d0cd      	beq.n	801260c <ai_platform_get_weights_map+0x18>
 8012670:	88f3      	ldrh	r3, [r6, #6]
 8012672:	429f      	cmp	r7, r3
 8012674:	d1ca      	bne.n	801260c <ai_platform_get_weights_map+0x18>
 8012676:	3d04      	subs	r5, #4
 8012678:	4622      	mov	r2, r4
 801267a:	68b3      	ldr	r3, [r6, #8]
 801267c:	4423      	add	r3, r4
 801267e:	341c      	adds	r4, #28
 8012680:	685b      	ldr	r3, [r3, #4]
 8012682:	b123      	cbz	r3, 801268e <ai_platform_get_weights_map+0x9a>
 8012684:	3201      	adds	r2, #1
 8012686:	f845 3f04 	str.w	r3, [r5, #4]!
 801268a:	4297      	cmp	r7, r2
 801268c:	d8f5      	bhi.n	801267a <ai_platform_get_weights_map+0x86>
 801268e:	1abc      	subs	r4, r7, r2
 8012690:	fab4 f484 	clz	r4, r4
 8012694:	0964      	lsrs	r4, r4, #5
 8012696:	e7ba      	b.n	801260e <ai_platform_get_weights_map+0x1a>
 8012698:	428f      	cmp	r7, r1
 801269a:	d1b8      	bne.n	801260e <ai_platform_get_weights_map+0x1a>
 801269c:	e7e1      	b.n	8012662 <ai_platform_get_weights_map+0x6e>
 801269e:	bf00      	nop
 80126a0:	a1facade 	.word	0xa1facade

080126a4 <ai_platform_get_activations_map>:
 80126a4:	2900      	cmp	r1, #0
 80126a6:	bf18      	it	ne
 80126a8:	2800      	cmpne	r0, #0
 80126aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126ac:	bf0c      	ite	eq
 80126ae:	2401      	moveq	r4, #1
 80126b0:	2400      	movne	r4, #0
 80126b2:	2a00      	cmp	r2, #0
 80126b4:	bf08      	it	eq
 80126b6:	f044 0401 	orreq.w	r4, r4, #1
 80126ba:	b114      	cbz	r4, 80126c2 <ai_platform_get_activations_map+0x1e>
 80126bc:	2400      	movs	r4, #0
 80126be:	4620      	mov	r0, r4
 80126c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80126c2:	4616      	mov	r6, r2
 80126c4:	4b22      	ldr	r3, [pc, #136]	; (8012750 <ai_platform_get_activations_map+0xac>)
 80126c6:	6812      	ldr	r2, [r2, #0]
 80126c8:	4605      	mov	r5, r0
 80126ca:	460f      	mov	r7, r1
 80126cc:	429a      	cmp	r2, r3
 80126ce:	d022      	beq.n	8012716 <ai_platform_get_activations_map+0x72>
 80126d0:	6a30      	ldr	r0, [r6, #32]
 80126d2:	2800      	cmp	r0, #0
 80126d4:	d0f2      	beq.n	80126bc <ai_platform_get_activations_map+0x18>
 80126d6:	6806      	ldr	r6, [r0, #0]
 80126d8:	429e      	cmp	r6, r3
 80126da:	d006      	beq.n	80126ea <ai_platform_get_activations_map+0x46>
 80126dc:	f1a1 0401 	sub.w	r4, r1, #1
 80126e0:	6028      	str	r0, [r5, #0]
 80126e2:	fab4 f484 	clz	r4, r4
 80126e6:	0964      	lsrs	r4, r4, #5
 80126e8:	e7e9      	b.n	80126be <ai_platform_get_activations_map+0x1a>
 80126ea:	3d04      	subs	r5, #4
 80126ec:	4602      	mov	r2, r0
 80126ee:	4621      	mov	r1, r4
 80126f0:	e000      	b.n	80126f4 <ai_platform_get_activations_map+0x50>
 80126f2:	4619      	mov	r1, r3
 80126f4:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80126f8:	42b3      	cmp	r3, r6
 80126fa:	d026      	beq.n	801274a <ai_platform_get_activations_map+0xa6>
 80126fc:	f845 3f04 	str.w	r3, [r5, #4]!
 8012700:	1c4b      	adds	r3, r1, #1
 8012702:	429f      	cmp	r7, r3
 8012704:	d8f5      	bhi.n	80126f2 <ai_platform_get_activations_map+0x4e>
 8012706:	d1da      	bne.n	80126be <ai_platform_get_activations_map+0x1a>
 8012708:	3102      	adds	r1, #2
 801270a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 801270e:	42b3      	cmp	r3, r6
 8012710:	d1d5      	bne.n	80126be <ai_platform_get_activations_map+0x1a>
 8012712:	2401      	movs	r4, #1
 8012714:	e7d3      	b.n	80126be <ai_platform_get_activations_map+0x1a>
 8012716:	f106 000c 	add.w	r0, r6, #12
 801271a:	f7ff ff4d 	bl	80125b8 <ai_buffer_array_sane>
 801271e:	2800      	cmp	r0, #0
 8012720:	d0cc      	beq.n	80126bc <ai_platform_get_activations_map+0x18>
 8012722:	89f3      	ldrh	r3, [r6, #14]
 8012724:	429f      	cmp	r7, r3
 8012726:	d1c9      	bne.n	80126bc <ai_platform_get_activations_map+0x18>
 8012728:	3d04      	subs	r5, #4
 801272a:	4622      	mov	r2, r4
 801272c:	6933      	ldr	r3, [r6, #16]
 801272e:	4423      	add	r3, r4
 8012730:	341c      	adds	r4, #28
 8012732:	685b      	ldr	r3, [r3, #4]
 8012734:	b123      	cbz	r3, 8012740 <ai_platform_get_activations_map+0x9c>
 8012736:	3201      	adds	r2, #1
 8012738:	f845 3f04 	str.w	r3, [r5, #4]!
 801273c:	4297      	cmp	r7, r2
 801273e:	d8f5      	bhi.n	801272c <ai_platform_get_activations_map+0x88>
 8012740:	1abc      	subs	r4, r7, r2
 8012742:	fab4 f484 	clz	r4, r4
 8012746:	0964      	lsrs	r4, r4, #5
 8012748:	e7b9      	b.n	80126be <ai_platform_get_activations_map+0x1a>
 801274a:	428f      	cmp	r7, r1
 801274c:	d1b7      	bne.n	80126be <ai_platform_get_activations_map+0x1a>
 801274e:	e7e0      	b.n	8012712 <ai_platform_get_activations_map+0x6e>
 8012750:	a1facade 	.word	0xa1facade

08012754 <ai_platform_bind_network_params>:
 8012754:	2a00      	cmp	r2, #0
 8012756:	bf18      	it	ne
 8012758:	2900      	cmpne	r1, #0
 801275a:	d010      	beq.n	801277e <ai_platform_bind_network_params+0x2a>
 801275c:	b178      	cbz	r0, 801277e <ai_platform_bind_network_params+0x2a>
 801275e:	4603      	mov	r3, r0
 8012760:	4808      	ldr	r0, [pc, #32]	; (8012784 <ai_platform_bind_network_params+0x30>)
 8012762:	f103 0c0c 	add.w	ip, r3, #12
 8012766:	f843 0b04 	str.w	r0, [r3], #4
 801276a:	c903      	ldmia	r1, {r0, r1}
 801276c:	e883 0003 	stmia.w	r3, {r0, r1}
 8012770:	2301      	movs	r3, #1
 8012772:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012776:	e88c 0003 	stmia.w	ip, {r0, r1}
 801277a:	4618      	mov	r0, r3
 801277c:	4770      	bx	lr
 801277e:	2300      	movs	r3, #0
 8012780:	4618      	mov	r0, r3
 8012782:	4770      	bx	lr
 8012784:	a1facade 	.word	0xa1facade

08012788 <ai_platform_network_get_error>:
 8012788:	b510      	push	{r4, lr}
 801278a:	2800      	cmp	r0, #0
 801278c:	d03f      	beq.n	801280e <ai_platform_network_get_error+0x86>
 801278e:	4b7d      	ldr	r3, [pc, #500]	; (8012984 <ai_platform_network_get_error+0x1fc>)
 8012790:	4604      	mov	r4, r0
 8012792:	6802      	ldr	r2, [r0, #0]
 8012794:	429a      	cmp	r2, r3
 8012796:	d13a      	bne.n	801280e <ai_platform_network_get_error+0x86>
 8012798:	f7ff ff28 	bl	80125ec <_ai_platform_acquire_crc>
 801279c:	4b7a      	ldr	r3, [pc, #488]	; (8012988 <ai_platform_network_get_error+0x200>)
 801279e:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80127a8:	189a      	adds	r2, r3, r2
 80127aa:	2a01      	cmp	r2, #1
 80127ac:	f240 8086 	bls.w	80128bc <ai_platform_network_get_error+0x134>
 80127b0:	f240 4249 	movw	r2, #1097	; 0x449
 80127b4:	4293      	cmp	r3, r2
 80127b6:	f000 8081 	beq.w	80128bc <ai_platform_network_get_error+0x134>
 80127ba:	4a74      	ldr	r2, [pc, #464]	; (801298c <ai_platform_network_get_error+0x204>)
 80127bc:	6813      	ldr	r3, [r2, #0]
 80127be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80127c2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80127c6:	f000 8087 	beq.w	80128d8 <ai_platform_network_get_error+0x150>
 80127ca:	6813      	ldr	r3, [r2, #0]
 80127cc:	f240 4183 	movw	r1, #1155	; 0x483
 80127d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80127d4:	428b      	cmp	r3, r1
 80127d6:	f000 80a9 	beq.w	801292c <ai_platform_network_get_error+0x1a4>
 80127da:	6813      	ldr	r3, [r2, #0]
 80127dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80127e0:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80127e4:	f000 80c0 	beq.w	8012968 <ai_platform_network_get_error+0x1e0>
 80127e8:	6813      	ldr	r3, [r2, #0]
 80127ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	f040 8082 	bne.w	80128f8 <ai_platform_network_get_error+0x170>
 80127f4:	4a66      	ldr	r2, [pc, #408]	; (8012990 <ai_platform_network_get_error+0x208>)
 80127f6:	2301      	movs	r3, #1
 80127f8:	6093      	str	r3, [r2, #8]
 80127fa:	6893      	ldr	r3, [r2, #8]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d1fc      	bne.n	80127fa <ai_platform_network_get_error+0x72>
 8012800:	4964      	ldr	r1, [pc, #400]	; (8012994 <ai_platform_network_get_error+0x20c>)
 8012802:	4b65      	ldr	r3, [pc, #404]	; (8012998 <ai_platform_network_get_error+0x210>)
 8012804:	6011      	str	r1, [r2, #0]
 8012806:	6812      	ldr	r2, [r2, #0]
 8012808:	429a      	cmp	r2, r3
 801280a:	d075      	beq.n	80128f8 <ai_platform_network_get_error+0x170>
 801280c:	e7fe      	b.n	801280c <ai_platform_network_get_error+0x84>
 801280e:	f7ff feed 	bl	80125ec <_ai_platform_acquire_crc>
 8012812:	4b5d      	ldr	r3, [pc, #372]	; (8012988 <ai_platform_network_get_error+0x200>)
 8012814:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801281e:	185a      	adds	r2, r3, r1
 8012820:	2a01      	cmp	r2, #1
 8012822:	d929      	bls.n	8012878 <ai_platform_network_get_error+0xf0>
 8012824:	f240 4249 	movw	r2, #1097	; 0x449
 8012828:	4293      	cmp	r3, r2
 801282a:	d025      	beq.n	8012878 <ai_platform_network_get_error+0xf0>
 801282c:	4a57      	ldr	r2, [pc, #348]	; (801298c <ai_platform_network_get_error+0x204>)
 801282e:	6813      	ldr	r3, [r2, #0]
 8012830:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012834:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8012838:	d02b      	beq.n	8012892 <ai_platform_network_get_error+0x10a>
 801283a:	6813      	ldr	r3, [r2, #0]
 801283c:	f240 4183 	movw	r1, #1155	; 0x483
 8012840:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012844:	428b      	cmp	r3, r1
 8012846:	d060      	beq.n	801290a <ai_platform_network_get_error+0x182>
 8012848:	6813      	ldr	r3, [r2, #0]
 801284a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801284e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8012852:	d07c      	beq.n	801294e <ai_platform_network_get_error+0x1c6>
 8012854:	6813      	ldr	r3, [r2, #0]
 8012856:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801285a:	2b00      	cmp	r3, #0
 801285c:	d129      	bne.n	80128b2 <ai_platform_network_get_error+0x12a>
 801285e:	4a4c      	ldr	r2, [pc, #304]	; (8012990 <ai_platform_network_get_error+0x208>)
 8012860:	2301      	movs	r3, #1
 8012862:	6093      	str	r3, [r2, #8]
 8012864:	6893      	ldr	r3, [r2, #8]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d1fc      	bne.n	8012864 <ai_platform_network_get_error+0xdc>
 801286a:	494a      	ldr	r1, [pc, #296]	; (8012994 <ai_platform_network_get_error+0x20c>)
 801286c:	4b4a      	ldr	r3, [pc, #296]	; (8012998 <ai_platform_network_get_error+0x210>)
 801286e:	6011      	str	r1, [r2, #0]
 8012870:	6812      	ldr	r2, [r2, #0]
 8012872:	429a      	cmp	r2, r3
 8012874:	d01d      	beq.n	80128b2 <ai_platform_network_get_error+0x12a>
 8012876:	e7fe      	b.n	8012876 <ai_platform_network_get_error+0xee>
 8012878:	4a45      	ldr	r2, [pc, #276]	; (8012990 <ai_platform_network_get_error+0x208>)
 801287a:	2301      	movs	r3, #1
 801287c:	6093      	str	r3, [r2, #8]
 801287e:	6893      	ldr	r3, [r2, #8]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d1fc      	bne.n	801287e <ai_platform_network_get_error+0xf6>
 8012884:	4943      	ldr	r1, [pc, #268]	; (8012994 <ai_platform_network_get_error+0x20c>)
 8012886:	4b44      	ldr	r3, [pc, #272]	; (8012998 <ai_platform_network_get_error+0x210>)
 8012888:	6011      	str	r1, [r2, #0]
 801288a:	6812      	ldr	r2, [r2, #0]
 801288c:	429a      	cmp	r2, r3
 801288e:	d010      	beq.n	80128b2 <ai_platform_network_get_error+0x12a>
 8012890:	e7fe      	b.n	8012890 <ai_platform_network_get_error+0x108>
 8012892:	4a42      	ldr	r2, [pc, #264]	; (801299c <ai_platform_network_get_error+0x214>)
 8012894:	2301      	movs	r3, #1
 8012896:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801289a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d1fb      	bne.n	801289a <ai_platform_network_get_error+0x112>
 80128a2:	493c      	ldr	r1, [pc, #240]	; (8012994 <ai_platform_network_get_error+0x20c>)
 80128a4:	4b3c      	ldr	r3, [pc, #240]	; (8012998 <ai_platform_network_get_error+0x210>)
 80128a6:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80128aa:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80128ae:	429a      	cmp	r2, r3
 80128b0:	d111      	bne.n	80128d6 <ai_platform_network_get_error+0x14e>
 80128b2:	f7ff fe9d 	bl	80125f0 <_ai_platform_release_crc>
 80128b6:	f241 0010 	movw	r0, #4112	; 0x1010
 80128ba:	bd10      	pop	{r4, pc}
 80128bc:	4a34      	ldr	r2, [pc, #208]	; (8012990 <ai_platform_network_get_error+0x208>)
 80128be:	2301      	movs	r3, #1
 80128c0:	6093      	str	r3, [r2, #8]
 80128c2:	6893      	ldr	r3, [r2, #8]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d1fc      	bne.n	80128c2 <ai_platform_network_get_error+0x13a>
 80128c8:	4932      	ldr	r1, [pc, #200]	; (8012994 <ai_platform_network_get_error+0x20c>)
 80128ca:	4b33      	ldr	r3, [pc, #204]	; (8012998 <ai_platform_network_get_error+0x210>)
 80128cc:	6011      	str	r1, [r2, #0]
 80128ce:	6812      	ldr	r2, [r2, #0]
 80128d0:	429a      	cmp	r2, r3
 80128d2:	d011      	beq.n	80128f8 <ai_platform_network_get_error+0x170>
 80128d4:	e7fe      	b.n	80128d4 <ai_platform_network_get_error+0x14c>
 80128d6:	e7fe      	b.n	80128d6 <ai_platform_network_get_error+0x14e>
 80128d8:	4a30      	ldr	r2, [pc, #192]	; (801299c <ai_platform_network_get_error+0x214>)
 80128da:	2301      	movs	r3, #1
 80128dc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80128e0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d1fb      	bne.n	80128e0 <ai_platform_network_get_error+0x158>
 80128e8:	492a      	ldr	r1, [pc, #168]	; (8012994 <ai_platform_network_get_error+0x20c>)
 80128ea:	4b2b      	ldr	r3, [pc, #172]	; (8012998 <ai_platform_network_get_error+0x210>)
 80128ec:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80128f0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80128f4:	429a      	cmp	r2, r3
 80128f6:	d107      	bne.n	8012908 <ai_platform_network_get_error+0x180>
 80128f8:	f7ff fe7a 	bl	80125f0 <_ai_platform_release_crc>
 80128fc:	f104 0010 	add.w	r0, r4, #16
 8012900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012904:	f001 bd4a 	b.w	801439c <core_get_error>
 8012908:	e7fe      	b.n	8012908 <ai_platform_network_get_error+0x180>
 801290a:	4a24      	ldr	r2, [pc, #144]	; (801299c <ai_platform_network_get_error+0x214>)
 801290c:	2301      	movs	r3, #1
 801290e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8012912:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8012916:	2b00      	cmp	r3, #0
 8012918:	d1fb      	bne.n	8012912 <ai_platform_network_get_error+0x18a>
 801291a:	491e      	ldr	r1, [pc, #120]	; (8012994 <ai_platform_network_get_error+0x20c>)
 801291c:	4b1e      	ldr	r3, [pc, #120]	; (8012998 <ai_platform_network_get_error+0x210>)
 801291e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8012922:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8012926:	429a      	cmp	r2, r3
 8012928:	d0c3      	beq.n	80128b2 <ai_platform_network_get_error+0x12a>
 801292a:	e7fe      	b.n	801292a <ai_platform_network_get_error+0x1a2>
 801292c:	4a1b      	ldr	r2, [pc, #108]	; (801299c <ai_platform_network_get_error+0x214>)
 801292e:	2301      	movs	r3, #1
 8012930:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8012934:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8012938:	2b00      	cmp	r3, #0
 801293a:	d1fb      	bne.n	8012934 <ai_platform_network_get_error+0x1ac>
 801293c:	4915      	ldr	r1, [pc, #84]	; (8012994 <ai_platform_network_get_error+0x20c>)
 801293e:	4b16      	ldr	r3, [pc, #88]	; (8012998 <ai_platform_network_get_error+0x210>)
 8012940:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8012944:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8012948:	429a      	cmp	r2, r3
 801294a:	d0d5      	beq.n	80128f8 <ai_platform_network_get_error+0x170>
 801294c:	e7fe      	b.n	801294c <ai_platform_network_get_error+0x1c4>
 801294e:	4a10      	ldr	r2, [pc, #64]	; (8012990 <ai_platform_network_get_error+0x208>)
 8012950:	2301      	movs	r3, #1
 8012952:	6093      	str	r3, [r2, #8]
 8012954:	6893      	ldr	r3, [r2, #8]
 8012956:	2b00      	cmp	r3, #0
 8012958:	d1fc      	bne.n	8012954 <ai_platform_network_get_error+0x1cc>
 801295a:	490e      	ldr	r1, [pc, #56]	; (8012994 <ai_platform_network_get_error+0x20c>)
 801295c:	4b0e      	ldr	r3, [pc, #56]	; (8012998 <ai_platform_network_get_error+0x210>)
 801295e:	6011      	str	r1, [r2, #0]
 8012960:	6812      	ldr	r2, [r2, #0]
 8012962:	429a      	cmp	r2, r3
 8012964:	d0a5      	beq.n	80128b2 <ai_platform_network_get_error+0x12a>
 8012966:	e7fe      	b.n	8012966 <ai_platform_network_get_error+0x1de>
 8012968:	4a09      	ldr	r2, [pc, #36]	; (8012990 <ai_platform_network_get_error+0x208>)
 801296a:	2301      	movs	r3, #1
 801296c:	6093      	str	r3, [r2, #8]
 801296e:	6893      	ldr	r3, [r2, #8]
 8012970:	2b00      	cmp	r3, #0
 8012972:	d1fc      	bne.n	801296e <ai_platform_network_get_error+0x1e6>
 8012974:	4907      	ldr	r1, [pc, #28]	; (8012994 <ai_platform_network_get_error+0x20c>)
 8012976:	4b08      	ldr	r3, [pc, #32]	; (8012998 <ai_platform_network_get_error+0x210>)
 8012978:	6011      	str	r1, [r2, #0]
 801297a:	6812      	ldr	r2, [r2, #0]
 801297c:	429a      	cmp	r2, r3
 801297e:	d0bb      	beq.n	80128f8 <ai_platform_network_get_error+0x170>
 8012980:	e7fe      	b.n	8012980 <ai_platform_network_get_error+0x1f8>
 8012982:	bf00      	nop
 8012984:	a1c00100 	.word	0xa1c00100
 8012988:	e0042000 	.word	0xe0042000
 801298c:	5c001000 	.word	0x5c001000
 8012990:	40023000 	.word	0x40023000
 8012994:	f407a5c2 	.word	0xf407a5c2
 8012998:	b5e8b5cd 	.word	0xb5e8b5cd
 801299c:	58024000 	.word	0x58024000

080129a0 <ai_platform_network_set_error>:
 80129a0:	b110      	cbz	r0, 80129a8 <ai_platform_network_set_error+0x8>
 80129a2:	3010      	adds	r0, #16
 80129a4:	f001 bd00 	b.w	80143a8 <core_set_error>
 80129a8:	4770      	bx	lr
 80129aa:	bf00      	nop

080129ac <ai_platform_inputs_get>:
 80129ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129b0:	b085      	sub	sp, #20
 80129b2:	9102      	str	r1, [sp, #8]
 80129b4:	2800      	cmp	r0, #0
 80129b6:	f000 8093 	beq.w	8012ae0 <ai_platform_inputs_get+0x134>
 80129ba:	4baa      	ldr	r3, [pc, #680]	; (8012c64 <ai_platform_inputs_get+0x2b8>)
 80129bc:	4681      	mov	r9, r0
 80129be:	6802      	ldr	r2, [r0, #0]
 80129c0:	429a      	cmp	r2, r3
 80129c2:	f040 808d 	bne.w	8012ae0 <ai_platform_inputs_get+0x134>
 80129c6:	f7ff fe11 	bl	80125ec <_ai_platform_acquire_crc>
 80129ca:	4ba7      	ldr	r3, [pc, #668]	; (8012c68 <ai_platform_inputs_get+0x2bc>)
 80129cc:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80129d6:	189a      	adds	r2, r3, r2
 80129d8:	2a01      	cmp	r2, #1
 80129da:	f240 80da 	bls.w	8012b92 <ai_platform_inputs_get+0x1e6>
 80129de:	f240 4249 	movw	r2, #1097	; 0x449
 80129e2:	4293      	cmp	r3, r2
 80129e4:	f000 80d5 	beq.w	8012b92 <ai_platform_inputs_get+0x1e6>
 80129e8:	4aa0      	ldr	r2, [pc, #640]	; (8012c6c <ai_platform_inputs_get+0x2c0>)
 80129ea:	6813      	ldr	r3, [r2, #0]
 80129ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80129f0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80129f4:	f000 80dc 	beq.w	8012bb0 <ai_platform_inputs_get+0x204>
 80129f8:	6813      	ldr	r3, [r2, #0]
 80129fa:	f240 4183 	movw	r1, #1155	; 0x483
 80129fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012a02:	428b      	cmp	r3, r1
 8012a04:	f000 810e 	beq.w	8012c24 <ai_platform_inputs_get+0x278>
 8012a08:	6813      	ldr	r3, [r2, #0]
 8012a0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012a0e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8012a12:	f000 8143 	beq.w	8012c9c <ai_platform_inputs_get+0x2f0>
 8012a16:	6813      	ldr	r3, [r2, #0]
 8012a18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	f000 8113 	beq.w	8012c48 <ai_platform_inputs_get+0x29c>
 8012a22:	f7ff fde5 	bl	80125f0 <_ai_platform_release_crc>
 8012a26:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	f000 80d2 	beq.w	8012bd4 <ai_platform_inputs_get+0x228>
 8012a30:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 8012a34:	f1ba 0f00 	cmp.w	sl, #0
 8012a38:	f000 80cc 	beq.w	8012bd4 <ai_platform_inputs_get+0x228>
 8012a3c:	2100      	movs	r1, #0
 8012a3e:	f8cd 900c 	str.w	r9, [sp, #12]
 8012a42:	460d      	mov	r5, r1
 8012a44:	4689      	mov	r9, r1
 8012a46:	e016      	b.n	8012a76 <ai_platform_inputs_get+0xca>
 8012a48:	9a01      	ldr	r2, [sp, #4]
 8012a4a:	2301      	movs	r3, #1
 8012a4c:	f848 3002 	str.w	r3, [r8, r2]
 8012a50:	69b2      	ldr	r2, [r6, #24]
 8012a52:	f04f 0301 	mov.w	r3, #1
 8012a56:	6856      	ldr	r6, [r2, #4]
 8012a58:	3501      	adds	r5, #1
 8012a5a:	f109 091c 	add.w	r9, r9, #28
 8012a5e:	7523      	strb	r3, [r4, #20]
 8012a60:	2300      	movs	r3, #0
 8012a62:	6962      	ldr	r2, [r4, #20]
 8012a64:	60a7      	str	r7, [r4, #8]
 8012a66:	f36b 221f 	bfi	r2, fp, #8, #24
 8012a6a:	6126      	str	r6, [r4, #16]
 8012a6c:	61a1      	str	r1, [r4, #24]
 8012a6e:	60e3      	str	r3, [r4, #12]
 8012a70:	6162      	str	r2, [r4, #20]
 8012a72:	e9c4 0c00 	strd	r0, ip, [r4]
 8012a76:	f8ba 3000 	ldrh.w	r3, [sl]
 8012a7a:	b2ac      	uxth	r4, r5
 8012a7c:	42ab      	cmp	r3, r5
 8012a7e:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8012a82:	9301      	str	r3, [sp, #4]
 8012a84:	f240 80b5 	bls.w	8012bf2 <ai_platform_inputs_get+0x246>
 8012a88:	f8da 3004 	ldr.w	r3, [sl, #4]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	f000 80b0 	beq.w	8012bf2 <ai_platform_inputs_get+0x246>
 8012a92:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8012a96:	2e00      	cmp	r6, #0
 8012a98:	f000 80ab 	beq.w	8012bf2 <ai_platform_inputs_get+0x246>
 8012a9c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8012aa0:	69b2      	ldr	r2, [r6, #24]
 8012aa2:	68f1      	ldr	r1, [r6, #12]
 8012aa4:	6810      	ldr	r0, [r2, #0]
 8012aa6:	9100      	str	r1, [sp, #0]
 8012aa8:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8012aac:	68b3      	ldr	r3, [r6, #8]
 8012aae:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8012ab2:	444c      	add	r4, r9
 8012ab4:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8012ab8:	f008 fbd0 	bl	801b25c <ai_array_to_buffer_fmt>
 8012abc:	69b2      	ldr	r2, [r6, #24]
 8012abe:	9900      	ldr	r1, [sp, #0]
 8012ac0:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8012ac4:	2f00      	cmp	r7, #0
 8012ac6:	d0c4      	beq.n	8012a52 <ai_platform_inputs_get+0xa6>
 8012ac8:	2200      	movs	r2, #0
 8012aca:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 8012ace:	6832      	ldr	r2, [r6, #0]
 8012ad0:	607a      	str	r2, [r7, #4]
 8012ad2:	b112      	cbz	r2, 8012ada <ai_platform_inputs_get+0x12e>
 8012ad4:	8852      	ldrh	r2, [r2, #2]
 8012ad6:	2a00      	cmp	r2, #0
 8012ad8:	d1b6      	bne.n	8012a48 <ai_platform_inputs_get+0x9c>
 8012ada:	69b2      	ldr	r2, [r6, #24]
 8012adc:	2700      	movs	r7, #0
 8012ade:	e7b8      	b.n	8012a52 <ai_platform_inputs_get+0xa6>
 8012ae0:	f7ff fd84 	bl	80125ec <_ai_platform_acquire_crc>
 8012ae4:	4b60      	ldr	r3, [pc, #384]	; (8012c68 <ai_platform_inputs_get+0x2bc>)
 8012ae6:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012af0:	185a      	adds	r2, r3, r1
 8012af2:	2a01      	cmp	r2, #1
 8012af4:	d92a      	bls.n	8012b4c <ai_platform_inputs_get+0x1a0>
 8012af6:	f240 4249 	movw	r2, #1097	; 0x449
 8012afa:	4293      	cmp	r3, r2
 8012afc:	d026      	beq.n	8012b4c <ai_platform_inputs_get+0x1a0>
 8012afe:	4a5b      	ldr	r2, [pc, #364]	; (8012c6c <ai_platform_inputs_get+0x2c0>)
 8012b00:	6813      	ldr	r3, [r2, #0]
 8012b02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012b06:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8012b0a:	d02c      	beq.n	8012b66 <ai_platform_inputs_get+0x1ba>
 8012b0c:	6813      	ldr	r3, [r2, #0]
 8012b0e:	f240 4183 	movw	r1, #1155	; 0x483
 8012b12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012b16:	428b      	cmp	r3, r1
 8012b18:	d073      	beq.n	8012c02 <ai_platform_inputs_get+0x256>
 8012b1a:	6813      	ldr	r3, [r2, #0]
 8012b1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012b20:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8012b24:	f000 80ac 	beq.w	8012c80 <ai_platform_inputs_get+0x2d4>
 8012b28:	6813      	ldr	r3, [r2, #0]
 8012b2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d129      	bne.n	8012b86 <ai_platform_inputs_get+0x1da>
 8012b32:	4a4f      	ldr	r2, [pc, #316]	; (8012c70 <ai_platform_inputs_get+0x2c4>)
 8012b34:	2301      	movs	r3, #1
 8012b36:	6093      	str	r3, [r2, #8]
 8012b38:	6893      	ldr	r3, [r2, #8]
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d1fc      	bne.n	8012b38 <ai_platform_inputs_get+0x18c>
 8012b3e:	494d      	ldr	r1, [pc, #308]	; (8012c74 <ai_platform_inputs_get+0x2c8>)
 8012b40:	4b4d      	ldr	r3, [pc, #308]	; (8012c78 <ai_platform_inputs_get+0x2cc>)
 8012b42:	6011      	str	r1, [r2, #0]
 8012b44:	6812      	ldr	r2, [r2, #0]
 8012b46:	429a      	cmp	r2, r3
 8012b48:	d01d      	beq.n	8012b86 <ai_platform_inputs_get+0x1da>
 8012b4a:	e7fe      	b.n	8012b4a <ai_platform_inputs_get+0x19e>
 8012b4c:	4a48      	ldr	r2, [pc, #288]	; (8012c70 <ai_platform_inputs_get+0x2c4>)
 8012b4e:	2301      	movs	r3, #1
 8012b50:	6093      	str	r3, [r2, #8]
 8012b52:	6893      	ldr	r3, [r2, #8]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d1fc      	bne.n	8012b52 <ai_platform_inputs_get+0x1a6>
 8012b58:	4946      	ldr	r1, [pc, #280]	; (8012c74 <ai_platform_inputs_get+0x2c8>)
 8012b5a:	4b47      	ldr	r3, [pc, #284]	; (8012c78 <ai_platform_inputs_get+0x2cc>)
 8012b5c:	6011      	str	r1, [r2, #0]
 8012b5e:	6812      	ldr	r2, [r2, #0]
 8012b60:	429a      	cmp	r2, r3
 8012b62:	d010      	beq.n	8012b86 <ai_platform_inputs_get+0x1da>
 8012b64:	e7fe      	b.n	8012b64 <ai_platform_inputs_get+0x1b8>
 8012b66:	4a45      	ldr	r2, [pc, #276]	; (8012c7c <ai_platform_inputs_get+0x2d0>)
 8012b68:	2301      	movs	r3, #1
 8012b6a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8012b6e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d1fb      	bne.n	8012b6e <ai_platform_inputs_get+0x1c2>
 8012b76:	493f      	ldr	r1, [pc, #252]	; (8012c74 <ai_platform_inputs_get+0x2c8>)
 8012b78:	4b3f      	ldr	r3, [pc, #252]	; (8012c78 <ai_platform_inputs_get+0x2cc>)
 8012b7a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8012b7e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8012b82:	429a      	cmp	r2, r3
 8012b84:	d113      	bne.n	8012bae <ai_platform_inputs_get+0x202>
 8012b86:	f7ff fd33 	bl	80125f0 <_ai_platform_release_crc>
 8012b8a:	2000      	movs	r0, #0
 8012b8c:	b005      	add	sp, #20
 8012b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b92:	4a37      	ldr	r2, [pc, #220]	; (8012c70 <ai_platform_inputs_get+0x2c4>)
 8012b94:	2301      	movs	r3, #1
 8012b96:	6093      	str	r3, [r2, #8]
 8012b98:	6893      	ldr	r3, [r2, #8]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d1fc      	bne.n	8012b98 <ai_platform_inputs_get+0x1ec>
 8012b9e:	4b35      	ldr	r3, [pc, #212]	; (8012c74 <ai_platform_inputs_get+0x2c8>)
 8012ba0:	6013      	str	r3, [r2, #0]
 8012ba2:	4b35      	ldr	r3, [pc, #212]	; (8012c78 <ai_platform_inputs_get+0x2cc>)
 8012ba4:	6812      	ldr	r2, [r2, #0]
 8012ba6:	429a      	cmp	r2, r3
 8012ba8:	f43f af3b 	beq.w	8012a22 <ai_platform_inputs_get+0x76>
 8012bac:	e7fe      	b.n	8012bac <ai_platform_inputs_get+0x200>
 8012bae:	e7fe      	b.n	8012bae <ai_platform_inputs_get+0x202>
 8012bb0:	4a32      	ldr	r2, [pc, #200]	; (8012c7c <ai_platform_inputs_get+0x2d0>)
 8012bb2:	2301      	movs	r3, #1
 8012bb4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8012bb8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d1fb      	bne.n	8012bb8 <ai_platform_inputs_get+0x20c>
 8012bc0:	4b2c      	ldr	r3, [pc, #176]	; (8012c74 <ai_platform_inputs_get+0x2c8>)
 8012bc2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8012bc6:	4b2c      	ldr	r3, [pc, #176]	; (8012c78 <ai_platform_inputs_get+0x2cc>)
 8012bc8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8012bcc:	429a      	cmp	r2, r3
 8012bce:	f43f af28 	beq.w	8012a22 <ai_platform_inputs_get+0x76>
 8012bd2:	e7fe      	b.n	8012bd2 <ai_platform_inputs_get+0x226>
 8012bd4:	2400      	movs	r4, #0
 8012bd6:	2218      	movs	r2, #24
 8012bd8:	2111      	movs	r1, #17
 8012bda:	f109 0010 	add.w	r0, r9, #16
 8012bde:	f001 fbe3 	bl	80143a8 <core_set_error>
 8012be2:	4620      	mov	r0, r4
 8012be4:	9b02      	ldr	r3, [sp, #8]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d0d0      	beq.n	8012b8c <ai_platform_inputs_get+0x1e0>
 8012bea:	801c      	strh	r4, [r3, #0]
 8012bec:	b005      	add	sp, #20
 8012bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bf2:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8012bf6:	2c00      	cmp	r4, #0
 8012bf8:	d0ec      	beq.n	8012bd4 <ai_platform_inputs_get+0x228>
 8012bfa:	f8da 3008 	ldr.w	r3, [sl, #8]
 8012bfe:	6858      	ldr	r0, [r3, #4]
 8012c00:	e7f0      	b.n	8012be4 <ai_platform_inputs_get+0x238>
 8012c02:	4a1e      	ldr	r2, [pc, #120]	; (8012c7c <ai_platform_inputs_get+0x2d0>)
 8012c04:	2301      	movs	r3, #1
 8012c06:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8012c0a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d1fb      	bne.n	8012c0a <ai_platform_inputs_get+0x25e>
 8012c12:	4918      	ldr	r1, [pc, #96]	; (8012c74 <ai_platform_inputs_get+0x2c8>)
 8012c14:	4b18      	ldr	r3, [pc, #96]	; (8012c78 <ai_platform_inputs_get+0x2cc>)
 8012c16:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8012c1a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8012c1e:	429a      	cmp	r2, r3
 8012c20:	d0b1      	beq.n	8012b86 <ai_platform_inputs_get+0x1da>
 8012c22:	e7fe      	b.n	8012c22 <ai_platform_inputs_get+0x276>
 8012c24:	4a15      	ldr	r2, [pc, #84]	; (8012c7c <ai_platform_inputs_get+0x2d0>)
 8012c26:	2301      	movs	r3, #1
 8012c28:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8012c2c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d1fb      	bne.n	8012c2c <ai_platform_inputs_get+0x280>
 8012c34:	4b0f      	ldr	r3, [pc, #60]	; (8012c74 <ai_platform_inputs_get+0x2c8>)
 8012c36:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8012c3a:	4b0f      	ldr	r3, [pc, #60]	; (8012c78 <ai_platform_inputs_get+0x2cc>)
 8012c3c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8012c40:	429a      	cmp	r2, r3
 8012c42:	f43f aeee 	beq.w	8012a22 <ai_platform_inputs_get+0x76>
 8012c46:	e7fe      	b.n	8012c46 <ai_platform_inputs_get+0x29a>
 8012c48:	4a09      	ldr	r2, [pc, #36]	; (8012c70 <ai_platform_inputs_get+0x2c4>)
 8012c4a:	2301      	movs	r3, #1
 8012c4c:	6093      	str	r3, [r2, #8]
 8012c4e:	6893      	ldr	r3, [r2, #8]
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d1fc      	bne.n	8012c4e <ai_platform_inputs_get+0x2a2>
 8012c54:	4b07      	ldr	r3, [pc, #28]	; (8012c74 <ai_platform_inputs_get+0x2c8>)
 8012c56:	6013      	str	r3, [r2, #0]
 8012c58:	4b07      	ldr	r3, [pc, #28]	; (8012c78 <ai_platform_inputs_get+0x2cc>)
 8012c5a:	6812      	ldr	r2, [r2, #0]
 8012c5c:	429a      	cmp	r2, r3
 8012c5e:	f43f aee0 	beq.w	8012a22 <ai_platform_inputs_get+0x76>
 8012c62:	e7fe      	b.n	8012c62 <ai_platform_inputs_get+0x2b6>
 8012c64:	a1c00100 	.word	0xa1c00100
 8012c68:	e0042000 	.word	0xe0042000
 8012c6c:	5c001000 	.word	0x5c001000
 8012c70:	40023000 	.word	0x40023000
 8012c74:	f407a5c2 	.word	0xf407a5c2
 8012c78:	b5e8b5cd 	.word	0xb5e8b5cd
 8012c7c:	58024000 	.word	0x58024000
 8012c80:	4a0d      	ldr	r2, [pc, #52]	; (8012cb8 <ai_platform_inputs_get+0x30c>)
 8012c82:	2301      	movs	r3, #1
 8012c84:	6093      	str	r3, [r2, #8]
 8012c86:	6893      	ldr	r3, [r2, #8]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d1fc      	bne.n	8012c86 <ai_platform_inputs_get+0x2da>
 8012c8c:	490b      	ldr	r1, [pc, #44]	; (8012cbc <ai_platform_inputs_get+0x310>)
 8012c8e:	4b0c      	ldr	r3, [pc, #48]	; (8012cc0 <ai_platform_inputs_get+0x314>)
 8012c90:	6011      	str	r1, [r2, #0]
 8012c92:	6812      	ldr	r2, [r2, #0]
 8012c94:	429a      	cmp	r2, r3
 8012c96:	f43f af76 	beq.w	8012b86 <ai_platform_inputs_get+0x1da>
 8012c9a:	e7fe      	b.n	8012c9a <ai_platform_inputs_get+0x2ee>
 8012c9c:	4a06      	ldr	r2, [pc, #24]	; (8012cb8 <ai_platform_inputs_get+0x30c>)
 8012c9e:	2301      	movs	r3, #1
 8012ca0:	6093      	str	r3, [r2, #8]
 8012ca2:	6893      	ldr	r3, [r2, #8]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d1fc      	bne.n	8012ca2 <ai_platform_inputs_get+0x2f6>
 8012ca8:	4b04      	ldr	r3, [pc, #16]	; (8012cbc <ai_platform_inputs_get+0x310>)
 8012caa:	6013      	str	r3, [r2, #0]
 8012cac:	4b04      	ldr	r3, [pc, #16]	; (8012cc0 <ai_platform_inputs_get+0x314>)
 8012cae:	6812      	ldr	r2, [r2, #0]
 8012cb0:	429a      	cmp	r2, r3
 8012cb2:	f43f aeb6 	beq.w	8012a22 <ai_platform_inputs_get+0x76>
 8012cb6:	e7fe      	b.n	8012cb6 <ai_platform_inputs_get+0x30a>
 8012cb8:	40023000 	.word	0x40023000
 8012cbc:	f407a5c2 	.word	0xf407a5c2
 8012cc0:	b5e8b5cd 	.word	0xb5e8b5cd

08012cc4 <ai_platform_outputs_get>:
 8012cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cc8:	b085      	sub	sp, #20
 8012cca:	9102      	str	r1, [sp, #8]
 8012ccc:	2800      	cmp	r0, #0
 8012cce:	f000 808f 	beq.w	8012df0 <ai_platform_outputs_get+0x12c>
 8012cd2:	4ba8      	ldr	r3, [pc, #672]	; (8012f74 <ai_platform_outputs_get+0x2b0>)
 8012cd4:	4681      	mov	r9, r0
 8012cd6:	6802      	ldr	r2, [r0, #0]
 8012cd8:	429a      	cmp	r2, r3
 8012cda:	f040 8089 	bne.w	8012df0 <ai_platform_outputs_get+0x12c>
 8012cde:	f7ff fc85 	bl	80125ec <_ai_platform_acquire_crc>
 8012ce2:	4ba5      	ldr	r3, [pc, #660]	; (8012f78 <ai_platform_outputs_get+0x2b4>)
 8012ce4:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012cee:	189a      	adds	r2, r3, r2
 8012cf0:	2a01      	cmp	r2, #1
 8012cf2:	f240 80d6 	bls.w	8012ea2 <ai_platform_outputs_get+0x1de>
 8012cf6:	f240 4249 	movw	r2, #1097	; 0x449
 8012cfa:	4293      	cmp	r3, r2
 8012cfc:	f000 80d1 	beq.w	8012ea2 <ai_platform_outputs_get+0x1de>
 8012d00:	4a9e      	ldr	r2, [pc, #632]	; (8012f7c <ai_platform_outputs_get+0x2b8>)
 8012d02:	6813      	ldr	r3, [r2, #0]
 8012d04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012d08:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8012d0c:	f000 80d8 	beq.w	8012ec0 <ai_platform_outputs_get+0x1fc>
 8012d10:	6813      	ldr	r3, [r2, #0]
 8012d12:	f240 4183 	movw	r1, #1155	; 0x483
 8012d16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012d1a:	428b      	cmp	r3, r1
 8012d1c:	f000 8109 	beq.w	8012f32 <ai_platform_outputs_get+0x26e>
 8012d20:	6813      	ldr	r3, [r2, #0]
 8012d22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012d26:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8012d2a:	f000 813f 	beq.w	8012fac <ai_platform_outputs_get+0x2e8>
 8012d2e:	6813      	ldr	r3, [r2, #0]
 8012d30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	f000 810e 	beq.w	8012f56 <ai_platform_outputs_get+0x292>
 8012d3a:	f7ff fc59 	bl	80125f0 <_ai_platform_release_crc>
 8012d3e:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 8012d42:	2b01      	cmp	r3, #1
 8012d44:	f240 80db 	bls.w	8012efe <ai_platform_outputs_get+0x23a>
 8012d48:	2100      	movs	r1, #0
 8012d4a:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 8012d4e:	f8cd 900c 	str.w	r9, [sp, #12]
 8012d52:	460d      	mov	r5, r1
 8012d54:	4689      	mov	r9, r1
 8012d56:	e016      	b.n	8012d86 <ai_platform_outputs_get+0xc2>
 8012d58:	9a01      	ldr	r2, [sp, #4]
 8012d5a:	2301      	movs	r3, #1
 8012d5c:	f848 3002 	str.w	r3, [r8, r2]
 8012d60:	69b2      	ldr	r2, [r6, #24]
 8012d62:	f04f 0301 	mov.w	r3, #1
 8012d66:	6856      	ldr	r6, [r2, #4]
 8012d68:	3501      	adds	r5, #1
 8012d6a:	f109 091c 	add.w	r9, r9, #28
 8012d6e:	7523      	strb	r3, [r4, #20]
 8012d70:	2300      	movs	r3, #0
 8012d72:	6962      	ldr	r2, [r4, #20]
 8012d74:	60a7      	str	r7, [r4, #8]
 8012d76:	f36b 221f 	bfi	r2, fp, #8, #24
 8012d7a:	6126      	str	r6, [r4, #16]
 8012d7c:	61a1      	str	r1, [r4, #24]
 8012d7e:	60e3      	str	r3, [r4, #12]
 8012d80:	6162      	str	r2, [r4, #20]
 8012d82:	e9c4 0c00 	strd	r0, ip, [r4]
 8012d86:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8012d8a:	b2ac      	uxth	r4, r5
 8012d8c:	42ab      	cmp	r3, r5
 8012d8e:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8012d92:	9301      	str	r3, [sp, #4]
 8012d94:	f240 80a6 	bls.w	8012ee4 <ai_platform_outputs_get+0x220>
 8012d98:	f8da 3010 	ldr.w	r3, [sl, #16]
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	f000 80a1 	beq.w	8012ee4 <ai_platform_outputs_get+0x220>
 8012da2:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8012da6:	2e00      	cmp	r6, #0
 8012da8:	f000 809c 	beq.w	8012ee4 <ai_platform_outputs_get+0x220>
 8012dac:	f8da 3014 	ldr.w	r3, [sl, #20]
 8012db0:	69b2      	ldr	r2, [r6, #24]
 8012db2:	68f1      	ldr	r1, [r6, #12]
 8012db4:	6810      	ldr	r0, [r2, #0]
 8012db6:	9100      	str	r1, [sp, #0]
 8012db8:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8012dbc:	68b3      	ldr	r3, [r6, #8]
 8012dbe:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8012dc2:	444c      	add	r4, r9
 8012dc4:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8012dc8:	f008 fa48 	bl	801b25c <ai_array_to_buffer_fmt>
 8012dcc:	69b2      	ldr	r2, [r6, #24]
 8012dce:	9900      	ldr	r1, [sp, #0]
 8012dd0:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8012dd4:	2f00      	cmp	r7, #0
 8012dd6:	d0c4      	beq.n	8012d62 <ai_platform_outputs_get+0x9e>
 8012dd8:	2200      	movs	r2, #0
 8012dda:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 8012dde:	6832      	ldr	r2, [r6, #0]
 8012de0:	607a      	str	r2, [r7, #4]
 8012de2:	b112      	cbz	r2, 8012dea <ai_platform_outputs_get+0x126>
 8012de4:	8852      	ldrh	r2, [r2, #2]
 8012de6:	2a00      	cmp	r2, #0
 8012de8:	d1b6      	bne.n	8012d58 <ai_platform_outputs_get+0x94>
 8012dea:	69b2      	ldr	r2, [r6, #24]
 8012dec:	2700      	movs	r7, #0
 8012dee:	e7b8      	b.n	8012d62 <ai_platform_outputs_get+0x9e>
 8012df0:	f7ff fbfc 	bl	80125ec <_ai_platform_acquire_crc>
 8012df4:	4b60      	ldr	r3, [pc, #384]	; (8012f78 <ai_platform_outputs_get+0x2b4>)
 8012df6:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012e00:	185a      	adds	r2, r3, r1
 8012e02:	2a01      	cmp	r2, #1
 8012e04:	d92a      	bls.n	8012e5c <ai_platform_outputs_get+0x198>
 8012e06:	f240 4249 	movw	r2, #1097	; 0x449
 8012e0a:	4293      	cmp	r3, r2
 8012e0c:	d026      	beq.n	8012e5c <ai_platform_outputs_get+0x198>
 8012e0e:	4a5b      	ldr	r2, [pc, #364]	; (8012f7c <ai_platform_outputs_get+0x2b8>)
 8012e10:	6813      	ldr	r3, [r2, #0]
 8012e12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012e16:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8012e1a:	d02c      	beq.n	8012e76 <ai_platform_outputs_get+0x1b2>
 8012e1c:	6813      	ldr	r3, [r2, #0]
 8012e1e:	f240 4183 	movw	r1, #1155	; 0x483
 8012e22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012e26:	428b      	cmp	r3, r1
 8012e28:	d072      	beq.n	8012f10 <ai_platform_outputs_get+0x24c>
 8012e2a:	6813      	ldr	r3, [r2, #0]
 8012e2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012e30:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8012e34:	f000 80ac 	beq.w	8012f90 <ai_platform_outputs_get+0x2cc>
 8012e38:	6813      	ldr	r3, [r2, #0]
 8012e3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d129      	bne.n	8012e96 <ai_platform_outputs_get+0x1d2>
 8012e42:	4a4f      	ldr	r2, [pc, #316]	; (8012f80 <ai_platform_outputs_get+0x2bc>)
 8012e44:	2301      	movs	r3, #1
 8012e46:	6093      	str	r3, [r2, #8]
 8012e48:	6893      	ldr	r3, [r2, #8]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d1fc      	bne.n	8012e48 <ai_platform_outputs_get+0x184>
 8012e4e:	494d      	ldr	r1, [pc, #308]	; (8012f84 <ai_platform_outputs_get+0x2c0>)
 8012e50:	4b4d      	ldr	r3, [pc, #308]	; (8012f88 <ai_platform_outputs_get+0x2c4>)
 8012e52:	6011      	str	r1, [r2, #0]
 8012e54:	6812      	ldr	r2, [r2, #0]
 8012e56:	429a      	cmp	r2, r3
 8012e58:	d01d      	beq.n	8012e96 <ai_platform_outputs_get+0x1d2>
 8012e5a:	e7fe      	b.n	8012e5a <ai_platform_outputs_get+0x196>
 8012e5c:	4a48      	ldr	r2, [pc, #288]	; (8012f80 <ai_platform_outputs_get+0x2bc>)
 8012e5e:	2301      	movs	r3, #1
 8012e60:	6093      	str	r3, [r2, #8]
 8012e62:	6893      	ldr	r3, [r2, #8]
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d1fc      	bne.n	8012e62 <ai_platform_outputs_get+0x19e>
 8012e68:	4946      	ldr	r1, [pc, #280]	; (8012f84 <ai_platform_outputs_get+0x2c0>)
 8012e6a:	4b47      	ldr	r3, [pc, #284]	; (8012f88 <ai_platform_outputs_get+0x2c4>)
 8012e6c:	6011      	str	r1, [r2, #0]
 8012e6e:	6812      	ldr	r2, [r2, #0]
 8012e70:	429a      	cmp	r2, r3
 8012e72:	d010      	beq.n	8012e96 <ai_platform_outputs_get+0x1d2>
 8012e74:	e7fe      	b.n	8012e74 <ai_platform_outputs_get+0x1b0>
 8012e76:	4a45      	ldr	r2, [pc, #276]	; (8012f8c <ai_platform_outputs_get+0x2c8>)
 8012e78:	2301      	movs	r3, #1
 8012e7a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8012e7e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d1fb      	bne.n	8012e7e <ai_platform_outputs_get+0x1ba>
 8012e86:	493f      	ldr	r1, [pc, #252]	; (8012f84 <ai_platform_outputs_get+0x2c0>)
 8012e88:	4b3f      	ldr	r3, [pc, #252]	; (8012f88 <ai_platform_outputs_get+0x2c4>)
 8012e8a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8012e8e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8012e92:	429a      	cmp	r2, r3
 8012e94:	d113      	bne.n	8012ebe <ai_platform_outputs_get+0x1fa>
 8012e96:	f7ff fbab 	bl	80125f0 <_ai_platform_release_crc>
 8012e9a:	2000      	movs	r0, #0
 8012e9c:	b005      	add	sp, #20
 8012e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ea2:	4a37      	ldr	r2, [pc, #220]	; (8012f80 <ai_platform_outputs_get+0x2bc>)
 8012ea4:	2301      	movs	r3, #1
 8012ea6:	6093      	str	r3, [r2, #8]
 8012ea8:	6893      	ldr	r3, [r2, #8]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d1fc      	bne.n	8012ea8 <ai_platform_outputs_get+0x1e4>
 8012eae:	4b35      	ldr	r3, [pc, #212]	; (8012f84 <ai_platform_outputs_get+0x2c0>)
 8012eb0:	6013      	str	r3, [r2, #0]
 8012eb2:	4b35      	ldr	r3, [pc, #212]	; (8012f88 <ai_platform_outputs_get+0x2c4>)
 8012eb4:	6812      	ldr	r2, [r2, #0]
 8012eb6:	429a      	cmp	r2, r3
 8012eb8:	f43f af3f 	beq.w	8012d3a <ai_platform_outputs_get+0x76>
 8012ebc:	e7fe      	b.n	8012ebc <ai_platform_outputs_get+0x1f8>
 8012ebe:	e7fe      	b.n	8012ebe <ai_platform_outputs_get+0x1fa>
 8012ec0:	4a32      	ldr	r2, [pc, #200]	; (8012f8c <ai_platform_outputs_get+0x2c8>)
 8012ec2:	2301      	movs	r3, #1
 8012ec4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8012ec8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d1fb      	bne.n	8012ec8 <ai_platform_outputs_get+0x204>
 8012ed0:	4b2c      	ldr	r3, [pc, #176]	; (8012f84 <ai_platform_outputs_get+0x2c0>)
 8012ed2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8012ed6:	4b2c      	ldr	r3, [pc, #176]	; (8012f88 <ai_platform_outputs_get+0x2c4>)
 8012ed8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8012edc:	429a      	cmp	r2, r3
 8012ede:	f43f af2c 	beq.w	8012d3a <ai_platform_outputs_get+0x76>
 8012ee2:	e7fe      	b.n	8012ee2 <ai_platform_outputs_get+0x21e>
 8012ee4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8012ee8:	b14c      	cbz	r4, 8012efe <ai_platform_outputs_get+0x23a>
 8012eea:	f8da 3014 	ldr.w	r3, [sl, #20]
 8012eee:	6858      	ldr	r0, [r3, #4]
 8012ef0:	9b02      	ldr	r3, [sp, #8]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d0d2      	beq.n	8012e9c <ai_platform_outputs_get+0x1d8>
 8012ef6:	801c      	strh	r4, [r3, #0]
 8012ef8:	b005      	add	sp, #20
 8012efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012efe:	2400      	movs	r4, #0
 8012f00:	2218      	movs	r2, #24
 8012f02:	2111      	movs	r1, #17
 8012f04:	f109 0010 	add.w	r0, r9, #16
 8012f08:	f001 fa4e 	bl	80143a8 <core_set_error>
 8012f0c:	4620      	mov	r0, r4
 8012f0e:	e7ef      	b.n	8012ef0 <ai_platform_outputs_get+0x22c>
 8012f10:	4a1e      	ldr	r2, [pc, #120]	; (8012f8c <ai_platform_outputs_get+0x2c8>)
 8012f12:	2301      	movs	r3, #1
 8012f14:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8012f18:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d1fb      	bne.n	8012f18 <ai_platform_outputs_get+0x254>
 8012f20:	4918      	ldr	r1, [pc, #96]	; (8012f84 <ai_platform_outputs_get+0x2c0>)
 8012f22:	4b19      	ldr	r3, [pc, #100]	; (8012f88 <ai_platform_outputs_get+0x2c4>)
 8012f24:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8012f28:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8012f2c:	429a      	cmp	r2, r3
 8012f2e:	d0b2      	beq.n	8012e96 <ai_platform_outputs_get+0x1d2>
 8012f30:	e7fe      	b.n	8012f30 <ai_platform_outputs_get+0x26c>
 8012f32:	4a16      	ldr	r2, [pc, #88]	; (8012f8c <ai_platform_outputs_get+0x2c8>)
 8012f34:	2301      	movs	r3, #1
 8012f36:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8012f3a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d1fb      	bne.n	8012f3a <ai_platform_outputs_get+0x276>
 8012f42:	4b10      	ldr	r3, [pc, #64]	; (8012f84 <ai_platform_outputs_get+0x2c0>)
 8012f44:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8012f48:	4b0f      	ldr	r3, [pc, #60]	; (8012f88 <ai_platform_outputs_get+0x2c4>)
 8012f4a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8012f4e:	429a      	cmp	r2, r3
 8012f50:	f43f aef3 	beq.w	8012d3a <ai_platform_outputs_get+0x76>
 8012f54:	e7fe      	b.n	8012f54 <ai_platform_outputs_get+0x290>
 8012f56:	4a0a      	ldr	r2, [pc, #40]	; (8012f80 <ai_platform_outputs_get+0x2bc>)
 8012f58:	2301      	movs	r3, #1
 8012f5a:	6093      	str	r3, [r2, #8]
 8012f5c:	6893      	ldr	r3, [r2, #8]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d1fc      	bne.n	8012f5c <ai_platform_outputs_get+0x298>
 8012f62:	4b08      	ldr	r3, [pc, #32]	; (8012f84 <ai_platform_outputs_get+0x2c0>)
 8012f64:	6013      	str	r3, [r2, #0]
 8012f66:	4b08      	ldr	r3, [pc, #32]	; (8012f88 <ai_platform_outputs_get+0x2c4>)
 8012f68:	6812      	ldr	r2, [r2, #0]
 8012f6a:	429a      	cmp	r2, r3
 8012f6c:	f43f aee5 	beq.w	8012d3a <ai_platform_outputs_get+0x76>
 8012f70:	e7fe      	b.n	8012f70 <ai_platform_outputs_get+0x2ac>
 8012f72:	bf00      	nop
 8012f74:	a1c00100 	.word	0xa1c00100
 8012f78:	e0042000 	.word	0xe0042000
 8012f7c:	5c001000 	.word	0x5c001000
 8012f80:	40023000 	.word	0x40023000
 8012f84:	f407a5c2 	.word	0xf407a5c2
 8012f88:	b5e8b5cd 	.word	0xb5e8b5cd
 8012f8c:	58024000 	.word	0x58024000
 8012f90:	4a0d      	ldr	r2, [pc, #52]	; (8012fc8 <ai_platform_outputs_get+0x304>)
 8012f92:	2301      	movs	r3, #1
 8012f94:	6093      	str	r3, [r2, #8]
 8012f96:	6893      	ldr	r3, [r2, #8]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d1fc      	bne.n	8012f96 <ai_platform_outputs_get+0x2d2>
 8012f9c:	490b      	ldr	r1, [pc, #44]	; (8012fcc <ai_platform_outputs_get+0x308>)
 8012f9e:	4b0c      	ldr	r3, [pc, #48]	; (8012fd0 <ai_platform_outputs_get+0x30c>)
 8012fa0:	6011      	str	r1, [r2, #0]
 8012fa2:	6812      	ldr	r2, [r2, #0]
 8012fa4:	429a      	cmp	r2, r3
 8012fa6:	f43f af76 	beq.w	8012e96 <ai_platform_outputs_get+0x1d2>
 8012faa:	e7fe      	b.n	8012faa <ai_platform_outputs_get+0x2e6>
 8012fac:	4a06      	ldr	r2, [pc, #24]	; (8012fc8 <ai_platform_outputs_get+0x304>)
 8012fae:	2301      	movs	r3, #1
 8012fb0:	6093      	str	r3, [r2, #8]
 8012fb2:	6893      	ldr	r3, [r2, #8]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d1fc      	bne.n	8012fb2 <ai_platform_outputs_get+0x2ee>
 8012fb8:	4b04      	ldr	r3, [pc, #16]	; (8012fcc <ai_platform_outputs_get+0x308>)
 8012fba:	6013      	str	r3, [r2, #0]
 8012fbc:	4b04      	ldr	r3, [pc, #16]	; (8012fd0 <ai_platform_outputs_get+0x30c>)
 8012fbe:	6812      	ldr	r2, [r2, #0]
 8012fc0:	429a      	cmp	r2, r3
 8012fc2:	f43f aeba 	beq.w	8012d3a <ai_platform_outputs_get+0x76>
 8012fc6:	e7fe      	b.n	8012fc6 <ai_platform_outputs_get+0x302>
 8012fc8:	40023000 	.word	0x40023000
 8012fcc:	f407a5c2 	.word	0xf407a5c2
 8012fd0:	b5e8b5cd 	.word	0xb5e8b5cd

08012fd4 <ai_platform_network_create>:
 8012fd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012fd8:	b083      	sub	sp, #12
 8012fda:	4604      	mov	r4, r0
 8012fdc:	4615      	mov	r5, r2
 8012fde:	461e      	mov	r6, r3
 8012fe0:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8012fe4:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8012fe8:	f7ff fb00 	bl	80125ec <_ai_platform_acquire_crc>
 8012fec:	2800      	cmp	r0, #0
 8012fee:	f000 80bd 	beq.w	801316c <ai_platform_network_create+0x198>
 8012ff2:	4ba5      	ldr	r3, [pc, #660]	; (8013288 <ai_platform_network_create+0x2b4>)
 8012ff4:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 8012ff8:	4601      	mov	r1, r0
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013000:	eb03 020c 	add.w	r2, r3, ip
 8013004:	2a01      	cmp	r2, #1
 8013006:	f240 80a8 	bls.w	801315a <ai_platform_network_create+0x186>
 801300a:	f240 4249 	movw	r2, #1097	; 0x449
 801300e:	4293      	cmp	r3, r2
 8013010:	f000 80a3 	beq.w	801315a <ai_platform_network_create+0x186>
 8013014:	4a9d      	ldr	r2, [pc, #628]	; (801328c <ai_platform_network_create+0x2b8>)
 8013016:	6813      	ldr	r3, [r2, #0]
 8013018:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801301c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8013020:	f000 80b9 	beq.w	8013196 <ai_platform_network_create+0x1c2>
 8013024:	6813      	ldr	r3, [r2, #0]
 8013026:	f240 4c83 	movw	ip, #1155	; 0x483
 801302a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801302e:	4563      	cmp	r3, ip
 8013030:	f000 80a1 	beq.w	8013176 <ai_platform_network_create+0x1a2>
 8013034:	6813      	ldr	r3, [r2, #0]
 8013036:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801303a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801303e:	f000 8153 	beq.w	80132e8 <ai_platform_network_create+0x314>
 8013042:	6813      	ldr	r3, [r2, #0]
 8013044:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013048:	2b00      	cmp	r3, #0
 801304a:	f040 808d 	bne.w	8013168 <ai_platform_network_create+0x194>
 801304e:	4a90      	ldr	r2, [pc, #576]	; (8013290 <ai_platform_network_create+0x2bc>)
 8013050:	2318      	movs	r3, #24
 8013052:	6093      	str	r3, [r2, #8]
 8013054:	6893      	ldr	r3, [r2, #8]
 8013056:	2b18      	cmp	r3, #24
 8013058:	f040 8086 	bne.w	8013168 <ai_platform_network_create+0x194>
 801305c:	2301      	movs	r3, #1
 801305e:	6093      	str	r3, [r2, #8]
 8013060:	6893      	ldr	r3, [r2, #8]
 8013062:	2b00      	cmp	r3, #0
 8013064:	d1fc      	bne.n	8013060 <ai_platform_network_create+0x8c>
 8013066:	4608      	mov	r0, r1
 8013068:	f7ff fac2 	bl	80125f0 <_ai_platform_release_crc>
 801306c:	f7ff fabe 	bl	80125ec <_ai_platform_acquire_crc>
 8013070:	4b85      	ldr	r3, [pc, #532]	; (8013288 <ai_platform_network_create+0x2b4>)
 8013072:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8013076:	681b      	ldr	r3, [r3, #0]
 8013078:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801307c:	189a      	adds	r2, r3, r2
 801307e:	2a01      	cmp	r2, #1
 8013080:	f240 809f 	bls.w	80131c2 <ai_platform_network_create+0x1ee>
 8013084:	f240 4249 	movw	r2, #1097	; 0x449
 8013088:	4293      	cmp	r3, r2
 801308a:	f000 809a 	beq.w	80131c2 <ai_platform_network_create+0x1ee>
 801308e:	4a7f      	ldr	r2, [pc, #508]	; (801328c <ai_platform_network_create+0x2b8>)
 8013090:	6813      	ldr	r3, [r2, #0]
 8013092:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013096:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801309a:	f000 80a0 	beq.w	80131de <ai_platform_network_create+0x20a>
 801309e:	6813      	ldr	r3, [r2, #0]
 80130a0:	f240 4183 	movw	r1, #1155	; 0x483
 80130a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80130a8:	428b      	cmp	r3, r1
 80130aa:	f000 80bf 	beq.w	801322c <ai_platform_network_create+0x258>
 80130ae:	6813      	ldr	r3, [r2, #0]
 80130b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80130b4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80130b8:	f000 8123 	beq.w	8013302 <ai_platform_network_create+0x32e>
 80130bc:	6813      	ldr	r3, [r2, #0]
 80130be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	f000 80c4 	beq.w	8013250 <ai_platform_network_create+0x27c>
 80130c8:	f7ff fa92 	bl	80125f0 <_ai_platform_release_crc>
 80130cc:	2c00      	cmp	r4, #0
 80130ce:	f000 80aa 	beq.w	8013226 <ai_platform_network_create+0x252>
 80130d2:	4b70      	ldr	r3, [pc, #448]	; (8013294 <ai_platform_network_create+0x2c0>)
 80130d4:	602b      	str	r3, [r5, #0]
 80130d6:	6025      	str	r5, [r4, #0]
 80130d8:	f001 f95e 	bl	8014398 <core_init>
 80130dc:	2800      	cmp	r0, #0
 80130de:	f000 8090 	beq.w	8013202 <ai_platform_network_create+0x22e>
 80130e2:	f7ff fa83 	bl	80125ec <_ai_platform_acquire_crc>
 80130e6:	4b68      	ldr	r3, [pc, #416]	; (8013288 <ai_platform_network_create+0x2b4>)
 80130e8:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80130f2:	185a      	adds	r2, r3, r1
 80130f4:	2a01      	cmp	r2, #1
 80130f6:	f240 80b9 	bls.w	801326c <ai_platform_network_create+0x298>
 80130fa:	f240 4249 	movw	r2, #1097	; 0x449
 80130fe:	4293      	cmp	r3, r2
 8013100:	f000 80b4 	beq.w	801326c <ai_platform_network_create+0x298>
 8013104:	4a61      	ldr	r2, [pc, #388]	; (801328c <ai_platform_network_create+0x2b8>)
 8013106:	6813      	ldr	r3, [r2, #0]
 8013108:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801310c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8013110:	f000 80c8 	beq.w	80132a4 <ai_platform_network_create+0x2d0>
 8013114:	6813      	ldr	r3, [r2, #0]
 8013116:	f240 4183 	movw	r1, #1155	; 0x483
 801311a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801311e:	428b      	cmp	r3, r1
 8013120:	f000 8107 	beq.w	8013332 <ai_platform_network_create+0x35e>
 8013124:	6813      	ldr	r3, [r2, #0]
 8013126:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801312a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801312e:	f000 8111 	beq.w	8013354 <ai_platform_network_create+0x380>
 8013132:	6813      	ldr	r3, [r2, #0]
 8013134:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013138:	2b00      	cmp	r3, #0
 801313a:	f040 80c3 	bne.w	80132c4 <ai_platform_network_create+0x2f0>
 801313e:	4b54      	ldr	r3, [pc, #336]	; (8013290 <ai_platform_network_create+0x2bc>)
 8013140:	2201      	movs	r2, #1
 8013142:	609a      	str	r2, [r3, #8]
 8013144:	689a      	ldr	r2, [r3, #8]
 8013146:	2a00      	cmp	r2, #0
 8013148:	d1fc      	bne.n	8013144 <ai_platform_network_create+0x170>
 801314a:	4a53      	ldr	r2, [pc, #332]	; (8013298 <ai_platform_network_create+0x2c4>)
 801314c:	601a      	str	r2, [r3, #0]
 801314e:	681a      	ldr	r2, [r3, #0]
 8013150:	4b52      	ldr	r3, [pc, #328]	; (801329c <ai_platform_network_create+0x2c8>)
 8013152:	429a      	cmp	r2, r3
 8013154:	f000 80b6 	beq.w	80132c4 <ai_platform_network_create+0x2f0>
 8013158:	e7fe      	b.n	8013158 <ai_platform_network_create+0x184>
 801315a:	4b4d      	ldr	r3, [pc, #308]	; (8013290 <ai_platform_network_create+0x2bc>)
 801315c:	2218      	movs	r2, #24
 801315e:	609a      	str	r2, [r3, #8]
 8013160:	689a      	ldr	r2, [r3, #8]
 8013162:	2a18      	cmp	r2, #24
 8013164:	d027      	beq.n	80131b6 <ai_platform_network_create+0x1e2>
 8013166:	4608      	mov	r0, r1
 8013168:	f7ff fa42 	bl	80125f0 <_ai_platform_release_crc>
 801316c:	f244 1033 	movw	r0, #16691	; 0x4133
 8013170:	b003      	add	sp, #12
 8013172:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013176:	4a4a      	ldr	r2, [pc, #296]	; (80132a0 <ai_platform_network_create+0x2cc>)
 8013178:	2318      	movs	r3, #24
 801317a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801317e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8013182:	2b18      	cmp	r3, #24
 8013184:	d1f0      	bne.n	8013168 <ai_platform_network_create+0x194>
 8013186:	2301      	movs	r3, #1
 8013188:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801318c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8013190:	2b00      	cmp	r3, #0
 8013192:	d1fb      	bne.n	801318c <ai_platform_network_create+0x1b8>
 8013194:	e767      	b.n	8013066 <ai_platform_network_create+0x92>
 8013196:	4a42      	ldr	r2, [pc, #264]	; (80132a0 <ai_platform_network_create+0x2cc>)
 8013198:	2318      	movs	r3, #24
 801319a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801319e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80131a2:	2b18      	cmp	r3, #24
 80131a4:	d1e0      	bne.n	8013168 <ai_platform_network_create+0x194>
 80131a6:	2301      	movs	r3, #1
 80131a8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80131ac:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d1fb      	bne.n	80131ac <ai_platform_network_create+0x1d8>
 80131b4:	e757      	b.n	8013066 <ai_platform_network_create+0x92>
 80131b6:	2201      	movs	r2, #1
 80131b8:	609a      	str	r2, [r3, #8]
 80131ba:	689a      	ldr	r2, [r3, #8]
 80131bc:	2a00      	cmp	r2, #0
 80131be:	d1fc      	bne.n	80131ba <ai_platform_network_create+0x1e6>
 80131c0:	e751      	b.n	8013066 <ai_platform_network_create+0x92>
 80131c2:	4a33      	ldr	r2, [pc, #204]	; (8013290 <ai_platform_network_create+0x2bc>)
 80131c4:	2301      	movs	r3, #1
 80131c6:	6093      	str	r3, [r2, #8]
 80131c8:	6891      	ldr	r1, [r2, #8]
 80131ca:	2900      	cmp	r1, #0
 80131cc:	d1fc      	bne.n	80131c8 <ai_platform_network_create+0x1f4>
 80131ce:	4b32      	ldr	r3, [pc, #200]	; (8013298 <ai_platform_network_create+0x2c4>)
 80131d0:	6013      	str	r3, [r2, #0]
 80131d2:	4b32      	ldr	r3, [pc, #200]	; (801329c <ai_platform_network_create+0x2c8>)
 80131d4:	6812      	ldr	r2, [r2, #0]
 80131d6:	429a      	cmp	r2, r3
 80131d8:	f43f af76 	beq.w	80130c8 <ai_platform_network_create+0xf4>
 80131dc:	e7fe      	b.n	80131dc <ai_platform_network_create+0x208>
 80131de:	4a30      	ldr	r2, [pc, #192]	; (80132a0 <ai_platform_network_create+0x2cc>)
 80131e0:	2301      	movs	r3, #1
 80131e2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80131e6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d1fb      	bne.n	80131e6 <ai_platform_network_create+0x212>
 80131ee:	4b2a      	ldr	r3, [pc, #168]	; (8013298 <ai_platform_network_create+0x2c4>)
 80131f0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80131f4:	4b29      	ldr	r3, [pc, #164]	; (801329c <ai_platform_network_create+0x2c8>)
 80131f6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80131fa:	429a      	cmp	r2, r3
 80131fc:	f43f af64 	beq.w	80130c8 <ai_platform_network_create+0xf4>
 8013200:	e7fe      	b.n	8013200 <ai_platform_network_create+0x22c>
 8013202:	f04f 0930 	mov.w	r9, #48	; 0x30
 8013206:	2300      	movs	r3, #0
 8013208:	6023      	str	r3, [r4, #0]
 801320a:	2410      	movs	r4, #16
 801320c:	4642      	mov	r2, r8
 801320e:	4639      	mov	r1, r7
 8013210:	4630      	mov	r0, r6
 8013212:	f008 f807 	bl	801b224 <ai_version_get>
 8013216:	4603      	mov	r3, r0
 8013218:	2000      	movs	r0, #0
 801321a:	64ab      	str	r3, [r5, #72]	; 0x48
 801321c:	f369 0007 	bfi	r0, r9, #0, #8
 8013220:	f364 201f 	bfi	r0, r4, #8, #24
 8013224:	e7a4      	b.n	8013170 <ai_platform_network_create+0x19c>
 8013226:	f241 0010 	movw	r0, #4112	; 0x1010
 801322a:	e7a1      	b.n	8013170 <ai_platform_network_create+0x19c>
 801322c:	4a1c      	ldr	r2, [pc, #112]	; (80132a0 <ai_platform_network_create+0x2cc>)
 801322e:	2301      	movs	r3, #1
 8013230:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8013234:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8013238:	2b00      	cmp	r3, #0
 801323a:	d1fb      	bne.n	8013234 <ai_platform_network_create+0x260>
 801323c:	4b16      	ldr	r3, [pc, #88]	; (8013298 <ai_platform_network_create+0x2c4>)
 801323e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8013242:	4b16      	ldr	r3, [pc, #88]	; (801329c <ai_platform_network_create+0x2c8>)
 8013244:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8013248:	429a      	cmp	r2, r3
 801324a:	f43f af3d 	beq.w	80130c8 <ai_platform_network_create+0xf4>
 801324e:	e7fe      	b.n	801324e <ai_platform_network_create+0x27a>
 8013250:	4a0f      	ldr	r2, [pc, #60]	; (8013290 <ai_platform_network_create+0x2bc>)
 8013252:	2301      	movs	r3, #1
 8013254:	6093      	str	r3, [r2, #8]
 8013256:	6893      	ldr	r3, [r2, #8]
 8013258:	2b00      	cmp	r3, #0
 801325a:	d1fc      	bne.n	8013256 <ai_platform_network_create+0x282>
 801325c:	4b0e      	ldr	r3, [pc, #56]	; (8013298 <ai_platform_network_create+0x2c4>)
 801325e:	6013      	str	r3, [r2, #0]
 8013260:	4b0e      	ldr	r3, [pc, #56]	; (801329c <ai_platform_network_create+0x2c8>)
 8013262:	6812      	ldr	r2, [r2, #0]
 8013264:	429a      	cmp	r2, r3
 8013266:	f43f af2f 	beq.w	80130c8 <ai_platform_network_create+0xf4>
 801326a:	e7fe      	b.n	801326a <ai_platform_network_create+0x296>
 801326c:	4a08      	ldr	r2, [pc, #32]	; (8013290 <ai_platform_network_create+0x2bc>)
 801326e:	2301      	movs	r3, #1
 8013270:	6093      	str	r3, [r2, #8]
 8013272:	6893      	ldr	r3, [r2, #8]
 8013274:	2b00      	cmp	r3, #0
 8013276:	d1fc      	bne.n	8013272 <ai_platform_network_create+0x29e>
 8013278:	4b07      	ldr	r3, [pc, #28]	; (8013298 <ai_platform_network_create+0x2c4>)
 801327a:	6013      	str	r3, [r2, #0]
 801327c:	4b07      	ldr	r3, [pc, #28]	; (801329c <ai_platform_network_create+0x2c8>)
 801327e:	6812      	ldr	r2, [r2, #0]
 8013280:	429a      	cmp	r2, r3
 8013282:	d01f      	beq.n	80132c4 <ai_platform_network_create+0x2f0>
 8013284:	e7fe      	b.n	8013284 <ai_platform_network_create+0x2b0>
 8013286:	bf00      	nop
 8013288:	e0042000 	.word	0xe0042000
 801328c:	5c001000 	.word	0x5c001000
 8013290:	40023000 	.word	0x40023000
 8013294:	a1c00100 	.word	0xa1c00100
 8013298:	f407a5c2 	.word	0xf407a5c2
 801329c:	b5e8b5cd 	.word	0xb5e8b5cd
 80132a0:	58024000 	.word	0x58024000
 80132a4:	4a33      	ldr	r2, [pc, #204]	; (8013374 <ai_platform_network_create+0x3a0>)
 80132a6:	2301      	movs	r3, #1
 80132a8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80132ac:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d1fb      	bne.n	80132ac <ai_platform_network_create+0x2d8>
 80132b4:	4b30      	ldr	r3, [pc, #192]	; (8013378 <ai_platform_network_create+0x3a4>)
 80132b6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80132ba:	4b30      	ldr	r3, [pc, #192]	; (801337c <ai_platform_network_create+0x3a8>)
 80132bc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80132c0:	429a      	cmp	r2, r3
 80132c2:	d12c      	bne.n	801331e <ai_platform_network_create+0x34a>
 80132c4:	f7ff f994 	bl	80125f0 <_ai_platform_release_crc>
 80132c8:	2200      	movs	r2, #0
 80132ca:	4639      	mov	r1, r7
 80132cc:	4630      	mov	r0, r6
 80132ce:	f007 ffa9 	bl	801b224 <ai_version_get>
 80132d2:	4681      	mov	r9, r0
 80132d4:	2200      	movs	r2, #0
 80132d6:	2105      	movs	r1, #5
 80132d8:	2001      	movs	r0, #1
 80132da:	f007 ffa3 	bl	801b224 <ai_version_get>
 80132de:	4581      	cmp	r9, r0
 80132e0:	d01e      	beq.n	8013320 <ai_platform_network_create+0x34c>
 80132e2:	f04f 0901 	mov.w	r9, #1
 80132e6:	e78e      	b.n	8013206 <ai_platform_network_create+0x232>
 80132e8:	4b25      	ldr	r3, [pc, #148]	; (8013380 <ai_platform_network_create+0x3ac>)
 80132ea:	2218      	movs	r2, #24
 80132ec:	609a      	str	r2, [r3, #8]
 80132ee:	689a      	ldr	r2, [r3, #8]
 80132f0:	2a18      	cmp	r2, #24
 80132f2:	f47f af39 	bne.w	8013168 <ai_platform_network_create+0x194>
 80132f6:	2201      	movs	r2, #1
 80132f8:	609a      	str	r2, [r3, #8]
 80132fa:	689a      	ldr	r2, [r3, #8]
 80132fc:	2a00      	cmp	r2, #0
 80132fe:	d1fc      	bne.n	80132fa <ai_platform_network_create+0x326>
 8013300:	e6b1      	b.n	8013066 <ai_platform_network_create+0x92>
 8013302:	4a1f      	ldr	r2, [pc, #124]	; (8013380 <ai_platform_network_create+0x3ac>)
 8013304:	2301      	movs	r3, #1
 8013306:	6093      	str	r3, [r2, #8]
 8013308:	6893      	ldr	r3, [r2, #8]
 801330a:	2b00      	cmp	r3, #0
 801330c:	d1fc      	bne.n	8013308 <ai_platform_network_create+0x334>
 801330e:	4b1a      	ldr	r3, [pc, #104]	; (8013378 <ai_platform_network_create+0x3a4>)
 8013310:	6013      	str	r3, [r2, #0]
 8013312:	4b1a      	ldr	r3, [pc, #104]	; (801337c <ai_platform_network_create+0x3a8>)
 8013314:	6812      	ldr	r2, [r2, #0]
 8013316:	429a      	cmp	r2, r3
 8013318:	f43f aed6 	beq.w	80130c8 <ai_platform_network_create+0xf4>
 801331c:	e7fe      	b.n	801331c <ai_platform_network_create+0x348>
 801331e:	e7fe      	b.n	801331e <ai_platform_network_create+0x34a>
 8013320:	4b18      	ldr	r3, [pc, #96]	; (8013384 <ai_platform_network_create+0x3b0>)
 8013322:	a801      	add	r0, sp, #4
 8013324:	9301      	str	r3, [sp, #4]
 8013326:	f002 fcff 	bl	8015d28 <ai_check_custom_types>
 801332a:	b300      	cbz	r0, 801336e <ai_platform_network_create+0x39a>
 801332c:	2400      	movs	r4, #0
 801332e:	46a1      	mov	r9, r4
 8013330:	e76c      	b.n	801320c <ai_platform_network_create+0x238>
 8013332:	4b10      	ldr	r3, [pc, #64]	; (8013374 <ai_platform_network_create+0x3a0>)
 8013334:	2201      	movs	r2, #1
 8013336:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 801333a:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 801333e:	2a00      	cmp	r2, #0
 8013340:	d1fb      	bne.n	801333a <ai_platform_network_create+0x366>
 8013342:	4a0d      	ldr	r2, [pc, #52]	; (8013378 <ai_platform_network_create+0x3a4>)
 8013344:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8013348:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 801334c:	4b0b      	ldr	r3, [pc, #44]	; (801337c <ai_platform_network_create+0x3a8>)
 801334e:	429a      	cmp	r2, r3
 8013350:	d0b8      	beq.n	80132c4 <ai_platform_network_create+0x2f0>
 8013352:	e7fe      	b.n	8013352 <ai_platform_network_create+0x37e>
 8013354:	4b0a      	ldr	r3, [pc, #40]	; (8013380 <ai_platform_network_create+0x3ac>)
 8013356:	2201      	movs	r2, #1
 8013358:	609a      	str	r2, [r3, #8]
 801335a:	689a      	ldr	r2, [r3, #8]
 801335c:	2a00      	cmp	r2, #0
 801335e:	d1fc      	bne.n	801335a <ai_platform_network_create+0x386>
 8013360:	4a05      	ldr	r2, [pc, #20]	; (8013378 <ai_platform_network_create+0x3a4>)
 8013362:	601a      	str	r2, [r3, #0]
 8013364:	681a      	ldr	r2, [r3, #0]
 8013366:	4b05      	ldr	r3, [pc, #20]	; (801337c <ai_platform_network_create+0x3a8>)
 8013368:	429a      	cmp	r2, r3
 801336a:	d0ab      	beq.n	80132c4 <ai_platform_network_create+0x2f0>
 801336c:	e7fe      	b.n	801336c <ai_platform_network_create+0x398>
 801336e:	f04f 0902 	mov.w	r9, #2
 8013372:	e748      	b.n	8013206 <ai_platform_network_create+0x232>
 8013374:	58024000 	.word	0x58024000
 8013378:	f407a5c2 	.word	0xf407a5c2
 801337c:	b5e8b5cd 	.word	0xb5e8b5cd
 8013380:	40023000 	.word	0x40023000
 8013384:	84048403 	.word	0x84048403

08013388 <ai_platform_network_init>:
 8013388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801338c:	2800      	cmp	r0, #0
 801338e:	d052      	beq.n	8013436 <ai_platform_network_init+0xae>
 8013390:	4bab      	ldr	r3, [pc, #684]	; (8013640 <ai_platform_network_init+0x2b8>)
 8013392:	4604      	mov	r4, r0
 8013394:	6802      	ldr	r2, [r0, #0]
 8013396:	429a      	cmp	r2, r3
 8013398:	d14d      	bne.n	8013436 <ai_platform_network_init+0xae>
 801339a:	460d      	mov	r5, r1
 801339c:	f7ff f926 	bl	80125ec <_ai_platform_acquire_crc>
 80133a0:	4ba8      	ldr	r3, [pc, #672]	; (8013644 <ai_platform_network_init+0x2bc>)
 80133a2:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80133ac:	189a      	adds	r2, r3, r2
 80133ae:	2a01      	cmp	r2, #1
 80133b0:	f240 809b 	bls.w	80134ea <ai_platform_network_init+0x162>
 80133b4:	f240 4249 	movw	r2, #1097	; 0x449
 80133b8:	4293      	cmp	r3, r2
 80133ba:	f000 8096 	beq.w	80134ea <ai_platform_network_init+0x162>
 80133be:	4aa2      	ldr	r2, [pc, #648]	; (8013648 <ai_platform_network_init+0x2c0>)
 80133c0:	6813      	ldr	r3, [r2, #0]
 80133c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80133c6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80133ca:	f000 809d 	beq.w	8013508 <ai_platform_network_init+0x180>
 80133ce:	6813      	ldr	r3, [r2, #0]
 80133d0:	f240 4183 	movw	r1, #1155	; 0x483
 80133d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80133d8:	428b      	cmp	r3, r1
 80133da:	f000 80e4 	beq.w	80135a6 <ai_platform_network_init+0x21e>
 80133de:	6813      	ldr	r3, [r2, #0]
 80133e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80133e4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80133e8:	f000 811b 	beq.w	8013622 <ai_platform_network_init+0x29a>
 80133ec:	6813      	ldr	r3, [r2, #0]
 80133ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	f000 80f9 	beq.w	80135ea <ai_platform_network_init+0x262>
 80133f8:	f7ff f8fa 	bl	80125f0 <_ai_platform_release_crc>
 80133fc:	2d00      	cmp	r5, #0
 80133fe:	f000 8147 	beq.w	8013690 <ai_platform_network_init+0x308>
 8013402:	4b92      	ldr	r3, [pc, #584]	; (801364c <ai_platform_network_init+0x2c4>)
 8013404:	682a      	ldr	r2, [r5, #0]
 8013406:	429a      	cmp	r2, r3
 8013408:	f040 8090 	bne.w	801352c <ai_platform_network_init+0x1a4>
 801340c:	692b      	ldr	r3, [r5, #16]
 801340e:	89ae      	ldrh	r6, [r5, #12]
 8013410:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 8013414:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 8013418:	62a3      	str	r3, [r4, #40]	; 0x28
 801341a:	e9c4 1207 	strd	r1, r2, [r4, #28]
 801341e:	2303      	movs	r3, #3
 8013420:	84a6      	strh	r6, [r4, #36]	; 0x24
 8013422:	4626      	mov	r6, r4
 8013424:	4620      	mov	r0, r4
 8013426:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 801342a:	60e3      	str	r3, [r4, #12]
 801342c:	f002 fca4 	bl	8015d78 <ai_layers_init_all>
 8013430:	4630      	mov	r0, r6
 8013432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013436:	f7ff f8d9 	bl	80125ec <_ai_platform_acquire_crc>
 801343a:	4b82      	ldr	r3, [pc, #520]	; (8013644 <ai_platform_network_init+0x2bc>)
 801343c:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013446:	185a      	adds	r2, r3, r1
 8013448:	2a01      	cmp	r2, #1
 801344a:	d92b      	bls.n	80134a4 <ai_platform_network_init+0x11c>
 801344c:	f240 4249 	movw	r2, #1097	; 0x449
 8013450:	4293      	cmp	r3, r2
 8013452:	d027      	beq.n	80134a4 <ai_platform_network_init+0x11c>
 8013454:	4a7c      	ldr	r2, [pc, #496]	; (8013648 <ai_platform_network_init+0x2c0>)
 8013456:	6813      	ldr	r3, [r2, #0]
 8013458:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801345c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8013460:	d02d      	beq.n	80134be <ai_platform_network_init+0x136>
 8013462:	6813      	ldr	r3, [r2, #0]
 8013464:	f240 4183 	movw	r1, #1155	; 0x483
 8013468:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801346c:	428b      	cmp	r3, r1
 801346e:	f000 8089 	beq.w	8013584 <ai_platform_network_init+0x1fc>
 8013472:	6813      	ldr	r3, [r2, #0]
 8013474:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013478:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801347c:	f000 80c3 	beq.w	8013606 <ai_platform_network_init+0x27e>
 8013480:	6813      	ldr	r3, [r2, #0]
 8013482:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013486:	2b00      	cmp	r3, #0
 8013488:	d129      	bne.n	80134de <ai_platform_network_init+0x156>
 801348a:	4a71      	ldr	r2, [pc, #452]	; (8013650 <ai_platform_network_init+0x2c8>)
 801348c:	2301      	movs	r3, #1
 801348e:	6093      	str	r3, [r2, #8]
 8013490:	6893      	ldr	r3, [r2, #8]
 8013492:	2b00      	cmp	r3, #0
 8013494:	d1fc      	bne.n	8013490 <ai_platform_network_init+0x108>
 8013496:	496f      	ldr	r1, [pc, #444]	; (8013654 <ai_platform_network_init+0x2cc>)
 8013498:	4b6f      	ldr	r3, [pc, #444]	; (8013658 <ai_platform_network_init+0x2d0>)
 801349a:	6011      	str	r1, [r2, #0]
 801349c:	6812      	ldr	r2, [r2, #0]
 801349e:	429a      	cmp	r2, r3
 80134a0:	d01d      	beq.n	80134de <ai_platform_network_init+0x156>
 80134a2:	e7fe      	b.n	80134a2 <ai_platform_network_init+0x11a>
 80134a4:	4a6a      	ldr	r2, [pc, #424]	; (8013650 <ai_platform_network_init+0x2c8>)
 80134a6:	2301      	movs	r3, #1
 80134a8:	6093      	str	r3, [r2, #8]
 80134aa:	6893      	ldr	r3, [r2, #8]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d1fc      	bne.n	80134aa <ai_platform_network_init+0x122>
 80134b0:	4968      	ldr	r1, [pc, #416]	; (8013654 <ai_platform_network_init+0x2cc>)
 80134b2:	4b69      	ldr	r3, [pc, #420]	; (8013658 <ai_platform_network_init+0x2d0>)
 80134b4:	6011      	str	r1, [r2, #0]
 80134b6:	6812      	ldr	r2, [r2, #0]
 80134b8:	429a      	cmp	r2, r3
 80134ba:	d010      	beq.n	80134de <ai_platform_network_init+0x156>
 80134bc:	e7fe      	b.n	80134bc <ai_platform_network_init+0x134>
 80134be:	4a67      	ldr	r2, [pc, #412]	; (801365c <ai_platform_network_init+0x2d4>)
 80134c0:	2301      	movs	r3, #1
 80134c2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80134c6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d1fb      	bne.n	80134c6 <ai_platform_network_init+0x13e>
 80134ce:	4961      	ldr	r1, [pc, #388]	; (8013654 <ai_platform_network_init+0x2cc>)
 80134d0:	4b61      	ldr	r3, [pc, #388]	; (8013658 <ai_platform_network_init+0x2d0>)
 80134d2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80134d6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80134da:	429a      	cmp	r2, r3
 80134dc:	d113      	bne.n	8013506 <ai_platform_network_init+0x17e>
 80134de:	2600      	movs	r6, #0
 80134e0:	f7ff f886 	bl	80125f0 <_ai_platform_release_crc>
 80134e4:	4630      	mov	r0, r6
 80134e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134ea:	4a59      	ldr	r2, [pc, #356]	; (8013650 <ai_platform_network_init+0x2c8>)
 80134ec:	2301      	movs	r3, #1
 80134ee:	6093      	str	r3, [r2, #8]
 80134f0:	6893      	ldr	r3, [r2, #8]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d1fc      	bne.n	80134f0 <ai_platform_network_init+0x168>
 80134f6:	4b57      	ldr	r3, [pc, #348]	; (8013654 <ai_platform_network_init+0x2cc>)
 80134f8:	6013      	str	r3, [r2, #0]
 80134fa:	4b57      	ldr	r3, [pc, #348]	; (8013658 <ai_platform_network_init+0x2d0>)
 80134fc:	6812      	ldr	r2, [r2, #0]
 80134fe:	429a      	cmp	r2, r3
 8013500:	f43f af7a 	beq.w	80133f8 <ai_platform_network_init+0x70>
 8013504:	e7fe      	b.n	8013504 <ai_platform_network_init+0x17c>
 8013506:	e7fe      	b.n	8013506 <ai_platform_network_init+0x17e>
 8013508:	4a54      	ldr	r2, [pc, #336]	; (801365c <ai_platform_network_init+0x2d4>)
 801350a:	2301      	movs	r3, #1
 801350c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8013510:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8013514:	2b00      	cmp	r3, #0
 8013516:	d1fb      	bne.n	8013510 <ai_platform_network_init+0x188>
 8013518:	4b4e      	ldr	r3, [pc, #312]	; (8013654 <ai_platform_network_init+0x2cc>)
 801351a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 801351e:	4b4e      	ldr	r3, [pc, #312]	; (8013658 <ai_platform_network_init+0x2d0>)
 8013520:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8013524:	429a      	cmp	r2, r3
 8013526:	f43f af67 	beq.w	80133f8 <ai_platform_network_init+0x70>
 801352a:	e7fe      	b.n	801352a <ai_platform_network_init+0x1a2>
 801352c:	2101      	movs	r1, #1
 801352e:	4628      	mov	r0, r5
 8013530:	f105 081c 	add.w	r8, r5, #28
 8013534:	686e      	ldr	r6, [r5, #4]
 8013536:	f7ff f80b 	bl	8012550 <ai_buffer_get_size>
 801353a:	4607      	mov	r7, r0
 801353c:	2101      	movs	r1, #1
 801353e:	4640      	mov	r0, r8
 8013540:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8013544:	f7ff f804 	bl	8012550 <ai_buffer_get_size>
 8013548:	2f00      	cmp	r7, #0
 801354a:	d13e      	bne.n	80135ca <ai_platform_network_init+0x242>
 801354c:	2800      	cmp	r0, #0
 801354e:	f000 808e 	beq.w	801366e <ai_platform_network_init+0x2e6>
 8013552:	f1b9 0f00 	cmp.w	r9, #0
 8013556:	f000 8094 	beq.w	8013682 <ai_platform_network_init+0x2fa>
 801355a:	f04f 0c01 	mov.w	ip, #1
 801355e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8013560:	2600      	movs	r6, #0
 8013562:	83e7      	strh	r7, [r4, #30]
 8013564:	4563      	cmp	r3, ip
 8013566:	83a6      	strh	r6, [r4, #28]
 8013568:	d37a      	bcc.n	8013660 <ai_platform_network_init+0x2d8>
 801356a:	f1bc 0f00 	cmp.w	ip, #0
 801356e:	f000 809c 	beq.w	80136aa <ai_platform_network_init+0x322>
 8013572:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8013574:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8013578:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801357a:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 801357e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8013582:	e74c      	b.n	801341e <ai_platform_network_init+0x96>
 8013584:	4a35      	ldr	r2, [pc, #212]	; (801365c <ai_platform_network_init+0x2d4>)
 8013586:	2301      	movs	r3, #1
 8013588:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801358c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8013590:	2b00      	cmp	r3, #0
 8013592:	d1fb      	bne.n	801358c <ai_platform_network_init+0x204>
 8013594:	492f      	ldr	r1, [pc, #188]	; (8013654 <ai_platform_network_init+0x2cc>)
 8013596:	4b30      	ldr	r3, [pc, #192]	; (8013658 <ai_platform_network_init+0x2d0>)
 8013598:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 801359c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80135a0:	429a      	cmp	r2, r3
 80135a2:	d09c      	beq.n	80134de <ai_platform_network_init+0x156>
 80135a4:	e7fe      	b.n	80135a4 <ai_platform_network_init+0x21c>
 80135a6:	4a2d      	ldr	r2, [pc, #180]	; (801365c <ai_platform_network_init+0x2d4>)
 80135a8:	2301      	movs	r3, #1
 80135aa:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80135ae:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d1fb      	bne.n	80135ae <ai_platform_network_init+0x226>
 80135b6:	4b27      	ldr	r3, [pc, #156]	; (8013654 <ai_platform_network_init+0x2cc>)
 80135b8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80135bc:	4b26      	ldr	r3, [pc, #152]	; (8013658 <ai_platform_network_init+0x2d0>)
 80135be:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80135c2:	429a      	cmp	r2, r3
 80135c4:	f43f af18 	beq.w	80133f8 <ai_platform_network_init+0x70>
 80135c8:	e7fe      	b.n	80135c8 <ai_platform_network_init+0x240>
 80135ca:	2800      	cmp	r0, #0
 80135cc:	d153      	bne.n	8013676 <ai_platform_network_init+0x2ee>
 80135ce:	4680      	mov	r8, r0
 80135d0:	4684      	mov	ip, r0
 80135d2:	2e00      	cmp	r6, #0
 80135d4:	d063      	beq.n	801369e <ai_platform_network_init+0x316>
 80135d6:	8be6      	ldrh	r6, [r4, #30]
 80135d8:	2e00      	cmp	r6, #0
 80135da:	d168      	bne.n	80136ae <ai_platform_network_init+0x326>
 80135dc:	2212      	movs	r2, #18
 80135de:	2116      	movs	r1, #22
 80135e0:	f104 0010 	add.w	r0, r4, #16
 80135e4:	f000 fee0 	bl	80143a8 <core_set_error>
 80135e8:	e77c      	b.n	80134e4 <ai_platform_network_init+0x15c>
 80135ea:	4a19      	ldr	r2, [pc, #100]	; (8013650 <ai_platform_network_init+0x2c8>)
 80135ec:	2301      	movs	r3, #1
 80135ee:	6093      	str	r3, [r2, #8]
 80135f0:	6893      	ldr	r3, [r2, #8]
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d1fc      	bne.n	80135f0 <ai_platform_network_init+0x268>
 80135f6:	4b17      	ldr	r3, [pc, #92]	; (8013654 <ai_platform_network_init+0x2cc>)
 80135f8:	6013      	str	r3, [r2, #0]
 80135fa:	4b17      	ldr	r3, [pc, #92]	; (8013658 <ai_platform_network_init+0x2d0>)
 80135fc:	6812      	ldr	r2, [r2, #0]
 80135fe:	429a      	cmp	r2, r3
 8013600:	f43f aefa 	beq.w	80133f8 <ai_platform_network_init+0x70>
 8013604:	e7fe      	b.n	8013604 <ai_platform_network_init+0x27c>
 8013606:	4a12      	ldr	r2, [pc, #72]	; (8013650 <ai_platform_network_init+0x2c8>)
 8013608:	2301      	movs	r3, #1
 801360a:	6093      	str	r3, [r2, #8]
 801360c:	6893      	ldr	r3, [r2, #8]
 801360e:	2b00      	cmp	r3, #0
 8013610:	d1fc      	bne.n	801360c <ai_platform_network_init+0x284>
 8013612:	4910      	ldr	r1, [pc, #64]	; (8013654 <ai_platform_network_init+0x2cc>)
 8013614:	4b10      	ldr	r3, [pc, #64]	; (8013658 <ai_platform_network_init+0x2d0>)
 8013616:	6011      	str	r1, [r2, #0]
 8013618:	6812      	ldr	r2, [r2, #0]
 801361a:	429a      	cmp	r2, r3
 801361c:	f43f af5f 	beq.w	80134de <ai_platform_network_init+0x156>
 8013620:	e7fe      	b.n	8013620 <ai_platform_network_init+0x298>
 8013622:	4a0b      	ldr	r2, [pc, #44]	; (8013650 <ai_platform_network_init+0x2c8>)
 8013624:	2301      	movs	r3, #1
 8013626:	6093      	str	r3, [r2, #8]
 8013628:	6893      	ldr	r3, [r2, #8]
 801362a:	2b00      	cmp	r3, #0
 801362c:	d1fc      	bne.n	8013628 <ai_platform_network_init+0x2a0>
 801362e:	4b09      	ldr	r3, [pc, #36]	; (8013654 <ai_platform_network_init+0x2cc>)
 8013630:	6013      	str	r3, [r2, #0]
 8013632:	4b09      	ldr	r3, [pc, #36]	; (8013658 <ai_platform_network_init+0x2d0>)
 8013634:	6812      	ldr	r2, [r2, #0]
 8013636:	429a      	cmp	r2, r3
 8013638:	f43f aede 	beq.w	80133f8 <ai_platform_network_init+0x70>
 801363c:	e7fe      	b.n	801363c <ai_platform_network_init+0x2b4>
 801363e:	bf00      	nop
 8013640:	a1c00100 	.word	0xa1c00100
 8013644:	e0042000 	.word	0xe0042000
 8013648:	5c001000 	.word	0x5c001000
 801364c:	a1facade 	.word	0xa1facade
 8013650:	40023000 	.word	0x40023000
 8013654:	f407a5c2 	.word	0xf407a5c2
 8013658:	b5e8b5cd 	.word	0xb5e8b5cd
 801365c:	58024000 	.word	0x58024000
 8013660:	2213      	movs	r2, #19
 8013662:	2116      	movs	r1, #22
 8013664:	f104 0010 	add.w	r0, r4, #16
 8013668:	f000 fe9e 	bl	80143a8 <core_set_error>
 801366c:	e73a      	b.n	80134e4 <ai_platform_network_init+0x15c>
 801366e:	4607      	mov	r7, r0
 8013670:	4680      	mov	r8, r0
 8013672:	4684      	mov	ip, r0
 8013674:	e773      	b.n	801355e <ai_platform_network_init+0x1d6>
 8013676:	f1b9 0f00 	cmp.w	r9, #0
 801367a:	d002      	beq.n	8013682 <ai_platform_network_init+0x2fa>
 801367c:	f04f 0c01 	mov.w	ip, #1
 8013680:	e7a7      	b.n	80135d2 <ai_platform_network_init+0x24a>
 8013682:	2110      	movs	r1, #16
 8013684:	2213      	movs	r2, #19
 8013686:	2600      	movs	r6, #0
 8013688:	1860      	adds	r0, r4, r1
 801368a:	f000 fe8d 	bl	80143a8 <core_set_error>
 801368e:	e729      	b.n	80134e4 <ai_platform_network_init+0x15c>
 8013690:	2110      	movs	r1, #16
 8013692:	2211      	movs	r2, #17
 8013694:	462e      	mov	r6, r5
 8013696:	1860      	adds	r0, r4, r1
 8013698:	f000 fe86 	bl	80143a8 <core_set_error>
 801369c:	e722      	b.n	80134e4 <ai_platform_network_init+0x15c>
 801369e:	2110      	movs	r1, #16
 80136a0:	2212      	movs	r2, #18
 80136a2:	1860      	adds	r0, r4, r1
 80136a4:	f000 fe80 	bl	80143a8 <core_set_error>
 80136a8:	e71c      	b.n	80134e4 <ai_platform_network_init+0x15c>
 80136aa:	4666      	mov	r6, ip
 80136ac:	e6b7      	b.n	801341e <ai_platform_network_init+0x96>
 80136ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80136b0:	6a26      	ldr	r6, [r4, #32]
 80136b2:	2701      	movs	r7, #1
 80136b4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80136b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80136ba:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80136be:	e74e      	b.n	801355e <ai_platform_network_init+0x1d6>

080136c0 <ai_platform_network_post_init>:
 80136c0:	b538      	push	{r3, r4, r5, lr}
 80136c2:	2800      	cmp	r0, #0
 80136c4:	d04e      	beq.n	8013764 <ai_platform_network_post_init+0xa4>
 80136c6:	4b8c      	ldr	r3, [pc, #560]	; (80138f8 <ai_platform_network_post_init+0x238>)
 80136c8:	4604      	mov	r4, r0
 80136ca:	6802      	ldr	r2, [r0, #0]
 80136cc:	429a      	cmp	r2, r3
 80136ce:	d149      	bne.n	8013764 <ai_platform_network_post_init+0xa4>
 80136d0:	f7fe ff8c 	bl	80125ec <_ai_platform_acquire_crc>
 80136d4:	4b89      	ldr	r3, [pc, #548]	; (80138fc <ai_platform_network_post_init+0x23c>)
 80136d6:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80136e0:	189a      	adds	r2, r3, r2
 80136e2:	2a01      	cmp	r2, #1
 80136e4:	f240 8095 	bls.w	8013812 <ai_platform_network_post_init+0x152>
 80136e8:	f240 4249 	movw	r2, #1097	; 0x449
 80136ec:	4293      	cmp	r3, r2
 80136ee:	f000 8090 	beq.w	8013812 <ai_platform_network_post_init+0x152>
 80136f2:	4a83      	ldr	r2, [pc, #524]	; (8013900 <ai_platform_network_post_init+0x240>)
 80136f4:	6813      	ldr	r3, [r2, #0]
 80136f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80136fa:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80136fe:	f000 8096 	beq.w	801382e <ai_platform_network_post_init+0x16e>
 8013702:	6813      	ldr	r3, [r2, #0]
 8013704:	f240 4183 	movw	r1, #1155	; 0x483
 8013708:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801370c:	428b      	cmp	r3, r1
 801370e:	f000 80b8 	beq.w	8013882 <ai_platform_network_post_init+0x1c2>
 8013712:	6813      	ldr	r3, [r2, #0]
 8013714:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013718:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801371c:	f000 80de 	beq.w	80138dc <ai_platform_network_post_init+0x21c>
 8013720:	6813      	ldr	r3, [r2, #0]
 8013722:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013726:	2b00      	cmp	r3, #0
 8013728:	f000 80bd 	beq.w	80138a6 <ai_platform_network_post_init+0x1e6>
 801372c:	f7fe ff60 	bl	80125f0 <_ai_platform_release_crc>
 8013730:	68e3      	ldr	r3, [r4, #12]
 8013732:	f013 0502 	ands.w	r5, r3, #2
 8013736:	f000 808c 	beq.w	8013852 <ai_platform_network_post_init+0x192>
 801373a:	4620      	mov	r0, r4
 801373c:	f002 fb2a 	bl	8015d94 <ai_layers_post_init_all>
 8013740:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013742:	b16b      	cbz	r3, 8013760 <ai_platform_network_post_init+0xa0>
 8013744:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8013746:	e007      	b.n	8013758 <ai_platform_network_post_init+0x98>
 8013748:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 801374c:	4798      	blx	r3
 801374e:	692b      	ldr	r3, [r5, #16]
 8013750:	b133      	cbz	r3, 8013760 <ai_platform_network_post_init+0xa0>
 8013752:	42ab      	cmp	r3, r5
 8013754:	461d      	mov	r5, r3
 8013756:	d003      	beq.n	8013760 <ai_platform_network_post_init+0xa0>
 8013758:	4629      	mov	r1, r5
 801375a:	2000      	movs	r0, #0
 801375c:	2d00      	cmp	r5, #0
 801375e:	d1f3      	bne.n	8013748 <ai_platform_network_post_init+0x88>
 8013760:	2001      	movs	r0, #1
 8013762:	bd38      	pop	{r3, r4, r5, pc}
 8013764:	f7fe ff42 	bl	80125ec <_ai_platform_acquire_crc>
 8013768:	4b64      	ldr	r3, [pc, #400]	; (80138fc <ai_platform_network_post_init+0x23c>)
 801376a:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013774:	185a      	adds	r2, r3, r1
 8013776:	2a01      	cmp	r2, #1
 8013778:	d92a      	bls.n	80137d0 <ai_platform_network_post_init+0x110>
 801377a:	f240 4249 	movw	r2, #1097	; 0x449
 801377e:	4293      	cmp	r3, r2
 8013780:	d026      	beq.n	80137d0 <ai_platform_network_post_init+0x110>
 8013782:	4a5f      	ldr	r2, [pc, #380]	; (8013900 <ai_platform_network_post_init+0x240>)
 8013784:	6813      	ldr	r3, [r2, #0]
 8013786:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801378a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801378e:	d02c      	beq.n	80137ea <ai_platform_network_post_init+0x12a>
 8013790:	6813      	ldr	r3, [r2, #0]
 8013792:	f240 4183 	movw	r1, #1155	; 0x483
 8013796:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801379a:	428b      	cmp	r3, r1
 801379c:	d060      	beq.n	8013860 <ai_platform_network_post_init+0x1a0>
 801379e:	6813      	ldr	r3, [r2, #0]
 80137a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80137a4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80137a8:	f000 808b 	beq.w	80138c2 <ai_platform_network_post_init+0x202>
 80137ac:	6813      	ldr	r3, [r2, #0]
 80137ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d129      	bne.n	801380a <ai_platform_network_post_init+0x14a>
 80137b6:	4a53      	ldr	r2, [pc, #332]	; (8013904 <ai_platform_network_post_init+0x244>)
 80137b8:	2301      	movs	r3, #1
 80137ba:	6093      	str	r3, [r2, #8]
 80137bc:	6893      	ldr	r3, [r2, #8]
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d1fc      	bne.n	80137bc <ai_platform_network_post_init+0xfc>
 80137c2:	4951      	ldr	r1, [pc, #324]	; (8013908 <ai_platform_network_post_init+0x248>)
 80137c4:	4b51      	ldr	r3, [pc, #324]	; (801390c <ai_platform_network_post_init+0x24c>)
 80137c6:	6011      	str	r1, [r2, #0]
 80137c8:	6812      	ldr	r2, [r2, #0]
 80137ca:	429a      	cmp	r2, r3
 80137cc:	d01d      	beq.n	801380a <ai_platform_network_post_init+0x14a>
 80137ce:	e7fe      	b.n	80137ce <ai_platform_network_post_init+0x10e>
 80137d0:	4a4c      	ldr	r2, [pc, #304]	; (8013904 <ai_platform_network_post_init+0x244>)
 80137d2:	2301      	movs	r3, #1
 80137d4:	6093      	str	r3, [r2, #8]
 80137d6:	6893      	ldr	r3, [r2, #8]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d1fc      	bne.n	80137d6 <ai_platform_network_post_init+0x116>
 80137dc:	494a      	ldr	r1, [pc, #296]	; (8013908 <ai_platform_network_post_init+0x248>)
 80137de:	4b4b      	ldr	r3, [pc, #300]	; (801390c <ai_platform_network_post_init+0x24c>)
 80137e0:	6011      	str	r1, [r2, #0]
 80137e2:	6812      	ldr	r2, [r2, #0]
 80137e4:	429a      	cmp	r2, r3
 80137e6:	d010      	beq.n	801380a <ai_platform_network_post_init+0x14a>
 80137e8:	e7fe      	b.n	80137e8 <ai_platform_network_post_init+0x128>
 80137ea:	4a49      	ldr	r2, [pc, #292]	; (8013910 <ai_platform_network_post_init+0x250>)
 80137ec:	2301      	movs	r3, #1
 80137ee:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80137f2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d1fb      	bne.n	80137f2 <ai_platform_network_post_init+0x132>
 80137fa:	4943      	ldr	r1, [pc, #268]	; (8013908 <ai_platform_network_post_init+0x248>)
 80137fc:	4b43      	ldr	r3, [pc, #268]	; (801390c <ai_platform_network_post_init+0x24c>)
 80137fe:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8013802:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8013806:	429a      	cmp	r2, r3
 8013808:	d110      	bne.n	801382c <ai_platform_network_post_init+0x16c>
 801380a:	f7fe fef1 	bl	80125f0 <_ai_platform_release_crc>
 801380e:	2000      	movs	r0, #0
 8013810:	bd38      	pop	{r3, r4, r5, pc}
 8013812:	4a3c      	ldr	r2, [pc, #240]	; (8013904 <ai_platform_network_post_init+0x244>)
 8013814:	2301      	movs	r3, #1
 8013816:	6093      	str	r3, [r2, #8]
 8013818:	6893      	ldr	r3, [r2, #8]
 801381a:	2b00      	cmp	r3, #0
 801381c:	d1fc      	bne.n	8013818 <ai_platform_network_post_init+0x158>
 801381e:	493a      	ldr	r1, [pc, #232]	; (8013908 <ai_platform_network_post_init+0x248>)
 8013820:	4b3a      	ldr	r3, [pc, #232]	; (801390c <ai_platform_network_post_init+0x24c>)
 8013822:	6011      	str	r1, [r2, #0]
 8013824:	6812      	ldr	r2, [r2, #0]
 8013826:	429a      	cmp	r2, r3
 8013828:	d080      	beq.n	801372c <ai_platform_network_post_init+0x6c>
 801382a:	e7fe      	b.n	801382a <ai_platform_network_post_init+0x16a>
 801382c:	e7fe      	b.n	801382c <ai_platform_network_post_init+0x16c>
 801382e:	4a38      	ldr	r2, [pc, #224]	; (8013910 <ai_platform_network_post_init+0x250>)
 8013830:	2301      	movs	r3, #1
 8013832:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8013836:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801383a:	2b00      	cmp	r3, #0
 801383c:	d1fb      	bne.n	8013836 <ai_platform_network_post_init+0x176>
 801383e:	4932      	ldr	r1, [pc, #200]	; (8013908 <ai_platform_network_post_init+0x248>)
 8013840:	4b32      	ldr	r3, [pc, #200]	; (801390c <ai_platform_network_post_init+0x24c>)
 8013842:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8013846:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801384a:	429a      	cmp	r2, r3
 801384c:	f43f af6e 	beq.w	801372c <ai_platform_network_post_init+0x6c>
 8013850:	e7fe      	b.n	8013850 <ai_platform_network_post_init+0x190>
 8013852:	2210      	movs	r2, #16
 8013854:	2111      	movs	r1, #17
 8013856:	18a0      	adds	r0, r4, r2
 8013858:	f000 fda6 	bl	80143a8 <core_set_error>
 801385c:	4628      	mov	r0, r5
 801385e:	bd38      	pop	{r3, r4, r5, pc}
 8013860:	4a2b      	ldr	r2, [pc, #172]	; (8013910 <ai_platform_network_post_init+0x250>)
 8013862:	2301      	movs	r3, #1
 8013864:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8013868:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801386c:	2b00      	cmp	r3, #0
 801386e:	d1fb      	bne.n	8013868 <ai_platform_network_post_init+0x1a8>
 8013870:	4925      	ldr	r1, [pc, #148]	; (8013908 <ai_platform_network_post_init+0x248>)
 8013872:	4b26      	ldr	r3, [pc, #152]	; (801390c <ai_platform_network_post_init+0x24c>)
 8013874:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8013878:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801387c:	429a      	cmp	r2, r3
 801387e:	d0c4      	beq.n	801380a <ai_platform_network_post_init+0x14a>
 8013880:	e7fe      	b.n	8013880 <ai_platform_network_post_init+0x1c0>
 8013882:	4a23      	ldr	r2, [pc, #140]	; (8013910 <ai_platform_network_post_init+0x250>)
 8013884:	2301      	movs	r3, #1
 8013886:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801388a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801388e:	2b00      	cmp	r3, #0
 8013890:	d1fb      	bne.n	801388a <ai_platform_network_post_init+0x1ca>
 8013892:	491d      	ldr	r1, [pc, #116]	; (8013908 <ai_platform_network_post_init+0x248>)
 8013894:	4b1d      	ldr	r3, [pc, #116]	; (801390c <ai_platform_network_post_init+0x24c>)
 8013896:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 801389a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801389e:	429a      	cmp	r2, r3
 80138a0:	f43f af44 	beq.w	801372c <ai_platform_network_post_init+0x6c>
 80138a4:	e7fe      	b.n	80138a4 <ai_platform_network_post_init+0x1e4>
 80138a6:	4a17      	ldr	r2, [pc, #92]	; (8013904 <ai_platform_network_post_init+0x244>)
 80138a8:	2301      	movs	r3, #1
 80138aa:	6093      	str	r3, [r2, #8]
 80138ac:	6893      	ldr	r3, [r2, #8]
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d1fc      	bne.n	80138ac <ai_platform_network_post_init+0x1ec>
 80138b2:	4915      	ldr	r1, [pc, #84]	; (8013908 <ai_platform_network_post_init+0x248>)
 80138b4:	4b15      	ldr	r3, [pc, #84]	; (801390c <ai_platform_network_post_init+0x24c>)
 80138b6:	6011      	str	r1, [r2, #0]
 80138b8:	6812      	ldr	r2, [r2, #0]
 80138ba:	429a      	cmp	r2, r3
 80138bc:	f43f af36 	beq.w	801372c <ai_platform_network_post_init+0x6c>
 80138c0:	e7fe      	b.n	80138c0 <ai_platform_network_post_init+0x200>
 80138c2:	4a10      	ldr	r2, [pc, #64]	; (8013904 <ai_platform_network_post_init+0x244>)
 80138c4:	2301      	movs	r3, #1
 80138c6:	6093      	str	r3, [r2, #8]
 80138c8:	6893      	ldr	r3, [r2, #8]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d1fc      	bne.n	80138c8 <ai_platform_network_post_init+0x208>
 80138ce:	490e      	ldr	r1, [pc, #56]	; (8013908 <ai_platform_network_post_init+0x248>)
 80138d0:	4b0e      	ldr	r3, [pc, #56]	; (801390c <ai_platform_network_post_init+0x24c>)
 80138d2:	6011      	str	r1, [r2, #0]
 80138d4:	6812      	ldr	r2, [r2, #0]
 80138d6:	429a      	cmp	r2, r3
 80138d8:	d097      	beq.n	801380a <ai_platform_network_post_init+0x14a>
 80138da:	e7fe      	b.n	80138da <ai_platform_network_post_init+0x21a>
 80138dc:	4a09      	ldr	r2, [pc, #36]	; (8013904 <ai_platform_network_post_init+0x244>)
 80138de:	2301      	movs	r3, #1
 80138e0:	6093      	str	r3, [r2, #8]
 80138e2:	6893      	ldr	r3, [r2, #8]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d1fc      	bne.n	80138e2 <ai_platform_network_post_init+0x222>
 80138e8:	4907      	ldr	r1, [pc, #28]	; (8013908 <ai_platform_network_post_init+0x248>)
 80138ea:	4b08      	ldr	r3, [pc, #32]	; (801390c <ai_platform_network_post_init+0x24c>)
 80138ec:	6011      	str	r1, [r2, #0]
 80138ee:	6812      	ldr	r2, [r2, #0]
 80138f0:	429a      	cmp	r2, r3
 80138f2:	f43f af1b 	beq.w	801372c <ai_platform_network_post_init+0x6c>
 80138f6:	e7fe      	b.n	80138f6 <ai_platform_network_post_init+0x236>
 80138f8:	a1c00100 	.word	0xa1c00100
 80138fc:	e0042000 	.word	0xe0042000
 8013900:	5c001000 	.word	0x5c001000
 8013904:	40023000 	.word	0x40023000
 8013908:	f407a5c2 	.word	0xf407a5c2
 801390c:	b5e8b5cd 	.word	0xb5e8b5cd
 8013910:	58024000 	.word	0x58024000

08013914 <ai_platform_network_process>:
 8013914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013918:	b085      	sub	sp, #20
 801391a:	460e      	mov	r6, r1
 801391c:	4605      	mov	r5, r0
 801391e:	9201      	str	r2, [sp, #4]
 8013920:	b120      	cbz	r0, 801392c <ai_platform_network_process+0x18>
 8013922:	4b24      	ldr	r3, [pc, #144]	; (80139b4 <ai_platform_network_process+0xa0>)
 8013924:	6802      	ldr	r2, [r0, #0]
 8013926:	429a      	cmp	r2, r3
 8013928:	bf18      	it	ne
 801392a:	2500      	movne	r5, #0
 801392c:	f7fe fe5e 	bl	80125ec <_ai_platform_acquire_crc>
 8013930:	4b21      	ldr	r3, [pc, #132]	; (80139b8 <ai_platform_network_process+0xa4>)
 8013932:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801393c:	185a      	adds	r2, r3, r1
 801393e:	2a01      	cmp	r2, #1
 8013940:	d92b      	bls.n	801399a <ai_platform_network_process+0x86>
 8013942:	f240 4249 	movw	r2, #1097	; 0x449
 8013946:	4293      	cmp	r3, r2
 8013948:	d027      	beq.n	801399a <ai_platform_network_process+0x86>
 801394a:	4a1c      	ldr	r2, [pc, #112]	; (80139bc <ai_platform_network_process+0xa8>)
 801394c:	6813      	ldr	r3, [r2, #0]
 801394e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013952:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8013956:	d039      	beq.n	80139cc <ai_platform_network_process+0xb8>
 8013958:	6813      	ldr	r3, [r2, #0]
 801395a:	f240 4183 	movw	r1, #1155	; 0x483
 801395e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013962:	428b      	cmp	r3, r1
 8013964:	f000 819c 	beq.w	8013ca0 <ai_platform_network_process+0x38c>
 8013968:	6813      	ldr	r3, [r2, #0]
 801396a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801396e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8013972:	f000 8179 	beq.w	8013c68 <ai_platform_network_process+0x354>
 8013976:	6813      	ldr	r3, [r2, #0]
 8013978:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801397c:	2b00      	cmp	r3, #0
 801397e:	d136      	bne.n	80139ee <ai_platform_network_process+0xda>
 8013980:	4a0f      	ldr	r2, [pc, #60]	; (80139c0 <ai_platform_network_process+0xac>)
 8013982:	2301      	movs	r3, #1
 8013984:	6093      	str	r3, [r2, #8]
 8013986:	6893      	ldr	r3, [r2, #8]
 8013988:	2b00      	cmp	r3, #0
 801398a:	d1fc      	bne.n	8013986 <ai_platform_network_process+0x72>
 801398c:	4b0d      	ldr	r3, [pc, #52]	; (80139c4 <ai_platform_network_process+0xb0>)
 801398e:	6013      	str	r3, [r2, #0]
 8013990:	4b0d      	ldr	r3, [pc, #52]	; (80139c8 <ai_platform_network_process+0xb4>)
 8013992:	6812      	ldr	r2, [r2, #0]
 8013994:	429a      	cmp	r2, r3
 8013996:	d02a      	beq.n	80139ee <ai_platform_network_process+0xda>
 8013998:	e7fe      	b.n	8013998 <ai_platform_network_process+0x84>
 801399a:	4a09      	ldr	r2, [pc, #36]	; (80139c0 <ai_platform_network_process+0xac>)
 801399c:	2301      	movs	r3, #1
 801399e:	6093      	str	r3, [r2, #8]
 80139a0:	6893      	ldr	r3, [r2, #8]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d1fc      	bne.n	80139a0 <ai_platform_network_process+0x8c>
 80139a6:	4b07      	ldr	r3, [pc, #28]	; (80139c4 <ai_platform_network_process+0xb0>)
 80139a8:	6013      	str	r3, [r2, #0]
 80139aa:	4b07      	ldr	r3, [pc, #28]	; (80139c8 <ai_platform_network_process+0xb4>)
 80139ac:	6812      	ldr	r2, [r2, #0]
 80139ae:	429a      	cmp	r2, r3
 80139b0:	d01d      	beq.n	80139ee <ai_platform_network_process+0xda>
 80139b2:	e7fe      	b.n	80139b2 <ai_platform_network_process+0x9e>
 80139b4:	a1c00100 	.word	0xa1c00100
 80139b8:	e0042000 	.word	0xe0042000
 80139bc:	5c001000 	.word	0x5c001000
 80139c0:	40023000 	.word	0x40023000
 80139c4:	f407a5c2 	.word	0xf407a5c2
 80139c8:	b5e8b5cd 	.word	0xb5e8b5cd
 80139cc:	4ab0      	ldr	r2, [pc, #704]	; (8013c90 <ai_platform_network_process+0x37c>)
 80139ce:	2301      	movs	r3, #1
 80139d0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80139d4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d1fb      	bne.n	80139d4 <ai_platform_network_process+0xc0>
 80139dc:	4bad      	ldr	r3, [pc, #692]	; (8013c94 <ai_platform_network_process+0x380>)
 80139de:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80139e2:	4bad      	ldr	r3, [pc, #692]	; (8013c98 <ai_platform_network_process+0x384>)
 80139e4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80139e8:	429a      	cmp	r2, r3
 80139ea:	f040 812b 	bne.w	8013c44 <ai_platform_network_process+0x330>
 80139ee:	f7fe fdff 	bl	80125f0 <_ai_platform_release_crc>
 80139f2:	2d00      	cmp	r5, #0
 80139f4:	f000 8172 	beq.w	8013cdc <ai_platform_network_process+0x3c8>
 80139f8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	f000 8123 	beq.w	8013c46 <ai_platform_network_process+0x332>
 8013a00:	68eb      	ldr	r3, [r5, #12]
 8013a02:	2200      	movs	r2, #0
 8013a04:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8013a08:	f003 0303 	and.w	r3, r3, #3
 8013a0c:	616a      	str	r2, [r5, #20]
 8013a0e:	2b03      	cmp	r3, #3
 8013a10:	f040 811f 	bne.w	8013c52 <ai_platform_network_process+0x33e>
 8013a14:	2e00      	cmp	r6, #0
 8013a16:	f000 8156 	beq.w	8013cc6 <ai_platform_network_process+0x3b2>
 8013a1a:	fab8 f788 	clz	r7, r8
 8013a1e:	097f      	lsrs	r7, r7, #5
 8013a20:	f1b8 0f00 	cmp.w	r8, #0
 8013a24:	f000 814f 	beq.w	8013cc6 <ai_platform_network_process+0x3b2>
 8013a28:	f8b8 3000 	ldrh.w	r3, [r8]
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	f000 814a 	beq.w	8013cc6 <ai_platform_network_process+0x3b2>
 8013a32:	69b3      	ldr	r3, [r6, #24]
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	e9cd 3502 	strd	r3, r5, [sp, #8]
 8013a3a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d072      	beq.n	8013b28 <ai_platform_network_process+0x214>
 8013a42:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8013a46:	2c00      	cmp	r4, #0
 8013a48:	d06e      	beq.n	8013b28 <ai_platform_network_process+0x214>
 8013a4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013a4e:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8013a52:	f8d3 a000 	ldr.w	sl, [r3]
 8013a56:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 8013a5a:	f000 8133 	beq.w	8013cc4 <ai_platform_network_process+0x3b0>
 8013a5e:	69a3      	ldr	r3, [r4, #24]
 8013a60:	2101      	movs	r1, #1
 8013a62:	4630      	mov	r0, r6
 8013a64:	685d      	ldr	r5, [r3, #4]
 8013a66:	f7fe fd73 	bl	8012550 <ai_buffer_get_size>
 8013a6a:	4285      	cmp	r5, r0
 8013a6c:	f0c0 8138 	bcc.w	8013ce0 <ai_platform_network_process+0x3cc>
 8013a70:	68e0      	ldr	r0, [r4, #12]
 8013a72:	69b1      	ldr	r1, [r6, #24]
 8013a74:	68c2      	ldr	r2, [r0, #12]
 8013a76:	68cb      	ldr	r3, [r1, #12]
 8013a78:	429a      	cmp	r2, r3
 8013a7a:	f040 8131 	bne.w	8013ce0 <ai_platform_network_process+0x3cc>
 8013a7e:	6882      	ldr	r2, [r0, #8]
 8013a80:	688b      	ldr	r3, [r1, #8]
 8013a82:	429a      	cmp	r2, r3
 8013a84:	f040 812c 	bne.w	8013ce0 <ai_platform_network_process+0x3cc>
 8013a88:	6842      	ldr	r2, [r0, #4]
 8013a8a:	684b      	ldr	r3, [r1, #4]
 8013a8c:	429a      	cmp	r2, r3
 8013a8e:	f040 8127 	bne.w	8013ce0 <ai_platform_network_process+0x3cc>
 8013a92:	69a3      	ldr	r3, [r4, #24]
 8013a94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013a98:	f007 fc74 	bl	801b384 <ai_array_get_data_byte_size>
 8013a9c:	4605      	mov	r5, r0
 8013a9e:	4620      	mov	r0, r4
 8013aa0:	f007 fbc6 	bl	801b230 <get_tensor_byte_size>
 8013aa4:	4285      	cmp	r5, r0
 8013aa6:	f0c0 811b 	bcc.w	8013ce0 <ai_platform_network_process+0x3cc>
 8013aaa:	69a3      	ldr	r3, [r4, #24]
 8013aac:	6818      	ldr	r0, [r3, #0]
 8013aae:	f007 fbd5 	bl	801b25c <ai_array_to_buffer_fmt>
 8013ab2:	6833      	ldr	r3, [r6, #0]
 8013ab4:	4058      	eors	r0, r3
 8013ab6:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8013aba:	f040 81ca 	bne.w	8013e52 <ai_platform_network_process+0x53e>
 8013abe:	6873      	ldr	r3, [r6, #4]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	f000 81bd 	beq.w	8013e40 <ai_platform_network_process+0x52c>
 8013ac6:	69b3      	ldr	r3, [r6, #24]
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	f000 81ca 	beq.w	8013e64 <ai_platform_network_process+0x550>
 8013ad0:	9a02      	ldr	r2, [sp, #8]
 8013ad2:	4620      	mov	r0, r4
 8013ad4:	3701      	adds	r7, #1
 8013ad6:	361c      	adds	r6, #28
 8013ad8:	429a      	cmp	r2, r3
 8013ada:	bf38      	it	cc
 8013adc:	461a      	movcc	r2, r3
 8013ade:	9202      	str	r2, [sp, #8]
 8013ae0:	f007 fba6 	bl	801b230 <get_tensor_byte_size>
 8013ae4:	f8c9 0008 	str.w	r0, [r9, #8]
 8013ae8:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	fb00 f303 	mul.w	r3, r0, r3
 8013af2:	f8c9 300c 	str.w	r3, [r9, #12]
 8013af6:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8013afa:	440b      	add	r3, r1
 8013afc:	f8c9 1004 	str.w	r1, [r9, #4]
 8013b00:	f84a 300b 	str.w	r3, [sl, fp]
 8013b04:	69a0      	ldr	r0, [r4, #24]
 8013b06:	6803      	ldr	r3, [r0, #0]
 8013b08:	009a      	lsls	r2, r3, #2
 8013b0a:	f100 80bb 	bmi.w	8013c84 <ai_platform_network_process+0x370>
 8013b0e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8013b12:	1a9b      	subs	r3, r3, r2
 8013b14:	4419      	add	r1, r3
 8013b16:	6081      	str	r1, [r0, #8]
 8013b18:	69a3      	ldr	r3, [r4, #24]
 8013b1a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8013b1e:	60da      	str	r2, [r3, #12]
 8013b20:	f8b8 3000 	ldrh.w	r3, [r8]
 8013b24:	42bb      	cmp	r3, r7
 8013b26:	d888      	bhi.n	8013a3a <ai_platform_network_process+0x126>
 8013b28:	9d03      	ldr	r5, [sp, #12]
 8013b2a:	9b01      	ldr	r3, [sp, #4]
 8013b2c:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	f000 81a1 	beq.w	8013e76 <ai_platform_network_process+0x562>
 8013b34:	2a01      	cmp	r2, #1
 8013b36:	f240 817b 	bls.w	8013e30 <ai_platform_network_process+0x51c>
 8013b3a:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8013b3e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	f000 8174 	beq.w	8013e30 <ai_platform_network_process+0x51c>
 8013b48:	9e01      	ldr	r6, [sp, #4]
 8013b4a:	2700      	movs	r7, #0
 8013b4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	f000 80d3 	beq.w	8013cfc <ai_platform_network_process+0x3e8>
 8013b56:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8013b5a:	2c00      	cmp	r4, #0
 8013b5c:	f000 80ce 	beq.w	8013cfc <ai_platform_network_process+0x3e8>
 8013b60:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8013b64:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8013b68:	f8d3 8000 	ldr.w	r8, [r3]
 8013b6c:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8013b70:	f000 819f 	beq.w	8013eb2 <ai_platform_network_process+0x59e>
 8013b74:	69a3      	ldr	r3, [r4, #24]
 8013b76:	2101      	movs	r1, #1
 8013b78:	4630      	mov	r0, r6
 8013b7a:	685b      	ldr	r3, [r3, #4]
 8013b7c:	9301      	str	r3, [sp, #4]
 8013b7e:	f7fe fce7 	bl	8012550 <ai_buffer_get_size>
 8013b82:	9b01      	ldr	r3, [sp, #4]
 8013b84:	4283      	cmp	r3, r0
 8013b86:	f0c0 8153 	bcc.w	8013e30 <ai_platform_network_process+0x51c>
 8013b8a:	68e0      	ldr	r0, [r4, #12]
 8013b8c:	69b1      	ldr	r1, [r6, #24]
 8013b8e:	68c2      	ldr	r2, [r0, #12]
 8013b90:	68cb      	ldr	r3, [r1, #12]
 8013b92:	429a      	cmp	r2, r3
 8013b94:	f040 814c 	bne.w	8013e30 <ai_platform_network_process+0x51c>
 8013b98:	6882      	ldr	r2, [r0, #8]
 8013b9a:	688b      	ldr	r3, [r1, #8]
 8013b9c:	429a      	cmp	r2, r3
 8013b9e:	f040 8147 	bne.w	8013e30 <ai_platform_network_process+0x51c>
 8013ba2:	6842      	ldr	r2, [r0, #4]
 8013ba4:	684b      	ldr	r3, [r1, #4]
 8013ba6:	429a      	cmp	r2, r3
 8013ba8:	f040 8142 	bne.w	8013e30 <ai_platform_network_process+0x51c>
 8013bac:	69a3      	ldr	r3, [r4, #24]
 8013bae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013bb2:	f007 fbe7 	bl	801b384 <ai_array_get_data_byte_size>
 8013bb6:	9001      	str	r0, [sp, #4]
 8013bb8:	4620      	mov	r0, r4
 8013bba:	f007 fb39 	bl	801b230 <get_tensor_byte_size>
 8013bbe:	9b01      	ldr	r3, [sp, #4]
 8013bc0:	4283      	cmp	r3, r0
 8013bc2:	f0c0 8135 	bcc.w	8013e30 <ai_platform_network_process+0x51c>
 8013bc6:	69a3      	ldr	r3, [r4, #24]
 8013bc8:	6818      	ldr	r0, [r3, #0]
 8013bca:	f007 fb47 	bl	801b25c <ai_array_to_buffer_fmt>
 8013bce:	6833      	ldr	r3, [r6, #0]
 8013bd0:	4058      	eors	r0, r3
 8013bd2:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8013bd6:	f040 815c 	bne.w	8013e92 <ai_platform_network_process+0x57e>
 8013bda:	6873      	ldr	r3, [r6, #4]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	f000 8150 	beq.w	8013e82 <ai_platform_network_process+0x56e>
 8013be2:	69b3      	ldr	r3, [r6, #24]
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	f000 815b 	beq.w	8013ea2 <ai_platform_network_process+0x58e>
 8013bec:	9a02      	ldr	r2, [sp, #8]
 8013bee:	4620      	mov	r0, r4
 8013bf0:	3701      	adds	r7, #1
 8013bf2:	361c      	adds	r6, #28
 8013bf4:	429a      	cmp	r2, r3
 8013bf6:	bf38      	it	cc
 8013bf8:	461a      	movcc	r2, r3
 8013bfa:	9202      	str	r2, [sp, #8]
 8013bfc:	f007 fb18 	bl	801b230 <get_tensor_byte_size>
 8013c00:	f8ca 0008 	str.w	r0, [sl, #8]
 8013c04:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	fb00 f303 	mul.w	r3, r0, r3
 8013c0e:	f8ca 300c 	str.w	r3, [sl, #12]
 8013c12:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8013c16:	440b      	add	r3, r1
 8013c18:	f8ca 1004 	str.w	r1, [sl, #4]
 8013c1c:	f848 300b 	str.w	r3, [r8, fp]
 8013c20:	69a0      	ldr	r0, [r4, #24]
 8013c22:	6803      	ldr	r3, [r0, #0]
 8013c24:	009b      	lsls	r3, r3, #2
 8013c26:	d464      	bmi.n	8013cf2 <ai_platform_network_process+0x3de>
 8013c28:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8013c2c:	1a9b      	subs	r3, r3, r2
 8013c2e:	4419      	add	r1, r3
 8013c30:	6081      	str	r1, [r0, #8]
 8013c32:	69a3      	ldr	r3, [r4, #24]
 8013c34:	f8da 2004 	ldr.w	r2, [sl, #4]
 8013c38:	60da      	str	r2, [r3, #12]
 8013c3a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8013c3e:	429f      	cmp	r7, r3
 8013c40:	d384      	bcc.n	8013b4c <ai_platform_network_process+0x238>
 8013c42:	e05b      	b.n	8013cfc <ai_platform_network_process+0x3e8>
 8013c44:	e7fe      	b.n	8013c44 <ai_platform_network_process+0x330>
 8013c46:	68ea      	ldr	r2, [r5, #12]
 8013c48:	616b      	str	r3, [r5, #20]
 8013c4a:	f002 0203 	and.w	r2, r2, #3
 8013c4e:	2a03      	cmp	r2, #3
 8013c50:	d039      	beq.n	8013cc6 <ai_platform_network_process+0x3b2>
 8013c52:	2230      	movs	r2, #48	; 0x30
 8013c54:	2111      	movs	r1, #17
 8013c56:	f105 0010 	add.w	r0, r5, #16
 8013c5a:	2400      	movs	r4, #0
 8013c5c:	f000 fba4 	bl	80143a8 <core_set_error>
 8013c60:	4620      	mov	r0, r4
 8013c62:	b005      	add	sp, #20
 8013c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c68:	4a0c      	ldr	r2, [pc, #48]	; (8013c9c <ai_platform_network_process+0x388>)
 8013c6a:	2301      	movs	r3, #1
 8013c6c:	6093      	str	r3, [r2, #8]
 8013c6e:	6893      	ldr	r3, [r2, #8]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d1fc      	bne.n	8013c6e <ai_platform_network_process+0x35a>
 8013c74:	4b07      	ldr	r3, [pc, #28]	; (8013c94 <ai_platform_network_process+0x380>)
 8013c76:	6013      	str	r3, [r2, #0]
 8013c78:	4b07      	ldr	r3, [pc, #28]	; (8013c98 <ai_platform_network_process+0x384>)
 8013c7a:	6812      	ldr	r2, [r2, #0]
 8013c7c:	429a      	cmp	r2, r3
 8013c7e:	f43f aeb6 	beq.w	80139ee <ai_platform_network_process+0xda>
 8013c82:	e7fe      	b.n	8013c82 <ai_platform_network_process+0x36e>
 8013c84:	f8b8 3000 	ldrh.w	r3, [r8]
 8013c88:	429f      	cmp	r7, r3
 8013c8a:	f4ff aed6 	bcc.w	8013a3a <ai_platform_network_process+0x126>
 8013c8e:	e74b      	b.n	8013b28 <ai_platform_network_process+0x214>
 8013c90:	58024000 	.word	0x58024000
 8013c94:	f407a5c2 	.word	0xf407a5c2
 8013c98:	b5e8b5cd 	.word	0xb5e8b5cd
 8013c9c:	40023000 	.word	0x40023000
 8013ca0:	4a88      	ldr	r2, [pc, #544]	; (8013ec4 <ai_platform_network_process+0x5b0>)
 8013ca2:	2301      	movs	r3, #1
 8013ca4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8013ca8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d1fb      	bne.n	8013ca8 <ai_platform_network_process+0x394>
 8013cb0:	4b85      	ldr	r3, [pc, #532]	; (8013ec8 <ai_platform_network_process+0x5b4>)
 8013cb2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8013cb6:	4b85      	ldr	r3, [pc, #532]	; (8013ecc <ai_platform_network_process+0x5b8>)
 8013cb8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8013cbc:	429a      	cmp	r2, r3
 8013cbe:	f43f ae96 	beq.w	80139ee <ai_platform_network_process+0xda>
 8013cc2:	e7fe      	b.n	8013cc2 <ai_platform_network_process+0x3ae>
 8013cc4:	9d03      	ldr	r5, [sp, #12]
 8013cc6:	2400      	movs	r4, #0
 8013cc8:	2217      	movs	r2, #23
 8013cca:	2112      	movs	r1, #18
 8013ccc:	f105 0010 	add.w	r0, r5, #16
 8013cd0:	f000 fb6a 	bl	80143a8 <core_set_error>
 8013cd4:	4620      	mov	r0, r4
 8013cd6:	b005      	add	sp, #20
 8013cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cdc:	462c      	mov	r4, r5
 8013cde:	e7bf      	b.n	8013c60 <ai_platform_network_process+0x34c>
 8013ce0:	9d03      	ldr	r5, [sp, #12]
 8013ce2:	2218      	movs	r2, #24
 8013ce4:	2112      	movs	r1, #18
 8013ce6:	2400      	movs	r4, #0
 8013ce8:	f105 0010 	add.w	r0, r5, #16
 8013cec:	f000 fb5c 	bl	80143a8 <core_set_error>
 8013cf0:	e7b6      	b.n	8013c60 <ai_platform_network_process+0x34c>
 8013cf2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8013cf6:	429f      	cmp	r7, r3
 8013cf8:	f4ff af28 	bcc.w	8013b4c <ai_platform_network_process+0x238>
 8013cfc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8013d00:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8013d02:	82ab      	strh	r3, [r5, #20]
 8013d04:	2a00      	cmp	r2, #0
 8013d06:	f040 808d 	bne.w	8013e24 <ai_platform_network_process+0x510>
 8013d0a:	4616      	mov	r6, r2
 8013d0c:	4617      	mov	r7, r2
 8013d0e:	8aec      	ldrh	r4, [r5, #22]
 8013d10:	429c      	cmp	r4, r3
 8013d12:	d2a5      	bcs.n	8013c60 <ai_platform_network_process+0x34c>
 8013d14:	46ab      	mov	fp, r5
 8013d16:	2e00      	cmp	r6, #0
 8013d18:	d030      	beq.n	8013d7c <ai_platform_network_process+0x468>
 8013d1a:	f04f 0800 	mov.w	r8, #0
 8013d1e:	e014      	b.n	8013d4a <ai_platform_network_process+0x436>
 8013d20:	6882      	ldr	r2, [r0, #8]
 8013d22:	68c5      	ldr	r5, [r0, #12]
 8013d24:	6863      	ldr	r3, [r4, #4]
 8013d26:	1b52      	subs	r2, r2, r5
 8013d28:	4413      	add	r3, r2
 8013d2a:	6083      	str	r3, [r0, #8]
 8013d2c:	698b      	ldr	r3, [r1, #24]
 8013d2e:	6862      	ldr	r2, [r4, #4]
 8013d30:	60da      	str	r2, [r3, #12]
 8013d32:	f859 200a 	ldr.w	r2, [r9, sl]
 8013d36:	f108 0801 	add.w	r8, r8, #1
 8013d3a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8013d3e:	440b      	add	r3, r1
 8013d40:	4293      	cmp	r3, r2
 8013d42:	d301      	bcc.n	8013d48 <ai_platform_network_process+0x434>
 8013d44:	68e3      	ldr	r3, [r4, #12]
 8013d46:	1ad3      	subs	r3, r2, r3
 8013d48:	6063      	str	r3, [r4, #4]
 8013d4a:	8833      	ldrh	r3, [r6, #0]
 8013d4c:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8013d50:	4543      	cmp	r3, r8
 8013d52:	d913      	bls.n	8013d7c <ai_platform_network_process+0x468>
 8013d54:	6873      	ldr	r3, [r6, #4]
 8013d56:	b18b      	cbz	r3, 8013d7c <ai_platform_network_process+0x468>
 8013d58:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8013d5c:	b171      	cbz	r1, 8013d7c <ai_platform_network_process+0x468>
 8013d5e:	6988      	ldr	r0, [r1, #24]
 8013d60:	68b2      	ldr	r2, [r6, #8]
 8013d62:	6803      	ldr	r3, [r0, #0]
 8013d64:	f8d2 9000 	ldr.w	r9, [r2]
 8013d68:	009d      	lsls	r5, r3, #2
 8013d6a:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8013d6e:	d5d7      	bpl.n	8013d20 <ai_platform_network_process+0x40c>
 8013d70:	6880      	ldr	r0, [r0, #8]
 8013d72:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8013d76:	f007 fc21 	bl	801b5bc <memcpy>
 8013d7a:	e7da      	b.n	8013d32 <ai_platform_network_process+0x41e>
 8013d7c:	4658      	mov	r0, fp
 8013d7e:	f002 f81d 	bl	8015dbc <ai_layers_forward_all>
 8013d82:	2f00      	cmp	r7, #0
 8013d84:	d03f      	beq.n	8013e06 <ai_platform_network_process+0x4f2>
 8013d86:	2400      	movs	r4, #0
 8013d88:	e016      	b.n	8013db8 <ai_platform_network_process+0x4a4>
 8013d8a:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8013d8e:	f859 100a 	ldr.w	r1, [r9, sl]
 8013d92:	4413      	add	r3, r2
 8013d94:	428b      	cmp	r3, r1
 8013d96:	d302      	bcc.n	8013d9e <ai_platform_network_process+0x48a>
 8013d98:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013d9c:	1acb      	subs	r3, r1, r3
 8013d9e:	f8c8 3004 	str.w	r3, [r8, #4]
 8013da2:	6981      	ldr	r1, [r0, #24]
 8013da4:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8013da8:	1b52      	subs	r2, r2, r5
 8013daa:	4413      	add	r3, r2
 8013dac:	608b      	str	r3, [r1, #8]
 8013dae:	6983      	ldr	r3, [r0, #24]
 8013db0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8013db4:	60da      	str	r2, [r3, #12]
 8013db6:	3401      	adds	r4, #1
 8013db8:	883b      	ldrh	r3, [r7, #0]
 8013dba:	42a3      	cmp	r3, r4
 8013dbc:	d923      	bls.n	8013e06 <ai_platform_network_process+0x4f2>
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	b30b      	cbz	r3, 8013e06 <ai_platform_network_process+0x4f2>
 8013dc2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013dc6:	b1f0      	cbz	r0, 8013e06 <ai_platform_network_process+0x4f2>
 8013dc8:	68ba      	ldr	r2, [r7, #8]
 8013dca:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8013dce:	6983      	ldr	r3, [r0, #24]
 8013dd0:	f8d2 9000 	ldr.w	r9, [r2]
 8013dd4:	681a      	ldr	r2, [r3, #0]
 8013dd6:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8013dda:	0092      	lsls	r2, r2, #2
 8013ddc:	d5d5      	bpl.n	8013d8a <ai_platform_network_process+0x476>
 8013dde:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8013de2:	6899      	ldr	r1, [r3, #8]
 8013de4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8013de8:	f007 fbe8 	bl	801b5bc <memcpy>
 8013dec:	f859 200a 	ldr.w	r2, [r9, sl]
 8013df0:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8013df4:	440b      	add	r3, r1
 8013df6:	4293      	cmp	r3, r2
 8013df8:	d302      	bcc.n	8013e00 <ai_platform_network_process+0x4ec>
 8013dfa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013dfe:	1ad3      	subs	r3, r2, r3
 8013e00:	f8c8 3004 	str.w	r3, [r8, #4]
 8013e04:	e7d7      	b.n	8013db6 <ai_platform_network_process+0x4a2>
 8013e06:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8013e0a:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8013e0e:	3401      	adds	r4, #1
 8013e10:	b2a4      	uxth	r4, r4
 8013e12:	42a3      	cmp	r3, r4
 8013e14:	f8ab 4016 	strh.w	r4, [fp, #22]
 8013e18:	f63f af7d 	bhi.w	8013d16 <ai_platform_network_process+0x402>
 8013e1c:	4620      	mov	r0, r4
 8013e1e:	b005      	add	sp, #20
 8013e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e24:	2a01      	cmp	r2, #1
 8013e26:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8013e28:	d029      	beq.n	8013e7e <ai_platform_network_process+0x56a>
 8013e2a:	f106 070c 	add.w	r7, r6, #12
 8013e2e:	e76e      	b.n	8013d0e <ai_platform_network_process+0x3fa>
 8013e30:	2218      	movs	r2, #24
 8013e32:	2113      	movs	r1, #19
 8013e34:	f105 0010 	add.w	r0, r5, #16
 8013e38:	2400      	movs	r4, #0
 8013e3a:	f000 fab5 	bl	80143a8 <core_set_error>
 8013e3e:	e70f      	b.n	8013c60 <ai_platform_network_process+0x34c>
 8013e40:	9d03      	ldr	r5, [sp, #12]
 8013e42:	4604      	mov	r4, r0
 8013e44:	2217      	movs	r2, #23
 8013e46:	2112      	movs	r1, #18
 8013e48:	f105 0010 	add.w	r0, r5, #16
 8013e4c:	f000 faac 	bl	80143a8 <core_set_error>
 8013e50:	e706      	b.n	8013c60 <ai_platform_network_process+0x34c>
 8013e52:	9d03      	ldr	r5, [sp, #12]
 8013e54:	2219      	movs	r2, #25
 8013e56:	2112      	movs	r1, #18
 8013e58:	2400      	movs	r4, #0
 8013e5a:	f105 0010 	add.w	r0, r5, #16
 8013e5e:	f000 faa3 	bl	80143a8 <core_set_error>
 8013e62:	e6fd      	b.n	8013c60 <ai_platform_network_process+0x34c>
 8013e64:	9d03      	ldr	r5, [sp, #12]
 8013e66:	4604      	mov	r4, r0
 8013e68:	2221      	movs	r2, #33	; 0x21
 8013e6a:	2112      	movs	r1, #18
 8013e6c:	f105 0010 	add.w	r0, r5, #16
 8013e70:	f000 fa9a 	bl	80143a8 <core_set_error>
 8013e74:	e6f4      	b.n	8013c60 <ai_platform_network_process+0x34c>
 8013e76:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8013e7a:	82ab      	strh	r3, [r5, #20]
 8013e7c:	e742      	b.n	8013d04 <ai_platform_network_process+0x3f0>
 8013e7e:	2700      	movs	r7, #0
 8013e80:	e745      	b.n	8013d0e <ai_platform_network_process+0x3fa>
 8013e82:	4604      	mov	r4, r0
 8013e84:	2217      	movs	r2, #23
 8013e86:	2113      	movs	r1, #19
 8013e88:	f105 0010 	add.w	r0, r5, #16
 8013e8c:	f000 fa8c 	bl	80143a8 <core_set_error>
 8013e90:	e6e6      	b.n	8013c60 <ai_platform_network_process+0x34c>
 8013e92:	2219      	movs	r2, #25
 8013e94:	2113      	movs	r1, #19
 8013e96:	f105 0010 	add.w	r0, r5, #16
 8013e9a:	2400      	movs	r4, #0
 8013e9c:	f000 fa84 	bl	80143a8 <core_set_error>
 8013ea0:	e6de      	b.n	8013c60 <ai_platform_network_process+0x34c>
 8013ea2:	4604      	mov	r4, r0
 8013ea4:	2221      	movs	r2, #33	; 0x21
 8013ea6:	2113      	movs	r1, #19
 8013ea8:	f105 0010 	add.w	r0, r5, #16
 8013eac:	f000 fa7c 	bl	80143a8 <core_set_error>
 8013eb0:	e6d6      	b.n	8013c60 <ai_platform_network_process+0x34c>
 8013eb2:	2217      	movs	r2, #23
 8013eb4:	2113      	movs	r1, #19
 8013eb6:	f105 0010 	add.w	r0, r5, #16
 8013eba:	4654      	mov	r4, sl
 8013ebc:	f000 fa74 	bl	80143a8 <core_set_error>
 8013ec0:	e6ce      	b.n	8013c60 <ai_platform_network_process+0x34c>
 8013ec2:	bf00      	nop
 8013ec4:	58024000 	.word	0x58024000
 8013ec8:	f407a5c2 	.word	0xf407a5c2
 8013ecc:	b5e8b5cd 	.word	0xb5e8b5cd

08013ed0 <node_convert>:
 8013ed0:	6982      	ldr	r2, [r0, #24]
 8013ed2:	8813      	ldrh	r3, [r2, #0]
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d04a      	beq.n	8013f6e <node_convert+0x9e>
 8013ed8:	6852      	ldr	r2, [r2, #4]
 8013eda:	6850      	ldr	r0, [r2, #4]
 8013edc:	b100      	cbz	r0, 8013ee0 <node_convert+0x10>
 8013ede:	6800      	ldr	r0, [r0, #0]
 8013ee0:	2b01      	cmp	r3, #1
 8013ee2:	f000 813d 	beq.w	8014160 <node_convert+0x290>
 8013ee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013eea:	6915      	ldr	r5, [r2, #16]
 8013eec:	b105      	cbz	r5, 8013ef0 <node_convert+0x20>
 8013eee:	682d      	ldr	r5, [r5, #0]
 8013ef0:	6883      	ldr	r3, [r0, #8]
 8013ef2:	0a1b      	lsrs	r3, r3, #8
 8013ef4:	f000 80ee 	beq.w	80140d4 <node_convert+0x204>
 8013ef8:	68c1      	ldr	r1, [r0, #12]
 8013efa:	2401      	movs	r4, #1
 8013efc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8013f00:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8013f04:	4299      	cmp	r1, r3
 8013f06:	fb02 f404 	mul.w	r4, r2, r4
 8013f0a:	d1f9      	bne.n	8013f00 <node_convert+0x30>
 8013f0c:	6982      	ldr	r2, [r0, #24]
 8013f0e:	69af      	ldr	r7, [r5, #24]
 8013f10:	6813      	ldr	r3, [r2, #0]
 8013f12:	f3c3 4143 	ubfx	r1, r3, #17, #4
 8013f16:	2901      	cmp	r1, #1
 8013f18:	d02b      	beq.n	8013f72 <node_convert+0xa2>
 8013f1a:	6801      	ldr	r1, [r0, #0]
 8013f1c:	68bd      	ldr	r5, [r7, #8]
 8013f1e:	2900      	cmp	r1, #0
 8013f20:	d069      	beq.n	8013ff6 <node_convert+0x126>
 8013f22:	684e      	ldr	r6, [r1, #4]
 8013f24:	f3c3 50c0 	ubfx	r0, r3, #23, #1
 8013f28:	6892      	ldr	r2, [r2, #8]
 8013f2a:	2e00      	cmp	r6, #0
 8013f2c:	f000 80b8 	beq.w	80140a0 <node_convert+0x1d0>
 8013f30:	884b      	ldrh	r3, [r1, #2]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	f000 8089 	beq.w	801404a <node_convert+0x17a>
 8013f38:	6833      	ldr	r3, [r6, #0]
 8013f3a:	ed93 7a00 	vldr	s14, [r3]
 8013f3e:	6873      	ldr	r3, [r6, #4]
 8013f40:	2800      	cmp	r0, #0
 8013f42:	f000 80c5 	beq.w	80140d0 <node_convert+0x200>
 8013f46:	f993 0000 	ldrsb.w	r0, [r3]
 8013f4a:	b174      	cbz	r4, 8013f6a <node_convert+0x9a>
 8013f4c:	4629      	mov	r1, r5
 8013f4e:	4414      	add	r4, r2
 8013f50:	f912 3b01 	ldrsb.w	r3, [r2], #1
 8013f54:	1a1b      	subs	r3, r3, r0
 8013f56:	42a2      	cmp	r2, r4
 8013f58:	ee07 3a90 	vmov	s15, r3
 8013f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013f60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013f64:	ece1 7a01 	vstmia	r1!, {s15}
 8013f68:	d1f2      	bne.n	8013f50 <node_convert+0x80>
 8013f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f6e:	685b      	ldr	r3, [r3, #4]
 8013f70:	deff      	udf	#255	; 0xff
 8013f72:	682e      	ldr	r6, [r5, #0]
 8013f74:	6895      	ldr	r5, [r2, #8]
 8013f76:	2e00      	cmp	r6, #0
 8013f78:	f000 80ae 	beq.w	80140d8 <node_convert+0x208>
 8013f7c:	683b      	ldr	r3, [r7, #0]
 8013f7e:	6871      	ldr	r1, [r6, #4]
 8013f80:	68ba      	ldr	r2, [r7, #8]
 8013f82:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 8013f86:	2900      	cmp	r1, #0
 8013f88:	d064      	beq.n	8014054 <node_convert+0x184>
 8013f8a:	8870      	ldrh	r0, [r6, #2]
 8013f8c:	2800      	cmp	r0, #0
 8013f8e:	d067      	beq.n	8014060 <node_convert+0x190>
 8013f90:	6808      	ldr	r0, [r1, #0]
 8013f92:	edd0 7a00 	vldr	s15, [r0]
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	f000 80d7 	beq.w	801414a <node_convert+0x27a>
 8013f9c:	684b      	ldr	r3, [r1, #4]
 8013f9e:	f993 3000 	ldrsb.w	r3, [r3]
 8013fa2:	ee06 3a90 	vmov	s13, r3
 8013fa6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013faa:	2c00      	cmp	r4, #0
 8013fac:	d0dd      	beq.n	8013f6a <node_convert+0x9a>
 8013fae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013fb2:	4414      	add	r4, r2
 8013fb4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8013fb8:	ed9f 5a6b 	vldr	s10, [pc, #428]	; 8014168 <node_convert+0x298>
 8013fbc:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8013fc0:	ecb5 7a01 	vldmia	r5!, {s14}
 8013fc4:	eef0 7a66 	vmov.f32	s15, s13
 8013fc8:	eee7 7a06 	vfma.f32	s15, s14, s12
 8013fcc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fd4:	bfac      	ite	ge
 8013fd6:	ee77 7aa5 	vaddge.f32	s15, s15, s11
 8013fda:	ee77 7ac5 	vsublt.f32	s15, s15, s10
 8013fde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013fe2:	ee17 3a90 	vmov	r3, s15
 8013fe6:	f303 0307 	ssat	r3, #8, r3
 8013fea:	f802 3b01 	strb.w	r3, [r2], #1
 8013fee:	42a2      	cmp	r2, r4
 8013ff0:	d1e6      	bne.n	8013fc0 <node_convert+0xf0>
 8013ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ff6:	f3c3 11c6 	ubfx	r1, r3, #7, #7
 8013ffa:	f003 067f 	and.w	r6, r3, #127	; 0x7f
 8013ffe:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 8014002:	6890      	ldr	r0, [r2, #8]
 8014004:	1b8e      	subs	r6, r1, r6
 8014006:	2908      	cmp	r1, #8
 8014008:	4622      	mov	r2, r4
 801400a:	4629      	mov	r1, r5
 801400c:	f106 0640 	add.w	r6, r6, #64	; 0x40
 8014010:	eba6 0603 	sub.w	r6, r6, r3
 8014014:	f000 808b 	beq.w	801412e <node_convert+0x25e>
 8014018:	f007 f83a 	bl	801b090 <arm_q15_to_float>
 801401c:	2e00      	cmp	r6, #0
 801401e:	d0a4      	beq.n	8013f6a <node_convert+0x9a>
 8014020:	ee07 6a90 	vmov	s15, r6
 8014024:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8014028:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801402c:	f008 fc7c 	bl	801c928 <powf>
 8014030:	2c00      	cmp	r4, #0
 8014032:	d09a      	beq.n	8013f6a <node_convert+0x9a>
 8014034:	2300      	movs	r3, #0
 8014036:	ecf5 7a01 	vldmia	r5!, {s15}
 801403a:	3301      	adds	r3, #1
 801403c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014040:	429c      	cmp	r4, r3
 8014042:	ed45 7a01 	vstr	s15, [r5, #-4]
 8014046:	d1f6      	bne.n	8014036 <node_convert+0x166>
 8014048:	e78f      	b.n	8013f6a <node_convert+0x9a>
 801404a:	b358      	cbz	r0, 80140a4 <node_convert+0x1d4>
 801404c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 801416c <node_convert+0x29c>
 8014050:	4618      	mov	r0, r3
 8014052:	e77a      	b.n	8013f4a <node_convert+0x7a>
 8014054:	b133      	cbz	r3, 8014064 <node_convert+0x194>
 8014056:	eddf 6a45 	vldr	s13, [pc, #276]	; 801416c <node_convert+0x29c>
 801405a:	eef0 7a66 	vmov.f32	s15, s13
 801405e:	e7a4      	b.n	8013faa <node_convert+0xda>
 8014060:	2b00      	cmp	r3, #0
 8014062:	d1f8      	bne.n	8014056 <node_convert+0x186>
 8014064:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8014068:	eddf 7a40 	vldr	s15, [pc, #256]	; 801416c <node_convert+0x29c>
 801406c:	2c00      	cmp	r4, #0
 801406e:	f43f af7c 	beq.w	8013f6a <node_convert+0x9a>
 8014072:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014076:	4414      	add	r4, r2
 8014078:	ee87 6a27 	vdiv.f32	s12, s14, s15
 801407c:	ecb5 7a01 	vldmia	r5!, {s14}
 8014080:	eef0 7a66 	vmov.f32	s15, s13
 8014084:	eee7 7a06 	vfma.f32	s15, s14, s12
 8014088:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801408c:	ee17 3a90 	vmov	r3, s15
 8014090:	f383 0308 	usat	r3, #8, r3
 8014094:	f802 3b01 	strb.w	r3, [r2], #1
 8014098:	42a2      	cmp	r2, r4
 801409a:	d1ef      	bne.n	801407c <node_convert+0x1ac>
 801409c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140a0:	2800      	cmp	r0, #0
 80140a2:	d147      	bne.n	8014134 <node_convert+0x264>
 80140a4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801416c <node_convert+0x29c>
 80140a8:	2c00      	cmp	r4, #0
 80140aa:	f43f af5e 	beq.w	8013f6a <node_convert+0x9a>
 80140ae:	4629      	mov	r1, r5
 80140b0:	4414      	add	r4, r2
 80140b2:	f812 3b01 	ldrb.w	r3, [r2], #1
 80140b6:	1a1b      	subs	r3, r3, r0
 80140b8:	42a2      	cmp	r2, r4
 80140ba:	ee07 3a90 	vmov	s15, r3
 80140be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80140c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80140c6:	ece1 7a01 	vstmia	r1!, {s15}
 80140ca:	d1f2      	bne.n	80140b2 <node_convert+0x1e2>
 80140cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140d0:	7818      	ldrb	r0, [r3, #0]
 80140d2:	e7e9      	b.n	80140a8 <node_convert+0x1d8>
 80140d4:	2401      	movs	r4, #1
 80140d6:	e719      	b.n	8013f0c <node_convert+0x3c>
 80140d8:	683a      	ldr	r2, [r7, #0]
 80140da:	f3c2 18c6 	ubfx	r8, r2, #7, #7
 80140de:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 80140e2:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 80140e6:	eba8 0303 	sub.w	r3, r8, r3
 80140ea:	3340      	adds	r3, #64	; 0x40
 80140ec:	1a9b      	subs	r3, r3, r2
 80140ee:	d014      	beq.n	801411a <node_convert+0x24a>
 80140f0:	425b      	negs	r3, r3
 80140f2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80140f6:	ee00 3a90 	vmov	s1, r3
 80140fa:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80140fe:	f008 fc13 	bl	801c928 <powf>
 8014102:	b154      	cbz	r4, 801411a <node_convert+0x24a>
 8014104:	4633      	mov	r3, r6
 8014106:	462a      	mov	r2, r5
 8014108:	ecf2 7a01 	vldmia	r2!, {s15}
 801410c:	3301      	adds	r3, #1
 801410e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014112:	42a3      	cmp	r3, r4
 8014114:	ed42 7a01 	vstr	s15, [r2, #-4]
 8014118:	d1f6      	bne.n	8014108 <node_convert+0x238>
 801411a:	f1b8 0f08 	cmp.w	r8, #8
 801411e:	d00d      	beq.n	801413c <node_convert+0x26c>
 8014120:	4622      	mov	r2, r4
 8014122:	68b9      	ldr	r1, [r7, #8]
 8014124:	4628      	mov	r0, r5
 8014126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801412a:	f006 be2f 	b.w	801ad8c <arm_float_to_q15>
 801412e:	f007 f815 	bl	801b15c <arm_q7_to_float>
 8014132:	e773      	b.n	801401c <node_convert+0x14c>
 8014134:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 801416c <node_convert+0x29c>
 8014138:	4630      	mov	r0, r6
 801413a:	e706      	b.n	8013f4a <node_convert+0x7a>
 801413c:	4622      	mov	r2, r4
 801413e:	68b9      	ldr	r1, [r7, #8]
 8014140:	4628      	mov	r0, r5
 8014142:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014146:	f006 bed7 	b.w	801aef8 <arm_float_to_q7>
 801414a:	684b      	ldr	r3, [r1, #4]
 801414c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014150:	781b      	ldrb	r3, [r3, #0]
 8014152:	ee06 3a90 	vmov	s13, r3
 8014156:	eef8 6a66 	vcvt.f32.u32	s13, s13
 801415a:	ee76 6a87 	vadd.f32	s13, s13, s14
 801415e:	e785      	b.n	801406c <node_convert+0x19c>
 8014160:	2300      	movs	r3, #0
 8014162:	685b      	ldr	r3, [r3, #4]
 8014164:	deff      	udf	#255	; 0xff
 8014166:	bf00      	nop
 8014168:	3efffffc 	.word	0x3efffffc
 801416c:	00000000 	.word	0x00000000

08014170 <node_convert_integer>:
 8014170:	6982      	ldr	r2, [r0, #24]
 8014172:	8813      	ldrh	r3, [r2, #0]
 8014174:	2b00      	cmp	r3, #0
 8014176:	d058      	beq.n	801422a <node_convert_integer+0xba>
 8014178:	b570      	push	{r4, r5, r6, lr}
 801417a:	6852      	ldr	r2, [r2, #4]
 801417c:	b082      	sub	sp, #8
 801417e:	6856      	ldr	r6, [r2, #4]
 8014180:	b106      	cbz	r6, 8014184 <node_convert_integer+0x14>
 8014182:	6836      	ldr	r6, [r6, #0]
 8014184:	2b01      	cmp	r3, #1
 8014186:	f000 8100 	beq.w	801438a <node_convert_integer+0x21a>
 801418a:	6915      	ldr	r5, [r2, #16]
 801418c:	b105      	cbz	r5, 8014190 <node_convert_integer+0x20>
 801418e:	682d      	ldr	r5, [r5, #0]
 8014190:	68b3      	ldr	r3, [r6, #8]
 8014192:	0a1b      	lsrs	r3, r3, #8
 8014194:	f000 80d3 	beq.w	801433e <node_convert_integer+0x1ce>
 8014198:	68f0      	ldr	r0, [r6, #12]
 801419a:	2201      	movs	r2, #1
 801419c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80141a0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80141a4:	4298      	cmp	r0, r3
 80141a6:	fb01 f202 	mul.w	r2, r1, r2
 80141aa:	d1f9      	bne.n	80141a0 <node_convert_integer+0x30>
 80141ac:	6833      	ldr	r3, [r6, #0]
 80141ae:	682c      	ldr	r4, [r5, #0]
 80141b0:	b17b      	cbz	r3, 80141d2 <node_convert_integer+0x62>
 80141b2:	6859      	ldr	r1, [r3, #4]
 80141b4:	b169      	cbz	r1, 80141d2 <node_convert_integer+0x62>
 80141b6:	8858      	ldrh	r0, [r3, #2]
 80141b8:	b158      	cbz	r0, 80141d2 <node_convert_integer+0x62>
 80141ba:	6809      	ldr	r1, [r1, #0]
 80141bc:	ed91 7a00 	vldr	s14, [r1]
 80141c0:	b15c      	cbz	r4, 80141da <node_convert_integer+0x6a>
 80141c2:	6861      	ldr	r1, [r4, #4]
 80141c4:	b149      	cbz	r1, 80141da <node_convert_integer+0x6a>
 80141c6:	8860      	ldrh	r0, [r4, #2]
 80141c8:	b138      	cbz	r0, 80141da <node_convert_integer+0x6a>
 80141ca:	6809      	ldr	r1, [r1, #0]
 80141cc:	edd1 7a00 	vldr	s15, [r1]
 80141d0:	e005      	b.n	80141de <node_convert_integer+0x6e>
 80141d2:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8014390 <node_convert_integer+0x220>
 80141d6:	2c00      	cmp	r4, #0
 80141d8:	d1f3      	bne.n	80141c2 <node_convert_integer+0x52>
 80141da:	eddf 7a6d 	vldr	s15, [pc, #436]	; 8014390 <node_convert_integer+0x220>
 80141de:	69b0      	ldr	r0, [r6, #24]
 80141e0:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80141e4:	69ad      	ldr	r5, [r5, #24]
 80141e6:	6806      	ldr	r6, [r0, #0]
 80141e8:	6829      	ldr	r1, [r5, #0]
 80141ea:	0236      	lsls	r6, r6, #8
 80141ec:	f3c1 51c0 	ubfx	r1, r1, #23, #1
 80141f0:	d41d      	bmi.n	801422e <node_convert_integer+0xbe>
 80141f2:	2900      	cmp	r1, #0
 80141f4:	f040 8081 	bne.w	80142fa <node_convert_integer+0x18a>
 80141f8:	6880      	ldr	r0, [r0, #8]
 80141fa:	68a9      	ldr	r1, [r5, #8]
 80141fc:	b13b      	cbz	r3, 801420e <node_convert_integer+0x9e>
 80141fe:	685d      	ldr	r5, [r3, #4]
 8014200:	2d00      	cmp	r5, #0
 8014202:	f000 80a7 	beq.w	8014354 <node_convert_integer+0x1e4>
 8014206:	885b      	ldrh	r3, [r3, #2]
 8014208:	b10b      	cbz	r3, 801420e <node_convert_integer+0x9e>
 801420a:	686b      	ldr	r3, [r5, #4]
 801420c:	781b      	ldrb	r3, [r3, #0]
 801420e:	b13c      	cbz	r4, 8014220 <node_convert_integer+0xb0>
 8014210:	6865      	ldr	r5, [r4, #4]
 8014212:	2d00      	cmp	r5, #0
 8014214:	f000 80ad 	beq.w	8014372 <node_convert_integer+0x202>
 8014218:	8864      	ldrh	r4, [r4, #2]
 801421a:	b10c      	cbz	r4, 8014220 <node_convert_integer+0xb0>
 801421c:	686c      	ldr	r4, [r5, #4]
 801421e:	7824      	ldrb	r4, [r4, #0]
 8014220:	9400      	str	r4, [sp, #0]
 8014222:	f002 f8bb 	bl	801639c <forward_lite_node_convert_integer_iu8ou8>
 8014226:	b002      	add	sp, #8
 8014228:	bd70      	pop	{r4, r5, r6, pc}
 801422a:	685b      	ldr	r3, [r3, #4]
 801422c:	deff      	udf	#255	; 0xff
 801422e:	2900      	cmp	r1, #0
 8014230:	d042      	beq.n	80142b8 <node_convert_integer+0x148>
 8014232:	6886      	ldr	r6, [r0, #8]
 8014234:	68a9      	ldr	r1, [r5, #8]
 8014236:	2b00      	cmp	r3, #0
 8014238:	d07f      	beq.n	801433a <node_convert_integer+0x1ca>
 801423a:	6858      	ldr	r0, [r3, #4]
 801423c:	2800      	cmp	r0, #0
 801423e:	f000 8092 	beq.w	8014366 <node_convert_integer+0x1f6>
 8014242:	885d      	ldrh	r5, [r3, #2]
 8014244:	b115      	cbz	r5, 801424c <node_convert_integer+0xdc>
 8014246:	6843      	ldr	r3, [r0, #4]
 8014248:	f993 5000 	ldrsb.w	r5, [r3]
 801424c:	2c00      	cmp	r4, #0
 801424e:	d078      	beq.n	8014342 <node_convert_integer+0x1d2>
 8014250:	6863      	ldr	r3, [r4, #4]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d07b      	beq.n	801434e <node_convert_integer+0x1de>
 8014256:	8860      	ldrh	r0, [r4, #2]
 8014258:	2800      	cmp	r0, #0
 801425a:	d075      	beq.n	8014348 <node_convert_integer+0x1d8>
 801425c:	685b      	ldr	r3, [r3, #4]
 801425e:	f993 3000 	ldrsb.w	r3, [r3]
 8014262:	ee06 3a90 	vmov	s13, r3
 8014266:	2a00      	cmp	r2, #0
 8014268:	d0dd      	beq.n	8014226 <node_convert_integer+0xb6>
 801426a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801426e:	4432      	add	r2, r6
 8014270:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8014274:	eddf 5a47 	vldr	s11, [pc, #284]	; 8014394 <node_convert_integer+0x224>
 8014278:	f916 3b01 	ldrsb.w	r3, [r6], #1
 801427c:	1b5b      	subs	r3, r3, r5
 801427e:	ee07 3a90 	vmov	s15, r3
 8014282:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014286:	eef0 7a66 	vmov.f32	s15, s13
 801428a:	eee7 7a00 	vfma.f32	s15, s14, s0
 801428e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014296:	bfcc      	ite	gt
 8014298:	ee77 7a86 	vaddgt.f32	s15, s15, s12
 801429c:	ee77 7ae5 	vsuble.f32	s15, s15, s11
 80142a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80142a4:	ee17 3a90 	vmov	r3, s15
 80142a8:	f303 0307 	ssat	r3, #8, r3
 80142ac:	4296      	cmp	r6, r2
 80142ae:	f801 3b01 	strb.w	r3, [r1], #1
 80142b2:	d1e1      	bne.n	8014278 <node_convert_integer+0x108>
 80142b4:	b002      	add	sp, #8
 80142b6:	bd70      	pop	{r4, r5, r6, pc}
 80142b8:	6880      	ldr	r0, [r0, #8]
 80142ba:	68a9      	ldr	r1, [r5, #8]
 80142bc:	b13b      	cbz	r3, 80142ce <node_convert_integer+0x15e>
 80142be:	685d      	ldr	r5, [r3, #4]
 80142c0:	2d00      	cmp	r5, #0
 80142c2:	d04c      	beq.n	801435e <node_convert_integer+0x1ee>
 80142c4:	885b      	ldrh	r3, [r3, #2]
 80142c6:	b113      	cbz	r3, 80142ce <node_convert_integer+0x15e>
 80142c8:	686b      	ldr	r3, [r5, #4]
 80142ca:	f993 3000 	ldrsb.w	r3, [r3]
 80142ce:	b134      	cbz	r4, 80142de <node_convert_integer+0x16e>
 80142d0:	6865      	ldr	r5, [r4, #4]
 80142d2:	2d00      	cmp	r5, #0
 80142d4:	d04b      	beq.n	801436e <node_convert_integer+0x1fe>
 80142d6:	8864      	ldrh	r4, [r4, #2]
 80142d8:	b10c      	cbz	r4, 80142de <node_convert_integer+0x16e>
 80142da:	686c      	ldr	r4, [r5, #4]
 80142dc:	7824      	ldrb	r4, [r4, #0]
 80142de:	eeb4 7a67 	vcmp.f32	s14, s15
 80142e2:	9400      	str	r4, [sp, #0]
 80142e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142e8:	d103      	bne.n	80142f2 <node_convert_integer+0x182>
 80142ea:	f103 0580 	add.w	r5, r3, #128	; 0x80
 80142ee:	42a5      	cmp	r5, r4
 80142f0:	d048      	beq.n	8014384 <node_convert_integer+0x214>
 80142f2:	f002 f8f5 	bl	80164e0 <forward_lite_node_convert_integer_is8ou8>
 80142f6:	b002      	add	sp, #8
 80142f8:	bd70      	pop	{r4, r5, r6, pc}
 80142fa:	b133      	cbz	r3, 801430a <node_convert_integer+0x19a>
 80142fc:	6859      	ldr	r1, [r3, #4]
 80142fe:	2900      	cmp	r1, #0
 8014300:	d039      	beq.n	8014376 <node_convert_integer+0x206>
 8014302:	885b      	ldrh	r3, [r3, #2]
 8014304:	b10b      	cbz	r3, 801430a <node_convert_integer+0x19a>
 8014306:	684b      	ldr	r3, [r1, #4]
 8014308:	781b      	ldrb	r3, [r3, #0]
 801430a:	b134      	cbz	r4, 801431a <node_convert_integer+0x1aa>
 801430c:	6861      	ldr	r1, [r4, #4]
 801430e:	b361      	cbz	r1, 801436a <node_convert_integer+0x1fa>
 8014310:	8864      	ldrh	r4, [r4, #2]
 8014312:	b114      	cbz	r4, 801431a <node_convert_integer+0x1aa>
 8014314:	6849      	ldr	r1, [r1, #4]
 8014316:	f991 4000 	ldrsb.w	r4, [r1]
 801431a:	eeb4 7a67 	vcmp.f32	s14, s15
 801431e:	6880      	ldr	r0, [r0, #8]
 8014320:	68a9      	ldr	r1, [r5, #8]
 8014322:	9400      	str	r4, [sp, #0]
 8014324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014328:	d103      	bne.n	8014332 <node_convert_integer+0x1c2>
 801432a:	f104 0580 	add.w	r5, r4, #128	; 0x80
 801432e:	42ab      	cmp	r3, r5
 8014330:	d025      	beq.n	801437e <node_convert_integer+0x20e>
 8014332:	f002 f85d 	bl	80163f0 <forward_lite_node_convert_integer_iu8os8>
 8014336:	b002      	add	sp, #8
 8014338:	bd70      	pop	{r4, r5, r6, pc}
 801433a:	461d      	mov	r5, r3
 801433c:	e786      	b.n	801424c <node_convert_integer+0xdc>
 801433e:	2201      	movs	r2, #1
 8014340:	e734      	b.n	80141ac <node_convert_integer+0x3c>
 8014342:	ee06 4a90 	vmov	s13, r4
 8014346:	e78e      	b.n	8014266 <node_convert_integer+0xf6>
 8014348:	ee06 0a90 	vmov	s13, r0
 801434c:	e78b      	b.n	8014266 <node_convert_integer+0xf6>
 801434e:	ee06 3a90 	vmov	s13, r3
 8014352:	e788      	b.n	8014266 <node_convert_integer+0xf6>
 8014354:	462b      	mov	r3, r5
 8014356:	2c00      	cmp	r4, #0
 8014358:	f47f af5a 	bne.w	8014210 <node_convert_integer+0xa0>
 801435c:	e760      	b.n	8014220 <node_convert_integer+0xb0>
 801435e:	462b      	mov	r3, r5
 8014360:	2c00      	cmp	r4, #0
 8014362:	d1b5      	bne.n	80142d0 <node_convert_integer+0x160>
 8014364:	e7bb      	b.n	80142de <node_convert_integer+0x16e>
 8014366:	4605      	mov	r5, r0
 8014368:	e770      	b.n	801424c <node_convert_integer+0xdc>
 801436a:	460c      	mov	r4, r1
 801436c:	e7d5      	b.n	801431a <node_convert_integer+0x1aa>
 801436e:	462c      	mov	r4, r5
 8014370:	e7b5      	b.n	80142de <node_convert_integer+0x16e>
 8014372:	462c      	mov	r4, r5
 8014374:	e754      	b.n	8014220 <node_convert_integer+0xb0>
 8014376:	460b      	mov	r3, r1
 8014378:	2c00      	cmp	r4, #0
 801437a:	d1c7      	bne.n	801430c <node_convert_integer+0x19c>
 801437c:	e7cd      	b.n	801431a <node_convert_integer+0x1aa>
 801437e:	f002 f877 	bl	8016470 <forward_lite_node_convert_integer_iu8os8_fast>
 8014382:	e750      	b.n	8014226 <node_convert_integer+0xb6>
 8014384:	f002 f8d6 	bl	8016534 <forward_lite_node_convert_integer_is8ou8_fast>
 8014388:	e74d      	b.n	8014226 <node_convert_integer+0xb6>
 801438a:	2300      	movs	r3, #0
 801438c:	685b      	ldr	r3, [r3, #4]
 801438e:	deff      	udf	#255	; 0xff
 8014390:	00000000 	.word	0x00000000
 8014394:	3efffffc 	.word	0x3efffffc

08014398 <core_init>:
 8014398:	2001      	movs	r0, #1
 801439a:	4770      	bx	lr

0801439c <core_get_error>:
 801439c:	4603      	mov	r3, r0
 801439e:	2200      	movs	r2, #0
 80143a0:	6800      	ldr	r0, [r0, #0]
 80143a2:	601a      	str	r2, [r3, #0]
 80143a4:	4770      	bx	lr
 80143a6:	bf00      	nop

080143a8 <core_set_error>:
 80143a8:	4603      	mov	r3, r0
 80143aa:	7800      	ldrb	r0, [r0, #0]
 80143ac:	b108      	cbz	r0, 80143b2 <core_set_error+0xa>
 80143ae:	2000      	movs	r0, #0
 80143b0:	4770      	bx	lr
 80143b2:	7019      	strb	r1, [r3, #0]
 80143b4:	2001      	movs	r0, #1
 80143b6:	6819      	ldr	r1, [r3, #0]
 80143b8:	f362 211f 	bfi	r1, r2, #8, #24
 80143bc:	6019      	str	r1, [r3, #0]
 80143be:	4770      	bx	lr

080143c0 <forward_sm>:
 80143c0:	6982      	ldr	r2, [r0, #24]
 80143c2:	8813      	ldrh	r3, [r2, #0]
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d078      	beq.n	80144ba <forward_sm+0xfa>
 80143c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143cc:	ed2d 8b04 	vpush	{d8-d9}
 80143d0:	6852      	ldr	r2, [r2, #4]
 80143d2:	b085      	sub	sp, #20
 80143d4:	6854      	ldr	r4, [r2, #4]
 80143d6:	b104      	cbz	r4, 80143da <forward_sm+0x1a>
 80143d8:	6824      	ldr	r4, [r4, #0]
 80143da:	2b01      	cmp	r3, #1
 80143dc:	d072      	beq.n	80144c4 <forward_sm+0x104>
 80143de:	6913      	ldr	r3, [r2, #16]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d072      	beq.n	80144ca <forward_sm+0x10a>
 80143e4:	681e      	ldr	r6, [r3, #0]
 80143e6:	68a3      	ldr	r3, [r4, #8]
 80143e8:	68e0      	ldr	r0, [r4, #12]
 80143ea:	68f2      	ldr	r2, [r6, #12]
 80143ec:	0a1b      	lsrs	r3, r3, #8
 80143ee:	6845      	ldr	r5, [r0, #4]
 80143f0:	6857      	ldr	r7, [r2, #4]
 80143f2:	d064      	beq.n	80144be <forward_sm+0xfe>
 80143f4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80143f8:	2201      	movs	r2, #1
 80143fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80143fe:	4298      	cmp	r0, r3
 8014400:	fb01 f202 	mul.w	r2, r1, r2
 8014404:	d1f9      	bne.n	80143fa <forward_sm+0x3a>
 8014406:	ea4f 0982 	mov.w	r9, r2, lsl #2
 801440a:	69a2      	ldr	r2, [r4, #24]
 801440c:	69b3      	ldr	r3, [r6, #24]
 801440e:	6892      	ldr	r2, [r2, #8]
 8014410:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8014414:	eb02 0309 	add.w	r3, r2, r9
 8014418:	429a      	cmp	r2, r3
 801441a:	9301      	str	r3, [sp, #4]
 801441c:	d248      	bcs.n	80144b0 <forward_sm+0xf0>
 801441e:	00bb      	lsls	r3, r7, #2
 8014420:	2d01      	cmp	r5, #1
 8014422:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 8014426:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 801442a:	9303      	str	r3, [sp, #12]
 801442c:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8014430:	463e      	mov	r6, r7
 8014432:	ed92 8a00 	vldr	s16, [r2]
 8014436:	9302      	str	r3, [sp, #8]
 8014438:	d937      	bls.n	80144aa <forward_sm+0xea>
 801443a:	1d13      	adds	r3, r2, #4
 801443c:	ecf3 7a01 	vldmia	r3!, {s15}
 8014440:	429e      	cmp	r6, r3
 8014442:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 8014446:	d1f9      	bne.n	801443c <forward_sm+0x7c>
 8014448:	4692      	mov	sl, r2
 801444a:	46c3      	mov	fp, r8
 801444c:	46c1      	mov	r9, r8
 801444e:	eddf 8a20 	vldr	s17, [pc, #128]	; 80144d0 <forward_sm+0x110>
 8014452:	2400      	movs	r4, #0
 8014454:	ecba 0a01 	vldmia	sl!, {s0}
 8014458:	3401      	adds	r4, #1
 801445a:	ee30 0a48 	vsub.f32	s0, s0, s16
 801445e:	f008 f9d5 	bl	801c80c <expf>
 8014462:	42a5      	cmp	r5, r4
 8014464:	ee78 8a80 	vadd.f32	s17, s17, s0
 8014468:	eca9 0a01 	vstmia	r9!, {s0}
 801446c:	d8f2      	bhi.n	8014454 <forward_sm+0x94>
 801446e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8014472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014476:	d00b      	beq.n	8014490 <forward_sm+0xd0>
 8014478:	ee89 7a28 	vdiv.f32	s14, s18, s17
 801447c:	2300      	movs	r3, #0
 801447e:	eddb 7a00 	vldr	s15, [fp]
 8014482:	3301      	adds	r3, #1
 8014484:	429d      	cmp	r5, r3
 8014486:	ee67 7a27 	vmul.f32	s15, s14, s15
 801448a:	eceb 7a01 	vstmia	fp!, {s15}
 801448e:	d8f6      	bhi.n	801447e <forward_sm+0xbe>
 8014490:	9b03      	ldr	r3, [sp, #12]
 8014492:	463a      	mov	r2, r7
 8014494:	9901      	ldr	r1, [sp, #4]
 8014496:	4498      	add	r8, r3
 8014498:	9b02      	ldr	r3, [sp, #8]
 801449a:	42b9      	cmp	r1, r7
 801449c:	441e      	add	r6, r3
 801449e:	d907      	bls.n	80144b0 <forward_sm+0xf0>
 80144a0:	2d01      	cmp	r5, #1
 80144a2:	441f      	add	r7, r3
 80144a4:	ed92 8a00 	vldr	s16, [r2]
 80144a8:	d8c7      	bhi.n	801443a <forward_sm+0x7a>
 80144aa:	2d00      	cmp	r5, #0
 80144ac:	d0f0      	beq.n	8014490 <forward_sm+0xd0>
 80144ae:	e7cb      	b.n	8014448 <forward_sm+0x88>
 80144b0:	b005      	add	sp, #20
 80144b2:	ecbd 8b04 	vpop	{d8-d9}
 80144b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144ba:	685b      	ldr	r3, [r3, #4]
 80144bc:	deff      	udf	#255	; 0xff
 80144be:	f04f 0904 	mov.w	r9, #4
 80144c2:	e7a2      	b.n	801440a <forward_sm+0x4a>
 80144c4:	2300      	movs	r3, #0
 80144c6:	685b      	ldr	r3, [r3, #4]
 80144c8:	deff      	udf	#255	; 0xff
 80144ca:	68db      	ldr	r3, [r3, #12]
 80144cc:	deff      	udf	#255	; 0xff
 80144ce:	bf00      	nop
 80144d0:	00000000 	.word	0x00000000

080144d4 <forward_tile>:
 80144d4:	6983      	ldr	r3, [r0, #24]
 80144d6:	881a      	ldrh	r2, [r3, #0]
 80144d8:	2a00      	cmp	r2, #0
 80144da:	d065      	beq.n	80145a8 <forward_tile+0xd4>
 80144dc:	6859      	ldr	r1, [r3, #4]
 80144de:	684b      	ldr	r3, [r1, #4]
 80144e0:	b103      	cbz	r3, 80144e4 <forward_tile+0x10>
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	2a01      	cmp	r2, #1
 80144e6:	d061      	beq.n	80145ac <forward_tile+0xd8>
 80144e8:	690a      	ldr	r2, [r1, #16]
 80144ea:	2a00      	cmp	r2, #0
 80144ec:	d061      	beq.n	80145b2 <forward_tile+0xde>
 80144ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144f2:	69c4      	ldr	r4, [r0, #28]
 80144f4:	b08b      	sub	sp, #44	; 0x2c
 80144f6:	68d9      	ldr	r1, [r3, #12]
 80144f8:	6810      	ldr	r0, [r2, #0]
 80144fa:	f8d1 8008 	ldr.w	r8, [r1, #8]
 80144fe:	68a2      	ldr	r2, [r4, #8]
 8014500:	68cc      	ldr	r4, [r1, #12]
 8014502:	6980      	ldr	r0, [r0, #24]
 8014504:	8895      	ldrh	r5, [r2, #4]
 8014506:	6887      	ldr	r7, [r0, #8]
 8014508:	8850      	ldrh	r0, [r2, #2]
 801450a:	9408      	str	r4, [sp, #32]
 801450c:	9003      	str	r0, [sp, #12]
 801450e:	e9d3 1305 	ldrd	r1, r3, [r3, #20]
 8014512:	689b      	ldr	r3, [r3, #8]
 8014514:	f8d1 a008 	ldr.w	sl, [r1, #8]
 8014518:	9304      	str	r3, [sp, #16]
 801451a:	8813      	ldrh	r3, [r2, #0]
 801451c:	68ca      	ldr	r2, [r1, #12]
 801451e:	9307      	str	r3, [sp, #28]
 8014520:	9209      	str	r2, [sp, #36]	; 0x24
 8014522:	2b00      	cmp	r3, #0
 8014524:	d03d      	beq.n	80145a2 <forward_tile+0xce>
 8014526:	2c00      	cmp	r4, #0
 8014528:	d03b      	beq.n	80145a2 <forward_tile+0xce>
 801452a:	fb05 f30a 	mul.w	r3, r5, sl
 801452e:	9300      	str	r3, [sp, #0]
 8014530:	2300      	movs	r3, #0
 8014532:	9305      	str	r3, [sp, #20]
 8014534:	2300      	movs	r3, #0
 8014536:	9302      	str	r3, [sp, #8]
 8014538:	9306      	str	r3, [sp, #24]
 801453a:	9b03      	ldr	r3, [sp, #12]
 801453c:	b30b      	cbz	r3, 8014582 <forward_tile+0xae>
 801453e:	2300      	movs	r3, #0
 8014540:	9301      	str	r3, [sp, #4]
 8014542:	f1b8 0f00 	cmp.w	r8, #0
 8014546:	d016      	beq.n	8014576 <forward_tile+0xa2>
 8014548:	9b04      	ldr	r3, [sp, #16]
 801454a:	2600      	movs	r6, #0
 801454c:	9a02      	ldr	r2, [sp, #8]
 801454e:	eb03 0b02 	add.w	fp, r3, r2
 8014552:	b165      	cbz	r5, 801456e <forward_tile+0x9a>
 8014554:	46b9      	mov	r9, r7
 8014556:	2400      	movs	r4, #0
 8014558:	3401      	adds	r4, #1
 801455a:	4648      	mov	r0, r9
 801455c:	4652      	mov	r2, sl
 801455e:	4659      	mov	r1, fp
 8014560:	f007 f82c 	bl	801b5bc <memcpy>
 8014564:	42ac      	cmp	r4, r5
 8014566:	44d1      	add	r9, sl
 8014568:	d1f6      	bne.n	8014558 <forward_tile+0x84>
 801456a:	9b00      	ldr	r3, [sp, #0]
 801456c:	441f      	add	r7, r3
 801456e:	3601      	adds	r6, #1
 8014570:	44d3      	add	fp, sl
 8014572:	45b0      	cmp	r8, r6
 8014574:	d1ed      	bne.n	8014552 <forward_tile+0x7e>
 8014576:	9b01      	ldr	r3, [sp, #4]
 8014578:	9a03      	ldr	r2, [sp, #12]
 801457a:	3301      	adds	r3, #1
 801457c:	4293      	cmp	r3, r2
 801457e:	9301      	str	r3, [sp, #4]
 8014580:	d1df      	bne.n	8014542 <forward_tile+0x6e>
 8014582:	9a02      	ldr	r2, [sp, #8]
 8014584:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014586:	9b06      	ldr	r3, [sp, #24]
 8014588:	440a      	add	r2, r1
 801458a:	3301      	adds	r3, #1
 801458c:	9202      	str	r2, [sp, #8]
 801458e:	9a08      	ldr	r2, [sp, #32]
 8014590:	9306      	str	r3, [sp, #24]
 8014592:	429a      	cmp	r2, r3
 8014594:	d1d1      	bne.n	801453a <forward_tile+0x66>
 8014596:	9b05      	ldr	r3, [sp, #20]
 8014598:	9a07      	ldr	r2, [sp, #28]
 801459a:	3301      	adds	r3, #1
 801459c:	429a      	cmp	r2, r3
 801459e:	9305      	str	r3, [sp, #20]
 80145a0:	d1c8      	bne.n	8014534 <forward_tile+0x60>
 80145a2:	b00b      	add	sp, #44	; 0x2c
 80145a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145a8:	6853      	ldr	r3, [r2, #4]
 80145aa:	deff      	udf	#255	; 0xff
 80145ac:	2300      	movs	r3, #0
 80145ae:	685b      	ldr	r3, [r3, #4]
 80145b0:	deff      	udf	#255	; 0xff
 80145b2:	6993      	ldr	r3, [r2, #24]
 80145b4:	deff      	udf	#255	; 0xff
 80145b6:	bf00      	nop

080145b8 <forward_pad>:
 80145b8:	6982      	ldr	r2, [r0, #24]
 80145ba:	8813      	ldrh	r3, [r2, #0]
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d052      	beq.n	8014666 <forward_pad+0xae>
 80145c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145c4:	ed2d 8b02 	vpush	{d8}
 80145c8:	6852      	ldr	r2, [r2, #4]
 80145ca:	b091      	sub	sp, #68	; 0x44
 80145cc:	6857      	ldr	r7, [r2, #4]
 80145ce:	b107      	cbz	r7, 80145d2 <forward_pad+0x1a>
 80145d0:	683f      	ldr	r7, [r7, #0]
 80145d2:	2b01      	cmp	r3, #1
 80145d4:	f000 81e7 	beq.w	80149a6 <forward_pad+0x3ee>
 80145d8:	6913      	ldr	r3, [r2, #16]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	f000 81e1 	beq.w	80149a2 <forward_pad+0x3ea>
 80145e0:	681d      	ldr	r5, [r3, #0]
 80145e2:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 80145e6:	68aa      	ldr	r2, [r5, #8]
 80145e8:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80145ea:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 80145ee:	f8de 100c 	ldr.w	r1, [lr, #12]
 80145f2:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 80145f6:	bf38      	it	cc
 80145f8:	2201      	movcc	r2, #1
 80145fa:	9102      	str	r1, [sp, #8]
 80145fc:	bf28      	it	cs
 80145fe:	f8da 2010 	ldrcs.w	r2, [sl, #16]
 8014602:	f9b6 1000 	ldrsh.w	r1, [r6]
 8014606:	f9b6 4008 	ldrsh.w	r4, [r6, #8]
 801460a:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801460e:	9103      	str	r1, [sp, #12]
 8014610:	9201      	str	r2, [sp, #4]
 8014612:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 8014616:	7f03      	ldrb	r3, [r0, #28]
 8014618:	e9d5 6205 	ldrd	r6, r2, [r5, #20]
 801461c:	2b01      	cmp	r3, #1
 801461e:	6895      	ldr	r5, [r2, #8]
 8014620:	f8d6 b008 	ldr.w	fp, [r6, #8]
 8014624:	e9d7 2c05 	ldrd	r2, ip, [r7, #20]
 8014628:	68f7      	ldr	r7, [r6, #12]
 801462a:	f8dc 8008 	ldr.w	r8, [ip, #8]
 801462e:	fb07 f404 	mul.w	r4, r7, r4
 8014632:	463e      	mov	r6, r7
 8014634:	9708      	str	r7, [sp, #32]
 8014636:	9f03      	ldr	r7, [sp, #12]
 8014638:	940d      	str	r4, [sp, #52]	; 0x34
 801463a:	fb06 f607 	mul.w	r6, r6, r7
 801463e:	68d4      	ldr	r4, [r2, #12]
 8014640:	fb0b f709 	mul.w	r7, fp, r9
 8014644:	9405      	str	r4, [sp, #20]
 8014646:	960c      	str	r6, [sp, #48]	; 0x30
 8014648:	6894      	ldr	r4, [r2, #8]
 801464a:	fb0b f601 	mul.w	r6, fp, r1
 801464e:	d00c      	beq.n	801466a <forward_pad+0xb2>
 8014650:	2b02      	cmp	r3, #2
 8014652:	f000 8106 	beq.w	8014862 <forward_pad+0x2aa>
 8014656:	2b00      	cmp	r3, #0
 8014658:	f000 80a8 	beq.w	80147ac <forward_pad+0x1f4>
 801465c:	b011      	add	sp, #68	; 0x44
 801465e:	ecbd 8b02 	vpop	{d8}
 8014662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014666:	685b      	ldr	r3, [r3, #4]
 8014668:	deff      	udf	#255	; 0xff
 801466a:	f8da 300c 	ldr.w	r3, [sl, #12]
 801466e:	930e      	str	r3, [sp, #56]	; 0x38
 8014670:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014672:	eb05 0903 	add.w	r9, r5, r3
 8014676:	9b02      	ldr	r3, [sp, #8]
 8014678:	2b00      	cmp	r3, #0
 801467a:	dd6a      	ble.n	8014752 <forward_pad+0x19a>
 801467c:	f8de 3008 	ldr.w	r3, [lr, #8]
 8014680:	ee08 8a10 	vmov	s16, r8
 8014684:	9805      	ldr	r0, [sp, #20]
 8014686:	4419      	add	r1, r3
 8014688:	f8da 2008 	ldr.w	r2, [sl, #8]
 801468c:	4407      	add	r7, r0
 801468e:	9801      	ldr	r0, [sp, #4]
 8014690:	950f      	str	r5, [sp, #60]	; 0x3c
 8014692:	fb01 f000 	mul.w	r0, r1, r0
 8014696:	4601      	mov	r1, r0
 8014698:	9007      	str	r0, [sp, #28]
 801469a:	19b8      	adds	r0, r7, r6
 801469c:	900a      	str	r0, [sp, #40]	; 0x28
 801469e:	eb09 0006 	add.w	r0, r9, r6
 80146a2:	9e03      	ldr	r6, [sp, #12]
 80146a4:	9001      	str	r0, [sp, #4]
 80146a6:	4608      	mov	r0, r1
 80146a8:	4611      	mov	r1, r2
 80146aa:	fb02 0206 	mla	r2, r2, r6, r0
 80146ae:	460f      	mov	r7, r1
 80146b0:	fb0b 5202 	mla	r2, fp, r2, r5
 80146b4:	9204      	str	r2, [sp, #16]
 80146b6:	1e9a      	subs	r2, r3, #2
 80146b8:	fb04 f303 	mul.w	r3, r4, r3
 80146bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80146be:	fb04 8302 	mla	r3, r4, r2, r8
 80146c2:	9303      	str	r3, [sp, #12]
 80146c4:	fb0b f301 	mul.w	r3, fp, r1
 80146c8:	9309      	str	r3, [sp, #36]	; 0x24
 80146ca:	2300      	movs	r3, #0
 80146cc:	9306      	str	r3, [sp, #24]
 80146ce:	f1cb 0300 	rsb	r3, fp, #0
 80146d2:	4698      	mov	r8, r3
 80146d4:	9b01      	ldr	r3, [sp, #4]
 80146d6:	454b      	cmp	r3, r9
 80146d8:	d00b      	beq.n	80146f2 <forward_pad+0x13a>
 80146da:	ee18 5a10 	vmov	r5, s16
 80146de:	4443      	add	r3, r8
 80146e0:	4425      	add	r5, r4
 80146e2:	4622      	mov	r2, r4
 80146e4:	4618      	mov	r0, r3
 80146e6:	4629      	mov	r1, r5
 80146e8:	f006 ff68 	bl	801b5bc <memcpy>
 80146ec:	4548      	cmp	r0, r9
 80146ee:	4603      	mov	r3, r0
 80146f0:	d1f5      	bne.n	80146de <forward_pad+0x126>
 80146f2:	ee18 3a10 	vmov	r3, s16
 80146f6:	9a05      	ldr	r2, [sp, #20]
 80146f8:	ee18 1a10 	vmov	r1, s16
 80146fc:	9801      	ldr	r0, [sp, #4]
 80146fe:	4413      	add	r3, r2
 8014700:	ee08 3a10 	vmov	s16, r3
 8014704:	f006 ff5a 	bl	801b5bc <memcpy>
 8014708:	9b07      	ldr	r3, [sp, #28]
 801470a:	429f      	cmp	r7, r3
 801470c:	dd0d      	ble.n	801472a <forward_pad+0x172>
 801470e:	461d      	mov	r5, r3
 8014710:	e9dd a603 	ldrd	sl, r6, [sp, #12]
 8014714:	3501      	adds	r5, #1
 8014716:	4651      	mov	r1, sl
 8014718:	4630      	mov	r0, r6
 801471a:	4622      	mov	r2, r4
 801471c:	f006 ff4e 	bl	801b5bc <memcpy>
 8014720:	42af      	cmp	r7, r5
 8014722:	ebaa 0a04 	sub.w	sl, sl, r4
 8014726:	445e      	add	r6, fp
 8014728:	d1f4      	bne.n	8014714 <forward_pad+0x15c>
 801472a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801472c:	9901      	ldr	r1, [sp, #4]
 801472e:	4491      	add	r9, r2
 8014730:	9b06      	ldr	r3, [sp, #24]
 8014732:	4411      	add	r1, r2
 8014734:	9a04      	ldr	r2, [sp, #16]
 8014736:	3301      	adds	r3, #1
 8014738:	9101      	str	r1, [sp, #4]
 801473a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801473c:	9306      	str	r3, [sp, #24]
 801473e:	440a      	add	r2, r1
 8014740:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014742:	9204      	str	r2, [sp, #16]
 8014744:	9a03      	ldr	r2, [sp, #12]
 8014746:	440a      	add	r2, r1
 8014748:	9203      	str	r2, [sp, #12]
 801474a:	9a02      	ldr	r2, [sp, #8]
 801474c:	429a      	cmp	r2, r3
 801474e:	d1c1      	bne.n	80146d4 <forward_pad+0x11c>
 8014750:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014752:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014754:	eb05 0443 	add.w	r4, r5, r3, lsl #1
 8014758:	42a5      	cmp	r5, r4
 801475a:	d00c      	beq.n	8014776 <forward_pad+0x1be>
 801475c:	9b08      	ldr	r3, [sp, #32]
 801475e:	462e      	mov	r6, r5
 8014760:	425f      	negs	r7, r3
 8014762:	4698      	mov	r8, r3
 8014764:	4621      	mov	r1, r4
 8014766:	4630      	mov	r0, r6
 8014768:	443c      	add	r4, r7
 801476a:	4446      	add	r6, r8
 801476c:	4642      	mov	r2, r8
 801476e:	f006 ff25 	bl	801b5bc <memcpy>
 8014772:	42a6      	cmp	r6, r4
 8014774:	d1f6      	bne.n	8014764 <forward_pad+0x1ac>
 8014776:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014778:	9a08      	ldr	r2, [sp, #32]
 801477a:	3b01      	subs	r3, #1
 801477c:	fb02 5503 	mla	r5, r2, r3, r5
 8014780:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014782:	eba5 0443 	sub.w	r4, r5, r3, lsl #1
 8014786:	42a5      	cmp	r5, r4
 8014788:	f43f af68 	beq.w	801465c <forward_pad+0xa4>
 801478c:	4617      	mov	r7, r2
 801478e:	4256      	negs	r6, r2
 8014790:	4621      	mov	r1, r4
 8014792:	4628      	mov	r0, r5
 8014794:	443c      	add	r4, r7
 8014796:	4435      	add	r5, r6
 8014798:	463a      	mov	r2, r7
 801479a:	f006 ff0f 	bl	801b5bc <memcpy>
 801479e:	42a5      	cmp	r5, r4
 80147a0:	d1f6      	bne.n	8014790 <forward_pad+0x1d8>
 80147a2:	b011      	add	sp, #68	; 0x44
 80147a4:	ecbd 8b02 	vpop	{d8}
 80147a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147ac:	f8dc 1000 	ldr.w	r1, [ip]
 80147b0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80147b2:	f3c1 11c6 	ubfx	r1, r1, #7, #7
 80147b6:	2908      	cmp	r1, #8
 80147b8:	f000 80b5 	beq.w	8014926 <forward_pad+0x36e>
 80147bc:	f8d2 9004 	ldr.w	r9, [r2, #4]
 80147c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80147c2:	2a00      	cmp	r2, #0
 80147c4:	dd0a      	ble.n	80147dc <forward_pad+0x224>
 80147c6:	4693      	mov	fp, r2
 80147c8:	469a      	mov	sl, r3
 80147ca:	44ca      	add	sl, r9
 80147cc:	4628      	mov	r0, r5
 80147ce:	464a      	mov	r2, r9
 80147d0:	68a1      	ldr	r1, [r4, #8]
 80147d2:	f006 fef3 	bl	801b5bc <memcpy>
 80147d6:	45d3      	cmp	fp, sl
 80147d8:	444d      	add	r5, r9
 80147da:	dcf6      	bgt.n	80147ca <forward_pad+0x212>
 80147dc:	9b02      	ldr	r3, [sp, #8]
 80147de:	2b00      	cmp	r3, #0
 80147e0:	dd2c      	ble.n	801483c <forward_pad+0x284>
 80147e2:	f04f 0a00 	mov.w	sl, #0
 80147e6:	f8dd b014 	ldr.w	fp, [sp, #20]
 80147ea:	f8cd a004 	str.w	sl, [sp, #4]
 80147ee:	2e00      	cmp	r6, #0
 80147f0:	dd0a      	ble.n	8014808 <forward_pad+0x250>
 80147f2:	f04f 0a00 	mov.w	sl, #0
 80147f6:	44ca      	add	sl, r9
 80147f8:	4628      	mov	r0, r5
 80147fa:	464a      	mov	r2, r9
 80147fc:	68a1      	ldr	r1, [r4, #8]
 80147fe:	f006 fedd 	bl	801b5bc <memcpy>
 8014802:	4556      	cmp	r6, sl
 8014804:	444d      	add	r5, r9
 8014806:	dcf6      	bgt.n	80147f6 <forward_pad+0x23e>
 8014808:	4641      	mov	r1, r8
 801480a:	4628      	mov	r0, r5
 801480c:	465a      	mov	r2, fp
 801480e:	44d8      	add	r8, fp
 8014810:	f006 fed4 	bl	801b5bc <memcpy>
 8014814:	2f00      	cmp	r7, #0
 8014816:	445d      	add	r5, fp
 8014818:	dd0a      	ble.n	8014830 <forward_pad+0x278>
 801481a:	f04f 0a00 	mov.w	sl, #0
 801481e:	44ca      	add	sl, r9
 8014820:	4628      	mov	r0, r5
 8014822:	464a      	mov	r2, r9
 8014824:	68a1      	ldr	r1, [r4, #8]
 8014826:	f006 fec9 	bl	801b5bc <memcpy>
 801482a:	4557      	cmp	r7, sl
 801482c:	444d      	add	r5, r9
 801482e:	dcf6      	bgt.n	801481e <forward_pad+0x266>
 8014830:	9b01      	ldr	r3, [sp, #4]
 8014832:	9a02      	ldr	r2, [sp, #8]
 8014834:	3301      	adds	r3, #1
 8014836:	429a      	cmp	r2, r3
 8014838:	9301      	str	r3, [sp, #4]
 801483a:	d1d8      	bne.n	80147ee <forward_pad+0x236>
 801483c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801483e:	2f00      	cmp	r7, #0
 8014840:	f77f af0c 	ble.w	801465c <forward_pad+0xa4>
 8014844:	2600      	movs	r6, #0
 8014846:	444e      	add	r6, r9
 8014848:	4628      	mov	r0, r5
 801484a:	464a      	mov	r2, r9
 801484c:	68a1      	ldr	r1, [r4, #8]
 801484e:	f006 feb5 	bl	801b5bc <memcpy>
 8014852:	42b7      	cmp	r7, r6
 8014854:	444d      	add	r5, r9
 8014856:	dcf6      	bgt.n	8014846 <forward_pad+0x28e>
 8014858:	b011      	add	sp, #68	; 0x44
 801485a:	ecbd 8b02 	vpop	{d8}
 801485e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014862:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8014864:	9b02      	ldr	r3, [sp, #8]
 8014866:	442f      	add	r7, r5
 8014868:	2b00      	cmp	r3, #0
 801486a:	9706      	str	r7, [sp, #24]
 801486c:	dd32      	ble.n	80148d4 <forward_pad+0x31c>
 801486e:	fb04 f309 	mul.w	r3, r4, r9
 8014872:	9507      	str	r5, [sp, #28]
 8014874:	9304      	str	r3, [sp, #16]
 8014876:	2300      	movs	r3, #0
 8014878:	9301      	str	r3, [sp, #4]
 801487a:	2e00      	cmp	r6, #0
 801487c:	dd09      	ble.n	8014892 <forward_pad+0x2da>
 801487e:	2500      	movs	r5, #0
 8014880:	4425      	add	r5, r4
 8014882:	4638      	mov	r0, r7
 8014884:	4622      	mov	r2, r4
 8014886:	4641      	mov	r1, r8
 8014888:	f006 fe98 	bl	801b5bc <memcpy>
 801488c:	42ae      	cmp	r6, r5
 801488e:	4427      	add	r7, r4
 8014890:	dcf6      	bgt.n	8014880 <forward_pad+0x2c8>
 8014892:	9b05      	ldr	r3, [sp, #20]
 8014894:	4641      	mov	r1, r8
 8014896:	4638      	mov	r0, r7
 8014898:	461a      	mov	r2, r3
 801489a:	4498      	add	r8, r3
 801489c:	441f      	add	r7, r3
 801489e:	f006 fe8d 	bl	801b5bc <memcpy>
 80148a2:	f1b9 0f00 	cmp.w	r9, #0
 80148a6:	eba8 0a04 	sub.w	sl, r8, r4
 80148aa:	dd0c      	ble.n	80148c6 <forward_pad+0x30e>
 80148ac:	46bb      	mov	fp, r7
 80148ae:	2500      	movs	r5, #0
 80148b0:	3501      	adds	r5, #1
 80148b2:	4658      	mov	r0, fp
 80148b4:	4622      	mov	r2, r4
 80148b6:	4651      	mov	r1, sl
 80148b8:	f006 fe80 	bl	801b5bc <memcpy>
 80148bc:	45a9      	cmp	r9, r5
 80148be:	44a3      	add	fp, r4
 80148c0:	d1f6      	bne.n	80148b0 <forward_pad+0x2f8>
 80148c2:	9b04      	ldr	r3, [sp, #16]
 80148c4:	441f      	add	r7, r3
 80148c6:	9b01      	ldr	r3, [sp, #4]
 80148c8:	9a02      	ldr	r2, [sp, #8]
 80148ca:	3301      	adds	r3, #1
 80148cc:	429a      	cmp	r2, r3
 80148ce:	9301      	str	r3, [sp, #4]
 80148d0:	d1d3      	bne.n	801487a <forward_pad+0x2c2>
 80148d2:	9d07      	ldr	r5, [sp, #28]
 80148d4:	9b06      	ldr	r3, [sp, #24]
 80148d6:	429d      	cmp	r5, r3
 80148d8:	d00a      	beq.n	80148f0 <forward_pad+0x338>
 80148da:	461f      	mov	r7, r3
 80148dc:	462c      	mov	r4, r5
 80148de:	9e08      	ldr	r6, [sp, #32]
 80148e0:	4620      	mov	r0, r4
 80148e2:	4434      	add	r4, r6
 80148e4:	4632      	mov	r2, r6
 80148e6:	4639      	mov	r1, r7
 80148e8:	f006 fe68 	bl	801b5bc <memcpy>
 80148ec:	42a7      	cmp	r7, r4
 80148ee:	d1f7      	bne.n	80148e0 <forward_pad+0x328>
 80148f0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80148f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80148f6:	4413      	add	r3, r2
 80148f8:	9a08      	ldr	r2, [sp, #32]
 80148fa:	3b01      	subs	r3, #1
 80148fc:	fb02 5503 	mla	r5, r2, r3, r5
 8014900:	442c      	add	r4, r5
 8014902:	42a5      	cmp	r5, r4
 8014904:	f43f aeaa 	beq.w	801465c <forward_pad+0xa4>
 8014908:	4617      	mov	r7, r2
 801490a:	4256      	negs	r6, r2
 801490c:	4620      	mov	r0, r4
 801490e:	4434      	add	r4, r6
 8014910:	463a      	mov	r2, r7
 8014912:	4629      	mov	r1, r5
 8014914:	f006 fe52 	bl	801b5bc <memcpy>
 8014918:	42a5      	cmp	r5, r4
 801491a:	d1f7      	bne.n	801490c <forward_pad+0x354>
 801491c:	b011      	add	sp, #68	; 0x44
 801491e:	ecbd 8b02 	vpop	{d8}
 8014922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014926:	68a2      	ldr	r2, [r4, #8]
 8014928:	4629      	mov	r1, r5
 801492a:	9301      	str	r3, [sp, #4]
 801492c:	f992 9000 	ldrsb.w	r9, [r2]
 8014930:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014932:	4648      	mov	r0, r9
 8014934:	18ac      	adds	r4, r5, r2
 8014936:	9403      	str	r4, [sp, #12]
 8014938:	f005 fa3e 	bl	8019db8 <st_int8_fill>
 801493c:	9b02      	ldr	r3, [sp, #8]
 801493e:	2b00      	cmp	r3, #0
 8014940:	dd25      	ble.n	801498e <forward_pad+0x3d6>
 8014942:	9b01      	ldr	r3, [sp, #4]
 8014944:	eb06 0a07 	add.w	sl, r6, r7
 8014948:	4625      	mov	r5, r4
 801494a:	9601      	str	r6, [sp, #4]
 801494c:	469b      	mov	fp, r3
 801494e:	9b05      	ldr	r3, [sp, #20]
 8014950:	4434      	add	r4, r6
 8014952:	449a      	add	sl, r3
 8014954:	461e      	mov	r6, r3
 8014956:	4629      	mov	r1, r5
 8014958:	9a01      	ldr	r2, [sp, #4]
 801495a:	4648      	mov	r0, r9
 801495c:	f10b 0b01 	add.w	fp, fp, #1
 8014960:	f005 fa2a 	bl	8019db8 <st_int8_fill>
 8014964:	4621      	mov	r1, r4
 8014966:	4640      	mov	r0, r8
 8014968:	4632      	mov	r2, r6
 801496a:	f005 fa8d 	bl	8019e88 <st_int8_copy>
 801496e:	19a1      	adds	r1, r4, r6
 8014970:	463a      	mov	r2, r7
 8014972:	4648      	mov	r0, r9
 8014974:	f005 fa20 	bl	8019db8 <st_int8_fill>
 8014978:	9b02      	ldr	r3, [sp, #8]
 801497a:	4455      	add	r5, sl
 801497c:	44b0      	add	r8, r6
 801497e:	455b      	cmp	r3, fp
 8014980:	4454      	add	r4, sl
 8014982:	d1e8      	bne.n	8014956 <forward_pad+0x39e>
 8014984:	461a      	mov	r2, r3
 8014986:	9b03      	ldr	r3, [sp, #12]
 8014988:	fb0a 3302 	mla	r3, sl, r2, r3
 801498c:	9303      	str	r3, [sp, #12]
 801498e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014990:	4648      	mov	r0, r9
 8014992:	9903      	ldr	r1, [sp, #12]
 8014994:	b011      	add	sp, #68	; 0x44
 8014996:	ecbd 8b02 	vpop	{d8}
 801499a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801499e:	f005 ba0b 	b.w	8019db8 <st_int8_fill>
 80149a2:	68db      	ldr	r3, [r3, #12]
 80149a4:	deff      	udf	#255	; 0xff
 80149a6:	2300      	movs	r3, #0
 80149a8:	685b      	ldr	r3, [r3, #4]
 80149aa:	deff      	udf	#255	; 0xff

080149ac <forward_upsample>:
 80149ac:	6983      	ldr	r3, [r0, #24]
 80149ae:	881a      	ldrh	r2, [r3, #0]
 80149b0:	2a00      	cmp	r2, #0
 80149b2:	f000 80dc 	beq.w	8014b6e <forward_upsample+0x1c2>
 80149b6:	6859      	ldr	r1, [r3, #4]
 80149b8:	684b      	ldr	r3, [r1, #4]
 80149ba:	b103      	cbz	r3, 80149be <forward_upsample+0x12>
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	2a01      	cmp	r2, #1
 80149c0:	f000 819b 	beq.w	8014cfa <forward_upsample+0x34e>
 80149c4:	690a      	ldr	r2, [r1, #16]
 80149c6:	2a00      	cmp	r2, #0
 80149c8:	f000 819a 	beq.w	8014d00 <forward_upsample+0x354>
 80149cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149d0:	ed2d 8b04 	vpush	{d8-d9}
 80149d4:	f8d2 b000 	ldr.w	fp, [r2]
 80149d8:	b087      	sub	sp, #28
 80149da:	68da      	ldr	r2, [r3, #12]
 80149dc:	699b      	ldr	r3, [r3, #24]
 80149de:	68d1      	ldr	r1, [r2, #12]
 80149e0:	f8d3 8008 	ldr.w	r8, [r3, #8]
 80149e4:	6a03      	ldr	r3, [r0, #32]
 80149e6:	6895      	ldr	r5, [r2, #8]
 80149e8:	689b      	ldr	r3, [r3, #8]
 80149ea:	9104      	str	r1, [sp, #16]
 80149ec:	edd3 8a00 	vldr	s17, [r3]
 80149f0:	f8db 100c 	ldr.w	r1, [fp, #12]
 80149f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80149f8:	f8db 3018 	ldr.w	r3, [fp, #24]
 80149fc:	9503      	str	r5, [sp, #12]
 80149fe:	689c      	ldr	r4, [r3, #8]
 8014a00:	6855      	ldr	r5, [r2, #4]
 8014a02:	7f03      	ldrb	r3, [r0, #28]
 8014a04:	68ca      	ldr	r2, [r1, #12]
 8014a06:	688f      	ldr	r7, [r1, #8]
 8014a08:	9202      	str	r2, [sp, #8]
 8014a0a:	2b03      	cmp	r3, #3
 8014a0c:	f200 80aa 	bhi.w	8014b64 <forward_upsample+0x1b8>
 8014a10:	e8df f013 	tbh	[pc, r3, lsl #1]
 8014a14:	00b00106 	.word	0x00b00106
 8014a18:	00af0004 	.word	0x00af0004
 8014a1c:	7f43      	ldrb	r3, [r0, #29]
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	f040 815e 	bne.w	8014ce0 <forward_upsample+0x334>
 8014a24:	ed9f 0ab7 	vldr	s0, [pc, #732]	; 8014d04 <forward_upsample+0x358>
 8014a28:	eef0 1a40 	vmov.f32	s3, s0
 8014a2c:	9b02      	ldr	r3, [sp, #8]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	f000 8098 	beq.w	8014b64 <forward_upsample+0x1b8>
 8014a34:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 8014a38:	9b04      	ldr	r3, [sp, #16]
 8014a3a:	ed9f 2ab2 	vldr	s4, [pc, #712]	; 8014d04 <forward_upsample+0x358>
 8014a3e:	ea4f 0e85 	mov.w	lr, r5, lsl #2
 8014a42:	3b01      	subs	r3, #1
 8014a44:	ee82 8aa8 	vdiv.f32	s16, s5, s17
 8014a48:	ee00 3a90 	vmov	s1, r3
 8014a4c:	9b03      	ldr	r3, [sp, #12]
 8014a4e:	1e5a      	subs	r2, r3, #1
 8014a50:	fb05 f303 	mul.w	r3, r5, r3
 8014a54:	ee82 1aa7 	vdiv.f32	s2, s5, s15
 8014a58:	ee03 2a10 	vmov	s6, r2
 8014a5c:	9304      	str	r3, [sp, #16]
 8014a5e:	2300      	movs	r3, #0
 8014a60:	9301      	str	r3, [sp, #4]
 8014a62:	eef8 0a60 	vcvt.f32.u32	s1, s1
 8014a66:	eeb8 3a43 	vcvt.f32.u32	s6, s6
 8014a6a:	eddd 7a01 	vldr	s15, [sp, #4]
 8014a6e:	9b04      	ldr	r3, [sp, #16]
 8014a70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014a74:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8014a78:	ee67 7a88 	vmul.f32	s15, s15, s16
 8014a7c:	fec7 7a82 	vmaxnm.f32	s15, s15, s4
 8014a80:	fec7 7ae0 	vminnm.f32	s15, s15, s1
 8014a84:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8014a88:	eef4 7a60 	vcmp.f32	s15, s1
 8014a8c:	eef8 3a47 	vcvt.f32.u32	s7, s14
 8014a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a94:	ee77 8ae3 	vsub.f32	s17, s15, s7
 8014a98:	bf14      	ite	ne
 8014a9a:	469a      	movne	sl, r3
 8014a9c:	f04f 0a00 	moveq.w	sl, #0
 8014aa0:	2f00      	cmp	r7, #0
 8014aa2:	d059      	beq.n	8014b58 <forward_upsample+0x1ac>
 8014aa4:	ee72 7ae7 	vsub.f32	s15, s5, s15
 8014aa8:	ee17 2a10 	vmov	r2, s14
 8014aac:	9b03      	ldr	r3, [sp, #12]
 8014aae:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
 8014ab2:	f04f 0c00 	mov.w	ip, #0
 8014ab6:	ee77 3aa3 	vadd.f32	s7, s15, s7
 8014aba:	fb03 f902 	mul.w	r9, r3, r2
 8014abe:	ee07 ca90 	vmov	s15, ip
 8014ac2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014ac6:	ee37 7a61 	vsub.f32	s14, s14, s3
 8014aca:	ee27 7a01 	vmul.f32	s14, s14, s2
 8014ace:	fe87 7a02 	vmaxnm.f32	s14, s14, s4
 8014ad2:	fe87 7a43 	vminnm.f32	s14, s14, s6
 8014ad6:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8014ada:	eeb4 7a43 	vcmp.f32	s14, s6
 8014ade:	ee32 5ac7 	vsub.f32	s10, s5, s14
 8014ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014ae6:	ee17 3a90 	vmov	r3, s15
 8014aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014aee:	444b      	add	r3, r9
 8014af0:	ee37 7a66 	vsub.f32	s14, s14, s13
 8014af4:	ee35 5a26 	vadd.f32	s10, s10, s13
 8014af8:	bf14      	ite	ne
 8014afa:	462a      	movne	r2, r5
 8014afc:	2200      	moveq	r2, #0
 8014afe:	ee27 4a23 	vmul.f32	s8, s14, s7
 8014b02:	ee65 4a23 	vmul.f32	s9, s10, s7
 8014b06:	ee28 7a87 	vmul.f32	s14, s17, s14
 8014b0a:	ee25 5a28 	vmul.f32	s10, s10, s17
 8014b0e:	b1fd      	cbz	r5, 8014b50 <forward_upsample+0x1a4>
 8014b10:	fb0e 8303 	mla	r3, lr, r3, r8
 8014b14:	eb02 010a 	add.w	r1, r2, sl
 8014b18:	eb04 060e 	add.w	r6, r4, lr
 8014b1c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8014b20:	eb03 000b 	add.w	r0, r3, fp
 8014b24:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8014b28:	ecf2 7a01 	vldmia	r2!, {s15}
 8014b2c:	ecf3 5a01 	vldmia	r3!, {s11}
 8014b30:	ee67 7a84 	vmul.f32	s15, s15, s8
 8014b34:	ecb0 6a01 	vldmia	r0!, {s12}
 8014b38:	ecf1 6a01 	vldmia	r1!, {s13}
 8014b3c:	eee5 7aa4 	vfma.f32	s15, s11, s9
 8014b40:	eee6 7a05 	vfma.f32	s15, s12, s10
 8014b44:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014b48:	ece4 7a01 	vstmia	r4!, {s15}
 8014b4c:	42b4      	cmp	r4, r6
 8014b4e:	d1eb      	bne.n	8014b28 <forward_upsample+0x17c>
 8014b50:	f10c 0c01 	add.w	ip, ip, #1
 8014b54:	4567      	cmp	r7, ip
 8014b56:	d1b2      	bne.n	8014abe <forward_upsample+0x112>
 8014b58:	9b01      	ldr	r3, [sp, #4]
 8014b5a:	9a02      	ldr	r2, [sp, #8]
 8014b5c:	3301      	adds	r3, #1
 8014b5e:	429a      	cmp	r2, r3
 8014b60:	9301      	str	r3, [sp, #4]
 8014b62:	d182      	bne.n	8014a6a <forward_upsample+0xbe>
 8014b64:	b007      	add	sp, #28
 8014b66:	ecbd 8b04 	vpop	{d8-d9}
 8014b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b6e:	6853      	ldr	r3, [r2, #4]
 8014b70:	deff      	udf	#255	; 0xff
 8014b72:	e7fe      	b.n	8014b72 <forward_upsample+0x1c6>
 8014b74:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8014b78:	2a03      	cmp	r2, #3
 8014b7a:	f200 80ae 	bhi.w	8014cda <forward_upsample+0x32e>
 8014b7e:	4b62      	ldr	r3, [pc, #392]	; (8014d08 <forward_upsample+0x35c>)
 8014b80:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8014b84:	ed93 8a00 	vldr	s16, [r3]
 8014b88:	9b02      	ldr	r3, [sp, #8]
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d0ea      	beq.n	8014b64 <forward_upsample+0x1b8>
 8014b8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014b92:	00ad      	lsls	r5, r5, #2
 8014b94:	ee87 9a28 	vdiv.f32	s18, s14, s17
 8014b98:	eec7 8a27 	vdiv.f32	s17, s14, s15
 8014b9c:	2f00      	cmp	r7, #0
 8014b9e:	d0e1      	beq.n	8014b64 <forward_upsample+0x1b8>
 8014ba0:	fb07 f305 	mul.w	r3, r7, r5
 8014ba4:	f04f 0a00 	mov.w	sl, #0
 8014ba8:	9301      	str	r3, [sp, #4]
 8014baa:	ee07 aa90 	vmov	s15, sl
 8014bae:	9b03      	ldr	r3, [sp, #12]
 8014bb0:	2600      	movs	r6, #0
 8014bb2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014bb6:	eef0 7a48 	vmov.f32	s15, s16
 8014bba:	eee7 7a09 	vfma.f32	s15, s14, s18
 8014bbe:	fef8 7a67 	vrinta.f32	s15, s15
 8014bc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014bc6:	ee17 9a90 	vmov	r9, s15
 8014bca:	fb03 f909 	mul.w	r9, r3, r9
 8014bce:	4623      	mov	r3, r4
 8014bd0:	ee07 6a90 	vmov	s15, r6
 8014bd4:	f8db 2014 	ldr.w	r2, [fp, #20]
 8014bd8:	3601      	adds	r6, #1
 8014bda:	4618      	mov	r0, r3
 8014bdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014be0:	6892      	ldr	r2, [r2, #8]
 8014be2:	eef0 7a48 	vmov.f32	s15, s16
 8014be6:	eee7 7a28 	vfma.f32	s15, s14, s17
 8014bea:	fef8 7a67 	vrinta.f32	s15, s15
 8014bee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014bf2:	ee17 1a90 	vmov	r1, s15
 8014bf6:	4449      	add	r1, r9
 8014bf8:	fb05 8101 	mla	r1, r5, r1, r8
 8014bfc:	f006 fcde 	bl	801b5bc <memcpy>
 8014c00:	42b7      	cmp	r7, r6
 8014c02:	4603      	mov	r3, r0
 8014c04:	442b      	add	r3, r5
 8014c06:	d1e3      	bne.n	8014bd0 <forward_upsample+0x224>
 8014c08:	9b01      	ldr	r3, [sp, #4]
 8014c0a:	f10a 0a01 	add.w	sl, sl, #1
 8014c0e:	441c      	add	r4, r3
 8014c10:	9b02      	ldr	r3, [sp, #8]
 8014c12:	4553      	cmp	r3, sl
 8014c14:	d1c9      	bne.n	8014baa <forward_upsample+0x1fe>
 8014c16:	b007      	add	sp, #28
 8014c18:	ecbd 8b04 	vpop	{d8-d9}
 8014c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014c24:	9a02      	ldr	r2, [sp, #8]
 8014c26:	2100      	movs	r1, #0
 8014c28:	4620      	mov	r0, r4
 8014c2a:	fb07 f202 	mul.w	r2, r7, r2
 8014c2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014c32:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8014c36:	fb05 f202 	mul.w	r2, r5, r2
 8014c3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014c3e:	0092      	lsls	r2, r2, #2
 8014c40:	ee17 9a90 	vmov	r9, s15
 8014c44:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8014c48:	ee17 6a90 	vmov	r6, s15
 8014c4c:	f006 fcc4 	bl	801b5d8 <memset>
 8014c50:	9b04      	ldr	r3, [sp, #16]
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d086      	beq.n	8014b64 <forward_upsample+0x1b8>
 8014c56:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 8014c5a:	fb09 5905 	mla	r9, r9, r5, r5
 8014c5e:	9903      	ldr	r1, [sp, #12]
 8014c60:	fb05 f707 	mul.w	r7, r5, r7
 8014c64:	1c72      	adds	r2, r6, #1
 8014c66:	00ad      	lsls	r5, r5, #2
 8014c68:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8014c6c:	ee17 3a90 	vmov	r3, s15
 8014c70:	2900      	cmp	r1, #0
 8014c72:	f43f af77 	beq.w	8014b64 <forward_upsample+0x1b8>
 8014c76:	fb07 f303 	mul.w	r3, r7, r3
 8014c7a:	fb02 f707 	mul.w	r7, r2, r7
 8014c7e:	fb01 f205 	mul.w	r2, r1, r5
 8014c82:	009b      	lsls	r3, r3, #2
 8014c84:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8014c88:	9205      	str	r2, [sp, #20]
 8014c8a:	2200      	movs	r2, #0
 8014c8c:	9303      	str	r3, [sp, #12]
 8014c8e:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8014c92:	46d8      	mov	r8, fp
 8014c94:	46bb      	mov	fp, r7
 8014c96:	460f      	mov	r7, r1
 8014c98:	f8dd a004 	ldr.w	sl, [sp, #4]
 8014c9c:	2600      	movs	r6, #0
 8014c9e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8014ca2:	3601      	adds	r6, #1
 8014ca4:	4651      	mov	r1, sl
 8014ca6:	4620      	mov	r0, r4
 8014ca8:	689a      	ldr	r2, [r3, #8]
 8014caa:	44aa      	add	sl, r5
 8014cac:	f006 fc86 	bl	801b5bc <memcpy>
 8014cb0:	42b7      	cmp	r7, r6
 8014cb2:	444c      	add	r4, r9
 8014cb4:	d1f3      	bne.n	8014c9e <forward_upsample+0x2f2>
 8014cb6:	9a01      	ldr	r2, [sp, #4]
 8014cb8:	465c      	mov	r4, fp
 8014cba:	9905      	ldr	r1, [sp, #20]
 8014cbc:	9b02      	ldr	r3, [sp, #8]
 8014cbe:	440a      	add	r2, r1
 8014cc0:	3301      	adds	r3, #1
 8014cc2:	9201      	str	r2, [sp, #4]
 8014cc4:	9a03      	ldr	r2, [sp, #12]
 8014cc6:	9302      	str	r3, [sp, #8]
 8014cc8:	4493      	add	fp, r2
 8014cca:	9a04      	ldr	r2, [sp, #16]
 8014ccc:	429a      	cmp	r2, r3
 8014cce:	d1e3      	bne.n	8014c98 <forward_upsample+0x2ec>
 8014cd0:	b007      	add	sp, #28
 8014cd2:	ecbd 8b04 	vpop	{d8-d9}
 8014cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cda:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8014d0c <forward_upsample+0x360>
 8014cde:	e753      	b.n	8014b88 <forward_upsample+0x1dc>
 8014ce0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014ce4:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 8014ce8:	ee38 0ac7 	vsub.f32	s0, s17, s14
 8014cec:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8014cf0:	ee20 0a21 	vmul.f32	s0, s0, s3
 8014cf4:	ee67 1a21 	vmul.f32	s3, s14, s3
 8014cf8:	e698      	b.n	8014a2c <forward_upsample+0x80>
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	685b      	ldr	r3, [r3, #4]
 8014cfe:	deff      	udf	#255	; 0xff
 8014d00:	68d3      	ldr	r3, [r2, #12]
 8014d02:	deff      	udf	#255	; 0xff
 8014d04:	00000000 	.word	0x00000000
 8014d08:	08090fe0 	.word	0x08090fe0
 8014d0c:	38d1b717 	.word	0x38d1b717

08014d10 <forward_concat>:
 8014d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d14:	ed2d 8b06 	vpush	{d8-d10}
 8014d18:	6982      	ldr	r2, [r0, #24]
 8014d1a:	b087      	sub	sp, #28
 8014d1c:	8813      	ldrh	r3, [r2, #0]
 8014d1e:	9001      	str	r0, [sp, #4]
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	f000 8276 	beq.w	8015212 <forward_concat+0x502>
 8014d26:	2b01      	cmp	r3, #1
 8014d28:	6856      	ldr	r6, [r2, #4]
 8014d2a:	f000 8272 	beq.w	8015212 <forward_concat+0x502>
 8014d2e:	f8d6 9010 	ldr.w	r9, [r6, #16]
 8014d32:	f1b9 0f00 	cmp.w	r9, #0
 8014d36:	d001      	beq.n	8014d3c <forward_concat+0x2c>
 8014d38:	f8d9 9000 	ldr.w	r9, [r9]
 8014d3c:	8830      	ldrh	r0, [r6, #0]
 8014d3e:	2300      	movs	r3, #0
 8014d40:	4604      	mov	r4, r0
 8014d42:	4619      	mov	r1, r3
 8014d44:	e00c      	b.n	8014d60 <forward_concat+0x50>
 8014d46:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8014d4a:	b172      	cbz	r2, 8014d6a <forward_concat+0x5a>
 8014d4c:	6992      	ldr	r2, [r2, #24]
 8014d4e:	3301      	adds	r3, #1
 8014d50:	6812      	ldr	r2, [r2, #0]
 8014d52:	f3c2 4243 	ubfx	r2, r2, #17, #4
 8014d56:	2a01      	cmp	r2, #1
 8014d58:	bf0c      	ite	eq
 8014d5a:	2201      	moveq	r2, #1
 8014d5c:	2202      	movne	r2, #2
 8014d5e:	4311      	orrs	r1, r2
 8014d60:	4298      	cmp	r0, r3
 8014d62:	d002      	beq.n	8014d6a <forward_concat+0x5a>
 8014d64:	6872      	ldr	r2, [r6, #4]
 8014d66:	2a00      	cmp	r2, #0
 8014d68:	d1ed      	bne.n	8014d46 <forward_concat+0x36>
 8014d6a:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8014d6e:	6813      	ldr	r3, [r2, #0]
 8014d70:	6897      	ldr	r7, [r2, #8]
 8014d72:	f3c3 4243 	ubfx	r2, r3, #17, #4
 8014d76:	2a01      	cmp	r2, #1
 8014d78:	d135      	bne.n	8014de6 <forward_concat+0xd6>
 8014d7a:	2901      	cmp	r1, #1
 8014d7c:	d13a      	bne.n	8014df4 <forward_concat+0xe4>
 8014d7e:	f04f 0b00 	mov.w	fp, #0
 8014d82:	455c      	cmp	r4, fp
 8014d84:	d931      	bls.n	8014dea <forward_concat+0xda>
 8014d86:	6873      	ldr	r3, [r6, #4]
 8014d88:	b37b      	cbz	r3, 8014dea <forward_concat+0xda>
 8014d8a:	f853 402b 	ldr.w	r4, [r3, fp, lsl #2]
 8014d8e:	b364      	cbz	r4, 8014dea <forward_concat+0xda>
 8014d90:	69a3      	ldr	r3, [r4, #24]
 8014d92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014d96:	f006 facd 	bl	801b334 <ai_array_get_byte_size>
 8014d9a:	69a1      	ldr	r1, [r4, #24]
 8014d9c:	6965      	ldr	r5, [r4, #20]
 8014d9e:	68e2      	ldr	r2, [r4, #12]
 8014da0:	9b01      	ldr	r3, [sp, #4]
 8014da2:	688c      	ldr	r4, [r1, #8]
 8014da4:	69db      	ldr	r3, [r3, #28]
 8014da6:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8014daa:	eb04 0800 	add.w	r8, r4, r0
 8014dae:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 8014db2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8014db6:	4544      	cmp	r4, r8
 8014db8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014dbc:	fb02 fa05 	mul.w	sl, r2, r5
 8014dc0:	fb03 f505 	mul.w	r5, r3, r5
 8014dc4:	d20a      	bcs.n	8014ddc <forward_concat+0xcc>
 8014dc6:	463b      	mov	r3, r7
 8014dc8:	4621      	mov	r1, r4
 8014dca:	4454      	add	r4, sl
 8014dcc:	4618      	mov	r0, r3
 8014dce:	4652      	mov	r2, sl
 8014dd0:	f006 fbf4 	bl	801b5bc <memcpy>
 8014dd4:	45a0      	cmp	r8, r4
 8014dd6:	4603      	mov	r3, r0
 8014dd8:	442b      	add	r3, r5
 8014dda:	d8f5      	bhi.n	8014dc8 <forward_concat+0xb8>
 8014ddc:	4457      	add	r7, sl
 8014dde:	f10b 0b01 	add.w	fp, fp, #1
 8014de2:	8834      	ldrh	r4, [r6, #0]
 8014de4:	e7cd      	b.n	8014d82 <forward_concat+0x72>
 8014de6:	2901      	cmp	r1, #1
 8014de8:	d108      	bne.n	8014dfc <forward_concat+0xec>
 8014dea:	b007      	add	sp, #28
 8014dec:	ecbd 8b06 	vpop	{d8-d10}
 8014df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014df4:	2a01      	cmp	r2, #1
 8014df6:	d1f6      	bne.n	8014de6 <forward_concat+0xd6>
 8014df8:	078a      	lsls	r2, r1, #30
 8014dfa:	d4f6      	bmi.n	8014dea <forward_concat+0xda>
 8014dfc:	f8d9 1000 	ldr.w	r1, [r9]
 8014e00:	460c      	mov	r4, r1
 8014e02:	2900      	cmp	r1, #0
 8014e04:	f000 81f1 	beq.w	80151ea <forward_concat+0x4da>
 8014e08:	684a      	ldr	r2, [r1, #4]
 8014e0a:	2a00      	cmp	r2, #0
 8014e0c:	f000 81ed 	beq.w	80151ea <forward_concat+0x4da>
 8014e10:	8849      	ldrh	r1, [r1, #2]
 8014e12:	2900      	cmp	r1, #0
 8014e14:	f000 81e9 	beq.w	80151ea <forward_concat+0x4da>
 8014e18:	6812      	ldr	r2, [r2, #0]
 8014e1a:	edd2 8a00 	vldr	s17, [r2]
 8014e1e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014e22:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 8014e26:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8014e2a:	9602      	str	r6, [sp, #8]
 8014e2c:	9305      	str	r3, [sp, #20]
 8014e2e:	2300      	movs	r3, #0
 8014e30:	eec7 9aa8 	vdiv.f32	s19, s15, s17
 8014e34:	ed9f 8ab3 	vldr	s16, [pc, #716]	; 8015104 <forward_concat+0x3f4>
 8014e38:	ed9f 9ab3 	vldr	s18, [pc, #716]	; 8015108 <forward_concat+0x3f8>
 8014e3c:	4626      	mov	r6, r4
 8014e3e:	4698      	mov	r8, r3
 8014e40:	f8cd 9010 	str.w	r9, [sp, #16]
 8014e44:	4540      	cmp	r0, r8
 8014e46:	d9d0      	bls.n	8014dea <forward_concat+0xda>
 8014e48:	9b02      	ldr	r3, [sp, #8]
 8014e4a:	685b      	ldr	r3, [r3, #4]
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d0cc      	beq.n	8014dea <forward_concat+0xda>
 8014e50:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d0c8      	beq.n	8014dea <forward_concat+0xda>
 8014e58:	9a01      	ldr	r2, [sp, #4]
 8014e5a:	9303      	str	r3, [sp, #12]
 8014e5c:	69d0      	ldr	r0, [r2, #28]
 8014e5e:	e9d3 1205 	ldrd	r1, r2, [r3, #20]
 8014e62:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
 8014e66:	68d9      	ldr	r1, [r3, #12]
 8014e68:	9b04      	ldr	r3, [sp, #16]
 8014e6a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8014e6e:	6894      	ldr	r4, [r2, #8]
 8014e70:	fb01 fb05 	mul.w	fp, r1, r5
 8014e74:	68d9      	ldr	r1, [r3, #12]
 8014e76:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8014e7a:	fb01 f505 	mul.w	r5, r1, r5
 8014e7e:	e9d2 a100 	ldrd	sl, r1, [r2]
 8014e82:	4650      	mov	r0, sl
 8014e84:	f006 fa56 	bl	801b334 <ai_array_get_byte_size>
 8014e88:	f3ca 4243 	ubfx	r2, sl, #17, #4
 8014e8c:	9b03      	ldr	r3, [sp, #12]
 8014e8e:	eb04 0a00 	add.w	sl, r4, r0
 8014e92:	2a01      	cmp	r2, #1
 8014e94:	d05a      	beq.n	8014f4c <forward_concat+0x23c>
 8014e96:	681a      	ldr	r2, [r3, #0]
 8014e98:	2a00      	cmp	r2, #0
 8014e9a:	f000 80c9 	beq.w	8015030 <forward_concat+0x320>
 8014e9e:	6851      	ldr	r1, [r2, #4]
 8014ea0:	2900      	cmp	r1, #0
 8014ea2:	f000 8125 	beq.w	80150f0 <forward_concat+0x3e0>
 8014ea6:	8850      	ldrh	r0, [r2, #2]
 8014ea8:	2800      	cmp	r0, #0
 8014eaa:	f000 811e 	beq.w	80150ea <forward_concat+0x3da>
 8014eae:	680b      	ldr	r3, [r1, #0]
 8014eb0:	edd3 6a00 	vldr	s13, [r3]
 8014eb4:	684b      	ldr	r3, [r1, #4]
 8014eb6:	f993 0000 	ldrsb.w	r0, [r3]
 8014eba:	2e00      	cmp	r6, #0
 8014ebc:	f000 80be 	beq.w	801503c <forward_concat+0x32c>
 8014ec0:	6873      	ldr	r3, [r6, #4]
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	f000 8118 	beq.w	80150f8 <forward_concat+0x3e8>
 8014ec8:	8871      	ldrh	r1, [r6, #2]
 8014eca:	b111      	cbz	r1, 8014ed2 <forward_concat+0x1c2>
 8014ecc:	685b      	ldr	r3, [r3, #4]
 8014ece:	f993 1000 	ldrsb.w	r1, [r3]
 8014ed2:	eef4 8a66 	vcmp.f32	s17, s13
 8014ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014eda:	bf0c      	ite	eq
 8014edc:	2301      	moveq	r3, #1
 8014ede:	2300      	movne	r3, #0
 8014ee0:	4288      	cmp	r0, r1
 8014ee2:	d102      	bne.n	8014eea <forward_concat+0x1da>
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	f040 80ab 	bne.w	8015040 <forward_concat+0x330>
 8014eea:	9905      	ldr	r1, [sp, #20]
 8014eec:	2900      	cmp	r1, #0
 8014eee:	d176      	bne.n	8014fde <forward_concat+0x2ce>
 8014ef0:	b14a      	cbz	r2, 8014f06 <forward_concat+0x1f6>
 8014ef2:	6851      	ldr	r1, [r2, #4]
 8014ef4:	2900      	cmp	r1, #0
 8014ef6:	f000 8172 	beq.w	80151de <forward_concat+0x4ce>
 8014efa:	8852      	ldrh	r2, [r2, #2]
 8014efc:	2a00      	cmp	r2, #0
 8014efe:	f000 816e 	beq.w	80151de <forward_concat+0x4ce>
 8014f02:	684a      	ldr	r2, [r1, #4]
 8014f04:	7811      	ldrb	r1, [r2, #0]
 8014f06:	2e00      	cmp	r6, #0
 8014f08:	f000 816d 	beq.w	80151e6 <forward_concat+0x4d6>
 8014f0c:	6870      	ldr	r0, [r6, #4]
 8014f0e:	2800      	cmp	r0, #0
 8014f10:	f000 8170 	beq.w	80151f4 <forward_concat+0x4e4>
 8014f14:	8872      	ldrh	r2, [r6, #2]
 8014f16:	b10a      	cbz	r2, 8014f1c <forward_concat+0x20c>
 8014f18:	6842      	ldr	r2, [r0, #4]
 8014f1a:	7812      	ldrb	r2, [r2, #0]
 8014f1c:	4291      	cmp	r1, r2
 8014f1e:	f040 80f5 	bne.w	801510c <forward_concat+0x3fc>
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	f000 80f2 	beq.w	801510c <forward_concat+0x3fc>
 8014f28:	4554      	cmp	r4, sl
 8014f2a:	d209      	bcs.n	8014f40 <forward_concat+0x230>
 8014f2c:	46b9      	mov	r9, r7
 8014f2e:	4621      	mov	r1, r4
 8014f30:	445c      	add	r4, fp
 8014f32:	4648      	mov	r0, r9
 8014f34:	465a      	mov	r2, fp
 8014f36:	f006 fb41 	bl	801b5bc <memcpy>
 8014f3a:	45a2      	cmp	sl, r4
 8014f3c:	44a9      	add	r9, r5
 8014f3e:	d8f6      	bhi.n	8014f2e <forward_concat+0x21e>
 8014f40:	445f      	add	r7, fp
 8014f42:	9b02      	ldr	r3, [sp, #8]
 8014f44:	f108 0801 	add.w	r8, r8, #1
 8014f48:	8818      	ldrh	r0, [r3, #0]
 8014f4a:	e77b      	b.n	8014e44 <forward_concat+0x134>
 8014f4c:	f1bb 0f00 	cmp.w	fp, #0
 8014f50:	4659      	mov	r1, fp
 8014f52:	9b05      	ldr	r3, [sp, #20]
 8014f54:	bfb8      	it	lt
 8014f56:	f10b 0103 	addlt.w	r1, fp, #3
 8014f5a:	1089      	asrs	r1, r1, #2
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d17d      	bne.n	801505c <forward_concat+0x34c>
 8014f60:	2e00      	cmp	r6, #0
 8014f62:	f000 80cb 	beq.w	80150fc <forward_concat+0x3ec>
 8014f66:	6873      	ldr	r3, [r6, #4]
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	f000 80c7 	beq.w	80150fc <forward_concat+0x3ec>
 8014f6e:	8872      	ldrh	r2, [r6, #2]
 8014f70:	2a00      	cmp	r2, #0
 8014f72:	f000 80c3 	beq.w	80150fc <forward_concat+0x3ec>
 8014f76:	685b      	ldr	r3, [r3, #4]
 8014f78:	781b      	ldrb	r3, [r3, #0]
 8014f7a:	ee06 3a90 	vmov	s13, r3
 8014f7e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014f82:	ee76 6a8a 	vadd.f32	s13, s13, s20
 8014f86:	4554      	cmp	r4, sl
 8014f88:	d227      	bcs.n	8014fda <forward_concat+0x2ca>
 8014f8a:	f1bb 0f03 	cmp.w	fp, #3
 8014f8e:	eba5 0501 	sub.w	r5, r5, r1
 8014f92:	dd22      	ble.n	8014fda <forward_concat+0x2ca>
 8014f94:	46be      	mov	lr, r7
 8014f96:	46f4      	mov	ip, lr
 8014f98:	4620      	mov	r0, r4
 8014f9a:	2200      	movs	r2, #0
 8014f9c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014fa0:	eef0 7a66 	vmov.f32	s15, s13
 8014fa4:	ee07 3a10 	vmov	s14, r3
 8014fa8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014fac:	eee7 7a29 	vfma.f32	s15, s14, s19
 8014fb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014fb4:	ee17 3a90 	vmov	r3, s15
 8014fb8:	f383 0308 	usat	r3, #8, r3
 8014fbc:	3201      	adds	r2, #1
 8014fbe:	f80c 3b01 	strb.w	r3, [ip], #1
 8014fc2:	4291      	cmp	r1, r2
 8014fc4:	dcea      	bgt.n	8014f9c <forward_concat+0x28c>
 8014fc6:	f1bb 0f03 	cmp.w	fp, #3
 8014fca:	bfcc      	ite	gt
 8014fcc:	460b      	movgt	r3, r1
 8014fce:	2301      	movle	r3, #1
 8014fd0:	441c      	add	r4, r3
 8014fd2:	442b      	add	r3, r5
 8014fd4:	45a2      	cmp	sl, r4
 8014fd6:	449e      	add	lr, r3
 8014fd8:	d8dd      	bhi.n	8014f96 <forward_concat+0x286>
 8014fda:	440f      	add	r7, r1
 8014fdc:	e7b1      	b.n	8014f42 <forward_concat+0x232>
 8014fde:	b142      	cbz	r2, 8014ff2 <forward_concat+0x2e2>
 8014fe0:	6851      	ldr	r1, [r2, #4]
 8014fe2:	2900      	cmp	r1, #0
 8014fe4:	f000 8108 	beq.w	80151f8 <forward_concat+0x4e8>
 8014fe8:	8852      	ldrh	r2, [r2, #2]
 8014fea:	b112      	cbz	r2, 8014ff2 <forward_concat+0x2e2>
 8014fec:	684a      	ldr	r2, [r1, #4]
 8014fee:	f992 2000 	ldrsb.w	r2, [r2]
 8014ff2:	2e00      	cmp	r6, #0
 8014ff4:	f000 80fc 	beq.w	80151f0 <forward_concat+0x4e0>
 8014ff8:	6870      	ldr	r0, [r6, #4]
 8014ffa:	2800      	cmp	r0, #0
 8014ffc:	f000 80fe 	beq.w	80151fc <forward_concat+0x4ec>
 8015000:	8871      	ldrh	r1, [r6, #2]
 8015002:	b111      	cbz	r1, 801500a <forward_concat+0x2fa>
 8015004:	6841      	ldr	r1, [r0, #4]
 8015006:	f991 1000 	ldrsb.w	r1, [r1]
 801500a:	428a      	cmp	r2, r1
 801500c:	f040 80af 	bne.w	801516e <forward_concat+0x45e>
 8015010:	2b00      	cmp	r3, #0
 8015012:	f000 80ac 	beq.w	801516e <forward_concat+0x45e>
 8015016:	4554      	cmp	r4, sl
 8015018:	d292      	bcs.n	8014f40 <forward_concat+0x230>
 801501a:	46b9      	mov	r9, r7
 801501c:	4621      	mov	r1, r4
 801501e:	445c      	add	r4, fp
 8015020:	4648      	mov	r0, r9
 8015022:	465a      	mov	r2, fp
 8015024:	f006 faca 	bl	801b5bc <memcpy>
 8015028:	45a2      	cmp	sl, r4
 801502a:	44a9      	add	r9, r5
 801502c:	d8f6      	bhi.n	801501c <forward_concat+0x30c>
 801502e:	e787      	b.n	8014f40 <forward_concat+0x230>
 8015030:	eef0 6a49 	vmov.f32	s13, s18
 8015034:	4610      	mov	r0, r2
 8015036:	2e00      	cmp	r6, #0
 8015038:	f47f af42 	bne.w	8014ec0 <forward_concat+0x1b0>
 801503c:	4631      	mov	r1, r6
 801503e:	e748      	b.n	8014ed2 <forward_concat+0x1c2>
 8015040:	4554      	cmp	r4, sl
 8015042:	f4bf af7d 	bcs.w	8014f40 <forward_concat+0x230>
 8015046:	46b9      	mov	r9, r7
 8015048:	4621      	mov	r1, r4
 801504a:	445c      	add	r4, fp
 801504c:	4648      	mov	r0, r9
 801504e:	465a      	mov	r2, fp
 8015050:	f006 fab4 	bl	801b5bc <memcpy>
 8015054:	45a2      	cmp	sl, r4
 8015056:	44a9      	add	r9, r5
 8015058:	d8f6      	bhi.n	8015048 <forward_concat+0x338>
 801505a:	e771      	b.n	8014f40 <forward_concat+0x230>
 801505c:	2e00      	cmp	r6, #0
 801505e:	f000 80cf 	beq.w	8015200 <forward_concat+0x4f0>
 8015062:	6873      	ldr	r3, [r6, #4]
 8015064:	2b00      	cmp	r3, #0
 8015066:	f000 80d1 	beq.w	801520c <forward_concat+0x4fc>
 801506a:	8872      	ldrh	r2, [r6, #2]
 801506c:	2a00      	cmp	r2, #0
 801506e:	f000 80ca 	beq.w	8015206 <forward_concat+0x4f6>
 8015072:	685b      	ldr	r3, [r3, #4]
 8015074:	f993 3000 	ldrsb.w	r3, [r3]
 8015078:	ee06 3a90 	vmov	s13, r3
 801507c:	4554      	cmp	r4, sl
 801507e:	d2ac      	bcs.n	8014fda <forward_concat+0x2ca>
 8015080:	f1bb 0f03 	cmp.w	fp, #3
 8015084:	eba5 0501 	sub.w	r5, r5, r1
 8015088:	dda7      	ble.n	8014fda <forward_concat+0x2ca>
 801508a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801508e:	46be      	mov	lr, r7
 8015090:	46f4      	mov	ip, lr
 8015092:	4620      	mov	r0, r4
 8015094:	2200      	movs	r2, #0
 8015096:	f810 3b01 	ldrb.w	r3, [r0], #1
 801509a:	eef0 7a66 	vmov.f32	s15, s13
 801509e:	ee07 3a10 	vmov	s14, r3
 80150a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80150a6:	eee7 7a29 	vfma.f32	s15, s14, s19
 80150aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80150ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150b2:	bf4c      	ite	mi
 80150b4:	ee77 7ac8 	vsubmi.f32	s15, s15, s16
 80150b8:	ee77 7a8a 	vaddpl.f32	s15, s15, s20
 80150bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80150c0:	ee17 3a90 	vmov	r3, s15
 80150c4:	f303 0307 	ssat	r3, #8, r3
 80150c8:	3201      	adds	r2, #1
 80150ca:	f80c 3b01 	strb.w	r3, [ip], #1
 80150ce:	4291      	cmp	r1, r2
 80150d0:	dce1      	bgt.n	8015096 <forward_concat+0x386>
 80150d2:	f1bb 0f03 	cmp.w	fp, #3
 80150d6:	bfcc      	ite	gt
 80150d8:	460b      	movgt	r3, r1
 80150da:	2301      	movle	r3, #1
 80150dc:	441c      	add	r4, r3
 80150de:	442b      	add	r3, r5
 80150e0:	45a2      	cmp	sl, r4
 80150e2:	449e      	add	lr, r3
 80150e4:	d8d4      	bhi.n	8015090 <forward_concat+0x380>
 80150e6:	440f      	add	r7, r1
 80150e8:	e72b      	b.n	8014f42 <forward_concat+0x232>
 80150ea:	eef0 6a49 	vmov.f32	s13, s18
 80150ee:	e6e4      	b.n	8014eba <forward_concat+0x1aa>
 80150f0:	eef0 6a49 	vmov.f32	s13, s18
 80150f4:	4608      	mov	r0, r1
 80150f6:	e6e0      	b.n	8014eba <forward_concat+0x1aa>
 80150f8:	4619      	mov	r1, r3
 80150fa:	e6ea      	b.n	8014ed2 <forward_concat+0x1c2>
 80150fc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8015100:	e741      	b.n	8014f86 <forward_concat+0x276>
 8015102:	bf00      	nop
 8015104:	3efffffc 	.word	0x3efffffc
 8015108:	00000000 	.word	0x00000000
 801510c:	4554      	cmp	r4, sl
 801510e:	ee69 6aa6 	vmul.f32	s13, s19, s13
 8015112:	f4bf af15 	bcs.w	8014f40 <forward_concat+0x230>
 8015116:	f1bb 0f00 	cmp.w	fp, #0
 801511a:	f77f af11 	ble.w	8014f40 <forward_concat+0x230>
 801511e:	ee07 2a90 	vmov	s15, r2
 8015122:	eb04 000b 	add.w	r0, r4, fp
 8015126:	46bc      	mov	ip, r7
 8015128:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801512c:	4602      	mov	r2, r0
 801512e:	ee36 6a0a 	vadd.f32	s12, s12, s20
 8015132:	46e6      	mov	lr, ip
 8015134:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015138:	eeb0 7a46 	vmov.f32	s14, s12
 801513c:	1a5b      	subs	r3, r3, r1
 801513e:	ee07 3a90 	vmov	s15, r3
 8015142:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015146:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801514a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801514e:	ee17 3a90 	vmov	r3, s15
 8015152:	f383 0308 	usat	r3, #8, r3
 8015156:	4294      	cmp	r4, r2
 8015158:	f80e 3b01 	strb.w	r3, [lr], #1
 801515c:	d1ea      	bne.n	8015134 <forward_concat+0x424>
 801515e:	4550      	cmp	r0, sl
 8015160:	44ac      	add	ip, r5
 8015162:	445a      	add	r2, fp
 8015164:	4604      	mov	r4, r0
 8015166:	f4bf aeeb 	bcs.w	8014f40 <forward_concat+0x230>
 801516a:	4458      	add	r0, fp
 801516c:	e7e1      	b.n	8015132 <forward_concat+0x422>
 801516e:	4554      	cmp	r4, sl
 8015170:	ee69 6aa6 	vmul.f32	s13, s19, s13
 8015174:	f4bf aee4 	bcs.w	8014f40 <forward_concat+0x230>
 8015178:	f1bb 0f00 	cmp.w	fp, #0
 801517c:	f77f aee0 	ble.w	8014f40 <forward_concat+0x230>
 8015180:	ee07 1a90 	vmov	s15, r1
 8015184:	eb04 000b 	add.w	r0, r4, fp
 8015188:	46bc      	mov	ip, r7
 801518a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801518e:	4601      	mov	r1, r0
 8015190:	46e6      	mov	lr, ip
 8015192:	f914 3b01 	ldrsb.w	r3, [r4], #1
 8015196:	1a9b      	subs	r3, r3, r2
 8015198:	ee07 3a90 	vmov	s15, r3
 801519c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80151a0:	eef0 7a46 	vmov.f32	s15, s12
 80151a4:	eee7 7a26 	vfma.f32	s15, s14, s13
 80151a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80151ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151b0:	bf4c      	ite	mi
 80151b2:	ee77 7ac8 	vsubmi.f32	s15, s15, s16
 80151b6:	ee77 7a8a 	vaddpl.f32	s15, s15, s20
 80151ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80151be:	ee17 3a90 	vmov	r3, s15
 80151c2:	f303 0307 	ssat	r3, #8, r3
 80151c6:	428c      	cmp	r4, r1
 80151c8:	f80e 3b01 	strb.w	r3, [lr], #1
 80151cc:	d1e1      	bne.n	8015192 <forward_concat+0x482>
 80151ce:	4550      	cmp	r0, sl
 80151d0:	44ac      	add	ip, r5
 80151d2:	4459      	add	r1, fp
 80151d4:	4604      	mov	r4, r0
 80151d6:	f4bf aeb3 	bcs.w	8014f40 <forward_concat+0x230>
 80151da:	4458      	add	r0, fp
 80151dc:	e7d8      	b.n	8015190 <forward_concat+0x480>
 80151de:	9905      	ldr	r1, [sp, #20]
 80151e0:	2e00      	cmp	r6, #0
 80151e2:	f47f ae93 	bne.w	8014f0c <forward_concat+0x1fc>
 80151e6:	4632      	mov	r2, r6
 80151e8:	e698      	b.n	8014f1c <forward_concat+0x20c>
 80151ea:	ed5f 8a39 	vldr	s17, [pc, #-228]	; 8015108 <forward_concat+0x3f8>
 80151ee:	e616      	b.n	8014e1e <forward_concat+0x10e>
 80151f0:	4631      	mov	r1, r6
 80151f2:	e70a      	b.n	801500a <forward_concat+0x2fa>
 80151f4:	4602      	mov	r2, r0
 80151f6:	e691      	b.n	8014f1c <forward_concat+0x20c>
 80151f8:	460a      	mov	r2, r1
 80151fa:	e6fa      	b.n	8014ff2 <forward_concat+0x2e2>
 80151fc:	4601      	mov	r1, r0
 80151fe:	e704      	b.n	801500a <forward_concat+0x2fa>
 8015200:	ee06 6a90 	vmov	s13, r6
 8015204:	e73a      	b.n	801507c <forward_concat+0x36c>
 8015206:	ee06 2a90 	vmov	s13, r2
 801520a:	e737      	b.n	801507c <forward_concat+0x36c>
 801520c:	ee06 3a90 	vmov	s13, r3
 8015210:	e734      	b.n	801507c <forward_concat+0x36c>
 8015212:	2300      	movs	r3, #0
 8015214:	685b      	ldr	r3, [r3, #4]
 8015216:	deff      	udf	#255	; 0xff

08015218 <forward_eltwise_integer_INT8>:
 8015218:	6982      	ldr	r2, [r0, #24]
 801521a:	8813      	ldrh	r3, [r2, #0]
 801521c:	2b00      	cmp	r3, #0
 801521e:	d04e      	beq.n	80152be <forward_eltwise_integer_INT8+0xa6>
 8015220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015224:	ed2d 8b02 	vpush	{d8}
 8015228:	6852      	ldr	r2, [r2, #4]
 801522a:	b0ab      	sub	sp, #172	; 0xac
 801522c:	6854      	ldr	r4, [r2, #4]
 801522e:	2c00      	cmp	r4, #0
 8015230:	f000 81d4 	beq.w	80155dc <forward_eltwise_integer_INT8+0x3c4>
 8015234:	e9d4 5400 	ldrd	r5, r4, [r4]
 8015238:	2b01      	cmp	r3, #1
 801523a:	f000 81d3 	beq.w	80155e4 <forward_eltwise_integer_INT8+0x3cc>
 801523e:	6916      	ldr	r6, [r2, #16]
 8015240:	b106      	cbz	r6, 8015244 <forward_eltwise_integer_INT8+0x2c>
 8015242:	6836      	ldr	r6, [r6, #0]
 8015244:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8015248:	f105 0108 	add.w	r1, r5, #8
 801524c:	f104 0b08 	add.w	fp, r4, #8
 8015250:	e9d0 7307 	ldrd	r7, r3, [r0, #28]
 8015254:	68a0      	ldr	r0, [r4, #8]
 8015256:	930b      	str	r3, [sp, #44]	; 0x2c
 8015258:	ea8c 0300 	eor.w	r3, ip, r0
 801525c:	f3cc 2c17 	ubfx	ip, ip, #8, #24
 8015260:	f033 03ff 	bics.w	r3, r3, #255	; 0xff
 8015264:	d10e      	bne.n	8015284 <forward_eltwise_integer_INT8+0x6c>
 8015266:	4663      	mov	r3, ip
 8015268:	4686      	mov	lr, r0
 801526a:	2b00      	cmp	r3, #0
 801526c:	f000 81b2 	beq.w	80155d4 <forward_eltwise_integer_INT8+0x3bc>
 8015270:	3b01      	subs	r3, #1
 8015272:	68e2      	ldr	r2, [r4, #12]
 8015274:	68e8      	ldr	r0, [r5, #12]
 8015276:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801527a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801527e:	4290      	cmp	r0, r2
 8015280:	d0f3      	beq.n	801526a <forward_eltwise_integer_INT8+0x52>
 8015282:	4670      	mov	r0, lr
 8015284:	2300      	movs	r3, #0
 8015286:	9308      	str	r3, [sp, #32]
 8015288:	f10c 33ff 	add.w	r3, ip, #4294967295
 801528c:	009b      	lsls	r3, r3, #2
 801528e:	e005      	b.n	801529c <forward_eltwise_integer_INT8+0x84>
 8015290:	68ea      	ldr	r2, [r5, #12]
 8015292:	58d2      	ldr	r2, [r2, r3]
 8015294:	3b04      	subs	r3, #4
 8015296:	2a01      	cmp	r2, #1
 8015298:	f040 8199 	bne.w	80155ce <forward_eltwise_integer_INT8+0x3b6>
 801529c:	1d1a      	adds	r2, r3, #4
 801529e:	d1f7      	bne.n	8015290 <forward_eltwise_integer_INT8+0x78>
 80152a0:	f04f 0a01 	mov.w	sl, #1
 80152a4:	f3c0 2017 	ubfx	r0, r0, #8, #24
 80152a8:	b158      	cbz	r0, 80152c2 <forward_eltwise_integer_INT8+0xaa>
 80152aa:	3801      	subs	r0, #1
 80152ac:	68e3      	ldr	r3, [r4, #12]
 80152ae:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80152b2:	2b01      	cmp	r3, #1
 80152b4:	d0f8      	beq.n	80152a8 <forward_eltwise_integer_INT8+0x90>
 80152b6:	2300      	movs	r3, #0
 80152b8:	46d1      	mov	r9, sl
 80152ba:	9309      	str	r3, [sp, #36]	; 0x24
 80152bc:	e005      	b.n	80152ca <forward_eltwise_integer_INT8+0xb2>
 80152be:	685b      	ldr	r3, [r3, #4]
 80152c0:	deff      	udf	#255	; 0xff
 80152c2:	2301      	movs	r3, #1
 80152c4:	f08a 0901 	eor.w	r9, sl, #1
 80152c8:	9309      	str	r3, [sp, #36]	; 0x24
 80152ca:	6972      	ldr	r2, [r6, #20]
 80152cc:	2000      	movs	r0, #0
 80152ce:	696b      	ldr	r3, [r5, #20]
 80152d0:	f8d2 8004 	ldr.w	r8, [r2, #4]
 80152d4:	aa1b      	add	r2, sp, #108	; 0x6c
 80152d6:	685b      	ldr	r3, [r3, #4]
 80152d8:	9216      	str	r2, [sp, #88]	; 0x58
 80152da:	f240 5201 	movw	r2, #1281	; 0x501
 80152de:	901f      	str	r0, [sp, #124]	; 0x7c
 80152e0:	9215      	str	r2, [sp, #84]	; 0x54
 80152e2:	465a      	mov	r2, fp
 80152e4:	930d      	str	r3, [sp, #52]	; 0x34
 80152e6:	910c      	str	r1, [sp, #48]	; 0x30
 80152e8:	e9cd 001b 	strd	r0, r0, [sp, #108]	; 0x6c
 80152ec:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
 80152f0:	a815      	add	r0, sp, #84	; 0x54
 80152f2:	f006 f857 	bl	801b3a4 <core_get_broadcasted_shape>
 80152f6:	69ab      	ldr	r3, [r5, #24]
 80152f8:	f8d5 c000 	ldr.w	ip, [r5]
 80152fc:	930a      	str	r3, [sp, #40]	; 0x28
 80152fe:	6832      	ldr	r2, [r6, #0]
 8015300:	6820      	ldr	r0, [r4, #0]
 8015302:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
 8015306:	f1bc 0f00 	cmp.w	ip, #0
 801530a:	d018      	beq.n	801533e <forward_eltwise_integer_INT8+0x126>
 801530c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8015310:	b1ad      	cbz	r5, 801533e <forward_eltwise_integer_INT8+0x126>
 8015312:	f8bc e002 	ldrh.w	lr, [ip, #2]
 8015316:	f1be 0f00 	cmp.w	lr, #0
 801531a:	d010      	beq.n	801533e <forward_eltwise_integer_INT8+0x126>
 801531c:	682d      	ldr	r5, [r5, #0]
 801531e:	682d      	ldr	r5, [r5, #0]
 8015320:	950f      	str	r5, [sp, #60]	; 0x3c
 8015322:	b980      	cbnz	r0, 8015346 <forward_eltwise_integer_INT8+0x12e>
 8015324:	2500      	movs	r5, #0
 8015326:	9510      	str	r5, [sp, #64]	; 0x40
 8015328:	b1d2      	cbz	r2, 8015360 <forward_eltwise_integer_INT8+0x148>
 801532a:	6855      	ldr	r5, [r2, #4]
 801532c:	b1c5      	cbz	r5, 8015360 <forward_eltwise_integer_INT8+0x148>
 801532e:	f8b2 e002 	ldrh.w	lr, [r2, #2]
 8015332:	f1be 0f00 	cmp.w	lr, #0
 8015336:	d013      	beq.n	8015360 <forward_eltwise_integer_INT8+0x148>
 8015338:	682d      	ldr	r5, [r5, #0]
 801533a:	682d      	ldr	r5, [r5, #0]
 801533c:	e011      	b.n	8015362 <forward_eltwise_integer_INT8+0x14a>
 801533e:	2500      	movs	r5, #0
 8015340:	950f      	str	r5, [sp, #60]	; 0x3c
 8015342:	2800      	cmp	r0, #0
 8015344:	d0ee      	beq.n	8015324 <forward_eltwise_integer_INT8+0x10c>
 8015346:	6845      	ldr	r5, [r0, #4]
 8015348:	2d00      	cmp	r5, #0
 801534a:	d0eb      	beq.n	8015324 <forward_eltwise_integer_INT8+0x10c>
 801534c:	f8b0 e002 	ldrh.w	lr, [r0, #2]
 8015350:	f1be 0f00 	cmp.w	lr, #0
 8015354:	d0e6      	beq.n	8015324 <forward_eltwise_integer_INT8+0x10c>
 8015356:	682d      	ldr	r5, [r5, #0]
 8015358:	682d      	ldr	r5, [r5, #0]
 801535a:	9510      	str	r5, [sp, #64]	; 0x40
 801535c:	2a00      	cmp	r2, #0
 801535e:	d1e4      	bne.n	801532a <forward_eltwise_integer_INT8+0x112>
 8015360:	2500      	movs	r5, #0
 8015362:	69b6      	ldr	r6, [r6, #24]
 8015364:	9511      	str	r5, [sp, #68]	; 0x44
 8015366:	69a5      	ldr	r5, [r4, #24]
 8015368:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801536a:	68ad      	ldr	r5, [r5, #8]
 801536c:	68a4      	ldr	r4, [r4, #8]
 801536e:	68b6      	ldr	r6, [r6, #8]
 8015370:	f1bc 0f00 	cmp.w	ip, #0
 8015374:	d00e      	beq.n	8015394 <forward_eltwise_integer_INT8+0x17c>
 8015376:	f8dc e004 	ldr.w	lr, [ip, #4]
 801537a:	f1be 0f00 	cmp.w	lr, #0
 801537e:	f000 8100 	beq.w	8015582 <forward_eltwise_integer_INT8+0x36a>
 8015382:	f8bc c002 	ldrh.w	ip, [ip, #2]
 8015386:	f1bc 0f00 	cmp.w	ip, #0
 801538a:	d003      	beq.n	8015394 <forward_eltwise_integer_INT8+0x17c>
 801538c:	f8de c004 	ldr.w	ip, [lr, #4]
 8015390:	f99c c000 	ldrsb.w	ip, [ip]
 8015394:	f88d c039 	strb.w	ip, [sp, #57]	; 0x39
 8015398:	b158      	cbz	r0, 80153b2 <forward_eltwise_integer_INT8+0x19a>
 801539a:	f8d0 c004 	ldr.w	ip, [r0, #4]
 801539e:	f1bc 0f00 	cmp.w	ip, #0
 80153a2:	f000 80f2 	beq.w	801558a <forward_eltwise_integer_INT8+0x372>
 80153a6:	8840      	ldrh	r0, [r0, #2]
 80153a8:	b118      	cbz	r0, 80153b2 <forward_eltwise_integer_INT8+0x19a>
 80153aa:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80153ae:	f990 0000 	ldrsb.w	r0, [r0]
 80153b2:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
 80153b6:	b142      	cbz	r2, 80153ca <forward_eltwise_integer_INT8+0x1b2>
 80153b8:	6850      	ldr	r0, [r2, #4]
 80153ba:	2800      	cmp	r0, #0
 80153bc:	f000 80df 	beq.w	801557e <forward_eltwise_integer_INT8+0x366>
 80153c0:	8852      	ldrh	r2, [r2, #2]
 80153c2:	b112      	cbz	r2, 80153ca <forward_eltwise_integer_INT8+0x1b2>
 80153c4:	6842      	ldr	r2, [r0, #4]
 80153c6:	f992 2000 	ldrsb.w	r2, [r2]
 80153ca:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 80153ce:	9a08      	ldr	r2, [sp, #32]
 80153d0:	b912      	cbnz	r2, 80153d8 <forward_eltwise_integer_INT8+0x1c0>
 80153d2:	f1b9 0f00 	cmp.w	r9, #0
 80153d6:	d030      	beq.n	801543a <forward_eltwise_integer_INT8+0x222>
 80153d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153da:	4553      	cmp	r3, sl
 80153dc:	f000 80d3 	beq.w	8015586 <forward_eltwise_integer_INT8+0x36e>
 80153e0:	f1ba 0f00 	cmp.w	sl, #0
 80153e4:	bf14      	ite	ne
 80153e6:	2701      	movne	r7, #1
 80153e8:	2702      	moveq	r7, #2
 80153ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80153ec:	0a1b      	lsrs	r3, r3, #8
 80153ee:	f000 80f7 	beq.w	80155e0 <forward_eltwise_integer_INT8+0x3c8>
 80153f2:	9816      	ldr	r0, [sp, #88]	; 0x58
 80153f4:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 80153f8:	2301      	movs	r3, #1
 80153fa:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80153fe:	4290      	cmp	r0, r2
 8015400:	fb01 f303 	mul.w	r3, r1, r3
 8015404:	d1f9      	bne.n	80153fa <forward_eltwise_integer_INT8+0x1e2>
 8015406:	4621      	mov	r1, r4
 8015408:	f10d 043b 	add.w	r4, sp, #59	; 0x3b
 801540c:	462a      	mov	r2, r5
 801540e:	4630      	mov	r0, r6
 8015410:	9405      	str	r4, [sp, #20]
 8015412:	ac11      	add	r4, sp, #68	; 0x44
 8015414:	9706      	str	r7, [sp, #24]
 8015416:	9404      	str	r4, [sp, #16]
 8015418:	f10d 043a 	add.w	r4, sp, #58	; 0x3a
 801541c:	9403      	str	r4, [sp, #12]
 801541e:	ac10      	add	r4, sp, #64	; 0x40
 8015420:	9402      	str	r4, [sp, #8]
 8015422:	f10d 0439 	add.w	r4, sp, #57	; 0x39
 8015426:	9401      	str	r4, [sp, #4]
 8015428:	ac0f      	add	r4, sp, #60	; 0x3c
 801542a:	9400      	str	r4, [sp, #0]
 801542c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801542e:	47a0      	blx	r4
 8015430:	b02b      	add	sp, #172	; 0xac
 8015432:	ecbd 8b02 	vpop	{d8}
 8015436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801543a:	aa20      	add	r2, sp, #128	; 0x80
 801543c:	a817      	add	r0, sp, #92	; 0x5c
 801543e:	9308      	str	r3, [sp, #32]
 8015440:	9218      	str	r2, [sp, #96]	; 0x60
 8015442:	aa25      	add	r2, sp, #148	; 0x94
 8015444:	f8cd 9080 	str.w	r9, [sp, #128]	; 0x80
 8015448:	921a      	str	r2, [sp, #104]	; 0x68
 801544a:	f240 5202 	movw	r2, #1282	; 0x502
 801544e:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
 8015452:	9217      	str	r2, [sp, #92]	; 0x5c
 8015454:	9219      	str	r2, [sp, #100]	; 0x64
 8015456:	aa15      	add	r2, sp, #84	; 0x54
 8015458:	e9cd 9921 	strd	r9, r9, [sp, #132]	; 0x84
 801545c:	e9cd 9923 	strd	r9, r9, [sp, #140]	; 0x8c
 8015460:	e9cd 9926 	strd	r9, r9, [sp, #152]	; 0x98
 8015464:	e9cd 9928 	strd	r9, r9, [sp, #160]	; 0xa0
 8015468:	f005 ffc4 	bl	801b3f4 <core_compute_offsets_in_bytes>
 801546c:	9b08      	ldr	r3, [sp, #32]
 801546e:	aa15      	add	r2, sp, #84	; 0x54
 8015470:	4659      	mov	r1, fp
 8015472:	a819      	add	r0, sp, #100	; 0x64
 8015474:	f005 ffbe 	bl	801b3f4 <core_compute_offsets_in_bytes>
 8015478:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801547a:	68d3      	ldr	r3, [r2, #12]
 801547c:	2b00      	cmp	r3, #0
 801547e:	d0d7      	beq.n	8015430 <forward_eltwise_integer_INT8+0x218>
 8015480:	6891      	ldr	r1, [r2, #8]
 8015482:	eddf 8a5a 	vldr	s17, [pc, #360]	; 80155ec <forward_eltwise_integer_INT8+0x3d4>
 8015486:	468c      	mov	ip, r1
 8015488:	f8cd 9020 	str.w	r9, [sp, #32]
 801548c:	f1bc 0f00 	cmp.w	ip, #0
 8015490:	d0ce      	beq.n	8015430 <forward_eltwise_integer_INT8+0x218>
 8015492:	9815      	ldr	r0, [sp, #84]	; 0x54
 8015494:	f04f 0b00 	mov.w	fp, #0
 8015498:	f3c0 2017 	ubfx	r0, r0, #8, #24
 801549c:	f04f 0a00 	mov.w	sl, #0
 80154a0:	2804      	cmp	r0, #4
 80154a2:	bf8c      	ite	hi
 80154a4:	6911      	ldrhi	r1, [r2, #16]
 80154a6:	2101      	movls	r1, #1
 80154a8:	458a      	cmp	sl, r1
 80154aa:	d270      	bcs.n	801558e <forward_eltwise_integer_INT8+0x376>
 80154ac:	6851      	ldr	r1, [r2, #4]
 80154ae:	2900      	cmp	r1, #0
 80154b0:	d054      	beq.n	801555c <forward_eltwise_integer_INT8+0x344>
 80154b2:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80154b6:	f04f 0900 	mov.w	r9, #0
 80154ba:	f994 2000 	ldrsb.w	r2, [r4]
 80154be:	a814      	add	r0, sp, #80	; 0x50
 80154c0:	f99d 1039 	ldrsb.w	r1, [sp, #57]	; 0x39
 80154c4:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 80154c8:	1a53      	subs	r3, r2, r1
 80154ca:	f99d 103a 	ldrsb.w	r1, [sp, #58]	; 0x3a
 80154ce:	eddd 6a10 	vldr	s13, [sp, #64]	; 0x40
 80154d2:	ee07 3a10 	vmov	s14, r3
 80154d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80154da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80154de:	ed8d 7a12 	vstr	s14, [sp, #72]	; 0x48
 80154e2:	f995 2000 	ldrsb.w	r2, [r5]
 80154e6:	1a53      	subs	r3, r2, r1
 80154e8:	aa13      	add	r2, sp, #76	; 0x4c
 80154ea:	a912      	add	r1, sp, #72	; 0x48
 80154ec:	ee07 3a90 	vmov	s15, r3
 80154f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80154f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80154f8:	edcd 7a13 	vstr	s15, [sp, #76]	; 0x4c
 80154fc:	47b8      	blx	r7
 80154fe:	ed9d 6a14 	vldr	s12, [sp, #80]	; 0x50
 8015502:	eddd 6a11 	vldr	s13, [sp, #68]	; 0x44
 8015506:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 801550a:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801550e:	ee07 3a90 	vmov	s15, r3
 8015512:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015516:	ee77 7a27 	vadd.f32	s15, s14, s15
 801551a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801551e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015522:	fe38 7a28 	vselgt.f32	s14, s16, s17
 8015526:	ee77 7a87 	vadd.f32	s15, s15, s14
 801552a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801552e:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
 8015532:	ee17 2a10 	vmov	r2, s14
 8015536:	f302 0207 	ssat	r2, #8, r2
 801553a:	7032      	strb	r2, [r6, #0]
 801553c:	f109 0901 	add.w	r9, r9, #1
 8015540:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015542:	4446      	add	r6, r8
 8015544:	6852      	ldr	r2, [r2, #4]
 8015546:	4414      	add	r4, r2
 8015548:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801554a:	6852      	ldr	r2, [r2, #4]
 801554c:	4415      	add	r5, r2
 801554e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015550:	6851      	ldr	r1, [r2, #4]
 8015552:	4549      	cmp	r1, r9
 8015554:	d8b1      	bhi.n	80154ba <forward_eltwise_integer_INT8+0x2a2>
 8015556:	9815      	ldr	r0, [sp, #84]	; 0x54
 8015558:	f3c0 2017 	ubfx	r0, r0, #8, #24
 801555c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801555e:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 8015562:	d302      	bcc.n	801556a <forward_eltwise_integer_INT8+0x352>
 8015564:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015566:	6909      	ldr	r1, [r1, #16]
 8015568:	440c      	add	r4, r1
 801556a:	9919      	ldr	r1, [sp, #100]	; 0x64
 801556c:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 8015570:	d302      	bcc.n	8015578 <forward_eltwise_integer_INT8+0x360>
 8015572:	991a      	ldr	r1, [sp, #104]	; 0x68
 8015574:	6909      	ldr	r1, [r1, #16]
 8015576:	440d      	add	r5, r1
 8015578:	f10a 0a01 	add.w	sl, sl, #1
 801557c:	e790      	b.n	80154a0 <forward_eltwise_integer_INT8+0x288>
 801557e:	4602      	mov	r2, r0
 8015580:	e723      	b.n	80153ca <forward_eltwise_integer_INT8+0x1b2>
 8015582:	46f4      	mov	ip, lr
 8015584:	e706      	b.n	8015394 <forward_eltwise_integer_INT8+0x17c>
 8015586:	2700      	movs	r7, #0
 8015588:	e72f      	b.n	80153ea <forward_eltwise_integer_INT8+0x1d2>
 801558a:	4660      	mov	r0, ip
 801558c:	e711      	b.n	80153b2 <forward_eltwise_integer_INT8+0x19a>
 801558e:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8015592:	f10b 0b01 	add.w	fp, fp, #1
 8015596:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015598:	f8de 1008 	ldr.w	r1, [lr, #8]
 801559c:	f8d2 c008 	ldr.w	ip, [r2, #8]
 80155a0:	440c      	add	r4, r1
 80155a2:	6899      	ldr	r1, [r3, #8]
 80155a4:	45dc      	cmp	ip, fp
 80155a6:	440d      	add	r5, r1
 80155a8:	f63f af78 	bhi.w	801549c <forward_eltwise_integer_INT8+0x284>
 80155ac:	f8de 000c 	ldr.w	r0, [lr, #12]
 80155b0:	9908      	ldr	r1, [sp, #32]
 80155b2:	4404      	add	r4, r0
 80155b4:	68d0      	ldr	r0, [r2, #12]
 80155b6:	3101      	adds	r1, #1
 80155b8:	68db      	ldr	r3, [r3, #12]
 80155ba:	4288      	cmp	r0, r1
 80155bc:	441d      	add	r5, r3
 80155be:	9108      	str	r1, [sp, #32]
 80155c0:	f63f af64 	bhi.w	801548c <forward_eltwise_integer_INT8+0x274>
 80155c4:	b02b      	add	sp, #172	; 0xac
 80155c6:	ecbd 8b02 	vpop	{d8}
 80155ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155ce:	f04f 0a00 	mov.w	sl, #0
 80155d2:	e667      	b.n	80152a4 <forward_eltwise_integer_INT8+0x8c>
 80155d4:	2301      	movs	r3, #1
 80155d6:	4670      	mov	r0, lr
 80155d8:	9308      	str	r3, [sp, #32]
 80155da:	e655      	b.n	8015288 <forward_eltwise_integer_INT8+0x70>
 80155dc:	4625      	mov	r5, r4
 80155de:	e62b      	b.n	8015238 <forward_eltwise_integer_INT8+0x20>
 80155e0:	2301      	movs	r3, #1
 80155e2:	e710      	b.n	8015406 <forward_eltwise_integer_INT8+0x1ee>
 80155e4:	2300      	movs	r3, #0
 80155e6:	685b      	ldr	r3, [r3, #4]
 80155e8:	deff      	udf	#255	; 0xff
 80155ea:	bf00      	nop
 80155ec:	befffffc 	.word	0xbefffffc

080155f0 <func_dummy>:
 80155f0:	4770      	bx	lr
 80155f2:	bf00      	nop

080155f4 <forward_dw_3x3_sssa8_ch>:
 80155f4:	6983      	ldr	r3, [r0, #24]
 80155f6:	881a      	ldrh	r2, [r3, #0]
 80155f8:	2a00      	cmp	r2, #0
 80155fa:	f000 80d8 	beq.w	80157ae <forward_dw_3x3_sssa8_ch+0x1ba>
 80155fe:	6859      	ldr	r1, [r3, #4]
 8015600:	684b      	ldr	r3, [r1, #4]
 8015602:	b103      	cbz	r3, 8015606 <forward_dw_3x3_sssa8_ch+0x12>
 8015604:	681b      	ldr	r3, [r3, #0]
 8015606:	2a01      	cmp	r2, #1
 8015608:	f000 80f2 	beq.w	80157f0 <forward_dw_3x3_sssa8_ch+0x1fc>
 801560c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015610:	f8d1 8010 	ldr.w	r8, [r1, #16]
 8015614:	b097      	sub	sp, #92	; 0x5c
 8015616:	f1b8 0f00 	cmp.w	r8, #0
 801561a:	d001      	beq.n	8015620 <forward_dw_3x3_sssa8_ch+0x2c>
 801561c:	f8d8 8000 	ldr.w	r8, [r8]
 8015620:	2a02      	cmp	r2, #2
 8015622:	f000 80c1 	beq.w	80157a8 <forward_dw_3x3_sssa8_ch+0x1b4>
 8015626:	69cc      	ldr	r4, [r1, #28]
 8015628:	2c00      	cmp	r4, #0
 801562a:	f000 80d8 	beq.w	80157de <forward_dw_3x3_sssa8_ch+0x1ea>
 801562e:	8b0d      	ldrh	r5, [r1, #24]
 8015630:	f8d4 e000 	ldr.w	lr, [r4]
 8015634:	2d01      	cmp	r5, #1
 8015636:	f200 80bc 	bhi.w	80157b2 <forward_dw_3x3_sssa8_ch+0x1be>
 801563a:	2500      	movs	r5, #0
 801563c:	2a03      	cmp	r2, #3
 801563e:	f000 80da 	beq.w	80157f6 <forward_dw_3x3_sssa8_ch+0x202>
 8015642:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8015644:	2a00      	cmp	r2, #0
 8015646:	f000 80cf 	beq.w	80157e8 <forward_dw_3x3_sssa8_ch+0x1f4>
 801564a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 801564c:	6817      	ldr	r7, [r2, #0]
 801564e:	910e      	str	r1, [sp, #56]	; 0x38
 8015650:	2900      	cmp	r1, #0
 8015652:	f000 80bc 	beq.w	80157ce <forward_dw_3x3_sssa8_ch+0x1da>
 8015656:	6856      	ldr	r6, [r2, #4]
 8015658:	69a9      	ldr	r1, [r5, #24]
 801565a:	69ba      	ldr	r2, [r7, #24]
 801565c:	6889      	ldr	r1, [r1, #8]
 801565e:	8d07      	ldrh	r7, [r0, #40]	; 0x28
 8015660:	9115      	str	r1, [sp, #84]	; 0x54
 8015662:	9713      	str	r7, [sp, #76]	; 0x4c
 8015664:	68f1      	ldr	r1, [r6, #12]
 8015666:	8d87      	ldrh	r7, [r0, #44]	; 0x2c
 8015668:	68dd      	ldr	r5, [r3, #12]
 801566a:	9714      	str	r7, [sp, #80]	; 0x50
 801566c:	68cf      	ldr	r7, [r1, #12]
 801566e:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8015672:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 8015676:	6889      	ldr	r1, [r1, #8]
 8015678:	970f      	str	r7, [sp, #60]	; 0x3c
 801567a:	68ef      	ldr	r7, [r5, #12]
 801567c:	68ad      	ldr	r5, [r5, #8]
 801567e:	9110      	str	r1, [sp, #64]	; 0x40
 8015680:	fa1f f18c 	uxth.w	r1, ip
 8015684:	6892      	ldr	r2, [r2, #8]
 8015686:	9711      	str	r7, [sp, #68]	; 0x44
 8015688:	9512      	str	r5, [sp, #72]	; 0x48
 801568a:	2c00      	cmp	r4, #0
 801568c:	f000 8099 	beq.w	80157c2 <forward_dw_3x3_sssa8_ch+0x1ce>
 8015690:	68a4      	ldr	r4, [r4, #8]
 8015692:	2c00      	cmp	r4, #0
 8015694:	f000 8095 	beq.w	80157c2 <forward_dw_3x3_sssa8_ch+0x1ce>
 8015698:	69a7      	ldr	r7, [r4, #24]
 801569a:	2f00      	cmp	r7, #0
 801569c:	bf18      	it	ne
 801569e:	4627      	movne	r7, r4
 80156a0:	681c      	ldr	r4, [r3, #0]
 80156a2:	6835      	ldr	r5, [r6, #0]
 80156a4:	f8de 0000 	ldr.w	r0, [lr]
 80156a8:	2c00      	cmp	r4, #0
 80156aa:	f000 8087 	beq.w	80157bc <forward_dw_3x3_sssa8_ch+0x1c8>
 80156ae:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80156b2:	f1b9 0f00 	cmp.w	r9, #0
 80156b6:	f000 8081 	beq.w	80157bc <forward_dw_3x3_sssa8_ch+0x1c8>
 80156ba:	f8b4 a002 	ldrh.w	sl, [r4, #2]
 80156be:	f1ba 0f00 	cmp.w	sl, #0
 80156c2:	d07b      	beq.n	80157bc <forward_dw_3x3_sssa8_ch+0x1c8>
 80156c4:	f8d9 9000 	ldr.w	r9, [r9]
 80156c8:	ed99 0a00 	vldr	s0, [r9]
 80156cc:	2d00      	cmp	r5, #0
 80156ce:	d072      	beq.n	80157b6 <forward_dw_3x3_sssa8_ch+0x1c2>
 80156d0:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80156d4:	f1b9 0f00 	cmp.w	r9, #0
 80156d8:	d06d      	beq.n	80157b6 <forward_dw_3x3_sssa8_ch+0x1c2>
 80156da:	f8b5 a002 	ldrh.w	sl, [r5, #2]
 80156de:	f1ba 0f00 	cmp.w	sl, #0
 80156e2:	d068      	beq.n	80157b6 <forward_dw_3x3_sssa8_ch+0x1c2>
 80156e4:	f8d9 9000 	ldr.w	r9, [r9]
 80156e8:	edd9 0a00 	vldr	s1, [r9]
 80156ec:	f8d3 9018 	ldr.w	r9, [r3, #24]
 80156f0:	f8de 3018 	ldr.w	r3, [lr, #24]
 80156f4:	f8d9 9008 	ldr.w	r9, [r9, #8]
 80156f8:	689b      	ldr	r3, [r3, #8]
 80156fa:	930c      	str	r3, [sp, #48]	; 0x30
 80156fc:	69b3      	ldr	r3, [r6, #24]
 80156fe:	f8d3 a008 	ldr.w	sl, [r3, #8]
 8015702:	b110      	cbz	r0, 801570a <forward_dw_3x3_sssa8_ch+0x116>
 8015704:	6840      	ldr	r0, [r0, #4]
 8015706:	b100      	cbz	r0, 801570a <forward_dw_3x3_sssa8_ch+0x116>
 8015708:	6800      	ldr	r0, [r0, #0]
 801570a:	b13c      	cbz	r4, 801571c <forward_dw_3x3_sssa8_ch+0x128>
 801570c:	6863      	ldr	r3, [r4, #4]
 801570e:	2b00      	cmp	r3, #0
 8015710:	d061      	beq.n	80157d6 <forward_dw_3x3_sssa8_ch+0x1e2>
 8015712:	8864      	ldrh	r4, [r4, #2]
 8015714:	b114      	cbz	r4, 801571c <forward_dw_3x3_sssa8_ch+0x128>
 8015716:	685b      	ldr	r3, [r3, #4]
 8015718:	f993 4000 	ldrsb.w	r4, [r3]
 801571c:	b13d      	cbz	r5, 801572e <forward_dw_3x3_sssa8_ch+0x13a>
 801571e:	686b      	ldr	r3, [r5, #4]
 8015720:	2b00      	cmp	r3, #0
 8015722:	d05a      	beq.n	80157da <forward_dw_3x3_sssa8_ch+0x1e6>
 8015724:	886d      	ldrh	r5, [r5, #2]
 8015726:	b115      	cbz	r5, 801572e <forward_dw_3x3_sssa8_ch+0x13a>
 8015728:	685b      	ldr	r3, [r3, #4]
 801572a:	f993 5000 	ldrsb.w	r5, [r3]
 801572e:	fa1f fc8c 	uxth.w	ip, ip
 8015732:	231a      	movs	r3, #26
 8015734:	920d      	str	r2, [sp, #52]	; 0x34
 8015736:	fb03 230c 	mla	r3, r3, ip, r2
 801573a:	f002 fbb3 	bl	8017ea4 <align_factor_ch>
 801573e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015740:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015742:	4648      	mov	r0, r9
 8015744:	9303      	str	r3, [sp, #12]
 8015746:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015748:	9404      	str	r4, [sp, #16]
 801574a:	2400      	movs	r4, #0
 801574c:	9302      	str	r3, [sp, #8]
 801574e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015750:	920a      	str	r2, [sp, #40]	; 0x28
 8015752:	9301      	str	r3, [sp, #4]
 8015754:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015756:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 801575a:	9300      	str	r3, [sp, #0]
 801575c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8015760:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 8015764:	9308      	str	r3, [sp, #32]
 8015766:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801576a:	9409      	str	r4, [sp, #36]	; 0x24
 801576c:	9307      	str	r3, [sp, #28]
 801576e:	465b      	mov	r3, fp
 8015770:	e9cd 5a05 	strd	r5, sl, [sp, #20]
 8015774:	f001 fa1c 	bl	8016bb0 <forward_lite_dw_3x3_sssa8_ch>
 8015778:	68b3      	ldr	r3, [r6, #8]
 801577a:	0a1b      	lsrs	r3, r3, #8
 801577c:	d032      	beq.n	80157e4 <forward_dw_3x3_sssa8_ch+0x1f0>
 801577e:	68f0      	ldr	r0, [r6, #12]
 8015780:	2201      	movs	r2, #1
 8015782:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8015786:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801578a:	4298      	cmp	r0, r3
 801578c:	fb01 f202 	mul.w	r2, r1, r2
 8015790:	d1f9      	bne.n	8015786 <forward_dw_3x3_sssa8_ch+0x192>
 8015792:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8015796:	463b      	mov	r3, r7
 8015798:	4631      	mov	r1, r6
 801579a:	4640      	mov	r0, r8
 801579c:	ee17 ca90 	vmov	ip, s15
 80157a0:	b017      	add	sp, #92	; 0x5c
 80157a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157a6:	4760      	bx	ip
 80157a8:	2300      	movs	r3, #0
 80157aa:	685b      	ldr	r3, [r3, #4]
 80157ac:	deff      	udf	#255	; 0xff
 80157ae:	6853      	ldr	r3, [r2, #4]
 80157b0:	deff      	udf	#255	; 0xff
 80157b2:	6865      	ldr	r5, [r4, #4]
 80157b4:	e742      	b.n	801563c <forward_dw_3x3_sssa8_ch+0x48>
 80157b6:	eddf 0a12 	vldr	s1, [pc, #72]	; 8015800 <forward_dw_3x3_sssa8_ch+0x20c>
 80157ba:	e797      	b.n	80156ec <forward_dw_3x3_sssa8_ch+0xf8>
 80157bc:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8015800 <forward_dw_3x3_sssa8_ch+0x20c>
 80157c0:	e784      	b.n	80156cc <forward_dw_3x3_sssa8_ch+0xd8>
 80157c2:	6a07      	ldr	r7, [r0, #32]
 80157c4:	2f00      	cmp	r7, #0
 80157c6:	f43f af6b 	beq.w	80156a0 <forward_dw_3x3_sssa8_ch+0xac>
 80157ca:	68bf      	ldr	r7, [r7, #8]
 80157cc:	e768      	b.n	80156a0 <forward_dw_3x3_sssa8_ch+0xac>
 80157ce:	4a0d      	ldr	r2, [pc, #52]	; (8015804 <forward_dw_3x3_sssa8_ch+0x210>)
 80157d0:	4646      	mov	r6, r8
 80157d2:	920e      	str	r2, [sp, #56]	; 0x38
 80157d4:	e740      	b.n	8015658 <forward_dw_3x3_sssa8_ch+0x64>
 80157d6:	461c      	mov	r4, r3
 80157d8:	e7a0      	b.n	801571c <forward_dw_3x3_sssa8_ch+0x128>
 80157da:	461d      	mov	r5, r3
 80157dc:	e7a7      	b.n	801572e <forward_dw_3x3_sssa8_ch+0x13a>
 80157de:	46a6      	mov	lr, r4
 80157e0:	4625      	mov	r5, r4
 80157e2:	e72b      	b.n	801563c <forward_dw_3x3_sssa8_ch+0x48>
 80157e4:	2201      	movs	r2, #1
 80157e6:	e7d4      	b.n	8015792 <forward_dw_3x3_sssa8_ch+0x19e>
 80157e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80157ea:	b93b      	cbnz	r3, 80157fc <forward_dw_3x3_sssa8_ch+0x208>
 80157ec:	699b      	ldr	r3, [r3, #24]
 80157ee:	deff      	udf	#255	; 0xff
 80157f0:	2300      	movs	r3, #0
 80157f2:	685b      	ldr	r3, [r3, #4]
 80157f4:	deff      	udf	#255	; 0xff
 80157f6:	2300      	movs	r3, #0
 80157f8:	685b      	ldr	r3, [r3, #4]
 80157fa:	deff      	udf	#255	; 0xff
 80157fc:	68d3      	ldr	r3, [r2, #12]
 80157fe:	deff      	udf	#255	; 0xff
 8015800:	00000000 	.word	0x00000000
 8015804:	080155f1 	.word	0x080155f1

08015808 <func_dummy>:
 8015808:	4770      	bx	lr
 801580a:	bf00      	nop

0801580c <forward_pw_sssa8_ch>:
 801580c:	6983      	ldr	r3, [r0, #24]
 801580e:	8819      	ldrh	r1, [r3, #0]
 8015810:	2900      	cmp	r1, #0
 8015812:	f000 80fa 	beq.w	8015a0a <forward_pw_sssa8_ch+0x1fe>
 8015816:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801581a:	ed2d 8b02 	vpush	{d8}
 801581e:	685d      	ldr	r5, [r3, #4]
 8015820:	b095      	sub	sp, #84	; 0x54
 8015822:	686b      	ldr	r3, [r5, #4]
 8015824:	b103      	cbz	r3, 8015828 <forward_pw_sssa8_ch+0x1c>
 8015826:	681b      	ldr	r3, [r3, #0]
 8015828:	2901      	cmp	r1, #1
 801582a:	f000 8114 	beq.w	8015a56 <forward_pw_sssa8_ch+0x24a>
 801582e:	f8d5 b010 	ldr.w	fp, [r5, #16]
 8015832:	f1bb 0f00 	cmp.w	fp, #0
 8015836:	d001      	beq.n	801583c <forward_pw_sssa8_ch+0x30>
 8015838:	f8db b000 	ldr.w	fp, [fp]
 801583c:	2902      	cmp	r1, #2
 801583e:	f000 80e1 	beq.w	8015a04 <forward_pw_sssa8_ch+0x1f8>
 8015842:	69ec      	ldr	r4, [r5, #28]
 8015844:	2c00      	cmp	r4, #0
 8015846:	f000 80ff 	beq.w	8015a48 <forward_pw_sssa8_ch+0x23c>
 801584a:	8b2e      	ldrh	r6, [r5, #24]
 801584c:	6822      	ldr	r2, [r4, #0]
 801584e:	2e01      	cmp	r6, #1
 8015850:	f200 80dd 	bhi.w	8015a0e <forward_pw_sssa8_ch+0x202>
 8015854:	2600      	movs	r6, #0
 8015856:	2903      	cmp	r1, #3
 8015858:	f000 8100 	beq.w	8015a5c <forward_pw_sssa8_ch+0x250>
 801585c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 801585e:	2900      	cmp	r1, #0
 8015860:	f000 80f5 	beq.w	8015a4e <forward_pw_sssa8_ch+0x242>
 8015864:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015866:	680f      	ldr	r7, [r1, #0]
 8015868:	9511      	str	r5, [sp, #68]	; 0x44
 801586a:	970d      	str	r7, [sp, #52]	; 0x34
 801586c:	2d00      	cmp	r5, #0
 801586e:	f000 80e7 	beq.w	8015a40 <forward_pw_sssa8_ch+0x234>
 8015872:	684f      	ldr	r7, [r1, #4]
 8015874:	69b1      	ldr	r1, [r6, #24]
 8015876:	68fe      	ldr	r6, [r7, #12]
 8015878:	6889      	ldr	r1, [r1, #8]
 801587a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 801587e:	68f5      	ldr	r5, [r6, #12]
 8015880:	9113      	str	r1, [sp, #76]	; 0x4c
 8015882:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015884:	f8dc e004 	ldr.w	lr, [ip, #4]
 8015888:	6989      	ldr	r1, [r1, #24]
 801588a:	9510      	str	r5, [sp, #64]	; 0x40
 801588c:	68b5      	ldr	r5, [r6, #8]
 801588e:	f8d1 a008 	ldr.w	sl, [r1, #8]
 8015892:	9512      	str	r5, [sp, #72]	; 0x48
 8015894:	fa1f f58e 	uxth.w	r5, lr
 8015898:	6871      	ldr	r1, [r6, #4]
 801589a:	ee08 5a10 	vmov	s16, r5
 801589e:	b28d      	uxth	r5, r1
 80158a0:	950c      	str	r5, [sp, #48]	; 0x30
 80158a2:	f8dc 500c 	ldr.w	r5, [ip, #12]
 80158a6:	950a      	str	r5, [sp, #40]	; 0x28
 80158a8:	f8dc 5008 	ldr.w	r5, [ip, #8]
 80158ac:	950e      	str	r5, [sp, #56]	; 0x38
 80158ae:	2c00      	cmp	r4, #0
 80158b0:	f000 80b5 	beq.w	8015a1e <forward_pw_sssa8_ch+0x212>
 80158b4:	68a4      	ldr	r4, [r4, #8]
 80158b6:	2c00      	cmp	r4, #0
 80158b8:	f000 80b1 	beq.w	8015a1e <forward_pw_sssa8_ch+0x212>
 80158bc:	f8d4 8018 	ldr.w	r8, [r4, #24]
 80158c0:	f1b8 0f00 	cmp.w	r8, #0
 80158c4:	bf18      	it	ne
 80158c6:	46a0      	movne	r8, r4
 80158c8:	681d      	ldr	r5, [r3, #0]
 80158ca:	683e      	ldr	r6, [r7, #0]
 80158cc:	6810      	ldr	r0, [r2, #0]
 80158ce:	2d00      	cmp	r5, #0
 80158d0:	f000 80a2 	beq.w	8015a18 <forward_pw_sssa8_ch+0x20c>
 80158d4:	686c      	ldr	r4, [r5, #4]
 80158d6:	2c00      	cmp	r4, #0
 80158d8:	f000 809e 	beq.w	8015a18 <forward_pw_sssa8_ch+0x20c>
 80158dc:	f8b5 c002 	ldrh.w	ip, [r5, #2]
 80158e0:	f1bc 0f00 	cmp.w	ip, #0
 80158e4:	f000 8098 	beq.w	8015a18 <forward_pw_sssa8_ch+0x20c>
 80158e8:	6824      	ldr	r4, [r4, #0]
 80158ea:	ed94 0a00 	vldr	s0, [r4]
 80158ee:	2e00      	cmp	r6, #0
 80158f0:	f000 808f 	beq.w	8015a12 <forward_pw_sssa8_ch+0x206>
 80158f4:	6874      	ldr	r4, [r6, #4]
 80158f6:	2c00      	cmp	r4, #0
 80158f8:	f000 808b 	beq.w	8015a12 <forward_pw_sssa8_ch+0x206>
 80158fc:	f8b6 c002 	ldrh.w	ip, [r6, #2]
 8015900:	f1bc 0f00 	cmp.w	ip, #0
 8015904:	f000 8085 	beq.w	8015a12 <forward_pw_sssa8_ch+0x206>
 8015908:	6824      	ldr	r4, [r4, #0]
 801590a:	edd4 0a00 	vldr	s1, [r4]
 801590e:	699c      	ldr	r4, [r3, #24]
 8015910:	6993      	ldr	r3, [r2, #24]
 8015912:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8015916:	689b      	ldr	r3, [r3, #8]
 8015918:	930f      	str	r3, [sp, #60]	; 0x3c
 801591a:	69bb      	ldr	r3, [r7, #24]
 801591c:	689b      	ldr	r3, [r3, #8]
 801591e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015920:	b110      	cbz	r0, 8015928 <forward_pw_sssa8_ch+0x11c>
 8015922:	6840      	ldr	r0, [r0, #4]
 8015924:	b100      	cbz	r0, 8015928 <forward_pw_sssa8_ch+0x11c>
 8015926:	6800      	ldr	r0, [r0, #0]
 8015928:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801592a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801592c:	fb03 f202 	mul.w	r2, r3, r2
 8015930:	b28b      	uxth	r3, r1
 8015932:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015934:	fb03 1202 	mla	r2, r3, r2, r1
 8015938:	4591      	cmp	r9, r2
 801593a:	d279      	bcs.n	8015a30 <forward_pw_sssa8_ch+0x224>
 801593c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801593e:	fa1f fc8e 	uxth.w	ip, lr
 8015942:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015944:	fb02 f404 	mul.w	r4, r2, r4
 8015948:	fb0c 9404 	mla	r4, ip, r4, r9
 801594c:	42a1      	cmp	r1, r4
 801594e:	bf2c      	ite	cs
 8015950:	2400      	movcs	r4, #0
 8015952:	2401      	movcc	r4, #1
 8015954:	b13d      	cbz	r5, 8015966 <forward_pw_sssa8_ch+0x15a>
 8015956:	686a      	ldr	r2, [r5, #4]
 8015958:	2a00      	cmp	r2, #0
 801595a:	d06d      	beq.n	8015a38 <forward_pw_sssa8_ch+0x22c>
 801595c:	886d      	ldrh	r5, [r5, #2]
 801595e:	b115      	cbz	r5, 8015966 <forward_pw_sssa8_ch+0x15a>
 8015960:	6852      	ldr	r2, [r2, #4]
 8015962:	f992 5000 	ldrsb.w	r5, [r2]
 8015966:	b13e      	cbz	r6, 8015978 <forward_pw_sssa8_ch+0x16c>
 8015968:	6872      	ldr	r2, [r6, #4]
 801596a:	2a00      	cmp	r2, #0
 801596c:	d066      	beq.n	8015a3c <forward_pw_sssa8_ch+0x230>
 801596e:	8876      	ldrh	r6, [r6, #2]
 8015970:	b116      	cbz	r6, 8015978 <forward_pw_sssa8_ch+0x16c>
 8015972:	6852      	ldr	r2, [r2, #4]
 8015974:	f992 6000 	ldrsb.w	r6, [r2]
 8015978:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 801597c:	4652      	mov	r2, sl
 801597e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015980:	f002 fa90 	bl	8017ea4 <align_factor_ch>
 8015984:	2c00      	cmp	r4, #0
 8015986:	d155      	bne.n	8015a34 <forward_pw_sssa8_ch+0x228>
 8015988:	2301      	movs	r3, #1
 801598a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801598e:	930a      	str	r3, [sp, #40]	; 0x28
 8015990:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015992:	2401      	movs	r4, #1
 8015994:	9210      	str	r2, [sp, #64]	; 0x40
 8015996:	699b      	ldr	r3, [r3, #24]
 8015998:	e9d3 0100 	ldrd	r0, r1, [r3]
 801599c:	f005 fcca 	bl	801b334 <ai_array_get_byte_size>
 80159a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80159a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80159a4:	9306      	str	r3, [sp, #24]
 80159a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80159a8:	9008      	str	r0, [sp, #32]
 80159aa:	4648      	mov	r0, r9
 80159ac:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 80159b0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80159b4:	9503      	str	r5, [sp, #12]
 80159b6:	9407      	str	r4, [sp, #28]
 80159b8:	e9cd 6304 	strd	r6, r3, [sp, #16]
 80159bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80159be:	9302      	str	r3, [sp, #8]
 80159c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80159c2:	9301      	str	r3, [sp, #4]
 80159c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80159c6:	9300      	str	r3, [sp, #0]
 80159c8:	ee18 3a10 	vmov	r3, s16
 80159cc:	f000 fc44 	bl	8016258 <forward_lite_pw_sssa8_ch>
 80159d0:	68bb      	ldr	r3, [r7, #8]
 80159d2:	4622      	mov	r2, r4
 80159d4:	0a1b      	lsrs	r3, r3, #8
 80159d6:	d008      	beq.n	80159ea <forward_pw_sssa8_ch+0x1de>
 80159d8:	68f8      	ldr	r0, [r7, #12]
 80159da:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80159de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80159e2:	4298      	cmp	r0, r3
 80159e4:	fb01 f202 	mul.w	r2, r1, r2
 80159e8:	d1f9      	bne.n	80159de <forward_pw_sssa8_ch+0x1d2>
 80159ea:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 80159ee:	4643      	mov	r3, r8
 80159f0:	4639      	mov	r1, r7
 80159f2:	4658      	mov	r0, fp
 80159f4:	ee17 ca90 	vmov	ip, s15
 80159f8:	b015      	add	sp, #84	; 0x54
 80159fa:	ecbd 8b02 	vpop	{d8}
 80159fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a02:	4760      	bx	ip
 8015a04:	2300      	movs	r3, #0
 8015a06:	685b      	ldr	r3, [r3, #4]
 8015a08:	deff      	udf	#255	; 0xff
 8015a0a:	684b      	ldr	r3, [r1, #4]
 8015a0c:	deff      	udf	#255	; 0xff
 8015a0e:	6866      	ldr	r6, [r4, #4]
 8015a10:	e721      	b.n	8015856 <forward_pw_sssa8_ch+0x4a>
 8015a12:	eddf 0a15 	vldr	s1, [pc, #84]	; 8015a68 <forward_pw_sssa8_ch+0x25c>
 8015a16:	e77a      	b.n	801590e <forward_pw_sssa8_ch+0x102>
 8015a18:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8015a68 <forward_pw_sssa8_ch+0x25c>
 8015a1c:	e767      	b.n	80158ee <forward_pw_sssa8_ch+0xe2>
 8015a1e:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8015a22:	f1b8 0f00 	cmp.w	r8, #0
 8015a26:	f43f af4f 	beq.w	80158c8 <forward_pw_sssa8_ch+0xbc>
 8015a2a:	f8d8 8008 	ldr.w	r8, [r8, #8]
 8015a2e:	e74b      	b.n	80158c8 <forward_pw_sssa8_ch+0xbc>
 8015a30:	2400      	movs	r4, #0
 8015a32:	e78f      	b.n	8015954 <forward_pw_sssa8_ch+0x148>
 8015a34:	4622      	mov	r2, r4
 8015a36:	e7ab      	b.n	8015990 <forward_pw_sssa8_ch+0x184>
 8015a38:	4615      	mov	r5, r2
 8015a3a:	e794      	b.n	8015966 <forward_pw_sssa8_ch+0x15a>
 8015a3c:	4616      	mov	r6, r2
 8015a3e:	e79b      	b.n	8015978 <forward_pw_sssa8_ch+0x16c>
 8015a40:	490a      	ldr	r1, [pc, #40]	; (8015a6c <forward_pw_sssa8_ch+0x260>)
 8015a42:	465f      	mov	r7, fp
 8015a44:	9111      	str	r1, [sp, #68]	; 0x44
 8015a46:	e715      	b.n	8015874 <forward_pw_sssa8_ch+0x68>
 8015a48:	4622      	mov	r2, r4
 8015a4a:	4626      	mov	r6, r4
 8015a4c:	e703      	b.n	8015856 <forward_pw_sssa8_ch+0x4a>
 8015a4e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8015a50:	b93b      	cbnz	r3, 8015a62 <forward_pw_sssa8_ch+0x256>
 8015a52:	699b      	ldr	r3, [r3, #24]
 8015a54:	deff      	udf	#255	; 0xff
 8015a56:	2300      	movs	r3, #0
 8015a58:	685b      	ldr	r3, [r3, #4]
 8015a5a:	deff      	udf	#255	; 0xff
 8015a5c:	2300      	movs	r3, #0
 8015a5e:	685b      	ldr	r3, [r3, #4]
 8015a60:	deff      	udf	#255	; 0xff
 8015a62:	68cb      	ldr	r3, [r1, #12]
 8015a64:	deff      	udf	#255	; 0xff
 8015a66:	bf00      	nop
 8015a68:	00000000 	.word	0x00000000
 8015a6c:	08015809 	.word	0x08015809

08015a70 <func_dummy>:
 8015a70:	4770      	bx	lr
 8015a72:	bf00      	nop

08015a74 <forward_conv2d_deep_sssa8_ch>:
 8015a74:	6983      	ldr	r3, [r0, #24]
 8015a76:	8819      	ldrh	r1, [r3, #0]
 8015a78:	2900      	cmp	r1, #0
 8015a7a:	f000 811d 	beq.w	8015cb8 <forward_conv2d_deep_sssa8_ch+0x244>
 8015a7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a82:	ed2d 8b02 	vpush	{d8}
 8015a86:	685d      	ldr	r5, [r3, #4]
 8015a88:	b09f      	sub	sp, #124	; 0x7c
 8015a8a:	686b      	ldr	r3, [r5, #4]
 8015a8c:	b103      	cbz	r3, 8015a90 <forward_conv2d_deep_sssa8_ch+0x1c>
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	2901      	cmp	r1, #1
 8015a92:	f000 813d 	beq.w	8015d10 <forward_conv2d_deep_sssa8_ch+0x29c>
 8015a96:	f8d5 b010 	ldr.w	fp, [r5, #16]
 8015a9a:	f1bb 0f00 	cmp.w	fp, #0
 8015a9e:	d001      	beq.n	8015aa4 <forward_conv2d_deep_sssa8_ch+0x30>
 8015aa0:	f8db b000 	ldr.w	fp, [fp]
 8015aa4:	2902      	cmp	r1, #2
 8015aa6:	f000 8104 	beq.w	8015cb2 <forward_conv2d_deep_sssa8_ch+0x23e>
 8015aaa:	69ea      	ldr	r2, [r5, #28]
 8015aac:	2a00      	cmp	r2, #0
 8015aae:	f000 8126 	beq.w	8015cfe <forward_conv2d_deep_sssa8_ch+0x28a>
 8015ab2:	8b2e      	ldrh	r6, [r5, #24]
 8015ab4:	6814      	ldr	r4, [r2, #0]
 8015ab6:	2e01      	cmp	r6, #1
 8015ab8:	f200 8100 	bhi.w	8015cbc <forward_conv2d_deep_sssa8_ch+0x248>
 8015abc:	2600      	movs	r6, #0
 8015abe:	2903      	cmp	r1, #3
 8015ac0:	f000 8129 	beq.w	8015d16 <forward_conv2d_deep_sssa8_ch+0x2a2>
 8015ac4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8015ac6:	2900      	cmp	r1, #0
 8015ac8:	f000 811e 	beq.w	8015d08 <forward_conv2d_deep_sssa8_ch+0x294>
 8015acc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015ace:	680f      	ldr	r7, [r1, #0]
 8015ad0:	9519      	str	r5, [sp, #100]	; 0x64
 8015ad2:	9713      	str	r7, [sp, #76]	; 0x4c
 8015ad4:	2d00      	cmp	r5, #0
 8015ad6:	f000 810a 	beq.w	8015cee <forward_conv2d_deep_sssa8_ch+0x27a>
 8015ada:	684f      	ldr	r7, [r1, #4]
 8015adc:	68dd      	ldr	r5, [r3, #12]
 8015ade:	69b1      	ldr	r1, [r6, #24]
 8015ae0:	f8d5 e004 	ldr.w	lr, [r5, #4]
 8015ae4:	6889      	ldr	r1, [r1, #8]
 8015ae6:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 8015aea:	fa1f f68e 	uxth.w	r6, lr
 8015aee:	911d      	str	r1, [sp, #116]	; 0x74
 8015af0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015af2:	ee08 6a10 	vmov	s16, r6
 8015af6:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8015afa:	6989      	ldr	r1, [r1, #24]
 8015afc:	9610      	str	r6, [sp, #64]	; 0x40
 8015afe:	f8d1 9008 	ldr.w	r9, [r1, #8]
 8015b02:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8015b06:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8015b0a:	9612      	str	r6, [sp, #72]	; 0x48
 8015b0c:	b28e      	uxth	r6, r1
 8015b0e:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8015b12:	9611      	str	r6, [sp, #68]	; 0x44
 8015b14:	68ee      	ldr	r6, [r5, #12]
 8015b16:	68ad      	ldr	r5, [r5, #8]
 8015b18:	9617      	str	r6, [sp, #92]	; 0x5c
 8015b1a:	9514      	str	r5, [sp, #80]	; 0x50
 8015b1c:	8d05      	ldrh	r5, [r0, #40]	; 0x28
 8015b1e:	951a      	str	r5, [sp, #104]	; 0x68
 8015b20:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
 8015b22:	951b      	str	r5, [sp, #108]	; 0x6c
 8015b24:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8015b28:	9518      	str	r5, [sp, #96]	; 0x60
 8015b2a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8015b2e:	951c      	str	r5, [sp, #112]	; 0x70
 8015b30:	2a00      	cmp	r2, #0
 8015b32:	f000 80cd 	beq.w	8015cd0 <forward_conv2d_deep_sssa8_ch+0x25c>
 8015b36:	6892      	ldr	r2, [r2, #8]
 8015b38:	2a00      	cmp	r2, #0
 8015b3a:	f000 80c9 	beq.w	8015cd0 <forward_conv2d_deep_sssa8_ch+0x25c>
 8015b3e:	f8d2 8018 	ldr.w	r8, [r2, #24]
 8015b42:	f1b8 0f00 	cmp.w	r8, #0
 8015b46:	bf18      	it	ne
 8015b48:	4690      	movne	r8, r2
 8015b4a:	681a      	ldr	r2, [r3, #0]
 8015b4c:	683d      	ldr	r5, [r7, #0]
 8015b4e:	6820      	ldr	r0, [r4, #0]
 8015b50:	2a00      	cmp	r2, #0
 8015b52:	f000 80b8 	beq.w	8015cc6 <forward_conv2d_deep_sssa8_ch+0x252>
 8015b56:	6856      	ldr	r6, [r2, #4]
 8015b58:	2e00      	cmp	r6, #0
 8015b5a:	f000 80b4 	beq.w	8015cc6 <forward_conv2d_deep_sssa8_ch+0x252>
 8015b5e:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 8015b62:	f1bc 0f00 	cmp.w	ip, #0
 8015b66:	f000 80ae 	beq.w	8015cc6 <forward_conv2d_deep_sssa8_ch+0x252>
 8015b6a:	6836      	ldr	r6, [r6, #0]
 8015b6c:	ed96 0a00 	vldr	s0, [r6]
 8015b70:	2d00      	cmp	r5, #0
 8015b72:	f000 80a5 	beq.w	8015cc0 <forward_conv2d_deep_sssa8_ch+0x24c>
 8015b76:	686e      	ldr	r6, [r5, #4]
 8015b78:	2e00      	cmp	r6, #0
 8015b7a:	f000 80a1 	beq.w	8015cc0 <forward_conv2d_deep_sssa8_ch+0x24c>
 8015b7e:	f8b5 c002 	ldrh.w	ip, [r5, #2]
 8015b82:	f1bc 0f00 	cmp.w	ip, #0
 8015b86:	f000 809b 	beq.w	8015cc0 <forward_conv2d_deep_sssa8_ch+0x24c>
 8015b8a:	6836      	ldr	r6, [r6, #0]
 8015b8c:	edd6 0a00 	vldr	s1, [r6]
 8015b90:	699e      	ldr	r6, [r3, #24]
 8015b92:	69a3      	ldr	r3, [r4, #24]
 8015b94:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8015b98:	689b      	ldr	r3, [r3, #8]
 8015b9a:	9316      	str	r3, [sp, #88]	; 0x58
 8015b9c:	69bb      	ldr	r3, [r7, #24]
 8015b9e:	689c      	ldr	r4, [r3, #8]
 8015ba0:	b110      	cbz	r0, 8015ba8 <forward_conv2d_deep_sssa8_ch+0x134>
 8015ba2:	6840      	ldr	r0, [r0, #4]
 8015ba4:	b100      	cbz	r0, 8015ba8 <forward_conv2d_deep_sssa8_ch+0x134>
 8015ba6:	6800      	ldr	r0, [r0, #0]
 8015ba8:	b28b      	uxth	r3, r1
 8015baa:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8015bac:	9910      	ldr	r1, [sp, #64]	; 0x40
 8015bae:	fb06 f101 	mul.w	r1, r6, r1
 8015bb2:	fb03 4101 	mla	r1, r3, r1, r4
 8015bb6:	458a      	cmp	sl, r1
 8015bb8:	f080 8093 	bcs.w	8015ce2 <forward_conv2d_deep_sssa8_ch+0x26e>
 8015bbc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8015bbe:	fa1f fc8e 	uxth.w	ip, lr
 8015bc2:	9914      	ldr	r1, [sp, #80]	; 0x50
 8015bc4:	fb01 f606 	mul.w	r6, r1, r6
 8015bc8:	fb0c a606 	mla	r6, ip, r6, sl
 8015bcc:	42b4      	cmp	r4, r6
 8015bce:	bf2c      	ite	cs
 8015bd0:	2600      	movcs	r6, #0
 8015bd2:	2601      	movcc	r6, #1
 8015bd4:	2a00      	cmp	r2, #0
 8015bd6:	d079      	beq.n	8015ccc <forward_conv2d_deep_sssa8_ch+0x258>
 8015bd8:	6851      	ldr	r1, [r2, #4]
 8015bda:	2900      	cmp	r1, #0
 8015bdc:	f000 808b 	beq.w	8015cf6 <forward_conv2d_deep_sssa8_ch+0x282>
 8015be0:	8852      	ldrh	r2, [r2, #2]
 8015be2:	2a00      	cmp	r2, #0
 8015be4:	d072      	beq.n	8015ccc <forward_conv2d_deep_sssa8_ch+0x258>
 8015be6:	684a      	ldr	r2, [r1, #4]
 8015be8:	f992 2000 	ldrsb.w	r2, [r2]
 8015bec:	9215      	str	r2, [sp, #84]	; 0x54
 8015bee:	b145      	cbz	r5, 8015c02 <forward_conv2d_deep_sssa8_ch+0x18e>
 8015bf0:	686a      	ldr	r2, [r5, #4]
 8015bf2:	2a00      	cmp	r2, #0
 8015bf4:	f000 8081 	beq.w	8015cfa <forward_conv2d_deep_sssa8_ch+0x286>
 8015bf8:	886d      	ldrh	r5, [r5, #2]
 8015bfa:	b115      	cbz	r5, 8015c02 <forward_conv2d_deep_sssa8_ch+0x18e>
 8015bfc:	6852      	ldr	r2, [r2, #4]
 8015bfe:	f992 5000 	ldrsb.w	r5, [r2]
 8015c02:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
 8015c06:	464a      	mov	r2, r9
 8015c08:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015c0a:	f002 f94b 	bl	8017ea4 <align_factor_ch>
 8015c0e:	2e00      	cmp	r6, #0
 8015c10:	d169      	bne.n	8015ce6 <forward_conv2d_deep_sssa8_ch+0x272>
 8015c12:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8015c16:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8015c1a:	9318      	str	r3, [sp, #96]	; 0x60
 8015c1c:	2301      	movs	r3, #1
 8015c1e:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 8015c22:	9310      	str	r3, [sp, #64]	; 0x40
 8015c24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015c26:	9217      	str	r2, [sp, #92]	; 0x5c
 8015c28:	699b      	ldr	r3, [r3, #24]
 8015c2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015c2e:	f005 fb81 	bl	801b334 <ai_array_get_byte_size>
 8015c32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015c34:	900e      	str	r0, [sp, #56]	; 0x38
 8015c36:	4650      	mov	r0, sl
 8015c38:	930c      	str	r3, [sp, #48]	; 0x30
 8015c3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015c3c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015c3e:	9307      	str	r3, [sp, #28]
 8015c40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015c42:	f8bd 1050 	ldrh.w	r1, [sp, #80]	; 0x50
 8015c46:	9306      	str	r3, [sp, #24]
 8015c48:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015c4a:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8015c4e:	9305      	str	r3, [sp, #20]
 8015c50:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015c52:	960b      	str	r6, [sp, #44]	; 0x2c
 8015c54:	9304      	str	r3, [sp, #16]
 8015c56:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015c58:	9303      	str	r3, [sp, #12]
 8015c5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015c5c:	9301      	str	r3, [sp, #4]
 8015c5e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015c60:	9300      	str	r3, [sp, #0]
 8015c62:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015c66:	930a      	str	r3, [sp, #40]	; 0x28
 8015c68:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8015c6c:	e9cd 5408 	strd	r5, r4, [sp, #32]
 8015c70:	2401      	movs	r4, #1
 8015c72:	9302      	str	r3, [sp, #8]
 8015c74:	ee18 3a10 	vmov	r3, s16
 8015c78:	940d      	str	r4, [sp, #52]	; 0x34
 8015c7a:	f000 fc8f 	bl	801659c <forward_lite_conv2d_deep_sssa8_ch>
 8015c7e:	68bb      	ldr	r3, [r7, #8]
 8015c80:	0a1b      	lsrs	r3, r3, #8
 8015c82:	d03f      	beq.n	8015d04 <forward_conv2d_deep_sssa8_ch+0x290>
 8015c84:	68f8      	ldr	r0, [r7, #12]
 8015c86:	4622      	mov	r2, r4
 8015c88:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8015c8c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015c90:	4298      	cmp	r0, r3
 8015c92:	fb01 f202 	mul.w	r2, r1, r2
 8015c96:	d1f9      	bne.n	8015c8c <forward_conv2d_deep_sssa8_ch+0x218>
 8015c98:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
 8015c9c:	4643      	mov	r3, r8
 8015c9e:	4639      	mov	r1, r7
 8015ca0:	4658      	mov	r0, fp
 8015ca2:	ee17 ca90 	vmov	ip, s15
 8015ca6:	b01f      	add	sp, #124	; 0x7c
 8015ca8:	ecbd 8b02 	vpop	{d8}
 8015cac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cb0:	4760      	bx	ip
 8015cb2:	2300      	movs	r3, #0
 8015cb4:	685b      	ldr	r3, [r3, #4]
 8015cb6:	deff      	udf	#255	; 0xff
 8015cb8:	684b      	ldr	r3, [r1, #4]
 8015cba:	deff      	udf	#255	; 0xff
 8015cbc:	6856      	ldr	r6, [r2, #4]
 8015cbe:	e6fe      	b.n	8015abe <forward_conv2d_deep_sssa8_ch+0x4a>
 8015cc0:	eddf 0a17 	vldr	s1, [pc, #92]	; 8015d20 <forward_conv2d_deep_sssa8_ch+0x2ac>
 8015cc4:	e764      	b.n	8015b90 <forward_conv2d_deep_sssa8_ch+0x11c>
 8015cc6:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8015d20 <forward_conv2d_deep_sssa8_ch+0x2ac>
 8015cca:	e751      	b.n	8015b70 <forward_conv2d_deep_sssa8_ch+0xfc>
 8015ccc:	9215      	str	r2, [sp, #84]	; 0x54
 8015cce:	e78e      	b.n	8015bee <forward_conv2d_deep_sssa8_ch+0x17a>
 8015cd0:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8015cd4:	f1b8 0f00 	cmp.w	r8, #0
 8015cd8:	f43f af37 	beq.w	8015b4a <forward_conv2d_deep_sssa8_ch+0xd6>
 8015cdc:	f8d8 8008 	ldr.w	r8, [r8, #8]
 8015ce0:	e733      	b.n	8015b4a <forward_conv2d_deep_sssa8_ch+0xd6>
 8015ce2:	2600      	movs	r6, #0
 8015ce4:	e776      	b.n	8015bd4 <forward_conv2d_deep_sssa8_ch+0x160>
 8015ce6:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
 8015cea:	9218      	str	r2, [sp, #96]	; 0x60
 8015cec:	e79a      	b.n	8015c24 <forward_conv2d_deep_sssa8_ch+0x1b0>
 8015cee:	490d      	ldr	r1, [pc, #52]	; (8015d24 <forward_conv2d_deep_sssa8_ch+0x2b0>)
 8015cf0:	465f      	mov	r7, fp
 8015cf2:	9119      	str	r1, [sp, #100]	; 0x64
 8015cf4:	e6f2      	b.n	8015adc <forward_conv2d_deep_sssa8_ch+0x68>
 8015cf6:	9115      	str	r1, [sp, #84]	; 0x54
 8015cf8:	e779      	b.n	8015bee <forward_conv2d_deep_sssa8_ch+0x17a>
 8015cfa:	4615      	mov	r5, r2
 8015cfc:	e781      	b.n	8015c02 <forward_conv2d_deep_sssa8_ch+0x18e>
 8015cfe:	4614      	mov	r4, r2
 8015d00:	4616      	mov	r6, r2
 8015d02:	e6dc      	b.n	8015abe <forward_conv2d_deep_sssa8_ch+0x4a>
 8015d04:	2201      	movs	r2, #1
 8015d06:	e7c7      	b.n	8015c98 <forward_conv2d_deep_sssa8_ch+0x224>
 8015d08:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8015d0a:	b93b      	cbnz	r3, 8015d1c <forward_conv2d_deep_sssa8_ch+0x2a8>
 8015d0c:	699b      	ldr	r3, [r3, #24]
 8015d0e:	deff      	udf	#255	; 0xff
 8015d10:	2300      	movs	r3, #0
 8015d12:	685b      	ldr	r3, [r3, #4]
 8015d14:	deff      	udf	#255	; 0xff
 8015d16:	2300      	movs	r3, #0
 8015d18:	685b      	ldr	r3, [r3, #4]
 8015d1a:	deff      	udf	#255	; 0xff
 8015d1c:	68cb      	ldr	r3, [r1, #12]
 8015d1e:	deff      	udf	#255	; 0xff
 8015d20:	00000000 	.word	0x00000000
 8015d24:	08015a71 	.word	0x08015a71

08015d28 <ai_check_custom_types>:
 8015d28:	b082      	sub	sp, #8
 8015d2a:	4b12      	ldr	r3, [pc, #72]	; (8015d74 <ai_check_custom_types+0x4c>)
 8015d2c:	9301      	str	r3, [sp, #4]
 8015d2e:	b118      	cbz	r0, 8015d38 <ai_check_custom_types+0x10>
 8015d30:	7803      	ldrb	r3, [r0, #0]
 8015d32:	2b03      	cmp	r3, #3
 8015d34:	d002      	beq.n	8015d3c <ai_check_custom_types+0x14>
 8015d36:	2000      	movs	r0, #0
 8015d38:	b002      	add	sp, #8
 8015d3a:	4770      	bx	lr
 8015d3c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8015d40:	4293      	cmp	r3, r2
 8015d42:	d004      	beq.n	8015d4e <ai_check_custom_types+0x26>
 8015d44:	2001      	movs	r0, #1
 8015d46:	f080 0001 	eor.w	r0, r0, #1
 8015d4a:	b002      	add	sp, #8
 8015d4c:	4770      	bx	lr
 8015d4e:	7842      	ldrb	r2, [r0, #1]
 8015d50:	3001      	adds	r0, #1
 8015d52:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8015d56:	429a      	cmp	r2, r3
 8015d58:	d1f4      	bne.n	8015d44 <ai_check_custom_types+0x1c>
 8015d5a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8015d5e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8015d62:	429a      	cmp	r2, r3
 8015d64:	d1ee      	bne.n	8015d44 <ai_check_custom_types+0x1c>
 8015d66:	7842      	ldrb	r2, [r0, #1]
 8015d68:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015d6c:	429a      	cmp	r2, r3
 8015d6e:	d1e9      	bne.n	8015d44 <ai_check_custom_types+0x1c>
 8015d70:	2000      	movs	r0, #0
 8015d72:	e7e8      	b.n	8015d46 <ai_check_custom_types+0x1e>
 8015d74:	84048403 	.word	0x84048403

08015d78 <ai_layers_init_all>:
 8015d78:	2100      	movs	r1, #0
 8015d7a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8015d7c:	b13b      	cbz	r3, 8015d8e <ai_layers_init_all+0x16>
 8015d7e:	691a      	ldr	r2, [r3, #16]
 8015d80:	3101      	adds	r1, #1
 8015d82:	60d8      	str	r0, [r3, #12]
 8015d84:	429a      	cmp	r2, r3
 8015d86:	4613      	mov	r3, r2
 8015d88:	d001      	beq.n	8015d8e <ai_layers_init_all+0x16>
 8015d8a:	2a00      	cmp	r2, #0
 8015d8c:	d1f6      	bne.n	8015d7c <ai_layers_init_all+0x4>
 8015d8e:	4608      	mov	r0, r1
 8015d90:	4770      	bx	lr
 8015d92:	bf00      	nop

08015d94 <ai_layers_post_init_all>:
 8015d94:	b538      	push	{r3, r4, r5, lr}
 8015d96:	2500      	movs	r5, #0
 8015d98:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8015d9a:	b16c      	cbz	r4, 8015db8 <ai_layers_post_init_all+0x24>
 8015d9c:	6863      	ldr	r3, [r4, #4]
 8015d9e:	07db      	lsls	r3, r3, #31
 8015da0:	d504      	bpl.n	8015dac <ai_layers_post_init_all+0x18>
 8015da2:	6a23      	ldr	r3, [r4, #32]
 8015da4:	4620      	mov	r0, r4
 8015da6:	b10b      	cbz	r3, 8015dac <ai_layers_post_init_all+0x18>
 8015da8:	3501      	adds	r5, #1
 8015daa:	4798      	blx	r3
 8015dac:	6923      	ldr	r3, [r4, #16]
 8015dae:	42a3      	cmp	r3, r4
 8015db0:	461c      	mov	r4, r3
 8015db2:	d001      	beq.n	8015db8 <ai_layers_post_init_all+0x24>
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d1f0      	bne.n	8015d9a <ai_layers_post_init_all+0x6>
 8015db8:	4628      	mov	r0, r5
 8015dba:	bd38      	pop	{r3, r4, r5, pc}

08015dbc <ai_layers_forward_all>:
 8015dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015dc0:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8015dc4:	4604      	mov	r4, r0
 8015dc6:	f1b8 0f00 	cmp.w	r8, #0
 8015dca:	d02a      	beq.n	8015e22 <ai_layers_forward_all+0x66>
 8015dcc:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8015dce:	6381      	str	r1, [r0, #56]	; 0x38
 8015dd0:	b319      	cbz	r1, 8015e1a <ai_layers_forward_all+0x5e>
 8015dd2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8015dd4:	2001      	movs	r0, #1
 8015dd6:	47c0      	blx	r8
 8015dd8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8015dda:	b1f6      	cbz	r6, 8015e1a <ai_layers_forward_all+0x5e>
 8015ddc:	2700      	movs	r7, #0
 8015dde:	4631      	mov	r1, r6
 8015de0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8015de2:	2002      	movs	r0, #2
 8015de4:	47c0      	blx	r8
 8015de6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8015de8:	4628      	mov	r0, r5
 8015dea:	696b      	ldr	r3, [r5, #20]
 8015dec:	4798      	blx	r3
 8015dee:	692e      	ldr	r6, [r5, #16]
 8015df0:	2003      	movs	r0, #3
 8015df2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8015df4:	42b5      	cmp	r5, r6
 8015df6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015df8:	d007      	beq.n	8015e0a <ai_layers_forward_all+0x4e>
 8015dfa:	47c0      	blx	r8
 8015dfc:	3701      	adds	r7, #1
 8015dfe:	63a6      	str	r6, [r4, #56]	; 0x38
 8015e00:	2e00      	cmp	r6, #0
 8015e02:	d1ec      	bne.n	8015dde <ai_layers_forward_all+0x22>
 8015e04:	4638      	mov	r0, r7
 8015e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e0a:	2003      	movs	r0, #3
 8015e0c:	3701      	adds	r7, #1
 8015e0e:	47c0      	blx	r8
 8015e10:	2300      	movs	r3, #0
 8015e12:	4638      	mov	r0, r7
 8015e14:	63a3      	str	r3, [r4, #56]	; 0x38
 8015e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e1a:	2700      	movs	r7, #0
 8015e1c:	4638      	mov	r0, r7
 8015e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e22:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8015e24:	6385      	str	r5, [r0, #56]	; 0x38
 8015e26:	2d00      	cmp	r5, #0
 8015e28:	d0f7      	beq.n	8015e1a <ai_layers_forward_all+0x5e>
 8015e2a:	4647      	mov	r7, r8
 8015e2c:	696b      	ldr	r3, [r5, #20]
 8015e2e:	4628      	mov	r0, r5
 8015e30:	4798      	blx	r3
 8015e32:	462b      	mov	r3, r5
 8015e34:	692d      	ldr	r5, [r5, #16]
 8015e36:	429d      	cmp	r5, r3
 8015e38:	d004      	beq.n	8015e44 <ai_layers_forward_all+0x88>
 8015e3a:	3701      	adds	r7, #1
 8015e3c:	63a5      	str	r5, [r4, #56]	; 0x38
 8015e3e:	2d00      	cmp	r5, #0
 8015e40:	d1f4      	bne.n	8015e2c <ai_layers_forward_all+0x70>
 8015e42:	e7df      	b.n	8015e04 <ai_layers_forward_all+0x48>
 8015e44:	2300      	movs	r3, #0
 8015e46:	3701      	adds	r7, #1
 8015e48:	63a3      	str	r3, [r4, #56]	; 0x38
 8015e4a:	e7db      	b.n	8015e04 <ai_layers_forward_all+0x48>

08015e4c <func_dummy>:
 8015e4c:	4770      	bx	lr
 8015e4e:	bf00      	nop

08015e50 <forward_conv2d_rgb_sssa8_ch>:
 8015e50:	6982      	ldr	r2, [r0, #24]
 8015e52:	8813      	ldrh	r3, [r2, #0]
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	f000 80df 	beq.w	8016018 <forward_conv2d_rgb_sssa8_ch+0x1c8>
 8015e5a:	6852      	ldr	r2, [r2, #4]
 8015e5c:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8015e60:	f1bc 0f00 	cmp.w	ip, #0
 8015e64:	d001      	beq.n	8015e6a <forward_conv2d_rgb_sssa8_ch+0x1a>
 8015e66:	f8dc c000 	ldr.w	ip, [ip]
 8015e6a:	2b01      	cmp	r3, #1
 8015e6c:	f000 80f5 	beq.w	801605a <forward_conv2d_rgb_sssa8_ch+0x20a>
 8015e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e74:	f8d2 8010 	ldr.w	r8, [r2, #16]
 8015e78:	b095      	sub	sp, #84	; 0x54
 8015e7a:	f1b8 0f00 	cmp.w	r8, #0
 8015e7e:	d001      	beq.n	8015e84 <forward_conv2d_rgb_sssa8_ch+0x34>
 8015e80:	f8d8 8000 	ldr.w	r8, [r8]
 8015e84:	2b02      	cmp	r3, #2
 8015e86:	f000 80c4 	beq.w	8016012 <forward_conv2d_rgb_sssa8_ch+0x1c2>
 8015e8a:	69d4      	ldr	r4, [r2, #28]
 8015e8c:	2c00      	cmp	r4, #0
 8015e8e:	f000 80db 	beq.w	8016048 <forward_conv2d_rgb_sssa8_ch+0x1f8>
 8015e92:	8b11      	ldrh	r1, [r2, #24]
 8015e94:	f8d4 e000 	ldr.w	lr, [r4]
 8015e98:	2901      	cmp	r1, #1
 8015e9a:	f200 80bf 	bhi.w	801601c <forward_conv2d_rgb_sssa8_ch+0x1cc>
 8015e9e:	2100      	movs	r1, #0
 8015ea0:	2b03      	cmp	r3, #3
 8015ea2:	f000 80dd 	beq.w	8016060 <forward_conv2d_rgb_sssa8_ch+0x210>
 8015ea6:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	f000 80d2 	beq.w	8016052 <forward_conv2d_rgb_sssa8_ch+0x202>
 8015eae:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
 8015eb2:	681d      	ldr	r5, [r3, #0]
 8015eb4:	f1bb 0f00 	cmp.w	fp, #0
 8015eb8:	f000 80be 	beq.w	8016038 <forward_conv2d_rgb_sssa8_ch+0x1e8>
 8015ebc:	685e      	ldr	r6, [r3, #4]
 8015ebe:	698a      	ldr	r2, [r1, #24]
 8015ec0:	69ab      	ldr	r3, [r5, #24]
 8015ec2:	6892      	ldr	r2, [r2, #8]
 8015ec4:	68f1      	ldr	r1, [r6, #12]
 8015ec6:	9213      	str	r2, [sp, #76]	; 0x4c
 8015ec8:	689a      	ldr	r2, [r3, #8]
 8015eca:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8015ece:	684d      	ldr	r5, [r1, #4]
 8015ed0:	689b      	ldr	r3, [r3, #8]
 8015ed2:	950c      	str	r5, [sp, #48]	; 0x30
 8015ed4:	930f      	str	r3, [sp, #60]	; 0x3c
 8015ed6:	688b      	ldr	r3, [r1, #8]
 8015ed8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8015eda:	930e      	str	r3, [sp, #56]	; 0x38
 8015edc:	888b      	ldrh	r3, [r1, #4]
 8015ede:	f8de 100c 	ldr.w	r1, [lr, #12]
 8015ee2:	9311      	str	r3, [sp, #68]	; 0x44
 8015ee4:	684b      	ldr	r3, [r1, #4]
 8015ee6:	b2a9      	uxth	r1, r5
 8015ee8:	9312      	str	r3, [sp, #72]	; 0x48
 8015eea:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8015eec:	9310      	str	r3, [sp, #64]	; 0x40
 8015eee:	2c00      	cmp	r4, #0
 8015ef0:	f000 809c 	beq.w	801602c <forward_conv2d_rgb_sssa8_ch+0x1dc>
 8015ef4:	68a4      	ldr	r4, [r4, #8]
 8015ef6:	2c00      	cmp	r4, #0
 8015ef8:	f000 8098 	beq.w	801602c <forward_conv2d_rgb_sssa8_ch+0x1dc>
 8015efc:	69a7      	ldr	r7, [r4, #24]
 8015efe:	2f00      	cmp	r7, #0
 8015f00:	bf18      	it	ne
 8015f02:	4627      	movne	r7, r4
 8015f04:	f8dc 4000 	ldr.w	r4, [ip]
 8015f08:	6835      	ldr	r5, [r6, #0]
 8015f0a:	f8de 0000 	ldr.w	r0, [lr]
 8015f0e:	2c00      	cmp	r4, #0
 8015f10:	f000 8089 	beq.w	8016026 <forward_conv2d_rgb_sssa8_ch+0x1d6>
 8015f14:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8015f18:	f1b9 0f00 	cmp.w	r9, #0
 8015f1c:	f000 8083 	beq.w	8016026 <forward_conv2d_rgb_sssa8_ch+0x1d6>
 8015f20:	f8b4 a002 	ldrh.w	sl, [r4, #2]
 8015f24:	f1ba 0f00 	cmp.w	sl, #0
 8015f28:	d07d      	beq.n	8016026 <forward_conv2d_rgb_sssa8_ch+0x1d6>
 8015f2a:	f8d9 9000 	ldr.w	r9, [r9]
 8015f2e:	ed99 0a00 	vldr	s0, [r9]
 8015f32:	2d00      	cmp	r5, #0
 8015f34:	d074      	beq.n	8016020 <forward_conv2d_rgb_sssa8_ch+0x1d0>
 8015f36:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8015f3a:	f1b9 0f00 	cmp.w	r9, #0
 8015f3e:	d06f      	beq.n	8016020 <forward_conv2d_rgb_sssa8_ch+0x1d0>
 8015f40:	f8b5 a002 	ldrh.w	sl, [r5, #2]
 8015f44:	f1ba 0f00 	cmp.w	sl, #0
 8015f48:	d06a      	beq.n	8016020 <forward_conv2d_rgb_sssa8_ch+0x1d0>
 8015f4a:	f8d9 9000 	ldr.w	r9, [r9]
 8015f4e:	edd9 0a00 	vldr	s1, [r9]
 8015f52:	69b3      	ldr	r3, [r6, #24]
 8015f54:	f8dc 9018 	ldr.w	r9, [ip, #24]
 8015f58:	689b      	ldr	r3, [r3, #8]
 8015f5a:	f8de c018 	ldr.w	ip, [lr, #24]
 8015f5e:	f8d9 9008 	ldr.w	r9, [r9, #8]
 8015f62:	f8dc a008 	ldr.w	sl, [ip, #8]
 8015f66:	930b      	str	r3, [sp, #44]	; 0x2c
 8015f68:	b110      	cbz	r0, 8015f70 <forward_conv2d_rgb_sssa8_ch+0x120>
 8015f6a:	6840      	ldr	r0, [r0, #4]
 8015f6c:	b100      	cbz	r0, 8015f70 <forward_conv2d_rgb_sssa8_ch+0x120>
 8015f6e:	6800      	ldr	r0, [r0, #0]
 8015f70:	b154      	cbz	r4, 8015f88 <forward_conv2d_rgb_sssa8_ch+0x138>
 8015f72:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8015f76:	f1bc 0f00 	cmp.w	ip, #0
 8015f7a:	d061      	beq.n	8016040 <forward_conv2d_rgb_sssa8_ch+0x1f0>
 8015f7c:	8864      	ldrh	r4, [r4, #2]
 8015f7e:	b11c      	cbz	r4, 8015f88 <forward_conv2d_rgb_sssa8_ch+0x138>
 8015f80:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8015f84:	f994 4000 	ldrsb.w	r4, [r4]
 8015f88:	b155      	cbz	r5, 8015fa0 <forward_conv2d_rgb_sssa8_ch+0x150>
 8015f8a:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8015f8e:	f1bc 0f00 	cmp.w	ip, #0
 8015f92:	d057      	beq.n	8016044 <forward_conv2d_rgb_sssa8_ch+0x1f4>
 8015f94:	886d      	ldrh	r5, [r5, #2]
 8015f96:	b11d      	cbz	r5, 8015fa0 <forward_conv2d_rgb_sssa8_ch+0x150>
 8015f98:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8015f9c:	f995 5000 	ldrsb.w	r5, [r5]
 8015fa0:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8015fa4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015fa8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015fac:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 8015fb0:	f001 ff78 	bl	8017ea4 <align_factor_ch>
 8015fb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015fb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015fb8:	4648      	mov	r0, r9
 8015fba:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015fbc:	9208      	str	r2, [sp, #32]
 8015fbe:	4652      	mov	r2, sl
 8015fc0:	9404      	str	r4, [sp, #16]
 8015fc2:	e9cd 5305 	strd	r5, r3, [sp, #20]
 8015fc6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015fc8:	9303      	str	r3, [sp, #12]
 8015fca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015fcc:	9302      	str	r3, [sp, #8]
 8015fce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015fd0:	9301      	str	r3, [sp, #4]
 8015fd2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8015fd6:	9307      	str	r3, [sp, #28]
 8015fd8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015fdc:	9300      	str	r3, [sp, #0]
 8015fde:	460b      	mov	r3, r1
 8015fe0:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8015fe4:	f000 fba0 	bl	8016728 <forward_lite_conv2d_rgb_sssa8_ch>
 8015fe8:	68b3      	ldr	r3, [r6, #8]
 8015fea:	0a1b      	lsrs	r3, r3, #8
 8015fec:	d02f      	beq.n	801604e <forward_conv2d_rgb_sssa8_ch+0x1fe>
 8015fee:	68f0      	ldr	r0, [r6, #12]
 8015ff0:	2201      	movs	r2, #1
 8015ff2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8015ff6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015ffa:	4298      	cmp	r0, r3
 8015ffc:	fb01 f202 	mul.w	r2, r1, r2
 8016000:	d1f9      	bne.n	8015ff6 <forward_conv2d_rgb_sssa8_ch+0x1a6>
 8016002:	463b      	mov	r3, r7
 8016004:	4631      	mov	r1, r6
 8016006:	4640      	mov	r0, r8
 8016008:	46dc      	mov	ip, fp
 801600a:	b015      	add	sp, #84	; 0x54
 801600c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016010:	4760      	bx	ip
 8016012:	2300      	movs	r3, #0
 8016014:	685b      	ldr	r3, [r3, #4]
 8016016:	deff      	udf	#255	; 0xff
 8016018:	685b      	ldr	r3, [r3, #4]
 801601a:	deff      	udf	#255	; 0xff
 801601c:	6861      	ldr	r1, [r4, #4]
 801601e:	e73f      	b.n	8015ea0 <forward_conv2d_rgb_sssa8_ch+0x50>
 8016020:	eddf 0a12 	vldr	s1, [pc, #72]	; 801606c <forward_conv2d_rgb_sssa8_ch+0x21c>
 8016024:	e795      	b.n	8015f52 <forward_conv2d_rgb_sssa8_ch+0x102>
 8016026:	ed9f 0a11 	vldr	s0, [pc, #68]	; 801606c <forward_conv2d_rgb_sssa8_ch+0x21c>
 801602a:	e782      	b.n	8015f32 <forward_conv2d_rgb_sssa8_ch+0xe2>
 801602c:	6a07      	ldr	r7, [r0, #32]
 801602e:	2f00      	cmp	r7, #0
 8016030:	f43f af68 	beq.w	8015f04 <forward_conv2d_rgb_sssa8_ch+0xb4>
 8016034:	68bf      	ldr	r7, [r7, #8]
 8016036:	e765      	b.n	8015f04 <forward_conv2d_rgb_sssa8_ch+0xb4>
 8016038:	4646      	mov	r6, r8
 801603a:	f8df b034 	ldr.w	fp, [pc, #52]	; 8016070 <forward_conv2d_rgb_sssa8_ch+0x220>
 801603e:	e73e      	b.n	8015ebe <forward_conv2d_rgb_sssa8_ch+0x6e>
 8016040:	4664      	mov	r4, ip
 8016042:	e7a1      	b.n	8015f88 <forward_conv2d_rgb_sssa8_ch+0x138>
 8016044:	4665      	mov	r5, ip
 8016046:	e7ab      	b.n	8015fa0 <forward_conv2d_rgb_sssa8_ch+0x150>
 8016048:	46a6      	mov	lr, r4
 801604a:	4621      	mov	r1, r4
 801604c:	e728      	b.n	8015ea0 <forward_conv2d_rgb_sssa8_ch+0x50>
 801604e:	2201      	movs	r2, #1
 8016050:	e7d7      	b.n	8016002 <forward_conv2d_rgb_sssa8_ch+0x1b2>
 8016052:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8016054:	b93a      	cbnz	r2, 8016066 <forward_conv2d_rgb_sssa8_ch+0x216>
 8016056:	6993      	ldr	r3, [r2, #24]
 8016058:	deff      	udf	#255	; 0xff
 801605a:	2300      	movs	r3, #0
 801605c:	685b      	ldr	r3, [r3, #4]
 801605e:	deff      	udf	#255	; 0xff
 8016060:	2300      	movs	r3, #0
 8016062:	685b      	ldr	r3, [r3, #4]
 8016064:	deff      	udf	#255	; 0xff
 8016066:	68db      	ldr	r3, [r3, #12]
 8016068:	deff      	udf	#255	; 0xff
 801606a:	bf00      	nop
 801606c:	00000000 	.word	0x00000000
 8016070:	08015e4d 	.word	0x08015e4d

08016074 <forward_ap_integer_INT8>:
 8016074:	6983      	ldr	r3, [r0, #24]
 8016076:	881a      	ldrh	r2, [r3, #0]
 8016078:	2a00      	cmp	r2, #0
 801607a:	d074      	beq.n	8016166 <forward_ap_integer_INT8+0xf2>
 801607c:	6859      	ldr	r1, [r3, #4]
 801607e:	684b      	ldr	r3, [r1, #4]
 8016080:	b103      	cbz	r3, 8016084 <forward_ap_integer_INT8+0x10>
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	2a01      	cmp	r2, #1
 8016086:	f000 80e0 	beq.w	801624a <forward_ap_integer_INT8+0x1d6>
 801608a:	690a      	ldr	r2, [r1, #16]
 801608c:	2a00      	cmp	r2, #0
 801608e:	f000 80df 	beq.w	8016250 <forward_ap_integer_INT8+0x1dc>
 8016092:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016096:	68de      	ldr	r6, [r3, #12]
 8016098:	b095      	sub	sp, #84	; 0x54
 801609a:	6811      	ldr	r1, [r2, #0]
 801609c:	681c      	ldr	r4, [r3, #0]
 801609e:	f8d3 b018 	ldr.w	fp, [r3, #24]
 80160a2:	f8b6 c004 	ldrh.w	ip, [r6, #4]
 80160a6:	8932      	ldrh	r2, [r6, #8]
 80160a8:	89b3      	ldrh	r3, [r6, #12]
 80160aa:	8b86      	ldrh	r6, [r0, #28]
 80160ac:	6b07      	ldr	r7, [r0, #48]	; 0x30
 80160ae:	960d      	str	r6, [sp, #52]	; 0x34
 80160b0:	8c06      	ldrh	r6, [r0, #32]
 80160b2:	68cd      	ldr	r5, [r1, #12]
 80160b4:	960e      	str	r6, [sp, #56]	; 0x38
 80160b6:	88be      	ldrh	r6, [r7, #4]
 80160b8:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 80160bc:	960f      	str	r6, [sp, #60]	; 0x3c
 80160be:	883e      	ldrh	r6, [r7, #0]
 80160c0:	f8b5 800c 	ldrh.w	r8, [r5, #12]
 80160c4:	9610      	str	r6, [sp, #64]	; 0x40
 80160c6:	8c86      	ldrh	r6, [r0, #36]	; 0x24
 80160c8:	8d00      	ldrh	r0, [r0, #40]	; 0x28
 80160ca:	9611      	str	r6, [sp, #68]	; 0x44
 80160cc:	f8d1 a018 	ldr.w	sl, [r1, #24]
 80160d0:	680e      	ldr	r6, [r1, #0]
 80160d2:	9012      	str	r0, [sp, #72]	; 0x48
 80160d4:	2c00      	cmp	r4, #0
 80160d6:	d060      	beq.n	801619a <forward_ap_integer_INT8+0x126>
 80160d8:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80160dc:	f1b9 0f00 	cmp.w	r9, #0
 80160e0:	d043      	beq.n	801616a <forward_ap_integer_INT8+0xf6>
 80160e2:	8865      	ldrh	r5, [r4, #2]
 80160e4:	2d00      	cmp	r5, #0
 80160e6:	d06e      	beq.n	80161c6 <forward_ap_integer_INT8+0x152>
 80160e8:	f8d9 1000 	ldr.w	r1, [r9]
 80160ec:	ed91 0a00 	vldr	s0, [r1]
 80160f0:	2e00      	cmp	r6, #0
 80160f2:	d06c      	beq.n	80161ce <forward_ap_integer_INT8+0x15a>
 80160f4:	6877      	ldr	r7, [r6, #4]
 80160f6:	2f00      	cmp	r7, #0
 80160f8:	d03e      	beq.n	8016178 <forward_ap_integer_INT8+0x104>
 80160fa:	8871      	ldrh	r1, [r6, #2]
 80160fc:	9113      	str	r1, [sp, #76]	; 0x4c
 80160fe:	2900      	cmp	r1, #0
 8016100:	d053      	beq.n	80161aa <forward_ap_integer_INT8+0x136>
 8016102:	683d      	ldr	r5, [r7, #0]
 8016104:	f8db 0008 	ldr.w	r0, [fp, #8]
 8016108:	f8da 1008 	ldr.w	r1, [sl, #8]
 801610c:	edd5 0a00 	vldr	s1, [r5]
 8016110:	f1b9 0f00 	cmp.w	r9, #0
 8016114:	d055      	beq.n	80161c2 <forward_ap_integer_INT8+0x14e>
 8016116:	8864      	ldrh	r4, [r4, #2]
 8016118:	2c00      	cmp	r4, #0
 801611a:	d039      	beq.n	8016190 <forward_ap_integer_INT8+0x11c>
 801611c:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8016120:	f994 4000 	ldrsb.w	r4, [r4]
 8016124:	2e00      	cmp	r6, #0
 8016126:	d036      	beq.n	8016196 <forward_ap_integer_INT8+0x122>
 8016128:	2f00      	cmp	r7, #0
 801612a:	d034      	beq.n	8016196 <forward_ap_integer_INT8+0x122>
 801612c:	8875      	ldrh	r5, [r6, #2]
 801612e:	9513      	str	r5, [sp, #76]	; 0x4c
 8016130:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8016132:	b115      	cbz	r5, 801613a <forward_ap_integer_INT8+0xc6>
 8016134:	687d      	ldr	r5, [r7, #4]
 8016136:	f995 5000 	ldrsb.w	r5, [r5]
 801613a:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
 801613e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8016140:	9406      	str	r4, [sp, #24]
 8016142:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8016144:	9405      	str	r4, [sp, #20]
 8016146:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8016148:	9404      	str	r4, [sp, #16]
 801614a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801614c:	9403      	str	r4, [sp, #12]
 801614e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8016150:	9402      	str	r4, [sp, #8]
 8016152:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8016154:	e9cd e807 	strd	lr, r8, [sp, #28]
 8016158:	e9cd c400 	strd	ip, r4, [sp]
 801615c:	f004 fc3c 	bl	801a9d8 <st_int8_avepool>
 8016160:	b015      	add	sp, #84	; 0x54
 8016162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016166:	6853      	ldr	r3, [r2, #4]
 8016168:	deff      	udf	#255	; 0xff
 801616a:	2e00      	cmp	r6, #0
 801616c:	d039      	beq.n	80161e2 <forward_ap_integer_INT8+0x16e>
 801616e:	6877      	ldr	r7, [r6, #4]
 8016170:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8016254 <forward_ap_integer_INT8+0x1e0>
 8016174:	2f00      	cmp	r7, #0
 8016176:	d1c0      	bne.n	80160fa <forward_ap_integer_INT8+0x86>
 8016178:	f8db 0008 	ldr.w	r0, [fp, #8]
 801617c:	f8da 1008 	ldr.w	r1, [sl, #8]
 8016180:	f1b9 0f00 	cmp.w	r9, #0
 8016184:	d05c      	beq.n	8016240 <forward_ap_integer_INT8+0x1cc>
 8016186:	8864      	ldrh	r4, [r4, #2]
 8016188:	2c00      	cmp	r4, #0
 801618a:	d152      	bne.n	8016232 <forward_ap_integer_INT8+0x1be>
 801618c:	eddf 0a31 	vldr	s1, [pc, #196]	; 8016254 <forward_ap_integer_INT8+0x1e0>
 8016190:	2400      	movs	r4, #0
 8016192:	2f00      	cmp	r7, #0
 8016194:	d1ca      	bne.n	801612c <forward_ap_integer_INT8+0xb8>
 8016196:	2500      	movs	r5, #0
 8016198:	e7cf      	b.n	801613a <forward_ap_integer_INT8+0xc6>
 801619a:	b316      	cbz	r6, 80161e2 <forward_ap_integer_INT8+0x16e>
 801619c:	6877      	ldr	r7, [r6, #4]
 801619e:	b35f      	cbz	r7, 80161f8 <forward_ap_integer_INT8+0x184>
 80161a0:	8871      	ldrh	r1, [r6, #2]
 80161a2:	9113      	str	r1, [sp, #76]	; 0x4c
 80161a4:	bb99      	cbnz	r1, 801620e <forward_ap_integer_INT8+0x19a>
 80161a6:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8016254 <forward_ap_integer_INT8+0x1e0>
 80161aa:	f8db 0008 	ldr.w	r0, [fp, #8]
 80161ae:	f8da 1008 	ldr.w	r1, [sl, #8]
 80161b2:	b194      	cbz	r4, 80161da <forward_ap_integer_INT8+0x166>
 80161b4:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80161b8:	eddf 0a26 	vldr	s1, [pc, #152]	; 8016254 <forward_ap_integer_INT8+0x1e0>
 80161bc:	f1b9 0f00 	cmp.w	r9, #0
 80161c0:	d1a9      	bne.n	8016116 <forward_ap_integer_INT8+0xa2>
 80161c2:	464c      	mov	r4, r9
 80161c4:	e7b4      	b.n	8016130 <forward_ap_integer_INT8+0xbc>
 80161c6:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8016254 <forward_ap_integer_INT8+0x1e0>
 80161ca:	2e00      	cmp	r6, #0
 80161cc:	d192      	bne.n	80160f4 <forward_ap_integer_INT8+0x80>
 80161ce:	f8db 0008 	ldr.w	r0, [fp, #8]
 80161d2:	f8da 1008 	ldr.w	r1, [sl, #8]
 80161d6:	bb25      	cbnz	r5, 8016222 <forward_ap_integer_INT8+0x1ae>
 80161d8:	462c      	mov	r4, r5
 80161da:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8016254 <forward_ap_integer_INT8+0x1e0>
 80161de:	4625      	mov	r5, r4
 80161e0:	e7ab      	b.n	801613a <forward_ap_integer_INT8+0xc6>
 80161e2:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8016254 <forward_ap_integer_INT8+0x1e0>
 80161e6:	4634      	mov	r4, r6
 80161e8:	f8db 0008 	ldr.w	r0, [fp, #8]
 80161ec:	4635      	mov	r5, r6
 80161ee:	eef0 0a40 	vmov.f32	s1, s0
 80161f2:	f8da 1008 	ldr.w	r1, [sl, #8]
 80161f6:	e7a0      	b.n	801613a <forward_ap_integer_INT8+0xc6>
 80161f8:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8016254 <forward_ap_integer_INT8+0x1e0>
 80161fc:	463c      	mov	r4, r7
 80161fe:	f8db 0008 	ldr.w	r0, [fp, #8]
 8016202:	463d      	mov	r5, r7
 8016204:	eef0 0a40 	vmov.f32	s1, s0
 8016208:	f8da 1008 	ldr.w	r1, [sl, #8]
 801620c:	e795      	b.n	801613a <forward_ap_integer_INT8+0xc6>
 801620e:	683d      	ldr	r5, [r7, #0]
 8016210:	f8db 0008 	ldr.w	r0, [fp, #8]
 8016214:	f8da 1008 	ldr.w	r1, [sl, #8]
 8016218:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8016254 <forward_ap_integer_INT8+0x1e0>
 801621c:	edd5 0a00 	vldr	s1, [r5]
 8016220:	e788      	b.n	8016134 <forward_ap_integer_INT8+0xc0>
 8016222:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8016226:	4635      	mov	r5, r6
 8016228:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8016254 <forward_ap_integer_INT8+0x1e0>
 801622c:	f994 4000 	ldrsb.w	r4, [r4]
 8016230:	e783      	b.n	801613a <forward_ap_integer_INT8+0xc6>
 8016232:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8016236:	eddf 0a07 	vldr	s1, [pc, #28]	; 8016254 <forward_ap_integer_INT8+0x1e0>
 801623a:	f994 4000 	ldrsb.w	r4, [r4]
 801623e:	e7aa      	b.n	8016196 <forward_ap_integer_INT8+0x122>
 8016240:	464c      	mov	r4, r9
 8016242:	eddf 0a04 	vldr	s1, [pc, #16]	; 8016254 <forward_ap_integer_INT8+0x1e0>
 8016246:	464d      	mov	r5, r9
 8016248:	e777      	b.n	801613a <forward_ap_integer_INT8+0xc6>
 801624a:	2300      	movs	r3, #0
 801624c:	685b      	ldr	r3, [r3, #4]
 801624e:	deff      	udf	#255	; 0xff
 8016250:	68d3      	ldr	r3, [r2, #12]
 8016252:	deff      	udf	#255	; 0xff
 8016254:	00000000 	.word	0x00000000

08016258 <forward_lite_pw_sssa8_ch>:
 8016258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801625c:	b093      	sub	sp, #76	; 0x4c
 801625e:	4604      	mov	r4, r0
 8016260:	930a      	str	r3, [sp, #40]	; 0x28
 8016262:	f99d 307c 	ldrsb.w	r3, [sp, #124]	; 0x7c
 8016266:	f8bd 7074 	ldrh.w	r7, [sp, #116]	; 0x74
 801626a:	930e      	str	r3, [sp, #56]	; 0x38
 801626c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801626e:	9110      	str	r1, [sp, #64]	; 0x40
 8016270:	eb03 0187 	add.w	r1, r3, r7, lsl #2
 8016274:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8016278:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 801627c:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 8016280:	f99d c080 	ldrsb.w	ip, [sp, #128]	; 0x80
 8016284:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8016288:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801628a:	920d      	str	r2, [sp, #52]	; 0x34
 801628c:	930b      	str	r3, [sp, #44]	; 0x2c
 801628e:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 8016292:	930f      	str	r3, [sp, #60]	; 0x3c
 8016294:	00bb      	lsls	r3, r7, #2
 8016296:	9311      	str	r3, [sp, #68]	; 0x44
 8016298:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801629a:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 801629e:	007b      	lsls	r3, r7, #1
 80162a0:	930c      	str	r3, [sp, #48]	; 0x30
 80162a2:	2f00      	cmp	r7, #0
 80162a4:	d075      	beq.n	8016392 <forward_lite_pw_sssa8_ch+0x13a>
 80162a6:	3104      	adds	r1, #4
 80162a8:	4648      	mov	r0, r9
 80162aa:	eb09 0e03 	add.w	lr, r9, r3
 80162ae:	f04f 0801 	mov.w	r8, #1
 80162b2:	f930 3b02 	ldrsh.w	r3, [r0], #2
 80162b6:	1e5a      	subs	r2, r3, #1
 80162b8:	fa08 f603 	lsl.w	r6, r8, r3
 80162bc:	fa0c f303 	lsl.w	r3, ip, r3
 80162c0:	b292      	uxth	r2, r2
 80162c2:	eb03 0356 	add.w	r3, r3, r6, lsr #1
 80162c6:	2a14      	cmp	r2, #20
 80162c8:	d846      	bhi.n	8016358 <forward_lite_pw_sssa8_ch+0x100>
 80162ca:	4586      	cmp	lr, r0
 80162cc:	f841 3c04 	str.w	r3, [r1, #-4]
 80162d0:	f101 0104 	add.w	r1, r1, #4
 80162d4:	d1ed      	bne.n	80162b2 <forward_lite_pw_sssa8_ch+0x5a>
 80162d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80162d8:	eba9 0903 	sub.w	r9, r9, r3
 80162dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80162de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80162e0:	ebae 0303 	sub.w	r3, lr, r3
 80162e4:	930c      	str	r3, [sp, #48]	; 0x30
 80162e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80162e8:	fb02 f303 	mul.w	r3, r2, r3
 80162ec:	930d      	str	r3, [sp, #52]	; 0x34
 80162ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80162f0:	2b01      	cmp	r3, #1
 80162f2:	d038      	beq.n	8016366 <forward_lite_pw_sssa8_ch+0x10e>
 80162f4:	2300      	movs	r3, #0
 80162f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80162f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80162fa:	b353      	cbz	r3, 8016352 <forward_lite_pw_sssa8_ch+0xfa>
 80162fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80162fe:	2600      	movs	r6, #0
 8016300:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016302:	fb07 f203 	mul.w	r2, r7, r3
 8016306:	fb01 f803 	mul.w	r8, r1, r3
 801630a:	4651      	mov	r1, sl
 801630c:	46ba      	mov	sl, r7
 801630e:	464f      	mov	r7, r9
 8016310:	4691      	mov	r9, r2
 8016312:	465a      	mov	r2, fp
 8016314:	f8dd b088 	ldr.w	fp, [sp, #136]	; 0x88
 8016318:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801631a:	3601      	adds	r6, #1
 801631c:	4620      	mov	r0, r4
 801631e:	921e      	str	r2, [sp, #120]	; 0x78
 8016320:	9308      	str	r3, [sp, #32]
 8016322:	4444      	add	r4, r8
 8016324:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016326:	911c      	str	r1, [sp, #112]	; 0x70
 8016328:	e9cd 7306 	strd	r7, r3, [sp, #24]
 801632c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801632e:	9305      	str	r3, [sp, #20]
 8016330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016332:	e9cd a303 	strd	sl, r3, [sp, #12]
 8016336:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016338:	9302      	str	r3, [sp, #8]
 801633a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801633c:	9301      	str	r3, [sp, #4]
 801633e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8016340:	9300      	str	r3, [sp, #0]
 8016342:	462b      	mov	r3, r5
 8016344:	f002 f932 	bl	80185ac <st_sssa8_ch_nn_mat_mult_nt_t>
 8016348:	45b3      	cmp	fp, r6
 801634a:	444d      	add	r5, r9
 801634c:	991c      	ldr	r1, [sp, #112]	; 0x70
 801634e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016350:	d1e2      	bne.n	8016318 <forward_lite_pw_sssa8_ch+0xc0>
 8016352:	b013      	add	sp, #76	; 0x4c
 8016354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016358:	4586      	cmp	lr, r0
 801635a:	f841 cc04 	str.w	ip, [r1, #-4]
 801635e:	f101 0104 	add.w	r1, r1, #4
 8016362:	d1a6      	bne.n	80162b2 <forward_lite_pw_sssa8_ch+0x5a>
 8016364:	e7b7      	b.n	80162d6 <forward_lite_pw_sssa8_ch+0x7e>
 8016366:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016368:	f06f 0309 	mvn.w	r3, #9
 801636c:	fb03 2307 	mla	r3, r3, r7, r2
 8016370:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016372:	fb07 f202 	mul.w	r2, r7, r2
 8016376:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 801637a:	dbbb      	blt.n	80162f4 <forward_lite_pw_sssa8_ch+0x9c>
 801637c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801637e:	4639      	mov	r1, r7
 8016380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016382:	4650      	mov	r0, sl
 8016384:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016386:	9601      	str	r6, [sp, #4]
 8016388:	9300      	str	r3, [sp, #0]
 801638a:	f002 f8cf 	bl	801852c <st_sssa8_ch_fullW_prefetch>
 801638e:	960f      	str	r6, [sp, #60]	; 0x3c
 8016390:	e7b2      	b.n	80162f8 <forward_lite_pw_sssa8_ch+0xa0>
 8016392:	46ce      	mov	lr, r9
 8016394:	f8dd 9094 	ldr.w	r9, [sp, #148]	; 0x94
 8016398:	e7a0      	b.n	80162dc <forward_lite_pw_sssa8_ch+0x84>
 801639a:	bf00      	nop

0801639c <forward_lite_node_convert_integer_iu8ou8>:
 801639c:	ee07 3a90 	vmov	s15, r3
 80163a0:	f89d 3000 	ldrb.w	r3, [sp]
 80163a4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80163a8:	ee06 3a90 	vmov	s13, r3
 80163ac:	1883      	adds	r3, r0, r2
 80163ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80163b2:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80163b6:	4298      	cmp	r0, r3
 80163b8:	ee76 6a87 	vadd.f32	s13, s13, s14
 80163bc:	eee7 6ac0 	vfms.f32	s13, s15, s0
 80163c0:	d215      	bcs.n	80163ee <forward_lite_node_convert_integer_iu8ou8+0x52>
 80163c2:	3801      	subs	r0, #1
 80163c4:	440a      	add	r2, r1
 80163c6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80163ca:	eef0 7a66 	vmov.f32	s15, s13
 80163ce:	ee07 3a10 	vmov	s14, r3
 80163d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80163d6:	eee7 7a00 	vfma.f32	s15, s14, s0
 80163da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80163de:	ee17 3a90 	vmov	r3, s15
 80163e2:	f383 0308 	usat	r3, #8, r3
 80163e6:	f801 3b01 	strb.w	r3, [r1], #1
 80163ea:	4291      	cmp	r1, r2
 80163ec:	d1eb      	bne.n	80163c6 <forward_lite_node_convert_integer_iu8ou8+0x2a>
 80163ee:	4770      	bx	lr

080163f0 <forward_lite_node_convert_integer_iu8os8>:
 80163f0:	ee07 3a90 	vmov	s15, r3
 80163f4:	f99d 3000 	ldrsb.w	r3, [sp]
 80163f8:	ee06 3a90 	vmov	s13, r3
 80163fc:	1883      	adds	r3, r0, r2
 80163fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016402:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8016406:	4298      	cmp	r0, r3
 8016408:	eee7 6ac0 	vfms.f32	s13, s15, s0
 801640c:	d22d      	bcs.n	801646a <forward_lite_node_convert_integer_iu8os8+0x7a>
 801640e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8016412:	3801      	subs	r0, #1
 8016414:	440a      	add	r2, r1
 8016416:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801646c <forward_lite_node_convert_integer_iu8os8+0x7c>
 801641a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801641e:	eef0 7a66 	vmov.f32	s15, s13
 8016422:	ee07 3a10 	vmov	s14, r3
 8016426:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801642a:	eee7 7a00 	vfma.f32	s15, s14, s0
 801642e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016432:	ee37 7aa5 	vadd.f32	s14, s15, s11
 8016436:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801643a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801643e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8016442:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016446:	dd08      	ble.n	801645a <forward_lite_node_convert_integer_iu8os8+0x6a>
 8016448:	ee17 3a10 	vmov	r3, s14
 801644c:	f303 0307 	ssat	r3, #8, r3
 8016450:	f801 3b01 	strb.w	r3, [r1], #1
 8016454:	4291      	cmp	r1, r2
 8016456:	d1e0      	bne.n	801641a <forward_lite_node_convert_integer_iu8os8+0x2a>
 8016458:	4770      	bx	lr
 801645a:	ee17 3a90 	vmov	r3, s15
 801645e:	f303 0307 	ssat	r3, #8, r3
 8016462:	f801 3b01 	strb.w	r3, [r1], #1
 8016466:	4291      	cmp	r1, r2
 8016468:	d1d7      	bne.n	801641a <forward_lite_node_convert_integer_iu8os8+0x2a>
 801646a:	4770      	bx	lr
 801646c:	3efffffc 	.word	0x3efffffc

08016470 <forward_lite_node_convert_integer_iu8os8_fast>:
 8016470:	b570      	push	{r4, r5, r6, lr}
 8016472:	1095      	asrs	r5, r2, #2
 8016474:	2d00      	cmp	r5, #0
 8016476:	dd31      	ble.n	80164dc <forward_lite_node_convert_integer_iu8os8_fast+0x6c>
 8016478:	00ae      	lsls	r6, r5, #2
 801647a:	460c      	mov	r4, r1
 801647c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8016480:	f04f 1e80 	mov.w	lr, #8388736	; 0x800080
 8016484:	f850 3b04 	ldr.w	r3, [r0], #4
 8016488:	ea4f 2c33 	mov.w	ip, r3, ror #8
 801648c:	fa3f fc8c 	uxtb16	ip, ip
 8016490:	fadc fc0e 	ssub16	ip, ip, lr
 8016494:	fa3f f383 	uxtb16	r3, r3
 8016498:	fad3 f30e 	ssub16	r3, r3, lr
 801649c:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 80164a0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80164a4:	42a8      	cmp	r0, r5
 80164a6:	f00c 2cff 	and.w	ip, ip, #4278255360	; 0xff00ff00
 80164aa:	ea43 030c 	orr.w	r3, r3, ip
 80164ae:	f844 3b04 	str.w	r3, [r4], #4
 80164b2:	d1e7      	bne.n	8016484 <forward_lite_node_convert_integer_iu8os8_fast+0x14>
 80164b4:	4431      	add	r1, r6
 80164b6:	f012 0203 	ands.w	r2, r2, #3
 80164ba:	d00e      	beq.n	80164da <forward_lite_node_convert_integer_iu8os8_fast+0x6a>
 80164bc:	782b      	ldrb	r3, [r5, #0]
 80164be:	3a01      	subs	r2, #1
 80164c0:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 80164c4:	700b      	strb	r3, [r1, #0]
 80164c6:	d008      	beq.n	80164da <forward_lite_node_convert_integer_iu8os8_fast+0x6a>
 80164c8:	786b      	ldrb	r3, [r5, #1]
 80164ca:	2a01      	cmp	r2, #1
 80164cc:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 80164d0:	704b      	strb	r3, [r1, #1]
 80164d2:	d002      	beq.n	80164da <forward_lite_node_convert_integer_iu8os8_fast+0x6a>
 80164d4:	78ab      	ldrb	r3, [r5, #2]
 80164d6:	3b80      	subs	r3, #128	; 0x80
 80164d8:	708b      	strb	r3, [r1, #2]
 80164da:	bd70      	pop	{r4, r5, r6, pc}
 80164dc:	4605      	mov	r5, r0
 80164de:	e7ea      	b.n	80164b6 <forward_lite_node_convert_integer_iu8os8_fast+0x46>

080164e0 <forward_lite_node_convert_integer_is8ou8>:
 80164e0:	ee07 3a90 	vmov	s15, r3
 80164e4:	f89d 3000 	ldrb.w	r3, [sp]
 80164e8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80164ec:	ee06 3a90 	vmov	s13, r3
 80164f0:	1883      	adds	r3, r0, r2
 80164f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80164f6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80164fa:	4298      	cmp	r0, r3
 80164fc:	ee76 6a87 	vadd.f32	s13, s13, s14
 8016500:	eee7 6ac0 	vfms.f32	s13, s15, s0
 8016504:	d215      	bcs.n	8016532 <forward_lite_node_convert_integer_is8ou8+0x52>
 8016506:	3801      	subs	r0, #1
 8016508:	440a      	add	r2, r1
 801650a:	f910 3f01 	ldrsb.w	r3, [r0, #1]!
 801650e:	eef0 7a66 	vmov.f32	s15, s13
 8016512:	ee07 3a10 	vmov	s14, r3
 8016516:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801651a:	eee7 7a00 	vfma.f32	s15, s14, s0
 801651e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016522:	ee17 3a90 	vmov	r3, s15
 8016526:	f383 0308 	usat	r3, #8, r3
 801652a:	f801 3b01 	strb.w	r3, [r1], #1
 801652e:	4291      	cmp	r1, r2
 8016530:	d1eb      	bne.n	801650a <forward_lite_node_convert_integer_is8ou8+0x2a>
 8016532:	4770      	bx	lr

08016534 <forward_lite_node_convert_integer_is8ou8_fast>:
 8016534:	b570      	push	{r4, r5, r6, lr}
 8016536:	1095      	asrs	r5, r2, #2
 8016538:	2d00      	cmp	r5, #0
 801653a:	dd2d      	ble.n	8016598 <forward_lite_node_convert_integer_is8ou8_fast+0x64>
 801653c:	00ae      	lsls	r6, r5, #2
 801653e:	460c      	mov	r4, r1
 8016540:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8016544:	f04f 1e80 	mov.w	lr, #8388736	; 0x800080
 8016548:	f850 3b04 	ldr.w	r3, [r0], #4
 801654c:	ea4f 2c33 	mov.w	ip, r3, ror #8
 8016550:	fa2f fc8c 	sxtb16	ip, ip
 8016554:	fa9c fc0e 	sadd16	ip, ip, lr
 8016558:	fa2f f383 	sxtb16	r3, r3
 801655c:	fa93 f30e 	sadd16	r3, r3, lr
 8016560:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8016564:	42a8      	cmp	r0, r5
 8016566:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 801656a:	f844 3b04 	str.w	r3, [r4], #4
 801656e:	d1eb      	bne.n	8016548 <forward_lite_node_convert_integer_is8ou8_fast+0x14>
 8016570:	4431      	add	r1, r6
 8016572:	f012 0203 	ands.w	r2, r2, #3
 8016576:	d00e      	beq.n	8016596 <forward_lite_node_convert_integer_is8ou8_fast+0x62>
 8016578:	782b      	ldrb	r3, [r5, #0]
 801657a:	3a01      	subs	r2, #1
 801657c:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 8016580:	700b      	strb	r3, [r1, #0]
 8016582:	d008      	beq.n	8016596 <forward_lite_node_convert_integer_is8ou8_fast+0x62>
 8016584:	786b      	ldrb	r3, [r5, #1]
 8016586:	2a01      	cmp	r2, #1
 8016588:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 801658c:	704b      	strb	r3, [r1, #1]
 801658e:	d002      	beq.n	8016596 <forward_lite_node_convert_integer_is8ou8_fast+0x62>
 8016590:	78ab      	ldrb	r3, [r5, #2]
 8016592:	3b80      	subs	r3, #128	; 0x80
 8016594:	708b      	strb	r3, [r1, #2]
 8016596:	bd70      	pop	{r4, r5, r6, pc}
 8016598:	4605      	mov	r5, r0
 801659a:	e7ea      	b.n	8016572 <forward_lite_node_convert_integer_is8ou8_fast+0x3e>

0801659c <forward_lite_conv2d_deep_sssa8_ch>:
 801659c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165a0:	b09d      	sub	sp, #116	; 0x74
 80165a2:	468b      	mov	fp, r1
 80165a4:	4604      	mov	r4, r0
 80165a6:	f8bd 20a0 	ldrh.w	r2, [sp, #160]	; 0xa0
 80165aa:	f8bd 809c 	ldrh.w	r8, [sp, #156]	; 0x9c
 80165ae:	9214      	str	r2, [sp, #80]	; 0x50
 80165b0:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80165b2:	9310      	str	r3, [sp, #64]	; 0x40
 80165b4:	eba8 0388 	sub.w	r3, r8, r8, lsl #2
 80165b8:	eb02 01c8 	add.w	r1, r2, r8, lsl #3
 80165bc:	f8bd 20a4 	ldrh.w	r2, [sp, #164]	; 0xa4
 80165c0:	f8dd 9098 	ldr.w	r9, [sp, #152]	; 0x98
 80165c4:	9215      	str	r2, [sp, #84]	; 0x54
 80165c6:	eb01 0748 	add.w	r7, r1, r8, lsl #1
 80165ca:	f8bd 20a8 	ldrh.w	r2, [sp, #168]	; 0xa8
 80165ce:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80165d2:	f8dd a0b0 	ldr.w	sl, [sp, #176]	; 0xb0
 80165d6:	9218      	str	r2, [sp, #96]	; 0x60
 80165d8:	f8bd 20ac 	ldrh.w	r2, [sp, #172]	; 0xac
 80165dc:	f99d c0b8 	ldrsb.w	ip, [sp, #184]	; 0xb8
 80165e0:	9212      	str	r2, [sp, #72]	; 0x48
 80165e2:	f99d 20b4 	ldrsb.w	r2, [sp, #180]	; 0xb4
 80165e6:	9d2f      	ldr	r5, [sp, #188]	; 0xbc
 80165e8:	9219      	str	r2, [sp, #100]	; 0x64
 80165ea:	f8bd 20c0 	ldrh.w	r2, [sp, #192]	; 0xc0
 80165ee:	9316      	str	r3, [sp, #88]	; 0x58
 80165f0:	9213      	str	r2, [sp, #76]	; 0x4c
 80165f2:	f8bd 20c4 	ldrh.w	r2, [sp, #196]	; 0xc4
 80165f6:	921a      	str	r2, [sp, #104]	; 0x68
 80165f8:	f8bd 20cc 	ldrh.w	r2, [sp, #204]	; 0xcc
 80165fc:	921b      	str	r2, [sp, #108]	; 0x6c
 80165fe:	ea4f 0248 	mov.w	r2, r8, lsl #1
 8016602:	9211      	str	r2, [sp, #68]	; 0x44
 8016604:	f1b8 0f00 	cmp.w	r8, #0
 8016608:	f000 808a 	beq.w	8016720 <forward_lite_conv2d_deep_sssa8_ch+0x184>
 801660c:	1d18      	adds	r0, r3, #4
 801660e:	f04f 0e01 	mov.w	lr, #1
 8016612:	f931 3b02 	ldrsh.w	r3, [r1], #2
 8016616:	1e5a      	subs	r2, r3, #1
 8016618:	fa0e f603 	lsl.w	r6, lr, r3
 801661c:	fa0c f303 	lsl.w	r3, ip, r3
 8016620:	b292      	uxth	r2, r2
 8016622:	eb03 0356 	add.w	r3, r3, r6, lsr #1
 8016626:	2a14      	cmp	r2, #20
 8016628:	d852      	bhi.n	80166d0 <forward_lite_conv2d_deep_sssa8_ch+0x134>
 801662a:	428f      	cmp	r7, r1
 801662c:	f840 3c04 	str.w	r3, [r0, #-4]
 8016630:	f100 0004 	add.w	r0, r0, #4
 8016634:	d1ed      	bne.n	8016612 <forward_lite_conv2d_deep_sssa8_ch+0x76>
 8016636:	4639      	mov	r1, r7
 8016638:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801663a:	1acb      	subs	r3, r1, r3
 801663c:	9317      	str	r3, [sp, #92]	; 0x5c
 801663e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016640:	fb13 fb0b 	smulbb	fp, r3, fp
 8016644:	fa1f f38b 	uxth.w	r3, fp
 8016648:	9311      	str	r3, [sp, #68]	; 0x44
 801664a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801664c:	2b01      	cmp	r3, #1
 801664e:	d046      	beq.n	80166de <forward_lite_conv2d_deep_sssa8_ch+0x142>
 8016650:	2300      	movs	r3, #0
 8016652:	931b      	str	r3, [sp, #108]	; 0x6c
 8016654:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8016656:	2b00      	cmp	r3, #0
 8016658:	d037      	beq.n	80166ca <forward_lite_conv2d_deep_sssa8_ch+0x12e>
 801665a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801665c:	4649      	mov	r1, r9
 801665e:	2600      	movs	r6, #0
 8016660:	46c1      	mov	r9, r8
 8016662:	fb08 fb03 	mul.w	fp, r8, r3
 8016666:	46b8      	mov	r8, r7
 8016668:	e9dd 3211 	ldrd	r3, r2, [sp, #68]	; 0x44
 801666c:	fb02 f303 	mul.w	r3, r2, r3
 8016670:	4652      	mov	r2, sl
 8016672:	f8dd a0c8 	ldr.w	sl, [sp, #200]	; 0xc8
 8016676:	461f      	mov	r7, r3
 8016678:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801667a:	3601      	adds	r6, #1
 801667c:	4620      	mov	r0, r4
 801667e:	922c      	str	r2, [sp, #176]	; 0xb0
 8016680:	9126      	str	r1, [sp, #152]	; 0x98
 8016682:	443c      	add	r4, r7
 8016684:	e9cd 830d 	strd	r8, r3, [sp, #52]	; 0x34
 8016688:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801668a:	930c      	str	r3, [sp, #48]	; 0x30
 801668c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801668e:	930b      	str	r3, [sp, #44]	; 0x2c
 8016690:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016692:	930a      	str	r3, [sp, #40]	; 0x28
 8016694:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016696:	9309      	str	r3, [sp, #36]	; 0x24
 8016698:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801669a:	9308      	str	r3, [sp, #32]
 801669c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801669e:	9307      	str	r3, [sp, #28]
 80166a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80166a2:	9306      	str	r3, [sp, #24]
 80166a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80166a6:	9305      	str	r3, [sp, #20]
 80166a8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80166aa:	9304      	str	r3, [sp, #16]
 80166ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80166ae:	e9cd 9302 	strd	r9, r3, [sp, #8]
 80166b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80166b4:	9301      	str	r3, [sp, #4]
 80166b6:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80166b8:	9300      	str	r3, [sp, #0]
 80166ba:	462b      	mov	r3, r5
 80166bc:	f002 fd80 	bl	80191c0 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t>
 80166c0:	45b2      	cmp	sl, r6
 80166c2:	445d      	add	r5, fp
 80166c4:	9926      	ldr	r1, [sp, #152]	; 0x98
 80166c6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80166c8:	d1d6      	bne.n	8016678 <forward_lite_conv2d_deep_sssa8_ch+0xdc>
 80166ca:	b01d      	add	sp, #116	; 0x74
 80166cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166d0:	428f      	cmp	r7, r1
 80166d2:	f840 cc04 	str.w	ip, [r0, #-4]
 80166d6:	f100 0004 	add.w	r0, r0, #4
 80166da:	d19a      	bne.n	8016612 <forward_lite_conv2d_deep_sssa8_ch+0x76>
 80166dc:	e7ab      	b.n	8016636 <forward_lite_conv2d_deep_sssa8_ch+0x9a>
 80166de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80166e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80166e2:	fb08 f303 	mul.w	r3, r8, r3
 80166e6:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80166e8:	fb02 f303 	mul.w	r3, r2, r3
 80166ec:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80166ee:	fb02 f303 	mul.w	r3, r2, r3
 80166f2:	f06f 0209 	mvn.w	r2, #9
 80166f6:	fb02 1208 	mla	r2, r2, r8, r1
 80166fa:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 80166fe:	dba7      	blt.n	8016650 <forward_lite_conv2d_deep_sssa8_ch+0xb4>
 8016700:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016702:	4641      	mov	r1, r8
 8016704:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016706:	9701      	str	r7, [sp, #4]
 8016708:	fb02 f303 	mul.w	r3, r2, r3
 801670c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801670e:	4610      	mov	r0, r2
 8016710:	fb03 f000 	mul.w	r0, r3, r0
 8016714:	9000      	str	r0, [sp, #0]
 8016716:	4648      	mov	r0, r9
 8016718:	f001 ff08 	bl	801852c <st_sssa8_ch_fullW_prefetch>
 801671c:	971b      	str	r7, [sp, #108]	; 0x6c
 801671e:	e799      	b.n	8016654 <forward_lite_conv2d_deep_sssa8_ch+0xb8>
 8016720:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8016722:	9316      	str	r3, [sp, #88]	; 0x58
 8016724:	e788      	b.n	8016638 <forward_lite_conv2d_deep_sssa8_ch+0x9c>
 8016726:	bf00      	nop

08016728 <forward_lite_conv2d_rgb_sssa8_ch>:
 8016728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801672c:	4617      	mov	r7, r2
 801672e:	468b      	mov	fp, r1
 8016730:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8016734:	4639      	mov	r1, r7
 8016736:	ed2d 8b02 	vpush	{d8}
 801673a:	b0c9      	sub	sp, #292	; 0x124
 801673c:	ee08 2a90 	vmov	s17, r2
 8016740:	461a      	mov	r2, r3
 8016742:	f8bd 7154 	ldrh.w	r7, [sp, #340]	; 0x154
 8016746:	f8bd 5150 	ldrh.w	r5, [sp, #336]	; 0x150
 801674a:	4690      	mov	r8, r2
 801674c:	971c      	str	r7, [sp, #112]	; 0x70
 801674e:	f8bd 7158 	ldrh.w	r7, [sp, #344]	; 0x158
 8016752:	46a9      	mov	r9, r5
 8016754:	f99d 6160 	ldrsb.w	r6, [sp, #352]	; 0x160
 8016758:	9312      	str	r3, [sp, #72]	; 0x48
 801675a:	9008      	str	r0, [sp, #32]
 801675c:	9b57      	ldr	r3, [sp, #348]	; 0x15c
 801675e:	985c      	ldr	r0, [sp, #368]	; 0x170
 8016760:	970d      	str	r7, [sp, #52]	; 0x34
 8016762:	f8bd 716c 	ldrh.w	r7, [sp, #364]	; 0x16c
 8016766:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 801676a:	9500      	str	r5, [sp, #0]
 801676c:	9003      	str	r0, [sp, #12]
 801676e:	2003      	movs	r0, #3
 8016770:	9301      	str	r3, [sp, #4]
 8016772:	462b      	mov	r3, r5
 8016774:	9602      	str	r6, [sp, #8]
 8016776:	9522      	str	r5, [sp, #136]	; 0x88
 8016778:	970c      	str	r7, [sp, #48]	; 0x30
 801677a:	eb04 0748 	add.w	r7, r4, r8, lsl #1
 801677e:	f99d 5164 	ldrsb.w	r5, [sp, #356]	; 0x164
 8016782:	f001 fbf3 	bl	8017f6c <st_sssa8_ch_convolve_rank1upd>
 8016786:	fb19 f309 	smulbb	r3, r9, r9
 801678a:	4642      	mov	r2, r8
 801678c:	ea4f 0c48 	mov.w	ip, r8, lsl #1
 8016790:	970f      	str	r7, [sp, #60]	; 0x3c
 8016792:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016796:	b29b      	uxth	r3, r3
 8016798:	9310      	str	r3, [sp, #64]	; 0x40
 801679a:	f06f 0309 	mvn.w	r3, #9
 801679e:	fb03 7308 	mla	r3, r3, r8, r7
 80167a2:	9325      	str	r3, [sp, #148]	; 0x94
 80167a4:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 80167a8:	9326      	str	r3, [sp, #152]	; 0x98
 80167aa:	b1aa      	cbz	r2, 80167d8 <forward_lite_conv2d_rgb_sssa8_ch+0xb0>
 80167ac:	1d1a      	adds	r2, r3, #4
 80167ae:	2001      	movs	r0, #1
 80167b0:	f934 3b02 	ldrsh.w	r3, [r4], #2
 80167b4:	1e59      	subs	r1, r3, #1
 80167b6:	fa00 fe03 	lsl.w	lr, r0, r3
 80167ba:	fa05 f303 	lsl.w	r3, r5, r3
 80167be:	b289      	uxth	r1, r1
 80167c0:	eb03 035e 	add.w	r3, r3, lr, lsr #1
 80167c4:	2914      	cmp	r1, #20
 80167c6:	f200 80f0 	bhi.w	80169aa <forward_lite_conv2d_rgb_sssa8_ch+0x282>
 80167ca:	42bc      	cmp	r4, r7
 80167cc:	f842 3c04 	str.w	r3, [r2, #-4]
 80167d0:	f102 0204 	add.w	r2, r2, #4
 80167d4:	d1ec      	bne.n	80167b0 <forward_lite_conv2d_rgb_sssa8_ch+0x88>
 80167d6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80167d8:	eba4 030c 	sub.w	r3, r4, ip
 80167dc:	9c22      	ldr	r4, [sp, #136]	; 0x88
 80167de:	aa28      	add	r2, sp, #160	; 0xa0
 80167e0:	a934      	add	r1, sp, #208	; 0xd0
 80167e2:	9327      	str	r3, [sp, #156]	; 0x9c
 80167e4:	a83e      	add	r0, sp, #248	; 0xf8
 80167e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80167e8:	e9cd 332d 	strd	r3, r3, [sp, #180]	; 0xb4
 80167ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80167ee:	e9cd 3336 	strd	r3, r3, [sp, #216]	; 0xd8
 80167f2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80167f4:	e9cd 3338 	strd	r3, r3, [sp, #224]	; 0xe0
 80167f8:	ab30      	add	r3, sp, #192	; 0xc0
 80167fa:	9300      	str	r3, [sp, #0]
 80167fc:	ab2c      	add	r3, sp, #176	; 0xb0
 80167fe:	e9cd 4431 	strd	r4, r4, [sp, #196]	; 0xc4
 8016802:	e9cd bb29 	strd	fp, fp, [sp, #164]	; 0xa4
 8016806:	f001 fc3b 	bl	8018080 <ai_padding_opt_init>
 801680a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801680c:	fb04 f304 	mul.w	r3, r4, r4
 8016810:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016812:	fb01 f403 	mul.w	r4, r1, r3
 8016816:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801681a:	fb01 f202 	mul.w	r2, r1, r2
 801681e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8016820:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016824:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8016828:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 801682c:	930b      	str	r3, [sp, #44]	; 0x2c
 801682e:	bfa8      	it	ge
 8016830:	f44f 6420 	movge.w	r4, #2560	; 0xa00
 8016834:	42a2      	cmp	r2, r4
 8016836:	f340 81b1 	ble.w	8016b9c <forward_lite_conv2d_rgb_sssa8_ch+0x474>
 801683a:	2300      	movs	r3, #0
 801683c:	9320      	str	r3, [sp, #128]	; 0x80
 801683e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016840:	fbb4 f3f3 	udiv	r3, r4, r3
 8016844:	b29b      	uxth	r3, r3
 8016846:	4619      	mov	r1, r3
 8016848:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801684a:	4299      	cmp	r1, r3
 801684c:	bf28      	it	cs
 801684e:	4619      	movcs	r1, r3
 8016850:	fbb3 f2f1 	udiv	r2, r3, r1
 8016854:	fb01 3312 	mls	r3, r1, r2, r3
 8016858:	b292      	uxth	r2, r2
 801685a:	9121      	str	r1, [sp, #132]	; 0x84
 801685c:	b29b      	uxth	r3, r3
 801685e:	921b      	str	r2, [sp, #108]	; 0x6c
 8016860:	b11b      	cbz	r3, 801686a <forward_lite_conv2d_rgb_sssa8_ch+0x142>
 8016862:	4613      	mov	r3, r2
 8016864:	3301      	adds	r3, #1
 8016866:	b29b      	uxth	r3, r3
 8016868:	931b      	str	r3, [sp, #108]	; 0x6c
 801686a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801686c:	2b00      	cmp	r3, #0
 801686e:	f000 8188 	beq.w	8016b82 <forward_lite_conv2d_rgb_sssa8_ch+0x45a>
 8016872:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016874:	b236      	sxth	r6, r6
 8016876:	2400      	movs	r4, #0
 8016878:	425b      	negs	r3, r3
 801687a:	4625      	mov	r5, r4
 801687c:	b29a      	uxth	r2, r3
 801687e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016880:	3b01      	subs	r3, #1
 8016882:	921f      	str	r2, [sp, #124]	; 0x7c
 8016884:	921a      	str	r2, [sp, #104]	; 0x68
 8016886:	b29b      	uxth	r3, r3
 8016888:	9324      	str	r3, [sp, #144]	; 0x90
 801688a:	4633      	mov	r3, r6
 801688c:	465e      	mov	r6, fp
 801688e:	469b      	mov	fp, r3
 8016890:	a83e      	add	r0, sp, #248	; 0xf8
 8016892:	f001 fc4f 	bl	8018134 <ai_padding_opt_phase1>
 8016896:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016898:	9a5a      	ldr	r2, [sp, #360]	; 0x168
 801689a:	fb05 f303 	mul.w	r3, r5, r3
 801689e:	990c      	ldr	r1, [sp, #48]	; 0x30
 80168a0:	fb01 2303 	mla	r3, r1, r3, r2
 80168a4:	9316      	str	r3, [sp, #88]	; 0x58
 80168a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	f000 816f 	beq.w	8016b8c <forward_lite_conv2d_rgb_sssa8_ch+0x464>
 80168ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	f000 8157 	beq.w	8016b64 <forward_lite_conv2d_rgb_sssa8_ch+0x43c>
 80168b6:	b2a3      	uxth	r3, r4
 80168b8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80168ba:	edcd 8a1d 	vstr	s17, [sp, #116]	; 0x74
 80168be:	931e      	str	r3, [sp, #120]	; 0x78
 80168c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80168c2:	1a9b      	subs	r3, r3, r2
 80168c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80168c6:	9323      	str	r3, [sp, #140]	; 0x8c
 80168c8:	fb02 3705 	mla	r7, r2, r5, r3
 80168cc:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
 80168d0:	930e      	str	r3, [sp, #56]	; 0x38
 80168d2:	46ba      	mov	sl, r7
 80168d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80168d6:	9318      	str	r3, [sp, #96]	; 0x60
 80168d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80168da:	9319      	str	r3, [sp, #100]	; 0x64
 80168dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80168de:	9311      	str	r3, [sp, #68]	; 0x44
 80168e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80168e2:	9314      	str	r3, [sp, #80]	; 0x50
 80168e4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80168e6:	ee08 3a10 	vmov	s16, r3
 80168ea:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80168ec:	9317      	str	r3, [sp, #92]	; 0x5c
 80168ee:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 80168f0:	9315      	str	r3, [sp, #84]	; 0x54
 80168f2:	9b42      	ldr	r3, [sp, #264]	; 0x108
 80168f4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80168f6:	933f      	str	r3, [sp, #252]	; 0xfc
 80168f8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80168fa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80168fc:	9340      	str	r3, [sp, #256]	; 0x100
 80168fe:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 8016902:	9113      	str	r1, [sp, #76]	; 0x4c
 8016904:	2100      	movs	r1, #0
 8016906:	9309      	str	r3, [sp, #36]	; 0x24
 8016908:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801690a:	923e      	str	r2, [sp, #248]	; 0xf8
 801690c:	9306      	str	r3, [sp, #24]
 801690e:	910a      	str	r1, [sp, #40]	; 0x28
 8016910:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016912:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 8016916:	2a00      	cmp	r2, #0
 8016918:	d071      	beq.n	80169fe <forward_lite_conv2d_rgb_sssa8_ch+0x2d6>
 801691a:	3a01      	subs	r2, #1
 801691c:	923e      	str	r2, [sp, #248]	; 0xf8
 801691e:	2201      	movs	r2, #1
 8016920:	f8ad 211e 	strh.w	r2, [sp, #286]	; 0x11e
 8016924:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016926:	4552      	cmp	r2, sl
 8016928:	da51      	bge.n	80169ce <forward_lite_conv2d_rgb_sssa8_ch+0x2a6>
 801692a:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 801692e:	4696      	mov	lr, r2
 8016930:	4615      	mov	r5, r2
 8016932:	f8cd a01c 	str.w	sl, [sp, #28]
 8016936:	4547      	cmp	r7, r8
 8016938:	dd40      	ble.n	80169bc <forward_lite_conv2d_rgb_sssa8_ch+0x294>
 801693a:	fb05 8006 	mla	r0, r5, r6, r8
 801693e:	42ae      	cmp	r6, r5
 8016940:	f103 0206 	add.w	r2, r3, #6
 8016944:	9b08      	ldr	r3, [sp, #32]
 8016946:	bfcc      	ite	gt
 8016948:	2500      	movgt	r5, #0
 801694a:	2501      	movle	r5, #1
 801694c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8016950:	4641      	mov	r1, r8
 8016952:	ea45 75de 	orr.w	r5, r5, lr, lsr #31
 8016956:	4418      	add	r0, r3
 8016958:	e00b      	b.n	8016972 <forward_lite_conv2d_rgb_sssa8_ch+0x24a>
 801695a:	f36b 441f 	bfi	r4, fp, #16, #16
 801695e:	f842 4c04 	str.w	r4, [r2, #-4]
 8016962:	3101      	adds	r1, #1
 8016964:	f822 cc06 	strh.w	ip, [r2, #-6]
 8016968:	3003      	adds	r0, #3
 801696a:	3206      	adds	r2, #6
 801696c:	b20c      	sxth	r4, r1
 801696e:	42a7      	cmp	r7, r4
 8016970:	dd24      	ble.n	80169bc <forward_lite_conv2d_rgb_sssa8_ch+0x294>
 8016972:	2400      	movs	r4, #0
 8016974:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8016978:	f1a2 0906 	sub.w	r9, r2, #6
 801697c:	46dc      	mov	ip, fp
 801697e:	f36b 040f 	bfi	r4, fp, #0, #16
 8016982:	4613      	mov	r3, r2
 8016984:	d1e9      	bne.n	801695a <forward_lite_conv2d_rgb_sssa8_ch+0x232>
 8016986:	2d00      	cmp	r5, #0
 8016988:	d1e7      	bne.n	801695a <forward_lite_conv2d_rgb_sssa8_ch+0x232>
 801698a:	428e      	cmp	r6, r1
 801698c:	dde5      	ble.n	801695a <forward_lite_conv2d_rgb_sssa8_ch+0x232>
 801698e:	6804      	ldr	r4, [r0, #0]
 8016990:	fa2f fa84 	sxtb16	sl, r4
 8016994:	ea4f 2434 	mov.w	r4, r4, ror #8
 8016998:	fa0f fc8a 	sxth.w	ip, sl
 801699c:	fa2f f484 	sxtb16	r4, r4
 80169a0:	eac4 040a 	pkhbt	r4, r4, sl
 80169a4:	f8c9 4002 	str.w	r4, [r9, #2]
 80169a8:	e7db      	b.n	8016962 <forward_lite_conv2d_rgb_sssa8_ch+0x23a>
 80169aa:	42bc      	cmp	r4, r7
 80169ac:	f842 5c04 	str.w	r5, [r2, #-4]
 80169b0:	f102 0204 	add.w	r2, r2, #4
 80169b4:	f47f aefc 	bne.w	80167b0 <forward_lite_conv2d_rgb_sssa8_ch+0x88>
 80169b8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80169ba:	e70d      	b.n	80167d8 <forward_lite_conv2d_rgb_sssa8_ch+0xb0>
 80169bc:	f10e 0e01 	add.w	lr, lr, #1
 80169c0:	9a07      	ldr	r2, [sp, #28]
 80169c2:	fa0f fe8e 	sxth.w	lr, lr
 80169c6:	4596      	cmp	lr, r2
 80169c8:	4675      	mov	r5, lr
 80169ca:	dbb4      	blt.n	8016936 <forward_lite_conv2d_rgb_sssa8_ch+0x20e>
 80169cc:	4692      	mov	sl, r2
 80169ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80169d0:	429a      	cmp	r2, r3
 80169d2:	d057      	beq.n	8016a84 <forward_lite_conv2d_rgb_sssa8_ch+0x35c>
 80169d4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80169d6:	9a06      	ldr	r2, [sp, #24]
 80169d8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80169da:	4422      	add	r2, r4
 80169dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80169de:	3001      	adds	r0, #1
 80169e0:	b292      	uxth	r2, r2
 80169e2:	4421      	add	r1, r4
 80169e4:	b200      	sxth	r0, r0
 80169e6:	9206      	str	r2, [sp, #24]
 80169e8:	b289      	uxth	r1, r1
 80169ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80169ec:	900a      	str	r0, [sp, #40]	; 0x28
 80169ee:	4282      	cmp	r2, r0
 80169f0:	9109      	str	r1, [sp, #36]	; 0x24
 80169f2:	dd6d      	ble.n	8016ad0 <forward_lite_conv2d_rgb_sssa8_ch+0x3a8>
 80169f4:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 80169f6:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 80169fa:	2a00      	cmp	r2, #0
 80169fc:	d18d      	bne.n	801691a <forward_lite_conv2d_rgb_sssa8_ch+0x1f2>
 80169fe:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8016a00:	b932      	cbnz	r2, 8016a10 <forward_lite_conv2d_rgb_sssa8_ch+0x2e8>
 8016a02:	9a40      	ldr	r2, [sp, #256]	; 0x100
 8016a04:	3a01      	subs	r2, #1
 8016a06:	9240      	str	r2, [sp, #256]	; 0x100
 8016a08:	2201      	movs	r2, #1
 8016a0a:	f8ad 211e 	strh.w	r2, [sp, #286]	; 0x11e
 8016a0e:	e789      	b.n	8016924 <forward_lite_conv2d_rgb_sssa8_ch+0x1fc>
 8016a10:	3a01      	subs	r2, #1
 8016a12:	923f      	str	r2, [sp, #252]	; 0xfc
 8016a14:	f8bd 211c 	ldrh.w	r2, [sp, #284]	; 0x11c
 8016a18:	2a01      	cmp	r2, #1
 8016a1a:	f8ad 211e 	strh.w	r2, [sp, #286]	; 0x11e
 8016a1e:	d081      	beq.n	8016924 <forward_lite_conv2d_rgb_sssa8_ch+0x1fc>
 8016a20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016a22:	4552      	cmp	r2, sl
 8016a24:	dad3      	bge.n	80169ce <forward_lite_conv2d_rgb_sssa8_ch+0x2a6>
 8016a26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016a28:	4615      	mov	r5, r2
 8016a2a:	9806      	ldr	r0, [sp, #24]
 8016a2c:	1e4f      	subs	r7, r1, #1
 8016a2e:	fa0f fc81 	sxth.w	ip, r1
 8016a32:	9c08      	ldr	r4, [sp, #32]
 8016a34:	4611      	mov	r1, r2
 8016a36:	1a3f      	subs	r7, r7, r0
 8016a38:	b2bf      	uxth	r7, r7
 8016a3a:	3701      	adds	r7, #1
 8016a3c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8016a40:	007f      	lsls	r7, r7, #1
 8016a42:	45c4      	cmp	ip, r8
 8016a44:	dd16      	ble.n	8016a74 <forward_lite_conv2d_rgb_sssa8_ch+0x34c>
 8016a46:	fb01 8106 	mla	r1, r1, r6, r8
 8016a4a:	19d8      	adds	r0, r3, r7
 8016a4c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8016a50:	4421      	add	r1, r4
 8016a52:	3306      	adds	r3, #6
 8016a54:	f851 2b03 	ldr.w	r2, [r1], #3
 8016a58:	fa2f fe82 	sxtb16	lr, r2
 8016a5c:	4283      	cmp	r3, r0
 8016a5e:	ea4f 2232 	mov.w	r2, r2, ror #8
 8016a62:	f823 ec06 	strh.w	lr, [r3, #-6]
 8016a66:	fa2f f282 	sxtb16	r2, r2
 8016a6a:	eac2 020e 	pkhbt	r2, r2, lr
 8016a6e:	f843 2c04 	str.w	r2, [r3, #-4]
 8016a72:	d1ee      	bne.n	8016a52 <forward_lite_conv2d_rgb_sssa8_ch+0x32a>
 8016a74:	3501      	adds	r5, #1
 8016a76:	b22d      	sxth	r5, r5
 8016a78:	4555      	cmp	r5, sl
 8016a7a:	4629      	mov	r1, r5
 8016a7c:	dbe1      	blt.n	8016a42 <forward_lite_conv2d_rgb_sssa8_ch+0x31a>
 8016a7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016a80:	429a      	cmp	r2, r3
 8016a82:	d1a7      	bne.n	80169d4 <forward_lite_conv2d_rgb_sssa8_ch+0x2ac>
 8016a84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016a86:	4610      	mov	r0, r2
 8016a88:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8016a8a:	ee18 2a10 	vmov	r2, s16
 8016a8e:	9305      	str	r3, [sp, #20]
 8016a90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016a92:	9304      	str	r3, [sp, #16]
 8016a94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016a96:	9303      	str	r3, [sp, #12]
 8016a98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016a9a:	9302      	str	r3, [sp, #8]
 8016a9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016a9e:	9301      	str	r3, [sp, #4]
 8016aa0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016aa2:	9300      	str	r3, [sp, #0]
 8016aa4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016aa6:	f003 fa69 	bl	8019f7c <st_sssa8_ch_nn_mat_mult_kernel_opt>
 8016aaa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8016aac:	9b06      	ldr	r3, [sp, #24]
 8016aae:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016ab0:	4423      	add	r3, r4
 8016ab2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016ab4:	3101      	adds	r1, #1
 8016ab6:	9013      	str	r0, [sp, #76]	; 0x4c
 8016ab8:	b29b      	uxth	r3, r3
 8016aba:	4422      	add	r2, r4
 8016abc:	b209      	sxth	r1, r1
 8016abe:	9306      	str	r3, [sp, #24]
 8016ac0:	b292      	uxth	r2, r2
 8016ac2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016ac4:	910a      	str	r1, [sp, #40]	; 0x28
 8016ac6:	428b      	cmp	r3, r1
 8016ac8:	9209      	str	r2, [sp, #36]	; 0x24
 8016aca:	dd16      	ble.n	8016afa <forward_lite_conv2d_rgb_sssa8_ch+0x3d2>
 8016acc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016ace:	e791      	b.n	80169f4 <forward_lite_conv2d_rgb_sssa8_ch+0x2cc>
 8016ad0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8016ad2:	4299      	cmp	r1, r3
 8016ad4:	d011      	beq.n	8016afa <forward_lite_conv2d_rgb_sssa8_ch+0x3d2>
 8016ad6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016ad8:	ee18 2a10 	vmov	r2, s16
 8016adc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016ade:	9305      	str	r3, [sp, #20]
 8016ae0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016ae2:	9304      	str	r3, [sp, #16]
 8016ae4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016ae6:	9303      	str	r3, [sp, #12]
 8016ae8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016aea:	9302      	str	r3, [sp, #8]
 8016aec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016aee:	9301      	str	r3, [sp, #4]
 8016af0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016af2:	9300      	str	r3, [sp, #0]
 8016af4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016af6:	f003 fd61 	bl	801a5bc <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 8016afa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016afc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016afe:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016b00:	1a9b      	subs	r3, r3, r2
 8016b02:	4411      	add	r1, r2
 8016b04:	b29b      	uxth	r3, r3
 8016b06:	9116      	str	r1, [sp, #88]	; 0x58
 8016b08:	429a      	cmp	r2, r3
 8016b0a:	9319      	str	r3, [sp, #100]	; 0x64
 8016b0c:	bf28      	it	cs
 8016b0e:	461a      	movcs	r2, r3
 8016b10:	b294      	uxth	r4, r2
 8016b12:	b954      	cbnz	r4, 8016b2a <forward_lite_conv2d_rgb_sssa8_ch+0x402>
 8016b14:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016b16:	3b01      	subs	r3, #1
 8016b18:	b29b      	uxth	r3, r3
 8016b1a:	461a      	mov	r2, r3
 8016b1c:	9318      	str	r3, [sp, #96]	; 0x60
 8016b1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016b22:	429a      	cmp	r2, r3
 8016b24:	d020      	beq.n	8016b68 <forward_lite_conv2d_rgb_sssa8_ch+0x440>
 8016b26:	9411      	str	r4, [sp, #68]	; 0x44
 8016b28:	e6e3      	b.n	80168f2 <forward_lite_conv2d_rgb_sssa8_ch+0x1ca>
 8016b2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016b2e:	991d      	ldr	r1, [sp, #116]	; 0x74
 8016b30:	fb02 1003 	mla	r0, r2, r3, r1
 8016b34:	ee18 1a10 	vmov	r1, s16
 8016b38:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8016b3c:	901d      	str	r0, [sp, #116]	; 0x74
 8016b3e:	ee08 1a10 	vmov	s16, r1
 8016b42:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8016b44:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8016b48:	9117      	str	r1, [sp, #92]	; 0x5c
 8016b4a:	9915      	ldr	r1, [sp, #84]	; 0x54
 8016b4c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8016b50:	9115      	str	r1, [sp, #84]	; 0x54
 8016b52:	9914      	ldr	r1, [sp, #80]	; 0x50
 8016b54:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8016b58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016b5a:	9314      	str	r3, [sp, #80]	; 0x50
 8016b5c:	4623      	mov	r3, r4
 8016b5e:	f001 fb03 	bl	8018168 <st_int8_to16_dual>
 8016b62:	e7d7      	b.n	8016b14 <forward_lite_conv2d_rgb_sssa8_ch+0x3ec>
 8016b64:	b2a3      	uxth	r3, r4
 8016b66:	931e      	str	r3, [sp, #120]	; 0x78
 8016b68:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016b6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016b6c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8016b6e:	4413      	add	r3, r2
 8016b70:	3401      	adds	r4, #1
 8016b72:	b29b      	uxth	r3, r3
 8016b74:	b224      	sxth	r4, r4
 8016b76:	931a      	str	r3, [sp, #104]	; 0x68
 8016b78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016b7a:	4625      	mov	r5, r4
 8016b7c:	42a3      	cmp	r3, r4
 8016b7e:	f73f ae87 	bgt.w	8016890 <forward_lite_conv2d_rgb_sssa8_ch+0x168>
 8016b82:	b049      	add	sp, #292	; 0x124
 8016b84:	ecbd 8b02 	vpop	{d8}
 8016b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016b8e:	ee18 0a90 	vmov	r0, s17
 8016b92:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016b94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016b96:	f001 fae7 	bl	8018168 <st_int8_to16_dual>
 8016b9a:	e688      	b.n	80168ae <forward_lite_conv2d_rgb_sssa8_ch+0x186>
 8016b9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016b9e:	ee18 0a90 	vmov	r0, s17
 8016ba2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016ba4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016ba6:	f001 fadf 	bl	8018168 <st_int8_to16_dual>
 8016baa:	2301      	movs	r3, #1
 8016bac:	9320      	str	r3, [sp, #128]	; 0x80
 8016bae:	e646      	b.n	801683e <forward_lite_conv2d_rgb_sssa8_ch+0x116>

08016bb0 <forward_lite_dw_3x3_sssa8_ch>:
 8016bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bb4:	b09f      	sub	sp, #124	; 0x7c
 8016bb6:	461c      	mov	r4, r3
 8016bb8:	f8bd 20a8 	ldrh.w	r2, [sp, #168]	; 0xa8
 8016bbc:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8016bc0:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	; 0xa4
 8016bc4:	9207      	str	r2, [sp, #28]
 8016bc6:	f99d 20b0 	ldrsb.w	r2, [sp, #176]	; 0xb0
 8016bca:	9306      	str	r3, [sp, #24]
 8016bcc:	9211      	str	r2, [sp, #68]	; 0x44
 8016bce:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
 8016bd2:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8016bd4:	9215      	str	r2, [sp, #84]	; 0x54
 8016bd6:	f8bd 20c0 	ldrh.w	r2, [sp, #192]	; 0xc0
 8016bda:	f8dd 80a0 	ldr.w	r8, [sp, #160]	; 0xa0
 8016bde:	f99d 70b4 	ldrsb.w	r7, [sp, #180]	; 0xb4
 8016be2:	f8dd a0b8 	ldr.w	sl, [sp, #184]	; 0xb8
 8016be6:	901b      	str	r0, [sp, #108]	; 0x6c
 8016be8:	9105      	str	r1, [sp, #20]
 8016bea:	9219      	str	r2, [sp, #100]	; 0x64
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	f000 8461 	beq.w	80174b4 <forward_lite_dw_3x3_sssa8_ch+0x904>
 8016bf2:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 8016bf6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8016bf8:	444b      	add	r3, r9
 8016bfa:	44a1      	add	r9, r4
 8016bfc:	9312      	str	r3, [sp, #72]	; 0x48
 8016bfe:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 8016c02:	461a      	mov	r2, r3
 8016c04:	9314      	str	r3, [sp, #80]	; 0x50
 8016c06:	f06f 0315 	mvn.w	r3, #21
 8016c0a:	fb03 2304 	mla	r3, r3, r4, r2
 8016c0e:	9313      	str	r3, [sp, #76]	; 0x4c
 8016c10:	b1d4      	cbz	r4, 8016c48 <forward_lite_dw_3x3_sssa8_ch+0x98>
 8016c12:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016c14:	2100      	movs	r1, #0
 8016c16:	2601      	movs	r6, #1
 8016c18:	f1a3 0e02 	sub.w	lr, r3, #2
 8016c1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016c1e:	1d18      	adds	r0, r3, #4
 8016c20:	f93e 3f02 	ldrsh.w	r3, [lr, #2]!
 8016c24:	3101      	adds	r1, #1
 8016c26:	1e5a      	subs	r2, r3, #1
 8016c28:	fa06 f503 	lsl.w	r5, r6, r3
 8016c2c:	fa07 f303 	lsl.w	r3, r7, r3
 8016c30:	b292      	uxth	r2, r2
 8016c32:	eb03 0355 	add.w	r3, r3, r5, lsr #1
 8016c36:	2a14      	cmp	r2, #20
 8016c38:	f200 8433 	bhi.w	80174a2 <forward_lite_dw_3x3_sssa8_ch+0x8f2>
 8016c3c:	428c      	cmp	r4, r1
 8016c3e:	f840 3c04 	str.w	r3, [r0, #-4]
 8016c42:	f100 0004 	add.w	r0, r0, #4
 8016c46:	dceb      	bgt.n	8016c20 <forward_lite_dw_3x3_sssa8_ch+0x70>
 8016c48:	9a06      	ldr	r2, [sp, #24]
 8016c4a:	2c03      	cmp	r4, #3
 8016c4c:	9b05      	ldr	r3, [sp, #20]
 8016c4e:	fb04 f202 	mul.w	r2, r4, r2
 8016c52:	fb04 f303 	mul.w	r3, r4, r3
 8016c56:	9216      	str	r2, [sp, #88]	; 0x58
 8016c58:	9a07      	ldr	r2, [sp, #28]
 8016c5a:	fb03 f202 	mul.w	r2, r3, r2
 8016c5e:	eba3 030c 	sub.w	r3, r3, ip
 8016c62:	9305      	str	r3, [sp, #20]
 8016c64:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016c66:	921a      	str	r2, [sp, #104]	; 0x68
 8016c68:	f1c3 0300 	rsb	r3, r3, #0
 8016c6c:	eac3 4603 	pkhbt	r6, r3, r3, lsl #16
 8016c70:	bf8c      	ite	hi
 8016c72:	1ee3      	subhi	r3, r4, #3
 8016c74:	2300      	movls	r3, #0
 8016c76:	930d      	str	r3, [sp, #52]	; 0x34
 8016c78:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	f000 83a5 	beq.w	80173ca <forward_lite_dw_3x3_sssa8_ch+0x81a>
 8016c80:	f004 0303 	and.w	r3, r4, #3
 8016c84:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016c86:	930f      	str	r3, [sp, #60]	; 0x3c
 8016c88:	2a00      	cmp	r2, #0
 8016c8a:	f000 839e 	beq.w	80173ca <forward_lite_dw_3x3_sssa8_ch+0x81a>
 8016c8e:	3b01      	subs	r3, #1
 8016c90:	46b0      	mov	r8, r6
 8016c92:	46d1      	mov	r9, sl
 8016c94:	940c      	str	r4, [sp, #48]	; 0x30
 8016c96:	b29b      	uxth	r3, r3
 8016c98:	9317      	str	r3, [sp, #92]	; 0x5c
 8016c9a:	2300      	movs	r3, #0
 8016c9c:	9318      	str	r3, [sp, #96]	; 0x60
 8016c9e:	46cc      	mov	ip, r9
 8016ca0:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 8016ca4:	fb03 2301 	mla	r3, r3, r1, r2
 8016ca8:	930a      	str	r3, [sp, #40]	; 0x28
 8016caa:	2300      	movs	r3, #0
 8016cac:	9310      	str	r3, [sp, #64]	; 0x40
 8016cae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	f000 823f 	beq.w	8017134 <forward_lite_dw_3x3_sssa8_ch+0x584>
 8016cb6:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 8016cba:	2400      	movs	r4, #0
 8016cbc:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8016cbe:	930e      	str	r3, [sp, #56]	; 0x38
 8016cc0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8016cc2:	9914      	ldr	r1, [sp, #80]	; 0x50
 8016cc4:	f103 0010 	add.w	r0, r3, #16
 8016cc8:	9202      	str	r2, [sp, #8]
 8016cca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016ccc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016cce:	9101      	str	r1, [sp, #4]
 8016cd0:	3348      	adds	r3, #72	; 0x48
 8016cd2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016cd4:	f8cd c010 	str.w	ip, [sp, #16]
 8016cd8:	9407      	str	r4, [sp, #28]
 8016cda:	9203      	str	r2, [sp, #12]
 8016cdc:	9006      	str	r0, [sp, #24]
 8016cde:	e092      	b.n	8016e06 <forward_lite_dw_3x3_sssa8_ch+0x256>
 8016ce0:	f8dd c008 	ldr.w	ip, [sp, #8]
 8016ce4:	f1a2 0902 	sub.w	r9, r2, #2
 8016ce8:	2401      	movs	r4, #1
 8016cea:	9d03      	ldr	r5, [sp, #12]
 8016cec:	3a01      	subs	r2, #1
 8016cee:	1c86      	adds	r6, r0, #2
 8016cf0:	fa04 f909 	lsl.w	r9, r4, r9
 8016cf4:	f85c 4b04 	ldr.w	r4, [ip], #4
 8016cf8:	fb57 9704 	smmla	r7, r7, r4, r9
 8016cfc:	fa47 f202 	asr.w	r2, r7, r2
 8016d00:	f855 7b04 	ldr.w	r7, [r5], #4
 8016d04:	443a      	add	r2, r7
 8016d06:	f302 0207 	ssat	r2, #8, r2
 8016d0a:	f8dd a010 	ldr.w	sl, [sp, #16]
 8016d0e:	f80a 2b01 	strb.w	r2, [sl], #1
 8016d12:	f9b6 4000 	ldrsh.w	r4, [r6]
 8016d16:	2c15      	cmp	r4, #21
 8016d18:	f340 8148 	ble.w	8016fac <forward_lite_dw_3x3_sssa8_ch+0x3fc>
 8016d1c:	682e      	ldr	r6, [r5, #0]
 8016d1e:	2001      	movs	r0, #1
 8016d20:	1ea5      	subs	r5, r4, #2
 8016d22:	f8dc 2000 	ldr.w	r2, [ip]
 8016d26:	3c01      	subs	r4, #1
 8016d28:	fa00 f505 	lsl.w	r5, r0, r5
 8016d2c:	9802      	ldr	r0, [sp, #8]
 8016d2e:	fb5e 5e02 	smmla	lr, lr, r2, r5
 8016d32:	9a01      	ldr	r2, [sp, #4]
 8016d34:	fa4e f404 	asr.w	r4, lr, r4
 8016d38:	f100 0708 	add.w	r7, r0, #8
 8016d3c:	f102 0904 	add.w	r9, r2, #4
 8016d40:	9a03      	ldr	r2, [sp, #12]
 8016d42:	4426      	add	r6, r4
 8016d44:	f102 0c08 	add.w	ip, r2, #8
 8016d48:	f306 0607 	ssat	r6, #8, r6
 8016d4c:	9a04      	ldr	r2, [sp, #16]
 8016d4e:	f88a 6000 	strb.w	r6, [sl]
 8016d52:	1c95      	adds	r5, r2, #2
 8016d54:	f9b9 4000 	ldrsh.w	r4, [r9]
 8016d58:	2c15      	cmp	r4, #21
 8016d5a:	f340 8148 	ble.w	8016fee <forward_lite_dw_3x3_sssa8_ch+0x43e>
 8016d5e:	f1a4 0902 	sub.w	r9, r4, #2
 8016d62:	2001      	movs	r0, #1
 8016d64:	683a      	ldr	r2, [r7, #0]
 8016d66:	3c01      	subs	r4, #1
 8016d68:	fa00 f909 	lsl.w	r9, r0, r9
 8016d6c:	f8dc 6000 	ldr.w	r6, [ip]
 8016d70:	fb5b 9902 	smmla	r9, fp, r2, r9
 8016d74:	9a01      	ldr	r2, [sp, #4]
 8016d76:	fa49 f904 	asr.w	r9, r9, r4
 8016d7a:	9802      	ldr	r0, [sp, #8]
 8016d7c:	f102 0e06 	add.w	lr, r2, #6
 8016d80:	9a03      	ldr	r2, [sp, #12]
 8016d82:	f100 070c 	add.w	r7, r0, #12
 8016d86:	444e      	add	r6, r9
 8016d88:	f102 0a0c 	add.w	sl, r2, #12
 8016d8c:	f306 0607 	ssat	r6, #8, r6
 8016d90:	9a04      	ldr	r2, [sp, #16]
 8016d92:	702e      	strb	r6, [r5, #0]
 8016d94:	f102 0c03 	add.w	ip, r2, #3
 8016d98:	f9be 2000 	ldrsh.w	r2, [lr]
 8016d9c:	2a15      	cmp	r2, #21
 8016d9e:	f340 8145 	ble.w	801702c <forward_lite_dw_3x3_sssa8_ch+0x47c>
 8016da2:	9801      	ldr	r0, [sp, #4]
 8016da4:	683d      	ldr	r5, [r7, #0]
 8016da6:	f100 0e08 	add.w	lr, r0, #8
 8016daa:	f8da 7000 	ldr.w	r7, [sl]
 8016dae:	2001      	movs	r0, #1
 8016db0:	f1a2 0a02 	sub.w	sl, r2, #2
 8016db4:	9e02      	ldr	r6, [sp, #8]
 8016db6:	3a01      	subs	r2, #1
 8016db8:	9c03      	ldr	r4, [sp, #12]
 8016dba:	fa00 fa0a 	lsl.w	sl, r0, sl
 8016dbe:	3610      	adds	r6, #16
 8016dc0:	9808      	ldr	r0, [sp, #32]
 8016dc2:	3410      	adds	r4, #16
 8016dc4:	46f1      	mov	r9, lr
 8016dc6:	fb50 a505 	smmla	r5, r0, r5, sl
 8016dca:	fa45 f202 	asr.w	r2, r5, r2
 8016dce:	46b3      	mov	fp, r6
 8016dd0:	443a      	add	r2, r7
 8016dd2:	4627      	mov	r7, r4
 8016dd4:	f302 0207 	ssat	r2, #8, r2
 8016dd8:	f88c 2000 	strb.w	r2, [ip]
 8016ddc:	9a04      	ldr	r2, [sp, #16]
 8016dde:	3204      	adds	r2, #4
 8016de0:	4694      	mov	ip, r2
 8016de2:	9d07      	ldr	r5, [sp, #28]
 8016de4:	3348      	adds	r3, #72	; 0x48
 8016de6:	9806      	ldr	r0, [sp, #24]
 8016de8:	3504      	adds	r5, #4
 8016dea:	f8cd e004 	str.w	lr, [sp, #4]
 8016dee:	3010      	adds	r0, #16
 8016df0:	9602      	str	r6, [sp, #8]
 8016df2:	e9cd 4203 	strd	r4, r2, [sp, #12]
 8016df6:	9006      	str	r0, [sp, #24]
 8016df8:	b2a8      	uxth	r0, r5
 8016dfa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016dfc:	4604      	mov	r4, r0
 8016dfe:	9007      	str	r0, [sp, #28]
 8016e00:	4290      	cmp	r0, r2
 8016e02:	f080 81a2 	bcs.w	801714a <forward_lite_dw_3x3_sssa8_ch+0x59a>
 8016e06:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016e08:	f853 5c48 	ldr.w	r5, [r3, #-72]
 8016e0c:	1902      	adds	r2, r0, r4
 8016e0e:	5904      	ldr	r4, [r0, r4]
 8016e10:	9806      	ldr	r0, [sp, #24]
 8016e12:	f852 c001 	ldr.w	ip, [r2, r1]
 8016e16:	eb02 0741 	add.w	r7, r2, r1, lsl #1
 8016e1a:	eac4 460c 	pkhbt	r6, r4, ip, lsl #16
 8016e1e:	900b      	str	r0, [sp, #44]	; 0x2c
 8016e20:	eacc 4c24 	pkhtb	ip, ip, r4, asr #16
 8016e24:	9309      	str	r3, [sp, #36]	; 0x24
 8016e26:	f850 4c10 	ldr.w	r4, [r0, #-16]
 8016e2a:	fa28 fe86 	sxtab16	lr, r8, r6
 8016e2e:	fb25 440e 	smlad	r4, r5, lr, r4
 8016e32:	fa28 fe96 	sxtab16	lr, r8, r6, ror #8
 8016e36:	f853 5c44 	ldr.w	r5, [r3, #-68]
 8016e3a:	f850 6c0c 	ldr.w	r6, [r0, #-12]
 8016e3e:	fb25 6e0e 	smlad	lr, r5, lr, r6
 8016e42:	f853 5c40 	ldr.w	r5, [r3, #-64]
 8016e46:	f850 6c08 	ldr.w	r6, [r0, #-8]
 8016e4a:	fa28 f98c 	sxtab16	r9, r8, ip
 8016e4e:	fb25 6909 	smlad	r9, r5, r9, r6
 8016e52:	fa28 fc9c 	sxtab16	ip, r8, ip, ror #8
 8016e56:	f853 5c3c 	ldr.w	r5, [r3, #-60]
 8016e5a:	f850 6c04 	ldr.w	r6, [r0, #-4]
 8016e5e:	fb25 6c0c 	smlad	ip, r5, ip, r6
 8016e62:	9d05      	ldr	r5, [sp, #20]
 8016e64:	f852 2011 	ldr.w	r2, [r2, r1, lsl #1]
 8016e68:	eb07 0a05 	add.w	sl, r7, r5
 8016e6c:	597e      	ldr	r6, [r7, r5]
 8016e6e:	f853 7c38 	ldr.w	r7, [r3, #-56]
 8016e72:	eac2 4506 	pkhbt	r5, r2, r6, lsl #16
 8016e76:	eb0a 0b01 	add.w	fp, sl, r1
 8016e7a:	eac6 4222 	pkhtb	r2, r6, r2, asr #16
 8016e7e:	fa28 f685 	sxtab16	r6, r8, r5
 8016e82:	fb27 4406 	smlad	r4, r7, r6, r4
 8016e86:	fa28 f595 	sxtab16	r5, r8, r5, ror #8
 8016e8a:	f853 0c34 	ldr.w	r0, [r3, #-52]
 8016e8e:	fb20 ee05 	smlad	lr, r0, r5, lr
 8016e92:	f853 0c30 	ldr.w	r0, [r3, #-48]
 8016e96:	fa28 f582 	sxtab16	r5, r8, r2
 8016e9a:	fb20 9905 	smlad	r9, r0, r5, r9
 8016e9e:	fa28 f292 	sxtab16	r2, r8, r2, ror #8
 8016ea2:	f853 0c2c 	ldr.w	r0, [r3, #-44]
 8016ea6:	fb20 cc02 	smlad	ip, r0, r2, ip
 8016eaa:	448b      	add	fp, r1
 8016eac:	9d05      	ldr	r5, [sp, #20]
 8016eae:	f85a 2001 	ldr.w	r2, [sl, r1]
 8016eb2:	f853 7c28 	ldr.w	r7, [r3, #-40]
 8016eb6:	445d      	add	r5, fp
 8016eb8:	f85a a011 	ldr.w	sl, [sl, r1, lsl #1]
 8016ebc:	eac2 460a 	pkhbt	r6, r2, sl, lsl #16
 8016ec0:	eaca 4a22 	pkhtb	sl, sl, r2, asr #16
 8016ec4:	fa28 f286 	sxtab16	r2, r8, r6
 8016ec8:	fb27 4402 	smlad	r4, r7, r2, r4
 8016ecc:	fa28 f696 	sxtab16	r6, r8, r6, ror #8
 8016ed0:	f853 0c24 	ldr.w	r0, [r3, #-36]
 8016ed4:	fb20 ee06 	smlad	lr, r0, r6, lr
 8016ed8:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8016edc:	fa28 f68a 	sxtab16	r6, r8, sl
 8016ee0:	fb22 9906 	smlad	r9, r2, r6, r9
 8016ee4:	fa28 fa9a 	sxtab16	sl, r8, sl, ror #8
 8016ee8:	f853 0c1c 	ldr.w	r0, [r3, #-28]
 8016eec:	fb20 cc0a 	smlad	ip, r0, sl, ip
 8016ef0:	9a05      	ldr	r2, [sp, #20]
 8016ef2:	f855 a001 	ldr.w	sl, [r5, r1]
 8016ef6:	f85b 6002 	ldr.w	r6, [fp, r2]
 8016efa:	f853 7c18 	ldr.w	r7, [r3, #-24]
 8016efe:	eac6 420a 	pkhbt	r2, r6, sl, lsl #16
 8016f02:	eaca 4a26 	pkhtb	sl, sl, r6, asr #16
 8016f06:	fa28 f682 	sxtab16	r6, r8, r2
 8016f0a:	fb27 4706 	smlad	r7, r7, r6, r4
 8016f0e:	fa28 f292 	sxtab16	r2, r8, r2, ror #8
 8016f12:	f853 0c14 	ldr.w	r0, [r3, #-20]
 8016f16:	fb20 ee02 	smlad	lr, r0, r2, lr
 8016f1a:	f853 0c10 	ldr.w	r0, [r3, #-16]
 8016f1e:	fa28 f28a 	sxtab16	r2, r8, sl
 8016f22:	fb20 9902 	smlad	r9, r0, r2, r9
 8016f26:	fa28 fa9a 	sxtab16	sl, r8, sl, ror #8
 8016f2a:	f853 2c0c 	ldr.w	r2, [r3, #-12]
 8016f2e:	fb22 cc0a 	smlad	ip, r2, sl, ip
 8016f32:	f855 5011 	ldr.w	r5, [r5, r1, lsl #1]
 8016f36:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016f38:	b26c      	sxtb	r4, r5
 8016f3a:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8016f3e:	f345 4b07 	sbfx	fp, r5, #16, #8
 8016f42:	f833 ac04 	ldrh.w	sl, [r3, #-4]
 8016f46:	1a24      	subs	r4, r4, r0
 8016f48:	f833 6c06 	ldrh.w	r6, [r3, #-6]
 8016f4c:	ebab 0b00 	sub.w	fp, fp, r0
 8016f50:	fb12 7704 	smlabb	r7, r2, r4, r7
 8016f54:	f345 2207 	sbfx	r2, r5, #8, #8
 8016f58:	fb1a 9b0b 	smlabb	fp, sl, fp, r9
 8016f5c:	ebc0 6525 	rsb	r5, r0, r5, asr #24
 8016f60:	1a12      	subs	r2, r2, r0
 8016f62:	f833 ac02 	ldrh.w	sl, [r3, #-2]
 8016f66:	9801      	ldr	r0, [sp, #4]
 8016f68:	fb16 ee02 	smlabb	lr, r6, r2, lr
 8016f6c:	fb1a c205 	smlabb	r2, sl, r5, ip
 8016f70:	9208      	str	r2, [sp, #32]
 8016f72:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016f76:	2a15      	cmp	r2, #21
 8016f78:	f73f aeb2 	bgt.w	8016ce0 <forward_lite_dw_3x3_sssa8_ch+0x130>
 8016f7c:	2a00      	cmp	r2, #0
 8016f7e:	dd6b      	ble.n	8017058 <forward_lite_dw_3x3_sssa8_ch+0x4a8>
 8016f80:	007f      	lsls	r7, r7, #1
 8016f82:	1c86      	adds	r6, r0, #2
 8016f84:	e9dd c502 	ldrd	ip, r5, [sp, #8]
 8016f88:	f85c 4b04 	ldr.w	r4, [ip], #4
 8016f8c:	f855 9b04 	ldr.w	r9, [r5], #4
 8016f90:	fb57 9704 	smmla	r7, r7, r4, r9
 8016f94:	4117      	asrs	r7, r2
 8016f96:	f307 0207 	ssat	r2, #8, r7
 8016f9a:	f8dd a010 	ldr.w	sl, [sp, #16]
 8016f9e:	f80a 2b01 	strb.w	r2, [sl], #1
 8016fa2:	f9b6 4000 	ldrsh.w	r4, [r6]
 8016fa6:	2c15      	cmp	r4, #21
 8016fa8:	f73f aeb8 	bgt.w	8016d1c <forward_lite_dw_3x3_sssa8_ch+0x16c>
 8016fac:	2c00      	cmp	r4, #0
 8016fae:	f340 80a5 	ble.w	80170fc <forward_lite_dw_3x3_sssa8_ch+0x54c>
 8016fb2:	f8dc 2000 	ldr.w	r2, [ip]
 8016fb6:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8016fba:	682d      	ldr	r5, [r5, #0]
 8016fbc:	fb5e 5e02 	smmla	lr, lr, r2, r5
 8016fc0:	9a03      	ldr	r2, [sp, #12]
 8016fc2:	fa4e f404 	asr.w	r4, lr, r4
 8016fc6:	9802      	ldr	r0, [sp, #8]
 8016fc8:	f102 0c08 	add.w	ip, r2, #8
 8016fcc:	9a01      	ldr	r2, [sp, #4]
 8016fce:	f100 0708 	add.w	r7, r0, #8
 8016fd2:	f102 0904 	add.w	r9, r2, #4
 8016fd6:	f304 0407 	ssat	r4, #8, r4
 8016fda:	f88a 4000 	strb.w	r4, [sl]
 8016fde:	f9b9 4000 	ldrsh.w	r4, [r9]
 8016fe2:	9a04      	ldr	r2, [sp, #16]
 8016fe4:	2c15      	cmp	r4, #21
 8016fe6:	f102 0502 	add.w	r5, r2, #2
 8016fea:	f73f aeb8 	bgt.w	8016d5e <forward_lite_dw_3x3_sssa8_ch+0x1ae>
 8016fee:	2c00      	cmp	r4, #0
 8016ff0:	dd68      	ble.n	80170c4 <forward_lite_dw_3x3_sssa8_ch+0x514>
 8016ff2:	683a      	ldr	r2, [r7, #0]
 8016ff4:	ea4f 094b 	mov.w	r9, fp, lsl #1
 8016ff8:	f8dc 6000 	ldr.w	r6, [ip]
 8016ffc:	fb59 6902 	smmla	r9, r9, r2, r6
 8017000:	9a03      	ldr	r2, [sp, #12]
 8017002:	fa49 f404 	asr.w	r4, r9, r4
 8017006:	9802      	ldr	r0, [sp, #8]
 8017008:	f102 0a0c 	add.w	sl, r2, #12
 801700c:	9a01      	ldr	r2, [sp, #4]
 801700e:	f100 070c 	add.w	r7, r0, #12
 8017012:	f102 0e06 	add.w	lr, r2, #6
 8017016:	f304 0407 	ssat	r4, #8, r4
 801701a:	9a04      	ldr	r2, [sp, #16]
 801701c:	702c      	strb	r4, [r5, #0]
 801701e:	f102 0c03 	add.w	ip, r2, #3
 8017022:	f9be 2000 	ldrsh.w	r2, [lr]
 8017026:	2a15      	cmp	r2, #21
 8017028:	f73f aebb 	bgt.w	8016da2 <forward_lite_dw_3x3_sssa8_ch+0x1f2>
 801702c:	2a00      	cmp	r2, #0
 801702e:	dd2b      	ble.n	8017088 <forward_lite_dw_3x3_sssa8_ch+0x4d8>
 8017030:	9801      	ldr	r0, [sp, #4]
 8017032:	9e02      	ldr	r6, [sp, #8]
 8017034:	9c03      	ldr	r4, [sp, #12]
 8017036:	f100 0e08 	add.w	lr, r0, #8
 801703a:	3610      	adds	r6, #16
 801703c:	9808      	ldr	r0, [sp, #32]
 801703e:	3410      	adds	r4, #16
 8017040:	683f      	ldr	r7, [r7, #0]
 8017042:	0045      	lsls	r5, r0, #1
 8017044:	f8da a000 	ldr.w	sl, [sl]
 8017048:	46b3      	mov	fp, r6
 801704a:	46f1      	mov	r9, lr
 801704c:	fb55 aa07 	smmla	sl, r5, r7, sl
 8017050:	4627      	mov	r7, r4
 8017052:	fa4a f202 	asr.w	r2, sl, r2
 8017056:	e6bd      	b.n	8016dd4 <forward_lite_dw_3x3_sssa8_ch+0x224>
 8017058:	f1c2 0201 	rsb	r2, r2, #1
 801705c:	4097      	lsls	r7, r2
 801705e:	9a01      	ldr	r2, [sp, #4]
 8017060:	1c96      	adds	r6, r2, #2
 8017062:	f307 021f 	ssat	r2, #32, r7
 8017066:	f8dd c008 	ldr.w	ip, [sp, #8]
 801706a:	f85c 7b04 	ldr.w	r7, [ip], #4
 801706e:	fb52 f217 	smmulr	r2, r2, r7
 8017072:	9d03      	ldr	r5, [sp, #12]
 8017074:	f855 4b04 	ldr.w	r4, [r5], #4
 8017078:	4422      	add	r2, r4
 801707a:	f302 0207 	ssat	r2, #8, r2
 801707e:	f8dd a010 	ldr.w	sl, [sp, #16]
 8017082:	f80a 2b01 	strb.w	r2, [sl], #1
 8017086:	e644      	b.n	8016d12 <forward_lite_dw_3x3_sssa8_ch+0x162>
 8017088:	9801      	ldr	r0, [sp, #4]
 801708a:	f1c2 0501 	rsb	r5, r2, #1
 801708e:	9a08      	ldr	r2, [sp, #32]
 8017090:	f100 0e08 	add.w	lr, r0, #8
 8017094:	40aa      	lsls	r2, r5
 8017096:	46f1      	mov	r9, lr
 8017098:	f302 051f 	ssat	r5, #32, r2
 801709c:	9e02      	ldr	r6, [sp, #8]
 801709e:	683a      	ldr	r2, [r7, #0]
 80170a0:	3610      	adds	r6, #16
 80170a2:	46b3      	mov	fp, r6
 80170a4:	fb55 f512 	smmulr	r5, r5, r2
 80170a8:	9c03      	ldr	r4, [sp, #12]
 80170aa:	f8da 2000 	ldr.w	r2, [sl]
 80170ae:	3410      	adds	r4, #16
 80170b0:	4415      	add	r5, r2
 80170b2:	4627      	mov	r7, r4
 80170b4:	f305 0507 	ssat	r5, #8, r5
 80170b8:	9a04      	ldr	r2, [sp, #16]
 80170ba:	f88c 5000 	strb.w	r5, [ip]
 80170be:	3204      	adds	r2, #4
 80170c0:	4694      	mov	ip, r2
 80170c2:	e68e      	b.n	8016de2 <forward_lite_dw_3x3_sssa8_ch+0x232>
 80170c4:	f1c4 0901 	rsb	r9, r4, #1
 80170c8:	9a01      	ldr	r2, [sp, #4]
 80170ca:	fa0b f909 	lsl.w	r9, fp, r9
 80170ce:	f102 0e06 	add.w	lr, r2, #6
 80170d2:	f309 091f 	ssat	r9, #32, r9
 80170d6:	9802      	ldr	r0, [sp, #8]
 80170d8:	683a      	ldr	r2, [r7, #0]
 80170da:	f100 070c 	add.w	r7, r0, #12
 80170de:	fb59 f912 	smmulr	r9, r9, r2
 80170e2:	f8dc 2000 	ldr.w	r2, [ip]
 80170e6:	9803      	ldr	r0, [sp, #12]
 80170e8:	444a      	add	r2, r9
 80170ea:	f100 0a0c 	add.w	sl, r0, #12
 80170ee:	f302 0207 	ssat	r2, #8, r2
 80170f2:	702a      	strb	r2, [r5, #0]
 80170f4:	9a04      	ldr	r2, [sp, #16]
 80170f6:	f102 0c03 	add.w	ip, r2, #3
 80170fa:	e64d      	b.n	8016d98 <forward_lite_dw_3x3_sssa8_ch+0x1e8>
 80170fc:	f1c4 0401 	rsb	r4, r4, #1
 8017100:	9a01      	ldr	r2, [sp, #4]
 8017102:	fa0e fe04 	lsl.w	lr, lr, r4
 8017106:	f102 0904 	add.w	r9, r2, #4
 801710a:	f30e 0e1f 	ssat	lr, #32, lr
 801710e:	9802      	ldr	r0, [sp, #8]
 8017110:	f8dc 2000 	ldr.w	r2, [ip]
 8017114:	f100 0708 	add.w	r7, r0, #8
 8017118:	fb5e fe12 	smmulr	lr, lr, r2
 801711c:	682a      	ldr	r2, [r5, #0]
 801711e:	9803      	ldr	r0, [sp, #12]
 8017120:	4472      	add	r2, lr
 8017122:	f100 0c08 	add.w	ip, r0, #8
 8017126:	f302 0207 	ssat	r2, #8, r2
 801712a:	f88a 2000 	strb.w	r2, [sl]
 801712e:	9a04      	ldr	r2, [sp, #16]
 8017130:	1c95      	adds	r5, r2, #2
 8017132:	e60f      	b.n	8016d54 <forward_lite_dw_3x3_sssa8_ch+0x1a4>
 8017134:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8017136:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 801713a:	930b      	str	r3, [sp, #44]	; 0x2c
 801713c:	f8dd b0c8 	ldr.w	fp, [sp, #200]	; 0xc8
 8017140:	e9dd 3712 	ldrd	r3, r7, [sp, #72]	; 0x48
 8017144:	9309      	str	r3, [sp, #36]	; 0x24
 8017146:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017148:	9307      	str	r3, [sp, #28]
 801714a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801714c:	2b00      	cmp	r3, #0
 801714e:	f000 8127 	beq.w	80173a0 <forward_lite_dw_3x3_sssa8_ch+0x7f0>
 8017152:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017154:	9b07      	ldr	r3, [sp, #28]
 8017156:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8017158:	18d0      	adds	r0, r2, r3
 801715a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801715c:	56d3      	ldrsb	r3, [r2, r3]
 801715e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017160:	1b9a      	subs	r2, r3, r6
 8017162:	680b      	ldr	r3, [r1, #0]
 8017164:	8821      	ldrh	r1, [r4, #0]
 8017166:	fb11 3302 	smlabb	r3, r1, r2, r3
 801716a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801716c:	5642      	ldrsb	r2, [r0, r1]
 801716e:	eb00 0541 	add.w	r5, r0, r1, lsl #1
 8017172:	f910 0011 	ldrsb.w	r0, [r0, r1, lsl #1]
 8017176:	1b92      	subs	r2, r2, r6
 8017178:	8861      	ldrh	r1, [r4, #2]
 801717a:	1b80      	subs	r0, r0, r6
 801717c:	fb12 3301 	smlabb	r3, r2, r1, r3
 8017180:	9a05      	ldr	r2, [sp, #20]
 8017182:	18ac      	adds	r4, r5, r2
 8017184:	56aa      	ldrsb	r2, [r5, r2]
 8017186:	4635      	mov	r5, r6
 8017188:	1b92      	subs	r2, r2, r6
 801718a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801718c:	88b1      	ldrh	r1, [r6, #4]
 801718e:	fb10 3101 	smlabb	r1, r0, r1, r3
 8017192:	88f3      	ldrh	r3, [r6, #6]
 8017194:	fb12 1103 	smlabb	r1, r2, r3, r1
 8017198:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801719a:	56e2      	ldrsb	r2, [r4, r3]
 801719c:	eb04 0043 	add.w	r0, r4, r3, lsl #1
 80171a0:	f914 3013 	ldrsb.w	r3, [r4, r3, lsl #1]
 80171a4:	1b52      	subs	r2, r2, r5
 80171a6:	8934      	ldrh	r4, [r6, #8]
 80171a8:	1b5b      	subs	r3, r3, r5
 80171aa:	fb12 1204 	smlabb	r2, r2, r4, r1
 80171ae:	9905      	ldr	r1, [sp, #20]
 80171b0:	1844      	adds	r4, r0, r1
 80171b2:	5641      	ldrsb	r1, [r0, r1]
 80171b4:	8970      	ldrh	r0, [r6, #10]
 80171b6:	1b49      	subs	r1, r1, r5
 80171b8:	fb13 2300 	smlabb	r3, r3, r0, r2
 80171bc:	89b0      	ldrh	r0, [r6, #12]
 80171be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80171c0:	fb11 3300 	smlabb	r3, r1, r0, r3
 80171c4:	56a1      	ldrsb	r1, [r4, r2]
 80171c6:	f914 0012 	ldrsb.w	r0, [r4, r2, lsl #1]
 80171ca:	4634      	mov	r4, r6
 80171cc:	1b4a      	subs	r2, r1, r5
 80171ce:	89f1      	ldrh	r1, [r6, #14]
 80171d0:	1b40      	subs	r0, r0, r5
 80171d2:	fb12 3101 	smlabb	r1, r2, r1, r3
 80171d6:	9b07      	ldr	r3, [sp, #28]
 80171d8:	1c5e      	adds	r6, r3, #1
 80171da:	8a23      	ldrh	r3, [r4, #16]
 80171dc:	f9b9 4000 	ldrsh.w	r4, [r9]
 80171e0:	fb10 1003 	smlabb	r0, r0, r3, r1
 80171e4:	b2b6      	uxth	r6, r6
 80171e6:	2c15      	cmp	r4, #21
 80171e8:	b229      	sxth	r1, r5
 80171ea:	f300 80f1 	bgt.w	80173d0 <forward_lite_dw_3x3_sssa8_ch+0x820>
 80171ee:	2c00      	cmp	r4, #0
 80171f0:	f340 8122 	ble.w	8017438 <forward_lite_dw_3x3_sssa8_ch+0x888>
 80171f4:	f8db 3000 	ldr.w	r3, [fp]
 80171f8:	0040      	lsls	r0, r0, #1
 80171fa:	683a      	ldr	r2, [r7, #0]
 80171fc:	fb50 2003 	smmla	r0, r0, r3, r2
 8017200:	fa40 f404 	asr.w	r4, r0, r4
 8017204:	f304 0407 	ssat	r4, #8, r4
 8017208:	46e6      	mov	lr, ip
 801720a:	f80e 4b01 	strb.w	r4, [lr], #1
 801720e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017210:	2b00      	cmp	r3, #0
 8017212:	f000 80c3 	beq.w	801739c <forward_lite_dw_3x3_sssa8_ch+0x7ec>
 8017216:	9b07      	ldr	r3, [sp, #28]
 8017218:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801721a:	3302      	adds	r3, #2
 801721c:	8a6a      	ldrh	r2, [r5, #18]
 801721e:	b29b      	uxth	r3, r3
 8017220:	9301      	str	r3, [sp, #4]
 8017222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017224:	199c      	adds	r4, r3, r6
 8017226:	5798      	ldrsb	r0, [r3, r6]
 8017228:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801722a:	1a40      	subs	r0, r0, r1
 801722c:	685b      	ldr	r3, [r3, #4]
 801722e:	fb10 3302 	smlabb	r3, r0, r2, r3
 8017232:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017234:	56a0      	ldrsb	r0, [r4, r2]
 8017236:	eb04 0642 	add.w	r6, r4, r2, lsl #1
 801723a:	f914 4012 	ldrsb.w	r4, [r4, r2, lsl #1]
 801723e:	1a40      	subs	r0, r0, r1
 8017240:	8aaa      	ldrh	r2, [r5, #20]
 8017242:	1a64      	subs	r4, r4, r1
 8017244:	fb10 3002 	smlabb	r0, r0, r2, r3
 8017248:	9b05      	ldr	r3, [sp, #20]
 801724a:	18f5      	adds	r5, r6, r3
 801724c:	56f3      	ldrsb	r3, [r6, r3]
 801724e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8017250:	1a5b      	subs	r3, r3, r1
 8017252:	8af2      	ldrh	r2, [r6, #22]
 8017254:	fb14 0202 	smlabb	r2, r4, r2, r0
 8017258:	8b30      	ldrh	r0, [r6, #24]
 801725a:	fb13 2200 	smlabb	r2, r3, r0, r2
 801725e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8017260:	562b      	ldrsb	r3, [r5, r0]
 8017262:	eb05 0440 	add.w	r4, r5, r0, lsl #1
 8017266:	f915 0010 	ldrsb.w	r0, [r5, r0, lsl #1]
 801726a:	1a5b      	subs	r3, r3, r1
 801726c:	8b75      	ldrh	r5, [r6, #26]
 801726e:	1a40      	subs	r0, r0, r1
 8017270:	fb13 2305 	smlabb	r3, r3, r5, r2
 8017274:	9a05      	ldr	r2, [sp, #20]
 8017276:	18a5      	adds	r5, r4, r2
 8017278:	56a2      	ldrsb	r2, [r4, r2]
 801727a:	8bb4      	ldrh	r4, [r6, #28]
 801727c:	1a52      	subs	r2, r2, r1
 801727e:	fb10 3304 	smlabb	r3, r0, r4, r3
 8017282:	8bf0      	ldrh	r0, [r6, #30]
 8017284:	8c34      	ldrh	r4, [r6, #32]
 8017286:	fb12 3200 	smlabb	r2, r2, r0, r3
 801728a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801728c:	562b      	ldrsb	r3, [r5, r0]
 801728e:	f915 0010 	ldrsb.w	r0, [r5, r0, lsl #1]
 8017292:	1a5b      	subs	r3, r3, r1
 8017294:	1a40      	subs	r0, r0, r1
 8017296:	fb13 2204 	smlabb	r2, r3, r4, r2
 801729a:	f9b9 4002 	ldrsh.w	r4, [r9, #2]
 801729e:	8c73      	ldrh	r3, [r6, #34]	; 0x22
 80172a0:	2c15      	cmp	r4, #21
 80172a2:	fb10 2003 	smlabb	r0, r0, r3, r2
 80172a6:	f300 80a5 	bgt.w	80173f4 <forward_lite_dw_3x3_sssa8_ch+0x844>
 80172aa:	2c00      	cmp	r4, #0
 80172ac:	f340 80d6 	ble.w	801745c <forward_lite_dw_3x3_sssa8_ch+0x8ac>
 80172b0:	f8db 3004 	ldr.w	r3, [fp, #4]
 80172b4:	0040      	lsls	r0, r0, #1
 80172b6:	687a      	ldr	r2, [r7, #4]
 80172b8:	fb50 2003 	smmla	r0, r0, r3, r2
 80172bc:	fa40 f404 	asr.w	r4, r0, r4
 80172c0:	f304 0407 	ssat	r4, #8, r4
 80172c4:	46f2      	mov	sl, lr
 80172c6:	f80a 4b01 	strb.w	r4, [sl], #1
 80172ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80172cc:	2b02      	cmp	r3, #2
 80172ce:	d065      	beq.n	801739c <forward_lite_dw_3x3_sssa8_ch+0x7ec>
 80172d0:	9801      	ldr	r0, [sp, #4]
 80172d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80172d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80172d6:	689c      	ldr	r4, [r3, #8]
 80172d8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80172da:	1813      	adds	r3, r2, r0
 80172dc:	5612      	ldrsb	r2, [r2, r0]
 80172de:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80172e0:	1a50      	subs	r0, r2, r1
 80172e2:	8cad      	ldrh	r5, [r5, #36]	; 0x24
 80172e4:	f9b9 e004 	ldrsh.w	lr, [r9, #4]
 80172e8:	fb15 4200 	smlabb	r2, r5, r0, r4
 80172ec:	579d      	ldrsb	r5, [r3, r6]
 80172ee:	eb03 0046 	add.w	r0, r3, r6, lsl #1
 80172f2:	f913 6016 	ldrsb.w	r6, [r3, r6, lsl #1]
 80172f6:	1a6c      	subs	r4, r5, r1
 80172f8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80172fa:	9b05      	ldr	r3, [sp, #20]
 80172fc:	1a76      	subs	r6, r6, r1
 80172fe:	8ced      	ldrh	r5, [r5, #38]	; 0x26
 8017300:	f1be 0f15 	cmp.w	lr, #21
 8017304:	fb15 2504 	smlabb	r5, r5, r4, r2
 8017308:	eb00 0403 	add.w	r4, r0, r3
 801730c:	56c3      	ldrsb	r3, [r0, r3]
 801730e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017310:	eba3 0201 	sub.w	r2, r3, r1
 8017314:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8017316:	fb13 5306 	smlabb	r3, r3, r6, r5
 801731a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801731c:	4605      	mov	r5, r0
 801731e:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
 8017320:	fb10 3302 	smlabb	r3, r0, r2, r3
 8017324:	57a0      	ldrsb	r0, [r4, r6]
 8017326:	eb04 0246 	add.w	r2, r4, r6, lsl #1
 801732a:	f914 4016 	ldrsb.w	r4, [r4, r6, lsl #1]
 801732e:	eba0 0001 	sub.w	r0, r0, r1
 8017332:	462e      	mov	r6, r5
 8017334:	8dad      	ldrh	r5, [r5, #44]	; 0x2c
 8017336:	eba4 0401 	sub.w	r4, r4, r1
 801733a:	fb15 3000 	smlabb	r0, r5, r0, r3
 801733e:	9b05      	ldr	r3, [sp, #20]
 8017340:	eb02 0503 	add.w	r5, r2, r3
 8017344:	56d2      	ldrsb	r2, [r2, r3]
 8017346:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
 8017348:	eba2 0201 	sub.w	r2, r2, r1
 801734c:	fb13 0304 	smlabb	r3, r3, r4, r0
 8017350:	8e30      	ldrh	r0, [r6, #48]	; 0x30
 8017352:	4634      	mov	r4, r6
 8017354:	fb10 3302 	smlabb	r3, r0, r2, r3
 8017358:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801735a:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 801735c:	56ae      	ldrsb	r6, [r5, r2]
 801735e:	f915 2012 	ldrsb.w	r2, [r5, r2, lsl #1]
 8017362:	eba6 0601 	sub.w	r6, r6, r1
 8017366:	eba2 0101 	sub.w	r1, r2, r1
 801736a:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801736c:	fb10 3306 	smlabb	r3, r0, r6, r3
 8017370:	fb12 3301 	smlabb	r3, r2, r1, r3
 8017374:	dd50      	ble.n	8017418 <forward_lite_dw_3x3_sssa8_ch+0x868>
 8017376:	f1ae 0102 	sub.w	r1, lr, #2
 801737a:	2401      	movs	r4, #1
 801737c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8017380:	68b8      	ldr	r0, [r7, #8]
 8017382:	f8db 2008 	ldr.w	r2, [fp, #8]
 8017386:	fa04 f101 	lsl.w	r1, r4, r1
 801738a:	fb53 1102 	smmla	r1, r3, r2, r1
 801738e:	fa41 f10e 	asr.w	r1, r1, lr
 8017392:	4401      	add	r1, r0
 8017394:	f301 0107 	ssat	r1, #8, r1
 8017398:	f88a 1000 	strb.w	r1, [sl]
 801739c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801739e:	449c      	add	ip, r3
 80173a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80173a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80173a4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80173a6:	3301      	adds	r3, #1
 80173a8:	440a      	add	r2, r1
 80173aa:	b21b      	sxth	r3, r3
 80173ac:	920a      	str	r2, [sp, #40]	; 0x28
 80173ae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80173b0:	9310      	str	r3, [sp, #64]	; 0x40
 80173b2:	429a      	cmp	r2, r3
 80173b4:	f73f ac7b 	bgt.w	8016cae <forward_lite_dw_3x3_sssa8_ch+0xfe>
 80173b8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80173ba:	46e1      	mov	r9, ip
 80173bc:	9919      	ldr	r1, [sp, #100]	; 0x64
 80173be:	3301      	adds	r3, #1
 80173c0:	b21b      	sxth	r3, r3
 80173c2:	428b      	cmp	r3, r1
 80173c4:	9318      	str	r3, [sp, #96]	; 0x60
 80173c6:	f6ff ac6a 	blt.w	8016c9e <forward_lite_dw_3x3_sssa8_ch+0xee>
 80173ca:	b01f      	add	sp, #124	; 0x7c
 80173cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173d0:	1ea5      	subs	r5, r4, #2
 80173d2:	2301      	movs	r3, #1
 80173d4:	3c01      	subs	r4, #1
 80173d6:	f8db 2000 	ldr.w	r2, [fp]
 80173da:	fa03 f505 	lsl.w	r5, r3, r5
 80173de:	683b      	ldr	r3, [r7, #0]
 80173e0:	fb50 5202 	smmla	r2, r0, r2, r5
 80173e4:	4122      	asrs	r2, r4
 80173e6:	4413      	add	r3, r2
 80173e8:	f303 0307 	ssat	r3, #8, r3
 80173ec:	46e6      	mov	lr, ip
 80173ee:	f80e 3b01 	strb.w	r3, [lr], #1
 80173f2:	e70c      	b.n	801720e <forward_lite_dw_3x3_sssa8_ch+0x65e>
 80173f4:	1ea5      	subs	r5, r4, #2
 80173f6:	2301      	movs	r3, #1
 80173f8:	3c01      	subs	r4, #1
 80173fa:	f8db 2004 	ldr.w	r2, [fp, #4]
 80173fe:	fa03 f505 	lsl.w	r5, r3, r5
 8017402:	687b      	ldr	r3, [r7, #4]
 8017404:	fb50 5202 	smmla	r2, r0, r2, r5
 8017408:	4122      	asrs	r2, r4
 801740a:	4413      	add	r3, r2
 801740c:	f303 0307 	ssat	r3, #8, r3
 8017410:	46f2      	mov	sl, lr
 8017412:	f80a 3b01 	strb.w	r3, [sl], #1
 8017416:	e758      	b.n	80172ca <forward_lite_dw_3x3_sssa8_ch+0x71a>
 8017418:	f1be 0f00 	cmp.w	lr, #0
 801741c:	dd30      	ble.n	8017480 <forward_lite_dw_3x3_sssa8_ch+0x8d0>
 801741e:	f8db 2008 	ldr.w	r2, [fp, #8]
 8017422:	005b      	lsls	r3, r3, #1
 8017424:	68b9      	ldr	r1, [r7, #8]
 8017426:	fb53 1302 	smmla	r3, r3, r2, r1
 801742a:	fa43 f30e 	asr.w	r3, r3, lr
 801742e:	f303 0307 	ssat	r3, #8, r3
 8017432:	f88a 3000 	strb.w	r3, [sl]
 8017436:	e7b1      	b.n	801739c <forward_lite_dw_3x3_sssa8_ch+0x7ec>
 8017438:	f1c4 0401 	rsb	r4, r4, #1
 801743c:	fa00 f404 	lsl.w	r4, r0, r4
 8017440:	f304 021f 	ssat	r2, #32, r4
 8017444:	f8db 3000 	ldr.w	r3, [fp]
 8017448:	fb52 f213 	smmulr	r2, r2, r3
 801744c:	683b      	ldr	r3, [r7, #0]
 801744e:	4413      	add	r3, r2
 8017450:	f303 0307 	ssat	r3, #8, r3
 8017454:	46e6      	mov	lr, ip
 8017456:	f80e 3b01 	strb.w	r3, [lr], #1
 801745a:	e6d8      	b.n	801720e <forward_lite_dw_3x3_sssa8_ch+0x65e>
 801745c:	f1c4 0401 	rsb	r4, r4, #1
 8017460:	fa00 f204 	lsl.w	r2, r0, r4
 8017464:	f302 021f 	ssat	r2, #32, r2
 8017468:	f8db 3004 	ldr.w	r3, [fp, #4]
 801746c:	fb52 f213 	smmulr	r2, r2, r3
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	4413      	add	r3, r2
 8017474:	f303 0307 	ssat	r3, #8, r3
 8017478:	46f2      	mov	sl, lr
 801747a:	f80a 3b01 	strb.w	r3, [sl], #1
 801747e:	e724      	b.n	80172ca <forward_lite_dw_3x3_sssa8_ch+0x71a>
 8017480:	f1ce 0e01 	rsb	lr, lr, #1
 8017484:	fa03 f30e 	lsl.w	r3, r3, lr
 8017488:	f303 031f 	ssat	r3, #32, r3
 801748c:	f8db 2008 	ldr.w	r2, [fp, #8]
 8017490:	fb53 f312 	smmulr	r3, r3, r2
 8017494:	68ba      	ldr	r2, [r7, #8]
 8017496:	4413      	add	r3, r2
 8017498:	f303 0307 	ssat	r3, #8, r3
 801749c:	f88a 3000 	strb.w	r3, [sl]
 80174a0:	e77c      	b.n	801739c <forward_lite_dw_3x3_sssa8_ch+0x7ec>
 80174a2:	42a1      	cmp	r1, r4
 80174a4:	f840 7c04 	str.w	r7, [r0, #-4]
 80174a8:	f100 0004 	add.w	r0, r0, #4
 80174ac:	f6ff abb8 	blt.w	8016c20 <forward_lite_dw_3x3_sssa8_ch+0x70>
 80174b0:	f7ff bbca 	b.w	8016c48 <forward_lite_dw_3x3_sssa8_ch+0x98>
 80174b4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80174b6:	ea5f 0e94 	movs.w	lr, r4, lsr #2
 80174ba:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
 80174be:	9012      	str	r0, [sp, #72]	; 0x48
 80174c0:	f000 814f 	beq.w	8017762 <forward_lite_dw_3x3_sssa8_ch+0xbb2>
 80174c4:	f10e 33ff 	add.w	r3, lr, #4294967295
 80174c8:	f108 0204 	add.w	r2, r8, #4
 80174cc:	4641      	mov	r1, r8
 80174ce:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 80174d2:	b29b      	uxth	r3, r3
 80174d4:	eba9 0604 	sub.w	r6, r9, r4
 80174d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80174dc:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80174e0:	9301      	str	r3, [sp, #4]
 80174e2:	eb08 0304 	add.w	r3, r8, r4
 80174e6:	9204      	str	r2, [sp, #16]
 80174e8:	00a2      	lsls	r2, r4, #2
 80174ea:	9203      	str	r2, [sp, #12]
 80174ec:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80174f0:	9202      	str	r2, [sp, #8]
 80174f2:	901d      	str	r0, [sp, #116]	; 0x74
 80174f4:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80174f6:	f8d1 b000 	ldr.w	fp, [r1]
 80174fa:	681a      	ldr	r2, [r3, #0]
 80174fc:	eacb 4002 	pkhbt	r0, fp, r2, lsl #16
 8017500:	eac2 422b 	pkhtb	r2, r2, fp, asr #16
 8017504:	f105 0b04 	add.w	fp, r5, #4
 8017508:	f8cd b074 	str.w	fp, [sp, #116]	; 0x74
 801750c:	fa2f fb80 	sxtb16	fp, r0
 8017510:	f8c5 b000 	str.w	fp, [r5]
 8017514:	fa2f f090 	sxtb16	r0, r0, ror #8
 8017518:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801751a:	6028      	str	r0, [r5, #0]
 801751c:	3504      	adds	r5, #4
 801751e:	951d      	str	r5, [sp, #116]	; 0x74
 8017520:	981d      	ldr	r0, [sp, #116]	; 0x74
 8017522:	fa2f f582 	sxtb16	r5, r2
 8017526:	3004      	adds	r0, #4
 8017528:	f840 5c04 	str.w	r5, [r0, #-4]
 801752c:	901d      	str	r0, [sp, #116]	; 0x74
 801752e:	fa2f f292 	sxtb16	r2, r2, ror #8
 8017532:	981d      	ldr	r0, [sp, #116]	; 0x74
 8017534:	6002      	str	r2, [r0, #0]
 8017536:	3004      	adds	r0, #4
 8017538:	f85c b001 	ldr.w	fp, [ip, r1]
 801753c:	901d      	str	r0, [sp, #116]	; 0x74
 801753e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8017540:	f85c 2003 	ldr.w	r2, [ip, r3]
 8017544:	eacb 4002 	pkhbt	r0, fp, r2, lsl #16
 8017548:	eac2 422b 	pkhtb	r2, r2, fp, asr #16
 801754c:	f105 0b04 	add.w	fp, r5, #4
 8017550:	f8cd b074 	str.w	fp, [sp, #116]	; 0x74
 8017554:	fa2f fb80 	sxtb16	fp, r0
 8017558:	f8c5 b000 	str.w	fp, [r5]
 801755c:	fa2f f090 	sxtb16	r0, r0, ror #8
 8017560:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8017562:	6028      	str	r0, [r5, #0]
 8017564:	3504      	adds	r5, #4
 8017566:	951d      	str	r5, [sp, #116]	; 0x74
 8017568:	981d      	ldr	r0, [sp, #116]	; 0x74
 801756a:	fa2f f582 	sxtb16	r5, r2
 801756e:	3004      	adds	r0, #4
 8017570:	f840 5c04 	str.w	r5, [r0, #-4]
 8017574:	901d      	str	r0, [sp, #116]	; 0x74
 8017576:	fa2f f292 	sxtb16	r2, r2, ror #8
 801757a:	981d      	ldr	r0, [sp, #116]	; 0x74
 801757c:	6002      	str	r2, [r0, #0]
 801757e:	3004      	adds	r0, #4
 8017580:	9a04      	ldr	r2, [sp, #16]
 8017582:	901d      	str	r0, [sp, #116]	; 0x74
 8017584:	f853 b002 	ldr.w	fp, [r3, r2]
 8017588:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801758a:	9a03      	ldr	r2, [sp, #12]
 801758c:	589a      	ldr	r2, [r3, r2]
 801758e:	eacb 4002 	pkhbt	r0, fp, r2, lsl #16
 8017592:	eac2 422b 	pkhtb	r2, r2, fp, asr #16
 8017596:	f105 0b04 	add.w	fp, r5, #4
 801759a:	f8cd b074 	str.w	fp, [sp, #116]	; 0x74
 801759e:	fa2f fb80 	sxtb16	fp, r0
 80175a2:	f8c5 b000 	str.w	fp, [r5]
 80175a6:	fa2f f090 	sxtb16	r0, r0, ror #8
 80175aa:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80175ac:	6028      	str	r0, [r5, #0]
 80175ae:	3504      	adds	r5, #4
 80175b0:	951d      	str	r5, [sp, #116]	; 0x74
 80175b2:	981d      	ldr	r0, [sp, #116]	; 0x74
 80175b4:	fa2f f582 	sxtb16	r5, r2
 80175b8:	3004      	adds	r0, #4
 80175ba:	f840 5c04 	str.w	r5, [r0, #-4]
 80175be:	901d      	str	r0, [sp, #116]	; 0x74
 80175c0:	fa2f f292 	sxtb16	r2, r2, ror #8
 80175c4:	981d      	ldr	r0, [sp, #116]	; 0x74
 80175c6:	6002      	str	r2, [r0, #0]
 80175c8:	3004      	adds	r0, #4
 80175ca:	9a02      	ldr	r2, [sp, #8]
 80175cc:	901d      	str	r0, [sp, #116]	; 0x74
 80175ce:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80175d0:	f853 b002 	ldr.w	fp, [r3, r2]
 80175d4:	598a      	ldr	r2, [r1, r6]
 80175d6:	eacb 4002 	pkhbt	r0, fp, r2, lsl #16
 80175da:	eac2 422b 	pkhtb	r2, r2, fp, asr #16
 80175de:	f105 0b04 	add.w	fp, r5, #4
 80175e2:	f8cd b074 	str.w	fp, [sp, #116]	; 0x74
 80175e6:	fa2f fb80 	sxtb16	fp, r0
 80175ea:	f8c5 b000 	str.w	fp, [r5]
 80175ee:	fa2f f090 	sxtb16	r0, r0, ror #8
 80175f2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80175f4:	6028      	str	r0, [r5, #0]
 80175f6:	3504      	adds	r5, #4
 80175f8:	951d      	str	r5, [sp, #116]	; 0x74
 80175fa:	981d      	ldr	r0, [sp, #116]	; 0x74
 80175fc:	fa2f f582 	sxtb16	r5, r2
 8017600:	3004      	adds	r0, #4
 8017602:	f840 5c04 	str.w	r5, [r0, #-4]
 8017606:	901d      	str	r0, [sp, #116]	; 0x74
 8017608:	fa2f f292 	sxtb16	r2, r2, ror #8
 801760c:	981d      	ldr	r0, [sp, #116]	; 0x74
 801760e:	6002      	str	r2, [r0, #0]
 8017610:	3004      	adds	r0, #4
 8017612:	599a      	ldr	r2, [r3, r6]
 8017614:	901d      	str	r0, [sp, #116]	; 0x74
 8017616:	981d      	ldr	r0, [sp, #116]	; 0x74
 8017618:	eac2 2502 	pkhbt	r5, r2, r2, lsl #8
 801761c:	fa2f f585 	sxtb16	r5, r5
 8017620:	8005      	strh	r5, [r0, #0]
 8017622:	0c2d      	lsrs	r5, r5, #16
 8017624:	eac2 6222 	pkhtb	r2, r2, r2, asr #24
 8017628:	8045      	strh	r5, [r0, #2]
 801762a:	fa2f f2a2 	sxtb16	r2, r2, ror #16
 801762e:	8082      	strh	r2, [r0, #4]
 8017630:	0c12      	lsrs	r2, r2, #16
 8017632:	3104      	adds	r1, #4
 8017634:	3008      	adds	r0, #8
 8017636:	f820 2c02 	strh.w	r2, [r0, #-2]
 801763a:	3304      	adds	r3, #4
 801763c:	9a01      	ldr	r2, [sp, #4]
 801763e:	4291      	cmp	r1, r2
 8017640:	f47f af57 	bne.w	80174f2 <forward_lite_dw_3x3_sssa8_ch+0x942>
 8017644:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8017648:	4602      	mov	r2, r0
 801764a:	fa1f fe8e 	uxth.w	lr, lr
 801764e:	f014 0303 	ands.w	r3, r4, #3
 8017652:	f43f aad0 	beq.w	8016bf6 <forward_lite_dw_3x3_sssa8_ch+0x46>
 8017656:	3b01      	subs	r3, #1
 8017658:	f10e 0101 	add.w	r1, lr, #1
 801765c:	b29d      	uxth	r5, r3
 801765e:	f918 300e 	ldrsb.w	r3, [r8, lr]
 8017662:	b28e      	uxth	r6, r1
 8017664:	8013      	strh	r3, [r2, #0]
 8017666:	eb08 030e 	add.w	r3, r8, lr
 801766a:	5719      	ldrsb	r1, [r3, r4]
 801766c:	8051      	strh	r1, [r2, #2]
 801766e:	1919      	adds	r1, r3, r4
 8017670:	f913 0014 	ldrsb.w	r0, [r3, r4, lsl #1]
 8017674:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8017678:	8090      	strh	r0, [r2, #4]
 801767a:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 801767e:	80d1      	strh	r1, [r2, #6]
 8017680:	1919      	adds	r1, r3, r4
 8017682:	f913 0014 	ldrsb.w	r0, [r3, r4, lsl #1]
 8017686:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801768a:	8110      	strh	r0, [r2, #8]
 801768c:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 8017690:	8151      	strh	r1, [r2, #10]
 8017692:	1919      	adds	r1, r3, r4
 8017694:	f913 0014 	ldrsb.w	r0, [r3, r4, lsl #1]
 8017698:	8190      	strh	r0, [r2, #12]
 801769a:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 801769e:	81d1      	strh	r1, [r2, #14]
 80176a0:	f913 3024 	ldrsb.w	r3, [r3, r4, lsl #2]
 80176a4:	8213      	strh	r3, [r2, #16]
 80176a6:	2d00      	cmp	r5, #0
 80176a8:	d04e      	beq.n	8017748 <forward_lite_dw_3x3_sssa8_ch+0xb98>
 80176aa:	f918 3006 	ldrsb.w	r3, [r8, r6]
 80176ae:	f10e 0e02 	add.w	lr, lr, #2
 80176b2:	2d01      	cmp	r5, #1
 80176b4:	8253      	strh	r3, [r2, #18]
 80176b6:	eb08 0306 	add.w	r3, r8, r6
 80176ba:	fa1f fe8e 	uxth.w	lr, lr
 80176be:	5719      	ldrsb	r1, [r3, r4]
 80176c0:	8291      	strh	r1, [r2, #20]
 80176c2:	eb03 0104 	add.w	r1, r3, r4
 80176c6:	f913 0014 	ldrsb.w	r0, [r3, r4, lsl #1]
 80176ca:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80176ce:	82d0      	strh	r0, [r2, #22]
 80176d0:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 80176d4:	8311      	strh	r1, [r2, #24]
 80176d6:	eb03 0104 	add.w	r1, r3, r4
 80176da:	f913 0014 	ldrsb.w	r0, [r3, r4, lsl #1]
 80176de:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80176e2:	8350      	strh	r0, [r2, #26]
 80176e4:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 80176e8:	8391      	strh	r1, [r2, #28]
 80176ea:	eb03 0104 	add.w	r1, r3, r4
 80176ee:	f913 0014 	ldrsb.w	r0, [r3, r4, lsl #1]
 80176f2:	83d0      	strh	r0, [r2, #30]
 80176f4:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 80176f8:	8411      	strh	r1, [r2, #32]
 80176fa:	f913 3024 	ldrsb.w	r3, [r3, r4, lsl #2]
 80176fe:	8453      	strh	r3, [r2, #34]	; 0x22
 8017700:	d022      	beq.n	8017748 <forward_lite_dw_3x3_sssa8_ch+0xb98>
 8017702:	f918 100e 	ldrsb.w	r1, [r8, lr]
 8017706:	eb08 030e 	add.w	r3, r8, lr
 801770a:	8491      	strh	r1, [r2, #36]	; 0x24
 801770c:	5719      	ldrsb	r1, [r3, r4]
 801770e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8017710:	1919      	adds	r1, r3, r4
 8017712:	f913 0014 	ldrsb.w	r0, [r3, r4, lsl #1]
 8017716:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801771a:	8510      	strh	r0, [r2, #40]	; 0x28
 801771c:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 8017720:	8551      	strh	r1, [r2, #42]	; 0x2a
 8017722:	1919      	adds	r1, r3, r4
 8017724:	f913 0014 	ldrsb.w	r0, [r3, r4, lsl #1]
 8017728:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801772c:	8590      	strh	r0, [r2, #44]	; 0x2c
 801772e:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 8017732:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8017734:	1919      	adds	r1, r3, r4
 8017736:	f913 0014 	ldrsb.w	r0, [r3, r4, lsl #1]
 801773a:	8610      	strh	r0, [r2, #48]	; 0x30
 801773c:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 8017740:	8651      	strh	r1, [r2, #50]	; 0x32
 8017742:	f913 3024 	ldrsb.w	r3, [r3, r4, lsl #2]
 8017746:	8693      	strh	r3, [r2, #52]	; 0x34
 8017748:	44a1      	add	r9, r4
 801774a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801774c:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 8017750:	461a      	mov	r2, r3
 8017752:	9314      	str	r3, [sp, #80]	; 0x50
 8017754:	f06f 0315 	mvn.w	r3, #21
 8017758:	fb03 2304 	mla	r3, r3, r4, r2
 801775c:	9313      	str	r3, [sp, #76]	; 0x4c
 801775e:	f7ff ba58 	b.w	8016c12 <forward_lite_dw_3x3_sssa8_ch+0x62>
 8017762:	4602      	mov	r2, r0
 8017764:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 8017768:	e771      	b.n	801764e <forward_lite_dw_3x3_sssa8_ch+0xa9e>
 801776a:	bf00      	nop

0801776c <ai_sum_f32>:
 801776c:	edd1 7a00 	vldr	s15, [r1]
 8017770:	ed92 7a00 	vldr	s14, [r2]
 8017774:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017778:	edc0 7a00 	vstr	s15, [r0]
 801777c:	4770      	bx	lr
 801777e:	bf00      	nop

08017780 <ai_sum_buffer_INT8>:
 8017780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017784:	b085      	sub	sp, #20
 8017786:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017788:	9300      	str	r3, [sp, #0]
 801778a:	ed94 6a00 	vldr	s12, [r4]
 801778e:	461c      	mov	r4, r3
 8017790:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017792:	08a4      	lsrs	r4, r4, #2
 8017794:	f993 9000 	ldrsb.w	r9, [r3]
 8017798:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801779a:	fa1f f589 	uxth.w	r5, r9
 801779e:	f993 a000 	ldrsb.w	sl, [r3]
 80177a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80177a4:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 80177a8:	fa1f f68a 	uxth.w	r6, sl
 80177ac:	ed93 5a00 	vldr	s10, [r3]
 80177b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80177b2:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 80177b6:	edd3 7a00 	vldr	s15, [r3]
 80177ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80177bc:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80177c0:	f993 7000 	ldrsb.w	r7, [r3]
 80177c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80177c6:	ee07 7a10 	vmov	s14, r7
 80177ca:	eec5 5a27 	vdiv.f32	s11, s10, s15
 80177ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80177d2:	bb23      	cbnz	r3, 801781e <ai_sum_buffer_INT8+0x9e>
 80177d4:	eeb4 6a67 	vcmp.f32	s12, s15
 80177d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177dc:	f040 811e 	bne.w	8017a1c <ai_sum_buffer_INT8+0x29c>
 80177e0:	45b9      	cmp	r9, r7
 80177e2:	f040 811b 	bne.w	8017a1c <ai_sum_buffer_INT8+0x29c>
 80177e6:	eeb4 5a67 	vcmp.f32	s10, s15
 80177ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177ee:	f040 8115 	bne.w	8017a1c <ai_sum_buffer_INT8+0x29c>
 80177f2:	45ba      	cmp	sl, r7
 80177f4:	f040 8112 	bne.w	8017a1c <ai_sum_buffer_INT8+0x29c>
 80177f8:	9b00      	ldr	r3, [sp, #0]
 80177fa:	b16b      	cbz	r3, 8017818 <ai_sum_buffer_INT8+0x98>
 80177fc:	440b      	add	r3, r1
 80177fe:	461d      	mov	r5, r3
 8017800:	f911 3b01 	ldrsb.w	r3, [r1], #1
 8017804:	f912 4b01 	ldrsb.w	r4, [r2], #1
 8017808:	4423      	add	r3, r4
 801780a:	1bdb      	subs	r3, r3, r7
 801780c:	f303 0307 	ssat	r3, #8, r3
 8017810:	42a9      	cmp	r1, r5
 8017812:	f800 3b01 	strb.w	r3, [r0], #1
 8017816:	d1f3      	bne.n	8017800 <ai_sum_buffer_INT8+0x80>
 8017818:	b005      	add	sp, #20
 801781a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801781e:	2b01      	cmp	r3, #1
 8017820:	f000 8240 	beq.w	8017ca4 <ai_sum_buffer_INT8+0x524>
 8017824:	f992 3000 	ldrsb.w	r3, [r2]
 8017828:	eba3 030a 	sub.w	r3, r3, sl
 801782c:	ee07 3a90 	vmov	s15, r3
 8017830:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017834:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8017838:	2c00      	cmp	r4, #0
 801783a:	f000 832c 	beq.w	8017e96 <ai_sum_buffer_INT8+0x716>
 801783e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8017842:	00a7      	lsls	r7, r4, #2
 8017844:	ed9f 6a74 	vldr	s12, [pc, #464]	; 8017a18 <ai_sum_buffer_INT8+0x298>
 8017848:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801784c:	4606      	mov	r6, r0
 801784e:	f851 cb04 	ldr.w	ip, [r1], #4
 8017852:	fa2f f28c 	sxtb16	r2, ip
 8017856:	ea4f 2c3c 	mov.w	ip, ip, ror #8
 801785a:	fa2f fc8c 	sxtb16	ip, ip
 801785e:	fadc fc05 	ssub16	ip, ip, r5
 8017862:	fad2 f205 	ssub16	r2, r2, r5
 8017866:	b213      	sxth	r3, r2
 8017868:	eef0 4a47 	vmov.f32	s9, s14
 801786c:	ee05 3a10 	vmov	s10, r3
 8017870:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8017874:	eee5 4a26 	vfma.f32	s9, s10, s13
 8017878:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801787c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017880:	fe75 7a86 	vselgt.f32	s15, s11, s12
 8017884:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8017888:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801788c:	ee17 8a90 	vmov	r8, s15
 8017890:	f308 0807 	ssat	r8, #8, r8
 8017894:	1412      	asrs	r2, r2, #16
 8017896:	eeb0 5a47 	vmov.f32	s10, s14
 801789a:	fa4f f888 	sxtb.w	r8, r8
 801789e:	ee07 2a90 	vmov	s15, r2
 80178a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80178a6:	eea7 5aa6 	vfma.f32	s10, s15, s13
 80178aa:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 80178ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178b2:	fe75 7a86 	vselgt.f32	s15, s11, s12
 80178b6:	ee77 7a85 	vadd.f32	s15, s15, s10
 80178ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80178be:	ee17 3a90 	vmov	r3, s15
 80178c2:	f303 0307 	ssat	r3, #8, r3
 80178c6:	b25a      	sxtb	r2, r3
 80178c8:	eef0 4a47 	vmov.f32	s9, s14
 80178cc:	fa0f f38c 	sxth.w	r3, ip
 80178d0:	ee05 3a10 	vmov	s10, r3
 80178d4:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80178d8:	eee5 4a26 	vfma.f32	s9, s10, s13
 80178dc:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 80178e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178e4:	fe75 7a86 	vselgt.f32	s15, s11, s12
 80178e8:	ee77 7aa4 	vadd.f32	s15, s15, s9
 80178ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80178f0:	ee17 ea90 	vmov	lr, s15
 80178f4:	f30e 0e07 	ssat	lr, #8, lr
 80178f8:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 80178fc:	eeb0 5a47 	vmov.f32	s10, s14
 8017900:	fa4f fe8e 	sxtb.w	lr, lr
 8017904:	ee07 ca90 	vmov	s15, ip
 8017908:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801790c:	eea7 5aa6 	vfma.f32	s10, s15, s13
 8017910:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8017914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017918:	fe75 7a86 	vselgt.f32	s15, s11, s12
 801791c:	ee77 7a85 	vadd.f32	s15, s15, s10
 8017920:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017924:	ee17 3a90 	vmov	r3, s15
 8017928:	f303 0c07 	ssat	ip, #8, r3
 801792c:	0413      	lsls	r3, r2, #16
 801792e:	42a1      	cmp	r1, r4
 8017930:	fa5f f888 	uxtb.w	r8, r8
 8017934:	ea4f 220e 	mov.w	r2, lr, lsl #8
 8017938:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801793c:	b292      	uxth	r2, r2
 801793e:	ea43 0308 	orr.w	r3, r3, r8
 8017942:	ea43 0302 	orr.w	r3, r3, r2
 8017946:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 801794a:	f846 3b04 	str.w	r3, [r6], #4
 801794e:	f47f af7e 	bne.w	801784e <ai_sum_buffer_INT8+0xce>
 8017952:	4438      	add	r0, r7
 8017954:	9b00      	ldr	r3, [sp, #0]
 8017956:	f013 0303 	ands.w	r3, r3, #3
 801795a:	f43f af5d 	beq.w	8017818 <ai_sum_buffer_INT8+0x98>
 801795e:	f994 2000 	ldrsb.w	r2, [r4]
 8017962:	eef0 4a47 	vmov.f32	s9, s14
 8017966:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801796a:	ed9f 5a2b 	vldr	s10, [pc, #172]	; 8017a18 <ai_sum_buffer_INT8+0x298>
 801796e:	eba2 0209 	sub.w	r2, r2, r9
 8017972:	ee07 2a90 	vmov	s15, r2
 8017976:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 801797a:	eee5 4aa6 	vfma.f32	s9, s11, s13
 801797e:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8017982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017986:	fe76 7a05 	vselgt.f32	s15, s12, s10
 801798a:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801798e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017992:	ee17 2a90 	vmov	r2, s15
 8017996:	f302 0207 	ssat	r2, #8, r2
 801799a:	3b01      	subs	r3, #1
 801799c:	7002      	strb	r2, [r0, #0]
 801799e:	f43f af3b 	beq.w	8017818 <ai_sum_buffer_INT8+0x98>
 80179a2:	f994 2001 	ldrsb.w	r2, [r4, #1]
 80179a6:	eef0 4a47 	vmov.f32	s9, s14
 80179aa:	eba2 0209 	sub.w	r2, r2, r9
 80179ae:	ee07 2a90 	vmov	s15, r2
 80179b2:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80179b6:	eee5 4aa6 	vfma.f32	s9, s11, s13
 80179ba:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 80179be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179c2:	fe76 7a05 	vselgt.f32	s15, s12, s10
 80179c6:	ee77 7aa4 	vadd.f32	s15, s15, s9
 80179ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80179ce:	ee17 2a90 	vmov	r2, s15
 80179d2:	f302 0207 	ssat	r2, #8, r2
 80179d6:	2b01      	cmp	r3, #1
 80179d8:	7042      	strb	r2, [r0, #1]
 80179da:	f43f af1d 	beq.w	8017818 <ai_sum_buffer_INT8+0x98>
 80179de:	f994 3002 	ldrsb.w	r3, [r4, #2]
 80179e2:	eba3 0309 	sub.w	r3, r3, r9
 80179e6:	ee07 3a90 	vmov	s15, r3
 80179ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80179ee:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80179f2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80179f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179fa:	fe36 6a05 	vselgt.f32	s12, s12, s10
 80179fe:	ee36 7a07 	vadd.f32	s14, s12, s14
 8017a02:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8017a06:	ee17 3a10 	vmov	r3, s14
 8017a0a:	f303 0307 	ssat	r3, #8, r3
 8017a0e:	7083      	strb	r3, [r0, #2]
 8017a10:	b005      	add	sp, #20
 8017a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a16:	bf00      	nop
 8017a18:	befffffc 	.word	0xbefffffc
 8017a1c:	2c00      	cmp	r4, #0
 8017a1e:	f000 8238 	beq.w	8017e92 <ai_sum_buffer_INT8+0x712>
 8017a22:	00a3      	lsls	r3, r4, #2
 8017a24:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 8017a28:	ed1f 5a05 	vldr	s10, [pc, #-20]	; 8017a18 <ai_sum_buffer_INT8+0x298>
 8017a2c:	4680      	mov	r8, r0
 8017a2e:	9301      	str	r3, [sp, #4]
 8017a30:	eb01 0384 	add.w	r3, r1, r4, lsl #2
 8017a34:	4617      	mov	r7, r2
 8017a36:	f8cd 9008 	str.w	r9, [sp, #8]
 8017a3a:	469b      	mov	fp, r3
 8017a3c:	9303      	str	r3, [sp, #12]
 8017a3e:	f851 cb04 	ldr.w	ip, [r1], #4
 8017a42:	f857 3b04 	ldr.w	r3, [r7], #4
 8017a46:	fa2f f48c 	sxtb16	r4, ip
 8017a4a:	ea4f 2933 	mov.w	r9, r3, ror #8
 8017a4e:	ea4f 2c3c 	mov.w	ip, ip, ror #8
 8017a52:	fa2f f989 	sxtb16	r9, r9
 8017a56:	fa2f fc8c 	sxtb16	ip, ip
 8017a5a:	fa2f f383 	sxtb16	r3, r3
 8017a5e:	fadc fc05 	ssub16	ip, ip, r5
 8017a62:	fad4 f405 	ssub16	r4, r4, r5
 8017a66:	fad9 f906 	ssub16	r9, r9, r6
 8017a6a:	fad3 f306 	ssub16	r3, r3, r6
 8017a6e:	fa0f fe83 	sxth.w	lr, r3
 8017a72:	ee07 ea90 	vmov	s15, lr
 8017a76:	fa0f fe84 	sxth.w	lr, r4
 8017a7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017a7e:	ee06 ea10 	vmov	s12, lr
 8017a82:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8017a86:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8017a8a:	eee6 7a26 	vfma.f32	s15, s12, s13
 8017a8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017a92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a9a:	fe34 6a85 	vselgt.f32	s12, s9, s10
 8017a9e:	ee76 7a27 	vadd.f32	s15, s12, s15
 8017aa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017aa6:	ee17 ea90 	vmov	lr, s15
 8017aaa:	f30e 0e07 	ssat	lr, #8, lr
 8017aae:	141b      	asrs	r3, r3, #16
 8017ab0:	1424      	asrs	r4, r4, #16
 8017ab2:	ee07 3a90 	vmov	s15, r3
 8017ab6:	fa4f fe8e 	sxtb.w	lr, lr
 8017aba:	ee06 4a10 	vmov	s12, r4
 8017abe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017ac2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8017ac6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8017aca:	eee6 7a26 	vfma.f32	s15, s12, s13
 8017ace:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017ad2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ada:	fe34 6a85 	vselgt.f32	s12, s9, s10
 8017ade:	ee76 7a27 	vadd.f32	s15, s12, s15
 8017ae2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017ae6:	ee17 3a90 	vmov	r3, s15
 8017aea:	f303 0307 	ssat	r3, #8, r3
 8017aee:	fa0f f489 	sxth.w	r4, r9
 8017af2:	b25b      	sxtb	r3, r3
 8017af4:	ee07 4a90 	vmov	s15, r4
 8017af8:	fa0f f48c 	sxth.w	r4, ip
 8017afc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017b00:	ee06 4a10 	vmov	s12, r4
 8017b04:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8017b08:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8017b0c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8017b10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017b14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b1c:	fe34 6a85 	vselgt.f32	s12, s9, s10
 8017b20:	ee76 7a27 	vadd.f32	s15, s12, s15
 8017b24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017b28:	ee17 4a90 	vmov	r4, s15
 8017b2c:	f304 0407 	ssat	r4, #8, r4
 8017b30:	ea4f 4929 	mov.w	r9, r9, asr #16
 8017b34:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 8017b38:	ee07 9a90 	vmov	s15, r9
 8017b3c:	b264      	sxtb	r4, r4
 8017b3e:	ee06 ca10 	vmov	s12, ip
 8017b42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017b46:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8017b4a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8017b4e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8017b52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017b56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b5e:	fe34 6a85 	vselgt.f32	s12, s9, s10
 8017b62:	ee76 7a27 	vadd.f32	s15, s12, s15
 8017b66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017b6a:	ee17 ca90 	vmov	ip, s15
 8017b6e:	f30c 0c07 	ssat	ip, #8, ip
 8017b72:	041b      	lsls	r3, r3, #16
 8017b74:	4559      	cmp	r1, fp
 8017b76:	fa5f fe8e 	uxtb.w	lr, lr
 8017b7a:	ea4f 2404 	mov.w	r4, r4, lsl #8
 8017b7e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8017b82:	b2a4      	uxth	r4, r4
 8017b84:	ea43 0e0e 	orr.w	lr, r3, lr
 8017b88:	ea4e 0e04 	orr.w	lr, lr, r4
 8017b8c:	ea4e 6e0c 	orr.w	lr, lr, ip, lsl #24
 8017b90:	f848 eb04 	str.w	lr, [r8], #4
 8017b94:	f47f af53 	bne.w	8017a3e <ai_sum_buffer_INT8+0x2be>
 8017b98:	e9dd 3901 	ldrd	r3, r9, [sp, #4]
 8017b9c:	441a      	add	r2, r3
 8017b9e:	4418      	add	r0, r3
 8017ba0:	9b00      	ldr	r3, [sp, #0]
 8017ba2:	f013 0303 	ands.w	r3, r3, #3
 8017ba6:	f43f ae37 	beq.w	8017818 <ai_sum_buffer_INT8+0x98>
 8017baa:	f992 1000 	ldrsb.w	r1, [r2]
 8017bae:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 8017bb2:	9c03      	ldr	r4, [sp, #12]
 8017bb4:	eba1 010a 	sub.w	r1, r1, sl
 8017bb8:	ed5f 4a69 	vldr	s9, [pc, #-420]	; 8017a18 <ai_sum_buffer_INT8+0x298>
 8017bbc:	ee07 1a90 	vmov	s15, r1
 8017bc0:	f994 1000 	ldrsb.w	r1, [r4]
 8017bc4:	eba1 0109 	sub.w	r1, r1, r9
 8017bc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017bcc:	ee06 1a10 	vmov	s12, r1
 8017bd0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8017bd4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8017bd8:	eee6 7a86 	vfma.f32	s15, s13, s12
 8017bdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017be0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017be8:	fe35 6a24 	vselgt.f32	s12, s10, s9
 8017bec:	ee76 7a27 	vadd.f32	s15, s12, s15
 8017bf0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017bf4:	ee17 1a90 	vmov	r1, s15
 8017bf8:	f301 0107 	ssat	r1, #8, r1
 8017bfc:	3b01      	subs	r3, #1
 8017bfe:	7001      	strb	r1, [r0, #0]
 8017c00:	f43f ae0a 	beq.w	8017818 <ai_sum_buffer_INT8+0x98>
 8017c04:	f992 1001 	ldrsb.w	r1, [r2, #1]
 8017c08:	eba1 010a 	sub.w	r1, r1, sl
 8017c0c:	ee07 1a90 	vmov	s15, r1
 8017c10:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8017c14:	eba1 0109 	sub.w	r1, r1, r9
 8017c18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017c1c:	ee06 1a10 	vmov	s12, r1
 8017c20:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8017c24:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8017c28:	eee6 7a86 	vfma.f32	s15, s13, s12
 8017c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017c30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c38:	fe35 6a24 	vselgt.f32	s12, s10, s9
 8017c3c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8017c40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017c44:	ee17 1a90 	vmov	r1, s15
 8017c48:	f301 0107 	ssat	r1, #8, r1
 8017c4c:	2b01      	cmp	r3, #1
 8017c4e:	7041      	strb	r1, [r0, #1]
 8017c50:	f43f ade2 	beq.w	8017818 <ai_sum_buffer_INT8+0x98>
 8017c54:	f992 3002 	ldrsb.w	r3, [r2, #2]
 8017c58:	f994 2002 	ldrsb.w	r2, [r4, #2]
 8017c5c:	eba3 030a 	sub.w	r3, r3, sl
 8017c60:	eba2 0209 	sub.w	r2, r2, r9
 8017c64:	ee07 3a90 	vmov	s15, r3
 8017c68:	ee06 2a10 	vmov	s12, r2
 8017c6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017c70:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8017c74:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8017c78:	eee6 5a26 	vfma.f32	s11, s12, s13
 8017c7c:	ee35 7a87 	vadd.f32	s14, s11, s14
 8017c80:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8017c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c88:	fe35 5a24 	vselgt.f32	s10, s10, s9
 8017c8c:	ee35 7a07 	vadd.f32	s14, s10, s14
 8017c90:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8017c94:	ee17 3a10 	vmov	r3, s14
 8017c98:	f303 0307 	ssat	r3, #8, r3
 8017c9c:	7083      	strb	r3, [r0, #2]
 8017c9e:	b005      	add	sp, #20
 8017ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ca4:	f991 3000 	ldrsb.w	r3, [r1]
 8017ca8:	eba3 0309 	sub.w	r3, r3, r9
 8017cac:	ee07 3a90 	vmov	s15, r3
 8017cb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017cb4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8017cb8:	2c00      	cmp	r4, #0
 8017cba:	f000 80ee 	beq.w	8017e9a <ai_sum_buffer_INT8+0x71a>
 8017cbe:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8017cc2:	00a7      	lsls	r7, r4, #2
 8017cc4:	ed5f 6aac 	vldr	s13, [pc, #-688]	; 8017a18 <ai_sum_buffer_INT8+0x298>
 8017cc8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8017ccc:	4605      	mov	r5, r0
 8017cce:	f852 cb04 	ldr.w	ip, [r2], #4
 8017cd2:	fa2f f18c 	sxtb16	r1, ip
 8017cd6:	ea4f 2c3c 	mov.w	ip, ip, ror #8
 8017cda:	fa2f fc8c 	sxtb16	ip, ip
 8017cde:	fadc fc06 	ssub16	ip, ip, r6
 8017ce2:	fad1 f106 	ssub16	r1, r1, r6
 8017ce6:	b20b      	sxth	r3, r1
 8017ce8:	eef0 4a47 	vmov.f32	s9, s14
 8017cec:	ee05 3a10 	vmov	s10, r3
 8017cf0:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8017cf4:	eee5 4a25 	vfma.f32	s9, s10, s11
 8017cf8:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8017cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d00:	fe76 7a26 	vselgt.f32	s15, s12, s13
 8017d04:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8017d08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017d0c:	ee17 8a90 	vmov	r8, s15
 8017d10:	f308 0807 	ssat	r8, #8, r8
 8017d14:	1409      	asrs	r1, r1, #16
 8017d16:	eeb0 5a47 	vmov.f32	s10, s14
 8017d1a:	fa4f f888 	sxtb.w	r8, r8
 8017d1e:	ee07 1a90 	vmov	s15, r1
 8017d22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017d26:	eea7 5aa5 	vfma.f32	s10, s15, s11
 8017d2a:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8017d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d32:	fe76 7a26 	vselgt.f32	s15, s12, s13
 8017d36:	ee77 7a85 	vadd.f32	s15, s15, s10
 8017d3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017d3e:	ee17 3a90 	vmov	r3, s15
 8017d42:	f303 0307 	ssat	r3, #8, r3
 8017d46:	b259      	sxtb	r1, r3
 8017d48:	eef0 4a47 	vmov.f32	s9, s14
 8017d4c:	fa0f f38c 	sxth.w	r3, ip
 8017d50:	ee05 3a10 	vmov	s10, r3
 8017d54:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8017d58:	eee5 4a25 	vfma.f32	s9, s10, s11
 8017d5c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8017d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d64:	fe76 7a26 	vselgt.f32	s15, s12, s13
 8017d68:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8017d6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017d70:	ee17 ea90 	vmov	lr, s15
 8017d74:	f30e 0e07 	ssat	lr, #8, lr
 8017d78:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 8017d7c:	eeb0 5a47 	vmov.f32	s10, s14
 8017d80:	fa4f fe8e 	sxtb.w	lr, lr
 8017d84:	ee07 ca90 	vmov	s15, ip
 8017d88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017d8c:	eea7 5aa5 	vfma.f32	s10, s15, s11
 8017d90:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8017d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d98:	fe76 7a26 	vselgt.f32	s15, s12, s13
 8017d9c:	ee77 7a85 	vadd.f32	s15, s15, s10
 8017da0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017da4:	ee17 3a90 	vmov	r3, s15
 8017da8:	f303 0c07 	ssat	ip, #8, r3
 8017dac:	040b      	lsls	r3, r1, #16
 8017dae:	42a2      	cmp	r2, r4
 8017db0:	fa5f f888 	uxtb.w	r8, r8
 8017db4:	ea4f 210e 	mov.w	r1, lr, lsl #8
 8017db8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8017dbc:	b289      	uxth	r1, r1
 8017dbe:	ea43 0308 	orr.w	r3, r3, r8
 8017dc2:	ea43 0301 	orr.w	r3, r3, r1
 8017dc6:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 8017dca:	f845 3b04 	str.w	r3, [r5], #4
 8017dce:	f47f af7e 	bne.w	8017cce <ai_sum_buffer_INT8+0x54e>
 8017dd2:	4438      	add	r0, r7
 8017dd4:	9b00      	ldr	r3, [sp, #0]
 8017dd6:	f013 0203 	ands.w	r2, r3, #3
 8017dda:	f43f ad1d 	beq.w	8017818 <ai_sum_buffer_INT8+0x98>
 8017dde:	f994 3000 	ldrsb.w	r3, [r4]
 8017de2:	eef0 4a47 	vmov.f32	s9, s14
 8017de6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8017dea:	ed9f 5a2d 	vldr	s10, [pc, #180]	; 8017ea0 <ai_sum_buffer_INT8+0x720>
 8017dee:	eba3 030a 	sub.w	r3, r3, sl
 8017df2:	ee07 3a90 	vmov	s15, r3
 8017df6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8017dfa:	eee5 4a86 	vfma.f32	s9, s11, s12
 8017dfe:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8017e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e06:	fe76 7a85 	vselgt.f32	s15, s13, s10
 8017e0a:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8017e0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017e12:	ee17 3a90 	vmov	r3, s15
 8017e16:	f303 0307 	ssat	r3, #8, r3
 8017e1a:	3a01      	subs	r2, #1
 8017e1c:	7003      	strb	r3, [r0, #0]
 8017e1e:	f43f acfb 	beq.w	8017818 <ai_sum_buffer_INT8+0x98>
 8017e22:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8017e26:	eef0 4a47 	vmov.f32	s9, s14
 8017e2a:	eba3 030a 	sub.w	r3, r3, sl
 8017e2e:	ee07 3a90 	vmov	s15, r3
 8017e32:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8017e36:	eee5 4a86 	vfma.f32	s9, s11, s12
 8017e3a:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8017e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e42:	fe76 7a85 	vselgt.f32	s15, s13, s10
 8017e46:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8017e4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017e4e:	ee17 3a90 	vmov	r3, s15
 8017e52:	f303 0307 	ssat	r3, #8, r3
 8017e56:	2a01      	cmp	r2, #1
 8017e58:	7043      	strb	r3, [r0, #1]
 8017e5a:	f43f acdd 	beq.w	8017818 <ai_sum_buffer_INT8+0x98>
 8017e5e:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8017e62:	eba3 030a 	sub.w	r3, r3, sl
 8017e66:	ee07 3a90 	vmov	s15, r3
 8017e6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017e6e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8017e72:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8017e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e7a:	fe76 6a85 	vselgt.f32	s13, s13, s10
 8017e7e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017e82:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8017e86:	ee17 3a10 	vmov	r3, s14
 8017e8a:	f303 0307 	ssat	r3, #8, r3
 8017e8e:	7083      	strb	r3, [r0, #2]
 8017e90:	e4c2      	b.n	8017818 <ai_sum_buffer_INT8+0x98>
 8017e92:	9103      	str	r1, [sp, #12]
 8017e94:	e684      	b.n	8017ba0 <ai_sum_buffer_INT8+0x420>
 8017e96:	460c      	mov	r4, r1
 8017e98:	e55c      	b.n	8017954 <ai_sum_buffer_INT8+0x1d4>
 8017e9a:	4614      	mov	r4, r2
 8017e9c:	e79a      	b.n	8017dd4 <ai_sum_buffer_INT8+0x654>
 8017e9e:	bf00      	nop
 8017ea0:	befffffc 	.word	0xbefffffc

08017ea4 <align_factor_ch>:
 8017ea4:	2900      	cmp	r1, #0
 8017ea6:	d05d      	beq.n	8017f64 <align_factor_ch+0xc0>
 8017ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017eac:	ed2d 8b04 	vpush	{d8-d9}
 8017eb0:	ee80 9a20 	vdiv.f32	s18, s0, s1
 8017eb4:	4604      	mov	r4, r0
 8017eb6:	4691      	mov	r9, r2
 8017eb8:	4698      	mov	r8, r3
 8017eba:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8017ebe:	eddf 9a2a 	vldr	s19, [pc, #168]	; 8017f68 <align_factor_ch+0xc4>
 8017ec2:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 8017ec6:	2700      	movs	r7, #0
 8017ec8:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8017ecc:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8017ed0:	ecf4 7a01 	vldmia	r4!, {s15}
 8017ed4:	ee69 7a27 	vmul.f32	s15, s18, s15
 8017ed8:	eef4 7a68 	vcmp.f32	s15, s17
 8017edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ee0:	d528      	bpl.n	8017f34 <align_factor_ch+0x90>
 8017ee2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017eea:	dd23      	ble.n	8017f34 <align_factor_ch+0x90>
 8017eec:	2200      	movs	r2, #0
 8017eee:	e003      	b.n	8017ef8 <align_factor_ch+0x54>
 8017ef0:	2a20      	cmp	r2, #32
 8017ef2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017ef6:	d031      	beq.n	8017f5c <align_factor_ch+0xb8>
 8017ef8:	eef4 7ac8 	vcmpe.f32	s15, s16
 8017efc:	b213      	sxth	r3, r2
 8017efe:	3201      	adds	r2, #1
 8017f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f04:	d4f4      	bmi.n	8017ef0 <align_factor_ch+0x4c>
 8017f06:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8017f0a:	f8a8 3000 	strh.w	r3, [r8]
 8017f0e:	ee17 0a90 	vmov	r0, s15
 8017f12:	f7e8 fa55 	bl	80003c0 <__aeabi_f2lz>
 8017f16:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 8017f1a:	bf18      	it	ne
 8017f1c:	ea86 70e1 	eorne.w	r0, r6, r1, asr #31
 8017f20:	42a5      	cmp	r5, r4
 8017f22:	f108 0802 	add.w	r8, r8, #2
 8017f26:	f849 0b04 	str.w	r0, [r9], #4
 8017f2a:	d1d1      	bne.n	8017ed0 <align_factor_ch+0x2c>
 8017f2c:	ecbd 8b04 	vpop	{d8-d9}
 8017f30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017f34:	2300      	movs	r3, #0
 8017f36:	e005      	b.n	8017f44 <align_factor_ch+0xa0>
 8017f38:	b213      	sxth	r3, r2
 8017f3a:	ee67 7a88 	vmul.f32	s15, s15, s16
 8017f3e:	f113 0f1f 	cmn.w	r3, #31
 8017f42:	d006      	beq.n	8017f52 <align_factor_ch+0xae>
 8017f44:	eef4 7ae8 	vcmpe.f32	s15, s17
 8017f48:	1e5a      	subs	r2, r3, #1
 8017f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f4e:	dcf3      	bgt.n	8017f38 <align_factor_ch+0x94>
 8017f50:	e7d9      	b.n	8017f06 <align_factor_ch+0x62>
 8017f52:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017f56:	f06f 031d 	mvn.w	r3, #29
 8017f5a:	e7d4      	b.n	8017f06 <align_factor_ch+0x62>
 8017f5c:	2000      	movs	r0, #0
 8017f5e:	f8a8 7000 	strh.w	r7, [r8]
 8017f62:	e7dd      	b.n	8017f20 <align_factor_ch+0x7c>
 8017f64:	4770      	bx	lr
 8017f66:	bf00      	nop
 8017f68:	4f000000 	.word	0x4f000000

08017f6c <st_sssa8_ch_convolve_rank1upd>:
 8017f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f70:	b085      	sub	sp, #20
 8017f72:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 8017f76:	f99d b040 	ldrsb.w	fp, [sp, #64]	; 0x40
 8017f7a:	fb13 f304 	smulbb	r3, r3, r4
 8017f7e:	460c      	mov	r4, r1
 8017f80:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8017f82:	fb13 f500 	smulbb	r5, r3, r0
 8017f86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017f88:	2a00      	cmp	r2, #0
 8017f8a:	d070      	beq.n	801806e <st_sssa8_ch_convolve_rank1upd+0x102>
 8017f8c:	b2ad      	uxth	r5, r5
 8017f8e:	f1a1 0904 	sub.w	r9, r1, #4
 8017f92:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
 8017f96:	08af      	lsrs	r7, r5, #2
 8017f98:	f005 0503 	and.w	r5, r5, #3
 8017f9c:	eb03 08c2 	add.w	r8, r3, r2, lsl #3
 8017fa0:	1e69      	subs	r1, r5, #1
 8017fa2:	f1a7 0381 	sub.w	r3, r7, #129	; 0x81
 8017fa6:	f1a7 0280 	sub.w	r2, r7, #128	; 0x80
 8017faa:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8017fae:	b289      	uxth	r1, r1
 8017fb0:	9100      	str	r1, [sp, #0]
 8017fb2:	ebc3 2143 	rsb	r1, r3, r3, lsl #9
 8017fb6:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
 8017fba:	b292      	uxth	r2, r2
 8017fbc:	9202      	str	r2, [sp, #8]
 8017fbe:	025a      	lsls	r2, r3, #9
 8017fc0:	3301      	adds	r3, #1
 8017fc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8017fc6:	025b      	lsls	r3, r3, #9
 8017fc8:	9203      	str	r2, [sp, #12]
 8017fca:	9301      	str	r3, [sp, #4]
 8017fcc:	2f80      	cmp	r7, #128	; 0x80
 8017fce:	d953      	bls.n	8018078 <st_sssa8_ch_convolve_rank1upd+0x10c>
 8017fd0:	9b03      	ldr	r3, [sp, #12]
 8017fd2:	f504 7000 	add.w	r0, r4, #512	; 0x200
 8017fd6:	2600      	movs	r6, #0
 8017fd8:	eb04 0c03 	add.w	ip, r4, r3
 8017fdc:	f5a0 7100 	sub.w	r1, r0, #512	; 0x200
 8017fe0:	2200      	movs	r2, #0
 8017fe2:	f851 3b04 	ldr.w	r3, [r1], #4
 8017fe6:	fa2f fe83 	sxtb16	lr, r3
 8017fea:	4281      	cmp	r1, r0
 8017fec:	ea4f 2333 	mov.w	r3, r3, ror #8
 8017ff0:	fa92 f21e 	qadd16	r2, r2, lr
 8017ff4:	fa2f f383 	sxtb16	r3, r3
 8017ff8:	fa92 f213 	qadd16	r2, r2, r3
 8017ffc:	d1f1      	bne.n	8017fe2 <st_sssa8_ch_convolve_rank1upd+0x76>
 8017ffe:	f501 7000 	add.w	r0, r1, #512	; 0x200
 8018002:	b213      	sxth	r3, r2
 8018004:	4560      	cmp	r0, ip
 8018006:	eb03 4222 	add.w	r2, r3, r2, asr #16
 801800a:	4416      	add	r6, r2
 801800c:	d1e6      	bne.n	8017fdc <st_sssa8_ch_convolve_rank1upd+0x70>
 801800e:	9b01      	ldr	r3, [sp, #4]
 8018010:	18e1      	adds	r1, r4, r3
 8018012:	9c02      	ldr	r4, [sp, #8]
 8018014:	b374      	cbz	r4, 8018074 <st_sssa8_ch_convolve_rank1upd+0x108>
 8018016:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801801a:	2200      	movs	r2, #0
 801801c:	f851 3b04 	ldr.w	r3, [r1], #4
 8018020:	fa2f f083 	sxtb16	r0, r3
 8018024:	428c      	cmp	r4, r1
 8018026:	ea4f 2333 	mov.w	r3, r3, ror #8
 801802a:	fa92 f210 	qadd16	r2, r2, r0
 801802e:	fa2f f383 	sxtb16	r3, r3
 8018032:	fa92 f213 	qadd16	r2, r2, r3
 8018036:	d1f1      	bne.n	801801c <st_sssa8_ch_convolve_rank1upd+0xb0>
 8018038:	b213      	sxth	r3, r2
 801803a:	eb03 4322 	add.w	r3, r3, r2, asr #16
 801803e:	441e      	add	r6, r3
 8018040:	b16d      	cbz	r5, 801805e <st_sssa8_ch_convolve_rank1upd+0xf2>
 8018042:	f994 3000 	ldrsb.w	r3, [r4]
 8018046:	441e      	add	r6, r3
 8018048:	9b00      	ldr	r3, [sp, #0]
 801804a:	b13b      	cbz	r3, 801805c <st_sssa8_ch_convolve_rank1upd+0xf0>
 801804c:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8018050:	2d02      	cmp	r5, #2
 8018052:	441e      	add	r6, r3
 8018054:	d002      	beq.n	801805c <st_sssa8_ch_convolve_rank1upd+0xf0>
 8018056:	f994 3002 	ldrsb.w	r3, [r4, #2]
 801805a:	441e      	add	r6, r3
 801805c:	442c      	add	r4, r5
 801805e:	f859 3f04 	ldr.w	r3, [r9, #4]!
 8018062:	fb0b 3616 	mls	r6, fp, r6, r3
 8018066:	f84a 6b04 	str.w	r6, [sl], #4
 801806a:	45c2      	cmp	sl, r8
 801806c:	d1ae      	bne.n	8017fcc <st_sssa8_ch_convolve_rank1upd+0x60>
 801806e:	b005      	add	sp, #20
 8018070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018074:	460c      	mov	r4, r1
 8018076:	e7e3      	b.n	8018040 <st_sssa8_ch_convolve_rank1upd+0xd4>
 8018078:	4621      	mov	r1, r4
 801807a:	2600      	movs	r6, #0
 801807c:	463c      	mov	r4, r7
 801807e:	e7c9      	b.n	8018014 <st_sssa8_ch_convolve_rank1upd+0xa8>

08018080 <ai_padding_opt_init>:
 8018080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018084:	2700      	movs	r7, #0
 8018086:	9c07      	ldr	r4, [sp, #28]
 8018088:	e9c0 7700 	strd	r7, r7, [r0]
 801808c:	6087      	str	r7, [r0, #8]
 801808e:	46b9      	mov	r9, r7
 8018090:	690d      	ldr	r5, [r1, #16]
 8018092:	f1c5 0c00 	rsb	ip, r5, #0
 8018096:	689d      	ldr	r5, [r3, #8]
 8018098:	42bd      	cmp	r5, r7
 801809a:	dd1c      	ble.n	80180d6 <ai_padding_opt_init+0x56>
 801809c:	463e      	mov	r6, r7
 801809e:	46be      	mov	lr, r7
 80180a0:	e010      	b.n	80180c4 <ai_padding_opt_init+0x44>
 80180a2:	6895      	ldr	r5, [r2, #8]
 80180a4:	eba5 080c 	sub.w	r8, r5, ip
 80180a8:	68a5      	ldr	r5, [r4, #8]
 80180aa:	45a8      	cmp	r8, r5
 80180ac:	da10      	bge.n	80180d0 <ai_padding_opt_init+0x50>
 80180ae:	f109 0901 	add.w	r9, r9, #1
 80180b2:	f8c0 9008 	str.w	r9, [r0, #8]
 80180b6:	688d      	ldr	r5, [r1, #8]
 80180b8:	f10e 0e01 	add.w	lr, lr, #1
 80180bc:	44ac      	add	ip, r5
 80180be:	689d      	ldr	r5, [r3, #8]
 80180c0:	4575      	cmp	r5, lr
 80180c2:	dd09      	ble.n	80180d8 <ai_padding_opt_init+0x58>
 80180c4:	f1bc 0f00 	cmp.w	ip, #0
 80180c8:	daeb      	bge.n	80180a2 <ai_padding_opt_init+0x22>
 80180ca:	3601      	adds	r6, #1
 80180cc:	6006      	str	r6, [r0, #0]
 80180ce:	e7f2      	b.n	80180b6 <ai_padding_opt_init+0x36>
 80180d0:	3701      	adds	r7, #1
 80180d2:	6047      	str	r7, [r0, #4]
 80180d4:	e7ef      	b.n	80180b6 <ai_padding_opt_init+0x36>
 80180d6:	463e      	mov	r6, r7
 80180d8:	2500      	movs	r5, #0
 80180da:	f8c0 9014 	str.w	r9, [r0, #20]
 80180de:	e9c0 6703 	strd	r6, r7, [r0, #12]
 80180e2:	e9c0 5506 	strd	r5, r5, [r0, #24]
 80180e6:	6205      	str	r5, [r0, #32]
 80180e8:	694e      	ldr	r6, [r1, #20]
 80180ea:	f1c6 0c00 	rsb	ip, r6, #0
 80180ee:	685e      	ldr	r6, [r3, #4]
 80180f0:	42ae      	cmp	r6, r5
 80180f2:	dd1c      	ble.n	801812e <ai_padding_opt_init+0xae>
 80180f4:	46ae      	mov	lr, r5
 80180f6:	e00f      	b.n	8018118 <ai_padding_opt_init+0x98>
 80180f8:	6855      	ldr	r5, [r2, #4]
 80180fa:	6866      	ldr	r6, [r4, #4]
 80180fc:	eba5 050c 	sub.w	r5, r5, ip
 8018100:	42b5      	cmp	r5, r6
 8018102:	da10      	bge.n	8018126 <ai_padding_opt_init+0xa6>
 8018104:	6a05      	ldr	r5, [r0, #32]
 8018106:	3501      	adds	r5, #1
 8018108:	6205      	str	r5, [r0, #32]
 801810a:	68cd      	ldr	r5, [r1, #12]
 801810c:	f10e 0e01 	add.w	lr, lr, #1
 8018110:	44ac      	add	ip, r5
 8018112:	685d      	ldr	r5, [r3, #4]
 8018114:	4575      	cmp	r5, lr
 8018116:	dd0a      	ble.n	801812e <ai_padding_opt_init+0xae>
 8018118:	f1bc 0f00 	cmp.w	ip, #0
 801811c:	daec      	bge.n	80180f8 <ai_padding_opt_init+0x78>
 801811e:	6985      	ldr	r5, [r0, #24]
 8018120:	3501      	adds	r5, #1
 8018122:	6185      	str	r5, [r0, #24]
 8018124:	e7f1      	b.n	801810a <ai_padding_opt_init+0x8a>
 8018126:	69c5      	ldr	r5, [r0, #28]
 8018128:	3501      	adds	r5, #1
 801812a:	61c5      	str	r5, [r0, #28]
 801812c:	e7ed      	b.n	801810a <ai_padding_opt_init+0x8a>
 801812e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018132:	bf00      	nop

08018134 <ai_padding_opt_phase1>:
 8018134:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 8018138:	b923      	cbnz	r3, 8018144 <ai_padding_opt_phase1+0x10>
 801813a:	b17a      	cbz	r2, 801815c <ai_padding_opt_phase1+0x28>
 801813c:	3a01      	subs	r2, #1
 801813e:	8483      	strh	r3, [r0, #36]	; 0x24
 8018140:	61c2      	str	r2, [r0, #28]
 8018142:	e004      	b.n	801814e <ai_padding_opt_phase1+0x1a>
 8018144:	b152      	cbz	r2, 801815c <ai_padding_opt_phase1+0x28>
 8018146:	2201      	movs	r2, #1
 8018148:	3b01      	subs	r3, #1
 801814a:	8482      	strh	r2, [r0, #36]	; 0x24
 801814c:	6183      	str	r3, [r0, #24]
 801814e:	68c3      	ldr	r3, [r0, #12]
 8018150:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 8018154:	6003      	str	r3, [r0, #0]
 8018156:	e9c0 1201 	strd	r1, r2, [r0, #4]
 801815a:	4770      	bx	lr
 801815c:	6a03      	ldr	r3, [r0, #32]
 801815e:	2201      	movs	r2, #1
 8018160:	3b01      	subs	r3, #1
 8018162:	8482      	strh	r2, [r0, #36]	; 0x24
 8018164:	6203      	str	r3, [r0, #32]
 8018166:	e7f2      	b.n	801814e <ai_padding_opt_phase1+0x1a>

08018168 <st_int8_to16_dual>:
 8018168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801816c:	4698      	mov	r8, r3
 801816e:	085b      	lsrs	r3, r3, #1
 8018170:	eb00 0c02 	add.w	ip, r0, r2
 8018174:	f000 80b9 	beq.w	80182ea <st_int8_to16_dual+0x182>
 8018178:	f1a2 0710 	sub.w	r7, r2, #16
 801817c:	1f16      	subs	r6, r2, #4
 801817e:	2f00      	cmp	r7, #0
 8018180:	f04f 0500 	mov.w	r5, #0
 8018184:	db73      	blt.n	801826e <st_int8_to16_dual+0x106>
 8018186:	f8d0 e000 	ldr.w	lr, [r0]
 801818a:	f8dc 4000 	ldr.w	r4, [ip]
 801818e:	fa2f f99e 	sxtb16	r9, lr, ror #8
 8018192:	fa2f fe8e 	sxtb16	lr, lr
 8018196:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 801819a:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 801819e:	fa2f f994 	sxtb16	r9, r4, ror #8
 80181a2:	f8c1 e000 	str.w	lr, [r1]
 80181a6:	f8c1 a008 	str.w	sl, [r1, #8]
 80181aa:	fa2f f484 	sxtb16	r4, r4
 80181ae:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 80181b2:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 80181b6:	f8c1 e00c 	str.w	lr, [r1, #12]
 80181ba:	604c      	str	r4, [r1, #4]
 80181bc:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80181c0:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80181c4:	fa2f f99e 	sxtb16	r9, lr, ror #8
 80181c8:	fa2f fe8e 	sxtb16	lr, lr
 80181cc:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 80181d0:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 80181d4:	fa2f f994 	sxtb16	r9, r4, ror #8
 80181d8:	f8c1 e010 	str.w	lr, [r1, #16]
 80181dc:	f8c1 a018 	str.w	sl, [r1, #24]
 80181e0:	fa2f f484 	sxtb16	r4, r4
 80181e4:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 80181e8:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 80181ec:	f8c1 e01c 	str.w	lr, [r1, #28]
 80181f0:	614c      	str	r4, [r1, #20]
 80181f2:	f8d0 e008 	ldr.w	lr, [r0, #8]
 80181f6:	f8dc 4008 	ldr.w	r4, [ip, #8]
 80181fa:	fa2f f99e 	sxtb16	r9, lr, ror #8
 80181fe:	fa2f fe8e 	sxtb16	lr, lr
 8018202:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 8018206:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 801820a:	fa2f f994 	sxtb16	r9, r4, ror #8
 801820e:	3010      	adds	r0, #16
 8018210:	f10c 0c10 	add.w	ip, ip, #16
 8018214:	f8c1 e020 	str.w	lr, [r1, #32]
 8018218:	f8c1 a028 	str.w	sl, [r1, #40]	; 0x28
 801821c:	fa2f f484 	sxtb16	r4, r4
 8018220:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 8018224:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 8018228:	f8c1 e02c 	str.w	lr, [r1, #44]	; 0x2c
 801822c:	624c      	str	r4, [r1, #36]	; 0x24
 801822e:	f850 ec04 	ldr.w	lr, [r0, #-4]
 8018232:	f85c 4c04 	ldr.w	r4, [ip, #-4]
 8018236:	fa2f fa9e 	sxtb16	sl, lr, ror #8
 801823a:	fa2f fe8e 	sxtb16	lr, lr
 801823e:	eaca 492e 	pkhtb	r9, sl, lr, asr #16
 8018242:	eace 4e0a 	pkhbt	lr, lr, sl, lsl #16
 8018246:	fa2f fa94 	sxtb16	sl, r4, ror #8
 801824a:	3510      	adds	r5, #16
 801824c:	f8c1 e030 	str.w	lr, [r1, #48]	; 0x30
 8018250:	f8c1 9038 	str.w	r9, [r1, #56]	; 0x38
 8018254:	3140      	adds	r1, #64	; 0x40
 8018256:	42bd      	cmp	r5, r7
 8018258:	fa2f f484 	sxtb16	r4, r4
 801825c:	eaca 4e24 	pkhtb	lr, sl, r4, asr #16
 8018260:	eac4 440a 	pkhbt	r4, r4, sl, lsl #16
 8018264:	f841 ec04 	str.w	lr, [r1, #-4]
 8018268:	f841 4c0c 	str.w	r4, [r1, #-12]
 801826c:	dd8b      	ble.n	8018186 <st_int8_to16_dual+0x1e>
 801826e:	42ae      	cmp	r6, r5
 8018270:	db1e      	blt.n	80182b0 <st_int8_to16_dual+0x148>
 8018272:	f850 4b04 	ldr.w	r4, [r0], #4
 8018276:	f85c eb04 	ldr.w	lr, [ip], #4
 801827a:	fa2f fa94 	sxtb16	sl, r4, ror #8
 801827e:	fa2f f484 	sxtb16	r4, r4
 8018282:	eaca 4924 	pkhtb	r9, sl, r4, asr #16
 8018286:	eac4 440a 	pkhbt	r4, r4, sl, lsl #16
 801828a:	fa2f fa9e 	sxtb16	sl, lr, ror #8
 801828e:	3504      	adds	r5, #4
 8018290:	600c      	str	r4, [r1, #0]
 8018292:	f8c1 9008 	str.w	r9, [r1, #8]
 8018296:	3110      	adds	r1, #16
 8018298:	42b5      	cmp	r5, r6
 801829a:	fa2f fe8e 	sxtb16	lr, lr
 801829e:	eaca 442e 	pkhtb	r4, sl, lr, asr #16
 80182a2:	eace 4e0a 	pkhbt	lr, lr, sl, lsl #16
 80182a6:	f841 4c04 	str.w	r4, [r1, #-4]
 80182aa:	f841 ec0c 	str.w	lr, [r1, #-12]
 80182ae:	dde0      	ble.n	8018272 <st_int8_to16_dual+0x10a>
 80182b0:	42aa      	cmp	r2, r5
 80182b2:	dd40      	ble.n	8018336 <st_int8_to16_dual+0x1ce>
 80182b4:	1b55      	subs	r5, r2, r5
 80182b6:	1d0c      	adds	r4, r1, #4
 80182b8:	46e6      	mov	lr, ip
 80182ba:	eb00 0a05 	add.w	sl, r0, r5
 80182be:	f910 9b01 	ldrsb.w	r9, [r0], #1
 80182c2:	3404      	adds	r4, #4
 80182c4:	f824 9c08 	strh.w	r9, [r4, #-8]
 80182c8:	4550      	cmp	r0, sl
 80182ca:	f91e 9b01 	ldrsb.w	r9, [lr], #1
 80182ce:	f824 9c06 	strh.w	r9, [r4, #-6]
 80182d2:	d1f4      	bne.n	80182be <st_int8_to16_dual+0x156>
 80182d4:	44ac      	add	ip, r5
 80182d6:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80182da:	3b01      	subs	r3, #1
 80182dc:	eb0a 0002 	add.w	r0, sl, r2
 80182e0:	4494      	add	ip, r2
 80182e2:	b29b      	uxth	r3, r3
 80182e4:	2b00      	cmp	r3, #0
 80182e6:	f47f af4a 	bne.w	801817e <st_int8_to16_dual+0x16>
 80182ea:	f018 0f01 	tst.w	r8, #1
 80182ee:	d020      	beq.n	8018332 <st_int8_to16_dual+0x1ca>
 80182f0:	1f17      	subs	r7, r2, #4
 80182f2:	f04f 0400 	mov.w	r4, #0
 80182f6:	d411      	bmi.n	801831c <st_int8_to16_dual+0x1b4>
 80182f8:	f850 3b04 	ldr.w	r3, [r0], #4
 80182fc:	fa2f f593 	sxtb16	r5, r3, ror #8
 8018300:	3404      	adds	r4, #4
 8018302:	3108      	adds	r1, #8
 8018304:	fa2f f383 	sxtb16	r3, r3
 8018308:	42a7      	cmp	r7, r4
 801830a:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 801830e:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 8018312:	f841 6c04 	str.w	r6, [r1, #-4]
 8018316:	f841 3c08 	str.w	r3, [r1, #-8]
 801831a:	daed      	bge.n	80182f8 <st_int8_to16_dual+0x190>
 801831c:	42a2      	cmp	r2, r4
 801831e:	dd08      	ble.n	8018332 <st_int8_to16_dual+0x1ca>
 8018320:	1b13      	subs	r3, r2, r4
 8018322:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8018326:	f910 2b01 	ldrsb.w	r2, [r0], #1
 801832a:	f821 2b02 	strh.w	r2, [r1], #2
 801832e:	428b      	cmp	r3, r1
 8018330:	d1f9      	bne.n	8018326 <st_int8_to16_dual+0x1be>
 8018332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018336:	4682      	mov	sl, r0
 8018338:	e7cf      	b.n	80182da <st_int8_to16_dual+0x172>
 801833a:	bf00      	nop

0801833c <weights_2channels_prefetch>:
 801833c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018340:	2b00      	cmp	r3, #0
 8018342:	b087      	sub	sp, #28
 8018344:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8018348:	9302      	str	r3, [sp, #8]
 801834a:	f340 80e6 	ble.w	801851a <weights_2channels_prefetch+0x1de>
 801834e:	f1a8 0310 	sub.w	r3, r8, #16
 8018352:	f1a8 0403 	sub.w	r4, r8, #3
 8018356:	f04f 0b00 	mov.w	fp, #0
 801835a:	091b      	lsrs	r3, r3, #4
 801835c:	9403      	str	r4, [sp, #12]
 801835e:	f1a8 0404 	sub.w	r4, r8, #4
 8018362:	3301      	adds	r3, #1
 8018364:	9405      	str	r4, [sp, #20]
 8018366:	011c      	lsls	r4, r3, #4
 8018368:	019b      	lsls	r3, r3, #6
 801836a:	9400      	str	r4, [sp, #0]
 801836c:	9304      	str	r3, [sp, #16]
 801836e:	f1b8 0f0f 	cmp.w	r8, #15
 8018372:	f340 80d7 	ble.w	8018524 <weights_2channels_prefetch+0x1e8>
 8018376:	9b00      	ldr	r3, [sp, #0]
 8018378:	460d      	mov	r5, r1
 801837a:	18c6      	adds	r6, r0, r3
 801837c:	4613      	mov	r3, r2
 801837e:	6804      	ldr	r4, [r0, #0]
 8018380:	3010      	adds	r0, #16
 8018382:	682f      	ldr	r7, [r5, #0]
 8018384:	3340      	adds	r3, #64	; 0x40
 8018386:	fa2f fc84 	sxtb16	ip, r4
 801838a:	3510      	adds	r5, #16
 801838c:	f843 cc40 	str.w	ip, [r3, #-64]
 8018390:	ea4f 2434 	mov.w	r4, r4, ror #8
 8018394:	42b0      	cmp	r0, r6
 8018396:	fa2f f484 	sxtb16	r4, r4
 801839a:	f843 4c3c 	str.w	r4, [r3, #-60]
 801839e:	ea4f 2437 	mov.w	r4, r7, ror #8
 80183a2:	fa2f f787 	sxtb16	r7, r7
 80183a6:	fa2f f484 	sxtb16	r4, r4
 80183aa:	f843 7c38 	str.w	r7, [r3, #-56]
 80183ae:	f843 4c34 	str.w	r4, [r3, #-52]
 80183b2:	f855 4c0c 	ldr.w	r4, [r5, #-12]
 80183b6:	f850 7c0c 	ldr.w	r7, [r0, #-12]
 80183ba:	ea4f 2c34 	mov.w	ip, r4, ror #8
 80183be:	fa2f f484 	sxtb16	r4, r4
 80183c2:	fa2f fc8c 	sxtb16	ip, ip
 80183c6:	f843 4c28 	str.w	r4, [r3, #-40]
 80183ca:	f843 cc24 	str.w	ip, [r3, #-36]
 80183ce:	ea4f 2c37 	mov.w	ip, r7, ror #8
 80183d2:	fa2f f787 	sxtb16	r7, r7
 80183d6:	f843 7c30 	str.w	r7, [r3, #-48]
 80183da:	fa2f f78c 	sxtb16	r7, ip
 80183de:	f843 7c2c 	str.w	r7, [r3, #-44]
 80183e2:	f850 7c08 	ldr.w	r7, [r0, #-8]
 80183e6:	f855 4c08 	ldr.w	r4, [r5, #-8]
 80183ea:	ea4f 2c37 	mov.w	ip, r7, ror #8
 80183ee:	fa2f f787 	sxtb16	r7, r7
 80183f2:	fa2f fc8c 	sxtb16	ip, ip
 80183f6:	f843 7c20 	str.w	r7, [r3, #-32]
 80183fa:	ea4f 2734 	mov.w	r7, r4, ror #8
 80183fe:	f843 cc1c 	str.w	ip, [r3, #-28]
 8018402:	fa2f f787 	sxtb16	r7, r7
 8018406:	fa2f f484 	sxtb16	r4, r4
 801840a:	f843 7c14 	str.w	r7, [r3, #-20]
 801840e:	f843 4c18 	str.w	r4, [r3, #-24]
 8018412:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8018416:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801841a:	ea4f 2c37 	mov.w	ip, r7, ror #8
 801841e:	fa2f f787 	sxtb16	r7, r7
 8018422:	fa2f fc8c 	sxtb16	ip, ip
 8018426:	f843 7c10 	str.w	r7, [r3, #-16]
 801842a:	ea4f 2734 	mov.w	r7, r4, ror #8
 801842e:	f843 cc0c 	str.w	ip, [r3, #-12]
 8018432:	fa2f f787 	sxtb16	r7, r7
 8018436:	fa2f f484 	sxtb16	r4, r4
 801843a:	f843 7c04 	str.w	r7, [r3, #-4]
 801843e:	f843 4c08 	str.w	r4, [r3, #-8]
 8018442:	d19c      	bne.n	801837e <weights_2channels_prefetch+0x42>
 8018444:	9b04      	ldr	r3, [sp, #16]
 8018446:	441a      	add	r2, r3
 8018448:	9b00      	ldr	r3, [sp, #0]
 801844a:	4419      	add	r1, r3
 801844c:	469e      	mov	lr, r3
 801844e:	9b03      	ldr	r3, [sp, #12]
 8018450:	4573      	cmp	r3, lr
 8018452:	dd65      	ble.n	8018520 <weights_2channels_prefetch+0x1e4>
 8018454:	9b05      	ldr	r3, [sp, #20]
 8018456:	4614      	mov	r4, r2
 8018458:	460f      	mov	r7, r1
 801845a:	eba3 090e 	sub.w	r9, r3, lr
 801845e:	ea4f 0999 	mov.w	r9, r9, lsr #2
 8018462:	f109 0a01 	add.w	sl, r9, #1
 8018466:	ea4f 038a 	mov.w	r3, sl, lsl #2
 801846a:	eb06 008a 	add.w	r0, r6, sl, lsl #2
 801846e:	9301      	str	r3, [sp, #4]
 8018470:	f856 3b04 	ldr.w	r3, [r6], #4
 8018474:	3410      	adds	r4, #16
 8018476:	f857 5b04 	ldr.w	r5, [r7], #4
 801847a:	fa2f fc83 	sxtb16	ip, r3
 801847e:	4286      	cmp	r6, r0
 8018480:	ea4f 2333 	mov.w	r3, r3, ror #8
 8018484:	fa2f f383 	sxtb16	r3, r3
 8018488:	f844 3c0c 	str.w	r3, [r4, #-12]
 801848c:	ea4f 2335 	mov.w	r3, r5, ror #8
 8018490:	fa2f f585 	sxtb16	r5, r5
 8018494:	f844 cc10 	str.w	ip, [r4, #-16]
 8018498:	f844 5c08 	str.w	r5, [r4, #-8]
 801849c:	fa2f f383 	sxtb16	r3, r3
 80184a0:	f844 3c04 	str.w	r3, [r4, #-4]
 80184a4:	d1e4      	bne.n	8018470 <weights_2channels_prefetch+0x134>
 80184a6:	9b01      	ldr	r3, [sp, #4]
 80184a8:	f10e 0e04 	add.w	lr, lr, #4
 80184ac:	eb02 120a 	add.w	r2, r2, sl, lsl #4
 80184b0:	4419      	add	r1, r3
 80184b2:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 80184b6:	45f0      	cmp	r8, lr
 80184b8:	dd29      	ble.n	801850e <weights_2channels_prefetch+0x1d2>
 80184ba:	f990 3000 	ldrsb.w	r3, [r0]
 80184be:	8013      	strh	r3, [r2, #0]
 80184c0:	f991 3000 	ldrsb.w	r3, [r1]
 80184c4:	8053      	strh	r3, [r2, #2]
 80184c6:	f10e 0301 	add.w	r3, lr, #1
 80184ca:	4598      	cmp	r8, r3
 80184cc:	dd19      	ble.n	8018502 <weights_2channels_prefetch+0x1c6>
 80184ce:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80184d2:	8093      	strh	r3, [r2, #4]
 80184d4:	f991 3001 	ldrsb.w	r3, [r1, #1]
 80184d8:	80d3      	strh	r3, [r2, #6]
 80184da:	f10e 0302 	add.w	r3, lr, #2
 80184de:	4598      	cmp	r8, r3
 80184e0:	dd0f      	ble.n	8018502 <weights_2channels_prefetch+0x1c6>
 80184e2:	f990 3002 	ldrsb.w	r3, [r0, #2]
 80184e6:	8113      	strh	r3, [r2, #8]
 80184e8:	f10e 0303 	add.w	r3, lr, #3
 80184ec:	f991 4002 	ldrsb.w	r4, [r1, #2]
 80184f0:	4598      	cmp	r8, r3
 80184f2:	8154      	strh	r4, [r2, #10]
 80184f4:	dd05      	ble.n	8018502 <weights_2channels_prefetch+0x1c6>
 80184f6:	f990 3003 	ldrsb.w	r3, [r0, #3]
 80184fa:	8193      	strh	r3, [r2, #12]
 80184fc:	f991 3003 	ldrsb.w	r3, [r1, #3]
 8018500:	81d3      	strh	r3, [r2, #14]
 8018502:	eba8 0e0e 	sub.w	lr, r8, lr
 8018506:	4470      	add	r0, lr
 8018508:	4471      	add	r1, lr
 801850a:	eb02 028e 	add.w	r2, r2, lr, lsl #2
 801850e:	f10b 0b01 	add.w	fp, fp, #1
 8018512:	9b02      	ldr	r3, [sp, #8]
 8018514:	455b      	cmp	r3, fp
 8018516:	f47f af2a 	bne.w	801836e <weights_2channels_prefetch+0x32>
 801851a:	b007      	add	sp, #28
 801851c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018520:	4630      	mov	r0, r6
 8018522:	e7c8      	b.n	80184b6 <weights_2channels_prefetch+0x17a>
 8018524:	4606      	mov	r6, r0
 8018526:	f04f 0e00 	mov.w	lr, #0
 801852a:	e790      	b.n	801844e <weights_2channels_prefetch+0x112>

0801852c <st_sssa8_ch_fullW_prefetch>:
 801852c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018530:	b087      	sub	sp, #28
 8018532:	461c      	mov	r4, r3
 8018534:	4680      	mov	r8, r0
 8018536:	4613      	mov	r3, r2
 8018538:	104f      	asrs	r7, r1, #1
 801853a:	4620      	mov	r0, r4
 801853c:	9103      	str	r1, [sp, #12]
 801853e:	9704      	str	r7, [sp, #16]
 8018540:	e9dd 2a10 	ldrd	r2, sl, [sp, #64]	; 0x40
 8018544:	eb08 0402 	add.w	r4, r8, r2
 8018548:	d020      	beq.n	801858c <st_sssa8_ch_fullW_prefetch+0x60>
 801854a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801854c:	4646      	mov	r6, r8
 801854e:	4655      	mov	r5, sl
 8018550:	f8cd 8014 	str.w	r8, [sp, #20]
 8018554:	ea4f 0942 	mov.w	r9, r2, lsl #1
 8018558:	4680      	mov	r8, r0
 801855a:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 801855e:	469a      	mov	sl, r3
 8018560:	462a      	mov	r2, r5
 8018562:	4621      	mov	r1, r4
 8018564:	4630      	mov	r0, r6
 8018566:	4653      	mov	r3, sl
 8018568:	f8cd 8000 	str.w	r8, [sp]
 801856c:	445d      	add	r5, fp
 801856e:	f7ff fee5 	bl	801833c <weights_2channels_prefetch>
 8018572:	3f01      	subs	r7, #1
 8018574:	444c      	add	r4, r9
 8018576:	444e      	add	r6, r9
 8018578:	d1f2      	bne.n	8018560 <st_sssa8_ch_fullW_prefetch+0x34>
 801857a:	9b04      	ldr	r3, [sp, #16]
 801857c:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8018580:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8018584:	fb03 8809 	mla	r8, r3, r9, r8
 8018588:	fb03 aa0b 	mla	sl, r3, fp, sl
 801858c:	9b03      	ldr	r3, [sp, #12]
 801858e:	07db      	lsls	r3, r3, #31
 8018590:	d509      	bpl.n	80185a6 <st_sssa8_ch_fullW_prefetch+0x7a>
 8018592:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018594:	2b00      	cmp	r3, #0
 8018596:	dd06      	ble.n	80185a6 <st_sssa8_ch_fullW_prefetch+0x7a>
 8018598:	4443      	add	r3, r8
 801859a:	f918 2b01 	ldrsb.w	r2, [r8], #1
 801859e:	4543      	cmp	r3, r8
 80185a0:	f82a 2b02 	strh.w	r2, [sl], #2
 80185a4:	d1f9      	bne.n	801859a <st_sssa8_ch_fullW_prefetch+0x6e>
 80185a6:	b007      	add	sp, #28
 80185a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080185ac <st_sssa8_ch_nn_mat_mult_nt_t>:
 80185ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185b0:	b0b5      	sub	sp, #212	; 0xd4
 80185b2:	9027      	str	r0, [sp, #156]	; 0x9c
 80185b4:	912d      	str	r1, [sp, #180]	; 0xb4
 80185b6:	9233      	str	r2, [sp, #204]	; 0xcc
 80185b8:	932e      	str	r3, [sp, #184]	; 0xb8
 80185ba:	e9dd 0445 	ldrd	r0, r4, [sp, #276]	; 0x114
 80185be:	2c00      	cmp	r4, #0
 80185c0:	bf18      	it	ne
 80185c2:	4620      	movne	r0, r4
 80185c4:	9c41      	ldr	r4, [sp, #260]	; 0x104
 80185c6:	2c01      	cmp	r4, #1
 80185c8:	9045      	str	r0, [sp, #276]	; 0x114
 80185ca:	f340 826b 	ble.w	8018aa4 <st_sssa8_ch_nn_mat_mult_nt_t+0x4f8>
 80185ce:	9c42      	ldr	r4, [sp, #264]	; 0x108
 80185d0:	461e      	mov	r6, r3
 80185d2:	4694      	mov	ip, r2
 80185d4:	9f42      	ldr	r7, [sp, #264]	; 0x108
 80185d6:	f1a4 0310 	sub.w	r3, r4, #16
 80185da:	9c41      	ldr	r4, [sp, #260]	; 0x104
 80185dc:	468e      	mov	lr, r1
 80185de:	9d40      	ldr	r5, [sp, #256]	; 0x100
 80185e0:	1ea0      	subs	r0, r4, #2
 80185e2:	0919      	lsrs	r1, r3, #4
 80185e4:	f023 030f 	bic.w	r3, r3, #15
 80185e8:	9c42      	ldr	r4, [sp, #264]	; 0x108
 80185ea:	f020 0201 	bic.w	r2, r0, #1
 80185ee:	9032      	str	r0, [sp, #200]	; 0xc8
 80185f0:	4630      	mov	r0, r6
 80185f2:	3101      	adds	r1, #1
 80185f4:	4432      	add	r2, r6
 80185f6:	10a4      	asrs	r4, r4, #2
 80185f8:	106d      	asrs	r5, r5, #1
 80185fa:	1cd6      	adds	r6, r2, #3
 80185fc:	f107 0214 	add.w	r2, r7, #20
 8018600:	942f      	str	r4, [sp, #188]	; 0xbc
 8018602:	18d3      	adds	r3, r2, r3
 8018604:	9629      	str	r6, [sp, #164]	; 0xa4
 8018606:	9e41      	ldr	r6, [sp, #260]	; 0x104
 8018608:	9318      	str	r3, [sp, #96]	; 0x60
 801860a:	f06f 0303 	mvn.w	r3, #3
 801860e:	0076      	lsls	r6, r6, #1
 8018610:	952a      	str	r5, [sp, #168]	; 0xa8
 8018612:	1bdb      	subs	r3, r3, r7
 8018614:	9613      	str	r6, [sp, #76]	; 0x4c
 8018616:	9319      	str	r3, [sp, #100]	; 0x64
 8018618:	f1a7 030f 	sub.w	r3, r7, #15
 801861c:	9312      	str	r3, [sp, #72]	; 0x48
 801861e:	f007 0303 	and.w	r3, r7, #3
 8018622:	9330      	str	r3, [sp, #192]	; 0xc0
 8018624:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8018626:	f003 0301 	and.w	r3, r3, #1
 801862a:	9328      	str	r3, [sp, #160]	; 0xa0
 801862c:	007b      	lsls	r3, r7, #1
 801862e:	9326      	str	r3, [sp, #152]	; 0x98
 8018630:	00bb      	lsls	r3, r7, #2
 8018632:	932c      	str	r3, [sp, #176]	; 0xb0
 8018634:	1f3b      	subs	r3, r7, #4
 8018636:	9317      	str	r3, [sp, #92]	; 0x5c
 8018638:	1c43      	adds	r3, r0, #1
 801863a:	931b      	str	r3, [sp, #108]	; 0x6c
 801863c:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 801863e:	3302      	adds	r3, #2
 8018640:	9321      	str	r3, [sp, #132]	; 0x84
 8018642:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8018644:	3304      	adds	r3, #4
 8018646:	931f      	str	r3, [sp, #124]	; 0x7c
 8018648:	9b44      	ldr	r3, [sp, #272]	; 0x110
 801864a:	3304      	adds	r3, #4
 801864c:	9320      	str	r3, [sp, #128]	; 0x80
 801864e:	4663      	mov	r3, ip
 8018650:	3304      	adds	r3, #4
 8018652:	9322      	str	r3, [sp, #136]	; 0x88
 8018654:	010b      	lsls	r3, r1, #4
 8018656:	9316      	str	r3, [sp, #88]	; 0x58
 8018658:	018b      	lsls	r3, r1, #6
 801865a:	9325      	str	r3, [sp, #148]	; 0x94
 801865c:	0123      	lsls	r3, r4, #4
 801865e:	9331      	str	r3, [sp, #196]	; 0xc4
 8018660:	fb06 f305 	mul.w	r3, r6, r5
 8018664:	932b      	str	r3, [sp, #172]	; 0xac
 8018666:	f8cd e08c 	str.w	lr, [sp, #140]	; 0x8c
 801866a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801866c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801866e:	f932 3c02 	ldrsh.w	r3, [r2, #-2]
 8018672:	f9b2 2000 	ldrsh.w	r2, [r2]
 8018676:	3901      	subs	r1, #1
 8018678:	2b15      	cmp	r3, #21
 801867a:	931a      	str	r3, [sp, #104]	; 0x68
 801867c:	920a      	str	r2, [sp, #40]	; 0x28
 801867e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8018680:	9101      	str	r1, [sp, #4]
 8018682:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8018686:	6812      	ldr	r2, [r2, #0]
 8018688:	910d      	str	r1, [sp, #52]	; 0x34
 801868a:	920e      	str	r2, [sp, #56]	; 0x38
 801868c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801868e:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8018692:	6812      	ldr	r2, [r2, #0]
 8018694:	910f      	str	r1, [sp, #60]	; 0x3c
 8018696:	9210      	str	r2, [sp, #64]	; 0x40
 8018698:	f300 8402 	bgt.w	8018ea0 <st_sssa8_ch_nn_mat_mult_nt_t+0x8f4>
 801869c:	2b00      	cmp	r3, #0
 801869e:	bfcc      	ite	gt
 80186a0:	2300      	movgt	r3, #0
 80186a2:	2301      	movle	r3, #1
 80186a4:	425b      	negs	r3, r3
 80186a6:	9308      	str	r3, [sp, #32]
 80186a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80186aa:	2b15      	cmp	r3, #21
 80186ac:	f300 82c4 	bgt.w	8018c38 <st_sssa8_ch_nn_mat_mult_nt_t+0x68c>
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	bfcc      	ite	gt
 80186b4:	2300      	movgt	r3, #0
 80186b6:	2301      	movle	r3, #1
 80186b8:	425b      	negs	r3, r3
 80186ba:	9309      	str	r3, [sp, #36]	; 0x24
 80186bc:	9b46      	ldr	r3, [sp, #280]	; 0x118
 80186be:	2b00      	cmp	r3, #0
 80186c0:	f000 82c0 	beq.w	8018c44 <st_sssa8_ch_nn_mat_mult_nt_t+0x698>
 80186c4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80186c6:	2b00      	cmp	r3, #0
 80186c8:	f040 8397 	bne.w	8018dfa <st_sssa8_ch_nn_mat_mult_nt_t+0x84e>
 80186cc:	461a      	mov	r2, r3
 80186ce:	4619      	mov	r1, r3
 80186d0:	9822      	ldr	r0, [sp, #136]	; 0x88
 80186d2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80186d6:	18cb      	adds	r3, r1, r3
 80186d8:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80186da:	930c      	str	r3, [sp, #48]	; 0x30
 80186dc:	6803      	ldr	r3, [r0, #0]
 80186de:	18d3      	adds	r3, r2, r3
 80186e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80186e2:	2900      	cmp	r1, #0
 80186e4:	f000 8510 	beq.w	8019108 <st_sssa8_ch_nn_mat_mult_nt_t+0xb5c>
 80186e8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80186ea:	2001      	movs	r0, #1
 80186ec:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80186ee:	1e93      	subs	r3, r2, #2
 80186f0:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 80186f4:	9104      	str	r1, [sp, #16]
 80186f6:	fa00 f303 	lsl.w	r3, r0, r3
 80186fa:	931c      	str	r3, [sp, #112]	; 0x70
 80186fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80186fe:	3b02      	subs	r3, #2
 8018700:	fa00 f303 	lsl.w	r3, r0, r3
 8018704:	9841      	ldr	r0, [sp, #260]	; 0x104
 8018706:	931d      	str	r3, [sp, #116]	; 0x74
 8018708:	9b42      	ldr	r3, [sp, #264]	; 0x108
 801870a:	3b03      	subs	r3, #3
 801870c:	9311      	str	r3, [sp, #68]	; 0x44
 801870e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018710:	4418      	add	r0, r3
 8018712:	9303      	str	r3, [sp, #12]
 8018714:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8018716:	9002      	str	r0, [sp, #8]
 8018718:	3304      	adds	r3, #4
 801871a:	9845      	ldr	r0, [sp, #276]	; 0x114
 801871c:	9315      	str	r3, [sp, #84]	; 0x54
 801871e:	1e53      	subs	r3, r2, #1
 8018720:	4420      	add	r0, r4
 8018722:	931e      	str	r3, [sp, #120]	; 0x78
 8018724:	f1c2 0301 	rsb	r3, r2, #1
 8018728:	9014      	str	r0, [sp, #80]	; 0x50
 801872a:	9324      	str	r3, [sp, #144]	; 0x90
 801872c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801872e:	2b00      	cmp	r3, #0
 8018730:	f340 8279 	ble.w	8018c26 <st_sssa8_ch_nn_mat_mult_nt_t+0x67a>
 8018734:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018736:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018738:	eb0b 0703 	add.w	r7, fp, r3
 801873c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801873e:	f8cd b014 	str.w	fp, [sp, #20]
 8018742:	4604      	mov	r4, r0
 8018744:	445b      	add	r3, fp
 8018746:	9e45      	ldr	r6, [sp, #276]	; 0x114
 8018748:	f8dd b064 	ldr.w	fp, [sp, #100]	; 0x64
 801874c:	9301      	str	r3, [sp, #4]
 801874e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018750:	4619      	mov	r1, r3
 8018752:	f85b c007 	ldr.w	ip, [fp, r7]
 8018756:	eb0b 0e07 	add.w	lr, fp, r7
 801875a:	6832      	ldr	r2, [r6, #0]
 801875c:	f8d6 9004 	ldr.w	r9, [r6, #4]
 8018760:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8018764:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8018768:	fa2f f58c 	sxtb16	r5, ip
 801876c:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 8018770:	fb25 0002 	smlad	r0, r5, r2, r0
 8018774:	fb2c 0009 	smlad	r0, ip, r9, r0
 8018778:	fb25 350a 	smlad	r5, r5, sl, r3
 801877c:	fb2c 5508 	smlad	r5, ip, r8, r5
 8018780:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8018784:	fa2f fc83 	sxtb16	ip, r3
 8018788:	fa2f f393 	sxtb16	r3, r3, ror #8
 801878c:	fb2c 4202 	smlad	r2, ip, r2, r4
 8018790:	fb2c 110a 	smlad	r1, ip, sl, r1
 8018794:	fb23 2209 	smlad	r2, r3, r9, r2
 8018798:	f8d6 9010 	ldr.w	r9, [r6, #16]
 801879c:	6974      	ldr	r4, [r6, #20]
 801879e:	fb23 1808 	smlad	r8, r3, r8, r1
 80187a2:	f8de 1004 	ldr.w	r1, [lr, #4]
 80187a6:	69b3      	ldr	r3, [r6, #24]
 80187a8:	f8d6 a01c 	ldr.w	sl, [r6, #28]
 80187ac:	fa2f fc81 	sxtb16	ip, r1
 80187b0:	fa2f f191 	sxtb16	r1, r1, ror #8
 80187b4:	fb2c 0009 	smlad	r0, ip, r9, r0
 80187b8:	fb21 0004 	smlad	r0, r1, r4, r0
 80187bc:	fb2c 5c03 	smlad	ip, ip, r3, r5
 80187c0:	fb21 cc0a 	smlad	ip, r1, sl, ip
 80187c4:	683d      	ldr	r5, [r7, #0]
 80187c6:	fa2f f185 	sxtb16	r1, r5
 80187ca:	fa2f f595 	sxtb16	r5, r5, ror #8
 80187ce:	fb21 2909 	smlad	r9, r1, r9, r2
 80187d2:	fb21 8803 	smlad	r8, r1, r3, r8
 80187d6:	fb25 9904 	smlad	r9, r5, r4, r9
 80187da:	6a34      	ldr	r4, [r6, #32]
 80187dc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80187de:	fb25 8a0a 	smlad	sl, r5, sl, r8
 80187e2:	f8de 2008 	ldr.w	r2, [lr, #8]
 80187e6:	f8d6 8028 	ldr.w	r8, [r6, #40]	; 0x28
 80187ea:	6af5      	ldr	r5, [r6, #44]	; 0x2c
 80187ec:	fa2f f182 	sxtb16	r1, r2
 80187f0:	fa2f f292 	sxtb16	r2, r2, ror #8
 80187f4:	fb21 0004 	smlad	r0, r1, r4, r0
 80187f8:	fb22 0003 	smlad	r0, r2, r3, r0
 80187fc:	fb21 c108 	smlad	r1, r1, r8, ip
 8018800:	fb22 1205 	smlad	r2, r2, r5, r1
 8018804:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8018808:	fa2f f18c 	sxtb16	r1, ip
 801880c:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 8018810:	fb21 9404 	smlad	r4, r1, r4, r9
 8018814:	fb21 aa08 	smlad	sl, r1, r8, sl
 8018818:	fb2c 4903 	smlad	r9, ip, r3, r4
 801881c:	f8d6 8030 	ldr.w	r8, [r6, #48]	; 0x30
 8018820:	6b74      	ldr	r4, [r6, #52]	; 0x34
 8018822:	fb2c a505 	smlad	r5, ip, r5, sl
 8018826:	f8de 300c 	ldr.w	r3, [lr, #12]
 801882a:	3640      	adds	r6, #64	; 0x40
 801882c:	f856 ac08 	ldr.w	sl, [r6, #-8]
 8018830:	f856 ec04 	ldr.w	lr, [r6, #-4]
 8018834:	fa2f f183 	sxtb16	r1, r3
 8018838:	fa2f f393 	sxtb16	r3, r3, ror #8
 801883c:	fb21 0008 	smlad	r0, r1, r8, r0
 8018840:	fb23 0004 	smlad	r0, r3, r4, r0
 8018844:	fb21 220a 	smlad	r2, r1, sl, r2
 8018848:	fb23 230e 	smlad	r3, r3, lr, r2
 801884c:	68b9      	ldr	r1, [r7, #8]
 801884e:	fa2f f281 	sxtb16	r2, r1
 8018852:	fa2f f191 	sxtb16	r1, r1, ror #8
 8018856:	fb22 9908 	smlad	r9, r2, r8, r9
 801885a:	fb22 550a 	smlad	r5, r2, sl, r5
 801885e:	fb21 9404 	smlad	r4, r1, r4, r9
 8018862:	fb21 510e 	smlad	r1, r1, lr, r5
 8018866:	3710      	adds	r7, #16
 8018868:	9a01      	ldr	r2, [sp, #4]
 801886a:	4297      	cmp	r7, r2
 801886c:	f47f af71 	bne.w	8018752 <st_sssa8_ch_nn_mat_mult_nt_t+0x1a6>
 8018870:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8018872:	f8dd b014 	ldr.w	fp, [sp, #20]
 8018876:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8018878:	4692      	mov	sl, r2
 801887a:	4493      	add	fp, r2
 801887c:	9501      	str	r5, [sp, #4]
 801887e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018880:	4592      	cmp	sl, r2
 8018882:	f280 81ce 	bge.w	8018c22 <st_sssa8_ch_nn_mat_mult_nt_t+0x676>
 8018886:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8018888:	f8cd a01c 	str.w	sl, [sp, #28]
 801888c:	eba5 020a 	sub.w	r2, r5, sl
 8018890:	46aa      	mov	sl, r5
 8018892:	0892      	lsrs	r2, r2, #2
 8018894:	4616      	mov	r6, r2
 8018896:	9206      	str	r2, [sp, #24]
 8018898:	9a01      	ldr	r2, [sp, #4]
 801889a:	3601      	adds	r6, #1
 801889c:	eb0b 0986 	add.w	r9, fp, r6, lsl #2
 80188a0:	9605      	str	r6, [sp, #20]
 80188a2:	f8d2 8000 	ldr.w	r8, [r2]
 80188a6:	3210      	adds	r2, #16
 80188a8:	f85b 5b04 	ldr.w	r5, [fp], #4
 80188ac:	f852 cc0c 	ldr.w	ip, [r2, #-12]
 80188b0:	f852 ec08 	ldr.w	lr, [r2, #-8]
 80188b4:	f852 7c04 	ldr.w	r7, [r2, #-4]
 80188b8:	fa2f f685 	sxtb16	r6, r5
 80188bc:	fa2f f595 	sxtb16	r5, r5, ror #8
 80188c0:	fb26 0008 	smlad	r0, r6, r8, r0
 80188c4:	fb25 000c 	smlad	r0, r5, ip, r0
 80188c8:	fb26 330e 	smlad	r3, r6, lr, r3
 80188cc:	fb25 3307 	smlad	r3, r5, r7, r3
 80188d0:	f85b 500a 	ldr.w	r5, [fp, sl]
 80188d4:	fa2f f685 	sxtb16	r6, r5
 80188d8:	fa2f f595 	sxtb16	r5, r5, ror #8
 80188dc:	fb26 4408 	smlad	r4, r6, r8, r4
 80188e0:	fb26 110e 	smlad	r1, r6, lr, r1
 80188e4:	fb25 440c 	smlad	r4, r5, ip, r4
 80188e8:	fb25 1107 	smlad	r1, r5, r7, r1
 80188ec:	45cb      	cmp	fp, r9
 80188ee:	d1d8      	bne.n	80188a2 <st_sssa8_ch_nn_mat_mult_nt_t+0x2f6>
 80188f0:	9a01      	ldr	r2, [sp, #4]
 80188f2:	9d05      	ldr	r5, [sp, #20]
 80188f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80188f8:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 80188fc:	9d06      	ldr	r5, [sp, #24]
 80188fe:	9201      	str	r2, [sp, #4]
 8018900:	f10a 0204 	add.w	r2, sl, #4
 8018904:	eb02 0a85 	add.w	sl, r2, r5, lsl #2
 8018908:	9a42      	ldr	r2, [sp, #264]	; 0x108
 801890a:	4552      	cmp	r2, sl
 801890c:	dd58      	ble.n	80189c0 <st_sssa8_ch_nn_mat_mult_nt_t+0x414>
 801890e:	9f01      	ldr	r7, [sp, #4]
 8018910:	f999 2000 	ldrsb.w	r2, [r9]
 8018914:	f9b7 5002 	ldrsh.w	r5, [r7, #2]
 8018918:	f9b7 6000 	ldrsh.w	r6, [r7]
 801891c:	fb15 3302 	smlabb	r3, r5, r2, r3
 8018920:	fb16 0002 	smlabb	r0, r6, r2, r0
 8018924:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8018926:	f919 2002 	ldrsb.w	r2, [r9, r2]
 801892a:	fb15 1102 	smlabb	r1, r5, r2, r1
 801892e:	9d42      	ldr	r5, [sp, #264]	; 0x108
 8018930:	fb16 4402 	smlabb	r4, r6, r2, r4
 8018934:	f10a 0201 	add.w	r2, sl, #1
 8018938:	4295      	cmp	r5, r2
 801893a:	dd3d      	ble.n	80189b8 <st_sssa8_ch_nn_mat_mult_nt_t+0x40c>
 801893c:	eb09 0205 	add.w	r2, r9, r5
 8018940:	f9b7 6004 	ldrsh.w	r6, [r7, #4]
 8018944:	f9b7 5006 	ldrsh.w	r5, [r7, #6]
 8018948:	f992 2001 	ldrsb.w	r2, [r2, #1]
 801894c:	fb16 4402 	smlabb	r4, r6, r2, r4
 8018950:	fb15 1102 	smlabb	r1, r5, r2, r1
 8018954:	f999 2001 	ldrsb.w	r2, [r9, #1]
 8018958:	fb16 0002 	smlabb	r0, r6, r2, r0
 801895c:	9e42      	ldr	r6, [sp, #264]	; 0x108
 801895e:	fb15 3302 	smlabb	r3, r5, r2, r3
 8018962:	f10a 0202 	add.w	r2, sl, #2
 8018966:	f109 0502 	add.w	r5, r9, #2
 801896a:	4296      	cmp	r6, r2
 801896c:	dd24      	ble.n	80189b8 <st_sssa8_ch_nn_mat_mult_nt_t+0x40c>
 801896e:	57aa      	ldrsb	r2, [r5, r6]
 8018970:	f9b7 6008 	ldrsh.w	r6, [r7, #8]
 8018974:	f9b7 500a 	ldrsh.w	r5, [r7, #10]
 8018978:	fb16 4402 	smlabb	r4, r6, r2, r4
 801897c:	fb15 1102 	smlabb	r1, r5, r2, r1
 8018980:	f999 2002 	ldrsb.w	r2, [r9, #2]
 8018984:	fb16 0002 	smlabb	r0, r6, r2, r0
 8018988:	9e42      	ldr	r6, [sp, #264]	; 0x108
 801898a:	fb15 3302 	smlabb	r3, r5, r2, r3
 801898e:	f10a 0203 	add.w	r2, sl, #3
 8018992:	f109 0503 	add.w	r5, r9, #3
 8018996:	4296      	cmp	r6, r2
 8018998:	dd0e      	ble.n	80189b8 <st_sssa8_ch_nn_mat_mult_nt_t+0x40c>
 801899a:	57ad      	ldrsb	r5, [r5, r6]
 801899c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80189a0:	f9b7 600e 	ldrsh.w	r6, [r7, #14]
 80189a4:	fb12 4405 	smlabb	r4, r2, r5, r4
 80189a8:	fb16 1105 	smlabb	r1, r6, r5, r1
 80189ac:	f999 5003 	ldrsb.w	r5, [r9, #3]
 80189b0:	fb12 0005 	smlabb	r0, r2, r5, r0
 80189b4:	fb16 3305 	smlabb	r3, r6, r5, r3
 80189b8:	9a42      	ldr	r2, [sp, #264]	; 0x108
 80189ba:	eba2 020a 	sub.w	r2, r2, sl
 80189be:	4491      	add	r9, r2
 80189c0:	9a08      	ldr	r2, [sp, #32]
 80189c2:	2a00      	cmp	r2, #0
 80189c4:	f040 80dd 	bne.w	8018b82 <st_sssa8_ch_nn_mat_mult_nt_t+0x5d6>
 80189c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80189ca:	0040      	lsls	r0, r0, #1
 80189cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80189ce:	0064      	lsls	r4, r4, #1
 80189d0:	fb50 5002 	smmla	r0, r0, r2, r5
 80189d4:	fb54 5402 	smmla	r4, r4, r2, r5
 80189d8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80189da:	4110      	asrs	r0, r2
 80189dc:	f300 0007 	ssat	r0, #8, r0
 80189e0:	9d03      	ldr	r5, [sp, #12]
 80189e2:	4114      	asrs	r4, r2
 80189e4:	f805 0c01 	strb.w	r0, [r5, #-1]
 80189e8:	f304 0407 	ssat	r4, #8, r4
 80189ec:	9a02      	ldr	r2, [sp, #8]
 80189ee:	f802 4c01 	strb.w	r4, [r2, #-1]
 80189f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80189f4:	2a00      	cmp	r2, #0
 80189f6:	f040 80ac 	bne.w	8018b52 <st_sssa8_ch_nn_mat_mult_nt_t+0x5a6>
 80189fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80189fc:	005b      	lsls	r3, r3, #1
 80189fe:	9810      	ldr	r0, [sp, #64]	; 0x40
 8018a00:	0049      	lsls	r1, r1, #1
 8018a02:	fb53 0302 	smmla	r3, r3, r2, r0
 8018a06:	fb51 0102 	smmla	r1, r1, r2, r0
 8018a0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018a0c:	4113      	asrs	r3, r2
 8018a0e:	f303 0307 	ssat	r3, #8, r3
 8018a12:	9803      	ldr	r0, [sp, #12]
 8018a14:	4111      	asrs	r1, r2
 8018a16:	7003      	strb	r3, [r0, #0]
 8018a18:	f301 0107 	ssat	r1, #8, r1
 8018a1c:	9b02      	ldr	r3, [sp, #8]
 8018a1e:	7019      	strb	r1, [r3, #0]
 8018a20:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8018a22:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018a24:	eb09 0b03 	add.w	fp, r9, r3
 8018a28:	9b03      	ldr	r3, [sp, #12]
 8018a2a:	4413      	add	r3, r2
 8018a2c:	9303      	str	r3, [sp, #12]
 8018a2e:	9b02      	ldr	r3, [sp, #8]
 8018a30:	4413      	add	r3, r2
 8018a32:	9302      	str	r3, [sp, #8]
 8018a34:	9b04      	ldr	r3, [sp, #16]
 8018a36:	3b01      	subs	r3, #1
 8018a38:	9304      	str	r3, [sp, #16]
 8018a3a:	f47f ae77 	bne.w	801872c <st_sssa8_ch_nn_mat_mult_nt_t+0x180>
 8018a3e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018a40:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8018a42:	3b01      	subs	r3, #1
 8018a44:	4413      	add	r3, r2
 8018a46:	9301      	str	r3, [sp, #4]
 8018a48:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018a4a:	2b00      	cmp	r3, #0
 8018a4c:	f040 822b 	bne.w	8018ea6 <st_sssa8_ch_nn_mat_mult_nt_t+0x8fa>
 8018a50:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018a52:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8018a54:	4413      	add	r3, r2
 8018a56:	9323      	str	r3, [sp, #140]	; 0x8c
 8018a58:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8018a5a:	b11b      	cbz	r3, 8018a64 <st_sssa8_ch_nn_mat_mult_nt_t+0x4b8>
 8018a5c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8018a5e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8018a60:	4413      	add	r3, r2
 8018a62:	9345      	str	r3, [sp, #276]	; 0x114
 8018a64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018a66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018a68:	3204      	adds	r2, #4
 8018a6a:	3302      	adds	r3, #2
 8018a6c:	9221      	str	r2, [sp, #132]	; 0x84
 8018a6e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8018a70:	931b      	str	r3, [sp, #108]	; 0x6c
 8018a72:	3208      	adds	r2, #8
 8018a74:	921f      	str	r2, [sp, #124]	; 0x7c
 8018a76:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018a78:	3208      	adds	r2, #8
 8018a7a:	9220      	str	r2, [sp, #128]	; 0x80
 8018a7c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8018a7e:	3208      	adds	r2, #8
 8018a80:	9222      	str	r2, [sp, #136]	; 0x88
 8018a82:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018a84:	429a      	cmp	r2, r3
 8018a86:	f47f adf0 	bne.w	801866a <st_sssa8_ch_nn_mat_mult_nt_t+0xbe>
 8018a8a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8018a8c:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8018a8e:	085a      	lsrs	r2, r3, #1
 8018a90:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8018a92:	fb02 3303 	mla	r3, r2, r3, r3
 8018a96:	3201      	adds	r2, #1
 8018a98:	4419      	add	r1, r3
 8018a9a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8018a9c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8018aa0:	912d      	str	r1, [sp, #180]	; 0xb4
 8018aa2:	932e      	str	r3, [sp, #184]	; 0xb8
 8018aa4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018aa6:	07db      	lsls	r3, r3, #31
 8018aa8:	d54f      	bpl.n	8018b4a <st_sssa8_ch_nn_mat_mult_nt_t+0x59e>
 8018aaa:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8018aac:	2b00      	cmp	r3, #0
 8018aae:	dd4c      	ble.n	8018b4a <st_sssa8_ch_nn_mat_mult_nt_t+0x59e>
 8018ab0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018ab2:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 8018ab6:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 8018aba:	2200      	movs	r2, #0
 8018abc:	441c      	add	r4, r3
 8018abe:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8018ac0:	f04f 0901 	mov.w	r9, #1
 8018ac4:	4611      	mov	r1, r2
 8018ac6:	eb03 0e84 	add.w	lr, r3, r4, lsl #2
 8018aca:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8018acc:	eb03 0584 	add.w	r5, r3, r4, lsl #2
 8018ad0:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8018ad2:	f8cd e004 	str.w	lr, [sp, #4]
 8018ad6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018ada:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018adc:	4498      	add	r8, r3
 8018ade:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 8018ae0:	e9dd e042 	ldrd	lr, r0, [sp, #264]	; 0x108
 8018ae4:	eb03 0848 	add.w	r8, r3, r8, lsl #1
 8018ae8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018aea:	9e01      	ldr	r6, [sp, #4]
 8018aec:	f1be 0f00 	cmp.w	lr, #0
 8018af0:	6837      	ldr	r7, [r6, #0]
 8018af2:	dd0d      	ble.n	8018b10 <st_sssa8_ch_nn_mat_mult_nt_t+0x564>
 8018af4:	9e2d      	ldr	r6, [sp, #180]	; 0xb4
 8018af6:	eb03 0b0e 	add.w	fp, r3, lr
 8018afa:	f106 3cff 	add.w	ip, r6, #4294967295
 8018afe:	f913 6b01 	ldrsb.w	r6, [r3], #1
 8018b02:	f91c af01 	ldrsb.w	sl, [ip, #1]!
 8018b06:	1a36      	subs	r6, r6, r0
 8018b08:	455b      	cmp	r3, fp
 8018b0a:	fb0a 7706 	mla	r7, sl, r6, r7
 8018b0e:	d1f6      	bne.n	8018afe <st_sssa8_ch_nn_mat_mult_nt_t+0x552>
 8018b10:	f9b8 c000 	ldrsh.w	ip, [r8]
 8018b14:	f1bc 0f15 	cmp.w	ip, #21
 8018b18:	f340 82f9 	ble.w	801910e <st_sssa8_ch_nn_mat_mult_nt_t+0xb62>
 8018b1c:	f1ac 0a02 	sub.w	sl, ip, #2
 8018b20:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018b24:	682e      	ldr	r6, [r5, #0]
 8018b26:	fa09 fa0a 	lsl.w	sl, r9, sl
 8018b2a:	fb57 a606 	smmla	r6, r7, r6, sl
 8018b2e:	fa46 fc0c 	asr.w	ip, r6, ip
 8018b32:	6826      	ldr	r6, [r4, #0]
 8018b34:	4466      	add	r6, ip
 8018b36:	f306 0607 	ssat	r6, #8, r6
 8018b3a:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8018b3c:	54be      	strb	r6, [r7, r2]
 8018b3e:	9e41      	ldr	r6, [sp, #260]	; 0x104
 8018b40:	3101      	adds	r1, #1
 8018b42:	4432      	add	r2, r6
 8018b44:	9e40      	ldr	r6, [sp, #256]	; 0x100
 8018b46:	428e      	cmp	r6, r1
 8018b48:	d1cf      	bne.n	8018aea <st_sssa8_ch_nn_mat_mult_nt_t+0x53e>
 8018b4a:	2000      	movs	r0, #0
 8018b4c:	b035      	add	sp, #212	; 0xd4
 8018b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b52:	3201      	adds	r2, #1
 8018b54:	d02e      	beq.n	8018bb4 <st_sssa8_ch_nn_mat_mult_nt_t+0x608>
 8018b56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018b58:	981d      	ldr	r0, [sp, #116]	; 0x74
 8018b5a:	fb53 0302 	smmla	r3, r3, r2, r0
 8018b5e:	fb51 0102 	smmla	r1, r1, r2, r0
 8018b62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018b64:	9810      	ldr	r0, [sp, #64]	; 0x40
 8018b66:	3a01      	subs	r2, #1
 8018b68:	4113      	asrs	r3, r2
 8018b6a:	4403      	add	r3, r0
 8018b6c:	f303 0307 	ssat	r3, #8, r3
 8018b70:	4111      	asrs	r1, r2
 8018b72:	9a03      	ldr	r2, [sp, #12]
 8018b74:	4401      	add	r1, r0
 8018b76:	7013      	strb	r3, [r2, #0]
 8018b78:	f301 0207 	ssat	r2, #8, r1
 8018b7c:	9b02      	ldr	r3, [sp, #8]
 8018b7e:	701a      	strb	r2, [r3, #0]
 8018b80:	e74e      	b.n	8018a20 <st_sssa8_ch_nn_mat_mult_nt_t+0x474>
 8018b82:	3201      	adds	r2, #1
 8018b84:	d031      	beq.n	8018bea <st_sssa8_ch_nn_mat_mult_nt_t+0x63e>
 8018b86:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8018b88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018b8a:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8018b8c:	fb50 5002 	smmla	r0, r0, r2, r5
 8018b90:	fb54 5402 	smmla	r4, r4, r2, r5
 8018b94:	4130      	asrs	r0, r6
 8018b96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018b98:	4410      	add	r0, r2
 8018b9a:	f300 0007 	ssat	r0, #8, r0
 8018b9e:	9d03      	ldr	r5, [sp, #12]
 8018ba0:	4134      	asrs	r4, r6
 8018ba2:	f805 0c01 	strb.w	r0, [r5, #-1]
 8018ba6:	18a2      	adds	r2, r4, r2
 8018ba8:	f302 0207 	ssat	r2, #8, r2
 8018bac:	9802      	ldr	r0, [sp, #8]
 8018bae:	f800 2c01 	strb.w	r2, [r0, #-1]
 8018bb2:	e71e      	b.n	80189f2 <st_sssa8_ch_nn_mat_mult_nt_t+0x446>
 8018bb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018bb6:	f1c2 0201 	rsb	r2, r2, #1
 8018bba:	4093      	lsls	r3, r2
 8018bbc:	f303 031f 	ssat	r3, #32, r3
 8018bc0:	980e      	ldr	r0, [sp, #56]	; 0x38
 8018bc2:	fb53 f310 	smmulr	r3, r3, r0
 8018bc6:	fa01 f202 	lsl.w	r2, r1, r2
 8018bca:	f302 021f 	ssat	r2, #32, r2
 8018bce:	fb52 f210 	smmulr	r2, r2, r0
 8018bd2:	9910      	ldr	r1, [sp, #64]	; 0x40
 8018bd4:	440b      	add	r3, r1
 8018bd6:	f303 0307 	ssat	r3, #8, r3
 8018bda:	9803      	ldr	r0, [sp, #12]
 8018bdc:	440a      	add	r2, r1
 8018bde:	7003      	strb	r3, [r0, #0]
 8018be0:	f302 0207 	ssat	r2, #8, r2
 8018be4:	9b02      	ldr	r3, [sp, #8]
 8018be6:	701a      	strb	r2, [r3, #0]
 8018be8:	e71a      	b.n	8018a20 <st_sssa8_ch_nn_mat_mult_nt_t+0x474>
 8018bea:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8018bec:	fa00 f205 	lsl.w	r2, r0, r5
 8018bf0:	f302 021f 	ssat	r2, #32, r2
 8018bf4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8018bf6:	fb52 f216 	smmulr	r2, r2, r6
 8018bfa:	fa04 f005 	lsl.w	r0, r4, r5
 8018bfe:	f300 001f 	ssat	r0, #32, r0
 8018c02:	fb50 f016 	smmulr	r0, r0, r6
 8018c06:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8018c08:	4422      	add	r2, r4
 8018c0a:	f302 0207 	ssat	r2, #8, r2
 8018c0e:	9d03      	ldr	r5, [sp, #12]
 8018c10:	4420      	add	r0, r4
 8018c12:	f805 2c01 	strb.w	r2, [r5, #-1]
 8018c16:	f300 0007 	ssat	r0, #8, r0
 8018c1a:	9a02      	ldr	r2, [sp, #8]
 8018c1c:	f802 0c01 	strb.w	r0, [r2, #-1]
 8018c20:	e6e7      	b.n	80189f2 <st_sssa8_ch_nn_mat_mult_nt_t+0x446>
 8018c22:	46d9      	mov	r9, fp
 8018c24:	e670      	b.n	8018908 <st_sssa8_ch_nn_mat_mult_nt_t+0x35c>
 8018c26:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8018c28:	f04f 0a00 	mov.w	sl, #0
 8018c2c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018c2e:	9301      	str	r3, [sp, #4]
 8018c30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018c32:	4604      	mov	r4, r0
 8018c34:	4619      	mov	r1, r3
 8018c36:	e622      	b.n	801887e <st_sssa8_ch_nn_mat_mult_nt_t+0x2d2>
 8018c38:	2301      	movs	r3, #1
 8018c3a:	9309      	str	r3, [sp, #36]	; 0x24
 8018c3c:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8018c3e:	2b00      	cmp	r3, #0
 8018c40:	f47f ad40 	bne.w	80186c4 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 8018c44:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018c46:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8018c48:	eb03 0a02 	add.w	sl, r3, r2
 8018c4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018c4e:	2b00      	cmp	r3, #0
 8018c50:	f340 82b1 	ble.w	80191b6 <st_sssa8_ch_nn_mat_mult_nt_t+0xc0a>
 8018c54:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018c56:	4650      	mov	r0, sl
 8018c58:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8018c5a:	18d5      	adds	r5, r2, r3
 8018c5c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8018c5e:	6811      	ldr	r1, [r2, #0]
 8018c60:	3210      	adds	r2, #16
 8018c62:	6804      	ldr	r4, [r0, #0]
 8018c64:	3340      	adds	r3, #64	; 0x40
 8018c66:	fa2f f681 	sxtb16	r6, r1
 8018c6a:	3010      	adds	r0, #16
 8018c6c:	f843 6c40 	str.w	r6, [r3, #-64]
 8018c70:	ea4f 2131 	mov.w	r1, r1, ror #8
 8018c74:	42aa      	cmp	r2, r5
 8018c76:	fa2f f181 	sxtb16	r1, r1
 8018c7a:	f843 1c3c 	str.w	r1, [r3, #-60]
 8018c7e:	ea4f 2134 	mov.w	r1, r4, ror #8
 8018c82:	fa2f f484 	sxtb16	r4, r4
 8018c86:	fa2f f181 	sxtb16	r1, r1
 8018c8a:	f843 4c38 	str.w	r4, [r3, #-56]
 8018c8e:	f843 1c34 	str.w	r1, [r3, #-52]
 8018c92:	f850 1c0c 	ldr.w	r1, [r0, #-12]
 8018c96:	f852 4c0c 	ldr.w	r4, [r2, #-12]
 8018c9a:	ea4f 2631 	mov.w	r6, r1, ror #8
 8018c9e:	fa2f f181 	sxtb16	r1, r1
 8018ca2:	fa2f f686 	sxtb16	r6, r6
 8018ca6:	f843 1c28 	str.w	r1, [r3, #-40]
 8018caa:	f843 6c24 	str.w	r6, [r3, #-36]
 8018cae:	ea4f 2634 	mov.w	r6, r4, ror #8
 8018cb2:	fa2f f484 	sxtb16	r4, r4
 8018cb6:	f843 4c30 	str.w	r4, [r3, #-48]
 8018cba:	fa2f f486 	sxtb16	r4, r6
 8018cbe:	f843 4c2c 	str.w	r4, [r3, #-44]
 8018cc2:	f852 4c08 	ldr.w	r4, [r2, #-8]
 8018cc6:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8018cca:	ea4f 2634 	mov.w	r6, r4, ror #8
 8018cce:	fa2f f484 	sxtb16	r4, r4
 8018cd2:	fa2f f686 	sxtb16	r6, r6
 8018cd6:	f843 4c20 	str.w	r4, [r3, #-32]
 8018cda:	ea4f 2431 	mov.w	r4, r1, ror #8
 8018cde:	f843 6c1c 	str.w	r6, [r3, #-28]
 8018ce2:	fa2f f484 	sxtb16	r4, r4
 8018ce6:	fa2f f181 	sxtb16	r1, r1
 8018cea:	f843 4c14 	str.w	r4, [r3, #-20]
 8018cee:	f843 1c18 	str.w	r1, [r3, #-24]
 8018cf2:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8018cf6:	f850 1c04 	ldr.w	r1, [r0, #-4]
 8018cfa:	ea4f 2634 	mov.w	r6, r4, ror #8
 8018cfe:	fa2f f484 	sxtb16	r4, r4
 8018d02:	fa2f f686 	sxtb16	r6, r6
 8018d06:	f843 4c10 	str.w	r4, [r3, #-16]
 8018d0a:	ea4f 2431 	mov.w	r4, r1, ror #8
 8018d0e:	f843 6c0c 	str.w	r6, [r3, #-12]
 8018d12:	fa2f f484 	sxtb16	r4, r4
 8018d16:	fa2f f181 	sxtb16	r1, r1
 8018d1a:	f843 4c04 	str.w	r4, [r3, #-4]
 8018d1e:	f843 1c08 	str.w	r1, [r3, #-8]
 8018d22:	d19c      	bne.n	8018c5e <st_sssa8_ch_nn_mat_mult_nt_t+0x6b2>
 8018d24:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018d26:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018d28:	9925      	ldr	r1, [sp, #148]	; 0x94
 8018d2a:	449a      	add	sl, r3
 8018d2c:	469c      	mov	ip, r3
 8018d2e:	1857      	adds	r7, r2, r1
 8018d30:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8018d32:	3b03      	subs	r3, #3
 8018d34:	4563      	cmp	r3, ip
 8018d36:	f340 823c 	ble.w	80191b2 <st_sssa8_ch_nn_mat_mult_nt_t+0xc06>
 8018d3a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018d3c:	463a      	mov	r2, r7
 8018d3e:	4650      	mov	r0, sl
 8018d40:	eba3 030c 	sub.w	r3, r3, ip
 8018d44:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8018d48:	f108 0e01 	add.w	lr, r8, #1
 8018d4c:	ea4f 098e 	mov.w	r9, lr, lsl #2
 8018d50:	eb05 068e 	add.w	r6, r5, lr, lsl #2
 8018d54:	f855 3b04 	ldr.w	r3, [r5], #4
 8018d58:	3210      	adds	r2, #16
 8018d5a:	f850 1b04 	ldr.w	r1, [r0], #4
 8018d5e:	fa2f f483 	sxtb16	r4, r3
 8018d62:	42b5      	cmp	r5, r6
 8018d64:	ea4f 2333 	mov.w	r3, r3, ror #8
 8018d68:	fa2f f383 	sxtb16	r3, r3
 8018d6c:	f842 3c0c 	str.w	r3, [r2, #-12]
 8018d70:	ea4f 2331 	mov.w	r3, r1, ror #8
 8018d74:	fa2f f181 	sxtb16	r1, r1
 8018d78:	f842 4c10 	str.w	r4, [r2, #-16]
 8018d7c:	f842 1c08 	str.w	r1, [r2, #-8]
 8018d80:	fa2f f383 	sxtb16	r3, r3
 8018d84:	f842 3c04 	str.w	r3, [r2, #-4]
 8018d88:	d1e4      	bne.n	8018d54 <st_sssa8_ch_nn_mat_mult_nt_t+0x7a8>
 8018d8a:	f10c 0304 	add.w	r3, ip, #4
 8018d8e:	44ca      	add	sl, r9
 8018d90:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 8018d94:	eb03 0c88 	add.w	ip, r3, r8, lsl #2
 8018d98:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8018d9a:	4563      	cmp	r3, ip
 8018d9c:	f77f ac92 	ble.w	80186c4 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 8018da0:	f996 3000 	ldrsb.w	r3, [r6]
 8018da4:	803b      	strh	r3, [r7, #0]
 8018da6:	f10c 0301 	add.w	r3, ip, #1
 8018daa:	f99a 2000 	ldrsb.w	r2, [sl]
 8018dae:	807a      	strh	r2, [r7, #2]
 8018db0:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8018db2:	429a      	cmp	r2, r3
 8018db4:	f77f ac86 	ble.w	80186c4 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 8018db8:	f996 3001 	ldrsb.w	r3, [r6, #1]
 8018dbc:	80bb      	strh	r3, [r7, #4]
 8018dbe:	f10c 0302 	add.w	r3, ip, #2
 8018dc2:	f99a 2001 	ldrsb.w	r2, [sl, #1]
 8018dc6:	80fa      	strh	r2, [r7, #6]
 8018dc8:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8018dca:	429a      	cmp	r2, r3
 8018dcc:	f77f ac7a 	ble.w	80186c4 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 8018dd0:	f996 3002 	ldrsb.w	r3, [r6, #2]
 8018dd4:	f10c 0c03 	add.w	ip, ip, #3
 8018dd8:	813b      	strh	r3, [r7, #8]
 8018dda:	4594      	cmp	ip, r2
 8018ddc:	f99a 3002 	ldrsb.w	r3, [sl, #2]
 8018de0:	817b      	strh	r3, [r7, #10]
 8018de2:	f6bf ac6f 	bge.w	80186c4 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 8018de6:	f996 3003 	ldrsb.w	r3, [r6, #3]
 8018dea:	81bb      	strh	r3, [r7, #12]
 8018dec:	f99a 3003 	ldrsb.w	r3, [sl, #3]
 8018df0:	81fb      	strh	r3, [r7, #14]
 8018df2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8018df4:	2b00      	cmp	r3, #0
 8018df6:	f43f ac69 	beq.w	80186cc <st_sssa8_ch_nn_mat_mult_nt_t+0x120>
 8018dfa:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8018dfc:	2800      	cmp	r0, #0
 8018dfe:	f000 81cc 	beq.w	801919a <st_sssa8_ch_nn_mat_mult_nt_t+0xbee>
 8018e02:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018e04:	2300      	movs	r3, #0
 8018e06:	f102 0110 	add.w	r1, r2, #16
 8018e0a:	461a      	mov	r2, r3
 8018e0c:	f931 4c10 	ldrsh.w	r4, [r1, #-16]
 8018e10:	3801      	subs	r0, #1
 8018e12:	f101 0110 	add.w	r1, r1, #16
 8018e16:	eba3 0304 	sub.w	r3, r3, r4
 8018e1a:	f931 4c18 	ldrsh.w	r4, [r1, #-24]
 8018e1e:	eba2 0204 	sub.w	r2, r2, r4
 8018e22:	f931 4c1e 	ldrsh.w	r4, [r1, #-30]
 8018e26:	eba3 0304 	sub.w	r3, r3, r4
 8018e2a:	f931 4c16 	ldrsh.w	r4, [r1, #-22]
 8018e2e:	eba2 0204 	sub.w	r2, r2, r4
 8018e32:	f931 4c1c 	ldrsh.w	r4, [r1, #-28]
 8018e36:	eba3 0304 	sub.w	r3, r3, r4
 8018e3a:	f931 4c14 	ldrsh.w	r4, [r1, #-20]
 8018e3e:	eba2 0204 	sub.w	r2, r2, r4
 8018e42:	f931 4c1a 	ldrsh.w	r4, [r1, #-26]
 8018e46:	eba3 0304 	sub.w	r3, r3, r4
 8018e4a:	f931 4c12 	ldrsh.w	r4, [r1, #-18]
 8018e4e:	eba2 0204 	sub.w	r2, r2, r4
 8018e52:	d1db      	bne.n	8018e0c <st_sssa8_ch_nn_mat_mult_nt_t+0x860>
 8018e54:	9945      	ldr	r1, [sp, #276]	; 0x114
 8018e56:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8018e58:	4401      	add	r1, r0
 8018e5a:	9c30      	ldr	r4, [sp, #192]	; 0xc0
 8018e5c:	b1cc      	cbz	r4, 8018e92 <st_sssa8_ch_nn_mat_mult_nt_t+0x8e6>
 8018e5e:	f9b1 0000 	ldrsh.w	r0, [r1]
 8018e62:	2c01      	cmp	r4, #1
 8018e64:	eba3 0300 	sub.w	r3, r3, r0
 8018e68:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 8018e6c:	eba2 0200 	sub.w	r2, r2, r0
 8018e70:	d00f      	beq.n	8018e92 <st_sssa8_ch_nn_mat_mult_nt_t+0x8e6>
 8018e72:	f9b1 0004 	ldrsh.w	r0, [r1, #4]
 8018e76:	2c02      	cmp	r4, #2
 8018e78:	eba3 0300 	sub.w	r3, r3, r0
 8018e7c:	f9b1 0006 	ldrsh.w	r0, [r1, #6]
 8018e80:	eba2 0200 	sub.w	r2, r2, r0
 8018e84:	d005      	beq.n	8018e92 <st_sssa8_ch_nn_mat_mult_nt_t+0x8e6>
 8018e86:	f9b1 0008 	ldrsh.w	r0, [r1, #8]
 8018e8a:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8018e8e:	1a1b      	subs	r3, r3, r0
 8018e90:	1a52      	subs	r2, r2, r1
 8018e92:	9943      	ldr	r1, [sp, #268]	; 0x10c
 8018e94:	fb03 f101 	mul.w	r1, r3, r1
 8018e98:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8018e9a:	fb03 f202 	mul.w	r2, r3, r2
 8018e9e:	e417      	b.n	80186d0 <st_sssa8_ch_nn_mat_mult_nt_t+0x124>
 8018ea0:	2301      	movs	r3, #1
 8018ea2:	9308      	str	r3, [sp, #32]
 8018ea4:	e400      	b.n	80186a8 <st_sssa8_ch_nn_mat_mult_nt_t+0xfc>
 8018ea6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018ea8:	2b00      	cmp	r3, #0
 8018eaa:	f340 817c 	ble.w	80191a6 <st_sssa8_ch_nn_mat_mult_nt_t+0xbfa>
 8018eae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018eb0:	e9dd 250b 	ldrd	r2, r5, [sp, #44]	; 0x2c
 8018eb4:	eb0b 0003 	add.w	r0, fp, r3
 8018eb8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8018eba:	f8db 1000 	ldr.w	r1, [fp]
 8018ebe:	fa2f f481 	sxtb16	r4, r1
 8018ec2:	fa2f f191 	sxtb16	r1, r1, ror #8
 8018ec6:	681e      	ldr	r6, [r3, #0]
 8018ec8:	fb24 5506 	smlad	r5, r4, r6, r5
 8018ecc:	685e      	ldr	r6, [r3, #4]
 8018ece:	fb21 5606 	smlad	r6, r1, r6, r5
 8018ed2:	689d      	ldr	r5, [r3, #8]
 8018ed4:	fb24 2205 	smlad	r2, r4, r5, r2
 8018ed8:	68dc      	ldr	r4, [r3, #12]
 8018eda:	fb21 2104 	smlad	r1, r1, r4, r2
 8018ede:	f8db 2004 	ldr.w	r2, [fp, #4]
 8018ee2:	fa2f f482 	sxtb16	r4, r2
 8018ee6:	fa2f f292 	sxtb16	r2, r2, ror #8
 8018eea:	691d      	ldr	r5, [r3, #16]
 8018eec:	fb24 6505 	smlad	r5, r4, r5, r6
 8018ef0:	695e      	ldr	r6, [r3, #20]
 8018ef2:	fb22 5606 	smlad	r6, r2, r6, r5
 8018ef6:	699d      	ldr	r5, [r3, #24]
 8018ef8:	fb24 1105 	smlad	r1, r4, r5, r1
 8018efc:	69dc      	ldr	r4, [r3, #28]
 8018efe:	fb22 1104 	smlad	r1, r2, r4, r1
 8018f02:	f8db 2008 	ldr.w	r2, [fp, #8]
 8018f06:	fa2f f482 	sxtb16	r4, r2
 8018f0a:	fa2f f292 	sxtb16	r2, r2, ror #8
 8018f0e:	6a1d      	ldr	r5, [r3, #32]
 8018f10:	fb24 6505 	smlad	r5, r4, r5, r6
 8018f14:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8018f16:	fb22 5606 	smlad	r6, r2, r6, r5
 8018f1a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8018f1c:	fb24 1105 	smlad	r1, r4, r5, r1
 8018f20:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8018f22:	fb22 1104 	smlad	r1, r2, r4, r1
 8018f26:	f8db 200c 	ldr.w	r2, [fp, #12]
 8018f2a:	3340      	adds	r3, #64	; 0x40
 8018f2c:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8018f30:	f10b 0b10 	add.w	fp, fp, #16
 8018f34:	f853 ec0c 	ldr.w	lr, [r3, #-12]
 8018f38:	f853 cc08 	ldr.w	ip, [r3, #-8]
 8018f3c:	f853 7c04 	ldr.w	r7, [r3, #-4]
 8018f40:	fa2f f482 	sxtb16	r4, r2
 8018f44:	fa2f f292 	sxtb16	r2, r2, ror #8
 8018f48:	fb24 6505 	smlad	r5, r4, r5, r6
 8018f4c:	fb22 550e 	smlad	r5, r2, lr, r5
 8018f50:	fb24 110c 	smlad	r1, r4, ip, r1
 8018f54:	fb22 1207 	smlad	r2, r2, r7, r1
 8018f58:	4583      	cmp	fp, r0
 8018f5a:	d1ae      	bne.n	8018eba <st_sssa8_ch_nn_mat_mult_nt_t+0x90e>
 8018f5c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8018f5e:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8018f62:	e9cd 250b 	strd	r2, r5, [sp, #44]	; 0x2c
 8018f66:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8018f68:	eb03 0e02 	add.w	lr, r3, r2
 8018f6c:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8018f6e:	3b03      	subs	r3, #3
 8018f70:	4543      	cmp	r3, r8
 8018f72:	f340 8116 	ble.w	80191a2 <st_sssa8_ch_nn_mat_mult_nt_t+0xbf6>
 8018f76:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018f78:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8018f7a:	eba3 0a08 	sub.w	sl, r3, r8
 8018f7e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8018f80:	4673      	mov	r3, lr
 8018f82:	f8cd e008 	str.w	lr, [sp, #8]
 8018f86:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
 8018f8a:	f10a 0901 	add.w	r9, sl, #1
 8018f8e:	eb00 0c89 	add.w	ip, r0, r9, lsl #2
 8018f92:	681c      	ldr	r4, [r3, #0]
 8018f94:	3310      	adds	r3, #16
 8018f96:	f850 2b04 	ldr.w	r2, [r0], #4
 8018f9a:	f853 bc0c 	ldr.w	fp, [r3, #-12]
 8018f9e:	f853 ec08 	ldr.w	lr, [r3, #-8]
 8018fa2:	f853 7c04 	ldr.w	r7, [r3, #-4]
 8018fa6:	fa2f f182 	sxtb16	r1, r2
 8018faa:	fa2f f292 	sxtb16	r2, r2, ror #8
 8018fae:	fb21 6604 	smlad	r6, r1, r4, r6
 8018fb2:	fb22 660b 	smlad	r6, r2, fp, r6
 8018fb6:	fb21 550e 	smlad	r5, r1, lr, r5
 8018fba:	fb22 5507 	smlad	r5, r2, r7, r5
 8018fbe:	4560      	cmp	r0, ip
 8018fc0:	d1e7      	bne.n	8018f92 <st_sssa8_ch_nn_mat_mult_nt_t+0x9e6>
 8018fc2:	f8dd e008 	ldr.w	lr, [sp, #8]
 8018fc6:	f108 0804 	add.w	r8, r8, #4
 8018fca:	950b      	str	r5, [sp, #44]	; 0x2c
 8018fcc:	eb0e 1e09 	add.w	lr, lr, r9, lsl #4
 8018fd0:	960c      	str	r6, [sp, #48]	; 0x30
 8018fd2:	eb08 088a 	add.w	r8, r8, sl, lsl #2
 8018fd6:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8018fd8:	4543      	cmp	r3, r8
 8018fda:	dd40      	ble.n	801905e <st_sssa8_ch_nn_mat_mult_nt_t+0xab2>
 8018fdc:	f99c 3000 	ldrsb.w	r3, [ip]
 8018fe0:	f8be 2000 	ldrh.w	r2, [lr]
 8018fe4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018fe6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8018fe8:	fb12 1103 	smlabb	r1, r2, r3, r1
 8018fec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8018ff0:	fb12 0003 	smlabb	r0, r2, r3, r0
 8018ff4:	f108 0301 	add.w	r3, r8, #1
 8018ff8:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8018ffa:	910c      	str	r1, [sp, #48]	; 0x30
 8018ffc:	429a      	cmp	r2, r3
 8018ffe:	900b      	str	r0, [sp, #44]	; 0x2c
 8019000:	dd2d      	ble.n	801905e <st_sssa8_ch_nn_mat_mult_nt_t+0xab2>
 8019002:	f99c 3001 	ldrsb.w	r3, [ip, #1]
 8019006:	f8be 2004 	ldrh.w	r2, [lr, #4]
 801900a:	fb12 1103 	smlabb	r1, r2, r3, r1
 801900e:	f8be 2006 	ldrh.w	r2, [lr, #6]
 8019012:	fb12 0003 	smlabb	r0, r2, r3, r0
 8019016:	f108 0302 	add.w	r3, r8, #2
 801901a:	9a42      	ldr	r2, [sp, #264]	; 0x108
 801901c:	910c      	str	r1, [sp, #48]	; 0x30
 801901e:	429a      	cmp	r2, r3
 8019020:	900b      	str	r0, [sp, #44]	; 0x2c
 8019022:	dd1c      	ble.n	801905e <st_sssa8_ch_nn_mat_mult_nt_t+0xab2>
 8019024:	f99c 3002 	ldrsb.w	r3, [ip, #2]
 8019028:	f108 0803 	add.w	r8, r8, #3
 801902c:	f8be 2008 	ldrh.w	r2, [lr, #8]
 8019030:	fb12 1103 	smlabb	r1, r2, r3, r1
 8019034:	f8be 200a 	ldrh.w	r2, [lr, #10]
 8019038:	fb12 0003 	smlabb	r0, r2, r3, r0
 801903c:	9b42      	ldr	r3, [sp, #264]	; 0x108
 801903e:	910c      	str	r1, [sp, #48]	; 0x30
 8019040:	4543      	cmp	r3, r8
 8019042:	900b      	str	r0, [sp, #44]	; 0x2c
 8019044:	dd0b      	ble.n	801905e <st_sssa8_ch_nn_mat_mult_nt_t+0xab2>
 8019046:	f99c 3003 	ldrsb.w	r3, [ip, #3]
 801904a:	f8be 200c 	ldrh.w	r2, [lr, #12]
 801904e:	fb12 1203 	smlabb	r2, r2, r3, r1
 8019052:	920c      	str	r2, [sp, #48]	; 0x30
 8019054:	f8be 200e 	ldrh.w	r2, [lr, #14]
 8019058:	fb12 0303 	smlabb	r3, r2, r3, r0
 801905c:	930b      	str	r3, [sp, #44]	; 0x2c
 801905e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019060:	f933 1c02 	ldrsh.w	r1, [r3, #-2]
 8019064:	2915      	cmp	r1, #21
 8019066:	dd3d      	ble.n	80190e4 <st_sssa8_ch_nn_mat_mult_nt_t+0xb38>
 8019068:	1e8a      	subs	r2, r1, #2
 801906a:	2301      	movs	r3, #1
 801906c:	3901      	subs	r1, #1
 801906e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8019070:	fa03 f202 	lsl.w	r2, r3, r2
 8019074:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8019076:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801907a:	fb50 2303 	smmla	r3, r0, r3, r2
 801907e:	fa43 f101 	asr.w	r1, r3, r1
 8019082:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019084:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8019088:	440b      	add	r3, r1
 801908a:	f303 0307 	ssat	r3, #8, r3
 801908e:	9a01      	ldr	r2, [sp, #4]
 8019090:	7013      	strb	r3, [r2, #0]
 8019092:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019094:	f9b3 1000 	ldrsh.w	r1, [r3]
 8019098:	2915      	cmp	r1, #21
 801909a:	dd13      	ble.n	80190c4 <st_sssa8_ch_nn_mat_mult_nt_t+0xb18>
 801909c:	1e8a      	subs	r2, r1, #2
 801909e:	2301      	movs	r3, #1
 80190a0:	3901      	subs	r1, #1
 80190a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80190a4:	fa03 f202 	lsl.w	r2, r3, r2
 80190a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80190aa:	681b      	ldr	r3, [r3, #0]
 80190ac:	fb50 2303 	smmla	r3, r0, r3, r2
 80190b0:	fa43 f101 	asr.w	r1, r3, r1
 80190b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80190b6:	681b      	ldr	r3, [r3, #0]
 80190b8:	440b      	add	r3, r1
 80190ba:	f303 0307 	ssat	r3, #8, r3
 80190be:	9a01      	ldr	r2, [sp, #4]
 80190c0:	7053      	strb	r3, [r2, #1]
 80190c2:	e4c5      	b.n	8018a50 <st_sssa8_ch_nn_mat_mult_nt_t+0x4a4>
 80190c4:	2900      	cmp	r1, #0
 80190c6:	dd56      	ble.n	8019176 <st_sssa8_ch_nn_mat_mult_nt_t+0xbca>
 80190c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80190ca:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80190cc:	0058      	lsls	r0, r3, #1
 80190ce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80190d0:	6812      	ldr	r2, [r2, #0]
 80190d2:	681b      	ldr	r3, [r3, #0]
 80190d4:	fb50 2303 	smmla	r3, r0, r3, r2
 80190d8:	410b      	asrs	r3, r1
 80190da:	f303 0307 	ssat	r3, #8, r3
 80190de:	9a01      	ldr	r2, [sp, #4]
 80190e0:	7053      	strb	r3, [r2, #1]
 80190e2:	e4b5      	b.n	8018a50 <st_sssa8_ch_nn_mat_mult_nt_t+0x4a4>
 80190e4:	2900      	cmp	r1, #0
 80190e6:	dd32      	ble.n	801914e <st_sssa8_ch_nn_mat_mult_nt_t+0xba2>
 80190e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80190ea:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80190ec:	0058      	lsls	r0, r3, #1
 80190ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80190f0:	f852 2c04 	ldr.w	r2, [r2, #-4]
 80190f4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80190f8:	fb50 2303 	smmla	r3, r0, r3, r2
 80190fc:	410b      	asrs	r3, r1
 80190fe:	f303 0307 	ssat	r3, #8, r3
 8019102:	9a01      	ldr	r2, [sp, #4]
 8019104:	7013      	strb	r3, [r2, #0]
 8019106:	e7c4      	b.n	8019092 <st_sssa8_ch_nn_mat_mult_nt_t+0xae6>
 8019108:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 801910c:	e49c      	b.n	8018a48 <st_sssa8_ch_nn_mat_mult_nt_t+0x49c>
 801910e:	f1bc 0f00 	cmp.w	ip, #0
 8019112:	dd0c      	ble.n	801912e <st_sssa8_ch_nn_mat_mult_nt_t+0xb82>
 8019114:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8019118:	682e      	ldr	r6, [r5, #0]
 801911a:	6827      	ldr	r7, [r4, #0]
 801911c:	fb5a 7706 	smmla	r7, sl, r6, r7
 8019120:	fa47 f60c 	asr.w	r6, r7, ip
 8019124:	f306 0607 	ssat	r6, #8, r6
 8019128:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801912a:	54be      	strb	r6, [r7, r2]
 801912c:	e507      	b.n	8018b3e <st_sssa8_ch_nn_mat_mult_nt_t+0x592>
 801912e:	f1cc 0c01 	rsb	ip, ip, #1
 8019132:	fa07 f70c 	lsl.w	r7, r7, ip
 8019136:	f307 071f 	ssat	r7, #32, r7
 801913a:	682e      	ldr	r6, [r5, #0]
 801913c:	fb57 f716 	smmulr	r7, r7, r6
 8019140:	6826      	ldr	r6, [r4, #0]
 8019142:	443e      	add	r6, r7
 8019144:	f306 0607 	ssat	r6, #8, r6
 8019148:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801914a:	54be      	strb	r6, [r7, r2]
 801914c:	e4f7      	b.n	8018b3e <st_sssa8_ch_nn_mat_mult_nt_t+0x592>
 801914e:	f1c1 0101 	rsb	r1, r1, #1
 8019152:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019154:	408a      	lsls	r2, r1
 8019156:	f302 021f 	ssat	r2, #32, r2
 801915a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801915c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8019160:	fb52 f213 	smmulr	r2, r2, r3
 8019164:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019166:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801916a:	4413      	add	r3, r2
 801916c:	f303 0307 	ssat	r3, #8, r3
 8019170:	9a01      	ldr	r2, [sp, #4]
 8019172:	7013      	strb	r3, [r2, #0]
 8019174:	e78d      	b.n	8019092 <st_sssa8_ch_nn_mat_mult_nt_t+0xae6>
 8019176:	f1c1 0101 	rsb	r1, r1, #1
 801917a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801917c:	408a      	lsls	r2, r1
 801917e:	f302 021f 	ssat	r2, #32, r2
 8019182:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8019184:	681b      	ldr	r3, [r3, #0]
 8019186:	fb52 f213 	smmulr	r2, r2, r3
 801918a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801918c:	681b      	ldr	r3, [r3, #0]
 801918e:	4413      	add	r3, r2
 8019190:	f303 0307 	ssat	r3, #8, r3
 8019194:	9a01      	ldr	r2, [sp, #4]
 8019196:	7053      	strb	r3, [r2, #1]
 8019198:	e45a      	b.n	8018a50 <st_sssa8_ch_nn_mat_mult_nt_t+0x4a4>
 801919a:	4602      	mov	r2, r0
 801919c:	9945      	ldr	r1, [sp, #276]	; 0x114
 801919e:	4603      	mov	r3, r0
 80191a0:	e65b      	b.n	8018e5a <st_sssa8_ch_nn_mat_mult_nt_t+0x8ae>
 80191a2:	4684      	mov	ip, r0
 80191a4:	e717      	b.n	8018fd6 <st_sssa8_ch_nn_mat_mult_nt_t+0xa2a>
 80191a6:	4658      	mov	r0, fp
 80191a8:	f8dd e114 	ldr.w	lr, [sp, #276]	; 0x114
 80191ac:	f04f 0800 	mov.w	r8, #0
 80191b0:	e6dc      	b.n	8018f6c <st_sssa8_ch_nn_mat_mult_nt_t+0x9c0>
 80191b2:	462e      	mov	r6, r5
 80191b4:	e5f0      	b.n	8018d98 <st_sssa8_ch_nn_mat_mult_nt_t+0x7ec>
 80191b6:	9f45      	ldr	r7, [sp, #276]	; 0x114
 80191b8:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 80191ba:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
 80191be:	e5b7      	b.n	8018d30 <st_sssa8_ch_nn_mat_mult_nt_t+0x784>

080191c0 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t>:
 80191c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191c4:	b0c9      	sub	sp, #292	; 0x124
 80191c6:	469c      	mov	ip, r3
 80191c8:	4696      	mov	lr, r2
 80191ca:	902c      	str	r0, [sp, #176]	; 0xb0
 80191cc:	9329      	str	r3, [sp, #164]	; 0xa4
 80191ce:	9855      	ldr	r0, [sp, #340]	; 0x154
 80191d0:	f8bd 316c 	ldrh.w	r3, [sp, #364]	; 0x16c
 80191d4:	f8bd 6164 	ldrh.w	r6, [sp, #356]	; 0x164
 80191d8:	fb00 f003 	mul.w	r0, r0, r3
 80191dc:	9b54      	ldr	r3, [sp, #336]	; 0x150
 80191de:	f8bd 7170 	ldrh.w	r7, [sp, #368]	; 0x170
 80191e2:	9245      	str	r2, [sp, #276]	; 0x114
 80191e4:	9631      	str	r6, [sp, #196]	; 0xc4
 80191e6:	f8bd 215c 	ldrh.w	r2, [sp, #348]	; 0x15c
 80191ea:	f8bd 6168 	ldrh.w	r6, [sp, #360]	; 0x168
 80191ee:	9134      	str	r1, [sp, #208]	; 0xd0
 80191f0:	9006      	str	r0, [sp, #24]
 80191f2:	923a      	str	r2, [sp, #232]	; 0xe8
 80191f4:	962e      	str	r6, [sp, #184]	; 0xb8
 80191f6:	9709      	str	r7, [sp, #36]	; 0x24
 80191f8:	e9dd 455f 	ldrd	r4, r5, [sp, #380]	; 0x17c
 80191fc:	2d00      	cmp	r5, #0
 80191fe:	bf18      	it	ne
 8019200:	462c      	movne	r4, r5
 8019202:	f8bd 5160 	ldrh.w	r5, [sp, #352]	; 0x160
 8019206:	2b01      	cmp	r3, #1
 8019208:	945f      	str	r4, [sp, #380]	; 0x17c
 801920a:	f8bd 4158 	ldrh.w	r4, [sp, #344]	; 0x158
 801920e:	952d      	str	r5, [sp, #180]	; 0xb4
 8019210:	9446      	str	r4, [sp, #280]	; 0x118
 8019212:	f340 82b4 	ble.w	801977e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x5be>
 8019216:	3b02      	subs	r3, #2
 8019218:	1eaa      	subs	r2, r5, #2
 801921a:	9d55      	ldr	r5, [sp, #340]	; 0x154
 801921c:	4688      	mov	r8, r1
 801921e:	085b      	lsrs	r3, r3, #1
 8019220:	f1a0 0110 	sub.w	r1, r0, #16
 8019224:	fb05 f404 	mul.w	r4, r5, r4
 8019228:	f000 0503 	and.w	r5, r0, #3
 801922c:	3301      	adds	r3, #1
 801922e:	9143      	str	r1, [sp, #268]	; 0x10c
 8019230:	9537      	str	r5, [sp, #220]	; 0xdc
 8019232:	0852      	lsrs	r2, r2, #1
 8019234:	9d54      	ldr	r5, [sp, #336]	; 0x150
 8019236:	fb00 f707 	mul.w	r7, r0, r7
 801923a:	9339      	str	r3, [sp, #228]	; 0xe4
 801923c:	090b      	lsrs	r3, r1, #4
 801923e:	1081      	asrs	r1, r0, #2
 8019240:	9414      	str	r4, [sp, #80]	; 0x50
 8019242:	973b      	str	r7, [sp, #236]	; 0xec
 8019244:	3301      	adds	r3, #1
 8019246:	9136      	str	r1, [sp, #216]	; 0xd8
 8019248:	0069      	lsls	r1, r5, #1
 801924a:	460d      	mov	r5, r1
 801924c:	9121      	str	r1, [sp, #132]	; 0x84
 801924e:	fb02 f104 	mul.w	r1, r2, r4
 8019252:	fb02 5505 	mla	r5, r2, r5, r5
 8019256:	9542      	str	r5, [sp, #264]	; 0x108
 8019258:	004d      	lsls	r5, r1, #1
 801925a:	9936      	ldr	r1, [sp, #216]	; 0xd8
 801925c:	9541      	str	r5, [sp, #260]	; 0x104
 801925e:	f06f 0503 	mvn.w	r5, #3
 8019262:	1b2d      	subs	r5, r5, r4
 8019264:	9513      	str	r5, [sp, #76]	; 0x4c
 8019266:	1f25      	subs	r5, r4, #4
 8019268:	0064      	lsls	r4, r4, #1
 801926a:	9511      	str	r5, [sp, #68]	; 0x44
 801926c:	941f      	str	r4, [sp, #124]	; 0x7c
 801926e:	007c      	lsls	r4, r7, #1
 8019270:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8019272:	9438      	str	r4, [sp, #224]	; 0xe0
 8019274:	00bc      	lsls	r4, r7, #2
 8019276:	f105 39ff 	add.w	r9, r5, #4294967295
 801927a:	f005 0501 	and.w	r5, r5, #1
 801927e:	943d      	str	r4, [sp, #244]	; 0xf4
 8019280:	1a34      	subs	r4, r6, r0
 8019282:	f8cd 9078 	str.w	r9, [sp, #120]	; 0x78
 8019286:	f1a0 090f 	sub.w	r9, r0, #15
 801928a:	940b      	str	r4, [sp, #44]	; 0x2c
 801928c:	9c53      	ldr	r4, [sp, #332]	; 0x14c
 801928e:	9839      	ldr	r0, [sp, #228]	; 0xe4
 8019290:	3402      	adds	r4, #2
 8019292:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8019296:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 801929a:	953c      	str	r5, [sp, #240]	; 0xf0
 801929c:	942b      	str	r4, [sp, #172]	; 0xac
 801929e:	9c52      	ldr	r4, [sp, #328]	; 0x148
 80192a0:	9044      	str	r0, [sp, #272]	; 0x110
 80192a2:	0108      	lsls	r0, r1, #4
 80192a4:	3404      	adds	r4, #4
 80192a6:	903f      	str	r0, [sp, #252]	; 0xfc
 80192a8:	9427      	str	r4, [sp, #156]	; 0x9c
 80192aa:	9c5e      	ldr	r4, [sp, #376]	; 0x178
 80192ac:	3404      	adds	r4, #4
 80192ae:	9428      	str	r4, [sp, #160]	; 0xa0
 80192b0:	4674      	mov	r4, lr
 80192b2:	3404      	adds	r4, #4
 80192b4:	9433      	str	r4, [sp, #204]	; 0xcc
 80192b6:	9937      	ldr	r1, [sp, #220]	; 0xdc
 80192b8:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 80192ba:	0088      	lsls	r0, r1, #2
 80192bc:	f8cd 80c8 	str.w	r8, [sp, #200]	; 0xc8
 80192c0:	fb06 f202 	mul.w	r2, r6, r2
 80192c4:	9040      	str	r0, [sp, #256]	; 0x100
 80192c6:	923e      	str	r2, [sp, #248]	; 0xf8
 80192c8:	011a      	lsls	r2, r3, #4
 80192ca:	019b      	lsls	r3, r3, #6
 80192cc:	920f      	str	r2, [sp, #60]	; 0x3c
 80192ce:	9310      	str	r3, [sp, #64]	; 0x40
 80192d0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80192d2:	f932 3c02 	ldrsh.w	r3, [r2, #-2]
 80192d6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80192da:	2b15      	cmp	r3, #21
 80192dc:	9320      	str	r3, [sp, #128]	; 0x80
 80192de:	921d      	str	r2, [sp, #116]	; 0x74
 80192e0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80192e2:	f852 1c04 	ldr.w	r1, [r2, #-4]
 80192e6:	6812      	ldr	r2, [r2, #0]
 80192e8:	9122      	str	r1, [sp, #136]	; 0x88
 80192ea:	9223      	str	r2, [sp, #140]	; 0x8c
 80192ec:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80192ee:	f852 1c04 	ldr.w	r1, [r2, #-4]
 80192f2:	6812      	ldr	r2, [r2, #0]
 80192f4:	9124      	str	r1, [sp, #144]	; 0x90
 80192f6:	9225      	str	r2, [sp, #148]	; 0x94
 80192f8:	f300 8522 	bgt.w	8019d40 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb80>
 80192fc:	2b00      	cmp	r3, #0
 80192fe:	bfcc      	ite	gt
 8019300:	2300      	movgt	r3, #0
 8019302:	2301      	movle	r3, #1
 8019304:	425b      	negs	r3, r3
 8019306:	9319      	str	r3, [sp, #100]	; 0x64
 8019308:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801930a:	2b15      	cmp	r3, #21
 801930c:	f300 84aa 	bgt.w	8019c64 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xaa4>
 8019310:	2b00      	cmp	r3, #0
 8019312:	bfcc      	ite	gt
 8019314:	2300      	movgt	r3, #0
 8019316:	2301      	movle	r3, #1
 8019318:	425b      	negs	r3, r3
 801931a:	931a      	str	r3, [sp, #104]	; 0x68
 801931c:	9b60      	ldr	r3, [sp, #384]	; 0x180
 801931e:	2b00      	cmp	r3, #0
 8019320:	f000 84a6 	beq.w	8019c70 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xab0>
 8019324:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 8019326:	2b00      	cmp	r3, #0
 8019328:	f040 84b0 	bne.w	8019c8c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xacc>
 801932c:	461c      	mov	r4, r3
 801932e:	9933      	ldr	r1, [sp, #204]	; 0xcc
 8019330:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8019334:	18a2      	adds	r2, r4, r2
 8019336:	921b      	str	r2, [sp, #108]	; 0x6c
 8019338:	680a      	ldr	r2, [r1, #0]
 801933a:	4413      	add	r3, r2
 801933c:	931c      	str	r3, [sp, #112]	; 0x70
 801933e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8019340:	2b00      	cmp	r3, #0
 8019342:	f000 81f8 	beq.w	8019736 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x576>
 8019346:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019348:	2301      	movs	r3, #1
 801934a:	2100      	movs	r1, #0
 801934c:	3a02      	subs	r2, #2
 801934e:	912a      	str	r1, [sp, #168]	; 0xa8
 8019350:	fa03 f202 	lsl.w	r2, r3, r2
 8019354:	9135      	str	r1, [sp, #212]	; 0xd4
 8019356:	922f      	str	r2, [sp, #188]	; 0xbc
 8019358:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801935a:	3a02      	subs	r2, #2
 801935c:	4093      	lsls	r3, r2
 801935e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8019360:	9330      	str	r3, [sp, #192]	; 0xc0
 8019362:	f022 020f 	bic.w	r2, r2, #15
 8019366:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019368:	3314      	adds	r3, #20
 801936a:	4413      	add	r3, r2
 801936c:	9312      	str	r3, [sp, #72]	; 0x48
 801936e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019370:	9305      	str	r3, [sp, #20]
 8019372:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019374:	9326      	str	r3, [sp, #152]	; 0x98
 8019376:	9b54      	ldr	r3, [sp, #336]	; 0x150
 8019378:	3301      	adds	r3, #1
 801937a:	9347      	str	r3, [sp, #284]	; 0x11c
 801937c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801937e:	2b00      	cmp	r3, #0
 8019380:	f340 81ca 	ble.w	8019718 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x558>
 8019384:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8019386:	1c5a      	adds	r2, r3, #1
 8019388:	9216      	str	r2, [sp, #88]	; 0x58
 801938a:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 801938c:	4413      	add	r3, r2
 801938e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8019390:	9315      	str	r3, [sp, #84]	; 0x54
 8019392:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019394:	4413      	add	r3, r2
 8019396:	9317      	str	r3, [sp, #92]	; 0x5c
 8019398:	2300      	movs	r3, #0
 801939a:	9318      	str	r3, [sp, #96]	; 0x60
 801939c:	9b06      	ldr	r3, [sp, #24]
 801939e:	3b03      	subs	r3, #3
 80193a0:	930c      	str	r3, [sp, #48]	; 0x30
 80193a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80193a4:	f8dd b05c 	ldr.w	fp, [sp, #92]	; 0x5c
 80193a8:	2b00      	cmp	r3, #0
 80193aa:	f000 82f0 	beq.w	801998e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x7ce>
 80193ae:	2100      	movs	r1, #0
 80193b0:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
 80193b2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80193b4:	9105      	str	r1, [sp, #20]
 80193b6:	9914      	ldr	r1, [sp, #80]	; 0x50
 80193b8:	4692      	mov	sl, r2
 80193ba:	9304      	str	r3, [sp, #16]
 80193bc:	3104      	adds	r1, #4
 80193be:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80193c0:	910d      	str	r1, [sp, #52]	; 0x34
 80193c2:	469c      	mov	ip, r3
 80193c4:	9906      	ldr	r1, [sp, #24]
 80193c6:	3904      	subs	r1, #4
 80193c8:	910e      	str	r1, [sp, #56]	; 0x38
 80193ca:	990a      	ldr	r1, [sp, #40]	; 0x28
 80193cc:	2900      	cmp	r1, #0
 80193ce:	f340 8272 	ble.w	80198b6 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6f6>
 80193d2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80193d4:	f8cd b01c 	str.w	fp, [sp, #28]
 80193d8:	eb0b 0501 	add.w	r5, fp, r1
 80193dc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80193de:	9c04      	ldr	r4, [sp, #16]
 80193e0:	4459      	add	r1, fp
 80193e2:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 80193e6:	9103      	str	r1, [sp, #12]
 80193e8:	f85b 6005 	ldr.w	r6, [fp, r5]
 80193ec:	eb0b 0705 	add.w	r7, fp, r5
 80193f0:	6821      	ldr	r1, [r4, #0]
 80193f2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80193f6:	f8d4 9008 	ldr.w	r9, [r4, #8]
 80193fa:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 80193fe:	fa2f f086 	sxtb16	r0, r6
 8019402:	fa2f f696 	sxtb16	r6, r6, ror #8
 8019406:	fb20 2201 	smlad	r2, r0, r1, r2
 801940a:	fb26 2208 	smlad	r2, r6, r8, r2
 801940e:	fb20 3009 	smlad	r0, r0, r9, r3
 8019412:	fb26 000e 	smlad	r0, r6, lr, r0
 8019416:	f855 3c04 	ldr.w	r3, [r5, #-4]
 801941a:	fa2f f683 	sxtb16	r6, r3
 801941e:	fa2f f393 	sxtb16	r3, r3, ror #8
 8019422:	fb26 a101 	smlad	r1, r6, r1, sl
 8019426:	fb26 cc09 	smlad	ip, r6, r9, ip
 801942a:	fb23 1108 	smlad	r1, r3, r8, r1
 801942e:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8019432:	f8d4 a014 	ldr.w	sl, [r4, #20]
 8019436:	fb23 ce0e 	smlad	lr, r3, lr, ip
 801943a:	f8d7 c004 	ldr.w	ip, [r7, #4]
 801943e:	69a3      	ldr	r3, [r4, #24]
 8019440:	f8d4 901c 	ldr.w	r9, [r4, #28]
 8019444:	fa2f f68c 	sxtb16	r6, ip
 8019448:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 801944c:	fb26 2208 	smlad	r2, r6, r8, r2
 8019450:	fb2c 220a 	smlad	r2, ip, sl, r2
 8019454:	fb26 0603 	smlad	r6, r6, r3, r0
 8019458:	fb2c 6609 	smlad	r6, ip, r9, r6
 801945c:	6828      	ldr	r0, [r5, #0]
 801945e:	fa2f fc80 	sxtb16	ip, r0
 8019462:	fa2f f090 	sxtb16	r0, r0, ror #8
 8019466:	fb2c 1808 	smlad	r8, ip, r8, r1
 801946a:	fb2c ee03 	smlad	lr, ip, r3, lr
 801946e:	fb20 880a 	smlad	r8, r0, sl, r8
 8019472:	f8d4 a020 	ldr.w	sl, [r4, #32]
 8019476:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019478:	fb20 e909 	smlad	r9, r0, r9, lr
 801947c:	68b9      	ldr	r1, [r7, #8]
 801947e:	f8d4 e028 	ldr.w	lr, [r4, #40]	; 0x28
 8019482:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8019484:	fa2f fc81 	sxtb16	ip, r1
 8019488:	fa2f f191 	sxtb16	r1, r1, ror #8
 801948c:	fb2c 220a 	smlad	r2, ip, sl, r2
 8019490:	fb21 2203 	smlad	r2, r1, r3, r2
 8019494:	fb2c 6c0e 	smlad	ip, ip, lr, r6
 8019498:	fb21 c100 	smlad	r1, r1, r0, ip
 801949c:	686e      	ldr	r6, [r5, #4]
 801949e:	fa2f fc86 	sxtb16	ip, r6
 80194a2:	fa2f f696 	sxtb16	r6, r6, ror #8
 80194a6:	fb2c 8a0a 	smlad	sl, ip, sl, r8
 80194aa:	fb2c 990e 	smlad	r9, ip, lr, r9
 80194ae:	fb26 a803 	smlad	r8, r6, r3, sl
 80194b2:	f8d4 e030 	ldr.w	lr, [r4, #48]	; 0x30
 80194b6:	f8d4 a034 	ldr.w	sl, [r4, #52]	; 0x34
 80194ba:	fb26 9000 	smlad	r0, r6, r0, r9
 80194be:	68fb      	ldr	r3, [r7, #12]
 80194c0:	3440      	adds	r4, #64	; 0x40
 80194c2:	f854 9c08 	ldr.w	r9, [r4, #-8]
 80194c6:	f854 7c04 	ldr.w	r7, [r4, #-4]
 80194ca:	fa2f fc83 	sxtb16	ip, r3
 80194ce:	fa2f f393 	sxtb16	r3, r3, ror #8
 80194d2:	fb2c 220e 	smlad	r2, ip, lr, r2
 80194d6:	fb23 220a 	smlad	r2, r3, sl, r2
 80194da:	fb2c 1109 	smlad	r1, ip, r9, r1
 80194de:	fb23 1307 	smlad	r3, r3, r7, r1
 80194e2:	f8d5 c008 	ldr.w	ip, [r5, #8]
 80194e6:	fa2f f18c 	sxtb16	r1, ip
 80194ea:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 80194ee:	fb21 880e 	smlad	r8, r1, lr, r8
 80194f2:	fb21 0009 	smlad	r0, r1, r9, r0
 80194f6:	fb2c 8a0a 	smlad	sl, ip, sl, r8
 80194fa:	fb2c 0c07 	smlad	ip, ip, r7, r0
 80194fe:	3510      	adds	r5, #16
 8019500:	9903      	ldr	r1, [sp, #12]
 8019502:	428d      	cmp	r5, r1
 8019504:	f47f af70 	bne.w	80193e8 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x228>
 8019508:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801950a:	9804      	ldr	r0, [sp, #16]
 801950c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8019510:	4689      	mov	r9, r1
 8019512:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019514:	448b      	add	fp, r1
 8019516:	4420      	add	r0, r4
 8019518:	9004      	str	r0, [sp, #16]
 801951a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801951c:	4589      	cmp	r9, r1
 801951e:	f280 81c8 	bge.w	80198b2 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6f2>
 8019522:	990e      	ldr	r1, [sp, #56]	; 0x38
 8019524:	f8cd 9020 	str.w	r9, [sp, #32]
 8019528:	eba1 0109 	sub.w	r1, r1, r9
 801952c:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 8019530:	0889      	lsrs	r1, r1, #2
 8019532:	4608      	mov	r0, r1
 8019534:	9107      	str	r1, [sp, #28]
 8019536:	9904      	ldr	r1, [sp, #16]
 8019538:	3001      	adds	r0, #1
 801953a:	eb0b 0880 	add.w	r8, fp, r0, lsl #2
 801953e:	9003      	str	r0, [sp, #12]
 8019540:	f8d1 e000 	ldr.w	lr, [r1]
 8019544:	3110      	adds	r1, #16
 8019546:	f85b 0b04 	ldr.w	r0, [fp], #4
 801954a:	f851 6c0c 	ldr.w	r6, [r1, #-12]
 801954e:	f851 7c08 	ldr.w	r7, [r1, #-8]
 8019552:	f851 5c04 	ldr.w	r5, [r1, #-4]
 8019556:	fa2f f480 	sxtb16	r4, r0
 801955a:	fa2f f090 	sxtb16	r0, r0, ror #8
 801955e:	fb24 220e 	smlad	r2, r4, lr, r2
 8019562:	fb20 2206 	smlad	r2, r0, r6, r2
 8019566:	fb24 3307 	smlad	r3, r4, r7, r3
 801956a:	fb20 3305 	smlad	r3, r0, r5, r3
 801956e:	f85b 0009 	ldr.w	r0, [fp, r9]
 8019572:	fa2f f480 	sxtb16	r4, r0
 8019576:	fa2f f090 	sxtb16	r0, r0, ror #8
 801957a:	fb24 aa0e 	smlad	sl, r4, lr, sl
 801957e:	fb24 cc07 	smlad	ip, r4, r7, ip
 8019582:	fb20 aa06 	smlad	sl, r0, r6, sl
 8019586:	fb20 cc05 	smlad	ip, r0, r5, ip
 801958a:	45c3      	cmp	fp, r8
 801958c:	d1d8      	bne.n	8019540 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x380>
 801958e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019592:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
 8019596:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 801959a:	9807      	ldr	r0, [sp, #28]
 801959c:	9104      	str	r1, [sp, #16]
 801959e:	f109 0104 	add.w	r1, r9, #4
 80195a2:	eb01 0980 	add.w	r9, r1, r0, lsl #2
 80195a6:	9e06      	ldr	r6, [sp, #24]
 80195a8:	454e      	cmp	r6, r9
 80195aa:	dd59      	ble.n	8019660 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x4a0>
 80195ac:	9d04      	ldr	r5, [sp, #16]
 80195ae:	f998 1000 	ldrsb.w	r1, [r8]
 80195b2:	f9b5 4000 	ldrsh.w	r4, [r5]
 80195b6:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
 80195ba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80195bc:	fb14 2201 	smlabb	r2, r4, r1, r2
 80195c0:	fb10 3301 	smlabb	r3, r0, r1, r3
 80195c4:	f918 1007 	ldrsb.w	r1, [r8, r7]
 80195c8:	fb14 aa01 	smlabb	sl, r4, r1, sl
 80195cc:	fb10 cc01 	smlabb	ip, r0, r1, ip
 80195d0:	f109 0101 	add.w	r1, r9, #1
 80195d4:	42b1      	cmp	r1, r6
 80195d6:	da3b      	bge.n	8019650 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x490>
 80195d8:	eb08 0107 	add.w	r1, r8, r7
 80195dc:	f9b5 0006 	ldrsh.w	r0, [r5, #6]
 80195e0:	f9b5 4004 	ldrsh.w	r4, [r5, #4]
 80195e4:	f991 1001 	ldrsb.w	r1, [r1, #1]
 80195e8:	fb10 cc01 	smlabb	ip, r0, r1, ip
 80195ec:	fb14 aa01 	smlabb	sl, r4, r1, sl
 80195f0:	f998 1001 	ldrsb.w	r1, [r8, #1]
 80195f4:	fb10 3301 	smlabb	r3, r0, r1, r3
 80195f8:	f108 0002 	add.w	r0, r8, #2
 80195fc:	fb14 2201 	smlabb	r2, r4, r1, r2
 8019600:	f109 0102 	add.w	r1, r9, #2
 8019604:	42b1      	cmp	r1, r6
 8019606:	da23      	bge.n	8019650 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x490>
 8019608:	57c1      	ldrsb	r1, [r0, r7]
 801960a:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
 801960e:	f9b5 000a 	ldrsh.w	r0, [r5, #10]
 8019612:	fb14 aa01 	smlabb	sl, r4, r1, sl
 8019616:	fb10 cc01 	smlabb	ip, r0, r1, ip
 801961a:	f998 1002 	ldrsb.w	r1, [r8, #2]
 801961e:	fb10 3301 	smlabb	r3, r0, r1, r3
 8019622:	f108 0003 	add.w	r0, r8, #3
 8019626:	fb14 2201 	smlabb	r2, r4, r1, r2
 801962a:	f109 0103 	add.w	r1, r9, #3
 801962e:	42b1      	cmp	r1, r6
 8019630:	da0e      	bge.n	8019650 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x490>
 8019632:	57c1      	ldrsb	r1, [r0, r7]
 8019634:	f9b5 400c 	ldrsh.w	r4, [r5, #12]
 8019638:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
 801963c:	fb14 aa01 	smlabb	sl, r4, r1, sl
 8019640:	fb10 cc01 	smlabb	ip, r0, r1, ip
 8019644:	f998 1003 	ldrsb.w	r1, [r8, #3]
 8019648:	fb14 2201 	smlabb	r2, r4, r1, r2
 801964c:	fb10 3301 	smlabb	r3, r0, r1, r3
 8019650:	9906      	ldr	r1, [sp, #24]
 8019652:	9804      	ldr	r0, [sp, #16]
 8019654:	eba1 0109 	sub.w	r1, r1, r9
 8019658:	4488      	add	r8, r1
 801965a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801965e:	9104      	str	r1, [sp, #16]
 8019660:	9905      	ldr	r1, [sp, #20]
 8019662:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8019664:	3101      	adds	r1, #1
 8019666:	eb08 0b00 	add.w	fp, r8, r0
 801966a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801966c:	9105      	str	r1, [sp, #20]
 801966e:	4288      	cmp	r0, r1
 8019670:	f47f aeab 	bne.w	80193ca <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x20a>
 8019674:	461c      	mov	r4, r3
 8019676:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019678:	2b00      	cmp	r3, #0
 801967a:	f040 813a 	bne.w	80198f2 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x732>
 801967e:	9924      	ldr	r1, [sp, #144]	; 0x90
 8019680:	0052      	lsls	r2, r2, #1
 8019682:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8019684:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8019688:	fb52 1203 	smmla	r2, r2, r3, r1
 801968c:	fb5a 1a03 	smmla	sl, sl, r3, r1
 8019690:	9920      	ldr	r1, [sp, #128]	; 0x80
 8019692:	410a      	asrs	r2, r1
 8019694:	f302 0307 	ssat	r3, #8, r2
 8019698:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801969a:	fa4a fa01 	asr.w	sl, sl, r1
 801969e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80196a2:	f30a 0307 	ssat	r3, #8, sl
 80196a6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80196a8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80196ac:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80196ae:	2b00      	cmp	r3, #0
 80196b0:	f040 8104 	bne.w	80198bc <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6fc>
 80196b4:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80196b6:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 80196ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80196bc:	ea4f 044c 	mov.w	r4, ip, lsl #1
 80196c0:	fb5e 2e03 	smmla	lr, lr, r3, r2
 80196c4:	fb54 2403 	smmla	r4, r4, r3, r2
 80196c8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80196ca:	fa4e fe02 	asr.w	lr, lr, r2
 80196ce:	f30e 0307 	ssat	r3, #8, lr
 80196d2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80196d4:	4114      	asrs	r4, r2
 80196d6:	700b      	strb	r3, [r1, #0]
 80196d8:	f304 0307 	ssat	r3, #8, r4
 80196dc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80196de:	7013      	strb	r3, [r2, #0]
 80196e0:	460a      	mov	r2, r1
 80196e2:	9921      	ldr	r1, [sp, #132]	; 0x84
 80196e4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80196e6:	440a      	add	r2, r1
 80196e8:	3302      	adds	r3, #2
 80196ea:	9216      	str	r2, [sp, #88]	; 0x58
 80196ec:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80196ee:	9318      	str	r3, [sp, #96]	; 0x60
 80196f0:	440a      	add	r2, r1
 80196f2:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80196f4:	9215      	str	r2, [sp, #84]	; 0x54
 80196f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80196f8:	440a      	add	r2, r1
 80196fa:	9217      	str	r2, [sp, #92]	; 0x5c
 80196fc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80196fe:	4293      	cmp	r3, r2
 8019700:	f6ff ae4f 	blt.w	80193a2 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x1e2>
 8019704:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8019706:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8019708:	4413      	add	r3, r2
 801970a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801970c:	9326      	str	r3, [sp, #152]	; 0x98
 801970e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8019710:	4413      	add	r3, r2
 8019712:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8019714:	18d3      	adds	r3, r2, r3
 8019716:	9305      	str	r3, [sp, #20]
 8019718:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 801971a:	2b00      	cmp	r3, #0
 801971c:	f040 813d 	bne.w	801999a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x7da>
 8019720:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8019722:	993e      	ldr	r1, [sp, #248]	; 0xf8
 8019724:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8019726:	440a      	add	r2, r1
 8019728:	3301      	adds	r3, #1
 801972a:	922a      	str	r2, [sp, #168]	; 0xa8
 801972c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801972e:	9335      	str	r3, [sp, #212]	; 0xd4
 8019730:	4293      	cmp	r3, r2
 8019732:	f47f ae23 	bne.w	801937c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x1bc>
 8019736:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8019738:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 801973a:	4413      	add	r3, r2
 801973c:	9332      	str	r3, [sp, #200]	; 0xc8
 801973e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019740:	3302      	adds	r3, #2
 8019742:	9329      	str	r3, [sp, #164]	; 0xa4
 8019744:	9b60      	ldr	r3, [sp, #384]	; 0x180
 8019746:	b11b      	cbz	r3, 8019750 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x590>
 8019748:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
 801974a:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 801974c:	4413      	add	r3, r2
 801974e:	935f      	str	r3, [sp, #380]	; 0x17c
 8019750:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8019752:	9a44      	ldr	r2, [sp, #272]	; 0x110
 8019754:	3304      	adds	r3, #4
 8019756:	932b      	str	r3, [sp, #172]	; 0xac
 8019758:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801975a:	3308      	adds	r3, #8
 801975c:	9327      	str	r3, [sp, #156]	; 0x9c
 801975e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019760:	3308      	adds	r3, #8
 8019762:	9328      	str	r3, [sp, #160]	; 0xa0
 8019764:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8019766:	3308      	adds	r3, #8
 8019768:	9333      	str	r3, [sp, #204]	; 0xcc
 801976a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801976c:	4293      	cmp	r3, r2
 801976e:	f47f adaf 	bne.w	80192d0 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x110>
 8019772:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8019774:	e9dd 2138 	ldrd	r2, r1, [sp, #224]	; 0xe0
 8019778:	fb01 3302 	mla	r3, r1, r2, r3
 801977c:	9334      	str	r3, [sp, #208]	; 0xd0
 801977e:	9b54      	ldr	r3, [sp, #336]	; 0x150
 8019780:	07db      	lsls	r3, r3, #31
 8019782:	f140 8092 	bpl.w	80198aa <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6ea>
 8019786:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8019788:	2b00      	cmp	r3, #0
 801978a:	f000 808e 	beq.w	80198aa <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6ea>
 801978e:	9b54      	ldr	r3, [sp, #336]	; 0x150
 8019790:	f06f 4940 	mvn.w	r9, #3221225472	; 0xc0000000
 8019794:	9a54      	ldr	r2, [sp, #336]	; 0x150
 8019796:	4499      	add	r9, r3
 8019798:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801979a:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 801979e:	9307      	str	r3, [sp, #28]
 80197a0:	9b52      	ldr	r3, [sp, #328]	; 0x148
 80197a2:	eb03 0a89 	add.w	sl, r3, r9, lsl #2
 80197a6:	9b5e      	ldr	r3, [sp, #376]	; 0x178
 80197a8:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 80197ac:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80197b0:	4413      	add	r3, r2
 80197b2:	9a53      	ldr	r2, [sp, #332]	; 0x14c
 80197b4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80197b8:	9308      	str	r3, [sp, #32]
 80197ba:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80197bc:	2b00      	cmp	r3, #0
 80197be:	d074      	beq.n	80198aa <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6ea>
 80197c0:	9955      	ldr	r1, [sp, #340]	; 0x154
 80197c2:	9a46      	ldr	r2, [sp, #280]	; 0x118
 80197c4:	9e5d      	ldr	r6, [sp, #372]	; 0x174
 80197c6:	fb01 f202 	mul.w	r2, r1, r2
 80197ca:	992e      	ldr	r1, [sp, #184]	; 0xb8
 80197cc:	920b      	str	r2, [sp, #44]	; 0x2c
 80197ce:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 80197d0:	fb01 f202 	mul.w	r2, r1, r2
 80197d4:	9906      	ldr	r1, [sp, #24]
 80197d6:	920a      	str	r2, [sp, #40]	; 0x28
 80197d8:	468e      	mov	lr, r1
 80197da:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80197dc:	440a      	add	r2, r1
 80197de:	4693      	mov	fp, r2
 80197e0:	9a54      	ldr	r2, [sp, #336]	; 0x150
 80197e2:	fb02 f303 	mul.w	r3, r2, r3
 80197e6:	9306      	str	r3, [sp, #24]
 80197e8:	2300      	movs	r3, #0
 80197ea:	9304      	str	r3, [sp, #16]
 80197ec:	2300      	movs	r3, #0
 80197ee:	f8cd b00c 	str.w	fp, [sp, #12]
 80197f2:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80197f6:	f8dd 80a4 	ldr.w	r8, [sp, #164]	; 0xa4
 80197fa:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80197fe:	9305      	str	r3, [sp, #20]
 8019800:	9b07      	ldr	r3, [sp, #28]
 8019802:	6819      	ldr	r1, [r3, #0]
 8019804:	f1bb 0f00 	cmp.w	fp, #0
 8019808:	d01e      	beq.n	8019848 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x688>
 801980a:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 801980e:	2700      	movs	r7, #0
 8019810:	9d03      	ldr	r5, [sp, #12]
 8019812:	f8dd c0d0 	ldr.w	ip, [sp, #208]	; 0xd0
 8019816:	f8dd 80b8 	ldr.w	r8, [sp, #184]	; 0xb8
 801981a:	f1be 0f00 	cmp.w	lr, #0
 801981e:	eba5 020e 	sub.w	r2, r5, lr
 8019822:	dd0b      	ble.n	801983c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x67c>
 8019824:	f10c 30ff 	add.w	r0, ip, #4294967295
 8019828:	f912 3b01 	ldrsb.w	r3, [r2], #1
 801982c:	f910 4f01 	ldrsb.w	r4, [r0, #1]!
 8019830:	1b9b      	subs	r3, r3, r6
 8019832:	42aa      	cmp	r2, r5
 8019834:	fb04 1103 	mla	r1, r4, r3, r1
 8019838:	d1f6      	bne.n	8019828 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x668>
 801983a:	44f4      	add	ip, lr
 801983c:	3701      	adds	r7, #1
 801983e:	4445      	add	r5, r8
 8019840:	45bb      	cmp	fp, r7
 8019842:	d1ea      	bne.n	801981a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x65a>
 8019844:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8019848:	9b08      	ldr	r3, [sp, #32]
 801984a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801984e:	2815      	cmp	r0, #21
 8019850:	f340 8291 	ble.w	8019d76 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xbb6>
 8019854:	1e83      	subs	r3, r0, #2
 8019856:	1e42      	subs	r2, r0, #1
 8019858:	2001      	movs	r0, #1
 801985a:	4098      	lsls	r0, r3
 801985c:	f8da 3000 	ldr.w	r3, [sl]
 8019860:	fb51 0303 	smmla	r3, r1, r3, r0
 8019864:	fa43 f202 	asr.w	r2, r3, r2
 8019868:	f8d9 3000 	ldr.w	r3, [r9]
 801986c:	4413      	add	r3, r2
 801986e:	f303 0307 	ssat	r3, #8, r3
 8019872:	f888 3000 	strb.w	r3, [r8]
 8019876:	9a54      	ldr	r2, [sp, #336]	; 0x150
 8019878:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801987a:	4490      	add	r8, r2
 801987c:	9a03      	ldr	r2, [sp, #12]
 801987e:	9b05      	ldr	r3, [sp, #20]
 8019880:	440a      	add	r2, r1
 8019882:	3301      	adds	r3, #1
 8019884:	9203      	str	r2, [sp, #12]
 8019886:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8019888:	9305      	str	r3, [sp, #20]
 801988a:	4293      	cmp	r3, r2
 801988c:	d1b8      	bne.n	8019800 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x640>
 801988e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8019890:	9906      	ldr	r1, [sp, #24]
 8019892:	9b04      	ldr	r3, [sp, #16]
 8019894:	440a      	add	r2, r1
 8019896:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 801989a:	3301      	adds	r3, #1
 801989c:	9229      	str	r2, [sp, #164]	; 0xa4
 801989e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80198a0:	9304      	str	r3, [sp, #16]
 80198a2:	4493      	add	fp, r2
 80198a4:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80198a6:	4293      	cmp	r3, r2
 80198a8:	d1a0      	bne.n	80197ec <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x62c>
 80198aa:	2000      	movs	r0, #0
 80198ac:	b049      	add	sp, #292	; 0x124
 80198ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198b2:	46d8      	mov	r8, fp
 80198b4:	e677      	b.n	80195a6 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x3e6>
 80198b6:	f04f 0900 	mov.w	r9, #0
 80198ba:	e62e      	b.n	801951a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x35a>
 80198bc:	3301      	adds	r3, #1
 80198be:	d034      	beq.n	801992a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x76a>
 80198c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80198c2:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80198c4:	fb54 2e03 	smmla	lr, r4, r3, r2
 80198c8:	fb5c 2403 	smmla	r4, ip, r3, r2
 80198cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80198ce:	9925      	ldr	r1, [sp, #148]	; 0x94
 80198d0:	3b01      	subs	r3, #1
 80198d2:	fa4e f203 	asr.w	r2, lr, r3
 80198d6:	440a      	add	r2, r1
 80198d8:	f302 0207 	ssat	r2, #8, r2
 80198dc:	fa44 f303 	asr.w	r3, r4, r3
 80198e0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80198e2:	440b      	add	r3, r1
 80198e4:	7002      	strb	r2, [r0, #0]
 80198e6:	f303 0307 	ssat	r3, #8, r3
 80198ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80198ec:	7013      	strb	r3, [r2, #0]
 80198ee:	4602      	mov	r2, r0
 80198f0:	e6f7      	b.n	80196e2 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x522>
 80198f2:	3301      	adds	r3, #1
 80198f4:	d02e      	beq.n	8019954 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x794>
 80198f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80198f8:	992f      	ldr	r1, [sp, #188]	; 0xbc
 80198fa:	fb52 1203 	smmla	r2, r2, r3, r1
 80198fe:	fb5a 1a03 	smmla	sl, sl, r3, r1
 8019902:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019904:	9924      	ldr	r1, [sp, #144]	; 0x90
 8019906:	3b01      	subs	r3, #1
 8019908:	411a      	asrs	r2, r3
 801990a:	440a      	add	r2, r1
 801990c:	f302 0207 	ssat	r2, #8, r2
 8019910:	fa4a fa03 	asr.w	sl, sl, r3
 8019914:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8019916:	f803 2c01 	strb.w	r2, [r3, #-1]
 801991a:	eb0a 0301 	add.w	r3, sl, r1
 801991e:	f303 0307 	ssat	r3, #8, r3
 8019922:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8019924:	f802 3c01 	strb.w	r3, [r2, #-1]
 8019928:	e6c0      	b.n	80196ac <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x4ec>
 801992a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801992c:	4622      	mov	r2, r4
 801992e:	f1c3 0301 	rsb	r3, r3, #1
 8019932:	409a      	lsls	r2, r3
 8019934:	f302 021f 	ssat	r2, #32, r2
 8019938:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801993a:	fb52 f211 	smmulr	r2, r2, r1
 801993e:	fa0c f303 	lsl.w	r3, ip, r3
 8019942:	f303 031f 	ssat	r3, #32, r3
 8019946:	fb53 f311 	smmulr	r3, r3, r1
 801994a:	9925      	ldr	r1, [sp, #148]	; 0x94
 801994c:	440a      	add	r2, r1
 801994e:	f302 0207 	ssat	r2, #8, r2
 8019952:	e7c5      	b.n	80198e0 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x720>
 8019954:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019956:	f1c3 0301 	rsb	r3, r3, #1
 801995a:	409a      	lsls	r2, r3
 801995c:	f302 021f 	ssat	r2, #32, r2
 8019960:	9922      	ldr	r1, [sp, #136]	; 0x88
 8019962:	fb52 f211 	smmulr	r2, r2, r1
 8019966:	fa0a f303 	lsl.w	r3, sl, r3
 801996a:	f303 031f 	ssat	r3, #32, r3
 801996e:	fb53 f311 	smmulr	r3, r3, r1
 8019972:	9924      	ldr	r1, [sp, #144]	; 0x90
 8019974:	440a      	add	r2, r1
 8019976:	f302 0207 	ssat	r2, #8, r2
 801997a:	9816      	ldr	r0, [sp, #88]	; 0x58
 801997c:	440b      	add	r3, r1
 801997e:	f800 2c01 	strb.w	r2, [r0, #-1]
 8019982:	f303 0307 	ssat	r3, #8, r3
 8019986:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8019988:	f802 3c01 	strb.w	r3, [r2, #-1]
 801998c:	e68e      	b.n	80196ac <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x4ec>
 801998e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019990:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8019992:	469c      	mov	ip, r3
 8019994:	461c      	mov	r4, r3
 8019996:	4692      	mov	sl, r2
 8019998:	e66d      	b.n	8019676 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x4b6>
 801999a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801999c:	2b01      	cmp	r3, #1
 801999e:	f000 8143 	beq.w	8019c28 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa68>
 80199a2:	9b05      	ldr	r3, [sp, #20]
 80199a4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80199a6:	4413      	add	r3, r2
 80199a8:	9305      	str	r3, [sp, #20]
 80199aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80199ac:	2b00      	cmp	r3, #0
 80199ae:	f000 8143 	beq.w	8019c38 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa78>
 80199b2:	9b06      	ldr	r3, [sp, #24]
 80199b4:	f8dd 917c 	ldr.w	r9, [sp, #380]	; 0x17c
 80199b8:	1eda      	subs	r2, r3, #3
 80199ba:	3b04      	subs	r3, #4
 80199bc:	9208      	str	r2, [sp, #32]
 80199be:	9a05      	ldr	r2, [sp, #20]
 80199c0:	930c      	str	r3, [sp, #48]	; 0x30
 80199c2:	9203      	str	r2, [sp, #12]
 80199c4:	2200      	movs	r2, #0
 80199c6:	e9dd ab1b 	ldrd	sl, fp, [sp, #108]	; 0x6c
 80199ca:	9204      	str	r2, [sp, #16]
 80199cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80199ce:	9a03      	ldr	r2, [sp, #12]
 80199d0:	2b00      	cmp	r3, #0
 80199d2:	4611      	mov	r1, r2
 80199d4:	f340 80ff 	ble.w	8019bd6 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa16>
 80199d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80199da:	464b      	mov	r3, r9
 80199dc:	188f      	adds	r7, r1, r2
 80199de:	6808      	ldr	r0, [r1, #0]
 80199e0:	fa2f f280 	sxtb16	r2, r0
 80199e4:	fa2f f090 	sxtb16	r0, r0, ror #8
 80199e8:	681c      	ldr	r4, [r3, #0]
 80199ea:	fb22 a404 	smlad	r4, r2, r4, sl
 80199ee:	685d      	ldr	r5, [r3, #4]
 80199f0:	fb20 4605 	smlad	r6, r0, r5, r4
 80199f4:	689c      	ldr	r4, [r3, #8]
 80199f6:	fb22 b204 	smlad	r2, r2, r4, fp
 80199fa:	68dc      	ldr	r4, [r3, #12]
 80199fc:	fb20 2004 	smlad	r0, r0, r4, r2
 8019a00:	684a      	ldr	r2, [r1, #4]
 8019a02:	fa2f f482 	sxtb16	r4, r2
 8019a06:	fa2f f292 	sxtb16	r2, r2, ror #8
 8019a0a:	691d      	ldr	r5, [r3, #16]
 8019a0c:	fb24 6505 	smlad	r5, r4, r5, r6
 8019a10:	695e      	ldr	r6, [r3, #20]
 8019a12:	fb22 5506 	smlad	r5, r2, r6, r5
 8019a16:	699e      	ldr	r6, [r3, #24]
 8019a18:	fb24 0006 	smlad	r0, r4, r6, r0
 8019a1c:	69dc      	ldr	r4, [r3, #28]
 8019a1e:	fb22 0204 	smlad	r2, r2, r4, r0
 8019a22:	688e      	ldr	r6, [r1, #8]
 8019a24:	fa2f f086 	sxtb16	r0, r6
 8019a28:	fa2f f696 	sxtb16	r6, r6, ror #8
 8019a2c:	6a1c      	ldr	r4, [r3, #32]
 8019a2e:	fb20 5404 	smlad	r4, r0, r4, r5
 8019a32:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8019a34:	fb26 4505 	smlad	r5, r6, r5, r4
 8019a38:	f8d3 b028 	ldr.w	fp, [r3, #40]	; 0x28
 8019a3c:	fb20 200b 	smlad	r0, r0, fp, r2
 8019a40:	f8d3 b02c 	ldr.w	fp, [r3, #44]	; 0x2c
 8019a44:	fb26 000b 	smlad	r0, r6, fp, r0
 8019a48:	68ca      	ldr	r2, [r1, #12]
 8019a4a:	3340      	adds	r3, #64	; 0x40
 8019a4c:	f853 4c10 	ldr.w	r4, [r3, #-16]
 8019a50:	3110      	adds	r1, #16
 8019a52:	f853 ac0c 	ldr.w	sl, [r3, #-12]
 8019a56:	f853 cc08 	ldr.w	ip, [r3, #-8]
 8019a5a:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8019a5e:	fa2f fb82 	sxtb16	fp, r2
 8019a62:	fa2f f292 	sxtb16	r2, r2, ror #8
 8019a66:	fb2b 5404 	smlad	r4, fp, r4, r5
 8019a6a:	fb22 4a0a 	smlad	sl, r2, sl, r4
 8019a6e:	fb2b 0b0c 	smlad	fp, fp, ip, r0
 8019a72:	fb22 bb06 	smlad	fp, r2, r6, fp
 8019a76:	428f      	cmp	r7, r1
 8019a78:	d1b1      	bne.n	80199de <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x81e>
 8019a7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019a7c:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
 8019a80:	4499      	add	r9, r3
 8019a82:	9b08      	ldr	r3, [sp, #32]
 8019a84:	459e      	cmp	lr, r3
 8019a86:	f280 80a4 	bge.w	8019bd2 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa12>
 8019a8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019a8c:	4648      	mov	r0, r9
 8019a8e:	eba3 080e 	sub.w	r8, r3, lr
 8019a92:	ea4f 0898 	mov.w	r8, r8, lsr #2
 8019a96:	f108 0301 	add.w	r3, r8, #1
 8019a9a:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
 8019a9e:	9307      	str	r3, [sp, #28]
 8019aa0:	6804      	ldr	r4, [r0, #0]
 8019aa2:	3010      	adds	r0, #16
 8019aa4:	f851 3b04 	ldr.w	r3, [r1], #4
 8019aa8:	f850 7c0c 	ldr.w	r7, [r0, #-12]
 8019aac:	f850 6c08 	ldr.w	r6, [r0, #-8]
 8019ab0:	f850 5c04 	ldr.w	r5, [r0, #-4]
 8019ab4:	fa2f f283 	sxtb16	r2, r3
 8019ab8:	fa2f f393 	sxtb16	r3, r3, ror #8
 8019abc:	fb22 a404 	smlad	r4, r2, r4, sl
 8019ac0:	fb23 4a07 	smlad	sl, r3, r7, r4
 8019ac4:	fb22 b206 	smlad	r2, r2, r6, fp
 8019ac8:	fb23 2b05 	smlad	fp, r3, r5, r2
 8019acc:	4561      	cmp	r1, ip
 8019ace:	d1e7      	bne.n	8019aa0 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x8e0>
 8019ad0:	9b07      	ldr	r3, [sp, #28]
 8019ad2:	f10e 0e04 	add.w	lr, lr, #4
 8019ad6:	eb09 1903 	add.w	r9, r9, r3, lsl #4
 8019ada:	eb0e 0e88 	add.w	lr, lr, r8, lsl #2
 8019ade:	9906      	ldr	r1, [sp, #24]
 8019ae0:	4571      	cmp	r1, lr
 8019ae2:	dd38      	ble.n	8019b56 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x996>
 8019ae4:	f99c 3000 	ldrsb.w	r3, [ip]
 8019ae8:	f8b9 2000 	ldrh.w	r2, [r9]
 8019aec:	fb12 aa03 	smlabb	sl, r2, r3, sl
 8019af0:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 8019af4:	fb12 bb03 	smlabb	fp, r2, r3, fp
 8019af8:	f10e 0301 	add.w	r3, lr, #1
 8019afc:	4299      	cmp	r1, r3
 8019afe:	dd25      	ble.n	8019b4c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x98c>
 8019b00:	f99c 3001 	ldrsb.w	r3, [ip, #1]
 8019b04:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 8019b08:	fb12 aa03 	smlabb	sl, r2, r3, sl
 8019b0c:	f8b9 2006 	ldrh.w	r2, [r9, #6]
 8019b10:	fb12 bb03 	smlabb	fp, r2, r3, fp
 8019b14:	f10e 0302 	add.w	r3, lr, #2
 8019b18:	4299      	cmp	r1, r3
 8019b1a:	dd17      	ble.n	8019b4c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x98c>
 8019b1c:	f99c 3002 	ldrsb.w	r3, [ip, #2]
 8019b20:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 8019b24:	fb12 aa03 	smlabb	sl, r2, r3, sl
 8019b28:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 8019b2c:	fb12 bb03 	smlabb	fp, r2, r3, fp
 8019b30:	f10e 0303 	add.w	r3, lr, #3
 8019b34:	4299      	cmp	r1, r3
 8019b36:	dd09      	ble.n	8019b4c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x98c>
 8019b38:	f99c 3003 	ldrsb.w	r3, [ip, #3]
 8019b3c:	f8b9 200c 	ldrh.w	r2, [r9, #12]
 8019b40:	fb12 aa03 	smlabb	sl, r2, r3, sl
 8019b44:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 8019b48:	fb12 bb03 	smlabb	fp, r2, r3, fp
 8019b4c:	9b06      	ldr	r3, [sp, #24]
 8019b4e:	eba3 0e0e 	sub.w	lr, r3, lr
 8019b52:	eb09 098e 	add.w	r9, r9, lr, lsl #2
 8019b56:	9a03      	ldr	r2, [sp, #12]
 8019b58:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8019b5a:	9b04      	ldr	r3, [sp, #16]
 8019b5c:	440a      	add	r2, r1
 8019b5e:	3301      	adds	r3, #1
 8019b60:	9203      	str	r2, [sp, #12]
 8019b62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019b64:	9304      	str	r3, [sp, #16]
 8019b66:	429a      	cmp	r2, r3
 8019b68:	f47f af30 	bne.w	80199cc <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x80c>
 8019b6c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8019b6e:	f933 1c02 	ldrsh.w	r1, [r3, #-2]
 8019b72:	2915      	cmp	r1, #21
 8019b74:	dd44      	ble.n	8019c00 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa40>
 8019b76:	1e8b      	subs	r3, r1, #2
 8019b78:	2201      	movs	r2, #1
 8019b7a:	3901      	subs	r1, #1
 8019b7c:	409a      	lsls	r2, r3
 8019b7e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019b80:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8019b84:	fb5a 2303 	smmla	r3, sl, r3, r2
 8019b88:	fa43 f101 	asr.w	r1, r3, r1
 8019b8c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019b8e:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8019b92:	440b      	add	r3, r1
 8019b94:	f303 0307 	ssat	r3, #8, r3
 8019b98:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8019b9a:	7013      	strb	r3, [r2, #0]
 8019b9c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8019b9e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8019ba2:	2915      	cmp	r1, #21
 8019ba4:	dd1a      	ble.n	8019bdc <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa1c>
 8019ba6:	1e8b      	subs	r3, r1, #2
 8019ba8:	2201      	movs	r2, #1
 8019baa:	3901      	subs	r1, #1
 8019bac:	409a      	lsls	r2, r3
 8019bae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019bb0:	681b      	ldr	r3, [r3, #0]
 8019bb2:	fb5b 2303 	smmla	r3, fp, r3, r2
 8019bb6:	fa43 f101 	asr.w	r1, r3, r1
 8019bba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019bbc:	681b      	ldr	r3, [r3, #0]
 8019bbe:	440b      	add	r3, r1
 8019bc0:	f303 0307 	ssat	r3, #8, r3
 8019bc4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8019bc6:	7053      	strb	r3, [r2, #1]
 8019bc8:	4613      	mov	r3, r2
 8019bca:	9a54      	ldr	r2, [sp, #336]	; 0x150
 8019bcc:	4413      	add	r3, r2
 8019bce:	9326      	str	r3, [sp, #152]	; 0x98
 8019bd0:	e5a6      	b.n	8019720 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x560>
 8019bd2:	468c      	mov	ip, r1
 8019bd4:	e783      	b.n	8019ade <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x91e>
 8019bd6:	f04f 0e00 	mov.w	lr, #0
 8019bda:	e752      	b.n	8019a82 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x8c2>
 8019bdc:	2900      	cmp	r1, #0
 8019bde:	dd2e      	ble.n	8019c3e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa7e>
 8019be0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019be2:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8019be6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8019be8:	681b      	ldr	r3, [r3, #0]
 8019bea:	6812      	ldr	r2, [r2, #0]
 8019bec:	fb5b 2b03 	smmla	fp, fp, r3, r2
 8019bf0:	fa4b f301 	asr.w	r3, fp, r1
 8019bf4:	f303 0307 	ssat	r3, #8, r3
 8019bf8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8019bfa:	7053      	strb	r3, [r2, #1]
 8019bfc:	4613      	mov	r3, r2
 8019bfe:	e7e4      	b.n	8019bca <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa0a>
 8019c00:	2900      	cmp	r1, #0
 8019c02:	f340 80a1 	ble.w	8019d48 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb88>
 8019c06:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019c08:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8019c0c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8019c0e:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8019c12:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8019c16:	fb5a 2a03 	smmla	sl, sl, r3, r2
 8019c1a:	fa4a f301 	asr.w	r3, sl, r1
 8019c1e:	f303 0307 	ssat	r3, #8, r3
 8019c22:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8019c24:	7013      	strb	r3, [r2, #0]
 8019c26:	e7b9      	b.n	8019b9c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x9dc>
 8019c28:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019c2a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8019c2c:	4413      	add	r3, r2
 8019c2e:	9305      	str	r3, [sp, #20]
 8019c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c32:	2b00      	cmp	r3, #0
 8019c34:	f47f aebd 	bne.w	80199b2 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x7f2>
 8019c38:	e9dd ab1b 	ldrd	sl, fp, [sp, #108]	; 0x6c
 8019c3c:	e796      	b.n	8019b6c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x9ac>
 8019c3e:	f1c1 0101 	rsb	r1, r1, #1
 8019c42:	fa0b f201 	lsl.w	r2, fp, r1
 8019c46:	f302 021f 	ssat	r2, #32, r2
 8019c4a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019c4c:	681b      	ldr	r3, [r3, #0]
 8019c4e:	fb52 f213 	smmulr	r2, r2, r3
 8019c52:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019c54:	681b      	ldr	r3, [r3, #0]
 8019c56:	4413      	add	r3, r2
 8019c58:	f303 0307 	ssat	r3, #8, r3
 8019c5c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8019c5e:	7053      	strb	r3, [r2, #1]
 8019c60:	4613      	mov	r3, r2
 8019c62:	e7b2      	b.n	8019bca <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa0a>
 8019c64:	2301      	movs	r3, #1
 8019c66:	931a      	str	r3, [sp, #104]	; 0x68
 8019c68:	9b60      	ldr	r3, [sp, #384]	; 0x180
 8019c6a:	2b00      	cmp	r3, #0
 8019c6c:	f47f ab5a 	bne.w	8019324 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x164>
 8019c70:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8019c72:	9b06      	ldr	r3, [sp, #24]
 8019c74:	4601      	mov	r1, r0
 8019c76:	9c3b      	ldr	r4, [sp, #236]	; 0xec
 8019c78:	9300      	str	r3, [sp, #0]
 8019c7a:	9a5f      	ldr	r2, [sp, #380]	; 0x17c
 8019c7c:	4421      	add	r1, r4
 8019c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c80:	f7fe fb5c 	bl	801833c <weights_2channels_prefetch>
 8019c84:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 8019c86:	2b00      	cmp	r3, #0
 8019c88:	f43f ab50 	beq.w	801932c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x16c>
 8019c8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c8e:	2b00      	cmp	r3, #0
 8019c90:	d06e      	beq.n	8019d70 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xbb0>
 8019c92:	2300      	movs	r3, #0
 8019c94:	985f      	ldr	r0, [sp, #380]	; 0x17c
 8019c96:	9937      	ldr	r1, [sp, #220]	; 0xdc
 8019c98:	461c      	mov	r4, r3
 8019c9a:	461e      	mov	r6, r3
 8019c9c:	9f36      	ldr	r7, [sp, #216]	; 0xd8
 8019c9e:	b33f      	cbz	r7, 8019cf0 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb30>
 8019ca0:	f100 0510 	add.w	r5, r0, #16
 8019ca4:	f935 2c10 	ldrsh.w	r2, [r5, #-16]
 8019ca8:	3f01      	subs	r7, #1
 8019caa:	f105 0510 	add.w	r5, r5, #16
 8019cae:	eba4 0402 	sub.w	r4, r4, r2
 8019cb2:	f935 2c18 	ldrsh.w	r2, [r5, #-24]
 8019cb6:	eba3 0302 	sub.w	r3, r3, r2
 8019cba:	f935 2c1e 	ldrsh.w	r2, [r5, #-30]
 8019cbe:	eba4 0402 	sub.w	r4, r4, r2
 8019cc2:	f935 2c16 	ldrsh.w	r2, [r5, #-22]
 8019cc6:	eba3 0302 	sub.w	r3, r3, r2
 8019cca:	f935 2c1c 	ldrsh.w	r2, [r5, #-28]
 8019cce:	eba4 0402 	sub.w	r4, r4, r2
 8019cd2:	f935 2c14 	ldrsh.w	r2, [r5, #-20]
 8019cd6:	eba3 0302 	sub.w	r3, r3, r2
 8019cda:	f935 2c1a 	ldrsh.w	r2, [r5, #-26]
 8019cde:	eba4 0402 	sub.w	r4, r4, r2
 8019ce2:	f935 2c12 	ldrsh.w	r2, [r5, #-18]
 8019ce6:	eba3 0302 	sub.w	r3, r3, r2
 8019cea:	d1db      	bne.n	8019ca4 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xae4>
 8019cec:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8019cee:	4410      	add	r0, r2
 8019cf0:	b1d9      	cbz	r1, 8019d2a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb6a>
 8019cf2:	f9b0 2000 	ldrsh.w	r2, [r0]
 8019cf6:	2901      	cmp	r1, #1
 8019cf8:	eba4 0402 	sub.w	r4, r4, r2
 8019cfc:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8019d00:	eba3 0302 	sub.w	r3, r3, r2
 8019d04:	d00f      	beq.n	8019d26 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb66>
 8019d06:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8019d0a:	2902      	cmp	r1, #2
 8019d0c:	eba4 0402 	sub.w	r4, r4, r2
 8019d10:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8019d14:	eba3 0302 	sub.w	r3, r3, r2
 8019d18:	d005      	beq.n	8019d26 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb66>
 8019d1a:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8019d1e:	1aa4      	subs	r4, r4, r2
 8019d20:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019d24:	1a9b      	subs	r3, r3, r2
 8019d26:	9a40      	ldr	r2, [sp, #256]	; 0x100
 8019d28:	4410      	add	r0, r2
 8019d2a:	3601      	adds	r6, #1
 8019d2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019d2e:	42b2      	cmp	r2, r6
 8019d30:	d1b4      	bne.n	8019c9c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xadc>
 8019d32:	9a5d      	ldr	r2, [sp, #372]	; 0x174
 8019d34:	fb02 f404 	mul.w	r4, r2, r4
 8019d38:	fb02 f303 	mul.w	r3, r2, r3
 8019d3c:	f7ff baf7 	b.w	801932e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x16e>
 8019d40:	2301      	movs	r3, #1
 8019d42:	9319      	str	r3, [sp, #100]	; 0x64
 8019d44:	f7ff bae0 	b.w	8019308 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x148>
 8019d48:	f1c1 0101 	rsb	r1, r1, #1
 8019d4c:	fa0a f201 	lsl.w	r2, sl, r1
 8019d50:	f302 021f 	ssat	r2, #32, r2
 8019d54:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019d56:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8019d5a:	fb52 f213 	smmulr	r2, r2, r3
 8019d5e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019d60:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8019d64:	4413      	add	r3, r2
 8019d66:	f303 0307 	ssat	r3, #8, r3
 8019d6a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8019d6c:	7013      	strb	r3, [r2, #0]
 8019d6e:	e715      	b.n	8019b9c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x9dc>
 8019d70:	461c      	mov	r4, r3
 8019d72:	f7ff badc 	b.w	801932e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x16e>
 8019d76:	2800      	cmp	r0, #0
 8019d78:	dd0c      	ble.n	8019d94 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xbd4>
 8019d7a:	0049      	lsls	r1, r1, #1
 8019d7c:	f8da 3000 	ldr.w	r3, [sl]
 8019d80:	f8d9 2000 	ldr.w	r2, [r9]
 8019d84:	fb51 2303 	smmla	r3, r1, r3, r2
 8019d88:	4103      	asrs	r3, r0
 8019d8a:	f303 0307 	ssat	r3, #8, r3
 8019d8e:	f888 3000 	strb.w	r3, [r8]
 8019d92:	e570      	b.n	8019876 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6b6>
 8019d94:	f1c0 0201 	rsb	r2, r0, #1
 8019d98:	fa01 f202 	lsl.w	r2, r1, r2
 8019d9c:	f302 021f 	ssat	r2, #32, r2
 8019da0:	f8da 3000 	ldr.w	r3, [sl]
 8019da4:	fb52 f213 	smmulr	r2, r2, r3
 8019da8:	f8d9 3000 	ldr.w	r3, [r9]
 8019dac:	4413      	add	r3, r2
 8019dae:	f303 0307 	ssat	r3, #8, r3
 8019db2:	f888 3000 	strb.w	r3, [r8]
 8019db6:	e55e      	b.n	8019876 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6b6>

08019db8 <st_int8_fill>:
 8019db8:	078b      	lsls	r3, r1, #30
 8019dba:	468c      	mov	ip, r1
 8019dbc:	d00a      	beq.n	8019dd4 <st_int8_fill+0x1c>
 8019dbe:	b912      	cbnz	r2, 8019dc6 <st_int8_fill+0xe>
 8019dc0:	e045      	b.n	8019e4e <st_int8_fill+0x96>
 8019dc2:	2a00      	cmp	r2, #0
 8019dc4:	d044      	beq.n	8019e50 <st_int8_fill+0x98>
 8019dc6:	f80c 0b01 	strb.w	r0, [ip], #1
 8019dca:	f01c 0f03 	tst.w	ip, #3
 8019dce:	f102 32ff 	add.w	r2, r2, #4294967295
 8019dd2:	d1f6      	bne.n	8019dc2 <st_int8_fill+0xa>
 8019dd4:	b2c3      	uxtb	r3, r0
 8019dd6:	0911      	lsrs	r1, r2, #4
 8019dd8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8019ddc:	b510      	push	{r4, lr}
 8019dde:	ea4f 2400 	mov.w	r4, r0, lsl #8
 8019de2:	b2a4      	uxth	r4, r4
 8019de4:	ea44 0403 	orr.w	r4, r4, r3
 8019de8:	ea4f 4300 	mov.w	r3, r0, lsl #16
 8019dec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8019df0:	ea44 0403 	orr.w	r4, r4, r3
 8019df4:	d043      	beq.n	8019e7e <st_int8_fill+0xc6>
 8019df6:	1e4b      	subs	r3, r1, #1
 8019df8:	2b04      	cmp	r3, #4
 8019dfa:	d92a      	bls.n	8019e52 <st_int8_fill+0x9a>
 8019dfc:	f01c 0f07 	tst.w	ip, #7
 8019e00:	d127      	bne.n	8019e52 <st_int8_fill+0x9a>
 8019e02:	f10c 0310 	add.w	r3, ip, #16
 8019e06:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 8019e0a:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8019e0e:	e943 4404 	strd	r4, r4, [r3, #-16]
 8019e12:	e943 4402 	strd	r4, r4, [r3, #-8]
 8019e16:	3310      	adds	r3, #16
 8019e18:	428b      	cmp	r3, r1
 8019e1a:	d1f8      	bne.n	8019e0e <st_int8_fill+0x56>
 8019e1c:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8019e20:	44f4      	add	ip, lr
 8019e22:	f002 0203 	and.w	r2, r2, #3
 8019e26:	b15b      	cbz	r3, 8019e40 <st_int8_fill+0x88>
 8019e28:	1e59      	subs	r1, r3, #1
 8019e2a:	f8cc 4000 	str.w	r4, [ip]
 8019e2e:	d005      	beq.n	8019e3c <st_int8_fill+0x84>
 8019e30:	2901      	cmp	r1, #1
 8019e32:	f8cc 4004 	str.w	r4, [ip, #4]
 8019e36:	bf18      	it	ne
 8019e38:	f8cc 4008 	strne.w	r4, [ip, #8]
 8019e3c:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
 8019e40:	b1e2      	cbz	r2, 8019e7c <st_int8_fill+0xc4>
 8019e42:	4601      	mov	r1, r0
 8019e44:	4660      	mov	r0, ip
 8019e46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e4a:	f001 bbc5 	b.w	801b5d8 <memset>
 8019e4e:	4770      	bx	lr
 8019e50:	4770      	bx	lr
 8019e52:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 8019e56:	4663      	mov	r3, ip
 8019e58:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
 8019e5c:	601c      	str	r4, [r3, #0]
 8019e5e:	3310      	adds	r3, #16
 8019e60:	f843 4c0c 	str.w	r4, [r3, #-12]
 8019e64:	f843 4c08 	str.w	r4, [r3, #-8]
 8019e68:	f843 4c04 	str.w	r4, [r3, #-4]
 8019e6c:	4299      	cmp	r1, r3
 8019e6e:	d1f5      	bne.n	8019e5c <st_int8_fill+0xa4>
 8019e70:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8019e74:	44f4      	add	ip, lr
 8019e76:	f002 0203 	and.w	r2, r2, #3
 8019e7a:	e7d4      	b.n	8019e26 <st_int8_fill+0x6e>
 8019e7c:	bd10      	pop	{r4, pc}
 8019e7e:	0893      	lsrs	r3, r2, #2
 8019e80:	f002 0203 	and.w	r2, r2, #3
 8019e84:	e7cf      	b.n	8019e26 <st_int8_fill+0x6e>
 8019e86:	bf00      	nop

08019e88 <st_int8_copy>:
 8019e88:	078b      	lsls	r3, r1, #30
 8019e8a:	d00a      	beq.n	8019ea2 <st_int8_copy+0x1a>
 8019e8c:	b912      	cbnz	r2, 8019e94 <st_int8_copy+0xc>
 8019e8e:	e04f      	b.n	8019f30 <st_int8_copy+0xa8>
 8019e90:	2a00      	cmp	r2, #0
 8019e92:	d04e      	beq.n	8019f32 <st_int8_copy+0xaa>
 8019e94:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8019e98:	3a01      	subs	r2, #1
 8019e9a:	f801 3b01 	strb.w	r3, [r1], #1
 8019e9e:	078b      	lsls	r3, r1, #30
 8019ea0:	d1f6      	bne.n	8019e90 <st_int8_copy+0x8>
 8019ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ea6:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8019eaa:	d063      	beq.n	8019f74 <st_int8_copy+0xec>
 8019eac:	ea41 0300 	orr.w	r3, r1, r0
 8019eb0:	075b      	lsls	r3, r3, #29
 8019eb2:	d13f      	bne.n	8019f34 <st_int8_copy+0xac>
 8019eb4:	f10e 33ff 	add.w	r3, lr, #4294967295
 8019eb8:	2b01      	cmp	r3, #1
 8019eba:	d93b      	bls.n	8019f34 <st_int8_copy+0xac>
 8019ebc:	f100 0310 	add.w	r3, r0, #16
 8019ec0:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8019ec4:	f101 0c10 	add.w	ip, r1, #16
 8019ec8:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8019ecc:	3310      	adds	r3, #16
 8019ece:	f10c 0c10 	add.w	ip, ip, #16
 8019ed2:	ed13 6b08 	vldr	d6, [r3, #-32]	; 0xffffffe0
 8019ed6:	ed13 7b06 	vldr	d7, [r3, #-24]	; 0xffffffe8
 8019eda:	4573      	cmp	r3, lr
 8019edc:	ed0c 6b08 	vstr	d6, [ip, #-32]	; 0xffffffe0
 8019ee0:	ed0c 7b06 	vstr	d7, [ip, #-24]	; 0xffffffe8
 8019ee4:	d1f2      	bne.n	8019ecc <st_int8_copy+0x44>
 8019ee6:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8019eea:	4420      	add	r0, r4
 8019eec:	4421      	add	r1, r4
 8019eee:	f002 0203 	and.w	r2, r2, #3
 8019ef2:	b16b      	cbz	r3, 8019f10 <st_int8_copy+0x88>
 8019ef4:	6804      	ldr	r4, [r0, #0]
 8019ef6:	600c      	str	r4, [r1, #0]
 8019ef8:	1e5c      	subs	r4, r3, #1
 8019efa:	d005      	beq.n	8019f08 <st_int8_copy+0x80>
 8019efc:	6845      	ldr	r5, [r0, #4]
 8019efe:	2c01      	cmp	r4, #1
 8019f00:	604d      	str	r5, [r1, #4]
 8019f02:	d001      	beq.n	8019f08 <st_int8_copy+0x80>
 8019f04:	6884      	ldr	r4, [r0, #8]
 8019f06:	608c      	str	r4, [r1, #8]
 8019f08:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8019f0c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8019f10:	b162      	cbz	r2, 8019f2c <st_int8_copy+0xa4>
 8019f12:	f990 3000 	ldrsb.w	r3, [r0]
 8019f16:	3a01      	subs	r2, #1
 8019f18:	700b      	strb	r3, [r1, #0]
 8019f1a:	d007      	beq.n	8019f2c <st_int8_copy+0xa4>
 8019f1c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8019f20:	2a01      	cmp	r2, #1
 8019f22:	704b      	strb	r3, [r1, #1]
 8019f24:	d002      	beq.n	8019f2c <st_int8_copy+0xa4>
 8019f26:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8019f2a:	708b      	strb	r3, [r1, #2]
 8019f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f30:	4770      	bx	lr
 8019f32:	4770      	bx	lr
 8019f34:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8019f38:	4684      	mov	ip, r0
 8019f3a:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8019f3e:	460b      	mov	r3, r1
 8019f40:	f8dc 8004 	ldr.w	r8, [ip, #4]
 8019f44:	3310      	adds	r3, #16
 8019f46:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8019f4a:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8019f4e:	f85c 6b10 	ldr.w	r6, [ip], #16
 8019f52:	f843 8c0c 	str.w	r8, [r3, #-12]
 8019f56:	f843 7c08 	str.w	r7, [r3, #-8]
 8019f5a:	f843 6c10 	str.w	r6, [r3, #-16]
 8019f5e:	f843 5c04 	str.w	r5, [r3, #-4]
 8019f62:	459e      	cmp	lr, r3
 8019f64:	d1ec      	bne.n	8019f40 <st_int8_copy+0xb8>
 8019f66:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8019f6a:	4420      	add	r0, r4
 8019f6c:	4421      	add	r1, r4
 8019f6e:	f002 0203 	and.w	r2, r2, #3
 8019f72:	e7be      	b.n	8019ef2 <st_int8_copy+0x6a>
 8019f74:	0893      	lsrs	r3, r2, #2
 8019f76:	f002 0203 	and.w	r2, r2, #3
 8019f7a:	e7ba      	b.n	8019ef2 <st_int8_copy+0x6a>

08019f7c <st_sssa8_ch_nn_mat_mult_kernel_opt>:
 8019f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f80:	b09d      	sub	sp, #116	; 0x74
 8019f82:	4683      	mov	fp, r0
 8019f84:	f8bd 4098 	ldrh.w	r4, [sp, #152]	; 0x98
 8019f88:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8019f8a:	f8bd 009c 	ldrh.w	r0, [sp, #156]	; 0x9c
 8019f8e:	441d      	add	r5, r3
 8019f90:	9417      	str	r4, [sp, #92]	; 0x5c
 8019f92:	0864      	lsrs	r4, r4, #1
 8019f94:	9318      	str	r3, [sp, #96]	; 0x60
 8019f96:	910c      	str	r1, [sp, #48]	; 0x30
 8019f98:	9216      	str	r2, [sp, #88]	; 0x58
 8019f9a:	9007      	str	r0, [sp, #28]
 8019f9c:	9515      	str	r5, [sp, #84]	; 0x54
 8019f9e:	9419      	str	r4, [sp, #100]	; 0x64
 8019fa0:	f000 81ce 	beq.w	801a340 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3c4>
 8019fa4:	eb01 0640 	add.w	r6, r1, r0, lsl #1
 8019fa8:	4617      	mov	r7, r2
 8019faa:	1e62      	subs	r2, r4, #1
 8019fac:	460c      	mov	r4, r1
 8019fae:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8019fb0:	f1a0 0310 	sub.w	r3, r0, #16
 8019fb4:	b292      	uxth	r2, r2
 8019fb6:	46d9      	mov	r9, fp
 8019fb8:	3108      	adds	r1, #8
 8019fba:	091b      	lsrs	r3, r3, #4
 8019fbc:	960f      	str	r6, [sp, #60]	; 0x3c
 8019fbe:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8019fc2:	3301      	adds	r3, #1
 8019fc4:	9708      	str	r7, [sp, #32]
 8019fc6:	910e      	str	r1, [sp, #56]	; 0x38
 8019fc8:	4601      	mov	r1, r0
 8019fca:	3803      	subs	r0, #3
 8019fcc:	900d      	str	r0, [sp, #52]	; 0x34
 8019fce:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8019fd0:	3004      	adds	r0, #4
 8019fd2:	9002      	str	r0, [sp, #8]
 8019fd4:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8019fd6:	3004      	adds	r0, #4
 8019fd8:	9005      	str	r0, [sp, #20]
 8019fda:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8019fdc:	3004      	adds	r0, #4
 8019fde:	9003      	str	r0, [sp, #12]
 8019fe0:	982b      	ldr	r0, [sp, #172]	; 0xac
 8019fe2:	3001      	adds	r0, #1
 8019fe4:	9004      	str	r0, [sp, #16]
 8019fe6:	1c68      	adds	r0, r5, #1
 8019fe8:	9006      	str	r0, [sp, #24]
 8019fea:	eb04 1043 	add.w	r0, r4, r3, lsl #5
 8019fee:	9013      	str	r0, [sp, #76]	; 0x4c
 8019ff0:	0198      	lsls	r0, r3, #6
 8019ff2:	9010      	str	r0, [sp, #64]	; 0x40
 8019ff4:	0118      	lsls	r0, r3, #4
 8019ff6:	eb06 1343 	add.w	r3, r6, r3, lsl #5
 8019ffa:	9012      	str	r0, [sp, #72]	; 0x48
 8019ffc:	9311      	str	r3, [sp, #68]	; 0x44
 8019ffe:	1f0b      	subs	r3, r1, #4
 801a000:	9314      	str	r3, [sp, #80]	; 0x50
 801a002:	9908      	ldr	r1, [sp, #32]
 801a004:	9c07      	ldr	r4, [sp, #28]
 801a006:	680b      	ldr	r3, [r1, #0]
 801a008:	3108      	adds	r1, #8
 801a00a:	2c0f      	cmp	r4, #15
 801a00c:	931b      	str	r3, [sp, #108]	; 0x6c
 801a00e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a010:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801a012:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801a016:	9108      	str	r1, [sp, #32]
 801a018:	921b      	str	r2, [sp, #108]	; 0x6c
 801a01a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801a01c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801a01e:	f340 8282 	ble.w	801a526 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5aa>
 801a022:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801a024:	464d      	mov	r5, r9
 801a026:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a028:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a02a:	f8d4 e000 	ldr.w	lr, [r4]
 801a02e:	f8d7 a000 	ldr.w	sl, [r7]
 801a032:	f8d5 c000 	ldr.w	ip, [r5]
 801a036:	f8d5 8004 	ldr.w	r8, [r5, #4]
 801a03a:	fb2c 330e 	smlad	r3, ip, lr, r3
 801a03e:	fb2c 000a 	smlad	r0, ip, sl, r0
 801a042:	fb28 2e0e 	smlad	lr, r8, lr, r2
 801a046:	fb28 110a 	smlad	r1, r8, sl, r1
 801a04a:	f8d4 c004 	ldr.w	ip, [r4, #4]
 801a04e:	f8d7 8004 	ldr.w	r8, [r7, #4]
 801a052:	68aa      	ldr	r2, [r5, #8]
 801a054:	f8d5 b00c 	ldr.w	fp, [r5, #12]
 801a058:	fb22 330c 	smlad	r3, r2, ip, r3
 801a05c:	fb22 0008 	smlad	r0, r2, r8, r0
 801a060:	fb2b ee0c 	smlad	lr, fp, ip, lr
 801a064:	fb2b 1808 	smlad	r8, fp, r8, r1
 801a068:	f8d4 c008 	ldr.w	ip, [r4, #8]
 801a06c:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801a070:	692a      	ldr	r2, [r5, #16]
 801a072:	f8d5 a014 	ldr.w	sl, [r5, #20]
 801a076:	fb22 330c 	smlad	r3, r2, ip, r3
 801a07a:	fb22 000b 	smlad	r0, r2, fp, r0
 801a07e:	fb2a ee0c 	smlad	lr, sl, ip, lr
 801a082:	fb2a 8b0b 	smlad	fp, sl, fp, r8
 801a086:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801a08a:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 801a08e:	f8d5 8018 	ldr.w	r8, [r5, #24]
 801a092:	69e9      	ldr	r1, [r5, #28]
 801a094:	fb28 330c 	smlad	r3, r8, ip, r3
 801a098:	fb28 000a 	smlad	r0, r8, sl, r0
 801a09c:	fb21 ec0c 	smlad	ip, r1, ip, lr
 801a0a0:	fb21 ba0a 	smlad	sl, r1, sl, fp
 801a0a4:	f8d4 e010 	ldr.w	lr, [r4, #16]
 801a0a8:	6939      	ldr	r1, [r7, #16]
 801a0aa:	f8d5 8020 	ldr.w	r8, [r5, #32]
 801a0ae:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801a0b0:	fb28 330e 	smlad	r3, r8, lr, r3
 801a0b4:	fb28 0001 	smlad	r0, r8, r1, r0
 801a0b8:	fb22 cc0e 	smlad	ip, r2, lr, ip
 801a0bc:	fb22 a101 	smlad	r1, r2, r1, sl
 801a0c0:	f8d4 e014 	ldr.w	lr, [r4, #20]
 801a0c4:	f8d7 a014 	ldr.w	sl, [r7, #20]
 801a0c8:	f8d5 8028 	ldr.w	r8, [r5, #40]	; 0x28
 801a0cc:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801a0ce:	fb28 330e 	smlad	r3, r8, lr, r3
 801a0d2:	fb28 000a 	smlad	r0, r8, sl, r0
 801a0d6:	fb22 cc0e 	smlad	ip, r2, lr, ip
 801a0da:	fb22 120a 	smlad	r2, r2, sl, r1
 801a0de:	f8d4 e018 	ldr.w	lr, [r4, #24]
 801a0e2:	f8d7 b018 	ldr.w	fp, [r7, #24]
 801a0e6:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 801a0ea:	6b69      	ldr	r1, [r5, #52]	; 0x34
 801a0ec:	fb28 330e 	smlad	r3, r8, lr, r3
 801a0f0:	fb28 080b 	smlad	r8, r8, fp, r0
 801a0f4:	fb21 ce0e 	smlad	lr, r1, lr, ip
 801a0f8:	fb21 210b 	smlad	r1, r1, fp, r2
 801a0fc:	69e2      	ldr	r2, [r4, #28]
 801a0fe:	3720      	adds	r7, #32
 801a100:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801a102:	3420      	adds	r4, #32
 801a104:	f8d5 c03c 	ldr.w	ip, [r5, #60]	; 0x3c
 801a108:	3540      	adds	r5, #64	; 0x40
 801a10a:	f857 bc04 	ldr.w	fp, [r7, #-4]
 801a10e:	fb20 3302 	smlad	r3, r0, r2, r3
 801a112:	fb20 800b 	smlad	r0, r0, fp, r8
 801a116:	fb2c e202 	smlad	r2, ip, r2, lr
 801a11a:	fb2c 110b 	smlad	r1, ip, fp, r1
 801a11e:	42a6      	cmp	r6, r4
 801a120:	d183      	bne.n	801a02a <st_sssa8_ch_nn_mat_mult_kernel_opt+0xae>
 801a122:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801a124:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 801a128:	44a9      	add	r9, r5
 801a12a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801a12c:	9501      	str	r5, [sp, #4]
 801a12e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801a130:	45ab      	cmp	fp, r5
 801a132:	f280 8201 	bge.w	801a538 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5bc>
 801a136:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801a138:	f8dd c004 	ldr.w	ip, [sp, #4]
 801a13c:	eba5 050b 	sub.w	r5, r5, fp
 801a140:	08ad      	lsrs	r5, r5, #2
 801a142:	462e      	mov	r6, r5
 801a144:	950b      	str	r5, [sp, #44]	; 0x2c
 801a146:	464d      	mov	r5, r9
 801a148:	3601      	adds	r6, #1
 801a14a:	00f7      	lsls	r7, r6, #3
 801a14c:	960a      	str	r6, [sp, #40]	; 0x28
 801a14e:	eb04 08c6 	add.w	r8, r4, r6, lsl #3
 801a152:	9709      	str	r7, [sp, #36]	; 0x24
 801a154:	f8d4 e000 	ldr.w	lr, [r4]
 801a158:	f8dc 7000 	ldr.w	r7, [ip]
 801a15c:	f8d5 a000 	ldr.w	sl, [r5]
 801a160:	686e      	ldr	r6, [r5, #4]
 801a162:	fb2a 330e 	smlad	r3, sl, lr, r3
 801a166:	fb2a 0007 	smlad	r0, sl, r7, r0
 801a16a:	fb26 220e 	smlad	r2, r6, lr, r2
 801a16e:	fb26 1107 	smlad	r1, r6, r7, r1
 801a172:	6867      	ldr	r7, [r4, #4]
 801a174:	f10c 0c08 	add.w	ip, ip, #8
 801a178:	68ae      	ldr	r6, [r5, #8]
 801a17a:	3408      	adds	r4, #8
 801a17c:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 801a180:	3510      	adds	r5, #16
 801a182:	f85c ac04 	ldr.w	sl, [ip, #-4]
 801a186:	fb26 3307 	smlad	r3, r6, r7, r3
 801a18a:	fb26 000a 	smlad	r0, r6, sl, r0
 801a18e:	fb2e 2207 	smlad	r2, lr, r7, r2
 801a192:	fb2e 110a 	smlad	r1, lr, sl, r1
 801a196:	4544      	cmp	r4, r8
 801a198:	d1dc      	bne.n	801a154 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1d8>
 801a19a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801a19c:	f10b 0b04 	add.w	fp, fp, #4
 801a1a0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801a1a2:	eb09 1904 	add.w	r9, r9, r4, lsl #4
 801a1a6:	9c01      	ldr	r4, [sp, #4]
 801a1a8:	442c      	add	r4, r5
 801a1aa:	9401      	str	r4, [sp, #4]
 801a1ac:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a1ae:	eb0b 0b84 	add.w	fp, fp, r4, lsl #2
 801a1b2:	9f07      	ldr	r7, [sp, #28]
 801a1b4:	455f      	cmp	r7, fp
 801a1b6:	dd54      	ble.n	801a262 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2e6>
 801a1b8:	f9b8 5000 	ldrsh.w	r5, [r8]
 801a1bc:	f9b9 4002 	ldrsh.w	r4, [r9, #2]
 801a1c0:	f9b9 6000 	ldrsh.w	r6, [r9]
 801a1c4:	fb05 2204 	mla	r2, r5, r4, r2
 801a1c8:	fb06 3305 	mla	r3, r6, r5, r3
 801a1cc:	9d01      	ldr	r5, [sp, #4]
 801a1ce:	f9b5 5000 	ldrsh.w	r5, [r5]
 801a1d2:	fb05 1104 	mla	r1, r5, r4, r1
 801a1d6:	f10b 0401 	add.w	r4, fp, #1
 801a1da:	fb06 0005 	mla	r0, r6, r5, r0
 801a1de:	42a7      	cmp	r7, r4
 801a1e0:	dd3a      	ble.n	801a258 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2dc>
 801a1e2:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 801a1e6:	f9b9 4006 	ldrsh.w	r4, [r9, #6]
 801a1ea:	f9b9 6004 	ldrsh.w	r6, [r9, #4]
 801a1ee:	fb05 2204 	mla	r2, r5, r4, r2
 801a1f2:	fb06 3305 	mla	r3, r6, r5, r3
 801a1f6:	9d01      	ldr	r5, [sp, #4]
 801a1f8:	f9b5 5002 	ldrsh.w	r5, [r5, #2]
 801a1fc:	fb05 1104 	mla	r1, r5, r4, r1
 801a200:	f10b 0402 	add.w	r4, fp, #2
 801a204:	fb06 0005 	mla	r0, r6, r5, r0
 801a208:	42a7      	cmp	r7, r4
 801a20a:	dd25      	ble.n	801a258 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2dc>
 801a20c:	f9b8 5004 	ldrsh.w	r5, [r8, #4]
 801a210:	f9b9 400a 	ldrsh.w	r4, [r9, #10]
 801a214:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801a218:	fb05 2204 	mla	r2, r5, r4, r2
 801a21c:	fb06 3305 	mla	r3, r6, r5, r3
 801a220:	9d01      	ldr	r5, [sp, #4]
 801a222:	f9b5 5004 	ldrsh.w	r5, [r5, #4]
 801a226:	fb05 1104 	mla	r1, r5, r4, r1
 801a22a:	f10b 0403 	add.w	r4, fp, #3
 801a22e:	fb06 0005 	mla	r0, r6, r5, r0
 801a232:	42a7      	cmp	r7, r4
 801a234:	dd10      	ble.n	801a258 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2dc>
 801a236:	9c01      	ldr	r4, [sp, #4]
 801a238:	f9b8 5006 	ldrsh.w	r5, [r8, #6]
 801a23c:	f9b4 6006 	ldrsh.w	r6, [r4, #6]
 801a240:	f9b9 400c 	ldrsh.w	r4, [r9, #12]
 801a244:	fb04 3305 	mla	r3, r4, r5, r3
 801a248:	fb04 0006 	mla	r0, r4, r6, r0
 801a24c:	f9b9 400e 	ldrsh.w	r4, [r9, #14]
 801a250:	fb05 2204 	mla	r2, r5, r4, r2
 801a254:	fb06 1104 	mla	r1, r6, r4, r1
 801a258:	9c07      	ldr	r4, [sp, #28]
 801a25a:	eba4 0b0b 	sub.w	fp, r4, fp
 801a25e:	eb09 098b 	add.w	r9, r9, fp, lsl #2
 801a262:	9c02      	ldr	r4, [sp, #8]
 801a264:	f934 4c04 	ldrsh.w	r4, [r4, #-4]
 801a268:	2c15      	cmp	r4, #21
 801a26a:	f340 80e5 	ble.w	801a438 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4bc>
 801a26e:	1ea6      	subs	r6, r4, #2
 801a270:	2501      	movs	r5, #1
 801a272:	3c01      	subs	r4, #1
 801a274:	fa05 f606 	lsl.w	r6, r5, r6
 801a278:	9d05      	ldr	r5, [sp, #20]
 801a27a:	f855 5c04 	ldr.w	r5, [r5, #-4]
 801a27e:	fb53 6305 	smmla	r3, r3, r5, r6
 801a282:	fb50 6005 	smmla	r0, r0, r5, r6
 801a286:	9d03      	ldr	r5, [sp, #12]
 801a288:	4123      	asrs	r3, r4
 801a28a:	f855 7c04 	ldr.w	r7, [r5, #-4]
 801a28e:	443b      	add	r3, r7
 801a290:	f303 0307 	ssat	r3, #8, r3
 801a294:	4120      	asrs	r0, r4
 801a296:	9c04      	ldr	r4, [sp, #16]
 801a298:	4438      	add	r0, r7
 801a29a:	f804 3c01 	strb.w	r3, [r4, #-1]
 801a29e:	f300 0007 	ssat	r0, #8, r0
 801a2a2:	9b06      	ldr	r3, [sp, #24]
 801a2a4:	f803 0c01 	strb.w	r0, [r3, #-1]
 801a2a8:	9b02      	ldr	r3, [sp, #8]
 801a2aa:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 801a2ae:	2b15      	cmp	r3, #21
 801a2b0:	f340 80e2 	ble.w	801a478 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4fc>
 801a2b4:	1e9c      	subs	r4, r3, #2
 801a2b6:	2001      	movs	r0, #1
 801a2b8:	3b01      	subs	r3, #1
 801a2ba:	fa00 f404 	lsl.w	r4, r0, r4
 801a2be:	9805      	ldr	r0, [sp, #20]
 801a2c0:	6800      	ldr	r0, [r0, #0]
 801a2c2:	fb52 4200 	smmla	r2, r2, r0, r4
 801a2c6:	fb51 4100 	smmla	r1, r1, r0, r4
 801a2ca:	9803      	ldr	r0, [sp, #12]
 801a2cc:	411a      	asrs	r2, r3
 801a2ce:	6805      	ldr	r5, [r0, #0]
 801a2d0:	442a      	add	r2, r5
 801a2d2:	f302 0207 	ssat	r2, #8, r2
 801a2d6:	4119      	asrs	r1, r3
 801a2d8:	9b04      	ldr	r3, [sp, #16]
 801a2da:	4429      	add	r1, r5
 801a2dc:	701a      	strb	r2, [r3, #0]
 801a2de:	f301 0107 	ssat	r1, #8, r1
 801a2e2:	9b06      	ldr	r3, [sp, #24]
 801a2e4:	7019      	strb	r1, [r3, #0]
 801a2e6:	9a05      	ldr	r2, [sp, #20]
 801a2e8:	9b02      	ldr	r3, [sp, #8]
 801a2ea:	3208      	adds	r2, #8
 801a2ec:	3304      	adds	r3, #4
 801a2ee:	9205      	str	r2, [sp, #20]
 801a2f0:	9a03      	ldr	r2, [sp, #12]
 801a2f2:	9302      	str	r3, [sp, #8]
 801a2f4:	3208      	adds	r2, #8
 801a2f6:	9203      	str	r2, [sp, #12]
 801a2f8:	9a04      	ldr	r2, [sp, #16]
 801a2fa:	3202      	adds	r2, #2
 801a2fc:	9204      	str	r2, [sp, #16]
 801a2fe:	9a06      	ldr	r2, [sp, #24]
 801a300:	3202      	adds	r2, #2
 801a302:	9206      	str	r2, [sp, #24]
 801a304:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a306:	4293      	cmp	r3, r2
 801a308:	f47f ae7b 	bne.w	801a002 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x86>
 801a30c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a30e:	46cb      	mov	fp, r9
 801a310:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801a312:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801a316:	9229      	str	r2, [sp, #164]	; 0xa4
 801a318:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801a31a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801a31e:	922a      	str	r2, [sp, #168]	; 0xa8
 801a320:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801a322:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 801a326:	922b      	str	r2, [sp, #172]	; 0xac
 801a328:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801a32a:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 801a32e:	9215      	str	r2, [sp, #84]	; 0x54
 801a330:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801a332:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801a336:	9216      	str	r2, [sp, #88]	; 0x58
 801a338:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801a33a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a33e:	9328      	str	r3, [sp, #160]	; 0xa0
 801a340:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a342:	07db      	lsls	r3, r3, #31
 801a344:	d56f      	bpl.n	801a426 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4aa>
 801a346:	9a07      	ldr	r2, [sp, #28]
 801a348:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801a34a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a34c:	0896      	lsrs	r6, r2, #2
 801a34e:	681b      	ldr	r3, [r3, #0]
 801a350:	eb00 0742 	add.w	r7, r0, r2, lsl #1
 801a354:	f000 812e 	beq.w	801a5b4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x638>
 801a358:	ea4f 0cc6 	mov.w	ip, r6, lsl #3
 801a35c:	463c      	mov	r4, r7
 801a35e:	eb0b 06c6 	add.w	r6, fp, r6, lsl #3
 801a362:	461a      	mov	r2, r3
 801a364:	f8db 5000 	ldr.w	r5, [fp]
 801a368:	f10b 0b08 	add.w	fp, fp, #8
 801a36c:	f85b 1c04 	ldr.w	r1, [fp, #-4]
 801a370:	f8d0 e000 	ldr.w	lr, [r0]
 801a374:	fb25 330e 	smlad	r3, r5, lr, r3
 801a378:	f8d4 e000 	ldr.w	lr, [r4]
 801a37c:	fb25 220e 	smlad	r2, r5, lr, r2
 801a380:	f8d0 e004 	ldr.w	lr, [r0, #4]
 801a384:	3408      	adds	r4, #8
 801a386:	f854 5c04 	ldr.w	r5, [r4, #-4]
 801a38a:	3008      	adds	r0, #8
 801a38c:	fb21 330e 	smlad	r3, r1, lr, r3
 801a390:	fb21 2205 	smlad	r2, r1, r5, r2
 801a394:	45b3      	cmp	fp, r6
 801a396:	d1e5      	bne.n	801a364 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3e8>
 801a398:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a39a:	4467      	add	r7, ip
 801a39c:	4461      	add	r1, ip
 801a39e:	910c      	str	r1, [sp, #48]	; 0x30
 801a3a0:	9907      	ldr	r1, [sp, #28]
 801a3a2:	f011 0103 	ands.w	r1, r1, #3
 801a3a6:	d01d      	beq.n	801a3e4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x468>
 801a3a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a3aa:	3901      	subs	r1, #1
 801a3ac:	f9b6 0000 	ldrsh.w	r0, [r6]
 801a3b0:	882c      	ldrh	r4, [r5, #0]
 801a3b2:	b289      	uxth	r1, r1
 801a3b4:	fb14 3300 	smlabb	r3, r4, r0, r3
 801a3b8:	883c      	ldrh	r4, [r7, #0]
 801a3ba:	fb14 2200 	smlabb	r2, r4, r0, r2
 801a3be:	b189      	cbz	r1, 801a3e4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x468>
 801a3c0:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 801a3c4:	2901      	cmp	r1, #1
 801a3c6:	886c      	ldrh	r4, [r5, #2]
 801a3c8:	fb14 3300 	smlabb	r3, r4, r0, r3
 801a3cc:	887c      	ldrh	r4, [r7, #2]
 801a3ce:	fb14 2200 	smlabb	r2, r4, r0, r2
 801a3d2:	d007      	beq.n	801a3e4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x468>
 801a3d4:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 801a3d8:	88a8      	ldrh	r0, [r5, #4]
 801a3da:	fb11 3300 	smlabb	r3, r1, r0, r3
 801a3de:	88b8      	ldrh	r0, [r7, #4]
 801a3e0:	fb11 2200 	smlabb	r2, r1, r0, r2
 801a3e4:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801a3e6:	f9b1 1000 	ldrsh.w	r1, [r1]
 801a3ea:	2915      	cmp	r1, #21
 801a3ec:	f340 80a6 	ble.w	801a53c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5c0>
 801a3f0:	1e8d      	subs	r5, r1, #2
 801a3f2:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801a3f4:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 801a3f6:	3901      	subs	r1, #1
 801a3f8:	2601      	movs	r6, #1
 801a3fa:	6800      	ldr	r0, [r0, #0]
 801a3fc:	6824      	ldr	r4, [r4, #0]
 801a3fe:	40ae      	lsls	r6, r5
 801a400:	fb53 6500 	smmla	r5, r3, r0, r6
 801a404:	fb52 6300 	smmla	r3, r2, r0, r6
 801a408:	fa45 f201 	asr.w	r2, r5, r1
 801a40c:	4422      	add	r2, r4
 801a40e:	f302 0207 	ssat	r2, #8, r2
 801a412:	410b      	asrs	r3, r1
 801a414:	982b      	ldr	r0, [sp, #172]	; 0xac
 801a416:	4423      	add	r3, r4
 801a418:	f800 2b01 	strb.w	r2, [r0], #1
 801a41c:	f303 0307 	ssat	r3, #8, r3
 801a420:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801a422:	902b      	str	r0, [sp, #172]	; 0xac
 801a424:	7013      	strb	r3, [r2, #0]
 801a426:	e9dd 3217 	ldrd	r3, r2, [sp, #92]	; 0x5c
 801a42a:	ebc3 0042 	rsb	r0, r3, r2, lsl #1
 801a42e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801a430:	4418      	add	r0, r3
 801a432:	b01d      	add	sp, #116	; 0x74
 801a434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a438:	2c00      	cmp	r4, #0
 801a43a:	dd34      	ble.n	801a4a6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x52a>
 801a43c:	9d05      	ldr	r5, [sp, #20]
 801a43e:	005b      	lsls	r3, r3, #1
 801a440:	9e03      	ldr	r6, [sp, #12]
 801a442:	0040      	lsls	r0, r0, #1
 801a444:	f855 5c04 	ldr.w	r5, [r5, #-4]
 801a448:	f856 6c04 	ldr.w	r6, [r6, #-4]
 801a44c:	fb53 6305 	smmla	r3, r3, r5, r6
 801a450:	fb50 6005 	smmla	r0, r0, r5, r6
 801a454:	4123      	asrs	r3, r4
 801a456:	f303 0307 	ssat	r3, #8, r3
 801a45a:	4120      	asrs	r0, r4
 801a45c:	9c04      	ldr	r4, [sp, #16]
 801a45e:	f804 3c01 	strb.w	r3, [r4, #-1]
 801a462:	f300 0007 	ssat	r0, #8, r0
 801a466:	9b06      	ldr	r3, [sp, #24]
 801a468:	f803 0c01 	strb.w	r0, [r3, #-1]
 801a46c:	9b02      	ldr	r3, [sp, #8]
 801a46e:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 801a472:	2b15      	cmp	r3, #21
 801a474:	f73f af1e 	bgt.w	801a2b4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x338>
 801a478:	2b00      	cmp	r3, #0
 801a47a:	dd36      	ble.n	801a4ea <st_sssa8_ch_nn_mat_mult_kernel_opt+0x56e>
 801a47c:	9805      	ldr	r0, [sp, #20]
 801a47e:	0052      	lsls	r2, r2, #1
 801a480:	9c03      	ldr	r4, [sp, #12]
 801a482:	0049      	lsls	r1, r1, #1
 801a484:	6800      	ldr	r0, [r0, #0]
 801a486:	6824      	ldr	r4, [r4, #0]
 801a488:	fb52 4200 	smmla	r2, r2, r0, r4
 801a48c:	fb51 4100 	smmla	r1, r1, r0, r4
 801a490:	411a      	asrs	r2, r3
 801a492:	f302 0207 	ssat	r2, #8, r2
 801a496:	4119      	asrs	r1, r3
 801a498:	9b04      	ldr	r3, [sp, #16]
 801a49a:	701a      	strb	r2, [r3, #0]
 801a49c:	f301 0107 	ssat	r1, #8, r1
 801a4a0:	9b06      	ldr	r3, [sp, #24]
 801a4a2:	7019      	strb	r1, [r3, #0]
 801a4a4:	e71f      	b.n	801a2e6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x36a>
 801a4a6:	f1c4 0401 	rsb	r4, r4, #1
 801a4aa:	fa03 f504 	lsl.w	r5, r3, r4
 801a4ae:	f305 051f 	ssat	r5, #32, r5
 801a4b2:	9b05      	ldr	r3, [sp, #20]
 801a4b4:	f853 6c04 	ldr.w	r6, [r3, #-4]
 801a4b8:	fb55 f516 	smmulr	r5, r5, r6
 801a4bc:	40a0      	lsls	r0, r4
 801a4be:	f300 001f 	ssat	r0, #32, r0
 801a4c2:	fb50 f016 	smmulr	r0, r0, r6
 801a4c6:	9c03      	ldr	r4, [sp, #12]
 801a4c8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801a4cc:	442b      	add	r3, r5
 801a4ce:	f303 0307 	ssat	r3, #8, r3
 801a4d2:	9d04      	ldr	r5, [sp, #16]
 801a4d4:	f805 3c01 	strb.w	r3, [r5, #-1]
 801a4d8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801a4dc:	4403      	add	r3, r0
 801a4de:	f303 0307 	ssat	r3, #8, r3
 801a4e2:	9806      	ldr	r0, [sp, #24]
 801a4e4:	f800 3c01 	strb.w	r3, [r0, #-1]
 801a4e8:	e6de      	b.n	801a2a8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x32c>
 801a4ea:	f1c3 0301 	rsb	r3, r3, #1
 801a4ee:	fa02 f003 	lsl.w	r0, r2, r3
 801a4f2:	f300 001f 	ssat	r0, #32, r0
 801a4f6:	9a05      	ldr	r2, [sp, #20]
 801a4f8:	6814      	ldr	r4, [r2, #0]
 801a4fa:	fb50 f014 	smmulr	r0, r0, r4
 801a4fe:	fa01 f303 	lsl.w	r3, r1, r3
 801a502:	f303 021f 	ssat	r2, #32, r3
 801a506:	fb52 f214 	smmulr	r2, r2, r4
 801a50a:	9903      	ldr	r1, [sp, #12]
 801a50c:	680b      	ldr	r3, [r1, #0]
 801a50e:	4403      	add	r3, r0
 801a510:	f303 0307 	ssat	r3, #8, r3
 801a514:	9804      	ldr	r0, [sp, #16]
 801a516:	7003      	strb	r3, [r0, #0]
 801a518:	680b      	ldr	r3, [r1, #0]
 801a51a:	4413      	add	r3, r2
 801a51c:	f303 0307 	ssat	r3, #8, r3
 801a520:	9a06      	ldr	r2, [sp, #24]
 801a522:	7013      	strb	r3, [r2, #0]
 801a524:	e6df      	b.n	801a2e6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x36a>
 801a526:	f04f 0b00 	mov.w	fp, #0
 801a52a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801a52c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a52e:	45ab      	cmp	fp, r5
 801a530:	9401      	str	r4, [sp, #4]
 801a532:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a534:	f6ff adff 	blt.w	801a136 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1ba>
 801a538:	46a0      	mov	r8, r4
 801a53a:	e63a      	b.n	801a1b2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x236>
 801a53c:	2900      	cmp	r1, #0
 801a53e:	dd1a      	ble.n	801a576 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5fa>
 801a540:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801a542:	005b      	lsls	r3, r3, #1
 801a544:	0052      	lsls	r2, r2, #1
 801a546:	6804      	ldr	r4, [r0, #0]
 801a548:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801a54a:	6805      	ldr	r5, [r0, #0]
 801a54c:	fb53 5004 	smmla	r0, r3, r4, r5
 801a550:	fb52 5304 	smmla	r3, r2, r4, r5
 801a554:	fa40 f201 	asr.w	r2, r0, r1
 801a558:	f302 0207 	ssat	r2, #8, r2
 801a55c:	982b      	ldr	r0, [sp, #172]	; 0xac
 801a55e:	f800 2b01 	strb.w	r2, [r0], #1
 801a562:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801a564:	f9b2 2000 	ldrsh.w	r2, [r2]
 801a568:	4113      	asrs	r3, r2
 801a56a:	f303 0307 	ssat	r3, #8, r3
 801a56e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801a570:	902b      	str	r0, [sp, #172]	; 0xac
 801a572:	7013      	strb	r3, [r2, #0]
 801a574:	e757      	b.n	801a426 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4aa>
 801a576:	f1c1 0101 	rsb	r1, r1, #1
 801a57a:	408b      	lsls	r3, r1
 801a57c:	f303 031f 	ssat	r3, #32, r3
 801a580:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801a582:	6800      	ldr	r0, [r0, #0]
 801a584:	fb53 f310 	smmulr	r3, r3, r0
 801a588:	408a      	lsls	r2, r1
 801a58a:	f302 021f 	ssat	r2, #32, r2
 801a58e:	fb52 f210 	smmulr	r2, r2, r0
 801a592:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801a594:	6809      	ldr	r1, [r1, #0]
 801a596:	440b      	add	r3, r1
 801a598:	f303 0307 	ssat	r3, #8, r3
 801a59c:	992b      	ldr	r1, [sp, #172]	; 0xac
 801a59e:	f801 3b01 	strb.w	r3, [r1], #1
 801a5a2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a5a4:	681b      	ldr	r3, [r3, #0]
 801a5a6:	4413      	add	r3, r2
 801a5a8:	f303 0307 	ssat	r3, #8, r3
 801a5ac:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801a5ae:	912b      	str	r1, [sp, #172]	; 0xac
 801a5b0:	7013      	strb	r3, [r2, #0]
 801a5b2:	e738      	b.n	801a426 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4aa>
 801a5b4:	465e      	mov	r6, fp
 801a5b6:	461a      	mov	r2, r3
 801a5b8:	e6f2      	b.n	801a3a0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x424>
 801a5ba:	bf00      	nop

0801a5bc <st_sssa8_ch_nn_mat_mult_kernel_single_opt>:
 801a5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5c0:	b093      	sub	sp, #76	; 0x4c
 801a5c2:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801a5c6:	f8bd 4074 	ldrh.w	r4, [sp, #116]	; 0x74
 801a5ca:	085d      	lsrs	r5, r3, #1
 801a5cc:	930e      	str	r3, [sp, #56]	; 0x38
 801a5ce:	9107      	str	r1, [sp, #28]
 801a5d0:	920d      	str	r2, [sp, #52]	; 0x34
 801a5d2:	9405      	str	r4, [sp, #20]
 801a5d4:	950f      	str	r5, [sp, #60]	; 0x3c
 801a5d6:	f000 81fc 	beq.w	801a9d2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x416>
 801a5da:	4616      	mov	r6, r2
 801a5dc:	1e6a      	subs	r2, r5, #1
 801a5de:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801a5e0:	460f      	mov	r7, r1
 801a5e2:	b292      	uxth	r2, r2
 801a5e4:	f1a4 0310 	sub.w	r3, r4, #16
 801a5e8:	1d29      	adds	r1, r5, #4
 801a5ea:	f106 0a08 	add.w	sl, r6, #8
 801a5ee:	091b      	lsrs	r3, r3, #4
 801a5f0:	eb01 0542 	add.w	r5, r1, r2, lsl #1
 801a5f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a5f6:	3301      	adds	r3, #1
 801a5f8:	f102 0b02 	add.w	fp, r2, #2
 801a5fc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801a5fe:	eb07 1743 	add.w	r7, r7, r3, lsl #5
 801a602:	9509      	str	r5, [sp, #36]	; 0x24
 801a604:	3204      	adds	r2, #4
 801a606:	1ee5      	subs	r5, r4, #3
 801a608:	9202      	str	r2, [sp, #8]
 801a60a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801a60c:	9508      	str	r5, [sp, #32]
 801a60e:	3208      	adds	r2, #8
 801a610:	9204      	str	r2, [sp, #16]
 801a612:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a614:	3208      	adds	r2, #8
 801a616:	9201      	str	r2, [sp, #4]
 801a618:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801a61a:	3202      	adds	r2, #2
 801a61c:	9203      	str	r2, [sp, #12]
 801a61e:	019a      	lsls	r2, r3, #6
 801a620:	011b      	lsls	r3, r3, #4
 801a622:	920a      	str	r2, [sp, #40]	; 0x28
 801a624:	930b      	str	r3, [sp, #44]	; 0x2c
 801a626:	1f23      	subs	r3, r4, #4
 801a628:	930c      	str	r3, [sp, #48]	; 0x30
 801a62a:	f85a 3c08 	ldr.w	r3, [sl, #-8]
 801a62e:	9905      	ldr	r1, [sp, #20]
 801a630:	f85a 2c04 	ldr.w	r2, [sl, #-4]
 801a634:	9311      	str	r3, [sp, #68]	; 0x44
 801a636:	290f      	cmp	r1, #15
 801a638:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a63a:	9211      	str	r2, [sp, #68]	; 0x44
 801a63c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a63e:	9c07      	ldr	r4, [sp, #28]
 801a640:	f340 819c 	ble.w	801a97c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3c0>
 801a644:	4601      	mov	r1, r0
 801a646:	f8d4 c000 	ldr.w	ip, [r4]
 801a64a:	680e      	ldr	r6, [r1, #0]
 801a64c:	fb26 330c 	smlad	r3, r6, ip, r3
 801a650:	684d      	ldr	r5, [r1, #4]
 801a652:	fb25 220c 	smlad	r2, r5, ip, r2
 801a656:	f8d4 c004 	ldr.w	ip, [r4, #4]
 801a65a:	688e      	ldr	r6, [r1, #8]
 801a65c:	fb26 360c 	smlad	r6, r6, ip, r3
 801a660:	68cd      	ldr	r5, [r1, #12]
 801a662:	fb25 250c 	smlad	r5, r5, ip, r2
 801a666:	f8d4 c008 	ldr.w	ip, [r4, #8]
 801a66a:	690b      	ldr	r3, [r1, #16]
 801a66c:	fb23 660c 	smlad	r6, r3, ip, r6
 801a670:	694a      	ldr	r2, [r1, #20]
 801a672:	fb22 550c 	smlad	r5, r2, ip, r5
 801a676:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801a67a:	698b      	ldr	r3, [r1, #24]
 801a67c:	fb23 630c 	smlad	r3, r3, ip, r6
 801a680:	69ca      	ldr	r2, [r1, #28]
 801a682:	fb22 520c 	smlad	r2, r2, ip, r5
 801a686:	f8d4 c010 	ldr.w	ip, [r4, #16]
 801a68a:	6a0e      	ldr	r6, [r1, #32]
 801a68c:	fb26 330c 	smlad	r3, r6, ip, r3
 801a690:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 801a692:	fb25 220c 	smlad	r2, r5, ip, r2
 801a696:	f8d4 c014 	ldr.w	ip, [r4, #20]
 801a69a:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 801a69c:	fb26 360c 	smlad	r6, r6, ip, r3
 801a6a0:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 801a6a2:	fb25 250c 	smlad	r5, r5, ip, r2
 801a6a6:	f8d4 c018 	ldr.w	ip, [r4, #24]
 801a6aa:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 801a6ac:	fb23 660c 	smlad	r6, r3, ip, r6
 801a6b0:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 801a6b2:	fb22 550c 	smlad	r5, r2, ip, r5
 801a6b6:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 801a6ba:	3140      	adds	r1, #64	; 0x40
 801a6bc:	f851 3c08 	ldr.w	r3, [r1, #-8]
 801a6c0:	3420      	adds	r4, #32
 801a6c2:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801a6c6:	fb23 630c 	smlad	r3, r3, ip, r6
 801a6ca:	fb22 520c 	smlad	r2, r2, ip, r5
 801a6ce:	42bc      	cmp	r4, r7
 801a6d0:	d1b9      	bne.n	801a646 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x8a>
 801a6d2:	990a      	ldr	r1, [sp, #40]	; 0x28
 801a6d4:	463c      	mov	r4, r7
 801a6d6:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 801a6da:	4408      	add	r0, r1
 801a6dc:	9908      	ldr	r1, [sp, #32]
 801a6de:	458e      	cmp	lr, r1
 801a6e0:	da25      	bge.n	801a72e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x172>
 801a6e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a6e4:	eba1 090e 	sub.w	r9, r1, lr
 801a6e8:	4601      	mov	r1, r0
 801a6ea:	ea4f 0999 	mov.w	r9, r9, lsr #2
 801a6ee:	f109 0501 	add.w	r5, r9, #1
 801a6f2:	eb04 08c5 	add.w	r8, r4, r5, lsl #3
 801a6f6:	9506      	str	r5, [sp, #24]
 801a6f8:	6825      	ldr	r5, [r4, #0]
 801a6fa:	680e      	ldr	r6, [r1, #0]
 801a6fc:	fb26 3305 	smlad	r3, r6, r5, r3
 801a700:	684e      	ldr	r6, [r1, #4]
 801a702:	fb26 2505 	smlad	r5, r6, r5, r2
 801a706:	6866      	ldr	r6, [r4, #4]
 801a708:	3110      	adds	r1, #16
 801a70a:	f851 cc08 	ldr.w	ip, [r1, #-8]
 801a70e:	3408      	adds	r4, #8
 801a710:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801a714:	fb2c 3306 	smlad	r3, ip, r6, r3
 801a718:	fb22 5206 	smlad	r2, r2, r6, r5
 801a71c:	45a0      	cmp	r8, r4
 801a71e:	d1eb      	bne.n	801a6f8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x13c>
 801a720:	9906      	ldr	r1, [sp, #24]
 801a722:	f10e 0e04 	add.w	lr, lr, #4
 801a726:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 801a72a:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 801a72e:	9e05      	ldr	r6, [sp, #20]
 801a730:	4576      	cmp	r6, lr
 801a732:	dd30      	ble.n	801a796 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1da>
 801a734:	f9b4 1000 	ldrsh.w	r1, [r4]
 801a738:	8805      	ldrh	r5, [r0, #0]
 801a73a:	fb15 3301 	smlabb	r3, r5, r1, r3
 801a73e:	8845      	ldrh	r5, [r0, #2]
 801a740:	fb11 2205 	smlabb	r2, r1, r5, r2
 801a744:	f10e 0101 	add.w	r1, lr, #1
 801a748:	428e      	cmp	r6, r1
 801a74a:	dd1f      	ble.n	801a78c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1d0>
 801a74c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801a750:	8885      	ldrh	r5, [r0, #4]
 801a752:	fb15 3301 	smlabb	r3, r5, r1, r3
 801a756:	88c5      	ldrh	r5, [r0, #6]
 801a758:	fb11 2205 	smlabb	r2, r1, r5, r2
 801a75c:	f10e 0102 	add.w	r1, lr, #2
 801a760:	428e      	cmp	r6, r1
 801a762:	dd13      	ble.n	801a78c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1d0>
 801a764:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801a768:	8905      	ldrh	r5, [r0, #8]
 801a76a:	fb15 3301 	smlabb	r3, r5, r1, r3
 801a76e:	8945      	ldrh	r5, [r0, #10]
 801a770:	fb11 2205 	smlabb	r2, r1, r5, r2
 801a774:	f10e 0103 	add.w	r1, lr, #3
 801a778:	428e      	cmp	r6, r1
 801a77a:	dd07      	ble.n	801a78c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1d0>
 801a77c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801a780:	8984      	ldrh	r4, [r0, #12]
 801a782:	fb14 3301 	smlabb	r3, r4, r1, r3
 801a786:	89c4      	ldrh	r4, [r0, #14]
 801a788:	fb11 2204 	smlabb	r2, r1, r4, r2
 801a78c:	9905      	ldr	r1, [sp, #20]
 801a78e:	eba1 0e0e 	sub.w	lr, r1, lr
 801a792:	eb00 008e 	add.w	r0, r0, lr, lsl #2
 801a796:	9902      	ldr	r1, [sp, #8]
 801a798:	f931 5c04 	ldrsh.w	r5, [r1, #-4]
 801a79c:	2d15      	cmp	r5, #21
 801a79e:	f340 80b0 	ble.w	801a902 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x346>
 801a7a2:	9e04      	ldr	r6, [sp, #16]
 801a7a4:	1eac      	subs	r4, r5, #2
 801a7a6:	2101      	movs	r1, #1
 801a7a8:	3d01      	subs	r5, #1
 801a7aa:	f1a6 0e04 	sub.w	lr, r6, #4
 801a7ae:	fa01 f404 	lsl.w	r4, r1, r4
 801a7b2:	f856 1c08 	ldr.w	r1, [r6, #-8]
 801a7b6:	fb53 4401 	smmla	r4, r3, r1, r4
 801a7ba:	9b01      	ldr	r3, [sp, #4]
 801a7bc:	fa44 f505 	asr.w	r5, r4, r5
 801a7c0:	f853 4c08 	ldr.w	r4, [r3, #-8]
 801a7c4:	1f1e      	subs	r6, r3, #4
 801a7c6:	442c      	add	r4, r5
 801a7c8:	f304 0407 	ssat	r4, #8, r4
 801a7cc:	f80b 4c02 	strb.w	r4, [fp, #-2]
 801a7d0:	9b03      	ldr	r3, [sp, #12]
 801a7d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a7d6:	2b15      	cmp	r3, #21
 801a7d8:	f340 8085 	ble.w	801a8e6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x32a>
 801a7dc:	1e9c      	subs	r4, r3, #2
 801a7de:	2501      	movs	r5, #1
 801a7e0:	3b01      	subs	r3, #1
 801a7e2:	6836      	ldr	r6, [r6, #0]
 801a7e4:	f8de 1000 	ldr.w	r1, [lr]
 801a7e8:	fa05 f404 	lsl.w	r4, r5, r4
 801a7ec:	fb52 4201 	smmla	r2, r2, r1, r4
 801a7f0:	411a      	asrs	r2, r3
 801a7f2:	4432      	add	r2, r6
 801a7f4:	f302 0207 	ssat	r2, #8, r2
 801a7f8:	f80b 2c01 	strb.w	r2, [fp, #-1]
 801a7fc:	9b02      	ldr	r3, [sp, #8]
 801a7fe:	f10b 0b02 	add.w	fp, fp, #2
 801a802:	f10a 0a08 	add.w	sl, sl, #8
 801a806:	3304      	adds	r3, #4
 801a808:	9302      	str	r3, [sp, #8]
 801a80a:	9b04      	ldr	r3, [sp, #16]
 801a80c:	3308      	adds	r3, #8
 801a80e:	9304      	str	r3, [sp, #16]
 801a810:	9b01      	ldr	r3, [sp, #4]
 801a812:	3308      	adds	r3, #8
 801a814:	9301      	str	r3, [sp, #4]
 801a816:	9b03      	ldr	r3, [sp, #12]
 801a818:	3304      	adds	r3, #4
 801a81a:	9303      	str	r3, [sp, #12]
 801a81c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a81e:	459b      	cmp	fp, r3
 801a820:	f47f af03 	bne.w	801a62a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x6e>
 801a824:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a826:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801a828:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801a82c:	921e      	str	r2, [sp, #120]	; 0x78
 801a82e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801a830:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801a834:	921f      	str	r2, [sp, #124]	; 0x7c
 801a836:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a838:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801a83c:	9220      	str	r2, [sp, #128]	; 0x80
 801a83e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a840:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801a844:	920d      	str	r2, [sp, #52]	; 0x34
 801a846:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a848:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801a84c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a84e:	07db      	lsls	r3, r3, #31
 801a850:	d545      	bpl.n	801a8de <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x322>
 801a852:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a854:	681a      	ldr	r2, [r3, #0]
 801a856:	9b05      	ldr	r3, [sp, #20]
 801a858:	089e      	lsrs	r6, r3, #2
 801a85a:	d014      	beq.n	801a886 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2ca>
 801a85c:	00f7      	lsls	r7, r6, #3
 801a85e:	9b07      	ldr	r3, [sp, #28]
 801a860:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 801a864:	6805      	ldr	r5, [r0, #0]
 801a866:	3008      	adds	r0, #8
 801a868:	f850 4c04 	ldr.w	r4, [r0, #-4]
 801a86c:	f8d3 c000 	ldr.w	ip, [r3]
 801a870:	fb25 220c 	smlad	r2, r5, ip, r2
 801a874:	685d      	ldr	r5, [r3, #4]
 801a876:	3308      	adds	r3, #8
 801a878:	fb24 2205 	smlad	r2, r4, r5, r2
 801a87c:	4286      	cmp	r6, r0
 801a87e:	d1f1      	bne.n	801a864 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2a8>
 801a880:	9b07      	ldr	r3, [sp, #28]
 801a882:	443b      	add	r3, r7
 801a884:	9307      	str	r3, [sp, #28]
 801a886:	9b05      	ldr	r3, [sp, #20]
 801a888:	f013 0303 	ands.w	r3, r3, #3
 801a88c:	d011      	beq.n	801a8b2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2f6>
 801a88e:	3b01      	subs	r3, #1
 801a890:	9e07      	ldr	r6, [sp, #28]
 801a892:	8804      	ldrh	r4, [r0, #0]
 801a894:	8835      	ldrh	r5, [r6, #0]
 801a896:	b29b      	uxth	r3, r3
 801a898:	fb15 2204 	smlabb	r2, r5, r4, r2
 801a89c:	b14b      	cbz	r3, 801a8b2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2f6>
 801a89e:	8845      	ldrh	r5, [r0, #2]
 801a8a0:	2b01      	cmp	r3, #1
 801a8a2:	8874      	ldrh	r4, [r6, #2]
 801a8a4:	fb15 2204 	smlabb	r2, r5, r4, r2
 801a8a8:	d003      	beq.n	801a8b2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2f6>
 801a8aa:	8880      	ldrh	r0, [r0, #4]
 801a8ac:	88b3      	ldrh	r3, [r6, #4]
 801a8ae:	fb10 2203 	smlabb	r2, r0, r3, r2
 801a8b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801a8b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a8b8:	2b15      	cmp	r3, #21
 801a8ba:	dd62      	ble.n	801a982 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3c6>
 801a8bc:	9c20      	ldr	r4, [sp, #128]	; 0x80
 801a8be:	1e9e      	subs	r6, r3, #2
 801a8c0:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801a8c2:	3b01      	subs	r3, #1
 801a8c4:	6825      	ldr	r5, [r4, #0]
 801a8c6:	2401      	movs	r4, #1
 801a8c8:	6800      	ldr	r0, [r0, #0]
 801a8ca:	40b4      	lsls	r4, r6
 801a8cc:	fb52 4200 	smmla	r2, r2, r0, r4
 801a8d0:	fa42 f303 	asr.w	r3, r2, r3
 801a8d4:	442b      	add	r3, r5
 801a8d6:	f303 0307 	ssat	r3, #8, r3
 801a8da:	f801 3b01 	strb.w	r3, [r1], #1
 801a8de:	4608      	mov	r0, r1
 801a8e0:	b013      	add	sp, #76	; 0x4c
 801a8e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8e6:	2b00      	cmp	r3, #0
 801a8e8:	dd21      	ble.n	801a92e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x372>
 801a8ea:	f8de 1000 	ldr.w	r1, [lr]
 801a8ee:	0052      	lsls	r2, r2, #1
 801a8f0:	6834      	ldr	r4, [r6, #0]
 801a8f2:	fb52 4201 	smmla	r2, r2, r1, r4
 801a8f6:	411a      	asrs	r2, r3
 801a8f8:	f302 0307 	ssat	r3, #8, r2
 801a8fc:	f80b 3c01 	strb.w	r3, [fp, #-1]
 801a900:	e77c      	b.n	801a7fc <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x240>
 801a902:	2d00      	cmp	r5, #0
 801a904:	dd24      	ble.n	801a950 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x394>
 801a906:	9e04      	ldr	r6, [sp, #16]
 801a908:	005b      	lsls	r3, r3, #1
 801a90a:	9c01      	ldr	r4, [sp, #4]
 801a90c:	f856 1c08 	ldr.w	r1, [r6, #-8]
 801a910:	f1a6 0e04 	sub.w	lr, r6, #4
 801a914:	f854 4c08 	ldr.w	r4, [r4, #-8]
 801a918:	fb53 4301 	smmla	r3, r3, r1, r4
 801a91c:	9c01      	ldr	r4, [sp, #4]
 801a91e:	fa43 f505 	asr.w	r5, r3, r5
 801a922:	1f26      	subs	r6, r4, #4
 801a924:	f305 0507 	ssat	r5, #8, r5
 801a928:	f80b 5c02 	strb.w	r5, [fp, #-2]
 801a92c:	e750      	b.n	801a7d0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x214>
 801a92e:	f1c3 0301 	rsb	r3, r3, #1
 801a932:	fa02 f303 	lsl.w	r3, r2, r3
 801a936:	f303 031f 	ssat	r3, #32, r3
 801a93a:	f8de 2000 	ldr.w	r2, [lr]
 801a93e:	fb53 f312 	smmulr	r3, r3, r2
 801a942:	6832      	ldr	r2, [r6, #0]
 801a944:	441a      	add	r2, r3
 801a946:	f302 0207 	ssat	r2, #8, r2
 801a94a:	f80b 2c01 	strb.w	r2, [fp, #-1]
 801a94e:	e755      	b.n	801a7fc <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x240>
 801a950:	f1c5 0501 	rsb	r5, r5, #1
 801a954:	40ab      	lsls	r3, r5
 801a956:	f303 031f 	ssat	r3, #32, r3
 801a95a:	9904      	ldr	r1, [sp, #16]
 801a95c:	f1a1 0e04 	sub.w	lr, r1, #4
 801a960:	f851 1c08 	ldr.w	r1, [r1, #-8]
 801a964:	fb53 f111 	smmulr	r1, r3, r1
 801a968:	9c01      	ldr	r4, [sp, #4]
 801a96a:	f854 3c08 	ldr.w	r3, [r4, #-8]
 801a96e:	1f26      	subs	r6, r4, #4
 801a970:	440b      	add	r3, r1
 801a972:	f303 0307 	ssat	r3, #8, r3
 801a976:	f80b 3c02 	strb.w	r3, [fp, #-2]
 801a97a:	e729      	b.n	801a7d0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x214>
 801a97c:	f04f 0e00 	mov.w	lr, #0
 801a980:	e6ac      	b.n	801a6dc <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x120>
 801a982:	2b00      	cmp	r3, #0
 801a984:	dd10      	ble.n	801a9a8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3ec>
 801a986:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801a988:	0052      	lsls	r2, r2, #1
 801a98a:	9c20      	ldr	r4, [sp, #128]	; 0x80
 801a98c:	6800      	ldr	r0, [r0, #0]
 801a98e:	6824      	ldr	r4, [r4, #0]
 801a990:	fb52 4200 	smmla	r2, r2, r0, r4
 801a994:	fa42 f303 	asr.w	r3, r2, r3
 801a998:	f303 0307 	ssat	r3, #8, r3
 801a99c:	f801 3b01 	strb.w	r3, [r1], #1
 801a9a0:	4608      	mov	r0, r1
 801a9a2:	b013      	add	sp, #76	; 0x4c
 801a9a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9a8:	f1c3 0301 	rsb	r3, r3, #1
 801a9ac:	fa02 f303 	lsl.w	r3, r2, r3
 801a9b0:	f303 031f 	ssat	r3, #32, r3
 801a9b4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801a9b6:	6812      	ldr	r2, [r2, #0]
 801a9b8:	fb53 f312 	smmulr	r3, r3, r2
 801a9bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a9be:	6812      	ldr	r2, [r2, #0]
 801a9c0:	4413      	add	r3, r2
 801a9c2:	f303 0307 	ssat	r3, #8, r3
 801a9c6:	f801 3b01 	strb.w	r3, [r1], #1
 801a9ca:	4608      	mov	r0, r1
 801a9cc:	b013      	add	sp, #76	; 0x4c
 801a9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9d2:	9921      	ldr	r1, [sp, #132]	; 0x84
 801a9d4:	e73a      	b.n	801a84c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x290>
 801a9d6:	bf00      	nop

0801a9d8 <st_int8_avepool>:
 801a9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9dc:	b095      	sub	sp, #84	; 0x54
 801a9de:	4699      	mov	r9, r3
 801a9e0:	4692      	mov	sl, r2
 801a9e2:	ee80 6a20 	vdiv.f32	s12, s0, s1
 801a9e6:	9102      	str	r1, [sp, #8]
 801a9e8:	f8bd 108c 	ldrh.w	r1, [sp, #140]	; 0x8c
 801a9ec:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 801a9f0:	910f      	str	r1, [sp, #60]	; 0x3c
 801a9f2:	f8bd 1090 	ldrh.w	r1, [sp, #144]	; 0x90
 801a9f6:	930d      	str	r3, [sp, #52]	; 0x34
 801a9f8:	9110      	str	r1, [sp, #64]	; 0x40
 801a9fa:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 801a9fe:	f8bd 1094 	ldrh.w	r1, [sp, #148]	; 0x94
 801aa02:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
 801aa06:	9309      	str	r3, [sp, #36]	; 0x24
 801aa08:	9104      	str	r1, [sp, #16]
 801aa0a:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 801aa0e:	f99d 109c 	ldrsb.w	r1, [sp, #156]	; 0x9c
 801aa12:	930e      	str	r3, [sp, #56]	; 0x38
 801aa14:	ee03 1a90 	vmov	s7, r1
 801aa18:	f8bd 8078 	ldrh.w	r8, [sp, #120]	; 0x78
 801aa1c:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 801aa20:	f99d 10a0 	ldrsb.w	r1, [sp, #160]	; 0xa0
 801aa24:	9211      	str	r2, [sp, #68]	; 0x44
 801aa26:	2a00      	cmp	r2, #0
 801aa28:	f000 80b3 	beq.w	801ab92 <st_int8_avepool+0x1ba>
 801aa2c:	eeb4 0a60 	vcmp.f32	s0, s1
 801aa30:	ee03 1a10 	vmov	s6, r1
 801aa34:	4683      	mov	fp, r0
 801aa36:	ee13 1a90 	vmov	r1, s7
 801aa3a:	ee13 0a10 	vmov	r0, s6
 801aa3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa42:	bf0c      	ite	eq
 801aa44:	2201      	moveq	r2, #1
 801aa46:	2200      	movne	r2, #0
 801aa48:	4281      	cmp	r1, r0
 801aa4a:	bf14      	ite	ne
 801aa4c:	2200      	movne	r2, #0
 801aa4e:	f002 0201 	andeq.w	r2, r2, #1
 801aa52:	f1b8 0f01 	cmp.w	r8, #1
 801aa56:	9201      	str	r2, [sp, #4]
 801aa58:	f040 80c2 	bne.w	801abe0 <st_int8_avepool+0x208>
 801aa5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801aa5e:	eddf 5a5e 	vldr	s11, [pc, #376]	; 801abd8 <st_int8_avepool+0x200>
 801aa62:	1ad3      	subs	r3, r2, r3
 801aa64:	eddf 2a5d 	vldr	s5, [pc, #372]	; 801abdc <st_int8_avepool+0x204>
 801aa68:	e9dd 120d 	ldrd	r1, r2, [sp, #52]	; 0x34
 801aa6c:	b29b      	uxth	r3, r3
 801aa6e:	1a89      	subs	r1, r1, r2
 801aa70:	4252      	negs	r2, r2
 801aa72:	9306      	str	r3, [sp, #24]
 801aa74:	b293      	uxth	r3, r2
 801aa76:	2200      	movs	r2, #0
 801aa78:	910d      	str	r1, [sp, #52]	; 0x34
 801aa7a:	930c      	str	r3, [sp, #48]	; 0x30
 801aa7c:	4613      	mov	r3, r2
 801aa7e:	9904      	ldr	r1, [sp, #16]
 801aa80:	2900      	cmp	r1, #0
 801aa82:	f000 80a6 	beq.w	801abd2 <st_int8_avepool+0x1fa>
 801aa86:	b292      	uxth	r2, r2
 801aa88:	2100      	movs	r1, #0
 801aa8a:	eeb8 4ae3 	vcvt.f32.s32	s8, s7
 801aa8e:	9207      	str	r2, [sp, #28]
 801aa90:	eef8 4ac3 	vcvt.f32.s32	s9, s6
 801aa94:	9a04      	ldr	r2, [sp, #16]
 801aa96:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 801aa9a:	4688      	mov	r8, r1
 801aa9c:	fb02 f303 	mul.w	r3, r2, r3
 801aaa0:	9a06      	ldr	r2, [sp, #24]
 801aaa2:	9308      	str	r3, [sp, #32]
 801aaa4:	fa0f fe82 	sxth.w	lr, r2
 801aaa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aaaa:	1ad3      	subs	r3, r2, r3
 801aaac:	b21b      	sxth	r3, r3
 801aaae:	930b      	str	r3, [sp, #44]	; 0x2c
 801aab0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801aab2:	9303      	str	r3, [sp, #12]
 801aab4:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801aab8:	9305      	str	r3, [sp, #20]
 801aaba:	b28b      	uxth	r3, r1
 801aabc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801aabe:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801aac2:	930a      	str	r3, [sp, #40]	; 0x28
 801aac4:	4570      	cmp	r0, lr
 801aac6:	9b08      	ldr	r3, [sp, #32]
 801aac8:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801aacc:	4498      	add	r8, r3
 801aace:	da79      	bge.n	801abc4 <st_int8_avepool+0x1ec>
 801aad0:	2700      	movs	r7, #0
 801aad2:	46bc      	mov	ip, r7
 801aad4:	42a6      	cmp	r6, r4
 801aad6:	da17      	bge.n	801ab08 <st_int8_avepool+0x130>
 801aad8:	43c5      	mvns	r5, r0
 801aada:	4548      	cmp	r0, r9
 801aadc:	fb0a f200 	mul.w	r2, sl, r0
 801aae0:	ea4f 75d5 	mov.w	r5, r5, lsr #31
 801aae4:	da10      	bge.n	801ab08 <st_int8_avepool+0x130>
 801aae6:	4432      	add	r2, r6
 801aae8:	4633      	mov	r3, r6
 801aaea:	445a      	add	r2, fp
 801aaec:	0419      	lsls	r1, r3, #16
 801aaee:	d406      	bmi.n	801aafe <st_int8_avepool+0x126>
 801aaf0:	b12d      	cbz	r5, 801aafe <st_int8_avepool+0x126>
 801aaf2:	4553      	cmp	r3, sl
 801aaf4:	da03      	bge.n	801aafe <st_int8_avepool+0x126>
 801aaf6:	f992 1000 	ldrsb.w	r1, [r2]
 801aafa:	3701      	adds	r7, #1
 801aafc:	448c      	add	ip, r1
 801aafe:	3301      	adds	r3, #1
 801ab00:	3201      	adds	r2, #1
 801ab02:	b219      	sxth	r1, r3
 801ab04:	42a1      	cmp	r1, r4
 801ab06:	dbf1      	blt.n	801aaec <st_int8_avepool+0x114>
 801ab08:	3001      	adds	r0, #1
 801ab0a:	b200      	sxth	r0, r0
 801ab0c:	4570      	cmp	r0, lr
 801ab0e:	dbe1      	blt.n	801aad4 <st_int8_avepool+0xfc>
 801ab10:	9b01      	ldr	r3, [sp, #4]
 801ab12:	2b00      	cmp	r3, #0
 801ab14:	d140      	bne.n	801ab98 <st_int8_avepool+0x1c0>
 801ab16:	ee07 ca90 	vmov	s15, ip
 801ab1a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801ab1e:	ee07 7a90 	vmov	s15, r7
 801ab22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801ab26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ab2a:	ee77 7ac4 	vsub.f32	s15, s15, s8
 801ab2e:	eeb0 7a64 	vmov.f32	s14, s9
 801ab32:	eea6 7a27 	vfma.f32	s14, s12, s15
 801ab36:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801ab3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab3e:	fe65 7a25 	vselge.f32	s15, s10, s11
 801ab42:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ab46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ab4a:	ee17 3a90 	vmov	r3, s15
 801ab4e:	f303 0307 	ssat	r3, #8, r3
 801ab52:	9a02      	ldr	r2, [sp, #8]
 801ab54:	f802 3008 	strb.w	r3, [r2, r8]
 801ab58:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801ab5a:	9b05      	ldr	r3, [sp, #20]
 801ab5c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801ab5e:	4403      	add	r3, r0
 801ab60:	9a03      	ldr	r2, [sp, #12]
 801ab62:	3101      	adds	r1, #1
 801ab64:	b29b      	uxth	r3, r3
 801ab66:	4402      	add	r2, r0
 801ab68:	b209      	sxth	r1, r1
 801ab6a:	9305      	str	r3, [sp, #20]
 801ab6c:	b292      	uxth	r2, r2
 801ab6e:	9b04      	ldr	r3, [sp, #16]
 801ab70:	4688      	mov	r8, r1
 801ab72:	9203      	str	r2, [sp, #12]
 801ab74:	428b      	cmp	r3, r1
 801ab76:	dca0      	bgt.n	801aaba <st_int8_avepool+0xe2>
 801ab78:	9a07      	ldr	r2, [sp, #28]
 801ab7a:	9b06      	ldr	r3, [sp, #24]
 801ab7c:	9910      	ldr	r1, [sp, #64]	; 0x40
 801ab7e:	3201      	adds	r2, #1
 801ab80:	440b      	add	r3, r1
 801ab82:	b212      	sxth	r2, r2
 801ab84:	9911      	ldr	r1, [sp, #68]	; 0x44
 801ab86:	b29b      	uxth	r3, r3
 801ab88:	4291      	cmp	r1, r2
 801ab8a:	9306      	str	r3, [sp, #24]
 801ab8c:	4613      	mov	r3, r2
 801ab8e:	f73f af76 	bgt.w	801aa7e <st_int8_avepool+0xa6>
 801ab92:	b015      	add	sp, #84	; 0x54
 801ab94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab98:	f1bc 0f00 	cmp.w	ip, #0
 801ab9c:	db09      	blt.n	801abb2 <st_int8_avepool+0x1da>
 801ab9e:	eb0c 0367 	add.w	r3, ip, r7, asr #1
 801aba2:	fbb3 f7f7 	udiv	r7, r3, r7
 801aba6:	f307 0307 	ssat	r3, #8, r7
 801abaa:	9a02      	ldr	r2, [sp, #8]
 801abac:	f802 3008 	strb.w	r3, [r2, r8]
 801abb0:	e7d2      	b.n	801ab58 <st_int8_avepool+0x180>
 801abb2:	2f00      	cmp	r7, #0
 801abb4:	463b      	mov	r3, r7
 801abb6:	bfb8      	it	lt
 801abb8:	1c7b      	addlt	r3, r7, #1
 801abba:	ebac 0363 	sub.w	r3, ip, r3, asr #1
 801abbe:	fb93 f7f7 	sdiv	r7, r3, r7
 801abc2:	e7f0      	b.n	801aba6 <st_int8_avepool+0x1ce>
 801abc4:	9b01      	ldr	r3, [sp, #4]
 801abc6:	2b00      	cmp	r3, #0
 801abc8:	f040 80df 	bne.w	801ad8a <st_int8_avepool+0x3b2>
 801abcc:	eef0 7a62 	vmov.f32	s15, s5
 801abd0:	e7ab      	b.n	801ab2a <st_int8_avepool+0x152>
 801abd2:	b293      	uxth	r3, r2
 801abd4:	9307      	str	r3, [sp, #28]
 801abd6:	e7cf      	b.n	801ab78 <st_int8_avepool+0x1a0>
 801abd8:	befffffc 	.word	0xbefffffc
 801abdc:	7fc00000 	.word	0x7fc00000
 801abe0:	425b      	negs	r3, r3
 801abe2:	2200      	movs	r2, #0
 801abe4:	9904      	ldr	r1, [sp, #16]
 801abe6:	b29b      	uxth	r3, r3
 801abe8:	f8cd b00c 	str.w	fp, [sp, #12]
 801abec:	ed5f 5a06 	vldr	s11, [pc, #-24]	; 801abd8 <st_int8_avepool+0x200>
 801abf0:	46d3      	mov	fp, sl
 801abf2:	9308      	str	r3, [sp, #32]
 801abf4:	46ca      	mov	sl, r9
 801abf6:	ed5f 6a07 	vldr	s13, [pc, #-28]	; 801abdc <st_int8_avepool+0x204>
 801abfa:	4613      	mov	r3, r2
 801abfc:	2900      	cmp	r1, #0
 801abfe:	f000 80a3 	beq.w	801ad48 <st_int8_avepool+0x370>
 801ac02:	b292      	uxth	r2, r2
 801ac04:	2100      	movs	r1, #0
 801ac06:	eeb8 5ae3 	vcvt.f32.s32	s10, s7
 801ac0a:	920c      	str	r2, [sp, #48]	; 0x30
 801ac0c:	9a04      	ldr	r2, [sp, #16]
 801ac0e:	fb03 f302 	mul.w	r3, r3, r2
 801ac12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ac14:	9313      	str	r3, [sp, #76]	; 0x4c
 801ac16:	4253      	negs	r3, r2
 801ac18:	b29b      	uxth	r3, r3
 801ac1a:	9306      	str	r3, [sp, #24]
 801ac1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ac1e:	1a9b      	subs	r3, r3, r2
 801ac20:	b29b      	uxth	r3, r3
 801ac22:	9307      	str	r3, [sp, #28]
 801ac24:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801ac28:	4413      	add	r3, r2
 801ac2a:	fa0f fe83 	sxth.w	lr, r3
 801ac2e:	b213      	sxth	r3, r2
 801ac30:	930a      	str	r3, [sp, #40]	; 0x28
 801ac32:	460b      	mov	r3, r1
 801ac34:	f1b8 0f00 	cmp.w	r8, #0
 801ac38:	f000 80a4 	beq.w	801ad84 <st_int8_avepool+0x3ac>
 801ac3c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ac3e:	eeb8 4ac3 	vcvt.f32.s32	s8, s6
 801ac42:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 801ac46:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
 801ac4a:	4413      	add	r3, r2
 801ac4c:	b28a      	uxth	r2, r1
 801ac4e:	f9bd 501c 	ldrsh.w	r5, [sp, #28]
 801ac52:	920b      	str	r2, [sp, #44]	; 0x2c
 801ac54:	9a02      	ldr	r2, [sp, #8]
 801ac56:	fb08 2303 	mla	r3, r8, r3, r2
 801ac5a:	9312      	str	r3, [sp, #72]	; 0x48
 801ac5c:	2300      	movs	r3, #0
 801ac5e:	4699      	mov	r9, r3
 801ac60:	9305      	str	r3, [sp, #20]
 801ac62:	980a      	ldr	r0, [sp, #40]	; 0x28
 801ac64:	4570      	cmp	r0, lr
 801ac66:	f280 8088 	bge.w	801ad7a <st_int8_avepool+0x3a2>
 801ac6a:	2700      	movs	r7, #0
 801ac6c:	46bc      	mov	ip, r7
 801ac6e:	42ae      	cmp	r6, r5
 801ac70:	da1a      	bge.n	801aca8 <st_int8_avepool+0x2d0>
 801ac72:	43c4      	mvns	r4, r0
 801ac74:	4550      	cmp	r0, sl
 801ac76:	fb0b f300 	mul.w	r3, fp, r0
 801ac7a:	f3c4 34c0 	ubfx	r4, r4, #15, #1
 801ac7e:	da13      	bge.n	801aca8 <st_int8_avepool+0x2d0>
 801ac80:	199a      	adds	r2, r3, r6
 801ac82:	9b03      	ldr	r3, [sp, #12]
 801ac84:	fb08 9202 	mla	r2, r8, r2, r9
 801ac88:	441a      	add	r2, r3
 801ac8a:	4633      	mov	r3, r6
 801ac8c:	0419      	lsls	r1, r3, #16
 801ac8e:	d406      	bmi.n	801ac9e <st_int8_avepool+0x2c6>
 801ac90:	b12c      	cbz	r4, 801ac9e <st_int8_avepool+0x2c6>
 801ac92:	459b      	cmp	fp, r3
 801ac94:	dd03      	ble.n	801ac9e <st_int8_avepool+0x2c6>
 801ac96:	f992 1000 	ldrsb.w	r1, [r2]
 801ac9a:	3701      	adds	r7, #1
 801ac9c:	448c      	add	ip, r1
 801ac9e:	3301      	adds	r3, #1
 801aca0:	4442      	add	r2, r8
 801aca2:	b219      	sxth	r1, r3
 801aca4:	42a9      	cmp	r1, r5
 801aca6:	dbf1      	blt.n	801ac8c <st_int8_avepool+0x2b4>
 801aca8:	3001      	adds	r0, #1
 801acaa:	b200      	sxth	r0, r0
 801acac:	4570      	cmp	r0, lr
 801acae:	dbde      	blt.n	801ac6e <st_int8_avepool+0x296>
 801acb0:	9b01      	ldr	r3, [sp, #4]
 801acb2:	2b00      	cmp	r3, #0
 801acb4:	d14b      	bne.n	801ad4e <st_int8_avepool+0x376>
 801acb6:	ee07 ca90 	vmov	s15, ip
 801acba:	eef8 2ae7 	vcvt.f32.s32	s5, s15
 801acbe:	ee07 7a90 	vmov	s15, r7
 801acc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801acc6:	eec2 7a87 	vdiv.f32	s15, s5, s14
 801acca:	ee77 7ac5 	vsub.f32	s15, s15, s10
 801acce:	eeb0 7a44 	vmov.f32	s14, s8
 801acd2:	eea7 7a86 	vfma.f32	s14, s15, s12
 801acd6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801acda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801acde:	fe64 7aa5 	vselge.f32	s15, s9, s11
 801ace2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ace6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801acea:	ee17 3a90 	vmov	r3, s15
 801acee:	f303 0307 	ssat	r3, #8, r3
 801acf2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801acf4:	f802 3009 	strb.w	r3, [r2, r9]
 801acf8:	9b05      	ldr	r3, [sp, #20]
 801acfa:	3301      	adds	r3, #1
 801acfc:	b21b      	sxth	r3, r3
 801acfe:	4543      	cmp	r3, r8
 801ad00:	4699      	mov	r9, r3
 801ad02:	9305      	str	r3, [sp, #20]
 801ad04:	dbad      	blt.n	801ac62 <st_int8_avepool+0x28a>
 801ad06:	9a06      	ldr	r2, [sp, #24]
 801ad08:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801ad0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ad0c:	4402      	add	r2, r0
 801ad0e:	9b07      	ldr	r3, [sp, #28]
 801ad10:	3101      	adds	r1, #1
 801ad12:	b292      	uxth	r2, r2
 801ad14:	4403      	add	r3, r0
 801ad16:	b209      	sxth	r1, r1
 801ad18:	9206      	str	r2, [sp, #24]
 801ad1a:	b29b      	uxth	r3, r3
 801ad1c:	9a04      	ldr	r2, [sp, #16]
 801ad1e:	9307      	str	r3, [sp, #28]
 801ad20:	460b      	mov	r3, r1
 801ad22:	4291      	cmp	r1, r2
 801ad24:	db86      	blt.n	801ac34 <st_int8_avepool+0x25c>
 801ad26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ad28:	9b08      	ldr	r3, [sp, #32]
 801ad2a:	9910      	ldr	r1, [sp, #64]	; 0x40
 801ad2c:	3201      	adds	r2, #1
 801ad2e:	440b      	add	r3, r1
 801ad30:	b212      	sxth	r2, r2
 801ad32:	9911      	ldr	r1, [sp, #68]	; 0x44
 801ad34:	b29b      	uxth	r3, r3
 801ad36:	4291      	cmp	r1, r2
 801ad38:	9308      	str	r3, [sp, #32]
 801ad3a:	4613      	mov	r3, r2
 801ad3c:	f77f af29 	ble.w	801ab92 <st_int8_avepool+0x1ba>
 801ad40:	9904      	ldr	r1, [sp, #16]
 801ad42:	2900      	cmp	r1, #0
 801ad44:	f47f af5d 	bne.w	801ac02 <st_int8_avepool+0x22a>
 801ad48:	b293      	uxth	r3, r2
 801ad4a:	930c      	str	r3, [sp, #48]	; 0x30
 801ad4c:	e7eb      	b.n	801ad26 <st_int8_avepool+0x34e>
 801ad4e:	f1bc 0f00 	cmp.w	ip, #0
 801ad52:	db09      	blt.n	801ad68 <st_int8_avepool+0x390>
 801ad54:	eb0c 0c67 	add.w	ip, ip, r7, asr #1
 801ad58:	fbbc f7f7 	udiv	r7, ip, r7
 801ad5c:	f307 0707 	ssat	r7, #8, r7
 801ad60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ad62:	f803 7009 	strb.w	r7, [r3, r9]
 801ad66:	e7c7      	b.n	801acf8 <st_int8_avepool+0x320>
 801ad68:	2f00      	cmp	r7, #0
 801ad6a:	463b      	mov	r3, r7
 801ad6c:	bfb8      	it	lt
 801ad6e:	1c7b      	addlt	r3, r7, #1
 801ad70:	ebac 0363 	sub.w	r3, ip, r3, asr #1
 801ad74:	fb93 f7f7 	sdiv	r7, r3, r7
 801ad78:	e7f0      	b.n	801ad5c <st_int8_avepool+0x384>
 801ad7a:	9b01      	ldr	r3, [sp, #4]
 801ad7c:	b92b      	cbnz	r3, 801ad8a <st_int8_avepool+0x3b2>
 801ad7e:	eef0 7a66 	vmov.f32	s15, s13
 801ad82:	e7a2      	b.n	801acca <st_int8_avepool+0x2f2>
 801ad84:	b28b      	uxth	r3, r1
 801ad86:	930b      	str	r3, [sp, #44]	; 0x2c
 801ad88:	e7bd      	b.n	801ad06 <st_int8_avepool+0x32e>
 801ad8a:	deff      	udf	#255	; 0xff

0801ad8c <arm_float_to_q15>:
 801ad8c:	b530      	push	{r4, r5, lr}
 801ad8e:	0895      	lsrs	r5, r2, #2
 801ad90:	d069      	beq.n	801ae66 <arm_float_to_q15+0xda>
 801ad92:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801ad96:	f100 0c10 	add.w	ip, r0, #16
 801ad9a:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 801ad9e:	ed9f 6a55 	vldr	s12, [pc, #340]	; 801aef4 <arm_float_to_q15+0x168>
 801ada2:	f101 0e08 	add.w	lr, r1, #8
 801ada6:	462c      	mov	r4, r5
 801ada8:	ed5c 7a04 	vldr	s15, [ip, #-16]
 801adac:	ee67 6a86 	vmul.f32	s13, s15, s12
 801adb0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801adb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801adb8:	fe77 7a25 	vselgt.f32	s15, s14, s11
 801adbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801adc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801adc4:	ee17 3a90 	vmov	r3, s15
 801adc8:	f303 030f 	ssat	r3, #16, r3
 801adcc:	f82e 3c08 	strh.w	r3, [lr, #-8]
 801add0:	ed5c 7a03 	vldr	s15, [ip, #-12]
 801add4:	ee67 6a86 	vmul.f32	s13, s15, s12
 801add8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801addc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ade0:	fe77 7a25 	vselgt.f32	s15, s14, s11
 801ade4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ade8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801adec:	ee17 3a90 	vmov	r3, s15
 801adf0:	f303 030f 	ssat	r3, #16, r3
 801adf4:	f82e 3c06 	strh.w	r3, [lr, #-6]
 801adf8:	ed5c 7a02 	vldr	s15, [ip, #-8]
 801adfc:	ee67 6a86 	vmul.f32	s13, s15, s12
 801ae00:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801ae04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae08:	fe77 7a25 	vselgt.f32	s15, s14, s11
 801ae0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ae10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ae14:	ee17 3a90 	vmov	r3, s15
 801ae18:	f303 030f 	ssat	r3, #16, r3
 801ae1c:	f82e 3c04 	strh.w	r3, [lr, #-4]
 801ae20:	ed5c 7a01 	vldr	s15, [ip, #-4]
 801ae24:	ee67 7a86 	vmul.f32	s15, s15, s12
 801ae28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ae2c:	ee77 6a87 	vadd.f32	s13, s15, s14
 801ae30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ae34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae38:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801ae3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ae40:	bfcc      	ite	gt
 801ae42:	ee16 3a90 	vmovgt	r3, s13
 801ae46:	ee17 3a90 	vmovle	r3, s15
 801ae4a:	f303 030f 	ssat	r3, #16, r3
 801ae4e:	3c01      	subs	r4, #1
 801ae50:	f82e 3c02 	strh.w	r3, [lr, #-2]
 801ae54:	f10c 0c10 	add.w	ip, ip, #16
 801ae58:	f10e 0e08 	add.w	lr, lr, #8
 801ae5c:	d1a4      	bne.n	801ada8 <arm_float_to_q15+0x1c>
 801ae5e:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 801ae62:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 801ae66:	f012 0203 	ands.w	r2, r2, #3
 801ae6a:	d042      	beq.n	801aef2 <arm_float_to_q15+0x166>
 801ae6c:	edd0 7a00 	vldr	s15, [r0]
 801ae70:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801ae74:	eddf 5a1f 	vldr	s11, [pc, #124]	; 801aef4 <arm_float_to_q15+0x168>
 801ae78:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 801ae7c:	ee67 6aa5 	vmul.f32	s13, s15, s11
 801ae80:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801ae84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae88:	fe77 7a06 	vselgt.f32	s15, s14, s12
 801ae8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ae90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ae94:	ee17 3a90 	vmov	r3, s15
 801ae98:	f303 030f 	ssat	r3, #16, r3
 801ae9c:	3a01      	subs	r2, #1
 801ae9e:	800b      	strh	r3, [r1, #0]
 801aea0:	d027      	beq.n	801aef2 <arm_float_to_q15+0x166>
 801aea2:	edd0 7a01 	vldr	s15, [r0, #4]
 801aea6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801aeaa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801aeae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aeb2:	fe77 6a06 	vselgt.f32	s13, s14, s12
 801aeb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801aeba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801aebe:	ee17 3a90 	vmov	r3, s15
 801aec2:	f303 030f 	ssat	r3, #16, r3
 801aec6:	2a01      	cmp	r2, #1
 801aec8:	804b      	strh	r3, [r1, #2]
 801aeca:	d012      	beq.n	801aef2 <arm_float_to_q15+0x166>
 801aecc:	edd0 7a02 	vldr	s15, [r0, #8]
 801aed0:	ee67 5aa5 	vmul.f32	s11, s15, s11
 801aed4:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801aed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aedc:	fe37 7a06 	vselgt.f32	s14, s14, s12
 801aee0:	ee37 7a25 	vadd.f32	s14, s14, s11
 801aee4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801aee8:	ee17 3a10 	vmov	r3, s14
 801aeec:	f303 030f 	ssat	r3, #16, r3
 801aef0:	808b      	strh	r3, [r1, #4]
 801aef2:	bd30      	pop	{r4, r5, pc}
 801aef4:	47000000 	.word	0x47000000

0801aef8 <arm_float_to_q7>:
 801aef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aefa:	0895      	lsrs	r5, r2, #2
 801aefc:	d06f      	beq.n	801afde <arm_float_to_q7+0xe6>
 801aefe:	f101 0c04 	add.w	ip, r1, #4
 801af02:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801af06:	eebe 5a00 	vmov.f32	s10, #224	; 0xbf000000 -0.5
 801af0a:	f100 0e10 	add.w	lr, r0, #16
 801af0e:	eddf 5a5f 	vldr	s11, [pc, #380]	; 801b08c <arm_float_to_q7+0x194>
 801af12:	00ae      	lsls	r6, r5, #2
 801af14:	eb0c 0485 	add.w	r4, ip, r5, lsl #2
 801af18:	ed5e 7a04 	vldr	s15, [lr, #-16]
 801af1c:	ee27 7aa5 	vmul.f32	s14, s15, s11
 801af20:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801af24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af28:	fe76 7a05 	vselgt.f32	s15, s12, s10
 801af2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801af30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801af34:	ee17 3a90 	vmov	r3, s15
 801af38:	b21b      	sxth	r3, r3
 801af3a:	f303 0307 	ssat	r3, #8, r3
 801af3e:	f80c 3c04 	strb.w	r3, [ip, #-4]
 801af42:	ed5e 7a03 	vldr	s15, [lr, #-12]
 801af46:	ee27 7aa5 	vmul.f32	s14, s15, s11
 801af4a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801af4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af52:	fe76 7a05 	vselgt.f32	s15, s12, s10
 801af56:	ee77 7a87 	vadd.f32	s15, s15, s14
 801af5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801af5e:	ee17 3a90 	vmov	r3, s15
 801af62:	b21b      	sxth	r3, r3
 801af64:	f303 0307 	ssat	r3, #8, r3
 801af68:	f80c 3c03 	strb.w	r3, [ip, #-3]
 801af6c:	ed5e 7a02 	vldr	s15, [lr, #-8]
 801af70:	ee27 7aa5 	vmul.f32	s14, s15, s11
 801af74:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801af78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af7c:	fe76 7a05 	vselgt.f32	s15, s12, s10
 801af80:	ee77 7a87 	vadd.f32	s15, s15, s14
 801af84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801af88:	ee17 3a90 	vmov	r3, s15
 801af8c:	b21b      	sxth	r3, r3
 801af8e:	f303 0307 	ssat	r3, #8, r3
 801af92:	f80c 3c02 	strb.w	r3, [ip, #-2]
 801af96:	ed5e 6a01 	vldr	s13, [lr, #-4]
 801af9a:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801af9e:	ee76 7a86 	vadd.f32	s15, s13, s12
 801afa2:	ee36 7ac6 	vsub.f32	s14, s13, s12
 801afa6:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801afaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801afae:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801afb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afb6:	ee17 3a90 	vmov	r3, s15
 801afba:	ee17 7a10 	vmov	r7, s14
 801afbe:	b21b      	sxth	r3, r3
 801afc0:	b23f      	sxth	r7, r7
 801afc2:	dd56      	ble.n	801b072 <arm_float_to_q7+0x17a>
 801afc4:	f303 0307 	ssat	r3, #8, r3
 801afc8:	f80c 3c01 	strb.w	r3, [ip, #-1]
 801afcc:	f10c 0c04 	add.w	ip, ip, #4
 801afd0:	f10e 0e10 	add.w	lr, lr, #16
 801afd4:	4564      	cmp	r4, ip
 801afd6:	d19f      	bne.n	801af18 <arm_float_to_q7+0x20>
 801afd8:	4431      	add	r1, r6
 801afda:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 801afde:	f012 0203 	ands.w	r2, r2, #3
 801afe2:	d045      	beq.n	801b070 <arm_float_to_q7+0x178>
 801afe4:	edd0 7a00 	vldr	s15, [r0]
 801afe8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801afec:	ed9f 5a27 	vldr	s10, [pc, #156]	; 801b08c <arm_float_to_q7+0x194>
 801aff0:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 801aff4:	ee67 6a85 	vmul.f32	s13, s15, s10
 801aff8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801affc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b000:	fe77 7a25 	vselgt.f32	s15, s14, s11
 801b004:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b008:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b00c:	ee17 3a90 	vmov	r3, s15
 801b010:	b21b      	sxth	r3, r3
 801b012:	f303 0307 	ssat	r3, #8, r3
 801b016:	3a01      	subs	r2, #1
 801b018:	700b      	strb	r3, [r1, #0]
 801b01a:	d029      	beq.n	801b070 <arm_float_to_q7+0x178>
 801b01c:	edd0 6a01 	vldr	s13, [r0, #4]
 801b020:	ee26 6a85 	vmul.f32	s12, s13, s10
 801b024:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801b028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b02c:	fe77 6a25 	vselgt.f32	s13, s14, s11
 801b030:	ee76 6a86 	vadd.f32	s13, s13, s12
 801b034:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801b038:	ee16 3a90 	vmov	r3, s13
 801b03c:	b21b      	sxth	r3, r3
 801b03e:	f303 0307 	ssat	r3, #8, r3
 801b042:	2a01      	cmp	r2, #1
 801b044:	704b      	strb	r3, [r1, #1]
 801b046:	d013      	beq.n	801b070 <arm_float_to_q7+0x178>
 801b048:	edd0 7a02 	vldr	s15, [r0, #8]
 801b04c:	ee27 5a85 	vmul.f32	s10, s15, s10
 801b050:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 801b054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b058:	fe77 7a25 	vselgt.f32	s15, s14, s11
 801b05c:	ee77 7a85 	vadd.f32	s15, s15, s10
 801b060:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b064:	ee17 3a90 	vmov	r3, s15
 801b068:	b21b      	sxth	r3, r3
 801b06a:	f303 0307 	ssat	r3, #8, r3
 801b06e:	708b      	strb	r3, [r1, #2]
 801b070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b072:	f307 0707 	ssat	r7, #8, r7
 801b076:	f80c 7c01 	strb.w	r7, [ip, #-1]
 801b07a:	f10c 0c04 	add.w	ip, ip, #4
 801b07e:	f10e 0e10 	add.w	lr, lr, #16
 801b082:	45a4      	cmp	ip, r4
 801b084:	f47f af48 	bne.w	801af18 <arm_float_to_q7+0x20>
 801b088:	e7a6      	b.n	801afd8 <arm_float_to_q7+0xe0>
 801b08a:	bf00      	nop
 801b08c:	43000000 	.word	0x43000000

0801b090 <arm_q15_to_float>:
 801b090:	b530      	push	{r4, r5, lr}
 801b092:	0894      	lsrs	r4, r2, #2
 801b094:	d038      	beq.n	801b108 <arm_q15_to_float+0x78>
 801b096:	f100 0c08 	add.w	ip, r0, #8
 801b09a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 801b158 <arm_q15_to_float+0xc8>
 801b09e:	f101 0310 	add.w	r3, r1, #16
 801b0a2:	46a6      	mov	lr, r4
 801b0a4:	f93c 5c08 	ldrsh.w	r5, [ip, #-8]
 801b0a8:	3310      	adds	r3, #16
 801b0aa:	f10c 0c08 	add.w	ip, ip, #8
 801b0ae:	f1be 0e01 	subs.w	lr, lr, #1
 801b0b2:	ee07 5a90 	vmov	s15, r5
 801b0b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b0ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b0be:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 801b0c2:	f93c 5c0e 	ldrsh.w	r5, [ip, #-14]
 801b0c6:	ee07 5a90 	vmov	s15, r5
 801b0ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b0ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b0d2:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 801b0d6:	f93c 5c0c 	ldrsh.w	r5, [ip, #-12]
 801b0da:	ee07 5a90 	vmov	s15, r5
 801b0de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b0e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b0e6:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 801b0ea:	f93c 5c0a 	ldrsh.w	r5, [ip, #-10]
 801b0ee:	ee07 5a90 	vmov	s15, r5
 801b0f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b0f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b0fa:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 801b0fe:	d1d1      	bne.n	801b0a4 <arm_q15_to_float+0x14>
 801b100:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 801b104:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 801b108:	f012 0203 	ands.w	r2, r2, #3
 801b10c:	d023      	beq.n	801b156 <arm_q15_to_float+0xc6>
 801b10e:	f9b0 3000 	ldrsh.w	r3, [r0]
 801b112:	3a01      	subs	r2, #1
 801b114:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801b158 <arm_q15_to_float+0xc8>
 801b118:	ee07 3a90 	vmov	s15, r3
 801b11c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b120:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b124:	edc1 7a00 	vstr	s15, [r1]
 801b128:	d015      	beq.n	801b156 <arm_q15_to_float+0xc6>
 801b12a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801b12e:	2a01      	cmp	r2, #1
 801b130:	ee07 3a90 	vmov	s15, r3
 801b134:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b138:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b13c:	edc1 7a01 	vstr	s15, [r1, #4]
 801b140:	d009      	beq.n	801b156 <arm_q15_to_float+0xc6>
 801b142:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801b146:	ee07 3a90 	vmov	s15, r3
 801b14a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b14e:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b152:	edc1 7a02 	vstr	s15, [r1, #8]
 801b156:	bd30      	pop	{r4, r5, pc}
 801b158:	38000000 	.word	0x38000000

0801b15c <arm_q7_to_float>:
 801b15c:	b530      	push	{r4, r5, lr}
 801b15e:	0894      	lsrs	r4, r2, #2
 801b160:	d036      	beq.n	801b1d0 <arm_q7_to_float+0x74>
 801b162:	1d03      	adds	r3, r0, #4
 801b164:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 801b168:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 801b220 <arm_q7_to_float+0xc4>
 801b16c:	f101 0010 	add.w	r0, r1, #16
 801b170:	f913 ec04 	ldrsb.w	lr, [r3, #-4]
 801b174:	3010      	adds	r0, #16
 801b176:	ee07 ea90 	vmov	s15, lr
 801b17a:	469e      	mov	lr, r3
 801b17c:	3304      	adds	r3, #4
 801b17e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b182:	45e6      	cmp	lr, ip
 801b184:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b188:	ed40 7a08 	vstr	s15, [r0, #-32]	; 0xffffffe0
 801b18c:	f913 5c07 	ldrsb.w	r5, [r3, #-7]
 801b190:	ee07 5a90 	vmov	s15, r5
 801b194:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b198:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b19c:	ed40 7a07 	vstr	s15, [r0, #-28]	; 0xffffffe4
 801b1a0:	f913 5c06 	ldrsb.w	r5, [r3, #-6]
 801b1a4:	ee07 5a90 	vmov	s15, r5
 801b1a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b1ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b1b0:	ed40 7a06 	vstr	s15, [r0, #-24]	; 0xffffffe8
 801b1b4:	f913 5c05 	ldrsb.w	r5, [r3, #-5]
 801b1b8:	ee07 5a90 	vmov	s15, r5
 801b1bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b1c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b1c4:	ed40 7a05 	vstr	s15, [r0, #-20]	; 0xffffffec
 801b1c8:	d1d2      	bne.n	801b170 <arm_q7_to_float+0x14>
 801b1ca:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 801b1ce:	4660      	mov	r0, ip
 801b1d0:	f012 0203 	ands.w	r2, r2, #3
 801b1d4:	d023      	beq.n	801b21e <arm_q7_to_float+0xc2>
 801b1d6:	f990 3000 	ldrsb.w	r3, [r0]
 801b1da:	3a01      	subs	r2, #1
 801b1dc:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801b220 <arm_q7_to_float+0xc4>
 801b1e0:	ee07 3a90 	vmov	s15, r3
 801b1e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b1e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b1ec:	edc1 7a00 	vstr	s15, [r1]
 801b1f0:	d015      	beq.n	801b21e <arm_q7_to_float+0xc2>
 801b1f2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801b1f6:	2a01      	cmp	r2, #1
 801b1f8:	ee07 3a90 	vmov	s15, r3
 801b1fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b200:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b204:	edc1 7a01 	vstr	s15, [r1, #4]
 801b208:	d009      	beq.n	801b21e <arm_q7_to_float+0xc2>
 801b20a:	f990 3002 	ldrsb.w	r3, [r0, #2]
 801b20e:	ee07 3a90 	vmov	s15, r3
 801b212:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b216:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b21a:	edc1 7a02 	vstr	s15, [r1, #8]
 801b21e:	bd30      	pop	{r4, r5, pc}
 801b220:	3c000000 	.word	0x3c000000

0801b224 <ai_version_get>:
 801b224:	0212      	lsls	r2, r2, #8
 801b226:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801b22a:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 801b22e:	4770      	bx	lr

0801b230 <get_tensor_byte_size>:
 801b230:	b430      	push	{r4, r5}
 801b232:	6985      	ldr	r5, [r0, #24]
 801b234:	68c4      	ldr	r4, [r0, #12]
 801b236:	6941      	ldr	r1, [r0, #20]
 801b238:	4b06      	ldr	r3, [pc, #24]	; (801b254 <get_tensor_byte_size+0x24>)
 801b23a:	6828      	ldr	r0, [r5, #0]
 801b23c:	4a06      	ldr	r2, [pc, #24]	; (801b258 <get_tensor_byte_size+0x28>)
 801b23e:	4003      	ands	r3, r0
 801b240:	68c9      	ldr	r1, [r1, #12]
 801b242:	68e0      	ldr	r0, [r4, #12]
 801b244:	4293      	cmp	r3, r2
 801b246:	fb01 f000 	mul.w	r0, r1, r0
 801b24a:	d101      	bne.n	801b250 <get_tensor_byte_size+0x20>
 801b24c:	3007      	adds	r0, #7
 801b24e:	08c0      	lsrs	r0, r0, #3
 801b250:	bc30      	pop	{r4, r5}
 801b252:	4770      	bx	lr
 801b254:	017fffff 	.word	0x017fffff
 801b258:	000400c0 	.word	0x000400c0

0801b25c <ai_array_to_buffer_fmt>:
 801b25c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 801b260:	2b02      	cmp	r3, #2
 801b262:	d050      	beq.n	801b306 <ai_array_to_buffer_fmt+0xaa>
 801b264:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 801b268:	4b29      	ldr	r3, [pc, #164]	; (801b310 <ai_array_to_buffer_fmt+0xb4>)
 801b26a:	429a      	cmp	r2, r3
 801b26c:	d00b      	beq.n	801b286 <ai_array_to_buffer_fmt+0x2a>
 801b26e:	dc1c      	bgt.n	801b2aa <ai_array_to_buffer_fmt+0x4e>
 801b270:	4b28      	ldr	r3, [pc, #160]	; (801b314 <ai_array_to_buffer_fmt+0xb8>)
 801b272:	429a      	cmp	r2, r3
 801b274:	d007      	beq.n	801b286 <ai_array_to_buffer_fmt+0x2a>
 801b276:	dd0b      	ble.n	801b290 <ai_array_to_buffer_fmt+0x34>
 801b278:	4b27      	ldr	r3, [pc, #156]	; (801b318 <ai_array_to_buffer_fmt+0xbc>)
 801b27a:	429a      	cmp	r2, r3
 801b27c:	d003      	beq.n	801b286 <ai_array_to_buffer_fmt+0x2a>
 801b27e:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 801b282:	429a      	cmp	r2, r3
 801b284:	d131      	bne.n	801b2ea <ai_array_to_buffer_fmt+0x8e>
 801b286:	4613      	mov	r3, r2
 801b288:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 801b28c:	4318      	orrs	r0, r3
 801b28e:	4770      	bx	lr
 801b290:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 801b294:	429a      	cmp	r2, r3
 801b296:	d0f6      	beq.n	801b286 <ai_array_to_buffer_fmt+0x2a>
 801b298:	dd2c      	ble.n	801b2f4 <ai_array_to_buffer_fmt+0x98>
 801b29a:	4b20      	ldr	r3, [pc, #128]	; (801b31c <ai_array_to_buffer_fmt+0xc0>)
 801b29c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 801b2a0:	429a      	cmp	r2, r3
 801b2a2:	bf18      	it	ne
 801b2a4:	2340      	movne	r3, #64	; 0x40
 801b2a6:	4318      	orrs	r0, r3
 801b2a8:	4770      	bx	lr
 801b2aa:	4b1d      	ldr	r3, [pc, #116]	; (801b320 <ai_array_to_buffer_fmt+0xc4>)
 801b2ac:	429a      	cmp	r2, r3
 801b2ae:	d0ea      	beq.n	801b286 <ai_array_to_buffer_fmt+0x2a>
 801b2b0:	dd0e      	ble.n	801b2d0 <ai_array_to_buffer_fmt+0x74>
 801b2b2:	4b1c      	ldr	r3, [pc, #112]	; (801b324 <ai_array_to_buffer_fmt+0xc8>)
 801b2b4:	429a      	cmp	r2, r3
 801b2b6:	d0e6      	beq.n	801b286 <ai_array_to_buffer_fmt+0x2a>
 801b2b8:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 801b2bc:	429a      	cmp	r2, r3
 801b2be:	d0e2      	beq.n	801b286 <ai_array_to_buffer_fmt+0x2a>
 801b2c0:	4b19      	ldr	r3, [pc, #100]	; (801b328 <ai_array_to_buffer_fmt+0xcc>)
 801b2c2:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 801b2c6:	429a      	cmp	r2, r3
 801b2c8:	bf18      	it	ne
 801b2ca:	2340      	movne	r3, #64	; 0x40
 801b2cc:	4318      	orrs	r0, r3
 801b2ce:	4770      	bx	lr
 801b2d0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 801b2d4:	429a      	cmp	r2, r3
 801b2d6:	d0d6      	beq.n	801b286 <ai_array_to_buffer_fmt+0x2a>
 801b2d8:	3307      	adds	r3, #7
 801b2da:	429a      	cmp	r2, r3
 801b2dc:	d0d3      	beq.n	801b286 <ai_array_to_buffer_fmt+0x2a>
 801b2de:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 801b2e2:	429a      	cmp	r2, r3
 801b2e4:	bf18      	it	ne
 801b2e6:	2340      	movne	r3, #64	; 0x40
 801b2e8:	e7ce      	b.n	801b288 <ai_array_to_buffer_fmt+0x2c>
 801b2ea:	4b10      	ldr	r3, [pc, #64]	; (801b32c <ai_array_to_buffer_fmt+0xd0>)
 801b2ec:	429a      	cmp	r2, r3
 801b2ee:	bf18      	it	ne
 801b2f0:	2340      	movne	r3, #64	; 0x40
 801b2f2:	e7c9      	b.n	801b288 <ai_array_to_buffer_fmt+0x2c>
 801b2f4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 801b2f8:	429a      	cmp	r2, r3
 801b2fa:	d0c4      	beq.n	801b286 <ai_array_to_buffer_fmt+0x2a>
 801b2fc:	3380      	adds	r3, #128	; 0x80
 801b2fe:	429a      	cmp	r2, r3
 801b300:	bf18      	it	ne
 801b302:	2340      	movne	r3, #64	; 0x40
 801b304:	e7c0      	b.n	801b288 <ai_array_to_buffer_fmt+0x2c>
 801b306:	4b0a      	ldr	r3, [pc, #40]	; (801b330 <ai_array_to_buffer_fmt+0xd4>)
 801b308:	4003      	ands	r3, r0
 801b30a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801b30e:	e7bb      	b.n	801b288 <ai_array_to_buffer_fmt+0x2c>
 801b310:	00840040 	.word	0x00840040
 801b314:	00040840 	.word	0x00040840
 801b318:	00041040 	.word	0x00041040
 801b31c:	00040447 	.word	0x00040447
 801b320:	00840840 	.word	0x00840840
 801b324:	00841040 	.word	0x00841040
 801b328:	0084084f 	.word	0x0084084f
 801b32c:	0004084f 	.word	0x0004084f
 801b330:	00803fff 	.word	0x00803fff

0801b334 <ai_array_get_byte_size>:
 801b334:	b319      	cbz	r1, 801b37e <ai_array_get_byte_size+0x4a>
 801b336:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 801b33a:	f3c0 4243 	ubfx	r2, r0, #17, #4
 801b33e:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 801b342:	11c0      	asrs	r0, r0, #7
 801b344:	fb03 f101 	mul.w	r1, r3, r1
 801b348:	2a04      	cmp	r2, #4
 801b34a:	f101 0107 	add.w	r1, r1, #7
 801b34e:	f021 0107 	bic.w	r1, r1, #7
 801b352:	fa21 f10c 	lsr.w	r1, r1, ip
 801b356:	d00b      	beq.n	801b370 <ai_array_get_byte_size+0x3c>
 801b358:	2a08      	cmp	r2, #8
 801b35a:	d002      	beq.n	801b362 <ai_array_get_byte_size+0x2e>
 801b35c:	3107      	adds	r1, #7
 801b35e:	08c8      	lsrs	r0, r1, #3
 801b360:	4770      	bx	lr
 801b362:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801b366:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 801b36a:	3107      	adds	r1, #7
 801b36c:	08c8      	lsrs	r0, r1, #3
 801b36e:	4770      	bx	lr
 801b370:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801b374:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 801b378:	3107      	adds	r1, #7
 801b37a:	08c8      	lsrs	r0, r1, #3
 801b37c:	4770      	bx	lr
 801b37e:	4608      	mov	r0, r1
 801b380:	4770      	bx	lr
 801b382:	bf00      	nop

0801b384 <ai_array_get_data_byte_size>:
 801b384:	b161      	cbz	r1, 801b3a0 <ai_array_get_data_byte_size+0x1c>
 801b386:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 801b38a:	f3c0 5241 	ubfx	r2, r0, #21, #2
 801b38e:	fb03 f101 	mul.w	r1, r3, r1
 801b392:	1dc8      	adds	r0, r1, #7
 801b394:	f020 0007 	bic.w	r0, r0, #7
 801b398:	40d0      	lsrs	r0, r2
 801b39a:	3007      	adds	r0, #7
 801b39c:	08c0      	lsrs	r0, r0, #3
 801b39e:	4770      	bx	lr
 801b3a0:	4608      	mov	r0, r1
 801b3a2:	4770      	bx	lr

0801b3a4 <core_get_broadcasted_shape>:
 801b3a4:	b470      	push	{r4, r5, r6}
 801b3a6:	6804      	ldr	r4, [r0, #0]
 801b3a8:	f3c4 2417 	ubfx	r4, r4, #8, #24
 801b3ac:	b304      	cbz	r4, 801b3f0 <core_get_broadcasted_shape+0x4c>
 801b3ae:	4623      	mov	r3, r4
 801b3b0:	3b01      	subs	r3, #1
 801b3b2:	429c      	cmp	r4, r3
 801b3b4:	d917      	bls.n	801b3e6 <core_get_broadcasted_shape+0x42>
 801b3b6:	6815      	ldr	r5, [r2, #0]
 801b3b8:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 801b3bc:	2401      	movs	r4, #1
 801b3be:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 801b3c2:	d202      	bcs.n	801b3ca <core_get_broadcasted_shape+0x26>
 801b3c4:	6854      	ldr	r4, [r2, #4]
 801b3c6:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 801b3ca:	680e      	ldr	r6, [r1, #0]
 801b3cc:	2501      	movs	r5, #1
 801b3ce:	ebb3 2f16 	cmp.w	r3, r6, lsr #8
 801b3d2:	d202      	bcs.n	801b3da <core_get_broadcasted_shape+0x36>
 801b3d4:	684d      	ldr	r5, [r1, #4]
 801b3d6:	f855 500c 	ldr.w	r5, [r5, ip]
 801b3da:	42ac      	cmp	r4, r5
 801b3dc:	bf38      	it	cc
 801b3de:	462c      	movcc	r4, r5
 801b3e0:	6845      	ldr	r5, [r0, #4]
 801b3e2:	f845 400c 	str.w	r4, [r5, ip]
 801b3e6:	b11b      	cbz	r3, 801b3f0 <core_get_broadcasted_shape+0x4c>
 801b3e8:	6804      	ldr	r4, [r0, #0]
 801b3ea:	f3c4 2417 	ubfx	r4, r4, #8, #24
 801b3ee:	e7df      	b.n	801b3b0 <core_get_broadcasted_shape+0xc>
 801b3f0:	bc70      	pop	{r4, r5, r6}
 801b3f2:	4770      	bx	lr

0801b3f4 <core_compute_offsets_in_bytes>:
 801b3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3f8:	e9d1 5c00 	ldrd	r5, ip, [r1]
 801b3fc:	6857      	ldr	r7, [r2, #4]
 801b3fe:	b085      	sub	sp, #20
 801b400:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801b404:	687e      	ldr	r6, [r7, #4]
 801b406:	1ba1      	subs	r1, r4, r6
 801b408:	bf18      	it	ne
 801b40a:	2101      	movne	r1, #1
 801b40c:	f5b5 6fa0 	cmp.w	r5, #1280	; 0x500
 801b410:	9101      	str	r1, [sp, #4]
 801b412:	f0c0 809c 	bcc.w	801b54e <core_compute_offsets_in_bytes+0x15a>
 801b416:	f8dc 9010 	ldr.w	r9, [ip, #16]
 801b41a:	fb09 fe04 	mul.w	lr, r9, r4
 801b41e:	6812      	ldr	r2, [r2, #0]
 801b420:	f8d0 b000 	ldr.w	fp, [r0]
 801b424:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 801b428:	e9dc 5202 	ldrd	r5, r2, [ip, #8]
 801b42c:	bf2c      	ite	cs
 801b42e:	f8d7 a010 	ldrcs.w	sl, [r7, #16]
 801b432:	f04f 0a01 	movcc.w	sl, #1
 801b436:	9202      	str	r2, [sp, #8]
 801b438:	ebb9 0c0a 	subs.w	ip, r9, sl
 801b43c:	e9d7 8202 	ldrd	r8, r2, [r7, #8]
 801b440:	bf18      	it	ne
 801b442:	f04f 0c01 	movne.w	ip, #1
 801b446:	ebb5 0708 	subs.w	r7, r5, r8
 801b44a:	9203      	str	r2, [sp, #12]
 801b44c:	f3cb 2217 	ubfx	r2, fp, #8, #24
 801b450:	bf18      	it	ne
 801b452:	2701      	movne	r7, #1
 801b454:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
 801b458:	d31f      	bcc.n	801b49a <core_compute_offsets_in_bytes+0xa6>
 801b45a:	1ba2      	subs	r2, r4, r6
 801b45c:	6841      	ldr	r1, [r0, #4]
 801b45e:	fab2 f282 	clz	r2, r2
 801b462:	0952      	lsrs	r2, r2, #5
 801b464:	604a      	str	r2, [r1, #4]
 801b466:	f8d0 b000 	ldr.w	fp, [r0]
 801b46a:	f5bb 6fa0 	cmp.w	fp, #1280	; 0x500
 801b46e:	f3cb 2217 	ubfx	r2, fp, #8, #24
 801b472:	d312      	bcc.n	801b49a <core_compute_offsets_in_bytes+0xa6>
 801b474:	9a01      	ldr	r2, [sp, #4]
 801b476:	45d1      	cmp	r9, sl
 801b478:	bf14      	ite	ne
 801b47a:	2200      	movne	r2, #0
 801b47c:	f002 0201 	andeq.w	r2, r2, #1
 801b480:	42b4      	cmp	r4, r6
 801b482:	bf14      	ite	ne
 801b484:	f04f 0900 	movne.w	r9, #0
 801b488:	f00c 0901 	andeq.w	r9, ip, #1
 801b48c:	6846      	ldr	r6, [r0, #4]
 801b48e:	fb04 2219 	mls	r2, r4, r9, r2
 801b492:	6132      	str	r2, [r6, #16]
 801b494:	6802      	ldr	r2, [r0, #0]
 801b496:	f3c2 2217 	ubfx	r2, r2, #8, #24
 801b49a:	2a02      	cmp	r2, #2
 801b49c:	fb0e f607 	mul.w	r6, lr, r7
 801b4a0:	d90f      	bls.n	801b4c2 <core_compute_offsets_in_bytes+0xce>
 801b4a2:	9a01      	ldr	r2, [sp, #4]
 801b4a4:	4545      	cmp	r5, r8
 801b4a6:	bf14      	ite	ne
 801b4a8:	2200      	movne	r2, #0
 801b4aa:	f002 0201 	andeq.w	r2, r2, #1
 801b4ae:	ea0c 0202 	and.w	r2, ip, r2
 801b4b2:	1b92      	subs	r2, r2, r6
 801b4b4:	fb04 240c 	mla	r4, r4, ip, r2
 801b4b8:	6842      	ldr	r2, [r0, #4]
 801b4ba:	6094      	str	r4, [r2, #8]
 801b4bc:	6802      	ldr	r2, [r0, #0]
 801b4be:	f3c2 2217 	ubfx	r2, r2, #8, #24
 801b4c2:	e9dd 4102 	ldrd	r4, r1, [sp, #8]
 801b4c6:	428c      	cmp	r4, r1
 801b4c8:	d13f      	bne.n	801b54a <core_compute_offsets_in_bytes+0x156>
 801b4ca:	2f00      	cmp	r7, #0
 801b4cc:	d03d      	beq.n	801b54a <core_compute_offsets_in_bytes+0x156>
 801b4ce:	9901      	ldr	r1, [sp, #4]
 801b4d0:	ea01 010c 	and.w	r1, r1, ip
 801b4d4:	2a03      	cmp	r2, #3
 801b4d6:	d910      	bls.n	801b4fa <core_compute_offsets_in_bytes+0x106>
 801b4d8:	fb0e f505 	mul.w	r5, lr, r5
 801b4dc:	e9dd 2402 	ldrd	r2, r4, [sp, #8]
 801b4e0:	ebb2 0c04 	subs.w	ip, r2, r4
 801b4e4:	6842      	ldr	r2, [r0, #4]
 801b4e6:	bf18      	it	ne
 801b4e8:	f04f 0c01 	movne.w	ip, #1
 801b4ec:	fb0c 1115 	mls	r1, ip, r5, r1
 801b4f0:	440e      	add	r6, r1
 801b4f2:	60d6      	str	r6, [r2, #12]
 801b4f4:	6802      	ldr	r2, [r0, #0]
 801b4f6:	f3c2 2217 	ubfx	r2, r2, #8, #24
 801b4fa:	2a01      	cmp	r2, #1
 801b4fc:	d912      	bls.n	801b524 <core_compute_offsets_in_bytes+0x130>
 801b4fe:	6841      	ldr	r1, [r0, #4]
 801b500:	684a      	ldr	r2, [r1, #4]
 801b502:	fb03 f202 	mul.w	r2, r3, r2
 801b506:	604a      	str	r2, [r1, #4]
 801b508:	6801      	ldr	r1, [r0, #0]
 801b50a:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 801b50e:	f3c1 2217 	ubfx	r2, r1, #8, #24
 801b512:	d307      	bcc.n	801b524 <core_compute_offsets_in_bytes+0x130>
 801b514:	6841      	ldr	r1, [r0, #4]
 801b516:	690a      	ldr	r2, [r1, #16]
 801b518:	fb03 f202 	mul.w	r2, r3, r2
 801b51c:	610a      	str	r2, [r1, #16]
 801b51e:	6802      	ldr	r2, [r0, #0]
 801b520:	f3c2 2217 	ubfx	r2, r2, #8, #24
 801b524:	2a02      	cmp	r2, #2
 801b526:	d90d      	bls.n	801b544 <core_compute_offsets_in_bytes+0x150>
 801b528:	6841      	ldr	r1, [r0, #4]
 801b52a:	688a      	ldr	r2, [r1, #8]
 801b52c:	fb03 f202 	mul.w	r2, r3, r2
 801b530:	608a      	str	r2, [r1, #8]
 801b532:	6802      	ldr	r2, [r0, #0]
 801b534:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 801b538:	d304      	bcc.n	801b544 <core_compute_offsets_in_bytes+0x150>
 801b53a:	6841      	ldr	r1, [r0, #4]
 801b53c:	68ca      	ldr	r2, [r1, #12]
 801b53e:	fb02 f303 	mul.w	r3, r2, r3
 801b542:	60cb      	str	r3, [r1, #12]
 801b544:	b005      	add	sp, #20
 801b546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b54a:	2100      	movs	r1, #0
 801b54c:	e7c2      	b.n	801b4d4 <core_compute_offsets_in_bytes+0xe0>
 801b54e:	46a6      	mov	lr, r4
 801b550:	f04f 0901 	mov.w	r9, #1
 801b554:	e763      	b.n	801b41e <core_compute_offsets_in_bytes+0x2a>
 801b556:	bf00      	nop

0801b558 <__errno>:
 801b558:	4b01      	ldr	r3, [pc, #4]	; (801b560 <__errno+0x8>)
 801b55a:	6818      	ldr	r0, [r3, #0]
 801b55c:	4770      	bx	lr
 801b55e:	bf00      	nop
 801b560:	240081e4 	.word	0x240081e4

0801b564 <__libc_init_array>:
 801b564:	b570      	push	{r4, r5, r6, lr}
 801b566:	4d0d      	ldr	r5, [pc, #52]	; (801b59c <__libc_init_array+0x38>)
 801b568:	4c0d      	ldr	r4, [pc, #52]	; (801b5a0 <__libc_init_array+0x3c>)
 801b56a:	1b64      	subs	r4, r4, r5
 801b56c:	10a4      	asrs	r4, r4, #2
 801b56e:	2600      	movs	r6, #0
 801b570:	42a6      	cmp	r6, r4
 801b572:	d109      	bne.n	801b588 <__libc_init_array+0x24>
 801b574:	4d0b      	ldr	r5, [pc, #44]	; (801b5a4 <__libc_init_array+0x40>)
 801b576:	4c0c      	ldr	r4, [pc, #48]	; (801b5a8 <__libc_init_array+0x44>)
 801b578:	f001 fb3e 	bl	801cbf8 <_init>
 801b57c:	1b64      	subs	r4, r4, r5
 801b57e:	10a4      	asrs	r4, r4, #2
 801b580:	2600      	movs	r6, #0
 801b582:	42a6      	cmp	r6, r4
 801b584:	d105      	bne.n	801b592 <__libc_init_array+0x2e>
 801b586:	bd70      	pop	{r4, r5, r6, pc}
 801b588:	f855 3b04 	ldr.w	r3, [r5], #4
 801b58c:	4798      	blx	r3
 801b58e:	3601      	adds	r6, #1
 801b590:	e7ee      	b.n	801b570 <__libc_init_array+0xc>
 801b592:	f855 3b04 	ldr.w	r3, [r5], #4
 801b596:	4798      	blx	r3
 801b598:	3601      	adds	r6, #1
 801b59a:	e7f2      	b.n	801b582 <__libc_init_array+0x1e>
 801b59c:	08091300 	.word	0x08091300
 801b5a0:	08091300 	.word	0x08091300
 801b5a4:	08091300 	.word	0x08091300
 801b5a8:	08091304 	.word	0x08091304

0801b5ac <malloc>:
 801b5ac:	4b02      	ldr	r3, [pc, #8]	; (801b5b8 <malloc+0xc>)
 801b5ae:	4601      	mov	r1, r0
 801b5b0:	6818      	ldr	r0, [r3, #0]
 801b5b2:	f000 b885 	b.w	801b6c0 <_malloc_r>
 801b5b6:	bf00      	nop
 801b5b8:	240081e4 	.word	0x240081e4

0801b5bc <memcpy>:
 801b5bc:	440a      	add	r2, r1
 801b5be:	4291      	cmp	r1, r2
 801b5c0:	f100 33ff 	add.w	r3, r0, #4294967295
 801b5c4:	d100      	bne.n	801b5c8 <memcpy+0xc>
 801b5c6:	4770      	bx	lr
 801b5c8:	b510      	push	{r4, lr}
 801b5ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b5ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b5d2:	4291      	cmp	r1, r2
 801b5d4:	d1f9      	bne.n	801b5ca <memcpy+0xe>
 801b5d6:	bd10      	pop	{r4, pc}

0801b5d8 <memset>:
 801b5d8:	4402      	add	r2, r0
 801b5da:	4603      	mov	r3, r0
 801b5dc:	4293      	cmp	r3, r2
 801b5de:	d100      	bne.n	801b5e2 <memset+0xa>
 801b5e0:	4770      	bx	lr
 801b5e2:	f803 1b01 	strb.w	r1, [r3], #1
 801b5e6:	e7f9      	b.n	801b5dc <memset+0x4>

0801b5e8 <_free_r>:
 801b5e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b5ea:	2900      	cmp	r1, #0
 801b5ec:	d044      	beq.n	801b678 <_free_r+0x90>
 801b5ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b5f2:	9001      	str	r0, [sp, #4]
 801b5f4:	2b00      	cmp	r3, #0
 801b5f6:	f1a1 0404 	sub.w	r4, r1, #4
 801b5fa:	bfb8      	it	lt
 801b5fc:	18e4      	addlt	r4, r4, r3
 801b5fe:	f000 fd17 	bl	801c030 <__malloc_lock>
 801b602:	4a1e      	ldr	r2, [pc, #120]	; (801b67c <_free_r+0x94>)
 801b604:	9801      	ldr	r0, [sp, #4]
 801b606:	6813      	ldr	r3, [r2, #0]
 801b608:	b933      	cbnz	r3, 801b618 <_free_r+0x30>
 801b60a:	6063      	str	r3, [r4, #4]
 801b60c:	6014      	str	r4, [r2, #0]
 801b60e:	b003      	add	sp, #12
 801b610:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b614:	f000 bd12 	b.w	801c03c <__malloc_unlock>
 801b618:	42a3      	cmp	r3, r4
 801b61a:	d908      	bls.n	801b62e <_free_r+0x46>
 801b61c:	6825      	ldr	r5, [r4, #0]
 801b61e:	1961      	adds	r1, r4, r5
 801b620:	428b      	cmp	r3, r1
 801b622:	bf01      	itttt	eq
 801b624:	6819      	ldreq	r1, [r3, #0]
 801b626:	685b      	ldreq	r3, [r3, #4]
 801b628:	1949      	addeq	r1, r1, r5
 801b62a:	6021      	streq	r1, [r4, #0]
 801b62c:	e7ed      	b.n	801b60a <_free_r+0x22>
 801b62e:	461a      	mov	r2, r3
 801b630:	685b      	ldr	r3, [r3, #4]
 801b632:	b10b      	cbz	r3, 801b638 <_free_r+0x50>
 801b634:	42a3      	cmp	r3, r4
 801b636:	d9fa      	bls.n	801b62e <_free_r+0x46>
 801b638:	6811      	ldr	r1, [r2, #0]
 801b63a:	1855      	adds	r5, r2, r1
 801b63c:	42a5      	cmp	r5, r4
 801b63e:	d10b      	bne.n	801b658 <_free_r+0x70>
 801b640:	6824      	ldr	r4, [r4, #0]
 801b642:	4421      	add	r1, r4
 801b644:	1854      	adds	r4, r2, r1
 801b646:	42a3      	cmp	r3, r4
 801b648:	6011      	str	r1, [r2, #0]
 801b64a:	d1e0      	bne.n	801b60e <_free_r+0x26>
 801b64c:	681c      	ldr	r4, [r3, #0]
 801b64e:	685b      	ldr	r3, [r3, #4]
 801b650:	6053      	str	r3, [r2, #4]
 801b652:	4421      	add	r1, r4
 801b654:	6011      	str	r1, [r2, #0]
 801b656:	e7da      	b.n	801b60e <_free_r+0x26>
 801b658:	d902      	bls.n	801b660 <_free_r+0x78>
 801b65a:	230c      	movs	r3, #12
 801b65c:	6003      	str	r3, [r0, #0]
 801b65e:	e7d6      	b.n	801b60e <_free_r+0x26>
 801b660:	6825      	ldr	r5, [r4, #0]
 801b662:	1961      	adds	r1, r4, r5
 801b664:	428b      	cmp	r3, r1
 801b666:	bf04      	itt	eq
 801b668:	6819      	ldreq	r1, [r3, #0]
 801b66a:	685b      	ldreq	r3, [r3, #4]
 801b66c:	6063      	str	r3, [r4, #4]
 801b66e:	bf04      	itt	eq
 801b670:	1949      	addeq	r1, r1, r5
 801b672:	6021      	streq	r1, [r4, #0]
 801b674:	6054      	str	r4, [r2, #4]
 801b676:	e7ca      	b.n	801b60e <_free_r+0x26>
 801b678:	b003      	add	sp, #12
 801b67a:	bd30      	pop	{r4, r5, pc}
 801b67c:	2405e3b0 	.word	0x2405e3b0

0801b680 <sbrk_aligned>:
 801b680:	b570      	push	{r4, r5, r6, lr}
 801b682:	4e0e      	ldr	r6, [pc, #56]	; (801b6bc <sbrk_aligned+0x3c>)
 801b684:	460c      	mov	r4, r1
 801b686:	6831      	ldr	r1, [r6, #0]
 801b688:	4605      	mov	r5, r0
 801b68a:	b911      	cbnz	r1, 801b692 <sbrk_aligned+0x12>
 801b68c:	f000 f91a 	bl	801b8c4 <_sbrk_r>
 801b690:	6030      	str	r0, [r6, #0]
 801b692:	4621      	mov	r1, r4
 801b694:	4628      	mov	r0, r5
 801b696:	f000 f915 	bl	801b8c4 <_sbrk_r>
 801b69a:	1c43      	adds	r3, r0, #1
 801b69c:	d00a      	beq.n	801b6b4 <sbrk_aligned+0x34>
 801b69e:	1cc4      	adds	r4, r0, #3
 801b6a0:	f024 0403 	bic.w	r4, r4, #3
 801b6a4:	42a0      	cmp	r0, r4
 801b6a6:	d007      	beq.n	801b6b8 <sbrk_aligned+0x38>
 801b6a8:	1a21      	subs	r1, r4, r0
 801b6aa:	4628      	mov	r0, r5
 801b6ac:	f000 f90a 	bl	801b8c4 <_sbrk_r>
 801b6b0:	3001      	adds	r0, #1
 801b6b2:	d101      	bne.n	801b6b8 <sbrk_aligned+0x38>
 801b6b4:	f04f 34ff 	mov.w	r4, #4294967295
 801b6b8:	4620      	mov	r0, r4
 801b6ba:	bd70      	pop	{r4, r5, r6, pc}
 801b6bc:	2405e3b4 	.word	0x2405e3b4

0801b6c0 <_malloc_r>:
 801b6c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b6c4:	1ccd      	adds	r5, r1, #3
 801b6c6:	f025 0503 	bic.w	r5, r5, #3
 801b6ca:	3508      	adds	r5, #8
 801b6cc:	2d0c      	cmp	r5, #12
 801b6ce:	bf38      	it	cc
 801b6d0:	250c      	movcc	r5, #12
 801b6d2:	2d00      	cmp	r5, #0
 801b6d4:	4607      	mov	r7, r0
 801b6d6:	db01      	blt.n	801b6dc <_malloc_r+0x1c>
 801b6d8:	42a9      	cmp	r1, r5
 801b6da:	d905      	bls.n	801b6e8 <_malloc_r+0x28>
 801b6dc:	230c      	movs	r3, #12
 801b6de:	603b      	str	r3, [r7, #0]
 801b6e0:	2600      	movs	r6, #0
 801b6e2:	4630      	mov	r0, r6
 801b6e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b6e8:	4e2e      	ldr	r6, [pc, #184]	; (801b7a4 <_malloc_r+0xe4>)
 801b6ea:	f000 fca1 	bl	801c030 <__malloc_lock>
 801b6ee:	6833      	ldr	r3, [r6, #0]
 801b6f0:	461c      	mov	r4, r3
 801b6f2:	bb34      	cbnz	r4, 801b742 <_malloc_r+0x82>
 801b6f4:	4629      	mov	r1, r5
 801b6f6:	4638      	mov	r0, r7
 801b6f8:	f7ff ffc2 	bl	801b680 <sbrk_aligned>
 801b6fc:	1c43      	adds	r3, r0, #1
 801b6fe:	4604      	mov	r4, r0
 801b700:	d14d      	bne.n	801b79e <_malloc_r+0xde>
 801b702:	6834      	ldr	r4, [r6, #0]
 801b704:	4626      	mov	r6, r4
 801b706:	2e00      	cmp	r6, #0
 801b708:	d140      	bne.n	801b78c <_malloc_r+0xcc>
 801b70a:	6823      	ldr	r3, [r4, #0]
 801b70c:	4631      	mov	r1, r6
 801b70e:	4638      	mov	r0, r7
 801b710:	eb04 0803 	add.w	r8, r4, r3
 801b714:	f000 f8d6 	bl	801b8c4 <_sbrk_r>
 801b718:	4580      	cmp	r8, r0
 801b71a:	d13a      	bne.n	801b792 <_malloc_r+0xd2>
 801b71c:	6821      	ldr	r1, [r4, #0]
 801b71e:	3503      	adds	r5, #3
 801b720:	1a6d      	subs	r5, r5, r1
 801b722:	f025 0503 	bic.w	r5, r5, #3
 801b726:	3508      	adds	r5, #8
 801b728:	2d0c      	cmp	r5, #12
 801b72a:	bf38      	it	cc
 801b72c:	250c      	movcc	r5, #12
 801b72e:	4629      	mov	r1, r5
 801b730:	4638      	mov	r0, r7
 801b732:	f7ff ffa5 	bl	801b680 <sbrk_aligned>
 801b736:	3001      	adds	r0, #1
 801b738:	d02b      	beq.n	801b792 <_malloc_r+0xd2>
 801b73a:	6823      	ldr	r3, [r4, #0]
 801b73c:	442b      	add	r3, r5
 801b73e:	6023      	str	r3, [r4, #0]
 801b740:	e00e      	b.n	801b760 <_malloc_r+0xa0>
 801b742:	6822      	ldr	r2, [r4, #0]
 801b744:	1b52      	subs	r2, r2, r5
 801b746:	d41e      	bmi.n	801b786 <_malloc_r+0xc6>
 801b748:	2a0b      	cmp	r2, #11
 801b74a:	d916      	bls.n	801b77a <_malloc_r+0xba>
 801b74c:	1961      	adds	r1, r4, r5
 801b74e:	42a3      	cmp	r3, r4
 801b750:	6025      	str	r5, [r4, #0]
 801b752:	bf18      	it	ne
 801b754:	6059      	strne	r1, [r3, #4]
 801b756:	6863      	ldr	r3, [r4, #4]
 801b758:	bf08      	it	eq
 801b75a:	6031      	streq	r1, [r6, #0]
 801b75c:	5162      	str	r2, [r4, r5]
 801b75e:	604b      	str	r3, [r1, #4]
 801b760:	4638      	mov	r0, r7
 801b762:	f104 060b 	add.w	r6, r4, #11
 801b766:	f000 fc69 	bl	801c03c <__malloc_unlock>
 801b76a:	f026 0607 	bic.w	r6, r6, #7
 801b76e:	1d23      	adds	r3, r4, #4
 801b770:	1af2      	subs	r2, r6, r3
 801b772:	d0b6      	beq.n	801b6e2 <_malloc_r+0x22>
 801b774:	1b9b      	subs	r3, r3, r6
 801b776:	50a3      	str	r3, [r4, r2]
 801b778:	e7b3      	b.n	801b6e2 <_malloc_r+0x22>
 801b77a:	6862      	ldr	r2, [r4, #4]
 801b77c:	42a3      	cmp	r3, r4
 801b77e:	bf0c      	ite	eq
 801b780:	6032      	streq	r2, [r6, #0]
 801b782:	605a      	strne	r2, [r3, #4]
 801b784:	e7ec      	b.n	801b760 <_malloc_r+0xa0>
 801b786:	4623      	mov	r3, r4
 801b788:	6864      	ldr	r4, [r4, #4]
 801b78a:	e7b2      	b.n	801b6f2 <_malloc_r+0x32>
 801b78c:	4634      	mov	r4, r6
 801b78e:	6876      	ldr	r6, [r6, #4]
 801b790:	e7b9      	b.n	801b706 <_malloc_r+0x46>
 801b792:	230c      	movs	r3, #12
 801b794:	603b      	str	r3, [r7, #0]
 801b796:	4638      	mov	r0, r7
 801b798:	f000 fc50 	bl	801c03c <__malloc_unlock>
 801b79c:	e7a1      	b.n	801b6e2 <_malloc_r+0x22>
 801b79e:	6025      	str	r5, [r4, #0]
 801b7a0:	e7de      	b.n	801b760 <_malloc_r+0xa0>
 801b7a2:	bf00      	nop
 801b7a4:	2405e3b0 	.word	0x2405e3b0

0801b7a8 <iprintf>:
 801b7a8:	b40f      	push	{r0, r1, r2, r3}
 801b7aa:	4b0a      	ldr	r3, [pc, #40]	; (801b7d4 <iprintf+0x2c>)
 801b7ac:	b513      	push	{r0, r1, r4, lr}
 801b7ae:	681c      	ldr	r4, [r3, #0]
 801b7b0:	b124      	cbz	r4, 801b7bc <iprintf+0x14>
 801b7b2:	69a3      	ldr	r3, [r4, #24]
 801b7b4:	b913      	cbnz	r3, 801b7bc <iprintf+0x14>
 801b7b6:	4620      	mov	r0, r4
 801b7b8:	f000 fb34 	bl	801be24 <__sinit>
 801b7bc:	ab05      	add	r3, sp, #20
 801b7be:	9a04      	ldr	r2, [sp, #16]
 801b7c0:	68a1      	ldr	r1, [r4, #8]
 801b7c2:	9301      	str	r3, [sp, #4]
 801b7c4:	4620      	mov	r0, r4
 801b7c6:	f000 fc69 	bl	801c09c <_vfiprintf_r>
 801b7ca:	b002      	add	sp, #8
 801b7cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b7d0:	b004      	add	sp, #16
 801b7d2:	4770      	bx	lr
 801b7d4:	240081e4 	.word	0x240081e4

0801b7d8 <_puts_r>:
 801b7d8:	b570      	push	{r4, r5, r6, lr}
 801b7da:	460e      	mov	r6, r1
 801b7dc:	4605      	mov	r5, r0
 801b7de:	b118      	cbz	r0, 801b7e8 <_puts_r+0x10>
 801b7e0:	6983      	ldr	r3, [r0, #24]
 801b7e2:	b90b      	cbnz	r3, 801b7e8 <_puts_r+0x10>
 801b7e4:	f000 fb1e 	bl	801be24 <__sinit>
 801b7e8:	69ab      	ldr	r3, [r5, #24]
 801b7ea:	68ac      	ldr	r4, [r5, #8]
 801b7ec:	b913      	cbnz	r3, 801b7f4 <_puts_r+0x1c>
 801b7ee:	4628      	mov	r0, r5
 801b7f0:	f000 fb18 	bl	801be24 <__sinit>
 801b7f4:	4b2c      	ldr	r3, [pc, #176]	; (801b8a8 <_puts_r+0xd0>)
 801b7f6:	429c      	cmp	r4, r3
 801b7f8:	d120      	bne.n	801b83c <_puts_r+0x64>
 801b7fa:	686c      	ldr	r4, [r5, #4]
 801b7fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b7fe:	07db      	lsls	r3, r3, #31
 801b800:	d405      	bmi.n	801b80e <_puts_r+0x36>
 801b802:	89a3      	ldrh	r3, [r4, #12]
 801b804:	0598      	lsls	r0, r3, #22
 801b806:	d402      	bmi.n	801b80e <_puts_r+0x36>
 801b808:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b80a:	f000 fba9 	bl	801bf60 <__retarget_lock_acquire_recursive>
 801b80e:	89a3      	ldrh	r3, [r4, #12]
 801b810:	0719      	lsls	r1, r3, #28
 801b812:	d51d      	bpl.n	801b850 <_puts_r+0x78>
 801b814:	6923      	ldr	r3, [r4, #16]
 801b816:	b1db      	cbz	r3, 801b850 <_puts_r+0x78>
 801b818:	3e01      	subs	r6, #1
 801b81a:	68a3      	ldr	r3, [r4, #8]
 801b81c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b820:	3b01      	subs	r3, #1
 801b822:	60a3      	str	r3, [r4, #8]
 801b824:	bb39      	cbnz	r1, 801b876 <_puts_r+0x9e>
 801b826:	2b00      	cmp	r3, #0
 801b828:	da38      	bge.n	801b89c <_puts_r+0xc4>
 801b82a:	4622      	mov	r2, r4
 801b82c:	210a      	movs	r1, #10
 801b82e:	4628      	mov	r0, r5
 801b830:	f000 f91e 	bl	801ba70 <__swbuf_r>
 801b834:	3001      	adds	r0, #1
 801b836:	d011      	beq.n	801b85c <_puts_r+0x84>
 801b838:	250a      	movs	r5, #10
 801b83a:	e011      	b.n	801b860 <_puts_r+0x88>
 801b83c:	4b1b      	ldr	r3, [pc, #108]	; (801b8ac <_puts_r+0xd4>)
 801b83e:	429c      	cmp	r4, r3
 801b840:	d101      	bne.n	801b846 <_puts_r+0x6e>
 801b842:	68ac      	ldr	r4, [r5, #8]
 801b844:	e7da      	b.n	801b7fc <_puts_r+0x24>
 801b846:	4b1a      	ldr	r3, [pc, #104]	; (801b8b0 <_puts_r+0xd8>)
 801b848:	429c      	cmp	r4, r3
 801b84a:	bf08      	it	eq
 801b84c:	68ec      	ldreq	r4, [r5, #12]
 801b84e:	e7d5      	b.n	801b7fc <_puts_r+0x24>
 801b850:	4621      	mov	r1, r4
 801b852:	4628      	mov	r0, r5
 801b854:	f000 f95e 	bl	801bb14 <__swsetup_r>
 801b858:	2800      	cmp	r0, #0
 801b85a:	d0dd      	beq.n	801b818 <_puts_r+0x40>
 801b85c:	f04f 35ff 	mov.w	r5, #4294967295
 801b860:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b862:	07da      	lsls	r2, r3, #31
 801b864:	d405      	bmi.n	801b872 <_puts_r+0x9a>
 801b866:	89a3      	ldrh	r3, [r4, #12]
 801b868:	059b      	lsls	r3, r3, #22
 801b86a:	d402      	bmi.n	801b872 <_puts_r+0x9a>
 801b86c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b86e:	f000 fb78 	bl	801bf62 <__retarget_lock_release_recursive>
 801b872:	4628      	mov	r0, r5
 801b874:	bd70      	pop	{r4, r5, r6, pc}
 801b876:	2b00      	cmp	r3, #0
 801b878:	da04      	bge.n	801b884 <_puts_r+0xac>
 801b87a:	69a2      	ldr	r2, [r4, #24]
 801b87c:	429a      	cmp	r2, r3
 801b87e:	dc06      	bgt.n	801b88e <_puts_r+0xb6>
 801b880:	290a      	cmp	r1, #10
 801b882:	d004      	beq.n	801b88e <_puts_r+0xb6>
 801b884:	6823      	ldr	r3, [r4, #0]
 801b886:	1c5a      	adds	r2, r3, #1
 801b888:	6022      	str	r2, [r4, #0]
 801b88a:	7019      	strb	r1, [r3, #0]
 801b88c:	e7c5      	b.n	801b81a <_puts_r+0x42>
 801b88e:	4622      	mov	r2, r4
 801b890:	4628      	mov	r0, r5
 801b892:	f000 f8ed 	bl	801ba70 <__swbuf_r>
 801b896:	3001      	adds	r0, #1
 801b898:	d1bf      	bne.n	801b81a <_puts_r+0x42>
 801b89a:	e7df      	b.n	801b85c <_puts_r+0x84>
 801b89c:	6823      	ldr	r3, [r4, #0]
 801b89e:	250a      	movs	r5, #10
 801b8a0:	1c5a      	adds	r2, r3, #1
 801b8a2:	6022      	str	r2, [r4, #0]
 801b8a4:	701d      	strb	r5, [r3, #0]
 801b8a6:	e7db      	b.n	801b860 <_puts_r+0x88>
 801b8a8:	08091014 	.word	0x08091014
 801b8ac:	08091034 	.word	0x08091034
 801b8b0:	08090ff4 	.word	0x08090ff4

0801b8b4 <puts>:
 801b8b4:	4b02      	ldr	r3, [pc, #8]	; (801b8c0 <puts+0xc>)
 801b8b6:	4601      	mov	r1, r0
 801b8b8:	6818      	ldr	r0, [r3, #0]
 801b8ba:	f7ff bf8d 	b.w	801b7d8 <_puts_r>
 801b8be:	bf00      	nop
 801b8c0:	240081e4 	.word	0x240081e4

0801b8c4 <_sbrk_r>:
 801b8c4:	b538      	push	{r3, r4, r5, lr}
 801b8c6:	4d06      	ldr	r5, [pc, #24]	; (801b8e0 <_sbrk_r+0x1c>)
 801b8c8:	2300      	movs	r3, #0
 801b8ca:	4604      	mov	r4, r0
 801b8cc:	4608      	mov	r0, r1
 801b8ce:	602b      	str	r3, [r5, #0]
 801b8d0:	f7e8 fd3e 	bl	8004350 <_sbrk>
 801b8d4:	1c43      	adds	r3, r0, #1
 801b8d6:	d102      	bne.n	801b8de <_sbrk_r+0x1a>
 801b8d8:	682b      	ldr	r3, [r5, #0]
 801b8da:	b103      	cbz	r3, 801b8de <_sbrk_r+0x1a>
 801b8dc:	6023      	str	r3, [r4, #0]
 801b8de:	bd38      	pop	{r3, r4, r5, pc}
 801b8e0:	2405e3bc 	.word	0x2405e3bc

0801b8e4 <setvbuf>:
 801b8e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b8e8:	461d      	mov	r5, r3
 801b8ea:	4b5d      	ldr	r3, [pc, #372]	; (801ba60 <setvbuf+0x17c>)
 801b8ec:	681f      	ldr	r7, [r3, #0]
 801b8ee:	4604      	mov	r4, r0
 801b8f0:	460e      	mov	r6, r1
 801b8f2:	4690      	mov	r8, r2
 801b8f4:	b127      	cbz	r7, 801b900 <setvbuf+0x1c>
 801b8f6:	69bb      	ldr	r3, [r7, #24]
 801b8f8:	b913      	cbnz	r3, 801b900 <setvbuf+0x1c>
 801b8fa:	4638      	mov	r0, r7
 801b8fc:	f000 fa92 	bl	801be24 <__sinit>
 801b900:	4b58      	ldr	r3, [pc, #352]	; (801ba64 <setvbuf+0x180>)
 801b902:	429c      	cmp	r4, r3
 801b904:	d167      	bne.n	801b9d6 <setvbuf+0xf2>
 801b906:	687c      	ldr	r4, [r7, #4]
 801b908:	f1b8 0f02 	cmp.w	r8, #2
 801b90c:	d006      	beq.n	801b91c <setvbuf+0x38>
 801b90e:	f1b8 0f01 	cmp.w	r8, #1
 801b912:	f200 809f 	bhi.w	801ba54 <setvbuf+0x170>
 801b916:	2d00      	cmp	r5, #0
 801b918:	f2c0 809c 	blt.w	801ba54 <setvbuf+0x170>
 801b91c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b91e:	07db      	lsls	r3, r3, #31
 801b920:	d405      	bmi.n	801b92e <setvbuf+0x4a>
 801b922:	89a3      	ldrh	r3, [r4, #12]
 801b924:	0598      	lsls	r0, r3, #22
 801b926:	d402      	bmi.n	801b92e <setvbuf+0x4a>
 801b928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b92a:	f000 fb19 	bl	801bf60 <__retarget_lock_acquire_recursive>
 801b92e:	4621      	mov	r1, r4
 801b930:	4638      	mov	r0, r7
 801b932:	f000 f9e3 	bl	801bcfc <_fflush_r>
 801b936:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b938:	b141      	cbz	r1, 801b94c <setvbuf+0x68>
 801b93a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b93e:	4299      	cmp	r1, r3
 801b940:	d002      	beq.n	801b948 <setvbuf+0x64>
 801b942:	4638      	mov	r0, r7
 801b944:	f7ff fe50 	bl	801b5e8 <_free_r>
 801b948:	2300      	movs	r3, #0
 801b94a:	6363      	str	r3, [r4, #52]	; 0x34
 801b94c:	2300      	movs	r3, #0
 801b94e:	61a3      	str	r3, [r4, #24]
 801b950:	6063      	str	r3, [r4, #4]
 801b952:	89a3      	ldrh	r3, [r4, #12]
 801b954:	0619      	lsls	r1, r3, #24
 801b956:	d503      	bpl.n	801b960 <setvbuf+0x7c>
 801b958:	6921      	ldr	r1, [r4, #16]
 801b95a:	4638      	mov	r0, r7
 801b95c:	f7ff fe44 	bl	801b5e8 <_free_r>
 801b960:	89a3      	ldrh	r3, [r4, #12]
 801b962:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 801b966:	f023 0303 	bic.w	r3, r3, #3
 801b96a:	f1b8 0f02 	cmp.w	r8, #2
 801b96e:	81a3      	strh	r3, [r4, #12]
 801b970:	d06c      	beq.n	801ba4c <setvbuf+0x168>
 801b972:	ab01      	add	r3, sp, #4
 801b974:	466a      	mov	r2, sp
 801b976:	4621      	mov	r1, r4
 801b978:	4638      	mov	r0, r7
 801b97a:	f000 faf3 	bl	801bf64 <__swhatbuf_r>
 801b97e:	89a3      	ldrh	r3, [r4, #12]
 801b980:	4318      	orrs	r0, r3
 801b982:	81a0      	strh	r0, [r4, #12]
 801b984:	2d00      	cmp	r5, #0
 801b986:	d130      	bne.n	801b9ea <setvbuf+0x106>
 801b988:	9d00      	ldr	r5, [sp, #0]
 801b98a:	4628      	mov	r0, r5
 801b98c:	f7ff fe0e 	bl	801b5ac <malloc>
 801b990:	4606      	mov	r6, r0
 801b992:	2800      	cmp	r0, #0
 801b994:	d155      	bne.n	801ba42 <setvbuf+0x15e>
 801b996:	f8dd 9000 	ldr.w	r9, [sp]
 801b99a:	45a9      	cmp	r9, r5
 801b99c:	d14a      	bne.n	801ba34 <setvbuf+0x150>
 801b99e:	f04f 35ff 	mov.w	r5, #4294967295
 801b9a2:	2200      	movs	r2, #0
 801b9a4:	60a2      	str	r2, [r4, #8]
 801b9a6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 801b9aa:	6022      	str	r2, [r4, #0]
 801b9ac:	6122      	str	r2, [r4, #16]
 801b9ae:	2201      	movs	r2, #1
 801b9b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b9b4:	6162      	str	r2, [r4, #20]
 801b9b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b9b8:	f043 0302 	orr.w	r3, r3, #2
 801b9bc:	07d2      	lsls	r2, r2, #31
 801b9be:	81a3      	strh	r3, [r4, #12]
 801b9c0:	d405      	bmi.n	801b9ce <setvbuf+0xea>
 801b9c2:	f413 7f00 	tst.w	r3, #512	; 0x200
 801b9c6:	d102      	bne.n	801b9ce <setvbuf+0xea>
 801b9c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b9ca:	f000 faca 	bl	801bf62 <__retarget_lock_release_recursive>
 801b9ce:	4628      	mov	r0, r5
 801b9d0:	b003      	add	sp, #12
 801b9d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b9d6:	4b24      	ldr	r3, [pc, #144]	; (801ba68 <setvbuf+0x184>)
 801b9d8:	429c      	cmp	r4, r3
 801b9da:	d101      	bne.n	801b9e0 <setvbuf+0xfc>
 801b9dc:	68bc      	ldr	r4, [r7, #8]
 801b9de:	e793      	b.n	801b908 <setvbuf+0x24>
 801b9e0:	4b22      	ldr	r3, [pc, #136]	; (801ba6c <setvbuf+0x188>)
 801b9e2:	429c      	cmp	r4, r3
 801b9e4:	bf08      	it	eq
 801b9e6:	68fc      	ldreq	r4, [r7, #12]
 801b9e8:	e78e      	b.n	801b908 <setvbuf+0x24>
 801b9ea:	2e00      	cmp	r6, #0
 801b9ec:	d0cd      	beq.n	801b98a <setvbuf+0xa6>
 801b9ee:	69bb      	ldr	r3, [r7, #24]
 801b9f0:	b913      	cbnz	r3, 801b9f8 <setvbuf+0x114>
 801b9f2:	4638      	mov	r0, r7
 801b9f4:	f000 fa16 	bl	801be24 <__sinit>
 801b9f8:	f1b8 0f01 	cmp.w	r8, #1
 801b9fc:	bf08      	it	eq
 801b9fe:	89a3      	ldrheq	r3, [r4, #12]
 801ba00:	6026      	str	r6, [r4, #0]
 801ba02:	bf04      	itt	eq
 801ba04:	f043 0301 	orreq.w	r3, r3, #1
 801ba08:	81a3      	strheq	r3, [r4, #12]
 801ba0a:	89a2      	ldrh	r2, [r4, #12]
 801ba0c:	f012 0308 	ands.w	r3, r2, #8
 801ba10:	e9c4 6504 	strd	r6, r5, [r4, #16]
 801ba14:	d01c      	beq.n	801ba50 <setvbuf+0x16c>
 801ba16:	07d3      	lsls	r3, r2, #31
 801ba18:	bf41      	itttt	mi
 801ba1a:	2300      	movmi	r3, #0
 801ba1c:	426d      	negmi	r5, r5
 801ba1e:	60a3      	strmi	r3, [r4, #8]
 801ba20:	61a5      	strmi	r5, [r4, #24]
 801ba22:	bf58      	it	pl
 801ba24:	60a5      	strpl	r5, [r4, #8]
 801ba26:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801ba28:	f015 0501 	ands.w	r5, r5, #1
 801ba2c:	d115      	bne.n	801ba5a <setvbuf+0x176>
 801ba2e:	f412 7f00 	tst.w	r2, #512	; 0x200
 801ba32:	e7c8      	b.n	801b9c6 <setvbuf+0xe2>
 801ba34:	4648      	mov	r0, r9
 801ba36:	f7ff fdb9 	bl	801b5ac <malloc>
 801ba3a:	4606      	mov	r6, r0
 801ba3c:	2800      	cmp	r0, #0
 801ba3e:	d0ae      	beq.n	801b99e <setvbuf+0xba>
 801ba40:	464d      	mov	r5, r9
 801ba42:	89a3      	ldrh	r3, [r4, #12]
 801ba44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ba48:	81a3      	strh	r3, [r4, #12]
 801ba4a:	e7d0      	b.n	801b9ee <setvbuf+0x10a>
 801ba4c:	2500      	movs	r5, #0
 801ba4e:	e7a8      	b.n	801b9a2 <setvbuf+0xbe>
 801ba50:	60a3      	str	r3, [r4, #8]
 801ba52:	e7e8      	b.n	801ba26 <setvbuf+0x142>
 801ba54:	f04f 35ff 	mov.w	r5, #4294967295
 801ba58:	e7b9      	b.n	801b9ce <setvbuf+0xea>
 801ba5a:	2500      	movs	r5, #0
 801ba5c:	e7b7      	b.n	801b9ce <setvbuf+0xea>
 801ba5e:	bf00      	nop
 801ba60:	240081e4 	.word	0x240081e4
 801ba64:	08091014 	.word	0x08091014
 801ba68:	08091034 	.word	0x08091034
 801ba6c:	08090ff4 	.word	0x08090ff4

0801ba70 <__swbuf_r>:
 801ba70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ba72:	460e      	mov	r6, r1
 801ba74:	4614      	mov	r4, r2
 801ba76:	4605      	mov	r5, r0
 801ba78:	b118      	cbz	r0, 801ba82 <__swbuf_r+0x12>
 801ba7a:	6983      	ldr	r3, [r0, #24]
 801ba7c:	b90b      	cbnz	r3, 801ba82 <__swbuf_r+0x12>
 801ba7e:	f000 f9d1 	bl	801be24 <__sinit>
 801ba82:	4b21      	ldr	r3, [pc, #132]	; (801bb08 <__swbuf_r+0x98>)
 801ba84:	429c      	cmp	r4, r3
 801ba86:	d12b      	bne.n	801bae0 <__swbuf_r+0x70>
 801ba88:	686c      	ldr	r4, [r5, #4]
 801ba8a:	69a3      	ldr	r3, [r4, #24]
 801ba8c:	60a3      	str	r3, [r4, #8]
 801ba8e:	89a3      	ldrh	r3, [r4, #12]
 801ba90:	071a      	lsls	r2, r3, #28
 801ba92:	d52f      	bpl.n	801baf4 <__swbuf_r+0x84>
 801ba94:	6923      	ldr	r3, [r4, #16]
 801ba96:	b36b      	cbz	r3, 801baf4 <__swbuf_r+0x84>
 801ba98:	6923      	ldr	r3, [r4, #16]
 801ba9a:	6820      	ldr	r0, [r4, #0]
 801ba9c:	1ac0      	subs	r0, r0, r3
 801ba9e:	6963      	ldr	r3, [r4, #20]
 801baa0:	b2f6      	uxtb	r6, r6
 801baa2:	4283      	cmp	r3, r0
 801baa4:	4637      	mov	r7, r6
 801baa6:	dc04      	bgt.n	801bab2 <__swbuf_r+0x42>
 801baa8:	4621      	mov	r1, r4
 801baaa:	4628      	mov	r0, r5
 801baac:	f000 f926 	bl	801bcfc <_fflush_r>
 801bab0:	bb30      	cbnz	r0, 801bb00 <__swbuf_r+0x90>
 801bab2:	68a3      	ldr	r3, [r4, #8]
 801bab4:	3b01      	subs	r3, #1
 801bab6:	60a3      	str	r3, [r4, #8]
 801bab8:	6823      	ldr	r3, [r4, #0]
 801baba:	1c5a      	adds	r2, r3, #1
 801babc:	6022      	str	r2, [r4, #0]
 801babe:	701e      	strb	r6, [r3, #0]
 801bac0:	6963      	ldr	r3, [r4, #20]
 801bac2:	3001      	adds	r0, #1
 801bac4:	4283      	cmp	r3, r0
 801bac6:	d004      	beq.n	801bad2 <__swbuf_r+0x62>
 801bac8:	89a3      	ldrh	r3, [r4, #12]
 801baca:	07db      	lsls	r3, r3, #31
 801bacc:	d506      	bpl.n	801badc <__swbuf_r+0x6c>
 801bace:	2e0a      	cmp	r6, #10
 801bad0:	d104      	bne.n	801badc <__swbuf_r+0x6c>
 801bad2:	4621      	mov	r1, r4
 801bad4:	4628      	mov	r0, r5
 801bad6:	f000 f911 	bl	801bcfc <_fflush_r>
 801bada:	b988      	cbnz	r0, 801bb00 <__swbuf_r+0x90>
 801badc:	4638      	mov	r0, r7
 801bade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bae0:	4b0a      	ldr	r3, [pc, #40]	; (801bb0c <__swbuf_r+0x9c>)
 801bae2:	429c      	cmp	r4, r3
 801bae4:	d101      	bne.n	801baea <__swbuf_r+0x7a>
 801bae6:	68ac      	ldr	r4, [r5, #8]
 801bae8:	e7cf      	b.n	801ba8a <__swbuf_r+0x1a>
 801baea:	4b09      	ldr	r3, [pc, #36]	; (801bb10 <__swbuf_r+0xa0>)
 801baec:	429c      	cmp	r4, r3
 801baee:	bf08      	it	eq
 801baf0:	68ec      	ldreq	r4, [r5, #12]
 801baf2:	e7ca      	b.n	801ba8a <__swbuf_r+0x1a>
 801baf4:	4621      	mov	r1, r4
 801baf6:	4628      	mov	r0, r5
 801baf8:	f000 f80c 	bl	801bb14 <__swsetup_r>
 801bafc:	2800      	cmp	r0, #0
 801bafe:	d0cb      	beq.n	801ba98 <__swbuf_r+0x28>
 801bb00:	f04f 37ff 	mov.w	r7, #4294967295
 801bb04:	e7ea      	b.n	801badc <__swbuf_r+0x6c>
 801bb06:	bf00      	nop
 801bb08:	08091014 	.word	0x08091014
 801bb0c:	08091034 	.word	0x08091034
 801bb10:	08090ff4 	.word	0x08090ff4

0801bb14 <__swsetup_r>:
 801bb14:	4b32      	ldr	r3, [pc, #200]	; (801bbe0 <__swsetup_r+0xcc>)
 801bb16:	b570      	push	{r4, r5, r6, lr}
 801bb18:	681d      	ldr	r5, [r3, #0]
 801bb1a:	4606      	mov	r6, r0
 801bb1c:	460c      	mov	r4, r1
 801bb1e:	b125      	cbz	r5, 801bb2a <__swsetup_r+0x16>
 801bb20:	69ab      	ldr	r3, [r5, #24]
 801bb22:	b913      	cbnz	r3, 801bb2a <__swsetup_r+0x16>
 801bb24:	4628      	mov	r0, r5
 801bb26:	f000 f97d 	bl	801be24 <__sinit>
 801bb2a:	4b2e      	ldr	r3, [pc, #184]	; (801bbe4 <__swsetup_r+0xd0>)
 801bb2c:	429c      	cmp	r4, r3
 801bb2e:	d10f      	bne.n	801bb50 <__swsetup_r+0x3c>
 801bb30:	686c      	ldr	r4, [r5, #4]
 801bb32:	89a3      	ldrh	r3, [r4, #12]
 801bb34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bb38:	0719      	lsls	r1, r3, #28
 801bb3a:	d42c      	bmi.n	801bb96 <__swsetup_r+0x82>
 801bb3c:	06dd      	lsls	r5, r3, #27
 801bb3e:	d411      	bmi.n	801bb64 <__swsetup_r+0x50>
 801bb40:	2309      	movs	r3, #9
 801bb42:	6033      	str	r3, [r6, #0]
 801bb44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801bb48:	81a3      	strh	r3, [r4, #12]
 801bb4a:	f04f 30ff 	mov.w	r0, #4294967295
 801bb4e:	e03e      	b.n	801bbce <__swsetup_r+0xba>
 801bb50:	4b25      	ldr	r3, [pc, #148]	; (801bbe8 <__swsetup_r+0xd4>)
 801bb52:	429c      	cmp	r4, r3
 801bb54:	d101      	bne.n	801bb5a <__swsetup_r+0x46>
 801bb56:	68ac      	ldr	r4, [r5, #8]
 801bb58:	e7eb      	b.n	801bb32 <__swsetup_r+0x1e>
 801bb5a:	4b24      	ldr	r3, [pc, #144]	; (801bbec <__swsetup_r+0xd8>)
 801bb5c:	429c      	cmp	r4, r3
 801bb5e:	bf08      	it	eq
 801bb60:	68ec      	ldreq	r4, [r5, #12]
 801bb62:	e7e6      	b.n	801bb32 <__swsetup_r+0x1e>
 801bb64:	0758      	lsls	r0, r3, #29
 801bb66:	d512      	bpl.n	801bb8e <__swsetup_r+0x7a>
 801bb68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bb6a:	b141      	cbz	r1, 801bb7e <__swsetup_r+0x6a>
 801bb6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bb70:	4299      	cmp	r1, r3
 801bb72:	d002      	beq.n	801bb7a <__swsetup_r+0x66>
 801bb74:	4630      	mov	r0, r6
 801bb76:	f7ff fd37 	bl	801b5e8 <_free_r>
 801bb7a:	2300      	movs	r3, #0
 801bb7c:	6363      	str	r3, [r4, #52]	; 0x34
 801bb7e:	89a3      	ldrh	r3, [r4, #12]
 801bb80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801bb84:	81a3      	strh	r3, [r4, #12]
 801bb86:	2300      	movs	r3, #0
 801bb88:	6063      	str	r3, [r4, #4]
 801bb8a:	6923      	ldr	r3, [r4, #16]
 801bb8c:	6023      	str	r3, [r4, #0]
 801bb8e:	89a3      	ldrh	r3, [r4, #12]
 801bb90:	f043 0308 	orr.w	r3, r3, #8
 801bb94:	81a3      	strh	r3, [r4, #12]
 801bb96:	6923      	ldr	r3, [r4, #16]
 801bb98:	b94b      	cbnz	r3, 801bbae <__swsetup_r+0x9a>
 801bb9a:	89a3      	ldrh	r3, [r4, #12]
 801bb9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801bba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bba4:	d003      	beq.n	801bbae <__swsetup_r+0x9a>
 801bba6:	4621      	mov	r1, r4
 801bba8:	4630      	mov	r0, r6
 801bbaa:	f000 fa01 	bl	801bfb0 <__smakebuf_r>
 801bbae:	89a0      	ldrh	r0, [r4, #12]
 801bbb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bbb4:	f010 0301 	ands.w	r3, r0, #1
 801bbb8:	d00a      	beq.n	801bbd0 <__swsetup_r+0xbc>
 801bbba:	2300      	movs	r3, #0
 801bbbc:	60a3      	str	r3, [r4, #8]
 801bbbe:	6963      	ldr	r3, [r4, #20]
 801bbc0:	425b      	negs	r3, r3
 801bbc2:	61a3      	str	r3, [r4, #24]
 801bbc4:	6923      	ldr	r3, [r4, #16]
 801bbc6:	b943      	cbnz	r3, 801bbda <__swsetup_r+0xc6>
 801bbc8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801bbcc:	d1ba      	bne.n	801bb44 <__swsetup_r+0x30>
 801bbce:	bd70      	pop	{r4, r5, r6, pc}
 801bbd0:	0781      	lsls	r1, r0, #30
 801bbd2:	bf58      	it	pl
 801bbd4:	6963      	ldrpl	r3, [r4, #20]
 801bbd6:	60a3      	str	r3, [r4, #8]
 801bbd8:	e7f4      	b.n	801bbc4 <__swsetup_r+0xb0>
 801bbda:	2000      	movs	r0, #0
 801bbdc:	e7f7      	b.n	801bbce <__swsetup_r+0xba>
 801bbde:	bf00      	nop
 801bbe0:	240081e4 	.word	0x240081e4
 801bbe4:	08091014 	.word	0x08091014
 801bbe8:	08091034 	.word	0x08091034
 801bbec:	08090ff4 	.word	0x08090ff4

0801bbf0 <__sflush_r>:
 801bbf0:	898a      	ldrh	r2, [r1, #12]
 801bbf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bbf6:	4605      	mov	r5, r0
 801bbf8:	0710      	lsls	r0, r2, #28
 801bbfa:	460c      	mov	r4, r1
 801bbfc:	d458      	bmi.n	801bcb0 <__sflush_r+0xc0>
 801bbfe:	684b      	ldr	r3, [r1, #4]
 801bc00:	2b00      	cmp	r3, #0
 801bc02:	dc05      	bgt.n	801bc10 <__sflush_r+0x20>
 801bc04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801bc06:	2b00      	cmp	r3, #0
 801bc08:	dc02      	bgt.n	801bc10 <__sflush_r+0x20>
 801bc0a:	2000      	movs	r0, #0
 801bc0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bc12:	2e00      	cmp	r6, #0
 801bc14:	d0f9      	beq.n	801bc0a <__sflush_r+0x1a>
 801bc16:	2300      	movs	r3, #0
 801bc18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801bc1c:	682f      	ldr	r7, [r5, #0]
 801bc1e:	602b      	str	r3, [r5, #0]
 801bc20:	d032      	beq.n	801bc88 <__sflush_r+0x98>
 801bc22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801bc24:	89a3      	ldrh	r3, [r4, #12]
 801bc26:	075a      	lsls	r2, r3, #29
 801bc28:	d505      	bpl.n	801bc36 <__sflush_r+0x46>
 801bc2a:	6863      	ldr	r3, [r4, #4]
 801bc2c:	1ac0      	subs	r0, r0, r3
 801bc2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bc30:	b10b      	cbz	r3, 801bc36 <__sflush_r+0x46>
 801bc32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801bc34:	1ac0      	subs	r0, r0, r3
 801bc36:	2300      	movs	r3, #0
 801bc38:	4602      	mov	r2, r0
 801bc3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bc3c:	6a21      	ldr	r1, [r4, #32]
 801bc3e:	4628      	mov	r0, r5
 801bc40:	47b0      	blx	r6
 801bc42:	1c43      	adds	r3, r0, #1
 801bc44:	89a3      	ldrh	r3, [r4, #12]
 801bc46:	d106      	bne.n	801bc56 <__sflush_r+0x66>
 801bc48:	6829      	ldr	r1, [r5, #0]
 801bc4a:	291d      	cmp	r1, #29
 801bc4c:	d82c      	bhi.n	801bca8 <__sflush_r+0xb8>
 801bc4e:	4a2a      	ldr	r2, [pc, #168]	; (801bcf8 <__sflush_r+0x108>)
 801bc50:	40ca      	lsrs	r2, r1
 801bc52:	07d6      	lsls	r6, r2, #31
 801bc54:	d528      	bpl.n	801bca8 <__sflush_r+0xb8>
 801bc56:	2200      	movs	r2, #0
 801bc58:	6062      	str	r2, [r4, #4]
 801bc5a:	04d9      	lsls	r1, r3, #19
 801bc5c:	6922      	ldr	r2, [r4, #16]
 801bc5e:	6022      	str	r2, [r4, #0]
 801bc60:	d504      	bpl.n	801bc6c <__sflush_r+0x7c>
 801bc62:	1c42      	adds	r2, r0, #1
 801bc64:	d101      	bne.n	801bc6a <__sflush_r+0x7a>
 801bc66:	682b      	ldr	r3, [r5, #0]
 801bc68:	b903      	cbnz	r3, 801bc6c <__sflush_r+0x7c>
 801bc6a:	6560      	str	r0, [r4, #84]	; 0x54
 801bc6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bc6e:	602f      	str	r7, [r5, #0]
 801bc70:	2900      	cmp	r1, #0
 801bc72:	d0ca      	beq.n	801bc0a <__sflush_r+0x1a>
 801bc74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bc78:	4299      	cmp	r1, r3
 801bc7a:	d002      	beq.n	801bc82 <__sflush_r+0x92>
 801bc7c:	4628      	mov	r0, r5
 801bc7e:	f7ff fcb3 	bl	801b5e8 <_free_r>
 801bc82:	2000      	movs	r0, #0
 801bc84:	6360      	str	r0, [r4, #52]	; 0x34
 801bc86:	e7c1      	b.n	801bc0c <__sflush_r+0x1c>
 801bc88:	6a21      	ldr	r1, [r4, #32]
 801bc8a:	2301      	movs	r3, #1
 801bc8c:	4628      	mov	r0, r5
 801bc8e:	47b0      	blx	r6
 801bc90:	1c41      	adds	r1, r0, #1
 801bc92:	d1c7      	bne.n	801bc24 <__sflush_r+0x34>
 801bc94:	682b      	ldr	r3, [r5, #0]
 801bc96:	2b00      	cmp	r3, #0
 801bc98:	d0c4      	beq.n	801bc24 <__sflush_r+0x34>
 801bc9a:	2b1d      	cmp	r3, #29
 801bc9c:	d001      	beq.n	801bca2 <__sflush_r+0xb2>
 801bc9e:	2b16      	cmp	r3, #22
 801bca0:	d101      	bne.n	801bca6 <__sflush_r+0xb6>
 801bca2:	602f      	str	r7, [r5, #0]
 801bca4:	e7b1      	b.n	801bc0a <__sflush_r+0x1a>
 801bca6:	89a3      	ldrh	r3, [r4, #12]
 801bca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bcac:	81a3      	strh	r3, [r4, #12]
 801bcae:	e7ad      	b.n	801bc0c <__sflush_r+0x1c>
 801bcb0:	690f      	ldr	r7, [r1, #16]
 801bcb2:	2f00      	cmp	r7, #0
 801bcb4:	d0a9      	beq.n	801bc0a <__sflush_r+0x1a>
 801bcb6:	0793      	lsls	r3, r2, #30
 801bcb8:	680e      	ldr	r6, [r1, #0]
 801bcba:	bf08      	it	eq
 801bcbc:	694b      	ldreq	r3, [r1, #20]
 801bcbe:	600f      	str	r7, [r1, #0]
 801bcc0:	bf18      	it	ne
 801bcc2:	2300      	movne	r3, #0
 801bcc4:	eba6 0807 	sub.w	r8, r6, r7
 801bcc8:	608b      	str	r3, [r1, #8]
 801bcca:	f1b8 0f00 	cmp.w	r8, #0
 801bcce:	dd9c      	ble.n	801bc0a <__sflush_r+0x1a>
 801bcd0:	6a21      	ldr	r1, [r4, #32]
 801bcd2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801bcd4:	4643      	mov	r3, r8
 801bcd6:	463a      	mov	r2, r7
 801bcd8:	4628      	mov	r0, r5
 801bcda:	47b0      	blx	r6
 801bcdc:	2800      	cmp	r0, #0
 801bcde:	dc06      	bgt.n	801bcee <__sflush_r+0xfe>
 801bce0:	89a3      	ldrh	r3, [r4, #12]
 801bce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bce6:	81a3      	strh	r3, [r4, #12]
 801bce8:	f04f 30ff 	mov.w	r0, #4294967295
 801bcec:	e78e      	b.n	801bc0c <__sflush_r+0x1c>
 801bcee:	4407      	add	r7, r0
 801bcf0:	eba8 0800 	sub.w	r8, r8, r0
 801bcf4:	e7e9      	b.n	801bcca <__sflush_r+0xda>
 801bcf6:	bf00      	nop
 801bcf8:	20400001 	.word	0x20400001

0801bcfc <_fflush_r>:
 801bcfc:	b538      	push	{r3, r4, r5, lr}
 801bcfe:	690b      	ldr	r3, [r1, #16]
 801bd00:	4605      	mov	r5, r0
 801bd02:	460c      	mov	r4, r1
 801bd04:	b913      	cbnz	r3, 801bd0c <_fflush_r+0x10>
 801bd06:	2500      	movs	r5, #0
 801bd08:	4628      	mov	r0, r5
 801bd0a:	bd38      	pop	{r3, r4, r5, pc}
 801bd0c:	b118      	cbz	r0, 801bd16 <_fflush_r+0x1a>
 801bd0e:	6983      	ldr	r3, [r0, #24]
 801bd10:	b90b      	cbnz	r3, 801bd16 <_fflush_r+0x1a>
 801bd12:	f000 f887 	bl	801be24 <__sinit>
 801bd16:	4b14      	ldr	r3, [pc, #80]	; (801bd68 <_fflush_r+0x6c>)
 801bd18:	429c      	cmp	r4, r3
 801bd1a:	d11b      	bne.n	801bd54 <_fflush_r+0x58>
 801bd1c:	686c      	ldr	r4, [r5, #4]
 801bd1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bd22:	2b00      	cmp	r3, #0
 801bd24:	d0ef      	beq.n	801bd06 <_fflush_r+0xa>
 801bd26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801bd28:	07d0      	lsls	r0, r2, #31
 801bd2a:	d404      	bmi.n	801bd36 <_fflush_r+0x3a>
 801bd2c:	0599      	lsls	r1, r3, #22
 801bd2e:	d402      	bmi.n	801bd36 <_fflush_r+0x3a>
 801bd30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bd32:	f000 f915 	bl	801bf60 <__retarget_lock_acquire_recursive>
 801bd36:	4628      	mov	r0, r5
 801bd38:	4621      	mov	r1, r4
 801bd3a:	f7ff ff59 	bl	801bbf0 <__sflush_r>
 801bd3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bd40:	07da      	lsls	r2, r3, #31
 801bd42:	4605      	mov	r5, r0
 801bd44:	d4e0      	bmi.n	801bd08 <_fflush_r+0xc>
 801bd46:	89a3      	ldrh	r3, [r4, #12]
 801bd48:	059b      	lsls	r3, r3, #22
 801bd4a:	d4dd      	bmi.n	801bd08 <_fflush_r+0xc>
 801bd4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bd4e:	f000 f908 	bl	801bf62 <__retarget_lock_release_recursive>
 801bd52:	e7d9      	b.n	801bd08 <_fflush_r+0xc>
 801bd54:	4b05      	ldr	r3, [pc, #20]	; (801bd6c <_fflush_r+0x70>)
 801bd56:	429c      	cmp	r4, r3
 801bd58:	d101      	bne.n	801bd5e <_fflush_r+0x62>
 801bd5a:	68ac      	ldr	r4, [r5, #8]
 801bd5c:	e7df      	b.n	801bd1e <_fflush_r+0x22>
 801bd5e:	4b04      	ldr	r3, [pc, #16]	; (801bd70 <_fflush_r+0x74>)
 801bd60:	429c      	cmp	r4, r3
 801bd62:	bf08      	it	eq
 801bd64:	68ec      	ldreq	r4, [r5, #12]
 801bd66:	e7da      	b.n	801bd1e <_fflush_r+0x22>
 801bd68:	08091014 	.word	0x08091014
 801bd6c:	08091034 	.word	0x08091034
 801bd70:	08090ff4 	.word	0x08090ff4

0801bd74 <std>:
 801bd74:	2300      	movs	r3, #0
 801bd76:	b510      	push	{r4, lr}
 801bd78:	4604      	mov	r4, r0
 801bd7a:	e9c0 3300 	strd	r3, r3, [r0]
 801bd7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801bd82:	6083      	str	r3, [r0, #8]
 801bd84:	8181      	strh	r1, [r0, #12]
 801bd86:	6643      	str	r3, [r0, #100]	; 0x64
 801bd88:	81c2      	strh	r2, [r0, #14]
 801bd8a:	6183      	str	r3, [r0, #24]
 801bd8c:	4619      	mov	r1, r3
 801bd8e:	2208      	movs	r2, #8
 801bd90:	305c      	adds	r0, #92	; 0x5c
 801bd92:	f7ff fc21 	bl	801b5d8 <memset>
 801bd96:	4b05      	ldr	r3, [pc, #20]	; (801bdac <std+0x38>)
 801bd98:	6263      	str	r3, [r4, #36]	; 0x24
 801bd9a:	4b05      	ldr	r3, [pc, #20]	; (801bdb0 <std+0x3c>)
 801bd9c:	62a3      	str	r3, [r4, #40]	; 0x28
 801bd9e:	4b05      	ldr	r3, [pc, #20]	; (801bdb4 <std+0x40>)
 801bda0:	62e3      	str	r3, [r4, #44]	; 0x2c
 801bda2:	4b05      	ldr	r3, [pc, #20]	; (801bdb8 <std+0x44>)
 801bda4:	6224      	str	r4, [r4, #32]
 801bda6:	6323      	str	r3, [r4, #48]	; 0x30
 801bda8:	bd10      	pop	{r4, pc}
 801bdaa:	bf00      	nop
 801bdac:	0801c625 	.word	0x0801c625
 801bdb0:	0801c647 	.word	0x0801c647
 801bdb4:	0801c67f 	.word	0x0801c67f
 801bdb8:	0801c6a3 	.word	0x0801c6a3

0801bdbc <_cleanup_r>:
 801bdbc:	4901      	ldr	r1, [pc, #4]	; (801bdc4 <_cleanup_r+0x8>)
 801bdbe:	f000 b8af 	b.w	801bf20 <_fwalk_reent>
 801bdc2:	bf00      	nop
 801bdc4:	0801bcfd 	.word	0x0801bcfd

0801bdc8 <__sfmoreglue>:
 801bdc8:	b570      	push	{r4, r5, r6, lr}
 801bdca:	2268      	movs	r2, #104	; 0x68
 801bdcc:	1e4d      	subs	r5, r1, #1
 801bdce:	4355      	muls	r5, r2
 801bdd0:	460e      	mov	r6, r1
 801bdd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801bdd6:	f7ff fc73 	bl	801b6c0 <_malloc_r>
 801bdda:	4604      	mov	r4, r0
 801bddc:	b140      	cbz	r0, 801bdf0 <__sfmoreglue+0x28>
 801bdde:	2100      	movs	r1, #0
 801bde0:	e9c0 1600 	strd	r1, r6, [r0]
 801bde4:	300c      	adds	r0, #12
 801bde6:	60a0      	str	r0, [r4, #8]
 801bde8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801bdec:	f7ff fbf4 	bl	801b5d8 <memset>
 801bdf0:	4620      	mov	r0, r4
 801bdf2:	bd70      	pop	{r4, r5, r6, pc}

0801bdf4 <__sfp_lock_acquire>:
 801bdf4:	4801      	ldr	r0, [pc, #4]	; (801bdfc <__sfp_lock_acquire+0x8>)
 801bdf6:	f000 b8b3 	b.w	801bf60 <__retarget_lock_acquire_recursive>
 801bdfa:	bf00      	nop
 801bdfc:	2405e3b9 	.word	0x2405e3b9

0801be00 <__sfp_lock_release>:
 801be00:	4801      	ldr	r0, [pc, #4]	; (801be08 <__sfp_lock_release+0x8>)
 801be02:	f000 b8ae 	b.w	801bf62 <__retarget_lock_release_recursive>
 801be06:	bf00      	nop
 801be08:	2405e3b9 	.word	0x2405e3b9

0801be0c <__sinit_lock_acquire>:
 801be0c:	4801      	ldr	r0, [pc, #4]	; (801be14 <__sinit_lock_acquire+0x8>)
 801be0e:	f000 b8a7 	b.w	801bf60 <__retarget_lock_acquire_recursive>
 801be12:	bf00      	nop
 801be14:	2405e3ba 	.word	0x2405e3ba

0801be18 <__sinit_lock_release>:
 801be18:	4801      	ldr	r0, [pc, #4]	; (801be20 <__sinit_lock_release+0x8>)
 801be1a:	f000 b8a2 	b.w	801bf62 <__retarget_lock_release_recursive>
 801be1e:	bf00      	nop
 801be20:	2405e3ba 	.word	0x2405e3ba

0801be24 <__sinit>:
 801be24:	b510      	push	{r4, lr}
 801be26:	4604      	mov	r4, r0
 801be28:	f7ff fff0 	bl	801be0c <__sinit_lock_acquire>
 801be2c:	69a3      	ldr	r3, [r4, #24]
 801be2e:	b11b      	cbz	r3, 801be38 <__sinit+0x14>
 801be30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801be34:	f7ff bff0 	b.w	801be18 <__sinit_lock_release>
 801be38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801be3c:	6523      	str	r3, [r4, #80]	; 0x50
 801be3e:	4b13      	ldr	r3, [pc, #76]	; (801be8c <__sinit+0x68>)
 801be40:	4a13      	ldr	r2, [pc, #76]	; (801be90 <__sinit+0x6c>)
 801be42:	681b      	ldr	r3, [r3, #0]
 801be44:	62a2      	str	r2, [r4, #40]	; 0x28
 801be46:	42a3      	cmp	r3, r4
 801be48:	bf04      	itt	eq
 801be4a:	2301      	moveq	r3, #1
 801be4c:	61a3      	streq	r3, [r4, #24]
 801be4e:	4620      	mov	r0, r4
 801be50:	f000 f820 	bl	801be94 <__sfp>
 801be54:	6060      	str	r0, [r4, #4]
 801be56:	4620      	mov	r0, r4
 801be58:	f000 f81c 	bl	801be94 <__sfp>
 801be5c:	60a0      	str	r0, [r4, #8]
 801be5e:	4620      	mov	r0, r4
 801be60:	f000 f818 	bl	801be94 <__sfp>
 801be64:	2200      	movs	r2, #0
 801be66:	60e0      	str	r0, [r4, #12]
 801be68:	2104      	movs	r1, #4
 801be6a:	6860      	ldr	r0, [r4, #4]
 801be6c:	f7ff ff82 	bl	801bd74 <std>
 801be70:	68a0      	ldr	r0, [r4, #8]
 801be72:	2201      	movs	r2, #1
 801be74:	2109      	movs	r1, #9
 801be76:	f7ff ff7d 	bl	801bd74 <std>
 801be7a:	68e0      	ldr	r0, [r4, #12]
 801be7c:	2202      	movs	r2, #2
 801be7e:	2112      	movs	r1, #18
 801be80:	f7ff ff78 	bl	801bd74 <std>
 801be84:	2301      	movs	r3, #1
 801be86:	61a3      	str	r3, [r4, #24]
 801be88:	e7d2      	b.n	801be30 <__sinit+0xc>
 801be8a:	bf00      	nop
 801be8c:	08090ff0 	.word	0x08090ff0
 801be90:	0801bdbd 	.word	0x0801bdbd

0801be94 <__sfp>:
 801be94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be96:	4607      	mov	r7, r0
 801be98:	f7ff ffac 	bl	801bdf4 <__sfp_lock_acquire>
 801be9c:	4b1e      	ldr	r3, [pc, #120]	; (801bf18 <__sfp+0x84>)
 801be9e:	681e      	ldr	r6, [r3, #0]
 801bea0:	69b3      	ldr	r3, [r6, #24]
 801bea2:	b913      	cbnz	r3, 801beaa <__sfp+0x16>
 801bea4:	4630      	mov	r0, r6
 801bea6:	f7ff ffbd 	bl	801be24 <__sinit>
 801beaa:	3648      	adds	r6, #72	; 0x48
 801beac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801beb0:	3b01      	subs	r3, #1
 801beb2:	d503      	bpl.n	801bebc <__sfp+0x28>
 801beb4:	6833      	ldr	r3, [r6, #0]
 801beb6:	b30b      	cbz	r3, 801befc <__sfp+0x68>
 801beb8:	6836      	ldr	r6, [r6, #0]
 801beba:	e7f7      	b.n	801beac <__sfp+0x18>
 801bebc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801bec0:	b9d5      	cbnz	r5, 801bef8 <__sfp+0x64>
 801bec2:	4b16      	ldr	r3, [pc, #88]	; (801bf1c <__sfp+0x88>)
 801bec4:	60e3      	str	r3, [r4, #12]
 801bec6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801beca:	6665      	str	r5, [r4, #100]	; 0x64
 801becc:	f000 f847 	bl	801bf5e <__retarget_lock_init_recursive>
 801bed0:	f7ff ff96 	bl	801be00 <__sfp_lock_release>
 801bed4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801bed8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801bedc:	6025      	str	r5, [r4, #0]
 801bede:	61a5      	str	r5, [r4, #24]
 801bee0:	2208      	movs	r2, #8
 801bee2:	4629      	mov	r1, r5
 801bee4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801bee8:	f7ff fb76 	bl	801b5d8 <memset>
 801beec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801bef0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801bef4:	4620      	mov	r0, r4
 801bef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bef8:	3468      	adds	r4, #104	; 0x68
 801befa:	e7d9      	b.n	801beb0 <__sfp+0x1c>
 801befc:	2104      	movs	r1, #4
 801befe:	4638      	mov	r0, r7
 801bf00:	f7ff ff62 	bl	801bdc8 <__sfmoreglue>
 801bf04:	4604      	mov	r4, r0
 801bf06:	6030      	str	r0, [r6, #0]
 801bf08:	2800      	cmp	r0, #0
 801bf0a:	d1d5      	bne.n	801beb8 <__sfp+0x24>
 801bf0c:	f7ff ff78 	bl	801be00 <__sfp_lock_release>
 801bf10:	230c      	movs	r3, #12
 801bf12:	603b      	str	r3, [r7, #0]
 801bf14:	e7ee      	b.n	801bef4 <__sfp+0x60>
 801bf16:	bf00      	nop
 801bf18:	08090ff0 	.word	0x08090ff0
 801bf1c:	ffff0001 	.word	0xffff0001

0801bf20 <_fwalk_reent>:
 801bf20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bf24:	4606      	mov	r6, r0
 801bf26:	4688      	mov	r8, r1
 801bf28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801bf2c:	2700      	movs	r7, #0
 801bf2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801bf32:	f1b9 0901 	subs.w	r9, r9, #1
 801bf36:	d505      	bpl.n	801bf44 <_fwalk_reent+0x24>
 801bf38:	6824      	ldr	r4, [r4, #0]
 801bf3a:	2c00      	cmp	r4, #0
 801bf3c:	d1f7      	bne.n	801bf2e <_fwalk_reent+0xe>
 801bf3e:	4638      	mov	r0, r7
 801bf40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bf44:	89ab      	ldrh	r3, [r5, #12]
 801bf46:	2b01      	cmp	r3, #1
 801bf48:	d907      	bls.n	801bf5a <_fwalk_reent+0x3a>
 801bf4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801bf4e:	3301      	adds	r3, #1
 801bf50:	d003      	beq.n	801bf5a <_fwalk_reent+0x3a>
 801bf52:	4629      	mov	r1, r5
 801bf54:	4630      	mov	r0, r6
 801bf56:	47c0      	blx	r8
 801bf58:	4307      	orrs	r7, r0
 801bf5a:	3568      	adds	r5, #104	; 0x68
 801bf5c:	e7e9      	b.n	801bf32 <_fwalk_reent+0x12>

0801bf5e <__retarget_lock_init_recursive>:
 801bf5e:	4770      	bx	lr

0801bf60 <__retarget_lock_acquire_recursive>:
 801bf60:	4770      	bx	lr

0801bf62 <__retarget_lock_release_recursive>:
 801bf62:	4770      	bx	lr

0801bf64 <__swhatbuf_r>:
 801bf64:	b570      	push	{r4, r5, r6, lr}
 801bf66:	460e      	mov	r6, r1
 801bf68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bf6c:	2900      	cmp	r1, #0
 801bf6e:	b096      	sub	sp, #88	; 0x58
 801bf70:	4614      	mov	r4, r2
 801bf72:	461d      	mov	r5, r3
 801bf74:	da08      	bge.n	801bf88 <__swhatbuf_r+0x24>
 801bf76:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801bf7a:	2200      	movs	r2, #0
 801bf7c:	602a      	str	r2, [r5, #0]
 801bf7e:	061a      	lsls	r2, r3, #24
 801bf80:	d410      	bmi.n	801bfa4 <__swhatbuf_r+0x40>
 801bf82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bf86:	e00e      	b.n	801bfa6 <__swhatbuf_r+0x42>
 801bf88:	466a      	mov	r2, sp
 801bf8a:	f000 fbb1 	bl	801c6f0 <_fstat_r>
 801bf8e:	2800      	cmp	r0, #0
 801bf90:	dbf1      	blt.n	801bf76 <__swhatbuf_r+0x12>
 801bf92:	9a01      	ldr	r2, [sp, #4]
 801bf94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801bf98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801bf9c:	425a      	negs	r2, r3
 801bf9e:	415a      	adcs	r2, r3
 801bfa0:	602a      	str	r2, [r5, #0]
 801bfa2:	e7ee      	b.n	801bf82 <__swhatbuf_r+0x1e>
 801bfa4:	2340      	movs	r3, #64	; 0x40
 801bfa6:	2000      	movs	r0, #0
 801bfa8:	6023      	str	r3, [r4, #0]
 801bfaa:	b016      	add	sp, #88	; 0x58
 801bfac:	bd70      	pop	{r4, r5, r6, pc}
	...

0801bfb0 <__smakebuf_r>:
 801bfb0:	898b      	ldrh	r3, [r1, #12]
 801bfb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bfb4:	079d      	lsls	r5, r3, #30
 801bfb6:	4606      	mov	r6, r0
 801bfb8:	460c      	mov	r4, r1
 801bfba:	d507      	bpl.n	801bfcc <__smakebuf_r+0x1c>
 801bfbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801bfc0:	6023      	str	r3, [r4, #0]
 801bfc2:	6123      	str	r3, [r4, #16]
 801bfc4:	2301      	movs	r3, #1
 801bfc6:	6163      	str	r3, [r4, #20]
 801bfc8:	b002      	add	sp, #8
 801bfca:	bd70      	pop	{r4, r5, r6, pc}
 801bfcc:	ab01      	add	r3, sp, #4
 801bfce:	466a      	mov	r2, sp
 801bfd0:	f7ff ffc8 	bl	801bf64 <__swhatbuf_r>
 801bfd4:	9900      	ldr	r1, [sp, #0]
 801bfd6:	4605      	mov	r5, r0
 801bfd8:	4630      	mov	r0, r6
 801bfda:	f7ff fb71 	bl	801b6c0 <_malloc_r>
 801bfde:	b948      	cbnz	r0, 801bff4 <__smakebuf_r+0x44>
 801bfe0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bfe4:	059a      	lsls	r2, r3, #22
 801bfe6:	d4ef      	bmi.n	801bfc8 <__smakebuf_r+0x18>
 801bfe8:	f023 0303 	bic.w	r3, r3, #3
 801bfec:	f043 0302 	orr.w	r3, r3, #2
 801bff0:	81a3      	strh	r3, [r4, #12]
 801bff2:	e7e3      	b.n	801bfbc <__smakebuf_r+0xc>
 801bff4:	4b0d      	ldr	r3, [pc, #52]	; (801c02c <__smakebuf_r+0x7c>)
 801bff6:	62b3      	str	r3, [r6, #40]	; 0x28
 801bff8:	89a3      	ldrh	r3, [r4, #12]
 801bffa:	6020      	str	r0, [r4, #0]
 801bffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c000:	81a3      	strh	r3, [r4, #12]
 801c002:	9b00      	ldr	r3, [sp, #0]
 801c004:	6163      	str	r3, [r4, #20]
 801c006:	9b01      	ldr	r3, [sp, #4]
 801c008:	6120      	str	r0, [r4, #16]
 801c00a:	b15b      	cbz	r3, 801c024 <__smakebuf_r+0x74>
 801c00c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c010:	4630      	mov	r0, r6
 801c012:	f000 fb7f 	bl	801c714 <_isatty_r>
 801c016:	b128      	cbz	r0, 801c024 <__smakebuf_r+0x74>
 801c018:	89a3      	ldrh	r3, [r4, #12]
 801c01a:	f023 0303 	bic.w	r3, r3, #3
 801c01e:	f043 0301 	orr.w	r3, r3, #1
 801c022:	81a3      	strh	r3, [r4, #12]
 801c024:	89a0      	ldrh	r0, [r4, #12]
 801c026:	4305      	orrs	r5, r0
 801c028:	81a5      	strh	r5, [r4, #12]
 801c02a:	e7cd      	b.n	801bfc8 <__smakebuf_r+0x18>
 801c02c:	0801bdbd 	.word	0x0801bdbd

0801c030 <__malloc_lock>:
 801c030:	4801      	ldr	r0, [pc, #4]	; (801c038 <__malloc_lock+0x8>)
 801c032:	f7ff bf95 	b.w	801bf60 <__retarget_lock_acquire_recursive>
 801c036:	bf00      	nop
 801c038:	2405e3b8 	.word	0x2405e3b8

0801c03c <__malloc_unlock>:
 801c03c:	4801      	ldr	r0, [pc, #4]	; (801c044 <__malloc_unlock+0x8>)
 801c03e:	f7ff bf90 	b.w	801bf62 <__retarget_lock_release_recursive>
 801c042:	bf00      	nop
 801c044:	2405e3b8 	.word	0x2405e3b8

0801c048 <__sfputc_r>:
 801c048:	6893      	ldr	r3, [r2, #8]
 801c04a:	3b01      	subs	r3, #1
 801c04c:	2b00      	cmp	r3, #0
 801c04e:	b410      	push	{r4}
 801c050:	6093      	str	r3, [r2, #8]
 801c052:	da08      	bge.n	801c066 <__sfputc_r+0x1e>
 801c054:	6994      	ldr	r4, [r2, #24]
 801c056:	42a3      	cmp	r3, r4
 801c058:	db01      	blt.n	801c05e <__sfputc_r+0x16>
 801c05a:	290a      	cmp	r1, #10
 801c05c:	d103      	bne.n	801c066 <__sfputc_r+0x1e>
 801c05e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c062:	f7ff bd05 	b.w	801ba70 <__swbuf_r>
 801c066:	6813      	ldr	r3, [r2, #0]
 801c068:	1c58      	adds	r0, r3, #1
 801c06a:	6010      	str	r0, [r2, #0]
 801c06c:	7019      	strb	r1, [r3, #0]
 801c06e:	4608      	mov	r0, r1
 801c070:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c074:	4770      	bx	lr

0801c076 <__sfputs_r>:
 801c076:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c078:	4606      	mov	r6, r0
 801c07a:	460f      	mov	r7, r1
 801c07c:	4614      	mov	r4, r2
 801c07e:	18d5      	adds	r5, r2, r3
 801c080:	42ac      	cmp	r4, r5
 801c082:	d101      	bne.n	801c088 <__sfputs_r+0x12>
 801c084:	2000      	movs	r0, #0
 801c086:	e007      	b.n	801c098 <__sfputs_r+0x22>
 801c088:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c08c:	463a      	mov	r2, r7
 801c08e:	4630      	mov	r0, r6
 801c090:	f7ff ffda 	bl	801c048 <__sfputc_r>
 801c094:	1c43      	adds	r3, r0, #1
 801c096:	d1f3      	bne.n	801c080 <__sfputs_r+0xa>
 801c098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c09c <_vfiprintf_r>:
 801c09c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0a0:	460d      	mov	r5, r1
 801c0a2:	b09d      	sub	sp, #116	; 0x74
 801c0a4:	4614      	mov	r4, r2
 801c0a6:	4698      	mov	r8, r3
 801c0a8:	4606      	mov	r6, r0
 801c0aa:	b118      	cbz	r0, 801c0b4 <_vfiprintf_r+0x18>
 801c0ac:	6983      	ldr	r3, [r0, #24]
 801c0ae:	b90b      	cbnz	r3, 801c0b4 <_vfiprintf_r+0x18>
 801c0b0:	f7ff feb8 	bl	801be24 <__sinit>
 801c0b4:	4b89      	ldr	r3, [pc, #548]	; (801c2dc <_vfiprintf_r+0x240>)
 801c0b6:	429d      	cmp	r5, r3
 801c0b8:	d11b      	bne.n	801c0f2 <_vfiprintf_r+0x56>
 801c0ba:	6875      	ldr	r5, [r6, #4]
 801c0bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c0be:	07d9      	lsls	r1, r3, #31
 801c0c0:	d405      	bmi.n	801c0ce <_vfiprintf_r+0x32>
 801c0c2:	89ab      	ldrh	r3, [r5, #12]
 801c0c4:	059a      	lsls	r2, r3, #22
 801c0c6:	d402      	bmi.n	801c0ce <_vfiprintf_r+0x32>
 801c0c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c0ca:	f7ff ff49 	bl	801bf60 <__retarget_lock_acquire_recursive>
 801c0ce:	89ab      	ldrh	r3, [r5, #12]
 801c0d0:	071b      	lsls	r3, r3, #28
 801c0d2:	d501      	bpl.n	801c0d8 <_vfiprintf_r+0x3c>
 801c0d4:	692b      	ldr	r3, [r5, #16]
 801c0d6:	b9eb      	cbnz	r3, 801c114 <_vfiprintf_r+0x78>
 801c0d8:	4629      	mov	r1, r5
 801c0da:	4630      	mov	r0, r6
 801c0dc:	f7ff fd1a 	bl	801bb14 <__swsetup_r>
 801c0e0:	b1c0      	cbz	r0, 801c114 <_vfiprintf_r+0x78>
 801c0e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c0e4:	07dc      	lsls	r4, r3, #31
 801c0e6:	d50e      	bpl.n	801c106 <_vfiprintf_r+0x6a>
 801c0e8:	f04f 30ff 	mov.w	r0, #4294967295
 801c0ec:	b01d      	add	sp, #116	; 0x74
 801c0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0f2:	4b7b      	ldr	r3, [pc, #492]	; (801c2e0 <_vfiprintf_r+0x244>)
 801c0f4:	429d      	cmp	r5, r3
 801c0f6:	d101      	bne.n	801c0fc <_vfiprintf_r+0x60>
 801c0f8:	68b5      	ldr	r5, [r6, #8]
 801c0fa:	e7df      	b.n	801c0bc <_vfiprintf_r+0x20>
 801c0fc:	4b79      	ldr	r3, [pc, #484]	; (801c2e4 <_vfiprintf_r+0x248>)
 801c0fe:	429d      	cmp	r5, r3
 801c100:	bf08      	it	eq
 801c102:	68f5      	ldreq	r5, [r6, #12]
 801c104:	e7da      	b.n	801c0bc <_vfiprintf_r+0x20>
 801c106:	89ab      	ldrh	r3, [r5, #12]
 801c108:	0598      	lsls	r0, r3, #22
 801c10a:	d4ed      	bmi.n	801c0e8 <_vfiprintf_r+0x4c>
 801c10c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c10e:	f7ff ff28 	bl	801bf62 <__retarget_lock_release_recursive>
 801c112:	e7e9      	b.n	801c0e8 <_vfiprintf_r+0x4c>
 801c114:	2300      	movs	r3, #0
 801c116:	9309      	str	r3, [sp, #36]	; 0x24
 801c118:	2320      	movs	r3, #32
 801c11a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c11e:	f8cd 800c 	str.w	r8, [sp, #12]
 801c122:	2330      	movs	r3, #48	; 0x30
 801c124:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801c2e8 <_vfiprintf_r+0x24c>
 801c128:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c12c:	f04f 0901 	mov.w	r9, #1
 801c130:	4623      	mov	r3, r4
 801c132:	469a      	mov	sl, r3
 801c134:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c138:	b10a      	cbz	r2, 801c13e <_vfiprintf_r+0xa2>
 801c13a:	2a25      	cmp	r2, #37	; 0x25
 801c13c:	d1f9      	bne.n	801c132 <_vfiprintf_r+0x96>
 801c13e:	ebba 0b04 	subs.w	fp, sl, r4
 801c142:	d00b      	beq.n	801c15c <_vfiprintf_r+0xc0>
 801c144:	465b      	mov	r3, fp
 801c146:	4622      	mov	r2, r4
 801c148:	4629      	mov	r1, r5
 801c14a:	4630      	mov	r0, r6
 801c14c:	f7ff ff93 	bl	801c076 <__sfputs_r>
 801c150:	3001      	adds	r0, #1
 801c152:	f000 80aa 	beq.w	801c2aa <_vfiprintf_r+0x20e>
 801c156:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c158:	445a      	add	r2, fp
 801c15a:	9209      	str	r2, [sp, #36]	; 0x24
 801c15c:	f89a 3000 	ldrb.w	r3, [sl]
 801c160:	2b00      	cmp	r3, #0
 801c162:	f000 80a2 	beq.w	801c2aa <_vfiprintf_r+0x20e>
 801c166:	2300      	movs	r3, #0
 801c168:	f04f 32ff 	mov.w	r2, #4294967295
 801c16c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c170:	f10a 0a01 	add.w	sl, sl, #1
 801c174:	9304      	str	r3, [sp, #16]
 801c176:	9307      	str	r3, [sp, #28]
 801c178:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c17c:	931a      	str	r3, [sp, #104]	; 0x68
 801c17e:	4654      	mov	r4, sl
 801c180:	2205      	movs	r2, #5
 801c182:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c186:	4858      	ldr	r0, [pc, #352]	; (801c2e8 <_vfiprintf_r+0x24c>)
 801c188:	f7e4 f8b2 	bl	80002f0 <memchr>
 801c18c:	9a04      	ldr	r2, [sp, #16]
 801c18e:	b9d8      	cbnz	r0, 801c1c8 <_vfiprintf_r+0x12c>
 801c190:	06d1      	lsls	r1, r2, #27
 801c192:	bf44      	itt	mi
 801c194:	2320      	movmi	r3, #32
 801c196:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c19a:	0713      	lsls	r3, r2, #28
 801c19c:	bf44      	itt	mi
 801c19e:	232b      	movmi	r3, #43	; 0x2b
 801c1a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c1a4:	f89a 3000 	ldrb.w	r3, [sl]
 801c1a8:	2b2a      	cmp	r3, #42	; 0x2a
 801c1aa:	d015      	beq.n	801c1d8 <_vfiprintf_r+0x13c>
 801c1ac:	9a07      	ldr	r2, [sp, #28]
 801c1ae:	4654      	mov	r4, sl
 801c1b0:	2000      	movs	r0, #0
 801c1b2:	f04f 0c0a 	mov.w	ip, #10
 801c1b6:	4621      	mov	r1, r4
 801c1b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c1bc:	3b30      	subs	r3, #48	; 0x30
 801c1be:	2b09      	cmp	r3, #9
 801c1c0:	d94e      	bls.n	801c260 <_vfiprintf_r+0x1c4>
 801c1c2:	b1b0      	cbz	r0, 801c1f2 <_vfiprintf_r+0x156>
 801c1c4:	9207      	str	r2, [sp, #28]
 801c1c6:	e014      	b.n	801c1f2 <_vfiprintf_r+0x156>
 801c1c8:	eba0 0308 	sub.w	r3, r0, r8
 801c1cc:	fa09 f303 	lsl.w	r3, r9, r3
 801c1d0:	4313      	orrs	r3, r2
 801c1d2:	9304      	str	r3, [sp, #16]
 801c1d4:	46a2      	mov	sl, r4
 801c1d6:	e7d2      	b.n	801c17e <_vfiprintf_r+0xe2>
 801c1d8:	9b03      	ldr	r3, [sp, #12]
 801c1da:	1d19      	adds	r1, r3, #4
 801c1dc:	681b      	ldr	r3, [r3, #0]
 801c1de:	9103      	str	r1, [sp, #12]
 801c1e0:	2b00      	cmp	r3, #0
 801c1e2:	bfbb      	ittet	lt
 801c1e4:	425b      	neglt	r3, r3
 801c1e6:	f042 0202 	orrlt.w	r2, r2, #2
 801c1ea:	9307      	strge	r3, [sp, #28]
 801c1ec:	9307      	strlt	r3, [sp, #28]
 801c1ee:	bfb8      	it	lt
 801c1f0:	9204      	strlt	r2, [sp, #16]
 801c1f2:	7823      	ldrb	r3, [r4, #0]
 801c1f4:	2b2e      	cmp	r3, #46	; 0x2e
 801c1f6:	d10c      	bne.n	801c212 <_vfiprintf_r+0x176>
 801c1f8:	7863      	ldrb	r3, [r4, #1]
 801c1fa:	2b2a      	cmp	r3, #42	; 0x2a
 801c1fc:	d135      	bne.n	801c26a <_vfiprintf_r+0x1ce>
 801c1fe:	9b03      	ldr	r3, [sp, #12]
 801c200:	1d1a      	adds	r2, r3, #4
 801c202:	681b      	ldr	r3, [r3, #0]
 801c204:	9203      	str	r2, [sp, #12]
 801c206:	2b00      	cmp	r3, #0
 801c208:	bfb8      	it	lt
 801c20a:	f04f 33ff 	movlt.w	r3, #4294967295
 801c20e:	3402      	adds	r4, #2
 801c210:	9305      	str	r3, [sp, #20]
 801c212:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801c2f8 <_vfiprintf_r+0x25c>
 801c216:	7821      	ldrb	r1, [r4, #0]
 801c218:	2203      	movs	r2, #3
 801c21a:	4650      	mov	r0, sl
 801c21c:	f7e4 f868 	bl	80002f0 <memchr>
 801c220:	b140      	cbz	r0, 801c234 <_vfiprintf_r+0x198>
 801c222:	2340      	movs	r3, #64	; 0x40
 801c224:	eba0 000a 	sub.w	r0, r0, sl
 801c228:	fa03 f000 	lsl.w	r0, r3, r0
 801c22c:	9b04      	ldr	r3, [sp, #16]
 801c22e:	4303      	orrs	r3, r0
 801c230:	3401      	adds	r4, #1
 801c232:	9304      	str	r3, [sp, #16]
 801c234:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c238:	482c      	ldr	r0, [pc, #176]	; (801c2ec <_vfiprintf_r+0x250>)
 801c23a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c23e:	2206      	movs	r2, #6
 801c240:	f7e4 f856 	bl	80002f0 <memchr>
 801c244:	2800      	cmp	r0, #0
 801c246:	d03f      	beq.n	801c2c8 <_vfiprintf_r+0x22c>
 801c248:	4b29      	ldr	r3, [pc, #164]	; (801c2f0 <_vfiprintf_r+0x254>)
 801c24a:	bb1b      	cbnz	r3, 801c294 <_vfiprintf_r+0x1f8>
 801c24c:	9b03      	ldr	r3, [sp, #12]
 801c24e:	3307      	adds	r3, #7
 801c250:	f023 0307 	bic.w	r3, r3, #7
 801c254:	3308      	adds	r3, #8
 801c256:	9303      	str	r3, [sp, #12]
 801c258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c25a:	443b      	add	r3, r7
 801c25c:	9309      	str	r3, [sp, #36]	; 0x24
 801c25e:	e767      	b.n	801c130 <_vfiprintf_r+0x94>
 801c260:	fb0c 3202 	mla	r2, ip, r2, r3
 801c264:	460c      	mov	r4, r1
 801c266:	2001      	movs	r0, #1
 801c268:	e7a5      	b.n	801c1b6 <_vfiprintf_r+0x11a>
 801c26a:	2300      	movs	r3, #0
 801c26c:	3401      	adds	r4, #1
 801c26e:	9305      	str	r3, [sp, #20]
 801c270:	4619      	mov	r1, r3
 801c272:	f04f 0c0a 	mov.w	ip, #10
 801c276:	4620      	mov	r0, r4
 801c278:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c27c:	3a30      	subs	r2, #48	; 0x30
 801c27e:	2a09      	cmp	r2, #9
 801c280:	d903      	bls.n	801c28a <_vfiprintf_r+0x1ee>
 801c282:	2b00      	cmp	r3, #0
 801c284:	d0c5      	beq.n	801c212 <_vfiprintf_r+0x176>
 801c286:	9105      	str	r1, [sp, #20]
 801c288:	e7c3      	b.n	801c212 <_vfiprintf_r+0x176>
 801c28a:	fb0c 2101 	mla	r1, ip, r1, r2
 801c28e:	4604      	mov	r4, r0
 801c290:	2301      	movs	r3, #1
 801c292:	e7f0      	b.n	801c276 <_vfiprintf_r+0x1da>
 801c294:	ab03      	add	r3, sp, #12
 801c296:	9300      	str	r3, [sp, #0]
 801c298:	462a      	mov	r2, r5
 801c29a:	4b16      	ldr	r3, [pc, #88]	; (801c2f4 <_vfiprintf_r+0x258>)
 801c29c:	a904      	add	r1, sp, #16
 801c29e:	4630      	mov	r0, r6
 801c2a0:	f3af 8000 	nop.w
 801c2a4:	4607      	mov	r7, r0
 801c2a6:	1c78      	adds	r0, r7, #1
 801c2a8:	d1d6      	bne.n	801c258 <_vfiprintf_r+0x1bc>
 801c2aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c2ac:	07d9      	lsls	r1, r3, #31
 801c2ae:	d405      	bmi.n	801c2bc <_vfiprintf_r+0x220>
 801c2b0:	89ab      	ldrh	r3, [r5, #12]
 801c2b2:	059a      	lsls	r2, r3, #22
 801c2b4:	d402      	bmi.n	801c2bc <_vfiprintf_r+0x220>
 801c2b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c2b8:	f7ff fe53 	bl	801bf62 <__retarget_lock_release_recursive>
 801c2bc:	89ab      	ldrh	r3, [r5, #12]
 801c2be:	065b      	lsls	r3, r3, #25
 801c2c0:	f53f af12 	bmi.w	801c0e8 <_vfiprintf_r+0x4c>
 801c2c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c2c6:	e711      	b.n	801c0ec <_vfiprintf_r+0x50>
 801c2c8:	ab03      	add	r3, sp, #12
 801c2ca:	9300      	str	r3, [sp, #0]
 801c2cc:	462a      	mov	r2, r5
 801c2ce:	4b09      	ldr	r3, [pc, #36]	; (801c2f4 <_vfiprintf_r+0x258>)
 801c2d0:	a904      	add	r1, sp, #16
 801c2d2:	4630      	mov	r0, r6
 801c2d4:	f000 f880 	bl	801c3d8 <_printf_i>
 801c2d8:	e7e4      	b.n	801c2a4 <_vfiprintf_r+0x208>
 801c2da:	bf00      	nop
 801c2dc:	08091014 	.word	0x08091014
 801c2e0:	08091034 	.word	0x08091034
 801c2e4:	08090ff4 	.word	0x08090ff4
 801c2e8:	08091054 	.word	0x08091054
 801c2ec:	0809105e 	.word	0x0809105e
 801c2f0:	00000000 	.word	0x00000000
 801c2f4:	0801c077 	.word	0x0801c077
 801c2f8:	0809105a 	.word	0x0809105a

0801c2fc <_printf_common>:
 801c2fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c300:	4616      	mov	r6, r2
 801c302:	4699      	mov	r9, r3
 801c304:	688a      	ldr	r2, [r1, #8]
 801c306:	690b      	ldr	r3, [r1, #16]
 801c308:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c30c:	4293      	cmp	r3, r2
 801c30e:	bfb8      	it	lt
 801c310:	4613      	movlt	r3, r2
 801c312:	6033      	str	r3, [r6, #0]
 801c314:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c318:	4607      	mov	r7, r0
 801c31a:	460c      	mov	r4, r1
 801c31c:	b10a      	cbz	r2, 801c322 <_printf_common+0x26>
 801c31e:	3301      	adds	r3, #1
 801c320:	6033      	str	r3, [r6, #0]
 801c322:	6823      	ldr	r3, [r4, #0]
 801c324:	0699      	lsls	r1, r3, #26
 801c326:	bf42      	ittt	mi
 801c328:	6833      	ldrmi	r3, [r6, #0]
 801c32a:	3302      	addmi	r3, #2
 801c32c:	6033      	strmi	r3, [r6, #0]
 801c32e:	6825      	ldr	r5, [r4, #0]
 801c330:	f015 0506 	ands.w	r5, r5, #6
 801c334:	d106      	bne.n	801c344 <_printf_common+0x48>
 801c336:	f104 0a19 	add.w	sl, r4, #25
 801c33a:	68e3      	ldr	r3, [r4, #12]
 801c33c:	6832      	ldr	r2, [r6, #0]
 801c33e:	1a9b      	subs	r3, r3, r2
 801c340:	42ab      	cmp	r3, r5
 801c342:	dc26      	bgt.n	801c392 <_printf_common+0x96>
 801c344:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801c348:	1e13      	subs	r3, r2, #0
 801c34a:	6822      	ldr	r2, [r4, #0]
 801c34c:	bf18      	it	ne
 801c34e:	2301      	movne	r3, #1
 801c350:	0692      	lsls	r2, r2, #26
 801c352:	d42b      	bmi.n	801c3ac <_printf_common+0xb0>
 801c354:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c358:	4649      	mov	r1, r9
 801c35a:	4638      	mov	r0, r7
 801c35c:	47c0      	blx	r8
 801c35e:	3001      	adds	r0, #1
 801c360:	d01e      	beq.n	801c3a0 <_printf_common+0xa4>
 801c362:	6823      	ldr	r3, [r4, #0]
 801c364:	68e5      	ldr	r5, [r4, #12]
 801c366:	6832      	ldr	r2, [r6, #0]
 801c368:	f003 0306 	and.w	r3, r3, #6
 801c36c:	2b04      	cmp	r3, #4
 801c36e:	bf08      	it	eq
 801c370:	1aad      	subeq	r5, r5, r2
 801c372:	68a3      	ldr	r3, [r4, #8]
 801c374:	6922      	ldr	r2, [r4, #16]
 801c376:	bf0c      	ite	eq
 801c378:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c37c:	2500      	movne	r5, #0
 801c37e:	4293      	cmp	r3, r2
 801c380:	bfc4      	itt	gt
 801c382:	1a9b      	subgt	r3, r3, r2
 801c384:	18ed      	addgt	r5, r5, r3
 801c386:	2600      	movs	r6, #0
 801c388:	341a      	adds	r4, #26
 801c38a:	42b5      	cmp	r5, r6
 801c38c:	d11a      	bne.n	801c3c4 <_printf_common+0xc8>
 801c38e:	2000      	movs	r0, #0
 801c390:	e008      	b.n	801c3a4 <_printf_common+0xa8>
 801c392:	2301      	movs	r3, #1
 801c394:	4652      	mov	r2, sl
 801c396:	4649      	mov	r1, r9
 801c398:	4638      	mov	r0, r7
 801c39a:	47c0      	blx	r8
 801c39c:	3001      	adds	r0, #1
 801c39e:	d103      	bne.n	801c3a8 <_printf_common+0xac>
 801c3a0:	f04f 30ff 	mov.w	r0, #4294967295
 801c3a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c3a8:	3501      	adds	r5, #1
 801c3aa:	e7c6      	b.n	801c33a <_printf_common+0x3e>
 801c3ac:	18e1      	adds	r1, r4, r3
 801c3ae:	1c5a      	adds	r2, r3, #1
 801c3b0:	2030      	movs	r0, #48	; 0x30
 801c3b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c3b6:	4422      	add	r2, r4
 801c3b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c3bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c3c0:	3302      	adds	r3, #2
 801c3c2:	e7c7      	b.n	801c354 <_printf_common+0x58>
 801c3c4:	2301      	movs	r3, #1
 801c3c6:	4622      	mov	r2, r4
 801c3c8:	4649      	mov	r1, r9
 801c3ca:	4638      	mov	r0, r7
 801c3cc:	47c0      	blx	r8
 801c3ce:	3001      	adds	r0, #1
 801c3d0:	d0e6      	beq.n	801c3a0 <_printf_common+0xa4>
 801c3d2:	3601      	adds	r6, #1
 801c3d4:	e7d9      	b.n	801c38a <_printf_common+0x8e>
	...

0801c3d8 <_printf_i>:
 801c3d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c3dc:	7e0f      	ldrb	r7, [r1, #24]
 801c3de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c3e0:	2f78      	cmp	r7, #120	; 0x78
 801c3e2:	4691      	mov	r9, r2
 801c3e4:	4680      	mov	r8, r0
 801c3e6:	460c      	mov	r4, r1
 801c3e8:	469a      	mov	sl, r3
 801c3ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801c3ee:	d807      	bhi.n	801c400 <_printf_i+0x28>
 801c3f0:	2f62      	cmp	r7, #98	; 0x62
 801c3f2:	d80a      	bhi.n	801c40a <_printf_i+0x32>
 801c3f4:	2f00      	cmp	r7, #0
 801c3f6:	f000 80d8 	beq.w	801c5aa <_printf_i+0x1d2>
 801c3fa:	2f58      	cmp	r7, #88	; 0x58
 801c3fc:	f000 80a3 	beq.w	801c546 <_printf_i+0x16e>
 801c400:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c404:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c408:	e03a      	b.n	801c480 <_printf_i+0xa8>
 801c40a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c40e:	2b15      	cmp	r3, #21
 801c410:	d8f6      	bhi.n	801c400 <_printf_i+0x28>
 801c412:	a101      	add	r1, pc, #4	; (adr r1, 801c418 <_printf_i+0x40>)
 801c414:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c418:	0801c471 	.word	0x0801c471
 801c41c:	0801c485 	.word	0x0801c485
 801c420:	0801c401 	.word	0x0801c401
 801c424:	0801c401 	.word	0x0801c401
 801c428:	0801c401 	.word	0x0801c401
 801c42c:	0801c401 	.word	0x0801c401
 801c430:	0801c485 	.word	0x0801c485
 801c434:	0801c401 	.word	0x0801c401
 801c438:	0801c401 	.word	0x0801c401
 801c43c:	0801c401 	.word	0x0801c401
 801c440:	0801c401 	.word	0x0801c401
 801c444:	0801c591 	.word	0x0801c591
 801c448:	0801c4b5 	.word	0x0801c4b5
 801c44c:	0801c573 	.word	0x0801c573
 801c450:	0801c401 	.word	0x0801c401
 801c454:	0801c401 	.word	0x0801c401
 801c458:	0801c5b3 	.word	0x0801c5b3
 801c45c:	0801c401 	.word	0x0801c401
 801c460:	0801c4b5 	.word	0x0801c4b5
 801c464:	0801c401 	.word	0x0801c401
 801c468:	0801c401 	.word	0x0801c401
 801c46c:	0801c57b 	.word	0x0801c57b
 801c470:	682b      	ldr	r3, [r5, #0]
 801c472:	1d1a      	adds	r2, r3, #4
 801c474:	681b      	ldr	r3, [r3, #0]
 801c476:	602a      	str	r2, [r5, #0]
 801c478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c47c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c480:	2301      	movs	r3, #1
 801c482:	e0a3      	b.n	801c5cc <_printf_i+0x1f4>
 801c484:	6820      	ldr	r0, [r4, #0]
 801c486:	6829      	ldr	r1, [r5, #0]
 801c488:	0606      	lsls	r6, r0, #24
 801c48a:	f101 0304 	add.w	r3, r1, #4
 801c48e:	d50a      	bpl.n	801c4a6 <_printf_i+0xce>
 801c490:	680e      	ldr	r6, [r1, #0]
 801c492:	602b      	str	r3, [r5, #0]
 801c494:	2e00      	cmp	r6, #0
 801c496:	da03      	bge.n	801c4a0 <_printf_i+0xc8>
 801c498:	232d      	movs	r3, #45	; 0x2d
 801c49a:	4276      	negs	r6, r6
 801c49c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c4a0:	485e      	ldr	r0, [pc, #376]	; (801c61c <_printf_i+0x244>)
 801c4a2:	230a      	movs	r3, #10
 801c4a4:	e019      	b.n	801c4da <_printf_i+0x102>
 801c4a6:	680e      	ldr	r6, [r1, #0]
 801c4a8:	602b      	str	r3, [r5, #0]
 801c4aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 801c4ae:	bf18      	it	ne
 801c4b0:	b236      	sxthne	r6, r6
 801c4b2:	e7ef      	b.n	801c494 <_printf_i+0xbc>
 801c4b4:	682b      	ldr	r3, [r5, #0]
 801c4b6:	6820      	ldr	r0, [r4, #0]
 801c4b8:	1d19      	adds	r1, r3, #4
 801c4ba:	6029      	str	r1, [r5, #0]
 801c4bc:	0601      	lsls	r1, r0, #24
 801c4be:	d501      	bpl.n	801c4c4 <_printf_i+0xec>
 801c4c0:	681e      	ldr	r6, [r3, #0]
 801c4c2:	e002      	b.n	801c4ca <_printf_i+0xf2>
 801c4c4:	0646      	lsls	r6, r0, #25
 801c4c6:	d5fb      	bpl.n	801c4c0 <_printf_i+0xe8>
 801c4c8:	881e      	ldrh	r6, [r3, #0]
 801c4ca:	4854      	ldr	r0, [pc, #336]	; (801c61c <_printf_i+0x244>)
 801c4cc:	2f6f      	cmp	r7, #111	; 0x6f
 801c4ce:	bf0c      	ite	eq
 801c4d0:	2308      	moveq	r3, #8
 801c4d2:	230a      	movne	r3, #10
 801c4d4:	2100      	movs	r1, #0
 801c4d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c4da:	6865      	ldr	r5, [r4, #4]
 801c4dc:	60a5      	str	r5, [r4, #8]
 801c4de:	2d00      	cmp	r5, #0
 801c4e0:	bfa2      	ittt	ge
 801c4e2:	6821      	ldrge	r1, [r4, #0]
 801c4e4:	f021 0104 	bicge.w	r1, r1, #4
 801c4e8:	6021      	strge	r1, [r4, #0]
 801c4ea:	b90e      	cbnz	r6, 801c4f0 <_printf_i+0x118>
 801c4ec:	2d00      	cmp	r5, #0
 801c4ee:	d04d      	beq.n	801c58c <_printf_i+0x1b4>
 801c4f0:	4615      	mov	r5, r2
 801c4f2:	fbb6 f1f3 	udiv	r1, r6, r3
 801c4f6:	fb03 6711 	mls	r7, r3, r1, r6
 801c4fa:	5dc7      	ldrb	r7, [r0, r7]
 801c4fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801c500:	4637      	mov	r7, r6
 801c502:	42bb      	cmp	r3, r7
 801c504:	460e      	mov	r6, r1
 801c506:	d9f4      	bls.n	801c4f2 <_printf_i+0x11a>
 801c508:	2b08      	cmp	r3, #8
 801c50a:	d10b      	bne.n	801c524 <_printf_i+0x14c>
 801c50c:	6823      	ldr	r3, [r4, #0]
 801c50e:	07de      	lsls	r6, r3, #31
 801c510:	d508      	bpl.n	801c524 <_printf_i+0x14c>
 801c512:	6923      	ldr	r3, [r4, #16]
 801c514:	6861      	ldr	r1, [r4, #4]
 801c516:	4299      	cmp	r1, r3
 801c518:	bfde      	ittt	le
 801c51a:	2330      	movle	r3, #48	; 0x30
 801c51c:	f805 3c01 	strble.w	r3, [r5, #-1]
 801c520:	f105 35ff 	addle.w	r5, r5, #4294967295
 801c524:	1b52      	subs	r2, r2, r5
 801c526:	6122      	str	r2, [r4, #16]
 801c528:	f8cd a000 	str.w	sl, [sp]
 801c52c:	464b      	mov	r3, r9
 801c52e:	aa03      	add	r2, sp, #12
 801c530:	4621      	mov	r1, r4
 801c532:	4640      	mov	r0, r8
 801c534:	f7ff fee2 	bl	801c2fc <_printf_common>
 801c538:	3001      	adds	r0, #1
 801c53a:	d14c      	bne.n	801c5d6 <_printf_i+0x1fe>
 801c53c:	f04f 30ff 	mov.w	r0, #4294967295
 801c540:	b004      	add	sp, #16
 801c542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c546:	4835      	ldr	r0, [pc, #212]	; (801c61c <_printf_i+0x244>)
 801c548:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801c54c:	6829      	ldr	r1, [r5, #0]
 801c54e:	6823      	ldr	r3, [r4, #0]
 801c550:	f851 6b04 	ldr.w	r6, [r1], #4
 801c554:	6029      	str	r1, [r5, #0]
 801c556:	061d      	lsls	r5, r3, #24
 801c558:	d514      	bpl.n	801c584 <_printf_i+0x1ac>
 801c55a:	07df      	lsls	r7, r3, #31
 801c55c:	bf44      	itt	mi
 801c55e:	f043 0320 	orrmi.w	r3, r3, #32
 801c562:	6023      	strmi	r3, [r4, #0]
 801c564:	b91e      	cbnz	r6, 801c56e <_printf_i+0x196>
 801c566:	6823      	ldr	r3, [r4, #0]
 801c568:	f023 0320 	bic.w	r3, r3, #32
 801c56c:	6023      	str	r3, [r4, #0]
 801c56e:	2310      	movs	r3, #16
 801c570:	e7b0      	b.n	801c4d4 <_printf_i+0xfc>
 801c572:	6823      	ldr	r3, [r4, #0]
 801c574:	f043 0320 	orr.w	r3, r3, #32
 801c578:	6023      	str	r3, [r4, #0]
 801c57a:	2378      	movs	r3, #120	; 0x78
 801c57c:	4828      	ldr	r0, [pc, #160]	; (801c620 <_printf_i+0x248>)
 801c57e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801c582:	e7e3      	b.n	801c54c <_printf_i+0x174>
 801c584:	0659      	lsls	r1, r3, #25
 801c586:	bf48      	it	mi
 801c588:	b2b6      	uxthmi	r6, r6
 801c58a:	e7e6      	b.n	801c55a <_printf_i+0x182>
 801c58c:	4615      	mov	r5, r2
 801c58e:	e7bb      	b.n	801c508 <_printf_i+0x130>
 801c590:	682b      	ldr	r3, [r5, #0]
 801c592:	6826      	ldr	r6, [r4, #0]
 801c594:	6961      	ldr	r1, [r4, #20]
 801c596:	1d18      	adds	r0, r3, #4
 801c598:	6028      	str	r0, [r5, #0]
 801c59a:	0635      	lsls	r5, r6, #24
 801c59c:	681b      	ldr	r3, [r3, #0]
 801c59e:	d501      	bpl.n	801c5a4 <_printf_i+0x1cc>
 801c5a0:	6019      	str	r1, [r3, #0]
 801c5a2:	e002      	b.n	801c5aa <_printf_i+0x1d2>
 801c5a4:	0670      	lsls	r0, r6, #25
 801c5a6:	d5fb      	bpl.n	801c5a0 <_printf_i+0x1c8>
 801c5a8:	8019      	strh	r1, [r3, #0]
 801c5aa:	2300      	movs	r3, #0
 801c5ac:	6123      	str	r3, [r4, #16]
 801c5ae:	4615      	mov	r5, r2
 801c5b0:	e7ba      	b.n	801c528 <_printf_i+0x150>
 801c5b2:	682b      	ldr	r3, [r5, #0]
 801c5b4:	1d1a      	adds	r2, r3, #4
 801c5b6:	602a      	str	r2, [r5, #0]
 801c5b8:	681d      	ldr	r5, [r3, #0]
 801c5ba:	6862      	ldr	r2, [r4, #4]
 801c5bc:	2100      	movs	r1, #0
 801c5be:	4628      	mov	r0, r5
 801c5c0:	f7e3 fe96 	bl	80002f0 <memchr>
 801c5c4:	b108      	cbz	r0, 801c5ca <_printf_i+0x1f2>
 801c5c6:	1b40      	subs	r0, r0, r5
 801c5c8:	6060      	str	r0, [r4, #4]
 801c5ca:	6863      	ldr	r3, [r4, #4]
 801c5cc:	6123      	str	r3, [r4, #16]
 801c5ce:	2300      	movs	r3, #0
 801c5d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c5d4:	e7a8      	b.n	801c528 <_printf_i+0x150>
 801c5d6:	6923      	ldr	r3, [r4, #16]
 801c5d8:	462a      	mov	r2, r5
 801c5da:	4649      	mov	r1, r9
 801c5dc:	4640      	mov	r0, r8
 801c5de:	47d0      	blx	sl
 801c5e0:	3001      	adds	r0, #1
 801c5e2:	d0ab      	beq.n	801c53c <_printf_i+0x164>
 801c5e4:	6823      	ldr	r3, [r4, #0]
 801c5e6:	079b      	lsls	r3, r3, #30
 801c5e8:	d413      	bmi.n	801c612 <_printf_i+0x23a>
 801c5ea:	68e0      	ldr	r0, [r4, #12]
 801c5ec:	9b03      	ldr	r3, [sp, #12]
 801c5ee:	4298      	cmp	r0, r3
 801c5f0:	bfb8      	it	lt
 801c5f2:	4618      	movlt	r0, r3
 801c5f4:	e7a4      	b.n	801c540 <_printf_i+0x168>
 801c5f6:	2301      	movs	r3, #1
 801c5f8:	4632      	mov	r2, r6
 801c5fa:	4649      	mov	r1, r9
 801c5fc:	4640      	mov	r0, r8
 801c5fe:	47d0      	blx	sl
 801c600:	3001      	adds	r0, #1
 801c602:	d09b      	beq.n	801c53c <_printf_i+0x164>
 801c604:	3501      	adds	r5, #1
 801c606:	68e3      	ldr	r3, [r4, #12]
 801c608:	9903      	ldr	r1, [sp, #12]
 801c60a:	1a5b      	subs	r3, r3, r1
 801c60c:	42ab      	cmp	r3, r5
 801c60e:	dcf2      	bgt.n	801c5f6 <_printf_i+0x21e>
 801c610:	e7eb      	b.n	801c5ea <_printf_i+0x212>
 801c612:	2500      	movs	r5, #0
 801c614:	f104 0619 	add.w	r6, r4, #25
 801c618:	e7f5      	b.n	801c606 <_printf_i+0x22e>
 801c61a:	bf00      	nop
 801c61c:	08091065 	.word	0x08091065
 801c620:	08091076 	.word	0x08091076

0801c624 <__sread>:
 801c624:	b510      	push	{r4, lr}
 801c626:	460c      	mov	r4, r1
 801c628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c62c:	f000 f894 	bl	801c758 <_read_r>
 801c630:	2800      	cmp	r0, #0
 801c632:	bfab      	itete	ge
 801c634:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c636:	89a3      	ldrhlt	r3, [r4, #12]
 801c638:	181b      	addge	r3, r3, r0
 801c63a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c63e:	bfac      	ite	ge
 801c640:	6563      	strge	r3, [r4, #84]	; 0x54
 801c642:	81a3      	strhlt	r3, [r4, #12]
 801c644:	bd10      	pop	{r4, pc}

0801c646 <__swrite>:
 801c646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c64a:	461f      	mov	r7, r3
 801c64c:	898b      	ldrh	r3, [r1, #12]
 801c64e:	05db      	lsls	r3, r3, #23
 801c650:	4605      	mov	r5, r0
 801c652:	460c      	mov	r4, r1
 801c654:	4616      	mov	r6, r2
 801c656:	d505      	bpl.n	801c664 <__swrite+0x1e>
 801c658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c65c:	2302      	movs	r3, #2
 801c65e:	2200      	movs	r2, #0
 801c660:	f000 f868 	bl	801c734 <_lseek_r>
 801c664:	89a3      	ldrh	r3, [r4, #12]
 801c666:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c66a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c66e:	81a3      	strh	r3, [r4, #12]
 801c670:	4632      	mov	r2, r6
 801c672:	463b      	mov	r3, r7
 801c674:	4628      	mov	r0, r5
 801c676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c67a:	f000 b817 	b.w	801c6ac <_write_r>

0801c67e <__sseek>:
 801c67e:	b510      	push	{r4, lr}
 801c680:	460c      	mov	r4, r1
 801c682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c686:	f000 f855 	bl	801c734 <_lseek_r>
 801c68a:	1c43      	adds	r3, r0, #1
 801c68c:	89a3      	ldrh	r3, [r4, #12]
 801c68e:	bf15      	itete	ne
 801c690:	6560      	strne	r0, [r4, #84]	; 0x54
 801c692:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c696:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c69a:	81a3      	strheq	r3, [r4, #12]
 801c69c:	bf18      	it	ne
 801c69e:	81a3      	strhne	r3, [r4, #12]
 801c6a0:	bd10      	pop	{r4, pc}

0801c6a2 <__sclose>:
 801c6a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c6a6:	f000 b813 	b.w	801c6d0 <_close_r>
	...

0801c6ac <_write_r>:
 801c6ac:	b538      	push	{r3, r4, r5, lr}
 801c6ae:	4d07      	ldr	r5, [pc, #28]	; (801c6cc <_write_r+0x20>)
 801c6b0:	4604      	mov	r4, r0
 801c6b2:	4608      	mov	r0, r1
 801c6b4:	4611      	mov	r1, r2
 801c6b6:	2200      	movs	r2, #0
 801c6b8:	602a      	str	r2, [r5, #0]
 801c6ba:	461a      	mov	r2, r3
 801c6bc:	f7e6 feba 	bl	8003434 <_write>
 801c6c0:	1c43      	adds	r3, r0, #1
 801c6c2:	d102      	bne.n	801c6ca <_write_r+0x1e>
 801c6c4:	682b      	ldr	r3, [r5, #0]
 801c6c6:	b103      	cbz	r3, 801c6ca <_write_r+0x1e>
 801c6c8:	6023      	str	r3, [r4, #0]
 801c6ca:	bd38      	pop	{r3, r4, r5, pc}
 801c6cc:	2405e3bc 	.word	0x2405e3bc

0801c6d0 <_close_r>:
 801c6d0:	b538      	push	{r3, r4, r5, lr}
 801c6d2:	4d06      	ldr	r5, [pc, #24]	; (801c6ec <_close_r+0x1c>)
 801c6d4:	2300      	movs	r3, #0
 801c6d6:	4604      	mov	r4, r0
 801c6d8:	4608      	mov	r0, r1
 801c6da:	602b      	str	r3, [r5, #0]
 801c6dc:	f7e6 fed6 	bl	800348c <_close>
 801c6e0:	1c43      	adds	r3, r0, #1
 801c6e2:	d102      	bne.n	801c6ea <_close_r+0x1a>
 801c6e4:	682b      	ldr	r3, [r5, #0]
 801c6e6:	b103      	cbz	r3, 801c6ea <_close_r+0x1a>
 801c6e8:	6023      	str	r3, [r4, #0]
 801c6ea:	bd38      	pop	{r3, r4, r5, pc}
 801c6ec:	2405e3bc 	.word	0x2405e3bc

0801c6f0 <_fstat_r>:
 801c6f0:	b538      	push	{r3, r4, r5, lr}
 801c6f2:	4d07      	ldr	r5, [pc, #28]	; (801c710 <_fstat_r+0x20>)
 801c6f4:	2300      	movs	r3, #0
 801c6f6:	4604      	mov	r4, r0
 801c6f8:	4608      	mov	r0, r1
 801c6fa:	4611      	mov	r1, r2
 801c6fc:	602b      	str	r3, [r5, #0]
 801c6fe:	f7e6 ff05 	bl	800350c <_fstat>
 801c702:	1c43      	adds	r3, r0, #1
 801c704:	d102      	bne.n	801c70c <_fstat_r+0x1c>
 801c706:	682b      	ldr	r3, [r5, #0]
 801c708:	b103      	cbz	r3, 801c70c <_fstat_r+0x1c>
 801c70a:	6023      	str	r3, [r4, #0]
 801c70c:	bd38      	pop	{r3, r4, r5, pc}
 801c70e:	bf00      	nop
 801c710:	2405e3bc 	.word	0x2405e3bc

0801c714 <_isatty_r>:
 801c714:	b538      	push	{r3, r4, r5, lr}
 801c716:	4d06      	ldr	r5, [pc, #24]	; (801c730 <_isatty_r+0x1c>)
 801c718:	2300      	movs	r3, #0
 801c71a:	4604      	mov	r4, r0
 801c71c:	4608      	mov	r0, r1
 801c71e:	602b      	str	r3, [r5, #0]
 801c720:	f7e6 fe72 	bl	8003408 <_isatty>
 801c724:	1c43      	adds	r3, r0, #1
 801c726:	d102      	bne.n	801c72e <_isatty_r+0x1a>
 801c728:	682b      	ldr	r3, [r5, #0]
 801c72a:	b103      	cbz	r3, 801c72e <_isatty_r+0x1a>
 801c72c:	6023      	str	r3, [r4, #0]
 801c72e:	bd38      	pop	{r3, r4, r5, pc}
 801c730:	2405e3bc 	.word	0x2405e3bc

0801c734 <_lseek_r>:
 801c734:	b538      	push	{r3, r4, r5, lr}
 801c736:	4d07      	ldr	r5, [pc, #28]	; (801c754 <_lseek_r+0x20>)
 801c738:	4604      	mov	r4, r0
 801c73a:	4608      	mov	r0, r1
 801c73c:	4611      	mov	r1, r2
 801c73e:	2200      	movs	r2, #0
 801c740:	602a      	str	r2, [r5, #0]
 801c742:	461a      	mov	r2, r3
 801c744:	f000 fa50 	bl	801cbe8 <_lseek>
 801c748:	1c43      	adds	r3, r0, #1
 801c74a:	d102      	bne.n	801c752 <_lseek_r+0x1e>
 801c74c:	682b      	ldr	r3, [r5, #0]
 801c74e:	b103      	cbz	r3, 801c752 <_lseek_r+0x1e>
 801c750:	6023      	str	r3, [r4, #0]
 801c752:	bd38      	pop	{r3, r4, r5, pc}
 801c754:	2405e3bc 	.word	0x2405e3bc

0801c758 <_read_r>:
 801c758:	b538      	push	{r3, r4, r5, lr}
 801c75a:	4d07      	ldr	r5, [pc, #28]	; (801c778 <_read_r+0x20>)
 801c75c:	4604      	mov	r4, r0
 801c75e:	4608      	mov	r0, r1
 801c760:	4611      	mov	r1, r2
 801c762:	2200      	movs	r2, #0
 801c764:	602a      	str	r2, [r5, #0]
 801c766:	461a      	mov	r2, r3
 801c768:	f7e6 fea8 	bl	80034bc <_read>
 801c76c:	1c43      	adds	r3, r0, #1
 801c76e:	d102      	bne.n	801c776 <_read_r+0x1e>
 801c770:	682b      	ldr	r3, [r5, #0]
 801c772:	b103      	cbz	r3, 801c776 <_read_r+0x1e>
 801c774:	6023      	str	r3, [r4, #0]
 801c776:	bd38      	pop	{r3, r4, r5, pc}
 801c778:	2405e3bc 	.word	0x2405e3bc

0801c77c <with_errnof>:
 801c77c:	b513      	push	{r0, r1, r4, lr}
 801c77e:	4604      	mov	r4, r0
 801c780:	ed8d 0a01 	vstr	s0, [sp, #4]
 801c784:	f7fe fee8 	bl	801b558 <__errno>
 801c788:	ed9d 0a01 	vldr	s0, [sp, #4]
 801c78c:	6004      	str	r4, [r0, #0]
 801c78e:	b002      	add	sp, #8
 801c790:	bd10      	pop	{r4, pc}

0801c792 <xflowf>:
 801c792:	b130      	cbz	r0, 801c7a2 <xflowf+0x10>
 801c794:	eef1 7a40 	vneg.f32	s15, s0
 801c798:	ee27 0a80 	vmul.f32	s0, s15, s0
 801c79c:	2022      	movs	r0, #34	; 0x22
 801c79e:	f7ff bfed 	b.w	801c77c <with_errnof>
 801c7a2:	eef0 7a40 	vmov.f32	s15, s0
 801c7a6:	e7f7      	b.n	801c798 <xflowf+0x6>

0801c7a8 <__math_uflowf>:
 801c7a8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801c7b0 <__math_uflowf+0x8>
 801c7ac:	f7ff bff1 	b.w	801c792 <xflowf>
 801c7b0:	10000000 	.word	0x10000000

0801c7b4 <__math_may_uflowf>:
 801c7b4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801c7bc <__math_may_uflowf+0x8>
 801c7b8:	f7ff bfeb 	b.w	801c792 <xflowf>
 801c7bc:	1a200000 	.word	0x1a200000

0801c7c0 <__math_oflowf>:
 801c7c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801c7c8 <__math_oflowf+0x8>
 801c7c4:	f7ff bfe5 	b.w	801c792 <xflowf>
 801c7c8:	70000000 	.word	0x70000000

0801c7cc <__math_divzerof>:
 801c7cc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801c7d0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801c7d4:	2800      	cmp	r0, #0
 801c7d6:	fe40 7a27 	vseleq.f32	s15, s0, s15
 801c7da:	ed9f 0a03 	vldr	s0, [pc, #12]	; 801c7e8 <__math_divzerof+0x1c>
 801c7de:	2022      	movs	r0, #34	; 0x22
 801c7e0:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801c7e4:	f7ff bfca 	b.w	801c77c <with_errnof>
 801c7e8:	00000000 	.word	0x00000000

0801c7ec <__math_invalidf>:
 801c7ec:	eef0 7a40 	vmov.f32	s15, s0
 801c7f0:	ee30 7a40 	vsub.f32	s14, s0, s0
 801c7f4:	eef4 7a67 	vcmp.f32	s15, s15
 801c7f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c7fc:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801c800:	d602      	bvs.n	801c808 <__math_invalidf+0x1c>
 801c802:	2021      	movs	r0, #33	; 0x21
 801c804:	f7ff bfba 	b.w	801c77c <with_errnof>
 801c808:	4770      	bx	lr
	...

0801c80c <expf>:
 801c80c:	ee10 2a10 	vmov	r2, s0
 801c810:	f240 412a 	movw	r1, #1066	; 0x42a
 801c814:	f3c2 530a 	ubfx	r3, r2, #20, #11
 801c818:	428b      	cmp	r3, r1
 801c81a:	b430      	push	{r4, r5}
 801c81c:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801c820:	d92a      	bls.n	801c878 <expf+0x6c>
 801c822:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 801c826:	d058      	beq.n	801c8da <expf+0xce>
 801c828:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 801c82c:	d303      	bcc.n	801c836 <expf+0x2a>
 801c82e:	ee30 0a00 	vadd.f32	s0, s0, s0
 801c832:	bc30      	pop	{r4, r5}
 801c834:	4770      	bx	lr
 801c836:	eddf 7a2a 	vldr	s15, [pc, #168]	; 801c8e0 <expf+0xd4>
 801c83a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801c83e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c842:	dd03      	ble.n	801c84c <expf+0x40>
 801c844:	bc30      	pop	{r4, r5}
 801c846:	2000      	movs	r0, #0
 801c848:	f7ff bfba 	b.w	801c7c0 <__math_oflowf>
 801c84c:	eddf 7a25 	vldr	s15, [pc, #148]	; 801c8e4 <expf+0xd8>
 801c850:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801c854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c858:	d503      	bpl.n	801c862 <expf+0x56>
 801c85a:	bc30      	pop	{r4, r5}
 801c85c:	2000      	movs	r0, #0
 801c85e:	f7ff bfa3 	b.w	801c7a8 <__math_uflowf>
 801c862:	eddf 7a21 	vldr	s15, [pc, #132]	; 801c8e8 <expf+0xdc>
 801c866:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801c86a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c86e:	d503      	bpl.n	801c878 <expf+0x6c>
 801c870:	bc30      	pop	{r4, r5}
 801c872:	2000      	movs	r0, #0
 801c874:	f7ff bf9e 	b.w	801c7b4 <__math_may_uflowf>
 801c878:	4b1c      	ldr	r3, [pc, #112]	; (801c8ec <expf+0xe0>)
 801c87a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801c87e:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 801c882:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 801c886:	eeb0 7b44 	vmov.f64	d7, d4
 801c88a:	eea5 7b06 	vfma.f64	d7, d5, d6
 801c88e:	ee17 0a10 	vmov	r0, s14
 801c892:	ee37 7b44 	vsub.f64	d7, d7, d4
 801c896:	f000 021f 	and.w	r2, r0, #31
 801c89a:	ee95 7b06 	vfnms.f64	d7, d5, d6
 801c89e:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 801c8a2:	ee27 4b07 	vmul.f64	d4, d7, d7
 801c8a6:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 801c8aa:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 801c8ae:	eea5 6b07 	vfma.f64	d6, d5, d7
 801c8b2:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 801c8b6:	684d      	ldr	r5, [r1, #4]
 801c8b8:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 801c8bc:	2100      	movs	r1, #0
 801c8be:	190a      	adds	r2, r1, r4
 801c8c0:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 801c8c4:	eea5 0b07 	vfma.f64	d0, d5, d7
 801c8c8:	ec43 2b17 	vmov	d7, r2, r3
 801c8cc:	eea6 0b04 	vfma.f64	d0, d6, d4
 801c8d0:	ee20 0b07 	vmul.f64	d0, d0, d7
 801c8d4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801c8d8:	e7ab      	b.n	801c832 <expf+0x26>
 801c8da:	ed9f 0a05 	vldr	s0, [pc, #20]	; 801c8f0 <expf+0xe4>
 801c8de:	e7a8      	b.n	801c832 <expf+0x26>
 801c8e0:	42b17217 	.word	0x42b17217
 801c8e4:	c2cff1b4 	.word	0xc2cff1b4
 801c8e8:	c2ce8ecf 	.word	0xc2ce8ecf
 801c8ec:	08091088 	.word	0x08091088
 801c8f0:	00000000 	.word	0x00000000

0801c8f4 <checkint>:
 801c8f4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801c8f8:	2b7e      	cmp	r3, #126	; 0x7e
 801c8fa:	dd10      	ble.n	801c91e <checkint+0x2a>
 801c8fc:	2b96      	cmp	r3, #150	; 0x96
 801c8fe:	dc0c      	bgt.n	801c91a <checkint+0x26>
 801c900:	2201      	movs	r2, #1
 801c902:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801c906:	fa02 f303 	lsl.w	r3, r2, r3
 801c90a:	1e5a      	subs	r2, r3, #1
 801c90c:	4202      	tst	r2, r0
 801c90e:	d106      	bne.n	801c91e <checkint+0x2a>
 801c910:	4203      	tst	r3, r0
 801c912:	bf0c      	ite	eq
 801c914:	2002      	moveq	r0, #2
 801c916:	2001      	movne	r0, #1
 801c918:	4770      	bx	lr
 801c91a:	2002      	movs	r0, #2
 801c91c:	4770      	bx	lr
 801c91e:	2000      	movs	r0, #0
 801c920:	4770      	bx	lr
 801c922:	0000      	movs	r0, r0
 801c924:	0000      	movs	r0, r0
	...

0801c928 <powf>:
 801c928:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c92a:	ee10 1a10 	vmov	r1, s0
 801c92e:	ee10 4a90 	vmov	r4, s1
 801c932:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 801c936:	0062      	lsls	r2, r4, #1
 801c938:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801c93c:	eef0 7a40 	vmov.f32	s15, s0
 801c940:	f102 30ff 	add.w	r0, r2, #4294967295
 801c944:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 801c948:	d252      	bcs.n	801c9f0 <powf+0xc8>
 801c94a:	4298      	cmp	r0, r3
 801c94c:	d252      	bcs.n	801c9f4 <powf+0xcc>
 801c94e:	2000      	movs	r0, #0
 801c950:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 801c954:	4ca0      	ldr	r4, [pc, #640]	; (801cbd8 <powf+0x2b0>)
 801c956:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 801c95a:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 801c95e:	f3c2 45c3 	ubfx	r5, r2, #19, #4
 801c962:	0dd2      	lsrs	r2, r2, #23
 801c964:	05d2      	lsls	r2, r2, #23
 801c966:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 801c96a:	1a8b      	subs	r3, r1, r2
 801c96c:	ed95 6b00 	vldr	d6, [r5]
 801c970:	ee07 3a90 	vmov	s15, r3
 801c974:	15d2      	asrs	r2, r2, #23
 801c976:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801c97a:	eea6 5b07 	vfma.f64	d5, d6, d7
 801c97e:	ed95 6b02 	vldr	d6, [r5, #8]
 801c982:	ee25 2b05 	vmul.f64	d2, d5, d5
 801c986:	ee22 1b02 	vmul.f64	d1, d2, d2
 801c98a:	ee07 2a90 	vmov	s15, r2
 801c98e:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
 801c992:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801c996:	ee37 7b06 	vadd.f64	d7, d7, d6
 801c99a:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
 801c99e:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
 801c9a2:	eea5 3b06 	vfma.f64	d3, d5, d6
 801c9a6:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
 801c9aa:	eea5 6b04 	vfma.f64	d6, d5, d4
 801c9ae:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
 801c9b2:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 801c9b6:	eea5 7b04 	vfma.f64	d7, d5, d4
 801c9ba:	eea2 7b06 	vfma.f64	d7, d2, d6
 801c9be:	eea3 7b01 	vfma.f64	d7, d3, d1
 801c9c2:	ee20 0b07 	vmul.f64	d0, d0, d7
 801c9c6:	ee10 3a90 	vmov	r3, s1
 801c9ca:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 801c9ce:	f248 03bf 	movw	r3, #32959	; 0x80bf
 801c9d2:	429a      	cmp	r2, r3
 801c9d4:	f0c0 80b1 	bcc.w	801cb3a <powf+0x212>
 801c9d8:	ed9f 7b77 	vldr	d7, [pc, #476]	; 801cbb8 <powf+0x290>
 801c9dc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801c9e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c9e4:	dd79      	ble.n	801cada <powf+0x1b2>
 801c9e6:	b003      	add	sp, #12
 801c9e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c9ec:	f7ff bee8 	b.w	801c7c0 <__math_oflowf>
 801c9f0:	4298      	cmp	r0, r3
 801c9f2:	d32d      	bcc.n	801ca50 <powf+0x128>
 801c9f4:	b952      	cbnz	r2, 801ca0c <powf+0xe4>
 801c9f6:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 801c9fa:	005b      	lsls	r3, r3, #1
 801c9fc:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 801ca00:	f240 80c9 	bls.w	801cb96 <powf+0x26e>
 801ca04:	ee37 0aa0 	vadd.f32	s0, s15, s1
 801ca08:	b003      	add	sp, #12
 801ca0a:	bd30      	pop	{r4, r5, pc}
 801ca0c:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 801ca10:	d105      	bne.n	801ca1e <powf+0xf6>
 801ca12:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 801ca16:	0064      	lsls	r4, r4, #1
 801ca18:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 801ca1c:	e7f0      	b.n	801ca00 <powf+0xd8>
 801ca1e:	004b      	lsls	r3, r1, #1
 801ca20:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 801ca24:	d8ee      	bhi.n	801ca04 <powf+0xdc>
 801ca26:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 801ca2a:	d1eb      	bne.n	801ca04 <powf+0xdc>
 801ca2c:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801ca30:	f000 80b1 	beq.w	801cb96 <powf+0x26e>
 801ca34:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801ca38:	ea6f 0404 	mvn.w	r4, r4
 801ca3c:	bf34      	ite	cc
 801ca3e:	2300      	movcc	r3, #0
 801ca40:	2301      	movcs	r3, #1
 801ca42:	0fe4      	lsrs	r4, r4, #31
 801ca44:	42a3      	cmp	r3, r4
 801ca46:	f040 80a9 	bne.w	801cb9c <powf+0x274>
 801ca4a:	ee20 0aa0 	vmul.f32	s0, s1, s1
 801ca4e:	e7db      	b.n	801ca08 <powf+0xe0>
 801ca50:	004d      	lsls	r5, r1, #1
 801ca52:	1e6a      	subs	r2, r5, #1
 801ca54:	429a      	cmp	r2, r3
 801ca56:	d31c      	bcc.n	801ca92 <powf+0x16a>
 801ca58:	2900      	cmp	r1, #0
 801ca5a:	ee20 0a00 	vmul.f32	s0, s0, s0
 801ca5e:	da0f      	bge.n	801ca80 <powf+0x158>
 801ca60:	ee10 0a90 	vmov	r0, s1
 801ca64:	f7ff ff46 	bl	801c8f4 <checkint>
 801ca68:	2801      	cmp	r0, #1
 801ca6a:	d109      	bne.n	801ca80 <powf+0x158>
 801ca6c:	eeb1 0a40 	vneg.f32	s0, s0
 801ca70:	b945      	cbnz	r5, 801ca84 <powf+0x15c>
 801ca72:	2c00      	cmp	r4, #0
 801ca74:	dac8      	bge.n	801ca08 <powf+0xe0>
 801ca76:	b003      	add	sp, #12
 801ca78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ca7c:	f7ff bea6 	b.w	801c7cc <__math_divzerof>
 801ca80:	2000      	movs	r0, #0
 801ca82:	e7f5      	b.n	801ca70 <powf+0x148>
 801ca84:	2c00      	cmp	r4, #0
 801ca86:	dabf      	bge.n	801ca08 <powf+0xe0>
 801ca88:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801ca8c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801ca90:	e7ba      	b.n	801ca08 <powf+0xe0>
 801ca92:	2900      	cmp	r1, #0
 801ca94:	da1f      	bge.n	801cad6 <powf+0x1ae>
 801ca96:	ee10 0a90 	vmov	r0, s1
 801ca9a:	f7ff ff2b 	bl	801c8f4 <checkint>
 801ca9e:	b920      	cbnz	r0, 801caaa <powf+0x182>
 801caa0:	b003      	add	sp, #12
 801caa2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801caa6:	f7ff bea1 	b.w	801c7ec <__math_invalidf>
 801caaa:	2801      	cmp	r0, #1
 801caac:	bf14      	ite	ne
 801caae:	2000      	movne	r0, #0
 801cab0:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 801cab4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801cab8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 801cabc:	f4bf af48 	bcs.w	801c950 <powf+0x28>
 801cac0:	ed9f 0a46 	vldr	s0, [pc, #280]	; 801cbdc <powf+0x2b4>
 801cac4:	ee27 0a80 	vmul.f32	s0, s15, s0
 801cac8:	ee10 3a10 	vmov	r3, s0
 801cacc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801cad0:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 801cad4:	e73c      	b.n	801c950 <powf+0x28>
 801cad6:	2000      	movs	r0, #0
 801cad8:	e7ee      	b.n	801cab8 <powf+0x190>
 801cada:	ed9f 7b39 	vldr	d7, [pc, #228]	; 801cbc0 <powf+0x298>
 801cade:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801cae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cae6:	dd10      	ble.n	801cb0a <powf+0x1e2>
 801cae8:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 801caec:	2800      	cmp	r0, #0
 801caee:	d158      	bne.n	801cba2 <powf+0x27a>
 801caf0:	9300      	str	r3, [sp, #0]
 801caf2:	eddd 7a00 	vldr	s15, [sp]
 801caf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cafa:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cafe:	eef4 7a47 	vcmp.f32	s15, s14
 801cb02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb06:	f47f af6e 	bne.w	801c9e6 <powf+0xbe>
 801cb0a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 801cbc8 <powf+0x2a0>
 801cb0e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801cb12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb16:	d804      	bhi.n	801cb22 <powf+0x1fa>
 801cb18:	b003      	add	sp, #12
 801cb1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cb1e:	f7ff be43 	b.w	801c7a8 <__math_uflowf>
 801cb22:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 801cbd0 <powf+0x2a8>
 801cb26:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801cb2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb2e:	d504      	bpl.n	801cb3a <powf+0x212>
 801cb30:	b003      	add	sp, #12
 801cb32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cb36:	f7ff be3d 	b.w	801c7b4 <__math_may_uflowf>
 801cb3a:	4b29      	ldr	r3, [pc, #164]	; (801cbe0 <powf+0x2b8>)
 801cb3c:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 801cb40:	ee30 6b07 	vadd.f64	d6, d0, d7
 801cb44:	ee16 2a10 	vmov	r2, s12
 801cb48:	ee36 7b47 	vsub.f64	d7, d6, d7
 801cb4c:	f002 011f 	and.w	r1, r2, #31
 801cb50:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 801cb54:	ee30 7b47 	vsub.f64	d7, d0, d7
 801cb58:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801cb5c:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 801cb60:	ee27 4b07 	vmul.f64	d4, d7, d7
 801cb64:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 801cb68:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 801cb6c:	eea7 6b05 	vfma.f64	d6, d7, d5
 801cb70:	686d      	ldr	r5, [r5, #4]
 801cb72:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 801cb76:	1882      	adds	r2, r0, r2
 801cb78:	2300      	movs	r3, #0
 801cb7a:	1918      	adds	r0, r3, r4
 801cb7c:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 801cb80:	eea7 0b05 	vfma.f64	d0, d7, d5
 801cb84:	ec41 0b17 	vmov	d7, r0, r1
 801cb88:	eea6 0b04 	vfma.f64	d0, d6, d4
 801cb8c:	ee20 0b07 	vmul.f64	d0, d0, d7
 801cb90:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801cb94:	e738      	b.n	801ca08 <powf+0xe0>
 801cb96:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801cb9a:	e735      	b.n	801ca08 <powf+0xe0>
 801cb9c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 801cbe4 <powf+0x2bc>
 801cba0:	e732      	b.n	801ca08 <powf+0xe0>
 801cba2:	9301      	str	r3, [sp, #4]
 801cba4:	eddd 7a01 	vldr	s15, [sp, #4]
 801cba8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801cbac:	ee77 7a67 	vsub.f32	s15, s14, s15
 801cbb0:	e7a5      	b.n	801cafe <powf+0x1d6>
 801cbb2:	bf00      	nop
 801cbb4:	f3af 8000 	nop.w
 801cbb8:	ffd1d571 	.word	0xffd1d571
 801cbbc:	405fffff 	.word	0x405fffff
 801cbc0:	ffa3aae2 	.word	0xffa3aae2
 801cbc4:	405fffff 	.word	0x405fffff
 801cbc8:	00000000 	.word	0x00000000
 801cbcc:	c062c000 	.word	0xc062c000
 801cbd0:	00000000 	.word	0x00000000
 801cbd4:	c062a000 	.word	0xc062a000
 801cbd8:	080911d0 	.word	0x080911d0
 801cbdc:	4b000000 	.word	0x4b000000
 801cbe0:	08091088 	.word	0x08091088
 801cbe4:	00000000 	.word	0x00000000

0801cbe8 <_lseek>:
 801cbe8:	4b02      	ldr	r3, [pc, #8]	; (801cbf4 <_lseek+0xc>)
 801cbea:	2258      	movs	r2, #88	; 0x58
 801cbec:	601a      	str	r2, [r3, #0]
 801cbee:	f04f 30ff 	mov.w	r0, #4294967295
 801cbf2:	4770      	bx	lr
 801cbf4:	2405e3bc 	.word	0x2405e3bc

0801cbf8 <_init>:
 801cbf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cbfa:	bf00      	nop
 801cbfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cbfe:	bc08      	pop	{r3}
 801cc00:	469e      	mov	lr, r3
 801cc02:	4770      	bx	lr

0801cc04 <_fini>:
 801cc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cc06:	bf00      	nop
 801cc08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cc0a:	bc08      	pop	{r3}
 801cc0c:	469e      	mov	lr, r3
 801cc0e:	4770      	bx	lr
