
camera_bsp_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc18  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f0  0800fec8  0800fec8  0001fec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080105b8  080105b8  000205b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080105c0  080105c0  000205c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080105c4  080105c4  000205c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b8  24000000  080105c8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00060858  240000b8  08010680  000300b8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24060910  08010680  00030910  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024c1a  00000000  00000000  000300e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004855  00000000  00000000  00054d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017f8  00000000  00000000  00059558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00037b54  00000000  00000000  0005ad50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000249fc  00000000  00000000  000928a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014e70b  00000000  00000000  000b72a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  002059ab  2**0
                  CONTENTS, READONLY
 17 .debug_ranges 00001618  00000000  00000000  00205a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006a30  00000000  00000000  00207018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240000b8 	.word	0x240000b8
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800feb0 	.word	0x0800feb0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240000bc 	.word	0x240000bc
 80002ec:	0800feb0 	.word	0x0800feb0

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800069a:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <MX_DMA_Init+0x3c>)
 800069c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80006a0:	4a0b      	ldr	r2, [pc, #44]	; (80006d0 <MX_DMA_Init+0x3c>)
 80006a2:	f043 0301 	orr.w	r3, r3, #1
 80006a6:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_DMA_Init+0x3c>)
 80006ac:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80006b0:	f003 0301 	and.w	r3, r3, #1
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2100      	movs	r1, #0
 80006bc:	200b      	movs	r0, #11
 80006be:	f003 ff08 	bl	80044d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006c2:	200b      	movs	r0, #11
 80006c4:	f003 ff1f 	bl	8004506 <HAL_NVIC_EnableIRQ>

}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	58024400 	.word	0x58024400

080006d4 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80006d8:	4b19      	ldr	r3, [pc, #100]	; (8000740 <MX_DMA2D_Init+0x6c>)
 80006da:	4a1a      	ldr	r2, [pc, #104]	; (8000744 <MX_DMA2D_Init+0x70>)
 80006dc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80006de:	4b18      	ldr	r3, [pc, #96]	; (8000740 <MX_DMA2D_Init+0x6c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80006e4:	4b16      	ldr	r3, [pc, #88]	; (8000740 <MX_DMA2D_Init+0x6c>)
 80006e6:	2202      	movs	r2, #2
 80006e8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80006ea:	4b15      	ldr	r3, [pc, #84]	; (8000740 <MX_DMA2D_Init+0x6c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80006f0:	4b13      	ldr	r3, [pc, #76]	; (8000740 <MX_DMA2D_Init+0x6c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80006f6:	4b12      	ldr	r3, [pc, #72]	; (8000740 <MX_DMA2D_Init+0x6c>)
 80006f8:	2202      	movs	r2, #2
 80006fa:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80006fc:	4b10      	ldr	r3, [pc, #64]	; (8000740 <MX_DMA2D_Init+0x6c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MX_DMA2D_Init+0x6c>)
 8000704:	2200      	movs	r2, #0
 8000706:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000708:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <MX_DMA2D_Init+0x6c>)
 800070a:	2200      	movs	r2, #0
 800070c:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_DMA2D_Init+0x6c>)
 8000710:	2200      	movs	r2, #0
 8000712:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000714:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <MX_DMA2D_Init+0x6c>)
 8000716:	2200      	movs	r2, #0
 8000718:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800071a:	4809      	ldr	r0, [pc, #36]	; (8000740 <MX_DMA2D_Init+0x6c>)
 800071c:	f007 f8c6 	bl	80078ac <HAL_DMA2D_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000726:	f000 fd43 	bl	80011b0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800072a:	2101      	movs	r1, #1
 800072c:	4804      	ldr	r0, [pc, #16]	; (8000740 <MX_DMA2D_Init+0x6c>)
 800072e:	f007 fa31 	bl	8007b94 <HAL_DMA2D_ConfigLayer>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8000738:	f000 fd3a 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	2400019c 	.word	0x2400019c
 8000744:	52001000 	.word	0x52001000

08000748 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a0e      	ldr	r2, [pc, #56]	; (8000790 <HAL_DMA2D_MspInit+0x48>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d116      	bne.n	8000788 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <HAL_DMA2D_MspInit+0x4c>)
 800075c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000760:	4a0c      	ldr	r2, [pc, #48]	; (8000794 <HAL_DMA2D_MspInit+0x4c>)
 8000762:	f043 0310 	orr.w	r3, r3, #16
 8000766:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 800076a:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <HAL_DMA2D_MspInit+0x4c>)
 800076c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000770:	f003 0310 	and.w	r3, r3, #16
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8000778:	2200      	movs	r2, #0
 800077a:	2100      	movs	r1, #0
 800077c:	205a      	movs	r0, #90	; 0x5a
 800077e:	f003 fea8 	bl	80044d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000782:	205a      	movs	r0, #90	; 0x5a
 8000784:	f003 febf 	bl	8004506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000788:	bf00      	nop
 800078a:	3710      	adds	r7, #16
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	52001000 	.word	0x52001000
 8000794:	58024400 	.word	0x58024400

08000798 <MX_GPIO_Init>:
     PE8   ------> FMC_D5_DA5
     PE11   ------> FMC_D8_DA8
     PH7   ------> FMC_SDCKE1
*/
void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b090      	sub	sp, #64	; 0x40
 800079c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80007ae:	4bbf      	ldr	r3, [pc, #764]	; (8000aac <MX_GPIO_Init+0x314>)
 80007b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007b4:	4abd      	ldr	r2, [pc, #756]	; (8000aac <MX_GPIO_Init+0x314>)
 80007b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ba:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007be:	4bbb      	ldr	r3, [pc, #748]	; (8000aac <MX_GPIO_Init+0x314>)
 80007c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80007ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007cc:	4bb7      	ldr	r3, [pc, #732]	; (8000aac <MX_GPIO_Init+0x314>)
 80007ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007d2:	4ab6      	ldr	r2, [pc, #728]	; (8000aac <MX_GPIO_Init+0x314>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007dc:	4bb3      	ldr	r3, [pc, #716]	; (8000aac <MX_GPIO_Init+0x314>)
 80007de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
 80007e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ea:	4bb0      	ldr	r3, [pc, #704]	; (8000aac <MX_GPIO_Init+0x314>)
 80007ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007f0:	4aae      	ldr	r2, [pc, #696]	; (8000aac <MX_GPIO_Init+0x314>)
 80007f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007fa:	4bac      	ldr	r3, [pc, #688]	; (8000aac <MX_GPIO_Init+0x314>)
 80007fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000804:	623b      	str	r3, [r7, #32]
 8000806:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000808:	4ba8      	ldr	r3, [pc, #672]	; (8000aac <MX_GPIO_Init+0x314>)
 800080a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800080e:	4aa7      	ldr	r2, [pc, #668]	; (8000aac <MX_GPIO_Init+0x314>)
 8000810:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000814:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000818:	4ba4      	ldr	r3, [pc, #656]	; (8000aac <MX_GPIO_Init+0x314>)
 800081a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800081e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000822:	61fb      	str	r3, [r7, #28]
 8000824:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000826:	4ba1      	ldr	r3, [pc, #644]	; (8000aac <MX_GPIO_Init+0x314>)
 8000828:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800082c:	4a9f      	ldr	r2, [pc, #636]	; (8000aac <MX_GPIO_Init+0x314>)
 800082e:	f043 0308 	orr.w	r3, r3, #8
 8000832:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000836:	4b9d      	ldr	r3, [pc, #628]	; (8000aac <MX_GPIO_Init+0x314>)
 8000838:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800083c:	f003 0308 	and.w	r3, r3, #8
 8000840:	61bb      	str	r3, [r7, #24]
 8000842:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000844:	4b99      	ldr	r3, [pc, #612]	; (8000aac <MX_GPIO_Init+0x314>)
 8000846:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800084a:	4a98      	ldr	r2, [pc, #608]	; (8000aac <MX_GPIO_Init+0x314>)
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000854:	4b95      	ldr	r3, [pc, #596]	; (8000aac <MX_GPIO_Init+0x314>)
 8000856:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000862:	4b92      	ldr	r3, [pc, #584]	; (8000aac <MX_GPIO_Init+0x314>)
 8000864:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000868:	4a90      	ldr	r2, [pc, #576]	; (8000aac <MX_GPIO_Init+0x314>)
 800086a:	f043 0310 	orr.w	r3, r3, #16
 800086e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000872:	4b8e      	ldr	r3, [pc, #568]	; (8000aac <MX_GPIO_Init+0x314>)
 8000874:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000878:	f003 0310 	and.w	r3, r3, #16
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000880:	4b8a      	ldr	r3, [pc, #552]	; (8000aac <MX_GPIO_Init+0x314>)
 8000882:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000886:	4a89      	ldr	r2, [pc, #548]	; (8000aac <MX_GPIO_Init+0x314>)
 8000888:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800088c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000890:	4b86      	ldr	r3, [pc, #536]	; (8000aac <MX_GPIO_Init+0x314>)
 8000892:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000896:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	4b83      	ldr	r3, [pc, #524]	; (8000aac <MX_GPIO_Init+0x314>)
 80008a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008a4:	4a81      	ldr	r2, [pc, #516]	; (8000aac <MX_GPIO_Init+0x314>)
 80008a6:	f043 0301 	orr.w	r3, r3, #1
 80008aa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008ae:	4b7f      	ldr	r3, [pc, #508]	; (8000aac <MX_GPIO_Init+0x314>)
 80008b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008b4:	f003 0301 	and.w	r3, r3, #1
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008bc:	4b7b      	ldr	r3, [pc, #492]	; (8000aac <MX_GPIO_Init+0x314>)
 80008be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008c2:	4a7a      	ldr	r2, [pc, #488]	; (8000aac <MX_GPIO_Init+0x314>)
 80008c4:	f043 0320 	orr.w	r3, r3, #32
 80008c8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008cc:	4b77      	ldr	r3, [pc, #476]	; (8000aac <MX_GPIO_Init+0x314>)
 80008ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008d2:	f003 0320 	and.w	r3, r3, #32
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008da:	4b74      	ldr	r3, [pc, #464]	; (8000aac <MX_GPIO_Init+0x314>)
 80008dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008e0:	4a72      	ldr	r2, [pc, #456]	; (8000aac <MX_GPIO_Init+0x314>)
 80008e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008ea:	4b70      	ldr	r3, [pc, #448]	; (8000aac <MX_GPIO_Init+0x314>)
 80008ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin, GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	210e      	movs	r1, #14
 80008fc:	486c      	ldr	r0, [pc, #432]	; (8000ab0 <MX_GPIO_Init+0x318>)
 80008fe:	f008 f961 	bl	8008bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USER_LED1_Pin|USER_LED2_Pin, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	f640 0104 	movw	r1, #2052	; 0x804
 8000908:	486a      	ldr	r0, [pc, #424]	; (8000ab4 <MX_GPIO_Init+0x31c>)
 800090a:	f008 f95b 	bl	8008bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000914:	4868      	ldr	r0, [pc, #416]	; (8000ab8 <MX_GPIO_Init+0x320>)
 8000916:	f008 f955 	bl	8008bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_NRST_GPIO_Port, AUDIO_NRST_Pin, GPIO_PIN_SET);
 800091a:	2201      	movs	r2, #1
 800091c:	2108      	movs	r1, #8
 800091e:	4865      	ldr	r0, [pc, #404]	; (8000ab4 <MX_GPIO_Init+0x31c>)
 8000920:	f008 f950 	bl	8008bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_SET);
 8000924:	2201      	movs	r2, #1
 8000926:	2106      	movs	r1, #6
 8000928:	4863      	ldr	r0, [pc, #396]	; (8000ab8 <MX_GPIO_Init+0x320>)
 800092a:	f008 f94b 	bl	8008bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = WIFI_GPIO_Pin|WIFI_DATRDY_Pin;
 800092e:	2330      	movs	r3, #48	; 0x30
 8000930:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000932:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000936:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800093c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000940:	4619      	mov	r1, r3
 8000942:	485b      	ldr	r0, [pc, #364]	; (8000ab0 <MX_GPIO_Init+0x318>)
 8000944:	f007 fe84 	bl	8008650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A15_Pin|A14_Pin
 8000948:	f248 1333 	movw	r3, #33075	; 0x8133
 800094c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |A11_Pin|A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000956:	2303      	movs	r3, #3
 8000958:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800095a:	230c      	movs	r3, #12
 800095c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800095e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000962:	4619      	mov	r1, r3
 8000964:	4853      	ldr	r0, [pc, #332]	; (8000ab4 <MX_GPIO_Init+0x31c>)
 8000966:	f007 fe73 	bl	8008650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = I2S6_SDO_Pin|I2S6_SDI_Pin|I2S6_CK_Pin;
 800096a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800096e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000970:	2302      	movs	r3, #2
 8000972:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 800097c:	2305      	movs	r3, #5
 800097e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000980:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000984:	4619      	mov	r1, r3
 8000986:	484b      	ldr	r0, [pc, #300]	; (8000ab4 <MX_GPIO_Init+0x31c>)
 8000988:	f007 fe62 	bl	8008650 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 800098c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099a:	2303      	movs	r3, #3
 800099c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800099e:	2309      	movs	r3, #9
 80009a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009a6:	4619      	mov	r1, r3
 80009a8:	4842      	ldr	r0, [pc, #264]	; (8000ab4 <MX_GPIO_Init+0x31c>)
 80009aa:	f007 fe51 	bl	8008650 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO7_Pin;
 80009ae:	2380      	movs	r3, #128	; 0x80
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b2:	2302      	movs	r3, #2
 80009b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ba:	2303      	movs	r3, #3
 80009bc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80009be:	230a      	movs	r3, #10
 80009c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO7_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009c6:	4619      	mov	r1, r3
 80009c8:	483c      	ldr	r0, [pc, #240]	; (8000abc <MX_GPIO_Init+0x324>)
 80009ca:	f007 fe41 	bl	8008650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = D3_Pin|D2_Pin|D0_Pin|D1_Pin
 80009ce:	f24c 7303 	movw	r3, #50947	; 0xc703
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D13_Pin|D15_Pin|D14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d4:	2302      	movs	r3, #2
 80009d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009dc:	2303      	movs	r3, #3
 80009de:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009e0:	230c      	movs	r3, #12
 80009e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009e8:	4619      	mov	r1, r3
 80009ea:	4834      	ldr	r0, [pc, #208]	; (8000abc <MX_GPIO_Init+0x324>)
 80009ec:	f007 fe30 	bl	8008650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin;
 80009f0:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 80009f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000a02:	230c      	movs	r3, #12
 8000a04:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	482c      	ldr	r0, [pc, #176]	; (8000ac0 <MX_GPIO_Init+0x328>)
 8000a0e:	f007 fe1f 	bl	8008650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin;
 8000a12:	230e      	movs	r3, #14
 8000a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a26:	4619      	mov	r1, r3
 8000a28:	4821      	ldr	r0, [pc, #132]	; (8000ab0 <MX_GPIO_Init+0x318>)
 8000a2a:	f007 fe11 	bl	8008650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FMC_NBL0_Pin|FMC_NBL1_Pin|D9_Pin|D4_Pin
 8000a2e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000a32:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D10_Pin|D11_Pin|D7_Pin|D6_Pin
                          |D12_Pin|D5_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a34:	2302      	movs	r3, #2
 8000a36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a40:	230c      	movs	r3, #12
 8000a42:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a48:	4619      	mov	r1, r3
 8000a4a:	481e      	ldr	r0, [pc, #120]	; (8000ac4 <MX_GPIO_Init+0x32c>)
 8000a4c:	f007 fe00 	bl	8008650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = USER_LED1_Pin|AUDIO_NRST_Pin|USER_LED2_Pin;
 8000a50:	f640 030c 	movw	r3, #2060	; 0x80c
 8000a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a56:	2301      	movs	r3, #1
 8000a58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a66:	4619      	mov	r1, r3
 8000a68:	4812      	ldr	r0, [pc, #72]	; (8000ab4 <MX_GPIO_Init+0x31c>)
 8000a6a:	f007 fdf1 	bl	8008650 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8000a6e:	2304      	movs	r3, #4
 8000a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000a7e:	230c      	movs	r3, #12
 8000a80:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8000a82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a86:	4619      	mov	r1, r3
 8000a88:	480c      	ldr	r0, [pc, #48]	; (8000abc <MX_GPIO_Init+0x324>)
 8000a8a:	f007 fde1 	bl	8008650 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000a8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a94:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4802      	ldr	r0, [pc, #8]	; (8000ab0 <MX_GPIO_Init+0x318>)
 8000aa6:	f007 fdd3 	bl	8008650 <HAL_GPIO_Init>
 8000aaa:	e00d      	b.n	8000ac8 <MX_GPIO_Init+0x330>
 8000aac:	58024400 	.word	0x58024400
 8000ab0:	58022000 	.word	0x58022000
 8000ab4:	58021800 	.word	0x58021800
 8000ab8:	58020000 	.word	0x58020000
 8000abc:	58020c00 	.word	0x58020c00
 8000ac0:	58020800 	.word	0x58020800
 8000ac4:	58021000 	.word	0x58021000

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_SCK_Pin;
 8000ac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ada:	2305      	movs	r3, #5
 8000adc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4869      	ldr	r0, [pc, #420]	; (8000c8c <MX_GPIO_Init+0x4f4>)
 8000ae6:	f007 fdb3 	bl	8008650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin;
 8000aea:	f640 0306 	movw	r3, #2054	; 0x806
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af0:	2301      	movs	r3, #1
 8000af2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b00:	4619      	mov	r1, r3
 8000b02:	4862      	ldr	r0, [pc, #392]	; (8000c8c <MX_GPIO_Init+0x4f4>)
 8000b04:	f007 fda4 	bl	8008650 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 8000b08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	485c      	ldr	r0, [pc, #368]	; (8000c90 <MX_GPIO_Init+0x4f8>)
 8000b20:	f007 fd96 	bl	8008650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = A1_Pin|A0_Pin|A2_Pin|A4_Pin
 8000b24:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000b28:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |A3_Pin|A5_Pin|A7_Pin|SDNRAS_Pin
                          |A9_Pin|A8_Pin|A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b32:	2303      	movs	r3, #3
 8000b34:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b36:	230c      	movs	r3, #12
 8000b38:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4854      	ldr	r0, [pc, #336]	; (8000c94 <MX_GPIO_Init+0x4fc>)
 8000b42:	f007 fd85 	bl	8008650 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCO_Pin;
 8000b46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2300      	movs	r3, #0
 8000b56:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b60:	4619      	mov	r1, r3
 8000b62:	484a      	ldr	r0, [pc, #296]	; (8000c8c <MX_GPIO_Init+0x4f4>)
 8000b64:	f007 fd74 	bl	8008650 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 8000b68:	2340      	movs	r3, #64	; 0x40
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b74:	2303      	movs	r3, #3
 8000b76:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000b78:	230a      	movs	r3, #10
 8000b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b80:	4619      	mov	r1, r3
 8000b82:	4845      	ldr	r0, [pc, #276]	; (8000c98 <MX_GPIO_Init+0x500>)
 8000b84:	f007 fd64 	bl	8008650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8000b88:	230c      	movs	r3, #12
 8000b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2300      	movs	r3, #0
 8000b96:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b98:	2305      	movs	r3, #5
 8000b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	483b      	ldr	r0, [pc, #236]	; (8000c90 <MX_GPIO_Init+0x4f8>)
 8000ba4:	f007 fd54 	bl	8008650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 8000ba8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bae:	2312      	movs	r3, #18
 8000bb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000bba:	2304      	movs	r3, #4
 8000bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4835      	ldr	r0, [pc, #212]	; (8000c9c <MX_GPIO_Init+0x504>)
 8000bc6:	f007 fd43 	bl	8008650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OCSPI1_IO4_Pin|OCSPI1_DQS_Pin;
 8000bca:	2322      	movs	r3, #34	; 0x22
 8000bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000bda:	230a      	movs	r3, #10
 8000bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000be2:	4619      	mov	r1, r3
 8000be4:	482a      	ldr	r0, [pc, #168]	; (8000c90 <MX_GPIO_Init+0x4f8>)
 8000be6:	f007 fd33 	bl	8008650 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000bea:	2304      	movs	r3, #4
 8000bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bf2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000bf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4828      	ldr	r0, [pc, #160]	; (8000ca0 <MX_GPIO_Init+0x508>)
 8000c00:	f007 fd26 	bl	8008650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = SDNE1_Pin|SDNWE_Pin|SDCKE1_Pin;
 8000c04:	23e0      	movs	r3, #224	; 0xe0
 8000c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c14:	230c      	movs	r3, #12
 8000c16:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4820      	ldr	r0, [pc, #128]	; (8000ca0 <MX_GPIO_Init+0x508>)
 8000c20:	f007 fd16 	bl	8008650 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO5_Pin;
 8000c24:	2308      	movs	r3, #8
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c30:	2303      	movs	r3, #3
 8000c32:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000c34:	2309      	movs	r3, #9
 8000c36:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO5_GPIO_Port, &GPIO_InitStruct);
 8000c38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4818      	ldr	r0, [pc, #96]	; (8000ca0 <MX_GPIO_Init+0x508>)
 8000c40:	f007 fd06 	bl	8008650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = I2S6_WS_Pin|I2S6_MCK_Pin;
 8000c44:	2309      	movs	r3, #9
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8000c54:	2305      	movs	r3, #5
 8000c56:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480b      	ldr	r0, [pc, #44]	; (8000c8c <MX_GPIO_Init+0x4f4>)
 8000c60:	f007 fcf6 	bl	8008650 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 8000c64:	2304      	movs	r3, #4
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c70:	2303      	movs	r3, #3
 8000c72:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000c74:	2309      	movs	r3, #9
 8000c76:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4809      	ldr	r0, [pc, #36]	; (8000ca4 <MX_GPIO_Init+0x50c>)
 8000c80:	f007 fce6 	bl	8008650 <HAL_GPIO_Init>

}
 8000c84:	bf00      	nop
 8000c86:	3740      	adds	r7, #64	; 0x40
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	58020000 	.word	0x58020000
 8000c90:	58020800 	.word	0x58020800
 8000c94:	58021400 	.word	0x58021400
 8000c98:	58021800 	.word	0x58021800
 8000c9c:	58020c00 	.word	0x58020c00
 8000ca0:	58021c00 	.word	0x58021c00
 8000ca4:	58020400 	.word	0x58020400

08000ca8 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08e      	sub	sp, #56	; 0x38
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	2234      	movs	r2, #52	; 0x34
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f00e f897 	bl	800ede8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000cba:	4b39      	ldr	r3, [pc, #228]	; (8000da0 <MX_LTDC_Init+0xf8>)
 8000cbc:	4a39      	ldr	r2, [pc, #228]	; (8000da4 <MX_LTDC_Init+0xfc>)
 8000cbe:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000cc0:	4b37      	ldr	r3, [pc, #220]	; (8000da0 <MX_LTDC_Init+0xf8>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000cc6:	4b36      	ldr	r3, [pc, #216]	; (8000da0 <MX_LTDC_Init+0xf8>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AH;
 8000ccc:	4b34      	ldr	r3, [pc, #208]	; (8000da0 <MX_LTDC_Init+0xf8>)
 8000cce:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000cd2:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000cd4:	4b32      	ldr	r3, [pc, #200]	; (8000da0 <MX_LTDC_Init+0xf8>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000cda:	4b31      	ldr	r3, [pc, #196]	; (8000da0 <MX_LTDC_Init+0xf8>)
 8000cdc:	2207      	movs	r2, #7
 8000cde:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000ce0:	4b2f      	ldr	r3, [pc, #188]	; (8000da0 <MX_LTDC_Init+0xf8>)
 8000ce2:	2203      	movs	r2, #3
 8000ce4:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000ce6:	4b2e      	ldr	r3, [pc, #184]	; (8000da0 <MX_LTDC_Init+0xf8>)
 8000ce8:	220e      	movs	r2, #14
 8000cea:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000cec:	4b2c      	ldr	r3, [pc, #176]	; (8000da0 <MX_LTDC_Init+0xf8>)
 8000cee:	2205      	movs	r2, #5
 8000cf0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000cf2:	4b2b      	ldr	r3, [pc, #172]	; (8000da0 <MX_LTDC_Init+0xf8>)
 8000cf4:	f240 228e 	movw	r2, #654	; 0x28e
 8000cf8:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000cfa:	4b29      	ldr	r3, [pc, #164]	; (8000da0 <MX_LTDC_Init+0xf8>)
 8000cfc:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000d00:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8000d02:	4b27      	ldr	r3, [pc, #156]	; (8000da0 <MX_LTDC_Init+0xf8>)
 8000d04:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000d08:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000d0a:	4b25      	ldr	r3, [pc, #148]	; (8000da0 <MX_LTDC_Init+0xf8>)
 8000d0c:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000d10:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000d12:	4b23      	ldr	r3, [pc, #140]	; (8000da0 <MX_LTDC_Init+0xf8>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000d1a:	4b21      	ldr	r3, [pc, #132]	; (8000da0 <MX_LTDC_Init+0xf8>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000d22:	4b1f      	ldr	r3, [pc, #124]	; (8000da0 <MX_LTDC_Init+0xf8>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000d2a:	481d      	ldr	r0, [pc, #116]	; (8000da0 <MX_LTDC_Init+0xf8>)
 8000d2c:	f008 fdd0 	bl	80098d0 <HAL_LTDC_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_LTDC_Init+0x92>
  {
    Error_Handler();
 8000d36:	f000 fa3b 	bl	80011b0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 320;
 8000d3e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000d42:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 240;
 8000d48:	23f0      	movs	r3, #240	; 0xf0
 8000d4a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000d58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d5c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000d5e:	2305      	movs	r3, #5
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d80:	1d3b      	adds	r3, r7, #4
 8000d82:	2200      	movs	r2, #0
 8000d84:	4619      	mov	r1, r3
 8000d86:	4806      	ldr	r0, [pc, #24]	; (8000da0 <MX_LTDC_Init+0xf8>)
 8000d88:	f008 ff34 	bl	8009bf4 <HAL_LTDC_ConfigLayer>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 8000d92:	f000 fa0d 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	3738      	adds	r7, #56	; 0x38
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	24000204 	.word	0x24000204
 8000da4:	50001000 	.word	0x50001000

08000da8 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b0bc      	sub	sp, #240	; 0xf0
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc0:	f107 0318 	add.w	r3, r7, #24
 8000dc4:	22c0      	movs	r2, #192	; 0xc0
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f00e f80d 	bl	800ede8 <memset>
  if(ltdcHandle->Instance==LTDC)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a5b      	ldr	r2, [pc, #364]	; (8000f40 <HAL_LTDC_MspInit+0x198>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	f040 80ae 	bne.w	8000f36 <HAL_LTDC_MspInit+0x18e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000dda:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000dde:	f04f 0300 	mov.w	r3, #0
 8000de2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 2;
 8000de6:	2302      	movs	r3, #2
 8000de8:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 11;
 8000dea:	230b      	movs	r3, #11
 8000dec:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 17;
 8000dee:	2311      	movs	r3, #17
 8000df0:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000df2:	2302      	movs	r3, #2
 8000df4:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 11;
 8000df6:	230b      	movs	r3, #11
 8000df8:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000dfa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dfe:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e08:	f107 0318 	add.w	r3, r7, #24
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f00a f95b 	bl	800b0c8 <HAL_RCCEx_PeriphCLKConfig>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 8000e18:	f000 f9ca 	bl	80011b0 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000e1c:	4b49      	ldr	r3, [pc, #292]	; (8000f44 <HAL_LTDC_MspInit+0x19c>)
 8000e1e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8000e22:	4a48      	ldr	r2, [pc, #288]	; (8000f44 <HAL_LTDC_MspInit+0x19c>)
 8000e24:	f043 0308 	orr.w	r3, r3, #8
 8000e28:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 8000e2c:	4b45      	ldr	r3, [pc, #276]	; (8000f44 <HAL_LTDC_MspInit+0x19c>)
 8000e2e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8000e32:	f003 0308 	and.w	r3, r3, #8
 8000e36:	617b      	str	r3, [r7, #20]
 8000e38:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000e3a:	4b42      	ldr	r3, [pc, #264]	; (8000f44 <HAL_LTDC_MspInit+0x19c>)
 8000e3c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e40:	4a40      	ldr	r2, [pc, #256]	; (8000f44 <HAL_LTDC_MspInit+0x19c>)
 8000e42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e46:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e4a:	4b3e      	ldr	r3, [pc, #248]	; (8000f44 <HAL_LTDC_MspInit+0x19c>)
 8000e4c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000e58:	4b3a      	ldr	r3, [pc, #232]	; (8000f44 <HAL_LTDC_MspInit+0x19c>)
 8000e5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e5e:	4a39      	ldr	r2, [pc, #228]	; (8000f44 <HAL_LTDC_MspInit+0x19c>)
 8000e60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e64:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e68:	4b36      	ldr	r3, [pc, #216]	; (8000f44 <HAL_LTDC_MspInit+0x19c>)
 8000e6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e76:	4b33      	ldr	r3, [pc, #204]	; (8000f44 <HAL_LTDC_MspInit+0x19c>)
 8000e78:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e7c:	4a31      	ldr	r2, [pc, #196]	; (8000f44 <HAL_LTDC_MspInit+0x19c>)
 8000e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e82:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e86:	4b2f      	ldr	r3, [pc, #188]	; (8000f44 <HAL_LTDC_MspInit+0x19c>)
 8000e88:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	68bb      	ldr	r3, [r7, #8]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_B4_Pin|LCD_B5_Pin
 8000e94:	23ff      	movs	r3, #255	; 0xff
 8000e96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_DE_Pin|LCD_G7_Pin|LCD_G6_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000eac:	230e      	movs	r3, #14
 8000eae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000eb2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4823      	ldr	r0, [pc, #140]	; (8000f48 <HAL_LTDC_MspInit+0x1a0>)
 8000eba:	f007 fbc9 	bl	8008650 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B3_Pin|LCD_B2_Pin|LCD_B1_Pin|LCD_B0_Pin
 8000ebe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ec2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_G4_Pin|LCD_G3_Pin|LCD_G2_Pin|LCD_G1_Pin
                          |LCD_R7_Pin|LCD_G0_Pin|LCD_R1_Pin|LCD_R6_Pin
                          |LCD_R2_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ed8:	230e      	movs	r3, #14
 8000eda:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000ede:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4819      	ldr	r0, [pc, #100]	; (8000f4c <HAL_LTDC_MspInit+0x1a4>)
 8000ee6:	f007 fbb3 	bl	8008650 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_CLK_Pin|LCD_VSYNC_Pin|LCD_R0_Pin;
 8000eea:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000eee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efe:	2303      	movs	r3, #3
 8000f00:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f04:	230e      	movs	r3, #14
 8000f06:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f0a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f0e:	4619      	mov	r1, r3
 8000f10:	480f      	ldr	r0, [pc, #60]	; (8000f50 <HAL_LTDC_MspInit+0x1a8>)
 8000f12:	f007 fb9d 	bl	8008650 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2100      	movs	r1, #0
 8000f1a:	2058      	movs	r0, #88	; 0x58
 8000f1c:	f003 fad9 	bl	80044d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000f20:	2058      	movs	r0, #88	; 0x58
 8000f22:	f003 faf0 	bl	8004506 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2100      	movs	r1, #0
 8000f2a:	2059      	movs	r0, #89	; 0x59
 8000f2c:	f003 fad1 	bl	80044d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 8000f30:	2059      	movs	r0, #89	; 0x59
 8000f32:	f003 fae8 	bl	8004506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000f36:	bf00      	nop
 8000f38:	37f0      	adds	r7, #240	; 0xf0
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	50001000 	.word	0x50001000
 8000f44:	58024400 	.word	0x58024400
 8000f48:	58022800 	.word	0x58022800
 8000f4c:	58022400 	.word	0x58022400
 8000f50:	58022000 	.word	0x58022000

08000f54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08e      	sub	sp, #56	; 0x38
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5a:	f003 f929 	bl	80041b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f5e:	f000 f891 	bl	8001084 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f62:	f7ff fc19 	bl	8000798 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f66:	f7ff fb95 	bl	8000694 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000f6a:	f003 f839 	bl	8003fe0 <MX_USART1_UART_Init>
  MX_DMA2D_Init();
 8000f6e:	f7ff fbb1 	bl	80006d4 <MX_DMA2D_Init>
  MX_LTDC_Init();
 8000f72:	f7ff fe99 	bl	8000ca8 <MX_LTDC_Init>
  //MX_DCMI_Init();
  MX_RTC_Init();
 8000f76:	f001 fe79 	bl	8002c6c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);
 8000f7a:	483c      	ldr	r0, [pc, #240]	; (800106c <main+0x118>)
 8000f7c:	f001 fdc0 	bl	8002b00 <RetargetInit>

  printf("BUFFER RANDOM VALUE BEFORE CAPTURE: %d\n", buffer[5640]);
 8000f80:	4b3b      	ldr	r3, [pc, #236]	; (8001070 <main+0x11c>)
 8000f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f86:	f893 3608 	ldrb.w	r3, [r3, #1544]	; 0x608
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4839      	ldr	r0, [pc, #228]	; (8001074 <main+0x120>)
 8000f90:	f00d ff32 	bl	800edf8 <iprintf>
  //camera init
  BSP_CAMERA_PwrDown(0);
 8000f94:	2000      	movs	r0, #0
 8000f96:	f002 fcc8 	bl	800392a <BSP_CAMERA_PwrDown>

  if(BSP_CAMERA_Init(0, CAMERA_R480x272, CAMERA_PF_RGB888) != BSP_ERROR_NONE){
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	2102      	movs	r1, #2
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f002 fb16 	bl	80035d0 <BSP_CAMERA_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <main+0x5a>
	  Error_Handler();
 8000faa:	f000 f901 	bl	80011b0 <Error_Handler>
  }

  HAL_Delay(2000);
 8000fae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fb2:	f003 f98f 	bl	80042d4 <HAL_Delay>
//  buffer[5460] = 255;
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	2234      	movs	r2, #52	; 0x34
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f00d ff13 	bl	800ede8 <memset>

  pLayerCfg.WindowX0 = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000fc6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000fca:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000fd0:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000fd4:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000fda:	23ff      	movs	r3, #255	; 0xff
 8000fdc:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000fe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fe6:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000fe8:	2305      	movs	r3, #5
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = (uint32_t) buffer;
 8000fec:	4b20      	ldr	r3, [pc, #128]	; (8001070 <main+0x11c>)
 8000fee:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000ff0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000ff6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000ffa:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 255;
 8001008:	23ff      	movs	r3, #255	; 0xff
 800100a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	2200      	movs	r2, #0
 8001012:	4619      	mov	r1, r3
 8001014:	4818      	ldr	r0, [pc, #96]	; (8001078 <main+0x124>)
 8001016:	f008 fded 	bl	8009bf4 <HAL_LTDC_ConfigLayer>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <main+0xd0>
  {
    Error_Handler();
 8001020:	f000 f8c6 	bl	80011b0 <Error_Handler>
//      o Call BSP_CAMERA_SetContrast()/BSP_CAMERA_GetContrast() to set/get the camera Contrast
//        Contrast is value between -4(Level 4 negative) and 4(Level 4 positive).
//
//      o Call BSP_CAMERA_SetHueDegree()/BSP_CAMERA_GetHueDegree() to set/get the camera Hue Degree
//        HueDegree is value between -4(180 degree negative) and 4(150 degree positive).
	BSP_CAMERA_SetLightMode(0, CAMERA_LIGHT_HOME);
 8001024:	2104      	movs	r1, #4
 8001026:	2000      	movs	r0, #0
 8001028:	f002 fbac 	bl	8003784 <BSP_CAMERA_SetLightMode>
	BSP_CAMERA_SetColorEffect(0, CAMERA_COLOR_EFFECT_NONE);
 800102c:	2100      	movs	r1, #0
 800102e:	2000      	movs	r0, #0
 8001030:	f002 fbe6 	bl	8003800 <BSP_CAMERA_SetColorEffect>
	BSP_CAMERA_SetHueDegree(0, 4);
 8001034:	2104      	movs	r1, #4
 8001036:	2000      	movs	r0, #0
 8001038:	f002 fc20 	bl	800387c <BSP_CAMERA_SetHueDegree>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Printing photo 1");
 800103c:	480f      	ldr	r0, [pc, #60]	; (800107c <main+0x128>)
 800103e:	f00d fedb 	bl	800edf8 <iprintf>
  BSP_CAMERA_Start(0, (uint8_t*)buffer, CAMERA_MODE_SNAPSHOT);
 8001042:	2202      	movs	r2, #2
 8001044:	490a      	ldr	r1, [pc, #40]	; (8001070 <main+0x11c>)
 8001046:	2000      	movs	r0, #0
 8001048:	f002 fb44 	bl	80036d4 <BSP_CAMERA_Start>
//  while(camera_frame_ready == 0){}
  BSP_CAMERA_Stop(0);
 800104c:	2000      	movs	r0, #0
 800104e:	f002 fb7b 	bl	8003748 <BSP_CAMERA_Stop>
  printf("Printing photo 2");
 8001052:	480b      	ldr	r0, [pc, #44]	; (8001080 <main+0x12c>)
 8001054:	f00d fed0 	bl	800edf8 <iprintf>
  BSP_CAMERA_Start(0, (uint8_t*)buffer, CAMERA_MODE_SNAPSHOT);
 8001058:	2202      	movs	r2, #2
 800105a:	4905      	ldr	r1, [pc, #20]	; (8001070 <main+0x11c>)
 800105c:	2000      	movs	r0, #0
 800105e:	f002 fb39 	bl	80036d4 <BSP_CAMERA_Start>
//  while(camera_frame_ready == 0){}
  BSP_CAMERA_Stop(0);
 8001062:	2000      	movs	r0, #0
 8001064:	f002 fb70 	bl	8003748 <BSP_CAMERA_Stop>
  while (1)
 8001068:	e7fe      	b.n	8001068 <main+0x114>
 800106a:	bf00      	nop
 800106c:	24060868 	.word	0x24060868
 8001070:	240002b0 	.word	0x240002b0
 8001074:	0800fec8 	.word	0x0800fec8
 8001078:	24000204 	.word	0x24000204
 800107c:	0800fef0 	.word	0x0800fef0
 8001080:	0800ff04 	.word	0x0800ff04

08001084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b09c      	sub	sp, #112	; 0x70
 8001088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108e:	224c      	movs	r2, #76	; 0x4c
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f00d fea8 	bl	800ede8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	2220      	movs	r2, #32
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f00d fea2 	bl	800ede8 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80010a4:	4b38      	ldr	r3, [pc, #224]	; (8001188 <SystemClock_Config+0x104>)
 80010a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80010ae:	2004      	movs	r0, #4
 80010b0:	f008 ff88 	bl	8009fc4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80010b4:	2300      	movs	r3, #0
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	4b34      	ldr	r3, [pc, #208]	; (800118c <SystemClock_Config+0x108>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	4a33      	ldr	r2, [pc, #204]	; (800118c <SystemClock_Config+0x108>)
 80010be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010c2:	6193      	str	r3, [r2, #24]
 80010c4:	4b31      	ldr	r3, [pc, #196]	; (800118c <SystemClock_Config+0x108>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010cc:	603b      	str	r3, [r7, #0]
 80010ce:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010d0:	bf00      	nop
 80010d2:	4b2e      	ldr	r3, [pc, #184]	; (800118c <SystemClock_Config+0x108>)
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010de:	d1f8      	bne.n	80010d2 <SystemClock_Config+0x4e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010e0:	f008 ff60 	bl	8009fa4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80010e4:	4b28      	ldr	r3, [pc, #160]	; (8001188 <SystemClock_Config+0x104>)
 80010e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010e8:	4a27      	ldr	r2, [pc, #156]	; (8001188 <SystemClock_Config+0x104>)
 80010ea:	f023 0318 	bic.w	r3, r3, #24
 80010ee:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80010f0:	2305      	movs	r3, #5
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010fa:	2301      	movs	r3, #1
 80010fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fe:	2302      	movs	r3, #2
 8001100:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001102:	2302      	movs	r3, #2
 8001104:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001106:	2302      	movs	r3, #2
 8001108:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 40;
 800110a:	2328      	movs	r3, #40	; 0x28
 800110c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800110e:	2302      	movs	r3, #2
 8001110:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001112:	2303      	movs	r3, #3
 8001114:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 8001116:	2304      	movs	r3, #4
 8001118:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800111a:	230c      	movs	r3, #12
 800111c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800111e:	2300      	movs	r3, #0
 8001120:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 5462;
 8001122:	f241 5356 	movw	r3, #5462	; 0x1556
 8001126:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112c:	4618      	mov	r0, r3
 800112e:	f008 ffa3 	bl	800a078 <HAL_RCC_OscConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001138:	f000 f83a 	bl	80011b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800113c:	233f      	movs	r3, #63	; 0x3f
 800113e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001140:	2303      	movs	r3, #3
 8001142:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001148:	2300      	movs	r3, #0
 800114a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800114c:	2340      	movs	r3, #64	; 0x40
 800114e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001150:	2340      	movs	r3, #64	; 0x40
 8001152:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001154:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001158:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800115a:	2340      	movs	r3, #64	; 0x40
 800115c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	2105      	movs	r1, #5
 8001162:	4618      	mov	r0, r3
 8001164:	f009 fbba 	bl	800a8dc <HAL_RCC_ClockConfig>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <SystemClock_Config+0xee>
  {
    Error_Handler();
 800116e:	f000 f81f 	bl	80011b0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8001172:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001176:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 800117a:	2000      	movs	r0, #0
 800117c:	f009 fd64 	bl	800ac48 <HAL_RCC_MCOConfig>
}
 8001180:	bf00      	nop
 8001182:	3770      	adds	r7, #112	; 0x70
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	58024400 	.word	0x58024400
 800118c:	58024800 	.word	0x58024800

08001190 <BSP_CAMERA_FrameEventCallback>:

/* USER CODE BEGIN 4 */

void BSP_CAMERA_FrameEventCallback(uint32_t Instance){
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	camera_frame_ready = 1;
 8001198:	4b04      	ldr	r3, [pc, #16]	; (80011ac <BSP_CAMERA_FrameEventCallback+0x1c>)
 800119a:	2201      	movs	r2, #1
 800119c:	601a      	str	r2, [r3, #0]
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	240002ac 	.word	0x240002ac

080011b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b4:	b672      	cpsid	i
}
 80011b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <Error_Handler+0x8>
	...

080011bc <OV5640_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OV5640_RegisterBusIO(OV5640_Object_t *pObj, OV5640_IO_t *pIO)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d103      	bne.n	80011d4 <OV5640_RegisterBusIO+0x18>
  {
    ret = OV5640_ERROR;
 80011cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	e02c      	b.n	800122e <OV5640_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685a      	ldr	r2, [r3, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	891a      	ldrh	r2, [r3, #8]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	68da      	ldr	r2, [r3, #12]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	691a      	ldr	r2, [r3, #16]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	695a      	ldr	r2, [r3, #20]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a0c      	ldr	r2, [pc, #48]	; (8001238 <OV5640_RegisterBusIO+0x7c>)
 8001208:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a0b      	ldr	r2, [pc, #44]	; (800123c <OV5640_RegisterBusIO+0x80>)
 800120e:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	621a      	str	r2, [r3, #32]

    if (pObj->IO.Init != NULL)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d004      	beq.n	8001228 <OV5640_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4798      	blx	r3
 8001224:	60f8      	str	r0, [r7, #12]
 8001226:	e002      	b.n	800122e <OV5640_RegisterBusIO+0x72>
    }
    else
    {
      ret = OV5640_ERROR;
 8001228:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800122c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800122e:	68fb      	ldr	r3, [r7, #12]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	08002a3f 	.word	0x08002a3f
 800123c:	08002a71 	.word	0x08002a71

08001240 <OV5640_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_Init(OV5640_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 800124c:	2300      	movs	r3, #0
 800124e:	61bb      	str	r3, [r7, #24]
    {OV5640_AEC_CTRL1F, 0x14},
    {OV5640_SYSTEM_CTROL0, 0x02},
  };
  uint8_t tmp;

  if (pObj->IsInitialized == 0U)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001256:	2b00      	cmp	r3, #0
 8001258:	d165      	bne.n	8001326 <OV5640_Init+0xe6>
  {
    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	2b04      	cmp	r3, #4
 800125e:	d80e      	bhi.n	800127e <OV5640_Init+0x3e>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d00f      	beq.n	8001286 <OV5640_Init+0x46>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b02      	cmp	r3, #2
 800126a:	d00c      	beq.n	8001286 <OV5640_Init+0x46>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d009      	beq.n	8001286 <OV5640_Init+0x46>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b07      	cmp	r3, #7
 8001276:	d006      	beq.n	8001286 <OV5640_Init+0x46>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b08      	cmp	r3, #8
 800127c:	d003      	beq.n	8001286 <OV5640_Init+0x46>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 800127e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001282:	61bb      	str	r3, [r7, #24]
 8001284:	e04f      	b.n	8001326 <OV5640_Init+0xe6>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
 800128a:	e01f      	b.n	80012cc <OV5640_Init+0x8c>
      {
        if (ret != OV5640_ERROR)
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001292:	d018      	beq.n	80012c6 <OV5640_Init+0x86>
        {
          tmp = (uint8_t)OV5640_Common[index][1];
 8001294:	4a26      	ldr	r2, [pc, #152]	; (8001330 <OV5640_Init+0xf0>)
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	4413      	add	r3, r2
 800129c:	885b      	ldrh	r3, [r3, #2]
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	75fb      	strb	r3, [r7, #23]

          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f103 0018 	add.w	r0, r3, #24
 80012a8:	4a21      	ldr	r2, [pc, #132]	; (8001330 <OV5640_Init+0xf0>)
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80012b0:	f107 0217 	add.w	r2, r7, #23
 80012b4:	2301      	movs	r3, #1
 80012b6:	f001 fc0b 	bl	8002ad0 <ov5640_write_reg>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d002      	beq.n	80012c6 <OV5640_Init+0x86>
          {
            ret = OV5640_ERROR;
 80012c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012c4:	61bb      	str	r3, [r7, #24]
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3301      	adds	r3, #1
 80012ca:	61fb      	str	r3, [r7, #28]
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	2bfd      	cmp	r3, #253	; 0xfd
 80012d0:	d9dc      	bls.n	800128c <OV5640_Init+0x4c>
          }
        }
      }

      if (ret == OV5640_OK)
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d126      	bne.n	8001326 <OV5640_Init+0xe6>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 80012d8:	68b9      	ldr	r1, [r7, #8]
 80012da:	68f8      	ldr	r0, [r7, #12]
 80012dc:	f000 f9e0 	bl	80016a0 <OV5640_SetResolution>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <OV5640_Init+0xae>
        {
          ret = OV5640_ERROR;
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012ea:	61bb      	str	r3, [r7, #24]
 80012ec:	e01b      	b.n	8001326 <OV5640_Init+0xe6>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	68f8      	ldr	r0, [r7, #12]
 80012f2:	f000 f833 	bl	800135c <OV5640_SetPixelFormat>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d003      	beq.n	8001304 <OV5640_Init+0xc4>
        {
          ret = OV5640_ERROR;
 80012fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001300:	61bb      	str	r3, [r7, #24]
 8001302:	e010      	b.n	8001326 <OV5640_Init+0xe6>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(pObj, OV5640_POLARITY_PCLK_HIGH, OV5640_POLARITY_HREF_HIGH,
 8001304:	2300      	movs	r3, #0
 8001306:	2201      	movs	r2, #1
 8001308:	2101      	movs	r1, #1
 800130a:	68f8      	ldr	r0, [r7, #12]
 800130c:	f000 fb64 	bl	80019d8 <OV5640_SetPolarities>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <OV5640_Init+0xde>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 8001316:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800131a:	61bb      	str	r3, [r7, #24]
 800131c:	e003      	b.n	8001326 <OV5640_Init+0xe6>
        }
        else
        {
          pObj->IsInitialized = 1U;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	2201      	movs	r2, #1
 8001322:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
      }
    }
  }

  return ret;
 8001326:	69bb      	ldr	r3, [r7, #24]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3720      	adds	r7, #32
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	0800ff60 	.word	0x0800ff60

08001334 <OV5640_DeInit>:
  * @brief  De-initializes the camera sensor.
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV5640_DeInit(OV5640_Object_t *pObj)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized == 1U)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001342:	2b01      	cmp	r3, #1
 8001344:	d103      	bne.n	800134e <OV5640_DeInit+0x1a>
  {
    /* De-initialize camera sensor interface */
    pObj->IsInitialized = 0U;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return OV5640_OK;
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <OV5640_SetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_SetPixelFormat(OV5640_Object_t *pObj, uint32_t PixelFormat)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d00f      	beq.n	8001390 <OV5640_SetPixelFormat+0x34>
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	2b02      	cmp	r3, #2
 8001374:	d00c      	beq.n	8001390 <OV5640_SetPixelFormat+0x34>
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d009      	beq.n	8001390 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	2b07      	cmp	r3, #7
 8001380:	d006      	beq.n	8001390 <OV5640_SetPixelFormat+0x34>
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	2b08      	cmp	r3, #8
 8001386:	d003      	beq.n	8001390 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 8001388:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	e16a      	b.n	8001666 <OV5640_SetPixelFormat+0x30a>
  }
  else
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	3b01      	subs	r3, #1
 8001394:	2b07      	cmp	r3, #7
 8001396:	f200 80c3 	bhi.w	8001520 <OV5640_SetPixelFormat+0x1c4>
 800139a:	a201      	add	r2, pc, #4	; (adr r2, 80013a0 <OV5640_SetPixelFormat+0x44>)
 800139c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a0:	08001419 	.word	0x08001419
 80013a4:	080013c1 	.word	0x080013c1
 80013a8:	08001521 	.word	0x08001521
 80013ac:	08001521 	.word	0x08001521
 80013b0:	08001521 	.word	0x08001521
 80013b4:	08001521 	.word	0x08001521
 80013b8:	08001471 	.word	0x08001471
 80013bc:	080014c9 	.word	0x080014c9
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 80013c0:	2300      	movs	r3, #0
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	e024      	b.n	8001410 <OV5640_SetPixelFormat+0xb4>
        {
          if (ret != OV5640_ERROR)
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013cc:	d01d      	beq.n	800140a <OV5640_SetPixelFormat+0xae>
          {
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 80013ce:	4aa8      	ldr	r2, [pc, #672]	; (8001670 <OV5640_SetPixelFormat+0x314>)
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	885b      	ldrh	r3, [r3, #2]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f103 0018 	add.w	r0, r3, #24
 80013e2:	4aa3      	ldr	r2, [pc, #652]	; (8001670 <OV5640_SetPixelFormat+0x314>)
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80013ea:	f107 020f 	add.w	r2, r7, #15
 80013ee:	2301      	movs	r3, #1
 80013f0:	f001 fb6e 	bl	8002ad0 <ov5640_write_reg>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <OV5640_SetPixelFormat+0xa6>
            {
              ret = OV5640_ERROR;
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	e003      	b.n	800140a <OV5640_SetPixelFormat+0xae>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001402:	2101      	movs	r1, #1
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f001 fb00 	bl	8002a0a <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	3301      	adds	r3, #1
 800140e:	613b      	str	r3, [r7, #16]
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d9d7      	bls.n	80013c6 <OV5640_SetPixelFormat+0x6a>
            }
          }
        }
        break;
 8001416:	e0af      	b.n	8001578 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8001418:	2300      	movs	r3, #0
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	e024      	b.n	8001468 <OV5640_SetPixelFormat+0x10c>
        {
          if (ret != OV5640_ERROR)
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001424:	d01d      	beq.n	8001462 <OV5640_SetPixelFormat+0x106>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8001426:	4a93      	ldr	r2, [pc, #588]	; (8001674 <OV5640_SetPixelFormat+0x318>)
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	885b      	ldrh	r3, [r3, #2]
 8001430:	b2db      	uxtb	r3, r3
 8001432:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f103 0018 	add.w	r0, r3, #24
 800143a:	4a8e      	ldr	r2, [pc, #568]	; (8001674 <OV5640_SetPixelFormat+0x318>)
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001442:	f107 020f 	add.w	r2, r7, #15
 8001446:	2301      	movs	r3, #1
 8001448:	f001 fb42 	bl	8002ad0 <ov5640_write_reg>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <OV5640_SetPixelFormat+0xfe>
            {
              ret = OV5640_ERROR;
 8001452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	e003      	b.n	8001462 <OV5640_SetPixelFormat+0x106>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 800145a:	2101      	movs	r1, #1
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f001 fad4 	bl	8002a0a <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	3301      	adds	r3, #1
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d9d7      	bls.n	800141e <OV5640_SetPixelFormat+0xc2>
            }
          }
        }
        break;
 800146e:	e083      	b.n	8001578 <OV5640_SetPixelFormat+0x21c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8001470:	2300      	movs	r3, #0
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	e024      	b.n	80014c0 <OV5640_SetPixelFormat+0x164>
        {
          if (ret != OV5640_ERROR)
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800147c:	d01d      	beq.n	80014ba <OV5640_SetPixelFormat+0x15e>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 800147e:	4a7e      	ldr	r2, [pc, #504]	; (8001678 <OV5640_SetPixelFormat+0x31c>)
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	885b      	ldrh	r3, [r3, #2]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f103 0018 	add.w	r0, r3, #24
 8001492:	4a79      	ldr	r2, [pc, #484]	; (8001678 <OV5640_SetPixelFormat+0x31c>)
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800149a:	f107 020f 	add.w	r2, r7, #15
 800149e:	2301      	movs	r3, #1
 80014a0:	f001 fb16 	bl	8002ad0 <ov5640_write_reg>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <OV5640_SetPixelFormat+0x156>
            {
              ret = OV5640_ERROR;
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	e003      	b.n	80014ba <OV5640_SetPixelFormat+0x15e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 80014b2:	2101      	movs	r1, #1
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f001 faa8 	bl	8002a0a <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	3301      	adds	r3, #1
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d9d7      	bls.n	8001476 <OV5640_SetPixelFormat+0x11a>
            }
          }
        }
        break;
 80014c6:	e057      	b.n	8001578 <OV5640_SetPixelFormat+0x21c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 80014c8:	2300      	movs	r3, #0
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	e024      	b.n	8001518 <OV5640_SetPixelFormat+0x1bc>
        {
          if (ret != OV5640_ERROR)
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014d4:	d01d      	beq.n	8001512 <OV5640_SetPixelFormat+0x1b6>
          {
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 80014d6:	4a69      	ldr	r2, [pc, #420]	; (800167c <OV5640_SetPixelFormat+0x320>)
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	885b      	ldrh	r3, [r3, #2]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f103 0018 	add.w	r0, r3, #24
 80014ea:	4a64      	ldr	r2, [pc, #400]	; (800167c <OV5640_SetPixelFormat+0x320>)
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80014f2:	f107 020f 	add.w	r2, r7, #15
 80014f6:	2301      	movs	r3, #1
 80014f8:	f001 faea 	bl	8002ad0 <ov5640_write_reg>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <OV5640_SetPixelFormat+0x1ae>
            {
              ret = OV5640_ERROR;
 8001502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	e003      	b.n	8001512 <OV5640_SetPixelFormat+0x1b6>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 800150a:	2101      	movs	r1, #1
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f001 fa7c 	bl	8002a0a <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	3301      	adds	r3, #1
 8001516:	613b      	str	r3, [r7, #16]
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d9d7      	bls.n	80014ce <OV5640_SetPixelFormat+0x172>
            }
          }
        }
        break;
 800151e:	e02b      	b.n	8001578 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8001520:	2300      	movs	r3, #0
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	e024      	b.n	8001570 <OV5640_SetPixelFormat+0x214>
        {
          if (ret != OV5640_ERROR)
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800152c:	d01d      	beq.n	800156a <OV5640_SetPixelFormat+0x20e>
          {
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 800152e:	4a54      	ldr	r2, [pc, #336]	; (8001680 <OV5640_SetPixelFormat+0x324>)
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	885b      	ldrh	r3, [r3, #2]
 8001538:	b2db      	uxtb	r3, r3
 800153a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f103 0018 	add.w	r0, r3, #24
 8001542:	4a4f      	ldr	r2, [pc, #316]	; (8001680 <OV5640_SetPixelFormat+0x324>)
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800154a:	f107 020f 	add.w	r2, r7, #15
 800154e:	2301      	movs	r3, #1
 8001550:	f001 fabe 	bl	8002ad0 <ov5640_write_reg>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <OV5640_SetPixelFormat+0x206>
            {
              ret = OV5640_ERROR;
 800155a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	e003      	b.n	800156a <OV5640_SetPixelFormat+0x20e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001562:	2101      	movs	r1, #1
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f001 fa50 	bl	8002a0a <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	3301      	adds	r3, #1
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d9d7      	bls.n	8001526 <OV5640_SetPixelFormat+0x1ca>
            }
          }
        }
        break;
 8001576:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	2b08      	cmp	r3, #8
 800157c:	d173      	bne.n	8001666 <OV5640_SetPixelFormat+0x30a>
    {
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f103 0018 	add.w	r0, r3, #24
 8001584:	f107 020f 	add.w	r2, r7, #15
 8001588:	2301      	movs	r3, #1
 800158a:	f643 0121 	movw	r1, #14369	; 0x3821
 800158e:	f001 fa88 	bl	8002aa2 <ov5640_read_reg>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d003      	beq.n	80015a0 <OV5640_SetPixelFormat+0x244>
      {
        ret = OV5640_ERROR;
 8001598:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800159c:	617b      	str	r3, [r7, #20]
 800159e:	e062      	b.n	8001666 <OV5640_SetPixelFormat+0x30a>
      }
      else
      {
        tmp |= (1 << 5);
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
 80015a2:	f043 0320 	orr.w	r3, r3, #32
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	73fb      	strb	r3, [r7, #15]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f103 0018 	add.w	r0, r3, #24
 80015b0:	f107 020f 	add.w	r2, r7, #15
 80015b4:	2301      	movs	r3, #1
 80015b6:	f643 0121 	movw	r1, #14369	; 0x3821
 80015ba:	f001 fa89 	bl	8002ad0 <ov5640_write_reg>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <OV5640_SetPixelFormat+0x270>
        {
          ret = OV5640_ERROR;
 80015c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	e04c      	b.n	8001666 <OV5640_SetPixelFormat+0x30a>
        }
        else
        {
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f103 0018 	add.w	r0, r3, #24
 80015d2:	f107 020f 	add.w	r2, r7, #15
 80015d6:	2301      	movs	r3, #1
 80015d8:	f243 0102 	movw	r1, #12290	; 0x3002
 80015dc:	f001 fa61 	bl	8002aa2 <ov5640_read_reg>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <OV5640_SetPixelFormat+0x292>
          {
            ret = OV5640_ERROR;
 80015e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	e03b      	b.n	8001666 <OV5640_SetPixelFormat+0x30a>
          }
          else
          {
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	f023 031c 	bic.w	r3, r3, #28
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f103 0018 	add.w	r0, r3, #24
 80015fe:	f107 020f 	add.w	r2, r7, #15
 8001602:	2301      	movs	r3, #1
 8001604:	f243 0102 	movw	r1, #12290	; 0x3002
 8001608:	f001 fa62 	bl	8002ad0 <ov5640_write_reg>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <OV5640_SetPixelFormat+0x2be>
            {
              ret = OV5640_ERROR;
 8001612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	e025      	b.n	8001666 <OV5640_SetPixelFormat+0x30a>
            }
            else
            {
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f103 0018 	add.w	r0, r3, #24
 8001620:	f107 020f 	add.w	r2, r7, #15
 8001624:	2301      	movs	r3, #1
 8001626:	f243 0106 	movw	r1, #12294	; 0x3006
 800162a:	f001 fa3a 	bl	8002aa2 <ov5640_read_reg>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d003      	beq.n	800163c <OV5640_SetPixelFormat+0x2e0>
              {
                ret = OV5640_ERROR;
 8001634:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	e014      	b.n	8001666 <OV5640_SetPixelFormat+0x30a>
              }
              else
              {
                tmp |= ((1 << 5) | (1 << 3));
 800163c:	7bfb      	ldrb	r3, [r7, #15]
 800163e:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001642:	b2db      	uxtb	r3, r3
 8001644:	73fb      	strb	r3, [r7, #15]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f103 0018 	add.w	r0, r3, #24
 800164c:	f107 020f 	add.w	r2, r7, #15
 8001650:	2301      	movs	r3, #1
 8001652:	f243 0106 	movw	r1, #12294	; 0x3006
 8001656:	f001 fa3b 	bl	8002ad0 <ov5640_write_reg>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d002      	beq.n	8001666 <OV5640_SetPixelFormat+0x30a>
                {
                  ret = OV5640_ERROR;
 8001660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001664:	617b      	str	r3, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 8001666:	697b      	ldr	r3, [r7, #20]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	08010358 	.word	0x08010358
 8001674:	08010360 	.word	0x08010360
 8001678:	08010368 	.word	0x08010368
 800167c:	08010370 	.word	0x08010370
 8001680:	08010378 	.word	0x08010378

08001684 <OV5640_GetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_GetPixelFormat(OV5640_Object_t *pObj, uint32_t *PixelFormat)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(PixelFormat);

  return OV5640_ERROR;
 800168e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001692:	4618      	mov	r0, r3
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
	...

080016a0 <OV5640_SetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_SetResolution(OV5640_Object_t *pObj, uint32_t Resolution)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	2b04      	cmp	r3, #4
 80016b2:	d903      	bls.n	80016bc <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 80016b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016b8:	617b      	str	r3, [r7, #20]
 80016ba:	e0d8      	b.n	800186e <OV5640_SetResolution+0x1ce>
  }
  else
  {
    /* Initialize OV5640 */
    switch (Resolution)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	2b04      	cmp	r3, #4
 80016c0:	f200 80d1 	bhi.w	8001866 <OV5640_SetResolution+0x1c6>
 80016c4:	a201      	add	r2, pc, #4	; (adr r2, 80016cc <OV5640_SetResolution+0x2c>)
 80016c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ca:	bf00      	nop
 80016cc:	080016e1 	.word	0x080016e1
 80016d0:	0800172f 	.word	0x0800172f
 80016d4:	0800177d 	.word	0x0800177d
 80016d8:	080017cb 	.word	0x080017cb
 80016dc:	08001819 	.word	0x08001819
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 80016e0:	2300      	movs	r3, #0
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	e01f      	b.n	8001726 <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016ec:	d018      	beq.n	8001720 <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 80016ee:	4a62      	ldr	r2, [pc, #392]	; (8001878 <OV5640_SetResolution+0x1d8>)
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	885b      	ldrh	r3, [r3, #2]
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f103 0018 	add.w	r0, r3, #24
 8001702:	4a5d      	ldr	r2, [pc, #372]	; (8001878 <OV5640_SetResolution+0x1d8>)
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800170a:	f107 020f 	add.w	r2, r7, #15
 800170e:	2301      	movs	r3, #1
 8001710:	f001 f9de 	bl	8002ad0 <ov5640_write_reg>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d002      	beq.n	8001720 <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 800171a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800171e:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	3301      	adds	r3, #1
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	2b03      	cmp	r3, #3
 800172a:	d9dc      	bls.n	80016e6 <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 800172c:	e09f      	b.n	800186e <OV5640_SetResolution+0x1ce>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	e01f      	b.n	8001774 <OV5640_SetResolution+0xd4>
        {
          if (ret != OV5640_ERROR)
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800173a:	d018      	beq.n	800176e <OV5640_SetResolution+0xce>
          {
            tmp = (uint8_t)OV5640_QVGA[index][1];
 800173c:	4a4f      	ldr	r2, [pc, #316]	; (800187c <OV5640_SetResolution+0x1dc>)
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	885b      	ldrh	r3, [r3, #2]
 8001746:	b2db      	uxtb	r3, r3
 8001748:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f103 0018 	add.w	r0, r3, #24
 8001750:	4a4a      	ldr	r2, [pc, #296]	; (800187c <OV5640_SetResolution+0x1dc>)
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001758:	f107 020f 	add.w	r2, r7, #15
 800175c:	2301      	movs	r3, #1
 800175e:	f001 f9b7 	bl	8002ad0 <ov5640_write_reg>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d002      	beq.n	800176e <OV5640_SetResolution+0xce>
            {
              ret = OV5640_ERROR;
 8001768:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800176c:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	3301      	adds	r3, #1
 8001772:	613b      	str	r3, [r7, #16]
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	2b03      	cmp	r3, #3
 8001778:	d9dc      	bls.n	8001734 <OV5640_SetResolution+0x94>
            }
          }
        }
        break;
 800177a:	e078      	b.n	800186e <OV5640_SetResolution+0x1ce>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 800177c:	2300      	movs	r3, #0
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	e01f      	b.n	80017c2 <OV5640_SetResolution+0x122>
        {
          if (ret != OV5640_ERROR)
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001788:	d018      	beq.n	80017bc <OV5640_SetResolution+0x11c>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 800178a:	4a3d      	ldr	r2, [pc, #244]	; (8001880 <OV5640_SetResolution+0x1e0>)
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	4413      	add	r3, r2
 8001792:	885b      	ldrh	r3, [r3, #2]
 8001794:	b2db      	uxtb	r3, r3
 8001796:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f103 0018 	add.w	r0, r3, #24
 800179e:	4a38      	ldr	r2, [pc, #224]	; (8001880 <OV5640_SetResolution+0x1e0>)
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80017a6:	f107 020f 	add.w	r2, r7, #15
 80017aa:	2301      	movs	r3, #1
 80017ac:	f001 f990 	bl	8002ad0 <ov5640_write_reg>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d002      	beq.n	80017bc <OV5640_SetResolution+0x11c>
            {
              ret = OV5640_ERROR;
 80017b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017ba:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	3301      	adds	r3, #1
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	2b03      	cmp	r3, #3
 80017c6:	d9dc      	bls.n	8001782 <OV5640_SetResolution+0xe2>
            }
          }
        }
        break;
 80017c8:	e051      	b.n	800186e <OV5640_SetResolution+0x1ce>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	e01f      	b.n	8001810 <OV5640_SetResolution+0x170>
        {
          if (ret != OV5640_ERROR)
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017d6:	d018      	beq.n	800180a <OV5640_SetResolution+0x16a>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 80017d8:	4a2a      	ldr	r2, [pc, #168]	; (8001884 <OV5640_SetResolution+0x1e4>)
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	885b      	ldrh	r3, [r3, #2]
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f103 0018 	add.w	r0, r3, #24
 80017ec:	4a25      	ldr	r2, [pc, #148]	; (8001884 <OV5640_SetResolution+0x1e4>)
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80017f4:	f107 020f 	add.w	r2, r7, #15
 80017f8:	2301      	movs	r3, #1
 80017fa:	f001 f969 	bl	8002ad0 <ov5640_write_reg>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d002      	beq.n	800180a <OV5640_SetResolution+0x16a>
            {
              ret = OV5640_ERROR;
 8001804:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001808:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	3301      	adds	r3, #1
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	2b03      	cmp	r3, #3
 8001814:	d9dc      	bls.n	80017d0 <OV5640_SetResolution+0x130>
            }
          }
        }
        break;
 8001816:	e02a      	b.n	800186e <OV5640_SetResolution+0x1ce>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8001818:	2300      	movs	r3, #0
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	e01f      	b.n	800185e <OV5640_SetResolution+0x1be>
        {
          if (ret != OV5640_ERROR)
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001824:	d018      	beq.n	8001858 <OV5640_SetResolution+0x1b8>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8001826:	4a18      	ldr	r2, [pc, #96]	; (8001888 <OV5640_SetResolution+0x1e8>)
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	885b      	ldrh	r3, [r3, #2]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f103 0018 	add.w	r0, r3, #24
 800183a:	4a13      	ldr	r2, [pc, #76]	; (8001888 <OV5640_SetResolution+0x1e8>)
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001842:	f107 020f 	add.w	r2, r7, #15
 8001846:	2301      	movs	r3, #1
 8001848:	f001 f942 	bl	8002ad0 <ov5640_write_reg>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d002      	beq.n	8001858 <OV5640_SetResolution+0x1b8>
            {
              ret = OV5640_ERROR;
 8001852:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001856:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	3301      	adds	r3, #1
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	2b03      	cmp	r3, #3
 8001862:	d9dc      	bls.n	800181e <OV5640_SetResolution+0x17e>
            }
          }
        }
        break;
 8001864:	e003      	b.n	800186e <OV5640_SetResolution+0x1ce>
      default:
        ret = OV5640_ERROR;
 8001866:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800186a:	617b      	str	r3, [r7, #20]
        break;
 800186c:	bf00      	nop
    }
  }

  return ret;
 800186e:	697b      	ldr	r3, [r7, #20]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	08010380 	.word	0x08010380
 800187c:	08010390 	.word	0x08010390
 8001880:	080103a0 	.word	0x080103a0
 8001884:	080103b0 	.word	0x080103b0
 8001888:	080103c0 	.word	0x080103c0

0800188c <OV5640_GetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_GetResolution(OV5640_Object_t *pObj, uint32_t *Resolution)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t x_size;
  uint16_t y_size;
  uint8_t tmp;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f103 0018 	add.w	r0, r3, #24
 800189c:	f107 020f 	add.w	r2, r7, #15
 80018a0:	2301      	movs	r3, #1
 80018a2:	f643 0108 	movw	r1, #14344	; 0x3808
 80018a6:	f001 f8fc 	bl	8002aa2 <ov5640_read_reg>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <OV5640_GetResolution+0x2c>
  {
    ret = OV5640_ERROR;
 80018b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	e08a      	b.n	80019ce <OV5640_GetResolution+0x142>
  }
  else
  {
    x_size = (uint16_t)tmp << 8U;
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	021b      	lsls	r3, r3, #8
 80018be:	827b      	strh	r3, [r7, #18]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f103 0018 	add.w	r0, r3, #24
 80018c6:	f107 020f 	add.w	r2, r7, #15
 80018ca:	2301      	movs	r3, #1
 80018cc:	f643 0109 	movw	r1, #14345	; 0x3809
 80018d0:	f001 f8e7 	bl	8002aa2 <ov5640_read_reg>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <OV5640_GetResolution+0x56>
    {
      ret = OV5640_ERROR;
 80018da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	e075      	b.n	80019ce <OV5640_GetResolution+0x142>
    }
    else
    {
      x_size |= tmp;
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	8a7b      	ldrh	r3, [r7, #18]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	827b      	strh	r3, [r7, #18]

      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f103 0018 	add.w	r0, r3, #24
 80018f2:	f107 020f 	add.w	r2, r7, #15
 80018f6:	2301      	movs	r3, #1
 80018f8:	f643 010a 	movw	r1, #14346	; 0x380a
 80018fc:	f001 f8d1 	bl	8002aa2 <ov5640_read_reg>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d003      	beq.n	800190e <OV5640_GetResolution+0x82>
      {
        ret = OV5640_ERROR;
 8001906:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	e05f      	b.n	80019ce <OV5640_GetResolution+0x142>
      }
      else
      {
        y_size = (uint16_t)tmp << 8U;
 800190e:	7bfb      	ldrb	r3, [r7, #15]
 8001910:	b29b      	uxth	r3, r3
 8001912:	021b      	lsls	r3, r3, #8
 8001914:	823b      	strh	r3, [r7, #16]
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f103 0018 	add.w	r0, r3, #24
 800191c:	f107 020f 	add.w	r2, r7, #15
 8001920:	2301      	movs	r3, #1
 8001922:	f643 010b 	movw	r1, #14347	; 0x380b
 8001926:	f001 f8bc 	bl	8002aa2 <ov5640_read_reg>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d003      	beq.n	8001938 <OV5640_GetResolution+0xac>
        {
          ret = OV5640_ERROR;
 8001930:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001934:	617b      	str	r3, [r7, #20]
 8001936:	e04a      	b.n	80019ce <OV5640_GetResolution+0x142>
        }
        else
        {
          y_size |= tmp;
 8001938:	7bfb      	ldrb	r3, [r7, #15]
 800193a:	b29a      	uxth	r2, r3
 800193c:	8a3b      	ldrh	r3, [r7, #16]
 800193e:	4313      	orrs	r3, r2
 8001940:	823b      	strh	r3, [r7, #16]

          if ((x_size == 800U) && (y_size == 480U))
 8001942:	8a7b      	ldrh	r3, [r7, #18]
 8001944:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001948:	d109      	bne.n	800195e <OV5640_GetResolution+0xd2>
 800194a:	8a3b      	ldrh	r3, [r7, #16]
 800194c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001950:	d105      	bne.n	800195e <OV5640_GetResolution+0xd2>
          {
            *Resolution = OV5640_R800x480;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	2204      	movs	r2, #4
 8001956:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	e037      	b.n	80019ce <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 640U) && (y_size == 480U))
 800195e:	8a7b      	ldrh	r3, [r7, #18]
 8001960:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8001964:	d109      	bne.n	800197a <OV5640_GetResolution+0xee>
 8001966:	8a3b      	ldrh	r3, [r7, #16]
 8001968:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800196c:	d105      	bne.n	800197a <OV5640_GetResolution+0xee>
          {
            *Resolution = OV5640_R640x480;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	2203      	movs	r2, #3
 8001972:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	e029      	b.n	80019ce <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 480U) && (y_size == 272U))
 800197a:	8a7b      	ldrh	r3, [r7, #18]
 800197c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001980:	d109      	bne.n	8001996 <OV5640_GetResolution+0x10a>
 8001982:	8a3b      	ldrh	r3, [r7, #16]
 8001984:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8001988:	d105      	bne.n	8001996 <OV5640_GetResolution+0x10a>
          {
            *Resolution = OV5640_R480x272;
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	2202      	movs	r2, #2
 800198e:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	e01b      	b.n	80019ce <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 320U) && (y_size == 240U))
 8001996:	8a7b      	ldrh	r3, [r7, #18]
 8001998:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800199c:	d108      	bne.n	80019b0 <OV5640_GetResolution+0x124>
 800199e:	8a3b      	ldrh	r3, [r7, #16]
 80019a0:	2bf0      	cmp	r3, #240	; 0xf0
 80019a2:	d105      	bne.n	80019b0 <OV5640_GetResolution+0x124>
          {
            *Resolution = OV5640_R320x240;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	2201      	movs	r2, #1
 80019a8:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	e00e      	b.n	80019ce <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 160U) && (y_size == 120U))
 80019b0:	8a7b      	ldrh	r3, [r7, #18]
 80019b2:	2ba0      	cmp	r3, #160	; 0xa0
 80019b4:	d108      	bne.n	80019c8 <OV5640_GetResolution+0x13c>
 80019b6:	8a3b      	ldrh	r3, [r7, #16]
 80019b8:	2b78      	cmp	r3, #120	; 0x78
 80019ba:	d105      	bne.n	80019c8 <OV5640_GetResolution+0x13c>
          {
            *Resolution = OV5640_R160x120;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
 80019c6:	e002      	b.n	80019ce <OV5640_GetResolution+0x142>
          }
          else
          {
            ret = OV5640_ERROR;
 80019c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019cc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 80019ce:	697b      	ldr	r3, [r7, #20]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <OV5640_SetPolarities>:
  * @param  VsyncPolarity Polarity of the Vsync
  * @retval Component status
  */
int32_t OV5640_SetPolarities(OV5640_Object_t *pObj, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
 80019e4:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]

  if ((pObj == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d011      	beq.n	8001a14 <OV5640_SetPolarities+0x3c>
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d002      	beq.n	80019fc <OV5640_SetPolarities+0x24>
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d10b      	bne.n	8001a14 <OV5640_SetPolarities+0x3c>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d002      	beq.n	8001a08 <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d105      	bne.n	8001a14 <OV5640_SetPolarities+0x3c>
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d006      	beq.n	8001a1c <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 8001a14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a18:	617b      	str	r3, [r7, #20]
 8001a1a:	e01e      	b.n	8001a5a <OV5640_SetPolarities+0x82>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	015b      	lsls	r3, r3, #5
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	4313      	orrs	r3, r2
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	74fb      	strb	r3, [r7, #19]

    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f103 0018 	add.w	r0, r3, #24
 8001a40:	f107 0213 	add.w	r2, r7, #19
 8001a44:	2301      	movs	r3, #1
 8001a46:	f244 7140 	movw	r1, #18240	; 0x4740
 8001a4a:	f001 f841 	bl	8002ad0 <ov5640_write_reg>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d002      	beq.n	8001a5a <OV5640_SetPolarities+0x82>
    {
      ret = OV5640_ERROR;
 8001a54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a58:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8001a5a:	697b      	ldr	r3, [r7, #20]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <OV5640_ReadID>:
  * @param  pObj  pointer to component object
  * @param  Id    pointer to component ID
  * @retval Component status
  */
int32_t OV5640_ReadID(OV5640_Object_t *pObj, uint32_t *Id)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  /* Initialize I2C */
  pObj->IO.Init();
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4798      	blx	r3

  /* Prepare the camera to be configured */
  tmp = 0x80;
 8001a74:	2380      	movs	r3, #128	; 0x80
 8001a76:	72fb      	strb	r3, [r7, #11]
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f103 0018 	add.w	r0, r3, #24
 8001a7e:	f107 020b 	add.w	r2, r7, #11
 8001a82:	2301      	movs	r3, #1
 8001a84:	f243 0108 	movw	r1, #12296	; 0x3008
 8001a88:	f001 f822 	bl	8002ad0 <ov5640_write_reg>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <OV5640_ReadID+0x36>
  {
    ret = OV5640_ERROR;
 8001a92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	e032      	b.n	8001b00 <OV5640_ReadID+0x9c>
  }
  else
  {
    (void)OV5640_Delay(pObj, 500);
 8001a9a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 ffb3 	bl	8002a0a <OV5640_Delay>

    if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f103 0018 	add.w	r0, r3, #24
 8001aaa:	f107 020b 	add.w	r2, r7, #11
 8001aae:	2301      	movs	r3, #1
 8001ab0:	f243 010a 	movw	r1, #12298	; 0x300a
 8001ab4:	f000 fff5 	bl	8002aa2 <ov5640_read_reg>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <OV5640_ReadID+0x62>
    {
      ret = OV5640_ERROR;
 8001abe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	e01c      	b.n	8001b00 <OV5640_ReadID+0x9c>
    }
    else
    {
      *Id = (uint32_t)tmp << 8U;
 8001ac6:	7afb      	ldrb	r3, [r7, #11]
 8001ac8:	021a      	lsls	r2, r3, #8
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	601a      	str	r2, [r3, #0]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f103 0018 	add.w	r0, r3, #24
 8001ad4:	f107 020b 	add.w	r2, r7, #11
 8001ad8:	2301      	movs	r3, #1
 8001ada:	f243 010b 	movw	r1, #12299	; 0x300b
 8001ade:	f000 ffe0 	bl	8002aa2 <ov5640_read_reg>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d003      	beq.n	8001af0 <OV5640_ReadID+0x8c>
      {
        ret = OV5640_ERROR;
 8001ae8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	e007      	b.n	8001b00 <OV5640_ReadID+0x9c>
      }
      else
      {
        *Id |= tmp;
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	7afa      	ldrb	r2, [r7, #11]
 8001af6:	431a      	orrs	r2, r3
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	601a      	str	r2, [r3, #0]
        ret = OV5640_OK;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Component status */
  return ret;
 8001b00:	68fb      	ldr	r3, [r7, #12]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <OV5640_GetCapabilities>:
  * @param  pObj          pointer to component object
  * @param  Capabilities  pointer to component Capabilities
  * @retval Component status
  */
int32_t OV5640_GetCapabilities(OV5640_Object_t *pObj, OV5640_Capabilities_t *Capabilities)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b085      	sub	sp, #20
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d103      	bne.n	8001b22 <OV5640_GetCapabilities+0x18>
  {
    ret = OV5640_ERROR;
 8001b1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	e01f      	b.n	8001b62 <OV5640_GetCapabilities+0x58>
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	2201      	movs	r2, #1
 8001b26:	60da      	str	r2, [r3, #12]
    Capabilities->Config_Contrast      = 1;
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	615a      	str	r2, [r3, #20]
    Capabilities->Config_HueDegree     = 1;
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	2201      	movs	r2, #1
 8001b32:	619a      	str	r2, [r3, #24]
    Capabilities->Config_LightMode     = 1;
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	2201      	movs	r2, #1
 8001b38:	605a      	str	r2, [r3, #4]
    Capabilities->Config_MirrorFlip    = 1;
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	61da      	str	r2, [r3, #28]
    Capabilities->Config_NightMode     = 1;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	2201      	movs	r2, #1
 8001b44:	625a      	str	r2, [r3, #36]	; 0x24
    Capabilities->Config_Resolution    = 1;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	601a      	str	r2, [r3, #0]
    Capabilities->Config_Saturation    = 1;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	611a      	str	r2, [r3, #16]
    Capabilities->Config_SpecialEffect = 1;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	2201      	movs	r2, #1
 8001b56:	609a      	str	r2, [r3, #8]
    Capabilities->Config_Zoom          = 1;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	621a      	str	r2, [r3, #32]

    ret = OV5640_OK;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001b62:	68fb      	ldr	r3, [r7, #12]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <OV5640_SetLightMode>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetLightMode(OV5640_Object_t *pObj, uint32_t LightMode)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
    {OV5640_AWB_G_GAIN_LSB, 0x00},
    {OV5640_AWB_B_GAIN_MSB, 0x04},
    {OV5640_AWB_B_GAIN_LSB, 0xF3},
  };

  tmp = 0x00;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f103 0018 	add.w	r0, r3, #24
 8001b84:	f107 020f 	add.w	r2, r7, #15
 8001b88:	2301      	movs	r3, #1
 8001b8a:	f243 4106 	movw	r1, #13318	; 0x3406
 8001b8e:	f000 ff9f 	bl	8002ad0 <ov5640_write_reg>
 8001b92:	6178      	str	r0, [r7, #20]
  if (ret == OV5640_OK)
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d10c      	bne.n	8001bb4 <OV5640_SetLightMode+0x44>
  {
    tmp = 0x46;
 8001b9a:	2346      	movs	r3, #70	; 0x46
 8001b9c:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f103 0018 	add.w	r0, r3, #24
 8001ba4:	f107 020f 	add.w	r2, r7, #15
 8001ba8:	2301      	movs	r3, #1
 8001baa:	f245 1190 	movw	r1, #20880	; 0x5190
 8001bae:	f000 ff8f 	bl	8002ad0 <ov5640_write_reg>
 8001bb2:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10c      	bne.n	8001bd4 <OV5640_SetLightMode+0x64>
  {
    tmp = 0xF8;
 8001bba:	23f8      	movs	r3, #248	; 0xf8
 8001bbc:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f103 0018 	add.w	r0, r3, #24
 8001bc4:	f107 020f 	add.w	r2, r7, #15
 8001bc8:	2301      	movs	r3, #1
 8001bca:	f245 1191 	movw	r1, #20881	; 0x5191
 8001bce:	f000 ff7f 	bl	8002ad0 <ov5640_write_reg>
 8001bd2:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10c      	bne.n	8001bf4 <OV5640_SetLightMode+0x84>
  {
    tmp = 0x04;
 8001bda:	2304      	movs	r3, #4
 8001bdc:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f103 0018 	add.w	r0, r3, #24
 8001be4:	f107 020f 	add.w	r2, r7, #15
 8001be8:	2301      	movs	r3, #1
 8001bea:	f245 1192 	movw	r1, #20882	; 0x5192
 8001bee:	f000 ff6f 	bl	8002ad0 <ov5640_write_reg>
 8001bf2:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f040 80db 	bne.w	8001db2 <OV5640_SetLightMode+0x242>
  {
    switch (LightMode)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	2b07      	cmp	r3, #7
 8001c02:	f200 80af 	bhi.w	8001d64 <OV5640_SetLightMode+0x1f4>
 8001c06:	a201      	add	r2, pc, #4	; (adr r2, 8001c0c <OV5640_SetLightMode+0x9c>)
 8001c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c0c:	08001c2d 	.word	0x08001c2d
 8001c10:	08001c7b 	.word	0x08001c7b
 8001c14:	08001d65 	.word	0x08001d65
 8001c18:	08001d17 	.word	0x08001d17
 8001c1c:	08001d65 	.word	0x08001d65
 8001c20:	08001d65 	.word	0x08001d65
 8001c24:	08001d65 	.word	0x08001d65
 8001c28:	08001cc9 	.word	0x08001cc9
    {
      case OV5640_LIGHT_SUNNY:
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	613b      	str	r3, [r7, #16]
 8001c30:	e01f      	b.n	8001c72 <OV5640_SetLightMode+0x102>
        {
          if (ret != OV5640_ERROR)
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c38:	d018      	beq.n	8001c6c <OV5640_SetLightMode+0xfc>
          {
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 8001c3a:	4a61      	ldr	r2, [pc, #388]	; (8001dc0 <OV5640_SetLightMode+0x250>)
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	885b      	ldrh	r3, [r3, #2]
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f103 0018 	add.w	r0, r3, #24
 8001c4e:	4a5c      	ldr	r2, [pc, #368]	; (8001dc0 <OV5640_SetLightMode+0x250>)
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001c56:	f107 020f 	add.w	r2, r7, #15
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	f000 ff38 	bl	8002ad0 <ov5640_write_reg>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d002      	beq.n	8001c6c <OV5640_SetLightMode+0xfc>
            {
              ret = OV5640_ERROR;
 8001c66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c6a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	2b06      	cmp	r3, #6
 8001c76:	d9dc      	bls.n	8001c32 <OV5640_SetLightMode+0xc2>
            }
          }
        }
        break;
 8001c78:	e09c      	b.n	8001db4 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_OFFICE:
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	613b      	str	r3, [r7, #16]
 8001c7e:	e01f      	b.n	8001cc0 <OV5640_SetLightMode+0x150>
        {
          if (ret != OV5640_ERROR)
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c86:	d018      	beq.n	8001cba <OV5640_SetLightMode+0x14a>
          {
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 8001c88:	4a4e      	ldr	r2, [pc, #312]	; (8001dc4 <OV5640_SetLightMode+0x254>)
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	885b      	ldrh	r3, [r3, #2]
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f103 0018 	add.w	r0, r3, #24
 8001c9c:	4a49      	ldr	r2, [pc, #292]	; (8001dc4 <OV5640_SetLightMode+0x254>)
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001ca4:	f107 020f 	add.w	r2, r7, #15
 8001ca8:	2301      	movs	r3, #1
 8001caa:	f000 ff11 	bl	8002ad0 <ov5640_write_reg>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d002      	beq.n	8001cba <OV5640_SetLightMode+0x14a>
            {
              ret = OV5640_ERROR;
 8001cb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cb8:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	2b06      	cmp	r3, #6
 8001cc4:	d9dc      	bls.n	8001c80 <OV5640_SetLightMode+0x110>
            }
          }
        }
        break;
 8001cc6:	e075      	b.n	8001db4 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_CLOUDY:
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8001cc8:	2300      	movs	r3, #0
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	e01f      	b.n	8001d0e <OV5640_SetLightMode+0x19e>
        {
          if (ret != OV5640_ERROR)
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cd4:	d018      	beq.n	8001d08 <OV5640_SetLightMode+0x198>
          {
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8001cd6:	4a3c      	ldr	r2, [pc, #240]	; (8001dc8 <OV5640_SetLightMode+0x258>)
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	885b      	ldrh	r3, [r3, #2]
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f103 0018 	add.w	r0, r3, #24
 8001cea:	4a37      	ldr	r2, [pc, #220]	; (8001dc8 <OV5640_SetLightMode+0x258>)
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001cf2:	f107 020f 	add.w	r2, r7, #15
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	f000 feea 	bl	8002ad0 <ov5640_write_reg>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d002      	beq.n	8001d08 <OV5640_SetLightMode+0x198>
            {
              ret = OV5640_ERROR;
 8001d02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d06:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	2b06      	cmp	r3, #6
 8001d12:	d9dc      	bls.n	8001cce <OV5640_SetLightMode+0x15e>
            }
          }
        }
        break;
 8001d14:	e04e      	b.n	8001db4 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_HOME:
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8001d16:	2300      	movs	r3, #0
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	e01f      	b.n	8001d5c <OV5640_SetLightMode+0x1ec>
        {
          if (ret != OV5640_ERROR)
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d22:	d018      	beq.n	8001d56 <OV5640_SetLightMode+0x1e6>
          {
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8001d24:	4a29      	ldr	r2, [pc, #164]	; (8001dcc <OV5640_SetLightMode+0x25c>)
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	885b      	ldrh	r3, [r3, #2]
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f103 0018 	add.w	r0, r3, #24
 8001d38:	4a24      	ldr	r2, [pc, #144]	; (8001dcc <OV5640_SetLightMode+0x25c>)
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001d40:	f107 020f 	add.w	r2, r7, #15
 8001d44:	2301      	movs	r3, #1
 8001d46:	f000 fec3 	bl	8002ad0 <ov5640_write_reg>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d002      	beq.n	8001d56 <OV5640_SetLightMode+0x1e6>
            {
              ret = OV5640_ERROR;
 8001d50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d54:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	2b06      	cmp	r3, #6
 8001d60:	d9dc      	bls.n	8001d1c <OV5640_SetLightMode+0x1ac>
            }
          }
        }
        break;
 8001d62:	e027      	b.n	8001db4 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_AUTO:
      default :
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8001d64:	2300      	movs	r3, #0
 8001d66:	613b      	str	r3, [r7, #16]
 8001d68:	e01f      	b.n	8001daa <OV5640_SetLightMode+0x23a>
        {
          if (ret != OV5640_ERROR)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d70:	d018      	beq.n	8001da4 <OV5640_SetLightMode+0x234>
          {
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 8001d72:	4a17      	ldr	r2, [pc, #92]	; (8001dd0 <OV5640_SetLightMode+0x260>)
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	885b      	ldrh	r3, [r3, #2]
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f103 0018 	add.w	r0, r3, #24
 8001d86:	4a12      	ldr	r2, [pc, #72]	; (8001dd0 <OV5640_SetLightMode+0x260>)
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001d8e:	f107 020f 	add.w	r2, r7, #15
 8001d92:	2301      	movs	r3, #1
 8001d94:	f000 fe9c 	bl	8002ad0 <ov5640_write_reg>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <OV5640_SetLightMode+0x234>
            {
              ret = OV5640_ERROR;
 8001d9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001da2:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	3301      	adds	r3, #1
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	2b06      	cmp	r3, #6
 8001dae:	d9dc      	bls.n	8001d6a <OV5640_SetLightMode+0x1fa>
            }
          }
        }
        break;
 8001db0:	e000      	b.n	8001db4 <OV5640_SetLightMode+0x244>
    }
  }
 8001db2:	bf00      	nop
  return ret;
 8001db4:	697b      	ldr	r3, [r7, #20]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	080103d0 	.word	0x080103d0
 8001dc4:	080103ec 	.word	0x080103ec
 8001dc8:	08010408 	.word	0x08010408
 8001dcc:	08010424 	.word	0x08010424
 8001dd0:	08010440 	.word	0x08010440

08001dd4 <OV5640_SetColorEffect>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetColorEffect(OV5640_Object_t *pObj, uint32_t Effect)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  switch (Effect)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	3b01      	subs	r3, #1
 8001de2:	2b1f      	cmp	r3, #31
 8001de4:	f200 81c0 	bhi.w	8002168 <OV5640_SetColorEffect+0x394>
 8001de8:	a201      	add	r2, pc, #4	; (adr r2, 8001df0 <OV5640_SetColorEffect+0x1c>)
 8001dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dee:	bf00      	nop
 8001df0:	08001e71 	.word	0x08001e71
 8001df4:	08001efb 	.word	0x08001efb
 8001df8:	08002169 	.word	0x08002169
 8001dfc:	08001f85 	.word	0x08001f85
 8001e00:	08002169 	.word	0x08002169
 8001e04:	08002169 	.word	0x08002169
 8001e08:	08002169 	.word	0x08002169
 8001e0c:	0800200f 	.word	0x0800200f
 8001e10:	08002169 	.word	0x08002169
 8001e14:	08002169 	.word	0x08002169
 8001e18:	08002169 	.word	0x08002169
 8001e1c:	08002169 	.word	0x08002169
 8001e20:	08002169 	.word	0x08002169
 8001e24:	08002169 	.word	0x08002169
 8001e28:	08002169 	.word	0x08002169
 8001e2c:	08002099 	.word	0x08002099
 8001e30:	08002169 	.word	0x08002169
 8001e34:	08002169 	.word	0x08002169
 8001e38:	08002169 	.word	0x08002169
 8001e3c:	08002169 	.word	0x08002169
 8001e40:	08002169 	.word	0x08002169
 8001e44:	08002169 	.word	0x08002169
 8001e48:	08002169 	.word	0x08002169
 8001e4c:	08002169 	.word	0x08002169
 8001e50:	08002169 	.word	0x08002169
 8001e54:	08002169 	.word	0x08002169
 8001e58:	08002169 	.word	0x08002169
 8001e5c:	08002169 	.word	0x08002169
 8001e60:	08002169 	.word	0x08002169
 8001e64:	08002169 	.word	0x08002169
 8001e68:	08002169 	.word	0x08002169
 8001e6c:	08002121 	.word	0x08002121
  {
    case OV5640_COLOR_EFFECT_BLUE:
      tmp = 0xFF;
 8001e70:	23ff      	movs	r3, #255	; 0xff
 8001e72:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f103 0018 	add.w	r0, r3, #24
 8001e7a:	f107 020b 	add.w	r2, r7, #11
 8001e7e:	2301      	movs	r3, #1
 8001e80:	f245 0101 	movw	r1, #20481	; 0x5001
 8001e84:	f000 fe24 	bl	8002ad0 <ov5640_write_reg>
 8001e88:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10c      	bne.n	8001eaa <OV5640_SetColorEffect+0xd6>
      {
        tmp = 0x18;
 8001e90:	2318      	movs	r3, #24
 8001e92:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f103 0018 	add.w	r0, r3, #24
 8001e9a:	f107 020b 	add.w	r2, r7, #11
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001ea4:	f000 fe14 	bl	8002ad0 <ov5640_write_reg>
 8001ea8:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d10c      	bne.n	8001eca <OV5640_SetColorEffect+0xf6>
      {
        tmp = 0xA0;
 8001eb0:	23a0      	movs	r3, #160	; 0xa0
 8001eb2:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f103 0018 	add.w	r0, r3, #24
 8001eba:	f107 020b 	add.w	r2, r7, #11
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	f245 5183 	movw	r1, #21891	; 0x5583
 8001ec4:	f000 fe04 	bl	8002ad0 <ov5640_write_reg>
 8001ec8:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10c      	bne.n	8001eea <OV5640_SetColorEffect+0x116>
      {
        tmp = 0x40;
 8001ed0:	2340      	movs	r3, #64	; 0x40
 8001ed2:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f103 0018 	add.w	r0, r3, #24
 8001eda:	f107 020b 	add.w	r2, r7, #11
 8001ede:	2301      	movs	r3, #1
 8001ee0:	f245 5184 	movw	r1, #21892	; 0x5584
 8001ee4:	f000 fdf4 	bl	8002ad0 <ov5640_write_reg>
 8001ee8:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f000 815f 	beq.w	80021b0 <OV5640_SetColorEffect+0x3dc>
      {
        ret = OV5640_ERROR;
 8001ef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ef6:	60fb      	str	r3, [r7, #12]
      }
      break;
 8001ef8:	e15a      	b.n	80021b0 <OV5640_SetColorEffect+0x3dc>

    case OV5640_COLOR_EFFECT_RED:
      tmp = 0xFF;
 8001efa:	23ff      	movs	r3, #255	; 0xff
 8001efc:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f103 0018 	add.w	r0, r3, #24
 8001f04:	f107 020b 	add.w	r2, r7, #11
 8001f08:	2301      	movs	r3, #1
 8001f0a:	f245 0101 	movw	r1, #20481	; 0x5001
 8001f0e:	f000 fddf 	bl	8002ad0 <ov5640_write_reg>
 8001f12:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10c      	bne.n	8001f34 <OV5640_SetColorEffect+0x160>
      {
        tmp = 0x18;
 8001f1a:	2318      	movs	r3, #24
 8001f1c:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f103 0018 	add.w	r0, r3, #24
 8001f24:	f107 020b 	add.w	r2, r7, #11
 8001f28:	2301      	movs	r3, #1
 8001f2a:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001f2e:	f000 fdcf 	bl	8002ad0 <ov5640_write_reg>
 8001f32:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10c      	bne.n	8001f54 <OV5640_SetColorEffect+0x180>
      {
        tmp = 0x80;
 8001f3a:	2380      	movs	r3, #128	; 0x80
 8001f3c:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f103 0018 	add.w	r0, r3, #24
 8001f44:	f107 020b 	add.w	r2, r7, #11
 8001f48:	2301      	movs	r3, #1
 8001f4a:	f245 5183 	movw	r1, #21891	; 0x5583
 8001f4e:	f000 fdbf 	bl	8002ad0 <ov5640_write_reg>
 8001f52:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10c      	bne.n	8001f74 <OV5640_SetColorEffect+0x1a0>
      {
        tmp = 0xC0;
 8001f5a:	23c0      	movs	r3, #192	; 0xc0
 8001f5c:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f103 0018 	add.w	r0, r3, #24
 8001f64:	f107 020b 	add.w	r2, r7, #11
 8001f68:	2301      	movs	r3, #1
 8001f6a:	f245 5184 	movw	r1, #21892	; 0x5584
 8001f6e:	f000 fdaf 	bl	8002ad0 <ov5640_write_reg>
 8001f72:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 811c 	beq.w	80021b4 <OV5640_SetColorEffect+0x3e0>
      {
        ret = OV5640_ERROR;
 8001f7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f80:	60fb      	str	r3, [r7, #12]
      }
      break;
 8001f82:	e117      	b.n	80021b4 <OV5640_SetColorEffect+0x3e0>

    case OV5640_COLOR_EFFECT_GREEN:
      tmp = 0xFF;
 8001f84:	23ff      	movs	r3, #255	; 0xff
 8001f86:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f103 0018 	add.w	r0, r3, #24
 8001f8e:	f107 020b 	add.w	r2, r7, #11
 8001f92:	2301      	movs	r3, #1
 8001f94:	f245 0101 	movw	r1, #20481	; 0x5001
 8001f98:	f000 fd9a 	bl	8002ad0 <ov5640_write_reg>
 8001f9c:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d10c      	bne.n	8001fbe <OV5640_SetColorEffect+0x1ea>
      {
        tmp = 0x18;
 8001fa4:	2318      	movs	r3, #24
 8001fa6:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f103 0018 	add.w	r0, r3, #24
 8001fae:	f107 020b 	add.w	r2, r7, #11
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001fb8:	f000 fd8a 	bl	8002ad0 <ov5640_write_reg>
 8001fbc:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10c      	bne.n	8001fde <OV5640_SetColorEffect+0x20a>
      {
        tmp = 0x60;
 8001fc4:	2360      	movs	r3, #96	; 0x60
 8001fc6:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f103 0018 	add.w	r0, r3, #24
 8001fce:	f107 020b 	add.w	r2, r7, #11
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	f245 5183 	movw	r1, #21891	; 0x5583
 8001fd8:	f000 fd7a 	bl	8002ad0 <ov5640_write_reg>
 8001fdc:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10c      	bne.n	8001ffe <OV5640_SetColorEffect+0x22a>
      {
        tmp = 0x60;
 8001fe4:	2360      	movs	r3, #96	; 0x60
 8001fe6:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f103 0018 	add.w	r0, r3, #24
 8001fee:	f107 020b 	add.w	r2, r7, #11
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	f245 5184 	movw	r1, #21892	; 0x5584
 8001ff8:	f000 fd6a 	bl	8002ad0 <ov5640_write_reg>
 8001ffc:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2b00      	cmp	r3, #0
 8002002:	f000 80d9 	beq.w	80021b8 <OV5640_SetColorEffect+0x3e4>
      {
        ret = OV5640_ERROR;
 8002006:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800200a:	60fb      	str	r3, [r7, #12]
      }
      break;
 800200c:	e0d4      	b.n	80021b8 <OV5640_SetColorEffect+0x3e4>

    case OV5640_COLOR_EFFECT_BW:
      tmp = 0xFF;
 800200e:	23ff      	movs	r3, #255	; 0xff
 8002010:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f103 0018 	add.w	r0, r3, #24
 8002018:	f107 020b 	add.w	r2, r7, #11
 800201c:	2301      	movs	r3, #1
 800201e:	f245 0101 	movw	r1, #20481	; 0x5001
 8002022:	f000 fd55 	bl	8002ad0 <ov5640_write_reg>
 8002026:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10c      	bne.n	8002048 <OV5640_SetColorEffect+0x274>
      {
        tmp = 0x18;
 800202e:	2318      	movs	r3, #24
 8002030:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f103 0018 	add.w	r0, r3, #24
 8002038:	f107 020b 	add.w	r2, r7, #11
 800203c:	2301      	movs	r3, #1
 800203e:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002042:	f000 fd45 	bl	8002ad0 <ov5640_write_reg>
 8002046:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10c      	bne.n	8002068 <OV5640_SetColorEffect+0x294>
      {
        tmp = 0x80;
 800204e:	2380      	movs	r3, #128	; 0x80
 8002050:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f103 0018 	add.w	r0, r3, #24
 8002058:	f107 020b 	add.w	r2, r7, #11
 800205c:	2301      	movs	r3, #1
 800205e:	f245 5183 	movw	r1, #21891	; 0x5583
 8002062:	f000 fd35 	bl	8002ad0 <ov5640_write_reg>
 8002066:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10c      	bne.n	8002088 <OV5640_SetColorEffect+0x2b4>
      {
        tmp = 0x80;
 800206e:	2380      	movs	r3, #128	; 0x80
 8002070:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f103 0018 	add.w	r0, r3, #24
 8002078:	f107 020b 	add.w	r2, r7, #11
 800207c:	2301      	movs	r3, #1
 800207e:	f245 5184 	movw	r1, #21892	; 0x5584
 8002082:	f000 fd25 	bl	8002ad0 <ov5640_write_reg>
 8002086:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 8096 	beq.w	80021bc <OV5640_SetColorEffect+0x3e8>
      {
        ret = OV5640_ERROR;
 8002090:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002094:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002096:	e091      	b.n	80021bc <OV5640_SetColorEffect+0x3e8>

    case OV5640_COLOR_EFFECT_SEPIA:
      tmp = 0xFF;
 8002098:	23ff      	movs	r3, #255	; 0xff
 800209a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f103 0018 	add.w	r0, r3, #24
 80020a2:	f107 020b 	add.w	r2, r7, #11
 80020a6:	2301      	movs	r3, #1
 80020a8:	f245 0101 	movw	r1, #20481	; 0x5001
 80020ac:	f000 fd10 	bl	8002ad0 <ov5640_write_reg>
 80020b0:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10c      	bne.n	80020d2 <OV5640_SetColorEffect+0x2fe>
      {
        tmp = 0x18;
 80020b8:	2318      	movs	r3, #24
 80020ba:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f103 0018 	add.w	r0, r3, #24
 80020c2:	f107 020b 	add.w	r2, r7, #11
 80020c6:	2301      	movs	r3, #1
 80020c8:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80020cc:	f000 fd00 	bl	8002ad0 <ov5640_write_reg>
 80020d0:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10c      	bne.n	80020f2 <OV5640_SetColorEffect+0x31e>
      {
        tmp = 0x40;
 80020d8:	2340      	movs	r3, #64	; 0x40
 80020da:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f103 0018 	add.w	r0, r3, #24
 80020e2:	f107 020b 	add.w	r2, r7, #11
 80020e6:	2301      	movs	r3, #1
 80020e8:	f245 5183 	movw	r1, #21891	; 0x5583
 80020ec:	f000 fcf0 	bl	8002ad0 <ov5640_write_reg>
 80020f0:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d10c      	bne.n	8002112 <OV5640_SetColorEffect+0x33e>
      {
        tmp = 0xA0;
 80020f8:	23a0      	movs	r3, #160	; 0xa0
 80020fa:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f103 0018 	add.w	r0, r3, #24
 8002102:	f107 020b 	add.w	r2, r7, #11
 8002106:	2301      	movs	r3, #1
 8002108:	f245 5184 	movw	r1, #21892	; 0x5584
 800210c:	f000 fce0 	bl	8002ad0 <ov5640_write_reg>
 8002110:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d053      	beq.n	80021c0 <OV5640_SetColorEffect+0x3ec>
      {
        ret = OV5640_ERROR;
 8002118:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800211c:	60fb      	str	r3, [r7, #12]
      }
      break;
 800211e:	e04f      	b.n	80021c0 <OV5640_SetColorEffect+0x3ec>

    case OV5640_COLOR_EFFECT_NEGATIVE:
      tmp = 0xFF;
 8002120:	23ff      	movs	r3, #255	; 0xff
 8002122:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f103 0018 	add.w	r0, r3, #24
 800212a:	f107 020b 	add.w	r2, r7, #11
 800212e:	2301      	movs	r3, #1
 8002130:	f245 0101 	movw	r1, #20481	; 0x5001
 8002134:	f000 fccc 	bl	8002ad0 <ov5640_write_reg>
 8002138:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10c      	bne.n	800215a <OV5640_SetColorEffect+0x386>
      {
        tmp = 0x40;
 8002140:	2340      	movs	r3, #64	; 0x40
 8002142:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f103 0018 	add.w	r0, r3, #24
 800214a:	f107 020b 	add.w	r2, r7, #11
 800214e:	2301      	movs	r3, #1
 8002150:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002154:	f000 fcbc 	bl	8002ad0 <ov5640_write_reg>
 8002158:	60f8      	str	r0, [r7, #12]
      }
      if (ret != OV5640_OK)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d031      	beq.n	80021c4 <OV5640_SetColorEffect+0x3f0>
      {
        ret = OV5640_ERROR;
 8002160:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002164:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002166:	e02d      	b.n	80021c4 <OV5640_SetColorEffect+0x3f0>

    case OV5640_COLOR_EFFECT_NONE:
    default :
      tmp = 0x7F;
 8002168:	237f      	movs	r3, #127	; 0x7f
 800216a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f103 0018 	add.w	r0, r3, #24
 8002172:	f107 020b 	add.w	r2, r7, #11
 8002176:	2301      	movs	r3, #1
 8002178:	f245 0101 	movw	r1, #20481	; 0x5001
 800217c:	f000 fca8 	bl	8002ad0 <ov5640_write_reg>
 8002180:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10c      	bne.n	80021a2 <OV5640_SetColorEffect+0x3ce>
      {
        tmp = 0x00;
 8002188:	2300      	movs	r3, #0
 800218a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f103 0018 	add.w	r0, r3, #24
 8002192:	f107 020b 	add.w	r2, r7, #11
 8002196:	2301      	movs	r3, #1
 8002198:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800219c:	f000 fc98 	bl	8002ad0 <ov5640_write_reg>
 80021a0:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00f      	beq.n	80021c8 <OV5640_SetColorEffect+0x3f4>
      {
        ret = OV5640_ERROR;
 80021a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021ac:	60fb      	str	r3, [r7, #12]
      }

      break;
 80021ae:	e00b      	b.n	80021c8 <OV5640_SetColorEffect+0x3f4>
      break;
 80021b0:	bf00      	nop
 80021b2:	e00a      	b.n	80021ca <OV5640_SetColorEffect+0x3f6>
      break;
 80021b4:	bf00      	nop
 80021b6:	e008      	b.n	80021ca <OV5640_SetColorEffect+0x3f6>
      break;
 80021b8:	bf00      	nop
 80021ba:	e006      	b.n	80021ca <OV5640_SetColorEffect+0x3f6>
      break;
 80021bc:	bf00      	nop
 80021be:	e004      	b.n	80021ca <OV5640_SetColorEffect+0x3f6>
      break;
 80021c0:	bf00      	nop
 80021c2:	e002      	b.n	80021ca <OV5640_SetColorEffect+0x3f6>
      break;
 80021c4:	bf00      	nop
 80021c6:	e000      	b.n	80021ca <OV5640_SetColorEffect+0x3f6>
      break;
 80021c8:	bf00      	nop
  }

  return ret;
 80021ca:	68fb      	ldr	r3, [r7, #12]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <OV5640_SetBrightness>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetBrightness(OV5640_Object_t *pObj, int32_t Level)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b088      	sub	sp, #32
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 80021de:	4a34      	ldr	r2, [pc, #208]	; (80022b0 <OV5640_SetBrightness+0xdc>)
 80021e0:	f107 0310 	add.w	r3, r7, #16
 80021e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80021e6:	c303      	stmia	r3!, {r0, r1}
 80021e8:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 80021ea:	23ff      	movs	r3, #255	; 0xff
 80021ec:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f103 0018 	add.w	r0, r3, #24
 80021f4:	f107 020f 	add.w	r2, r7, #15
 80021f8:	2301      	movs	r3, #1
 80021fa:	f245 0101 	movw	r1, #20481	; 0x5001
 80021fe:	f000 fc67 	bl	8002ad0 <ov5640_write_reg>
 8002202:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d111      	bne.n	800222e <OV5640_SetBrightness+0x5a>
  {
    tmp = brightness_level[Level + 4];
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	3304      	adds	r3, #4
 800220e:	3320      	adds	r3, #32
 8002210:	443b      	add	r3, r7
 8002212:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002216:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f103 0018 	add.w	r0, r3, #24
 800221e:	f107 020f 	add.w	r2, r7, #15
 8002222:	2301      	movs	r3, #1
 8002224:	f245 5187 	movw	r1, #21895	; 0x5587
 8002228:	f000 fc52 	bl	8002ad0 <ov5640_write_reg>
 800222c:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d10c      	bne.n	800224e <OV5640_SetBrightness+0x7a>
  {
    tmp = 0x04;
 8002234:	2304      	movs	r3, #4
 8002236:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f103 0018 	add.w	r0, r3, #24
 800223e:	f107 020f 	add.w	r2, r7, #15
 8002242:	2301      	movs	r3, #1
 8002244:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002248:	f000 fc42 	bl	8002ad0 <ov5640_write_reg>
 800224c:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d127      	bne.n	80022a4 <OV5640_SetBrightness+0xd0>
  {
    if (Level < 0)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	da12      	bge.n	8002280 <OV5640_SetBrightness+0xac>
    {
      tmp = 0x01;
 800225a:	2301      	movs	r3, #1
 800225c:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f103 0018 	add.w	r0, r3, #24
 8002264:	f107 020f 	add.w	r2, r7, #15
 8002268:	2301      	movs	r3, #1
 800226a:	f245 5188 	movw	r1, #21896	; 0x5588
 800226e:	f000 fc2f 	bl	8002ad0 <ov5640_write_reg>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d015      	beq.n	80022a4 <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 8002278:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800227c:	61fb      	str	r3, [r7, #28]
 800227e:	e011      	b.n	80022a4 <OV5640_SetBrightness+0xd0>
      }
    }
    else
    {
      tmp = 0x09;
 8002280:	2309      	movs	r3, #9
 8002282:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f103 0018 	add.w	r0, r3, #24
 800228a:	f107 020f 	add.w	r2, r7, #15
 800228e:	2301      	movs	r3, #1
 8002290:	f245 5188 	movw	r1, #21896	; 0x5588
 8002294:	f000 fc1c 	bl	8002ad0 <ov5640_write_reg>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d002      	beq.n	80022a4 <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 800229e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022a2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ret;
 80022a4:	69fb      	ldr	r3, [r7, #28]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3720      	adds	r7, #32
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	0800ff18 	.word	0x0800ff18

080022b4 <OV5640_SetSaturation>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetSaturation(OV5640_Object_t *pObj, int32_t Level)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b088      	sub	sp, #32
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 80022be:	4a30      	ldr	r2, [pc, #192]	; (8002380 <OV5640_SetSaturation+0xcc>)
 80022c0:	f107 0310 	add.w	r3, r7, #16
 80022c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80022c6:	c303      	stmia	r3!, {r0, r1}
 80022c8:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 80022ca:	23ff      	movs	r3, #255	; 0xff
 80022cc:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f103 0018 	add.w	r0, r3, #24
 80022d4:	f107 020f 	add.w	r2, r7, #15
 80022d8:	2301      	movs	r3, #1
 80022da:	f245 0101 	movw	r1, #20481	; 0x5001
 80022de:	f000 fbf7 	bl	8002ad0 <ov5640_write_reg>
 80022e2:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d111      	bne.n	800230e <OV5640_SetSaturation+0x5a>
  {
    tmp = saturation_level[Level + 4];
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	3304      	adds	r3, #4
 80022ee:	3320      	adds	r3, #32
 80022f0:	443b      	add	r3, r7
 80022f2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80022f6:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f103 0018 	add.w	r0, r3, #24
 80022fe:	f107 020f 	add.w	r2, r7, #15
 8002302:	2301      	movs	r3, #1
 8002304:	f245 5183 	movw	r1, #21891	; 0x5583
 8002308:	f000 fbe2 	bl	8002ad0 <ov5640_write_reg>
 800230c:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10a      	bne.n	800232a <OV5640_SetSaturation+0x76>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f103 0018 	add.w	r0, r3, #24
 800231a:	f107 020f 	add.w	r2, r7, #15
 800231e:	2301      	movs	r3, #1
 8002320:	f245 5184 	movw	r1, #21892	; 0x5584
 8002324:	f000 fbd4 	bl	8002ad0 <ov5640_write_reg>
 8002328:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10c      	bne.n	800234a <OV5640_SetSaturation+0x96>
  {
    tmp = 0x02;
 8002330:	2302      	movs	r3, #2
 8002332:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f103 0018 	add.w	r0, r3, #24
 800233a:	f107 020f 	add.w	r2, r7, #15
 800233e:	2301      	movs	r3, #1
 8002340:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002344:	f000 fbc4 	bl	8002ad0 <ov5640_write_reg>
 8002348:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10c      	bne.n	800236a <OV5640_SetSaturation+0xb6>
  {
    tmp = 0x41;
 8002350:	2341      	movs	r3, #65	; 0x41
 8002352:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f103 0018 	add.w	r0, r3, #24
 800235a:	f107 020f 	add.w	r2, r7, #15
 800235e:	2301      	movs	r3, #1
 8002360:	f245 5188 	movw	r1, #21896	; 0x5588
 8002364:	f000 fbb4 	bl	8002ad0 <ov5640_write_reg>
 8002368:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d002      	beq.n	8002376 <OV5640_SetSaturation+0xc2>
  {
    ret = OV5640_ERROR;
 8002370:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002374:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8002376:	69fb      	ldr	r3, [r7, #28]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3720      	adds	r7, #32
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	0800ff24 	.word	0x0800ff24

08002384 <OV5640_SetContrast>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetContrast(OV5640_Object_t *pObj, int32_t Level)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b088      	sub	sp, #32
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 800238e:	4a30      	ldr	r2, [pc, #192]	; (8002450 <OV5640_SetContrast+0xcc>)
 8002390:	f107 0310 	add.w	r3, r7, #16
 8002394:	ca07      	ldmia	r2, {r0, r1, r2}
 8002396:	c303      	stmia	r3!, {r0, r1}
 8002398:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 800239a:	23ff      	movs	r3, #255	; 0xff
 800239c:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f103 0018 	add.w	r0, r3, #24
 80023a4:	f107 020f 	add.w	r2, r7, #15
 80023a8:	2301      	movs	r3, #1
 80023aa:	f245 0101 	movw	r1, #20481	; 0x5001
 80023ae:	f000 fb8f 	bl	8002ad0 <ov5640_write_reg>
 80023b2:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10c      	bne.n	80023d4 <OV5640_SetContrast+0x50>
  {
    tmp = 0x04;
 80023ba:	2304      	movs	r3, #4
 80023bc:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f103 0018 	add.w	r0, r3, #24
 80023c4:	f107 020f 	add.w	r2, r7, #15
 80023c8:	2301      	movs	r3, #1
 80023ca:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80023ce:	f000 fb7f 	bl	8002ad0 <ov5640_write_reg>
 80023d2:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d111      	bne.n	80023fe <OV5640_SetContrast+0x7a>
  {
    tmp = contrast_level[Level + 4];
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	3304      	adds	r3, #4
 80023de:	3320      	adds	r3, #32
 80023e0:	443b      	add	r3, r7
 80023e2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80023e6:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f103 0018 	add.w	r0, r3, #24
 80023ee:	f107 020f 	add.w	r2, r7, #15
 80023f2:	2301      	movs	r3, #1
 80023f4:	f245 5186 	movw	r1, #21894	; 0x5586
 80023f8:	f000 fb6a 	bl	8002ad0 <ov5640_write_reg>
 80023fc:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10a      	bne.n	800241a <OV5640_SetContrast+0x96>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL5, &tmp, 1);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f103 0018 	add.w	r0, r3, #24
 800240a:	f107 020f 	add.w	r2, r7, #15
 800240e:	2301      	movs	r3, #1
 8002410:	f245 5185 	movw	r1, #21893	; 0x5585
 8002414:	f000 fb5c 	bl	8002ad0 <ov5640_write_reg>
 8002418:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10c      	bne.n	800243a <OV5640_SetContrast+0xb6>
  {
    tmp = 0x41;
 8002420:	2341      	movs	r3, #65	; 0x41
 8002422:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f103 0018 	add.w	r0, r3, #24
 800242a:	f107 020f 	add.w	r2, r7, #15
 800242e:	2301      	movs	r3, #1
 8002430:	f245 5188 	movw	r1, #21896	; 0x5588
 8002434:	f000 fb4c 	bl	8002ad0 <ov5640_write_reg>
 8002438:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d002      	beq.n	8002446 <OV5640_SetContrast+0xc2>
  {
    ret = OV5640_ERROR;
 8002440:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002444:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8002446:	69fb      	ldr	r3, [r7, #28]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3720      	adds	r7, #32
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	0800ff30 	.word	0x0800ff30

08002454 <OV5640_SetHueDegree>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetHueDegree(OV5640_Object_t *pObj, int32_t Degree)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08e      	sub	sp, #56	; 0x38
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 800245e:	4a3c      	ldr	r2, [pc, #240]	; (8002550 <OV5640_SetHueDegree+0xfc>)
 8002460:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002464:	ca07      	ldmia	r2, {r0, r1, r2}
 8002466:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x6FU
                                     };
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 800246a:	4a3a      	ldr	r2, [pc, #232]	; (8002554 <OV5640_SetHueDegree+0x100>)
 800246c:	f107 031c 	add.w	r3, r7, #28
 8002470:	ca07      	ldmia	r2, {r0, r1, r2}
 8002472:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x40U
                                     };
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 8002476:	4a38      	ldr	r2, [pc, #224]	; (8002558 <OV5640_SetHueDegree+0x104>)
 8002478:	f107 0310 	add.w	r3, r7, #16
 800247c:	ca07      	ldmia	r2, {r0, r1, r2}
 800247e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x31U
                                     };
  uint8_t tmp;

  tmp = 0xFF;
 8002482:	23ff      	movs	r3, #255	; 0xff
 8002484:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f103 0018 	add.w	r0, r3, #24
 800248c:	f107 020f 	add.w	r2, r7, #15
 8002490:	2301      	movs	r3, #1
 8002492:	f245 0101 	movw	r1, #20481	; 0x5001
 8002496:	f000 fb1b 	bl	8002ad0 <ov5640_write_reg>
 800249a:	6378      	str	r0, [r7, #52]	; 0x34

  if (ret == OV5640_OK)
 800249c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10c      	bne.n	80024bc <OV5640_SetHueDegree+0x68>
  {
    tmp = 0x01;
 80024a2:	2301      	movs	r3, #1
 80024a4:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f103 0018 	add.w	r0, r3, #24
 80024ac:	f107 020f 	add.w	r2, r7, #15
 80024b0:	2301      	movs	r3, #1
 80024b2:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80024b6:	f000 fb0b 	bl	8002ad0 <ov5640_write_reg>
 80024ba:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 80024bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d111      	bne.n	80024e6 <OV5640_SetHueDegree+0x92>
  {
    tmp = hue_degree_ctrl1[Degree + 6];
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	3306      	adds	r3, #6
 80024c6:	3338      	adds	r3, #56	; 0x38
 80024c8:	443b      	add	r3, r7
 80024ca:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80024ce:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f103 0018 	add.w	r0, r3, #24
 80024d6:	f107 020f 	add.w	r2, r7, #15
 80024da:	2301      	movs	r3, #1
 80024dc:	f245 5181 	movw	r1, #21889	; 0x5581
 80024e0:	f000 faf6 	bl	8002ad0 <ov5640_write_reg>
 80024e4:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 80024e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d111      	bne.n	8002510 <OV5640_SetHueDegree+0xbc>
  {
    tmp = hue_degree_ctrl2[Degree + 6];
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	3306      	adds	r3, #6
 80024f0:	3338      	adds	r3, #56	; 0x38
 80024f2:	443b      	add	r3, r7
 80024f4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80024f8:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f103 0018 	add.w	r0, r3, #24
 8002500:	f107 020f 	add.w	r2, r7, #15
 8002504:	2301      	movs	r3, #1
 8002506:	f245 5182 	movw	r1, #21890	; 0x5582
 800250a:	f000 fae1 	bl	8002ad0 <ov5640_write_reg>
 800250e:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8002510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002512:	2b00      	cmp	r3, #0
 8002514:	d111      	bne.n	800253a <OV5640_SetHueDegree+0xe6>
  {
    tmp = hue_degree_ctrl8[Degree + 6];
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	3306      	adds	r3, #6
 800251a:	3338      	adds	r3, #56	; 0x38
 800251c:	443b      	add	r3, r7
 800251e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002522:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f103 0018 	add.w	r0, r3, #24
 800252a:	f107 020f 	add.w	r2, r7, #15
 800252e:	2301      	movs	r3, #1
 8002530:	f245 5188 	movw	r1, #21896	; 0x5588
 8002534:	f000 facc 	bl	8002ad0 <ov5640_write_reg>
 8002538:	6378      	str	r0, [r7, #52]	; 0x34
  }

  if (ret != OV5640_OK)
 800253a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800253c:	2b00      	cmp	r3, #0
 800253e:	d002      	beq.n	8002546 <OV5640_SetHueDegree+0xf2>
  {
    ret = OV5640_ERROR;
 8002540:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002544:	637b      	str	r3, [r7, #52]	; 0x34
  }

  return ret;
 8002546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002548:	4618      	mov	r0, r3
 800254a:	3738      	adds	r7, #56	; 0x38
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	0800ff3c 	.word	0x0800ff3c
 8002554:	0800ff48 	.word	0x0800ff48
 8002558:	0800ff54 	.word	0x0800ff54

0800255c <OV5640_MirrorFlipConfig>:
  * @param  pObj  pointer to component object
  * @param  Config To configure mirror, flip, both or none
  * @retval Component status
  */
int32_t OV5640_MirrorFlipConfig(OV5640_Object_t *pObj, uint32_t Config)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp3820 = 0;
 8002566:	2300      	movs	r3, #0
 8002568:	72fb      	strb	r3, [r7, #11]
  uint8_t tmp3821;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f103 0018 	add.w	r0, r3, #24
 8002570:	f107 020b 	add.w	r2, r7, #11
 8002574:	2301      	movs	r3, #1
 8002576:	f643 0120 	movw	r1, #14368	; 0x3820
 800257a:	f000 fa92 	bl	8002aa2 <ov5640_read_reg>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d003      	beq.n	800258c <OV5640_MirrorFlipConfig+0x30>
  {
    ret = OV5640_ERROR;
 8002584:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	e0cb      	b.n	8002724 <OV5640_MirrorFlipConfig+0x1c8>
  }
  else
  {
    tmp3820 &= 0xF9U;
 800258c:	7afb      	ldrb	r3, [r7, #11]
 800258e:	f023 0306 	bic.w	r3, r3, #6
 8002592:	b2db      	uxtb	r3, r3
 8002594:	72fb      	strb	r3, [r7, #11]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f103 0018 	add.w	r0, r3, #24
 800259c:	f107 020a 	add.w	r2, r7, #10
 80025a0:	2301      	movs	r3, #1
 80025a2:	f643 0121 	movw	r1, #14369	; 0x3821
 80025a6:	f000 fa7c 	bl	8002aa2 <ov5640_read_reg>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <OV5640_MirrorFlipConfig+0x5c>
    {
      ret = OV5640_ERROR;
 80025b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	e0b5      	b.n	8002724 <OV5640_MirrorFlipConfig+0x1c8>
    }
    else
    {
      ret = OV5640_OK;
 80025b8:	2300      	movs	r3, #0
 80025ba:	60fb      	str	r3, [r7, #12]
      tmp3821 &= 0xF9U;
 80025bc:	7abb      	ldrb	r3, [r7, #10]
 80025be:	f023 0306 	bic.w	r3, r3, #6
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	72bb      	strb	r3, [r7, #10]

      switch (Config)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d056      	beq.n	800267a <OV5640_MirrorFlipConfig+0x11e>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	2b03      	cmp	r3, #3
 80025d0:	d87f      	bhi.n	80026d2 <OV5640_MirrorFlipConfig+0x176>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d029      	beq.n	800262c <OV5640_MirrorFlipConfig+0xd0>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d179      	bne.n	80026d2 <OV5640_MirrorFlipConfig+0x176>
      {
        case OV5640_MIRROR:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f103 0018 	add.w	r0, r3, #24
 80025e4:	f107 020b 	add.w	r2, r7, #11
 80025e8:	2301      	movs	r3, #1
 80025ea:	f643 0120 	movw	r1, #14368	; 0x3820
 80025ee:	f000 fa6f 	bl	8002ad0 <ov5640_write_reg>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <OV5640_MirrorFlipConfig+0xa4>
          {
            ret = OV5640_ERROR;
 80025f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025fc:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 80025fe:	e08a      	b.n	8002716 <OV5640_MirrorFlipConfig+0x1ba>
            tmp3821 |= 0x06U;
 8002600:	7abb      	ldrb	r3, [r7, #10]
 8002602:	f043 0306 	orr.w	r3, r3, #6
 8002606:	b2db      	uxtb	r3, r3
 8002608:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f103 0018 	add.w	r0, r3, #24
 8002610:	f107 020a 	add.w	r2, r7, #10
 8002614:	2301      	movs	r3, #1
 8002616:	f643 0121 	movw	r1, #14369	; 0x3821
 800261a:	f000 fa59 	bl	8002ad0 <ov5640_write_reg>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d078      	beq.n	8002716 <OV5640_MirrorFlipConfig+0x1ba>
              ret = OV5640_ERROR;
 8002624:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002628:	60fb      	str	r3, [r7, #12]
          break;
 800262a:	e074      	b.n	8002716 <OV5640_MirrorFlipConfig+0x1ba>
        case OV5640_FLIP:
          tmp3820 |= 0x06U;
 800262c:	7afb      	ldrb	r3, [r7, #11]
 800262e:	f043 0306 	orr.w	r3, r3, #6
 8002632:	b2db      	uxtb	r3, r3
 8002634:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f103 0018 	add.w	r0, r3, #24
 800263c:	f107 020b 	add.w	r2, r7, #11
 8002640:	2301      	movs	r3, #1
 8002642:	f643 0120 	movw	r1, #14368	; 0x3820
 8002646:	f000 fa43 	bl	8002ad0 <ov5640_write_reg>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <OV5640_MirrorFlipConfig+0xfc>
          {
            ret = OV5640_ERROR;
 8002650:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002654:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002656:	e060      	b.n	800271a <OV5640_MirrorFlipConfig+0x1be>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f103 0018 	add.w	r0, r3, #24
 800265e:	f107 020a 	add.w	r2, r7, #10
 8002662:	2301      	movs	r3, #1
 8002664:	f643 0121 	movw	r1, #14369	; 0x3821
 8002668:	f000 fa32 	bl	8002ad0 <ov5640_write_reg>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d053      	beq.n	800271a <OV5640_MirrorFlipConfig+0x1be>
              ret = OV5640_ERROR;
 8002672:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002676:	60fb      	str	r3, [r7, #12]
          break;
 8002678:	e04f      	b.n	800271a <OV5640_MirrorFlipConfig+0x1be>
        case OV5640_MIRROR_FLIP:
          tmp3820 |= 0x06U;
 800267a:	7afb      	ldrb	r3, [r7, #11]
 800267c:	f043 0306 	orr.w	r3, r3, #6
 8002680:	b2db      	uxtb	r3, r3
 8002682:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f103 0018 	add.w	r0, r3, #24
 800268a:	f107 020b 	add.w	r2, r7, #11
 800268e:	2301      	movs	r3, #1
 8002690:	f643 0120 	movw	r1, #14368	; 0x3820
 8002694:	f000 fa1c 	bl	8002ad0 <ov5640_write_reg>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <OV5640_MirrorFlipConfig+0x14a>
          {
            ret = OV5640_ERROR;
 800269e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026a2:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 80026a4:	e03b      	b.n	800271e <OV5640_MirrorFlipConfig+0x1c2>
            tmp3821 |= 0x06U;
 80026a6:	7abb      	ldrb	r3, [r7, #10]
 80026a8:	f043 0306 	orr.w	r3, r3, #6
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f103 0018 	add.w	r0, r3, #24
 80026b6:	f107 020a 	add.w	r2, r7, #10
 80026ba:	2301      	movs	r3, #1
 80026bc:	f643 0121 	movw	r1, #14369	; 0x3821
 80026c0:	f000 fa06 	bl	8002ad0 <ov5640_write_reg>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d029      	beq.n	800271e <OV5640_MirrorFlipConfig+0x1c2>
              ret = OV5640_ERROR;
 80026ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026ce:	60fb      	str	r3, [r7, #12]
          break;
 80026d0:	e025      	b.n	800271e <OV5640_MirrorFlipConfig+0x1c2>

        case OV5640_MIRROR_FLIP_NONE:
        default:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f103 0018 	add.w	r0, r3, #24
 80026d8:	f107 020b 	add.w	r2, r7, #11
 80026dc:	2301      	movs	r3, #1
 80026de:	f643 0120 	movw	r1, #14368	; 0x3820
 80026e2:	f000 f9f5 	bl	8002ad0 <ov5640_write_reg>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <OV5640_MirrorFlipConfig+0x198>
          {
            ret = OV5640_ERROR;
 80026ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026f0:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 80026f2:	e016      	b.n	8002722 <OV5640_MirrorFlipConfig+0x1c6>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f103 0018 	add.w	r0, r3, #24
 80026fa:	f107 020a 	add.w	r2, r7, #10
 80026fe:	2301      	movs	r3, #1
 8002700:	f643 0121 	movw	r1, #14369	; 0x3821
 8002704:	f000 f9e4 	bl	8002ad0 <ov5640_write_reg>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d009      	beq.n	8002722 <OV5640_MirrorFlipConfig+0x1c6>
              ret = OV5640_ERROR;
 800270e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002712:	60fb      	str	r3, [r7, #12]
          break;
 8002714:	e005      	b.n	8002722 <OV5640_MirrorFlipConfig+0x1c6>
          break;
 8002716:	bf00      	nop
 8002718:	e004      	b.n	8002724 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 800271a:	bf00      	nop
 800271c:	e002      	b.n	8002724 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 800271e:	bf00      	nop
 8002720:	e000      	b.n	8002724 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002722:	bf00      	nop
      }
    }
  }

  return ret;
 8002724:	68fb      	ldr	r3, [r7, #12]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <OV5640_ZoomConfig>:
  * @param  pObj  pointer to component object
  * @param  Zoom  Zoom to be configured
  * @retval Component status
  */
int32_t OV5640_ZoomConfig(OV5640_Object_t *pObj, uint32_t Zoom)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b086      	sub	sp, #24
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
 8002736:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]
  uint32_t res;
  uint32_t zoom;
  uint8_t tmp;

  /* Get camera resolution */
  if (OV5640_GetResolution(pObj, &res) != OV5640_OK)
 800273c:	f107 030c 	add.w	r3, r7, #12
 8002740:	4619      	mov	r1, r3
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7ff f8a2 	bl	800188c <OV5640_GetResolution>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <OV5640_ZoomConfig+0x28>
  {
    ret = OV5640_ERROR;
 800274e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002752:	617b      	str	r3, [r7, #20]
 8002754:	e04e      	b.n	80027f4 <OV5640_ZoomConfig+0xc6>
  }
  else
  {
    zoom = Zoom;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	613b      	str	r3, [r7, #16]

    if (zoom == OV5640_ZOOM_x1)
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	2b44      	cmp	r3, #68	; 0x44
 800275e:	d112      	bne.n	8002786 <OV5640_ZoomConfig+0x58>
    {
      tmp = 0x10;
 8002760:	2310      	movs	r3, #16
 8002762:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f103 0018 	add.w	r0, r3, #24
 800276a:	f107 020b 	add.w	r2, r7, #11
 800276e:	2301      	movs	r3, #1
 8002770:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 8002774:	f000 f9ac 	bl	8002ad0 <ov5640_write_reg>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d03a      	beq.n	80027f4 <OV5640_ZoomConfig+0xc6>
      {
        ret = OV5640_ERROR;
 800277e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002782:	617b      	str	r3, [r7, #20]
 8002784:	e036      	b.n	80027f4 <OV5640_ZoomConfig+0xc6>
      }
    }
    else
    {
      switch (res)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2b02      	cmp	r3, #2
 800278a:	d802      	bhi.n	8002792 <OV5640_ZoomConfig+0x64>
 800278c:	2b00      	cmp	r3, #0
 800278e:	d103      	bne.n	8002798 <OV5640_ZoomConfig+0x6a>
          break;
        case OV5640_R640x480:
          zoom = zoom >> 2U;
          break;
        default:
          break;
 8002790:	e00a      	b.n	80027a8 <OV5640_ZoomConfig+0x7a>
      switch (res)
 8002792:	2b03      	cmp	r3, #3
 8002794:	d004      	beq.n	80027a0 <OV5640_ZoomConfig+0x72>
          break;
 8002796:	e007      	b.n	80027a8 <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 1U;
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	085b      	lsrs	r3, r3, #1
 800279c:	613b      	str	r3, [r7, #16]
          break;
 800279e:	e003      	b.n	80027a8 <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 2U;
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	089b      	lsrs	r3, r3, #2
 80027a4:	613b      	str	r3, [r7, #16]
          break;
 80027a6:	bf00      	nop
      }

      tmp = 0x00;
 80027a8:	2300      	movs	r3, #0
 80027aa:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f103 0018 	add.w	r0, r3, #24
 80027b2:	f107 020b 	add.w	r2, r7, #11
 80027b6:	2301      	movs	r3, #1
 80027b8:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 80027bc:	f000 f988 	bl	8002ad0 <ov5640_write_reg>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <OV5640_ZoomConfig+0xa0>
      {
        ret = OV5640_ERROR;
 80027c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	e012      	b.n	80027f4 <OV5640_ZoomConfig+0xc6>
      }
      else
      {
        tmp = (uint8_t)zoom;
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	72fb      	strb	r3, [r7, #11]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f103 0018 	add.w	r0, r3, #24
 80027da:	f107 020b 	add.w	r2, r7, #11
 80027de:	2301      	movs	r3, #1
 80027e0:	f245 6101 	movw	r1, #22017	; 0x5601
 80027e4:	f000 f974 	bl	8002ad0 <ov5640_write_reg>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d002      	beq.n	80027f4 <OV5640_ZoomConfig+0xc6>
        {
          ret = OV5640_ERROR;
 80027ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027f2:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 80027f4:	697b      	ldr	r3, [r7, #20]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3718      	adds	r7, #24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <OV5640_NightModeConfig>:
  * @param  pObj  pointer to component object
  * @param  Cmd   Enable disable night mode
  * @retval Component status
  */
int32_t OV5640_NightModeConfig(OV5640_Object_t *pObj, uint32_t Cmd)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b084      	sub	sp, #16
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp = 0;
 8002808:	2300      	movs	r3, #0
 800280a:	72fb      	strb	r3, [r7, #11]

  if (Cmd == NIGHT_MODE_ENABLE)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	2b01      	cmp	r3, #1
 8002810:	f040 80ce 	bne.w	80029b0 <OV5640_NightModeConfig+0x1b2>
  {
    /* Auto Frame Rate: 15fps ~ 3.75fps night mode for 60/50Hz light environment,
    24Mhz clock input,24Mhz PCLK*/
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL4, &tmp, 1);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f103 0018 	add.w	r0, r3, #24
 800281a:	f107 020b 	add.w	r2, r7, #11
 800281e:	2301      	movs	r3, #1
 8002820:	f243 0138 	movw	r1, #12344	; 0x3038
 8002824:	f000 f954 	bl	8002ad0 <ov5640_write_reg>
 8002828:	60f8      	str	r0, [r7, #12]
    if (ret == OV5640_OK)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10a      	bne.n	8002846 <OV5640_NightModeConfig+0x48>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL5, &tmp, 1);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f103 0018 	add.w	r0, r3, #24
 8002836:	f107 020b 	add.w	r2, r7, #11
 800283a:	2301      	movs	r3, #1
 800283c:	f243 0139 	movw	r1, #12345	; 0x3039
 8002840:	f000 f946 	bl	8002ad0 <ov5640_write_reg>
 8002844:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10c      	bne.n	8002866 <OV5640_NightModeConfig+0x68>
    {
      tmp = 0x7C;
 800284c:	237c      	movs	r3, #124	; 0x7c
 800284e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f103 0018 	add.w	r0, r3, #24
 8002856:	f107 020b 	add.w	r2, r7, #11
 800285a:	2301      	movs	r3, #1
 800285c:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8002860:	f000 f936 	bl	8002ad0 <ov5640_write_reg>
 8002864:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10c      	bne.n	8002886 <OV5640_NightModeConfig+0x88>
    {
      tmp = 0x01;
 800286c:	2301      	movs	r3, #1
 800286e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f103 0018 	add.w	r0, r3, #24
 8002876:	f107 020b 	add.w	r2, r7, #11
 800287a:	2301      	movs	r3, #1
 800287c:	f643 2108 	movw	r1, #14856	; 0x3a08
 8002880:	f000 f926 	bl	8002ad0 <ov5640_write_reg>
 8002884:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10c      	bne.n	80028a6 <OV5640_NightModeConfig+0xa8>
    {
      tmp = 0x27;
 800288c:	2327      	movs	r3, #39	; 0x27
 800288e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f103 0018 	add.w	r0, r3, #24
 8002896:	f107 020b 	add.w	r2, r7, #11
 800289a:	2301      	movs	r3, #1
 800289c:	f643 2109 	movw	r1, #14857	; 0x3a09
 80028a0:	f000 f916 	bl	8002ad0 <ov5640_write_reg>
 80028a4:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10c      	bne.n	80028c6 <OV5640_NightModeConfig+0xc8>
    {
      tmp = 0x00;
 80028ac:	2300      	movs	r3, #0
 80028ae:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_HIGH, &tmp, 1);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f103 0018 	add.w	r0, r3, #24
 80028b6:	f107 020b 	add.w	r2, r7, #11
 80028ba:	2301      	movs	r3, #1
 80028bc:	f643 210a 	movw	r1, #14858	; 0x3a0a
 80028c0:	f000 f906 	bl	8002ad0 <ov5640_write_reg>
 80028c4:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10c      	bne.n	80028e6 <OV5640_NightModeConfig+0xe8>
    {
      tmp = 0xF6;
 80028cc:	23f6      	movs	r3, #246	; 0xf6
 80028ce:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f103 0018 	add.w	r0, r3, #24
 80028d6:	f107 020b 	add.w	r2, r7, #11
 80028da:	2301      	movs	r3, #1
 80028dc:	f643 210b 	movw	r1, #14859	; 0x3a0b
 80028e0:	f000 f8f6 	bl	8002ad0 <ov5640_write_reg>
 80028e4:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10c      	bne.n	8002906 <OV5640_NightModeConfig+0x108>
    {
      tmp = 0x04;
 80028ec:	2304      	movs	r3, #4
 80028ee:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f103 0018 	add.w	r0, r3, #24
 80028f6:	f107 020b 	add.w	r2, r7, #11
 80028fa:	2301      	movs	r3, #1
 80028fc:	f643 210d 	movw	r1, #14861	; 0x3a0d
 8002900:	f000 f8e6 	bl	8002ad0 <ov5640_write_reg>
 8002904:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10a      	bne.n	8002922 <OV5640_NightModeConfig+0x124>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0E, &tmp, 1);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f103 0018 	add.w	r0, r3, #24
 8002912:	f107 020b 	add.w	r2, r7, #11
 8002916:	2301      	movs	r3, #1
 8002918:	f643 210e 	movw	r1, #14862	; 0x3a0e
 800291c:	f000 f8d8 	bl	8002ad0 <ov5640_write_reg>
 8002920:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10c      	bne.n	8002942 <OV5640_NightModeConfig+0x144>
    {
      tmp = 0x0B;
 8002928:	230b      	movs	r3, #11
 800292a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f103 0018 	add.w	r0, r3, #24
 8002932:	f107 020b 	add.w	r2, r7, #11
 8002936:	2301      	movs	r3, #1
 8002938:	f643 2102 	movw	r1, #14850	; 0x3a02
 800293c:	f000 f8c8 	bl	8002ad0 <ov5640_write_reg>
 8002940:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10c      	bne.n	8002962 <OV5640_NightModeConfig+0x164>
    {
      tmp = 0x88;
 8002948:	2388      	movs	r3, #136	; 0x88
 800294a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f103 0018 	add.w	r0, r3, #24
 8002952:	f107 020b 	add.w	r2, r7, #11
 8002956:	2301      	movs	r3, #1
 8002958:	f643 2103 	movw	r1, #14851	; 0x3a03
 800295c:	f000 f8b8 	bl	8002ad0 <ov5640_write_reg>
 8002960:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10c      	bne.n	8002982 <OV5640_NightModeConfig+0x184>
    {
      tmp = 0x0B;
 8002968:	230b      	movs	r3, #11
 800296a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f103 0018 	add.w	r0, r3, #24
 8002972:	f107 020b 	add.w	r2, r7, #11
 8002976:	2301      	movs	r3, #1
 8002978:	f643 2114 	movw	r1, #14868	; 0x3a14
 800297c:	f000 f8a8 	bl	8002ad0 <ov5640_write_reg>
 8002980:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10c      	bne.n	80029a2 <OV5640_NightModeConfig+0x1a4>
    {
      tmp = 0x88;
 8002988:	2388      	movs	r3, #136	; 0x88
 800298a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f103 0018 	add.w	r0, r3, #24
 8002992:	f107 020b 	add.w	r2, r7, #11
 8002996:	2301      	movs	r3, #1
 8002998:	f643 2115 	movw	r1, #14869	; 0x3a15
 800299c:	f000 f898 	bl	8002ad0 <ov5640_write_reg>
 80029a0:	60f8      	str	r0, [r7, #12]
    }
    if (ret != OV5640_OK)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d02b      	beq.n	8002a00 <OV5640_NightModeConfig+0x202>
    {
      ret = OV5640_ERROR;
 80029a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	e027      	b.n	8002a00 <OV5640_NightModeConfig+0x202>
    }
  }
  else
  {
    if (ov5640_read_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f103 0018 	add.w	r0, r3, #24
 80029b6:	f107 020b 	add.w	r2, r7, #11
 80029ba:	2301      	movs	r3, #1
 80029bc:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 80029c0:	f000 f86f 	bl	8002aa2 <ov5640_read_reg>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <OV5640_NightModeConfig+0x1d4>
    {
      ret = OV5640_ERROR;
 80029ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	e016      	b.n	8002a00 <OV5640_NightModeConfig+0x202>
    }
    else
    {
      ret = OV5640_OK;
 80029d2:	2300      	movs	r3, #0
 80029d4:	60fb      	str	r3, [r7, #12]
      tmp &= 0xFBU;
 80029d6:	7afb      	ldrb	r3, [r7, #11]
 80029d8:	f023 0304 	bic.w	r3, r3, #4
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	72fb      	strb	r3, [r7, #11]
      /* Set Bit 2 to 0 */
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f103 0018 	add.w	r0, r3, #24
 80029e6:	f107 020b 	add.w	r2, r7, #11
 80029ea:	2301      	movs	r3, #1
 80029ec:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 80029f0:	f000 f86e 	bl	8002ad0 <ov5640_write_reg>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d002      	beq.n	8002a00 <OV5640_NightModeConfig+0x202>
      {
        ret = OV5640_ERROR;
 80029fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029fe:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8002a00:	68fb      	ldr	r3, [r7, #12]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <OV5640_Delay>:
  * @param pObj   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval OV5640_OK
  */
static int32_t OV5640_Delay(OV5640_Object_t *pObj, uint32_t Delay)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b084      	sub	sp, #16
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
 8002a12:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	4798      	blx	r3
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	60fb      	str	r3, [r7, #12]
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8002a1e:	bf00      	nop
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	4798      	blx	r3
 8002a26:	4603      	mov	r3, r0
 8002a28:	461a      	mov	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d8f5      	bhi.n	8002a20 <OV5640_Delay+0x16>
  {
  }
  return OV5640_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <OV5640_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002a3e:	b590      	push	{r4, r7, lr}
 8002a40:	b087      	sub	sp, #28
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	60f8      	str	r0, [r7, #12]
 8002a46:	607a      	str	r2, [r7, #4]
 8002a48:	461a      	mov	r2, r3
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	817b      	strh	r3, [r7, #10]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	691c      	ldr	r4, [r3, #16]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	8918      	ldrh	r0, [r3, #8]
 8002a5e:	893b      	ldrh	r3, [r7, #8]
 8002a60:	8979      	ldrh	r1, [r7, #10]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	47a0      	blx	r4
 8002a66:	4603      	mov	r3, r0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	371c      	adds	r7, #28
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd90      	pop	{r4, r7, pc}

08002a70 <OV5640_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002a70:	b590      	push	{r4, r7, lr}
 8002a72:	b087      	sub	sp, #28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	607a      	str	r2, [r7, #4]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	817b      	strh	r3, [r7, #10]
 8002a80:	4613      	mov	r3, r2
 8002a82:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	68dc      	ldr	r4, [r3, #12]
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	8918      	ldrh	r0, [r3, #8]
 8002a90:	893b      	ldrh	r3, [r7, #8]
 8002a92:	8979      	ldrh	r1, [r7, #10]
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	47a0      	blx	r4
 8002a98:	4603      	mov	r3, r0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	371c      	adds	r7, #28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd90      	pop	{r4, r7, pc}

08002aa2 <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8002aa2:	b590      	push	{r4, r7, lr}
 8002aa4:	b085      	sub	sp, #20
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	60f8      	str	r0, [r7, #12]
 8002aaa:	607a      	str	r2, [r7, #4]
 8002aac:	461a      	mov	r2, r3
 8002aae:	460b      	mov	r3, r1
 8002ab0:	817b      	strh	r3, [r7, #10]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	685c      	ldr	r4, [r3, #4]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6898      	ldr	r0, [r3, #8]
 8002abe:	893b      	ldrh	r3, [r7, #8]
 8002ac0:	8979      	ldrh	r1, [r7, #10]
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	47a0      	blx	r4
 8002ac6:	4603      	mov	r3, r0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd90      	pop	{r4, r7, pc}

08002ad0 <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8002ad0:	b590      	push	{r4, r7, lr}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	607a      	str	r2, [r7, #4]
 8002ada:	461a      	mov	r2, r3
 8002adc:	460b      	mov	r3, r1
 8002ade:	817b      	strh	r3, [r7, #10]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681c      	ldr	r4, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6898      	ldr	r0, [r3, #8]
 8002aec:	893b      	ldrh	r3, [r7, #8]
 8002aee:	8979      	ldrh	r1, [r7, #10]
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	47a0      	blx	r4
 8002af4:	4603      	mov	r3, r0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd90      	pop	{r4, r7, pc}
	...

08002b00 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8002b08:	4a07      	ldr	r2, [pc, #28]	; (8002b28 <RetargetInit+0x28>)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8002b0e:	4b07      	ldr	r3, [pc, #28]	; (8002b2c <RetargetInit+0x2c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6898      	ldr	r0, [r3, #8]
 8002b14:	2300      	movs	r3, #0
 8002b16:	2202      	movs	r2, #2
 8002b18:	2100      	movs	r1, #0
 8002b1a:	f00c f985 	bl	800ee28 <setvbuf>
}
 8002b1e:	bf00      	nop
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	2405fcb0 	.word	0x2405fcb0
 8002b2c:	24000054 	.word	0x24000054

08002b30 <_isatty>:

int _isatty(int fd) {
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	db04      	blt.n	8002b48 <_isatty+0x18>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	dc01      	bgt.n	8002b48 <_isatty+0x18>
    return 1;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e005      	b.n	8002b54 <_isatty+0x24>

  errno = EBADF;
 8002b48:	f00c f924 	bl	800ed94 <__errno>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2209      	movs	r2, #9
 8002b50:	601a      	str	r2, [r3, #0]
  return 0;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <_write>:

int _write(int fd, char* ptr, int len) {
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d002      	beq.n	8002b74 <_write+0x18>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d111      	bne.n	8002b98 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002b74:	4b0e      	ldr	r3, [pc, #56]	; (8002bb0 <_write+0x54>)
 8002b76:	6818      	ldr	r0, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b80:	68b9      	ldr	r1, [r7, #8]
 8002b82:	f00a f9ef 	bl	800cf64 <HAL_UART_Transmit>
 8002b86:	4603      	mov	r3, r0
 8002b88:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002b8a:	7dfb      	ldrb	r3, [r7, #23]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <_write+0x38>
      return len;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	e008      	b.n	8002ba6 <_write+0x4a>
    else
      return EIO;
 8002b94:	2305      	movs	r3, #5
 8002b96:	e006      	b.n	8002ba6 <_write+0x4a>
  }
  errno = EBADF;
 8002b98:	f00c f8fc 	bl	800ed94 <__errno>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2209      	movs	r2, #9
 8002ba0:	601a      	str	r2, [r3, #0]
  return -1;
 8002ba2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	2405fcb0 	.word	0x2405fcb0

08002bb4 <_close>:

int _close(int fd) {
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	db04      	blt.n	8002bcc <_close+0x18>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	dc01      	bgt.n	8002bcc <_close+0x18>
    return 0;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	e006      	b.n	8002bda <_close+0x26>

  errno = EBADF;
 8002bcc:	f00c f8e2 	bl	800ed94 <__errno>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2209      	movs	r2, #9
 8002bd4:	601a      	str	r2, [r3, #0]
  return -1;
 8002bd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
	...

08002be4 <_read>:

int _read(int fd, char* ptr, int len) {
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d110      	bne.n	8002c18 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8002bf6:	4b0e      	ldr	r3, [pc, #56]	; (8002c30 <_read+0x4c>)
 8002bf8:	6818      	ldr	r0, [r3, #0]
 8002bfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bfe:	2201      	movs	r2, #1
 8002c00:	68b9      	ldr	r1, [r7, #8]
 8002c02:	f00a fa3d 	bl	800d080 <HAL_UART_Receive>
 8002c06:	4603      	mov	r3, r0
 8002c08:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002c0a:	7dfb      	ldrb	r3, [r7, #23]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d101      	bne.n	8002c14 <_read+0x30>
      return 1;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e008      	b.n	8002c26 <_read+0x42>
    else
      return EIO;
 8002c14:	2305      	movs	r3, #5
 8002c16:	e006      	b.n	8002c26 <_read+0x42>
  }
  errno = EBADF;
 8002c18:	f00c f8bc 	bl	800ed94 <__errno>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2209      	movs	r2, #9
 8002c20:	601a      	str	r2, [r3, #0]
  return -1;
 8002c22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	2405fcb0 	.word	0x2405fcb0

08002c34 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	db08      	blt.n	8002c56 <_fstat+0x22>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	dc05      	bgt.n	8002c56 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c50:	605a      	str	r2, [r3, #4]
    return 0;
 8002c52:	2300      	movs	r3, #0
 8002c54:	e005      	b.n	8002c62 <_fstat+0x2e>
  }

  errno = EBADF;
 8002c56:	f00c f89d 	bl	800ed94 <__errno>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2209      	movs	r2, #9
 8002c5e:	601a      	str	r2, [r3, #0]
  return 0;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002c70:	4b11      	ldr	r3, [pc, #68]	; (8002cb8 <MX_RTC_Init+0x4c>)
 8002c72:	4a12      	ldr	r2, [pc, #72]	; (8002cbc <MX_RTC_Init+0x50>)
 8002c74:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002c76:	4b10      	ldr	r3, [pc, #64]	; (8002cb8 <MX_RTC_Init+0x4c>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002c7c:	4b0e      	ldr	r3, [pc, #56]	; (8002cb8 <MX_RTC_Init+0x4c>)
 8002c7e:	227f      	movs	r2, #127	; 0x7f
 8002c80:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002c82:	4b0d      	ldr	r3, [pc, #52]	; (8002cb8 <MX_RTC_Init+0x4c>)
 8002c84:	22ff      	movs	r2, #255	; 0xff
 8002c86:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002c88:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <MX_RTC_Init+0x4c>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002c8e:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <MX_RTC_Init+0x4c>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002c94:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <MX_RTC_Init+0x4c>)
 8002c96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c9a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002c9c:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <MX_RTC_Init+0x4c>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002ca2:	4805      	ldr	r0, [pc, #20]	; (8002cb8 <MX_RTC_Init+0x4c>)
 8002ca4:	f009 fff0 	bl	800cc88 <HAL_RTC_Init>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002cae:	f7fe fa7f 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002cb2:	bf00      	nop
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	2405fcb4 	.word	0x2405fcb4
 8002cbc:	58004000 	.word	0x58004000

08002cc0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b0b2      	sub	sp, #200	; 0xc8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cc8:	f107 0308 	add.w	r3, r7, #8
 8002ccc:	22c0      	movs	r2, #192	; 0xc0
 8002cce:	2100      	movs	r1, #0
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f00c f889 	bl	800ede8 <memset>
  if(rtcHandle->Instance==RTC)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a10      	ldr	r2, [pc, #64]	; (8002d1c <HAL_RTC_MspInit+0x5c>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d119      	bne.n	8002d14 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002ce0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002ce4:	f04f 0300 	mov.w	r3, #0
 8002ce8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002cec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cf0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cf4:	f107 0308 	add.w	r3, r7, #8
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f008 f9e5 	bl	800b0c8 <HAL_RCCEx_PeriphCLKConfig>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002d04:	f7fe fa54 	bl	80011b0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002d08:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <HAL_RTC_MspInit+0x60>)
 8002d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0c:	4a04      	ldr	r2, [pc, #16]	; (8002d20 <HAL_RTC_MspInit+0x60>)
 8002d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d12:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002d14:	bf00      	nop
 8002d16:	37c8      	adds	r7, #200	; 0xc8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	58004000 	.word	0x58004000
 8002d20:	58024400 	.word	0x58024400

08002d24 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 8002d2e:	4b16      	ldr	r3, [pc, #88]	; (8002d88 <BSP_I2C4_Init+0x64>)
 8002d30:	4a16      	ldr	r2, [pc, #88]	; (8002d8c <BSP_I2C4_Init+0x68>)
 8002d32:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 8002d34:	4b16      	ldr	r3, [pc, #88]	; (8002d90 <BSP_I2C4_Init+0x6c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d11f      	bne.n	8002d7c <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 8002d3c:	4b14      	ldr	r3, [pc, #80]	; (8002d90 <BSP_I2C4_Init+0x6c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	3301      	adds	r3, #1
 8002d42:	4a13      	ldr	r2, [pc, #76]	; (8002d90 <BSP_I2C4_Init+0x6c>)
 8002d44:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8002d46:	4810      	ldr	r0, [pc, #64]	; (8002d88 <BSP_I2C4_Init+0x64>)
 8002d48:	f006 fa58 	bl	80091fc <HAL_I2C_GetState>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d114      	bne.n	8002d7c <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 8002d52:	480d      	ldr	r0, [pc, #52]	; (8002d88 <BSP_I2C4_Init+0x64>)
 8002d54:	f000 fb60 	bl	8003418 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8002d58:	f008 f9a0 	bl	800b09c <HAL_RCC_GetPCLK2Freq>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	490d      	ldr	r1, [pc, #52]	; (8002d94 <BSP_I2C4_Init+0x70>)
 8002d60:	4618      	mov	r0, r3
 8002d62:	f000 f8e3 	bl	8002f2c <I2C_GetTiming>
 8002d66:	4603      	mov	r3, r0
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4807      	ldr	r0, [pc, #28]	; (8002d88 <BSP_I2C4_Init+0x64>)
 8002d6c:	f000 f838 	bl	8002de0 <MX_I2C4_Init>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002d76:	f06f 0307 	mvn.w	r3, #7
 8002d7a:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 8002d7c:	687b      	ldr	r3, [r7, #4]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	240606e4 	.word	0x240606e4
 8002d8c:	58001c00 	.word	0x58001c00
 8002d90:	2405fcdc 	.word	0x2405fcdc
 8002d94:	000186a0 	.word	0x000186a0

08002d98 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 8002da2:	4b0d      	ldr	r3, [pc, #52]	; (8002dd8 <BSP_I2C4_DeInit+0x40>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	3b01      	subs	r3, #1
 8002da8:	4a0b      	ldr	r2, [pc, #44]	; (8002dd8 <BSP_I2C4_DeInit+0x40>)
 8002daa:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 8002dac:	4b0a      	ldr	r3, [pc, #40]	; (8002dd8 <BSP_I2C4_DeInit+0x40>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10b      	bne.n	8002dcc <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 8002db4:	4809      	ldr	r0, [pc, #36]	; (8002ddc <BSP_I2C4_DeInit+0x44>)
 8002db6:	f000 fb9b 	bl	80034f0 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8002dba:	4808      	ldr	r0, [pc, #32]	; (8002ddc <BSP_I2C4_DeInit+0x44>)
 8002dbc:	f005 ffac 	bl	8008d18 <HAL_I2C_DeInit>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d002      	beq.n	8002dcc <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8002dc6:	f06f 0307 	mvn.w	r3, #7
 8002dca:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8002dcc:	687b      	ldr	r3, [r7, #4]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	2405fcdc 	.word	0x2405fcdc
 8002ddc:	240606e4 	.word	0x240606e4

08002de0 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dea:	2300      	movs	r3, #0
 8002dec:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f005 feea 	bl	8008bf8 <HAL_I2C_Init>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	73fb      	strb	r3, [r7, #15]
 8002e2e:	e014      	b.n	8002e5a <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8002e30:	2300      	movs	r3, #0
 8002e32:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8002e34:	68b9      	ldr	r1, [r7, #8]
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f006 fcb2 	bl	80097a0 <HAL_I2CEx_ConfigAnalogFilter>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d002      	beq.n	8002e48 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	73fb      	strb	r3, [r7, #15]
 8002e46:	e008      	b.n	8002e5a <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8002e48:	2100      	movs	r1, #0
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f006 fcf3 	bl	8009836 <HAL_I2CEx_ConfigDigitalFilter>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8002e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <BSP_I2C4_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b088      	sub	sp, #32
 8002e68:	af02      	add	r7, sp, #8
 8002e6a:	60ba      	str	r2, [r7, #8]
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4603      	mov	r3, r0
 8002e70:	81fb      	strh	r3, [r7, #14]
 8002e72:	460b      	mov	r3, r1
 8002e74:	81bb      	strh	r3, [r7, #12]
 8002e76:	4613      	mov	r3, r2
 8002e78:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
 #if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 8002e7a:	89b9      	ldrh	r1, [r7, #12]
 8002e7c:	89f8      	ldrh	r0, [r7, #14]
 8002e7e:	88fb      	ldrh	r3, [r7, #6]
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	2202      	movs	r2, #2
 8002e86:	f000 fb57 	bl	8003538 <I2C4_WriteReg>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d102      	bne.n	8002e96 <BSP_I2C4_WriteReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 8002e90:	2300      	movs	r3, #0
 8002e92:	617b      	str	r3, [r7, #20]
 8002e94:	e00c      	b.n	8002eb0 <BSP_I2C4_WriteReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8002e96:	4809      	ldr	r0, [pc, #36]	; (8002ebc <BSP_I2C4_WriteReg16+0x58>)
 8002e98:	f006 f9be 	bl	8009218 <HAL_I2C_GetError>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d103      	bne.n	8002eaa <BSP_I2C4_WriteReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002ea2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	e002      	b.n	8002eb0 <BSP_I2C4_WriteReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002eaa:	f06f 0303 	mvn.w	r3, #3
 8002eae:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8002eb0:	697b      	ldr	r3, [r7, #20]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3718      	adds	r7, #24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	240606e4 	.word	0x240606e4

08002ec0 <BSP_I2C4_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af02      	add	r7, sp, #8
 8002ec6:	60ba      	str	r2, [r7, #8]
 8002ec8:	461a      	mov	r2, r3
 8002eca:	4603      	mov	r3, r0
 8002ecc:	81fb      	strh	r3, [r7, #14]
 8002ece:	460b      	mov	r3, r1
 8002ed0:	81bb      	strh	r3, [r7, #12]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 8002ed6:	89b9      	ldrh	r1, [r7, #12]
 8002ed8:	89f8      	ldrh	r0, [r7, #14]
 8002eda:	88fb      	ldrh	r3, [r7, #6]
 8002edc:	9300      	str	r3, [sp, #0]
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	2202      	movs	r2, #2
 8002ee2:	f000 fb4f 	bl	8003584 <I2C4_ReadReg>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d102      	bne.n	8002ef2 <BSP_I2C4_ReadReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 8002eec:	2300      	movs	r3, #0
 8002eee:	617b      	str	r3, [r7, #20]
 8002ef0:	e00c      	b.n	8002f0c <BSP_I2C4_ReadReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8002ef2:	4809      	ldr	r0, [pc, #36]	; (8002f18 <BSP_I2C4_ReadReg16+0x58>)
 8002ef4:	f006 f990 	bl	8009218 <HAL_I2C_GetError>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	d103      	bne.n	8002f06 <BSP_I2C4_ReadReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002efe:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002f02:	617b      	str	r3, [r7, #20]
 8002f04:	e002      	b.n	8002f0c <BSP_I2C4_ReadReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002f06:	f06f 0303 	mvn.w	r3, #3
 8002f0a:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8002f0c:	697b      	ldr	r3, [r7, #20]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	240606e4 	.word	0x240606e4

08002f1c <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8002f20:	f001 f9cc 	bl	80042bc <HAL_GetTick>
 8002f24:	4603      	mov	r3, r0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8002f36:	2300      	movs	r3, #0
 8002f38:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d06b      	beq.n	8003018 <I2C_GetTiming+0xec>
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d068      	beq.n	8003018 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8002f46:	2300      	movs	r3, #0
 8002f48:	613b      	str	r3, [r7, #16]
 8002f4a:	e060      	b.n	800300e <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8002f4c:	4a35      	ldr	r2, [pc, #212]	; (8003024 <I2C_GetTiming+0xf8>)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	212c      	movs	r1, #44	; 0x2c
 8002f52:	fb01 f303 	mul.w	r3, r1, r3
 8002f56:	4413      	add	r3, r2
 8002f58:	3304      	adds	r3, #4
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d352      	bcc.n	8003008 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8002f62:	4a30      	ldr	r2, [pc, #192]	; (8003024 <I2C_GetTiming+0xf8>)
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	212c      	movs	r1, #44	; 0x2c
 8002f68:	fb01 f303 	mul.w	r3, r1, r3
 8002f6c:	4413      	add	r3, r2
 8002f6e:	3308      	adds	r3, #8
 8002f70:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d847      	bhi.n	8003008 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8002f78:	6939      	ldr	r1, [r7, #16]
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f856 	bl	800302c <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8002f80:	6939      	ldr	r1, [r7, #16]
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f940 	bl	8003208 <I2C_Compute_SCLL_SCLH>
 8002f88:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2b7f      	cmp	r3, #127	; 0x7f
 8002f8e:	d842      	bhi.n	8003016 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8002f90:	4925      	ldr	r1, [pc, #148]	; (8003028 <I2C_GetTiming+0xfc>)
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	4613      	mov	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4413      	add	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8002fa2:	4821      	ldr	r0, [pc, #132]	; (8003028 <I2C_GetTiming+0xfc>)
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4413      	add	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4403      	add	r3, r0
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	051b      	lsls	r3, r3, #20
 8002fb6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8002fba:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8002fbc:	481a      	ldr	r0, [pc, #104]	; (8003028 <I2C_GetTiming+0xfc>)
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4403      	add	r3, r0
 8002fca:	3308      	adds	r3, #8
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	041b      	lsls	r3, r3, #16
 8002fd0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8002fd4:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8002fd6:	4814      	ldr	r0, [pc, #80]	; (8003028 <I2C_GetTiming+0xfc>)
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4413      	add	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4403      	add	r3, r0
 8002fe4:	330c      	adds	r3, #12
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	021b      	lsls	r3, r3, #8
 8002fea:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8002fec:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8002fee:	480e      	ldr	r0, [pc, #56]	; (8003028 <I2C_GetTiming+0xfc>)
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4413      	add	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4403      	add	r3, r0
 8002ffc:	3310      	adds	r3, #16
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003002:	430b      	orrs	r3, r1
 8003004:	617b      	str	r3, [r7, #20]
        }
        break;
 8003006:	e006      	b.n	8003016 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	3301      	adds	r3, #1
 800300c:	613b      	str	r3, [r7, #16]
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	2b02      	cmp	r3, #2
 8003012:	d99b      	bls.n	8002f4c <I2C_GetTiming+0x20>
 8003014:	e000      	b.n	8003018 <I2C_GetTiming+0xec>
        break;
 8003016:	bf00      	nop
      }
    }
  }

  return ret;
 8003018:	697b      	ldr	r3, [r7, #20]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	0801045c 	.word	0x0801045c
 8003028:	2405fce0 	.word	0x2405fce0

0800302c <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800302c:	b480      	push	{r7}
 800302e:	b08f      	sub	sp, #60	; 0x3c
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8003036:	2310      	movs	r3, #16
 8003038:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	085a      	lsrs	r2, r3, #1
 800303e:	4b6e      	ldr	r3, [pc, #440]	; (80031f8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8003040:	4413      	add	r3, r2
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	fbb3 f3f2 	udiv	r3, r3, r2
 8003048:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800304a:	2332      	movs	r3, #50	; 0x32
 800304c:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 800304e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003052:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8003054:	4a69      	ldr	r2, [pc, #420]	; (80031fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	212c      	movs	r1, #44	; 0x2c
 800305a:	fb01 f303 	mul.w	r3, r1, r3
 800305e:	4413      	add	r3, r2
 8003060:	3324      	adds	r3, #36	; 0x24
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4618      	mov	r0, r3
 8003066:	4a65      	ldr	r2, [pc, #404]	; (80031fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	212c      	movs	r1, #44	; 0x2c
 800306c:	fb01 f303 	mul.w	r3, r1, r3
 8003070:	4413      	add	r3, r2
 8003072:	330c      	adds	r3, #12
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8003078:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800307a:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800307c:	495f      	ldr	r1, [pc, #380]	; (80031fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	202c      	movs	r0, #44	; 0x2c
 8003082:	fb00 f303 	mul.w	r3, r0, r3
 8003086:	440b      	add	r3, r1
 8003088:	3328      	adds	r3, #40	; 0x28
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	3303      	adds	r3, #3
 800308e:	69f9      	ldr	r1, [r7, #28]
 8003090:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003098:	4a58      	ldr	r2, [pc, #352]	; (80031fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	212c      	movs	r1, #44	; 0x2c
 800309e:	fb01 f303 	mul.w	r3, r1, r3
 80030a2:	4413      	add	r3, r2
 80030a4:	3310      	adds	r3, #16
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	4a54      	ldr	r2, [pc, #336]	; (80031fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	212c      	movs	r1, #44	; 0x2c
 80030b0:	fb01 f303 	mul.w	r3, r1, r3
 80030b4:	4413      	add	r3, r2
 80030b6:	3320      	adds	r3, #32
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80030bc:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80030be:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80030c0:	494e      	ldr	r1, [pc, #312]	; (80031fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	202c      	movs	r0, #44	; 0x2c
 80030c6:	fb00 f303 	mul.w	r3, r0, r3
 80030ca:	440b      	add	r3, r1
 80030cc:	3328      	adds	r3, #40	; 0x28
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	3304      	adds	r3, #4
 80030d2:	69f9      	ldr	r1, [r7, #28]
 80030d4:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 80030dc:	4a47      	ldr	r2, [pc, #284]	; (80031fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	212c      	movs	r1, #44	; 0x2c
 80030e2:	fb01 f303 	mul.w	r3, r1, r3
 80030e6:	4413      	add	r3, r2
 80030e8:	3320      	adds	r3, #32
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	4a43      	ldr	r2, [pc, #268]	; (80031fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	212c      	movs	r1, #44	; 0x2c
 80030f4:	fb01 f303 	mul.w	r3, r1, r3
 80030f8:	4413      	add	r3, r2
 80030fa:	3314      	adds	r3, #20
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4403      	add	r3, r0
 8003100:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8003102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003104:	2b00      	cmp	r3, #0
 8003106:	dc01      	bgt.n	800310c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8003108:	2300      	movs	r3, #0
 800310a:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 800310c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310e:	2b00      	cmp	r3, #0
 8003110:	dc01      	bgt.n	8003116 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8003112:	2300      	movs	r3, #0
 8003114:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8003116:	2300      	movs	r3, #0
 8003118:	62bb      	str	r3, [r7, #40]	; 0x28
 800311a:	e062      	b.n	80031e2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800311c:	2300      	movs	r3, #0
 800311e:	627b      	str	r3, [r7, #36]	; 0x24
 8003120:	e059      	b.n	80031d6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	3301      	adds	r3, #1
 8003126:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003128:	3201      	adds	r2, #1
 800312a:	fb03 f202 	mul.w	r2, r3, r2
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	fb02 f303 	mul.w	r3, r2, r3
 8003134:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	429a      	cmp	r2, r3
 800313c:	d348      	bcc.n	80031d0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800313e:	2300      	movs	r3, #0
 8003140:	623b      	str	r3, [r7, #32]
 8003142:	e042      	b.n	80031ca <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8003144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003146:	3301      	adds	r3, #1
 8003148:	6a3a      	ldr	r2, [r7, #32]
 800314a:	fb03 f202 	mul.w	r2, r3, r2
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	fb02 f303 	mul.w	r3, r2, r3
 8003154:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8003156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	429a      	cmp	r2, r3
 800315c:	d332      	bcc.n	80031c4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800315e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	429a      	cmp	r2, r3
 8003164:	d82e      	bhi.n	80031c4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 8003166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800316a:	429a      	cmp	r2, r3
 800316c:	d02a      	beq.n	80031c4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800316e:	4b24      	ldr	r3, [pc, #144]	; (8003200 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	4924      	ldr	r1, [pc, #144]	; (8003204 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8003174:	4613      	mov	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003180:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8003182:	4b1f      	ldr	r3, [pc, #124]	; (8003200 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	491f      	ldr	r1, [pc, #124]	; (8003204 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8003188:	4613      	mov	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	3304      	adds	r3, #4
 8003194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003196:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8003198:	4b19      	ldr	r3, [pc, #100]	; (8003200 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	4919      	ldr	r1, [pc, #100]	; (8003204 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800319e:	4613      	mov	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	440b      	add	r3, r1
 80031a8:	3308      	adds	r3, #8
 80031aa:	6a3a      	ldr	r2, [r7, #32]
 80031ac:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 80031ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b0:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 80031b2:	4b13      	ldr	r3, [pc, #76]	; (8003200 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	3301      	adds	r3, #1
 80031b8:	4a11      	ldr	r2, [pc, #68]	; (8003200 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80031ba:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80031bc:	4b10      	ldr	r3, [pc, #64]	; (8003200 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2b7f      	cmp	r3, #127	; 0x7f
 80031c2:	d812      	bhi.n	80031ea <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	3301      	adds	r3, #1
 80031c8:	623b      	str	r3, [r7, #32]
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	2b0f      	cmp	r3, #15
 80031ce:	d9b9      	bls.n	8003144 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	3301      	adds	r3, #1
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	2b0f      	cmp	r3, #15
 80031da:	d9a2      	bls.n	8003122 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80031dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031de:	3301      	adds	r3, #1
 80031e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80031e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e4:	2b0f      	cmp	r3, #15
 80031e6:	d999      	bls.n	800311c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 80031e8:	e000      	b.n	80031ec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 80031ea:	bf00      	nop
          }
        }
      }
    }
  }
}
 80031ec:	373c      	adds	r7, #60	; 0x3c
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	3b9aca00 	.word	0x3b9aca00
 80031fc:	0801045c 	.word	0x0801045c
 8003200:	240606e0 	.word	0x240606e0
 8003204:	2405fce0 	.word	0x2405fce0

08003208 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8003208:	b480      	push	{r7}
 800320a:	b093      	sub	sp, #76	; 0x4c
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 8003212:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003216:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	085a      	lsrs	r2, r3, #1
 800321c:	4b7a      	ldr	r3, [pc, #488]	; (8003408 <I2C_Compute_SCLL_SCLH+0x200>)
 800321e:	4413      	add	r3, r2
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	fbb3 f3f2 	udiv	r3, r3, r2
 8003226:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8003228:	4a78      	ldr	r2, [pc, #480]	; (800340c <I2C_Compute_SCLL_SCLH+0x204>)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	212c      	movs	r1, #44	; 0x2c
 800322e:	fb01 f303 	mul.w	r3, r1, r3
 8003232:	4413      	add	r3, r2
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	085a      	lsrs	r2, r3, #1
 8003238:	4b73      	ldr	r3, [pc, #460]	; (8003408 <I2C_Compute_SCLL_SCLH+0x200>)
 800323a:	4413      	add	r3, r2
 800323c:	4973      	ldr	r1, [pc, #460]	; (800340c <I2C_Compute_SCLL_SCLH+0x204>)
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	202c      	movs	r0, #44	; 0x2c
 8003242:	fb00 f202 	mul.w	r2, r0, r2
 8003246:	440a      	add	r2, r1
 8003248:	6812      	ldr	r2, [r2, #0]
 800324a:	fbb3 f3f2 	udiv	r3, r3, r2
 800324e:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8003250:	2332      	movs	r3, #50	; 0x32
 8003252:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8003254:	4a6d      	ldr	r2, [pc, #436]	; (800340c <I2C_Compute_SCLL_SCLH+0x204>)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	212c      	movs	r1, #44	; 0x2c
 800325a:	fb01 f303 	mul.w	r3, r1, r3
 800325e:	4413      	add	r3, r2
 8003260:	3328      	adds	r3, #40	; 0x28
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003266:	fb02 f303 	mul.w	r3, r2, r3
 800326a:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 800326c:	4a67      	ldr	r2, [pc, #412]	; (800340c <I2C_Compute_SCLL_SCLH+0x204>)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	212c      	movs	r1, #44	; 0x2c
 8003272:	fb01 f303 	mul.w	r3, r1, r3
 8003276:	4413      	add	r3, r2
 8003278:	3304      	adds	r3, #4
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a62      	ldr	r2, [pc, #392]	; (8003408 <I2C_Compute_SCLL_SCLH+0x200>)
 800327e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003282:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8003284:	4a61      	ldr	r2, [pc, #388]	; (800340c <I2C_Compute_SCLL_SCLH+0x204>)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	212c      	movs	r1, #44	; 0x2c
 800328a:	fb01 f303 	mul.w	r3, r1, r3
 800328e:	4413      	add	r3, r2
 8003290:	3308      	adds	r3, #8
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a5c      	ldr	r2, [pc, #368]	; (8003408 <I2C_Compute_SCLL_SCLH+0x200>)
 8003296:	fbb2 f3f3 	udiv	r3, r2, r3
 800329a:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 800329c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329e:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80032a0:	2300      	movs	r3, #0
 80032a2:	637b      	str	r3, [r7, #52]	; 0x34
 80032a4:	e0a3      	b.n	80033ee <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80032a6:	495a      	ldr	r1, [pc, #360]	; (8003410 <I2C_Compute_SCLL_SCLH+0x208>)
 80032a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	1c5a      	adds	r2, r3, #1
 80032b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ba:	fb02 f303 	mul.w	r3, r2, r3
 80032be:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80032c0:	2300      	movs	r3, #0
 80032c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032c4:	e08c      	b.n	80033e0 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80032c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032c8:	6a3b      	ldr	r3, [r7, #32]
 80032ca:	441a      	add	r2, r3
 80032cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ce:	3301      	adds	r3, #1
 80032d0:	6979      	ldr	r1, [r7, #20]
 80032d2:	fb03 f101 	mul.w	r1, r3, r1
 80032d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	440b      	add	r3, r1
 80032dc:	4413      	add	r3, r2
 80032de:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80032e0:	4a4a      	ldr	r2, [pc, #296]	; (800340c <I2C_Compute_SCLL_SCLH+0x204>)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	212c      	movs	r1, #44	; 0x2c
 80032e6:	fb01 f303 	mul.w	r3, r1, r3
 80032ea:	4413      	add	r3, r2
 80032ec:	3318      	adds	r3, #24
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d971      	bls.n	80033da <I2C_Compute_SCLL_SCLH+0x1d2>
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fa:	1ad2      	subs	r2, r2, r3
 80032fc:	6a3b      	ldr	r3, [r7, #32]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	089b      	lsrs	r3, r3, #2
 8003302:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003304:	429a      	cmp	r2, r3
 8003306:	d268      	bcs.n	80033da <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003308:	2300      	movs	r3, #0
 800330a:	63bb      	str	r3, [r7, #56]	; 0x38
 800330c:	e062      	b.n	80033d4 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800330e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	441a      	add	r2, r3
 8003314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003316:	3301      	adds	r3, #1
 8003318:	6979      	ldr	r1, [r7, #20]
 800331a:	fb03 f101 	mul.w	r1, r3, r1
 800331e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	440b      	add	r3, r1
 8003324:	4413      	add	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	441a      	add	r2, r3
 800332e:	4937      	ldr	r1, [pc, #220]	; (800340c <I2C_Compute_SCLL_SCLH+0x204>)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	202c      	movs	r0, #44	; 0x2c
 8003334:	fb00 f303 	mul.w	r3, r0, r3
 8003338:	440b      	add	r3, r1
 800333a:	3320      	adds	r3, #32
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	441a      	add	r2, r3
 8003340:	4932      	ldr	r1, [pc, #200]	; (800340c <I2C_Compute_SCLL_SCLH+0x204>)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	202c      	movs	r0, #44	; 0x2c
 8003346:	fb00 f303 	mul.w	r3, r0, r3
 800334a:	440b      	add	r3, r1
 800334c:	3324      	adds	r3, #36	; 0x24
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4413      	add	r3, r2
 8003352:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	429a      	cmp	r2, r3
 800335a:	d338      	bcc.n	80033ce <I2C_Compute_SCLL_SCLH+0x1c6>
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	429a      	cmp	r2, r3
 8003362:	d834      	bhi.n	80033ce <I2C_Compute_SCLL_SCLH+0x1c6>
 8003364:	4a29      	ldr	r2, [pc, #164]	; (800340c <I2C_Compute_SCLL_SCLH+0x204>)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	212c      	movs	r1, #44	; 0x2c
 800336a:	fb01 f303 	mul.w	r3, r1, r3
 800336e:	4413      	add	r3, r2
 8003370:	331c      	adds	r3, #28
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	429a      	cmp	r2, r3
 8003378:	d329      	bcc.n	80033ce <I2C_Compute_SCLL_SCLH+0x1c6>
 800337a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	429a      	cmp	r2, r3
 8003380:	d225      	bcs.n	80033ce <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8003382:	68ba      	ldr	r2, [r7, #8]
 8003384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 800338a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338c:	2b00      	cmp	r3, #0
 800338e:	da02      	bge.n	8003396 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8003390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003392:	425b      	negs	r3, r3
 8003394:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8003396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003398:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800339a:	429a      	cmp	r2, r3
 800339c:	d917      	bls.n	80033ce <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800339e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a0:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 80033a2:	491b      	ldr	r1, [pc, #108]	; (8003410 <I2C_Compute_SCLL_SCLH+0x208>)
 80033a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033a6:	4613      	mov	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	440b      	add	r3, r1
 80033b0:	3310      	adds	r3, #16
 80033b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033b4:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 80033b6:	4916      	ldr	r1, [pc, #88]	; (8003410 <I2C_Compute_SCLL_SCLH+0x208>)
 80033b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033ba:	4613      	mov	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4413      	add	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	440b      	add	r3, r1
 80033c4:	330c      	adds	r3, #12
 80033c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033c8:	601a      	str	r2, [r3, #0]
              ret = count;
 80033ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033cc:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80033ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d0:	3301      	adds	r3, #1
 80033d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80033d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d6:	2bff      	cmp	r3, #255	; 0xff
 80033d8:	d999      	bls.n	800330e <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80033da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033dc:	3301      	adds	r3, #1
 80033de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033e2:	2bff      	cmp	r3, #255	; 0xff
 80033e4:	f67f af6f 	bls.w	80032c6 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80033e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ea:	3301      	adds	r3, #1
 80033ec:	637b      	str	r3, [r7, #52]	; 0x34
 80033ee:	4b09      	ldr	r3, [pc, #36]	; (8003414 <I2C_Compute_SCLL_SCLH+0x20c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033f4:	429a      	cmp	r2, r3
 80033f6:	f4ff af56 	bcc.w	80032a6 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 80033fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	374c      	adds	r7, #76	; 0x4c
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	3b9aca00 	.word	0x3b9aca00
 800340c:	0801045c 	.word	0x0801045c
 8003410:	2405fce0 	.word	0x2405fce0
 8003414:	240606e0 	.word	0x240606e0

08003418 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b08a      	sub	sp, #40	; 0x28
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8003420:	4b31      	ldr	r3, [pc, #196]	; (80034e8 <I2C4_MspInit+0xd0>)
 8003422:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003426:	4a30      	ldr	r2, [pc, #192]	; (80034e8 <I2C4_MspInit+0xd0>)
 8003428:	f043 0308 	orr.w	r3, r3, #8
 800342c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003430:	4b2d      	ldr	r3, [pc, #180]	; (80034e8 <I2C4_MspInit+0xd0>)
 8003432:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003436:	f003 0308 	and.w	r3, r3, #8
 800343a:	613b      	str	r3, [r7, #16]
 800343c:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800343e:	4b2a      	ldr	r3, [pc, #168]	; (80034e8 <I2C4_MspInit+0xd0>)
 8003440:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003444:	4a28      	ldr	r2, [pc, #160]	; (80034e8 <I2C4_MspInit+0xd0>)
 8003446:	f043 0308 	orr.w	r3, r3, #8
 800344a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800344e:	4b26      	ldr	r3, [pc, #152]	; (80034e8 <I2C4_MspInit+0xd0>)
 8003450:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	60fb      	str	r3, [r7, #12]
 800345a:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800345c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003460:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8003462:	2312      	movs	r3, #18
 8003464:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003466:	2300      	movs	r3, #0
 8003468:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 800346a:	2302      	movs	r3, #2
 800346c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800346e:	2304      	movs	r3, #4
 8003470:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8003472:	f107 0314 	add.w	r3, r7, #20
 8003476:	4619      	mov	r1, r3
 8003478:	481c      	ldr	r0, [pc, #112]	; (80034ec <I2C4_MspInit+0xd4>)
 800347a:	f005 f8e9 	bl	8008650 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800347e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003482:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8003484:	2312      	movs	r3, #18
 8003486:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003488:	2300      	movs	r3, #0
 800348a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 800348c:	2302      	movs	r3, #2
 800348e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8003490:	2304      	movs	r3, #4
 8003492:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8003494:	f107 0314 	add.w	r3, r7, #20
 8003498:	4619      	mov	r1, r3
 800349a:	4814      	ldr	r0, [pc, #80]	; (80034ec <I2C4_MspInit+0xd4>)
 800349c:	f005 f8d8 	bl	8008650 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 80034a0:	4b11      	ldr	r3, [pc, #68]	; (80034e8 <I2C4_MspInit+0xd0>)
 80034a2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80034a6:	4a10      	ldr	r2, [pc, #64]	; (80034e8 <I2C4_MspInit+0xd0>)
 80034a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ac:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80034b0:	4b0d      	ldr	r3, [pc, #52]	; (80034e8 <I2C4_MspInit+0xd0>)
 80034b2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80034b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ba:	60bb      	str	r3, [r7, #8]
 80034bc:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 80034be:	4b0a      	ldr	r3, [pc, #40]	; (80034e8 <I2C4_MspInit+0xd0>)
 80034c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034c4:	4a08      	ldr	r2, [pc, #32]	; (80034e8 <I2C4_MspInit+0xd0>)
 80034c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ca:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 80034ce:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <I2C4_MspInit+0xd0>)
 80034d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034d4:	4a04      	ldr	r2, [pc, #16]	; (80034e8 <I2C4_MspInit+0xd0>)
 80034d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034da:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 80034de:	bf00      	nop
 80034e0:	3728      	adds	r7, #40	; 0x28
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	58024400 	.word	0x58024400
 80034ec:	58020c00 	.word	0x58020c00

080034f0 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b088      	sub	sp, #32
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 80034f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034fc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	4619      	mov	r1, r3
 8003502:	480b      	ldr	r0, [pc, #44]	; (8003530 <I2C4_MspDeInit+0x40>)
 8003504:	f005 fa54 	bl	80089b0 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 8003508:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800350c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	4619      	mov	r1, r3
 8003512:	4807      	ldr	r0, [pc, #28]	; (8003530 <I2C4_MspDeInit+0x40>)
 8003514:	f005 fa4c 	bl	80089b0 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8003518:	4b06      	ldr	r3, [pc, #24]	; (8003534 <I2C4_MspDeInit+0x44>)
 800351a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800351e:	4a05      	ldr	r2, [pc, #20]	; (8003534 <I2C4_MspDeInit+0x44>)
 8003520:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003524:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 8003528:	bf00      	nop
 800352a:	3720      	adds	r7, #32
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	58020c00 	.word	0x58020c00
 8003534:	58024400 	.word	0x58024400

08003538 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b088      	sub	sp, #32
 800353c:	af04      	add	r7, sp, #16
 800353e:	607b      	str	r3, [r7, #4]
 8003540:	4603      	mov	r3, r0
 8003542:	81fb      	strh	r3, [r7, #14]
 8003544:	460b      	mov	r3, r1
 8003546:	81bb      	strh	r3, [r7, #12]
 8003548:	4613      	mov	r3, r2
 800354a:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800354c:	8978      	ldrh	r0, [r7, #10]
 800354e:	89ba      	ldrh	r2, [r7, #12]
 8003550:	89f9      	ldrh	r1, [r7, #14]
 8003552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003556:	9302      	str	r3, [sp, #8]
 8003558:	8b3b      	ldrh	r3, [r7, #24]
 800355a:	9301      	str	r3, [sp, #4]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	4603      	mov	r3, r0
 8003562:	4807      	ldr	r0, [pc, #28]	; (8003580 <I2C4_WriteReg+0x48>)
 8003564:	f005 fc1c 	bl	8008da0 <HAL_I2C_Mem_Write>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800356e:	2300      	movs	r3, #0
 8003570:	e001      	b.n	8003576 <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8003572:	f06f 0307 	mvn.w	r3, #7
}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	240606e4 	.word	0x240606e4

08003584 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b088      	sub	sp, #32
 8003588:	af04      	add	r7, sp, #16
 800358a:	607b      	str	r3, [r7, #4]
 800358c:	4603      	mov	r3, r0
 800358e:	81fb      	strh	r3, [r7, #14]
 8003590:	460b      	mov	r3, r1
 8003592:	81bb      	strh	r3, [r7, #12]
 8003594:	4613      	mov	r3, r2
 8003596:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003598:	8978      	ldrh	r0, [r7, #10]
 800359a:	89ba      	ldrh	r2, [r7, #12]
 800359c:	89f9      	ldrh	r1, [r7, #14]
 800359e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035a2:	9302      	str	r3, [sp, #8]
 80035a4:	8b3b      	ldrh	r3, [r7, #24]
 80035a6:	9301      	str	r3, [sp, #4]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	4603      	mov	r3, r0
 80035ae:	4807      	ldr	r0, [pc, #28]	; (80035cc <I2C4_ReadReg+0x48>)
 80035b0:	f005 fd0a 	bl	8008fc8 <HAL_I2C_Mem_Read>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80035ba:	2300      	movs	r3, #0
 80035bc:	e001      	b.n	80035c2 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80035be:	f06f 0307 	mvn.w	r3, #7
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	240606e4 	.word	0x240606e4

080035d0 <BSP_CAMERA_Init>:
  *         naming QQVGA, QVGA, VGA ...
  * @param  PixelFormat Capture pixel format
  * @retval BSP status
  */
int32_t BSP_CAMERA_Init(uint32_t Instance, uint32_t Resolution, uint32_t PixelFormat)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80035dc:	2300      	movs	r3, #0
 80035de:	617b      	str	r3, [r7, #20]

#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif /*USE_BSP_IO_CLASS*/

  if(Instance >= CAMERA_INSTANCES_NBR)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <BSP_CAMERA_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80035e6:	f06f 0301 	mvn.w	r3, #1
 80035ea:	617b      	str	r3, [r7, #20]
 80035ec:	e035      	b.n	800365a <BSP_CAMERA_Init+0x8a>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#else
    /* DCMI Initialization */
    DCMI_MspInit(&hcamera_dcmi);
 80035ee:	481d      	ldr	r0, [pc, #116]	; (8003664 <BSP_CAMERA_Init+0x94>)
 80035f0:	f000 fa4a 	bl	8003a88 <DCMI_MspInit>
#endif
    /* Initialize the camera driver structure */
    if(MX_DCMI_Init(&hcamera_dcmi) != HAL_OK)
 80035f4:	481b      	ldr	r0, [pc, #108]	; (8003664 <BSP_CAMERA_Init+0x94>)
 80035f6:	f000 f839 	bl	800366c <MX_DCMI_Init>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d003      	beq.n	8003608 <BSP_CAMERA_Init+0x38>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003600:	f06f 0303 	mvn.w	r3, #3
 8003604:	617b      	str	r3, [r7, #20]
 8003606:	e028      	b.n	800365a <BSP_CAMERA_Init+0x8a>
    }
    else if(BSP_CAMERA_HwReset(0) != BSP_ERROR_NONE)
 8003608:	2000      	movs	r0, #0
 800360a:	f000 f97b 	bl	8003904 <BSP_CAMERA_HwReset>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <BSP_CAMERA_Init+0x4c>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8003614:	f06f 0307 	mvn.w	r3, #7
 8003618:	617b      	str	r3, [r7, #20]
 800361a:	e01e      	b.n	800365a <BSP_CAMERA_Init+0x8a>
          ret = OV5640_Probe(Resolution, PixelFormat);
        }
#endif /* USE_CAMERA_SENSOR_OV5640 */
#else
#if (USE_CAMERA_SENSOR_OV5640 == 1)
        ret = OV5640_Probe(Resolution, PixelFormat);
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	68b8      	ldr	r0, [r7, #8]
 8003620:	f000 fb2e 	bl	8003c80 <OV5640_Probe>
 8003624:	6178      	str	r0, [r7, #20]
#endif /* USE_CAMERA_SENSOR_OV5640 */
#endif /* USE_CAMERA_SENSOR_S5K5CAG */

        if(ret != BSP_ERROR_NONE)
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <BSP_CAMERA_Init+0x64>
        {
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800362c:	f06f 0306 	mvn.w	r3, #6
 8003630:	617b      	str	r3, [r7, #20]
 8003632:	e012      	b.n	800365a <BSP_CAMERA_Init+0x8a>
          else
          {
            ret = BSP_ERROR_NONE;
          }
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS == 1) */
          Camera_Ctx[Instance].Resolution = Resolution;
 8003634:	490c      	ldr	r1, [pc, #48]	; (8003668 <BSP_CAMERA_Init+0x98>)
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	4613      	mov	r3, r2
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	4413      	add	r3, r2
 800363e:	011b      	lsls	r3, r3, #4
 8003640:	440b      	add	r3, r1
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	601a      	str	r2, [r3, #0]
          Camera_Ctx[Instance].PixelFormat = PixelFormat;
 8003646:	4908      	ldr	r1, [pc, #32]	; (8003668 <BSP_CAMERA_Init+0x98>)
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	4613      	mov	r3, r2
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	4413      	add	r3, r2
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	440b      	add	r3, r1
 8003654:	3304      	adds	r3, #4
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	601a      	str	r2, [r3, #0]
#endif
    }
  }

  /* BSP status */
  return ret;
 800365a:	697b      	ldr	r3, [r7, #20]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	2406073c 	.word	0x2406073c
 8003668:	2406078c 	.word	0x2406078c

0800366c <MX_DCMI_Init>:
  * @param  hdcmi  DCMI handle
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_DCMI_Init(DCMI_HandleTypeDef* hdcmi)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /*** Configures the DCMI to interface with the camera module ***/
  /* DCMI configuration */
  hdcmi->Instance              = DCMI;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a16      	ldr	r2, [pc, #88]	; (80036d0 <MX_DCMI_Init+0x64>)
 8003678:	601a      	str	r2, [r3, #0]
  hdcmi->Init.CaptureRate      = DCMI_CR_ALL_FRAME;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	615a      	str	r2, [r3, #20]
  hdcmi->Init.HSPolarity       = DCMI_HSPOLARITY_HIGH;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2240      	movs	r2, #64	; 0x40
 8003684:	611a      	str	r2, [r3, #16]
  hdcmi->Init.SynchroMode      = DCMI_SYNCHRO_HARDWARE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	605a      	str	r2, [r3, #4]
  hdcmi->Init.VSPolarity       = DCMI_VSPOLARITY_HIGH;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2280      	movs	r2, #128	; 0x80
 8003690:	60da      	str	r2, [r3, #12]
  hdcmi->Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	619a      	str	r2, [r3, #24]
  hdcmi->Init.PCKPolarity      = DCMI_PCKPOLARITY_RISING;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2220      	movs	r2, #32
 800369c:	609a      	str	r2, [r3, #8]

  hdcmi->Init.ByteSelectMode   = DCMI_BSM_ALL;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi->Init.ByteSelectStart  = DCMI_OEBS_ODD;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi->Init.LineSelectMode   = DCMI_LSM_ALL;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi->Init.LineSelectStart  = DCMI_OELS_ODD;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	631a      	str	r2, [r3, #48]	; 0x30

  if(HAL_DCMI_Init(hdcmi) != HAL_OK)
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 ff40 	bl	800453c <HAL_DCMI_Init>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <MX_DCMI_Init+0x5a>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e000      	b.n	80036c8 <MX_DCMI_Init+0x5c>
  }
  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3708      	adds	r7, #8
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	48020000 	.word	0x48020000

080036d4 <BSP_CAMERA_Start>:
  * @param  pBff     pointer to the camera output buffer
  * @param  Mode CAMERA_MODE_CONTINUOUS or CAMERA_MODE_SNAPSHOT
  * @retval BSP status
  */
int32_t BSP_CAMERA_Start(uint32_t Instance, uint8_t *pBff, uint32_t Mode)
{
 80036d4:	b590      	push	{r4, r7, lr}
 80036d6:	b087      	sub	sp, #28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <BSP_CAMERA_Start+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80036e6:	f06f 0301 	mvn.w	r3, #1
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	e022      	b.n	8003734 <BSP_CAMERA_Start+0x60>
  }
  else if(HAL_DCMI_Start_DMA(&hcamera_dcmi, Mode, (uint32_t)pBff, (uint32_t)GetSize(Camera_Ctx[Instance].Resolution, Camera_Ctx[Instance].PixelFormat)) != HAL_OK)
 80036ee:	68bc      	ldr	r4, [r7, #8]
 80036f0:	4913      	ldr	r1, [pc, #76]	; (8003740 <BSP_CAMERA_Start+0x6c>)
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	4613      	mov	r3, r2
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	4413      	add	r3, r2
 80036fa:	011b      	lsls	r3, r3, #4
 80036fc:	440b      	add	r3, r1
 80036fe:	6818      	ldr	r0, [r3, #0]
 8003700:	490f      	ldr	r1, [pc, #60]	; (8003740 <BSP_CAMERA_Start+0x6c>)
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	4613      	mov	r3, r2
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	4413      	add	r3, r2
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	440b      	add	r3, r1
 800370e:	3304      	adds	r3, #4
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4619      	mov	r1, r3
 8003714:	f000 f966 	bl	80039e4 <GetSize>
 8003718:	4603      	mov	r3, r0
 800371a:	4622      	mov	r2, r4
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	4809      	ldr	r0, [pc, #36]	; (8003744 <BSP_CAMERA_Start+0x70>)
 8003720:	f000 ff90 	bl	8004644 <HAL_DCMI_Start_DMA>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d002      	beq.n	8003730 <BSP_CAMERA_Start+0x5c>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 800372a:	f06f 0303 	mvn.w	r3, #3
 800372e:	e002      	b.n	8003736 <BSP_CAMERA_Start+0x62>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8003730:	2300      	movs	r3, #0
 8003732:	617b      	str	r3, [r7, #20]
  }

  /* Return BSP status */
  return ret;
 8003734:	697b      	ldr	r3, [r7, #20]
}
 8003736:	4618      	mov	r0, r3
 8003738:	371c      	adds	r7, #28
 800373a:	46bd      	mov	sp, r7
 800373c:	bd90      	pop	{r4, r7, pc}
 800373e:	bf00      	nop
 8003740:	2406078c 	.word	0x2406078c
 8003744:	2406073c 	.word	0x2406073c

08003748 <BSP_CAMERA_Stop>:
  * @brief  Stop the CAMERA capture
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_Stop(uint32_t Instance)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <BSP_CAMERA_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003756:	f06f 0301 	mvn.w	r3, #1
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	e00b      	b.n	8003776 <BSP_CAMERA_Stop+0x2e>
  }
  else if(HAL_DCMI_Stop(&hcamera_dcmi) != HAL_OK)
 800375e:	4808      	ldr	r0, [pc, #32]	; (8003780 <BSP_CAMERA_Stop+0x38>)
 8003760:	f001 f832 	bl	80047c8 <HAL_DCMI_Stop>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <BSP_CAMERA_Stop+0x2a>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 800376a:	f06f 0303 	mvn.w	r3, #3
 800376e:	60fb      	str	r3, [r7, #12]
 8003770:	e001      	b.n	8003776 <BSP_CAMERA_Stop+0x2e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8003772:	2300      	movs	r3, #0
 8003774:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 8003776:	68fb      	ldr	r3, [r7, #12]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	2406073c 	.word	0x2406073c

08003784 <BSP_CAMERA_SetLightMode>:
  * @param  Instance  Camera instance.
  * @param  LightMode Light Mode to be configured
  * @retval BSP status
  */
int32_t BSP_CAMERA_SetLightMode(uint32_t Instance, uint32_t LightMode)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <BSP_CAMERA_SetLightMode+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003794:	f06f 0301 	mvn.w	r3, #1
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	e023      	b.n	80037e4 <BSP_CAMERA_SetLightMode+0x60>
  }
  else if(Camera_Cap->LightMode == 0U)
 800379c:	4b14      	ldr	r3, [pc, #80]	; (80037f0 <BSP_CAMERA_SetLightMode+0x6c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d103      	bne.n	80037ae <BSP_CAMERA_SetLightMode+0x2a>
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80037a6:	f06f 030a 	mvn.w	r3, #10
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	e01a      	b.n	80037e4 <BSP_CAMERA_SetLightMode+0x60>
  }
  else if(Camera_Drv->SetLightMode(Camera_CompObj, LightMode) < 0)
 80037ae:	4b11      	ldr	r3, [pc, #68]	; (80037f4 <BSP_CAMERA_SetLightMode+0x70>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	4a10      	ldr	r2, [pc, #64]	; (80037f8 <BSP_CAMERA_SetLightMode+0x74>)
 80037b6:	6812      	ldr	r2, [r2, #0]
 80037b8:	6839      	ldr	r1, [r7, #0]
 80037ba:	4610      	mov	r0, r2
 80037bc:	4798      	blx	r3
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	da03      	bge.n	80037cc <BSP_CAMERA_SetLightMode+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80037c4:	f06f 0304 	mvn.w	r3, #4
 80037c8:	60fb      	str	r3, [r7, #12]
 80037ca:	e00b      	b.n	80037e4 <BSP_CAMERA_SetLightMode+0x60>
  }
  else
  {
    Camera_Ctx[Instance].LightMode = LightMode;
 80037cc:	490b      	ldr	r1, [pc, #44]	; (80037fc <BSP_CAMERA_SetLightMode+0x78>)
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	4613      	mov	r3, r2
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	4413      	add	r3, r2
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	440b      	add	r3, r1
 80037da:	3308      	adds	r3, #8
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	601a      	str	r2, [r3, #0]
    ret = BSP_ERROR_NONE;
 80037e0:	2300      	movs	r3, #0
 80037e2:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 80037e4:	68fb      	ldr	r3, [r7, #12]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	240607c0 	.word	0x240607c0
 80037f4:	240607bc 	.word	0x240607bc
 80037f8:	24060738 	.word	0x24060738
 80037fc:	2406078c 	.word	0x2406078c

08003800 <BSP_CAMERA_SetColorEffect>:
  * @param  Instance Camera instance.
  * @param  ColorEffect Effect to be configured
  * @retval BSP status
  */
int32_t BSP_CAMERA_SetColorEffect(uint32_t Instance, uint32_t ColorEffect)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d003      	beq.n	8003818 <BSP_CAMERA_SetColorEffect+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003810:	f06f 0301 	mvn.w	r3, #1
 8003814:	60fb      	str	r3, [r7, #12]
 8003816:	e023      	b.n	8003860 <BSP_CAMERA_SetColorEffect+0x60>
  }
  else if(Camera_Cap->ColorEffect == 0U)
 8003818:	4b14      	ldr	r3, [pc, #80]	; (800386c <BSP_CAMERA_SetColorEffect+0x6c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d103      	bne.n	800382a <BSP_CAMERA_SetColorEffect+0x2a>
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8003822:	f06f 030a 	mvn.w	r3, #10
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	e01a      	b.n	8003860 <BSP_CAMERA_SetColorEffect+0x60>
  }
  else if(Camera_Drv->SetColorEffect(Camera_CompObj, ColorEffect) < 0)
 800382a:	4b11      	ldr	r3, [pc, #68]	; (8003870 <BSP_CAMERA_SetColorEffect+0x70>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	4a10      	ldr	r2, [pc, #64]	; (8003874 <BSP_CAMERA_SetColorEffect+0x74>)
 8003832:	6812      	ldr	r2, [r2, #0]
 8003834:	6839      	ldr	r1, [r7, #0]
 8003836:	4610      	mov	r0, r2
 8003838:	4798      	blx	r3
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	da03      	bge.n	8003848 <BSP_CAMERA_SetColorEffect+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003840:	f06f 0304 	mvn.w	r3, #4
 8003844:	60fb      	str	r3, [r7, #12]
 8003846:	e00b      	b.n	8003860 <BSP_CAMERA_SetColorEffect+0x60>
  }
  else
  {
    Camera_Ctx[Instance].ColorEffect = ColorEffect;
 8003848:	490b      	ldr	r1, [pc, #44]	; (8003878 <BSP_CAMERA_SetColorEffect+0x78>)
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	4613      	mov	r3, r2
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	4413      	add	r3, r2
 8003852:	011b      	lsls	r3, r3, #4
 8003854:	440b      	add	r3, r1
 8003856:	330c      	adds	r3, #12
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	601a      	str	r2, [r3, #0]
    ret = BSP_ERROR_NONE;
 800385c:	2300      	movs	r3, #0
 800385e:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 8003860:	68fb      	ldr	r3, [r7, #12]
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	240607c0 	.word	0x240607c0
 8003870:	240607bc 	.word	0x240607bc
 8003874:	24060738 	.word	0x24060738
 8003878:	2406078c 	.word	0x2406078c

0800387c <BSP_CAMERA_SetHueDegree>:
  * @param  Instance   Camera instance.
  * @param  HueDegree  Hue Degree
  * @retval BSP status
  */
int32_t BSP_CAMERA_SetHueDegree(uint32_t Instance, int32_t HueDegree)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if((Instance >= CAMERA_INSTANCES_NBR) || ((HueDegree < CAMERA_HUEDEGREE_MIN) && (HueDegree > CAMERA_HUEDEGREE_MAX)))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d106      	bne.n	800389a <BSP_CAMERA_SetHueDegree+0x1e>
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	f113 0f06 	cmn.w	r3, #6
 8003892:	da06      	bge.n	80038a2 <BSP_CAMERA_SetHueDegree+0x26>
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	2b05      	cmp	r3, #5
 8003898:	dd03      	ble.n	80038a2 <BSP_CAMERA_SetHueDegree+0x26>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800389a:	f06f 0301 	mvn.w	r3, #1
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	e023      	b.n	80038ea <BSP_CAMERA_SetHueDegree+0x6e>
  }
  else if(Camera_Cap->HueDegree == 0U)
 80038a2:	4b14      	ldr	r3, [pc, #80]	; (80038f4 <BSP_CAMERA_SetHueDegree+0x78>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d103      	bne.n	80038b4 <BSP_CAMERA_SetHueDegree+0x38>
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80038ac:	f06f 030a 	mvn.w	r3, #10
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	e01a      	b.n	80038ea <BSP_CAMERA_SetHueDegree+0x6e>
  }
  else if(Camera_Drv->SetHueDegree(Camera_CompObj, HueDegree) < 0)
 80038b4:	4b10      	ldr	r3, [pc, #64]	; (80038f8 <BSP_CAMERA_SetHueDegree+0x7c>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	4a10      	ldr	r2, [pc, #64]	; (80038fc <BSP_CAMERA_SetHueDegree+0x80>)
 80038bc:	6812      	ldr	r2, [r2, #0]
 80038be:	6839      	ldr	r1, [r7, #0]
 80038c0:	4610      	mov	r0, r2
 80038c2:	4798      	blx	r3
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	da03      	bge.n	80038d2 <BSP_CAMERA_SetHueDegree+0x56>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80038ca:	f06f 0304 	mvn.w	r3, #4
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	e00b      	b.n	80038ea <BSP_CAMERA_SetHueDegree+0x6e>
  }
  else
  {
    Camera_Ctx[Instance].HueDegree = HueDegree;
 80038d2:	490b      	ldr	r1, [pc, #44]	; (8003900 <BSP_CAMERA_SetHueDegree+0x84>)
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	4613      	mov	r3, r2
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	4413      	add	r3, r2
 80038dc:	011b      	lsls	r3, r3, #4
 80038de:	440b      	add	r3, r1
 80038e0:	331c      	adds	r3, #28
 80038e2:	683a      	ldr	r2, [r7, #0]
 80038e4:	601a      	str	r2, [r3, #0]
    ret = BSP_ERROR_NONE;
 80038e6:	2300      	movs	r3, #0
 80038e8:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 80038ea:	68fb      	ldr	r3, [r7, #12]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	240607c0 	.word	0x240607c0
 80038f8:	240607bc 	.word	0x240607bc
 80038fc:	24060738 	.word	0x24060738
 8003900:	2406078c 	.word	0x2406078c

08003904 <BSP_CAMERA_HwReset>:
  * @brief  CAMERA hardware reset
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_HwReset(uint32_t Instance)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800390c:	2300      	movs	r3, #0
 800390e:	60fb      	str	r3, [r7, #12]
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <BSP_CAMERA_HwReset+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003916:	f06f 0301 	mvn.w	r3, #1
 800391a:	60fb      	str	r3, [r7, #12]
      }
    }
#endif
  }

  return ret;
 800391c:	68fb      	ldr	r3, [r7, #12]
}
 800391e:	4618      	mov	r0, r3
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <BSP_CAMERA_PwrDown>:
  * @brief  CAMERA power down
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_PwrDown(uint32_t Instance)
{
 800392a:	b480      	push	{r7}
 800392c:	b085      	sub	sp, #20
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003932:	2300      	movs	r3, #0
 8003934:	60fb      	str	r3, [r7, #12]
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d002      	beq.n	8003942 <BSP_CAMERA_PwrDown+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800393c:	f06f 0301 	mvn.w	r3, #1
 8003940:	60fb      	str	r3, [r7, #12]
      }
    }
#endif
  }

  return ret;
 8003942:	68fb      	ldr	r3, [r7, #12]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3714      	adds	r7, #20
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <BSP_CAMERA_LineEventCallback>:
  * @brief  Line Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_LineEventCallback(uint32_t Instance)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <BSP_CAMERA_VsyncEventCallback>:
  * @brief  Vsync Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_VsyncEventCallback(uint32_t Instance)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <BSP_CAMERA_ErrorCallback>:
  * @brief  Error callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_ErrorCallback(uint32_t Instance)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_DCMI_LineEventCallback>:
  * @brief  Line event callback
  * @param  hdcmi  pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_LineEventCallback(0);
 8003994:	2000      	movs	r0, #0
 8003996:	f7ff ffdb 	bl	8003950 <BSP_CAMERA_LineEventCallback>
}
 800399a:	bf00      	nop
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <HAL_DCMI_FrameEventCallback>:
  * @brief  Frame event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
 {
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b082      	sub	sp, #8
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_FrameEventCallback(0);
 80039aa:	2000      	movs	r0, #0
 80039ac:	f7fd fbf0 	bl	8001190 <BSP_CAMERA_FrameEventCallback>
}
 80039b0:	bf00      	nop
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HAL_DCMI_VsyncEventCallback>:
  * @brief  Vsync event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_VsyncEventCallback(0);
 80039c0:	2000      	movs	r0, #0
 80039c2:	f7ff ffcf 	bl	8003964 <BSP_CAMERA_VsyncEventCallback>
}
 80039c6:	bf00      	nop
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <HAL_DCMI_ErrorCallback>:
  * @brief  Error callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b082      	sub	sp, #8
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_ErrorCallback(0);
 80039d6:	2000      	movs	r0, #0
 80039d8:	f7ff ffce 	bl	8003978 <BSP_CAMERA_ErrorCallback>
}
 80039dc:	bf00      	nop
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <GetSize>:
  * @param  Resolution  the current resolution.
  * @param  PixelFormat Pixel format
  * @retval capture size in pixels unit.
  */
static int32_t GetSize(uint32_t Resolution, uint32_t PixelFormat)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  uint32_t size = 0;
 80039ee:	2300      	movs	r3, #0
 80039f0:	60fb      	str	r3, [r7, #12]
  uint32_t pf_div;
  if(PixelFormat == CAMERA_PF_RGB888)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d102      	bne.n	80039fe <GetSize+0x1a>
  {
    pf_div = 3; /* each pixel on 3 bytes so 3/4 words */
 80039f8:	2303      	movs	r3, #3
 80039fa:	60bb      	str	r3, [r7, #8]
 80039fc:	e001      	b.n	8003a02 <GetSize+0x1e>
  }
  else
  {
    pf_div = 2; /* each pixel on 2 bytes so 1/2 words*/
 80039fe:	2302      	movs	r3, #2
 8003a00:	60bb      	str	r3, [r7, #8]
  }
  /* Get capture size */
  switch (Resolution)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b04      	cmp	r3, #4
 8003a06:	d834      	bhi.n	8003a72 <GetSize+0x8e>
 8003a08:	a201      	add	r2, pc, #4	; (adr r2, 8003a10 <GetSize+0x2c>)
 8003a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0e:	bf00      	nop
 8003a10:	08003a25 	.word	0x08003a25
 8003a14:	08003a35 	.word	0x08003a35
 8003a18:	08003a45 	.word	0x08003a45
 8003a1c:	08003a55 	.word	0x08003a55
 8003a20:	08003a65 	.word	0x08003a65
  {
  case CAMERA_R160x120:
    size =  ((uint32_t)(160*120)*pf_div)/4U;
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8003a2a:	fb02 f303 	mul.w	r3, r2, r3
 8003a2e:	089b      	lsrs	r3, r3, #2
 8003a30:	60fb      	str	r3, [r7, #12]
    break;
 8003a32:	e01f      	b.n	8003a74 <GetSize+0x90>
  case CAMERA_R320x240:
    size =  ((uint32_t)(320*240)*pf_div)/4U;
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 8003a3a:	fb02 f303 	mul.w	r3, r2, r3
 8003a3e:	089b      	lsrs	r3, r3, #2
 8003a40:	60fb      	str	r3, [r7, #12]
    break;
 8003a42:	e017      	b.n	8003a74 <GetSize+0x90>
  case CAMERA_R480x272:
    size =  ((uint32_t)(480*272)*pf_div)/4U;
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	4613      	mov	r3, r2
 8003a48:	021b      	lsls	r3, r3, #8
 8003a4a:	1a9b      	subs	r3, r3, r2
 8003a4c:	025b      	lsls	r3, r3, #9
 8003a4e:	089b      	lsrs	r3, r3, #2
 8003a50:	60fb      	str	r3, [r7, #12]
    break;
 8003a52:	e00f      	b.n	8003a74 <GetSize+0x90>
  case CAMERA_R640x480:
    size =  ((uint32_t)(640*480)*pf_div)/4U;
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
 8003a5a:	fb02 f303 	mul.w	r3, r2, r3
 8003a5e:	089b      	lsrs	r3, r3, #2
 8003a60:	60fb      	str	r3, [r7, #12]
    break;
 8003a62:	e007      	b.n	8003a74 <GetSize+0x90>
  case CAMERA_R800x480:
    size =  ((uint32_t)(800*480)*pf_div)/4U;
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	4a07      	ldr	r2, [pc, #28]	; (8003a84 <GetSize+0xa0>)
 8003a68:	fb02 f303 	mul.w	r3, r2, r3
 8003a6c:	089b      	lsrs	r3, r3, #2
 8003a6e:	60fb      	str	r3, [r7, #12]
    break;
 8003a70:	e000      	b.n	8003a74 <GetSize+0x90>
  default:
    break;
 8003a72:	bf00      	nop
  }

  return (int32_t)size;
 8003a74:	68fb      	ldr	r3, [r7, #12]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3714      	adds	r7, #20
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	0005dc00 	.word	0x0005dc00

08003a88 <DCMI_MspInit>:
  * @brief  Initializes the DCMI MSP.
  * @param  hdcmi  DCMI handle
  * @retval None
  */
static void DCMI_MspInit(DCMI_HandleTypeDef *hdcmi)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b08e      	sub	sp, #56	; 0x38
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  static DMA_HandleTypeDef hdma_handler;
  GPIO_InitTypeDef gpio_init_structure;

  /*** Enable peripherals and GPIO clocks ***/
  /* Enable DCMI clock */
  __HAL_RCC_DCMI_CLK_ENABLE();
 8003a90:	4b73      	ldr	r3, [pc, #460]	; (8003c60 <DCMI_MspInit+0x1d8>)
 8003a92:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8003a96:	4a72      	ldr	r2, [pc, #456]	; (8003c60 <DCMI_MspInit+0x1d8>)
 8003a98:	f043 0301 	orr.w	r3, r3, #1
 8003a9c:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 8003aa0:	4b6f      	ldr	r3, [pc, #444]	; (8003c60 <DCMI_MspInit+0x1d8>)
 8003aa2:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	623b      	str	r3, [r7, #32]
 8003aac:	6a3b      	ldr	r3, [r7, #32]

  /* Enable DMA2 clock */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003aae:	4b6c      	ldr	r3, [pc, #432]	; (8003c60 <DCMI_MspInit+0x1d8>)
 8003ab0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8003ab4:	4a6a      	ldr	r2, [pc, #424]	; (8003c60 <DCMI_MspInit+0x1d8>)
 8003ab6:	f043 0302 	orr.w	r3, r3, #2
 8003aba:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8003abe:	4b68      	ldr	r3, [pc, #416]	; (8003c60 <DCMI_MspInit+0x1d8>)
 8003ac0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	61fb      	str	r3, [r7, #28]
 8003aca:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003acc:	4b64      	ldr	r3, [pc, #400]	; (8003c60 <DCMI_MspInit+0x1d8>)
 8003ace:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003ad2:	4a63      	ldr	r2, [pc, #396]	; (8003c60 <DCMI_MspInit+0x1d8>)
 8003ad4:	f043 0301 	orr.w	r3, r3, #1
 8003ad8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003adc:	4b60      	ldr	r3, [pc, #384]	; (8003c60 <DCMI_MspInit+0x1d8>)
 8003ade:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	61bb      	str	r3, [r7, #24]
 8003ae8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aea:	4b5d      	ldr	r3, [pc, #372]	; (8003c60 <DCMI_MspInit+0x1d8>)
 8003aec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003af0:	4a5b      	ldr	r2, [pc, #364]	; (8003c60 <DCMI_MspInit+0x1d8>)
 8003af2:	f043 0302 	orr.w	r3, r3, #2
 8003af6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003afa:	4b59      	ldr	r3, [pc, #356]	; (8003c60 <DCMI_MspInit+0x1d8>)
 8003afc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	617b      	str	r3, [r7, #20]
 8003b06:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b08:	4b55      	ldr	r3, [pc, #340]	; (8003c60 <DCMI_MspInit+0x1d8>)
 8003b0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003b0e:	4a54      	ldr	r2, [pc, #336]	; (8003c60 <DCMI_MspInit+0x1d8>)
 8003b10:	f043 0304 	orr.w	r3, r3, #4
 8003b14:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003b18:	4b51      	ldr	r3, [pc, #324]	; (8003c60 <DCMI_MspInit+0x1d8>)
 8003b1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003b1e:	f003 0304 	and.w	r3, r3, #4
 8003b22:	613b      	str	r3, [r7, #16]
 8003b24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b26:	4b4e      	ldr	r3, [pc, #312]	; (8003c60 <DCMI_MspInit+0x1d8>)
 8003b28:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003b2c:	4a4c      	ldr	r2, [pc, #304]	; (8003c60 <DCMI_MspInit+0x1d8>)
 8003b2e:	f043 0308 	orr.w	r3, r3, #8
 8003b32:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003b36:	4b4a      	ldr	r3, [pc, #296]	; (8003c60 <DCMI_MspInit+0x1d8>)
 8003b38:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003b3c:	f003 0308 	and.w	r3, r3, #8
 8003b40:	60fb      	str	r3, [r7, #12]
 8003b42:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003b44:	4b46      	ldr	r3, [pc, #280]	; (8003c60 <DCMI_MspInit+0x1d8>)
 8003b46:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003b4a:	4a45      	ldr	r2, [pc, #276]	; (8003c60 <DCMI_MspInit+0x1d8>)
 8003b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b50:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003b54:	4b42      	ldr	r3, [pc, #264]	; (8003c60 <DCMI_MspInit+0x1d8>)
 8003b56:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5e:	60bb      	str	r3, [r7, #8]
 8003b60:	68bb      	ldr	r3, [r7, #8]
 	 PG10	--->	DCMI_D2
   */

  /* Configure DCMI GPIO as alternate function */
  /* DCMI PIXCLK and HSYNC pins */
  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_6;
 8003b62:	2350      	movs	r3, #80	; 0x50
 8003b64:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003b66:	2302      	movs	r3, #2
 8003b68:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 8003b72:	230d      	movs	r3, #13
 8003b74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 8003b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	4839      	ldr	r0, [pc, #228]	; (8003c64 <DCMI_MspInit+0x1dc>)
 8003b7e:	f004 fd67 	bl	8008650 <HAL_GPIO_Init>

  /* DCMI D0, D1 pins */
  gpio_init_structure.Pin       = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 8003b82:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003b86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &gpio_init_structure);
 8003b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	4836      	ldr	r0, [pc, #216]	; (8003c68 <DCMI_MspInit+0x1e0>)
 8003b90:	f004 fd5e 	bl	8008650 <HAL_GPIO_Init>

  /* DCMI VSYNC, D2, D3 pins */
  gpio_init_structure.Pin       = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_11;
 8003b94:	f44f 632c 	mov.w	r3, #2752	; 0xac0
 8003b98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	4832      	ldr	r0, [pc, #200]	; (8003c6c <DCMI_MspInit+0x1e4>)
 8003ba2:	f004 fd55 	bl	8008650 <HAL_GPIO_Init>

  /* DCMI D5 pins */
  gpio_init_structure.Pin       = GPIO_PIN_3;
 8003ba6:	2308      	movs	r3, #8
 8003ba8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bae:	4619      	mov	r1, r3
 8003bb0:	482f      	ldr	r0, [pc, #188]	; (8003c70 <DCMI_MspInit+0x1e8>)
 8003bb2:	f004 fd4d 	bl	8008650 <HAL_GPIO_Init>

  /* DCMI D6, D7 pins */
  gpio_init_structure.Pin       = GPIO_PIN_10;
 8003bb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	482c      	ldr	r0, [pc, #176]	; (8003c74 <DCMI_MspInit+0x1ec>)
 8003bc4:	f004 fd44 	bl	8008650 <HAL_GPIO_Init>

  /*** Configure the DMA ***/
  /* Set the parameters to be configured */
  hdma_handler.Init.Request             = DMA_REQUEST_DCMI_PSSI;
 8003bc8:	4b2b      	ldr	r3, [pc, #172]	; (8003c78 <DCMI_MspInit+0x1f0>)
 8003bca:	224b      	movs	r2, #75	; 0x4b
 8003bcc:	605a      	str	r2, [r3, #4]
  hdma_handler.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8003bce:	4b2a      	ldr	r3, [pc, #168]	; (8003c78 <DCMI_MspInit+0x1f0>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	609a      	str	r2, [r3, #8]
  hdma_handler.Init.PeriphInc           = DMA_PINC_DISABLE;
 8003bd4:	4b28      	ldr	r3, [pc, #160]	; (8003c78 <DCMI_MspInit+0x1f0>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	60da      	str	r2, [r3, #12]
  hdma_handler.Init.MemInc              = DMA_MINC_ENABLE;
 8003bda:	4b27      	ldr	r3, [pc, #156]	; (8003c78 <DCMI_MspInit+0x1f0>)
 8003bdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003be0:	611a      	str	r2, [r3, #16]
  hdma_handler.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003be2:	4b25      	ldr	r3, [pc, #148]	; (8003c78 <DCMI_MspInit+0x1f0>)
 8003be4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003be8:	615a      	str	r2, [r3, #20]
  hdma_handler.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003bea:	4b23      	ldr	r3, [pc, #140]	; (8003c78 <DCMI_MspInit+0x1f0>)
 8003bec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003bf0:	619a      	str	r2, [r3, #24]
  hdma_handler.Init.Mode                = DMA_CIRCULAR;
 8003bf2:	4b21      	ldr	r3, [pc, #132]	; (8003c78 <DCMI_MspInit+0x1f0>)
 8003bf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bf8:	61da      	str	r2, [r3, #28]
  hdma_handler.Init.Priority            = DMA_PRIORITY_HIGH;
 8003bfa:	4b1f      	ldr	r3, [pc, #124]	; (8003c78 <DCMI_MspInit+0x1f0>)
 8003bfc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c00:	621a      	str	r2, [r3, #32]
  hdma_handler.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003c02:	4b1d      	ldr	r3, [pc, #116]	; (8003c78 <DCMI_MspInit+0x1f0>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_handler.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003c08:	4b1b      	ldr	r3, [pc, #108]	; (8003c78 <DCMI_MspInit+0x1f0>)
 8003c0a:	2203      	movs	r2, #3
 8003c0c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_handler.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003c0e:	4b1a      	ldr	r3, [pc, #104]	; (8003c78 <DCMI_MspInit+0x1f0>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_handler.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8003c14:	4b18      	ldr	r3, [pc, #96]	; (8003c78 <DCMI_MspInit+0x1f0>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	631a      	str	r2, [r3, #48]	; 0x30

  hdma_handler.Instance = DMA2_Stream1;
 8003c1a:	4b17      	ldr	r3, [pc, #92]	; (8003c78 <DCMI_MspInit+0x1f0>)
 8003c1c:	4a17      	ldr	r2, [pc, #92]	; (8003c7c <DCMI_MspInit+0x1f4>)
 8003c1e:	601a      	str	r2, [r3, #0]

  /* Associate the initialized DMA handle to the DCMI handle */
  __HAL_LINKDMA(hdcmi, DMA_Handle, hdma_handler);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a15      	ldr	r2, [pc, #84]	; (8003c78 <DCMI_MspInit+0x1f0>)
 8003c24:	649a      	str	r2, [r3, #72]	; 0x48
 8003c26:	4a14      	ldr	r2, [pc, #80]	; (8003c78 <DCMI_MspInit+0x1f0>)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6393      	str	r3, [r2, #56]	; 0x38

  /*** Configure the NVIC for DCMI and DMA ***/
  /* NVIC configuration for DCMI transfer complete interrupt */
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	210f      	movs	r1, #15
 8003c30:	204e      	movs	r0, #78	; 0x4e
 8003c32:	f000 fc4e 	bl	80044d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8003c36:	204e      	movs	r0, #78	; 0x4e
 8003c38:	f000 fc65 	bl	8004506 <HAL_NVIC_EnableIRQ>

  /* NVIC configuration for DMA2D transfer complete interrupt */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	210f      	movs	r1, #15
 8003c40:	2039      	movs	r0, #57	; 0x39
 8003c42:	f000 fc46 	bl	80044d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003c46:	2039      	movs	r0, #57	; 0x39
 8003c48:	f000 fc5d 	bl	8004506 <HAL_NVIC_EnableIRQ>

  /* Configure the DMA stream */
  (void)HAL_DMA_Init(hdcmi->DMA_Handle);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c50:	4618      	mov	r0, r3
 8003c52:	f000 ff4b 	bl	8004aec <HAL_DMA_Init>
}
 8003c56:	bf00      	nop
 8003c58:	3738      	adds	r7, #56	; 0x38
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	58024400 	.word	0x58024400
 8003c64:	58020000 	.word	0x58020000
 8003c68:	58020400 	.word	0x58020400
 8003c6c:	58020800 	.word	0x58020800
 8003c70:	58020c00 	.word	0x58020c00
 8003c74:	58021800 	.word	0x58021800
 8003c78:	240607c4 	.word	0x240607c4
 8003c7c:	40020428 	.word	0x40020428

08003c80 <OV5640_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t OV5640_Probe(uint32_t Resolution, uint32_t PixelFormat)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b08a      	sub	sp, #40	; 0x28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  OV5640_IO_t              IOCtx;
  uint32_t                  id;
  static OV5640_Object_t   OV5640Obj;

  /* Configure the audio driver */
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
 8003c8a:	2378      	movs	r3, #120	; 0x78
 8003c8c:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 8003c8e:	4b2c      	ldr	r3, [pc, #176]	; (8003d40 <OV5640_Probe+0xc0>)
 8003c90:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8003c92:	4b2c      	ldr	r3, [pc, #176]	; (8003d44 <OV5640_Probe+0xc4>)
 8003c94:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 8003c96:	4b2c      	ldr	r3, [pc, #176]	; (8003d48 <OV5640_Probe+0xc8>)
 8003c98:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 8003c9a:	4b2c      	ldr	r3, [pc, #176]	; (8003d4c <OV5640_Probe+0xcc>)
 8003c9c:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8003c9e:	4b2c      	ldr	r3, [pc, #176]	; (8003d50 <OV5640_Probe+0xd0>)
 8003ca0:	623b      	str	r3, [r7, #32]

  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 8003ca2:	f107 030c 	add.w	r3, r7, #12
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	482a      	ldr	r0, [pc, #168]	; (8003d54 <OV5640_Probe+0xd4>)
 8003caa:	f7fd fa87 	bl	80011bc <OV5640_RegisterBusIO>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d003      	beq.n	8003cbc <OV5640_Probe+0x3c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003cb4:	f06f 0304 	mvn.w	r3, #4
 8003cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cba:	e03c      	b.n	8003d36 <OV5640_Probe+0xb6>
  }
  else if(OV5640_ReadID(&OV5640Obj, &id) != OV5640_OK)
 8003cbc:	f107 0308 	add.w	r3, r7, #8
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4824      	ldr	r0, [pc, #144]	; (8003d54 <OV5640_Probe+0xd4>)
 8003cc4:	f7fd fece 	bl	8001a64 <OV5640_ReadID>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <OV5640_Probe+0x56>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003cce:	f06f 0304 	mvn.w	r3, #4
 8003cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd4:	e02f      	b.n	8003d36 <OV5640_Probe+0xb6>
  }
  else
  {
    if(id != OV5640_ID)
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	f245 6240 	movw	r2, #22080	; 0x5640
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d003      	beq.n	8003ce8 <OV5640_Probe+0x68>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003ce0:	f06f 0306 	mvn.w	r3, #6
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce6:	e026      	b.n	8003d36 <OV5640_Probe+0xb6>
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 8003ce8:	4b1b      	ldr	r3, [pc, #108]	; (8003d58 <OV5640_Probe+0xd8>)
 8003cea:	4a1c      	ldr	r2, [pc, #112]	; (8003d5c <OV5640_Probe+0xdc>)
 8003cec:	601a      	str	r2, [r3, #0]
      Camera_CompObj = &OV5640Obj;
 8003cee:	4b1c      	ldr	r3, [pc, #112]	; (8003d60 <OV5640_Probe+0xe0>)
 8003cf0:	4a18      	ldr	r2, [pc, #96]	; (8003d54 <OV5640_Probe+0xd4>)
 8003cf2:	601a      	str	r2, [r3, #0]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 8003cf4:	4b18      	ldr	r3, [pc, #96]	; (8003d58 <OV5640_Probe+0xd8>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a19      	ldr	r2, [pc, #100]	; (8003d60 <OV5640_Probe+0xe0>)
 8003cfc:	6810      	ldr	r0, [r2, #0]
 8003cfe:	683a      	ldr	r2, [r7, #0]
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	4798      	blx	r3
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <OV5640_Probe+0x92>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003d0a:	f06f 0304 	mvn.w	r3, #4
 8003d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d10:	e011      	b.n	8003d36 <OV5640_Probe+0xb6>
      }
	  else if(Camera_Drv->GetCapabilities(Camera_CompObj, Camera_Cap) != OV5640_OK)
 8003d12:	4b11      	ldr	r3, [pc, #68]	; (8003d58 <OV5640_Probe+0xd8>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	4a11      	ldr	r2, [pc, #68]	; (8003d60 <OV5640_Probe+0xe0>)
 8003d1a:	6812      	ldr	r2, [r2, #0]
 8003d1c:	4911      	ldr	r1, [pc, #68]	; (8003d64 <OV5640_Probe+0xe4>)
 8003d1e:	6809      	ldr	r1, [r1, #0]
 8003d20:	4610      	mov	r0, r2
 8003d22:	4798      	blx	r3
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <OV5640_Probe+0xb2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003d2a:	f06f 0304 	mvn.w	r3, #4
 8003d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d30:	e001      	b.n	8003d36 <OV5640_Probe+0xb6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8003d32:	2300      	movs	r3, #0
 8003d34:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 8003d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3728      	adds	r7, #40	; 0x28
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	08002d25 	.word	0x08002d25
 8003d44:	08002d99 	.word	0x08002d99
 8003d48:	08002ec1 	.word	0x08002ec1
 8003d4c:	08002e65 	.word	0x08002e65
 8003d50:	08002f1d 	.word	0x08002f1d
 8003d54:	2406083c 	.word	0x2406083c
 8003d58:	240607bc 	.word	0x240607bc
 8003d5c:	24000000 	.word	0x24000000
 8003d60:	24060738 	.word	0x24060738
 8003d64:	240607c0 	.word	0x240607c0

08003d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d6e:	4b0a      	ldr	r3, [pc, #40]	; (8003d98 <HAL_MspInit+0x30>)
 8003d70:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003d74:	4a08      	ldr	r2, [pc, #32]	; (8003d98 <HAL_MspInit+0x30>)
 8003d76:	f043 0302 	orr.w	r3, r3, #2
 8003d7a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8003d7e:	4b06      	ldr	r3, [pc, #24]	; (8003d98 <HAL_MspInit+0x30>)
 8003d80:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	607b      	str	r3, [r7, #4]
 8003d8a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	58024400 	.word	0x58024400

08003d9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003da0:	e7fe      	b.n	8003da0 <NMI_Handler+0x4>

08003da2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003da2:	b480      	push	{r7}
 8003da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003da6:	e7fe      	b.n	8003da6 <HardFault_Handler+0x4>

08003da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003dac:	e7fe      	b.n	8003dac <MemManage_Handler+0x4>

08003dae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003dae:	b480      	push	{r7}
 8003db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003db2:	e7fe      	b.n	8003db2 <BusFault_Handler+0x4>

08003db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003db8:	e7fe      	b.n	8003db8 <UsageFault_Handler+0x4>

08003dba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003dbe:	bf00      	nop
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003dcc:	bf00      	nop
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003dda:	bf00      	nop
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003de8:	f000 fa54 	bl	8004294 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003dec:	bf00      	nop
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8003df4:	4802      	ldr	r0, [pc, #8]	; (8003e00 <DMA1_Stream0_IRQHandler+0x10>)
 8003df6:	f002 f9d7 	bl	80061a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003dfa:	bf00      	nop
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	24000124 	.word	0x24000124

08003e04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003e08:	4802      	ldr	r0, [pc, #8]	; (8003e14 <USART1_IRQHandler+0x10>)
 8003e0a:	f009 fa01 	bl	800d210 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003e0e:	bf00      	nop
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	24060868 	.word	0x24060868

08003e18 <DCMI_PSSI_IRQHandler>:

/**
  * @brief This function handles DCMI and PSSI global interrupt.
  */
void DCMI_PSSI_IRQHandler(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_PSSI_IRQn 0 */

  /* USER CODE END DCMI_PSSI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8003e1c:	4802      	ldr	r0, [pc, #8]	; (8003e28 <DCMI_PSSI_IRQHandler+0x10>)
 8003e1e:	f000 fd33 	bl	8004888 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_PSSI_IRQn 1 */

  /* USER CODE END DCMI_PSSI_IRQn 1 */
}
 8003e22:	bf00      	nop
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	240000d4 	.word	0x240000d4

08003e2c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003e30:	4802      	ldr	r0, [pc, #8]	; (8003e3c <LTDC_IRQHandler+0x10>)
 8003e32:	f005 fe1d 	bl	8009a70 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003e36:	bf00      	nop
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	24000204 	.word	0x24000204

08003e40 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC Error global Interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003e44:	4802      	ldr	r0, [pc, #8]	; (8003e50 <LTDC_ER_IRQHandler+0x10>)
 8003e46:	f005 fe13 	bl	8009a70 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 8003e4a:	bf00      	nop
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	24000204 	.word	0x24000204

08003e54 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003e58:	4802      	ldr	r0, [pc, #8]	; (8003e64 <DMA2D_IRQHandler+0x10>)
 8003e5a:	f003 fd8b 	bl	8007974 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003e5e:	bf00      	nop
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	2400019c 	.word	0x2400019c

08003e68 <_lseek>:
//  (void)file;
//  return 1;
//}

int _lseek(int file, int ptr, int dir)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
	...

08003e84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e8c:	4a14      	ldr	r2, [pc, #80]	; (8003ee0 <_sbrk+0x5c>)
 8003e8e:	4b15      	ldr	r3, [pc, #84]	; (8003ee4 <_sbrk+0x60>)
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e98:	4b13      	ldr	r3, [pc, #76]	; (8003ee8 <_sbrk+0x64>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d102      	bne.n	8003ea6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ea0:	4b11      	ldr	r3, [pc, #68]	; (8003ee8 <_sbrk+0x64>)
 8003ea2:	4a12      	ldr	r2, [pc, #72]	; (8003eec <_sbrk+0x68>)
 8003ea4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ea6:	4b10      	ldr	r3, [pc, #64]	; (8003ee8 <_sbrk+0x64>)
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4413      	add	r3, r2
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d207      	bcs.n	8003ec4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003eb4:	f00a ff6e 	bl	800ed94 <__errno>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	220c      	movs	r2, #12
 8003ebc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ebe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ec2:	e009      	b.n	8003ed8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ec4:	4b08      	ldr	r3, [pc, #32]	; (8003ee8 <_sbrk+0x64>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003eca:	4b07      	ldr	r3, [pc, #28]	; (8003ee8 <_sbrk+0x64>)
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	4a05      	ldr	r2, [pc, #20]	; (8003ee8 <_sbrk+0x64>)
 8003ed4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3718      	adds	r7, #24
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	24100000 	.word	0x24100000
 8003ee4:	00000400 	.word	0x00000400
 8003ee8:	24060864 	.word	0x24060864
 8003eec:	24060910 	.word	0x24060910

08003ef0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003ef4:	4b32      	ldr	r3, [pc, #200]	; (8003fc0 <SystemInit+0xd0>)
 8003ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efa:	4a31      	ldr	r2, [pc, #196]	; (8003fc0 <SystemInit+0xd0>)
 8003efc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003f04:	4b2f      	ldr	r3, [pc, #188]	; (8003fc4 <SystemInit+0xd4>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 030f 	and.w	r3, r3, #15
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d807      	bhi.n	8003f20 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003f10:	4b2c      	ldr	r3, [pc, #176]	; (8003fc4 <SystemInit+0xd4>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f023 030f 	bic.w	r3, r3, #15
 8003f18:	4a2a      	ldr	r2, [pc, #168]	; (8003fc4 <SystemInit+0xd4>)
 8003f1a:	f043 0303 	orr.w	r3, r3, #3
 8003f1e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003f20:	4b29      	ldr	r3, [pc, #164]	; (8003fc8 <SystemInit+0xd8>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a28      	ldr	r2, [pc, #160]	; (8003fc8 <SystemInit+0xd8>)
 8003f26:	f043 0301 	orr.w	r3, r3, #1
 8003f2a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003f2c:	4b26      	ldr	r3, [pc, #152]	; (8003fc8 <SystemInit+0xd8>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003f32:	4b25      	ldr	r3, [pc, #148]	; (8003fc8 <SystemInit+0xd8>)
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	4924      	ldr	r1, [pc, #144]	; (8003fc8 <SystemInit+0xd8>)
 8003f38:	4b24      	ldr	r3, [pc, #144]	; (8003fcc <SystemInit+0xdc>)
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003f3e:	4b21      	ldr	r3, [pc, #132]	; (8003fc4 <SystemInit+0xd4>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 030c 	and.w	r3, r3, #12
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d007      	beq.n	8003f5a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003f4a:	4b1e      	ldr	r3, [pc, #120]	; (8003fc4 <SystemInit+0xd4>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f023 030f 	bic.w	r3, r3, #15
 8003f52:	4a1c      	ldr	r2, [pc, #112]	; (8003fc4 <SystemInit+0xd4>)
 8003f54:	f043 0303 	orr.w	r3, r3, #3
 8003f58:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8003f5a:	4b1b      	ldr	r3, [pc, #108]	; (8003fc8 <SystemInit+0xd8>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8003f60:	4b19      	ldr	r3, [pc, #100]	; (8003fc8 <SystemInit+0xd8>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8003f66:	4b18      	ldr	r3, [pc, #96]	; (8003fc8 <SystemInit+0xd8>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003f6c:	4b16      	ldr	r3, [pc, #88]	; (8003fc8 <SystemInit+0xd8>)
 8003f6e:	4a18      	ldr	r2, [pc, #96]	; (8003fd0 <SystemInit+0xe0>)
 8003f70:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003f72:	4b15      	ldr	r3, [pc, #84]	; (8003fc8 <SystemInit+0xd8>)
 8003f74:	4a17      	ldr	r2, [pc, #92]	; (8003fd4 <SystemInit+0xe4>)
 8003f76:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003f78:	4b13      	ldr	r3, [pc, #76]	; (8003fc8 <SystemInit+0xd8>)
 8003f7a:	4a17      	ldr	r2, [pc, #92]	; (8003fd8 <SystemInit+0xe8>)
 8003f7c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003f7e:	4b12      	ldr	r3, [pc, #72]	; (8003fc8 <SystemInit+0xd8>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003f84:	4b10      	ldr	r3, [pc, #64]	; (8003fc8 <SystemInit+0xd8>)
 8003f86:	4a14      	ldr	r2, [pc, #80]	; (8003fd8 <SystemInit+0xe8>)
 8003f88:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003f8a:	4b0f      	ldr	r3, [pc, #60]	; (8003fc8 <SystemInit+0xd8>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003f90:	4b0d      	ldr	r3, [pc, #52]	; (8003fc8 <SystemInit+0xd8>)
 8003f92:	4a11      	ldr	r2, [pc, #68]	; (8003fd8 <SystemInit+0xe8>)
 8003f94:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003f96:	4b0c      	ldr	r3, [pc, #48]	; (8003fc8 <SystemInit+0xd8>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003f9c:	4b0a      	ldr	r3, [pc, #40]	; (8003fc8 <SystemInit+0xd8>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a09      	ldr	r2, [pc, #36]	; (8003fc8 <SystemInit+0xd8>)
 8003fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fa6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003fa8:	4b07      	ldr	r3, [pc, #28]	; (8003fc8 <SystemInit+0xd8>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003fae:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <SystemInit+0xec>)
 8003fb0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003fb4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003fb6:	bf00      	nop
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr
 8003fc0:	e000ed00 	.word	0xe000ed00
 8003fc4:	52002000 	.word	0x52002000
 8003fc8:	58024400 	.word	0x58024400
 8003fcc:	eaf6ed7f 	.word	0xeaf6ed7f
 8003fd0:	02020200 	.word	0x02020200
 8003fd4:	01ff0000 	.word	0x01ff0000
 8003fd8:	01010280 	.word	0x01010280
 8003fdc:	52004000 	.word	0x52004000

08003fe0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003fe4:	4b22      	ldr	r3, [pc, #136]	; (8004070 <MX_USART1_UART_Init+0x90>)
 8003fe6:	4a23      	ldr	r2, [pc, #140]	; (8004074 <MX_USART1_UART_Init+0x94>)
 8003fe8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003fea:	4b21      	ldr	r3, [pc, #132]	; (8004070 <MX_USART1_UART_Init+0x90>)
 8003fec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ff0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ff2:	4b1f      	ldr	r3, [pc, #124]	; (8004070 <MX_USART1_UART_Init+0x90>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ff8:	4b1d      	ldr	r3, [pc, #116]	; (8004070 <MX_USART1_UART_Init+0x90>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003ffe:	4b1c      	ldr	r3, [pc, #112]	; (8004070 <MX_USART1_UART_Init+0x90>)
 8004000:	2200      	movs	r2, #0
 8004002:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004004:	4b1a      	ldr	r3, [pc, #104]	; (8004070 <MX_USART1_UART_Init+0x90>)
 8004006:	220c      	movs	r2, #12
 8004008:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800400a:	4b19      	ldr	r3, [pc, #100]	; (8004070 <MX_USART1_UART_Init+0x90>)
 800400c:	2200      	movs	r2, #0
 800400e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004010:	4b17      	ldr	r3, [pc, #92]	; (8004070 <MX_USART1_UART_Init+0x90>)
 8004012:	2200      	movs	r2, #0
 8004014:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004016:	4b16      	ldr	r3, [pc, #88]	; (8004070 <MX_USART1_UART_Init+0x90>)
 8004018:	2200      	movs	r2, #0
 800401a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800401c:	4b14      	ldr	r3, [pc, #80]	; (8004070 <MX_USART1_UART_Init+0x90>)
 800401e:	2200      	movs	r2, #0
 8004020:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004022:	4b13      	ldr	r3, [pc, #76]	; (8004070 <MX_USART1_UART_Init+0x90>)
 8004024:	2200      	movs	r2, #0
 8004026:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004028:	4811      	ldr	r0, [pc, #68]	; (8004070 <MX_USART1_UART_Init+0x90>)
 800402a:	f008 ff4b 	bl	800cec4 <HAL_UART_Init>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004034:	f7fd f8bc 	bl	80011b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004038:	2100      	movs	r1, #0
 800403a:	480d      	ldr	r0, [pc, #52]	; (8004070 <MX_USART1_UART_Init+0x90>)
 800403c:	f00a fde0 	bl	800ec00 <HAL_UARTEx_SetTxFifoThreshold>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004046:	f7fd f8b3 	bl	80011b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800404a:	2100      	movs	r1, #0
 800404c:	4808      	ldr	r0, [pc, #32]	; (8004070 <MX_USART1_UART_Init+0x90>)
 800404e:	f00a fe15 	bl	800ec7c <HAL_UARTEx_SetRxFifoThreshold>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004058:	f7fd f8aa 	bl	80011b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800405c:	4804      	ldr	r0, [pc, #16]	; (8004070 <MX_USART1_UART_Init+0x90>)
 800405e:	f00a fd96 	bl	800eb8e <HAL_UARTEx_DisableFifoMode>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004068:	f7fd f8a2 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800406c:	bf00      	nop
 800406e:	bd80      	pop	{r7, pc}
 8004070:	24060868 	.word	0x24060868
 8004074:	40011000 	.word	0x40011000

08004078 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b0ba      	sub	sp, #232	; 0xe8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004080:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	605a      	str	r2, [r3, #4]
 800408a:	609a      	str	r2, [r3, #8]
 800408c:	60da      	str	r2, [r3, #12]
 800408e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004090:	f107 0310 	add.w	r3, r7, #16
 8004094:	22c0      	movs	r2, #192	; 0xc0
 8004096:	2100      	movs	r1, #0
 8004098:	4618      	mov	r0, r3
 800409a:	f00a fea5 	bl	800ede8 <memset>
  if(uartHandle->Instance==USART1)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a2b      	ldr	r2, [pc, #172]	; (8004150 <HAL_UART_MspInit+0xd8>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d14e      	bne.n	8004146 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80040a8:	f04f 0201 	mov.w	r2, #1
 80040ac:	f04f 0300 	mov.w	r3, #0
 80040b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80040b4:	2300      	movs	r3, #0
 80040b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80040ba:	f107 0310 	add.w	r3, r7, #16
 80040be:	4618      	mov	r0, r3
 80040c0:	f007 f802 	bl	800b0c8 <HAL_RCCEx_PeriphCLKConfig>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80040ca:	f7fd f871 	bl	80011b0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80040ce:	4b21      	ldr	r3, [pc, #132]	; (8004154 <HAL_UART_MspInit+0xdc>)
 80040d0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80040d4:	4a1f      	ldr	r2, [pc, #124]	; (8004154 <HAL_UART_MspInit+0xdc>)
 80040d6:	f043 0310 	orr.w	r3, r3, #16
 80040da:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80040de:	4b1d      	ldr	r3, [pc, #116]	; (8004154 <HAL_UART_MspInit+0xdc>)
 80040e0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80040e4:	f003 0310 	and.w	r3, r3, #16
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ec:	4b19      	ldr	r3, [pc, #100]	; (8004154 <HAL_UART_MspInit+0xdc>)
 80040ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80040f2:	4a18      	ldr	r2, [pc, #96]	; (8004154 <HAL_UART_MspInit+0xdc>)
 80040f4:	f043 0301 	orr.w	r3, r3, #1
 80040f8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80040fc:	4b15      	ldr	r3, [pc, #84]	; (8004154 <HAL_UART_MspInit+0xdc>)
 80040fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	60bb      	str	r3, [r7, #8]
 8004108:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 800410a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800410e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004112:	2302      	movs	r3, #2
 8004114:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004118:	2300      	movs	r3, #0
 800411a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800411e:	2300      	movs	r3, #0
 8004120:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004124:	2307      	movs	r3, #7
 8004126:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800412a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800412e:	4619      	mov	r1, r3
 8004130:	4809      	ldr	r0, [pc, #36]	; (8004158 <HAL_UART_MspInit+0xe0>)
 8004132:	f004 fa8d 	bl	8008650 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004136:	2200      	movs	r2, #0
 8004138:	2100      	movs	r1, #0
 800413a:	2025      	movs	r0, #37	; 0x25
 800413c:	f000 f9c9 	bl	80044d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004140:	2025      	movs	r0, #37	; 0x25
 8004142:	f000 f9e0 	bl	8004506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004146:	bf00      	nop
 8004148:	37e8      	adds	r7, #232	; 0xe8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	40011000 	.word	0x40011000
 8004154:	58024400 	.word	0x58024400
 8004158:	58020000 	.word	0x58020000

0800415c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800415c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004194 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004160:	f7ff fec6 	bl	8003ef0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004164:	480c      	ldr	r0, [pc, #48]	; (8004198 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004166:	490d      	ldr	r1, [pc, #52]	; (800419c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004168:	4a0d      	ldr	r2, [pc, #52]	; (80041a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800416a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800416c:	e002      	b.n	8004174 <LoopCopyDataInit>

0800416e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800416e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004172:	3304      	adds	r3, #4

08004174 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8004174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004178:	d3f9      	bcc.n	800416e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800417a:	4a0a      	ldr	r2, [pc, #40]	; (80041a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800417c:	4c0a      	ldr	r4, [pc, #40]	; (80041a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800417e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004180:	e001      	b.n	8004186 <LoopFillZerobss>

08004182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004184:	3204      	adds	r2, #4

08004186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004188:	d3fb      	bcc.n	8004182 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800418a:	f00a fe09 	bl	800eda0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800418e:	f7fc fee1 	bl	8000f54 <main>
  bx  lr
 8004192:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004194:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8004198:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800419c:	240000b8 	.word	0x240000b8
  ldr r2, =_sidata
 80041a0:	080105c8 	.word	0x080105c8
  ldr r2, =_sbss
 80041a4:	240000b8 	.word	0x240000b8
  ldr r4, =_ebss
 80041a8:	24060910 	.word	0x24060910

080041ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041ac:	e7fe      	b.n	80041ac <ADC_IRQHandler>
	...

080041b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041b6:	2003      	movs	r0, #3
 80041b8:	f000 f980 	bl	80044bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80041bc:	f006 fdae 	bl	800ad1c <HAL_RCC_GetSysClockFreq>
 80041c0:	4602      	mov	r2, r0
 80041c2:	4b15      	ldr	r3, [pc, #84]	; (8004218 <HAL_Init+0x68>)
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	0a1b      	lsrs	r3, r3, #8
 80041c8:	f003 030f 	and.w	r3, r3, #15
 80041cc:	4913      	ldr	r1, [pc, #76]	; (800421c <HAL_Init+0x6c>)
 80041ce:	5ccb      	ldrb	r3, [r1, r3]
 80041d0:	f003 031f 	and.w	r3, r3, #31
 80041d4:	fa22 f303 	lsr.w	r3, r2, r3
 80041d8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80041da:	4b0f      	ldr	r3, [pc, #60]	; (8004218 <HAL_Init+0x68>)
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	f003 030f 	and.w	r3, r3, #15
 80041e2:	4a0e      	ldr	r2, [pc, #56]	; (800421c <HAL_Init+0x6c>)
 80041e4:	5cd3      	ldrb	r3, [r2, r3]
 80041e6:	f003 031f 	and.w	r3, r3, #31
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	fa22 f303 	lsr.w	r3, r2, r3
 80041f0:	4a0b      	ldr	r2, [pc, #44]	; (8004220 <HAL_Init+0x70>)
 80041f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80041f4:	4a0b      	ldr	r2, [pc, #44]	; (8004224 <HAL_Init+0x74>)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80041fa:	2000      	movs	r0, #0
 80041fc:	f000 f814 	bl	8004228 <HAL_InitTick>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e002      	b.n	8004210 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800420a:	f7ff fdad 	bl	8003d68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3708      	adds	r7, #8
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	58024400 	.word	0x58024400
 800421c:	080104e0 	.word	0x080104e0
 8004220:	24000048 	.word	0x24000048
 8004224:	24000044 	.word	0x24000044

08004228 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004230:	4b15      	ldr	r3, [pc, #84]	; (8004288 <HAL_InitTick+0x60>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e021      	b.n	8004280 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800423c:	4b13      	ldr	r3, [pc, #76]	; (800428c <HAL_InitTick+0x64>)
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	4b11      	ldr	r3, [pc, #68]	; (8004288 <HAL_InitTick+0x60>)
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	4619      	mov	r1, r3
 8004246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800424a:	fbb3 f3f1 	udiv	r3, r3, r1
 800424e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004252:	4618      	mov	r0, r3
 8004254:	f000 f965 	bl	8004522 <HAL_SYSTICK_Config>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e00e      	b.n	8004280 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b0f      	cmp	r3, #15
 8004266:	d80a      	bhi.n	800427e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004268:	2200      	movs	r2, #0
 800426a:	6879      	ldr	r1, [r7, #4]
 800426c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004270:	f000 f92f 	bl	80044d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004274:	4a06      	ldr	r2, [pc, #24]	; (8004290 <HAL_InitTick+0x68>)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800427a:	2300      	movs	r3, #0
 800427c:	e000      	b.n	8004280 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
}
 8004280:	4618      	mov	r0, r3
 8004282:	3708      	adds	r7, #8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	24000050 	.word	0x24000050
 800428c:	24000044 	.word	0x24000044
 8004290:	2400004c 	.word	0x2400004c

08004294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004298:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <HAL_IncTick+0x20>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	461a      	mov	r2, r3
 800429e:	4b06      	ldr	r3, [pc, #24]	; (80042b8 <HAL_IncTick+0x24>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4413      	add	r3, r2
 80042a4:	4a04      	ldr	r2, [pc, #16]	; (80042b8 <HAL_IncTick+0x24>)
 80042a6:	6013      	str	r3, [r2, #0]
}
 80042a8:	bf00      	nop
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	24000050 	.word	0x24000050
 80042b8:	240608fc 	.word	0x240608fc

080042bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
  return uwTick;
 80042c0:	4b03      	ldr	r3, [pc, #12]	; (80042d0 <HAL_GetTick+0x14>)
 80042c2:	681b      	ldr	r3, [r3, #0]
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	240608fc 	.word	0x240608fc

080042d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042dc:	f7ff ffee 	bl	80042bc <HAL_GetTick>
 80042e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042ec:	d005      	beq.n	80042fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042ee:	4b0a      	ldr	r3, [pc, #40]	; (8004318 <HAL_Delay+0x44>)
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	461a      	mov	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4413      	add	r3, r2
 80042f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80042fa:	bf00      	nop
 80042fc:	f7ff ffde 	bl	80042bc <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	429a      	cmp	r2, r3
 800430a:	d8f7      	bhi.n	80042fc <HAL_Delay+0x28>
  {
  }
}
 800430c:	bf00      	nop
 800430e:	bf00      	nop
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	24000050 	.word	0x24000050

0800431c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f003 0307 	and.w	r3, r3, #7
 800432a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800432c:	4b0b      	ldr	r3, [pc, #44]	; (800435c <__NVIC_SetPriorityGrouping+0x40>)
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004338:	4013      	ands	r3, r2
 800433a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004344:	4b06      	ldr	r3, [pc, #24]	; (8004360 <__NVIC_SetPriorityGrouping+0x44>)
 8004346:	4313      	orrs	r3, r2
 8004348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800434a:	4a04      	ldr	r2, [pc, #16]	; (800435c <__NVIC_SetPriorityGrouping+0x40>)
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	60d3      	str	r3, [r2, #12]
}
 8004350:	bf00      	nop
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	e000ed00 	.word	0xe000ed00
 8004360:	05fa0000 	.word	0x05fa0000

08004364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004368:	4b04      	ldr	r3, [pc, #16]	; (800437c <__NVIC_GetPriorityGrouping+0x18>)
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	0a1b      	lsrs	r3, r3, #8
 800436e:	f003 0307 	and.w	r3, r3, #7
}
 8004372:	4618      	mov	r0, r3
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr
 800437c:	e000ed00 	.word	0xe000ed00

08004380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	4603      	mov	r3, r0
 8004388:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800438a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800438e:	2b00      	cmp	r3, #0
 8004390:	db0b      	blt.n	80043aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004392:	88fb      	ldrh	r3, [r7, #6]
 8004394:	f003 021f 	and.w	r2, r3, #31
 8004398:	4907      	ldr	r1, [pc, #28]	; (80043b8 <__NVIC_EnableIRQ+0x38>)
 800439a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800439e:	095b      	lsrs	r3, r3, #5
 80043a0:	2001      	movs	r0, #1
 80043a2:	fa00 f202 	lsl.w	r2, r0, r2
 80043a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80043aa:	bf00      	nop
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	e000e100 	.word	0xe000e100

080043bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	4603      	mov	r3, r0
 80043c4:	6039      	str	r1, [r7, #0]
 80043c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80043c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	db0a      	blt.n	80043e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	490c      	ldr	r1, [pc, #48]	; (8004408 <__NVIC_SetPriority+0x4c>)
 80043d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043da:	0112      	lsls	r2, r2, #4
 80043dc:	b2d2      	uxtb	r2, r2
 80043de:	440b      	add	r3, r1
 80043e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043e4:	e00a      	b.n	80043fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	b2da      	uxtb	r2, r3
 80043ea:	4908      	ldr	r1, [pc, #32]	; (800440c <__NVIC_SetPriority+0x50>)
 80043ec:	88fb      	ldrh	r3, [r7, #6]
 80043ee:	f003 030f 	and.w	r3, r3, #15
 80043f2:	3b04      	subs	r3, #4
 80043f4:	0112      	lsls	r2, r2, #4
 80043f6:	b2d2      	uxtb	r2, r2
 80043f8:	440b      	add	r3, r1
 80043fa:	761a      	strb	r2, [r3, #24]
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	e000e100 	.word	0xe000e100
 800440c:	e000ed00 	.word	0xe000ed00

08004410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004410:	b480      	push	{r7}
 8004412:	b089      	sub	sp, #36	; 0x24
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f003 0307 	and.w	r3, r3, #7
 8004422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	f1c3 0307 	rsb	r3, r3, #7
 800442a:	2b04      	cmp	r3, #4
 800442c:	bf28      	it	cs
 800442e:	2304      	movcs	r3, #4
 8004430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	3304      	adds	r3, #4
 8004436:	2b06      	cmp	r3, #6
 8004438:	d902      	bls.n	8004440 <NVIC_EncodePriority+0x30>
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	3b03      	subs	r3, #3
 800443e:	e000      	b.n	8004442 <NVIC_EncodePriority+0x32>
 8004440:	2300      	movs	r3, #0
 8004442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004444:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	fa02 f303 	lsl.w	r3, r2, r3
 800444e:	43da      	mvns	r2, r3
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	401a      	ands	r2, r3
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004458:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	fa01 f303 	lsl.w	r3, r1, r3
 8004462:	43d9      	mvns	r1, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004468:	4313      	orrs	r3, r2
         );
}
 800446a:	4618      	mov	r0, r3
 800446c:	3724      	adds	r7, #36	; 0x24
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
	...

08004478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3b01      	subs	r3, #1
 8004484:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004488:	d301      	bcc.n	800448e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800448a:	2301      	movs	r3, #1
 800448c:	e00f      	b.n	80044ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800448e:	4a0a      	ldr	r2, [pc, #40]	; (80044b8 <SysTick_Config+0x40>)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	3b01      	subs	r3, #1
 8004494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004496:	210f      	movs	r1, #15
 8004498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800449c:	f7ff ff8e 	bl	80043bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044a0:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <SysTick_Config+0x40>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044a6:	4b04      	ldr	r3, [pc, #16]	; (80044b8 <SysTick_Config+0x40>)
 80044a8:	2207      	movs	r2, #7
 80044aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	e000e010 	.word	0xe000e010

080044bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7ff ff29 	bl	800431c <__NVIC_SetPriorityGrouping>
}
 80044ca:	bf00      	nop
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b086      	sub	sp, #24
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	4603      	mov	r3, r0
 80044da:	60b9      	str	r1, [r7, #8]
 80044dc:	607a      	str	r2, [r7, #4]
 80044de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80044e0:	f7ff ff40 	bl	8004364 <__NVIC_GetPriorityGrouping>
 80044e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	68b9      	ldr	r1, [r7, #8]
 80044ea:	6978      	ldr	r0, [r7, #20]
 80044ec:	f7ff ff90 	bl	8004410 <NVIC_EncodePriority>
 80044f0:	4602      	mov	r2, r0
 80044f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80044f6:	4611      	mov	r1, r2
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7ff ff5f 	bl	80043bc <__NVIC_SetPriority>
}
 80044fe:	bf00      	nop
 8004500:	3718      	adds	r7, #24
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b082      	sub	sp, #8
 800450a:	af00      	add	r7, sp, #0
 800450c:	4603      	mov	r3, r0
 800450e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004510:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004514:	4618      	mov	r0, r3
 8004516:	f7ff ff33 	bl	8004380 <__NVIC_EnableIRQ>
}
 800451a:	bf00      	nop
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b082      	sub	sp, #8
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7ff ffa4 	bl	8004478 <SysTick_Config>
 8004530:	4603      	mov	r3, r0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3708      	adds	r7, #8
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
	...

0800453c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e069      	b.n	8004622 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d102      	bne.n	8004560 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f868 	bl	8004630 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d002      	beq.n	8004576 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6819      	ldr	r1, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	4b2a      	ldr	r3, [pc, #168]	; (800462c <HAL_DCMI_Init+0xf0>)
 8004582:	400b      	ands	r3, r1
 8004584:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6819      	ldr	r1, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800459a:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80045a6:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80045b2:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80045be:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c4:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80045ca:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	2b10      	cmp	r3, #16
 80045da:	d112      	bne.n	8004602 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	7f1b      	ldrb	r3, [r3, #28]
 80045e0:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	7f5b      	ldrb	r3, [r3, #29]
 80045e6:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80045e8:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	7f9b      	ldrb	r3, [r3, #30]
 80045ee:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80045f0:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	7fdb      	ldrb	r3, [r3, #31]
 80045f8:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80045fe:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004600:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68da      	ldr	r2, [r3, #12]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f042 021e 	orr.w	r2, r2, #30
 8004610:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3708      	adds	r7, #8
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	ffe0f007 	.word	0xffe0f007

08004630 <HAL_DCMI_MspInit>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_MspInit(DCMI_HandleTypeDef *hdcmi)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_MspInit could be implemented in the user file
   */
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b088      	sub	sp, #32
 8004648:	af02      	add	r7, sp, #8
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
 8004650:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004658:	2b01      	cmp	r3, #1
 800465a:	d101      	bne.n	8004660 <HAL_DCMI_Start_DMA+0x1c>
 800465c:	2302      	movs	r3, #2
 800465e:	e0ab      	b.n	80047b8 <HAL_DCMI_Start_DMA+0x174>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2202      	movs	r2, #2
 800466c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800467e:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f022 0202 	bic.w	r2, r2, #2
 800468e:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6819      	ldr	r1, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	430a      	orrs	r2, r1
 800469e:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046a4:	4a46      	ldr	r2, [pc, #280]	; (80047c0 <HAL_DCMI_Start_DMA+0x17c>)
 80046a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ac:	4a45      	ldr	r2, [pc, #276]	; (80047c4 <HAL_DCMI_Start_DMA+0x180>)
 80046ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046b4:	2200      	movs	r2, #0
 80046b6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046d6:	d219      	bcs.n	800470c <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	3328      	adds	r3, #40	; 0x28
 80046e2:	4619      	mov	r1, r3
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	f000 fd90 	bl	800520c <HAL_DMA_Start_IT>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d055      	beq.n	800479e <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2240      	movs	r2, #64	; 0x40
 80046f6:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e055      	b.n	80047b8 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004710:	4a2b      	ldr	r2, [pc, #172]	; (80047c0 <HAL_DCMI_Start_DMA+0x17c>)
 8004712:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2201      	movs	r2, #1
 8004718:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8004726:	e009      	b.n	800473c <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800472c:	085a      	lsrs	r2, r3, #1
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004736:	005a      	lsls	r2, r3, #1
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004744:	d2f0      	bcs.n	8004728 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474a:	1e9a      	subs	r2, r3, #2
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	4413      	add	r3, r2
 8004762:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3328      	adds	r3, #40	; 0x28
 800476e:	4619      	mov	r1, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	f003 fab9 	bl	8007cf0 <HAL_DMAEx_MultiBufferStart_IT>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00c      	beq.n	800479e <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2240      	movs	r2, #64	; 0x40
 8004788:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e00c      	b.n	80047b8 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f042 0201 	orr.w	r2, r2, #1
 80047ac:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3718      	adds	r7, #24
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	0800498d 	.word	0x0800498d
 80047c4:	08004ab3 	.word	0x08004ab3

080047c8 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 80047d0:	4b2b      	ldr	r3, [pc, #172]	; (8004880 <HAL_DCMI_Stop+0xb8>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a2b      	ldr	r2, [pc, #172]	; (8004884 <HAL_DCMI_Stop+0xbc>)
 80047d6:	fba2 2303 	umull	r2, r3, r2, r3
 80047da:	0a5b      	lsrs	r3, r3, #9
 80047dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80047e0:	fb02 f303 	mul.w	r3, r2, r3
 80047e4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d101      	bne.n	80047f8 <HAL_DCMI_Stop+0x30>
 80047f4:	2302      	movs	r3, #2
 80047f6:	e03f      	b.n	8004878 <HAL_DCMI_Stop+0xb0>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0201 	bic.w	r2, r2, #1
 8004816:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	3b01      	subs	r3, #1
 800481c:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d108      	bne.n	8004836 <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004828:	f043 0220 	orr.w	r2, r3, #32
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	72fb      	strb	r3, [r7, #11]
      break;
 8004834:	e006      	b.n	8004844 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1e9      	bne.n	8004818 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004852:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004858:	4618      	mov	r0, r3
 800485a:	f000 ff41 	bl	80056e0 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8004876:	7afb      	ldrb	r3, [r7, #11]
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	24000044 	.word	0x24000044
 8004884:	10624dd3 	.word	0x10624dd3

08004888 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f003 0304 	and.w	r3, r3, #4
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d016      	beq.n	80048d0 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2204      	movs	r2, #4
 80048a8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ae:	f043 0202 	orr.w	r2, r3, #2
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2204      	movs	r2, #4
 80048ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048c2:	4a31      	ldr	r2, [pc, #196]	; (8004988 <HAL_DCMI_IRQHandler+0x100>)
 80048c4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ca:	4618      	mov	r0, r3
 80048cc:	f001 fa26 	bl	8005d1c <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d016      	beq.n	8004908 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2202      	movs	r2, #2
 80048e0:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048e6:	f043 0201 	orr.w	r2, r3, #1
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2204      	movs	r2, #4
 80048f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048fa:	4a23      	ldr	r2, [pc, #140]	; (8004988 <HAL_DCMI_IRQHandler+0x100>)
 80048fc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004902:	4618      	mov	r0, r3
 8004904:	f001 fa0a 	bl	8005d1c <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f003 0310 	and.w	r3, r3, #16
 800490e:	2b00      	cmp	r3, #0
 8004910:	d006      	beq.n	8004920 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2210      	movs	r2, #16
 8004918:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7ff f836 	bl	800398c <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f003 0308 	and.w	r3, r3, #8
 8004926:	2b00      	cmp	r3, #0
 8004928:	d006      	beq.n	8004938 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2208      	movs	r2, #8
 8004930:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7ff f840 	bl	80039b8 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	d01d      	beq.n	800497e <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b02      	cmp	r3, #2
 800494e:	d107      	bne.n	8004960 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68da      	ldr	r2, [r3, #12]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 021e 	bic.w	r2, r2, #30
 800495e:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68da      	ldr	r2, [r3, #12]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0201 	bic.w	r2, r2, #1
 800496e:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2201      	movs	r2, #1
 8004976:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f7ff f812 	bl	80039a2 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 800497e:	bf00      	nop
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	08004ab3 	.word	0x08004ab3

0800498c <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004998:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d043      	beq.n	8004a2a <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049ae:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d118      	bne.n	80049ee <DCMI_DMAXferCplt+0x62>
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d015      	beq.n	80049ee <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d4:	00da      	lsls	r2, r3, #3
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	4413      	add	r3, r2
 80049da:	2200      	movs	r2, #0
 80049dc:	4619      	mov	r1, r3
 80049de:	f003 fce5 	bl	80083ac <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e6:	1e5a      	subs	r2, r3, #1
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	639a      	str	r2, [r3, #56]	; 0x38
 80049ec:	e044      	b.n	8004a78 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d13c      	bne.n	8004a78 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a10:	00da      	lsls	r2, r3, #3
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	4413      	add	r3, r2
 8004a16:	2201      	movs	r2, #1
 8004a18:	4619      	mov	r1, r3
 8004a1a:	f003 fcc7 	bl	80083ac <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a22:	1e5a      	subs	r2, r3, #1
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	639a      	str	r2, [r3, #56]	; 0x38
 8004a28:	e026      	b.n	8004a78 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d006      	beq.n	8004a48 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004a44:	60da      	str	r2, [r3, #12]
 8004a46:	e017      	b.n	8004a78 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10f      	bne.n	8004a78 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a5c:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a62:	0099      	lsls	r1, r3, #2
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	440a      	add	r2, r1
 8004a6e:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d112      	bne.n	8004aaa <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68da      	ldr	r2, [r3, #12]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f042 0201 	orr.w	r2, r2, #1
 8004a92:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d103      	bne.n	8004aaa <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 8004aaa:	bf00      	nop
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b084      	sub	sp, #16
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abe:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d009      	beq.n	8004ade <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ad6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f7fe ff75 	bl	80039ce <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8004ae4:	bf00      	nop
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004af4:	f7ff fbe2 	bl	80042bc <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d101      	bne.n	8004b04 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e37f      	b.n	8005204 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a66      	ldr	r2, [pc, #408]	; (8004ca4 <HAL_DMA_Init+0x1b8>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d04a      	beq.n	8004ba4 <HAL_DMA_Init+0xb8>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a65      	ldr	r2, [pc, #404]	; (8004ca8 <HAL_DMA_Init+0x1bc>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d045      	beq.n	8004ba4 <HAL_DMA_Init+0xb8>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a63      	ldr	r2, [pc, #396]	; (8004cac <HAL_DMA_Init+0x1c0>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d040      	beq.n	8004ba4 <HAL_DMA_Init+0xb8>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a62      	ldr	r2, [pc, #392]	; (8004cb0 <HAL_DMA_Init+0x1c4>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d03b      	beq.n	8004ba4 <HAL_DMA_Init+0xb8>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a60      	ldr	r2, [pc, #384]	; (8004cb4 <HAL_DMA_Init+0x1c8>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d036      	beq.n	8004ba4 <HAL_DMA_Init+0xb8>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a5f      	ldr	r2, [pc, #380]	; (8004cb8 <HAL_DMA_Init+0x1cc>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d031      	beq.n	8004ba4 <HAL_DMA_Init+0xb8>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a5d      	ldr	r2, [pc, #372]	; (8004cbc <HAL_DMA_Init+0x1d0>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d02c      	beq.n	8004ba4 <HAL_DMA_Init+0xb8>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a5c      	ldr	r2, [pc, #368]	; (8004cc0 <HAL_DMA_Init+0x1d4>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d027      	beq.n	8004ba4 <HAL_DMA_Init+0xb8>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a5a      	ldr	r2, [pc, #360]	; (8004cc4 <HAL_DMA_Init+0x1d8>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d022      	beq.n	8004ba4 <HAL_DMA_Init+0xb8>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a59      	ldr	r2, [pc, #356]	; (8004cc8 <HAL_DMA_Init+0x1dc>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d01d      	beq.n	8004ba4 <HAL_DMA_Init+0xb8>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a57      	ldr	r2, [pc, #348]	; (8004ccc <HAL_DMA_Init+0x1e0>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d018      	beq.n	8004ba4 <HAL_DMA_Init+0xb8>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a56      	ldr	r2, [pc, #344]	; (8004cd0 <HAL_DMA_Init+0x1e4>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d013      	beq.n	8004ba4 <HAL_DMA_Init+0xb8>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a54      	ldr	r2, [pc, #336]	; (8004cd4 <HAL_DMA_Init+0x1e8>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d00e      	beq.n	8004ba4 <HAL_DMA_Init+0xb8>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a53      	ldr	r2, [pc, #332]	; (8004cd8 <HAL_DMA_Init+0x1ec>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d009      	beq.n	8004ba4 <HAL_DMA_Init+0xb8>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a51      	ldr	r2, [pc, #324]	; (8004cdc <HAL_DMA_Init+0x1f0>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d004      	beq.n	8004ba4 <HAL_DMA_Init+0xb8>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a50      	ldr	r2, [pc, #320]	; (8004ce0 <HAL_DMA_Init+0x1f4>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d101      	bne.n	8004ba8 <HAL_DMA_Init+0xbc>
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e000      	b.n	8004baa <HAL_DMA_Init+0xbe>
 8004ba8:	2300      	movs	r3, #0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f000 813c 	beq.w	8004e28 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a37      	ldr	r2, [pc, #220]	; (8004ca4 <HAL_DMA_Init+0x1b8>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d04a      	beq.n	8004c60 <HAL_DMA_Init+0x174>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a36      	ldr	r2, [pc, #216]	; (8004ca8 <HAL_DMA_Init+0x1bc>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d045      	beq.n	8004c60 <HAL_DMA_Init+0x174>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a34      	ldr	r2, [pc, #208]	; (8004cac <HAL_DMA_Init+0x1c0>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d040      	beq.n	8004c60 <HAL_DMA_Init+0x174>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a33      	ldr	r2, [pc, #204]	; (8004cb0 <HAL_DMA_Init+0x1c4>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d03b      	beq.n	8004c60 <HAL_DMA_Init+0x174>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a31      	ldr	r2, [pc, #196]	; (8004cb4 <HAL_DMA_Init+0x1c8>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d036      	beq.n	8004c60 <HAL_DMA_Init+0x174>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a30      	ldr	r2, [pc, #192]	; (8004cb8 <HAL_DMA_Init+0x1cc>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d031      	beq.n	8004c60 <HAL_DMA_Init+0x174>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a2e      	ldr	r2, [pc, #184]	; (8004cbc <HAL_DMA_Init+0x1d0>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d02c      	beq.n	8004c60 <HAL_DMA_Init+0x174>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a2d      	ldr	r2, [pc, #180]	; (8004cc0 <HAL_DMA_Init+0x1d4>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d027      	beq.n	8004c60 <HAL_DMA_Init+0x174>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a2b      	ldr	r2, [pc, #172]	; (8004cc4 <HAL_DMA_Init+0x1d8>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d022      	beq.n	8004c60 <HAL_DMA_Init+0x174>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a2a      	ldr	r2, [pc, #168]	; (8004cc8 <HAL_DMA_Init+0x1dc>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d01d      	beq.n	8004c60 <HAL_DMA_Init+0x174>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a28      	ldr	r2, [pc, #160]	; (8004ccc <HAL_DMA_Init+0x1e0>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d018      	beq.n	8004c60 <HAL_DMA_Init+0x174>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a27      	ldr	r2, [pc, #156]	; (8004cd0 <HAL_DMA_Init+0x1e4>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d013      	beq.n	8004c60 <HAL_DMA_Init+0x174>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a25      	ldr	r2, [pc, #148]	; (8004cd4 <HAL_DMA_Init+0x1e8>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d00e      	beq.n	8004c60 <HAL_DMA_Init+0x174>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a24      	ldr	r2, [pc, #144]	; (8004cd8 <HAL_DMA_Init+0x1ec>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d009      	beq.n	8004c60 <HAL_DMA_Init+0x174>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a22      	ldr	r2, [pc, #136]	; (8004cdc <HAL_DMA_Init+0x1f0>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d004      	beq.n	8004c60 <HAL_DMA_Init+0x174>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a21      	ldr	r2, [pc, #132]	; (8004ce0 <HAL_DMA_Init+0x1f4>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d108      	bne.n	8004c72 <HAL_DMA_Init+0x186>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f022 0201 	bic.w	r2, r2, #1
 8004c6e:	601a      	str	r2, [r3, #0]
 8004c70:	e007      	b.n	8004c82 <HAL_DMA_Init+0x196>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 0201 	bic.w	r2, r2, #1
 8004c80:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c82:	e02f      	b.n	8004ce4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c84:	f7ff fb1a 	bl	80042bc <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b05      	cmp	r3, #5
 8004c90:	d928      	bls.n	8004ce4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2220      	movs	r2, #32
 8004c96:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2203      	movs	r2, #3
 8004c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e2af      	b.n	8005204 <HAL_DMA_Init+0x718>
 8004ca4:	40020010 	.word	0x40020010
 8004ca8:	40020028 	.word	0x40020028
 8004cac:	40020040 	.word	0x40020040
 8004cb0:	40020058 	.word	0x40020058
 8004cb4:	40020070 	.word	0x40020070
 8004cb8:	40020088 	.word	0x40020088
 8004cbc:	400200a0 	.word	0x400200a0
 8004cc0:	400200b8 	.word	0x400200b8
 8004cc4:	40020410 	.word	0x40020410
 8004cc8:	40020428 	.word	0x40020428
 8004ccc:	40020440 	.word	0x40020440
 8004cd0:	40020458 	.word	0x40020458
 8004cd4:	40020470 	.word	0x40020470
 8004cd8:	40020488 	.word	0x40020488
 8004cdc:	400204a0 	.word	0x400204a0
 8004ce0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1c8      	bne.n	8004c84 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	4b73      	ldr	r3, [pc, #460]	; (8004ecc <HAL_DMA_Init+0x3e0>)
 8004cfe:	4013      	ands	r3, r2
 8004d00:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004d0a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d16:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d22:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d34:	2b04      	cmp	r3, #4
 8004d36:	d107      	bne.n	8004d48 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d40:	4313      	orrs	r3, r2
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	2b28      	cmp	r3, #40	; 0x28
 8004d4e:	d903      	bls.n	8004d58 <HAL_DMA_Init+0x26c>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	2b2e      	cmp	r3, #46	; 0x2e
 8004d56:	d91f      	bls.n	8004d98 <HAL_DMA_Init+0x2ac>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	2b3e      	cmp	r3, #62	; 0x3e
 8004d5e:	d903      	bls.n	8004d68 <HAL_DMA_Init+0x27c>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	2b42      	cmp	r3, #66	; 0x42
 8004d66:	d917      	bls.n	8004d98 <HAL_DMA_Init+0x2ac>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	2b46      	cmp	r3, #70	; 0x46
 8004d6e:	d903      	bls.n	8004d78 <HAL_DMA_Init+0x28c>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	2b48      	cmp	r3, #72	; 0x48
 8004d76:	d90f      	bls.n	8004d98 <HAL_DMA_Init+0x2ac>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	2b4e      	cmp	r3, #78	; 0x4e
 8004d7e:	d903      	bls.n	8004d88 <HAL_DMA_Init+0x29c>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	2b52      	cmp	r3, #82	; 0x52
 8004d86:	d907      	bls.n	8004d98 <HAL_DMA_Init+0x2ac>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	2b73      	cmp	r3, #115	; 0x73
 8004d8e:	d905      	bls.n	8004d9c <HAL_DMA_Init+0x2b0>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	2b77      	cmp	r3, #119	; 0x77
 8004d96:	d801      	bhi.n	8004d9c <HAL_DMA_Init+0x2b0>
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e000      	b.n	8004d9e <HAL_DMA_Init+0x2b2>
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004da8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f023 0307 	bic.w	r3, r3, #7
 8004dc0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd0:	2b04      	cmp	r3, #4
 8004dd2:	d117      	bne.n	8004e04 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00e      	beq.n	8004e04 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f002 fbd6 	bl	8007598 <DMA_CheckFifoParam>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d008      	beq.n	8004e04 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2240      	movs	r2, #64	; 0x40
 8004df6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e1ff      	b.n	8005204 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f002 fb11 	bl	8007434 <DMA_CalcBaseAndBitshift>
 8004e12:	4603      	mov	r3, r0
 8004e14:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e1a:	f003 031f 	and.w	r3, r3, #31
 8004e1e:	223f      	movs	r2, #63	; 0x3f
 8004e20:	409a      	lsls	r2, r3
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	609a      	str	r2, [r3, #8]
 8004e26:	e0fe      	b.n	8005026 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a28      	ldr	r2, [pc, #160]	; (8004ed0 <HAL_DMA_Init+0x3e4>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d04a      	beq.n	8004ec8 <HAL_DMA_Init+0x3dc>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a27      	ldr	r2, [pc, #156]	; (8004ed4 <HAL_DMA_Init+0x3e8>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d045      	beq.n	8004ec8 <HAL_DMA_Init+0x3dc>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a25      	ldr	r2, [pc, #148]	; (8004ed8 <HAL_DMA_Init+0x3ec>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d040      	beq.n	8004ec8 <HAL_DMA_Init+0x3dc>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a24      	ldr	r2, [pc, #144]	; (8004edc <HAL_DMA_Init+0x3f0>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d03b      	beq.n	8004ec8 <HAL_DMA_Init+0x3dc>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a22      	ldr	r2, [pc, #136]	; (8004ee0 <HAL_DMA_Init+0x3f4>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d036      	beq.n	8004ec8 <HAL_DMA_Init+0x3dc>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a21      	ldr	r2, [pc, #132]	; (8004ee4 <HAL_DMA_Init+0x3f8>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d031      	beq.n	8004ec8 <HAL_DMA_Init+0x3dc>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a1f      	ldr	r2, [pc, #124]	; (8004ee8 <HAL_DMA_Init+0x3fc>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d02c      	beq.n	8004ec8 <HAL_DMA_Init+0x3dc>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a1e      	ldr	r2, [pc, #120]	; (8004eec <HAL_DMA_Init+0x400>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d027      	beq.n	8004ec8 <HAL_DMA_Init+0x3dc>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a1c      	ldr	r2, [pc, #112]	; (8004ef0 <HAL_DMA_Init+0x404>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d022      	beq.n	8004ec8 <HAL_DMA_Init+0x3dc>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a1b      	ldr	r2, [pc, #108]	; (8004ef4 <HAL_DMA_Init+0x408>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d01d      	beq.n	8004ec8 <HAL_DMA_Init+0x3dc>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a19      	ldr	r2, [pc, #100]	; (8004ef8 <HAL_DMA_Init+0x40c>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d018      	beq.n	8004ec8 <HAL_DMA_Init+0x3dc>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a18      	ldr	r2, [pc, #96]	; (8004efc <HAL_DMA_Init+0x410>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d013      	beq.n	8004ec8 <HAL_DMA_Init+0x3dc>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a16      	ldr	r2, [pc, #88]	; (8004f00 <HAL_DMA_Init+0x414>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d00e      	beq.n	8004ec8 <HAL_DMA_Init+0x3dc>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a15      	ldr	r2, [pc, #84]	; (8004f04 <HAL_DMA_Init+0x418>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d009      	beq.n	8004ec8 <HAL_DMA_Init+0x3dc>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a13      	ldr	r2, [pc, #76]	; (8004f08 <HAL_DMA_Init+0x41c>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d004      	beq.n	8004ec8 <HAL_DMA_Init+0x3dc>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a12      	ldr	r2, [pc, #72]	; (8004f0c <HAL_DMA_Init+0x420>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d123      	bne.n	8004f10 <HAL_DMA_Init+0x424>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e022      	b.n	8004f12 <HAL_DMA_Init+0x426>
 8004ecc:	fe10803f 	.word	0xfe10803f
 8004ed0:	48022c08 	.word	0x48022c08
 8004ed4:	48022c1c 	.word	0x48022c1c
 8004ed8:	48022c30 	.word	0x48022c30
 8004edc:	48022c44 	.word	0x48022c44
 8004ee0:	48022c58 	.word	0x48022c58
 8004ee4:	48022c6c 	.word	0x48022c6c
 8004ee8:	48022c80 	.word	0x48022c80
 8004eec:	48022c94 	.word	0x48022c94
 8004ef0:	58025408 	.word	0x58025408
 8004ef4:	5802541c 	.word	0x5802541c
 8004ef8:	58025430 	.word	0x58025430
 8004efc:	58025444 	.word	0x58025444
 8004f00:	58025458 	.word	0x58025458
 8004f04:	5802546c 	.word	0x5802546c
 8004f08:	58025480 	.word	0x58025480
 8004f0c:	58025494 	.word	0x58025494
 8004f10:	2300      	movs	r3, #0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d07e      	beq.n	8005014 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a80      	ldr	r2, [pc, #512]	; (800511c <HAL_DMA_Init+0x630>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d021      	beq.n	8004f64 <HAL_DMA_Init+0x478>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a7e      	ldr	r2, [pc, #504]	; (8005120 <HAL_DMA_Init+0x634>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d01c      	beq.n	8004f64 <HAL_DMA_Init+0x478>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a7d      	ldr	r2, [pc, #500]	; (8005124 <HAL_DMA_Init+0x638>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d017      	beq.n	8004f64 <HAL_DMA_Init+0x478>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a7b      	ldr	r2, [pc, #492]	; (8005128 <HAL_DMA_Init+0x63c>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d012      	beq.n	8004f64 <HAL_DMA_Init+0x478>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a7a      	ldr	r2, [pc, #488]	; (800512c <HAL_DMA_Init+0x640>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d00d      	beq.n	8004f64 <HAL_DMA_Init+0x478>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a78      	ldr	r2, [pc, #480]	; (8005130 <HAL_DMA_Init+0x644>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d008      	beq.n	8004f64 <HAL_DMA_Init+0x478>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a77      	ldr	r2, [pc, #476]	; (8005134 <HAL_DMA_Init+0x648>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d003      	beq.n	8004f64 <HAL_DMA_Init+0x478>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a75      	ldr	r2, [pc, #468]	; (8005138 <HAL_DMA_Init+0x64c>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2202      	movs	r2, #2
 8004f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	4b6e      	ldr	r3, [pc, #440]	; (800513c <HAL_DMA_Init+0x650>)
 8004f82:	4013      	ands	r3, r2
 8004f84:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	2b40      	cmp	r3, #64	; 0x40
 8004f8c:	d008      	beq.n	8004fa0 <HAL_DMA_Init+0x4b4>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	2b80      	cmp	r3, #128	; 0x80
 8004f94:	d102      	bne.n	8004f9c <HAL_DMA_Init+0x4b0>
 8004f96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f9a:	e002      	b.n	8004fa2 <HAL_DMA_Init+0x4b6>
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	e000      	b.n	8004fa2 <HAL_DMA_Init+0x4b6>
 8004fa0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	68d2      	ldr	r2, [r2, #12]
 8004fa6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004fa8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004fb0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004fb8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004fc0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004fc8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004fd0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	4b56      	ldr	r3, [pc, #344]	; (8005140 <HAL_DMA_Init+0x654>)
 8004fe8:	4413      	add	r3, r2
 8004fea:	4a56      	ldr	r2, [pc, #344]	; (8005144 <HAL_DMA_Init+0x658>)
 8004fec:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff0:	091b      	lsrs	r3, r3, #4
 8004ff2:	009a      	lsls	r2, r3, #2
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f002 fa1b 	bl	8007434 <DMA_CalcBaseAndBitshift>
 8004ffe:	4603      	mov	r3, r0
 8005000:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005006:	f003 031f 	and.w	r3, r3, #31
 800500a:	2201      	movs	r2, #1
 800500c:	409a      	lsls	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	605a      	str	r2, [r3, #4]
 8005012:	e008      	b.n	8005026 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2240      	movs	r2, #64	; 0x40
 8005018:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2203      	movs	r2, #3
 800501e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e0ee      	b.n	8005204 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a47      	ldr	r2, [pc, #284]	; (8005148 <HAL_DMA_Init+0x65c>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d072      	beq.n	8005116 <HAL_DMA_Init+0x62a>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a45      	ldr	r2, [pc, #276]	; (800514c <HAL_DMA_Init+0x660>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d06d      	beq.n	8005116 <HAL_DMA_Init+0x62a>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a44      	ldr	r2, [pc, #272]	; (8005150 <HAL_DMA_Init+0x664>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d068      	beq.n	8005116 <HAL_DMA_Init+0x62a>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a42      	ldr	r2, [pc, #264]	; (8005154 <HAL_DMA_Init+0x668>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d063      	beq.n	8005116 <HAL_DMA_Init+0x62a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a41      	ldr	r2, [pc, #260]	; (8005158 <HAL_DMA_Init+0x66c>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d05e      	beq.n	8005116 <HAL_DMA_Init+0x62a>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a3f      	ldr	r2, [pc, #252]	; (800515c <HAL_DMA_Init+0x670>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d059      	beq.n	8005116 <HAL_DMA_Init+0x62a>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a3e      	ldr	r2, [pc, #248]	; (8005160 <HAL_DMA_Init+0x674>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d054      	beq.n	8005116 <HAL_DMA_Init+0x62a>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a3c      	ldr	r2, [pc, #240]	; (8005164 <HAL_DMA_Init+0x678>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d04f      	beq.n	8005116 <HAL_DMA_Init+0x62a>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a3b      	ldr	r2, [pc, #236]	; (8005168 <HAL_DMA_Init+0x67c>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d04a      	beq.n	8005116 <HAL_DMA_Init+0x62a>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a39      	ldr	r2, [pc, #228]	; (800516c <HAL_DMA_Init+0x680>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d045      	beq.n	8005116 <HAL_DMA_Init+0x62a>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a38      	ldr	r2, [pc, #224]	; (8005170 <HAL_DMA_Init+0x684>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d040      	beq.n	8005116 <HAL_DMA_Init+0x62a>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a36      	ldr	r2, [pc, #216]	; (8005174 <HAL_DMA_Init+0x688>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d03b      	beq.n	8005116 <HAL_DMA_Init+0x62a>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a35      	ldr	r2, [pc, #212]	; (8005178 <HAL_DMA_Init+0x68c>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d036      	beq.n	8005116 <HAL_DMA_Init+0x62a>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a33      	ldr	r2, [pc, #204]	; (800517c <HAL_DMA_Init+0x690>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d031      	beq.n	8005116 <HAL_DMA_Init+0x62a>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a32      	ldr	r2, [pc, #200]	; (8005180 <HAL_DMA_Init+0x694>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d02c      	beq.n	8005116 <HAL_DMA_Init+0x62a>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a30      	ldr	r2, [pc, #192]	; (8005184 <HAL_DMA_Init+0x698>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d027      	beq.n	8005116 <HAL_DMA_Init+0x62a>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a14      	ldr	r2, [pc, #80]	; (800511c <HAL_DMA_Init+0x630>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d022      	beq.n	8005116 <HAL_DMA_Init+0x62a>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a12      	ldr	r2, [pc, #72]	; (8005120 <HAL_DMA_Init+0x634>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d01d      	beq.n	8005116 <HAL_DMA_Init+0x62a>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a11      	ldr	r2, [pc, #68]	; (8005124 <HAL_DMA_Init+0x638>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d018      	beq.n	8005116 <HAL_DMA_Init+0x62a>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a0f      	ldr	r2, [pc, #60]	; (8005128 <HAL_DMA_Init+0x63c>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d013      	beq.n	8005116 <HAL_DMA_Init+0x62a>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a0e      	ldr	r2, [pc, #56]	; (800512c <HAL_DMA_Init+0x640>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d00e      	beq.n	8005116 <HAL_DMA_Init+0x62a>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a0c      	ldr	r2, [pc, #48]	; (8005130 <HAL_DMA_Init+0x644>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d009      	beq.n	8005116 <HAL_DMA_Init+0x62a>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a0b      	ldr	r2, [pc, #44]	; (8005134 <HAL_DMA_Init+0x648>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d004      	beq.n	8005116 <HAL_DMA_Init+0x62a>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a09      	ldr	r2, [pc, #36]	; (8005138 <HAL_DMA_Init+0x64c>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d138      	bne.n	8005188 <HAL_DMA_Init+0x69c>
 8005116:	2301      	movs	r3, #1
 8005118:	e037      	b.n	800518a <HAL_DMA_Init+0x69e>
 800511a:	bf00      	nop
 800511c:	58025408 	.word	0x58025408
 8005120:	5802541c 	.word	0x5802541c
 8005124:	58025430 	.word	0x58025430
 8005128:	58025444 	.word	0x58025444
 800512c:	58025458 	.word	0x58025458
 8005130:	5802546c 	.word	0x5802546c
 8005134:	58025480 	.word	0x58025480
 8005138:	58025494 	.word	0x58025494
 800513c:	fffe000f 	.word	0xfffe000f
 8005140:	a7fdabf8 	.word	0xa7fdabf8
 8005144:	cccccccd 	.word	0xcccccccd
 8005148:	40020010 	.word	0x40020010
 800514c:	40020028 	.word	0x40020028
 8005150:	40020040 	.word	0x40020040
 8005154:	40020058 	.word	0x40020058
 8005158:	40020070 	.word	0x40020070
 800515c:	40020088 	.word	0x40020088
 8005160:	400200a0 	.word	0x400200a0
 8005164:	400200b8 	.word	0x400200b8
 8005168:	40020410 	.word	0x40020410
 800516c:	40020428 	.word	0x40020428
 8005170:	40020440 	.word	0x40020440
 8005174:	40020458 	.word	0x40020458
 8005178:	40020470 	.word	0x40020470
 800517c:	40020488 	.word	0x40020488
 8005180:	400204a0 	.word	0x400204a0
 8005184:	400204b8 	.word	0x400204b8
 8005188:	2300      	movs	r3, #0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d032      	beq.n	80051f4 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f002 fa7e 	bl	8007690 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	2b80      	cmp	r3, #128	; 0x80
 800519a:	d102      	bne.n	80051a2 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051aa:	b2d2      	uxtb	r2, r2
 80051ac:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80051b6:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d010      	beq.n	80051e2 <HAL_DMA_Init+0x6f6>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	2b08      	cmp	r3, #8
 80051c6:	d80c      	bhi.n	80051e2 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f002 fafb 	bl	80077c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051d2:	2200      	movs	r2, #0
 80051d4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80051de:	605a      	str	r2, [r3, #4]
 80051e0:	e008      	b.n	80051f4 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3718      	adds	r7, #24
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
 8005218:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800521a:	2300      	movs	r3, #0
 800521c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d101      	bne.n	8005228 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e226      	b.n	8005676 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800522e:	2b01      	cmp	r3, #1
 8005230:	d101      	bne.n	8005236 <HAL_DMA_Start_IT+0x2a>
 8005232:	2302      	movs	r3, #2
 8005234:	e21f      	b.n	8005676 <HAL_DMA_Start_IT+0x46a>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b01      	cmp	r3, #1
 8005248:	f040 820a 	bne.w	8005660 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2202      	movs	r2, #2
 8005250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a68      	ldr	r2, [pc, #416]	; (8005400 <HAL_DMA_Start_IT+0x1f4>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d04a      	beq.n	80052fa <HAL_DMA_Start_IT+0xee>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a66      	ldr	r2, [pc, #408]	; (8005404 <HAL_DMA_Start_IT+0x1f8>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d045      	beq.n	80052fa <HAL_DMA_Start_IT+0xee>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a65      	ldr	r2, [pc, #404]	; (8005408 <HAL_DMA_Start_IT+0x1fc>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d040      	beq.n	80052fa <HAL_DMA_Start_IT+0xee>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a63      	ldr	r2, [pc, #396]	; (800540c <HAL_DMA_Start_IT+0x200>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d03b      	beq.n	80052fa <HAL_DMA_Start_IT+0xee>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a62      	ldr	r2, [pc, #392]	; (8005410 <HAL_DMA_Start_IT+0x204>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d036      	beq.n	80052fa <HAL_DMA_Start_IT+0xee>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a60      	ldr	r2, [pc, #384]	; (8005414 <HAL_DMA_Start_IT+0x208>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d031      	beq.n	80052fa <HAL_DMA_Start_IT+0xee>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a5f      	ldr	r2, [pc, #380]	; (8005418 <HAL_DMA_Start_IT+0x20c>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d02c      	beq.n	80052fa <HAL_DMA_Start_IT+0xee>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a5d      	ldr	r2, [pc, #372]	; (800541c <HAL_DMA_Start_IT+0x210>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d027      	beq.n	80052fa <HAL_DMA_Start_IT+0xee>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a5c      	ldr	r2, [pc, #368]	; (8005420 <HAL_DMA_Start_IT+0x214>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d022      	beq.n	80052fa <HAL_DMA_Start_IT+0xee>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a5a      	ldr	r2, [pc, #360]	; (8005424 <HAL_DMA_Start_IT+0x218>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d01d      	beq.n	80052fa <HAL_DMA_Start_IT+0xee>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a59      	ldr	r2, [pc, #356]	; (8005428 <HAL_DMA_Start_IT+0x21c>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d018      	beq.n	80052fa <HAL_DMA_Start_IT+0xee>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a57      	ldr	r2, [pc, #348]	; (800542c <HAL_DMA_Start_IT+0x220>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d013      	beq.n	80052fa <HAL_DMA_Start_IT+0xee>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a56      	ldr	r2, [pc, #344]	; (8005430 <HAL_DMA_Start_IT+0x224>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d00e      	beq.n	80052fa <HAL_DMA_Start_IT+0xee>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a54      	ldr	r2, [pc, #336]	; (8005434 <HAL_DMA_Start_IT+0x228>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d009      	beq.n	80052fa <HAL_DMA_Start_IT+0xee>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a53      	ldr	r2, [pc, #332]	; (8005438 <HAL_DMA_Start_IT+0x22c>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d004      	beq.n	80052fa <HAL_DMA_Start_IT+0xee>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a51      	ldr	r2, [pc, #324]	; (800543c <HAL_DMA_Start_IT+0x230>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d108      	bne.n	800530c <HAL_DMA_Start_IT+0x100>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 0201 	bic.w	r2, r2, #1
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	e007      	b.n	800531c <HAL_DMA_Start_IT+0x110>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f022 0201 	bic.w	r2, r2, #1
 800531a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	68b9      	ldr	r1, [r7, #8]
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f001 fea2 	bl	800706c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a34      	ldr	r2, [pc, #208]	; (8005400 <HAL_DMA_Start_IT+0x1f4>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d04a      	beq.n	80053c8 <HAL_DMA_Start_IT+0x1bc>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a33      	ldr	r2, [pc, #204]	; (8005404 <HAL_DMA_Start_IT+0x1f8>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d045      	beq.n	80053c8 <HAL_DMA_Start_IT+0x1bc>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a31      	ldr	r2, [pc, #196]	; (8005408 <HAL_DMA_Start_IT+0x1fc>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d040      	beq.n	80053c8 <HAL_DMA_Start_IT+0x1bc>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a30      	ldr	r2, [pc, #192]	; (800540c <HAL_DMA_Start_IT+0x200>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d03b      	beq.n	80053c8 <HAL_DMA_Start_IT+0x1bc>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a2e      	ldr	r2, [pc, #184]	; (8005410 <HAL_DMA_Start_IT+0x204>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d036      	beq.n	80053c8 <HAL_DMA_Start_IT+0x1bc>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a2d      	ldr	r2, [pc, #180]	; (8005414 <HAL_DMA_Start_IT+0x208>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d031      	beq.n	80053c8 <HAL_DMA_Start_IT+0x1bc>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a2b      	ldr	r2, [pc, #172]	; (8005418 <HAL_DMA_Start_IT+0x20c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d02c      	beq.n	80053c8 <HAL_DMA_Start_IT+0x1bc>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a2a      	ldr	r2, [pc, #168]	; (800541c <HAL_DMA_Start_IT+0x210>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d027      	beq.n	80053c8 <HAL_DMA_Start_IT+0x1bc>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a28      	ldr	r2, [pc, #160]	; (8005420 <HAL_DMA_Start_IT+0x214>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d022      	beq.n	80053c8 <HAL_DMA_Start_IT+0x1bc>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a27      	ldr	r2, [pc, #156]	; (8005424 <HAL_DMA_Start_IT+0x218>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d01d      	beq.n	80053c8 <HAL_DMA_Start_IT+0x1bc>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a25      	ldr	r2, [pc, #148]	; (8005428 <HAL_DMA_Start_IT+0x21c>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d018      	beq.n	80053c8 <HAL_DMA_Start_IT+0x1bc>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a24      	ldr	r2, [pc, #144]	; (800542c <HAL_DMA_Start_IT+0x220>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d013      	beq.n	80053c8 <HAL_DMA_Start_IT+0x1bc>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a22      	ldr	r2, [pc, #136]	; (8005430 <HAL_DMA_Start_IT+0x224>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d00e      	beq.n	80053c8 <HAL_DMA_Start_IT+0x1bc>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a21      	ldr	r2, [pc, #132]	; (8005434 <HAL_DMA_Start_IT+0x228>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d009      	beq.n	80053c8 <HAL_DMA_Start_IT+0x1bc>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a1f      	ldr	r2, [pc, #124]	; (8005438 <HAL_DMA_Start_IT+0x22c>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d004      	beq.n	80053c8 <HAL_DMA_Start_IT+0x1bc>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a1e      	ldr	r2, [pc, #120]	; (800543c <HAL_DMA_Start_IT+0x230>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d101      	bne.n	80053cc <HAL_DMA_Start_IT+0x1c0>
 80053c8:	2301      	movs	r3, #1
 80053ca:	e000      	b.n	80053ce <HAL_DMA_Start_IT+0x1c2>
 80053cc:	2300      	movs	r3, #0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d036      	beq.n	8005440 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f023 021e 	bic.w	r2, r3, #30
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f042 0216 	orr.w	r2, r2, #22
 80053e4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d03e      	beq.n	800546c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f042 0208 	orr.w	r2, r2, #8
 80053fc:	601a      	str	r2, [r3, #0]
 80053fe:	e035      	b.n	800546c <HAL_DMA_Start_IT+0x260>
 8005400:	40020010 	.word	0x40020010
 8005404:	40020028 	.word	0x40020028
 8005408:	40020040 	.word	0x40020040
 800540c:	40020058 	.word	0x40020058
 8005410:	40020070 	.word	0x40020070
 8005414:	40020088 	.word	0x40020088
 8005418:	400200a0 	.word	0x400200a0
 800541c:	400200b8 	.word	0x400200b8
 8005420:	40020410 	.word	0x40020410
 8005424:	40020428 	.word	0x40020428
 8005428:	40020440 	.word	0x40020440
 800542c:	40020458 	.word	0x40020458
 8005430:	40020470 	.word	0x40020470
 8005434:	40020488 	.word	0x40020488
 8005438:	400204a0 	.word	0x400204a0
 800543c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f023 020e 	bic.w	r2, r3, #14
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f042 020a 	orr.w	r2, r2, #10
 8005452:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005458:	2b00      	cmp	r3, #0
 800545a:	d007      	beq.n	800546c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f042 0204 	orr.w	r2, r2, #4
 800546a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a83      	ldr	r2, [pc, #524]	; (8005680 <HAL_DMA_Start_IT+0x474>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d072      	beq.n	800555c <HAL_DMA_Start_IT+0x350>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a82      	ldr	r2, [pc, #520]	; (8005684 <HAL_DMA_Start_IT+0x478>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d06d      	beq.n	800555c <HAL_DMA_Start_IT+0x350>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a80      	ldr	r2, [pc, #512]	; (8005688 <HAL_DMA_Start_IT+0x47c>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d068      	beq.n	800555c <HAL_DMA_Start_IT+0x350>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a7f      	ldr	r2, [pc, #508]	; (800568c <HAL_DMA_Start_IT+0x480>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d063      	beq.n	800555c <HAL_DMA_Start_IT+0x350>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a7d      	ldr	r2, [pc, #500]	; (8005690 <HAL_DMA_Start_IT+0x484>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d05e      	beq.n	800555c <HAL_DMA_Start_IT+0x350>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a7c      	ldr	r2, [pc, #496]	; (8005694 <HAL_DMA_Start_IT+0x488>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d059      	beq.n	800555c <HAL_DMA_Start_IT+0x350>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a7a      	ldr	r2, [pc, #488]	; (8005698 <HAL_DMA_Start_IT+0x48c>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d054      	beq.n	800555c <HAL_DMA_Start_IT+0x350>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a79      	ldr	r2, [pc, #484]	; (800569c <HAL_DMA_Start_IT+0x490>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d04f      	beq.n	800555c <HAL_DMA_Start_IT+0x350>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a77      	ldr	r2, [pc, #476]	; (80056a0 <HAL_DMA_Start_IT+0x494>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d04a      	beq.n	800555c <HAL_DMA_Start_IT+0x350>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a76      	ldr	r2, [pc, #472]	; (80056a4 <HAL_DMA_Start_IT+0x498>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d045      	beq.n	800555c <HAL_DMA_Start_IT+0x350>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a74      	ldr	r2, [pc, #464]	; (80056a8 <HAL_DMA_Start_IT+0x49c>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d040      	beq.n	800555c <HAL_DMA_Start_IT+0x350>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a73      	ldr	r2, [pc, #460]	; (80056ac <HAL_DMA_Start_IT+0x4a0>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d03b      	beq.n	800555c <HAL_DMA_Start_IT+0x350>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a71      	ldr	r2, [pc, #452]	; (80056b0 <HAL_DMA_Start_IT+0x4a4>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d036      	beq.n	800555c <HAL_DMA_Start_IT+0x350>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a70      	ldr	r2, [pc, #448]	; (80056b4 <HAL_DMA_Start_IT+0x4a8>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d031      	beq.n	800555c <HAL_DMA_Start_IT+0x350>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a6e      	ldr	r2, [pc, #440]	; (80056b8 <HAL_DMA_Start_IT+0x4ac>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d02c      	beq.n	800555c <HAL_DMA_Start_IT+0x350>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a6d      	ldr	r2, [pc, #436]	; (80056bc <HAL_DMA_Start_IT+0x4b0>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d027      	beq.n	800555c <HAL_DMA_Start_IT+0x350>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a6b      	ldr	r2, [pc, #428]	; (80056c0 <HAL_DMA_Start_IT+0x4b4>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d022      	beq.n	800555c <HAL_DMA_Start_IT+0x350>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a6a      	ldr	r2, [pc, #424]	; (80056c4 <HAL_DMA_Start_IT+0x4b8>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d01d      	beq.n	800555c <HAL_DMA_Start_IT+0x350>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a68      	ldr	r2, [pc, #416]	; (80056c8 <HAL_DMA_Start_IT+0x4bc>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d018      	beq.n	800555c <HAL_DMA_Start_IT+0x350>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a67      	ldr	r2, [pc, #412]	; (80056cc <HAL_DMA_Start_IT+0x4c0>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d013      	beq.n	800555c <HAL_DMA_Start_IT+0x350>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a65      	ldr	r2, [pc, #404]	; (80056d0 <HAL_DMA_Start_IT+0x4c4>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d00e      	beq.n	800555c <HAL_DMA_Start_IT+0x350>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a64      	ldr	r2, [pc, #400]	; (80056d4 <HAL_DMA_Start_IT+0x4c8>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d009      	beq.n	800555c <HAL_DMA_Start_IT+0x350>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a62      	ldr	r2, [pc, #392]	; (80056d8 <HAL_DMA_Start_IT+0x4cc>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d004      	beq.n	800555c <HAL_DMA_Start_IT+0x350>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a61      	ldr	r2, [pc, #388]	; (80056dc <HAL_DMA_Start_IT+0x4d0>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d101      	bne.n	8005560 <HAL_DMA_Start_IT+0x354>
 800555c:	2301      	movs	r3, #1
 800555e:	e000      	b.n	8005562 <HAL_DMA_Start_IT+0x356>
 8005560:	2300      	movs	r3, #0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d01a      	beq.n	800559c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d007      	beq.n	8005584 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800557e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005582:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005588:	2b00      	cmp	r3, #0
 800558a:	d007      	beq.n	800559c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005596:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800559a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a37      	ldr	r2, [pc, #220]	; (8005680 <HAL_DMA_Start_IT+0x474>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d04a      	beq.n	800563c <HAL_DMA_Start_IT+0x430>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a36      	ldr	r2, [pc, #216]	; (8005684 <HAL_DMA_Start_IT+0x478>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d045      	beq.n	800563c <HAL_DMA_Start_IT+0x430>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a34      	ldr	r2, [pc, #208]	; (8005688 <HAL_DMA_Start_IT+0x47c>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d040      	beq.n	800563c <HAL_DMA_Start_IT+0x430>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a33      	ldr	r2, [pc, #204]	; (800568c <HAL_DMA_Start_IT+0x480>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d03b      	beq.n	800563c <HAL_DMA_Start_IT+0x430>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a31      	ldr	r2, [pc, #196]	; (8005690 <HAL_DMA_Start_IT+0x484>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d036      	beq.n	800563c <HAL_DMA_Start_IT+0x430>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a30      	ldr	r2, [pc, #192]	; (8005694 <HAL_DMA_Start_IT+0x488>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d031      	beq.n	800563c <HAL_DMA_Start_IT+0x430>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a2e      	ldr	r2, [pc, #184]	; (8005698 <HAL_DMA_Start_IT+0x48c>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d02c      	beq.n	800563c <HAL_DMA_Start_IT+0x430>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a2d      	ldr	r2, [pc, #180]	; (800569c <HAL_DMA_Start_IT+0x490>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d027      	beq.n	800563c <HAL_DMA_Start_IT+0x430>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a2b      	ldr	r2, [pc, #172]	; (80056a0 <HAL_DMA_Start_IT+0x494>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d022      	beq.n	800563c <HAL_DMA_Start_IT+0x430>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a2a      	ldr	r2, [pc, #168]	; (80056a4 <HAL_DMA_Start_IT+0x498>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d01d      	beq.n	800563c <HAL_DMA_Start_IT+0x430>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a28      	ldr	r2, [pc, #160]	; (80056a8 <HAL_DMA_Start_IT+0x49c>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d018      	beq.n	800563c <HAL_DMA_Start_IT+0x430>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a27      	ldr	r2, [pc, #156]	; (80056ac <HAL_DMA_Start_IT+0x4a0>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d013      	beq.n	800563c <HAL_DMA_Start_IT+0x430>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a25      	ldr	r2, [pc, #148]	; (80056b0 <HAL_DMA_Start_IT+0x4a4>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d00e      	beq.n	800563c <HAL_DMA_Start_IT+0x430>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a24      	ldr	r2, [pc, #144]	; (80056b4 <HAL_DMA_Start_IT+0x4a8>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d009      	beq.n	800563c <HAL_DMA_Start_IT+0x430>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a22      	ldr	r2, [pc, #136]	; (80056b8 <HAL_DMA_Start_IT+0x4ac>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d004      	beq.n	800563c <HAL_DMA_Start_IT+0x430>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a21      	ldr	r2, [pc, #132]	; (80056bc <HAL_DMA_Start_IT+0x4b0>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d108      	bne.n	800564e <HAL_DMA_Start_IT+0x442>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0201 	orr.w	r2, r2, #1
 800564a:	601a      	str	r2, [r3, #0]
 800564c:	e012      	b.n	8005674 <HAL_DMA_Start_IT+0x468>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f042 0201 	orr.w	r2, r2, #1
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	e009      	b.n	8005674 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005666:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005674:	7dfb      	ldrb	r3, [r7, #23]
}
 8005676:	4618      	mov	r0, r3
 8005678:	3718      	adds	r7, #24
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	40020010 	.word	0x40020010
 8005684:	40020028 	.word	0x40020028
 8005688:	40020040 	.word	0x40020040
 800568c:	40020058 	.word	0x40020058
 8005690:	40020070 	.word	0x40020070
 8005694:	40020088 	.word	0x40020088
 8005698:	400200a0 	.word	0x400200a0
 800569c:	400200b8 	.word	0x400200b8
 80056a0:	40020410 	.word	0x40020410
 80056a4:	40020428 	.word	0x40020428
 80056a8:	40020440 	.word	0x40020440
 80056ac:	40020458 	.word	0x40020458
 80056b0:	40020470 	.word	0x40020470
 80056b4:	40020488 	.word	0x40020488
 80056b8:	400204a0 	.word	0x400204a0
 80056bc:	400204b8 	.word	0x400204b8
 80056c0:	58025408 	.word	0x58025408
 80056c4:	5802541c 	.word	0x5802541c
 80056c8:	58025430 	.word	0x58025430
 80056cc:	58025444 	.word	0x58025444
 80056d0:	58025458 	.word	0x58025458
 80056d4:	5802546c 	.word	0x5802546c
 80056d8:	58025480 	.word	0x58025480
 80056dc:	58025494 	.word	0x58025494

080056e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80056e8:	f7fe fde8 	bl	80042bc <HAL_GetTick>
 80056ec:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d101      	bne.n	80056f8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e2dc      	b.n	8005cb2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b02      	cmp	r3, #2
 8005702:	d008      	beq.n	8005716 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2280      	movs	r2, #128	; 0x80
 8005708:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e2cd      	b.n	8005cb2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a76      	ldr	r2, [pc, #472]	; (80058f4 <HAL_DMA_Abort+0x214>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d04a      	beq.n	80057b6 <HAL_DMA_Abort+0xd6>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a74      	ldr	r2, [pc, #464]	; (80058f8 <HAL_DMA_Abort+0x218>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d045      	beq.n	80057b6 <HAL_DMA_Abort+0xd6>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a73      	ldr	r2, [pc, #460]	; (80058fc <HAL_DMA_Abort+0x21c>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d040      	beq.n	80057b6 <HAL_DMA_Abort+0xd6>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a71      	ldr	r2, [pc, #452]	; (8005900 <HAL_DMA_Abort+0x220>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d03b      	beq.n	80057b6 <HAL_DMA_Abort+0xd6>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a70      	ldr	r2, [pc, #448]	; (8005904 <HAL_DMA_Abort+0x224>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d036      	beq.n	80057b6 <HAL_DMA_Abort+0xd6>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a6e      	ldr	r2, [pc, #440]	; (8005908 <HAL_DMA_Abort+0x228>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d031      	beq.n	80057b6 <HAL_DMA_Abort+0xd6>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a6d      	ldr	r2, [pc, #436]	; (800590c <HAL_DMA_Abort+0x22c>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d02c      	beq.n	80057b6 <HAL_DMA_Abort+0xd6>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a6b      	ldr	r2, [pc, #428]	; (8005910 <HAL_DMA_Abort+0x230>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d027      	beq.n	80057b6 <HAL_DMA_Abort+0xd6>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a6a      	ldr	r2, [pc, #424]	; (8005914 <HAL_DMA_Abort+0x234>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d022      	beq.n	80057b6 <HAL_DMA_Abort+0xd6>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a68      	ldr	r2, [pc, #416]	; (8005918 <HAL_DMA_Abort+0x238>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d01d      	beq.n	80057b6 <HAL_DMA_Abort+0xd6>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a67      	ldr	r2, [pc, #412]	; (800591c <HAL_DMA_Abort+0x23c>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d018      	beq.n	80057b6 <HAL_DMA_Abort+0xd6>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a65      	ldr	r2, [pc, #404]	; (8005920 <HAL_DMA_Abort+0x240>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d013      	beq.n	80057b6 <HAL_DMA_Abort+0xd6>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a64      	ldr	r2, [pc, #400]	; (8005924 <HAL_DMA_Abort+0x244>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d00e      	beq.n	80057b6 <HAL_DMA_Abort+0xd6>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a62      	ldr	r2, [pc, #392]	; (8005928 <HAL_DMA_Abort+0x248>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d009      	beq.n	80057b6 <HAL_DMA_Abort+0xd6>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a61      	ldr	r2, [pc, #388]	; (800592c <HAL_DMA_Abort+0x24c>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d004      	beq.n	80057b6 <HAL_DMA_Abort+0xd6>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a5f      	ldr	r2, [pc, #380]	; (8005930 <HAL_DMA_Abort+0x250>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d101      	bne.n	80057ba <HAL_DMA_Abort+0xda>
 80057b6:	2301      	movs	r3, #1
 80057b8:	e000      	b.n	80057bc <HAL_DMA_Abort+0xdc>
 80057ba:	2300      	movs	r3, #0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d013      	beq.n	80057e8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f022 021e 	bic.w	r2, r2, #30
 80057ce:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	695a      	ldr	r2, [r3, #20]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057de:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	617b      	str	r3, [r7, #20]
 80057e6:	e00a      	b.n	80057fe <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f022 020e 	bic.w	r2, r2, #14
 80057f6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a3c      	ldr	r2, [pc, #240]	; (80058f4 <HAL_DMA_Abort+0x214>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d072      	beq.n	80058ee <HAL_DMA_Abort+0x20e>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a3a      	ldr	r2, [pc, #232]	; (80058f8 <HAL_DMA_Abort+0x218>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d06d      	beq.n	80058ee <HAL_DMA_Abort+0x20e>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a39      	ldr	r2, [pc, #228]	; (80058fc <HAL_DMA_Abort+0x21c>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d068      	beq.n	80058ee <HAL_DMA_Abort+0x20e>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a37      	ldr	r2, [pc, #220]	; (8005900 <HAL_DMA_Abort+0x220>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d063      	beq.n	80058ee <HAL_DMA_Abort+0x20e>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a36      	ldr	r2, [pc, #216]	; (8005904 <HAL_DMA_Abort+0x224>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d05e      	beq.n	80058ee <HAL_DMA_Abort+0x20e>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a34      	ldr	r2, [pc, #208]	; (8005908 <HAL_DMA_Abort+0x228>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d059      	beq.n	80058ee <HAL_DMA_Abort+0x20e>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a33      	ldr	r2, [pc, #204]	; (800590c <HAL_DMA_Abort+0x22c>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d054      	beq.n	80058ee <HAL_DMA_Abort+0x20e>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a31      	ldr	r2, [pc, #196]	; (8005910 <HAL_DMA_Abort+0x230>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d04f      	beq.n	80058ee <HAL_DMA_Abort+0x20e>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a30      	ldr	r2, [pc, #192]	; (8005914 <HAL_DMA_Abort+0x234>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d04a      	beq.n	80058ee <HAL_DMA_Abort+0x20e>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a2e      	ldr	r2, [pc, #184]	; (8005918 <HAL_DMA_Abort+0x238>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d045      	beq.n	80058ee <HAL_DMA_Abort+0x20e>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a2d      	ldr	r2, [pc, #180]	; (800591c <HAL_DMA_Abort+0x23c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d040      	beq.n	80058ee <HAL_DMA_Abort+0x20e>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a2b      	ldr	r2, [pc, #172]	; (8005920 <HAL_DMA_Abort+0x240>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d03b      	beq.n	80058ee <HAL_DMA_Abort+0x20e>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a2a      	ldr	r2, [pc, #168]	; (8005924 <HAL_DMA_Abort+0x244>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d036      	beq.n	80058ee <HAL_DMA_Abort+0x20e>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a28      	ldr	r2, [pc, #160]	; (8005928 <HAL_DMA_Abort+0x248>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d031      	beq.n	80058ee <HAL_DMA_Abort+0x20e>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a27      	ldr	r2, [pc, #156]	; (800592c <HAL_DMA_Abort+0x24c>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d02c      	beq.n	80058ee <HAL_DMA_Abort+0x20e>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a25      	ldr	r2, [pc, #148]	; (8005930 <HAL_DMA_Abort+0x250>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d027      	beq.n	80058ee <HAL_DMA_Abort+0x20e>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a24      	ldr	r2, [pc, #144]	; (8005934 <HAL_DMA_Abort+0x254>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d022      	beq.n	80058ee <HAL_DMA_Abort+0x20e>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a22      	ldr	r2, [pc, #136]	; (8005938 <HAL_DMA_Abort+0x258>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d01d      	beq.n	80058ee <HAL_DMA_Abort+0x20e>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a21      	ldr	r2, [pc, #132]	; (800593c <HAL_DMA_Abort+0x25c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d018      	beq.n	80058ee <HAL_DMA_Abort+0x20e>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a1f      	ldr	r2, [pc, #124]	; (8005940 <HAL_DMA_Abort+0x260>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d013      	beq.n	80058ee <HAL_DMA_Abort+0x20e>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a1e      	ldr	r2, [pc, #120]	; (8005944 <HAL_DMA_Abort+0x264>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d00e      	beq.n	80058ee <HAL_DMA_Abort+0x20e>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a1c      	ldr	r2, [pc, #112]	; (8005948 <HAL_DMA_Abort+0x268>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d009      	beq.n	80058ee <HAL_DMA_Abort+0x20e>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a1b      	ldr	r2, [pc, #108]	; (800594c <HAL_DMA_Abort+0x26c>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d004      	beq.n	80058ee <HAL_DMA_Abort+0x20e>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a19      	ldr	r2, [pc, #100]	; (8005950 <HAL_DMA_Abort+0x270>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d132      	bne.n	8005954 <HAL_DMA_Abort+0x274>
 80058ee:	2301      	movs	r3, #1
 80058f0:	e031      	b.n	8005956 <HAL_DMA_Abort+0x276>
 80058f2:	bf00      	nop
 80058f4:	40020010 	.word	0x40020010
 80058f8:	40020028 	.word	0x40020028
 80058fc:	40020040 	.word	0x40020040
 8005900:	40020058 	.word	0x40020058
 8005904:	40020070 	.word	0x40020070
 8005908:	40020088 	.word	0x40020088
 800590c:	400200a0 	.word	0x400200a0
 8005910:	400200b8 	.word	0x400200b8
 8005914:	40020410 	.word	0x40020410
 8005918:	40020428 	.word	0x40020428
 800591c:	40020440 	.word	0x40020440
 8005920:	40020458 	.word	0x40020458
 8005924:	40020470 	.word	0x40020470
 8005928:	40020488 	.word	0x40020488
 800592c:	400204a0 	.word	0x400204a0
 8005930:	400204b8 	.word	0x400204b8
 8005934:	58025408 	.word	0x58025408
 8005938:	5802541c 	.word	0x5802541c
 800593c:	58025430 	.word	0x58025430
 8005940:	58025444 	.word	0x58025444
 8005944:	58025458 	.word	0x58025458
 8005948:	5802546c 	.word	0x5802546c
 800594c:	58025480 	.word	0x58025480
 8005950:	58025494 	.word	0x58025494
 8005954:	2300      	movs	r3, #0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d007      	beq.n	800596a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005964:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005968:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a6d      	ldr	r2, [pc, #436]	; (8005b24 <HAL_DMA_Abort+0x444>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d04a      	beq.n	8005a0a <HAL_DMA_Abort+0x32a>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a6b      	ldr	r2, [pc, #428]	; (8005b28 <HAL_DMA_Abort+0x448>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d045      	beq.n	8005a0a <HAL_DMA_Abort+0x32a>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a6a      	ldr	r2, [pc, #424]	; (8005b2c <HAL_DMA_Abort+0x44c>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d040      	beq.n	8005a0a <HAL_DMA_Abort+0x32a>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a68      	ldr	r2, [pc, #416]	; (8005b30 <HAL_DMA_Abort+0x450>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d03b      	beq.n	8005a0a <HAL_DMA_Abort+0x32a>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a67      	ldr	r2, [pc, #412]	; (8005b34 <HAL_DMA_Abort+0x454>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d036      	beq.n	8005a0a <HAL_DMA_Abort+0x32a>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a65      	ldr	r2, [pc, #404]	; (8005b38 <HAL_DMA_Abort+0x458>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d031      	beq.n	8005a0a <HAL_DMA_Abort+0x32a>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a64      	ldr	r2, [pc, #400]	; (8005b3c <HAL_DMA_Abort+0x45c>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d02c      	beq.n	8005a0a <HAL_DMA_Abort+0x32a>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a62      	ldr	r2, [pc, #392]	; (8005b40 <HAL_DMA_Abort+0x460>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d027      	beq.n	8005a0a <HAL_DMA_Abort+0x32a>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a61      	ldr	r2, [pc, #388]	; (8005b44 <HAL_DMA_Abort+0x464>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d022      	beq.n	8005a0a <HAL_DMA_Abort+0x32a>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a5f      	ldr	r2, [pc, #380]	; (8005b48 <HAL_DMA_Abort+0x468>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d01d      	beq.n	8005a0a <HAL_DMA_Abort+0x32a>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a5e      	ldr	r2, [pc, #376]	; (8005b4c <HAL_DMA_Abort+0x46c>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d018      	beq.n	8005a0a <HAL_DMA_Abort+0x32a>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a5c      	ldr	r2, [pc, #368]	; (8005b50 <HAL_DMA_Abort+0x470>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d013      	beq.n	8005a0a <HAL_DMA_Abort+0x32a>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a5b      	ldr	r2, [pc, #364]	; (8005b54 <HAL_DMA_Abort+0x474>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d00e      	beq.n	8005a0a <HAL_DMA_Abort+0x32a>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a59      	ldr	r2, [pc, #356]	; (8005b58 <HAL_DMA_Abort+0x478>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d009      	beq.n	8005a0a <HAL_DMA_Abort+0x32a>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a58      	ldr	r2, [pc, #352]	; (8005b5c <HAL_DMA_Abort+0x47c>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d004      	beq.n	8005a0a <HAL_DMA_Abort+0x32a>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a56      	ldr	r2, [pc, #344]	; (8005b60 <HAL_DMA_Abort+0x480>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d108      	bne.n	8005a1c <HAL_DMA_Abort+0x33c>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f022 0201 	bic.w	r2, r2, #1
 8005a18:	601a      	str	r2, [r3, #0]
 8005a1a:	e007      	b.n	8005a2c <HAL_DMA_Abort+0x34c>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f022 0201 	bic.w	r2, r2, #1
 8005a2a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005a2c:	e013      	b.n	8005a56 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a2e:	f7fe fc45 	bl	80042bc <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b05      	cmp	r3, #5
 8005a3a:	d90c      	bls.n	8005a56 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2203      	movs	r2, #3
 8005a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e12d      	b.n	8005cb2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d1e5      	bne.n	8005a2e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a2f      	ldr	r2, [pc, #188]	; (8005b24 <HAL_DMA_Abort+0x444>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d04a      	beq.n	8005b02 <HAL_DMA_Abort+0x422>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a2d      	ldr	r2, [pc, #180]	; (8005b28 <HAL_DMA_Abort+0x448>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d045      	beq.n	8005b02 <HAL_DMA_Abort+0x422>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a2c      	ldr	r2, [pc, #176]	; (8005b2c <HAL_DMA_Abort+0x44c>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d040      	beq.n	8005b02 <HAL_DMA_Abort+0x422>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a2a      	ldr	r2, [pc, #168]	; (8005b30 <HAL_DMA_Abort+0x450>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d03b      	beq.n	8005b02 <HAL_DMA_Abort+0x422>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a29      	ldr	r2, [pc, #164]	; (8005b34 <HAL_DMA_Abort+0x454>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d036      	beq.n	8005b02 <HAL_DMA_Abort+0x422>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a27      	ldr	r2, [pc, #156]	; (8005b38 <HAL_DMA_Abort+0x458>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d031      	beq.n	8005b02 <HAL_DMA_Abort+0x422>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a26      	ldr	r2, [pc, #152]	; (8005b3c <HAL_DMA_Abort+0x45c>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d02c      	beq.n	8005b02 <HAL_DMA_Abort+0x422>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a24      	ldr	r2, [pc, #144]	; (8005b40 <HAL_DMA_Abort+0x460>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d027      	beq.n	8005b02 <HAL_DMA_Abort+0x422>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a23      	ldr	r2, [pc, #140]	; (8005b44 <HAL_DMA_Abort+0x464>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d022      	beq.n	8005b02 <HAL_DMA_Abort+0x422>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a21      	ldr	r2, [pc, #132]	; (8005b48 <HAL_DMA_Abort+0x468>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d01d      	beq.n	8005b02 <HAL_DMA_Abort+0x422>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a20      	ldr	r2, [pc, #128]	; (8005b4c <HAL_DMA_Abort+0x46c>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d018      	beq.n	8005b02 <HAL_DMA_Abort+0x422>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a1e      	ldr	r2, [pc, #120]	; (8005b50 <HAL_DMA_Abort+0x470>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d013      	beq.n	8005b02 <HAL_DMA_Abort+0x422>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a1d      	ldr	r2, [pc, #116]	; (8005b54 <HAL_DMA_Abort+0x474>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d00e      	beq.n	8005b02 <HAL_DMA_Abort+0x422>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a1b      	ldr	r2, [pc, #108]	; (8005b58 <HAL_DMA_Abort+0x478>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d009      	beq.n	8005b02 <HAL_DMA_Abort+0x422>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a1a      	ldr	r2, [pc, #104]	; (8005b5c <HAL_DMA_Abort+0x47c>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d004      	beq.n	8005b02 <HAL_DMA_Abort+0x422>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a18      	ldr	r2, [pc, #96]	; (8005b60 <HAL_DMA_Abort+0x480>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d101      	bne.n	8005b06 <HAL_DMA_Abort+0x426>
 8005b02:	2301      	movs	r3, #1
 8005b04:	e000      	b.n	8005b08 <HAL_DMA_Abort+0x428>
 8005b06:	2300      	movs	r3, #0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d02b      	beq.n	8005b64 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b10:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b16:	f003 031f 	and.w	r3, r3, #31
 8005b1a:	223f      	movs	r2, #63	; 0x3f
 8005b1c:	409a      	lsls	r2, r3
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	609a      	str	r2, [r3, #8]
 8005b22:	e02a      	b.n	8005b7a <HAL_DMA_Abort+0x49a>
 8005b24:	40020010 	.word	0x40020010
 8005b28:	40020028 	.word	0x40020028
 8005b2c:	40020040 	.word	0x40020040
 8005b30:	40020058 	.word	0x40020058
 8005b34:	40020070 	.word	0x40020070
 8005b38:	40020088 	.word	0x40020088
 8005b3c:	400200a0 	.word	0x400200a0
 8005b40:	400200b8 	.word	0x400200b8
 8005b44:	40020410 	.word	0x40020410
 8005b48:	40020428 	.word	0x40020428
 8005b4c:	40020440 	.word	0x40020440
 8005b50:	40020458 	.word	0x40020458
 8005b54:	40020470 	.word	0x40020470
 8005b58:	40020488 	.word	0x40020488
 8005b5c:	400204a0 	.word	0x400204a0
 8005b60:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b68:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b6e:	f003 031f 	and.w	r3, r3, #31
 8005b72:	2201      	movs	r2, #1
 8005b74:	409a      	lsls	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a4f      	ldr	r2, [pc, #316]	; (8005cbc <HAL_DMA_Abort+0x5dc>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d072      	beq.n	8005c6a <HAL_DMA_Abort+0x58a>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a4d      	ldr	r2, [pc, #308]	; (8005cc0 <HAL_DMA_Abort+0x5e0>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d06d      	beq.n	8005c6a <HAL_DMA_Abort+0x58a>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a4c      	ldr	r2, [pc, #304]	; (8005cc4 <HAL_DMA_Abort+0x5e4>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d068      	beq.n	8005c6a <HAL_DMA_Abort+0x58a>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a4a      	ldr	r2, [pc, #296]	; (8005cc8 <HAL_DMA_Abort+0x5e8>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d063      	beq.n	8005c6a <HAL_DMA_Abort+0x58a>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a49      	ldr	r2, [pc, #292]	; (8005ccc <HAL_DMA_Abort+0x5ec>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d05e      	beq.n	8005c6a <HAL_DMA_Abort+0x58a>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a47      	ldr	r2, [pc, #284]	; (8005cd0 <HAL_DMA_Abort+0x5f0>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d059      	beq.n	8005c6a <HAL_DMA_Abort+0x58a>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a46      	ldr	r2, [pc, #280]	; (8005cd4 <HAL_DMA_Abort+0x5f4>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d054      	beq.n	8005c6a <HAL_DMA_Abort+0x58a>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a44      	ldr	r2, [pc, #272]	; (8005cd8 <HAL_DMA_Abort+0x5f8>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d04f      	beq.n	8005c6a <HAL_DMA_Abort+0x58a>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a43      	ldr	r2, [pc, #268]	; (8005cdc <HAL_DMA_Abort+0x5fc>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d04a      	beq.n	8005c6a <HAL_DMA_Abort+0x58a>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a41      	ldr	r2, [pc, #260]	; (8005ce0 <HAL_DMA_Abort+0x600>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d045      	beq.n	8005c6a <HAL_DMA_Abort+0x58a>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a40      	ldr	r2, [pc, #256]	; (8005ce4 <HAL_DMA_Abort+0x604>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d040      	beq.n	8005c6a <HAL_DMA_Abort+0x58a>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a3e      	ldr	r2, [pc, #248]	; (8005ce8 <HAL_DMA_Abort+0x608>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d03b      	beq.n	8005c6a <HAL_DMA_Abort+0x58a>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a3d      	ldr	r2, [pc, #244]	; (8005cec <HAL_DMA_Abort+0x60c>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d036      	beq.n	8005c6a <HAL_DMA_Abort+0x58a>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a3b      	ldr	r2, [pc, #236]	; (8005cf0 <HAL_DMA_Abort+0x610>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d031      	beq.n	8005c6a <HAL_DMA_Abort+0x58a>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a3a      	ldr	r2, [pc, #232]	; (8005cf4 <HAL_DMA_Abort+0x614>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d02c      	beq.n	8005c6a <HAL_DMA_Abort+0x58a>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a38      	ldr	r2, [pc, #224]	; (8005cf8 <HAL_DMA_Abort+0x618>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d027      	beq.n	8005c6a <HAL_DMA_Abort+0x58a>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a37      	ldr	r2, [pc, #220]	; (8005cfc <HAL_DMA_Abort+0x61c>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d022      	beq.n	8005c6a <HAL_DMA_Abort+0x58a>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a35      	ldr	r2, [pc, #212]	; (8005d00 <HAL_DMA_Abort+0x620>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d01d      	beq.n	8005c6a <HAL_DMA_Abort+0x58a>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a34      	ldr	r2, [pc, #208]	; (8005d04 <HAL_DMA_Abort+0x624>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d018      	beq.n	8005c6a <HAL_DMA_Abort+0x58a>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a32      	ldr	r2, [pc, #200]	; (8005d08 <HAL_DMA_Abort+0x628>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d013      	beq.n	8005c6a <HAL_DMA_Abort+0x58a>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a31      	ldr	r2, [pc, #196]	; (8005d0c <HAL_DMA_Abort+0x62c>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d00e      	beq.n	8005c6a <HAL_DMA_Abort+0x58a>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a2f      	ldr	r2, [pc, #188]	; (8005d10 <HAL_DMA_Abort+0x630>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d009      	beq.n	8005c6a <HAL_DMA_Abort+0x58a>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a2e      	ldr	r2, [pc, #184]	; (8005d14 <HAL_DMA_Abort+0x634>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d004      	beq.n	8005c6a <HAL_DMA_Abort+0x58a>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a2c      	ldr	r2, [pc, #176]	; (8005d18 <HAL_DMA_Abort+0x638>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d101      	bne.n	8005c6e <HAL_DMA_Abort+0x58e>
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e000      	b.n	8005c70 <HAL_DMA_Abort+0x590>
 8005c6e:	2300      	movs	r3, #0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d015      	beq.n	8005ca0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005c7c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00c      	beq.n	8005ca0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c94:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005c9e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3718      	adds	r7, #24
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	40020010 	.word	0x40020010
 8005cc0:	40020028 	.word	0x40020028
 8005cc4:	40020040 	.word	0x40020040
 8005cc8:	40020058 	.word	0x40020058
 8005ccc:	40020070 	.word	0x40020070
 8005cd0:	40020088 	.word	0x40020088
 8005cd4:	400200a0 	.word	0x400200a0
 8005cd8:	400200b8 	.word	0x400200b8
 8005cdc:	40020410 	.word	0x40020410
 8005ce0:	40020428 	.word	0x40020428
 8005ce4:	40020440 	.word	0x40020440
 8005ce8:	40020458 	.word	0x40020458
 8005cec:	40020470 	.word	0x40020470
 8005cf0:	40020488 	.word	0x40020488
 8005cf4:	400204a0 	.word	0x400204a0
 8005cf8:	400204b8 	.word	0x400204b8
 8005cfc:	58025408 	.word	0x58025408
 8005d00:	5802541c 	.word	0x5802541c
 8005d04:	58025430 	.word	0x58025430
 8005d08:	58025444 	.word	0x58025444
 8005d0c:	58025458 	.word	0x58025458
 8005d10:	5802546c 	.word	0x5802546c
 8005d14:	58025480 	.word	0x58025480
 8005d18:	58025494 	.word	0x58025494

08005d1c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d101      	bne.n	8005d2e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e237      	b.n	800619e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d004      	beq.n	8005d44 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2280      	movs	r2, #128	; 0x80
 8005d3e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e22c      	b.n	800619e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a5c      	ldr	r2, [pc, #368]	; (8005ebc <HAL_DMA_Abort_IT+0x1a0>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d04a      	beq.n	8005de4 <HAL_DMA_Abort_IT+0xc8>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a5b      	ldr	r2, [pc, #364]	; (8005ec0 <HAL_DMA_Abort_IT+0x1a4>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d045      	beq.n	8005de4 <HAL_DMA_Abort_IT+0xc8>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a59      	ldr	r2, [pc, #356]	; (8005ec4 <HAL_DMA_Abort_IT+0x1a8>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d040      	beq.n	8005de4 <HAL_DMA_Abort_IT+0xc8>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a58      	ldr	r2, [pc, #352]	; (8005ec8 <HAL_DMA_Abort_IT+0x1ac>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d03b      	beq.n	8005de4 <HAL_DMA_Abort_IT+0xc8>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a56      	ldr	r2, [pc, #344]	; (8005ecc <HAL_DMA_Abort_IT+0x1b0>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d036      	beq.n	8005de4 <HAL_DMA_Abort_IT+0xc8>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a55      	ldr	r2, [pc, #340]	; (8005ed0 <HAL_DMA_Abort_IT+0x1b4>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d031      	beq.n	8005de4 <HAL_DMA_Abort_IT+0xc8>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a53      	ldr	r2, [pc, #332]	; (8005ed4 <HAL_DMA_Abort_IT+0x1b8>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d02c      	beq.n	8005de4 <HAL_DMA_Abort_IT+0xc8>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a52      	ldr	r2, [pc, #328]	; (8005ed8 <HAL_DMA_Abort_IT+0x1bc>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d027      	beq.n	8005de4 <HAL_DMA_Abort_IT+0xc8>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a50      	ldr	r2, [pc, #320]	; (8005edc <HAL_DMA_Abort_IT+0x1c0>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d022      	beq.n	8005de4 <HAL_DMA_Abort_IT+0xc8>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a4f      	ldr	r2, [pc, #316]	; (8005ee0 <HAL_DMA_Abort_IT+0x1c4>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d01d      	beq.n	8005de4 <HAL_DMA_Abort_IT+0xc8>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a4d      	ldr	r2, [pc, #308]	; (8005ee4 <HAL_DMA_Abort_IT+0x1c8>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d018      	beq.n	8005de4 <HAL_DMA_Abort_IT+0xc8>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a4c      	ldr	r2, [pc, #304]	; (8005ee8 <HAL_DMA_Abort_IT+0x1cc>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d013      	beq.n	8005de4 <HAL_DMA_Abort_IT+0xc8>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a4a      	ldr	r2, [pc, #296]	; (8005eec <HAL_DMA_Abort_IT+0x1d0>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d00e      	beq.n	8005de4 <HAL_DMA_Abort_IT+0xc8>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a49      	ldr	r2, [pc, #292]	; (8005ef0 <HAL_DMA_Abort_IT+0x1d4>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d009      	beq.n	8005de4 <HAL_DMA_Abort_IT+0xc8>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a47      	ldr	r2, [pc, #284]	; (8005ef4 <HAL_DMA_Abort_IT+0x1d8>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d004      	beq.n	8005de4 <HAL_DMA_Abort_IT+0xc8>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a46      	ldr	r2, [pc, #280]	; (8005ef8 <HAL_DMA_Abort_IT+0x1dc>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d101      	bne.n	8005de8 <HAL_DMA_Abort_IT+0xcc>
 8005de4:	2301      	movs	r3, #1
 8005de6:	e000      	b.n	8005dea <HAL_DMA_Abort_IT+0xce>
 8005de8:	2300      	movs	r3, #0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	f000 8086 	beq.w	8005efc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2204      	movs	r2, #4
 8005df4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a2f      	ldr	r2, [pc, #188]	; (8005ebc <HAL_DMA_Abort_IT+0x1a0>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d04a      	beq.n	8005e98 <HAL_DMA_Abort_IT+0x17c>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a2e      	ldr	r2, [pc, #184]	; (8005ec0 <HAL_DMA_Abort_IT+0x1a4>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d045      	beq.n	8005e98 <HAL_DMA_Abort_IT+0x17c>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a2c      	ldr	r2, [pc, #176]	; (8005ec4 <HAL_DMA_Abort_IT+0x1a8>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d040      	beq.n	8005e98 <HAL_DMA_Abort_IT+0x17c>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a2b      	ldr	r2, [pc, #172]	; (8005ec8 <HAL_DMA_Abort_IT+0x1ac>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d03b      	beq.n	8005e98 <HAL_DMA_Abort_IT+0x17c>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a29      	ldr	r2, [pc, #164]	; (8005ecc <HAL_DMA_Abort_IT+0x1b0>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d036      	beq.n	8005e98 <HAL_DMA_Abort_IT+0x17c>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a28      	ldr	r2, [pc, #160]	; (8005ed0 <HAL_DMA_Abort_IT+0x1b4>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d031      	beq.n	8005e98 <HAL_DMA_Abort_IT+0x17c>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a26      	ldr	r2, [pc, #152]	; (8005ed4 <HAL_DMA_Abort_IT+0x1b8>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d02c      	beq.n	8005e98 <HAL_DMA_Abort_IT+0x17c>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a25      	ldr	r2, [pc, #148]	; (8005ed8 <HAL_DMA_Abort_IT+0x1bc>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d027      	beq.n	8005e98 <HAL_DMA_Abort_IT+0x17c>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a23      	ldr	r2, [pc, #140]	; (8005edc <HAL_DMA_Abort_IT+0x1c0>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d022      	beq.n	8005e98 <HAL_DMA_Abort_IT+0x17c>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a22      	ldr	r2, [pc, #136]	; (8005ee0 <HAL_DMA_Abort_IT+0x1c4>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d01d      	beq.n	8005e98 <HAL_DMA_Abort_IT+0x17c>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a20      	ldr	r2, [pc, #128]	; (8005ee4 <HAL_DMA_Abort_IT+0x1c8>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d018      	beq.n	8005e98 <HAL_DMA_Abort_IT+0x17c>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a1f      	ldr	r2, [pc, #124]	; (8005ee8 <HAL_DMA_Abort_IT+0x1cc>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d013      	beq.n	8005e98 <HAL_DMA_Abort_IT+0x17c>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a1d      	ldr	r2, [pc, #116]	; (8005eec <HAL_DMA_Abort_IT+0x1d0>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d00e      	beq.n	8005e98 <HAL_DMA_Abort_IT+0x17c>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a1c      	ldr	r2, [pc, #112]	; (8005ef0 <HAL_DMA_Abort_IT+0x1d4>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d009      	beq.n	8005e98 <HAL_DMA_Abort_IT+0x17c>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a1a      	ldr	r2, [pc, #104]	; (8005ef4 <HAL_DMA_Abort_IT+0x1d8>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d004      	beq.n	8005e98 <HAL_DMA_Abort_IT+0x17c>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a19      	ldr	r2, [pc, #100]	; (8005ef8 <HAL_DMA_Abort_IT+0x1dc>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d108      	bne.n	8005eaa <HAL_DMA_Abort_IT+0x18e>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 0201 	bic.w	r2, r2, #1
 8005ea6:	601a      	str	r2, [r3, #0]
 8005ea8:	e178      	b.n	800619c <HAL_DMA_Abort_IT+0x480>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f022 0201 	bic.w	r2, r2, #1
 8005eb8:	601a      	str	r2, [r3, #0]
 8005eba:	e16f      	b.n	800619c <HAL_DMA_Abort_IT+0x480>
 8005ebc:	40020010 	.word	0x40020010
 8005ec0:	40020028 	.word	0x40020028
 8005ec4:	40020040 	.word	0x40020040
 8005ec8:	40020058 	.word	0x40020058
 8005ecc:	40020070 	.word	0x40020070
 8005ed0:	40020088 	.word	0x40020088
 8005ed4:	400200a0 	.word	0x400200a0
 8005ed8:	400200b8 	.word	0x400200b8
 8005edc:	40020410 	.word	0x40020410
 8005ee0:	40020428 	.word	0x40020428
 8005ee4:	40020440 	.word	0x40020440
 8005ee8:	40020458 	.word	0x40020458
 8005eec:	40020470 	.word	0x40020470
 8005ef0:	40020488 	.word	0x40020488
 8005ef4:	400204a0 	.word	0x400204a0
 8005ef8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f022 020e 	bic.w	r2, r2, #14
 8005f0a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a6c      	ldr	r2, [pc, #432]	; (80060c4 <HAL_DMA_Abort_IT+0x3a8>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d04a      	beq.n	8005fac <HAL_DMA_Abort_IT+0x290>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a6b      	ldr	r2, [pc, #428]	; (80060c8 <HAL_DMA_Abort_IT+0x3ac>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d045      	beq.n	8005fac <HAL_DMA_Abort_IT+0x290>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a69      	ldr	r2, [pc, #420]	; (80060cc <HAL_DMA_Abort_IT+0x3b0>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d040      	beq.n	8005fac <HAL_DMA_Abort_IT+0x290>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a68      	ldr	r2, [pc, #416]	; (80060d0 <HAL_DMA_Abort_IT+0x3b4>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d03b      	beq.n	8005fac <HAL_DMA_Abort_IT+0x290>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a66      	ldr	r2, [pc, #408]	; (80060d4 <HAL_DMA_Abort_IT+0x3b8>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d036      	beq.n	8005fac <HAL_DMA_Abort_IT+0x290>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a65      	ldr	r2, [pc, #404]	; (80060d8 <HAL_DMA_Abort_IT+0x3bc>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d031      	beq.n	8005fac <HAL_DMA_Abort_IT+0x290>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a63      	ldr	r2, [pc, #396]	; (80060dc <HAL_DMA_Abort_IT+0x3c0>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d02c      	beq.n	8005fac <HAL_DMA_Abort_IT+0x290>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a62      	ldr	r2, [pc, #392]	; (80060e0 <HAL_DMA_Abort_IT+0x3c4>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d027      	beq.n	8005fac <HAL_DMA_Abort_IT+0x290>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a60      	ldr	r2, [pc, #384]	; (80060e4 <HAL_DMA_Abort_IT+0x3c8>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d022      	beq.n	8005fac <HAL_DMA_Abort_IT+0x290>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a5f      	ldr	r2, [pc, #380]	; (80060e8 <HAL_DMA_Abort_IT+0x3cc>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d01d      	beq.n	8005fac <HAL_DMA_Abort_IT+0x290>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a5d      	ldr	r2, [pc, #372]	; (80060ec <HAL_DMA_Abort_IT+0x3d0>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d018      	beq.n	8005fac <HAL_DMA_Abort_IT+0x290>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a5c      	ldr	r2, [pc, #368]	; (80060f0 <HAL_DMA_Abort_IT+0x3d4>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d013      	beq.n	8005fac <HAL_DMA_Abort_IT+0x290>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a5a      	ldr	r2, [pc, #360]	; (80060f4 <HAL_DMA_Abort_IT+0x3d8>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d00e      	beq.n	8005fac <HAL_DMA_Abort_IT+0x290>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a59      	ldr	r2, [pc, #356]	; (80060f8 <HAL_DMA_Abort_IT+0x3dc>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d009      	beq.n	8005fac <HAL_DMA_Abort_IT+0x290>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a57      	ldr	r2, [pc, #348]	; (80060fc <HAL_DMA_Abort_IT+0x3e0>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d004      	beq.n	8005fac <HAL_DMA_Abort_IT+0x290>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a56      	ldr	r2, [pc, #344]	; (8006100 <HAL_DMA_Abort_IT+0x3e4>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d108      	bne.n	8005fbe <HAL_DMA_Abort_IT+0x2a2>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 0201 	bic.w	r2, r2, #1
 8005fba:	601a      	str	r2, [r3, #0]
 8005fbc:	e007      	b.n	8005fce <HAL_DMA_Abort_IT+0x2b2>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f022 0201 	bic.w	r2, r2, #1
 8005fcc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a3c      	ldr	r2, [pc, #240]	; (80060c4 <HAL_DMA_Abort_IT+0x3a8>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d072      	beq.n	80060be <HAL_DMA_Abort_IT+0x3a2>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a3a      	ldr	r2, [pc, #232]	; (80060c8 <HAL_DMA_Abort_IT+0x3ac>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d06d      	beq.n	80060be <HAL_DMA_Abort_IT+0x3a2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a39      	ldr	r2, [pc, #228]	; (80060cc <HAL_DMA_Abort_IT+0x3b0>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d068      	beq.n	80060be <HAL_DMA_Abort_IT+0x3a2>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a37      	ldr	r2, [pc, #220]	; (80060d0 <HAL_DMA_Abort_IT+0x3b4>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d063      	beq.n	80060be <HAL_DMA_Abort_IT+0x3a2>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a36      	ldr	r2, [pc, #216]	; (80060d4 <HAL_DMA_Abort_IT+0x3b8>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d05e      	beq.n	80060be <HAL_DMA_Abort_IT+0x3a2>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a34      	ldr	r2, [pc, #208]	; (80060d8 <HAL_DMA_Abort_IT+0x3bc>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d059      	beq.n	80060be <HAL_DMA_Abort_IT+0x3a2>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a33      	ldr	r2, [pc, #204]	; (80060dc <HAL_DMA_Abort_IT+0x3c0>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d054      	beq.n	80060be <HAL_DMA_Abort_IT+0x3a2>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a31      	ldr	r2, [pc, #196]	; (80060e0 <HAL_DMA_Abort_IT+0x3c4>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d04f      	beq.n	80060be <HAL_DMA_Abort_IT+0x3a2>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a30      	ldr	r2, [pc, #192]	; (80060e4 <HAL_DMA_Abort_IT+0x3c8>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d04a      	beq.n	80060be <HAL_DMA_Abort_IT+0x3a2>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a2e      	ldr	r2, [pc, #184]	; (80060e8 <HAL_DMA_Abort_IT+0x3cc>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d045      	beq.n	80060be <HAL_DMA_Abort_IT+0x3a2>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a2d      	ldr	r2, [pc, #180]	; (80060ec <HAL_DMA_Abort_IT+0x3d0>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d040      	beq.n	80060be <HAL_DMA_Abort_IT+0x3a2>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a2b      	ldr	r2, [pc, #172]	; (80060f0 <HAL_DMA_Abort_IT+0x3d4>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d03b      	beq.n	80060be <HAL_DMA_Abort_IT+0x3a2>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a2a      	ldr	r2, [pc, #168]	; (80060f4 <HAL_DMA_Abort_IT+0x3d8>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d036      	beq.n	80060be <HAL_DMA_Abort_IT+0x3a2>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a28      	ldr	r2, [pc, #160]	; (80060f8 <HAL_DMA_Abort_IT+0x3dc>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d031      	beq.n	80060be <HAL_DMA_Abort_IT+0x3a2>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a27      	ldr	r2, [pc, #156]	; (80060fc <HAL_DMA_Abort_IT+0x3e0>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d02c      	beq.n	80060be <HAL_DMA_Abort_IT+0x3a2>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a25      	ldr	r2, [pc, #148]	; (8006100 <HAL_DMA_Abort_IT+0x3e4>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d027      	beq.n	80060be <HAL_DMA_Abort_IT+0x3a2>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a24      	ldr	r2, [pc, #144]	; (8006104 <HAL_DMA_Abort_IT+0x3e8>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d022      	beq.n	80060be <HAL_DMA_Abort_IT+0x3a2>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a22      	ldr	r2, [pc, #136]	; (8006108 <HAL_DMA_Abort_IT+0x3ec>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d01d      	beq.n	80060be <HAL_DMA_Abort_IT+0x3a2>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a21      	ldr	r2, [pc, #132]	; (800610c <HAL_DMA_Abort_IT+0x3f0>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d018      	beq.n	80060be <HAL_DMA_Abort_IT+0x3a2>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a1f      	ldr	r2, [pc, #124]	; (8006110 <HAL_DMA_Abort_IT+0x3f4>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d013      	beq.n	80060be <HAL_DMA_Abort_IT+0x3a2>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a1e      	ldr	r2, [pc, #120]	; (8006114 <HAL_DMA_Abort_IT+0x3f8>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d00e      	beq.n	80060be <HAL_DMA_Abort_IT+0x3a2>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a1c      	ldr	r2, [pc, #112]	; (8006118 <HAL_DMA_Abort_IT+0x3fc>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d009      	beq.n	80060be <HAL_DMA_Abort_IT+0x3a2>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a1b      	ldr	r2, [pc, #108]	; (800611c <HAL_DMA_Abort_IT+0x400>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d004      	beq.n	80060be <HAL_DMA_Abort_IT+0x3a2>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a19      	ldr	r2, [pc, #100]	; (8006120 <HAL_DMA_Abort_IT+0x404>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d132      	bne.n	8006124 <HAL_DMA_Abort_IT+0x408>
 80060be:	2301      	movs	r3, #1
 80060c0:	e031      	b.n	8006126 <HAL_DMA_Abort_IT+0x40a>
 80060c2:	bf00      	nop
 80060c4:	40020010 	.word	0x40020010
 80060c8:	40020028 	.word	0x40020028
 80060cc:	40020040 	.word	0x40020040
 80060d0:	40020058 	.word	0x40020058
 80060d4:	40020070 	.word	0x40020070
 80060d8:	40020088 	.word	0x40020088
 80060dc:	400200a0 	.word	0x400200a0
 80060e0:	400200b8 	.word	0x400200b8
 80060e4:	40020410 	.word	0x40020410
 80060e8:	40020428 	.word	0x40020428
 80060ec:	40020440 	.word	0x40020440
 80060f0:	40020458 	.word	0x40020458
 80060f4:	40020470 	.word	0x40020470
 80060f8:	40020488 	.word	0x40020488
 80060fc:	400204a0 	.word	0x400204a0
 8006100:	400204b8 	.word	0x400204b8
 8006104:	58025408 	.word	0x58025408
 8006108:	5802541c 	.word	0x5802541c
 800610c:	58025430 	.word	0x58025430
 8006110:	58025444 	.word	0x58025444
 8006114:	58025458 	.word	0x58025458
 8006118:	5802546c 	.word	0x5802546c
 800611c:	58025480 	.word	0x58025480
 8006120:	58025494 	.word	0x58025494
 8006124:	2300      	movs	r3, #0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d028      	beq.n	800617c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006134:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006138:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800613e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006144:	f003 031f 	and.w	r3, r3, #31
 8006148:	2201      	movs	r2, #1
 800614a:	409a      	lsls	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006158:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00c      	beq.n	800617c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800616c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006170:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800617a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006190:	2b00      	cmp	r3, #0
 8006192:	d003      	beq.n	800619c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop

080061a8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b08a      	sub	sp, #40	; 0x28
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80061b0:	2300      	movs	r3, #0
 80061b2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80061b4:	4b67      	ldr	r3, [pc, #412]	; (8006354 <HAL_DMA_IRQHandler+0x1ac>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a67      	ldr	r2, [pc, #412]	; (8006358 <HAL_DMA_IRQHandler+0x1b0>)
 80061ba:	fba2 2303 	umull	r2, r3, r2, r3
 80061be:	0a9b      	lsrs	r3, r3, #10
 80061c0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061c6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061cc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80061ce:	6a3b      	ldr	r3, [r7, #32]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a5f      	ldr	r2, [pc, #380]	; (800635c <HAL_DMA_IRQHandler+0x1b4>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d04a      	beq.n	800627a <HAL_DMA_IRQHandler+0xd2>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a5d      	ldr	r2, [pc, #372]	; (8006360 <HAL_DMA_IRQHandler+0x1b8>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d045      	beq.n	800627a <HAL_DMA_IRQHandler+0xd2>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a5c      	ldr	r2, [pc, #368]	; (8006364 <HAL_DMA_IRQHandler+0x1bc>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d040      	beq.n	800627a <HAL_DMA_IRQHandler+0xd2>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a5a      	ldr	r2, [pc, #360]	; (8006368 <HAL_DMA_IRQHandler+0x1c0>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d03b      	beq.n	800627a <HAL_DMA_IRQHandler+0xd2>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a59      	ldr	r2, [pc, #356]	; (800636c <HAL_DMA_IRQHandler+0x1c4>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d036      	beq.n	800627a <HAL_DMA_IRQHandler+0xd2>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a57      	ldr	r2, [pc, #348]	; (8006370 <HAL_DMA_IRQHandler+0x1c8>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d031      	beq.n	800627a <HAL_DMA_IRQHandler+0xd2>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a56      	ldr	r2, [pc, #344]	; (8006374 <HAL_DMA_IRQHandler+0x1cc>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d02c      	beq.n	800627a <HAL_DMA_IRQHandler+0xd2>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a54      	ldr	r2, [pc, #336]	; (8006378 <HAL_DMA_IRQHandler+0x1d0>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d027      	beq.n	800627a <HAL_DMA_IRQHandler+0xd2>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a53      	ldr	r2, [pc, #332]	; (800637c <HAL_DMA_IRQHandler+0x1d4>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d022      	beq.n	800627a <HAL_DMA_IRQHandler+0xd2>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a51      	ldr	r2, [pc, #324]	; (8006380 <HAL_DMA_IRQHandler+0x1d8>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d01d      	beq.n	800627a <HAL_DMA_IRQHandler+0xd2>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a50      	ldr	r2, [pc, #320]	; (8006384 <HAL_DMA_IRQHandler+0x1dc>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d018      	beq.n	800627a <HAL_DMA_IRQHandler+0xd2>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a4e      	ldr	r2, [pc, #312]	; (8006388 <HAL_DMA_IRQHandler+0x1e0>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d013      	beq.n	800627a <HAL_DMA_IRQHandler+0xd2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a4d      	ldr	r2, [pc, #308]	; (800638c <HAL_DMA_IRQHandler+0x1e4>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d00e      	beq.n	800627a <HAL_DMA_IRQHandler+0xd2>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a4b      	ldr	r2, [pc, #300]	; (8006390 <HAL_DMA_IRQHandler+0x1e8>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d009      	beq.n	800627a <HAL_DMA_IRQHandler+0xd2>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a4a      	ldr	r2, [pc, #296]	; (8006394 <HAL_DMA_IRQHandler+0x1ec>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d004      	beq.n	800627a <HAL_DMA_IRQHandler+0xd2>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a48      	ldr	r2, [pc, #288]	; (8006398 <HAL_DMA_IRQHandler+0x1f0>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d101      	bne.n	800627e <HAL_DMA_IRQHandler+0xd6>
 800627a:	2301      	movs	r3, #1
 800627c:	e000      	b.n	8006280 <HAL_DMA_IRQHandler+0xd8>
 800627e:	2300      	movs	r3, #0
 8006280:	2b00      	cmp	r3, #0
 8006282:	f000 842b 	beq.w	8006adc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800628a:	f003 031f 	and.w	r3, r3, #31
 800628e:	2208      	movs	r2, #8
 8006290:	409a      	lsls	r2, r3
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	4013      	ands	r3, r2
 8006296:	2b00      	cmp	r3, #0
 8006298:	f000 80a2 	beq.w	80063e0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a2e      	ldr	r2, [pc, #184]	; (800635c <HAL_DMA_IRQHandler+0x1b4>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d04a      	beq.n	800633c <HAL_DMA_IRQHandler+0x194>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a2d      	ldr	r2, [pc, #180]	; (8006360 <HAL_DMA_IRQHandler+0x1b8>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d045      	beq.n	800633c <HAL_DMA_IRQHandler+0x194>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a2b      	ldr	r2, [pc, #172]	; (8006364 <HAL_DMA_IRQHandler+0x1bc>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d040      	beq.n	800633c <HAL_DMA_IRQHandler+0x194>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a2a      	ldr	r2, [pc, #168]	; (8006368 <HAL_DMA_IRQHandler+0x1c0>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d03b      	beq.n	800633c <HAL_DMA_IRQHandler+0x194>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a28      	ldr	r2, [pc, #160]	; (800636c <HAL_DMA_IRQHandler+0x1c4>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d036      	beq.n	800633c <HAL_DMA_IRQHandler+0x194>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a27      	ldr	r2, [pc, #156]	; (8006370 <HAL_DMA_IRQHandler+0x1c8>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d031      	beq.n	800633c <HAL_DMA_IRQHandler+0x194>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a25      	ldr	r2, [pc, #148]	; (8006374 <HAL_DMA_IRQHandler+0x1cc>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d02c      	beq.n	800633c <HAL_DMA_IRQHandler+0x194>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a24      	ldr	r2, [pc, #144]	; (8006378 <HAL_DMA_IRQHandler+0x1d0>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d027      	beq.n	800633c <HAL_DMA_IRQHandler+0x194>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a22      	ldr	r2, [pc, #136]	; (800637c <HAL_DMA_IRQHandler+0x1d4>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d022      	beq.n	800633c <HAL_DMA_IRQHandler+0x194>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a21      	ldr	r2, [pc, #132]	; (8006380 <HAL_DMA_IRQHandler+0x1d8>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d01d      	beq.n	800633c <HAL_DMA_IRQHandler+0x194>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a1f      	ldr	r2, [pc, #124]	; (8006384 <HAL_DMA_IRQHandler+0x1dc>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d018      	beq.n	800633c <HAL_DMA_IRQHandler+0x194>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a1e      	ldr	r2, [pc, #120]	; (8006388 <HAL_DMA_IRQHandler+0x1e0>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d013      	beq.n	800633c <HAL_DMA_IRQHandler+0x194>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a1c      	ldr	r2, [pc, #112]	; (800638c <HAL_DMA_IRQHandler+0x1e4>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d00e      	beq.n	800633c <HAL_DMA_IRQHandler+0x194>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a1b      	ldr	r2, [pc, #108]	; (8006390 <HAL_DMA_IRQHandler+0x1e8>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d009      	beq.n	800633c <HAL_DMA_IRQHandler+0x194>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a19      	ldr	r2, [pc, #100]	; (8006394 <HAL_DMA_IRQHandler+0x1ec>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d004      	beq.n	800633c <HAL_DMA_IRQHandler+0x194>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a18      	ldr	r2, [pc, #96]	; (8006398 <HAL_DMA_IRQHandler+0x1f0>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d12f      	bne.n	800639c <HAL_DMA_IRQHandler+0x1f4>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 0304 	and.w	r3, r3, #4
 8006346:	2b00      	cmp	r3, #0
 8006348:	bf14      	ite	ne
 800634a:	2301      	movne	r3, #1
 800634c:	2300      	moveq	r3, #0
 800634e:	b2db      	uxtb	r3, r3
 8006350:	e02e      	b.n	80063b0 <HAL_DMA_IRQHandler+0x208>
 8006352:	bf00      	nop
 8006354:	24000044 	.word	0x24000044
 8006358:	1b4e81b5 	.word	0x1b4e81b5
 800635c:	40020010 	.word	0x40020010
 8006360:	40020028 	.word	0x40020028
 8006364:	40020040 	.word	0x40020040
 8006368:	40020058 	.word	0x40020058
 800636c:	40020070 	.word	0x40020070
 8006370:	40020088 	.word	0x40020088
 8006374:	400200a0 	.word	0x400200a0
 8006378:	400200b8 	.word	0x400200b8
 800637c:	40020410 	.word	0x40020410
 8006380:	40020428 	.word	0x40020428
 8006384:	40020440 	.word	0x40020440
 8006388:	40020458 	.word	0x40020458
 800638c:	40020470 	.word	0x40020470
 8006390:	40020488 	.word	0x40020488
 8006394:	400204a0 	.word	0x400204a0
 8006398:	400204b8 	.word	0x400204b8
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0308 	and.w	r3, r3, #8
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	bf14      	ite	ne
 80063aa:	2301      	movne	r3, #1
 80063ac:	2300      	moveq	r3, #0
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d015      	beq.n	80063e0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f022 0204 	bic.w	r2, r2, #4
 80063c2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063c8:	f003 031f 	and.w	r3, r3, #31
 80063cc:	2208      	movs	r2, #8
 80063ce:	409a      	lsls	r2, r3
 80063d0:	6a3b      	ldr	r3, [r7, #32]
 80063d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d8:	f043 0201 	orr.w	r2, r3, #1
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063e4:	f003 031f 	and.w	r3, r3, #31
 80063e8:	69ba      	ldr	r2, [r7, #24]
 80063ea:	fa22 f303 	lsr.w	r3, r2, r3
 80063ee:	f003 0301 	and.w	r3, r3, #1
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d06e      	beq.n	80064d4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a69      	ldr	r2, [pc, #420]	; (80065a0 <HAL_DMA_IRQHandler+0x3f8>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d04a      	beq.n	8006496 <HAL_DMA_IRQHandler+0x2ee>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a67      	ldr	r2, [pc, #412]	; (80065a4 <HAL_DMA_IRQHandler+0x3fc>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d045      	beq.n	8006496 <HAL_DMA_IRQHandler+0x2ee>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a66      	ldr	r2, [pc, #408]	; (80065a8 <HAL_DMA_IRQHandler+0x400>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d040      	beq.n	8006496 <HAL_DMA_IRQHandler+0x2ee>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a64      	ldr	r2, [pc, #400]	; (80065ac <HAL_DMA_IRQHandler+0x404>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d03b      	beq.n	8006496 <HAL_DMA_IRQHandler+0x2ee>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a63      	ldr	r2, [pc, #396]	; (80065b0 <HAL_DMA_IRQHandler+0x408>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d036      	beq.n	8006496 <HAL_DMA_IRQHandler+0x2ee>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a61      	ldr	r2, [pc, #388]	; (80065b4 <HAL_DMA_IRQHandler+0x40c>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d031      	beq.n	8006496 <HAL_DMA_IRQHandler+0x2ee>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a60      	ldr	r2, [pc, #384]	; (80065b8 <HAL_DMA_IRQHandler+0x410>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d02c      	beq.n	8006496 <HAL_DMA_IRQHandler+0x2ee>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a5e      	ldr	r2, [pc, #376]	; (80065bc <HAL_DMA_IRQHandler+0x414>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d027      	beq.n	8006496 <HAL_DMA_IRQHandler+0x2ee>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a5d      	ldr	r2, [pc, #372]	; (80065c0 <HAL_DMA_IRQHandler+0x418>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d022      	beq.n	8006496 <HAL_DMA_IRQHandler+0x2ee>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a5b      	ldr	r2, [pc, #364]	; (80065c4 <HAL_DMA_IRQHandler+0x41c>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d01d      	beq.n	8006496 <HAL_DMA_IRQHandler+0x2ee>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a5a      	ldr	r2, [pc, #360]	; (80065c8 <HAL_DMA_IRQHandler+0x420>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d018      	beq.n	8006496 <HAL_DMA_IRQHandler+0x2ee>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a58      	ldr	r2, [pc, #352]	; (80065cc <HAL_DMA_IRQHandler+0x424>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d013      	beq.n	8006496 <HAL_DMA_IRQHandler+0x2ee>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a57      	ldr	r2, [pc, #348]	; (80065d0 <HAL_DMA_IRQHandler+0x428>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d00e      	beq.n	8006496 <HAL_DMA_IRQHandler+0x2ee>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a55      	ldr	r2, [pc, #340]	; (80065d4 <HAL_DMA_IRQHandler+0x42c>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d009      	beq.n	8006496 <HAL_DMA_IRQHandler+0x2ee>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a54      	ldr	r2, [pc, #336]	; (80065d8 <HAL_DMA_IRQHandler+0x430>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d004      	beq.n	8006496 <HAL_DMA_IRQHandler+0x2ee>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a52      	ldr	r2, [pc, #328]	; (80065dc <HAL_DMA_IRQHandler+0x434>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d10a      	bne.n	80064ac <HAL_DMA_IRQHandler+0x304>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	695b      	ldr	r3, [r3, #20]
 800649c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	bf14      	ite	ne
 80064a4:	2301      	movne	r3, #1
 80064a6:	2300      	moveq	r3, #0
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	e003      	b.n	80064b4 <HAL_DMA_IRQHandler+0x30c>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2300      	movs	r3, #0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00d      	beq.n	80064d4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064bc:	f003 031f 	and.w	r3, r3, #31
 80064c0:	2201      	movs	r2, #1
 80064c2:	409a      	lsls	r2, r3
 80064c4:	6a3b      	ldr	r3, [r7, #32]
 80064c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064cc:	f043 0202 	orr.w	r2, r3, #2
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064d8:	f003 031f 	and.w	r3, r3, #31
 80064dc:	2204      	movs	r2, #4
 80064de:	409a      	lsls	r2, r3
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	4013      	ands	r3, r2
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f000 808f 	beq.w	8006608 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a2c      	ldr	r2, [pc, #176]	; (80065a0 <HAL_DMA_IRQHandler+0x3f8>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d04a      	beq.n	800658a <HAL_DMA_IRQHandler+0x3e2>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a2a      	ldr	r2, [pc, #168]	; (80065a4 <HAL_DMA_IRQHandler+0x3fc>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d045      	beq.n	800658a <HAL_DMA_IRQHandler+0x3e2>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a29      	ldr	r2, [pc, #164]	; (80065a8 <HAL_DMA_IRQHandler+0x400>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d040      	beq.n	800658a <HAL_DMA_IRQHandler+0x3e2>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a27      	ldr	r2, [pc, #156]	; (80065ac <HAL_DMA_IRQHandler+0x404>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d03b      	beq.n	800658a <HAL_DMA_IRQHandler+0x3e2>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a26      	ldr	r2, [pc, #152]	; (80065b0 <HAL_DMA_IRQHandler+0x408>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d036      	beq.n	800658a <HAL_DMA_IRQHandler+0x3e2>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a24      	ldr	r2, [pc, #144]	; (80065b4 <HAL_DMA_IRQHandler+0x40c>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d031      	beq.n	800658a <HAL_DMA_IRQHandler+0x3e2>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a23      	ldr	r2, [pc, #140]	; (80065b8 <HAL_DMA_IRQHandler+0x410>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d02c      	beq.n	800658a <HAL_DMA_IRQHandler+0x3e2>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a21      	ldr	r2, [pc, #132]	; (80065bc <HAL_DMA_IRQHandler+0x414>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d027      	beq.n	800658a <HAL_DMA_IRQHandler+0x3e2>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a20      	ldr	r2, [pc, #128]	; (80065c0 <HAL_DMA_IRQHandler+0x418>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d022      	beq.n	800658a <HAL_DMA_IRQHandler+0x3e2>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a1e      	ldr	r2, [pc, #120]	; (80065c4 <HAL_DMA_IRQHandler+0x41c>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d01d      	beq.n	800658a <HAL_DMA_IRQHandler+0x3e2>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a1d      	ldr	r2, [pc, #116]	; (80065c8 <HAL_DMA_IRQHandler+0x420>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d018      	beq.n	800658a <HAL_DMA_IRQHandler+0x3e2>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a1b      	ldr	r2, [pc, #108]	; (80065cc <HAL_DMA_IRQHandler+0x424>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d013      	beq.n	800658a <HAL_DMA_IRQHandler+0x3e2>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a1a      	ldr	r2, [pc, #104]	; (80065d0 <HAL_DMA_IRQHandler+0x428>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d00e      	beq.n	800658a <HAL_DMA_IRQHandler+0x3e2>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a18      	ldr	r2, [pc, #96]	; (80065d4 <HAL_DMA_IRQHandler+0x42c>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d009      	beq.n	800658a <HAL_DMA_IRQHandler+0x3e2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a17      	ldr	r2, [pc, #92]	; (80065d8 <HAL_DMA_IRQHandler+0x430>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d004      	beq.n	800658a <HAL_DMA_IRQHandler+0x3e2>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a15      	ldr	r2, [pc, #84]	; (80065dc <HAL_DMA_IRQHandler+0x434>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d12a      	bne.n	80065e0 <HAL_DMA_IRQHandler+0x438>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0302 	and.w	r3, r3, #2
 8006594:	2b00      	cmp	r3, #0
 8006596:	bf14      	ite	ne
 8006598:	2301      	movne	r3, #1
 800659a:	2300      	moveq	r3, #0
 800659c:	b2db      	uxtb	r3, r3
 800659e:	e023      	b.n	80065e8 <HAL_DMA_IRQHandler+0x440>
 80065a0:	40020010 	.word	0x40020010
 80065a4:	40020028 	.word	0x40020028
 80065a8:	40020040 	.word	0x40020040
 80065ac:	40020058 	.word	0x40020058
 80065b0:	40020070 	.word	0x40020070
 80065b4:	40020088 	.word	0x40020088
 80065b8:	400200a0 	.word	0x400200a0
 80065bc:	400200b8 	.word	0x400200b8
 80065c0:	40020410 	.word	0x40020410
 80065c4:	40020428 	.word	0x40020428
 80065c8:	40020440 	.word	0x40020440
 80065cc:	40020458 	.word	0x40020458
 80065d0:	40020470 	.word	0x40020470
 80065d4:	40020488 	.word	0x40020488
 80065d8:	400204a0 	.word	0x400204a0
 80065dc:	400204b8 	.word	0x400204b8
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2300      	movs	r3, #0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00d      	beq.n	8006608 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065f0:	f003 031f 	and.w	r3, r3, #31
 80065f4:	2204      	movs	r2, #4
 80065f6:	409a      	lsls	r2, r3
 80065f8:	6a3b      	ldr	r3, [r7, #32]
 80065fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006600:	f043 0204 	orr.w	r2, r3, #4
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800660c:	f003 031f 	and.w	r3, r3, #31
 8006610:	2210      	movs	r2, #16
 8006612:	409a      	lsls	r2, r3
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	4013      	ands	r3, r2
 8006618:	2b00      	cmp	r3, #0
 800661a:	f000 80a6 	beq.w	800676a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a85      	ldr	r2, [pc, #532]	; (8006838 <HAL_DMA_IRQHandler+0x690>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d04a      	beq.n	80066be <HAL_DMA_IRQHandler+0x516>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a83      	ldr	r2, [pc, #524]	; (800683c <HAL_DMA_IRQHandler+0x694>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d045      	beq.n	80066be <HAL_DMA_IRQHandler+0x516>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a82      	ldr	r2, [pc, #520]	; (8006840 <HAL_DMA_IRQHandler+0x698>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d040      	beq.n	80066be <HAL_DMA_IRQHandler+0x516>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a80      	ldr	r2, [pc, #512]	; (8006844 <HAL_DMA_IRQHandler+0x69c>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d03b      	beq.n	80066be <HAL_DMA_IRQHandler+0x516>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a7f      	ldr	r2, [pc, #508]	; (8006848 <HAL_DMA_IRQHandler+0x6a0>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d036      	beq.n	80066be <HAL_DMA_IRQHandler+0x516>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a7d      	ldr	r2, [pc, #500]	; (800684c <HAL_DMA_IRQHandler+0x6a4>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d031      	beq.n	80066be <HAL_DMA_IRQHandler+0x516>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a7c      	ldr	r2, [pc, #496]	; (8006850 <HAL_DMA_IRQHandler+0x6a8>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d02c      	beq.n	80066be <HAL_DMA_IRQHandler+0x516>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a7a      	ldr	r2, [pc, #488]	; (8006854 <HAL_DMA_IRQHandler+0x6ac>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d027      	beq.n	80066be <HAL_DMA_IRQHandler+0x516>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a79      	ldr	r2, [pc, #484]	; (8006858 <HAL_DMA_IRQHandler+0x6b0>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d022      	beq.n	80066be <HAL_DMA_IRQHandler+0x516>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a77      	ldr	r2, [pc, #476]	; (800685c <HAL_DMA_IRQHandler+0x6b4>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d01d      	beq.n	80066be <HAL_DMA_IRQHandler+0x516>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a76      	ldr	r2, [pc, #472]	; (8006860 <HAL_DMA_IRQHandler+0x6b8>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d018      	beq.n	80066be <HAL_DMA_IRQHandler+0x516>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a74      	ldr	r2, [pc, #464]	; (8006864 <HAL_DMA_IRQHandler+0x6bc>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d013      	beq.n	80066be <HAL_DMA_IRQHandler+0x516>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a73      	ldr	r2, [pc, #460]	; (8006868 <HAL_DMA_IRQHandler+0x6c0>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d00e      	beq.n	80066be <HAL_DMA_IRQHandler+0x516>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a71      	ldr	r2, [pc, #452]	; (800686c <HAL_DMA_IRQHandler+0x6c4>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d009      	beq.n	80066be <HAL_DMA_IRQHandler+0x516>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a70      	ldr	r2, [pc, #448]	; (8006870 <HAL_DMA_IRQHandler+0x6c8>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d004      	beq.n	80066be <HAL_DMA_IRQHandler+0x516>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a6e      	ldr	r2, [pc, #440]	; (8006874 <HAL_DMA_IRQHandler+0x6cc>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d10a      	bne.n	80066d4 <HAL_DMA_IRQHandler+0x52c>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 0308 	and.w	r3, r3, #8
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	bf14      	ite	ne
 80066cc:	2301      	movne	r3, #1
 80066ce:	2300      	moveq	r3, #0
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	e009      	b.n	80066e8 <HAL_DMA_IRQHandler+0x540>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 0304 	and.w	r3, r3, #4
 80066de:	2b00      	cmp	r3, #0
 80066e0:	bf14      	ite	ne
 80066e2:	2301      	movne	r3, #1
 80066e4:	2300      	moveq	r3, #0
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d03e      	beq.n	800676a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066f0:	f003 031f 	and.w	r3, r3, #31
 80066f4:	2210      	movs	r2, #16
 80066f6:	409a      	lsls	r2, r3
 80066f8:	6a3b      	ldr	r3, [r7, #32]
 80066fa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d018      	beq.n	800673c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d108      	bne.n	800672a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671c:	2b00      	cmp	r3, #0
 800671e:	d024      	beq.n	800676a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	4798      	blx	r3
 8006728:	e01f      	b.n	800676a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800672e:	2b00      	cmp	r3, #0
 8006730:	d01b      	beq.n	800676a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	4798      	blx	r3
 800673a:	e016      	b.n	800676a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006746:	2b00      	cmp	r3, #0
 8006748:	d107      	bne.n	800675a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f022 0208 	bic.w	r2, r2, #8
 8006758:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675e:	2b00      	cmp	r3, #0
 8006760:	d003      	beq.n	800676a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800676e:	f003 031f 	and.w	r3, r3, #31
 8006772:	2220      	movs	r2, #32
 8006774:	409a      	lsls	r2, r3
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	4013      	ands	r3, r2
 800677a:	2b00      	cmp	r3, #0
 800677c:	f000 8110 	beq.w	80069a0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a2c      	ldr	r2, [pc, #176]	; (8006838 <HAL_DMA_IRQHandler+0x690>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d04a      	beq.n	8006820 <HAL_DMA_IRQHandler+0x678>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a2b      	ldr	r2, [pc, #172]	; (800683c <HAL_DMA_IRQHandler+0x694>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d045      	beq.n	8006820 <HAL_DMA_IRQHandler+0x678>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a29      	ldr	r2, [pc, #164]	; (8006840 <HAL_DMA_IRQHandler+0x698>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d040      	beq.n	8006820 <HAL_DMA_IRQHandler+0x678>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a28      	ldr	r2, [pc, #160]	; (8006844 <HAL_DMA_IRQHandler+0x69c>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d03b      	beq.n	8006820 <HAL_DMA_IRQHandler+0x678>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a26      	ldr	r2, [pc, #152]	; (8006848 <HAL_DMA_IRQHandler+0x6a0>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d036      	beq.n	8006820 <HAL_DMA_IRQHandler+0x678>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a25      	ldr	r2, [pc, #148]	; (800684c <HAL_DMA_IRQHandler+0x6a4>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d031      	beq.n	8006820 <HAL_DMA_IRQHandler+0x678>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a23      	ldr	r2, [pc, #140]	; (8006850 <HAL_DMA_IRQHandler+0x6a8>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d02c      	beq.n	8006820 <HAL_DMA_IRQHandler+0x678>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a22      	ldr	r2, [pc, #136]	; (8006854 <HAL_DMA_IRQHandler+0x6ac>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d027      	beq.n	8006820 <HAL_DMA_IRQHandler+0x678>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a20      	ldr	r2, [pc, #128]	; (8006858 <HAL_DMA_IRQHandler+0x6b0>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d022      	beq.n	8006820 <HAL_DMA_IRQHandler+0x678>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a1f      	ldr	r2, [pc, #124]	; (800685c <HAL_DMA_IRQHandler+0x6b4>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d01d      	beq.n	8006820 <HAL_DMA_IRQHandler+0x678>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a1d      	ldr	r2, [pc, #116]	; (8006860 <HAL_DMA_IRQHandler+0x6b8>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d018      	beq.n	8006820 <HAL_DMA_IRQHandler+0x678>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a1c      	ldr	r2, [pc, #112]	; (8006864 <HAL_DMA_IRQHandler+0x6bc>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d013      	beq.n	8006820 <HAL_DMA_IRQHandler+0x678>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a1a      	ldr	r2, [pc, #104]	; (8006868 <HAL_DMA_IRQHandler+0x6c0>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d00e      	beq.n	8006820 <HAL_DMA_IRQHandler+0x678>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a19      	ldr	r2, [pc, #100]	; (800686c <HAL_DMA_IRQHandler+0x6c4>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d009      	beq.n	8006820 <HAL_DMA_IRQHandler+0x678>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a17      	ldr	r2, [pc, #92]	; (8006870 <HAL_DMA_IRQHandler+0x6c8>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d004      	beq.n	8006820 <HAL_DMA_IRQHandler+0x678>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a16      	ldr	r2, [pc, #88]	; (8006874 <HAL_DMA_IRQHandler+0x6cc>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d12b      	bne.n	8006878 <HAL_DMA_IRQHandler+0x6d0>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0310 	and.w	r3, r3, #16
 800682a:	2b00      	cmp	r3, #0
 800682c:	bf14      	ite	ne
 800682e:	2301      	movne	r3, #1
 8006830:	2300      	moveq	r3, #0
 8006832:	b2db      	uxtb	r3, r3
 8006834:	e02a      	b.n	800688c <HAL_DMA_IRQHandler+0x6e4>
 8006836:	bf00      	nop
 8006838:	40020010 	.word	0x40020010
 800683c:	40020028 	.word	0x40020028
 8006840:	40020040 	.word	0x40020040
 8006844:	40020058 	.word	0x40020058
 8006848:	40020070 	.word	0x40020070
 800684c:	40020088 	.word	0x40020088
 8006850:	400200a0 	.word	0x400200a0
 8006854:	400200b8 	.word	0x400200b8
 8006858:	40020410 	.word	0x40020410
 800685c:	40020428 	.word	0x40020428
 8006860:	40020440 	.word	0x40020440
 8006864:	40020458 	.word	0x40020458
 8006868:	40020470 	.word	0x40020470
 800686c:	40020488 	.word	0x40020488
 8006870:	400204a0 	.word	0x400204a0
 8006874:	400204b8 	.word	0x400204b8
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0302 	and.w	r3, r3, #2
 8006882:	2b00      	cmp	r3, #0
 8006884:	bf14      	ite	ne
 8006886:	2301      	movne	r3, #1
 8006888:	2300      	moveq	r3, #0
 800688a:	b2db      	uxtb	r3, r3
 800688c:	2b00      	cmp	r3, #0
 800688e:	f000 8087 	beq.w	80069a0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006896:	f003 031f 	and.w	r3, r3, #31
 800689a:	2220      	movs	r2, #32
 800689c:	409a      	lsls	r2, r3
 800689e:	6a3b      	ldr	r3, [r7, #32]
 80068a0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	2b04      	cmp	r3, #4
 80068ac:	d139      	bne.n	8006922 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f022 0216 	bic.w	r2, r2, #22
 80068bc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	695a      	ldr	r2, [r3, #20]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068cc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d103      	bne.n	80068de <HAL_DMA_IRQHandler+0x736>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d007      	beq.n	80068ee <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f022 0208 	bic.w	r2, r2, #8
 80068ec:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068f2:	f003 031f 	and.w	r3, r3, #31
 80068f6:	223f      	movs	r2, #63	; 0x3f
 80068f8:	409a      	lsls	r2, r3
 80068fa:	6a3b      	ldr	r3, [r7, #32]
 80068fc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006912:	2b00      	cmp	r3, #0
 8006914:	f000 8382 	beq.w	800701c <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	4798      	blx	r3
          }
          return;
 8006920:	e37c      	b.n	800701c <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800692c:	2b00      	cmp	r3, #0
 800692e:	d018      	beq.n	8006962 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d108      	bne.n	8006950 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006942:	2b00      	cmp	r3, #0
 8006944:	d02c      	beq.n	80069a0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	4798      	blx	r3
 800694e:	e027      	b.n	80069a0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006954:	2b00      	cmp	r3, #0
 8006956:	d023      	beq.n	80069a0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	4798      	blx	r3
 8006960:	e01e      	b.n	80069a0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800696c:	2b00      	cmp	r3, #0
 800696e:	d10f      	bne.n	8006990 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f022 0210 	bic.w	r2, r2, #16
 800697e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006994:	2b00      	cmp	r3, #0
 8006996:	d003      	beq.n	80069a0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f000 833e 	beq.w	8007026 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ae:	f003 0301 	and.w	r3, r3, #1
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f000 8088 	beq.w	8006ac8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2204      	movs	r2, #4
 80069bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a89      	ldr	r2, [pc, #548]	; (8006bec <HAL_DMA_IRQHandler+0xa44>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d04a      	beq.n	8006a60 <HAL_DMA_IRQHandler+0x8b8>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a88      	ldr	r2, [pc, #544]	; (8006bf0 <HAL_DMA_IRQHandler+0xa48>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d045      	beq.n	8006a60 <HAL_DMA_IRQHandler+0x8b8>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a86      	ldr	r2, [pc, #536]	; (8006bf4 <HAL_DMA_IRQHandler+0xa4c>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d040      	beq.n	8006a60 <HAL_DMA_IRQHandler+0x8b8>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a85      	ldr	r2, [pc, #532]	; (8006bf8 <HAL_DMA_IRQHandler+0xa50>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d03b      	beq.n	8006a60 <HAL_DMA_IRQHandler+0x8b8>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a83      	ldr	r2, [pc, #524]	; (8006bfc <HAL_DMA_IRQHandler+0xa54>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d036      	beq.n	8006a60 <HAL_DMA_IRQHandler+0x8b8>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a82      	ldr	r2, [pc, #520]	; (8006c00 <HAL_DMA_IRQHandler+0xa58>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d031      	beq.n	8006a60 <HAL_DMA_IRQHandler+0x8b8>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a80      	ldr	r2, [pc, #512]	; (8006c04 <HAL_DMA_IRQHandler+0xa5c>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d02c      	beq.n	8006a60 <HAL_DMA_IRQHandler+0x8b8>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a7f      	ldr	r2, [pc, #508]	; (8006c08 <HAL_DMA_IRQHandler+0xa60>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d027      	beq.n	8006a60 <HAL_DMA_IRQHandler+0x8b8>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a7d      	ldr	r2, [pc, #500]	; (8006c0c <HAL_DMA_IRQHandler+0xa64>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d022      	beq.n	8006a60 <HAL_DMA_IRQHandler+0x8b8>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a7c      	ldr	r2, [pc, #496]	; (8006c10 <HAL_DMA_IRQHandler+0xa68>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d01d      	beq.n	8006a60 <HAL_DMA_IRQHandler+0x8b8>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a7a      	ldr	r2, [pc, #488]	; (8006c14 <HAL_DMA_IRQHandler+0xa6c>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d018      	beq.n	8006a60 <HAL_DMA_IRQHandler+0x8b8>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a79      	ldr	r2, [pc, #484]	; (8006c18 <HAL_DMA_IRQHandler+0xa70>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d013      	beq.n	8006a60 <HAL_DMA_IRQHandler+0x8b8>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a77      	ldr	r2, [pc, #476]	; (8006c1c <HAL_DMA_IRQHandler+0xa74>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d00e      	beq.n	8006a60 <HAL_DMA_IRQHandler+0x8b8>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a76      	ldr	r2, [pc, #472]	; (8006c20 <HAL_DMA_IRQHandler+0xa78>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d009      	beq.n	8006a60 <HAL_DMA_IRQHandler+0x8b8>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a74      	ldr	r2, [pc, #464]	; (8006c24 <HAL_DMA_IRQHandler+0xa7c>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d004      	beq.n	8006a60 <HAL_DMA_IRQHandler+0x8b8>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a73      	ldr	r2, [pc, #460]	; (8006c28 <HAL_DMA_IRQHandler+0xa80>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d108      	bne.n	8006a72 <HAL_DMA_IRQHandler+0x8ca>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f022 0201 	bic.w	r2, r2, #1
 8006a6e:	601a      	str	r2, [r3, #0]
 8006a70:	e007      	b.n	8006a82 <HAL_DMA_IRQHandler+0x8da>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f022 0201 	bic.w	r2, r2, #1
 8006a80:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	3301      	adds	r3, #1
 8006a86:	60fb      	str	r3, [r7, #12]
 8006a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d307      	bcc.n	8006a9e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d1f2      	bne.n	8006a82 <HAL_DMA_IRQHandler+0x8da>
 8006a9c:	e000      	b.n	8006aa0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006a9e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d004      	beq.n	8006ab8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2203      	movs	r2, #3
 8006ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006ab6:	e003      	b.n	8006ac0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f000 82aa 	beq.w	8007026 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	4798      	blx	r3
 8006ada:	e2a4      	b.n	8007026 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a52      	ldr	r2, [pc, #328]	; (8006c2c <HAL_DMA_IRQHandler+0xa84>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d04a      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x9d4>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a51      	ldr	r2, [pc, #324]	; (8006c30 <HAL_DMA_IRQHandler+0xa88>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d045      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x9d4>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a4f      	ldr	r2, [pc, #316]	; (8006c34 <HAL_DMA_IRQHandler+0xa8c>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d040      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x9d4>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a4e      	ldr	r2, [pc, #312]	; (8006c38 <HAL_DMA_IRQHandler+0xa90>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d03b      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x9d4>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a4c      	ldr	r2, [pc, #304]	; (8006c3c <HAL_DMA_IRQHandler+0xa94>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d036      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x9d4>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a4b      	ldr	r2, [pc, #300]	; (8006c40 <HAL_DMA_IRQHandler+0xa98>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d031      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x9d4>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a49      	ldr	r2, [pc, #292]	; (8006c44 <HAL_DMA_IRQHandler+0xa9c>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d02c      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x9d4>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a48      	ldr	r2, [pc, #288]	; (8006c48 <HAL_DMA_IRQHandler+0xaa0>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d027      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x9d4>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a46      	ldr	r2, [pc, #280]	; (8006c4c <HAL_DMA_IRQHandler+0xaa4>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d022      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x9d4>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a45      	ldr	r2, [pc, #276]	; (8006c50 <HAL_DMA_IRQHandler+0xaa8>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d01d      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x9d4>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a43      	ldr	r2, [pc, #268]	; (8006c54 <HAL_DMA_IRQHandler+0xaac>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d018      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x9d4>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a42      	ldr	r2, [pc, #264]	; (8006c58 <HAL_DMA_IRQHandler+0xab0>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d013      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x9d4>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a40      	ldr	r2, [pc, #256]	; (8006c5c <HAL_DMA_IRQHandler+0xab4>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d00e      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x9d4>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a3f      	ldr	r2, [pc, #252]	; (8006c60 <HAL_DMA_IRQHandler+0xab8>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d009      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x9d4>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a3d      	ldr	r2, [pc, #244]	; (8006c64 <HAL_DMA_IRQHandler+0xabc>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d004      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x9d4>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a3c      	ldr	r2, [pc, #240]	; (8006c68 <HAL_DMA_IRQHandler+0xac0>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d101      	bne.n	8006b80 <HAL_DMA_IRQHandler+0x9d8>
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e000      	b.n	8006b82 <HAL_DMA_IRQHandler+0x9da>
 8006b80:	2300      	movs	r3, #0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f000 824f 	beq.w	8007026 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b94:	f003 031f 	and.w	r3, r3, #31
 8006b98:	2204      	movs	r2, #4
 8006b9a:	409a      	lsls	r2, r3
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 80dd 	beq.w	8006d60 <HAL_DMA_IRQHandler+0xbb8>
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	f003 0304 	and.w	r3, r3, #4
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f000 80d7 	beq.w	8006d60 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bb6:	f003 031f 	and.w	r3, r3, #31
 8006bba:	2204      	movs	r2, #4
 8006bbc:	409a      	lsls	r2, r3
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d059      	beq.n	8006c80 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d14a      	bne.n	8006c6c <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f000 8220 	beq.w	8007020 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006be8:	e21a      	b.n	8007020 <HAL_DMA_IRQHandler+0xe78>
 8006bea:	bf00      	nop
 8006bec:	40020010 	.word	0x40020010
 8006bf0:	40020028 	.word	0x40020028
 8006bf4:	40020040 	.word	0x40020040
 8006bf8:	40020058 	.word	0x40020058
 8006bfc:	40020070 	.word	0x40020070
 8006c00:	40020088 	.word	0x40020088
 8006c04:	400200a0 	.word	0x400200a0
 8006c08:	400200b8 	.word	0x400200b8
 8006c0c:	40020410 	.word	0x40020410
 8006c10:	40020428 	.word	0x40020428
 8006c14:	40020440 	.word	0x40020440
 8006c18:	40020458 	.word	0x40020458
 8006c1c:	40020470 	.word	0x40020470
 8006c20:	40020488 	.word	0x40020488
 8006c24:	400204a0 	.word	0x400204a0
 8006c28:	400204b8 	.word	0x400204b8
 8006c2c:	48022c08 	.word	0x48022c08
 8006c30:	48022c1c 	.word	0x48022c1c
 8006c34:	48022c30 	.word	0x48022c30
 8006c38:	48022c44 	.word	0x48022c44
 8006c3c:	48022c58 	.word	0x48022c58
 8006c40:	48022c6c 	.word	0x48022c6c
 8006c44:	48022c80 	.word	0x48022c80
 8006c48:	48022c94 	.word	0x48022c94
 8006c4c:	58025408 	.word	0x58025408
 8006c50:	5802541c 	.word	0x5802541c
 8006c54:	58025430 	.word	0x58025430
 8006c58:	58025444 	.word	0x58025444
 8006c5c:	58025458 	.word	0x58025458
 8006c60:	5802546c 	.word	0x5802546c
 8006c64:	58025480 	.word	0x58025480
 8006c68:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f000 81d5 	beq.w	8007020 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c7e:	e1cf      	b.n	8007020 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	f003 0320 	and.w	r3, r3, #32
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d160      	bne.n	8006d4c <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a7f      	ldr	r2, [pc, #508]	; (8006e8c <HAL_DMA_IRQHandler+0xce4>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d04a      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xb82>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a7d      	ldr	r2, [pc, #500]	; (8006e90 <HAL_DMA_IRQHandler+0xce8>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d045      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xb82>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a7c      	ldr	r2, [pc, #496]	; (8006e94 <HAL_DMA_IRQHandler+0xcec>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d040      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xb82>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a7a      	ldr	r2, [pc, #488]	; (8006e98 <HAL_DMA_IRQHandler+0xcf0>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d03b      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xb82>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a79      	ldr	r2, [pc, #484]	; (8006e9c <HAL_DMA_IRQHandler+0xcf4>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d036      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xb82>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a77      	ldr	r2, [pc, #476]	; (8006ea0 <HAL_DMA_IRQHandler+0xcf8>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d031      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xb82>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a76      	ldr	r2, [pc, #472]	; (8006ea4 <HAL_DMA_IRQHandler+0xcfc>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d02c      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xb82>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a74      	ldr	r2, [pc, #464]	; (8006ea8 <HAL_DMA_IRQHandler+0xd00>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d027      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xb82>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a73      	ldr	r2, [pc, #460]	; (8006eac <HAL_DMA_IRQHandler+0xd04>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d022      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xb82>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a71      	ldr	r2, [pc, #452]	; (8006eb0 <HAL_DMA_IRQHandler+0xd08>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d01d      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xb82>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a70      	ldr	r2, [pc, #448]	; (8006eb4 <HAL_DMA_IRQHandler+0xd0c>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d018      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xb82>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a6e      	ldr	r2, [pc, #440]	; (8006eb8 <HAL_DMA_IRQHandler+0xd10>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d013      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xb82>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a6d      	ldr	r2, [pc, #436]	; (8006ebc <HAL_DMA_IRQHandler+0xd14>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d00e      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xb82>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a6b      	ldr	r2, [pc, #428]	; (8006ec0 <HAL_DMA_IRQHandler+0xd18>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d009      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xb82>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a6a      	ldr	r2, [pc, #424]	; (8006ec4 <HAL_DMA_IRQHandler+0xd1c>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d004      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xb82>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a68      	ldr	r2, [pc, #416]	; (8006ec8 <HAL_DMA_IRQHandler+0xd20>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d108      	bne.n	8006d3c <HAL_DMA_IRQHandler+0xb94>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f022 0208 	bic.w	r2, r2, #8
 8006d38:	601a      	str	r2, [r3, #0]
 8006d3a:	e007      	b.n	8006d4c <HAL_DMA_IRQHandler+0xba4>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f022 0204 	bic.w	r2, r2, #4
 8006d4a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f000 8165 	beq.w	8007020 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d5e:	e15f      	b.n	8007020 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d64:	f003 031f 	and.w	r3, r3, #31
 8006d68:	2202      	movs	r2, #2
 8006d6a:	409a      	lsls	r2, r3
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	4013      	ands	r3, r2
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f000 80c5 	beq.w	8006f00 <HAL_DMA_IRQHandler+0xd58>
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	f003 0302 	and.w	r3, r3, #2
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f000 80bf 	beq.w	8006f00 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d86:	f003 031f 	and.w	r3, r3, #31
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	409a      	lsls	r2, r3
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d018      	beq.n	8006dce <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d109      	bne.n	8006dba <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f000 813a 	beq.w	8007024 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006db8:	e134      	b.n	8007024 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f000 8130 	beq.w	8007024 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dcc:	e12a      	b.n	8007024 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	f003 0320 	and.w	r3, r3, #32
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f040 8089 	bne.w	8006eec <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a2b      	ldr	r2, [pc, #172]	; (8006e8c <HAL_DMA_IRQHandler+0xce4>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d04a      	beq.n	8006e7a <HAL_DMA_IRQHandler+0xcd2>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a29      	ldr	r2, [pc, #164]	; (8006e90 <HAL_DMA_IRQHandler+0xce8>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d045      	beq.n	8006e7a <HAL_DMA_IRQHandler+0xcd2>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a28      	ldr	r2, [pc, #160]	; (8006e94 <HAL_DMA_IRQHandler+0xcec>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d040      	beq.n	8006e7a <HAL_DMA_IRQHandler+0xcd2>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a26      	ldr	r2, [pc, #152]	; (8006e98 <HAL_DMA_IRQHandler+0xcf0>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d03b      	beq.n	8006e7a <HAL_DMA_IRQHandler+0xcd2>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a25      	ldr	r2, [pc, #148]	; (8006e9c <HAL_DMA_IRQHandler+0xcf4>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d036      	beq.n	8006e7a <HAL_DMA_IRQHandler+0xcd2>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a23      	ldr	r2, [pc, #140]	; (8006ea0 <HAL_DMA_IRQHandler+0xcf8>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d031      	beq.n	8006e7a <HAL_DMA_IRQHandler+0xcd2>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a22      	ldr	r2, [pc, #136]	; (8006ea4 <HAL_DMA_IRQHandler+0xcfc>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d02c      	beq.n	8006e7a <HAL_DMA_IRQHandler+0xcd2>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a20      	ldr	r2, [pc, #128]	; (8006ea8 <HAL_DMA_IRQHandler+0xd00>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d027      	beq.n	8006e7a <HAL_DMA_IRQHandler+0xcd2>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a1f      	ldr	r2, [pc, #124]	; (8006eac <HAL_DMA_IRQHandler+0xd04>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d022      	beq.n	8006e7a <HAL_DMA_IRQHandler+0xcd2>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a1d      	ldr	r2, [pc, #116]	; (8006eb0 <HAL_DMA_IRQHandler+0xd08>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d01d      	beq.n	8006e7a <HAL_DMA_IRQHandler+0xcd2>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a1c      	ldr	r2, [pc, #112]	; (8006eb4 <HAL_DMA_IRQHandler+0xd0c>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d018      	beq.n	8006e7a <HAL_DMA_IRQHandler+0xcd2>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a1a      	ldr	r2, [pc, #104]	; (8006eb8 <HAL_DMA_IRQHandler+0xd10>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d013      	beq.n	8006e7a <HAL_DMA_IRQHandler+0xcd2>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a19      	ldr	r2, [pc, #100]	; (8006ebc <HAL_DMA_IRQHandler+0xd14>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d00e      	beq.n	8006e7a <HAL_DMA_IRQHandler+0xcd2>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a17      	ldr	r2, [pc, #92]	; (8006ec0 <HAL_DMA_IRQHandler+0xd18>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d009      	beq.n	8006e7a <HAL_DMA_IRQHandler+0xcd2>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a16      	ldr	r2, [pc, #88]	; (8006ec4 <HAL_DMA_IRQHandler+0xd1c>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d004      	beq.n	8006e7a <HAL_DMA_IRQHandler+0xcd2>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a14      	ldr	r2, [pc, #80]	; (8006ec8 <HAL_DMA_IRQHandler+0xd20>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d128      	bne.n	8006ecc <HAL_DMA_IRQHandler+0xd24>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f022 0214 	bic.w	r2, r2, #20
 8006e88:	601a      	str	r2, [r3, #0]
 8006e8a:	e027      	b.n	8006edc <HAL_DMA_IRQHandler+0xd34>
 8006e8c:	40020010 	.word	0x40020010
 8006e90:	40020028 	.word	0x40020028
 8006e94:	40020040 	.word	0x40020040
 8006e98:	40020058 	.word	0x40020058
 8006e9c:	40020070 	.word	0x40020070
 8006ea0:	40020088 	.word	0x40020088
 8006ea4:	400200a0 	.word	0x400200a0
 8006ea8:	400200b8 	.word	0x400200b8
 8006eac:	40020410 	.word	0x40020410
 8006eb0:	40020428 	.word	0x40020428
 8006eb4:	40020440 	.word	0x40020440
 8006eb8:	40020458 	.word	0x40020458
 8006ebc:	40020470 	.word	0x40020470
 8006ec0:	40020488 	.word	0x40020488
 8006ec4:	400204a0 	.word	0x400204a0
 8006ec8:	400204b8 	.word	0x400204b8
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f022 020a 	bic.w	r2, r2, #10
 8006eda:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f000 8097 	beq.w	8007024 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006efe:	e091      	b.n	8007024 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f04:	f003 031f 	and.w	r3, r3, #31
 8006f08:	2208      	movs	r2, #8
 8006f0a:	409a      	lsls	r2, r3
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	4013      	ands	r3, r2
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	f000 8088 	beq.w	8007026 <HAL_DMA_IRQHandler+0xe7e>
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	f003 0308 	and.w	r3, r3, #8
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f000 8082 	beq.w	8007026 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a41      	ldr	r2, [pc, #260]	; (800702c <HAL_DMA_IRQHandler+0xe84>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d04a      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0xe1a>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a3f      	ldr	r2, [pc, #252]	; (8007030 <HAL_DMA_IRQHandler+0xe88>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d045      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0xe1a>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a3e      	ldr	r2, [pc, #248]	; (8007034 <HAL_DMA_IRQHandler+0xe8c>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d040      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0xe1a>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a3c      	ldr	r2, [pc, #240]	; (8007038 <HAL_DMA_IRQHandler+0xe90>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d03b      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0xe1a>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a3b      	ldr	r2, [pc, #236]	; (800703c <HAL_DMA_IRQHandler+0xe94>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d036      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0xe1a>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a39      	ldr	r2, [pc, #228]	; (8007040 <HAL_DMA_IRQHandler+0xe98>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d031      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0xe1a>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a38      	ldr	r2, [pc, #224]	; (8007044 <HAL_DMA_IRQHandler+0xe9c>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d02c      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0xe1a>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a36      	ldr	r2, [pc, #216]	; (8007048 <HAL_DMA_IRQHandler+0xea0>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d027      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0xe1a>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a35      	ldr	r2, [pc, #212]	; (800704c <HAL_DMA_IRQHandler+0xea4>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d022      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0xe1a>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a33      	ldr	r2, [pc, #204]	; (8007050 <HAL_DMA_IRQHandler+0xea8>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d01d      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0xe1a>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a32      	ldr	r2, [pc, #200]	; (8007054 <HAL_DMA_IRQHandler+0xeac>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d018      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0xe1a>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a30      	ldr	r2, [pc, #192]	; (8007058 <HAL_DMA_IRQHandler+0xeb0>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d013      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0xe1a>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a2f      	ldr	r2, [pc, #188]	; (800705c <HAL_DMA_IRQHandler+0xeb4>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d00e      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0xe1a>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a2d      	ldr	r2, [pc, #180]	; (8007060 <HAL_DMA_IRQHandler+0xeb8>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d009      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0xe1a>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a2c      	ldr	r2, [pc, #176]	; (8007064 <HAL_DMA_IRQHandler+0xebc>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d004      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0xe1a>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a2a      	ldr	r2, [pc, #168]	; (8007068 <HAL_DMA_IRQHandler+0xec0>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d108      	bne.n	8006fd4 <HAL_DMA_IRQHandler+0xe2c>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f022 021c 	bic.w	r2, r2, #28
 8006fd0:	601a      	str	r2, [r3, #0]
 8006fd2:	e007      	b.n	8006fe4 <HAL_DMA_IRQHandler+0xe3c>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f022 020e 	bic.w	r2, r2, #14
 8006fe2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fe8:	f003 031f 	and.w	r3, r3, #31
 8006fec:	2201      	movs	r2, #1
 8006fee:	409a      	lsls	r2, r3
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800700e:	2b00      	cmp	r3, #0
 8007010:	d009      	beq.n	8007026 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	4798      	blx	r3
 800701a:	e004      	b.n	8007026 <HAL_DMA_IRQHandler+0xe7e>
          return;
 800701c:	bf00      	nop
 800701e:	e002      	b.n	8007026 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007020:	bf00      	nop
 8007022:	e000      	b.n	8007026 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007024:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007026:	3728      	adds	r7, #40	; 0x28
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}
 800702c:	40020010 	.word	0x40020010
 8007030:	40020028 	.word	0x40020028
 8007034:	40020040 	.word	0x40020040
 8007038:	40020058 	.word	0x40020058
 800703c:	40020070 	.word	0x40020070
 8007040:	40020088 	.word	0x40020088
 8007044:	400200a0 	.word	0x400200a0
 8007048:	400200b8 	.word	0x400200b8
 800704c:	40020410 	.word	0x40020410
 8007050:	40020428 	.word	0x40020428
 8007054:	40020440 	.word	0x40020440
 8007058:	40020458 	.word	0x40020458
 800705c:	40020470 	.word	0x40020470
 8007060:	40020488 	.word	0x40020488
 8007064:	400204a0 	.word	0x400204a0
 8007068:	400204b8 	.word	0x400204b8

0800706c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800706c:	b480      	push	{r7}
 800706e:	b087      	sub	sp, #28
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
 8007078:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800707e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007084:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a7f      	ldr	r2, [pc, #508]	; (8007288 <DMA_SetConfig+0x21c>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d072      	beq.n	8007176 <DMA_SetConfig+0x10a>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a7d      	ldr	r2, [pc, #500]	; (800728c <DMA_SetConfig+0x220>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d06d      	beq.n	8007176 <DMA_SetConfig+0x10a>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a7c      	ldr	r2, [pc, #496]	; (8007290 <DMA_SetConfig+0x224>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d068      	beq.n	8007176 <DMA_SetConfig+0x10a>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a7a      	ldr	r2, [pc, #488]	; (8007294 <DMA_SetConfig+0x228>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d063      	beq.n	8007176 <DMA_SetConfig+0x10a>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a79      	ldr	r2, [pc, #484]	; (8007298 <DMA_SetConfig+0x22c>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d05e      	beq.n	8007176 <DMA_SetConfig+0x10a>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a77      	ldr	r2, [pc, #476]	; (800729c <DMA_SetConfig+0x230>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d059      	beq.n	8007176 <DMA_SetConfig+0x10a>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a76      	ldr	r2, [pc, #472]	; (80072a0 <DMA_SetConfig+0x234>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d054      	beq.n	8007176 <DMA_SetConfig+0x10a>
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a74      	ldr	r2, [pc, #464]	; (80072a4 <DMA_SetConfig+0x238>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d04f      	beq.n	8007176 <DMA_SetConfig+0x10a>
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a73      	ldr	r2, [pc, #460]	; (80072a8 <DMA_SetConfig+0x23c>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d04a      	beq.n	8007176 <DMA_SetConfig+0x10a>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a71      	ldr	r2, [pc, #452]	; (80072ac <DMA_SetConfig+0x240>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d045      	beq.n	8007176 <DMA_SetConfig+0x10a>
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a70      	ldr	r2, [pc, #448]	; (80072b0 <DMA_SetConfig+0x244>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d040      	beq.n	8007176 <DMA_SetConfig+0x10a>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a6e      	ldr	r2, [pc, #440]	; (80072b4 <DMA_SetConfig+0x248>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d03b      	beq.n	8007176 <DMA_SetConfig+0x10a>
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a6d      	ldr	r2, [pc, #436]	; (80072b8 <DMA_SetConfig+0x24c>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d036      	beq.n	8007176 <DMA_SetConfig+0x10a>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a6b      	ldr	r2, [pc, #428]	; (80072bc <DMA_SetConfig+0x250>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d031      	beq.n	8007176 <DMA_SetConfig+0x10a>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a6a      	ldr	r2, [pc, #424]	; (80072c0 <DMA_SetConfig+0x254>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d02c      	beq.n	8007176 <DMA_SetConfig+0x10a>
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a68      	ldr	r2, [pc, #416]	; (80072c4 <DMA_SetConfig+0x258>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d027      	beq.n	8007176 <DMA_SetConfig+0x10a>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a67      	ldr	r2, [pc, #412]	; (80072c8 <DMA_SetConfig+0x25c>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d022      	beq.n	8007176 <DMA_SetConfig+0x10a>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a65      	ldr	r2, [pc, #404]	; (80072cc <DMA_SetConfig+0x260>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d01d      	beq.n	8007176 <DMA_SetConfig+0x10a>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a64      	ldr	r2, [pc, #400]	; (80072d0 <DMA_SetConfig+0x264>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d018      	beq.n	8007176 <DMA_SetConfig+0x10a>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a62      	ldr	r2, [pc, #392]	; (80072d4 <DMA_SetConfig+0x268>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d013      	beq.n	8007176 <DMA_SetConfig+0x10a>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a61      	ldr	r2, [pc, #388]	; (80072d8 <DMA_SetConfig+0x26c>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d00e      	beq.n	8007176 <DMA_SetConfig+0x10a>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a5f      	ldr	r2, [pc, #380]	; (80072dc <DMA_SetConfig+0x270>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d009      	beq.n	8007176 <DMA_SetConfig+0x10a>
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a5e      	ldr	r2, [pc, #376]	; (80072e0 <DMA_SetConfig+0x274>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d004      	beq.n	8007176 <DMA_SetConfig+0x10a>
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a5c      	ldr	r2, [pc, #368]	; (80072e4 <DMA_SetConfig+0x278>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d101      	bne.n	800717a <DMA_SetConfig+0x10e>
 8007176:	2301      	movs	r3, #1
 8007178:	e000      	b.n	800717c <DMA_SetConfig+0x110>
 800717a:	2300      	movs	r3, #0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00d      	beq.n	800719c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007188:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800718e:	2b00      	cmp	r3, #0
 8007190:	d004      	beq.n	800719c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800719a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a39      	ldr	r2, [pc, #228]	; (8007288 <DMA_SetConfig+0x21c>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d04a      	beq.n	800723c <DMA_SetConfig+0x1d0>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a38      	ldr	r2, [pc, #224]	; (800728c <DMA_SetConfig+0x220>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d045      	beq.n	800723c <DMA_SetConfig+0x1d0>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a36      	ldr	r2, [pc, #216]	; (8007290 <DMA_SetConfig+0x224>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d040      	beq.n	800723c <DMA_SetConfig+0x1d0>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a35      	ldr	r2, [pc, #212]	; (8007294 <DMA_SetConfig+0x228>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d03b      	beq.n	800723c <DMA_SetConfig+0x1d0>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a33      	ldr	r2, [pc, #204]	; (8007298 <DMA_SetConfig+0x22c>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d036      	beq.n	800723c <DMA_SetConfig+0x1d0>
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a32      	ldr	r2, [pc, #200]	; (800729c <DMA_SetConfig+0x230>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d031      	beq.n	800723c <DMA_SetConfig+0x1d0>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a30      	ldr	r2, [pc, #192]	; (80072a0 <DMA_SetConfig+0x234>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d02c      	beq.n	800723c <DMA_SetConfig+0x1d0>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a2f      	ldr	r2, [pc, #188]	; (80072a4 <DMA_SetConfig+0x238>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d027      	beq.n	800723c <DMA_SetConfig+0x1d0>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a2d      	ldr	r2, [pc, #180]	; (80072a8 <DMA_SetConfig+0x23c>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d022      	beq.n	800723c <DMA_SetConfig+0x1d0>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a2c      	ldr	r2, [pc, #176]	; (80072ac <DMA_SetConfig+0x240>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d01d      	beq.n	800723c <DMA_SetConfig+0x1d0>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a2a      	ldr	r2, [pc, #168]	; (80072b0 <DMA_SetConfig+0x244>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d018      	beq.n	800723c <DMA_SetConfig+0x1d0>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a29      	ldr	r2, [pc, #164]	; (80072b4 <DMA_SetConfig+0x248>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d013      	beq.n	800723c <DMA_SetConfig+0x1d0>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a27      	ldr	r2, [pc, #156]	; (80072b8 <DMA_SetConfig+0x24c>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d00e      	beq.n	800723c <DMA_SetConfig+0x1d0>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a26      	ldr	r2, [pc, #152]	; (80072bc <DMA_SetConfig+0x250>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d009      	beq.n	800723c <DMA_SetConfig+0x1d0>
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a24      	ldr	r2, [pc, #144]	; (80072c0 <DMA_SetConfig+0x254>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d004      	beq.n	800723c <DMA_SetConfig+0x1d0>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a23      	ldr	r2, [pc, #140]	; (80072c4 <DMA_SetConfig+0x258>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d101      	bne.n	8007240 <DMA_SetConfig+0x1d4>
 800723c:	2301      	movs	r3, #1
 800723e:	e000      	b.n	8007242 <DMA_SetConfig+0x1d6>
 8007240:	2300      	movs	r3, #0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d059      	beq.n	80072fa <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800724a:	f003 031f 	and.w	r3, r3, #31
 800724e:	223f      	movs	r2, #63	; 0x3f
 8007250:	409a      	lsls	r2, r3
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007264:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	683a      	ldr	r2, [r7, #0]
 800726c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	2b40      	cmp	r3, #64	; 0x40
 8007274:	d138      	bne.n	80072e8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68ba      	ldr	r2, [r7, #8]
 8007284:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007286:	e0ae      	b.n	80073e6 <DMA_SetConfig+0x37a>
 8007288:	40020010 	.word	0x40020010
 800728c:	40020028 	.word	0x40020028
 8007290:	40020040 	.word	0x40020040
 8007294:	40020058 	.word	0x40020058
 8007298:	40020070 	.word	0x40020070
 800729c:	40020088 	.word	0x40020088
 80072a0:	400200a0 	.word	0x400200a0
 80072a4:	400200b8 	.word	0x400200b8
 80072a8:	40020410 	.word	0x40020410
 80072ac:	40020428 	.word	0x40020428
 80072b0:	40020440 	.word	0x40020440
 80072b4:	40020458 	.word	0x40020458
 80072b8:	40020470 	.word	0x40020470
 80072bc:	40020488 	.word	0x40020488
 80072c0:	400204a0 	.word	0x400204a0
 80072c4:	400204b8 	.word	0x400204b8
 80072c8:	58025408 	.word	0x58025408
 80072cc:	5802541c 	.word	0x5802541c
 80072d0:	58025430 	.word	0x58025430
 80072d4:	58025444 	.word	0x58025444
 80072d8:	58025458 	.word	0x58025458
 80072dc:	5802546c 	.word	0x5802546c
 80072e0:	58025480 	.word	0x58025480
 80072e4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68ba      	ldr	r2, [r7, #8]
 80072ee:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	60da      	str	r2, [r3, #12]
}
 80072f8:	e075      	b.n	80073e6 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a3d      	ldr	r2, [pc, #244]	; (80073f4 <DMA_SetConfig+0x388>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d04a      	beq.n	800739a <DMA_SetConfig+0x32e>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a3b      	ldr	r2, [pc, #236]	; (80073f8 <DMA_SetConfig+0x38c>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d045      	beq.n	800739a <DMA_SetConfig+0x32e>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a3a      	ldr	r2, [pc, #232]	; (80073fc <DMA_SetConfig+0x390>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d040      	beq.n	800739a <DMA_SetConfig+0x32e>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a38      	ldr	r2, [pc, #224]	; (8007400 <DMA_SetConfig+0x394>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d03b      	beq.n	800739a <DMA_SetConfig+0x32e>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a37      	ldr	r2, [pc, #220]	; (8007404 <DMA_SetConfig+0x398>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d036      	beq.n	800739a <DMA_SetConfig+0x32e>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a35      	ldr	r2, [pc, #212]	; (8007408 <DMA_SetConfig+0x39c>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d031      	beq.n	800739a <DMA_SetConfig+0x32e>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a34      	ldr	r2, [pc, #208]	; (800740c <DMA_SetConfig+0x3a0>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d02c      	beq.n	800739a <DMA_SetConfig+0x32e>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a32      	ldr	r2, [pc, #200]	; (8007410 <DMA_SetConfig+0x3a4>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d027      	beq.n	800739a <DMA_SetConfig+0x32e>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a31      	ldr	r2, [pc, #196]	; (8007414 <DMA_SetConfig+0x3a8>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d022      	beq.n	800739a <DMA_SetConfig+0x32e>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a2f      	ldr	r2, [pc, #188]	; (8007418 <DMA_SetConfig+0x3ac>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d01d      	beq.n	800739a <DMA_SetConfig+0x32e>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a2e      	ldr	r2, [pc, #184]	; (800741c <DMA_SetConfig+0x3b0>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d018      	beq.n	800739a <DMA_SetConfig+0x32e>
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a2c      	ldr	r2, [pc, #176]	; (8007420 <DMA_SetConfig+0x3b4>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d013      	beq.n	800739a <DMA_SetConfig+0x32e>
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a2b      	ldr	r2, [pc, #172]	; (8007424 <DMA_SetConfig+0x3b8>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d00e      	beq.n	800739a <DMA_SetConfig+0x32e>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a29      	ldr	r2, [pc, #164]	; (8007428 <DMA_SetConfig+0x3bc>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d009      	beq.n	800739a <DMA_SetConfig+0x32e>
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a28      	ldr	r2, [pc, #160]	; (800742c <DMA_SetConfig+0x3c0>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d004      	beq.n	800739a <DMA_SetConfig+0x32e>
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a26      	ldr	r2, [pc, #152]	; (8007430 <DMA_SetConfig+0x3c4>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d101      	bne.n	800739e <DMA_SetConfig+0x332>
 800739a:	2301      	movs	r3, #1
 800739c:	e000      	b.n	80073a0 <DMA_SetConfig+0x334>
 800739e:	2300      	movs	r3, #0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d020      	beq.n	80073e6 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073a8:	f003 031f 	and.w	r3, r3, #31
 80073ac:	2201      	movs	r2, #1
 80073ae:	409a      	lsls	r2, r3
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	683a      	ldr	r2, [r7, #0]
 80073ba:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	2b40      	cmp	r3, #64	; 0x40
 80073c2:	d108      	bne.n	80073d6 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68ba      	ldr	r2, [r7, #8]
 80073d2:	60da      	str	r2, [r3, #12]
}
 80073d4:	e007      	b.n	80073e6 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68ba      	ldr	r2, [r7, #8]
 80073dc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	60da      	str	r2, [r3, #12]
}
 80073e6:	bf00      	nop
 80073e8:	371c      	adds	r7, #28
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	48022c08 	.word	0x48022c08
 80073f8:	48022c1c 	.word	0x48022c1c
 80073fc:	48022c30 	.word	0x48022c30
 8007400:	48022c44 	.word	0x48022c44
 8007404:	48022c58 	.word	0x48022c58
 8007408:	48022c6c 	.word	0x48022c6c
 800740c:	48022c80 	.word	0x48022c80
 8007410:	48022c94 	.word	0x48022c94
 8007414:	58025408 	.word	0x58025408
 8007418:	5802541c 	.word	0x5802541c
 800741c:	58025430 	.word	0x58025430
 8007420:	58025444 	.word	0x58025444
 8007424:	58025458 	.word	0x58025458
 8007428:	5802546c 	.word	0x5802546c
 800742c:	58025480 	.word	0x58025480
 8007430:	58025494 	.word	0x58025494

08007434 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a42      	ldr	r2, [pc, #264]	; (800754c <DMA_CalcBaseAndBitshift+0x118>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d04a      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a41      	ldr	r2, [pc, #260]	; (8007550 <DMA_CalcBaseAndBitshift+0x11c>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d045      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a3f      	ldr	r2, [pc, #252]	; (8007554 <DMA_CalcBaseAndBitshift+0x120>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d040      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a3e      	ldr	r2, [pc, #248]	; (8007558 <DMA_CalcBaseAndBitshift+0x124>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d03b      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a3c      	ldr	r2, [pc, #240]	; (800755c <DMA_CalcBaseAndBitshift+0x128>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d036      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a3b      	ldr	r2, [pc, #236]	; (8007560 <DMA_CalcBaseAndBitshift+0x12c>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d031      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a39      	ldr	r2, [pc, #228]	; (8007564 <DMA_CalcBaseAndBitshift+0x130>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d02c      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a38      	ldr	r2, [pc, #224]	; (8007568 <DMA_CalcBaseAndBitshift+0x134>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d027      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a36      	ldr	r2, [pc, #216]	; (800756c <DMA_CalcBaseAndBitshift+0x138>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d022      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a35      	ldr	r2, [pc, #212]	; (8007570 <DMA_CalcBaseAndBitshift+0x13c>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d01d      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a33      	ldr	r2, [pc, #204]	; (8007574 <DMA_CalcBaseAndBitshift+0x140>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d018      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a32      	ldr	r2, [pc, #200]	; (8007578 <DMA_CalcBaseAndBitshift+0x144>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d013      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a30      	ldr	r2, [pc, #192]	; (800757c <DMA_CalcBaseAndBitshift+0x148>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d00e      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a2f      	ldr	r2, [pc, #188]	; (8007580 <DMA_CalcBaseAndBitshift+0x14c>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d009      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a2d      	ldr	r2, [pc, #180]	; (8007584 <DMA_CalcBaseAndBitshift+0x150>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d004      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a2c      	ldr	r2, [pc, #176]	; (8007588 <DMA_CalcBaseAndBitshift+0x154>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d101      	bne.n	80074e0 <DMA_CalcBaseAndBitshift+0xac>
 80074dc:	2301      	movs	r3, #1
 80074de:	e000      	b.n	80074e2 <DMA_CalcBaseAndBitshift+0xae>
 80074e0:	2300      	movs	r3, #0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d024      	beq.n	8007530 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	3b10      	subs	r3, #16
 80074ee:	4a27      	ldr	r2, [pc, #156]	; (800758c <DMA_CalcBaseAndBitshift+0x158>)
 80074f0:	fba2 2303 	umull	r2, r3, r2, r3
 80074f4:	091b      	lsrs	r3, r3, #4
 80074f6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f003 0307 	and.w	r3, r3, #7
 80074fe:	4a24      	ldr	r2, [pc, #144]	; (8007590 <DMA_CalcBaseAndBitshift+0x15c>)
 8007500:	5cd3      	ldrb	r3, [r2, r3]
 8007502:	461a      	mov	r2, r3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2b03      	cmp	r3, #3
 800750c:	d908      	bls.n	8007520 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	461a      	mov	r2, r3
 8007514:	4b1f      	ldr	r3, [pc, #124]	; (8007594 <DMA_CalcBaseAndBitshift+0x160>)
 8007516:	4013      	ands	r3, r2
 8007518:	1d1a      	adds	r2, r3, #4
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	659a      	str	r2, [r3, #88]	; 0x58
 800751e:	e00d      	b.n	800753c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	461a      	mov	r2, r3
 8007526:	4b1b      	ldr	r3, [pc, #108]	; (8007594 <DMA_CalcBaseAndBitshift+0x160>)
 8007528:	4013      	ands	r3, r2
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	6593      	str	r3, [r2, #88]	; 0x58
 800752e:	e005      	b.n	800753c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007540:	4618      	mov	r0, r3
 8007542:	3714      	adds	r7, #20
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr
 800754c:	40020010 	.word	0x40020010
 8007550:	40020028 	.word	0x40020028
 8007554:	40020040 	.word	0x40020040
 8007558:	40020058 	.word	0x40020058
 800755c:	40020070 	.word	0x40020070
 8007560:	40020088 	.word	0x40020088
 8007564:	400200a0 	.word	0x400200a0
 8007568:	400200b8 	.word	0x400200b8
 800756c:	40020410 	.word	0x40020410
 8007570:	40020428 	.word	0x40020428
 8007574:	40020440 	.word	0x40020440
 8007578:	40020458 	.word	0x40020458
 800757c:	40020470 	.word	0x40020470
 8007580:	40020488 	.word	0x40020488
 8007584:	400204a0 	.word	0x400204a0
 8007588:	400204b8 	.word	0x400204b8
 800758c:	aaaaaaab 	.word	0xaaaaaaab
 8007590:	080104f0 	.word	0x080104f0
 8007594:	fffffc00 	.word	0xfffffc00

08007598 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075a0:	2300      	movs	r3, #0
 80075a2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	699b      	ldr	r3, [r3, #24]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d120      	bne.n	80075ee <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b0:	2b03      	cmp	r3, #3
 80075b2:	d858      	bhi.n	8007666 <DMA_CheckFifoParam+0xce>
 80075b4:	a201      	add	r2, pc, #4	; (adr r2, 80075bc <DMA_CheckFifoParam+0x24>)
 80075b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ba:	bf00      	nop
 80075bc:	080075cd 	.word	0x080075cd
 80075c0:	080075df 	.word	0x080075df
 80075c4:	080075cd 	.word	0x080075cd
 80075c8:	08007667 	.word	0x08007667
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d048      	beq.n	800766a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80075dc:	e045      	b.n	800766a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80075e6:	d142      	bne.n	800766e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80075ec:	e03f      	b.n	800766e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	699b      	ldr	r3, [r3, #24]
 80075f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075f6:	d123      	bne.n	8007640 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fc:	2b03      	cmp	r3, #3
 80075fe:	d838      	bhi.n	8007672 <DMA_CheckFifoParam+0xda>
 8007600:	a201      	add	r2, pc, #4	; (adr r2, 8007608 <DMA_CheckFifoParam+0x70>)
 8007602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007606:	bf00      	nop
 8007608:	08007619 	.word	0x08007619
 800760c:	0800761f 	.word	0x0800761f
 8007610:	08007619 	.word	0x08007619
 8007614:	08007631 	.word	0x08007631
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	73fb      	strb	r3, [r7, #15]
        break;
 800761c:	e030      	b.n	8007680 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007622:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007626:	2b00      	cmp	r3, #0
 8007628:	d025      	beq.n	8007676 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800762e:	e022      	b.n	8007676 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007634:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007638:	d11f      	bne.n	800767a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800763e:	e01c      	b.n	800767a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007644:	2b02      	cmp	r3, #2
 8007646:	d902      	bls.n	800764e <DMA_CheckFifoParam+0xb6>
 8007648:	2b03      	cmp	r3, #3
 800764a:	d003      	beq.n	8007654 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800764c:	e018      	b.n	8007680 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	73fb      	strb	r3, [r7, #15]
        break;
 8007652:	e015      	b.n	8007680 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007658:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00e      	beq.n	800767e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	73fb      	strb	r3, [r7, #15]
    break;
 8007664:	e00b      	b.n	800767e <DMA_CheckFifoParam+0xe6>
        break;
 8007666:	bf00      	nop
 8007668:	e00a      	b.n	8007680 <DMA_CheckFifoParam+0xe8>
        break;
 800766a:	bf00      	nop
 800766c:	e008      	b.n	8007680 <DMA_CheckFifoParam+0xe8>
        break;
 800766e:	bf00      	nop
 8007670:	e006      	b.n	8007680 <DMA_CheckFifoParam+0xe8>
        break;
 8007672:	bf00      	nop
 8007674:	e004      	b.n	8007680 <DMA_CheckFifoParam+0xe8>
        break;
 8007676:	bf00      	nop
 8007678:	e002      	b.n	8007680 <DMA_CheckFifoParam+0xe8>
        break;
 800767a:	bf00      	nop
 800767c:	e000      	b.n	8007680 <DMA_CheckFifoParam+0xe8>
    break;
 800767e:	bf00      	nop
    }
  }

  return status;
 8007680:	7bfb      	ldrb	r3, [r7, #15]
}
 8007682:	4618      	mov	r0, r3
 8007684:	3714      	adds	r7, #20
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop

08007690 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a38      	ldr	r2, [pc, #224]	; (8007784 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d022      	beq.n	80076ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a36      	ldr	r2, [pc, #216]	; (8007788 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d01d      	beq.n	80076ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a35      	ldr	r2, [pc, #212]	; (800778c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d018      	beq.n	80076ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a33      	ldr	r2, [pc, #204]	; (8007790 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d013      	beq.n	80076ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a32      	ldr	r2, [pc, #200]	; (8007794 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d00e      	beq.n	80076ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a30      	ldr	r2, [pc, #192]	; (8007798 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d009      	beq.n	80076ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a2f      	ldr	r2, [pc, #188]	; (800779c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d004      	beq.n	80076ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a2d      	ldr	r2, [pc, #180]	; (80077a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d101      	bne.n	80076f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80076ee:	2301      	movs	r3, #1
 80076f0:	e000      	b.n	80076f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80076f2:	2300      	movs	r3, #0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d01a      	beq.n	800772e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	3b08      	subs	r3, #8
 8007700:	4a28      	ldr	r2, [pc, #160]	; (80077a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007702:	fba2 2303 	umull	r2, r3, r2, r3
 8007706:	091b      	lsrs	r3, r3, #4
 8007708:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	4b26      	ldr	r3, [pc, #152]	; (80077a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800770e:	4413      	add	r3, r2
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	461a      	mov	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a24      	ldr	r2, [pc, #144]	; (80077ac <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800771c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f003 031f 	and.w	r3, r3, #31
 8007724:	2201      	movs	r2, #1
 8007726:	409a      	lsls	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800772c:	e024      	b.n	8007778 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	b2db      	uxtb	r3, r3
 8007734:	3b10      	subs	r3, #16
 8007736:	4a1e      	ldr	r2, [pc, #120]	; (80077b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007738:	fba2 2303 	umull	r2, r3, r2, r3
 800773c:	091b      	lsrs	r3, r3, #4
 800773e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	4a1c      	ldr	r2, [pc, #112]	; (80077b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d806      	bhi.n	8007756 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	4a1b      	ldr	r2, [pc, #108]	; (80077b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d902      	bls.n	8007756 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	3308      	adds	r3, #8
 8007754:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	4b18      	ldr	r3, [pc, #96]	; (80077bc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800775a:	4413      	add	r3, r2
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	461a      	mov	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4a16      	ldr	r2, [pc, #88]	; (80077c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007768:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f003 031f 	and.w	r3, r3, #31
 8007770:	2201      	movs	r2, #1
 8007772:	409a      	lsls	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007778:	bf00      	nop
 800777a:	3714      	adds	r7, #20
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr
 8007784:	58025408 	.word	0x58025408
 8007788:	5802541c 	.word	0x5802541c
 800778c:	58025430 	.word	0x58025430
 8007790:	58025444 	.word	0x58025444
 8007794:	58025458 	.word	0x58025458
 8007798:	5802546c 	.word	0x5802546c
 800779c:	58025480 	.word	0x58025480
 80077a0:	58025494 	.word	0x58025494
 80077a4:	cccccccd 	.word	0xcccccccd
 80077a8:	16009600 	.word	0x16009600
 80077ac:	58025880 	.word	0x58025880
 80077b0:	aaaaaaab 	.word	0xaaaaaaab
 80077b4:	400204b8 	.word	0x400204b8
 80077b8:	4002040f 	.word	0x4002040f
 80077bc:	10008200 	.word	0x10008200
 80077c0:	40020880 	.word	0x40020880

080077c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d04a      	beq.n	8007870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2b08      	cmp	r3, #8
 80077de:	d847      	bhi.n	8007870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a25      	ldr	r2, [pc, #148]	; (800787c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d022      	beq.n	8007830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a24      	ldr	r2, [pc, #144]	; (8007880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d01d      	beq.n	8007830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a22      	ldr	r2, [pc, #136]	; (8007884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d018      	beq.n	8007830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a21      	ldr	r2, [pc, #132]	; (8007888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d013      	beq.n	8007830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a1f      	ldr	r2, [pc, #124]	; (800788c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d00e      	beq.n	8007830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a1e      	ldr	r2, [pc, #120]	; (8007890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d009      	beq.n	8007830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a1c      	ldr	r2, [pc, #112]	; (8007894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d004      	beq.n	8007830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a1b      	ldr	r2, [pc, #108]	; (8007898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d101      	bne.n	8007834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007830:	2301      	movs	r3, #1
 8007832:	e000      	b.n	8007836 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007834:	2300      	movs	r3, #0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00a      	beq.n	8007850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800783a:	68fa      	ldr	r2, [r7, #12]
 800783c:	4b17      	ldr	r3, [pc, #92]	; (800789c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800783e:	4413      	add	r3, r2
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	461a      	mov	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4a15      	ldr	r2, [pc, #84]	; (80078a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800784c:	671a      	str	r2, [r3, #112]	; 0x70
 800784e:	e009      	b.n	8007864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	4b14      	ldr	r3, [pc, #80]	; (80078a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007854:	4413      	add	r3, r2
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	461a      	mov	r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a11      	ldr	r2, [pc, #68]	; (80078a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007862:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	3b01      	subs	r3, #1
 8007868:	2201      	movs	r2, #1
 800786a:	409a      	lsls	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007870:	bf00      	nop
 8007872:	3714      	adds	r7, #20
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr
 800787c:	58025408 	.word	0x58025408
 8007880:	5802541c 	.word	0x5802541c
 8007884:	58025430 	.word	0x58025430
 8007888:	58025444 	.word	0x58025444
 800788c:	58025458 	.word	0x58025458
 8007890:	5802546c 	.word	0x5802546c
 8007894:	58025480 	.word	0x58025480
 8007898:	58025494 	.word	0x58025494
 800789c:	1600963f 	.word	0x1600963f
 80078a0:	58025940 	.word	0x58025940
 80078a4:	1000823f 	.word	0x1000823f
 80078a8:	40020940 	.word	0x40020940

080078ac <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d101      	bne.n	80078be <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	e04f      	b.n	800795e <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d106      	bne.n	80078d8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f7f8 ff38 	bl	8000748 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2202      	movs	r2, #2
 80078dc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	4b20      	ldr	r3, [pc, #128]	; (8007968 <HAL_DMA2D_Init+0xbc>)
 80078e8:	4013      	ands	r3, r2
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	6851      	ldr	r1, [r2, #4]
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	69d2      	ldr	r2, [r2, #28]
 80078f2:	4311      	orrs	r1, r2
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	6812      	ldr	r2, [r2, #0]
 80078f8:	430b      	orrs	r3, r1
 80078fa:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007902:	4b1a      	ldr	r3, [pc, #104]	; (800796c <HAL_DMA2D_Init+0xc0>)
 8007904:	4013      	ands	r3, r2
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	6891      	ldr	r1, [r2, #8]
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	6992      	ldr	r2, [r2, #24]
 800790e:	4311      	orrs	r1, r2
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	6812      	ldr	r2, [r2, #0]
 8007914:	430b      	orrs	r3, r1
 8007916:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800791e:	4b14      	ldr	r3, [pc, #80]	; (8007970 <HAL_DMA2D_Init+0xc4>)
 8007920:	4013      	ands	r3, r2
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	68d1      	ldr	r1, [r2, #12]
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	6812      	ldr	r2, [r2, #0]
 800792a:	430b      	orrs	r3, r1
 800792c:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007934:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	051a      	lsls	r2, r3, #20
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	695b      	ldr	r3, [r3, #20]
 8007942:	055b      	lsls	r3, r3, #21
 8007944:	431a      	orrs	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	430a      	orrs	r2, r1
 800794c:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3708      	adds	r7, #8
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	fff8ffbf 	.word	0xfff8ffbf
 800796c:	fffffef8 	.word	0xfffffef8
 8007970:	ffff0000 	.word	0xffff0000

08007974 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f003 0301 	and.w	r3, r3, #1
 8007992:	2b00      	cmp	r3, #0
 8007994:	d026      	beq.n	80079e4 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800799c:	2b00      	cmp	r3, #0
 800799e:	d021      	beq.n	80079e4 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079ae:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079b4:	f043 0201 	orr.w	r2, r3, #1
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2201      	movs	r2, #1
 80079c2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2204      	movs	r2, #4
 80079c8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d003      	beq.n	80079e4 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f003 0320 	and.w	r3, r3, #32
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d026      	beq.n	8007a3c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d021      	beq.n	8007a3c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a06:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2220      	movs	r2, #32
 8007a0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a14:	f043 0202 	orr.w	r2, r3, #2
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2204      	movs	r2, #4
 8007a20:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d003      	beq.n	8007a3c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f003 0308 	and.w	r3, r3, #8
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d026      	beq.n	8007a94 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d021      	beq.n	8007a94 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a5e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2208      	movs	r2, #8
 8007a66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a6c:	f043 0204 	orr.w	r2, r3, #4
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2204      	movs	r2, #4
 8007a78:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d003      	beq.n	8007a94 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f003 0304 	and.w	r3, r3, #4
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d013      	beq.n	8007ac6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00e      	beq.n	8007ac6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ab6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2204      	movs	r2, #4
 8007abe:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 f853 	bl	8007b6c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f003 0302 	and.w	r3, r3, #2
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d024      	beq.n	8007b1a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d01f      	beq.n	8007b1a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007ae8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2202      	movs	r2, #2
 8007af0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2201      	movs	r2, #1
 8007afe:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a1b      	ldr	r3, [r3, #32]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d003      	beq.n	8007b1a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a1b      	ldr	r3, [r3, #32]
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f003 0310 	and.w	r3, r3, #16
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d01f      	beq.n	8007b64 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d01a      	beq.n	8007b64 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b3c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2210      	movs	r2, #16
 8007b44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2201      	movs	r2, #1
 8007b52:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 f80e 	bl	8007b80 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8007b64:	bf00      	nop
 8007b66:	3710      	adds	r7, #16
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8007b74:	bf00      	nop
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8007b88:	bf00      	nop
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b087      	sub	sp, #28
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d101      	bne.n	8007bb8 <HAL_DMA2D_ConfigLayer+0x24>
 8007bb4:	2302      	movs	r3, #2
 8007bb6:	e092      	b.n	8007cde <HAL_DMA2D_ConfigLayer+0x14a>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2202      	movs	r2, #2
 8007bc4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007bc8:	683a      	ldr	r2, [r7, #0]
 8007bca:	4613      	mov	r3, r2
 8007bcc:	00db      	lsls	r3, r3, #3
 8007bce:	1a9b      	subs	r3, r3, r2
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	3328      	adds	r3, #40	; 0x28
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	685a      	ldr	r2, [r3, #4]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	041b      	lsls	r3, r3, #16
 8007be4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007bec:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	695b      	ldr	r3, [r3, #20]
 8007bf2:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8007bf8:	4b3c      	ldr	r3, [pc, #240]	; (8007cec <HAL_DMA2D_ConfigLayer+0x158>)
 8007bfa:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	2b0a      	cmp	r3, #10
 8007c02:	d003      	beq.n	8007c0c <HAL_DMA2D_ConfigLayer+0x78>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	2b09      	cmp	r3, #9
 8007c0a:	d107      	bne.n	8007c1c <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007c14:	693a      	ldr	r2, [r7, #16]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	613b      	str	r3, [r7, #16]
 8007c1a:	e005      	b.n	8007c28 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	061b      	lsls	r3, r3, #24
 8007c22:	693a      	ldr	r2, [r7, #16]
 8007c24:	4313      	orrs	r3, r2
 8007c26:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d120      	bne.n	8007c70 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	43db      	mvns	r3, r3
 8007c38:	ea02 0103 	and.w	r1, r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	693a      	ldr	r2, [r7, #16]
 8007c42:	430a      	orrs	r2, r1
 8007c44:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	6812      	ldr	r2, [r2, #0]
 8007c4e:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	2b0a      	cmp	r3, #10
 8007c56:	d003      	beq.n	8007c60 <HAL_DMA2D_ConfigLayer+0xcc>
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	2b09      	cmp	r3, #9
 8007c5e:	d135      	bne.n	8007ccc <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	68da      	ldr	r2, [r3, #12]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007c6c:	629a      	str	r2, [r3, #40]	; 0x28
 8007c6e:	e02d      	b.n	8007ccc <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	2b0b      	cmp	r3, #11
 8007c76:	d109      	bne.n	8007c8c <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	699b      	ldr	r3, [r3, #24]
 8007c7c:	049b      	lsls	r3, r3, #18
 8007c7e:	693a      	ldr	r2, [r7, #16]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8007c8a:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	69da      	ldr	r2, [r3, #28]
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	43db      	mvns	r3, r3
 8007c96:	ea02 0103 	and.w	r1, r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	693a      	ldr	r2, [r7, #16]
 8007ca0:	430a      	orrs	r2, r1
 8007ca2:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	6812      	ldr	r2, [r2, #0]
 8007cac:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	2b0a      	cmp	r3, #10
 8007cb4:	d003      	beq.n	8007cbe <HAL_DMA2D_ConfigLayer+0x12a>
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	2b09      	cmp	r3, #9
 8007cbc:	d106      	bne.n	8007ccc <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	68da      	ldr	r2, [r3, #12]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007cca:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	371c      	adds	r7, #28
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop
 8007cec:	ff33000f 	.word	0xff33000f

08007cf0 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b086      	sub	sp, #24
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	607a      	str	r2, [r7, #4]
 8007cfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	2b80      	cmp	r3, #128	; 0x80
 8007d08:	d105      	bne.n	8007d16 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d10:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e315      	b.n	8008342 <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d101      	bne.n	8007d24 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8007d20:	2302      	movs	r3, #2
 8007d22:	e30e      	b.n	8008342 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	f040 82fd 	bne.w	8008334 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2202      	movs	r2, #2
 8007d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2200      	movs	r2, #0
 8007d46:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a82      	ldr	r2, [pc, #520]	; (8007f58 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d04a      	beq.n	8007de8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a81      	ldr	r2, [pc, #516]	; (8007f5c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d045      	beq.n	8007de8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a7f      	ldr	r2, [pc, #508]	; (8007f60 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d040      	beq.n	8007de8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a7e      	ldr	r2, [pc, #504]	; (8007f64 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d03b      	beq.n	8007de8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a7c      	ldr	r2, [pc, #496]	; (8007f68 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d036      	beq.n	8007de8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a7b      	ldr	r2, [pc, #492]	; (8007f6c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d031      	beq.n	8007de8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a79      	ldr	r2, [pc, #484]	; (8007f70 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d02c      	beq.n	8007de8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a78      	ldr	r2, [pc, #480]	; (8007f74 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d027      	beq.n	8007de8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a76      	ldr	r2, [pc, #472]	; (8007f78 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d022      	beq.n	8007de8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a75      	ldr	r2, [pc, #468]	; (8007f7c <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d01d      	beq.n	8007de8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a73      	ldr	r2, [pc, #460]	; (8007f80 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d018      	beq.n	8007de8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a72      	ldr	r2, [pc, #456]	; (8007f84 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d013      	beq.n	8007de8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a70      	ldr	r2, [pc, #448]	; (8007f88 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d00e      	beq.n	8007de8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a6f      	ldr	r2, [pc, #444]	; (8007f8c <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d009      	beq.n	8007de8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a6d      	ldr	r2, [pc, #436]	; (8007f90 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d004      	beq.n	8007de8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a6c      	ldr	r2, [pc, #432]	; (8007f94 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d101      	bne.n	8007dec <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8007de8:	2301      	movs	r3, #1
 8007dea:	e000      	b.n	8007dee <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8007dec:	2300      	movs	r3, #0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d018      	beq.n	8007e24 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007e00:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	683a      	ldr	r2, [r7, #0]
 8007e08:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e0e:	3308      	adds	r3, #8
 8007e10:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e16:	f003 031f 	and.w	r3, r3, #31
 8007e1a:	223f      	movs	r2, #63	; 0x3f
 8007e1c:	409a      	lsls	r2, r3
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	601a      	str	r2, [r3, #0]
 8007e22:	e018      	b.n	8007e56 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	6819      	ldr	r1, [r3, #0]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	f248 0320 	movw	r3, #32800	; 0x8020
 8007e32:	430b      	orrs	r3, r1
 8007e34:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	683a      	ldr	r2, [r7, #0]
 8007e3c:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e42:	3304      	adds	r3, #4
 8007e44:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e4a:	f003 031f 	and.w	r3, r3, #31
 8007e4e:	2201      	movs	r2, #1
 8007e50:	409a      	lsls	r2, r3
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007e56:	6a3b      	ldr	r3, [r7, #32]
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	68b9      	ldr	r1, [r7, #8]
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f000 fb41 	bl	80084e4 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a3c      	ldr	r2, [pc, #240]	; (8007f58 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d072      	beq.n	8007f52 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a3a      	ldr	r2, [pc, #232]	; (8007f5c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d06d      	beq.n	8007f52 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a39      	ldr	r2, [pc, #228]	; (8007f60 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d068      	beq.n	8007f52 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a37      	ldr	r2, [pc, #220]	; (8007f64 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d063      	beq.n	8007f52 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a36      	ldr	r2, [pc, #216]	; (8007f68 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d05e      	beq.n	8007f52 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a34      	ldr	r2, [pc, #208]	; (8007f6c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d059      	beq.n	8007f52 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a33      	ldr	r2, [pc, #204]	; (8007f70 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d054      	beq.n	8007f52 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a31      	ldr	r2, [pc, #196]	; (8007f74 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d04f      	beq.n	8007f52 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a30      	ldr	r2, [pc, #192]	; (8007f78 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d04a      	beq.n	8007f52 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a2e      	ldr	r2, [pc, #184]	; (8007f7c <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d045      	beq.n	8007f52 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a2d      	ldr	r2, [pc, #180]	; (8007f80 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d040      	beq.n	8007f52 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a2b      	ldr	r2, [pc, #172]	; (8007f84 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d03b      	beq.n	8007f52 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a2a      	ldr	r2, [pc, #168]	; (8007f88 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d036      	beq.n	8007f52 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a28      	ldr	r2, [pc, #160]	; (8007f8c <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d031      	beq.n	8007f52 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a27      	ldr	r2, [pc, #156]	; (8007f90 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d02c      	beq.n	8007f52 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a25      	ldr	r2, [pc, #148]	; (8007f94 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d027      	beq.n	8007f52 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a24      	ldr	r2, [pc, #144]	; (8007f98 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d022      	beq.n	8007f52 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a22      	ldr	r2, [pc, #136]	; (8007f9c <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d01d      	beq.n	8007f52 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a21      	ldr	r2, [pc, #132]	; (8007fa0 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d018      	beq.n	8007f52 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a1f      	ldr	r2, [pc, #124]	; (8007fa4 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d013      	beq.n	8007f52 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a1e      	ldr	r2, [pc, #120]	; (8007fa8 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d00e      	beq.n	8007f52 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a1c      	ldr	r2, [pc, #112]	; (8007fac <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d009      	beq.n	8007f52 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a1b      	ldr	r2, [pc, #108]	; (8007fb0 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d004      	beq.n	8007f52 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a19      	ldr	r2, [pc, #100]	; (8007fb4 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d132      	bne.n	8007fb8 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8007f52:	2301      	movs	r3, #1
 8007f54:	e031      	b.n	8007fba <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8007f56:	bf00      	nop
 8007f58:	40020010 	.word	0x40020010
 8007f5c:	40020028 	.word	0x40020028
 8007f60:	40020040 	.word	0x40020040
 8007f64:	40020058 	.word	0x40020058
 8007f68:	40020070 	.word	0x40020070
 8007f6c:	40020088 	.word	0x40020088
 8007f70:	400200a0 	.word	0x400200a0
 8007f74:	400200b8 	.word	0x400200b8
 8007f78:	40020410 	.word	0x40020410
 8007f7c:	40020428 	.word	0x40020428
 8007f80:	40020440 	.word	0x40020440
 8007f84:	40020458 	.word	0x40020458
 8007f88:	40020470 	.word	0x40020470
 8007f8c:	40020488 	.word	0x40020488
 8007f90:	400204a0 	.word	0x400204a0
 8007f94:	400204b8 	.word	0x400204b8
 8007f98:	58025408 	.word	0x58025408
 8007f9c:	5802541c 	.word	0x5802541c
 8007fa0:	58025430 	.word	0x58025430
 8007fa4:	58025444 	.word	0x58025444
 8007fa8:	58025458 	.word	0x58025458
 8007fac:	5802546c 	.word	0x5802546c
 8007fb0:	58025480 	.word	0x58025480
 8007fb4:	58025494 	.word	0x58025494
 8007fb8:	2300      	movs	r3, #0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00d      	beq.n	8007fda <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007fc6:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d004      	beq.n	8007fda <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007fd8:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a3b      	ldr	r2, [pc, #236]	; (80080cc <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d04a      	beq.n	800807a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a39      	ldr	r2, [pc, #228]	; (80080d0 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d045      	beq.n	800807a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a38      	ldr	r2, [pc, #224]	; (80080d4 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d040      	beq.n	800807a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a36      	ldr	r2, [pc, #216]	; (80080d8 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d03b      	beq.n	800807a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a35      	ldr	r2, [pc, #212]	; (80080dc <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d036      	beq.n	800807a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a33      	ldr	r2, [pc, #204]	; (80080e0 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d031      	beq.n	800807a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a32      	ldr	r2, [pc, #200]	; (80080e4 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d02c      	beq.n	800807a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a30      	ldr	r2, [pc, #192]	; (80080e8 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d027      	beq.n	800807a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a2f      	ldr	r2, [pc, #188]	; (80080ec <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d022      	beq.n	800807a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a2d      	ldr	r2, [pc, #180]	; (80080f0 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d01d      	beq.n	800807a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a2c      	ldr	r2, [pc, #176]	; (80080f4 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d018      	beq.n	800807a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a2a      	ldr	r2, [pc, #168]	; (80080f8 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d013      	beq.n	800807a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a29      	ldr	r2, [pc, #164]	; (80080fc <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d00e      	beq.n	800807a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a27      	ldr	r2, [pc, #156]	; (8008100 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d009      	beq.n	800807a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a26      	ldr	r2, [pc, #152]	; (8008104 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d004      	beq.n	800807a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a24      	ldr	r2, [pc, #144]	; (8008108 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d101      	bne.n	800807e <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 800807a:	2301      	movs	r3, #1
 800807c:	e000      	b.n	8008080 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 800807e:	2300      	movs	r3, #0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d043      	beq.n	800810c <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f023 021e 	bic.w	r2, r3, #30
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f042 0216 	orr.w	r2, r2, #22
 8008096:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	695a      	ldr	r2, [r3, #20]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80080a6:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d103      	bne.n	80080b8 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d043      	beq.n	8008140 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f042 0208 	orr.w	r2, r2, #8
 80080c6:	601a      	str	r2, [r3, #0]
 80080c8:	e03a      	b.n	8008140 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 80080ca:	bf00      	nop
 80080cc:	40020010 	.word	0x40020010
 80080d0:	40020028 	.word	0x40020028
 80080d4:	40020040 	.word	0x40020040
 80080d8:	40020058 	.word	0x40020058
 80080dc:	40020070 	.word	0x40020070
 80080e0:	40020088 	.word	0x40020088
 80080e4:	400200a0 	.word	0x400200a0
 80080e8:	400200b8 	.word	0x400200b8
 80080ec:	40020410 	.word	0x40020410
 80080f0:	40020428 	.word	0x40020428
 80080f4:	40020440 	.word	0x40020440
 80080f8:	40020458 	.word	0x40020458
 80080fc:	40020470 	.word	0x40020470
 8008100:	40020488 	.word	0x40020488
 8008104:	400204a0 	.word	0x400204a0
 8008108:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f023 020e 	bic.w	r2, r3, #14
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f042 020a 	orr.w	r2, r2, #10
 800811e:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008124:	2b00      	cmp	r3, #0
 8008126:	d103      	bne.n	8008130 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800812c:	2b00      	cmp	r3, #0
 800812e:	d007      	beq.n	8008140 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f042 0204 	orr.w	r2, r2, #4
 800813e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a81      	ldr	r2, [pc, #516]	; (800834c <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d072      	beq.n	8008230 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a80      	ldr	r2, [pc, #512]	; (8008350 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d06d      	beq.n	8008230 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a7e      	ldr	r2, [pc, #504]	; (8008354 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d068      	beq.n	8008230 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a7d      	ldr	r2, [pc, #500]	; (8008358 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d063      	beq.n	8008230 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a7b      	ldr	r2, [pc, #492]	; (800835c <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d05e      	beq.n	8008230 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a7a      	ldr	r2, [pc, #488]	; (8008360 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d059      	beq.n	8008230 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a78      	ldr	r2, [pc, #480]	; (8008364 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d054      	beq.n	8008230 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a77      	ldr	r2, [pc, #476]	; (8008368 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d04f      	beq.n	8008230 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a75      	ldr	r2, [pc, #468]	; (800836c <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d04a      	beq.n	8008230 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a74      	ldr	r2, [pc, #464]	; (8008370 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d045      	beq.n	8008230 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a72      	ldr	r2, [pc, #456]	; (8008374 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d040      	beq.n	8008230 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a71      	ldr	r2, [pc, #452]	; (8008378 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d03b      	beq.n	8008230 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a6f      	ldr	r2, [pc, #444]	; (800837c <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d036      	beq.n	8008230 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a6e      	ldr	r2, [pc, #440]	; (8008380 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d031      	beq.n	8008230 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a6c      	ldr	r2, [pc, #432]	; (8008384 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d02c      	beq.n	8008230 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a6b      	ldr	r2, [pc, #428]	; (8008388 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d027      	beq.n	8008230 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a69      	ldr	r2, [pc, #420]	; (800838c <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d022      	beq.n	8008230 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a68      	ldr	r2, [pc, #416]	; (8008390 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d01d      	beq.n	8008230 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a66      	ldr	r2, [pc, #408]	; (8008394 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d018      	beq.n	8008230 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a65      	ldr	r2, [pc, #404]	; (8008398 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d013      	beq.n	8008230 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a63      	ldr	r2, [pc, #396]	; (800839c <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d00e      	beq.n	8008230 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a62      	ldr	r2, [pc, #392]	; (80083a0 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d009      	beq.n	8008230 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a60      	ldr	r2, [pc, #384]	; (80083a4 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d004      	beq.n	8008230 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a5f      	ldr	r2, [pc, #380]	; (80083a8 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d101      	bne.n	8008234 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8008230:	2301      	movs	r3, #1
 8008232:	e000      	b.n	8008236 <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8008234:	2300      	movs	r3, #0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d01a      	beq.n	8008270 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008244:	2b00      	cmp	r3, #0
 8008246:	d007      	beq.n	8008258 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008252:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008256:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800825c:	2b00      	cmp	r3, #0
 800825e:	d007      	beq.n	8008270 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800826a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800826e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a35      	ldr	r2, [pc, #212]	; (800834c <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d04a      	beq.n	8008310 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a34      	ldr	r2, [pc, #208]	; (8008350 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d045      	beq.n	8008310 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a32      	ldr	r2, [pc, #200]	; (8008354 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d040      	beq.n	8008310 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a31      	ldr	r2, [pc, #196]	; (8008358 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d03b      	beq.n	8008310 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a2f      	ldr	r2, [pc, #188]	; (800835c <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d036      	beq.n	8008310 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a2e      	ldr	r2, [pc, #184]	; (8008360 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d031      	beq.n	8008310 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a2c      	ldr	r2, [pc, #176]	; (8008364 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d02c      	beq.n	8008310 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a2b      	ldr	r2, [pc, #172]	; (8008368 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d027      	beq.n	8008310 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a29      	ldr	r2, [pc, #164]	; (800836c <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d022      	beq.n	8008310 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a28      	ldr	r2, [pc, #160]	; (8008370 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d01d      	beq.n	8008310 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a26      	ldr	r2, [pc, #152]	; (8008374 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d018      	beq.n	8008310 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a25      	ldr	r2, [pc, #148]	; (8008378 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d013      	beq.n	8008310 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a23      	ldr	r2, [pc, #140]	; (800837c <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d00e      	beq.n	8008310 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a22      	ldr	r2, [pc, #136]	; (8008380 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d009      	beq.n	8008310 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a20      	ldr	r2, [pc, #128]	; (8008384 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d004      	beq.n	8008310 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a1f      	ldr	r2, [pc, #124]	; (8008388 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d108      	bne.n	8008322 <HAL_DMAEx_MultiBufferStart_IT+0x632>
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f042 0201 	orr.w	r2, r2, #1
 800831e:	601a      	str	r2, [r3, #0]
 8008320:	e00e      	b.n	8008340 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f042 0201 	orr.w	r2, r2, #1
 8008330:	601a      	str	r2, [r3, #0]
 8008332:	e005      	b.n	8008340 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800833a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008340:	7dfb      	ldrb	r3, [r7, #23]
}
 8008342:	4618      	mov	r0, r3
 8008344:	3718      	adds	r7, #24
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	40020010 	.word	0x40020010
 8008350:	40020028 	.word	0x40020028
 8008354:	40020040 	.word	0x40020040
 8008358:	40020058 	.word	0x40020058
 800835c:	40020070 	.word	0x40020070
 8008360:	40020088 	.word	0x40020088
 8008364:	400200a0 	.word	0x400200a0
 8008368:	400200b8 	.word	0x400200b8
 800836c:	40020410 	.word	0x40020410
 8008370:	40020428 	.word	0x40020428
 8008374:	40020440 	.word	0x40020440
 8008378:	40020458 	.word	0x40020458
 800837c:	40020470 	.word	0x40020470
 8008380:	40020488 	.word	0x40020488
 8008384:	400204a0 	.word	0x400204a0
 8008388:	400204b8 	.word	0x400204b8
 800838c:	58025408 	.word	0x58025408
 8008390:	5802541c 	.word	0x5802541c
 8008394:	58025430 	.word	0x58025430
 8008398:	58025444 	.word	0x58025444
 800839c:	58025458 	.word	0x58025458
 80083a0:	5802546c 	.word	0x5802546c
 80083a4:	58025480 	.word	0x58025480
 80083a8:	58025494 	.word	0x58025494

080083ac <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b085      	sub	sp, #20
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	4613      	mov	r3, r2
 80083b8:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a39      	ldr	r2, [pc, #228]	; (80084a4 <HAL_DMAEx_ChangeMemory+0xf8>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d04a      	beq.n	800845a <HAL_DMAEx_ChangeMemory+0xae>
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a37      	ldr	r2, [pc, #220]	; (80084a8 <HAL_DMAEx_ChangeMemory+0xfc>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d045      	beq.n	800845a <HAL_DMAEx_ChangeMemory+0xae>
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a36      	ldr	r2, [pc, #216]	; (80084ac <HAL_DMAEx_ChangeMemory+0x100>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d040      	beq.n	800845a <HAL_DMAEx_ChangeMemory+0xae>
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a34      	ldr	r2, [pc, #208]	; (80084b0 <HAL_DMAEx_ChangeMemory+0x104>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d03b      	beq.n	800845a <HAL_DMAEx_ChangeMemory+0xae>
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a33      	ldr	r2, [pc, #204]	; (80084b4 <HAL_DMAEx_ChangeMemory+0x108>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d036      	beq.n	800845a <HAL_DMAEx_ChangeMemory+0xae>
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a31      	ldr	r2, [pc, #196]	; (80084b8 <HAL_DMAEx_ChangeMemory+0x10c>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d031      	beq.n	800845a <HAL_DMAEx_ChangeMemory+0xae>
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a30      	ldr	r2, [pc, #192]	; (80084bc <HAL_DMAEx_ChangeMemory+0x110>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d02c      	beq.n	800845a <HAL_DMAEx_ChangeMemory+0xae>
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a2e      	ldr	r2, [pc, #184]	; (80084c0 <HAL_DMAEx_ChangeMemory+0x114>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d027      	beq.n	800845a <HAL_DMAEx_ChangeMemory+0xae>
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a2d      	ldr	r2, [pc, #180]	; (80084c4 <HAL_DMAEx_ChangeMemory+0x118>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d022      	beq.n	800845a <HAL_DMAEx_ChangeMemory+0xae>
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a2b      	ldr	r2, [pc, #172]	; (80084c8 <HAL_DMAEx_ChangeMemory+0x11c>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d01d      	beq.n	800845a <HAL_DMAEx_ChangeMemory+0xae>
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a2a      	ldr	r2, [pc, #168]	; (80084cc <HAL_DMAEx_ChangeMemory+0x120>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d018      	beq.n	800845a <HAL_DMAEx_ChangeMemory+0xae>
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a28      	ldr	r2, [pc, #160]	; (80084d0 <HAL_DMAEx_ChangeMemory+0x124>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d013      	beq.n	800845a <HAL_DMAEx_ChangeMemory+0xae>
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a27      	ldr	r2, [pc, #156]	; (80084d4 <HAL_DMAEx_ChangeMemory+0x128>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d00e      	beq.n	800845a <HAL_DMAEx_ChangeMemory+0xae>
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a25      	ldr	r2, [pc, #148]	; (80084d8 <HAL_DMAEx_ChangeMemory+0x12c>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d009      	beq.n	800845a <HAL_DMAEx_ChangeMemory+0xae>
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a24      	ldr	r2, [pc, #144]	; (80084dc <HAL_DMAEx_ChangeMemory+0x130>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d004      	beq.n	800845a <HAL_DMAEx_ChangeMemory+0xae>
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a22      	ldr	r2, [pc, #136]	; (80084e0 <HAL_DMAEx_ChangeMemory+0x134>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d101      	bne.n	800845e <HAL_DMAEx_ChangeMemory+0xb2>
 800845a:	2301      	movs	r3, #1
 800845c:	e000      	b.n	8008460 <HAL_DMAEx_ChangeMemory+0xb4>
 800845e:	2300      	movs	r3, #0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00c      	beq.n	800847e <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 8008464:	79fb      	ldrb	r3, [r7, #7]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d104      	bne.n	8008474 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	68ba      	ldr	r2, [r7, #8]
 8008470:	60da      	str	r2, [r3, #12]
 8008472:	e010      	b.n	8008496 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68ba      	ldr	r2, [r7, #8]
 800847a:	611a      	str	r2, [r3, #16]
 800847c:	e00b      	b.n	8008496 <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 800847e:	79fb      	ldrb	r3, [r7, #7]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d104      	bne.n	800848e <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	68ba      	ldr	r2, [r7, #8]
 800848a:	60da      	str	r2, [r3, #12]
 800848c:	e003      	b.n	8008496 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	68ba      	ldr	r2, [r7, #8]
 8008494:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 8008496:	2300      	movs	r3, #0
}
 8008498:	4618      	mov	r0, r3
 800849a:	3714      	adds	r7, #20
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr
 80084a4:	40020010 	.word	0x40020010
 80084a8:	40020028 	.word	0x40020028
 80084ac:	40020040 	.word	0x40020040
 80084b0:	40020058 	.word	0x40020058
 80084b4:	40020070 	.word	0x40020070
 80084b8:	40020088 	.word	0x40020088
 80084bc:	400200a0 	.word	0x400200a0
 80084c0:	400200b8 	.word	0x400200b8
 80084c4:	40020410 	.word	0x40020410
 80084c8:	40020428 	.word	0x40020428
 80084cc:	40020440 	.word	0x40020440
 80084d0:	40020458 	.word	0x40020458
 80084d4:	40020470 	.word	0x40020470
 80084d8:	40020488 	.word	0x40020488
 80084dc:	400204a0 	.word	0x400204a0
 80084e0:	400204b8 	.word	0x400204b8

080084e4 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b085      	sub	sp, #20
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	607a      	str	r2, [r7, #4]
 80084f0:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a46      	ldr	r2, [pc, #280]	; (8008610 <DMA_MultiBufferSetConfig+0x12c>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d04a      	beq.n	8008592 <DMA_MultiBufferSetConfig+0xae>
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a44      	ldr	r2, [pc, #272]	; (8008614 <DMA_MultiBufferSetConfig+0x130>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d045      	beq.n	8008592 <DMA_MultiBufferSetConfig+0xae>
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a43      	ldr	r2, [pc, #268]	; (8008618 <DMA_MultiBufferSetConfig+0x134>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d040      	beq.n	8008592 <DMA_MultiBufferSetConfig+0xae>
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a41      	ldr	r2, [pc, #260]	; (800861c <DMA_MultiBufferSetConfig+0x138>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d03b      	beq.n	8008592 <DMA_MultiBufferSetConfig+0xae>
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a40      	ldr	r2, [pc, #256]	; (8008620 <DMA_MultiBufferSetConfig+0x13c>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d036      	beq.n	8008592 <DMA_MultiBufferSetConfig+0xae>
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a3e      	ldr	r2, [pc, #248]	; (8008624 <DMA_MultiBufferSetConfig+0x140>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d031      	beq.n	8008592 <DMA_MultiBufferSetConfig+0xae>
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a3d      	ldr	r2, [pc, #244]	; (8008628 <DMA_MultiBufferSetConfig+0x144>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d02c      	beq.n	8008592 <DMA_MultiBufferSetConfig+0xae>
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a3b      	ldr	r2, [pc, #236]	; (800862c <DMA_MultiBufferSetConfig+0x148>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d027      	beq.n	8008592 <DMA_MultiBufferSetConfig+0xae>
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a3a      	ldr	r2, [pc, #232]	; (8008630 <DMA_MultiBufferSetConfig+0x14c>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d022      	beq.n	8008592 <DMA_MultiBufferSetConfig+0xae>
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a38      	ldr	r2, [pc, #224]	; (8008634 <DMA_MultiBufferSetConfig+0x150>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d01d      	beq.n	8008592 <DMA_MultiBufferSetConfig+0xae>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a37      	ldr	r2, [pc, #220]	; (8008638 <DMA_MultiBufferSetConfig+0x154>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d018      	beq.n	8008592 <DMA_MultiBufferSetConfig+0xae>
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a35      	ldr	r2, [pc, #212]	; (800863c <DMA_MultiBufferSetConfig+0x158>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d013      	beq.n	8008592 <DMA_MultiBufferSetConfig+0xae>
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a34      	ldr	r2, [pc, #208]	; (8008640 <DMA_MultiBufferSetConfig+0x15c>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d00e      	beq.n	8008592 <DMA_MultiBufferSetConfig+0xae>
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a32      	ldr	r2, [pc, #200]	; (8008644 <DMA_MultiBufferSetConfig+0x160>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d009      	beq.n	8008592 <DMA_MultiBufferSetConfig+0xae>
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a31      	ldr	r2, [pc, #196]	; (8008648 <DMA_MultiBufferSetConfig+0x164>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d004      	beq.n	8008592 <DMA_MultiBufferSetConfig+0xae>
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a2f      	ldr	r2, [pc, #188]	; (800864c <DMA_MultiBufferSetConfig+0x168>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d101      	bne.n	8008596 <DMA_MultiBufferSetConfig+0xb2>
 8008592:	2301      	movs	r3, #1
 8008594:	e000      	b.n	8008598 <DMA_MultiBufferSetConfig+0xb4>
 8008596:	2300      	movs	r3, #0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d019      	beq.n	80085d0 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	683a      	ldr	r2, [r7, #0]
 80085a2:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	2b40      	cmp	r3, #64	; 0x40
 80085aa:	d108      	bne.n	80085be <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68ba      	ldr	r2, [r7, #8]
 80085ba:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 80085bc:	e021      	b.n	8008602 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	68ba      	ldr	r2, [r7, #8]
 80085c4:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	60da      	str	r2, [r3, #12]
}
 80085ce:	e018      	b.n	8008602 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	683a      	ldr	r2, [r7, #0]
 80085d6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	2b40      	cmp	r3, #64	; 0x40
 80085de:	d108      	bne.n	80085f2 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	68ba      	ldr	r2, [r7, #8]
 80085ee:	60da      	str	r2, [r3, #12]
}
 80085f0:	e007      	b.n	8008602 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	68ba      	ldr	r2, [r7, #8]
 80085f8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	60da      	str	r2, [r3, #12]
}
 8008602:	bf00      	nop
 8008604:	3714      	adds	r7, #20
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop
 8008610:	40020010 	.word	0x40020010
 8008614:	40020028 	.word	0x40020028
 8008618:	40020040 	.word	0x40020040
 800861c:	40020058 	.word	0x40020058
 8008620:	40020070 	.word	0x40020070
 8008624:	40020088 	.word	0x40020088
 8008628:	400200a0 	.word	0x400200a0
 800862c:	400200b8 	.word	0x400200b8
 8008630:	40020410 	.word	0x40020410
 8008634:	40020428 	.word	0x40020428
 8008638:	40020440 	.word	0x40020440
 800863c:	40020458 	.word	0x40020458
 8008640:	40020470 	.word	0x40020470
 8008644:	40020488 	.word	0x40020488
 8008648:	400204a0 	.word	0x400204a0
 800864c:	400204b8 	.word	0x400204b8

08008650 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008650:	b480      	push	{r7}
 8008652:	b089      	sub	sp, #36	; 0x24
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800865a:	2300      	movs	r3, #0
 800865c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800865e:	4b89      	ldr	r3, [pc, #548]	; (8008884 <HAL_GPIO_Init+0x234>)
 8008660:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008662:	e194      	b.n	800898e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	2101      	movs	r1, #1
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	fa01 f303 	lsl.w	r3, r1, r3
 8008670:	4013      	ands	r3, r2
 8008672:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	2b00      	cmp	r3, #0
 8008678:	f000 8186 	beq.w	8008988 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	f003 0303 	and.w	r3, r3, #3
 8008684:	2b01      	cmp	r3, #1
 8008686:	d005      	beq.n	8008694 <HAL_GPIO_Init+0x44>
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	f003 0303 	and.w	r3, r3, #3
 8008690:	2b02      	cmp	r3, #2
 8008692:	d130      	bne.n	80086f6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800869a:	69fb      	ldr	r3, [r7, #28]
 800869c:	005b      	lsls	r3, r3, #1
 800869e:	2203      	movs	r2, #3
 80086a0:	fa02 f303 	lsl.w	r3, r2, r3
 80086a4:	43db      	mvns	r3, r3
 80086a6:	69ba      	ldr	r2, [r7, #24]
 80086a8:	4013      	ands	r3, r2
 80086aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	68da      	ldr	r2, [r3, #12]
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	005b      	lsls	r3, r3, #1
 80086b4:	fa02 f303 	lsl.w	r3, r2, r3
 80086b8:	69ba      	ldr	r2, [r7, #24]
 80086ba:	4313      	orrs	r3, r2
 80086bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	69ba      	ldr	r2, [r7, #24]
 80086c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80086ca:	2201      	movs	r2, #1
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	fa02 f303 	lsl.w	r3, r2, r3
 80086d2:	43db      	mvns	r3, r3
 80086d4:	69ba      	ldr	r2, [r7, #24]
 80086d6:	4013      	ands	r3, r2
 80086d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	091b      	lsrs	r3, r3, #4
 80086e0:	f003 0201 	and.w	r2, r3, #1
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	fa02 f303 	lsl.w	r3, r2, r3
 80086ea:	69ba      	ldr	r2, [r7, #24]
 80086ec:	4313      	orrs	r3, r2
 80086ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	69ba      	ldr	r2, [r7, #24]
 80086f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	f003 0303 	and.w	r3, r3, #3
 80086fe:	2b03      	cmp	r3, #3
 8008700:	d017      	beq.n	8008732 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	005b      	lsls	r3, r3, #1
 800870c:	2203      	movs	r2, #3
 800870e:	fa02 f303 	lsl.w	r3, r2, r3
 8008712:	43db      	mvns	r3, r3
 8008714:	69ba      	ldr	r2, [r7, #24]
 8008716:	4013      	ands	r3, r2
 8008718:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	689a      	ldr	r2, [r3, #8]
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	005b      	lsls	r3, r3, #1
 8008722:	fa02 f303 	lsl.w	r3, r2, r3
 8008726:	69ba      	ldr	r2, [r7, #24]
 8008728:	4313      	orrs	r3, r2
 800872a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	69ba      	ldr	r2, [r7, #24]
 8008730:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	f003 0303 	and.w	r3, r3, #3
 800873a:	2b02      	cmp	r3, #2
 800873c:	d123      	bne.n	8008786 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800873e:	69fb      	ldr	r3, [r7, #28]
 8008740:	08da      	lsrs	r2, r3, #3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	3208      	adds	r2, #8
 8008746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800874a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	f003 0307 	and.w	r3, r3, #7
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	220f      	movs	r2, #15
 8008756:	fa02 f303 	lsl.w	r3, r2, r3
 800875a:	43db      	mvns	r3, r3
 800875c:	69ba      	ldr	r2, [r7, #24]
 800875e:	4013      	ands	r3, r2
 8008760:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	691a      	ldr	r2, [r3, #16]
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	f003 0307 	and.w	r3, r3, #7
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	fa02 f303 	lsl.w	r3, r2, r3
 8008772:	69ba      	ldr	r2, [r7, #24]
 8008774:	4313      	orrs	r3, r2
 8008776:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	08da      	lsrs	r2, r3, #3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	3208      	adds	r2, #8
 8008780:	69b9      	ldr	r1, [r7, #24]
 8008782:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	005b      	lsls	r3, r3, #1
 8008790:	2203      	movs	r2, #3
 8008792:	fa02 f303 	lsl.w	r3, r2, r3
 8008796:	43db      	mvns	r3, r3
 8008798:	69ba      	ldr	r2, [r7, #24]
 800879a:	4013      	ands	r3, r2
 800879c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	f003 0203 	and.w	r2, r3, #3
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	005b      	lsls	r3, r3, #1
 80087aa:	fa02 f303 	lsl.w	r3, r2, r3
 80087ae:	69ba      	ldr	r2, [r7, #24]
 80087b0:	4313      	orrs	r3, r2
 80087b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	69ba      	ldr	r2, [r7, #24]
 80087b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	f000 80e0 	beq.w	8008988 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80087c8:	4b2f      	ldr	r3, [pc, #188]	; (8008888 <HAL_GPIO_Init+0x238>)
 80087ca:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80087ce:	4a2e      	ldr	r2, [pc, #184]	; (8008888 <HAL_GPIO_Init+0x238>)
 80087d0:	f043 0302 	orr.w	r3, r3, #2
 80087d4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80087d8:	4b2b      	ldr	r3, [pc, #172]	; (8008888 <HAL_GPIO_Init+0x238>)
 80087da:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80087de:	f003 0302 	and.w	r3, r3, #2
 80087e2:	60fb      	str	r3, [r7, #12]
 80087e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80087e6:	4a29      	ldr	r2, [pc, #164]	; (800888c <HAL_GPIO_Init+0x23c>)
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	089b      	lsrs	r3, r3, #2
 80087ec:	3302      	adds	r3, #2
 80087ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	f003 0303 	and.w	r3, r3, #3
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	220f      	movs	r2, #15
 80087fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008802:	43db      	mvns	r3, r3
 8008804:	69ba      	ldr	r2, [r7, #24]
 8008806:	4013      	ands	r3, r2
 8008808:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a20      	ldr	r2, [pc, #128]	; (8008890 <HAL_GPIO_Init+0x240>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d052      	beq.n	80088b8 <HAL_GPIO_Init+0x268>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a1f      	ldr	r2, [pc, #124]	; (8008894 <HAL_GPIO_Init+0x244>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d031      	beq.n	800887e <HAL_GPIO_Init+0x22e>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a1e      	ldr	r2, [pc, #120]	; (8008898 <HAL_GPIO_Init+0x248>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d02b      	beq.n	800887a <HAL_GPIO_Init+0x22a>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4a1d      	ldr	r2, [pc, #116]	; (800889c <HAL_GPIO_Init+0x24c>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d025      	beq.n	8008876 <HAL_GPIO_Init+0x226>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a1c      	ldr	r2, [pc, #112]	; (80088a0 <HAL_GPIO_Init+0x250>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d01f      	beq.n	8008872 <HAL_GPIO_Init+0x222>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4a1b      	ldr	r2, [pc, #108]	; (80088a4 <HAL_GPIO_Init+0x254>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d019      	beq.n	800886e <HAL_GPIO_Init+0x21e>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4a1a      	ldr	r2, [pc, #104]	; (80088a8 <HAL_GPIO_Init+0x258>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d013      	beq.n	800886a <HAL_GPIO_Init+0x21a>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4a19      	ldr	r2, [pc, #100]	; (80088ac <HAL_GPIO_Init+0x25c>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d00d      	beq.n	8008866 <HAL_GPIO_Init+0x216>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4a18      	ldr	r2, [pc, #96]	; (80088b0 <HAL_GPIO_Init+0x260>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d007      	beq.n	8008862 <HAL_GPIO_Init+0x212>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	4a17      	ldr	r2, [pc, #92]	; (80088b4 <HAL_GPIO_Init+0x264>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d101      	bne.n	800885e <HAL_GPIO_Init+0x20e>
 800885a:	2309      	movs	r3, #9
 800885c:	e02d      	b.n	80088ba <HAL_GPIO_Init+0x26a>
 800885e:	230a      	movs	r3, #10
 8008860:	e02b      	b.n	80088ba <HAL_GPIO_Init+0x26a>
 8008862:	2308      	movs	r3, #8
 8008864:	e029      	b.n	80088ba <HAL_GPIO_Init+0x26a>
 8008866:	2307      	movs	r3, #7
 8008868:	e027      	b.n	80088ba <HAL_GPIO_Init+0x26a>
 800886a:	2306      	movs	r3, #6
 800886c:	e025      	b.n	80088ba <HAL_GPIO_Init+0x26a>
 800886e:	2305      	movs	r3, #5
 8008870:	e023      	b.n	80088ba <HAL_GPIO_Init+0x26a>
 8008872:	2304      	movs	r3, #4
 8008874:	e021      	b.n	80088ba <HAL_GPIO_Init+0x26a>
 8008876:	2303      	movs	r3, #3
 8008878:	e01f      	b.n	80088ba <HAL_GPIO_Init+0x26a>
 800887a:	2302      	movs	r3, #2
 800887c:	e01d      	b.n	80088ba <HAL_GPIO_Init+0x26a>
 800887e:	2301      	movs	r3, #1
 8008880:	e01b      	b.n	80088ba <HAL_GPIO_Init+0x26a>
 8008882:	bf00      	nop
 8008884:	58000080 	.word	0x58000080
 8008888:	58024400 	.word	0x58024400
 800888c:	58000400 	.word	0x58000400
 8008890:	58020000 	.word	0x58020000
 8008894:	58020400 	.word	0x58020400
 8008898:	58020800 	.word	0x58020800
 800889c:	58020c00 	.word	0x58020c00
 80088a0:	58021000 	.word	0x58021000
 80088a4:	58021400 	.word	0x58021400
 80088a8:	58021800 	.word	0x58021800
 80088ac:	58021c00 	.word	0x58021c00
 80088b0:	58022000 	.word	0x58022000
 80088b4:	58022400 	.word	0x58022400
 80088b8:	2300      	movs	r3, #0
 80088ba:	69fa      	ldr	r2, [r7, #28]
 80088bc:	f002 0203 	and.w	r2, r2, #3
 80088c0:	0092      	lsls	r2, r2, #2
 80088c2:	4093      	lsls	r3, r2
 80088c4:	69ba      	ldr	r2, [r7, #24]
 80088c6:	4313      	orrs	r3, r2
 80088c8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80088ca:	4938      	ldr	r1, [pc, #224]	; (80089ac <HAL_GPIO_Init+0x35c>)
 80088cc:	69fb      	ldr	r3, [r7, #28]
 80088ce:	089b      	lsrs	r3, r3, #2
 80088d0:	3302      	adds	r3, #2
 80088d2:	69ba      	ldr	r2, [r7, #24]
 80088d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80088d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	43db      	mvns	r3, r3
 80088e4:	69ba      	ldr	r2, [r7, #24]
 80088e6:	4013      	ands	r3, r2
 80088e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d003      	beq.n	80088fe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80088f6:	69ba      	ldr	r2, [r7, #24]
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80088fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	43db      	mvns	r3, r3
 8008912:	69ba      	ldr	r2, [r7, #24]
 8008914:	4013      	ands	r3, r2
 8008916:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008920:	2b00      	cmp	r3, #0
 8008922:	d003      	beq.n	800892c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008924:	69ba      	ldr	r2, [r7, #24]
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	4313      	orrs	r3, r2
 800892a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800892c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008930:	69bb      	ldr	r3, [r7, #24]
 8008932:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	43db      	mvns	r3, r3
 800893e:	69ba      	ldr	r2, [r7, #24]
 8008940:	4013      	ands	r3, r2
 8008942:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800894c:	2b00      	cmp	r3, #0
 800894e:	d003      	beq.n	8008958 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008950:	69ba      	ldr	r2, [r7, #24]
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	4313      	orrs	r3, r2
 8008956:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	69ba      	ldr	r2, [r7, #24]
 800895c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	43db      	mvns	r3, r3
 8008968:	69ba      	ldr	r2, [r7, #24]
 800896a:	4013      	ands	r3, r2
 800896c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008976:	2b00      	cmp	r3, #0
 8008978:	d003      	beq.n	8008982 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800897a:	69ba      	ldr	r2, [r7, #24]
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	4313      	orrs	r3, r2
 8008980:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	69ba      	ldr	r2, [r7, #24]
 8008986:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	3301      	adds	r3, #1
 800898c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	fa22 f303 	lsr.w	r3, r2, r3
 8008998:	2b00      	cmp	r3, #0
 800899a:	f47f ae63 	bne.w	8008664 <HAL_GPIO_Init+0x14>
  }
}
 800899e:	bf00      	nop
 80089a0:	bf00      	nop
 80089a2:	3724      	adds	r7, #36	; 0x24
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr
 80089ac:	58000400 	.word	0x58000400

080089b0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b087      	sub	sp, #28
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80089ba:	2300      	movs	r3, #0
 80089bc:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80089be:	4b75      	ldr	r3, [pc, #468]	; (8008b94 <HAL_GPIO_DeInit+0x1e4>)
 80089c0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 80089c2:	e0d9      	b.n	8008b78 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80089c4:	2201      	movs	r2, #1
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	fa02 f303 	lsl.w	r3, r2, r3
 80089cc:	683a      	ldr	r2, [r7, #0]
 80089ce:	4013      	ands	r3, r2
 80089d0:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f000 80cc 	beq.w	8008b72 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80089da:	4a6f      	ldr	r2, [pc, #444]	; (8008b98 <HAL_GPIO_DeInit+0x1e8>)
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	089b      	lsrs	r3, r3, #2
 80089e0:	3302      	adds	r3, #2
 80089e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089e6:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	f003 0303 	and.w	r3, r3, #3
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	220f      	movs	r2, #15
 80089f2:	fa02 f303 	lsl.w	r3, r2, r3
 80089f6:	68ba      	ldr	r2, [r7, #8]
 80089f8:	4013      	ands	r3, r2
 80089fa:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	4a67      	ldr	r2, [pc, #412]	; (8008b9c <HAL_GPIO_DeInit+0x1ec>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d037      	beq.n	8008a74 <HAL_GPIO_DeInit+0xc4>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	4a66      	ldr	r2, [pc, #408]	; (8008ba0 <HAL_GPIO_DeInit+0x1f0>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d031      	beq.n	8008a70 <HAL_GPIO_DeInit+0xc0>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4a65      	ldr	r2, [pc, #404]	; (8008ba4 <HAL_GPIO_DeInit+0x1f4>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d02b      	beq.n	8008a6c <HAL_GPIO_DeInit+0xbc>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	4a64      	ldr	r2, [pc, #400]	; (8008ba8 <HAL_GPIO_DeInit+0x1f8>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d025      	beq.n	8008a68 <HAL_GPIO_DeInit+0xb8>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4a63      	ldr	r2, [pc, #396]	; (8008bac <HAL_GPIO_DeInit+0x1fc>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d01f      	beq.n	8008a64 <HAL_GPIO_DeInit+0xb4>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	4a62      	ldr	r2, [pc, #392]	; (8008bb0 <HAL_GPIO_DeInit+0x200>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d019      	beq.n	8008a60 <HAL_GPIO_DeInit+0xb0>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	4a61      	ldr	r2, [pc, #388]	; (8008bb4 <HAL_GPIO_DeInit+0x204>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d013      	beq.n	8008a5c <HAL_GPIO_DeInit+0xac>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	4a60      	ldr	r2, [pc, #384]	; (8008bb8 <HAL_GPIO_DeInit+0x208>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d00d      	beq.n	8008a58 <HAL_GPIO_DeInit+0xa8>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4a5f      	ldr	r2, [pc, #380]	; (8008bbc <HAL_GPIO_DeInit+0x20c>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d007      	beq.n	8008a54 <HAL_GPIO_DeInit+0xa4>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	4a5e      	ldr	r2, [pc, #376]	; (8008bc0 <HAL_GPIO_DeInit+0x210>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d101      	bne.n	8008a50 <HAL_GPIO_DeInit+0xa0>
 8008a4c:	2309      	movs	r3, #9
 8008a4e:	e012      	b.n	8008a76 <HAL_GPIO_DeInit+0xc6>
 8008a50:	230a      	movs	r3, #10
 8008a52:	e010      	b.n	8008a76 <HAL_GPIO_DeInit+0xc6>
 8008a54:	2308      	movs	r3, #8
 8008a56:	e00e      	b.n	8008a76 <HAL_GPIO_DeInit+0xc6>
 8008a58:	2307      	movs	r3, #7
 8008a5a:	e00c      	b.n	8008a76 <HAL_GPIO_DeInit+0xc6>
 8008a5c:	2306      	movs	r3, #6
 8008a5e:	e00a      	b.n	8008a76 <HAL_GPIO_DeInit+0xc6>
 8008a60:	2305      	movs	r3, #5
 8008a62:	e008      	b.n	8008a76 <HAL_GPIO_DeInit+0xc6>
 8008a64:	2304      	movs	r3, #4
 8008a66:	e006      	b.n	8008a76 <HAL_GPIO_DeInit+0xc6>
 8008a68:	2303      	movs	r3, #3
 8008a6a:	e004      	b.n	8008a76 <HAL_GPIO_DeInit+0xc6>
 8008a6c:	2302      	movs	r3, #2
 8008a6e:	e002      	b.n	8008a76 <HAL_GPIO_DeInit+0xc6>
 8008a70:	2301      	movs	r3, #1
 8008a72:	e000      	b.n	8008a76 <HAL_GPIO_DeInit+0xc6>
 8008a74:	2300      	movs	r3, #0
 8008a76:	697a      	ldr	r2, [r7, #20]
 8008a78:	f002 0203 	and.w	r2, r2, #3
 8008a7c:	0092      	lsls	r2, r2, #2
 8008a7e:	4093      	lsls	r3, r2
 8008a80:	68ba      	ldr	r2, [r7, #8]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d136      	bne.n	8008af4 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	43db      	mvns	r3, r3
 8008a8e:	401a      	ands	r2, r3
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	685a      	ldr	r2, [r3, #4]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	43db      	mvns	r3, r3
 8008a9c:	401a      	ands	r2, r3
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8008aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008aa6:	685a      	ldr	r2, [r3, #4]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	43db      	mvns	r3, r3
 8008aac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ab0:	4013      	ands	r3, r2
 8008ab2:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8008ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	43db      	mvns	r3, r3
 8008abe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ac2:	4013      	ands	r3, r2
 8008ac4:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	f003 0303 	and.w	r3, r3, #3
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	220f      	movs	r2, #15
 8008ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ad4:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008ad6:	4a30      	ldr	r2, [pc, #192]	; (8008b98 <HAL_GPIO_DeInit+0x1e8>)
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	089b      	lsrs	r3, r3, #2
 8008adc:	3302      	adds	r3, #2
 8008ade:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	43da      	mvns	r2, r3
 8008ae6:	482c      	ldr	r0, [pc, #176]	; (8008b98 <HAL_GPIO_DeInit+0x1e8>)
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	089b      	lsrs	r3, r3, #2
 8008aec:	400a      	ands	r2, r1
 8008aee:	3302      	adds	r3, #2
 8008af0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	005b      	lsls	r3, r3, #1
 8008afc:	2103      	movs	r1, #3
 8008afe:	fa01 f303 	lsl.w	r3, r1, r3
 8008b02:	431a      	orrs	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	08da      	lsrs	r2, r3, #3
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	3208      	adds	r2, #8
 8008b10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	f003 0307 	and.w	r3, r3, #7
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	220f      	movs	r2, #15
 8008b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b22:	43db      	mvns	r3, r3
 8008b24:	697a      	ldr	r2, [r7, #20]
 8008b26:	08d2      	lsrs	r2, r2, #3
 8008b28:	4019      	ands	r1, r3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	3208      	adds	r2, #8
 8008b2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	68da      	ldr	r2, [r3, #12]
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	005b      	lsls	r3, r3, #1
 8008b3a:	2103      	movs	r1, #3
 8008b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8008b40:	43db      	mvns	r3, r3
 8008b42:	401a      	ands	r2, r3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	685a      	ldr	r2, [r3, #4]
 8008b4c:	2101      	movs	r1, #1
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	fa01 f303 	lsl.w	r3, r1, r3
 8008b54:	43db      	mvns	r3, r3
 8008b56:	401a      	ands	r2, r3
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	689a      	ldr	r2, [r3, #8]
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	005b      	lsls	r3, r3, #1
 8008b64:	2103      	movs	r1, #3
 8008b66:	fa01 f303 	lsl.w	r3, r1, r3
 8008b6a:	43db      	mvns	r3, r3
 8008b6c:	401a      	ands	r2, r3
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	609a      	str	r2, [r3, #8]
    }

    position++;
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	3301      	adds	r3, #1
 8008b76:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8008b78:	683a      	ldr	r2, [r7, #0]
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f47f af1f 	bne.w	80089c4 <HAL_GPIO_DeInit+0x14>
  }
}
 8008b86:	bf00      	nop
 8008b88:	bf00      	nop
 8008b8a:	371c      	adds	r7, #28
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr
 8008b94:	58000080 	.word	0x58000080
 8008b98:	58000400 	.word	0x58000400
 8008b9c:	58020000 	.word	0x58020000
 8008ba0:	58020400 	.word	0x58020400
 8008ba4:	58020800 	.word	0x58020800
 8008ba8:	58020c00 	.word	0x58020c00
 8008bac:	58021000 	.word	0x58021000
 8008bb0:	58021400 	.word	0x58021400
 8008bb4:	58021800 	.word	0x58021800
 8008bb8:	58021c00 	.word	0x58021c00
 8008bbc:	58022000 	.word	0x58022000
 8008bc0:	58022400 	.word	0x58022400

08008bc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	460b      	mov	r3, r1
 8008bce:	807b      	strh	r3, [r7, #2]
 8008bd0:	4613      	mov	r3, r2
 8008bd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008bd4:	787b      	ldrb	r3, [r7, #1]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d003      	beq.n	8008be2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008bda:	887a      	ldrh	r2, [r7, #2]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008be0:	e003      	b.n	8008bea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008be2:	887b      	ldrh	r3, [r7, #2]
 8008be4:	041a      	lsls	r2, r3, #16
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	619a      	str	r2, [r3, #24]
}
 8008bea:	bf00      	nop
 8008bec:	370c      	adds	r7, #12
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr
	...

08008bf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d101      	bne.n	8008c0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
 8008c08:	e07f      	b.n	8008d0a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d106      	bne.n	8008c24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 f8a9 	bl	8008d76 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2224      	movs	r2, #36	; 0x24
 8008c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f022 0201 	bic.w	r2, r2, #1
 8008c3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	685a      	ldr	r2, [r3, #4]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008c48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	689a      	ldr	r2, [r3, #8]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008c58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d107      	bne.n	8008c72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	689a      	ldr	r2, [r3, #8]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c6e:	609a      	str	r2, [r3, #8]
 8008c70:	e006      	b.n	8008c80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	689a      	ldr	r2, [r3, #8]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008c7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	2b02      	cmp	r3, #2
 8008c86:	d104      	bne.n	8008c92 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	6859      	ldr	r1, [r3, #4]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	4b1d      	ldr	r3, [pc, #116]	; (8008d14 <HAL_I2C_Init+0x11c>)
 8008c9e:	430b      	orrs	r3, r1
 8008ca0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	68da      	ldr	r2, [r3, #12]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008cb0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	691a      	ldr	r2, [r3, #16]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	695b      	ldr	r3, [r3, #20]
 8008cba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	699b      	ldr	r3, [r3, #24]
 8008cc2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	430a      	orrs	r2, r1
 8008cca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	69d9      	ldr	r1, [r3, #28]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6a1a      	ldr	r2, [r3, #32]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	430a      	orrs	r2, r1
 8008cda:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f042 0201 	orr.w	r2, r2, #1
 8008cea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2220      	movs	r2, #32
 8008cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2200      	movs	r2, #0
 8008d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008d08:	2300      	movs	r3, #0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3708      	adds	r7, #8
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	bf00      	nop
 8008d14:	02008000 	.word	0x02008000

08008d18 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d101      	bne.n	8008d2a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8008d26:	2301      	movs	r3, #1
 8008d28:	e021      	b.n	8008d6e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2224      	movs	r2, #36	; 0x24
 8008d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f022 0201 	bic.w	r2, r2, #1
 8008d40:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 f821 	bl	8008d8a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2200      	movs	r2, #0
 8008d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2200      	movs	r2, #0
 8008d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3708      	adds	r7, #8
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}

08008d76 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8008d76:	b480      	push	{r7}
 8008d78:	b083      	sub	sp, #12
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8008d7e:	bf00      	nop
 8008d80:	370c      	adds	r7, #12
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr

08008d8a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8008d8a:	b480      	push	{r7}
 8008d8c:	b083      	sub	sp, #12
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8008d92:	bf00      	nop
 8008d94:	370c      	adds	r7, #12
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr
	...

08008da0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b088      	sub	sp, #32
 8008da4:	af02      	add	r7, sp, #8
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	4608      	mov	r0, r1
 8008daa:	4611      	mov	r1, r2
 8008dac:	461a      	mov	r2, r3
 8008dae:	4603      	mov	r3, r0
 8008db0:	817b      	strh	r3, [r7, #10]
 8008db2:	460b      	mov	r3, r1
 8008db4:	813b      	strh	r3, [r7, #8]
 8008db6:	4613      	mov	r3, r2
 8008db8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	2b20      	cmp	r3, #32
 8008dc4:	f040 80f9 	bne.w	8008fba <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008dc8:	6a3b      	ldr	r3, [r7, #32]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d002      	beq.n	8008dd4 <HAL_I2C_Mem_Write+0x34>
 8008dce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d105      	bne.n	8008de0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008dda:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e0ed      	b.n	8008fbc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d101      	bne.n	8008dee <HAL_I2C_Mem_Write+0x4e>
 8008dea:	2302      	movs	r3, #2
 8008dec:	e0e6      	b.n	8008fbc <HAL_I2C_Mem_Write+0x21c>
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2201      	movs	r2, #1
 8008df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008df6:	f7fb fa61 	bl	80042bc <HAL_GetTick>
 8008dfa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	9300      	str	r3, [sp, #0]
 8008e00:	2319      	movs	r3, #25
 8008e02:	2201      	movs	r2, #1
 8008e04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008e08:	68f8      	ldr	r0, [r7, #12]
 8008e0a:	f000 fadd 	bl	80093c8 <I2C_WaitOnFlagUntilTimeout>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d001      	beq.n	8008e18 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008e14:	2301      	movs	r3, #1
 8008e16:	e0d1      	b.n	8008fbc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2221      	movs	r2, #33	; 0x21
 8008e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2240      	movs	r2, #64	; 0x40
 8008e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	6a3a      	ldr	r2, [r7, #32]
 8008e32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008e38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008e40:	88f8      	ldrh	r0, [r7, #6]
 8008e42:	893a      	ldrh	r2, [r7, #8]
 8008e44:	8979      	ldrh	r1, [r7, #10]
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	9301      	str	r3, [sp, #4]
 8008e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4c:	9300      	str	r3, [sp, #0]
 8008e4e:	4603      	mov	r3, r0
 8008e50:	68f8      	ldr	r0, [r7, #12]
 8008e52:	f000 f9ed 	bl	8009230 <I2C_RequestMemoryWrite>
 8008e56:	4603      	mov	r3, r0
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d005      	beq.n	8008e68 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008e64:	2301      	movs	r3, #1
 8008e66:	e0a9      	b.n	8008fbc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	2bff      	cmp	r3, #255	; 0xff
 8008e70:	d90e      	bls.n	8008e90 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	22ff      	movs	r2, #255	; 0xff
 8008e76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e7c:	b2da      	uxtb	r2, r3
 8008e7e:	8979      	ldrh	r1, [r7, #10]
 8008e80:	2300      	movs	r3, #0
 8008e82:	9300      	str	r3, [sp, #0]
 8008e84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e88:	68f8      	ldr	r0, [r7, #12]
 8008e8a:	f000 fc57 	bl	800973c <I2C_TransferConfig>
 8008e8e:	e00f      	b.n	8008eb0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e94:	b29a      	uxth	r2, r3
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e9e:	b2da      	uxtb	r2, r3
 8008ea0:	8979      	ldrh	r1, [r7, #10]
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	9300      	str	r3, [sp, #0]
 8008ea6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008eaa:	68f8      	ldr	r0, [r7, #12]
 8008eac:	f000 fc46 	bl	800973c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008eb0:	697a      	ldr	r2, [r7, #20]
 8008eb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008eb4:	68f8      	ldr	r0, [r7, #12]
 8008eb6:	f000 fad6 	bl	8009466 <I2C_WaitOnTXISFlagUntilTimeout>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d001      	beq.n	8008ec4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	e07b      	b.n	8008fbc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec8:	781a      	ldrb	r2, [r3, #0]
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed4:	1c5a      	adds	r2, r3, #1
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	3b01      	subs	r3, #1
 8008ee2:	b29a      	uxth	r2, r3
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eec:	3b01      	subs	r3, #1
 8008eee:	b29a      	uxth	r2, r3
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d034      	beq.n	8008f68 <HAL_I2C_Mem_Write+0x1c8>
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d130      	bne.n	8008f68 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	9300      	str	r3, [sp, #0]
 8008f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	2180      	movs	r1, #128	; 0x80
 8008f10:	68f8      	ldr	r0, [r7, #12]
 8008f12:	f000 fa59 	bl	80093c8 <I2C_WaitOnFlagUntilTimeout>
 8008f16:	4603      	mov	r3, r0
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d001      	beq.n	8008f20 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	e04d      	b.n	8008fbc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	2bff      	cmp	r3, #255	; 0xff
 8008f28:	d90e      	bls.n	8008f48 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	22ff      	movs	r2, #255	; 0xff
 8008f2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f34:	b2da      	uxtb	r2, r3
 8008f36:	8979      	ldrh	r1, [r7, #10]
 8008f38:	2300      	movs	r3, #0
 8008f3a:	9300      	str	r3, [sp, #0]
 8008f3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008f40:	68f8      	ldr	r0, [r7, #12]
 8008f42:	f000 fbfb 	bl	800973c <I2C_TransferConfig>
 8008f46:	e00f      	b.n	8008f68 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f4c:	b29a      	uxth	r2, r3
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f56:	b2da      	uxtb	r2, r3
 8008f58:	8979      	ldrh	r1, [r7, #10]
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	9300      	str	r3, [sp, #0]
 8008f5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	f000 fbea 	bl	800973c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d19e      	bne.n	8008eb0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f72:	697a      	ldr	r2, [r7, #20]
 8008f74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f76:	68f8      	ldr	r0, [r7, #12]
 8008f78:	f000 fabc 	bl	80094f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d001      	beq.n	8008f86 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008f82:	2301      	movs	r3, #1
 8008f84:	e01a      	b.n	8008fbc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	2220      	movs	r2, #32
 8008f8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	6859      	ldr	r1, [r3, #4]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	4b0a      	ldr	r3, [pc, #40]	; (8008fc4 <HAL_I2C_Mem_Write+0x224>)
 8008f9a:	400b      	ands	r3, r1
 8008f9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2220      	movs	r2, #32
 8008fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	e000      	b.n	8008fbc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008fba:	2302      	movs	r3, #2
  }
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3718      	adds	r7, #24
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}
 8008fc4:	fe00e800 	.word	0xfe00e800

08008fc8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b088      	sub	sp, #32
 8008fcc:	af02      	add	r7, sp, #8
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	4608      	mov	r0, r1
 8008fd2:	4611      	mov	r1, r2
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	817b      	strh	r3, [r7, #10]
 8008fda:	460b      	mov	r3, r1
 8008fdc:	813b      	strh	r3, [r7, #8]
 8008fde:	4613      	mov	r3, r2
 8008fe0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	2b20      	cmp	r3, #32
 8008fec:	f040 80fd 	bne.w	80091ea <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ff0:	6a3b      	ldr	r3, [r7, #32]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d002      	beq.n	8008ffc <HAL_I2C_Mem_Read+0x34>
 8008ff6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d105      	bne.n	8009008 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009002:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	e0f1      	b.n	80091ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800900e:	2b01      	cmp	r3, #1
 8009010:	d101      	bne.n	8009016 <HAL_I2C_Mem_Read+0x4e>
 8009012:	2302      	movs	r3, #2
 8009014:	e0ea      	b.n	80091ec <HAL_I2C_Mem_Read+0x224>
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2201      	movs	r2, #1
 800901a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800901e:	f7fb f94d 	bl	80042bc <HAL_GetTick>
 8009022:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	9300      	str	r3, [sp, #0]
 8009028:	2319      	movs	r3, #25
 800902a:	2201      	movs	r2, #1
 800902c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009030:	68f8      	ldr	r0, [r7, #12]
 8009032:	f000 f9c9 	bl	80093c8 <I2C_WaitOnFlagUntilTimeout>
 8009036:	4603      	mov	r3, r0
 8009038:	2b00      	cmp	r3, #0
 800903a:	d001      	beq.n	8009040 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800903c:	2301      	movs	r3, #1
 800903e:	e0d5      	b.n	80091ec <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2222      	movs	r2, #34	; 0x22
 8009044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2240      	movs	r2, #64	; 0x40
 800904c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2200      	movs	r2, #0
 8009054:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	6a3a      	ldr	r2, [r7, #32]
 800905a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009060:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2200      	movs	r2, #0
 8009066:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009068:	88f8      	ldrh	r0, [r7, #6]
 800906a:	893a      	ldrh	r2, [r7, #8]
 800906c:	8979      	ldrh	r1, [r7, #10]
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	9301      	str	r3, [sp, #4]
 8009072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009074:	9300      	str	r3, [sp, #0]
 8009076:	4603      	mov	r3, r0
 8009078:	68f8      	ldr	r0, [r7, #12]
 800907a:	f000 f92d 	bl	80092d8 <I2C_RequestMemoryRead>
 800907e:	4603      	mov	r3, r0
 8009080:	2b00      	cmp	r3, #0
 8009082:	d005      	beq.n	8009090 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2200      	movs	r2, #0
 8009088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800908c:	2301      	movs	r3, #1
 800908e:	e0ad      	b.n	80091ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009094:	b29b      	uxth	r3, r3
 8009096:	2bff      	cmp	r3, #255	; 0xff
 8009098:	d90e      	bls.n	80090b8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	22ff      	movs	r2, #255	; 0xff
 800909e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090a4:	b2da      	uxtb	r2, r3
 80090a6:	8979      	ldrh	r1, [r7, #10]
 80090a8:	4b52      	ldr	r3, [pc, #328]	; (80091f4 <HAL_I2C_Mem_Read+0x22c>)
 80090aa:	9300      	str	r3, [sp, #0]
 80090ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80090b0:	68f8      	ldr	r0, [r7, #12]
 80090b2:	f000 fb43 	bl	800973c <I2C_TransferConfig>
 80090b6:	e00f      	b.n	80090d8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090bc:	b29a      	uxth	r2, r3
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090c6:	b2da      	uxtb	r2, r3
 80090c8:	8979      	ldrh	r1, [r7, #10]
 80090ca:	4b4a      	ldr	r3, [pc, #296]	; (80091f4 <HAL_I2C_Mem_Read+0x22c>)
 80090cc:	9300      	str	r3, [sp, #0]
 80090ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80090d2:	68f8      	ldr	r0, [r7, #12]
 80090d4:	f000 fb32 	bl	800973c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	9300      	str	r3, [sp, #0]
 80090dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090de:	2200      	movs	r2, #0
 80090e0:	2104      	movs	r1, #4
 80090e2:	68f8      	ldr	r0, [r7, #12]
 80090e4:	f000 f970 	bl	80093c8 <I2C_WaitOnFlagUntilTimeout>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d001      	beq.n	80090f2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	e07c      	b.n	80091ec <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fc:	b2d2      	uxtb	r2, r2
 80090fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009104:	1c5a      	adds	r2, r3, #1
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800910e:	3b01      	subs	r3, #1
 8009110:	b29a      	uxth	r2, r3
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800911a:	b29b      	uxth	r3, r3
 800911c:	3b01      	subs	r3, #1
 800911e:	b29a      	uxth	r2, r3
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009128:	b29b      	uxth	r3, r3
 800912a:	2b00      	cmp	r3, #0
 800912c:	d034      	beq.n	8009198 <HAL_I2C_Mem_Read+0x1d0>
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009132:	2b00      	cmp	r3, #0
 8009134:	d130      	bne.n	8009198 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	9300      	str	r3, [sp, #0]
 800913a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800913c:	2200      	movs	r2, #0
 800913e:	2180      	movs	r1, #128	; 0x80
 8009140:	68f8      	ldr	r0, [r7, #12]
 8009142:	f000 f941 	bl	80093c8 <I2C_WaitOnFlagUntilTimeout>
 8009146:	4603      	mov	r3, r0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d001      	beq.n	8009150 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800914c:	2301      	movs	r3, #1
 800914e:	e04d      	b.n	80091ec <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009154:	b29b      	uxth	r3, r3
 8009156:	2bff      	cmp	r3, #255	; 0xff
 8009158:	d90e      	bls.n	8009178 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	22ff      	movs	r2, #255	; 0xff
 800915e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009164:	b2da      	uxtb	r2, r3
 8009166:	8979      	ldrh	r1, [r7, #10]
 8009168:	2300      	movs	r3, #0
 800916a:	9300      	str	r3, [sp, #0]
 800916c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009170:	68f8      	ldr	r0, [r7, #12]
 8009172:	f000 fae3 	bl	800973c <I2C_TransferConfig>
 8009176:	e00f      	b.n	8009198 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800917c:	b29a      	uxth	r2, r3
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009186:	b2da      	uxtb	r2, r3
 8009188:	8979      	ldrh	r1, [r7, #10]
 800918a:	2300      	movs	r3, #0
 800918c:	9300      	str	r3, [sp, #0]
 800918e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009192:	68f8      	ldr	r0, [r7, #12]
 8009194:	f000 fad2 	bl	800973c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800919c:	b29b      	uxth	r3, r3
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d19a      	bne.n	80090d8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091a2:	697a      	ldr	r2, [r7, #20]
 80091a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091a6:	68f8      	ldr	r0, [r7, #12]
 80091a8:	f000 f9a4 	bl	80094f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d001      	beq.n	80091b6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80091b2:	2301      	movs	r3, #1
 80091b4:	e01a      	b.n	80091ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	2220      	movs	r2, #32
 80091bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	6859      	ldr	r1, [r3, #4]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	4b0b      	ldr	r3, [pc, #44]	; (80091f8 <HAL_I2C_Mem_Read+0x230>)
 80091ca:	400b      	ands	r3, r1
 80091cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2220      	movs	r2, #32
 80091d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2200      	movs	r2, #0
 80091da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2200      	movs	r2, #0
 80091e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80091e6:	2300      	movs	r3, #0
 80091e8:	e000      	b.n	80091ec <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80091ea:	2302      	movs	r3, #2
  }
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3718      	adds	r7, #24
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	80002400 	.word	0x80002400
 80091f8:	fe00e800 	.word	0xfe00e800

080091fc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800920a:	b2db      	uxtb	r3, r3
}
 800920c:	4618      	mov	r0, r3
 800920e:	370c      	adds	r7, #12
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8009224:	4618      	mov	r0, r3
 8009226:	370c      	adds	r7, #12
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b086      	sub	sp, #24
 8009234:	af02      	add	r7, sp, #8
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	4608      	mov	r0, r1
 800923a:	4611      	mov	r1, r2
 800923c:	461a      	mov	r2, r3
 800923e:	4603      	mov	r3, r0
 8009240:	817b      	strh	r3, [r7, #10]
 8009242:	460b      	mov	r3, r1
 8009244:	813b      	strh	r3, [r7, #8]
 8009246:	4613      	mov	r3, r2
 8009248:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800924a:	88fb      	ldrh	r3, [r7, #6]
 800924c:	b2da      	uxtb	r2, r3
 800924e:	8979      	ldrh	r1, [r7, #10]
 8009250:	4b20      	ldr	r3, [pc, #128]	; (80092d4 <I2C_RequestMemoryWrite+0xa4>)
 8009252:	9300      	str	r3, [sp, #0]
 8009254:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009258:	68f8      	ldr	r0, [r7, #12]
 800925a:	f000 fa6f 	bl	800973c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800925e:	69fa      	ldr	r2, [r7, #28]
 8009260:	69b9      	ldr	r1, [r7, #24]
 8009262:	68f8      	ldr	r0, [r7, #12]
 8009264:	f000 f8ff 	bl	8009466 <I2C_WaitOnTXISFlagUntilTimeout>
 8009268:	4603      	mov	r3, r0
 800926a:	2b00      	cmp	r3, #0
 800926c:	d001      	beq.n	8009272 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800926e:	2301      	movs	r3, #1
 8009270:	e02c      	b.n	80092cc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009272:	88fb      	ldrh	r3, [r7, #6]
 8009274:	2b01      	cmp	r3, #1
 8009276:	d105      	bne.n	8009284 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009278:	893b      	ldrh	r3, [r7, #8]
 800927a:	b2da      	uxtb	r2, r3
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	629a      	str	r2, [r3, #40]	; 0x28
 8009282:	e015      	b.n	80092b0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009284:	893b      	ldrh	r3, [r7, #8]
 8009286:	0a1b      	lsrs	r3, r3, #8
 8009288:	b29b      	uxth	r3, r3
 800928a:	b2da      	uxtb	r2, r3
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009292:	69fa      	ldr	r2, [r7, #28]
 8009294:	69b9      	ldr	r1, [r7, #24]
 8009296:	68f8      	ldr	r0, [r7, #12]
 8009298:	f000 f8e5 	bl	8009466 <I2C_WaitOnTXISFlagUntilTimeout>
 800929c:	4603      	mov	r3, r0
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d001      	beq.n	80092a6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	e012      	b.n	80092cc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80092a6:	893b      	ldrh	r3, [r7, #8]
 80092a8:	b2da      	uxtb	r2, r3
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80092b0:	69fb      	ldr	r3, [r7, #28]
 80092b2:	9300      	str	r3, [sp, #0]
 80092b4:	69bb      	ldr	r3, [r7, #24]
 80092b6:	2200      	movs	r2, #0
 80092b8:	2180      	movs	r1, #128	; 0x80
 80092ba:	68f8      	ldr	r0, [r7, #12]
 80092bc:	f000 f884 	bl	80093c8 <I2C_WaitOnFlagUntilTimeout>
 80092c0:	4603      	mov	r3, r0
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d001      	beq.n	80092ca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80092c6:	2301      	movs	r3, #1
 80092c8:	e000      	b.n	80092cc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80092ca:	2300      	movs	r3, #0
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3710      	adds	r7, #16
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	80002000 	.word	0x80002000

080092d8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b086      	sub	sp, #24
 80092dc:	af02      	add	r7, sp, #8
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	4608      	mov	r0, r1
 80092e2:	4611      	mov	r1, r2
 80092e4:	461a      	mov	r2, r3
 80092e6:	4603      	mov	r3, r0
 80092e8:	817b      	strh	r3, [r7, #10]
 80092ea:	460b      	mov	r3, r1
 80092ec:	813b      	strh	r3, [r7, #8]
 80092ee:	4613      	mov	r3, r2
 80092f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80092f2:	88fb      	ldrh	r3, [r7, #6]
 80092f4:	b2da      	uxtb	r2, r3
 80092f6:	8979      	ldrh	r1, [r7, #10]
 80092f8:	4b20      	ldr	r3, [pc, #128]	; (800937c <I2C_RequestMemoryRead+0xa4>)
 80092fa:	9300      	str	r3, [sp, #0]
 80092fc:	2300      	movs	r3, #0
 80092fe:	68f8      	ldr	r0, [r7, #12]
 8009300:	f000 fa1c 	bl	800973c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009304:	69fa      	ldr	r2, [r7, #28]
 8009306:	69b9      	ldr	r1, [r7, #24]
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	f000 f8ac 	bl	8009466 <I2C_WaitOnTXISFlagUntilTimeout>
 800930e:	4603      	mov	r3, r0
 8009310:	2b00      	cmp	r3, #0
 8009312:	d001      	beq.n	8009318 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009314:	2301      	movs	r3, #1
 8009316:	e02c      	b.n	8009372 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009318:	88fb      	ldrh	r3, [r7, #6]
 800931a:	2b01      	cmp	r3, #1
 800931c:	d105      	bne.n	800932a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800931e:	893b      	ldrh	r3, [r7, #8]
 8009320:	b2da      	uxtb	r2, r3
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	629a      	str	r2, [r3, #40]	; 0x28
 8009328:	e015      	b.n	8009356 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800932a:	893b      	ldrh	r3, [r7, #8]
 800932c:	0a1b      	lsrs	r3, r3, #8
 800932e:	b29b      	uxth	r3, r3
 8009330:	b2da      	uxtb	r2, r3
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009338:	69fa      	ldr	r2, [r7, #28]
 800933a:	69b9      	ldr	r1, [r7, #24]
 800933c:	68f8      	ldr	r0, [r7, #12]
 800933e:	f000 f892 	bl	8009466 <I2C_WaitOnTXISFlagUntilTimeout>
 8009342:	4603      	mov	r3, r0
 8009344:	2b00      	cmp	r3, #0
 8009346:	d001      	beq.n	800934c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009348:	2301      	movs	r3, #1
 800934a:	e012      	b.n	8009372 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800934c:	893b      	ldrh	r3, [r7, #8]
 800934e:	b2da      	uxtb	r2, r3
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009356:	69fb      	ldr	r3, [r7, #28]
 8009358:	9300      	str	r3, [sp, #0]
 800935a:	69bb      	ldr	r3, [r7, #24]
 800935c:	2200      	movs	r2, #0
 800935e:	2140      	movs	r1, #64	; 0x40
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	f000 f831 	bl	80093c8 <I2C_WaitOnFlagUntilTimeout>
 8009366:	4603      	mov	r3, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d001      	beq.n	8009370 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800936c:	2301      	movs	r3, #1
 800936e:	e000      	b.n	8009372 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	3710      	adds	r7, #16
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	bf00      	nop
 800937c:	80002000 	.word	0x80002000

08009380 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	699b      	ldr	r3, [r3, #24]
 800938e:	f003 0302 	and.w	r3, r3, #2
 8009392:	2b02      	cmp	r3, #2
 8009394:	d103      	bne.n	800939e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	2200      	movs	r2, #0
 800939c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	699b      	ldr	r3, [r3, #24]
 80093a4:	f003 0301 	and.w	r3, r3, #1
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d007      	beq.n	80093bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	699a      	ldr	r2, [r3, #24]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f042 0201 	orr.w	r2, r2, #1
 80093ba:	619a      	str	r2, [r3, #24]
  }
}
 80093bc:	bf00      	nop
 80093be:	370c      	adds	r7, #12
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr

080093c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	60b9      	str	r1, [r7, #8]
 80093d2:	603b      	str	r3, [r7, #0]
 80093d4:	4613      	mov	r3, r2
 80093d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80093d8:	e031      	b.n	800943e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093e0:	d02d      	beq.n	800943e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093e2:	f7fa ff6b 	bl	80042bc <HAL_GetTick>
 80093e6:	4602      	mov	r2, r0
 80093e8:	69bb      	ldr	r3, [r7, #24]
 80093ea:	1ad3      	subs	r3, r2, r3
 80093ec:	683a      	ldr	r2, [r7, #0]
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d302      	bcc.n	80093f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d122      	bne.n	800943e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	699a      	ldr	r2, [r3, #24]
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	4013      	ands	r3, r2
 8009402:	68ba      	ldr	r2, [r7, #8]
 8009404:	429a      	cmp	r2, r3
 8009406:	bf0c      	ite	eq
 8009408:	2301      	moveq	r3, #1
 800940a:	2300      	movne	r3, #0
 800940c:	b2db      	uxtb	r3, r3
 800940e:	461a      	mov	r2, r3
 8009410:	79fb      	ldrb	r3, [r7, #7]
 8009412:	429a      	cmp	r2, r3
 8009414:	d113      	bne.n	800943e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800941a:	f043 0220 	orr.w	r2, r3, #32
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2220      	movs	r2, #32
 8009426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2200      	movs	r2, #0
 800942e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2200      	movs	r2, #0
 8009436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800943a:	2301      	movs	r3, #1
 800943c:	e00f      	b.n	800945e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	699a      	ldr	r2, [r3, #24]
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	4013      	ands	r3, r2
 8009448:	68ba      	ldr	r2, [r7, #8]
 800944a:	429a      	cmp	r2, r3
 800944c:	bf0c      	ite	eq
 800944e:	2301      	moveq	r3, #1
 8009450:	2300      	movne	r3, #0
 8009452:	b2db      	uxtb	r3, r3
 8009454:	461a      	mov	r2, r3
 8009456:	79fb      	ldrb	r3, [r7, #7]
 8009458:	429a      	cmp	r2, r3
 800945a:	d0be      	beq.n	80093da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800945c:	2300      	movs	r3, #0
}
 800945e:	4618      	mov	r0, r3
 8009460:	3710      	adds	r7, #16
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}

08009466 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009466:	b580      	push	{r7, lr}
 8009468:	b084      	sub	sp, #16
 800946a:	af00      	add	r7, sp, #0
 800946c:	60f8      	str	r0, [r7, #12]
 800946e:	60b9      	str	r1, [r7, #8]
 8009470:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009472:	e033      	b.n	80094dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	68b9      	ldr	r1, [r7, #8]
 8009478:	68f8      	ldr	r0, [r7, #12]
 800947a:	f000 f87f 	bl	800957c <I2C_IsErrorOccurred>
 800947e:	4603      	mov	r3, r0
 8009480:	2b00      	cmp	r3, #0
 8009482:	d001      	beq.n	8009488 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009484:	2301      	movs	r3, #1
 8009486:	e031      	b.n	80094ec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800948e:	d025      	beq.n	80094dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009490:	f7fa ff14 	bl	80042bc <HAL_GetTick>
 8009494:	4602      	mov	r2, r0
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	1ad3      	subs	r3, r2, r3
 800949a:	68ba      	ldr	r2, [r7, #8]
 800949c:	429a      	cmp	r2, r3
 800949e:	d302      	bcc.n	80094a6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d11a      	bne.n	80094dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	699b      	ldr	r3, [r3, #24]
 80094ac:	f003 0302 	and.w	r3, r3, #2
 80094b0:	2b02      	cmp	r3, #2
 80094b2:	d013      	beq.n	80094dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094b8:	f043 0220 	orr.w	r2, r3, #32
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2220      	movs	r2, #32
 80094c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2200      	movs	r2, #0
 80094cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2200      	movs	r2, #0
 80094d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80094d8:	2301      	movs	r3, #1
 80094da:	e007      	b.n	80094ec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	699b      	ldr	r3, [r3, #24]
 80094e2:	f003 0302 	and.w	r3, r3, #2
 80094e6:	2b02      	cmp	r3, #2
 80094e8:	d1c4      	bne.n	8009474 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80094ea:	2300      	movs	r3, #0
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3710      	adds	r7, #16
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	60b9      	str	r1, [r7, #8]
 80094fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009500:	e02f      	b.n	8009562 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	68b9      	ldr	r1, [r7, #8]
 8009506:	68f8      	ldr	r0, [r7, #12]
 8009508:	f000 f838 	bl	800957c <I2C_IsErrorOccurred>
 800950c:	4603      	mov	r3, r0
 800950e:	2b00      	cmp	r3, #0
 8009510:	d001      	beq.n	8009516 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009512:	2301      	movs	r3, #1
 8009514:	e02d      	b.n	8009572 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009516:	f7fa fed1 	bl	80042bc <HAL_GetTick>
 800951a:	4602      	mov	r2, r0
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	1ad3      	subs	r3, r2, r3
 8009520:	68ba      	ldr	r2, [r7, #8]
 8009522:	429a      	cmp	r2, r3
 8009524:	d302      	bcc.n	800952c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d11a      	bne.n	8009562 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	699b      	ldr	r3, [r3, #24]
 8009532:	f003 0320 	and.w	r3, r3, #32
 8009536:	2b20      	cmp	r3, #32
 8009538:	d013      	beq.n	8009562 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800953e:	f043 0220 	orr.w	r2, r3, #32
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2220      	movs	r2, #32
 800954a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2200      	movs	r2, #0
 8009552:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2200      	movs	r2, #0
 800955a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	e007      	b.n	8009572 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	699b      	ldr	r3, [r3, #24]
 8009568:	f003 0320 	and.w	r3, r3, #32
 800956c:	2b20      	cmp	r3, #32
 800956e:	d1c8      	bne.n	8009502 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009570:	2300      	movs	r3, #0
}
 8009572:	4618      	mov	r0, r3
 8009574:	3710      	adds	r7, #16
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}
	...

0800957c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b08a      	sub	sp, #40	; 0x28
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009588:	2300      	movs	r3, #0
 800958a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	699b      	ldr	r3, [r3, #24]
 8009594:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009596:	2300      	movs	r3, #0
 8009598:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800959e:	69bb      	ldr	r3, [r7, #24]
 80095a0:	f003 0310 	and.w	r3, r3, #16
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d068      	beq.n	800967a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	2210      	movs	r2, #16
 80095ae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80095b0:	e049      	b.n	8009646 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095b8:	d045      	beq.n	8009646 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80095ba:	f7fa fe7f 	bl	80042bc <HAL_GetTick>
 80095be:	4602      	mov	r2, r0
 80095c0:	69fb      	ldr	r3, [r7, #28]
 80095c2:	1ad3      	subs	r3, r2, r3
 80095c4:	68ba      	ldr	r2, [r7, #8]
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d302      	bcc.n	80095d0 <I2C_IsErrorOccurred+0x54>
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d13a      	bne.n	8009646 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095da:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80095e2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	699b      	ldr	r3, [r3, #24]
 80095ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095f2:	d121      	bne.n	8009638 <I2C_IsErrorOccurred+0xbc>
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095fa:	d01d      	beq.n	8009638 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80095fc:	7cfb      	ldrb	r3, [r7, #19]
 80095fe:	2b20      	cmp	r3, #32
 8009600:	d01a      	beq.n	8009638 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	685a      	ldr	r2, [r3, #4]
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009610:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009612:	f7fa fe53 	bl	80042bc <HAL_GetTick>
 8009616:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009618:	e00e      	b.n	8009638 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800961a:	f7fa fe4f 	bl	80042bc <HAL_GetTick>
 800961e:	4602      	mov	r2, r0
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	1ad3      	subs	r3, r2, r3
 8009624:	2b19      	cmp	r3, #25
 8009626:	d907      	bls.n	8009638 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009628:	6a3b      	ldr	r3, [r7, #32]
 800962a:	f043 0320 	orr.w	r3, r3, #32
 800962e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009630:	2301      	movs	r3, #1
 8009632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009636:	e006      	b.n	8009646 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	699b      	ldr	r3, [r3, #24]
 800963e:	f003 0320 	and.w	r3, r3, #32
 8009642:	2b20      	cmp	r3, #32
 8009644:	d1e9      	bne.n	800961a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	699b      	ldr	r3, [r3, #24]
 800964c:	f003 0320 	and.w	r3, r3, #32
 8009650:	2b20      	cmp	r3, #32
 8009652:	d003      	beq.n	800965c <I2C_IsErrorOccurred+0xe0>
 8009654:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009658:	2b00      	cmp	r3, #0
 800965a:	d0aa      	beq.n	80095b2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800965c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009660:	2b00      	cmp	r3, #0
 8009662:	d103      	bne.n	800966c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	2220      	movs	r2, #32
 800966a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800966c:	6a3b      	ldr	r3, [r7, #32]
 800966e:	f043 0304 	orr.w	r3, r3, #4
 8009672:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009674:	2301      	movs	r3, #1
 8009676:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	699b      	ldr	r3, [r3, #24]
 8009680:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009682:	69bb      	ldr	r3, [r7, #24]
 8009684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009688:	2b00      	cmp	r3, #0
 800968a:	d00b      	beq.n	80096a4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800968c:	6a3b      	ldr	r3, [r7, #32]
 800968e:	f043 0301 	orr.w	r3, r3, #1
 8009692:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f44f 7280 	mov.w	r2, #256	; 0x100
 800969c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800969e:	2301      	movs	r3, #1
 80096a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80096a4:	69bb      	ldr	r3, [r7, #24]
 80096a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d00b      	beq.n	80096c6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80096ae:	6a3b      	ldr	r3, [r7, #32]
 80096b0:	f043 0308 	orr.w	r3, r3, #8
 80096b4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80096be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80096c0:	2301      	movs	r3, #1
 80096c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80096c6:	69bb      	ldr	r3, [r7, #24]
 80096c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d00b      	beq.n	80096e8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80096d0:	6a3b      	ldr	r3, [r7, #32]
 80096d2:	f043 0302 	orr.w	r3, r3, #2
 80096d6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80096e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d01c      	beq.n	800972a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80096f0:	68f8      	ldr	r0, [r7, #12]
 80096f2:	f7ff fe45 	bl	8009380 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	6859      	ldr	r1, [r3, #4]
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681a      	ldr	r2, [r3, #0]
 8009700:	4b0d      	ldr	r3, [pc, #52]	; (8009738 <I2C_IsErrorOccurred+0x1bc>)
 8009702:	400b      	ands	r3, r1
 8009704:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800970a:	6a3b      	ldr	r3, [r7, #32]
 800970c:	431a      	orrs	r2, r3
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2220      	movs	r2, #32
 8009716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2200      	movs	r2, #0
 800971e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2200      	movs	r2, #0
 8009726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800972a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800972e:	4618      	mov	r0, r3
 8009730:	3728      	adds	r7, #40	; 0x28
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	fe00e800 	.word	0xfe00e800

0800973c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800973c:	b480      	push	{r7}
 800973e:	b087      	sub	sp, #28
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	607b      	str	r3, [r7, #4]
 8009746:	460b      	mov	r3, r1
 8009748:	817b      	strh	r3, [r7, #10]
 800974a:	4613      	mov	r3, r2
 800974c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800974e:	897b      	ldrh	r3, [r7, #10]
 8009750:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009754:	7a7b      	ldrb	r3, [r7, #9]
 8009756:	041b      	lsls	r3, r3, #16
 8009758:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800975c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009762:	6a3b      	ldr	r3, [r7, #32]
 8009764:	4313      	orrs	r3, r2
 8009766:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800976a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	685a      	ldr	r2, [r3, #4]
 8009772:	6a3b      	ldr	r3, [r7, #32]
 8009774:	0d5b      	lsrs	r3, r3, #21
 8009776:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800977a:	4b08      	ldr	r3, [pc, #32]	; (800979c <I2C_TransferConfig+0x60>)
 800977c:	430b      	orrs	r3, r1
 800977e:	43db      	mvns	r3, r3
 8009780:	ea02 0103 	and.w	r1, r2, r3
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	697a      	ldr	r2, [r7, #20]
 800978a:	430a      	orrs	r2, r1
 800978c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800978e:	bf00      	nop
 8009790:	371c      	adds	r7, #28
 8009792:	46bd      	mov	sp, r7
 8009794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009798:	4770      	bx	lr
 800979a:	bf00      	nop
 800979c:	03ff63ff 	.word	0x03ff63ff

080097a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b083      	sub	sp, #12
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	2b20      	cmp	r3, #32
 80097b4:	d138      	bne.n	8009828 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d101      	bne.n	80097c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80097c0:	2302      	movs	r3, #2
 80097c2:	e032      	b.n	800982a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2201      	movs	r2, #1
 80097c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2224      	movs	r2, #36	; 0x24
 80097d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f022 0201 	bic.w	r2, r2, #1
 80097e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80097f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	6819      	ldr	r1, [r3, #0]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	683a      	ldr	r2, [r7, #0]
 8009800:	430a      	orrs	r2, r1
 8009802:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	681a      	ldr	r2, [r3, #0]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f042 0201 	orr.w	r2, r2, #1
 8009812:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2220      	movs	r2, #32
 8009818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2200      	movs	r2, #0
 8009820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009824:	2300      	movs	r3, #0
 8009826:	e000      	b.n	800982a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009828:	2302      	movs	r3, #2
  }
}
 800982a:	4618      	mov	r0, r3
 800982c:	370c      	adds	r7, #12
 800982e:	46bd      	mov	sp, r7
 8009830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009834:	4770      	bx	lr

08009836 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009836:	b480      	push	{r7}
 8009838:	b085      	sub	sp, #20
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
 800983e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009846:	b2db      	uxtb	r3, r3
 8009848:	2b20      	cmp	r3, #32
 800984a:	d139      	bne.n	80098c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009852:	2b01      	cmp	r3, #1
 8009854:	d101      	bne.n	800985a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009856:	2302      	movs	r3, #2
 8009858:	e033      	b.n	80098c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2201      	movs	r2, #1
 800985e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2224      	movs	r2, #36	; 0x24
 8009866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f022 0201 	bic.w	r2, r2, #1
 8009878:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009888:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	021b      	lsls	r3, r3, #8
 800988e:	68fa      	ldr	r2, [r7, #12]
 8009890:	4313      	orrs	r3, r2
 8009892:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	68fa      	ldr	r2, [r7, #12]
 800989a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f042 0201 	orr.w	r2, r2, #1
 80098aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2220      	movs	r2, #32
 80098b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2200      	movs	r2, #0
 80098b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80098bc:	2300      	movs	r3, #0
 80098be:	e000      	b.n	80098c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80098c0:	2302      	movs	r3, #2
  }
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3714      	adds	r7, #20
 80098c6:	46bd      	mov	sp, r7
 80098c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098cc:	4770      	bx	lr
	...

080098d0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b084      	sub	sp, #16
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d101      	bne.n	80098e2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80098de:	2301      	movs	r3, #1
 80098e0:	e0bf      	b.n	8009a62 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d106      	bne.n	80098fc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2200      	movs	r2, #0
 80098f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f7f7 fa56 	bl	8000da8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2202      	movs	r2, #2
 8009900:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	699a      	ldr	r2, [r3, #24]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8009912:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	6999      	ldr	r1, [r3, #24]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	685a      	ldr	r2, [r3, #4]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009928:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	691b      	ldr	r3, [r3, #16]
 800992e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	430a      	orrs	r2, r1
 8009936:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	6899      	ldr	r1, [r3, #8]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	4b4a      	ldr	r3, [pc, #296]	; (8009a6c <HAL_LTDC_Init+0x19c>)
 8009944:	400b      	ands	r3, r1
 8009946:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	695b      	ldr	r3, [r3, #20]
 800994c:	041b      	lsls	r3, r3, #16
 800994e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	6899      	ldr	r1, [r3, #8]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	699a      	ldr	r2, [r3, #24]
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	431a      	orrs	r2, r3
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	430a      	orrs	r2, r1
 8009964:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	68d9      	ldr	r1, [r3, #12]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	4b3e      	ldr	r3, [pc, #248]	; (8009a6c <HAL_LTDC_Init+0x19c>)
 8009972:	400b      	ands	r3, r1
 8009974:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	69db      	ldr	r3, [r3, #28]
 800997a:	041b      	lsls	r3, r3, #16
 800997c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	68d9      	ldr	r1, [r3, #12]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6a1a      	ldr	r2, [r3, #32]
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	431a      	orrs	r2, r3
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	430a      	orrs	r2, r1
 8009992:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	6919      	ldr	r1, [r3, #16]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681a      	ldr	r2, [r3, #0]
 800999e:	4b33      	ldr	r3, [pc, #204]	; (8009a6c <HAL_LTDC_Init+0x19c>)
 80099a0:	400b      	ands	r3, r1
 80099a2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a8:	041b      	lsls	r3, r3, #16
 80099aa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	6919      	ldr	r1, [r3, #16]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	431a      	orrs	r2, r3
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	430a      	orrs	r2, r1
 80099c0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	6959      	ldr	r1, [r3, #20]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	4b27      	ldr	r3, [pc, #156]	; (8009a6c <HAL_LTDC_Init+0x19c>)
 80099ce:	400b      	ands	r3, r1
 80099d0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d6:	041b      	lsls	r3, r3, #16
 80099d8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	6959      	ldr	r1, [r3, #20]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	431a      	orrs	r2, r3
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	430a      	orrs	r2, r1
 80099ee:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80099f6:	021b      	lsls	r3, r3, #8
 80099f8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009a00:	041b      	lsls	r3, r3, #16
 8009a02:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8009a12:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009a1a:	68ba      	ldr	r2, [r7, #8]
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8009a26:	431a      	orrs	r2, r3
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	430a      	orrs	r2, r1
 8009a2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f042 0206 	orr.w	r2, r2, #6
 8009a3e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	699a      	ldr	r2, [r3, #24]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f042 0201 	orr.w	r2, r2, #1
 8009a4e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8009a60:	2300      	movs	r3, #0
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3710      	adds	r7, #16
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	f000f800 	.word	0xf000f800

08009a70 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a7e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a86:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f003 0304 	and.w	r3, r3, #4
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d023      	beq.n	8009ada <HAL_LTDC_IRQHandler+0x6a>
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	f003 0304 	and.w	r3, r3, #4
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d01e      	beq.n	8009ada <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f022 0204 	bic.w	r2, r2, #4
 8009aaa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2204      	movs	r2, #4
 8009ab2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009aba:	f043 0201 	orr.w	r2, r3, #1
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2204      	movs	r2, #4
 8009ac8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 f86f 	bl	8009bb8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f003 0302 	and.w	r3, r3, #2
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d023      	beq.n	8009b2c <HAL_LTDC_IRQHandler+0xbc>
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	f003 0302 	and.w	r3, r3, #2
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d01e      	beq.n	8009b2c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f022 0202 	bic.w	r2, r2, #2
 8009afc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2202      	movs	r2, #2
 8009b04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009b0c:	f043 0202 	orr.w	r2, r3, #2
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2204      	movs	r2, #4
 8009b1a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2200      	movs	r2, #0
 8009b22:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 f846 	bl	8009bb8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f003 0301 	and.w	r3, r3, #1
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d01b      	beq.n	8009b6e <HAL_LTDC_IRQHandler+0xfe>
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	f003 0301 	and.w	r3, r3, #1
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d016      	beq.n	8009b6e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f022 0201 	bic.w	r2, r2, #1
 8009b4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	2201      	movs	r2, #1
 8009b56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2200      	movs	r2, #0
 8009b64:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f000 f82f 	bl	8009bcc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f003 0308 	and.w	r3, r3, #8
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d01b      	beq.n	8009bb0 <HAL_LTDC_IRQHandler+0x140>
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	f003 0308 	and.w	r3, r3, #8
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d016      	beq.n	8009bb0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f022 0208 	bic.w	r2, r2, #8
 8009b90:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	2208      	movs	r2, #8
 8009b98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 f818 	bl	8009be0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8009bb0:	bf00      	nop
 8009bb2:	3710      	adds	r7, #16
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b083      	sub	sp, #12
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8009bc0:	bf00      	nop
 8009bc2:	370c      	adds	r7, #12
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr

08009bcc <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8009bd4:	bf00      	nop
 8009bd6:	370c      	adds	r7, #12
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr

08009be0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b083      	sub	sp, #12
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8009be8:	bf00      	nop
 8009bea:	370c      	adds	r7, #12
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr

08009bf4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009bf4:	b5b0      	push	{r4, r5, r7, lr}
 8009bf6:	b084      	sub	sp, #16
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	60f8      	str	r0, [r7, #12]
 8009bfc:	60b9      	str	r1, [r7, #8]
 8009bfe:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d101      	bne.n	8009c0e <HAL_LTDC_ConfigLayer+0x1a>
 8009c0a:	2302      	movs	r3, #2
 8009c0c:	e02c      	b.n	8009c68 <HAL_LTDC_ConfigLayer+0x74>
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2201      	movs	r2, #1
 8009c12:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2202      	movs	r2, #2
 8009c1a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009c1e:	68fa      	ldr	r2, [r7, #12]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2134      	movs	r1, #52	; 0x34
 8009c24:	fb01 f303 	mul.w	r3, r1, r3
 8009c28:	4413      	add	r3, r2
 8009c2a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	4614      	mov	r4, r2
 8009c32:	461d      	mov	r5, r3
 8009c34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c40:	682b      	ldr	r3, [r5, #0]
 8009c42:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	68b9      	ldr	r1, [r7, #8]
 8009c48:	68f8      	ldr	r0, [r7, #12]
 8009c4a:	f000 f811 	bl	8009c70 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	2201      	movs	r2, #1
 8009c54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2201      	movs	r2, #1
 8009c5a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2200      	movs	r2, #0
 8009c62:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8009c66:	2300      	movs	r3, #0
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3710      	adds	r7, #16
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bdb0      	pop	{r4, r5, r7, pc}

08009c70 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b089      	sub	sp, #36	; 0x24
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	60b9      	str	r1, [r7, #8]
 8009c7a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	685a      	ldr	r2, [r3, #4]
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	68db      	ldr	r3, [r3, #12]
 8009c86:	0c1b      	lsrs	r3, r3, #16
 8009c88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c8c:	4413      	add	r3, r2
 8009c8e:	041b      	lsls	r3, r3, #16
 8009c90:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	461a      	mov	r2, r3
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	01db      	lsls	r3, r3, #7
 8009c9c:	4413      	add	r3, r2
 8009c9e:	3384      	adds	r3, #132	; 0x84
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	68fa      	ldr	r2, [r7, #12]
 8009ca4:	6812      	ldr	r2, [r2, #0]
 8009ca6:	4611      	mov	r1, r2
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	01d2      	lsls	r2, r2, #7
 8009cac:	440a      	add	r2, r1
 8009cae:	3284      	adds	r2, #132	; 0x84
 8009cb0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009cb4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	68db      	ldr	r3, [r3, #12]
 8009cc0:	0c1b      	lsrs	r3, r3, #16
 8009cc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009cc6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009cc8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4619      	mov	r1, r3
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	01db      	lsls	r3, r3, #7
 8009cd4:	440b      	add	r3, r1
 8009cd6:	3384      	adds	r3, #132	; 0x84
 8009cd8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009cda:	69fb      	ldr	r3, [r7, #28]
 8009cdc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009cde:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	68da      	ldr	r2, [r3, #12]
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	68db      	ldr	r3, [r3, #12]
 8009cea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009cee:	4413      	add	r3, r2
 8009cf0:	041b      	lsls	r3, r3, #16
 8009cf2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	01db      	lsls	r3, r3, #7
 8009cfe:	4413      	add	r3, r2
 8009d00:	3384      	adds	r3, #132	; 0x84
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	68fa      	ldr	r2, [r7, #12]
 8009d06:	6812      	ldr	r2, [r2, #0]
 8009d08:	4611      	mov	r1, r2
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	01d2      	lsls	r2, r2, #7
 8009d0e:	440a      	add	r2, r1
 8009d10:	3284      	adds	r2, #132	; 0x84
 8009d12:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009d16:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	689a      	ldr	r2, [r3, #8]
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	68db      	ldr	r3, [r3, #12]
 8009d22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009d26:	4413      	add	r3, r2
 8009d28:	1c5a      	adds	r2, r3, #1
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4619      	mov	r1, r3
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	01db      	lsls	r3, r3, #7
 8009d34:	440b      	add	r3, r1
 8009d36:	3384      	adds	r3, #132	; 0x84
 8009d38:	4619      	mov	r1, r3
 8009d3a:	69fb      	ldr	r3, [r7, #28]
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	461a      	mov	r2, r3
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	01db      	lsls	r3, r3, #7
 8009d4a:	4413      	add	r3, r2
 8009d4c:	3384      	adds	r3, #132	; 0x84
 8009d4e:	691b      	ldr	r3, [r3, #16]
 8009d50:	68fa      	ldr	r2, [r7, #12]
 8009d52:	6812      	ldr	r2, [r2, #0]
 8009d54:	4611      	mov	r1, r2
 8009d56:	687a      	ldr	r2, [r7, #4]
 8009d58:	01d2      	lsls	r2, r2, #7
 8009d5a:	440a      	add	r2, r1
 8009d5c:	3284      	adds	r2, #132	; 0x84
 8009d5e:	f023 0307 	bic.w	r3, r3, #7
 8009d62:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	461a      	mov	r2, r3
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	01db      	lsls	r3, r3, #7
 8009d6e:	4413      	add	r3, r2
 8009d70:	3384      	adds	r3, #132	; 0x84
 8009d72:	461a      	mov	r2, r3
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	691b      	ldr	r3, [r3, #16]
 8009d78:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009d80:	021b      	lsls	r3, r3, #8
 8009d82:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009d8a:	041b      	lsls	r3, r3, #16
 8009d8c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	699b      	ldr	r3, [r3, #24]
 8009d92:	061b      	lsls	r3, r3, #24
 8009d94:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	01db      	lsls	r3, r3, #7
 8009da0:	4413      	add	r3, r2
 8009da2:	3384      	adds	r3, #132	; 0x84
 8009da4:	699b      	ldr	r3, [r3, #24]
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	461a      	mov	r2, r3
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	01db      	lsls	r3, r3, #7
 8009db0:	4413      	add	r3, r2
 8009db2:	3384      	adds	r3, #132	; 0x84
 8009db4:	461a      	mov	r2, r3
 8009db6:	2300      	movs	r3, #0
 8009db8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009dc0:	461a      	mov	r2, r3
 8009dc2:	69fb      	ldr	r3, [r7, #28]
 8009dc4:	431a      	orrs	r2, r3
 8009dc6:	69bb      	ldr	r3, [r7, #24]
 8009dc8:	431a      	orrs	r2, r3
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	4619      	mov	r1, r3
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	01db      	lsls	r3, r3, #7
 8009dd4:	440b      	add	r3, r1
 8009dd6:	3384      	adds	r3, #132	; 0x84
 8009dd8:	4619      	mov	r1, r3
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	461a      	mov	r2, r3
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	01db      	lsls	r3, r3, #7
 8009dea:	4413      	add	r3, r2
 8009dec:	3384      	adds	r3, #132	; 0x84
 8009dee:	695b      	ldr	r3, [r3, #20]
 8009df0:	68fa      	ldr	r2, [r7, #12]
 8009df2:	6812      	ldr	r2, [r2, #0]
 8009df4:	4611      	mov	r1, r2
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	01d2      	lsls	r2, r2, #7
 8009dfa:	440a      	add	r2, r1
 8009dfc:	3284      	adds	r2, #132	; 0x84
 8009dfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009e02:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	461a      	mov	r2, r3
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	01db      	lsls	r3, r3, #7
 8009e0e:	4413      	add	r3, r2
 8009e10:	3384      	adds	r3, #132	; 0x84
 8009e12:	461a      	mov	r2, r3
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	695b      	ldr	r3, [r3, #20]
 8009e18:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	461a      	mov	r2, r3
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	01db      	lsls	r3, r3, #7
 8009e24:	4413      	add	r3, r2
 8009e26:	3384      	adds	r3, #132	; 0x84
 8009e28:	69da      	ldr	r2, [r3, #28]
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4619      	mov	r1, r3
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	01db      	lsls	r3, r3, #7
 8009e34:	440b      	add	r3, r1
 8009e36:	3384      	adds	r3, #132	; 0x84
 8009e38:	4619      	mov	r1, r3
 8009e3a:	4b58      	ldr	r3, [pc, #352]	; (8009f9c <LTDC_SetConfig+0x32c>)
 8009e3c:	4013      	ands	r3, r2
 8009e3e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	69da      	ldr	r2, [r3, #28]
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	6a1b      	ldr	r3, [r3, #32]
 8009e48:	68f9      	ldr	r1, [r7, #12]
 8009e4a:	6809      	ldr	r1, [r1, #0]
 8009e4c:	4608      	mov	r0, r1
 8009e4e:	6879      	ldr	r1, [r7, #4]
 8009e50:	01c9      	lsls	r1, r1, #7
 8009e52:	4401      	add	r1, r0
 8009e54:	3184      	adds	r1, #132	; 0x84
 8009e56:	4313      	orrs	r3, r2
 8009e58:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	461a      	mov	r2, r3
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	01db      	lsls	r3, r3, #7
 8009e64:	4413      	add	r3, r2
 8009e66:	3384      	adds	r3, #132	; 0x84
 8009e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	461a      	mov	r2, r3
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	01db      	lsls	r3, r3, #7
 8009e74:	4413      	add	r3, r2
 8009e76:	3384      	adds	r3, #132	; 0x84
 8009e78:	461a      	mov	r2, r3
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	461a      	mov	r2, r3
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	01db      	lsls	r3, r3, #7
 8009e88:	4413      	add	r3, r2
 8009e8a:	3384      	adds	r3, #132	; 0x84
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e92:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	691b      	ldr	r3, [r3, #16]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d102      	bne.n	8009ea2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8009e9c:	2304      	movs	r3, #4
 8009e9e:	61fb      	str	r3, [r7, #28]
 8009ea0:	e01b      	b.n	8009eda <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	691b      	ldr	r3, [r3, #16]
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d102      	bne.n	8009eb0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8009eaa:	2303      	movs	r3, #3
 8009eac:	61fb      	str	r3, [r7, #28]
 8009eae:	e014      	b.n	8009eda <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	691b      	ldr	r3, [r3, #16]
 8009eb4:	2b04      	cmp	r3, #4
 8009eb6:	d00b      	beq.n	8009ed0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009ebc:	2b02      	cmp	r3, #2
 8009ebe:	d007      	beq.n	8009ed0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009ec4:	2b03      	cmp	r3, #3
 8009ec6:	d003      	beq.n	8009ed0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009ecc:	2b07      	cmp	r3, #7
 8009ece:	d102      	bne.n	8009ed6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8009ed0:	2302      	movs	r3, #2
 8009ed2:	61fb      	str	r3, [r7, #28]
 8009ed4:	e001      	b.n	8009eda <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	461a      	mov	r2, r3
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	01db      	lsls	r3, r3, #7
 8009ee4:	4413      	add	r3, r2
 8009ee6:	3384      	adds	r3, #132	; 0x84
 8009ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eea:	68fa      	ldr	r2, [r7, #12]
 8009eec:	6812      	ldr	r2, [r2, #0]
 8009eee:	4611      	mov	r1, r2
 8009ef0:	687a      	ldr	r2, [r7, #4]
 8009ef2:	01d2      	lsls	r2, r2, #7
 8009ef4:	440a      	add	r2, r1
 8009ef6:	3284      	adds	r2, #132	; 0x84
 8009ef8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8009efc:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f02:	69fa      	ldr	r2, [r7, #28]
 8009f04:	fb02 f303 	mul.w	r3, r2, r3
 8009f08:	041a      	lsls	r2, r3, #16
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	6859      	ldr	r1, [r3, #4]
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	1acb      	subs	r3, r1, r3
 8009f14:	69f9      	ldr	r1, [r7, #28]
 8009f16:	fb01 f303 	mul.w	r3, r1, r3
 8009f1a:	3307      	adds	r3, #7
 8009f1c:	68f9      	ldr	r1, [r7, #12]
 8009f1e:	6809      	ldr	r1, [r1, #0]
 8009f20:	4608      	mov	r0, r1
 8009f22:	6879      	ldr	r1, [r7, #4]
 8009f24:	01c9      	lsls	r1, r1, #7
 8009f26:	4401      	add	r1, r0
 8009f28:	3184      	adds	r1, #132	; 0x84
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	461a      	mov	r2, r3
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	01db      	lsls	r3, r3, #7
 8009f38:	4413      	add	r3, r2
 8009f3a:	3384      	adds	r3, #132	; 0x84
 8009f3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4619      	mov	r1, r3
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	01db      	lsls	r3, r3, #7
 8009f48:	440b      	add	r3, r1
 8009f4a:	3384      	adds	r3, #132	; 0x84
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	4b14      	ldr	r3, [pc, #80]	; (8009fa0 <LTDC_SetConfig+0x330>)
 8009f50:	4013      	ands	r3, r2
 8009f52:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	461a      	mov	r2, r3
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	01db      	lsls	r3, r3, #7
 8009f5e:	4413      	add	r3, r2
 8009f60:	3384      	adds	r3, #132	; 0x84
 8009f62:	461a      	mov	r2, r3
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f68:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	461a      	mov	r2, r3
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	01db      	lsls	r3, r3, #7
 8009f74:	4413      	add	r3, r2
 8009f76:	3384      	adds	r3, #132	; 0x84
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	68fa      	ldr	r2, [r7, #12]
 8009f7c:	6812      	ldr	r2, [r2, #0]
 8009f7e:	4611      	mov	r1, r2
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	01d2      	lsls	r2, r2, #7
 8009f84:	440a      	add	r2, r1
 8009f86:	3284      	adds	r2, #132	; 0x84
 8009f88:	f043 0301 	orr.w	r3, r3, #1
 8009f8c:	6013      	str	r3, [r2, #0]
}
 8009f8e:	bf00      	nop
 8009f90:	3724      	adds	r7, #36	; 0x24
 8009f92:	46bd      	mov	sp, r7
 8009f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f98:	4770      	bx	lr
 8009f9a:	bf00      	nop
 8009f9c:	fffff8f8 	.word	0xfffff8f8
 8009fa0:	fffff800 	.word	0xfffff800

08009fa4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8009fa8:	4b05      	ldr	r3, [pc, #20]	; (8009fc0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4a04      	ldr	r2, [pc, #16]	; (8009fc0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fb2:	6013      	str	r3, [r2, #0]
}
 8009fb4:	bf00      	nop
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr
 8009fbe:	bf00      	nop
 8009fc0:	58024800 	.word	0x58024800

08009fc4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8009fcc:	4b29      	ldr	r3, [pc, #164]	; (800a074 <HAL_PWREx_ConfigSupply+0xb0>)
 8009fce:	68db      	ldr	r3, [r3, #12]
 8009fd0:	f003 0307 	and.w	r3, r3, #7
 8009fd4:	2b06      	cmp	r3, #6
 8009fd6:	d00a      	beq.n	8009fee <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009fd8:	4b26      	ldr	r3, [pc, #152]	; (800a074 <HAL_PWREx_ConfigSupply+0xb0>)
 8009fda:	68db      	ldr	r3, [r3, #12]
 8009fdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009fe0:	687a      	ldr	r2, [r7, #4]
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d001      	beq.n	8009fea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	e040      	b.n	800a06c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009fea:	2300      	movs	r3, #0
 8009fec:	e03e      	b.n	800a06c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009fee:	4b21      	ldr	r3, [pc, #132]	; (800a074 <HAL_PWREx_ConfigSupply+0xb0>)
 8009ff0:	68db      	ldr	r3, [r3, #12]
 8009ff2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8009ff6:	491f      	ldr	r1, [pc, #124]	; (800a074 <HAL_PWREx_ConfigSupply+0xb0>)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009ffe:	f7fa f95d 	bl	80042bc <HAL_GetTick>
 800a002:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a004:	e009      	b.n	800a01a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a006:	f7fa f959 	bl	80042bc <HAL_GetTick>
 800a00a:	4602      	mov	r2, r0
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	1ad3      	subs	r3, r2, r3
 800a010:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a014:	d901      	bls.n	800a01a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a016:	2301      	movs	r3, #1
 800a018:	e028      	b.n	800a06c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a01a:	4b16      	ldr	r3, [pc, #88]	; (800a074 <HAL_PWREx_ConfigSupply+0xb0>)
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a026:	d1ee      	bne.n	800a006 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2b1e      	cmp	r3, #30
 800a02c:	d008      	beq.n	800a040 <HAL_PWREx_ConfigSupply+0x7c>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2b2e      	cmp	r3, #46	; 0x2e
 800a032:	d005      	beq.n	800a040 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2b1d      	cmp	r3, #29
 800a038:	d002      	beq.n	800a040 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2b2d      	cmp	r3, #45	; 0x2d
 800a03e:	d114      	bne.n	800a06a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800a040:	f7fa f93c 	bl	80042bc <HAL_GetTick>
 800a044:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a046:	e009      	b.n	800a05c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a048:	f7fa f938 	bl	80042bc <HAL_GetTick>
 800a04c:	4602      	mov	r2, r0
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	1ad3      	subs	r3, r2, r3
 800a052:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a056:	d901      	bls.n	800a05c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800a058:	2301      	movs	r3, #1
 800a05a:	e007      	b.n	800a06c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a05c:	4b05      	ldr	r3, [pc, #20]	; (800a074 <HAL_PWREx_ConfigSupply+0xb0>)
 800a05e:	68db      	ldr	r3, [r3, #12]
 800a060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a068:	d1ee      	bne.n	800a048 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a06a:	2300      	movs	r3, #0
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3710      	adds	r7, #16
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}
 800a074:	58024800 	.word	0x58024800

0800a078 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b08c      	sub	sp, #48	; 0x30
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d102      	bne.n	800a08c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	f000 bc1f 	b.w	800a8ca <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f003 0301 	and.w	r3, r3, #1
 800a094:	2b00      	cmp	r3, #0
 800a096:	f000 80b3 	beq.w	800a200 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a09a:	4b95      	ldr	r3, [pc, #596]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a09c:	691b      	ldr	r3, [r3, #16]
 800a09e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a0a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a0a4:	4b92      	ldr	r3, [pc, #584]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a0a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0a8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ac:	2b10      	cmp	r3, #16
 800a0ae:	d007      	beq.n	800a0c0 <HAL_RCC_OscConfig+0x48>
 800a0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b2:	2b18      	cmp	r3, #24
 800a0b4:	d112      	bne.n	800a0dc <HAL_RCC_OscConfig+0x64>
 800a0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b8:	f003 0303 	and.w	r3, r3, #3
 800a0bc:	2b02      	cmp	r3, #2
 800a0be:	d10d      	bne.n	800a0dc <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a0c0:	4b8b      	ldr	r3, [pc, #556]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	f000 8098 	beq.w	800a1fe <HAL_RCC_OscConfig+0x186>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	f040 8093 	bne.w	800a1fe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	e3f6      	b.n	800a8ca <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0e4:	d106      	bne.n	800a0f4 <HAL_RCC_OscConfig+0x7c>
 800a0e6:	4b82      	ldr	r3, [pc, #520]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a81      	ldr	r2, [pc, #516]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a0ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0f0:	6013      	str	r3, [r2, #0]
 800a0f2:	e058      	b.n	800a1a6 <HAL_RCC_OscConfig+0x12e>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d112      	bne.n	800a122 <HAL_RCC_OscConfig+0xaa>
 800a0fc:	4b7c      	ldr	r3, [pc, #496]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a7b      	ldr	r2, [pc, #492]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a106:	6013      	str	r3, [r2, #0]
 800a108:	4b79      	ldr	r3, [pc, #484]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a78      	ldr	r2, [pc, #480]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a10e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a112:	6013      	str	r3, [r2, #0]
 800a114:	4b76      	ldr	r3, [pc, #472]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a75      	ldr	r2, [pc, #468]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a11a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a11e:	6013      	str	r3, [r2, #0]
 800a120:	e041      	b.n	800a1a6 <HAL_RCC_OscConfig+0x12e>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a12a:	d112      	bne.n	800a152 <HAL_RCC_OscConfig+0xda>
 800a12c:	4b70      	ldr	r3, [pc, #448]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a6f      	ldr	r2, [pc, #444]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a132:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a136:	6013      	str	r3, [r2, #0]
 800a138:	4b6d      	ldr	r3, [pc, #436]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a6c      	ldr	r2, [pc, #432]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a13e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a142:	6013      	str	r3, [r2, #0]
 800a144:	4b6a      	ldr	r3, [pc, #424]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4a69      	ldr	r2, [pc, #420]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a14a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a14e:	6013      	str	r3, [r2, #0]
 800a150:	e029      	b.n	800a1a6 <HAL_RCC_OscConfig+0x12e>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800a15a:	d112      	bne.n	800a182 <HAL_RCC_OscConfig+0x10a>
 800a15c:	4b64      	ldr	r3, [pc, #400]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a63      	ldr	r2, [pc, #396]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a162:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a166:	6013      	str	r3, [r2, #0]
 800a168:	4b61      	ldr	r3, [pc, #388]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a60      	ldr	r2, [pc, #384]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a16e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a172:	6013      	str	r3, [r2, #0]
 800a174:	4b5e      	ldr	r3, [pc, #376]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4a5d      	ldr	r2, [pc, #372]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a17a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a17e:	6013      	str	r3, [r2, #0]
 800a180:	e011      	b.n	800a1a6 <HAL_RCC_OscConfig+0x12e>
 800a182:	4b5b      	ldr	r3, [pc, #364]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a5a      	ldr	r2, [pc, #360]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a188:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a18c:	6013      	str	r3, [r2, #0]
 800a18e:	4b58      	ldr	r3, [pc, #352]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	4a57      	ldr	r2, [pc, #348]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a194:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a198:	6013      	str	r3, [r2, #0]
 800a19a:	4b55      	ldr	r3, [pc, #340]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4a54      	ldr	r2, [pc, #336]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a1a0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a1a4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d013      	beq.n	800a1d6 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1ae:	f7fa f885 	bl	80042bc <HAL_GetTick>
 800a1b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a1b4:	e008      	b.n	800a1c8 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a1b6:	f7fa f881 	bl	80042bc <HAL_GetTick>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1be:	1ad3      	subs	r3, r2, r3
 800a1c0:	2b64      	cmp	r3, #100	; 0x64
 800a1c2:	d901      	bls.n	800a1c8 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800a1c4:	2303      	movs	r3, #3
 800a1c6:	e380      	b.n	800a8ca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a1c8:	4b49      	ldr	r3, [pc, #292]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d0f0      	beq.n	800a1b6 <HAL_RCC_OscConfig+0x13e>
 800a1d4:	e014      	b.n	800a200 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1d6:	f7fa f871 	bl	80042bc <HAL_GetTick>
 800a1da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a1dc:	e008      	b.n	800a1f0 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a1de:	f7fa f86d 	bl	80042bc <HAL_GetTick>
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e6:	1ad3      	subs	r3, r2, r3
 800a1e8:	2b64      	cmp	r3, #100	; 0x64
 800a1ea:	d901      	bls.n	800a1f0 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800a1ec:	2303      	movs	r3, #3
 800a1ee:	e36c      	b.n	800a8ca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a1f0:	4b3f      	ldr	r3, [pc, #252]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d1f0      	bne.n	800a1de <HAL_RCC_OscConfig+0x166>
 800a1fc:	e000      	b.n	800a200 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a1fe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f003 0302 	and.w	r3, r3, #2
 800a208:	2b00      	cmp	r3, #0
 800a20a:	f000 808c 	beq.w	800a326 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a20e:	4b38      	ldr	r3, [pc, #224]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a210:	691b      	ldr	r3, [r3, #16]
 800a212:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a216:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a218:	4b35      	ldr	r3, [pc, #212]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a21a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a21c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a21e:	6a3b      	ldr	r3, [r7, #32]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d007      	beq.n	800a234 <HAL_RCC_OscConfig+0x1bc>
 800a224:	6a3b      	ldr	r3, [r7, #32]
 800a226:	2b18      	cmp	r3, #24
 800a228:	d137      	bne.n	800a29a <HAL_RCC_OscConfig+0x222>
 800a22a:	69fb      	ldr	r3, [r7, #28]
 800a22c:	f003 0303 	and.w	r3, r3, #3
 800a230:	2b00      	cmp	r3, #0
 800a232:	d132      	bne.n	800a29a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a234:	4b2e      	ldr	r3, [pc, #184]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f003 0304 	and.w	r3, r3, #4
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d005      	beq.n	800a24c <HAL_RCC_OscConfig+0x1d4>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	68db      	ldr	r3, [r3, #12]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d101      	bne.n	800a24c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800a248:	2301      	movs	r3, #1
 800a24a:	e33e      	b.n	800a8ca <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a24c:	4b28      	ldr	r3, [pc, #160]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f023 0219 	bic.w	r2, r3, #25
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	4925      	ldr	r1, [pc, #148]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a25a:	4313      	orrs	r3, r2
 800a25c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a25e:	f7fa f82d 	bl	80042bc <HAL_GetTick>
 800a262:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a264:	e008      	b.n	800a278 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a266:	f7fa f829 	bl	80042bc <HAL_GetTick>
 800a26a:	4602      	mov	r2, r0
 800a26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26e:	1ad3      	subs	r3, r2, r3
 800a270:	2b02      	cmp	r3, #2
 800a272:	d901      	bls.n	800a278 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800a274:	2303      	movs	r3, #3
 800a276:	e328      	b.n	800a8ca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a278:	4b1d      	ldr	r3, [pc, #116]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f003 0304 	and.w	r3, r3, #4
 800a280:	2b00      	cmp	r3, #0
 800a282:	d0f0      	beq.n	800a266 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a284:	4b1a      	ldr	r3, [pc, #104]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	691b      	ldr	r3, [r3, #16]
 800a290:	061b      	lsls	r3, r3, #24
 800a292:	4917      	ldr	r1, [pc, #92]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a294:	4313      	orrs	r3, r2
 800a296:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a298:	e045      	b.n	800a326 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	68db      	ldr	r3, [r3, #12]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d028      	beq.n	800a2f4 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a2a2:	4b13      	ldr	r3, [pc, #76]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f023 0219 	bic.w	r2, r3, #25
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	68db      	ldr	r3, [r3, #12]
 800a2ae:	4910      	ldr	r1, [pc, #64]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2b4:	f7fa f802 	bl	80042bc <HAL_GetTick>
 800a2b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a2ba:	e008      	b.n	800a2ce <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a2bc:	f7f9 fffe 	bl	80042bc <HAL_GetTick>
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c4:	1ad3      	subs	r3, r2, r3
 800a2c6:	2b02      	cmp	r3, #2
 800a2c8:	d901      	bls.n	800a2ce <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800a2ca:	2303      	movs	r3, #3
 800a2cc:	e2fd      	b.n	800a8ca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a2ce:	4b08      	ldr	r3, [pc, #32]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f003 0304 	and.w	r3, r3, #4
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d0f0      	beq.n	800a2bc <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a2da:	4b05      	ldr	r3, [pc, #20]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	691b      	ldr	r3, [r3, #16]
 800a2e6:	061b      	lsls	r3, r3, #24
 800a2e8:	4901      	ldr	r1, [pc, #4]	; (800a2f0 <HAL_RCC_OscConfig+0x278>)
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	604b      	str	r3, [r1, #4]
 800a2ee:	e01a      	b.n	800a326 <HAL_RCC_OscConfig+0x2ae>
 800a2f0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a2f4:	4b97      	ldr	r3, [pc, #604]	; (800a554 <HAL_RCC_OscConfig+0x4dc>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a96      	ldr	r2, [pc, #600]	; (800a554 <HAL_RCC_OscConfig+0x4dc>)
 800a2fa:	f023 0301 	bic.w	r3, r3, #1
 800a2fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a300:	f7f9 ffdc 	bl	80042bc <HAL_GetTick>
 800a304:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a306:	e008      	b.n	800a31a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a308:	f7f9 ffd8 	bl	80042bc <HAL_GetTick>
 800a30c:	4602      	mov	r2, r0
 800a30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a310:	1ad3      	subs	r3, r2, r3
 800a312:	2b02      	cmp	r3, #2
 800a314:	d901      	bls.n	800a31a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800a316:	2303      	movs	r3, #3
 800a318:	e2d7      	b.n	800a8ca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a31a:	4b8e      	ldr	r3, [pc, #568]	; (800a554 <HAL_RCC_OscConfig+0x4dc>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f003 0304 	and.w	r3, r3, #4
 800a322:	2b00      	cmp	r3, #0
 800a324:	d1f0      	bne.n	800a308 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f003 0310 	and.w	r3, r3, #16
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d06a      	beq.n	800a408 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a332:	4b88      	ldr	r3, [pc, #544]	; (800a554 <HAL_RCC_OscConfig+0x4dc>)
 800a334:	691b      	ldr	r3, [r3, #16]
 800a336:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a33a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a33c:	4b85      	ldr	r3, [pc, #532]	; (800a554 <HAL_RCC_OscConfig+0x4dc>)
 800a33e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a340:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a342:	69bb      	ldr	r3, [r7, #24]
 800a344:	2b08      	cmp	r3, #8
 800a346:	d007      	beq.n	800a358 <HAL_RCC_OscConfig+0x2e0>
 800a348:	69bb      	ldr	r3, [r7, #24]
 800a34a:	2b18      	cmp	r3, #24
 800a34c:	d11b      	bne.n	800a386 <HAL_RCC_OscConfig+0x30e>
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	f003 0303 	and.w	r3, r3, #3
 800a354:	2b01      	cmp	r3, #1
 800a356:	d116      	bne.n	800a386 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a358:	4b7e      	ldr	r3, [pc, #504]	; (800a554 <HAL_RCC_OscConfig+0x4dc>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a360:	2b00      	cmp	r3, #0
 800a362:	d005      	beq.n	800a370 <HAL_RCC_OscConfig+0x2f8>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	69db      	ldr	r3, [r3, #28]
 800a368:	2b80      	cmp	r3, #128	; 0x80
 800a36a:	d001      	beq.n	800a370 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800a36c:	2301      	movs	r3, #1
 800a36e:	e2ac      	b.n	800a8ca <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a370:	4b78      	ldr	r3, [pc, #480]	; (800a554 <HAL_RCC_OscConfig+0x4dc>)
 800a372:	68db      	ldr	r3, [r3, #12]
 800a374:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6a1b      	ldr	r3, [r3, #32]
 800a37c:	061b      	lsls	r3, r3, #24
 800a37e:	4975      	ldr	r1, [pc, #468]	; (800a554 <HAL_RCC_OscConfig+0x4dc>)
 800a380:	4313      	orrs	r3, r2
 800a382:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a384:	e040      	b.n	800a408 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	69db      	ldr	r3, [r3, #28]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d023      	beq.n	800a3d6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a38e:	4b71      	ldr	r3, [pc, #452]	; (800a554 <HAL_RCC_OscConfig+0x4dc>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4a70      	ldr	r2, [pc, #448]	; (800a554 <HAL_RCC_OscConfig+0x4dc>)
 800a394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a398:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a39a:	f7f9 ff8f 	bl	80042bc <HAL_GetTick>
 800a39e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a3a0:	e008      	b.n	800a3b4 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a3a2:	f7f9 ff8b 	bl	80042bc <HAL_GetTick>
 800a3a6:	4602      	mov	r2, r0
 800a3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3aa:	1ad3      	subs	r3, r2, r3
 800a3ac:	2b02      	cmp	r3, #2
 800a3ae:	d901      	bls.n	800a3b4 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800a3b0:	2303      	movs	r3, #3
 800a3b2:	e28a      	b.n	800a8ca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a3b4:	4b67      	ldr	r3, [pc, #412]	; (800a554 <HAL_RCC_OscConfig+0x4dc>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d0f0      	beq.n	800a3a2 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a3c0:	4b64      	ldr	r3, [pc, #400]	; (800a554 <HAL_RCC_OscConfig+0x4dc>)
 800a3c2:	68db      	ldr	r3, [r3, #12]
 800a3c4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6a1b      	ldr	r3, [r3, #32]
 800a3cc:	061b      	lsls	r3, r3, #24
 800a3ce:	4961      	ldr	r1, [pc, #388]	; (800a554 <HAL_RCC_OscConfig+0x4dc>)
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	60cb      	str	r3, [r1, #12]
 800a3d4:	e018      	b.n	800a408 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a3d6:	4b5f      	ldr	r3, [pc, #380]	; (800a554 <HAL_RCC_OscConfig+0x4dc>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4a5e      	ldr	r2, [pc, #376]	; (800a554 <HAL_RCC_OscConfig+0x4dc>)
 800a3dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3e2:	f7f9 ff6b 	bl	80042bc <HAL_GetTick>
 800a3e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a3e8:	e008      	b.n	800a3fc <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a3ea:	f7f9 ff67 	bl	80042bc <HAL_GetTick>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f2:	1ad3      	subs	r3, r2, r3
 800a3f4:	2b02      	cmp	r3, #2
 800a3f6:	d901      	bls.n	800a3fc <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800a3f8:	2303      	movs	r3, #3
 800a3fa:	e266      	b.n	800a8ca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a3fc:	4b55      	ldr	r3, [pc, #340]	; (800a554 <HAL_RCC_OscConfig+0x4dc>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a404:	2b00      	cmp	r3, #0
 800a406:	d1f0      	bne.n	800a3ea <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f003 0308 	and.w	r3, r3, #8
 800a410:	2b00      	cmp	r3, #0
 800a412:	d036      	beq.n	800a482 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	695b      	ldr	r3, [r3, #20]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d019      	beq.n	800a450 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a41c:	4b4d      	ldr	r3, [pc, #308]	; (800a554 <HAL_RCC_OscConfig+0x4dc>)
 800a41e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a420:	4a4c      	ldr	r2, [pc, #304]	; (800a554 <HAL_RCC_OscConfig+0x4dc>)
 800a422:	f043 0301 	orr.w	r3, r3, #1
 800a426:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a428:	f7f9 ff48 	bl	80042bc <HAL_GetTick>
 800a42c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a42e:	e008      	b.n	800a442 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a430:	f7f9 ff44 	bl	80042bc <HAL_GetTick>
 800a434:	4602      	mov	r2, r0
 800a436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a438:	1ad3      	subs	r3, r2, r3
 800a43a:	2b02      	cmp	r3, #2
 800a43c:	d901      	bls.n	800a442 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800a43e:	2303      	movs	r3, #3
 800a440:	e243      	b.n	800a8ca <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a442:	4b44      	ldr	r3, [pc, #272]	; (800a554 <HAL_RCC_OscConfig+0x4dc>)
 800a444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a446:	f003 0302 	and.w	r3, r3, #2
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d0f0      	beq.n	800a430 <HAL_RCC_OscConfig+0x3b8>
 800a44e:	e018      	b.n	800a482 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a450:	4b40      	ldr	r3, [pc, #256]	; (800a554 <HAL_RCC_OscConfig+0x4dc>)
 800a452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a454:	4a3f      	ldr	r2, [pc, #252]	; (800a554 <HAL_RCC_OscConfig+0x4dc>)
 800a456:	f023 0301 	bic.w	r3, r3, #1
 800a45a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a45c:	f7f9 ff2e 	bl	80042bc <HAL_GetTick>
 800a460:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a462:	e008      	b.n	800a476 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a464:	f7f9 ff2a 	bl	80042bc <HAL_GetTick>
 800a468:	4602      	mov	r2, r0
 800a46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a46c:	1ad3      	subs	r3, r2, r3
 800a46e:	2b02      	cmp	r3, #2
 800a470:	d901      	bls.n	800a476 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a472:	2303      	movs	r3, #3
 800a474:	e229      	b.n	800a8ca <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a476:	4b37      	ldr	r3, [pc, #220]	; (800a554 <HAL_RCC_OscConfig+0x4dc>)
 800a478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a47a:	f003 0302 	and.w	r3, r3, #2
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d1f0      	bne.n	800a464 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f003 0320 	and.w	r3, r3, #32
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d036      	beq.n	800a4fc <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	699b      	ldr	r3, [r3, #24]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d019      	beq.n	800a4ca <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a496:	4b2f      	ldr	r3, [pc, #188]	; (800a554 <HAL_RCC_OscConfig+0x4dc>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a2e      	ldr	r2, [pc, #184]	; (800a554 <HAL_RCC_OscConfig+0x4dc>)
 800a49c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a4a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a4a2:	f7f9 ff0b 	bl	80042bc <HAL_GetTick>
 800a4a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a4a8:	e008      	b.n	800a4bc <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a4aa:	f7f9 ff07 	bl	80042bc <HAL_GetTick>
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b2:	1ad3      	subs	r3, r2, r3
 800a4b4:	2b02      	cmp	r3, #2
 800a4b6:	d901      	bls.n	800a4bc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800a4b8:	2303      	movs	r3, #3
 800a4ba:	e206      	b.n	800a8ca <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a4bc:	4b25      	ldr	r3, [pc, #148]	; (800a554 <HAL_RCC_OscConfig+0x4dc>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d0f0      	beq.n	800a4aa <HAL_RCC_OscConfig+0x432>
 800a4c8:	e018      	b.n	800a4fc <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a4ca:	4b22      	ldr	r3, [pc, #136]	; (800a554 <HAL_RCC_OscConfig+0x4dc>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4a21      	ldr	r2, [pc, #132]	; (800a554 <HAL_RCC_OscConfig+0x4dc>)
 800a4d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a4d6:	f7f9 fef1 	bl	80042bc <HAL_GetTick>
 800a4da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a4dc:	e008      	b.n	800a4f0 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a4de:	f7f9 feed 	bl	80042bc <HAL_GetTick>
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e6:	1ad3      	subs	r3, r2, r3
 800a4e8:	2b02      	cmp	r3, #2
 800a4ea:	d901      	bls.n	800a4f0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800a4ec:	2303      	movs	r3, #3
 800a4ee:	e1ec      	b.n	800a8ca <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a4f0:	4b18      	ldr	r3, [pc, #96]	; (800a554 <HAL_RCC_OscConfig+0x4dc>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d1f0      	bne.n	800a4de <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f003 0304 	and.w	r3, r3, #4
 800a504:	2b00      	cmp	r3, #0
 800a506:	f000 80af 	beq.w	800a668 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a50a:	4b13      	ldr	r3, [pc, #76]	; (800a558 <HAL_RCC_OscConfig+0x4e0>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4a12      	ldr	r2, [pc, #72]	; (800a558 <HAL_RCC_OscConfig+0x4e0>)
 800a510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a514:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a516:	f7f9 fed1 	bl	80042bc <HAL_GetTick>
 800a51a:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a51c:	e008      	b.n	800a530 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a51e:	f7f9 fecd 	bl	80042bc <HAL_GetTick>
 800a522:	4602      	mov	r2, r0
 800a524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a526:	1ad3      	subs	r3, r2, r3
 800a528:	2b64      	cmp	r3, #100	; 0x64
 800a52a:	d901      	bls.n	800a530 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800a52c:	2303      	movs	r3, #3
 800a52e:	e1cc      	b.n	800a8ca <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a530:	4b09      	ldr	r3, [pc, #36]	; (800a558 <HAL_RCC_OscConfig+0x4e0>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d0f0      	beq.n	800a51e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	689b      	ldr	r3, [r3, #8]
 800a540:	2b01      	cmp	r3, #1
 800a542:	d10b      	bne.n	800a55c <HAL_RCC_OscConfig+0x4e4>
 800a544:	4b03      	ldr	r3, [pc, #12]	; (800a554 <HAL_RCC_OscConfig+0x4dc>)
 800a546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a548:	4a02      	ldr	r2, [pc, #8]	; (800a554 <HAL_RCC_OscConfig+0x4dc>)
 800a54a:	f043 0301 	orr.w	r3, r3, #1
 800a54e:	6713      	str	r3, [r2, #112]	; 0x70
 800a550:	e05b      	b.n	800a60a <HAL_RCC_OscConfig+0x592>
 800a552:	bf00      	nop
 800a554:	58024400 	.word	0x58024400
 800a558:	58024800 	.word	0x58024800
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	689b      	ldr	r3, [r3, #8]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d112      	bne.n	800a58a <HAL_RCC_OscConfig+0x512>
 800a564:	4b9d      	ldr	r3, [pc, #628]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a568:	4a9c      	ldr	r2, [pc, #624]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a56a:	f023 0301 	bic.w	r3, r3, #1
 800a56e:	6713      	str	r3, [r2, #112]	; 0x70
 800a570:	4b9a      	ldr	r3, [pc, #616]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a574:	4a99      	ldr	r2, [pc, #612]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a576:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a57a:	6713      	str	r3, [r2, #112]	; 0x70
 800a57c:	4b97      	ldr	r3, [pc, #604]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a57e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a580:	4a96      	ldr	r2, [pc, #600]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a582:	f023 0304 	bic.w	r3, r3, #4
 800a586:	6713      	str	r3, [r2, #112]	; 0x70
 800a588:	e03f      	b.n	800a60a <HAL_RCC_OscConfig+0x592>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	689b      	ldr	r3, [r3, #8]
 800a58e:	2b05      	cmp	r3, #5
 800a590:	d112      	bne.n	800a5b8 <HAL_RCC_OscConfig+0x540>
 800a592:	4b92      	ldr	r3, [pc, #584]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a596:	4a91      	ldr	r2, [pc, #580]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a598:	f043 0304 	orr.w	r3, r3, #4
 800a59c:	6713      	str	r3, [r2, #112]	; 0x70
 800a59e:	4b8f      	ldr	r3, [pc, #572]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a5a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5a2:	4a8e      	ldr	r2, [pc, #568]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a5a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5a8:	6713      	str	r3, [r2, #112]	; 0x70
 800a5aa:	4b8c      	ldr	r3, [pc, #560]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a5ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5ae:	4a8b      	ldr	r2, [pc, #556]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a5b0:	f043 0301 	orr.w	r3, r3, #1
 800a5b4:	6713      	str	r3, [r2, #112]	; 0x70
 800a5b6:	e028      	b.n	800a60a <HAL_RCC_OscConfig+0x592>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	689b      	ldr	r3, [r3, #8]
 800a5bc:	2b85      	cmp	r3, #133	; 0x85
 800a5be:	d112      	bne.n	800a5e6 <HAL_RCC_OscConfig+0x56e>
 800a5c0:	4b86      	ldr	r3, [pc, #536]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a5c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5c4:	4a85      	ldr	r2, [pc, #532]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a5c6:	f043 0304 	orr.w	r3, r3, #4
 800a5ca:	6713      	str	r3, [r2, #112]	; 0x70
 800a5cc:	4b83      	ldr	r3, [pc, #524]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a5ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5d0:	4a82      	ldr	r2, [pc, #520]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a5d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5d6:	6713      	str	r3, [r2, #112]	; 0x70
 800a5d8:	4b80      	ldr	r3, [pc, #512]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a5da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5dc:	4a7f      	ldr	r2, [pc, #508]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a5de:	f043 0301 	orr.w	r3, r3, #1
 800a5e2:	6713      	str	r3, [r2, #112]	; 0x70
 800a5e4:	e011      	b.n	800a60a <HAL_RCC_OscConfig+0x592>
 800a5e6:	4b7d      	ldr	r3, [pc, #500]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a5e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5ea:	4a7c      	ldr	r2, [pc, #496]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a5ec:	f023 0301 	bic.w	r3, r3, #1
 800a5f0:	6713      	str	r3, [r2, #112]	; 0x70
 800a5f2:	4b7a      	ldr	r3, [pc, #488]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a5f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5f6:	4a79      	ldr	r2, [pc, #484]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a5f8:	f023 0304 	bic.w	r3, r3, #4
 800a5fc:	6713      	str	r3, [r2, #112]	; 0x70
 800a5fe:	4b77      	ldr	r3, [pc, #476]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a602:	4a76      	ldr	r2, [pc, #472]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a604:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a608:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	689b      	ldr	r3, [r3, #8]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d015      	beq.n	800a63e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a612:	f7f9 fe53 	bl	80042bc <HAL_GetTick>
 800a616:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a618:	e00a      	b.n	800a630 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a61a:	f7f9 fe4f 	bl	80042bc <HAL_GetTick>
 800a61e:	4602      	mov	r2, r0
 800a620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a622:	1ad3      	subs	r3, r2, r3
 800a624:	f241 3288 	movw	r2, #5000	; 0x1388
 800a628:	4293      	cmp	r3, r2
 800a62a:	d901      	bls.n	800a630 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800a62c:	2303      	movs	r3, #3
 800a62e:	e14c      	b.n	800a8ca <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a630:	4b6a      	ldr	r3, [pc, #424]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a634:	f003 0302 	and.w	r3, r3, #2
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d0ee      	beq.n	800a61a <HAL_RCC_OscConfig+0x5a2>
 800a63c:	e014      	b.n	800a668 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a63e:	f7f9 fe3d 	bl	80042bc <HAL_GetTick>
 800a642:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a644:	e00a      	b.n	800a65c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a646:	f7f9 fe39 	bl	80042bc <HAL_GetTick>
 800a64a:	4602      	mov	r2, r0
 800a64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a64e:	1ad3      	subs	r3, r2, r3
 800a650:	f241 3288 	movw	r2, #5000	; 0x1388
 800a654:	4293      	cmp	r3, r2
 800a656:	d901      	bls.n	800a65c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800a658:	2303      	movs	r3, #3
 800a65a:	e136      	b.n	800a8ca <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a65c:	4b5f      	ldr	r3, [pc, #380]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a65e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a660:	f003 0302 	and.w	r3, r3, #2
 800a664:	2b00      	cmp	r3, #0
 800a666:	d1ee      	bne.n	800a646 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	f000 812b 	beq.w	800a8c8 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a672:	4b5a      	ldr	r3, [pc, #360]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a674:	691b      	ldr	r3, [r3, #16]
 800a676:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a67a:	2b18      	cmp	r3, #24
 800a67c:	f000 80bb 	beq.w	800a7f6 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a684:	2b02      	cmp	r3, #2
 800a686:	f040 8095 	bne.w	800a7b4 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a68a:	4b54      	ldr	r3, [pc, #336]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4a53      	ldr	r2, [pc, #332]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a690:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a694:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a696:	f7f9 fe11 	bl	80042bc <HAL_GetTick>
 800a69a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a69c:	e008      	b.n	800a6b0 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a69e:	f7f9 fe0d 	bl	80042bc <HAL_GetTick>
 800a6a2:	4602      	mov	r2, r0
 800a6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a6:	1ad3      	subs	r3, r2, r3
 800a6a8:	2b02      	cmp	r3, #2
 800a6aa:	d901      	bls.n	800a6b0 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800a6ac:	2303      	movs	r3, #3
 800a6ae:	e10c      	b.n	800a8ca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a6b0:	4b4a      	ldr	r3, [pc, #296]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d1f0      	bne.n	800a69e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a6bc:	4b47      	ldr	r3, [pc, #284]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a6be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a6c0:	4b47      	ldr	r3, [pc, #284]	; (800a7e0 <HAL_RCC_OscConfig+0x768>)
 800a6c2:	4013      	ands	r3, r2
 800a6c4:	687a      	ldr	r2, [r7, #4]
 800a6c6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a6c8:	687a      	ldr	r2, [r7, #4]
 800a6ca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a6cc:	0112      	lsls	r2, r2, #4
 800a6ce:	430a      	orrs	r2, r1
 800a6d0:	4942      	ldr	r1, [pc, #264]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	628b      	str	r3, [r1, #40]	; 0x28
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6da:	3b01      	subs	r3, #1
 800a6dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6e4:	3b01      	subs	r3, #1
 800a6e6:	025b      	lsls	r3, r3, #9
 800a6e8:	b29b      	uxth	r3, r3
 800a6ea:	431a      	orrs	r2, r3
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6f0:	3b01      	subs	r3, #1
 800a6f2:	041b      	lsls	r3, r3, #16
 800a6f4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a6f8:	431a      	orrs	r2, r3
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6fe:	3b01      	subs	r3, #1
 800a700:	061b      	lsls	r3, r3, #24
 800a702:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a706:	4935      	ldr	r1, [pc, #212]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a708:	4313      	orrs	r3, r2
 800a70a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a70c:	4b33      	ldr	r3, [pc, #204]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a70e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a710:	4a32      	ldr	r2, [pc, #200]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a712:	f023 0301 	bic.w	r3, r3, #1
 800a716:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a718:	4b30      	ldr	r3, [pc, #192]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a71a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a71c:	4b31      	ldr	r3, [pc, #196]	; (800a7e4 <HAL_RCC_OscConfig+0x76c>)
 800a71e:	4013      	ands	r3, r2
 800a720:	687a      	ldr	r2, [r7, #4]
 800a722:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a724:	00d2      	lsls	r2, r2, #3
 800a726:	492d      	ldr	r1, [pc, #180]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a728:	4313      	orrs	r3, r2
 800a72a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a72c:	4b2b      	ldr	r3, [pc, #172]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a72e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a730:	f023 020c 	bic.w	r2, r3, #12
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a738:	4928      	ldr	r1, [pc, #160]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a73a:	4313      	orrs	r3, r2
 800a73c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a73e:	4b27      	ldr	r3, [pc, #156]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a742:	f023 0202 	bic.w	r2, r3, #2
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a74a:	4924      	ldr	r1, [pc, #144]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a74c:	4313      	orrs	r3, r2
 800a74e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a750:	4b22      	ldr	r3, [pc, #136]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a754:	4a21      	ldr	r2, [pc, #132]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a75a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a75c:	4b1f      	ldr	r3, [pc, #124]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a760:	4a1e      	ldr	r2, [pc, #120]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a762:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a766:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a768:	4b1c      	ldr	r3, [pc, #112]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a76a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a76c:	4a1b      	ldr	r2, [pc, #108]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a76e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a772:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a774:	4b19      	ldr	r3, [pc, #100]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a778:	4a18      	ldr	r2, [pc, #96]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a77a:	f043 0301 	orr.w	r3, r3, #1
 800a77e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a780:	4b16      	ldr	r3, [pc, #88]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	4a15      	ldr	r2, [pc, #84]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a78a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a78c:	f7f9 fd96 	bl	80042bc <HAL_GetTick>
 800a790:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a792:	e008      	b.n	800a7a6 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a794:	f7f9 fd92 	bl	80042bc <HAL_GetTick>
 800a798:	4602      	mov	r2, r0
 800a79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79c:	1ad3      	subs	r3, r2, r3
 800a79e:	2b02      	cmp	r3, #2
 800a7a0:	d901      	bls.n	800a7a6 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800a7a2:	2303      	movs	r3, #3
 800a7a4:	e091      	b.n	800a8ca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a7a6:	4b0d      	ldr	r3, [pc, #52]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d0f0      	beq.n	800a794 <HAL_RCC_OscConfig+0x71c>
 800a7b2:	e089      	b.n	800a8c8 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a7b4:	4b09      	ldr	r3, [pc, #36]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4a08      	ldr	r2, [pc, #32]	; (800a7dc <HAL_RCC_OscConfig+0x764>)
 800a7ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a7be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7c0:	f7f9 fd7c 	bl	80042bc <HAL_GetTick>
 800a7c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a7c6:	e00f      	b.n	800a7e8 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7c8:	f7f9 fd78 	bl	80042bc <HAL_GetTick>
 800a7cc:	4602      	mov	r2, r0
 800a7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d0:	1ad3      	subs	r3, r2, r3
 800a7d2:	2b02      	cmp	r3, #2
 800a7d4:	d908      	bls.n	800a7e8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800a7d6:	2303      	movs	r3, #3
 800a7d8:	e077      	b.n	800a8ca <HAL_RCC_OscConfig+0x852>
 800a7da:	bf00      	nop
 800a7dc:	58024400 	.word	0x58024400
 800a7e0:	fffffc0c 	.word	0xfffffc0c
 800a7e4:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a7e8:	4b3a      	ldr	r3, [pc, #232]	; (800a8d4 <HAL_RCC_OscConfig+0x85c>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d1e9      	bne.n	800a7c8 <HAL_RCC_OscConfig+0x750>
 800a7f4:	e068      	b.n	800a8c8 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a7f6:	4b37      	ldr	r3, [pc, #220]	; (800a8d4 <HAL_RCC_OscConfig+0x85c>)
 800a7f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7fa:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a7fc:	4b35      	ldr	r3, [pc, #212]	; (800a8d4 <HAL_RCC_OscConfig+0x85c>)
 800a7fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a800:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a806:	2b01      	cmp	r3, #1
 800a808:	d031      	beq.n	800a86e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	f003 0203 	and.w	r2, r3, #3
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a814:	429a      	cmp	r2, r3
 800a816:	d12a      	bne.n	800a86e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	091b      	lsrs	r3, r3, #4
 800a81c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a824:	429a      	cmp	r2, r3
 800a826:	d122      	bne.n	800a86e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a832:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a834:	429a      	cmp	r2, r3
 800a836:	d11a      	bne.n	800a86e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	0a5b      	lsrs	r3, r3, #9
 800a83c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a844:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a846:	429a      	cmp	r2, r3
 800a848:	d111      	bne.n	800a86e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	0c1b      	lsrs	r3, r3, #16
 800a84e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a856:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a858:	429a      	cmp	r2, r3
 800a85a:	d108      	bne.n	800a86e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	0e1b      	lsrs	r3, r3, #24
 800a860:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a868:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d001      	beq.n	800a872 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800a86e:	2301      	movs	r3, #1
 800a870:	e02b      	b.n	800a8ca <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a872:	4b18      	ldr	r3, [pc, #96]	; (800a8d4 <HAL_RCC_OscConfig+0x85c>)
 800a874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a876:	08db      	lsrs	r3, r3, #3
 800a878:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a87c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a882:	693a      	ldr	r2, [r7, #16]
 800a884:	429a      	cmp	r2, r3
 800a886:	d01f      	beq.n	800a8c8 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a888:	4b12      	ldr	r3, [pc, #72]	; (800a8d4 <HAL_RCC_OscConfig+0x85c>)
 800a88a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a88c:	4a11      	ldr	r2, [pc, #68]	; (800a8d4 <HAL_RCC_OscConfig+0x85c>)
 800a88e:	f023 0301 	bic.w	r3, r3, #1
 800a892:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a894:	f7f9 fd12 	bl	80042bc <HAL_GetTick>
 800a898:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a89a:	bf00      	nop
 800a89c:	f7f9 fd0e 	bl	80042bc <HAL_GetTick>
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d0f9      	beq.n	800a89c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a8a8:	4b0a      	ldr	r3, [pc, #40]	; (800a8d4 <HAL_RCC_OscConfig+0x85c>)
 800a8aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8ac:	4b0a      	ldr	r3, [pc, #40]	; (800a8d8 <HAL_RCC_OscConfig+0x860>)
 800a8ae:	4013      	ands	r3, r2
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a8b4:	00d2      	lsls	r2, r2, #3
 800a8b6:	4907      	ldr	r1, [pc, #28]	; (800a8d4 <HAL_RCC_OscConfig+0x85c>)
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a8bc:	4b05      	ldr	r3, [pc, #20]	; (800a8d4 <HAL_RCC_OscConfig+0x85c>)
 800a8be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8c0:	4a04      	ldr	r2, [pc, #16]	; (800a8d4 <HAL_RCC_OscConfig+0x85c>)
 800a8c2:	f043 0301 	orr.w	r3, r3, #1
 800a8c6:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a8c8:	2300      	movs	r3, #0
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3730      	adds	r7, #48	; 0x30
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
 800a8d2:	bf00      	nop
 800a8d4:	58024400 	.word	0x58024400
 800a8d8:	ffff0007 	.word	0xffff0007

0800a8dc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b086      	sub	sp, #24
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d101      	bne.n	800a8f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	e19c      	b.n	800ac2a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a8f0:	4b8a      	ldr	r3, [pc, #552]	; (800ab1c <HAL_RCC_ClockConfig+0x240>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f003 030f 	and.w	r3, r3, #15
 800a8f8:	683a      	ldr	r2, [r7, #0]
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	d910      	bls.n	800a920 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a8fe:	4b87      	ldr	r3, [pc, #540]	; (800ab1c <HAL_RCC_ClockConfig+0x240>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f023 020f 	bic.w	r2, r3, #15
 800a906:	4985      	ldr	r1, [pc, #532]	; (800ab1c <HAL_RCC_ClockConfig+0x240>)
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	4313      	orrs	r3, r2
 800a90c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a90e:	4b83      	ldr	r3, [pc, #524]	; (800ab1c <HAL_RCC_ClockConfig+0x240>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f003 030f 	and.w	r3, r3, #15
 800a916:	683a      	ldr	r2, [r7, #0]
 800a918:	429a      	cmp	r2, r3
 800a91a:	d001      	beq.n	800a920 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a91c:	2301      	movs	r3, #1
 800a91e:	e184      	b.n	800ac2a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f003 0304 	and.w	r3, r3, #4
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d010      	beq.n	800a94e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	691a      	ldr	r2, [r3, #16]
 800a930:	4b7b      	ldr	r3, [pc, #492]	; (800ab20 <HAL_RCC_ClockConfig+0x244>)
 800a932:	699b      	ldr	r3, [r3, #24]
 800a934:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a938:	429a      	cmp	r2, r3
 800a93a:	d908      	bls.n	800a94e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a93c:	4b78      	ldr	r3, [pc, #480]	; (800ab20 <HAL_RCC_ClockConfig+0x244>)
 800a93e:	699b      	ldr	r3, [r3, #24]
 800a940:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	691b      	ldr	r3, [r3, #16]
 800a948:	4975      	ldr	r1, [pc, #468]	; (800ab20 <HAL_RCC_ClockConfig+0x244>)
 800a94a:	4313      	orrs	r3, r2
 800a94c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f003 0308 	and.w	r3, r3, #8
 800a956:	2b00      	cmp	r3, #0
 800a958:	d010      	beq.n	800a97c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	695a      	ldr	r2, [r3, #20]
 800a95e:	4b70      	ldr	r3, [pc, #448]	; (800ab20 <HAL_RCC_ClockConfig+0x244>)
 800a960:	69db      	ldr	r3, [r3, #28]
 800a962:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a966:	429a      	cmp	r2, r3
 800a968:	d908      	bls.n	800a97c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a96a:	4b6d      	ldr	r3, [pc, #436]	; (800ab20 <HAL_RCC_ClockConfig+0x244>)
 800a96c:	69db      	ldr	r3, [r3, #28]
 800a96e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	695b      	ldr	r3, [r3, #20]
 800a976:	496a      	ldr	r1, [pc, #424]	; (800ab20 <HAL_RCC_ClockConfig+0x244>)
 800a978:	4313      	orrs	r3, r2
 800a97a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f003 0310 	and.w	r3, r3, #16
 800a984:	2b00      	cmp	r3, #0
 800a986:	d010      	beq.n	800a9aa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	699a      	ldr	r2, [r3, #24]
 800a98c:	4b64      	ldr	r3, [pc, #400]	; (800ab20 <HAL_RCC_ClockConfig+0x244>)
 800a98e:	69db      	ldr	r3, [r3, #28]
 800a990:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a994:	429a      	cmp	r2, r3
 800a996:	d908      	bls.n	800a9aa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a998:	4b61      	ldr	r3, [pc, #388]	; (800ab20 <HAL_RCC_ClockConfig+0x244>)
 800a99a:	69db      	ldr	r3, [r3, #28]
 800a99c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	699b      	ldr	r3, [r3, #24]
 800a9a4:	495e      	ldr	r1, [pc, #376]	; (800ab20 <HAL_RCC_ClockConfig+0x244>)
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f003 0320 	and.w	r3, r3, #32
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d010      	beq.n	800a9d8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	69da      	ldr	r2, [r3, #28]
 800a9ba:	4b59      	ldr	r3, [pc, #356]	; (800ab20 <HAL_RCC_ClockConfig+0x244>)
 800a9bc:	6a1b      	ldr	r3, [r3, #32]
 800a9be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d908      	bls.n	800a9d8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a9c6:	4b56      	ldr	r3, [pc, #344]	; (800ab20 <HAL_RCC_ClockConfig+0x244>)
 800a9c8:	6a1b      	ldr	r3, [r3, #32]
 800a9ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	69db      	ldr	r3, [r3, #28]
 800a9d2:	4953      	ldr	r1, [pc, #332]	; (800ab20 <HAL_RCC_ClockConfig+0x244>)
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f003 0302 	and.w	r3, r3, #2
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d010      	beq.n	800aa06 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	68da      	ldr	r2, [r3, #12]
 800a9e8:	4b4d      	ldr	r3, [pc, #308]	; (800ab20 <HAL_RCC_ClockConfig+0x244>)
 800a9ea:	699b      	ldr	r3, [r3, #24]
 800a9ec:	f003 030f 	and.w	r3, r3, #15
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d908      	bls.n	800aa06 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a9f4:	4b4a      	ldr	r3, [pc, #296]	; (800ab20 <HAL_RCC_ClockConfig+0x244>)
 800a9f6:	699b      	ldr	r3, [r3, #24]
 800a9f8:	f023 020f 	bic.w	r2, r3, #15
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	68db      	ldr	r3, [r3, #12]
 800aa00:	4947      	ldr	r1, [pc, #284]	; (800ab20 <HAL_RCC_ClockConfig+0x244>)
 800aa02:	4313      	orrs	r3, r2
 800aa04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f003 0301 	and.w	r3, r3, #1
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d055      	beq.n	800aabe <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800aa12:	4b43      	ldr	r3, [pc, #268]	; (800ab20 <HAL_RCC_ClockConfig+0x244>)
 800aa14:	699b      	ldr	r3, [r3, #24]
 800aa16:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	689b      	ldr	r3, [r3, #8]
 800aa1e:	4940      	ldr	r1, [pc, #256]	; (800ab20 <HAL_RCC_ClockConfig+0x244>)
 800aa20:	4313      	orrs	r3, r2
 800aa22:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	685b      	ldr	r3, [r3, #4]
 800aa28:	2b02      	cmp	r3, #2
 800aa2a:	d107      	bne.n	800aa3c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aa2c:	4b3c      	ldr	r3, [pc, #240]	; (800ab20 <HAL_RCC_ClockConfig+0x244>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d121      	bne.n	800aa7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	e0f6      	b.n	800ac2a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	2b03      	cmp	r3, #3
 800aa42:	d107      	bne.n	800aa54 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aa44:	4b36      	ldr	r3, [pc, #216]	; (800ab20 <HAL_RCC_ClockConfig+0x244>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d115      	bne.n	800aa7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aa50:	2301      	movs	r3, #1
 800aa52:	e0ea      	b.n	800ac2a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	2b01      	cmp	r3, #1
 800aa5a:	d107      	bne.n	800aa6c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aa5c:	4b30      	ldr	r3, [pc, #192]	; (800ab20 <HAL_RCC_ClockConfig+0x244>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d109      	bne.n	800aa7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	e0de      	b.n	800ac2a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aa6c:	4b2c      	ldr	r3, [pc, #176]	; (800ab20 <HAL_RCC_ClockConfig+0x244>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f003 0304 	and.w	r3, r3, #4
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d101      	bne.n	800aa7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aa78:	2301      	movs	r3, #1
 800aa7a:	e0d6      	b.n	800ac2a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800aa7c:	4b28      	ldr	r3, [pc, #160]	; (800ab20 <HAL_RCC_ClockConfig+0x244>)
 800aa7e:	691b      	ldr	r3, [r3, #16]
 800aa80:	f023 0207 	bic.w	r2, r3, #7
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	4925      	ldr	r1, [pc, #148]	; (800ab20 <HAL_RCC_ClockConfig+0x244>)
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa8e:	f7f9 fc15 	bl	80042bc <HAL_GetTick>
 800aa92:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa94:	e00a      	b.n	800aaac <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aa96:	f7f9 fc11 	bl	80042bc <HAL_GetTick>
 800aa9a:	4602      	mov	r2, r0
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	1ad3      	subs	r3, r2, r3
 800aaa0:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d901      	bls.n	800aaac <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800aaa8:	2303      	movs	r3, #3
 800aaaa:	e0be      	b.n	800ac2a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aaac:	4b1c      	ldr	r3, [pc, #112]	; (800ab20 <HAL_RCC_ClockConfig+0x244>)
 800aaae:	691b      	ldr	r3, [r3, #16]
 800aab0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	00db      	lsls	r3, r3, #3
 800aaba:	429a      	cmp	r2, r3
 800aabc:	d1eb      	bne.n	800aa96 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f003 0302 	and.w	r3, r3, #2
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d010      	beq.n	800aaec <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	68da      	ldr	r2, [r3, #12]
 800aace:	4b14      	ldr	r3, [pc, #80]	; (800ab20 <HAL_RCC_ClockConfig+0x244>)
 800aad0:	699b      	ldr	r3, [r3, #24]
 800aad2:	f003 030f 	and.w	r3, r3, #15
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d208      	bcs.n	800aaec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aada:	4b11      	ldr	r3, [pc, #68]	; (800ab20 <HAL_RCC_ClockConfig+0x244>)
 800aadc:	699b      	ldr	r3, [r3, #24]
 800aade:	f023 020f 	bic.w	r2, r3, #15
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	68db      	ldr	r3, [r3, #12]
 800aae6:	490e      	ldr	r1, [pc, #56]	; (800ab20 <HAL_RCC_ClockConfig+0x244>)
 800aae8:	4313      	orrs	r3, r2
 800aaea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800aaec:	4b0b      	ldr	r3, [pc, #44]	; (800ab1c <HAL_RCC_ClockConfig+0x240>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f003 030f 	and.w	r3, r3, #15
 800aaf4:	683a      	ldr	r2, [r7, #0]
 800aaf6:	429a      	cmp	r2, r3
 800aaf8:	d214      	bcs.n	800ab24 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aafa:	4b08      	ldr	r3, [pc, #32]	; (800ab1c <HAL_RCC_ClockConfig+0x240>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f023 020f 	bic.w	r2, r3, #15
 800ab02:	4906      	ldr	r1, [pc, #24]	; (800ab1c <HAL_RCC_ClockConfig+0x240>)
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	4313      	orrs	r3, r2
 800ab08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab0a:	4b04      	ldr	r3, [pc, #16]	; (800ab1c <HAL_RCC_ClockConfig+0x240>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f003 030f 	and.w	r3, r3, #15
 800ab12:	683a      	ldr	r2, [r7, #0]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d005      	beq.n	800ab24 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	e086      	b.n	800ac2a <HAL_RCC_ClockConfig+0x34e>
 800ab1c:	52002000 	.word	0x52002000
 800ab20:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f003 0304 	and.w	r3, r3, #4
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d010      	beq.n	800ab52 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	691a      	ldr	r2, [r3, #16]
 800ab34:	4b3f      	ldr	r3, [pc, #252]	; (800ac34 <HAL_RCC_ClockConfig+0x358>)
 800ab36:	699b      	ldr	r3, [r3, #24]
 800ab38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d208      	bcs.n	800ab52 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ab40:	4b3c      	ldr	r3, [pc, #240]	; (800ac34 <HAL_RCC_ClockConfig+0x358>)
 800ab42:	699b      	ldr	r3, [r3, #24]
 800ab44:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	691b      	ldr	r3, [r3, #16]
 800ab4c:	4939      	ldr	r1, [pc, #228]	; (800ac34 <HAL_RCC_ClockConfig+0x358>)
 800ab4e:	4313      	orrs	r3, r2
 800ab50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f003 0308 	and.w	r3, r3, #8
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d010      	beq.n	800ab80 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	695a      	ldr	r2, [r3, #20]
 800ab62:	4b34      	ldr	r3, [pc, #208]	; (800ac34 <HAL_RCC_ClockConfig+0x358>)
 800ab64:	69db      	ldr	r3, [r3, #28]
 800ab66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d208      	bcs.n	800ab80 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ab6e:	4b31      	ldr	r3, [pc, #196]	; (800ac34 <HAL_RCC_ClockConfig+0x358>)
 800ab70:	69db      	ldr	r3, [r3, #28]
 800ab72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	695b      	ldr	r3, [r3, #20]
 800ab7a:	492e      	ldr	r1, [pc, #184]	; (800ac34 <HAL_RCC_ClockConfig+0x358>)
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f003 0310 	and.w	r3, r3, #16
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d010      	beq.n	800abae <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	699a      	ldr	r2, [r3, #24]
 800ab90:	4b28      	ldr	r3, [pc, #160]	; (800ac34 <HAL_RCC_ClockConfig+0x358>)
 800ab92:	69db      	ldr	r3, [r3, #28]
 800ab94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d208      	bcs.n	800abae <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ab9c:	4b25      	ldr	r3, [pc, #148]	; (800ac34 <HAL_RCC_ClockConfig+0x358>)
 800ab9e:	69db      	ldr	r3, [r3, #28]
 800aba0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	699b      	ldr	r3, [r3, #24]
 800aba8:	4922      	ldr	r1, [pc, #136]	; (800ac34 <HAL_RCC_ClockConfig+0x358>)
 800abaa:	4313      	orrs	r3, r2
 800abac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f003 0320 	and.w	r3, r3, #32
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d010      	beq.n	800abdc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	69da      	ldr	r2, [r3, #28]
 800abbe:	4b1d      	ldr	r3, [pc, #116]	; (800ac34 <HAL_RCC_ClockConfig+0x358>)
 800abc0:	6a1b      	ldr	r3, [r3, #32]
 800abc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800abc6:	429a      	cmp	r2, r3
 800abc8:	d208      	bcs.n	800abdc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800abca:	4b1a      	ldr	r3, [pc, #104]	; (800ac34 <HAL_RCC_ClockConfig+0x358>)
 800abcc:	6a1b      	ldr	r3, [r3, #32]
 800abce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	69db      	ldr	r3, [r3, #28]
 800abd6:	4917      	ldr	r1, [pc, #92]	; (800ac34 <HAL_RCC_ClockConfig+0x358>)
 800abd8:	4313      	orrs	r3, r2
 800abda:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800abdc:	f000 f89e 	bl	800ad1c <HAL_RCC_GetSysClockFreq>
 800abe0:	4602      	mov	r2, r0
 800abe2:	4b14      	ldr	r3, [pc, #80]	; (800ac34 <HAL_RCC_ClockConfig+0x358>)
 800abe4:	699b      	ldr	r3, [r3, #24]
 800abe6:	0a1b      	lsrs	r3, r3, #8
 800abe8:	f003 030f 	and.w	r3, r3, #15
 800abec:	4912      	ldr	r1, [pc, #72]	; (800ac38 <HAL_RCC_ClockConfig+0x35c>)
 800abee:	5ccb      	ldrb	r3, [r1, r3]
 800abf0:	f003 031f 	and.w	r3, r3, #31
 800abf4:	fa22 f303 	lsr.w	r3, r2, r3
 800abf8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800abfa:	4b0e      	ldr	r3, [pc, #56]	; (800ac34 <HAL_RCC_ClockConfig+0x358>)
 800abfc:	699b      	ldr	r3, [r3, #24]
 800abfe:	f003 030f 	and.w	r3, r3, #15
 800ac02:	4a0d      	ldr	r2, [pc, #52]	; (800ac38 <HAL_RCC_ClockConfig+0x35c>)
 800ac04:	5cd3      	ldrb	r3, [r2, r3]
 800ac06:	f003 031f 	and.w	r3, r3, #31
 800ac0a:	693a      	ldr	r2, [r7, #16]
 800ac0c:	fa22 f303 	lsr.w	r3, r2, r3
 800ac10:	4a0a      	ldr	r2, [pc, #40]	; (800ac3c <HAL_RCC_ClockConfig+0x360>)
 800ac12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ac14:	4a0a      	ldr	r2, [pc, #40]	; (800ac40 <HAL_RCC_ClockConfig+0x364>)
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800ac1a:	4b0a      	ldr	r3, [pc, #40]	; (800ac44 <HAL_RCC_ClockConfig+0x368>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f7f9 fb02 	bl	8004228 <HAL_InitTick>
 800ac24:	4603      	mov	r3, r0
 800ac26:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ac28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3718      	adds	r7, #24
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
 800ac32:	bf00      	nop
 800ac34:	58024400 	.word	0x58024400
 800ac38:	080104e0 	.word	0x080104e0
 800ac3c:	24000048 	.word	0x24000048
 800ac40:	24000044 	.word	0x24000044
 800ac44:	2400004c 	.word	0x2400004c

0800ac48 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b08c      	sub	sp, #48	; 0x30
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	60f8      	str	r0, [r7, #12]
 800ac50:	60b9      	str	r1, [r7, #8]
 800ac52:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d12a      	bne.n	800acb0 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800ac5a:	4b2d      	ldr	r3, [pc, #180]	; (800ad10 <HAL_RCC_MCOConfig+0xc8>)
 800ac5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ac60:	4a2b      	ldr	r2, [pc, #172]	; (800ad10 <HAL_RCC_MCOConfig+0xc8>)
 800ac62:	f043 0301 	orr.w	r3, r3, #1
 800ac66:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800ac6a:	4b29      	ldr	r3, [pc, #164]	; (800ad10 <HAL_RCC_MCOConfig+0xc8>)
 800ac6c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ac70:	f003 0301 	and.w	r3, r3, #1
 800ac74:	61bb      	str	r3, [r7, #24]
 800ac76:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800ac78:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac7e:	2302      	movs	r3, #2
 800ac80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac82:	2303      	movs	r3, #3
 800ac84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac86:	2300      	movs	r3, #0
 800ac88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800ac8e:	f107 031c 	add.w	r3, r7, #28
 800ac92:	4619      	mov	r1, r3
 800ac94:	481f      	ldr	r0, [pc, #124]	; (800ad14 <HAL_RCC_MCOConfig+0xcc>)
 800ac96:	f7fd fcdb 	bl	8008650 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800ac9a:	4b1d      	ldr	r3, [pc, #116]	; (800ad10 <HAL_RCC_MCOConfig+0xc8>)
 800ac9c:	691b      	ldr	r3, [r3, #16]
 800ac9e:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800aca2:	68b9      	ldr	r1, [r7, #8]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	430b      	orrs	r3, r1
 800aca8:	4919      	ldr	r1, [pc, #100]	; (800ad10 <HAL_RCC_MCOConfig+0xc8>)
 800acaa:	4313      	orrs	r3, r2
 800acac:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800acae:	e02a      	b.n	800ad06 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800acb0:	4b17      	ldr	r3, [pc, #92]	; (800ad10 <HAL_RCC_MCOConfig+0xc8>)
 800acb2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800acb6:	4a16      	ldr	r2, [pc, #88]	; (800ad10 <HAL_RCC_MCOConfig+0xc8>)
 800acb8:	f043 0304 	orr.w	r3, r3, #4
 800acbc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800acc0:	4b13      	ldr	r3, [pc, #76]	; (800ad10 <HAL_RCC_MCOConfig+0xc8>)
 800acc2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800acc6:	f003 0304 	and.w	r3, r3, #4
 800acca:	617b      	str	r3, [r7, #20]
 800accc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800acce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800acd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800acd4:	2302      	movs	r3, #2
 800acd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800acd8:	2303      	movs	r3, #3
 800acda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acdc:	2300      	movs	r3, #0
 800acde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800ace0:	2300      	movs	r3, #0
 800ace2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800ace4:	f107 031c 	add.w	r3, r7, #28
 800ace8:	4619      	mov	r1, r3
 800acea:	480b      	ldr	r0, [pc, #44]	; (800ad18 <HAL_RCC_MCOConfig+0xd0>)
 800acec:	f7fd fcb0 	bl	8008650 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800acf0:	4b07      	ldr	r3, [pc, #28]	; (800ad10 <HAL_RCC_MCOConfig+0xc8>)
 800acf2:	691b      	ldr	r3, [r3, #16]
 800acf4:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	01d9      	lsls	r1, r3, #7
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	430b      	orrs	r3, r1
 800ad00:	4903      	ldr	r1, [pc, #12]	; (800ad10 <HAL_RCC_MCOConfig+0xc8>)
 800ad02:	4313      	orrs	r3, r2
 800ad04:	610b      	str	r3, [r1, #16]
}
 800ad06:	bf00      	nop
 800ad08:	3730      	adds	r7, #48	; 0x30
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}
 800ad0e:	bf00      	nop
 800ad10:	58024400 	.word	0x58024400
 800ad14:	58020000 	.word	0x58020000
 800ad18:	58020800 	.word	0x58020800

0800ad1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b089      	sub	sp, #36	; 0x24
 800ad20:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ad22:	4bb3      	ldr	r3, [pc, #716]	; (800aff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad24:	691b      	ldr	r3, [r3, #16]
 800ad26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ad2a:	2b18      	cmp	r3, #24
 800ad2c:	f200 8155 	bhi.w	800afda <HAL_RCC_GetSysClockFreq+0x2be>
 800ad30:	a201      	add	r2, pc, #4	; (adr r2, 800ad38 <HAL_RCC_GetSysClockFreq+0x1c>)
 800ad32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad36:	bf00      	nop
 800ad38:	0800ad9d 	.word	0x0800ad9d
 800ad3c:	0800afdb 	.word	0x0800afdb
 800ad40:	0800afdb 	.word	0x0800afdb
 800ad44:	0800afdb 	.word	0x0800afdb
 800ad48:	0800afdb 	.word	0x0800afdb
 800ad4c:	0800afdb 	.word	0x0800afdb
 800ad50:	0800afdb 	.word	0x0800afdb
 800ad54:	0800afdb 	.word	0x0800afdb
 800ad58:	0800adc3 	.word	0x0800adc3
 800ad5c:	0800afdb 	.word	0x0800afdb
 800ad60:	0800afdb 	.word	0x0800afdb
 800ad64:	0800afdb 	.word	0x0800afdb
 800ad68:	0800afdb 	.word	0x0800afdb
 800ad6c:	0800afdb 	.word	0x0800afdb
 800ad70:	0800afdb 	.word	0x0800afdb
 800ad74:	0800afdb 	.word	0x0800afdb
 800ad78:	0800adc9 	.word	0x0800adc9
 800ad7c:	0800afdb 	.word	0x0800afdb
 800ad80:	0800afdb 	.word	0x0800afdb
 800ad84:	0800afdb 	.word	0x0800afdb
 800ad88:	0800afdb 	.word	0x0800afdb
 800ad8c:	0800afdb 	.word	0x0800afdb
 800ad90:	0800afdb 	.word	0x0800afdb
 800ad94:	0800afdb 	.word	0x0800afdb
 800ad98:	0800adcf 	.word	0x0800adcf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad9c:	4b94      	ldr	r3, [pc, #592]	; (800aff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f003 0320 	and.w	r3, r3, #32
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d009      	beq.n	800adbc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ada8:	4b91      	ldr	r3, [pc, #580]	; (800aff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	08db      	lsrs	r3, r3, #3
 800adae:	f003 0303 	and.w	r3, r3, #3
 800adb2:	4a90      	ldr	r2, [pc, #576]	; (800aff4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800adb4:	fa22 f303 	lsr.w	r3, r2, r3
 800adb8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800adba:	e111      	b.n	800afe0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800adbc:	4b8d      	ldr	r3, [pc, #564]	; (800aff4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800adbe:	61bb      	str	r3, [r7, #24]
      break;
 800adc0:	e10e      	b.n	800afe0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800adc2:	4b8d      	ldr	r3, [pc, #564]	; (800aff8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800adc4:	61bb      	str	r3, [r7, #24]
      break;
 800adc6:	e10b      	b.n	800afe0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800adc8:	4b8c      	ldr	r3, [pc, #560]	; (800affc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800adca:	61bb      	str	r3, [r7, #24]
      break;
 800adcc:	e108      	b.n	800afe0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800adce:	4b88      	ldr	r3, [pc, #544]	; (800aff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800add0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800add2:	f003 0303 	and.w	r3, r3, #3
 800add6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800add8:	4b85      	ldr	r3, [pc, #532]	; (800aff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800adda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800addc:	091b      	lsrs	r3, r3, #4
 800adde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ade2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ade4:	4b82      	ldr	r3, [pc, #520]	; (800aff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ade6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ade8:	f003 0301 	and.w	r3, r3, #1
 800adec:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800adee:	4b80      	ldr	r3, [pc, #512]	; (800aff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800adf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adf2:	08db      	lsrs	r3, r3, #3
 800adf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800adf8:	68fa      	ldr	r2, [r7, #12]
 800adfa:	fb02 f303 	mul.w	r3, r2, r3
 800adfe:	ee07 3a90 	vmov	s15, r3
 800ae02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae06:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	f000 80e1 	beq.w	800afd4 <HAL_RCC_GetSysClockFreq+0x2b8>
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	2b02      	cmp	r3, #2
 800ae16:	f000 8083 	beq.w	800af20 <HAL_RCC_GetSysClockFreq+0x204>
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	2b02      	cmp	r3, #2
 800ae1e:	f200 80a1 	bhi.w	800af64 <HAL_RCC_GetSysClockFreq+0x248>
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d003      	beq.n	800ae30 <HAL_RCC_GetSysClockFreq+0x114>
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	d056      	beq.n	800aedc <HAL_RCC_GetSysClockFreq+0x1c0>
 800ae2e:	e099      	b.n	800af64 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae30:	4b6f      	ldr	r3, [pc, #444]	; (800aff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f003 0320 	and.w	r3, r3, #32
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d02d      	beq.n	800ae98 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae3c:	4b6c      	ldr	r3, [pc, #432]	; (800aff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	08db      	lsrs	r3, r3, #3
 800ae42:	f003 0303 	and.w	r3, r3, #3
 800ae46:	4a6b      	ldr	r2, [pc, #428]	; (800aff4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ae48:	fa22 f303 	lsr.w	r3, r2, r3
 800ae4c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	ee07 3a90 	vmov	s15, r3
 800ae54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	ee07 3a90 	vmov	s15, r3
 800ae5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae66:	4b62      	ldr	r3, [pc, #392]	; (800aff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae6e:	ee07 3a90 	vmov	s15, r3
 800ae72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae76:	ed97 6a02 	vldr	s12, [r7, #8]
 800ae7a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b000 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ae7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae92:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800ae96:	e087      	b.n	800afa8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	ee07 3a90 	vmov	s15, r3
 800ae9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aea2:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b004 <HAL_RCC_GetSysClockFreq+0x2e8>
 800aea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeaa:	4b51      	ldr	r3, [pc, #324]	; (800aff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aeac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeb2:	ee07 3a90 	vmov	s15, r3
 800aeb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeba:	ed97 6a02 	vldr	s12, [r7, #8]
 800aebe:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b000 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aeca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aed6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aeda:	e065      	b.n	800afa8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	ee07 3a90 	vmov	s15, r3
 800aee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aee6:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b008 <HAL_RCC_GetSysClockFreq+0x2ec>
 800aeea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeee:	4b40      	ldr	r3, [pc, #256]	; (800aff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aef6:	ee07 3a90 	vmov	s15, r3
 800aefa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aefe:	ed97 6a02 	vldr	s12, [r7, #8]
 800af02:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b000 <HAL_RCC_GetSysClockFreq+0x2e4>
 800af06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800af1e:	e043      	b.n	800afa8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	ee07 3a90 	vmov	s15, r3
 800af26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af2a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b00c <HAL_RCC_GetSysClockFreq+0x2f0>
 800af2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af32:	4b2f      	ldr	r3, [pc, #188]	; (800aff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af3a:	ee07 3a90 	vmov	s15, r3
 800af3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af42:	ed97 6a02 	vldr	s12, [r7, #8]
 800af46:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b000 <HAL_RCC_GetSysClockFreq+0x2e4>
 800af4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800af62:	e021      	b.n	800afa8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	ee07 3a90 	vmov	s15, r3
 800af6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af6e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b008 <HAL_RCC_GetSysClockFreq+0x2ec>
 800af72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af76:	4b1e      	ldr	r3, [pc, #120]	; (800aff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af7e:	ee07 3a90 	vmov	s15, r3
 800af82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af86:	ed97 6a02 	vldr	s12, [r7, #8]
 800af8a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b000 <HAL_RCC_GetSysClockFreq+0x2e4>
 800af8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afa2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800afa6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800afa8:	4b11      	ldr	r3, [pc, #68]	; (800aff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afac:	0a5b      	lsrs	r3, r3, #9
 800afae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afb2:	3301      	adds	r3, #1
 800afb4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	ee07 3a90 	vmov	s15, r3
 800afbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800afc0:	edd7 6a07 	vldr	s13, [r7, #28]
 800afc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afcc:	ee17 3a90 	vmov	r3, s15
 800afd0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800afd2:	e005      	b.n	800afe0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800afd4:	2300      	movs	r3, #0
 800afd6:	61bb      	str	r3, [r7, #24]
      break;
 800afd8:	e002      	b.n	800afe0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800afda:	4b07      	ldr	r3, [pc, #28]	; (800aff8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800afdc:	61bb      	str	r3, [r7, #24]
      break;
 800afde:	bf00      	nop
  }

  return sysclockfreq;
 800afe0:	69bb      	ldr	r3, [r7, #24]
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3724      	adds	r7, #36	; 0x24
 800afe6:	46bd      	mov	sp, r7
 800afe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afec:	4770      	bx	lr
 800afee:	bf00      	nop
 800aff0:	58024400 	.word	0x58024400
 800aff4:	03d09000 	.word	0x03d09000
 800aff8:	003d0900 	.word	0x003d0900
 800affc:	016e3600 	.word	0x016e3600
 800b000:	46000000 	.word	0x46000000
 800b004:	4c742400 	.word	0x4c742400
 800b008:	4a742400 	.word	0x4a742400
 800b00c:	4bb71b00 	.word	0x4bb71b00

0800b010 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b082      	sub	sp, #8
 800b014:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800b016:	f7ff fe81 	bl	800ad1c <HAL_RCC_GetSysClockFreq>
 800b01a:	4602      	mov	r2, r0
 800b01c:	4b10      	ldr	r3, [pc, #64]	; (800b060 <HAL_RCC_GetHCLKFreq+0x50>)
 800b01e:	699b      	ldr	r3, [r3, #24]
 800b020:	0a1b      	lsrs	r3, r3, #8
 800b022:	f003 030f 	and.w	r3, r3, #15
 800b026:	490f      	ldr	r1, [pc, #60]	; (800b064 <HAL_RCC_GetHCLKFreq+0x54>)
 800b028:	5ccb      	ldrb	r3, [r1, r3]
 800b02a:	f003 031f 	and.w	r3, r3, #31
 800b02e:	fa22 f303 	lsr.w	r3, r2, r3
 800b032:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b034:	4b0a      	ldr	r3, [pc, #40]	; (800b060 <HAL_RCC_GetHCLKFreq+0x50>)
 800b036:	699b      	ldr	r3, [r3, #24]
 800b038:	f003 030f 	and.w	r3, r3, #15
 800b03c:	4a09      	ldr	r2, [pc, #36]	; (800b064 <HAL_RCC_GetHCLKFreq+0x54>)
 800b03e:	5cd3      	ldrb	r3, [r2, r3]
 800b040:	f003 031f 	and.w	r3, r3, #31
 800b044:	687a      	ldr	r2, [r7, #4]
 800b046:	fa22 f303 	lsr.w	r3, r2, r3
 800b04a:	4a07      	ldr	r2, [pc, #28]	; (800b068 <HAL_RCC_GetHCLKFreq+0x58>)
 800b04c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b04e:	4a07      	ldr	r2, [pc, #28]	; (800b06c <HAL_RCC_GetHCLKFreq+0x5c>)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b054:	4b04      	ldr	r3, [pc, #16]	; (800b068 <HAL_RCC_GetHCLKFreq+0x58>)
 800b056:	681b      	ldr	r3, [r3, #0]
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3708      	adds	r7, #8
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}
 800b060:	58024400 	.word	0x58024400
 800b064:	080104e0 	.word	0x080104e0
 800b068:	24000048 	.word	0x24000048
 800b06c:	24000044 	.word	0x24000044

0800b070 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800b074:	f7ff ffcc 	bl	800b010 <HAL_RCC_GetHCLKFreq>
 800b078:	4602      	mov	r2, r0
 800b07a:	4b06      	ldr	r3, [pc, #24]	; (800b094 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b07c:	69db      	ldr	r3, [r3, #28]
 800b07e:	091b      	lsrs	r3, r3, #4
 800b080:	f003 0307 	and.w	r3, r3, #7
 800b084:	4904      	ldr	r1, [pc, #16]	; (800b098 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b086:	5ccb      	ldrb	r3, [r1, r3]
 800b088:	f003 031f 	and.w	r3, r3, #31
 800b08c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b090:	4618      	mov	r0, r3
 800b092:	bd80      	pop	{r7, pc}
 800b094:	58024400 	.word	0x58024400
 800b098:	080104e0 	.word	0x080104e0

0800b09c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800b0a0:	f7ff ffb6 	bl	800b010 <HAL_RCC_GetHCLKFreq>
 800b0a4:	4602      	mov	r2, r0
 800b0a6:	4b06      	ldr	r3, [pc, #24]	; (800b0c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b0a8:	69db      	ldr	r3, [r3, #28]
 800b0aa:	0a1b      	lsrs	r3, r3, #8
 800b0ac:	f003 0307 	and.w	r3, r3, #7
 800b0b0:	4904      	ldr	r1, [pc, #16]	; (800b0c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b0b2:	5ccb      	ldrb	r3, [r1, r3]
 800b0b4:	f003 031f 	and.w	r3, r3, #31
 800b0b8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	bd80      	pop	{r7, pc}
 800b0c0:	58024400 	.word	0x58024400
 800b0c4:	080104e0 	.word	0x080104e0

0800b0c8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b0c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b0cc:	b0c8      	sub	sp, #288	; 0x120
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b0da:	2300      	movs	r3, #0
 800b0dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b0e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b0ec:	2500      	movs	r5, #0
 800b0ee:	ea54 0305 	orrs.w	r3, r4, r5
 800b0f2:	d049      	beq.n	800b188 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b0f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b0f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b0fe:	d02f      	beq.n	800b160 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b100:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b104:	d828      	bhi.n	800b158 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b106:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b10a:	d01a      	beq.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b10c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b110:	d822      	bhi.n	800b158 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b112:	2b00      	cmp	r3, #0
 800b114:	d003      	beq.n	800b11e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b116:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b11a:	d007      	beq.n	800b12c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b11c:	e01c      	b.n	800b158 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b11e:	4ba7      	ldr	r3, [pc, #668]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b122:	4aa6      	ldr	r2, [pc, #664]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b128:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b12a:	e01a      	b.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b12c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b130:	3308      	adds	r3, #8
 800b132:	2102      	movs	r1, #2
 800b134:	4618      	mov	r0, r3
 800b136:	f001 fc43 	bl	800c9c0 <RCCEx_PLL2_Config>
 800b13a:	4603      	mov	r3, r0
 800b13c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b140:	e00f      	b.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b142:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b146:	3328      	adds	r3, #40	; 0x28
 800b148:	2102      	movs	r1, #2
 800b14a:	4618      	mov	r0, r3
 800b14c:	f001 fcea 	bl	800cb24 <RCCEx_PLL3_Config>
 800b150:	4603      	mov	r3, r0
 800b152:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b156:	e004      	b.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b158:	2301      	movs	r3, #1
 800b15a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b15e:	e000      	b.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b160:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b162:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b166:	2b00      	cmp	r3, #0
 800b168:	d10a      	bne.n	800b180 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b16a:	4b94      	ldr	r3, [pc, #592]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b16c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b16e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b172:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b178:	4a90      	ldr	r2, [pc, #576]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b17a:	430b      	orrs	r3, r1
 800b17c:	6513      	str	r3, [r2, #80]	; 0x50
 800b17e:	e003      	b.n	800b188 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b180:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b184:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b188:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b190:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b194:	f04f 0900 	mov.w	r9, #0
 800b198:	ea58 0309 	orrs.w	r3, r8, r9
 800b19c:	d047      	beq.n	800b22e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b19e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b1a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1a4:	2b04      	cmp	r3, #4
 800b1a6:	d82a      	bhi.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b1a8:	a201      	add	r2, pc, #4	; (adr r2, 800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b1aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ae:	bf00      	nop
 800b1b0:	0800b1c5 	.word	0x0800b1c5
 800b1b4:	0800b1d3 	.word	0x0800b1d3
 800b1b8:	0800b1e9 	.word	0x0800b1e9
 800b1bc:	0800b207 	.word	0x0800b207
 800b1c0:	0800b207 	.word	0x0800b207
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1c4:	4b7d      	ldr	r3, [pc, #500]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1c8:	4a7c      	ldr	r2, [pc, #496]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b1ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b1d0:	e01a      	b.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b1d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b1d6:	3308      	adds	r3, #8
 800b1d8:	2100      	movs	r1, #0
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f001 fbf0 	bl	800c9c0 <RCCEx_PLL2_Config>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b1e6:	e00f      	b.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b1e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b1ec:	3328      	adds	r3, #40	; 0x28
 800b1ee:	2100      	movs	r1, #0
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f001 fc97 	bl	800cb24 <RCCEx_PLL3_Config>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b1fc:	e004      	b.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1fe:	2301      	movs	r3, #1
 800b200:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b204:	e000      	b.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b206:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b208:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d10a      	bne.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b210:	4b6a      	ldr	r3, [pc, #424]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b214:	f023 0107 	bic.w	r1, r3, #7
 800b218:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b21c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b21e:	4a67      	ldr	r2, [pc, #412]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b220:	430b      	orrs	r3, r1
 800b222:	6513      	str	r3, [r2, #80]	; 0x50
 800b224:	e003      	b.n	800b22e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b226:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b22a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800b22e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b236:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b23a:	f04f 0b00 	mov.w	fp, #0
 800b23e:	ea5a 030b 	orrs.w	r3, sl, fp
 800b242:	d054      	beq.n	800b2ee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800b244:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b24a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b24e:	d036      	beq.n	800b2be <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800b250:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b254:	d82f      	bhi.n	800b2b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b25a:	d032      	beq.n	800b2c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b25c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b260:	d829      	bhi.n	800b2b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b262:	2bc0      	cmp	r3, #192	; 0xc0
 800b264:	d02f      	beq.n	800b2c6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800b266:	2bc0      	cmp	r3, #192	; 0xc0
 800b268:	d825      	bhi.n	800b2b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b26a:	2b80      	cmp	r3, #128	; 0x80
 800b26c:	d018      	beq.n	800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800b26e:	2b80      	cmp	r3, #128	; 0x80
 800b270:	d821      	bhi.n	800b2b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b272:	2b00      	cmp	r3, #0
 800b274:	d002      	beq.n	800b27c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800b276:	2b40      	cmp	r3, #64	; 0x40
 800b278:	d007      	beq.n	800b28a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800b27a:	e01c      	b.n	800b2b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b27c:	4b4f      	ldr	r3, [pc, #316]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b280:	4a4e      	ldr	r2, [pc, #312]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b282:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b286:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b288:	e01e      	b.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b28a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b28e:	3308      	adds	r3, #8
 800b290:	2100      	movs	r1, #0
 800b292:	4618      	mov	r0, r3
 800b294:	f001 fb94 	bl	800c9c0 <RCCEx_PLL2_Config>
 800b298:	4603      	mov	r3, r0
 800b29a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b29e:	e013      	b.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b2a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b2a4:	3328      	adds	r3, #40	; 0x28
 800b2a6:	2100      	movs	r1, #0
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f001 fc3b 	bl	800cb24 <RCCEx_PLL3_Config>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b2b4:	e008      	b.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b2bc:	e004      	b.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b2be:	bf00      	nop
 800b2c0:	e002      	b.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b2c2:	bf00      	nop
 800b2c4:	e000      	b.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b2c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d10a      	bne.n	800b2e6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800b2d0:	4b3a      	ldr	r3, [pc, #232]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b2d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2d4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b2d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b2dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2de:	4a37      	ldr	r2, [pc, #220]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b2e0:	430b      	orrs	r3, r1
 800b2e2:	6513      	str	r3, [r2, #80]	; 0x50
 800b2e4:	e003      	b.n	800b2ee <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b2ea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800b2ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b2fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b2fe:	2300      	movs	r3, #0
 800b300:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b304:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b308:	460b      	mov	r3, r1
 800b30a:	4313      	orrs	r3, r2
 800b30c:	d05c      	beq.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800b30e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b314:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800b318:	d03b      	beq.n	800b392 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b31a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800b31e:	d834      	bhi.n	800b38a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b320:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b324:	d037      	beq.n	800b396 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800b326:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b32a:	d82e      	bhi.n	800b38a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b32c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b330:	d033      	beq.n	800b39a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b332:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b336:	d828      	bhi.n	800b38a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b33c:	d01a      	beq.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800b33e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b342:	d822      	bhi.n	800b38a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b344:	2b00      	cmp	r3, #0
 800b346:	d003      	beq.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800b348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b34c:	d007      	beq.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0x296>
 800b34e:	e01c      	b.n	800b38a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b350:	4b1a      	ldr	r3, [pc, #104]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b354:	4a19      	ldr	r2, [pc, #100]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b356:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b35a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b35c:	e01e      	b.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b35e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b362:	3308      	adds	r3, #8
 800b364:	2100      	movs	r1, #0
 800b366:	4618      	mov	r0, r3
 800b368:	f001 fb2a 	bl	800c9c0 <RCCEx_PLL2_Config>
 800b36c:	4603      	mov	r3, r0
 800b36e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b372:	e013      	b.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b374:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b378:	3328      	adds	r3, #40	; 0x28
 800b37a:	2100      	movs	r1, #0
 800b37c:	4618      	mov	r0, r3
 800b37e:	f001 fbd1 	bl	800cb24 <RCCEx_PLL3_Config>
 800b382:	4603      	mov	r3, r0
 800b384:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b388:	e008      	b.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b38a:	2301      	movs	r3, #1
 800b38c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b390:	e004      	b.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b392:	bf00      	nop
 800b394:	e002      	b.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b396:	bf00      	nop
 800b398:	e000      	b.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b39a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b39c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d10d      	bne.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800b3a4:	4b05      	ldr	r3, [pc, #20]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b3a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3a8:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800b3ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b3b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b3b2:	4a02      	ldr	r2, [pc, #8]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b3b4:	430b      	orrs	r3, r1
 800b3b6:	6513      	str	r3, [r2, #80]	; 0x50
 800b3b8:	e006      	b.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800b3ba:	bf00      	nop
 800b3bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b3c4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b3c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b3d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b3d8:	2300      	movs	r3, #0
 800b3da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b3de:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b3e2:	460b      	mov	r3, r1
 800b3e4:	4313      	orrs	r3, r2
 800b3e6:	d03a      	beq.n	800b45e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800b3e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b3ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3ee:	2b30      	cmp	r3, #48	; 0x30
 800b3f0:	d01f      	beq.n	800b432 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800b3f2:	2b30      	cmp	r3, #48	; 0x30
 800b3f4:	d819      	bhi.n	800b42a <HAL_RCCEx_PeriphCLKConfig+0x362>
 800b3f6:	2b20      	cmp	r3, #32
 800b3f8:	d00c      	beq.n	800b414 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800b3fa:	2b20      	cmp	r3, #32
 800b3fc:	d815      	bhi.n	800b42a <HAL_RCCEx_PeriphCLKConfig+0x362>
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d019      	beq.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800b402:	2b10      	cmp	r3, #16
 800b404:	d111      	bne.n	800b42a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b406:	4bae      	ldr	r3, [pc, #696]	; (800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b40a:	4aad      	ldr	r2, [pc, #692]	; (800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b40c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b410:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b412:	e011      	b.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b414:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b418:	3308      	adds	r3, #8
 800b41a:	2102      	movs	r1, #2
 800b41c:	4618      	mov	r0, r3
 800b41e:	f001 facf 	bl	800c9c0 <RCCEx_PLL2_Config>
 800b422:	4603      	mov	r3, r0
 800b424:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b428:	e006      	b.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b42a:	2301      	movs	r3, #1
 800b42c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b430:	e002      	b.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800b432:	bf00      	nop
 800b434:	e000      	b.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800b436:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b438:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d10a      	bne.n	800b456 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b440:	4b9f      	ldr	r3, [pc, #636]	; (800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b444:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b448:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b44c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b44e:	4a9c      	ldr	r2, [pc, #624]	; (800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b450:	430b      	orrs	r3, r1
 800b452:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b454:	e003      	b.n	800b45e <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b456:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b45a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b45e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b466:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b46a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b46e:	2300      	movs	r3, #0
 800b470:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b474:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b478:	460b      	mov	r3, r1
 800b47a:	4313      	orrs	r3, r2
 800b47c:	d051      	beq.n	800b522 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b47e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b482:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b484:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b488:	d035      	beq.n	800b4f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800b48a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b48e:	d82e      	bhi.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b490:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b494:	d031      	beq.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0x432>
 800b496:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b49a:	d828      	bhi.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b49c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4a0:	d01a      	beq.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800b4a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4a6:	d822      	bhi.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d003      	beq.n	800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800b4ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4b0:	d007      	beq.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800b4b2:	e01c      	b.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4b4:	4b82      	ldr	r3, [pc, #520]	; (800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b4b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4b8:	4a81      	ldr	r2, [pc, #516]	; (800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b4ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b4c0:	e01c      	b.n	800b4fc <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b4c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b4c6:	3308      	adds	r3, #8
 800b4c8:	2100      	movs	r1, #0
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f001 fa78 	bl	800c9c0 <RCCEx_PLL2_Config>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b4d6:	e011      	b.n	800b4fc <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b4d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b4dc:	3328      	adds	r3, #40	; 0x28
 800b4de:	2100      	movs	r1, #0
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f001 fb1f 	bl	800cb24 <RCCEx_PLL3_Config>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b4ec:	e006      	b.n	800b4fc <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b4f4:	e002      	b.n	800b4fc <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800b4f6:	bf00      	nop
 800b4f8:	e000      	b.n	800b4fc <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800b4fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b500:	2b00      	cmp	r3, #0
 800b502:	d10a      	bne.n	800b51a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b504:	4b6e      	ldr	r3, [pc, #440]	; (800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b508:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b50c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b510:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b512:	4a6b      	ldr	r2, [pc, #428]	; (800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b514:	430b      	orrs	r3, r1
 800b516:	6513      	str	r3, [r2, #80]	; 0x50
 800b518:	e003      	b.n	800b522 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b51a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b51e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b522:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b52e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b532:	2300      	movs	r3, #0
 800b534:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b538:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b53c:	460b      	mov	r3, r1
 800b53e:	4313      	orrs	r3, r2
 800b540:	d053      	beq.n	800b5ea <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b542:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b546:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b548:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b54c:	d033      	beq.n	800b5b6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800b54e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b552:	d82c      	bhi.n	800b5ae <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b554:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b558:	d02f      	beq.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800b55a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b55e:	d826      	bhi.n	800b5ae <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b560:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b564:	d02b      	beq.n	800b5be <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b566:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b56a:	d820      	bhi.n	800b5ae <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b56c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b570:	d012      	beq.n	800b598 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b572:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b576:	d81a      	bhi.n	800b5ae <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d022      	beq.n	800b5c2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800b57c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b580:	d115      	bne.n	800b5ae <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b582:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b586:	3308      	adds	r3, #8
 800b588:	2101      	movs	r1, #1
 800b58a:	4618      	mov	r0, r3
 800b58c:	f001 fa18 	bl	800c9c0 <RCCEx_PLL2_Config>
 800b590:	4603      	mov	r3, r0
 800b592:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b596:	e015      	b.n	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b598:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b59c:	3328      	adds	r3, #40	; 0x28
 800b59e:	2101      	movs	r1, #1
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f001 fabf 	bl	800cb24 <RCCEx_PLL3_Config>
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b5ac:	e00a      	b.n	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b5b4:	e006      	b.n	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800b5b6:	bf00      	nop
 800b5b8:	e004      	b.n	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800b5ba:	bf00      	nop
 800b5bc:	e002      	b.n	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800b5be:	bf00      	nop
 800b5c0:	e000      	b.n	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800b5c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d10a      	bne.n	800b5e2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b5cc:	4b3c      	ldr	r3, [pc, #240]	; (800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b5ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5d0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b5d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b5d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b5da:	4a39      	ldr	r2, [pc, #228]	; (800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b5dc:	430b      	orrs	r3, r1
 800b5de:	6513      	str	r3, [r2, #80]	; 0x50
 800b5e0:	e003      	b.n	800b5ea <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b5e6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b5ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b5f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b600:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b604:	460b      	mov	r3, r1
 800b606:	4313      	orrs	r3, r2
 800b608:	d060      	beq.n	800b6cc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b60a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b60e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b612:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800b616:	d039      	beq.n	800b68c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800b618:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800b61c:	d832      	bhi.n	800b684 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b61e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b622:	d035      	beq.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800b624:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b628:	d82c      	bhi.n	800b684 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b62a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b62e:	d031      	beq.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800b630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b634:	d826      	bhi.n	800b684 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b636:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b63a:	d02d      	beq.n	800b698 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800b63c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b640:	d820      	bhi.n	800b684 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b642:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b646:	d012      	beq.n	800b66e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b648:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b64c:	d81a      	bhi.n	800b684 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d024      	beq.n	800b69c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b652:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b656:	d115      	bne.n	800b684 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b658:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b65c:	3308      	adds	r3, #8
 800b65e:	2101      	movs	r1, #1
 800b660:	4618      	mov	r0, r3
 800b662:	f001 f9ad 	bl	800c9c0 <RCCEx_PLL2_Config>
 800b666:	4603      	mov	r3, r0
 800b668:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b66c:	e017      	b.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b66e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b672:	3328      	adds	r3, #40	; 0x28
 800b674:	2101      	movs	r1, #1
 800b676:	4618      	mov	r0, r3
 800b678:	f001 fa54 	bl	800cb24 <RCCEx_PLL3_Config>
 800b67c:	4603      	mov	r3, r0
 800b67e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b682:	e00c      	b.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b684:	2301      	movs	r3, #1
 800b686:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b68a:	e008      	b.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b68c:	bf00      	nop
 800b68e:	e006      	b.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b690:	bf00      	nop
 800b692:	e004      	b.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b694:	bf00      	nop
 800b696:	e002      	b.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b698:	bf00      	nop
 800b69a:	e000      	b.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b69c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b69e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d10e      	bne.n	800b6c4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b6a6:	4b06      	ldr	r3, [pc, #24]	; (800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b6a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6aa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b6ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b6b6:	4a02      	ldr	r2, [pc, #8]	; (800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b6b8:	430b      	orrs	r3, r1
 800b6ba:	6593      	str	r3, [r2, #88]	; 0x58
 800b6bc:	e006      	b.n	800b6cc <HAL_RCCEx_PeriphCLKConfig+0x604>
 800b6be:	bf00      	nop
 800b6c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b6c8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b6cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b6d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b6dc:	2300      	movs	r3, #0
 800b6de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b6e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b6e6:	460b      	mov	r3, r1
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	d037      	beq.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b6ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6f6:	d00e      	beq.n	800b716 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800b6f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6fc:	d816      	bhi.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d018      	beq.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800b702:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b706:	d111      	bne.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b708:	4bc4      	ldr	r3, [pc, #784]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b70c:	4ac3      	ldr	r2, [pc, #780]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b70e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b712:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b714:	e00f      	b.n	800b736 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b716:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b71a:	3308      	adds	r3, #8
 800b71c:	2101      	movs	r1, #1
 800b71e:	4618      	mov	r0, r3
 800b720:	f001 f94e 	bl	800c9c0 <RCCEx_PLL2_Config>
 800b724:	4603      	mov	r3, r0
 800b726:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b72a:	e004      	b.n	800b736 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b72c:	2301      	movs	r3, #1
 800b72e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b732:	e000      	b.n	800b736 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800b734:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b736:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d10a      	bne.n	800b754 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b73e:	4bb7      	ldr	r3, [pc, #732]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b742:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b746:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b74a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b74c:	4ab3      	ldr	r2, [pc, #716]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b74e:	430b      	orrs	r3, r1
 800b750:	6513      	str	r3, [r2, #80]	; 0x50
 800b752:	e003      	b.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b754:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b758:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b75c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b764:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b768:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b76c:	2300      	movs	r3, #0
 800b76e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b772:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b776:	460b      	mov	r3, r1
 800b778:	4313      	orrs	r3, r2
 800b77a:	d039      	beq.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b77c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b782:	2b03      	cmp	r3, #3
 800b784:	d81c      	bhi.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800b786:	a201      	add	r2, pc, #4	; (adr r2, 800b78c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800b788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b78c:	0800b7c9 	.word	0x0800b7c9
 800b790:	0800b79d 	.word	0x0800b79d
 800b794:	0800b7ab 	.word	0x0800b7ab
 800b798:	0800b7c9 	.word	0x0800b7c9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b79c:	4b9f      	ldr	r3, [pc, #636]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7a0:	4a9e      	ldr	r2, [pc, #632]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b7a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b7a8:	e00f      	b.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b7aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7ae:	3308      	adds	r3, #8
 800b7b0:	2102      	movs	r1, #2
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f001 f904 	bl	800c9c0 <RCCEx_PLL2_Config>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b7be:	e004      	b.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b7c6:	e000      	b.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800b7c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d10a      	bne.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b7d2:	4b92      	ldr	r3, [pc, #584]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b7d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7d6:	f023 0103 	bic.w	r1, r3, #3
 800b7da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b7e0:	4a8e      	ldr	r2, [pc, #568]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b7e2:	430b      	orrs	r3, r1
 800b7e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b7e6:	e003      	b.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b7ec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b7f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b7fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b800:	2300      	movs	r3, #0
 800b802:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b806:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b80a:	460b      	mov	r3, r1
 800b80c:	4313      	orrs	r3, r2
 800b80e:	f000 8099 	beq.w	800b944 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b812:	4b83      	ldr	r3, [pc, #524]	; (800ba20 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	4a82      	ldr	r2, [pc, #520]	; (800ba20 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b81c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b81e:	f7f8 fd4d 	bl	80042bc <HAL_GetTick>
 800b822:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b826:	e00b      	b.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b828:	f7f8 fd48 	bl	80042bc <HAL_GetTick>
 800b82c:	4602      	mov	r2, r0
 800b82e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b832:	1ad3      	subs	r3, r2, r3
 800b834:	2b64      	cmp	r3, #100	; 0x64
 800b836:	d903      	bls.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800b838:	2303      	movs	r3, #3
 800b83a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b83e:	e005      	b.n	800b84c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b840:	4b77      	ldr	r3, [pc, #476]	; (800ba20 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d0ed      	beq.n	800b828 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800b84c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b850:	2b00      	cmp	r3, #0
 800b852:	d173      	bne.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b854:	4b71      	ldr	r3, [pc, #452]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b856:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b858:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b85c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b860:	4053      	eors	r3, r2
 800b862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b866:	2b00      	cmp	r3, #0
 800b868:	d015      	beq.n	800b896 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b86a:	4b6c      	ldr	r3, [pc, #432]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b86c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b86e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b872:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b876:	4b69      	ldr	r3, [pc, #420]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b87a:	4a68      	ldr	r2, [pc, #416]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b87c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b880:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b882:	4b66      	ldr	r3, [pc, #408]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b886:	4a65      	ldr	r2, [pc, #404]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b88c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b88e:	4a63      	ldr	r2, [pc, #396]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b894:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b896:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b89a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b89e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8a2:	d118      	bne.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8a4:	f7f8 fd0a 	bl	80042bc <HAL_GetTick>
 800b8a8:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b8ac:	e00d      	b.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b8ae:	f7f8 fd05 	bl	80042bc <HAL_GetTick>
 800b8b2:	4602      	mov	r2, r0
 800b8b4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b8b8:	1ad2      	subs	r2, r2, r3
 800b8ba:	f241 3388 	movw	r3, #5000	; 0x1388
 800b8be:	429a      	cmp	r2, r3
 800b8c0:	d903      	bls.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800b8c2:	2303      	movs	r3, #3
 800b8c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800b8c8:	e005      	b.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b8ca:	4b54      	ldr	r3, [pc, #336]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b8cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8ce:	f003 0302 	and.w	r3, r3, #2
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d0eb      	beq.n	800b8ae <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800b8d6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d129      	bne.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b8de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b8e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b8e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b8ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b8ee:	d10e      	bne.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0x846>
 800b8f0:	4b4a      	ldr	r3, [pc, #296]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b8f2:	691b      	ldr	r3, [r3, #16]
 800b8f4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b8f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b8fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b900:	091a      	lsrs	r2, r3, #4
 800b902:	4b48      	ldr	r3, [pc, #288]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800b904:	4013      	ands	r3, r2
 800b906:	4a45      	ldr	r2, [pc, #276]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b908:	430b      	orrs	r3, r1
 800b90a:	6113      	str	r3, [r2, #16]
 800b90c:	e005      	b.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800b90e:	4b43      	ldr	r3, [pc, #268]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b910:	691b      	ldr	r3, [r3, #16]
 800b912:	4a42      	ldr	r2, [pc, #264]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b914:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b918:	6113      	str	r3, [r2, #16]
 800b91a:	4b40      	ldr	r3, [pc, #256]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b91c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b91e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b922:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b926:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b92a:	4a3c      	ldr	r2, [pc, #240]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b92c:	430b      	orrs	r3, r1
 800b92e:	6713      	str	r3, [r2, #112]	; 0x70
 800b930:	e008      	b.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b932:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b936:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800b93a:	e003      	b.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b93c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b940:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b944:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94c:	f002 0301 	and.w	r3, r2, #1
 800b950:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b954:	2300      	movs	r3, #0
 800b956:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b95a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b95e:	460b      	mov	r3, r1
 800b960:	4313      	orrs	r3, r2
 800b962:	f000 8090 	beq.w	800ba86 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b966:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b96a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b96e:	2b28      	cmp	r3, #40	; 0x28
 800b970:	d870      	bhi.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b972:	a201      	add	r2, pc, #4	; (adr r2, 800b978 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800b974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b978:	0800ba5d 	.word	0x0800ba5d
 800b97c:	0800ba55 	.word	0x0800ba55
 800b980:	0800ba55 	.word	0x0800ba55
 800b984:	0800ba55 	.word	0x0800ba55
 800b988:	0800ba55 	.word	0x0800ba55
 800b98c:	0800ba55 	.word	0x0800ba55
 800b990:	0800ba55 	.word	0x0800ba55
 800b994:	0800ba55 	.word	0x0800ba55
 800b998:	0800ba29 	.word	0x0800ba29
 800b99c:	0800ba55 	.word	0x0800ba55
 800b9a0:	0800ba55 	.word	0x0800ba55
 800b9a4:	0800ba55 	.word	0x0800ba55
 800b9a8:	0800ba55 	.word	0x0800ba55
 800b9ac:	0800ba55 	.word	0x0800ba55
 800b9b0:	0800ba55 	.word	0x0800ba55
 800b9b4:	0800ba55 	.word	0x0800ba55
 800b9b8:	0800ba3f 	.word	0x0800ba3f
 800b9bc:	0800ba55 	.word	0x0800ba55
 800b9c0:	0800ba55 	.word	0x0800ba55
 800b9c4:	0800ba55 	.word	0x0800ba55
 800b9c8:	0800ba55 	.word	0x0800ba55
 800b9cc:	0800ba55 	.word	0x0800ba55
 800b9d0:	0800ba55 	.word	0x0800ba55
 800b9d4:	0800ba55 	.word	0x0800ba55
 800b9d8:	0800ba5d 	.word	0x0800ba5d
 800b9dc:	0800ba55 	.word	0x0800ba55
 800b9e0:	0800ba55 	.word	0x0800ba55
 800b9e4:	0800ba55 	.word	0x0800ba55
 800b9e8:	0800ba55 	.word	0x0800ba55
 800b9ec:	0800ba55 	.word	0x0800ba55
 800b9f0:	0800ba55 	.word	0x0800ba55
 800b9f4:	0800ba55 	.word	0x0800ba55
 800b9f8:	0800ba5d 	.word	0x0800ba5d
 800b9fc:	0800ba55 	.word	0x0800ba55
 800ba00:	0800ba55 	.word	0x0800ba55
 800ba04:	0800ba55 	.word	0x0800ba55
 800ba08:	0800ba55 	.word	0x0800ba55
 800ba0c:	0800ba55 	.word	0x0800ba55
 800ba10:	0800ba55 	.word	0x0800ba55
 800ba14:	0800ba55 	.word	0x0800ba55
 800ba18:	0800ba5d 	.word	0x0800ba5d
 800ba1c:	58024400 	.word	0x58024400
 800ba20:	58024800 	.word	0x58024800
 800ba24:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba2c:	3308      	adds	r3, #8
 800ba2e:	2101      	movs	r1, #1
 800ba30:	4618      	mov	r0, r3
 800ba32:	f000 ffc5 	bl	800c9c0 <RCCEx_PLL2_Config>
 800ba36:	4603      	mov	r3, r0
 800ba38:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ba3c:	e00f      	b.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba42:	3328      	adds	r3, #40	; 0x28
 800ba44:	2101      	movs	r1, #1
 800ba46:	4618      	mov	r0, r3
 800ba48:	f001 f86c 	bl	800cb24 <RCCEx_PLL3_Config>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ba52:	e004      	b.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba54:	2301      	movs	r3, #1
 800ba56:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800ba5a:	e000      	b.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800ba5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba5e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d10b      	bne.n	800ba7e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ba66:	4bc0      	ldr	r3, [pc, #768]	; (800bd68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ba68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba6a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800ba6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba76:	4abc      	ldr	r2, [pc, #752]	; (800bd68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ba78:	430b      	orrs	r3, r1
 800ba7a:	6553      	str	r3, [r2, #84]	; 0x54
 800ba7c:	e003      	b.n	800ba86 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba7e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ba82:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ba86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8e:	f002 0302 	and.w	r3, r2, #2
 800ba92:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ba96:	2300      	movs	r3, #0
 800ba98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ba9c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800baa0:	460b      	mov	r3, r1
 800baa2:	4313      	orrs	r3, r2
 800baa4:	d043      	beq.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800baa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800baaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800baae:	2b05      	cmp	r3, #5
 800bab0:	d824      	bhi.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800bab2:	a201      	add	r2, pc, #4	; (adr r2, 800bab8 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800bab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bab8:	0800bb05 	.word	0x0800bb05
 800babc:	0800bad1 	.word	0x0800bad1
 800bac0:	0800bae7 	.word	0x0800bae7
 800bac4:	0800bb05 	.word	0x0800bb05
 800bac8:	0800bb05 	.word	0x0800bb05
 800bacc:	0800bb05 	.word	0x0800bb05
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bad0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bad4:	3308      	adds	r3, #8
 800bad6:	2101      	movs	r1, #1
 800bad8:	4618      	mov	r0, r3
 800bada:	f000 ff71 	bl	800c9c0 <RCCEx_PLL2_Config>
 800bade:	4603      	mov	r3, r0
 800bae0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bae4:	e00f      	b.n	800bb06 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bae6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800baea:	3328      	adds	r3, #40	; 0x28
 800baec:	2101      	movs	r1, #1
 800baee:	4618      	mov	r0, r3
 800baf0:	f001 f818 	bl	800cb24 <RCCEx_PLL3_Config>
 800baf4:	4603      	mov	r3, r0
 800baf6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bafa:	e004      	b.n	800bb06 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bafc:	2301      	movs	r3, #1
 800bafe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bb02:	e000      	b.n	800bb06 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800bb04:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb06:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d10b      	bne.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bb0e:	4b96      	ldr	r3, [pc, #600]	; (800bd68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bb10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb12:	f023 0107 	bic.w	r1, r3, #7
 800bb16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb1e:	4a92      	ldr	r2, [pc, #584]	; (800bd68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bb20:	430b      	orrs	r3, r1
 800bb22:	6553      	str	r3, [r2, #84]	; 0x54
 800bb24:	e003      	b.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb26:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bb2a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bb2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb36:	f002 0304 	and.w	r3, r2, #4
 800bb3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bb3e:	2300      	movs	r3, #0
 800bb40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bb44:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800bb48:	460b      	mov	r3, r1
 800bb4a:	4313      	orrs	r3, r2
 800bb4c:	d043      	beq.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bb4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bb56:	2b05      	cmp	r3, #5
 800bb58:	d824      	bhi.n	800bba4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800bb5a:	a201      	add	r2, pc, #4	; (adr r2, 800bb60 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800bb5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb60:	0800bbad 	.word	0x0800bbad
 800bb64:	0800bb79 	.word	0x0800bb79
 800bb68:	0800bb8f 	.word	0x0800bb8f
 800bb6c:	0800bbad 	.word	0x0800bbad
 800bb70:	0800bbad 	.word	0x0800bbad
 800bb74:	0800bbad 	.word	0x0800bbad
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bb78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb7c:	3308      	adds	r3, #8
 800bb7e:	2101      	movs	r1, #1
 800bb80:	4618      	mov	r0, r3
 800bb82:	f000 ff1d 	bl	800c9c0 <RCCEx_PLL2_Config>
 800bb86:	4603      	mov	r3, r0
 800bb88:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bb8c:	e00f      	b.n	800bbae <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb92:	3328      	adds	r3, #40	; 0x28
 800bb94:	2101      	movs	r1, #1
 800bb96:	4618      	mov	r0, r3
 800bb98:	f000 ffc4 	bl	800cb24 <RCCEx_PLL3_Config>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bba2:	e004      	b.n	800bbae <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bba4:	2301      	movs	r3, #1
 800bba6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bbaa:	e000      	b.n	800bbae <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800bbac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d10b      	bne.n	800bbce <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bbb6:	4b6c      	ldr	r3, [pc, #432]	; (800bd68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bbb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbba:	f023 0107 	bic.w	r1, r3, #7
 800bbbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bbc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bbc6:	4a68      	ldr	r2, [pc, #416]	; (800bd68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bbc8:	430b      	orrs	r3, r1
 800bbca:	6593      	str	r3, [r2, #88]	; 0x58
 800bbcc:	e003      	b.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bbd2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bbd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bbda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbde:	f002 0320 	and.w	r3, r2, #32
 800bbe2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bbec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bbf0:	460b      	mov	r3, r1
 800bbf2:	4313      	orrs	r3, r2
 800bbf4:	d055      	beq.n	800bca2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800bbf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bbfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bbfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bc02:	d033      	beq.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800bc04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bc08:	d82c      	bhi.n	800bc64 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800bc0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc0e:	d02f      	beq.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800bc10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc14:	d826      	bhi.n	800bc64 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800bc16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bc1a:	d02b      	beq.n	800bc74 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800bc1c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bc20:	d820      	bhi.n	800bc64 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800bc22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc26:	d012      	beq.n	800bc4e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800bc28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc2c:	d81a      	bhi.n	800bc64 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d022      	beq.n	800bc78 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800bc32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc36:	d115      	bne.n	800bc64 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc3c:	3308      	adds	r3, #8
 800bc3e:	2100      	movs	r1, #0
 800bc40:	4618      	mov	r0, r3
 800bc42:	f000 febd 	bl	800c9c0 <RCCEx_PLL2_Config>
 800bc46:	4603      	mov	r3, r0
 800bc48:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bc4c:	e015      	b.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bc4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc52:	3328      	adds	r3, #40	; 0x28
 800bc54:	2102      	movs	r1, #2
 800bc56:	4618      	mov	r0, r3
 800bc58:	f000 ff64 	bl	800cb24 <RCCEx_PLL3_Config>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bc62:	e00a      	b.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc64:	2301      	movs	r3, #1
 800bc66:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bc6a:	e006      	b.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800bc6c:	bf00      	nop
 800bc6e:	e004      	b.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800bc70:	bf00      	nop
 800bc72:	e002      	b.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800bc74:	bf00      	nop
 800bc76:	e000      	b.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800bc78:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc7a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d10b      	bne.n	800bc9a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bc82:	4b39      	ldr	r3, [pc, #228]	; (800bd68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bc84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc86:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bc8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bc92:	4a35      	ldr	r2, [pc, #212]	; (800bd68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bc94:	430b      	orrs	r3, r1
 800bc96:	6553      	str	r3, [r2, #84]	; 0x54
 800bc98:	e003      	b.n	800bca2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc9a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bc9e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcaa:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800bcae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bcb8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800bcbc:	460b      	mov	r3, r1
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	d058      	beq.n	800bd74 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bcc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bcc6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bcca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bcce:	d033      	beq.n	800bd38 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800bcd0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bcd4:	d82c      	bhi.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800bcd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcda:	d02f      	beq.n	800bd3c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800bcdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bce0:	d826      	bhi.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800bce2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bce6:	d02b      	beq.n	800bd40 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800bce8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bcec:	d820      	bhi.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800bcee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bcf2:	d012      	beq.n	800bd1a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800bcf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bcf8:	d81a      	bhi.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d022      	beq.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800bcfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd02:	d115      	bne.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd08:	3308      	adds	r3, #8
 800bd0a:	2100      	movs	r1, #0
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f000 fe57 	bl	800c9c0 <RCCEx_PLL2_Config>
 800bd12:	4603      	mov	r3, r0
 800bd14:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bd18:	e015      	b.n	800bd46 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bd1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd1e:	3328      	adds	r3, #40	; 0x28
 800bd20:	2102      	movs	r1, #2
 800bd22:	4618      	mov	r0, r3
 800bd24:	f000 fefe 	bl	800cb24 <RCCEx_PLL3_Config>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bd2e:	e00a      	b.n	800bd46 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd30:	2301      	movs	r3, #1
 800bd32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bd36:	e006      	b.n	800bd46 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800bd38:	bf00      	nop
 800bd3a:	e004      	b.n	800bd46 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800bd3c:	bf00      	nop
 800bd3e:	e002      	b.n	800bd46 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800bd40:	bf00      	nop
 800bd42:	e000      	b.n	800bd46 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800bd44:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd46:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d10e      	bne.n	800bd6c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bd4e:	4b06      	ldr	r3, [pc, #24]	; (800bd68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bd50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd52:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800bd56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bd5e:	4a02      	ldr	r2, [pc, #8]	; (800bd68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bd60:	430b      	orrs	r3, r1
 800bd62:	6593      	str	r3, [r2, #88]	; 0x58
 800bd64:	e006      	b.n	800bd74 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800bd66:	bf00      	nop
 800bd68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd6c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bd70:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bd74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd7c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800bd80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bd84:	2300      	movs	r3, #0
 800bd86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bd8a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800bd8e:	460b      	mov	r3, r1
 800bd90:	4313      	orrs	r3, r2
 800bd92:	d055      	beq.n	800be40 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bd94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd98:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bd9c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bda0:	d033      	beq.n	800be0a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800bda2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bda6:	d82c      	bhi.n	800be02 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800bda8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bdac:	d02f      	beq.n	800be0e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800bdae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bdb2:	d826      	bhi.n	800be02 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800bdb4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bdb8:	d02b      	beq.n	800be12 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800bdba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bdbe:	d820      	bhi.n	800be02 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800bdc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bdc4:	d012      	beq.n	800bdec <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800bdc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bdca:	d81a      	bhi.n	800be02 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d022      	beq.n	800be16 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800bdd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bdd4:	d115      	bne.n	800be02 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bdd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bdda:	3308      	adds	r3, #8
 800bddc:	2100      	movs	r1, #0
 800bdde:	4618      	mov	r0, r3
 800bde0:	f000 fdee 	bl	800c9c0 <RCCEx_PLL2_Config>
 800bde4:	4603      	mov	r3, r0
 800bde6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bdea:	e015      	b.n	800be18 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bdec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bdf0:	3328      	adds	r3, #40	; 0x28
 800bdf2:	2102      	movs	r1, #2
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f000 fe95 	bl	800cb24 <RCCEx_PLL3_Config>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800be00:	e00a      	b.n	800be18 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be02:	2301      	movs	r3, #1
 800be04:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800be08:	e006      	b.n	800be18 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800be0a:	bf00      	nop
 800be0c:	e004      	b.n	800be18 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800be0e:	bf00      	nop
 800be10:	e002      	b.n	800be18 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800be12:	bf00      	nop
 800be14:	e000      	b.n	800be18 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800be16:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be18:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d10b      	bne.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800be20:	4ba1      	ldr	r3, [pc, #644]	; (800c0a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800be22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be24:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800be28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be2c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800be30:	4a9d      	ldr	r2, [pc, #628]	; (800c0a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800be32:	430b      	orrs	r3, r1
 800be34:	6593      	str	r3, [r2, #88]	; 0x58
 800be36:	e003      	b.n	800be40 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be38:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800be3c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800be40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be48:	f002 0308 	and.w	r3, r2, #8
 800be4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800be50:	2300      	movs	r3, #0
 800be52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800be56:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800be5a:	460b      	mov	r3, r1
 800be5c:	4313      	orrs	r3, r2
 800be5e:	d01e      	beq.n	800be9e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800be60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be6c:	d10c      	bne.n	800be88 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800be6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be72:	3328      	adds	r3, #40	; 0x28
 800be74:	2102      	movs	r1, #2
 800be76:	4618      	mov	r0, r3
 800be78:	f000 fe54 	bl	800cb24 <RCCEx_PLL3_Config>
 800be7c:	4603      	mov	r3, r0
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d002      	beq.n	800be88 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800be82:	2301      	movs	r3, #1
 800be84:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800be88:	4b87      	ldr	r3, [pc, #540]	; (800c0a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800be8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be8c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800be90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be98:	4a83      	ldr	r2, [pc, #524]	; (800c0a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800be9a:	430b      	orrs	r3, r1
 800be9c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800be9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea6:	f002 0310 	and.w	r3, r2, #16
 800beaa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800beae:	2300      	movs	r3, #0
 800beb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800beb4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800beb8:	460b      	mov	r3, r1
 800beba:	4313      	orrs	r3, r2
 800bebc:	d01e      	beq.n	800befc <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bebe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bec2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800beca:	d10c      	bne.n	800bee6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800becc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bed0:	3328      	adds	r3, #40	; 0x28
 800bed2:	2102      	movs	r1, #2
 800bed4:	4618      	mov	r0, r3
 800bed6:	f000 fe25 	bl	800cb24 <RCCEx_PLL3_Config>
 800beda:	4603      	mov	r3, r0
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d002      	beq.n	800bee6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800bee0:	2301      	movs	r3, #1
 800bee2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bee6:	4b70      	ldr	r3, [pc, #448]	; (800c0a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800bee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800beea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800beee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bef2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bef6:	4a6c      	ldr	r2, [pc, #432]	; (800c0a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800bef8:	430b      	orrs	r3, r1
 800befa:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800befc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf04:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800bf08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bf12:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800bf16:	460b      	mov	r3, r1
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	d03e      	beq.n	800bf9a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800bf1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf20:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bf24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf28:	d022      	beq.n	800bf70 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800bf2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf2e:	d81b      	bhi.n	800bf68 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d003      	beq.n	800bf3c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800bf34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf38:	d00b      	beq.n	800bf52 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800bf3a:	e015      	b.n	800bf68 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bf3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf40:	3308      	adds	r3, #8
 800bf42:	2100      	movs	r1, #0
 800bf44:	4618      	mov	r0, r3
 800bf46:	f000 fd3b 	bl	800c9c0 <RCCEx_PLL2_Config>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bf50:	e00f      	b.n	800bf72 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bf52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf56:	3328      	adds	r3, #40	; 0x28
 800bf58:	2102      	movs	r1, #2
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f000 fde2 	bl	800cb24 <RCCEx_PLL3_Config>
 800bf60:	4603      	mov	r3, r0
 800bf62:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bf66:	e004      	b.n	800bf72 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf68:	2301      	movs	r3, #1
 800bf6a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bf6e:	e000      	b.n	800bf72 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800bf70:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf72:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d10b      	bne.n	800bf92 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bf7a:	4b4b      	ldr	r3, [pc, #300]	; (800c0a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800bf7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf7e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800bf82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bf8a:	4a47      	ldr	r2, [pc, #284]	; (800c0a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800bf8c:	430b      	orrs	r3, r1
 800bf8e:	6593      	str	r3, [r2, #88]	; 0x58
 800bf90:	e003      	b.n	800bf9a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf92:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bf96:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bf9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800bfa6:	67bb      	str	r3, [r7, #120]	; 0x78
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bfac:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800bfb0:	460b      	mov	r3, r1
 800bfb2:	4313      	orrs	r3, r2
 800bfb4:	d03b      	beq.n	800c02e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800bfb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bfba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfbe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bfc2:	d01f      	beq.n	800c004 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800bfc4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bfc8:	d818      	bhi.n	800bffc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800bfca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bfce:	d003      	beq.n	800bfd8 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800bfd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bfd4:	d007      	beq.n	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800bfd6:	e011      	b.n	800bffc <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bfd8:	4b33      	ldr	r3, [pc, #204]	; (800c0a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800bfda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfdc:	4a32      	ldr	r2, [pc, #200]	; (800c0a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800bfde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bfe2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800bfe4:	e00f      	b.n	800c006 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bfe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bfea:	3328      	adds	r3, #40	; 0x28
 800bfec:	2101      	movs	r1, #1
 800bfee:	4618      	mov	r0, r3
 800bff0:	f000 fd98 	bl	800cb24 <RCCEx_PLL3_Config>
 800bff4:	4603      	mov	r3, r0
 800bff6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800bffa:	e004      	b.n	800c006 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bffc:	2301      	movs	r3, #1
 800bffe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c002:	e000      	b.n	800c006 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800c004:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c006:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d10b      	bne.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c00e:	4b26      	ldr	r3, [pc, #152]	; (800c0a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c012:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c016:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c01a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c01e:	4a22      	ldr	r2, [pc, #136]	; (800c0a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c020:	430b      	orrs	r3, r1
 800c022:	6553      	str	r3, [r2, #84]	; 0x54
 800c024:	e003      	b.n	800c02e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c026:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c02a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c02e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c036:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c03a:	673b      	str	r3, [r7, #112]	; 0x70
 800c03c:	2300      	movs	r3, #0
 800c03e:	677b      	str	r3, [r7, #116]	; 0x74
 800c040:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c044:	460b      	mov	r3, r1
 800c046:	4313      	orrs	r3, r2
 800c048:	d034      	beq.n	800c0b4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c04a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c04e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c050:	2b00      	cmp	r3, #0
 800c052:	d003      	beq.n	800c05c <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800c054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c058:	d007      	beq.n	800c06a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800c05a:	e011      	b.n	800c080 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c05c:	4b12      	ldr	r3, [pc, #72]	; (800c0a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c060:	4a11      	ldr	r2, [pc, #68]	; (800c0a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c066:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c068:	e00e      	b.n	800c088 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c06a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c06e:	3308      	adds	r3, #8
 800c070:	2102      	movs	r1, #2
 800c072:	4618      	mov	r0, r3
 800c074:	f000 fca4 	bl	800c9c0 <RCCEx_PLL2_Config>
 800c078:	4603      	mov	r3, r0
 800c07a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c07e:	e003      	b.n	800c088 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800c080:	2301      	movs	r3, #1
 800c082:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c086:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c088:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d10d      	bne.n	800c0ac <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c090:	4b05      	ldr	r3, [pc, #20]	; (800c0a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c094:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c098:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c09c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c09e:	4a02      	ldr	r2, [pc, #8]	; (800c0a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c0a0:	430b      	orrs	r3, r1
 800c0a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c0a4:	e006      	b.n	800c0b4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800c0a6:	bf00      	nop
 800c0a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c0b0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c0b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0bc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c0c0:	66bb      	str	r3, [r7, #104]	; 0x68
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c0c6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c0ca:	460b      	mov	r3, r1
 800c0cc:	4313      	orrs	r3, r2
 800c0ce:	d00c      	beq.n	800c0ea <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c0d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0d4:	3328      	adds	r3, #40	; 0x28
 800c0d6:	2102      	movs	r1, #2
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f000 fd23 	bl	800cb24 <RCCEx_PLL3_Config>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d002      	beq.n	800c0ea <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c0ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c0f6:	663b      	str	r3, [r7, #96]	; 0x60
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	667b      	str	r3, [r7, #100]	; 0x64
 800c0fc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c100:	460b      	mov	r3, r1
 800c102:	4313      	orrs	r3, r2
 800c104:	d038      	beq.n	800c178 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c106:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c10a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c10e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c112:	d018      	beq.n	800c146 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800c114:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c118:	d811      	bhi.n	800c13e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c11a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c11e:	d014      	beq.n	800c14a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800c120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c124:	d80b      	bhi.n	800c13e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c126:	2b00      	cmp	r3, #0
 800c128:	d011      	beq.n	800c14e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800c12a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c12e:	d106      	bne.n	800c13e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c130:	4bc3      	ldr	r3, [pc, #780]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c134:	4ac2      	ldr	r2, [pc, #776]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c13a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c13c:	e008      	b.n	800c150 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c13e:	2301      	movs	r3, #1
 800c140:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c144:	e004      	b.n	800c150 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c146:	bf00      	nop
 800c148:	e002      	b.n	800c150 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c14a:	bf00      	nop
 800c14c:	e000      	b.n	800c150 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c14e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c150:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c154:	2b00      	cmp	r3, #0
 800c156:	d10b      	bne.n	800c170 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c158:	4bb9      	ldr	r3, [pc, #740]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c15a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c15c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c160:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c168:	4ab5      	ldr	r2, [pc, #724]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c16a:	430b      	orrs	r3, r1
 800c16c:	6553      	str	r3, [r2, #84]	; 0x54
 800c16e:	e003      	b.n	800c178 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c170:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c174:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c178:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c180:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c184:	65bb      	str	r3, [r7, #88]	; 0x58
 800c186:	2300      	movs	r3, #0
 800c188:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c18a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c18e:	460b      	mov	r3, r1
 800c190:	4313      	orrs	r3, r2
 800c192:	d009      	beq.n	800c1a8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c194:	4baa      	ldr	r3, [pc, #680]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c198:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c19c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1a2:	4aa7      	ldr	r2, [pc, #668]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c1a4:	430b      	orrs	r3, r1
 800c1a6:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c1a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1b0:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c1b4:	653b      	str	r3, [r7, #80]	; 0x50
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	657b      	str	r3, [r7, #84]	; 0x54
 800c1ba:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c1be:	460b      	mov	r3, r1
 800c1c0:	4313      	orrs	r3, r2
 800c1c2:	d009      	beq.n	800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c1c4:	4b9e      	ldr	r3, [pc, #632]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c1c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1c8:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c1cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1d2:	4a9b      	ldr	r2, [pc, #620]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c1d4:	430b      	orrs	r3, r1
 800c1d6:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800c1d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800c1e4:	64bb      	str	r3, [r7, #72]	; 0x48
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c1ea:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c1ee:	460b      	mov	r3, r1
 800c1f0:	4313      	orrs	r3, r2
 800c1f2:	d009      	beq.n	800c208 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800c1f4:	4b92      	ldr	r3, [pc, #584]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c1f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1f8:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 800c1fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c200:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c202:	4a8f      	ldr	r2, [pc, #572]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c204:	430b      	orrs	r3, r1
 800c206:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c208:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c210:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c214:	643b      	str	r3, [r7, #64]	; 0x40
 800c216:	2300      	movs	r3, #0
 800c218:	647b      	str	r3, [r7, #68]	; 0x44
 800c21a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c21e:	460b      	mov	r3, r1
 800c220:	4313      	orrs	r3, r2
 800c222:	d00e      	beq.n	800c242 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c224:	4b86      	ldr	r3, [pc, #536]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c226:	691b      	ldr	r3, [r3, #16]
 800c228:	4a85      	ldr	r2, [pc, #532]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c22a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c22e:	6113      	str	r3, [r2, #16]
 800c230:	4b83      	ldr	r3, [pc, #524]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c232:	6919      	ldr	r1, [r3, #16]
 800c234:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c238:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c23c:	4a80      	ldr	r2, [pc, #512]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c23e:	430b      	orrs	r3, r1
 800c240:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c242:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c24a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c24e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c250:	2300      	movs	r3, #0
 800c252:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c254:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c258:	460b      	mov	r3, r1
 800c25a:	4313      	orrs	r3, r2
 800c25c:	d009      	beq.n	800c272 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c25e:	4b78      	ldr	r3, [pc, #480]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c262:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c266:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c26a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c26c:	4a74      	ldr	r2, [pc, #464]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c26e:	430b      	orrs	r3, r1
 800c270:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c272:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c27a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c27e:	633b      	str	r3, [r7, #48]	; 0x30
 800c280:	2300      	movs	r3, #0
 800c282:	637b      	str	r3, [r7, #52]	; 0x34
 800c284:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c288:	460b      	mov	r3, r1
 800c28a:	4313      	orrs	r3, r2
 800c28c:	d00a      	beq.n	800c2a4 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c28e:	4b6c      	ldr	r3, [pc, #432]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c292:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c296:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c29a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c29e:	4a68      	ldr	r2, [pc, #416]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c2a0:	430b      	orrs	r3, r1
 800c2a2:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c2a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ac:	2100      	movs	r1, #0
 800c2ae:	62b9      	str	r1, [r7, #40]	; 0x28
 800c2b0:	f003 0301 	and.w	r3, r3, #1
 800c2b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c2b6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c2ba:	460b      	mov	r3, r1
 800c2bc:	4313      	orrs	r3, r2
 800c2be:	d011      	beq.n	800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c2c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2c4:	3308      	adds	r3, #8
 800c2c6:	2100      	movs	r1, #0
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f000 fb79 	bl	800c9c0 <RCCEx_PLL2_Config>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c2d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d003      	beq.n	800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c2e0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c2e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ec:	2100      	movs	r1, #0
 800c2ee:	6239      	str	r1, [r7, #32]
 800c2f0:	f003 0302 	and.w	r3, r3, #2
 800c2f4:	627b      	str	r3, [r7, #36]	; 0x24
 800c2f6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c2fa:	460b      	mov	r3, r1
 800c2fc:	4313      	orrs	r3, r2
 800c2fe:	d011      	beq.n	800c324 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c300:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c304:	3308      	adds	r3, #8
 800c306:	2101      	movs	r1, #1
 800c308:	4618      	mov	r0, r3
 800c30a:	f000 fb59 	bl	800c9c0 <RCCEx_PLL2_Config>
 800c30e:	4603      	mov	r3, r0
 800c310:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c314:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d003      	beq.n	800c324 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c31c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c320:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c324:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c32c:	2100      	movs	r1, #0
 800c32e:	61b9      	str	r1, [r7, #24]
 800c330:	f003 0304 	and.w	r3, r3, #4
 800c334:	61fb      	str	r3, [r7, #28]
 800c336:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c33a:	460b      	mov	r3, r1
 800c33c:	4313      	orrs	r3, r2
 800c33e:	d011      	beq.n	800c364 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c340:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c344:	3308      	adds	r3, #8
 800c346:	2102      	movs	r1, #2
 800c348:	4618      	mov	r0, r3
 800c34a:	f000 fb39 	bl	800c9c0 <RCCEx_PLL2_Config>
 800c34e:	4603      	mov	r3, r0
 800c350:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c354:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d003      	beq.n	800c364 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c35c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c360:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c364:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36c:	2100      	movs	r1, #0
 800c36e:	6139      	str	r1, [r7, #16]
 800c370:	f003 0308 	and.w	r3, r3, #8
 800c374:	617b      	str	r3, [r7, #20]
 800c376:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c37a:	460b      	mov	r3, r1
 800c37c:	4313      	orrs	r3, r2
 800c37e:	d011      	beq.n	800c3a4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c380:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c384:	3328      	adds	r3, #40	; 0x28
 800c386:	2100      	movs	r1, #0
 800c388:	4618      	mov	r0, r3
 800c38a:	f000 fbcb 	bl	800cb24 <RCCEx_PLL3_Config>
 800c38e:	4603      	mov	r3, r0
 800c390:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800c394:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d003      	beq.n	800c3a4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c39c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c3a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c3a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ac:	2100      	movs	r1, #0
 800c3ae:	60b9      	str	r1, [r7, #8]
 800c3b0:	f003 0310 	and.w	r3, r3, #16
 800c3b4:	60fb      	str	r3, [r7, #12]
 800c3b6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c3ba:	460b      	mov	r3, r1
 800c3bc:	4313      	orrs	r3, r2
 800c3be:	d011      	beq.n	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c3c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3c4:	3328      	adds	r3, #40	; 0x28
 800c3c6:	2101      	movs	r1, #1
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f000 fbab 	bl	800cb24 <RCCEx_PLL3_Config>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c3d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d003      	beq.n	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c3e0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c3e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ec:	2100      	movs	r1, #0
 800c3ee:	6039      	str	r1, [r7, #0]
 800c3f0:	f003 0320 	and.w	r3, r3, #32
 800c3f4:	607b      	str	r3, [r7, #4]
 800c3f6:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c3fa:	460b      	mov	r3, r1
 800c3fc:	4313      	orrs	r3, r2
 800c3fe:	d011      	beq.n	800c424 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c400:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c404:	3328      	adds	r3, #40	; 0x28
 800c406:	2102      	movs	r1, #2
 800c408:	4618      	mov	r0, r3
 800c40a:	f000 fb8b 	bl	800cb24 <RCCEx_PLL3_Config>
 800c40e:	4603      	mov	r3, r0
 800c410:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c414:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d003      	beq.n	800c424 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c41c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c420:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 800c424:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d101      	bne.n	800c430 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800c42c:	2300      	movs	r3, #0
 800c42e:	e000      	b.n	800c432 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800c430:	2301      	movs	r3, #1
}
 800c432:	4618      	mov	r0, r3
 800c434:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800c438:	46bd      	mov	sp, r7
 800c43a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c43e:	bf00      	nop
 800c440:	58024400 	.word	0x58024400

0800c444 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800c448:	f7fe fde2 	bl	800b010 <HAL_RCC_GetHCLKFreq>
 800c44c:	4602      	mov	r2, r0
 800c44e:	4b06      	ldr	r3, [pc, #24]	; (800c468 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c450:	6a1b      	ldr	r3, [r3, #32]
 800c452:	091b      	lsrs	r3, r3, #4
 800c454:	f003 0307 	and.w	r3, r3, #7
 800c458:	4904      	ldr	r1, [pc, #16]	; (800c46c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c45a:	5ccb      	ldrb	r3, [r1, r3]
 800c45c:	f003 031f 	and.w	r3, r3, #31
 800c460:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800c464:	4618      	mov	r0, r3
 800c466:	bd80      	pop	{r7, pc}
 800c468:	58024400 	.word	0x58024400
 800c46c:	080104e0 	.word	0x080104e0

0800c470 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c470:	b480      	push	{r7}
 800c472:	b089      	sub	sp, #36	; 0x24
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c478:	4ba1      	ldr	r3, [pc, #644]	; (800c700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c47a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c47c:	f003 0303 	and.w	r3, r3, #3
 800c480:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c482:	4b9f      	ldr	r3, [pc, #636]	; (800c700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c486:	0b1b      	lsrs	r3, r3, #12
 800c488:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c48c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c48e:	4b9c      	ldr	r3, [pc, #624]	; (800c700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c492:	091b      	lsrs	r3, r3, #4
 800c494:	f003 0301 	and.w	r3, r3, #1
 800c498:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c49a:	4b99      	ldr	r3, [pc, #612]	; (800c700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c49c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c49e:	08db      	lsrs	r3, r3, #3
 800c4a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c4a4:	693a      	ldr	r2, [r7, #16]
 800c4a6:	fb02 f303 	mul.w	r3, r2, r3
 800c4aa:	ee07 3a90 	vmov	s15, r3
 800c4ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c4b6:	697b      	ldr	r3, [r7, #20]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	f000 8111 	beq.w	800c6e0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c4be:	69bb      	ldr	r3, [r7, #24]
 800c4c0:	2b02      	cmp	r3, #2
 800c4c2:	f000 8083 	beq.w	800c5cc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c4c6:	69bb      	ldr	r3, [r7, #24]
 800c4c8:	2b02      	cmp	r3, #2
 800c4ca:	f200 80a1 	bhi.w	800c610 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c4ce:	69bb      	ldr	r3, [r7, #24]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d003      	beq.n	800c4dc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c4d4:	69bb      	ldr	r3, [r7, #24]
 800c4d6:	2b01      	cmp	r3, #1
 800c4d8:	d056      	beq.n	800c588 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c4da:	e099      	b.n	800c610 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c4dc:	4b88      	ldr	r3, [pc, #544]	; (800c700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f003 0320 	and.w	r3, r3, #32
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d02d      	beq.n	800c544 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c4e8:	4b85      	ldr	r3, [pc, #532]	; (800c700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	08db      	lsrs	r3, r3, #3
 800c4ee:	f003 0303 	and.w	r3, r3, #3
 800c4f2:	4a84      	ldr	r2, [pc, #528]	; (800c704 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c4f4:	fa22 f303 	lsr.w	r3, r2, r3
 800c4f8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	ee07 3a90 	vmov	s15, r3
 800c500:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c504:	697b      	ldr	r3, [r7, #20]
 800c506:	ee07 3a90 	vmov	s15, r3
 800c50a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c50e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c512:	4b7b      	ldr	r3, [pc, #492]	; (800c700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c51a:	ee07 3a90 	vmov	s15, r3
 800c51e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c522:	ed97 6a03 	vldr	s12, [r7, #12]
 800c526:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c708 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c52a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c52e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c532:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c53a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c53e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c542:	e087      	b.n	800c654 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	ee07 3a90 	vmov	s15, r3
 800c54a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c54e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c70c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c556:	4b6a      	ldr	r3, [pc, #424]	; (800c700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c55a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c55e:	ee07 3a90 	vmov	s15, r3
 800c562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c566:	ed97 6a03 	vldr	s12, [r7, #12]
 800c56a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c708 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c56e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c576:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c57a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c57e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c582:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c586:	e065      	b.n	800c654 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	ee07 3a90 	vmov	s15, r3
 800c58e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c592:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c710 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c59a:	4b59      	ldr	r3, [pc, #356]	; (800c700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c59e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5a2:	ee07 3a90 	vmov	s15, r3
 800c5a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5ae:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c708 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c5b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c5ca:	e043      	b.n	800c654 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	ee07 3a90 	vmov	s15, r3
 800c5d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5d6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c714 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c5da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5de:	4b48      	ldr	r3, [pc, #288]	; (800c700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5e6:	ee07 3a90 	vmov	s15, r3
 800c5ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5f2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c708 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c5f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c60a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c60e:	e021      	b.n	800c654 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c610:	697b      	ldr	r3, [r7, #20]
 800c612:	ee07 3a90 	vmov	s15, r3
 800c616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c61a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c710 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c61e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c622:	4b37      	ldr	r3, [pc, #220]	; (800c700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c62a:	ee07 3a90 	vmov	s15, r3
 800c62e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c632:	ed97 6a03 	vldr	s12, [r7, #12]
 800c636:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c708 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c63a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c63e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c642:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c64a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c64e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c652:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c654:	4b2a      	ldr	r3, [pc, #168]	; (800c700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c658:	0a5b      	lsrs	r3, r3, #9
 800c65a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c65e:	ee07 3a90 	vmov	s15, r3
 800c662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c666:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c66a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c66e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c672:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c676:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c67a:	ee17 2a90 	vmov	r2, s15
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c682:	4b1f      	ldr	r3, [pc, #124]	; (800c700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c686:	0c1b      	lsrs	r3, r3, #16
 800c688:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c68c:	ee07 3a90 	vmov	s15, r3
 800c690:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c694:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c698:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c69c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c6a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c6a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6a8:	ee17 2a90 	vmov	r2, s15
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c6b0:	4b13      	ldr	r3, [pc, #76]	; (800c700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6b4:	0e1b      	lsrs	r3, r3, #24
 800c6b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6ba:	ee07 3a90 	vmov	s15, r3
 800c6be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c6c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c6ca:	edd7 6a07 	vldr	s13, [r7, #28]
 800c6ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c6d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6d6:	ee17 2a90 	vmov	r2, s15
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c6de:	e008      	b.n	800c6f2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	609a      	str	r2, [r3, #8]
}
 800c6f2:	bf00      	nop
 800c6f4:	3724      	adds	r7, #36	; 0x24
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fc:	4770      	bx	lr
 800c6fe:	bf00      	nop
 800c700:	58024400 	.word	0x58024400
 800c704:	03d09000 	.word	0x03d09000
 800c708:	46000000 	.word	0x46000000
 800c70c:	4c742400 	.word	0x4c742400
 800c710:	4a742400 	.word	0x4a742400
 800c714:	4bb71b00 	.word	0x4bb71b00

0800c718 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c718:	b480      	push	{r7}
 800c71a:	b089      	sub	sp, #36	; 0x24
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c720:	4ba1      	ldr	r3, [pc, #644]	; (800c9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c724:	f003 0303 	and.w	r3, r3, #3
 800c728:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c72a:	4b9f      	ldr	r3, [pc, #636]	; (800c9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c72c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c72e:	0d1b      	lsrs	r3, r3, #20
 800c730:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c734:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c736:	4b9c      	ldr	r3, [pc, #624]	; (800c9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c73a:	0a1b      	lsrs	r3, r3, #8
 800c73c:	f003 0301 	and.w	r3, r3, #1
 800c740:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c742:	4b99      	ldr	r3, [pc, #612]	; (800c9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c746:	08db      	lsrs	r3, r3, #3
 800c748:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c74c:	693a      	ldr	r2, [r7, #16]
 800c74e:	fb02 f303 	mul.w	r3, r2, r3
 800c752:	ee07 3a90 	vmov	s15, r3
 800c756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c75a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	2b00      	cmp	r3, #0
 800c762:	f000 8111 	beq.w	800c988 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c766:	69bb      	ldr	r3, [r7, #24]
 800c768:	2b02      	cmp	r3, #2
 800c76a:	f000 8083 	beq.w	800c874 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c76e:	69bb      	ldr	r3, [r7, #24]
 800c770:	2b02      	cmp	r3, #2
 800c772:	f200 80a1 	bhi.w	800c8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c776:	69bb      	ldr	r3, [r7, #24]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d003      	beq.n	800c784 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c77c:	69bb      	ldr	r3, [r7, #24]
 800c77e:	2b01      	cmp	r3, #1
 800c780:	d056      	beq.n	800c830 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c782:	e099      	b.n	800c8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c784:	4b88      	ldr	r3, [pc, #544]	; (800c9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f003 0320 	and.w	r3, r3, #32
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d02d      	beq.n	800c7ec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c790:	4b85      	ldr	r3, [pc, #532]	; (800c9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	08db      	lsrs	r3, r3, #3
 800c796:	f003 0303 	and.w	r3, r3, #3
 800c79a:	4a84      	ldr	r2, [pc, #528]	; (800c9ac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c79c:	fa22 f303 	lsr.w	r3, r2, r3
 800c7a0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	ee07 3a90 	vmov	s15, r3
 800c7a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	ee07 3a90 	vmov	s15, r3
 800c7b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7ba:	4b7b      	ldr	r3, [pc, #492]	; (800c9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7c2:	ee07 3a90 	vmov	s15, r3
 800c7c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c9b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c7d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c7ea:	e087      	b.n	800c8fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	ee07 3a90 	vmov	s15, r3
 800c7f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c7fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7fe:	4b6a      	ldr	r3, [pc, #424]	; (800c9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c806:	ee07 3a90 	vmov	s15, r3
 800c80a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c80e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c812:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c9b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c81a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c81e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c82a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c82e:	e065      	b.n	800c8fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	ee07 3a90 	vmov	s15, r3
 800c836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c83a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c83e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c842:	4b59      	ldr	r3, [pc, #356]	; (800c9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c84a:	ee07 3a90 	vmov	s15, r3
 800c84e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c852:	ed97 6a03 	vldr	s12, [r7, #12]
 800c856:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c9b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c85a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c85e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c86a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c86e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c872:	e043      	b.n	800c8fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	ee07 3a90 	vmov	s15, r3
 800c87a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c87e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c9bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c886:	4b48      	ldr	r3, [pc, #288]	; (800c9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c88a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c88e:	ee07 3a90 	vmov	s15, r3
 800c892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c896:	ed97 6a03 	vldr	s12, [r7, #12]
 800c89a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c9b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c89e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c8b6:	e021      	b.n	800c8fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c8b8:	697b      	ldr	r3, [r7, #20]
 800c8ba:	ee07 3a90 	vmov	s15, r3
 800c8be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c8c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8ca:	4b37      	ldr	r3, [pc, #220]	; (800c9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8d2:	ee07 3a90 	vmov	s15, r3
 800c8d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8da:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8de:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c9b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c8e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c8fa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c8fc:	4b2a      	ldr	r3, [pc, #168]	; (800c9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c900:	0a5b      	lsrs	r3, r3, #9
 800c902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c906:	ee07 3a90 	vmov	s15, r3
 800c90a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c90e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c912:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c916:	edd7 6a07 	vldr	s13, [r7, #28]
 800c91a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c91e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c922:	ee17 2a90 	vmov	r2, s15
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c92a:	4b1f      	ldr	r3, [pc, #124]	; (800c9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c92c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c92e:	0c1b      	lsrs	r3, r3, #16
 800c930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c934:	ee07 3a90 	vmov	s15, r3
 800c938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c93c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c940:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c944:	edd7 6a07 	vldr	s13, [r7, #28]
 800c948:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c94c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c950:	ee17 2a90 	vmov	r2, s15
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c958:	4b13      	ldr	r3, [pc, #76]	; (800c9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c95a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c95c:	0e1b      	lsrs	r3, r3, #24
 800c95e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c962:	ee07 3a90 	vmov	s15, r3
 800c966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c96a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c96e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c972:	edd7 6a07 	vldr	s13, [r7, #28]
 800c976:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c97a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c97e:	ee17 2a90 	vmov	r2, s15
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c986:	e008      	b.n	800c99a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2200      	movs	r2, #0
 800c98c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2200      	movs	r2, #0
 800c992:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2200      	movs	r2, #0
 800c998:	609a      	str	r2, [r3, #8]
}
 800c99a:	bf00      	nop
 800c99c:	3724      	adds	r7, #36	; 0x24
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a4:	4770      	bx	lr
 800c9a6:	bf00      	nop
 800c9a8:	58024400 	.word	0x58024400
 800c9ac:	03d09000 	.word	0x03d09000
 800c9b0:	46000000 	.word	0x46000000
 800c9b4:	4c742400 	.word	0x4c742400
 800c9b8:	4a742400 	.word	0x4a742400
 800c9bc:	4bb71b00 	.word	0x4bb71b00

0800c9c0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b084      	sub	sp, #16
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
 800c9c8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c9ce:	4b53      	ldr	r3, [pc, #332]	; (800cb1c <RCCEx_PLL2_Config+0x15c>)
 800c9d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9d2:	f003 0303 	and.w	r3, r3, #3
 800c9d6:	2b03      	cmp	r3, #3
 800c9d8:	d101      	bne.n	800c9de <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c9da:	2301      	movs	r3, #1
 800c9dc:	e099      	b.n	800cb12 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c9de:	4b4f      	ldr	r3, [pc, #316]	; (800cb1c <RCCEx_PLL2_Config+0x15c>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	4a4e      	ldr	r2, [pc, #312]	; (800cb1c <RCCEx_PLL2_Config+0x15c>)
 800c9e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c9e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c9ea:	f7f7 fc67 	bl	80042bc <HAL_GetTick>
 800c9ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c9f0:	e008      	b.n	800ca04 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c9f2:	f7f7 fc63 	bl	80042bc <HAL_GetTick>
 800c9f6:	4602      	mov	r2, r0
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	1ad3      	subs	r3, r2, r3
 800c9fc:	2b02      	cmp	r3, #2
 800c9fe:	d901      	bls.n	800ca04 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ca00:	2303      	movs	r3, #3
 800ca02:	e086      	b.n	800cb12 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ca04:	4b45      	ldr	r3, [pc, #276]	; (800cb1c <RCCEx_PLL2_Config+0x15c>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d1f0      	bne.n	800c9f2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ca10:	4b42      	ldr	r3, [pc, #264]	; (800cb1c <RCCEx_PLL2_Config+0x15c>)
 800ca12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca14:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	031b      	lsls	r3, r3, #12
 800ca1e:	493f      	ldr	r1, [pc, #252]	; (800cb1c <RCCEx_PLL2_Config+0x15c>)
 800ca20:	4313      	orrs	r3, r2
 800ca22:	628b      	str	r3, [r1, #40]	; 0x28
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	685b      	ldr	r3, [r3, #4]
 800ca28:	3b01      	subs	r3, #1
 800ca2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	689b      	ldr	r3, [r3, #8]
 800ca32:	3b01      	subs	r3, #1
 800ca34:	025b      	lsls	r3, r3, #9
 800ca36:	b29b      	uxth	r3, r3
 800ca38:	431a      	orrs	r2, r3
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	68db      	ldr	r3, [r3, #12]
 800ca3e:	3b01      	subs	r3, #1
 800ca40:	041b      	lsls	r3, r3, #16
 800ca42:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ca46:	431a      	orrs	r2, r3
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	691b      	ldr	r3, [r3, #16]
 800ca4c:	3b01      	subs	r3, #1
 800ca4e:	061b      	lsls	r3, r3, #24
 800ca50:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ca54:	4931      	ldr	r1, [pc, #196]	; (800cb1c <RCCEx_PLL2_Config+0x15c>)
 800ca56:	4313      	orrs	r3, r2
 800ca58:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ca5a:	4b30      	ldr	r3, [pc, #192]	; (800cb1c <RCCEx_PLL2_Config+0x15c>)
 800ca5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	695b      	ldr	r3, [r3, #20]
 800ca66:	492d      	ldr	r1, [pc, #180]	; (800cb1c <RCCEx_PLL2_Config+0x15c>)
 800ca68:	4313      	orrs	r3, r2
 800ca6a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ca6c:	4b2b      	ldr	r3, [pc, #172]	; (800cb1c <RCCEx_PLL2_Config+0x15c>)
 800ca6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca70:	f023 0220 	bic.w	r2, r3, #32
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	699b      	ldr	r3, [r3, #24]
 800ca78:	4928      	ldr	r1, [pc, #160]	; (800cb1c <RCCEx_PLL2_Config+0x15c>)
 800ca7a:	4313      	orrs	r3, r2
 800ca7c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ca7e:	4b27      	ldr	r3, [pc, #156]	; (800cb1c <RCCEx_PLL2_Config+0x15c>)
 800ca80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca82:	4a26      	ldr	r2, [pc, #152]	; (800cb1c <RCCEx_PLL2_Config+0x15c>)
 800ca84:	f023 0310 	bic.w	r3, r3, #16
 800ca88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ca8a:	4b24      	ldr	r3, [pc, #144]	; (800cb1c <RCCEx_PLL2_Config+0x15c>)
 800ca8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ca8e:	4b24      	ldr	r3, [pc, #144]	; (800cb20 <RCCEx_PLL2_Config+0x160>)
 800ca90:	4013      	ands	r3, r2
 800ca92:	687a      	ldr	r2, [r7, #4]
 800ca94:	69d2      	ldr	r2, [r2, #28]
 800ca96:	00d2      	lsls	r2, r2, #3
 800ca98:	4920      	ldr	r1, [pc, #128]	; (800cb1c <RCCEx_PLL2_Config+0x15c>)
 800ca9a:	4313      	orrs	r3, r2
 800ca9c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ca9e:	4b1f      	ldr	r3, [pc, #124]	; (800cb1c <RCCEx_PLL2_Config+0x15c>)
 800caa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caa2:	4a1e      	ldr	r2, [pc, #120]	; (800cb1c <RCCEx_PLL2_Config+0x15c>)
 800caa4:	f043 0310 	orr.w	r3, r3, #16
 800caa8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d106      	bne.n	800cabe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cab0:	4b1a      	ldr	r3, [pc, #104]	; (800cb1c <RCCEx_PLL2_Config+0x15c>)
 800cab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cab4:	4a19      	ldr	r2, [pc, #100]	; (800cb1c <RCCEx_PLL2_Config+0x15c>)
 800cab6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800caba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cabc:	e00f      	b.n	800cade <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	2b01      	cmp	r3, #1
 800cac2:	d106      	bne.n	800cad2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cac4:	4b15      	ldr	r3, [pc, #84]	; (800cb1c <RCCEx_PLL2_Config+0x15c>)
 800cac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cac8:	4a14      	ldr	r2, [pc, #80]	; (800cb1c <RCCEx_PLL2_Config+0x15c>)
 800caca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cace:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cad0:	e005      	b.n	800cade <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cad2:	4b12      	ldr	r3, [pc, #72]	; (800cb1c <RCCEx_PLL2_Config+0x15c>)
 800cad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cad6:	4a11      	ldr	r2, [pc, #68]	; (800cb1c <RCCEx_PLL2_Config+0x15c>)
 800cad8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cadc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cade:	4b0f      	ldr	r3, [pc, #60]	; (800cb1c <RCCEx_PLL2_Config+0x15c>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	4a0e      	ldr	r2, [pc, #56]	; (800cb1c <RCCEx_PLL2_Config+0x15c>)
 800cae4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cae8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800caea:	f7f7 fbe7 	bl	80042bc <HAL_GetTick>
 800caee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800caf0:	e008      	b.n	800cb04 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800caf2:	f7f7 fbe3 	bl	80042bc <HAL_GetTick>
 800caf6:	4602      	mov	r2, r0
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	1ad3      	subs	r3, r2, r3
 800cafc:	2b02      	cmp	r3, #2
 800cafe:	d901      	bls.n	800cb04 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cb00:	2303      	movs	r3, #3
 800cb02:	e006      	b.n	800cb12 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cb04:	4b05      	ldr	r3, [pc, #20]	; (800cb1c <RCCEx_PLL2_Config+0x15c>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d0f0      	beq.n	800caf2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cb10:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	3710      	adds	r7, #16
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}
 800cb1a:	bf00      	nop
 800cb1c:	58024400 	.word	0x58024400
 800cb20:	ffff0007 	.word	0xffff0007

0800cb24 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b084      	sub	sp, #16
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
 800cb2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cb32:	4b53      	ldr	r3, [pc, #332]	; (800cc80 <RCCEx_PLL3_Config+0x15c>)
 800cb34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb36:	f003 0303 	and.w	r3, r3, #3
 800cb3a:	2b03      	cmp	r3, #3
 800cb3c:	d101      	bne.n	800cb42 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cb3e:	2301      	movs	r3, #1
 800cb40:	e099      	b.n	800cc76 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cb42:	4b4f      	ldr	r3, [pc, #316]	; (800cc80 <RCCEx_PLL3_Config+0x15c>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	4a4e      	ldr	r2, [pc, #312]	; (800cc80 <RCCEx_PLL3_Config+0x15c>)
 800cb48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cb4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb4e:	f7f7 fbb5 	bl	80042bc <HAL_GetTick>
 800cb52:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cb54:	e008      	b.n	800cb68 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cb56:	f7f7 fbb1 	bl	80042bc <HAL_GetTick>
 800cb5a:	4602      	mov	r2, r0
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	1ad3      	subs	r3, r2, r3
 800cb60:	2b02      	cmp	r3, #2
 800cb62:	d901      	bls.n	800cb68 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cb64:	2303      	movs	r3, #3
 800cb66:	e086      	b.n	800cc76 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cb68:	4b45      	ldr	r3, [pc, #276]	; (800cc80 <RCCEx_PLL3_Config+0x15c>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d1f0      	bne.n	800cb56 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cb74:	4b42      	ldr	r3, [pc, #264]	; (800cc80 <RCCEx_PLL3_Config+0x15c>)
 800cb76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb78:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	051b      	lsls	r3, r3, #20
 800cb82:	493f      	ldr	r1, [pc, #252]	; (800cc80 <RCCEx_PLL3_Config+0x15c>)
 800cb84:	4313      	orrs	r3, r2
 800cb86:	628b      	str	r3, [r1, #40]	; 0x28
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	685b      	ldr	r3, [r3, #4]
 800cb8c:	3b01      	subs	r3, #1
 800cb8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	689b      	ldr	r3, [r3, #8]
 800cb96:	3b01      	subs	r3, #1
 800cb98:	025b      	lsls	r3, r3, #9
 800cb9a:	b29b      	uxth	r3, r3
 800cb9c:	431a      	orrs	r2, r3
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	68db      	ldr	r3, [r3, #12]
 800cba2:	3b01      	subs	r3, #1
 800cba4:	041b      	lsls	r3, r3, #16
 800cba6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cbaa:	431a      	orrs	r2, r3
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	691b      	ldr	r3, [r3, #16]
 800cbb0:	3b01      	subs	r3, #1
 800cbb2:	061b      	lsls	r3, r3, #24
 800cbb4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cbb8:	4931      	ldr	r1, [pc, #196]	; (800cc80 <RCCEx_PLL3_Config+0x15c>)
 800cbba:	4313      	orrs	r3, r2
 800cbbc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cbbe:	4b30      	ldr	r3, [pc, #192]	; (800cc80 <RCCEx_PLL3_Config+0x15c>)
 800cbc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbc2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	695b      	ldr	r3, [r3, #20]
 800cbca:	492d      	ldr	r1, [pc, #180]	; (800cc80 <RCCEx_PLL3_Config+0x15c>)
 800cbcc:	4313      	orrs	r3, r2
 800cbce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cbd0:	4b2b      	ldr	r3, [pc, #172]	; (800cc80 <RCCEx_PLL3_Config+0x15c>)
 800cbd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbd4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	699b      	ldr	r3, [r3, #24]
 800cbdc:	4928      	ldr	r1, [pc, #160]	; (800cc80 <RCCEx_PLL3_Config+0x15c>)
 800cbde:	4313      	orrs	r3, r2
 800cbe0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cbe2:	4b27      	ldr	r3, [pc, #156]	; (800cc80 <RCCEx_PLL3_Config+0x15c>)
 800cbe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbe6:	4a26      	ldr	r2, [pc, #152]	; (800cc80 <RCCEx_PLL3_Config+0x15c>)
 800cbe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cbec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cbee:	4b24      	ldr	r3, [pc, #144]	; (800cc80 <RCCEx_PLL3_Config+0x15c>)
 800cbf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cbf2:	4b24      	ldr	r3, [pc, #144]	; (800cc84 <RCCEx_PLL3_Config+0x160>)
 800cbf4:	4013      	ands	r3, r2
 800cbf6:	687a      	ldr	r2, [r7, #4]
 800cbf8:	69d2      	ldr	r2, [r2, #28]
 800cbfa:	00d2      	lsls	r2, r2, #3
 800cbfc:	4920      	ldr	r1, [pc, #128]	; (800cc80 <RCCEx_PLL3_Config+0x15c>)
 800cbfe:	4313      	orrs	r3, r2
 800cc00:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cc02:	4b1f      	ldr	r3, [pc, #124]	; (800cc80 <RCCEx_PLL3_Config+0x15c>)
 800cc04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc06:	4a1e      	ldr	r2, [pc, #120]	; (800cc80 <RCCEx_PLL3_Config+0x15c>)
 800cc08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d106      	bne.n	800cc22 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cc14:	4b1a      	ldr	r3, [pc, #104]	; (800cc80 <RCCEx_PLL3_Config+0x15c>)
 800cc16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc18:	4a19      	ldr	r2, [pc, #100]	; (800cc80 <RCCEx_PLL3_Config+0x15c>)
 800cc1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cc1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cc20:	e00f      	b.n	800cc42 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	2b01      	cmp	r3, #1
 800cc26:	d106      	bne.n	800cc36 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cc28:	4b15      	ldr	r3, [pc, #84]	; (800cc80 <RCCEx_PLL3_Config+0x15c>)
 800cc2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc2c:	4a14      	ldr	r2, [pc, #80]	; (800cc80 <RCCEx_PLL3_Config+0x15c>)
 800cc2e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cc32:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cc34:	e005      	b.n	800cc42 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cc36:	4b12      	ldr	r3, [pc, #72]	; (800cc80 <RCCEx_PLL3_Config+0x15c>)
 800cc38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc3a:	4a11      	ldr	r2, [pc, #68]	; (800cc80 <RCCEx_PLL3_Config+0x15c>)
 800cc3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cc40:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cc42:	4b0f      	ldr	r3, [pc, #60]	; (800cc80 <RCCEx_PLL3_Config+0x15c>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	4a0e      	ldr	r2, [pc, #56]	; (800cc80 <RCCEx_PLL3_Config+0x15c>)
 800cc48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cc4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc4e:	f7f7 fb35 	bl	80042bc <HAL_GetTick>
 800cc52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cc54:	e008      	b.n	800cc68 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cc56:	f7f7 fb31 	bl	80042bc <HAL_GetTick>
 800cc5a:	4602      	mov	r2, r0
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	1ad3      	subs	r3, r2, r3
 800cc60:	2b02      	cmp	r3, #2
 800cc62:	d901      	bls.n	800cc68 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cc64:	2303      	movs	r3, #3
 800cc66:	e006      	b.n	800cc76 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cc68:	4b05      	ldr	r3, [pc, #20]	; (800cc80 <RCCEx_PLL3_Config+0x15c>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d0f0      	beq.n	800cc56 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cc74:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3710      	adds	r7, #16
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}
 800cc7e:	bf00      	nop
 800cc80:	58024400 	.word	0x58024400
 800cc84:	ffff0007 	.word	0xffff0007

0800cc88 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b084      	sub	sp, #16
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800cc90:	2301      	movs	r3, #1
 800cc92:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d074      	beq.n	800cd84 <HAL_RTC_Init+0xfc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800cca0:	b2db      	uxtb	r3, r3
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d106      	bne.n	800ccb4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	2200      	movs	r2, #0
 800ccaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f7f6 f806 	bl	8002cc0 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2202      	movs	r2, #2
 800ccb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	68db      	ldr	r3, [r3, #12]
 800ccc2:	f003 0310 	and.w	r3, r3, #16
 800ccc6:	2b10      	cmp	r3, #16
 800ccc8:	d053      	beq.n	800cd72 <HAL_RTC_Init+0xea>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	22ca      	movs	r2, #202	; 0xca
 800ccd0:	625a      	str	r2, [r3, #36]	; 0x24
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	2253      	movs	r2, #83	; 0x53
 800ccd8:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f000 f87e 	bl	800cddc <RTC_EnterInitMode>
 800cce0:	4603      	mov	r3, r0
 800cce2:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800cce4:	7bfb      	ldrb	r3, [r7, #15]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d124      	bne.n	800cd34 <HAL_RTC_Init+0xac>
      {
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	6999      	ldr	r1, [r3, #24]
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681a      	ldr	r2, [r3, #0]
 800ccf4:	4b26      	ldr	r3, [pc, #152]	; (800cd90 <HAL_RTC_Init+0x108>)
 800ccf6:	400b      	ands	r3, r1
 800ccf8:	6193      	str	r3, [r2, #24]
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	6999      	ldr	r1, [r3, #24]
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	685a      	ldr	r2, [r3, #4]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	691b      	ldr	r3, [r3, #16]
 800cd08:	431a      	orrs	r2, r3
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	699b      	ldr	r3, [r3, #24]
 800cd0e:	431a      	orrs	r2, r3
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	430a      	orrs	r2, r1
 800cd16:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	689b      	ldr	r3, [r3, #8]
 800cd1c:	0419      	lsls	r1, r3, #16
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	68da      	ldr	r2, [r3, #12]
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	430a      	orrs	r2, r1
 800cd28:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f000 f88c 	bl	800ce48 <RTC_ExitInitMode>
 800cd30:	4603      	mov	r3, r0
 800cd32:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800cd34:	7bfb      	ldrb	r3, [r7, #15]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d116      	bne.n	800cd68 <HAL_RTC_Init+0xe0>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	699a      	ldr	r2, [r3, #24]
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800cd48:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	6999      	ldr	r1, [r3, #24]
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	6a1a      	ldr	r2, [r3, #32]
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	69db      	ldr	r3, [r3, #28]
 800cd58:	431a      	orrs	r2, r3
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	695b      	ldr	r3, [r3, #20]
 800cd5e:	431a      	orrs	r2, r3
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	430a      	orrs	r2, r1
 800cd66:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	22ff      	movs	r2, #255	; 0xff
 800cd6e:	625a      	str	r2, [r3, #36]	; 0x24
 800cd70:	e001      	b.n	800cd76 <HAL_RTC_Init+0xee>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800cd72:	2300      	movs	r3, #0
 800cd74:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800cd76:	7bfb      	ldrb	r3, [r7, #15]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d103      	bne.n	800cd84 <HAL_RTC_Init+0xfc>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2201      	movs	r2, #1
 800cd80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  /* return status */
  return status;
 800cd84:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	3710      	adds	r7, #16
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}
 800cd8e:	bf00      	nop
 800cd90:	fb8fffbf 	.word	0xfb8fffbf

0800cd94 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b084      	sub	sp, #16
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	4a0d      	ldr	r2, [pc, #52]	; (800cdd8 <HAL_RTC_WaitForSynchro+0x44>)
 800cda2:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800cda4:	f7f7 fa8a 	bl	80042bc <HAL_GetTick>
 800cda8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800cdaa:	e009      	b.n	800cdc0 <HAL_RTC_WaitForSynchro+0x2c>
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cdac:	f7f7 fa86 	bl	80042bc <HAL_GetTick>
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	1ad3      	subs	r3, r2, r3
 800cdb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cdba:	d901      	bls.n	800cdc0 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800cdbc:	2303      	movs	r3, #3
 800cdbe:	e007      	b.n	800cdd0 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	68db      	ldr	r3, [r3, #12]
 800cdc6:	f003 0320 	and.w	r3, r3, #32
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d0ee      	beq.n	800cdac <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800cdce:	2300      	movs	r3, #0
}
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	3710      	adds	r7, #16
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	bd80      	pop	{r7, pc}
 800cdd8:	0001005f 	.word	0x0001005f

0800cddc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b084      	sub	sp, #16
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cde4:	2300      	movs	r3, #0
 800cde6:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(TAMP)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	68db      	ldr	r3, [r3, #12]
 800cdee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d123      	bne.n	800ce3e <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	68da      	ldr	r2, [r3, #12]
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ce04:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800ce06:	f7f7 fa59 	bl	80042bc <HAL_GetTick>
 800ce0a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ce0c:	e00d      	b.n	800ce2a <RTC_EnterInitMode+0x4e>

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800ce0e:	f7f7 fa55 	bl	80042bc <HAL_GetTick>
 800ce12:	4602      	mov	r2, r0
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	1ad3      	subs	r3, r2, r3
 800ce18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ce1c:	d905      	bls.n	800ce2a <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800ce1e:	2303      	movs	r3, #3
 800ce20:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2203      	movs	r2, #3
 800ce26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	68db      	ldr	r3, [r3, #12]
 800ce30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d102      	bne.n	800ce3e <RTC_EnterInitMode+0x62>
 800ce38:	7bfb      	ldrb	r3, [r7, #15]
 800ce3a:	2b03      	cmp	r3, #3
 800ce3c:	d1e7      	bne.n	800ce0e <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 800ce3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce40:	4618      	mov	r0, r3
 800ce42:	3710      	adds	r7, #16
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}

0800ce48 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b084      	sub	sp, #16
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ce50:	2300      	movs	r3, #0
 800ce52:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800ce54:	4b1a      	ldr	r3, [pc, #104]	; (800cec0 <RTC_ExitInitMode+0x78>)
 800ce56:	68db      	ldr	r3, [r3, #12]
 800ce58:	4a19      	ldr	r2, [pc, #100]	; (800cec0 <RTC_ExitInitMode+0x78>)
 800ce5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce5e:	60d3      	str	r3, [r2, #12]
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800ce60:	4b17      	ldr	r3, [pc, #92]	; (800cec0 <RTC_ExitInitMode+0x78>)
 800ce62:	699b      	ldr	r3, [r3, #24]
 800ce64:	f003 0320 	and.w	r3, r3, #32
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d10c      	bne.n	800ce86 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ce6c:	6878      	ldr	r0, [r7, #4]
 800ce6e:	f7ff ff91 	bl	800cd94 <HAL_RTC_WaitForSynchro>
 800ce72:	4603      	mov	r3, r0
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d01e      	beq.n	800ceb6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2203      	movs	r2, #3
 800ce7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800ce80:	2303      	movs	r3, #3
 800ce82:	73fb      	strb	r3, [r7, #15]
 800ce84:	e017      	b.n	800ceb6 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ce86:	4b0e      	ldr	r3, [pc, #56]	; (800cec0 <RTC_ExitInitMode+0x78>)
 800ce88:	699b      	ldr	r3, [r3, #24]
 800ce8a:	4a0d      	ldr	r2, [pc, #52]	; (800cec0 <RTC_ExitInitMode+0x78>)
 800ce8c:	f023 0320 	bic.w	r3, r3, #32
 800ce90:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f7ff ff7e 	bl	800cd94 <HAL_RTC_WaitForSynchro>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d005      	beq.n	800ceaa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2203      	movs	r2, #3
 800cea2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800cea6:	2303      	movs	r3, #3
 800cea8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ceaa:	4b05      	ldr	r3, [pc, #20]	; (800cec0 <RTC_ExitInitMode+0x78>)
 800ceac:	699b      	ldr	r3, [r3, #24]
 800ceae:	4a04      	ldr	r2, [pc, #16]	; (800cec0 <RTC_ExitInitMode+0x78>)
 800ceb0:	f043 0320 	orr.w	r3, r3, #32
 800ceb4:	6193      	str	r3, [r2, #24]
  }

  return status;
 800ceb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceb8:	4618      	mov	r0, r3
 800ceba:	3710      	adds	r7, #16
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}
 800cec0:	58004000 	.word	0x58004000

0800cec4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b082      	sub	sp, #8
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d101      	bne.n	800ced6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ced2:	2301      	movs	r3, #1
 800ced4:	e042      	b.n	800cf5c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d106      	bne.n	800ceee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2200      	movs	r2, #0
 800cee4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f7f7 f8c5 	bl	8004078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2224      	movs	r2, #36	; 0x24
 800cef2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	681a      	ldr	r2, [r3, #0]
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	f022 0201 	bic.w	r2, r2, #1
 800cf04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f000 fd5c 	bl	800d9c4 <UART_SetConfig>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	2b01      	cmp	r3, #1
 800cf10:	d101      	bne.n	800cf16 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cf12:	2301      	movs	r3, #1
 800cf14:	e022      	b.n	800cf5c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d002      	beq.n	800cf24 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f001 fbbc 	bl	800e69c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	685a      	ldr	r2, [r3, #4]
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cf32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	689a      	ldr	r2, [r3, #8]
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cf42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	681a      	ldr	r2, [r3, #0]
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	f042 0201 	orr.w	r2, r2, #1
 800cf52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f001 fc43 	bl	800e7e0 <UART_CheckIdleState>
 800cf5a:	4603      	mov	r3, r0
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	3708      	adds	r7, #8
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}

0800cf64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b08a      	sub	sp, #40	; 0x28
 800cf68:	af02      	add	r7, sp, #8
 800cf6a:	60f8      	str	r0, [r7, #12]
 800cf6c:	60b9      	str	r1, [r7, #8]
 800cf6e:	603b      	str	r3, [r7, #0]
 800cf70:	4613      	mov	r3, r2
 800cf72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf7a:	2b20      	cmp	r3, #32
 800cf7c:	d17b      	bne.n	800d076 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d002      	beq.n	800cf8a <HAL_UART_Transmit+0x26>
 800cf84:	88fb      	ldrh	r3, [r7, #6]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d101      	bne.n	800cf8e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	e074      	b.n	800d078 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	2200      	movs	r2, #0
 800cf92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	2221      	movs	r2, #33	; 0x21
 800cf9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cf9e:	f7f7 f98d 	bl	80042bc <HAL_GetTick>
 800cfa2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	88fa      	ldrh	r2, [r7, #6]
 800cfa8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	88fa      	ldrh	r2, [r7, #6]
 800cfb0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	689b      	ldr	r3, [r3, #8]
 800cfb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cfbc:	d108      	bne.n	800cfd0 <HAL_UART_Transmit+0x6c>
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	691b      	ldr	r3, [r3, #16]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d104      	bne.n	800cfd0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cfca:	68bb      	ldr	r3, [r7, #8]
 800cfcc:	61bb      	str	r3, [r7, #24]
 800cfce:	e003      	b.n	800cfd8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cfd8:	e030      	b.n	800d03c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	9300      	str	r3, [sp, #0]
 800cfde:	697b      	ldr	r3, [r7, #20]
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	2180      	movs	r1, #128	; 0x80
 800cfe4:	68f8      	ldr	r0, [r7, #12]
 800cfe6:	f001 fca5 	bl	800e934 <UART_WaitOnFlagUntilTimeout>
 800cfea:	4603      	mov	r3, r0
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d005      	beq.n	800cffc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	2220      	movs	r2, #32
 800cff4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800cff8:	2303      	movs	r3, #3
 800cffa:	e03d      	b.n	800d078 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800cffc:	69fb      	ldr	r3, [r7, #28]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d10b      	bne.n	800d01a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d002:	69bb      	ldr	r3, [r7, #24]
 800d004:	881b      	ldrh	r3, [r3, #0]
 800d006:	461a      	mov	r2, r3
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d010:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d012:	69bb      	ldr	r3, [r7, #24]
 800d014:	3302      	adds	r3, #2
 800d016:	61bb      	str	r3, [r7, #24]
 800d018:	e007      	b.n	800d02a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d01a:	69fb      	ldr	r3, [r7, #28]
 800d01c:	781a      	ldrb	r2, [r3, #0]
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d024:	69fb      	ldr	r3, [r7, #28]
 800d026:	3301      	adds	r3, #1
 800d028:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d030:	b29b      	uxth	r3, r3
 800d032:	3b01      	subs	r3, #1
 800d034:	b29a      	uxth	r2, r3
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d042:	b29b      	uxth	r3, r3
 800d044:	2b00      	cmp	r3, #0
 800d046:	d1c8      	bne.n	800cfda <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	9300      	str	r3, [sp, #0]
 800d04c:	697b      	ldr	r3, [r7, #20]
 800d04e:	2200      	movs	r2, #0
 800d050:	2140      	movs	r1, #64	; 0x40
 800d052:	68f8      	ldr	r0, [r7, #12]
 800d054:	f001 fc6e 	bl	800e934 <UART_WaitOnFlagUntilTimeout>
 800d058:	4603      	mov	r3, r0
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d005      	beq.n	800d06a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	2220      	movs	r2, #32
 800d062:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800d066:	2303      	movs	r3, #3
 800d068:	e006      	b.n	800d078 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	2220      	movs	r2, #32
 800d06e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800d072:	2300      	movs	r3, #0
 800d074:	e000      	b.n	800d078 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d076:	2302      	movs	r3, #2
  }
}
 800d078:	4618      	mov	r0, r3
 800d07a:	3720      	adds	r7, #32
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bd80      	pop	{r7, pc}

0800d080 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b08a      	sub	sp, #40	; 0x28
 800d084:	af02      	add	r7, sp, #8
 800d086:	60f8      	str	r0, [r7, #12]
 800d088:	60b9      	str	r1, [r7, #8]
 800d08a:	603b      	str	r3, [r7, #0]
 800d08c:	4613      	mov	r3, r2
 800d08e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d096:	2b20      	cmp	r3, #32
 800d098:	f040 80b5 	bne.w	800d206 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d002      	beq.n	800d0a8 <HAL_UART_Receive+0x28>
 800d0a2:	88fb      	ldrh	r3, [r7, #6]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d101      	bne.n	800d0ac <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	e0ad      	b.n	800d208 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	2222      	movs	r2, #34	; 0x22
 800d0b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	2200      	movs	r2, #0
 800d0c0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d0c2:	f7f7 f8fb 	bl	80042bc <HAL_GetTick>
 800d0c6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	88fa      	ldrh	r2, [r7, #6]
 800d0cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	88fa      	ldrh	r2, [r7, #6]
 800d0d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	689b      	ldr	r3, [r3, #8]
 800d0dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d0e0:	d10e      	bne.n	800d100 <HAL_UART_Receive+0x80>
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	691b      	ldr	r3, [r3, #16]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d105      	bne.n	800d0f6 <HAL_UART_Receive+0x76>
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d0f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d0f4:	e02d      	b.n	800d152 <HAL_UART_Receive+0xd2>
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	22ff      	movs	r2, #255	; 0xff
 800d0fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d0fe:	e028      	b.n	800d152 <HAL_UART_Receive+0xd2>
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	689b      	ldr	r3, [r3, #8]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d10d      	bne.n	800d124 <HAL_UART_Receive+0xa4>
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	691b      	ldr	r3, [r3, #16]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d104      	bne.n	800d11a <HAL_UART_Receive+0x9a>
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	22ff      	movs	r2, #255	; 0xff
 800d114:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d118:	e01b      	b.n	800d152 <HAL_UART_Receive+0xd2>
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	227f      	movs	r2, #127	; 0x7f
 800d11e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d122:	e016      	b.n	800d152 <HAL_UART_Receive+0xd2>
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	689b      	ldr	r3, [r3, #8]
 800d128:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d12c:	d10d      	bne.n	800d14a <HAL_UART_Receive+0xca>
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	691b      	ldr	r3, [r3, #16]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d104      	bne.n	800d140 <HAL_UART_Receive+0xc0>
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	227f      	movs	r2, #127	; 0x7f
 800d13a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d13e:	e008      	b.n	800d152 <HAL_UART_Receive+0xd2>
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	223f      	movs	r2, #63	; 0x3f
 800d144:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d148:	e003      	b.n	800d152 <HAL_UART_Receive+0xd2>
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	2200      	movs	r2, #0
 800d14e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d158:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	689b      	ldr	r3, [r3, #8]
 800d15e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d162:	d108      	bne.n	800d176 <HAL_UART_Receive+0xf6>
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	691b      	ldr	r3, [r3, #16]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d104      	bne.n	800d176 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800d16c:	2300      	movs	r3, #0
 800d16e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d170:	68bb      	ldr	r3, [r7, #8]
 800d172:	61bb      	str	r3, [r7, #24]
 800d174:	e003      	b.n	800d17e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d17a:	2300      	movs	r3, #0
 800d17c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800d17e:	e036      	b.n	800d1ee <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	9300      	str	r3, [sp, #0]
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	2200      	movs	r2, #0
 800d188:	2120      	movs	r1, #32
 800d18a:	68f8      	ldr	r0, [r7, #12]
 800d18c:	f001 fbd2 	bl	800e934 <UART_WaitOnFlagUntilTimeout>
 800d190:	4603      	mov	r3, r0
 800d192:	2b00      	cmp	r3, #0
 800d194:	d005      	beq.n	800d1a2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	2220      	movs	r2, #32
 800d19a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800d19e:	2303      	movs	r3, #3
 800d1a0:	e032      	b.n	800d208 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800d1a2:	69fb      	ldr	r3, [r7, #28]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d10c      	bne.n	800d1c2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ae:	b29a      	uxth	r2, r3
 800d1b0:	8a7b      	ldrh	r3, [r7, #18]
 800d1b2:	4013      	ands	r3, r2
 800d1b4:	b29a      	uxth	r2, r3
 800d1b6:	69bb      	ldr	r3, [r7, #24]
 800d1b8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800d1ba:	69bb      	ldr	r3, [r7, #24]
 800d1bc:	3302      	adds	r3, #2
 800d1be:	61bb      	str	r3, [r7, #24]
 800d1c0:	e00c      	b.n	800d1dc <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1c8:	b2da      	uxtb	r2, r3
 800d1ca:	8a7b      	ldrh	r3, [r7, #18]
 800d1cc:	b2db      	uxtb	r3, r3
 800d1ce:	4013      	ands	r3, r2
 800d1d0:	b2da      	uxtb	r2, r3
 800d1d2:	69fb      	ldr	r3, [r7, #28]
 800d1d4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800d1d6:	69fb      	ldr	r3, [r7, #28]
 800d1d8:	3301      	adds	r3, #1
 800d1da:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d1e2:	b29b      	uxth	r3, r3
 800d1e4:	3b01      	subs	r3, #1
 800d1e6:	b29a      	uxth	r2, r3
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d1f4:	b29b      	uxth	r3, r3
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d1c2      	bne.n	800d180 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	2220      	movs	r2, #32
 800d1fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800d202:	2300      	movs	r3, #0
 800d204:	e000      	b.n	800d208 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800d206:	2302      	movs	r3, #2
  }
}
 800d208:	4618      	mov	r0, r3
 800d20a:	3720      	adds	r7, #32
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}

0800d210 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b0ba      	sub	sp, #232	; 0xe8
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	69db      	ldr	r3, [r3, #28]
 800d21e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	689b      	ldr	r3, [r3, #8]
 800d232:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d236:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d23a:	f640 030f 	movw	r3, #2063	; 0x80f
 800d23e:	4013      	ands	r3, r2
 800d240:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d244:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d11b      	bne.n	800d284 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d24c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d250:	f003 0320 	and.w	r3, r3, #32
 800d254:	2b00      	cmp	r3, #0
 800d256:	d015      	beq.n	800d284 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d25c:	f003 0320 	and.w	r3, r3, #32
 800d260:	2b00      	cmp	r3, #0
 800d262:	d105      	bne.n	800d270 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d264:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d009      	beq.n	800d284 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d274:	2b00      	cmp	r3, #0
 800d276:	f000 8377 	beq.w	800d968 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	4798      	blx	r3
      }
      return;
 800d282:	e371      	b.n	800d968 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d284:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d288:	2b00      	cmp	r3, #0
 800d28a:	f000 8123 	beq.w	800d4d4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d28e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d292:	4b8d      	ldr	r3, [pc, #564]	; (800d4c8 <HAL_UART_IRQHandler+0x2b8>)
 800d294:	4013      	ands	r3, r2
 800d296:	2b00      	cmp	r3, #0
 800d298:	d106      	bne.n	800d2a8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d29a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d29e:	4b8b      	ldr	r3, [pc, #556]	; (800d4cc <HAL_UART_IRQHandler+0x2bc>)
 800d2a0:	4013      	ands	r3, r2
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	f000 8116 	beq.w	800d4d4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d2a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d2ac:	f003 0301 	and.w	r3, r3, #1
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d011      	beq.n	800d2d8 <HAL_UART_IRQHandler+0xc8>
 800d2b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d2b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d00b      	beq.n	800d2d8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	2201      	movs	r2, #1
 800d2c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2ce:	f043 0201 	orr.w	r2, r3, #1
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d2d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d2dc:	f003 0302 	and.w	r3, r3, #2
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d011      	beq.n	800d308 <HAL_UART_IRQHandler+0xf8>
 800d2e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d2e8:	f003 0301 	and.w	r3, r3, #1
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d00b      	beq.n	800d308 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	2202      	movs	r2, #2
 800d2f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2fe:	f043 0204 	orr.w	r2, r3, #4
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d30c:	f003 0304 	and.w	r3, r3, #4
 800d310:	2b00      	cmp	r3, #0
 800d312:	d011      	beq.n	800d338 <HAL_UART_IRQHandler+0x128>
 800d314:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d318:	f003 0301 	and.w	r3, r3, #1
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d00b      	beq.n	800d338 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	2204      	movs	r2, #4
 800d326:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d32e:	f043 0202 	orr.w	r2, r3, #2
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d33c:	f003 0308 	and.w	r3, r3, #8
 800d340:	2b00      	cmp	r3, #0
 800d342:	d017      	beq.n	800d374 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d348:	f003 0320 	and.w	r3, r3, #32
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d105      	bne.n	800d35c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d350:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d354:	4b5c      	ldr	r3, [pc, #368]	; (800d4c8 <HAL_UART_IRQHandler+0x2b8>)
 800d356:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d00b      	beq.n	800d374 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	2208      	movs	r2, #8
 800d362:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d36a:	f043 0208 	orr.w	r2, r3, #8
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d378:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d012      	beq.n	800d3a6 <HAL_UART_IRQHandler+0x196>
 800d380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d384:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d00c      	beq.n	800d3a6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d394:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d39c:	f043 0220 	orr.w	r2, r3, #32
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	f000 82dd 	beq.w	800d96c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d3b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3b6:	f003 0320 	and.w	r3, r3, #32
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d013      	beq.n	800d3e6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d3be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d3c2:	f003 0320 	and.w	r3, r3, #32
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d105      	bne.n	800d3d6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d3ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d3ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d007      	beq.n	800d3e6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d003      	beq.n	800d3e6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	689b      	ldr	r3, [r3, #8]
 800d3f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3fa:	2b40      	cmp	r3, #64	; 0x40
 800d3fc:	d005      	beq.n	800d40a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d3fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d402:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d406:	2b00      	cmp	r3, #0
 800d408:	d054      	beq.n	800d4b4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d40a:	6878      	ldr	r0, [r7, #4]
 800d40c:	f001 fafa 	bl	800ea04 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	689b      	ldr	r3, [r3, #8]
 800d416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d41a:	2b40      	cmp	r3, #64	; 0x40
 800d41c:	d146      	bne.n	800d4ac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	3308      	adds	r3, #8
 800d424:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d428:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d42c:	e853 3f00 	ldrex	r3, [r3]
 800d430:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d434:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d438:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d43c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	3308      	adds	r3, #8
 800d446:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d44a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d44e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d452:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d456:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d45a:	e841 2300 	strex	r3, r2, [r1]
 800d45e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d462:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d466:	2b00      	cmp	r3, #0
 800d468:	d1d9      	bne.n	800d41e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d470:	2b00      	cmp	r3, #0
 800d472:	d017      	beq.n	800d4a4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d47a:	4a15      	ldr	r2, [pc, #84]	; (800d4d0 <HAL_UART_IRQHandler+0x2c0>)
 800d47c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d484:	4618      	mov	r0, r3
 800d486:	f7f8 fc49 	bl	8005d1c <HAL_DMA_Abort_IT>
 800d48a:	4603      	mov	r3, r0
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d019      	beq.n	800d4c4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d498:	687a      	ldr	r2, [r7, #4]
 800d49a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800d49e:	4610      	mov	r0, r2
 800d4a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4a2:	e00f      	b.n	800d4c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f000 fa77 	bl	800d998 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4aa:	e00b      	b.n	800d4c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f000 fa73 	bl	800d998 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4b2:	e007      	b.n	800d4c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d4b4:	6878      	ldr	r0, [r7, #4]
 800d4b6:	f000 fa6f 	bl	800d998 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	2200      	movs	r2, #0
 800d4be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800d4c2:	e253      	b.n	800d96c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4c4:	bf00      	nop
    return;
 800d4c6:	e251      	b.n	800d96c <HAL_UART_IRQHandler+0x75c>
 800d4c8:	10000001 	.word	0x10000001
 800d4cc:	04000120 	.word	0x04000120
 800d4d0:	0800ead1 	.word	0x0800ead1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4d8:	2b01      	cmp	r3, #1
 800d4da:	f040 81e7 	bne.w	800d8ac <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d4de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4e2:	f003 0310 	and.w	r3, r3, #16
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	f000 81e0 	beq.w	800d8ac <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d4ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d4f0:	f003 0310 	and.w	r3, r3, #16
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	f000 81d9 	beq.w	800d8ac <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	2210      	movs	r2, #16
 800d500:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	689b      	ldr	r3, [r3, #8]
 800d508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d50c:	2b40      	cmp	r3, #64	; 0x40
 800d50e:	f040 8151 	bne.w	800d7b4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	4a96      	ldr	r2, [pc, #600]	; (800d774 <HAL_UART_IRQHandler+0x564>)
 800d51c:	4293      	cmp	r3, r2
 800d51e:	d068      	beq.n	800d5f2 <HAL_UART_IRQHandler+0x3e2>
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	4a93      	ldr	r2, [pc, #588]	; (800d778 <HAL_UART_IRQHandler+0x568>)
 800d52a:	4293      	cmp	r3, r2
 800d52c:	d061      	beq.n	800d5f2 <HAL_UART_IRQHandler+0x3e2>
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	4a91      	ldr	r2, [pc, #580]	; (800d77c <HAL_UART_IRQHandler+0x56c>)
 800d538:	4293      	cmp	r3, r2
 800d53a:	d05a      	beq.n	800d5f2 <HAL_UART_IRQHandler+0x3e2>
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	4a8e      	ldr	r2, [pc, #568]	; (800d780 <HAL_UART_IRQHandler+0x570>)
 800d546:	4293      	cmp	r3, r2
 800d548:	d053      	beq.n	800d5f2 <HAL_UART_IRQHandler+0x3e2>
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	4a8c      	ldr	r2, [pc, #560]	; (800d784 <HAL_UART_IRQHandler+0x574>)
 800d554:	4293      	cmp	r3, r2
 800d556:	d04c      	beq.n	800d5f2 <HAL_UART_IRQHandler+0x3e2>
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	4a89      	ldr	r2, [pc, #548]	; (800d788 <HAL_UART_IRQHandler+0x578>)
 800d562:	4293      	cmp	r3, r2
 800d564:	d045      	beq.n	800d5f2 <HAL_UART_IRQHandler+0x3e2>
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	4a87      	ldr	r2, [pc, #540]	; (800d78c <HAL_UART_IRQHandler+0x57c>)
 800d570:	4293      	cmp	r3, r2
 800d572:	d03e      	beq.n	800d5f2 <HAL_UART_IRQHandler+0x3e2>
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	4a84      	ldr	r2, [pc, #528]	; (800d790 <HAL_UART_IRQHandler+0x580>)
 800d57e:	4293      	cmp	r3, r2
 800d580:	d037      	beq.n	800d5f2 <HAL_UART_IRQHandler+0x3e2>
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	4a82      	ldr	r2, [pc, #520]	; (800d794 <HAL_UART_IRQHandler+0x584>)
 800d58c:	4293      	cmp	r3, r2
 800d58e:	d030      	beq.n	800d5f2 <HAL_UART_IRQHandler+0x3e2>
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	4a7f      	ldr	r2, [pc, #508]	; (800d798 <HAL_UART_IRQHandler+0x588>)
 800d59a:	4293      	cmp	r3, r2
 800d59c:	d029      	beq.n	800d5f2 <HAL_UART_IRQHandler+0x3e2>
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	4a7d      	ldr	r2, [pc, #500]	; (800d79c <HAL_UART_IRQHandler+0x58c>)
 800d5a8:	4293      	cmp	r3, r2
 800d5aa:	d022      	beq.n	800d5f2 <HAL_UART_IRQHandler+0x3e2>
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	4a7a      	ldr	r2, [pc, #488]	; (800d7a0 <HAL_UART_IRQHandler+0x590>)
 800d5b6:	4293      	cmp	r3, r2
 800d5b8:	d01b      	beq.n	800d5f2 <HAL_UART_IRQHandler+0x3e2>
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	4a78      	ldr	r2, [pc, #480]	; (800d7a4 <HAL_UART_IRQHandler+0x594>)
 800d5c4:	4293      	cmp	r3, r2
 800d5c6:	d014      	beq.n	800d5f2 <HAL_UART_IRQHandler+0x3e2>
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	4a75      	ldr	r2, [pc, #468]	; (800d7a8 <HAL_UART_IRQHandler+0x598>)
 800d5d2:	4293      	cmp	r3, r2
 800d5d4:	d00d      	beq.n	800d5f2 <HAL_UART_IRQHandler+0x3e2>
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	4a73      	ldr	r2, [pc, #460]	; (800d7ac <HAL_UART_IRQHandler+0x59c>)
 800d5e0:	4293      	cmp	r3, r2
 800d5e2:	d006      	beq.n	800d5f2 <HAL_UART_IRQHandler+0x3e2>
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	4a70      	ldr	r2, [pc, #448]	; (800d7b0 <HAL_UART_IRQHandler+0x5a0>)
 800d5ee:	4293      	cmp	r3, r2
 800d5f0:	d106      	bne.n	800d600 <HAL_UART_IRQHandler+0x3f0>
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	685b      	ldr	r3, [r3, #4]
 800d5fc:	b29b      	uxth	r3, r3
 800d5fe:	e005      	b.n	800d60c <HAL_UART_IRQHandler+0x3fc>
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	685b      	ldr	r3, [r3, #4]
 800d60a:	b29b      	uxth	r3, r3
 800d60c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d610:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d614:	2b00      	cmp	r3, #0
 800d616:	f000 81ab 	beq.w	800d970 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d620:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d624:	429a      	cmp	r2, r3
 800d626:	f080 81a3 	bcs.w	800d970 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d630:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d63a:	69db      	ldr	r3, [r3, #28]
 800d63c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d640:	f000 8087 	beq.w	800d752 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d64c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d650:	e853 3f00 	ldrex	r3, [r3]
 800d654:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d658:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d65c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d660:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	461a      	mov	r2, r3
 800d66a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d66e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d672:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d676:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d67a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d67e:	e841 2300 	strex	r3, r2, [r1]
 800d682:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d686:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d1da      	bne.n	800d644 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	3308      	adds	r3, #8
 800d694:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d696:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d698:	e853 3f00 	ldrex	r3, [r3]
 800d69c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d69e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d6a0:	f023 0301 	bic.w	r3, r3, #1
 800d6a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	3308      	adds	r3, #8
 800d6ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d6b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d6b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d6ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d6be:	e841 2300 	strex	r3, r2, [r1]
 800d6c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d6c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d1e1      	bne.n	800d68e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	3308      	adds	r3, #8
 800d6d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d6d4:	e853 3f00 	ldrex	r3, [r3]
 800d6d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d6da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d6e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	3308      	adds	r3, #8
 800d6ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d6ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d6f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d6f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d6f6:	e841 2300 	strex	r3, r2, [r1]
 800d6fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d6fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d1e3      	bne.n	800d6ca <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	2220      	movs	r2, #32
 800d706:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2200      	movs	r2, #0
 800d70e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d718:	e853 3f00 	ldrex	r3, [r3]
 800d71c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d71e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d720:	f023 0310 	bic.w	r3, r3, #16
 800d724:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	461a      	mov	r2, r3
 800d72e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d732:	65bb      	str	r3, [r7, #88]	; 0x58
 800d734:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d736:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d738:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d73a:	e841 2300 	strex	r3, r2, [r1]
 800d73e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d742:	2b00      	cmp	r3, #0
 800d744:	d1e4      	bne.n	800d710 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d74c:	4618      	mov	r0, r3
 800d74e:	f7f7 ffc7 	bl	80056e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2202      	movs	r2, #2
 800d756:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d764:	b29b      	uxth	r3, r3
 800d766:	1ad3      	subs	r3, r2, r3
 800d768:	b29b      	uxth	r3, r3
 800d76a:	4619      	mov	r1, r3
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	f000 f91d 	bl	800d9ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d772:	e0fd      	b.n	800d970 <HAL_UART_IRQHandler+0x760>
 800d774:	40020010 	.word	0x40020010
 800d778:	40020028 	.word	0x40020028
 800d77c:	40020040 	.word	0x40020040
 800d780:	40020058 	.word	0x40020058
 800d784:	40020070 	.word	0x40020070
 800d788:	40020088 	.word	0x40020088
 800d78c:	400200a0 	.word	0x400200a0
 800d790:	400200b8 	.word	0x400200b8
 800d794:	40020410 	.word	0x40020410
 800d798:	40020428 	.word	0x40020428
 800d79c:	40020440 	.word	0x40020440
 800d7a0:	40020458 	.word	0x40020458
 800d7a4:	40020470 	.word	0x40020470
 800d7a8:	40020488 	.word	0x40020488
 800d7ac:	400204a0 	.word	0x400204a0
 800d7b0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d7c0:	b29b      	uxth	r3, r3
 800d7c2:	1ad3      	subs	r3, r2, r3
 800d7c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d7ce:	b29b      	uxth	r3, r3
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	f000 80cf 	beq.w	800d974 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800d7d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	f000 80ca 	beq.w	800d974 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7e8:	e853 3f00 	ldrex	r3, [r3]
 800d7ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d7ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d7f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	461a      	mov	r2, r3
 800d7fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d802:	647b      	str	r3, [r7, #68]	; 0x44
 800d804:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d806:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d808:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d80a:	e841 2300 	strex	r3, r2, [r1]
 800d80e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d812:	2b00      	cmp	r3, #0
 800d814:	d1e4      	bne.n	800d7e0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	3308      	adds	r3, #8
 800d81c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d820:	e853 3f00 	ldrex	r3, [r3]
 800d824:	623b      	str	r3, [r7, #32]
   return(result);
 800d826:	6a3a      	ldr	r2, [r7, #32]
 800d828:	4b55      	ldr	r3, [pc, #340]	; (800d980 <HAL_UART_IRQHandler+0x770>)
 800d82a:	4013      	ands	r3, r2
 800d82c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	3308      	adds	r3, #8
 800d836:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d83a:	633a      	str	r2, [r7, #48]	; 0x30
 800d83c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d83e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d842:	e841 2300 	strex	r3, r2, [r1]
 800d846:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d1e3      	bne.n	800d816 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2220      	movs	r2, #32
 800d852:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2200      	movs	r2, #0
 800d85a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2200      	movs	r2, #0
 800d860:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d868:	693b      	ldr	r3, [r7, #16]
 800d86a:	e853 3f00 	ldrex	r3, [r3]
 800d86e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	f023 0310 	bic.w	r3, r3, #16
 800d876:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	461a      	mov	r2, r3
 800d880:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d884:	61fb      	str	r3, [r7, #28]
 800d886:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d888:	69b9      	ldr	r1, [r7, #24]
 800d88a:	69fa      	ldr	r2, [r7, #28]
 800d88c:	e841 2300 	strex	r3, r2, [r1]
 800d890:	617b      	str	r3, [r7, #20]
   return(result);
 800d892:	697b      	ldr	r3, [r7, #20]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d1e4      	bne.n	800d862 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2202      	movs	r2, #2
 800d89c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d89e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d8a2:	4619      	mov	r1, r3
 800d8a4:	6878      	ldr	r0, [r7, #4]
 800d8a6:	f000 f881 	bl	800d9ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d8aa:	e063      	b.n	800d974 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d8ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d00e      	beq.n	800d8d6 <HAL_UART_IRQHandler+0x6c6>
 800d8b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d8bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d008      	beq.n	800d8d6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d8cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d8ce:	6878      	ldr	r0, [r7, #4]
 800d8d0:	f001 f93f 	bl	800eb52 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d8d4:	e051      	b.n	800d97a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d8d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d014      	beq.n	800d90c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d8e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d105      	bne.n	800d8fa <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d8ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d8f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d008      	beq.n	800d90c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d03a      	beq.n	800d978 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	4798      	blx	r3
    }
    return;
 800d90a:	e035      	b.n	800d978 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d90c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d914:	2b00      	cmp	r3, #0
 800d916:	d009      	beq.n	800d92c <HAL_UART_IRQHandler+0x71c>
 800d918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d91c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d920:	2b00      	cmp	r3, #0
 800d922:	d003      	beq.n	800d92c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800d924:	6878      	ldr	r0, [r7, #4]
 800d926:	f001 f8e9 	bl	800eafc <UART_EndTransmit_IT>
    return;
 800d92a:	e026      	b.n	800d97a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d92c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d930:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d934:	2b00      	cmp	r3, #0
 800d936:	d009      	beq.n	800d94c <HAL_UART_IRQHandler+0x73c>
 800d938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d93c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d940:	2b00      	cmp	r3, #0
 800d942:	d003      	beq.n	800d94c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d944:	6878      	ldr	r0, [r7, #4]
 800d946:	f001 f918 	bl	800eb7a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d94a:	e016      	b.n	800d97a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d94c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d950:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d954:	2b00      	cmp	r3, #0
 800d956:	d010      	beq.n	800d97a <HAL_UART_IRQHandler+0x76a>
 800d958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	da0c      	bge.n	800d97a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d960:	6878      	ldr	r0, [r7, #4]
 800d962:	f001 f900 	bl	800eb66 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d966:	e008      	b.n	800d97a <HAL_UART_IRQHandler+0x76a>
      return;
 800d968:	bf00      	nop
 800d96a:	e006      	b.n	800d97a <HAL_UART_IRQHandler+0x76a>
    return;
 800d96c:	bf00      	nop
 800d96e:	e004      	b.n	800d97a <HAL_UART_IRQHandler+0x76a>
      return;
 800d970:	bf00      	nop
 800d972:	e002      	b.n	800d97a <HAL_UART_IRQHandler+0x76a>
      return;
 800d974:	bf00      	nop
 800d976:	e000      	b.n	800d97a <HAL_UART_IRQHandler+0x76a>
    return;
 800d978:	bf00      	nop
  }
}
 800d97a:	37e8      	adds	r7, #232	; 0xe8
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}
 800d980:	effffffe 	.word	0xeffffffe

0800d984 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d984:	b480      	push	{r7}
 800d986:	b083      	sub	sp, #12
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d98c:	bf00      	nop
 800d98e:	370c      	adds	r7, #12
 800d990:	46bd      	mov	sp, r7
 800d992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d996:	4770      	bx	lr

0800d998 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d998:	b480      	push	{r7}
 800d99a:	b083      	sub	sp, #12
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d9a0:	bf00      	nop
 800d9a2:	370c      	adds	r7, #12
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9aa:	4770      	bx	lr

0800d9ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d9ac:	b480      	push	{r7}
 800d9ae:	b083      	sub	sp, #12
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
 800d9b4:	460b      	mov	r3, r1
 800d9b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d9b8:	bf00      	nop
 800d9ba:	370c      	adds	r7, #12
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c2:	4770      	bx	lr

0800d9c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d9c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d9c8:	b092      	sub	sp, #72	; 0x48
 800d9ca:	af00      	add	r7, sp, #0
 800d9cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d9d4:	697b      	ldr	r3, [r7, #20]
 800d9d6:	689a      	ldr	r2, [r3, #8]
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	691b      	ldr	r3, [r3, #16]
 800d9dc:	431a      	orrs	r2, r3
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	695b      	ldr	r3, [r3, #20]
 800d9e2:	431a      	orrs	r2, r3
 800d9e4:	697b      	ldr	r3, [r7, #20]
 800d9e6:	69db      	ldr	r3, [r3, #28]
 800d9e8:	4313      	orrs	r3, r2
 800d9ea:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d9ec:	697b      	ldr	r3, [r7, #20]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	681a      	ldr	r2, [r3, #0]
 800d9f2:	4bbe      	ldr	r3, [pc, #760]	; (800dcec <UART_SetConfig+0x328>)
 800d9f4:	4013      	ands	r3, r2
 800d9f6:	697a      	ldr	r2, [r7, #20]
 800d9f8:	6812      	ldr	r2, [r2, #0]
 800d9fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d9fc:	430b      	orrs	r3, r1
 800d9fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800da00:	697b      	ldr	r3, [r7, #20]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	685b      	ldr	r3, [r3, #4]
 800da06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800da0a:	697b      	ldr	r3, [r7, #20]
 800da0c:	68da      	ldr	r2, [r3, #12]
 800da0e:	697b      	ldr	r3, [r7, #20]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	430a      	orrs	r2, r1
 800da14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800da16:	697b      	ldr	r3, [r7, #20]
 800da18:	699b      	ldr	r3, [r3, #24]
 800da1a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800da1c:	697b      	ldr	r3, [r7, #20]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	4ab3      	ldr	r2, [pc, #716]	; (800dcf0 <UART_SetConfig+0x32c>)
 800da22:	4293      	cmp	r3, r2
 800da24:	d004      	beq.n	800da30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800da26:	697b      	ldr	r3, [r7, #20]
 800da28:	6a1b      	ldr	r3, [r3, #32]
 800da2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800da2c:	4313      	orrs	r3, r2
 800da2e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800da30:	697b      	ldr	r3, [r7, #20]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	689a      	ldr	r2, [r3, #8]
 800da36:	4baf      	ldr	r3, [pc, #700]	; (800dcf4 <UART_SetConfig+0x330>)
 800da38:	4013      	ands	r3, r2
 800da3a:	697a      	ldr	r2, [r7, #20]
 800da3c:	6812      	ldr	r2, [r2, #0]
 800da3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800da40:	430b      	orrs	r3, r1
 800da42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800da44:	697b      	ldr	r3, [r7, #20]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da4a:	f023 010f 	bic.w	r1, r3, #15
 800da4e:	697b      	ldr	r3, [r7, #20]
 800da50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da52:	697b      	ldr	r3, [r7, #20]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	430a      	orrs	r2, r1
 800da58:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800da5a:	697b      	ldr	r3, [r7, #20]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	4aa6      	ldr	r2, [pc, #664]	; (800dcf8 <UART_SetConfig+0x334>)
 800da60:	4293      	cmp	r3, r2
 800da62:	d177      	bne.n	800db54 <UART_SetConfig+0x190>
 800da64:	4ba5      	ldr	r3, [pc, #660]	; (800dcfc <UART_SetConfig+0x338>)
 800da66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800da6c:	2b28      	cmp	r3, #40	; 0x28
 800da6e:	d86d      	bhi.n	800db4c <UART_SetConfig+0x188>
 800da70:	a201      	add	r2, pc, #4	; (adr r2, 800da78 <UART_SetConfig+0xb4>)
 800da72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da76:	bf00      	nop
 800da78:	0800db1d 	.word	0x0800db1d
 800da7c:	0800db4d 	.word	0x0800db4d
 800da80:	0800db4d 	.word	0x0800db4d
 800da84:	0800db4d 	.word	0x0800db4d
 800da88:	0800db4d 	.word	0x0800db4d
 800da8c:	0800db4d 	.word	0x0800db4d
 800da90:	0800db4d 	.word	0x0800db4d
 800da94:	0800db4d 	.word	0x0800db4d
 800da98:	0800db25 	.word	0x0800db25
 800da9c:	0800db4d 	.word	0x0800db4d
 800daa0:	0800db4d 	.word	0x0800db4d
 800daa4:	0800db4d 	.word	0x0800db4d
 800daa8:	0800db4d 	.word	0x0800db4d
 800daac:	0800db4d 	.word	0x0800db4d
 800dab0:	0800db4d 	.word	0x0800db4d
 800dab4:	0800db4d 	.word	0x0800db4d
 800dab8:	0800db2d 	.word	0x0800db2d
 800dabc:	0800db4d 	.word	0x0800db4d
 800dac0:	0800db4d 	.word	0x0800db4d
 800dac4:	0800db4d 	.word	0x0800db4d
 800dac8:	0800db4d 	.word	0x0800db4d
 800dacc:	0800db4d 	.word	0x0800db4d
 800dad0:	0800db4d 	.word	0x0800db4d
 800dad4:	0800db4d 	.word	0x0800db4d
 800dad8:	0800db35 	.word	0x0800db35
 800dadc:	0800db4d 	.word	0x0800db4d
 800dae0:	0800db4d 	.word	0x0800db4d
 800dae4:	0800db4d 	.word	0x0800db4d
 800dae8:	0800db4d 	.word	0x0800db4d
 800daec:	0800db4d 	.word	0x0800db4d
 800daf0:	0800db4d 	.word	0x0800db4d
 800daf4:	0800db4d 	.word	0x0800db4d
 800daf8:	0800db3d 	.word	0x0800db3d
 800dafc:	0800db4d 	.word	0x0800db4d
 800db00:	0800db4d 	.word	0x0800db4d
 800db04:	0800db4d 	.word	0x0800db4d
 800db08:	0800db4d 	.word	0x0800db4d
 800db0c:	0800db4d 	.word	0x0800db4d
 800db10:	0800db4d 	.word	0x0800db4d
 800db14:	0800db4d 	.word	0x0800db4d
 800db18:	0800db45 	.word	0x0800db45
 800db1c:	2301      	movs	r3, #1
 800db1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db22:	e326      	b.n	800e172 <UART_SetConfig+0x7ae>
 800db24:	2304      	movs	r3, #4
 800db26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db2a:	e322      	b.n	800e172 <UART_SetConfig+0x7ae>
 800db2c:	2308      	movs	r3, #8
 800db2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db32:	e31e      	b.n	800e172 <UART_SetConfig+0x7ae>
 800db34:	2310      	movs	r3, #16
 800db36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db3a:	e31a      	b.n	800e172 <UART_SetConfig+0x7ae>
 800db3c:	2320      	movs	r3, #32
 800db3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db42:	e316      	b.n	800e172 <UART_SetConfig+0x7ae>
 800db44:	2340      	movs	r3, #64	; 0x40
 800db46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db4a:	e312      	b.n	800e172 <UART_SetConfig+0x7ae>
 800db4c:	2380      	movs	r3, #128	; 0x80
 800db4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db52:	e30e      	b.n	800e172 <UART_SetConfig+0x7ae>
 800db54:	697b      	ldr	r3, [r7, #20]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	4a69      	ldr	r2, [pc, #420]	; (800dd00 <UART_SetConfig+0x33c>)
 800db5a:	4293      	cmp	r3, r2
 800db5c:	d130      	bne.n	800dbc0 <UART_SetConfig+0x1fc>
 800db5e:	4b67      	ldr	r3, [pc, #412]	; (800dcfc <UART_SetConfig+0x338>)
 800db60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db62:	f003 0307 	and.w	r3, r3, #7
 800db66:	2b05      	cmp	r3, #5
 800db68:	d826      	bhi.n	800dbb8 <UART_SetConfig+0x1f4>
 800db6a:	a201      	add	r2, pc, #4	; (adr r2, 800db70 <UART_SetConfig+0x1ac>)
 800db6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db70:	0800db89 	.word	0x0800db89
 800db74:	0800db91 	.word	0x0800db91
 800db78:	0800db99 	.word	0x0800db99
 800db7c:	0800dba1 	.word	0x0800dba1
 800db80:	0800dba9 	.word	0x0800dba9
 800db84:	0800dbb1 	.word	0x0800dbb1
 800db88:	2300      	movs	r3, #0
 800db8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db8e:	e2f0      	b.n	800e172 <UART_SetConfig+0x7ae>
 800db90:	2304      	movs	r3, #4
 800db92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db96:	e2ec      	b.n	800e172 <UART_SetConfig+0x7ae>
 800db98:	2308      	movs	r3, #8
 800db9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db9e:	e2e8      	b.n	800e172 <UART_SetConfig+0x7ae>
 800dba0:	2310      	movs	r3, #16
 800dba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dba6:	e2e4      	b.n	800e172 <UART_SetConfig+0x7ae>
 800dba8:	2320      	movs	r3, #32
 800dbaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbae:	e2e0      	b.n	800e172 <UART_SetConfig+0x7ae>
 800dbb0:	2340      	movs	r3, #64	; 0x40
 800dbb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbb6:	e2dc      	b.n	800e172 <UART_SetConfig+0x7ae>
 800dbb8:	2380      	movs	r3, #128	; 0x80
 800dbba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbbe:	e2d8      	b.n	800e172 <UART_SetConfig+0x7ae>
 800dbc0:	697b      	ldr	r3, [r7, #20]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	4a4f      	ldr	r2, [pc, #316]	; (800dd04 <UART_SetConfig+0x340>)
 800dbc6:	4293      	cmp	r3, r2
 800dbc8:	d130      	bne.n	800dc2c <UART_SetConfig+0x268>
 800dbca:	4b4c      	ldr	r3, [pc, #304]	; (800dcfc <UART_SetConfig+0x338>)
 800dbcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbce:	f003 0307 	and.w	r3, r3, #7
 800dbd2:	2b05      	cmp	r3, #5
 800dbd4:	d826      	bhi.n	800dc24 <UART_SetConfig+0x260>
 800dbd6:	a201      	add	r2, pc, #4	; (adr r2, 800dbdc <UART_SetConfig+0x218>)
 800dbd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbdc:	0800dbf5 	.word	0x0800dbf5
 800dbe0:	0800dbfd 	.word	0x0800dbfd
 800dbe4:	0800dc05 	.word	0x0800dc05
 800dbe8:	0800dc0d 	.word	0x0800dc0d
 800dbec:	0800dc15 	.word	0x0800dc15
 800dbf0:	0800dc1d 	.word	0x0800dc1d
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbfa:	e2ba      	b.n	800e172 <UART_SetConfig+0x7ae>
 800dbfc:	2304      	movs	r3, #4
 800dbfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc02:	e2b6      	b.n	800e172 <UART_SetConfig+0x7ae>
 800dc04:	2308      	movs	r3, #8
 800dc06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc0a:	e2b2      	b.n	800e172 <UART_SetConfig+0x7ae>
 800dc0c:	2310      	movs	r3, #16
 800dc0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc12:	e2ae      	b.n	800e172 <UART_SetConfig+0x7ae>
 800dc14:	2320      	movs	r3, #32
 800dc16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc1a:	e2aa      	b.n	800e172 <UART_SetConfig+0x7ae>
 800dc1c:	2340      	movs	r3, #64	; 0x40
 800dc1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc22:	e2a6      	b.n	800e172 <UART_SetConfig+0x7ae>
 800dc24:	2380      	movs	r3, #128	; 0x80
 800dc26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc2a:	e2a2      	b.n	800e172 <UART_SetConfig+0x7ae>
 800dc2c:	697b      	ldr	r3, [r7, #20]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	4a35      	ldr	r2, [pc, #212]	; (800dd08 <UART_SetConfig+0x344>)
 800dc32:	4293      	cmp	r3, r2
 800dc34:	d130      	bne.n	800dc98 <UART_SetConfig+0x2d4>
 800dc36:	4b31      	ldr	r3, [pc, #196]	; (800dcfc <UART_SetConfig+0x338>)
 800dc38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc3a:	f003 0307 	and.w	r3, r3, #7
 800dc3e:	2b05      	cmp	r3, #5
 800dc40:	d826      	bhi.n	800dc90 <UART_SetConfig+0x2cc>
 800dc42:	a201      	add	r2, pc, #4	; (adr r2, 800dc48 <UART_SetConfig+0x284>)
 800dc44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc48:	0800dc61 	.word	0x0800dc61
 800dc4c:	0800dc69 	.word	0x0800dc69
 800dc50:	0800dc71 	.word	0x0800dc71
 800dc54:	0800dc79 	.word	0x0800dc79
 800dc58:	0800dc81 	.word	0x0800dc81
 800dc5c:	0800dc89 	.word	0x0800dc89
 800dc60:	2300      	movs	r3, #0
 800dc62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc66:	e284      	b.n	800e172 <UART_SetConfig+0x7ae>
 800dc68:	2304      	movs	r3, #4
 800dc6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc6e:	e280      	b.n	800e172 <UART_SetConfig+0x7ae>
 800dc70:	2308      	movs	r3, #8
 800dc72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc76:	e27c      	b.n	800e172 <UART_SetConfig+0x7ae>
 800dc78:	2310      	movs	r3, #16
 800dc7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc7e:	e278      	b.n	800e172 <UART_SetConfig+0x7ae>
 800dc80:	2320      	movs	r3, #32
 800dc82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc86:	e274      	b.n	800e172 <UART_SetConfig+0x7ae>
 800dc88:	2340      	movs	r3, #64	; 0x40
 800dc8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc8e:	e270      	b.n	800e172 <UART_SetConfig+0x7ae>
 800dc90:	2380      	movs	r3, #128	; 0x80
 800dc92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc96:	e26c      	b.n	800e172 <UART_SetConfig+0x7ae>
 800dc98:	697b      	ldr	r3, [r7, #20]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	4a1b      	ldr	r2, [pc, #108]	; (800dd0c <UART_SetConfig+0x348>)
 800dc9e:	4293      	cmp	r3, r2
 800dca0:	d142      	bne.n	800dd28 <UART_SetConfig+0x364>
 800dca2:	4b16      	ldr	r3, [pc, #88]	; (800dcfc <UART_SetConfig+0x338>)
 800dca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dca6:	f003 0307 	and.w	r3, r3, #7
 800dcaa:	2b05      	cmp	r3, #5
 800dcac:	d838      	bhi.n	800dd20 <UART_SetConfig+0x35c>
 800dcae:	a201      	add	r2, pc, #4	; (adr r2, 800dcb4 <UART_SetConfig+0x2f0>)
 800dcb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcb4:	0800dccd 	.word	0x0800dccd
 800dcb8:	0800dcd5 	.word	0x0800dcd5
 800dcbc:	0800dcdd 	.word	0x0800dcdd
 800dcc0:	0800dce5 	.word	0x0800dce5
 800dcc4:	0800dd11 	.word	0x0800dd11
 800dcc8:	0800dd19 	.word	0x0800dd19
 800dccc:	2300      	movs	r3, #0
 800dcce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcd2:	e24e      	b.n	800e172 <UART_SetConfig+0x7ae>
 800dcd4:	2304      	movs	r3, #4
 800dcd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcda:	e24a      	b.n	800e172 <UART_SetConfig+0x7ae>
 800dcdc:	2308      	movs	r3, #8
 800dcde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dce2:	e246      	b.n	800e172 <UART_SetConfig+0x7ae>
 800dce4:	2310      	movs	r3, #16
 800dce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcea:	e242      	b.n	800e172 <UART_SetConfig+0x7ae>
 800dcec:	cfff69f3 	.word	0xcfff69f3
 800dcf0:	58000c00 	.word	0x58000c00
 800dcf4:	11fff4ff 	.word	0x11fff4ff
 800dcf8:	40011000 	.word	0x40011000
 800dcfc:	58024400 	.word	0x58024400
 800dd00:	40004400 	.word	0x40004400
 800dd04:	40004800 	.word	0x40004800
 800dd08:	40004c00 	.word	0x40004c00
 800dd0c:	40005000 	.word	0x40005000
 800dd10:	2320      	movs	r3, #32
 800dd12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd16:	e22c      	b.n	800e172 <UART_SetConfig+0x7ae>
 800dd18:	2340      	movs	r3, #64	; 0x40
 800dd1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd1e:	e228      	b.n	800e172 <UART_SetConfig+0x7ae>
 800dd20:	2380      	movs	r3, #128	; 0x80
 800dd22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd26:	e224      	b.n	800e172 <UART_SetConfig+0x7ae>
 800dd28:	697b      	ldr	r3, [r7, #20]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	4ab1      	ldr	r2, [pc, #708]	; (800dff4 <UART_SetConfig+0x630>)
 800dd2e:	4293      	cmp	r3, r2
 800dd30:	d176      	bne.n	800de20 <UART_SetConfig+0x45c>
 800dd32:	4bb1      	ldr	r3, [pc, #708]	; (800dff8 <UART_SetConfig+0x634>)
 800dd34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dd3a:	2b28      	cmp	r3, #40	; 0x28
 800dd3c:	d86c      	bhi.n	800de18 <UART_SetConfig+0x454>
 800dd3e:	a201      	add	r2, pc, #4	; (adr r2, 800dd44 <UART_SetConfig+0x380>)
 800dd40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd44:	0800dde9 	.word	0x0800dde9
 800dd48:	0800de19 	.word	0x0800de19
 800dd4c:	0800de19 	.word	0x0800de19
 800dd50:	0800de19 	.word	0x0800de19
 800dd54:	0800de19 	.word	0x0800de19
 800dd58:	0800de19 	.word	0x0800de19
 800dd5c:	0800de19 	.word	0x0800de19
 800dd60:	0800de19 	.word	0x0800de19
 800dd64:	0800ddf1 	.word	0x0800ddf1
 800dd68:	0800de19 	.word	0x0800de19
 800dd6c:	0800de19 	.word	0x0800de19
 800dd70:	0800de19 	.word	0x0800de19
 800dd74:	0800de19 	.word	0x0800de19
 800dd78:	0800de19 	.word	0x0800de19
 800dd7c:	0800de19 	.word	0x0800de19
 800dd80:	0800de19 	.word	0x0800de19
 800dd84:	0800ddf9 	.word	0x0800ddf9
 800dd88:	0800de19 	.word	0x0800de19
 800dd8c:	0800de19 	.word	0x0800de19
 800dd90:	0800de19 	.word	0x0800de19
 800dd94:	0800de19 	.word	0x0800de19
 800dd98:	0800de19 	.word	0x0800de19
 800dd9c:	0800de19 	.word	0x0800de19
 800dda0:	0800de19 	.word	0x0800de19
 800dda4:	0800de01 	.word	0x0800de01
 800dda8:	0800de19 	.word	0x0800de19
 800ddac:	0800de19 	.word	0x0800de19
 800ddb0:	0800de19 	.word	0x0800de19
 800ddb4:	0800de19 	.word	0x0800de19
 800ddb8:	0800de19 	.word	0x0800de19
 800ddbc:	0800de19 	.word	0x0800de19
 800ddc0:	0800de19 	.word	0x0800de19
 800ddc4:	0800de09 	.word	0x0800de09
 800ddc8:	0800de19 	.word	0x0800de19
 800ddcc:	0800de19 	.word	0x0800de19
 800ddd0:	0800de19 	.word	0x0800de19
 800ddd4:	0800de19 	.word	0x0800de19
 800ddd8:	0800de19 	.word	0x0800de19
 800dddc:	0800de19 	.word	0x0800de19
 800dde0:	0800de19 	.word	0x0800de19
 800dde4:	0800de11 	.word	0x0800de11
 800dde8:	2301      	movs	r3, #1
 800ddea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddee:	e1c0      	b.n	800e172 <UART_SetConfig+0x7ae>
 800ddf0:	2304      	movs	r3, #4
 800ddf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddf6:	e1bc      	b.n	800e172 <UART_SetConfig+0x7ae>
 800ddf8:	2308      	movs	r3, #8
 800ddfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddfe:	e1b8      	b.n	800e172 <UART_SetConfig+0x7ae>
 800de00:	2310      	movs	r3, #16
 800de02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de06:	e1b4      	b.n	800e172 <UART_SetConfig+0x7ae>
 800de08:	2320      	movs	r3, #32
 800de0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de0e:	e1b0      	b.n	800e172 <UART_SetConfig+0x7ae>
 800de10:	2340      	movs	r3, #64	; 0x40
 800de12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de16:	e1ac      	b.n	800e172 <UART_SetConfig+0x7ae>
 800de18:	2380      	movs	r3, #128	; 0x80
 800de1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de1e:	e1a8      	b.n	800e172 <UART_SetConfig+0x7ae>
 800de20:	697b      	ldr	r3, [r7, #20]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	4a75      	ldr	r2, [pc, #468]	; (800dffc <UART_SetConfig+0x638>)
 800de26:	4293      	cmp	r3, r2
 800de28:	d130      	bne.n	800de8c <UART_SetConfig+0x4c8>
 800de2a:	4b73      	ldr	r3, [pc, #460]	; (800dff8 <UART_SetConfig+0x634>)
 800de2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de2e:	f003 0307 	and.w	r3, r3, #7
 800de32:	2b05      	cmp	r3, #5
 800de34:	d826      	bhi.n	800de84 <UART_SetConfig+0x4c0>
 800de36:	a201      	add	r2, pc, #4	; (adr r2, 800de3c <UART_SetConfig+0x478>)
 800de38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de3c:	0800de55 	.word	0x0800de55
 800de40:	0800de5d 	.word	0x0800de5d
 800de44:	0800de65 	.word	0x0800de65
 800de48:	0800de6d 	.word	0x0800de6d
 800de4c:	0800de75 	.word	0x0800de75
 800de50:	0800de7d 	.word	0x0800de7d
 800de54:	2300      	movs	r3, #0
 800de56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de5a:	e18a      	b.n	800e172 <UART_SetConfig+0x7ae>
 800de5c:	2304      	movs	r3, #4
 800de5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de62:	e186      	b.n	800e172 <UART_SetConfig+0x7ae>
 800de64:	2308      	movs	r3, #8
 800de66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de6a:	e182      	b.n	800e172 <UART_SetConfig+0x7ae>
 800de6c:	2310      	movs	r3, #16
 800de6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de72:	e17e      	b.n	800e172 <UART_SetConfig+0x7ae>
 800de74:	2320      	movs	r3, #32
 800de76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de7a:	e17a      	b.n	800e172 <UART_SetConfig+0x7ae>
 800de7c:	2340      	movs	r3, #64	; 0x40
 800de7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de82:	e176      	b.n	800e172 <UART_SetConfig+0x7ae>
 800de84:	2380      	movs	r3, #128	; 0x80
 800de86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de8a:	e172      	b.n	800e172 <UART_SetConfig+0x7ae>
 800de8c:	697b      	ldr	r3, [r7, #20]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	4a5b      	ldr	r2, [pc, #364]	; (800e000 <UART_SetConfig+0x63c>)
 800de92:	4293      	cmp	r3, r2
 800de94:	d130      	bne.n	800def8 <UART_SetConfig+0x534>
 800de96:	4b58      	ldr	r3, [pc, #352]	; (800dff8 <UART_SetConfig+0x634>)
 800de98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de9a:	f003 0307 	and.w	r3, r3, #7
 800de9e:	2b05      	cmp	r3, #5
 800dea0:	d826      	bhi.n	800def0 <UART_SetConfig+0x52c>
 800dea2:	a201      	add	r2, pc, #4	; (adr r2, 800dea8 <UART_SetConfig+0x4e4>)
 800dea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dea8:	0800dec1 	.word	0x0800dec1
 800deac:	0800dec9 	.word	0x0800dec9
 800deb0:	0800ded1 	.word	0x0800ded1
 800deb4:	0800ded9 	.word	0x0800ded9
 800deb8:	0800dee1 	.word	0x0800dee1
 800debc:	0800dee9 	.word	0x0800dee9
 800dec0:	2300      	movs	r3, #0
 800dec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dec6:	e154      	b.n	800e172 <UART_SetConfig+0x7ae>
 800dec8:	2304      	movs	r3, #4
 800deca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dece:	e150      	b.n	800e172 <UART_SetConfig+0x7ae>
 800ded0:	2308      	movs	r3, #8
 800ded2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ded6:	e14c      	b.n	800e172 <UART_SetConfig+0x7ae>
 800ded8:	2310      	movs	r3, #16
 800deda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dede:	e148      	b.n	800e172 <UART_SetConfig+0x7ae>
 800dee0:	2320      	movs	r3, #32
 800dee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dee6:	e144      	b.n	800e172 <UART_SetConfig+0x7ae>
 800dee8:	2340      	movs	r3, #64	; 0x40
 800deea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deee:	e140      	b.n	800e172 <UART_SetConfig+0x7ae>
 800def0:	2380      	movs	r3, #128	; 0x80
 800def2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800def6:	e13c      	b.n	800e172 <UART_SetConfig+0x7ae>
 800def8:	697b      	ldr	r3, [r7, #20]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	4a41      	ldr	r2, [pc, #260]	; (800e004 <UART_SetConfig+0x640>)
 800defe:	4293      	cmp	r3, r2
 800df00:	f040 8082 	bne.w	800e008 <UART_SetConfig+0x644>
 800df04:	4b3c      	ldr	r3, [pc, #240]	; (800dff8 <UART_SetConfig+0x634>)
 800df06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800df0c:	2b28      	cmp	r3, #40	; 0x28
 800df0e:	d86d      	bhi.n	800dfec <UART_SetConfig+0x628>
 800df10:	a201      	add	r2, pc, #4	; (adr r2, 800df18 <UART_SetConfig+0x554>)
 800df12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df16:	bf00      	nop
 800df18:	0800dfbd 	.word	0x0800dfbd
 800df1c:	0800dfed 	.word	0x0800dfed
 800df20:	0800dfed 	.word	0x0800dfed
 800df24:	0800dfed 	.word	0x0800dfed
 800df28:	0800dfed 	.word	0x0800dfed
 800df2c:	0800dfed 	.word	0x0800dfed
 800df30:	0800dfed 	.word	0x0800dfed
 800df34:	0800dfed 	.word	0x0800dfed
 800df38:	0800dfc5 	.word	0x0800dfc5
 800df3c:	0800dfed 	.word	0x0800dfed
 800df40:	0800dfed 	.word	0x0800dfed
 800df44:	0800dfed 	.word	0x0800dfed
 800df48:	0800dfed 	.word	0x0800dfed
 800df4c:	0800dfed 	.word	0x0800dfed
 800df50:	0800dfed 	.word	0x0800dfed
 800df54:	0800dfed 	.word	0x0800dfed
 800df58:	0800dfcd 	.word	0x0800dfcd
 800df5c:	0800dfed 	.word	0x0800dfed
 800df60:	0800dfed 	.word	0x0800dfed
 800df64:	0800dfed 	.word	0x0800dfed
 800df68:	0800dfed 	.word	0x0800dfed
 800df6c:	0800dfed 	.word	0x0800dfed
 800df70:	0800dfed 	.word	0x0800dfed
 800df74:	0800dfed 	.word	0x0800dfed
 800df78:	0800dfd5 	.word	0x0800dfd5
 800df7c:	0800dfed 	.word	0x0800dfed
 800df80:	0800dfed 	.word	0x0800dfed
 800df84:	0800dfed 	.word	0x0800dfed
 800df88:	0800dfed 	.word	0x0800dfed
 800df8c:	0800dfed 	.word	0x0800dfed
 800df90:	0800dfed 	.word	0x0800dfed
 800df94:	0800dfed 	.word	0x0800dfed
 800df98:	0800dfdd 	.word	0x0800dfdd
 800df9c:	0800dfed 	.word	0x0800dfed
 800dfa0:	0800dfed 	.word	0x0800dfed
 800dfa4:	0800dfed 	.word	0x0800dfed
 800dfa8:	0800dfed 	.word	0x0800dfed
 800dfac:	0800dfed 	.word	0x0800dfed
 800dfb0:	0800dfed 	.word	0x0800dfed
 800dfb4:	0800dfed 	.word	0x0800dfed
 800dfb8:	0800dfe5 	.word	0x0800dfe5
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfc2:	e0d6      	b.n	800e172 <UART_SetConfig+0x7ae>
 800dfc4:	2304      	movs	r3, #4
 800dfc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfca:	e0d2      	b.n	800e172 <UART_SetConfig+0x7ae>
 800dfcc:	2308      	movs	r3, #8
 800dfce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfd2:	e0ce      	b.n	800e172 <UART_SetConfig+0x7ae>
 800dfd4:	2310      	movs	r3, #16
 800dfd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfda:	e0ca      	b.n	800e172 <UART_SetConfig+0x7ae>
 800dfdc:	2320      	movs	r3, #32
 800dfde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfe2:	e0c6      	b.n	800e172 <UART_SetConfig+0x7ae>
 800dfe4:	2340      	movs	r3, #64	; 0x40
 800dfe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfea:	e0c2      	b.n	800e172 <UART_SetConfig+0x7ae>
 800dfec:	2380      	movs	r3, #128	; 0x80
 800dfee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dff2:	e0be      	b.n	800e172 <UART_SetConfig+0x7ae>
 800dff4:	40011400 	.word	0x40011400
 800dff8:	58024400 	.word	0x58024400
 800dffc:	40007800 	.word	0x40007800
 800e000:	40007c00 	.word	0x40007c00
 800e004:	40011800 	.word	0x40011800
 800e008:	697b      	ldr	r3, [r7, #20]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	4aad      	ldr	r2, [pc, #692]	; (800e2c4 <UART_SetConfig+0x900>)
 800e00e:	4293      	cmp	r3, r2
 800e010:	d176      	bne.n	800e100 <UART_SetConfig+0x73c>
 800e012:	4bad      	ldr	r3, [pc, #692]	; (800e2c8 <UART_SetConfig+0x904>)
 800e014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e016:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e01a:	2b28      	cmp	r3, #40	; 0x28
 800e01c:	d86c      	bhi.n	800e0f8 <UART_SetConfig+0x734>
 800e01e:	a201      	add	r2, pc, #4	; (adr r2, 800e024 <UART_SetConfig+0x660>)
 800e020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e024:	0800e0c9 	.word	0x0800e0c9
 800e028:	0800e0f9 	.word	0x0800e0f9
 800e02c:	0800e0f9 	.word	0x0800e0f9
 800e030:	0800e0f9 	.word	0x0800e0f9
 800e034:	0800e0f9 	.word	0x0800e0f9
 800e038:	0800e0f9 	.word	0x0800e0f9
 800e03c:	0800e0f9 	.word	0x0800e0f9
 800e040:	0800e0f9 	.word	0x0800e0f9
 800e044:	0800e0d1 	.word	0x0800e0d1
 800e048:	0800e0f9 	.word	0x0800e0f9
 800e04c:	0800e0f9 	.word	0x0800e0f9
 800e050:	0800e0f9 	.word	0x0800e0f9
 800e054:	0800e0f9 	.word	0x0800e0f9
 800e058:	0800e0f9 	.word	0x0800e0f9
 800e05c:	0800e0f9 	.word	0x0800e0f9
 800e060:	0800e0f9 	.word	0x0800e0f9
 800e064:	0800e0d9 	.word	0x0800e0d9
 800e068:	0800e0f9 	.word	0x0800e0f9
 800e06c:	0800e0f9 	.word	0x0800e0f9
 800e070:	0800e0f9 	.word	0x0800e0f9
 800e074:	0800e0f9 	.word	0x0800e0f9
 800e078:	0800e0f9 	.word	0x0800e0f9
 800e07c:	0800e0f9 	.word	0x0800e0f9
 800e080:	0800e0f9 	.word	0x0800e0f9
 800e084:	0800e0e1 	.word	0x0800e0e1
 800e088:	0800e0f9 	.word	0x0800e0f9
 800e08c:	0800e0f9 	.word	0x0800e0f9
 800e090:	0800e0f9 	.word	0x0800e0f9
 800e094:	0800e0f9 	.word	0x0800e0f9
 800e098:	0800e0f9 	.word	0x0800e0f9
 800e09c:	0800e0f9 	.word	0x0800e0f9
 800e0a0:	0800e0f9 	.word	0x0800e0f9
 800e0a4:	0800e0e9 	.word	0x0800e0e9
 800e0a8:	0800e0f9 	.word	0x0800e0f9
 800e0ac:	0800e0f9 	.word	0x0800e0f9
 800e0b0:	0800e0f9 	.word	0x0800e0f9
 800e0b4:	0800e0f9 	.word	0x0800e0f9
 800e0b8:	0800e0f9 	.word	0x0800e0f9
 800e0bc:	0800e0f9 	.word	0x0800e0f9
 800e0c0:	0800e0f9 	.word	0x0800e0f9
 800e0c4:	0800e0f1 	.word	0x0800e0f1
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0ce:	e050      	b.n	800e172 <UART_SetConfig+0x7ae>
 800e0d0:	2304      	movs	r3, #4
 800e0d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0d6:	e04c      	b.n	800e172 <UART_SetConfig+0x7ae>
 800e0d8:	2308      	movs	r3, #8
 800e0da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0de:	e048      	b.n	800e172 <UART_SetConfig+0x7ae>
 800e0e0:	2310      	movs	r3, #16
 800e0e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0e6:	e044      	b.n	800e172 <UART_SetConfig+0x7ae>
 800e0e8:	2320      	movs	r3, #32
 800e0ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0ee:	e040      	b.n	800e172 <UART_SetConfig+0x7ae>
 800e0f0:	2340      	movs	r3, #64	; 0x40
 800e0f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0f6:	e03c      	b.n	800e172 <UART_SetConfig+0x7ae>
 800e0f8:	2380      	movs	r3, #128	; 0x80
 800e0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0fe:	e038      	b.n	800e172 <UART_SetConfig+0x7ae>
 800e100:	697b      	ldr	r3, [r7, #20]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	4a71      	ldr	r2, [pc, #452]	; (800e2cc <UART_SetConfig+0x908>)
 800e106:	4293      	cmp	r3, r2
 800e108:	d130      	bne.n	800e16c <UART_SetConfig+0x7a8>
 800e10a:	4b6f      	ldr	r3, [pc, #444]	; (800e2c8 <UART_SetConfig+0x904>)
 800e10c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e10e:	f003 0307 	and.w	r3, r3, #7
 800e112:	2b05      	cmp	r3, #5
 800e114:	d826      	bhi.n	800e164 <UART_SetConfig+0x7a0>
 800e116:	a201      	add	r2, pc, #4	; (adr r2, 800e11c <UART_SetConfig+0x758>)
 800e118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e11c:	0800e135 	.word	0x0800e135
 800e120:	0800e13d 	.word	0x0800e13d
 800e124:	0800e145 	.word	0x0800e145
 800e128:	0800e14d 	.word	0x0800e14d
 800e12c:	0800e155 	.word	0x0800e155
 800e130:	0800e15d 	.word	0x0800e15d
 800e134:	2302      	movs	r3, #2
 800e136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e13a:	e01a      	b.n	800e172 <UART_SetConfig+0x7ae>
 800e13c:	2304      	movs	r3, #4
 800e13e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e142:	e016      	b.n	800e172 <UART_SetConfig+0x7ae>
 800e144:	2308      	movs	r3, #8
 800e146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e14a:	e012      	b.n	800e172 <UART_SetConfig+0x7ae>
 800e14c:	2310      	movs	r3, #16
 800e14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e152:	e00e      	b.n	800e172 <UART_SetConfig+0x7ae>
 800e154:	2320      	movs	r3, #32
 800e156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e15a:	e00a      	b.n	800e172 <UART_SetConfig+0x7ae>
 800e15c:	2340      	movs	r3, #64	; 0x40
 800e15e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e162:	e006      	b.n	800e172 <UART_SetConfig+0x7ae>
 800e164:	2380      	movs	r3, #128	; 0x80
 800e166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e16a:	e002      	b.n	800e172 <UART_SetConfig+0x7ae>
 800e16c:	2380      	movs	r3, #128	; 0x80
 800e16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	4a55      	ldr	r2, [pc, #340]	; (800e2cc <UART_SetConfig+0x908>)
 800e178:	4293      	cmp	r3, r2
 800e17a:	f040 80f8 	bne.w	800e36e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e17e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e182:	2b20      	cmp	r3, #32
 800e184:	dc46      	bgt.n	800e214 <UART_SetConfig+0x850>
 800e186:	2b02      	cmp	r3, #2
 800e188:	db75      	blt.n	800e276 <UART_SetConfig+0x8b2>
 800e18a:	3b02      	subs	r3, #2
 800e18c:	2b1e      	cmp	r3, #30
 800e18e:	d872      	bhi.n	800e276 <UART_SetConfig+0x8b2>
 800e190:	a201      	add	r2, pc, #4	; (adr r2, 800e198 <UART_SetConfig+0x7d4>)
 800e192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e196:	bf00      	nop
 800e198:	0800e21b 	.word	0x0800e21b
 800e19c:	0800e277 	.word	0x0800e277
 800e1a0:	0800e223 	.word	0x0800e223
 800e1a4:	0800e277 	.word	0x0800e277
 800e1a8:	0800e277 	.word	0x0800e277
 800e1ac:	0800e277 	.word	0x0800e277
 800e1b0:	0800e233 	.word	0x0800e233
 800e1b4:	0800e277 	.word	0x0800e277
 800e1b8:	0800e277 	.word	0x0800e277
 800e1bc:	0800e277 	.word	0x0800e277
 800e1c0:	0800e277 	.word	0x0800e277
 800e1c4:	0800e277 	.word	0x0800e277
 800e1c8:	0800e277 	.word	0x0800e277
 800e1cc:	0800e277 	.word	0x0800e277
 800e1d0:	0800e243 	.word	0x0800e243
 800e1d4:	0800e277 	.word	0x0800e277
 800e1d8:	0800e277 	.word	0x0800e277
 800e1dc:	0800e277 	.word	0x0800e277
 800e1e0:	0800e277 	.word	0x0800e277
 800e1e4:	0800e277 	.word	0x0800e277
 800e1e8:	0800e277 	.word	0x0800e277
 800e1ec:	0800e277 	.word	0x0800e277
 800e1f0:	0800e277 	.word	0x0800e277
 800e1f4:	0800e277 	.word	0x0800e277
 800e1f8:	0800e277 	.word	0x0800e277
 800e1fc:	0800e277 	.word	0x0800e277
 800e200:	0800e277 	.word	0x0800e277
 800e204:	0800e277 	.word	0x0800e277
 800e208:	0800e277 	.word	0x0800e277
 800e20c:	0800e277 	.word	0x0800e277
 800e210:	0800e269 	.word	0x0800e269
 800e214:	2b40      	cmp	r3, #64	; 0x40
 800e216:	d02a      	beq.n	800e26e <UART_SetConfig+0x8aa>
 800e218:	e02d      	b.n	800e276 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e21a:	f7fe f913 	bl	800c444 <HAL_RCCEx_GetD3PCLK1Freq>
 800e21e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e220:	e02f      	b.n	800e282 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e226:	4618      	mov	r0, r3
 800e228:	f7fe f922 	bl	800c470 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e22e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e230:	e027      	b.n	800e282 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e232:	f107 0318 	add.w	r3, r7, #24
 800e236:	4618      	mov	r0, r3
 800e238:	f7fe fa6e 	bl	800c718 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e23c:	69fb      	ldr	r3, [r7, #28]
 800e23e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e240:	e01f      	b.n	800e282 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e242:	4b21      	ldr	r3, [pc, #132]	; (800e2c8 <UART_SetConfig+0x904>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	f003 0320 	and.w	r3, r3, #32
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d009      	beq.n	800e262 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e24e:	4b1e      	ldr	r3, [pc, #120]	; (800e2c8 <UART_SetConfig+0x904>)
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	08db      	lsrs	r3, r3, #3
 800e254:	f003 0303 	and.w	r3, r3, #3
 800e258:	4a1d      	ldr	r2, [pc, #116]	; (800e2d0 <UART_SetConfig+0x90c>)
 800e25a:	fa22 f303 	lsr.w	r3, r2, r3
 800e25e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e260:	e00f      	b.n	800e282 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e262:	4b1b      	ldr	r3, [pc, #108]	; (800e2d0 <UART_SetConfig+0x90c>)
 800e264:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e266:	e00c      	b.n	800e282 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e268:	4b1a      	ldr	r3, [pc, #104]	; (800e2d4 <UART_SetConfig+0x910>)
 800e26a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e26c:	e009      	b.n	800e282 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e26e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e272:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e274:	e005      	b.n	800e282 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e276:	2300      	movs	r3, #0
 800e278:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e27a:	2301      	movs	r3, #1
 800e27c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e280:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e284:	2b00      	cmp	r3, #0
 800e286:	f000 81ee 	beq.w	800e666 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e28e:	4a12      	ldr	r2, [pc, #72]	; (800e2d8 <UART_SetConfig+0x914>)
 800e290:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e294:	461a      	mov	r2, r3
 800e296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e298:	fbb3 f3f2 	udiv	r3, r3, r2
 800e29c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e29e:	697b      	ldr	r3, [r7, #20]
 800e2a0:	685a      	ldr	r2, [r3, #4]
 800e2a2:	4613      	mov	r3, r2
 800e2a4:	005b      	lsls	r3, r3, #1
 800e2a6:	4413      	add	r3, r2
 800e2a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2aa:	429a      	cmp	r2, r3
 800e2ac:	d305      	bcc.n	800e2ba <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e2ae:	697b      	ldr	r3, [r7, #20]
 800e2b0:	685b      	ldr	r3, [r3, #4]
 800e2b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e2b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2b6:	429a      	cmp	r2, r3
 800e2b8:	d910      	bls.n	800e2dc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800e2ba:	2301      	movs	r3, #1
 800e2bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e2c0:	e1d1      	b.n	800e666 <UART_SetConfig+0xca2>
 800e2c2:	bf00      	nop
 800e2c4:	40011c00 	.word	0x40011c00
 800e2c8:	58024400 	.word	0x58024400
 800e2cc:	58000c00 	.word	0x58000c00
 800e2d0:	03d09000 	.word	0x03d09000
 800e2d4:	003d0900 	.word	0x003d0900
 800e2d8:	080104f8 	.word	0x080104f8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e2dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2de:	2200      	movs	r2, #0
 800e2e0:	60bb      	str	r3, [r7, #8]
 800e2e2:	60fa      	str	r2, [r7, #12]
 800e2e4:	697b      	ldr	r3, [r7, #20]
 800e2e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2e8:	4ac0      	ldr	r2, [pc, #768]	; (800e5ec <UART_SetConfig+0xc28>)
 800e2ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e2ee:	b29b      	uxth	r3, r3
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	603b      	str	r3, [r7, #0]
 800e2f4:	607a      	str	r2, [r7, #4]
 800e2f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e2fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e2fe:	f7f2 f847 	bl	8000390 <__aeabi_uldivmod>
 800e302:	4602      	mov	r2, r0
 800e304:	460b      	mov	r3, r1
 800e306:	4610      	mov	r0, r2
 800e308:	4619      	mov	r1, r3
 800e30a:	f04f 0200 	mov.w	r2, #0
 800e30e:	f04f 0300 	mov.w	r3, #0
 800e312:	020b      	lsls	r3, r1, #8
 800e314:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e318:	0202      	lsls	r2, r0, #8
 800e31a:	6979      	ldr	r1, [r7, #20]
 800e31c:	6849      	ldr	r1, [r1, #4]
 800e31e:	0849      	lsrs	r1, r1, #1
 800e320:	2000      	movs	r0, #0
 800e322:	460c      	mov	r4, r1
 800e324:	4605      	mov	r5, r0
 800e326:	eb12 0804 	adds.w	r8, r2, r4
 800e32a:	eb43 0905 	adc.w	r9, r3, r5
 800e32e:	697b      	ldr	r3, [r7, #20]
 800e330:	685b      	ldr	r3, [r3, #4]
 800e332:	2200      	movs	r2, #0
 800e334:	469a      	mov	sl, r3
 800e336:	4693      	mov	fp, r2
 800e338:	4652      	mov	r2, sl
 800e33a:	465b      	mov	r3, fp
 800e33c:	4640      	mov	r0, r8
 800e33e:	4649      	mov	r1, r9
 800e340:	f7f2 f826 	bl	8000390 <__aeabi_uldivmod>
 800e344:	4602      	mov	r2, r0
 800e346:	460b      	mov	r3, r1
 800e348:	4613      	mov	r3, r2
 800e34a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e34e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e352:	d308      	bcc.n	800e366 <UART_SetConfig+0x9a2>
 800e354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e356:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e35a:	d204      	bcs.n	800e366 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800e35c:	697b      	ldr	r3, [r7, #20]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e362:	60da      	str	r2, [r3, #12]
 800e364:	e17f      	b.n	800e666 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800e366:	2301      	movs	r3, #1
 800e368:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e36c:	e17b      	b.n	800e666 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e36e:	697b      	ldr	r3, [r7, #20]
 800e370:	69db      	ldr	r3, [r3, #28]
 800e372:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e376:	f040 80bd 	bne.w	800e4f4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800e37a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e37e:	2b20      	cmp	r3, #32
 800e380:	dc48      	bgt.n	800e414 <UART_SetConfig+0xa50>
 800e382:	2b00      	cmp	r3, #0
 800e384:	db7b      	blt.n	800e47e <UART_SetConfig+0xaba>
 800e386:	2b20      	cmp	r3, #32
 800e388:	d879      	bhi.n	800e47e <UART_SetConfig+0xaba>
 800e38a:	a201      	add	r2, pc, #4	; (adr r2, 800e390 <UART_SetConfig+0x9cc>)
 800e38c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e390:	0800e41b 	.word	0x0800e41b
 800e394:	0800e423 	.word	0x0800e423
 800e398:	0800e47f 	.word	0x0800e47f
 800e39c:	0800e47f 	.word	0x0800e47f
 800e3a0:	0800e42b 	.word	0x0800e42b
 800e3a4:	0800e47f 	.word	0x0800e47f
 800e3a8:	0800e47f 	.word	0x0800e47f
 800e3ac:	0800e47f 	.word	0x0800e47f
 800e3b0:	0800e43b 	.word	0x0800e43b
 800e3b4:	0800e47f 	.word	0x0800e47f
 800e3b8:	0800e47f 	.word	0x0800e47f
 800e3bc:	0800e47f 	.word	0x0800e47f
 800e3c0:	0800e47f 	.word	0x0800e47f
 800e3c4:	0800e47f 	.word	0x0800e47f
 800e3c8:	0800e47f 	.word	0x0800e47f
 800e3cc:	0800e47f 	.word	0x0800e47f
 800e3d0:	0800e44b 	.word	0x0800e44b
 800e3d4:	0800e47f 	.word	0x0800e47f
 800e3d8:	0800e47f 	.word	0x0800e47f
 800e3dc:	0800e47f 	.word	0x0800e47f
 800e3e0:	0800e47f 	.word	0x0800e47f
 800e3e4:	0800e47f 	.word	0x0800e47f
 800e3e8:	0800e47f 	.word	0x0800e47f
 800e3ec:	0800e47f 	.word	0x0800e47f
 800e3f0:	0800e47f 	.word	0x0800e47f
 800e3f4:	0800e47f 	.word	0x0800e47f
 800e3f8:	0800e47f 	.word	0x0800e47f
 800e3fc:	0800e47f 	.word	0x0800e47f
 800e400:	0800e47f 	.word	0x0800e47f
 800e404:	0800e47f 	.word	0x0800e47f
 800e408:	0800e47f 	.word	0x0800e47f
 800e40c:	0800e47f 	.word	0x0800e47f
 800e410:	0800e471 	.word	0x0800e471
 800e414:	2b40      	cmp	r3, #64	; 0x40
 800e416:	d02e      	beq.n	800e476 <UART_SetConfig+0xab2>
 800e418:	e031      	b.n	800e47e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e41a:	f7fc fe29 	bl	800b070 <HAL_RCC_GetPCLK1Freq>
 800e41e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e420:	e033      	b.n	800e48a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e422:	f7fc fe3b 	bl	800b09c <HAL_RCC_GetPCLK2Freq>
 800e426:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e428:	e02f      	b.n	800e48a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e42a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e42e:	4618      	mov	r0, r3
 800e430:	f7fe f81e 	bl	800c470 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e436:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e438:	e027      	b.n	800e48a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e43a:	f107 0318 	add.w	r3, r7, #24
 800e43e:	4618      	mov	r0, r3
 800e440:	f7fe f96a 	bl	800c718 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e444:	69fb      	ldr	r3, [r7, #28]
 800e446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e448:	e01f      	b.n	800e48a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e44a:	4b69      	ldr	r3, [pc, #420]	; (800e5f0 <UART_SetConfig+0xc2c>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	f003 0320 	and.w	r3, r3, #32
 800e452:	2b00      	cmp	r3, #0
 800e454:	d009      	beq.n	800e46a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e456:	4b66      	ldr	r3, [pc, #408]	; (800e5f0 <UART_SetConfig+0xc2c>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	08db      	lsrs	r3, r3, #3
 800e45c:	f003 0303 	and.w	r3, r3, #3
 800e460:	4a64      	ldr	r2, [pc, #400]	; (800e5f4 <UART_SetConfig+0xc30>)
 800e462:	fa22 f303 	lsr.w	r3, r2, r3
 800e466:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e468:	e00f      	b.n	800e48a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800e46a:	4b62      	ldr	r3, [pc, #392]	; (800e5f4 <UART_SetConfig+0xc30>)
 800e46c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e46e:	e00c      	b.n	800e48a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e470:	4b61      	ldr	r3, [pc, #388]	; (800e5f8 <UART_SetConfig+0xc34>)
 800e472:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e474:	e009      	b.n	800e48a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e47a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e47c:	e005      	b.n	800e48a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e47e:	2300      	movs	r3, #0
 800e480:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e482:	2301      	movs	r3, #1
 800e484:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e488:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e48a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	f000 80ea 	beq.w	800e666 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e492:	697b      	ldr	r3, [r7, #20]
 800e494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e496:	4a55      	ldr	r2, [pc, #340]	; (800e5ec <UART_SetConfig+0xc28>)
 800e498:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e49c:	461a      	mov	r2, r3
 800e49e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800e4a4:	005a      	lsls	r2, r3, #1
 800e4a6:	697b      	ldr	r3, [r7, #20]
 800e4a8:	685b      	ldr	r3, [r3, #4]
 800e4aa:	085b      	lsrs	r3, r3, #1
 800e4ac:	441a      	add	r2, r3
 800e4ae:	697b      	ldr	r3, [r7, #20]
 800e4b0:	685b      	ldr	r3, [r3, #4]
 800e4b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4b6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4ba:	2b0f      	cmp	r3, #15
 800e4bc:	d916      	bls.n	800e4ec <UART_SetConfig+0xb28>
 800e4be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e4c4:	d212      	bcs.n	800e4ec <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4c8:	b29b      	uxth	r3, r3
 800e4ca:	f023 030f 	bic.w	r3, r3, #15
 800e4ce:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4d2:	085b      	lsrs	r3, r3, #1
 800e4d4:	b29b      	uxth	r3, r3
 800e4d6:	f003 0307 	and.w	r3, r3, #7
 800e4da:	b29a      	uxth	r2, r3
 800e4dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e4de:	4313      	orrs	r3, r2
 800e4e0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e4e2:	697b      	ldr	r3, [r7, #20]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e4e8:	60da      	str	r2, [r3, #12]
 800e4ea:	e0bc      	b.n	800e666 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e4ec:	2301      	movs	r3, #1
 800e4ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e4f2:	e0b8      	b.n	800e666 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e4f4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e4f8:	2b20      	cmp	r3, #32
 800e4fa:	dc4b      	bgt.n	800e594 <UART_SetConfig+0xbd0>
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	f2c0 8087 	blt.w	800e610 <UART_SetConfig+0xc4c>
 800e502:	2b20      	cmp	r3, #32
 800e504:	f200 8084 	bhi.w	800e610 <UART_SetConfig+0xc4c>
 800e508:	a201      	add	r2, pc, #4	; (adr r2, 800e510 <UART_SetConfig+0xb4c>)
 800e50a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e50e:	bf00      	nop
 800e510:	0800e59b 	.word	0x0800e59b
 800e514:	0800e5a3 	.word	0x0800e5a3
 800e518:	0800e611 	.word	0x0800e611
 800e51c:	0800e611 	.word	0x0800e611
 800e520:	0800e5ab 	.word	0x0800e5ab
 800e524:	0800e611 	.word	0x0800e611
 800e528:	0800e611 	.word	0x0800e611
 800e52c:	0800e611 	.word	0x0800e611
 800e530:	0800e5bb 	.word	0x0800e5bb
 800e534:	0800e611 	.word	0x0800e611
 800e538:	0800e611 	.word	0x0800e611
 800e53c:	0800e611 	.word	0x0800e611
 800e540:	0800e611 	.word	0x0800e611
 800e544:	0800e611 	.word	0x0800e611
 800e548:	0800e611 	.word	0x0800e611
 800e54c:	0800e611 	.word	0x0800e611
 800e550:	0800e5cb 	.word	0x0800e5cb
 800e554:	0800e611 	.word	0x0800e611
 800e558:	0800e611 	.word	0x0800e611
 800e55c:	0800e611 	.word	0x0800e611
 800e560:	0800e611 	.word	0x0800e611
 800e564:	0800e611 	.word	0x0800e611
 800e568:	0800e611 	.word	0x0800e611
 800e56c:	0800e611 	.word	0x0800e611
 800e570:	0800e611 	.word	0x0800e611
 800e574:	0800e611 	.word	0x0800e611
 800e578:	0800e611 	.word	0x0800e611
 800e57c:	0800e611 	.word	0x0800e611
 800e580:	0800e611 	.word	0x0800e611
 800e584:	0800e611 	.word	0x0800e611
 800e588:	0800e611 	.word	0x0800e611
 800e58c:	0800e611 	.word	0x0800e611
 800e590:	0800e603 	.word	0x0800e603
 800e594:	2b40      	cmp	r3, #64	; 0x40
 800e596:	d037      	beq.n	800e608 <UART_SetConfig+0xc44>
 800e598:	e03a      	b.n	800e610 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e59a:	f7fc fd69 	bl	800b070 <HAL_RCC_GetPCLK1Freq>
 800e59e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e5a0:	e03c      	b.n	800e61c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e5a2:	f7fc fd7b 	bl	800b09c <HAL_RCC_GetPCLK2Freq>
 800e5a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e5a8:	e038      	b.n	800e61c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e5aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	f7fd ff5e 	bl	800c470 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5b8:	e030      	b.n	800e61c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e5ba:	f107 0318 	add.w	r3, r7, #24
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f7fe f8aa 	bl	800c718 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e5c4:	69fb      	ldr	r3, [r7, #28]
 800e5c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5c8:	e028      	b.n	800e61c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e5ca:	4b09      	ldr	r3, [pc, #36]	; (800e5f0 <UART_SetConfig+0xc2c>)
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	f003 0320 	and.w	r3, r3, #32
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d012      	beq.n	800e5fc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e5d6:	4b06      	ldr	r3, [pc, #24]	; (800e5f0 <UART_SetConfig+0xc2c>)
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	08db      	lsrs	r3, r3, #3
 800e5dc:	f003 0303 	and.w	r3, r3, #3
 800e5e0:	4a04      	ldr	r2, [pc, #16]	; (800e5f4 <UART_SetConfig+0xc30>)
 800e5e2:	fa22 f303 	lsr.w	r3, r2, r3
 800e5e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e5e8:	e018      	b.n	800e61c <UART_SetConfig+0xc58>
 800e5ea:	bf00      	nop
 800e5ec:	080104f8 	.word	0x080104f8
 800e5f0:	58024400 	.word	0x58024400
 800e5f4:	03d09000 	.word	0x03d09000
 800e5f8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e5fc:	4b24      	ldr	r3, [pc, #144]	; (800e690 <UART_SetConfig+0xccc>)
 800e5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e600:	e00c      	b.n	800e61c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e602:	4b24      	ldr	r3, [pc, #144]	; (800e694 <UART_SetConfig+0xcd0>)
 800e604:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e606:	e009      	b.n	800e61c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e608:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e60c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e60e:	e005      	b.n	800e61c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e610:	2300      	movs	r3, #0
 800e612:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e614:	2301      	movs	r3, #1
 800e616:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e61a:	bf00      	nop
    }

    if (pclk != 0U)
 800e61c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d021      	beq.n	800e666 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e622:	697b      	ldr	r3, [r7, #20]
 800e624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e626:	4a1c      	ldr	r2, [pc, #112]	; (800e698 <UART_SetConfig+0xcd4>)
 800e628:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e62c:	461a      	mov	r2, r3
 800e62e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e630:	fbb3 f2f2 	udiv	r2, r3, r2
 800e634:	697b      	ldr	r3, [r7, #20]
 800e636:	685b      	ldr	r3, [r3, #4]
 800e638:	085b      	lsrs	r3, r3, #1
 800e63a:	441a      	add	r2, r3
 800e63c:	697b      	ldr	r3, [r7, #20]
 800e63e:	685b      	ldr	r3, [r3, #4]
 800e640:	fbb2 f3f3 	udiv	r3, r2, r3
 800e644:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e648:	2b0f      	cmp	r3, #15
 800e64a:	d909      	bls.n	800e660 <UART_SetConfig+0xc9c>
 800e64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e64e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e652:	d205      	bcs.n	800e660 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e656:	b29a      	uxth	r2, r3
 800e658:	697b      	ldr	r3, [r7, #20]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	60da      	str	r2, [r3, #12]
 800e65e:	e002      	b.n	800e666 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e660:	2301      	movs	r3, #1
 800e662:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e666:	697b      	ldr	r3, [r7, #20]
 800e668:	2201      	movs	r2, #1
 800e66a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e66e:	697b      	ldr	r3, [r7, #20]
 800e670:	2201      	movs	r2, #1
 800e672:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e676:	697b      	ldr	r3, [r7, #20]
 800e678:	2200      	movs	r2, #0
 800e67a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800e67c:	697b      	ldr	r3, [r7, #20]
 800e67e:	2200      	movs	r2, #0
 800e680:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800e682:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e686:	4618      	mov	r0, r3
 800e688:	3748      	adds	r7, #72	; 0x48
 800e68a:	46bd      	mov	sp, r7
 800e68c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e690:	03d09000 	.word	0x03d09000
 800e694:	003d0900 	.word	0x003d0900
 800e698:	080104f8 	.word	0x080104f8

0800e69c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e69c:	b480      	push	{r7}
 800e69e:	b083      	sub	sp, #12
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6a8:	f003 0301 	and.w	r3, r3, #1
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d00a      	beq.n	800e6c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	685b      	ldr	r3, [r3, #4]
 800e6b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	430a      	orrs	r2, r1
 800e6c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6ca:	f003 0302 	and.w	r3, r3, #2
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d00a      	beq.n	800e6e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	685b      	ldr	r3, [r3, #4]
 800e6d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	430a      	orrs	r2, r1
 800e6e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6ec:	f003 0304 	and.w	r3, r3, #4
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d00a      	beq.n	800e70a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	685b      	ldr	r3, [r3, #4]
 800e6fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	430a      	orrs	r2, r1
 800e708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e70e:	f003 0308 	and.w	r3, r3, #8
 800e712:	2b00      	cmp	r3, #0
 800e714:	d00a      	beq.n	800e72c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	685b      	ldr	r3, [r3, #4]
 800e71c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	430a      	orrs	r2, r1
 800e72a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e730:	f003 0310 	and.w	r3, r3, #16
 800e734:	2b00      	cmp	r3, #0
 800e736:	d00a      	beq.n	800e74e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	689b      	ldr	r3, [r3, #8]
 800e73e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	430a      	orrs	r2, r1
 800e74c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e752:	f003 0320 	and.w	r3, r3, #32
 800e756:	2b00      	cmp	r3, #0
 800e758:	d00a      	beq.n	800e770 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	689b      	ldr	r3, [r3, #8]
 800e760:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	430a      	orrs	r2, r1
 800e76e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d01a      	beq.n	800e7b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	685b      	ldr	r3, [r3, #4]
 800e782:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	430a      	orrs	r2, r1
 800e790:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e796:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e79a:	d10a      	bne.n	800e7b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	685b      	ldr	r3, [r3, #4]
 800e7a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	430a      	orrs	r2, r1
 800e7b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d00a      	beq.n	800e7d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	685b      	ldr	r3, [r3, #4]
 800e7c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	430a      	orrs	r2, r1
 800e7d2:	605a      	str	r2, [r3, #4]
  }
}
 800e7d4:	bf00      	nop
 800e7d6:	370c      	adds	r7, #12
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7de:	4770      	bx	lr

0800e7e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b098      	sub	sp, #96	; 0x60
 800e7e4:	af02      	add	r7, sp, #8
 800e7e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e7f0:	f7f5 fd64 	bl	80042bc <HAL_GetTick>
 800e7f4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	f003 0308 	and.w	r3, r3, #8
 800e800:	2b08      	cmp	r3, #8
 800e802:	d12f      	bne.n	800e864 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e804:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e808:	9300      	str	r3, [sp, #0]
 800e80a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e80c:	2200      	movs	r2, #0
 800e80e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e812:	6878      	ldr	r0, [r7, #4]
 800e814:	f000 f88e 	bl	800e934 <UART_WaitOnFlagUntilTimeout>
 800e818:	4603      	mov	r3, r0
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d022      	beq.n	800e864 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e826:	e853 3f00 	ldrex	r3, [r3]
 800e82a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e82c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e82e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e832:	653b      	str	r3, [r7, #80]	; 0x50
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	461a      	mov	r2, r3
 800e83a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e83c:	647b      	str	r3, [r7, #68]	; 0x44
 800e83e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e840:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e842:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e844:	e841 2300 	strex	r3, r2, [r1]
 800e848:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e84a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d1e6      	bne.n	800e81e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2220      	movs	r2, #32
 800e854:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	2200      	movs	r2, #0
 800e85c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e860:	2303      	movs	r3, #3
 800e862:	e063      	b.n	800e92c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	f003 0304 	and.w	r3, r3, #4
 800e86e:	2b04      	cmp	r3, #4
 800e870:	d149      	bne.n	800e906 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e872:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e876:	9300      	str	r3, [sp, #0]
 800e878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e87a:	2200      	movs	r2, #0
 800e87c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e880:	6878      	ldr	r0, [r7, #4]
 800e882:	f000 f857 	bl	800e934 <UART_WaitOnFlagUntilTimeout>
 800e886:	4603      	mov	r3, r0
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d03c      	beq.n	800e906 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e894:	e853 3f00 	ldrex	r3, [r3]
 800e898:	623b      	str	r3, [r7, #32]
   return(result);
 800e89a:	6a3b      	ldr	r3, [r7, #32]
 800e89c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e8a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	461a      	mov	r2, r3
 800e8a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8aa:	633b      	str	r3, [r7, #48]	; 0x30
 800e8ac:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e8b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8b2:	e841 2300 	strex	r3, r2, [r1]
 800e8b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d1e6      	bne.n	800e88c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	3308      	adds	r3, #8
 800e8c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8c6:	693b      	ldr	r3, [r7, #16]
 800e8c8:	e853 3f00 	ldrex	r3, [r3]
 800e8cc:	60fb      	str	r3, [r7, #12]
   return(result);
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	f023 0301 	bic.w	r3, r3, #1
 800e8d4:	64bb      	str	r3, [r7, #72]	; 0x48
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	3308      	adds	r3, #8
 800e8dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e8de:	61fa      	str	r2, [r7, #28]
 800e8e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8e2:	69b9      	ldr	r1, [r7, #24]
 800e8e4:	69fa      	ldr	r2, [r7, #28]
 800e8e6:	e841 2300 	strex	r3, r2, [r1]
 800e8ea:	617b      	str	r3, [r7, #20]
   return(result);
 800e8ec:	697b      	ldr	r3, [r7, #20]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d1e5      	bne.n	800e8be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2220      	movs	r2, #32
 800e8f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e902:	2303      	movs	r3, #3
 800e904:	e012      	b.n	800e92c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	2220      	movs	r2, #32
 800e90a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	2220      	movs	r2, #32
 800e912:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	2200      	movs	r2, #0
 800e91a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2200      	movs	r2, #0
 800e920:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	2200      	movs	r2, #0
 800e926:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e92a:	2300      	movs	r3, #0
}
 800e92c:	4618      	mov	r0, r3
 800e92e:	3758      	adds	r7, #88	; 0x58
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}

0800e934 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b084      	sub	sp, #16
 800e938:	af00      	add	r7, sp, #0
 800e93a:	60f8      	str	r0, [r7, #12]
 800e93c:	60b9      	str	r1, [r7, #8]
 800e93e:	603b      	str	r3, [r7, #0]
 800e940:	4613      	mov	r3, r2
 800e942:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e944:	e049      	b.n	800e9da <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e946:	69bb      	ldr	r3, [r7, #24]
 800e948:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e94c:	d045      	beq.n	800e9da <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e94e:	f7f5 fcb5 	bl	80042bc <HAL_GetTick>
 800e952:	4602      	mov	r2, r0
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	1ad3      	subs	r3, r2, r3
 800e958:	69ba      	ldr	r2, [r7, #24]
 800e95a:	429a      	cmp	r2, r3
 800e95c:	d302      	bcc.n	800e964 <UART_WaitOnFlagUntilTimeout+0x30>
 800e95e:	69bb      	ldr	r3, [r7, #24]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d101      	bne.n	800e968 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e964:	2303      	movs	r3, #3
 800e966:	e048      	b.n	800e9fa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	f003 0304 	and.w	r3, r3, #4
 800e972:	2b00      	cmp	r3, #0
 800e974:	d031      	beq.n	800e9da <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	69db      	ldr	r3, [r3, #28]
 800e97c:	f003 0308 	and.w	r3, r3, #8
 800e980:	2b08      	cmp	r3, #8
 800e982:	d110      	bne.n	800e9a6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	2208      	movs	r2, #8
 800e98a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800e98c:	68f8      	ldr	r0, [r7, #12]
 800e98e:	f000 f839 	bl	800ea04 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	2208      	movs	r2, #8
 800e996:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	2200      	movs	r2, #0
 800e99e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800e9a2:	2301      	movs	r3, #1
 800e9a4:	e029      	b.n	800e9fa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	69db      	ldr	r3, [r3, #28]
 800e9ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e9b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e9b4:	d111      	bne.n	800e9da <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e9be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e9c0:	68f8      	ldr	r0, [r7, #12]
 800e9c2:	f000 f81f 	bl	800ea04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	2220      	movs	r2, #32
 800e9ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800e9d6:	2303      	movs	r3, #3
 800e9d8:	e00f      	b.n	800e9fa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	69da      	ldr	r2, [r3, #28]
 800e9e0:	68bb      	ldr	r3, [r7, #8]
 800e9e2:	4013      	ands	r3, r2
 800e9e4:	68ba      	ldr	r2, [r7, #8]
 800e9e6:	429a      	cmp	r2, r3
 800e9e8:	bf0c      	ite	eq
 800e9ea:	2301      	moveq	r3, #1
 800e9ec:	2300      	movne	r3, #0
 800e9ee:	b2db      	uxtb	r3, r3
 800e9f0:	461a      	mov	r2, r3
 800e9f2:	79fb      	ldrb	r3, [r7, #7]
 800e9f4:	429a      	cmp	r2, r3
 800e9f6:	d0a6      	beq.n	800e946 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e9f8:	2300      	movs	r3, #0
}
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	3710      	adds	r7, #16
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd80      	pop	{r7, pc}
	...

0800ea04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ea04:	b480      	push	{r7}
 800ea06:	b095      	sub	sp, #84	; 0x54
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea14:	e853 3f00 	ldrex	r3, [r3]
 800ea18:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ea1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ea20:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	461a      	mov	r2, r3
 800ea28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea2a:	643b      	str	r3, [r7, #64]	; 0x40
 800ea2c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ea30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ea32:	e841 2300 	strex	r3, r2, [r1]
 800ea36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ea38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d1e6      	bne.n	800ea0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	3308      	adds	r3, #8
 800ea44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea46:	6a3b      	ldr	r3, [r7, #32]
 800ea48:	e853 3f00 	ldrex	r3, [r3]
 800ea4c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ea4e:	69fa      	ldr	r2, [r7, #28]
 800ea50:	4b1e      	ldr	r3, [pc, #120]	; (800eacc <UART_EndRxTransfer+0xc8>)
 800ea52:	4013      	ands	r3, r2
 800ea54:	64bb      	str	r3, [r7, #72]	; 0x48
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	3308      	adds	r3, #8
 800ea5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ea60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ea64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea66:	e841 2300 	strex	r3, r2, [r1]
 800ea6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ea6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d1e5      	bne.n	800ea3e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea76:	2b01      	cmp	r3, #1
 800ea78:	d118      	bne.n	800eaac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	e853 3f00 	ldrex	r3, [r3]
 800ea86:	60bb      	str	r3, [r7, #8]
   return(result);
 800ea88:	68bb      	ldr	r3, [r7, #8]
 800ea8a:	f023 0310 	bic.w	r3, r3, #16
 800ea8e:	647b      	str	r3, [r7, #68]	; 0x44
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	461a      	mov	r2, r3
 800ea96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea98:	61bb      	str	r3, [r7, #24]
 800ea9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea9c:	6979      	ldr	r1, [r7, #20]
 800ea9e:	69ba      	ldr	r2, [r7, #24]
 800eaa0:	e841 2300 	strex	r3, r2, [r1]
 800eaa4:	613b      	str	r3, [r7, #16]
   return(result);
 800eaa6:	693b      	ldr	r3, [r7, #16]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d1e6      	bne.n	800ea7a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	2220      	movs	r2, #32
 800eab0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	2200      	movs	r2, #0
 800eab8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	2200      	movs	r2, #0
 800eabe:	675a      	str	r2, [r3, #116]	; 0x74
}
 800eac0:	bf00      	nop
 800eac2:	3754      	adds	r7, #84	; 0x54
 800eac4:	46bd      	mov	sp, r7
 800eac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaca:	4770      	bx	lr
 800eacc:	effffffe 	.word	0xeffffffe

0800ead0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b084      	sub	sp, #16
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eadc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	2200      	movs	r2, #0
 800eae2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	2200      	movs	r2, #0
 800eaea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eaee:	68f8      	ldr	r0, [r7, #12]
 800eaf0:	f7fe ff52 	bl	800d998 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eaf4:	bf00      	nop
 800eaf6:	3710      	adds	r7, #16
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	bd80      	pop	{r7, pc}

0800eafc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b088      	sub	sp, #32
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	e853 3f00 	ldrex	r3, [r3]
 800eb10:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb12:	68bb      	ldr	r3, [r7, #8]
 800eb14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eb18:	61fb      	str	r3, [r7, #28]
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	461a      	mov	r2, r3
 800eb20:	69fb      	ldr	r3, [r7, #28]
 800eb22:	61bb      	str	r3, [r7, #24]
 800eb24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb26:	6979      	ldr	r1, [r7, #20]
 800eb28:	69ba      	ldr	r2, [r7, #24]
 800eb2a:	e841 2300 	strex	r3, r2, [r1]
 800eb2e:	613b      	str	r3, [r7, #16]
   return(result);
 800eb30:	693b      	ldr	r3, [r7, #16]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d1e6      	bne.n	800eb04 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2220      	movs	r2, #32
 800eb3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2200      	movs	r2, #0
 800eb42:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800eb44:	6878      	ldr	r0, [r7, #4]
 800eb46:	f7fe ff1d 	bl	800d984 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb4a:	bf00      	nop
 800eb4c:	3720      	adds	r7, #32
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}

0800eb52 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800eb52:	b480      	push	{r7}
 800eb54:	b083      	sub	sp, #12
 800eb56:	af00      	add	r7, sp, #0
 800eb58:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800eb5a:	bf00      	nop
 800eb5c:	370c      	adds	r7, #12
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb64:	4770      	bx	lr

0800eb66 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800eb66:	b480      	push	{r7}
 800eb68:	b083      	sub	sp, #12
 800eb6a:	af00      	add	r7, sp, #0
 800eb6c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800eb6e:	bf00      	nop
 800eb70:	370c      	adds	r7, #12
 800eb72:	46bd      	mov	sp, r7
 800eb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb78:	4770      	bx	lr

0800eb7a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800eb7a:	b480      	push	{r7}
 800eb7c:	b083      	sub	sp, #12
 800eb7e:	af00      	add	r7, sp, #0
 800eb80:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800eb82:	bf00      	nop
 800eb84:	370c      	adds	r7, #12
 800eb86:	46bd      	mov	sp, r7
 800eb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8c:	4770      	bx	lr

0800eb8e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800eb8e:	b480      	push	{r7}
 800eb90:	b085      	sub	sp, #20
 800eb92:	af00      	add	r7, sp, #0
 800eb94:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800eb9c:	2b01      	cmp	r3, #1
 800eb9e:	d101      	bne.n	800eba4 <HAL_UARTEx_DisableFifoMode+0x16>
 800eba0:	2302      	movs	r3, #2
 800eba2:	e027      	b.n	800ebf4 <HAL_UARTEx_DisableFifoMode+0x66>
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	2201      	movs	r2, #1
 800eba8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2224      	movs	r2, #36	; 0x24
 800ebb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	681a      	ldr	r2, [r3, #0]
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	f022 0201 	bic.w	r2, r2, #1
 800ebca:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ebd2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	68fa      	ldr	r2, [r7, #12]
 800ebe0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	2220      	movs	r2, #32
 800ebe6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	2200      	movs	r2, #0
 800ebee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ebf2:	2300      	movs	r3, #0
}
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	3714      	adds	r7, #20
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfe:	4770      	bx	lr

0800ec00 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b084      	sub	sp, #16
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
 800ec08:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ec10:	2b01      	cmp	r3, #1
 800ec12:	d101      	bne.n	800ec18 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ec14:	2302      	movs	r3, #2
 800ec16:	e02d      	b.n	800ec74 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2201      	movs	r2, #1
 800ec1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2224      	movs	r2, #36	; 0x24
 800ec24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	681a      	ldr	r2, [r3, #0]
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	f022 0201 	bic.w	r2, r2, #1
 800ec3e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	689b      	ldr	r3, [r3, #8]
 800ec46:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	683a      	ldr	r2, [r7, #0]
 800ec50:	430a      	orrs	r2, r1
 800ec52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ec54:	6878      	ldr	r0, [r7, #4]
 800ec56:	f000 f84f 	bl	800ecf8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	68fa      	ldr	r2, [r7, #12]
 800ec60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	2220      	movs	r2, #32
 800ec66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ec72:	2300      	movs	r3, #0
}
 800ec74:	4618      	mov	r0, r3
 800ec76:	3710      	adds	r7, #16
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	bd80      	pop	{r7, pc}

0800ec7c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b084      	sub	sp, #16
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
 800ec84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ec8c:	2b01      	cmp	r3, #1
 800ec8e:	d101      	bne.n	800ec94 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ec90:	2302      	movs	r3, #2
 800ec92:	e02d      	b.n	800ecf0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	2201      	movs	r2, #1
 800ec98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2224      	movs	r2, #36	; 0x24
 800eca0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	681a      	ldr	r2, [r3, #0]
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	f022 0201 	bic.w	r2, r2, #1
 800ecba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	689b      	ldr	r3, [r3, #8]
 800ecc2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	683a      	ldr	r2, [r7, #0]
 800eccc:	430a      	orrs	r2, r1
 800ecce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ecd0:	6878      	ldr	r0, [r7, #4]
 800ecd2:	f000 f811 	bl	800ecf8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	68fa      	ldr	r2, [r7, #12]
 800ecdc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	2220      	movs	r2, #32
 800ece2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	2200      	movs	r2, #0
 800ecea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ecee:	2300      	movs	r3, #0
}
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	3710      	adds	r7, #16
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	bd80      	pop	{r7, pc}

0800ecf8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ecf8:	b480      	push	{r7}
 800ecfa:	b085      	sub	sp, #20
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d108      	bne.n	800ed1a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2201      	movs	r2, #1
 800ed0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2201      	movs	r2, #1
 800ed14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ed18:	e031      	b.n	800ed7e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ed1a:	2310      	movs	r3, #16
 800ed1c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ed1e:	2310      	movs	r3, #16
 800ed20:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	689b      	ldr	r3, [r3, #8]
 800ed28:	0e5b      	lsrs	r3, r3, #25
 800ed2a:	b2db      	uxtb	r3, r3
 800ed2c:	f003 0307 	and.w	r3, r3, #7
 800ed30:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	689b      	ldr	r3, [r3, #8]
 800ed38:	0f5b      	lsrs	r3, r3, #29
 800ed3a:	b2db      	uxtb	r3, r3
 800ed3c:	f003 0307 	and.w	r3, r3, #7
 800ed40:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ed42:	7bbb      	ldrb	r3, [r7, #14]
 800ed44:	7b3a      	ldrb	r2, [r7, #12]
 800ed46:	4911      	ldr	r1, [pc, #68]	; (800ed8c <UARTEx_SetNbDataToProcess+0x94>)
 800ed48:	5c8a      	ldrb	r2, [r1, r2]
 800ed4a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ed4e:	7b3a      	ldrb	r2, [r7, #12]
 800ed50:	490f      	ldr	r1, [pc, #60]	; (800ed90 <UARTEx_SetNbDataToProcess+0x98>)
 800ed52:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ed54:	fb93 f3f2 	sdiv	r3, r3, r2
 800ed58:	b29a      	uxth	r2, r3
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ed60:	7bfb      	ldrb	r3, [r7, #15]
 800ed62:	7b7a      	ldrb	r2, [r7, #13]
 800ed64:	4909      	ldr	r1, [pc, #36]	; (800ed8c <UARTEx_SetNbDataToProcess+0x94>)
 800ed66:	5c8a      	ldrb	r2, [r1, r2]
 800ed68:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ed6c:	7b7a      	ldrb	r2, [r7, #13]
 800ed6e:	4908      	ldr	r1, [pc, #32]	; (800ed90 <UARTEx_SetNbDataToProcess+0x98>)
 800ed70:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ed72:	fb93 f3f2 	sdiv	r3, r3, r2
 800ed76:	b29a      	uxth	r2, r3
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ed7e:	bf00      	nop
 800ed80:	3714      	adds	r7, #20
 800ed82:	46bd      	mov	sp, r7
 800ed84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed88:	4770      	bx	lr
 800ed8a:	bf00      	nop
 800ed8c:	08010510 	.word	0x08010510
 800ed90:	08010518 	.word	0x08010518

0800ed94 <__errno>:
 800ed94:	4b01      	ldr	r3, [pc, #4]	; (800ed9c <__errno+0x8>)
 800ed96:	6818      	ldr	r0, [r3, #0]
 800ed98:	4770      	bx	lr
 800ed9a:	bf00      	nop
 800ed9c:	24000054 	.word	0x24000054

0800eda0 <__libc_init_array>:
 800eda0:	b570      	push	{r4, r5, r6, lr}
 800eda2:	4d0d      	ldr	r5, [pc, #52]	; (800edd8 <__libc_init_array+0x38>)
 800eda4:	4c0d      	ldr	r4, [pc, #52]	; (800eddc <__libc_init_array+0x3c>)
 800eda6:	1b64      	subs	r4, r4, r5
 800eda8:	10a4      	asrs	r4, r4, #2
 800edaa:	2600      	movs	r6, #0
 800edac:	42a6      	cmp	r6, r4
 800edae:	d109      	bne.n	800edc4 <__libc_init_array+0x24>
 800edb0:	4d0b      	ldr	r5, [pc, #44]	; (800ede0 <__libc_init_array+0x40>)
 800edb2:	4c0c      	ldr	r4, [pc, #48]	; (800ede4 <__libc_init_array+0x44>)
 800edb4:	f001 f87c 	bl	800feb0 <_init>
 800edb8:	1b64      	subs	r4, r4, r5
 800edba:	10a4      	asrs	r4, r4, #2
 800edbc:	2600      	movs	r6, #0
 800edbe:	42a6      	cmp	r6, r4
 800edc0:	d105      	bne.n	800edce <__libc_init_array+0x2e>
 800edc2:	bd70      	pop	{r4, r5, r6, pc}
 800edc4:	f855 3b04 	ldr.w	r3, [r5], #4
 800edc8:	4798      	blx	r3
 800edca:	3601      	adds	r6, #1
 800edcc:	e7ee      	b.n	800edac <__libc_init_array+0xc>
 800edce:	f855 3b04 	ldr.w	r3, [r5], #4
 800edd2:	4798      	blx	r3
 800edd4:	3601      	adds	r6, #1
 800edd6:	e7f2      	b.n	800edbe <__libc_init_array+0x1e>
 800edd8:	080105c0 	.word	0x080105c0
 800eddc:	080105c0 	.word	0x080105c0
 800ede0:	080105c0 	.word	0x080105c0
 800ede4:	080105c4 	.word	0x080105c4

0800ede8 <memset>:
 800ede8:	4402      	add	r2, r0
 800edea:	4603      	mov	r3, r0
 800edec:	4293      	cmp	r3, r2
 800edee:	d100      	bne.n	800edf2 <memset+0xa>
 800edf0:	4770      	bx	lr
 800edf2:	f803 1b01 	strb.w	r1, [r3], #1
 800edf6:	e7f9      	b.n	800edec <memset+0x4>

0800edf8 <iprintf>:
 800edf8:	b40f      	push	{r0, r1, r2, r3}
 800edfa:	4b0a      	ldr	r3, [pc, #40]	; (800ee24 <iprintf+0x2c>)
 800edfc:	b513      	push	{r0, r1, r4, lr}
 800edfe:	681c      	ldr	r4, [r3, #0]
 800ee00:	b124      	cbz	r4, 800ee0c <iprintf+0x14>
 800ee02:	69a3      	ldr	r3, [r4, #24]
 800ee04:	b913      	cbnz	r3, 800ee0c <iprintf+0x14>
 800ee06:	4620      	mov	r0, r4
 800ee08:	f000 f9ee 	bl	800f1e8 <__sinit>
 800ee0c:	ab05      	add	r3, sp, #20
 800ee0e:	9a04      	ldr	r2, [sp, #16]
 800ee10:	68a1      	ldr	r1, [r4, #8]
 800ee12:	9301      	str	r3, [sp, #4]
 800ee14:	4620      	mov	r0, r4
 800ee16:	f000 fbff 	bl	800f618 <_vfiprintf_r>
 800ee1a:	b002      	add	sp, #8
 800ee1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee20:	b004      	add	sp, #16
 800ee22:	4770      	bx	lr
 800ee24:	24000054 	.word	0x24000054

0800ee28 <setvbuf>:
 800ee28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ee2c:	461d      	mov	r5, r3
 800ee2e:	4b5d      	ldr	r3, [pc, #372]	; (800efa4 <setvbuf+0x17c>)
 800ee30:	681f      	ldr	r7, [r3, #0]
 800ee32:	4604      	mov	r4, r0
 800ee34:	460e      	mov	r6, r1
 800ee36:	4690      	mov	r8, r2
 800ee38:	b127      	cbz	r7, 800ee44 <setvbuf+0x1c>
 800ee3a:	69bb      	ldr	r3, [r7, #24]
 800ee3c:	b913      	cbnz	r3, 800ee44 <setvbuf+0x1c>
 800ee3e:	4638      	mov	r0, r7
 800ee40:	f000 f9d2 	bl	800f1e8 <__sinit>
 800ee44:	4b58      	ldr	r3, [pc, #352]	; (800efa8 <setvbuf+0x180>)
 800ee46:	429c      	cmp	r4, r3
 800ee48:	d167      	bne.n	800ef1a <setvbuf+0xf2>
 800ee4a:	687c      	ldr	r4, [r7, #4]
 800ee4c:	f1b8 0f02 	cmp.w	r8, #2
 800ee50:	d006      	beq.n	800ee60 <setvbuf+0x38>
 800ee52:	f1b8 0f01 	cmp.w	r8, #1
 800ee56:	f200 809f 	bhi.w	800ef98 <setvbuf+0x170>
 800ee5a:	2d00      	cmp	r5, #0
 800ee5c:	f2c0 809c 	blt.w	800ef98 <setvbuf+0x170>
 800ee60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ee62:	07db      	lsls	r3, r3, #31
 800ee64:	d405      	bmi.n	800ee72 <setvbuf+0x4a>
 800ee66:	89a3      	ldrh	r3, [r4, #12]
 800ee68:	0598      	lsls	r0, r3, #22
 800ee6a:	d402      	bmi.n	800ee72 <setvbuf+0x4a>
 800ee6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee6e:	f000 fa59 	bl	800f324 <__retarget_lock_acquire_recursive>
 800ee72:	4621      	mov	r1, r4
 800ee74:	4638      	mov	r0, r7
 800ee76:	f000 f923 	bl	800f0c0 <_fflush_r>
 800ee7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee7c:	b141      	cbz	r1, 800ee90 <setvbuf+0x68>
 800ee7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee82:	4299      	cmp	r1, r3
 800ee84:	d002      	beq.n	800ee8c <setvbuf+0x64>
 800ee86:	4638      	mov	r0, r7
 800ee88:	f000 fabc 	bl	800f404 <_free_r>
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	6363      	str	r3, [r4, #52]	; 0x34
 800ee90:	2300      	movs	r3, #0
 800ee92:	61a3      	str	r3, [r4, #24]
 800ee94:	6063      	str	r3, [r4, #4]
 800ee96:	89a3      	ldrh	r3, [r4, #12]
 800ee98:	0619      	lsls	r1, r3, #24
 800ee9a:	d503      	bpl.n	800eea4 <setvbuf+0x7c>
 800ee9c:	6921      	ldr	r1, [r4, #16]
 800ee9e:	4638      	mov	r0, r7
 800eea0:	f000 fab0 	bl	800f404 <_free_r>
 800eea4:	89a3      	ldrh	r3, [r4, #12]
 800eea6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800eeaa:	f023 0303 	bic.w	r3, r3, #3
 800eeae:	f1b8 0f02 	cmp.w	r8, #2
 800eeb2:	81a3      	strh	r3, [r4, #12]
 800eeb4:	d06c      	beq.n	800ef90 <setvbuf+0x168>
 800eeb6:	ab01      	add	r3, sp, #4
 800eeb8:	466a      	mov	r2, sp
 800eeba:	4621      	mov	r1, r4
 800eebc:	4638      	mov	r0, r7
 800eebe:	f000 fa33 	bl	800f328 <__swhatbuf_r>
 800eec2:	89a3      	ldrh	r3, [r4, #12]
 800eec4:	4318      	orrs	r0, r3
 800eec6:	81a0      	strh	r0, [r4, #12]
 800eec8:	2d00      	cmp	r5, #0
 800eeca:	d130      	bne.n	800ef2e <setvbuf+0x106>
 800eecc:	9d00      	ldr	r5, [sp, #0]
 800eece:	4628      	mov	r0, r5
 800eed0:	f000 fa90 	bl	800f3f4 <malloc>
 800eed4:	4606      	mov	r6, r0
 800eed6:	2800      	cmp	r0, #0
 800eed8:	d155      	bne.n	800ef86 <setvbuf+0x15e>
 800eeda:	f8dd 9000 	ldr.w	r9, [sp]
 800eede:	45a9      	cmp	r9, r5
 800eee0:	d14a      	bne.n	800ef78 <setvbuf+0x150>
 800eee2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800eee6:	2200      	movs	r2, #0
 800eee8:	60a2      	str	r2, [r4, #8]
 800eeea:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800eeee:	6022      	str	r2, [r4, #0]
 800eef0:	6122      	str	r2, [r4, #16]
 800eef2:	2201      	movs	r2, #1
 800eef4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eef8:	6162      	str	r2, [r4, #20]
 800eefa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eefc:	f043 0302 	orr.w	r3, r3, #2
 800ef00:	07d2      	lsls	r2, r2, #31
 800ef02:	81a3      	strh	r3, [r4, #12]
 800ef04:	d405      	bmi.n	800ef12 <setvbuf+0xea>
 800ef06:	f413 7f00 	tst.w	r3, #512	; 0x200
 800ef0a:	d102      	bne.n	800ef12 <setvbuf+0xea>
 800ef0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ef0e:	f000 fa0a 	bl	800f326 <__retarget_lock_release_recursive>
 800ef12:	4628      	mov	r0, r5
 800ef14:	b003      	add	sp, #12
 800ef16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef1a:	4b24      	ldr	r3, [pc, #144]	; (800efac <setvbuf+0x184>)
 800ef1c:	429c      	cmp	r4, r3
 800ef1e:	d101      	bne.n	800ef24 <setvbuf+0xfc>
 800ef20:	68bc      	ldr	r4, [r7, #8]
 800ef22:	e793      	b.n	800ee4c <setvbuf+0x24>
 800ef24:	4b22      	ldr	r3, [pc, #136]	; (800efb0 <setvbuf+0x188>)
 800ef26:	429c      	cmp	r4, r3
 800ef28:	bf08      	it	eq
 800ef2a:	68fc      	ldreq	r4, [r7, #12]
 800ef2c:	e78e      	b.n	800ee4c <setvbuf+0x24>
 800ef2e:	2e00      	cmp	r6, #0
 800ef30:	d0cd      	beq.n	800eece <setvbuf+0xa6>
 800ef32:	69bb      	ldr	r3, [r7, #24]
 800ef34:	b913      	cbnz	r3, 800ef3c <setvbuf+0x114>
 800ef36:	4638      	mov	r0, r7
 800ef38:	f000 f956 	bl	800f1e8 <__sinit>
 800ef3c:	f1b8 0f01 	cmp.w	r8, #1
 800ef40:	bf08      	it	eq
 800ef42:	89a3      	ldrheq	r3, [r4, #12]
 800ef44:	6026      	str	r6, [r4, #0]
 800ef46:	bf04      	itt	eq
 800ef48:	f043 0301 	orreq.w	r3, r3, #1
 800ef4c:	81a3      	strheq	r3, [r4, #12]
 800ef4e:	89a2      	ldrh	r2, [r4, #12]
 800ef50:	f012 0308 	ands.w	r3, r2, #8
 800ef54:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800ef58:	d01c      	beq.n	800ef94 <setvbuf+0x16c>
 800ef5a:	07d3      	lsls	r3, r2, #31
 800ef5c:	bf41      	itttt	mi
 800ef5e:	2300      	movmi	r3, #0
 800ef60:	426d      	negmi	r5, r5
 800ef62:	60a3      	strmi	r3, [r4, #8]
 800ef64:	61a5      	strmi	r5, [r4, #24]
 800ef66:	bf58      	it	pl
 800ef68:	60a5      	strpl	r5, [r4, #8]
 800ef6a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800ef6c:	f015 0501 	ands.w	r5, r5, #1
 800ef70:	d115      	bne.n	800ef9e <setvbuf+0x176>
 800ef72:	f412 7f00 	tst.w	r2, #512	; 0x200
 800ef76:	e7c8      	b.n	800ef0a <setvbuf+0xe2>
 800ef78:	4648      	mov	r0, r9
 800ef7a:	f000 fa3b 	bl	800f3f4 <malloc>
 800ef7e:	4606      	mov	r6, r0
 800ef80:	2800      	cmp	r0, #0
 800ef82:	d0ae      	beq.n	800eee2 <setvbuf+0xba>
 800ef84:	464d      	mov	r5, r9
 800ef86:	89a3      	ldrh	r3, [r4, #12]
 800ef88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef8c:	81a3      	strh	r3, [r4, #12]
 800ef8e:	e7d0      	b.n	800ef32 <setvbuf+0x10a>
 800ef90:	2500      	movs	r5, #0
 800ef92:	e7a8      	b.n	800eee6 <setvbuf+0xbe>
 800ef94:	60a3      	str	r3, [r4, #8]
 800ef96:	e7e8      	b.n	800ef6a <setvbuf+0x142>
 800ef98:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800ef9c:	e7b9      	b.n	800ef12 <setvbuf+0xea>
 800ef9e:	2500      	movs	r5, #0
 800efa0:	e7b7      	b.n	800ef12 <setvbuf+0xea>
 800efa2:	bf00      	nop
 800efa4:	24000054 	.word	0x24000054
 800efa8:	08010544 	.word	0x08010544
 800efac:	08010564 	.word	0x08010564
 800efb0:	08010524 	.word	0x08010524

0800efb4 <__sflush_r>:
 800efb4:	898a      	ldrh	r2, [r1, #12]
 800efb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efba:	4605      	mov	r5, r0
 800efbc:	0710      	lsls	r0, r2, #28
 800efbe:	460c      	mov	r4, r1
 800efc0:	d458      	bmi.n	800f074 <__sflush_r+0xc0>
 800efc2:	684b      	ldr	r3, [r1, #4]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	dc05      	bgt.n	800efd4 <__sflush_r+0x20>
 800efc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800efca:	2b00      	cmp	r3, #0
 800efcc:	dc02      	bgt.n	800efd4 <__sflush_r+0x20>
 800efce:	2000      	movs	r0, #0
 800efd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800efd6:	2e00      	cmp	r6, #0
 800efd8:	d0f9      	beq.n	800efce <__sflush_r+0x1a>
 800efda:	2300      	movs	r3, #0
 800efdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800efe0:	682f      	ldr	r7, [r5, #0]
 800efe2:	602b      	str	r3, [r5, #0]
 800efe4:	d032      	beq.n	800f04c <__sflush_r+0x98>
 800efe6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800efe8:	89a3      	ldrh	r3, [r4, #12]
 800efea:	075a      	lsls	r2, r3, #29
 800efec:	d505      	bpl.n	800effa <__sflush_r+0x46>
 800efee:	6863      	ldr	r3, [r4, #4]
 800eff0:	1ac0      	subs	r0, r0, r3
 800eff2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eff4:	b10b      	cbz	r3, 800effa <__sflush_r+0x46>
 800eff6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eff8:	1ac0      	subs	r0, r0, r3
 800effa:	2300      	movs	r3, #0
 800effc:	4602      	mov	r2, r0
 800effe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f000:	6a21      	ldr	r1, [r4, #32]
 800f002:	4628      	mov	r0, r5
 800f004:	47b0      	blx	r6
 800f006:	1c43      	adds	r3, r0, #1
 800f008:	89a3      	ldrh	r3, [r4, #12]
 800f00a:	d106      	bne.n	800f01a <__sflush_r+0x66>
 800f00c:	6829      	ldr	r1, [r5, #0]
 800f00e:	291d      	cmp	r1, #29
 800f010:	d82c      	bhi.n	800f06c <__sflush_r+0xb8>
 800f012:	4a2a      	ldr	r2, [pc, #168]	; (800f0bc <__sflush_r+0x108>)
 800f014:	40ca      	lsrs	r2, r1
 800f016:	07d6      	lsls	r6, r2, #31
 800f018:	d528      	bpl.n	800f06c <__sflush_r+0xb8>
 800f01a:	2200      	movs	r2, #0
 800f01c:	6062      	str	r2, [r4, #4]
 800f01e:	04d9      	lsls	r1, r3, #19
 800f020:	6922      	ldr	r2, [r4, #16]
 800f022:	6022      	str	r2, [r4, #0]
 800f024:	d504      	bpl.n	800f030 <__sflush_r+0x7c>
 800f026:	1c42      	adds	r2, r0, #1
 800f028:	d101      	bne.n	800f02e <__sflush_r+0x7a>
 800f02a:	682b      	ldr	r3, [r5, #0]
 800f02c:	b903      	cbnz	r3, 800f030 <__sflush_r+0x7c>
 800f02e:	6560      	str	r0, [r4, #84]	; 0x54
 800f030:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f032:	602f      	str	r7, [r5, #0]
 800f034:	2900      	cmp	r1, #0
 800f036:	d0ca      	beq.n	800efce <__sflush_r+0x1a>
 800f038:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f03c:	4299      	cmp	r1, r3
 800f03e:	d002      	beq.n	800f046 <__sflush_r+0x92>
 800f040:	4628      	mov	r0, r5
 800f042:	f000 f9df 	bl	800f404 <_free_r>
 800f046:	2000      	movs	r0, #0
 800f048:	6360      	str	r0, [r4, #52]	; 0x34
 800f04a:	e7c1      	b.n	800efd0 <__sflush_r+0x1c>
 800f04c:	6a21      	ldr	r1, [r4, #32]
 800f04e:	2301      	movs	r3, #1
 800f050:	4628      	mov	r0, r5
 800f052:	47b0      	blx	r6
 800f054:	1c41      	adds	r1, r0, #1
 800f056:	d1c7      	bne.n	800efe8 <__sflush_r+0x34>
 800f058:	682b      	ldr	r3, [r5, #0]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d0c4      	beq.n	800efe8 <__sflush_r+0x34>
 800f05e:	2b1d      	cmp	r3, #29
 800f060:	d001      	beq.n	800f066 <__sflush_r+0xb2>
 800f062:	2b16      	cmp	r3, #22
 800f064:	d101      	bne.n	800f06a <__sflush_r+0xb6>
 800f066:	602f      	str	r7, [r5, #0]
 800f068:	e7b1      	b.n	800efce <__sflush_r+0x1a>
 800f06a:	89a3      	ldrh	r3, [r4, #12]
 800f06c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f070:	81a3      	strh	r3, [r4, #12]
 800f072:	e7ad      	b.n	800efd0 <__sflush_r+0x1c>
 800f074:	690f      	ldr	r7, [r1, #16]
 800f076:	2f00      	cmp	r7, #0
 800f078:	d0a9      	beq.n	800efce <__sflush_r+0x1a>
 800f07a:	0793      	lsls	r3, r2, #30
 800f07c:	680e      	ldr	r6, [r1, #0]
 800f07e:	bf08      	it	eq
 800f080:	694b      	ldreq	r3, [r1, #20]
 800f082:	600f      	str	r7, [r1, #0]
 800f084:	bf18      	it	ne
 800f086:	2300      	movne	r3, #0
 800f088:	eba6 0807 	sub.w	r8, r6, r7
 800f08c:	608b      	str	r3, [r1, #8]
 800f08e:	f1b8 0f00 	cmp.w	r8, #0
 800f092:	dd9c      	ble.n	800efce <__sflush_r+0x1a>
 800f094:	6a21      	ldr	r1, [r4, #32]
 800f096:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f098:	4643      	mov	r3, r8
 800f09a:	463a      	mov	r2, r7
 800f09c:	4628      	mov	r0, r5
 800f09e:	47b0      	blx	r6
 800f0a0:	2800      	cmp	r0, #0
 800f0a2:	dc06      	bgt.n	800f0b2 <__sflush_r+0xfe>
 800f0a4:	89a3      	ldrh	r3, [r4, #12]
 800f0a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0aa:	81a3      	strh	r3, [r4, #12]
 800f0ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f0b0:	e78e      	b.n	800efd0 <__sflush_r+0x1c>
 800f0b2:	4407      	add	r7, r0
 800f0b4:	eba8 0800 	sub.w	r8, r8, r0
 800f0b8:	e7e9      	b.n	800f08e <__sflush_r+0xda>
 800f0ba:	bf00      	nop
 800f0bc:	20400001 	.word	0x20400001

0800f0c0 <_fflush_r>:
 800f0c0:	b538      	push	{r3, r4, r5, lr}
 800f0c2:	690b      	ldr	r3, [r1, #16]
 800f0c4:	4605      	mov	r5, r0
 800f0c6:	460c      	mov	r4, r1
 800f0c8:	b913      	cbnz	r3, 800f0d0 <_fflush_r+0x10>
 800f0ca:	2500      	movs	r5, #0
 800f0cc:	4628      	mov	r0, r5
 800f0ce:	bd38      	pop	{r3, r4, r5, pc}
 800f0d0:	b118      	cbz	r0, 800f0da <_fflush_r+0x1a>
 800f0d2:	6983      	ldr	r3, [r0, #24]
 800f0d4:	b90b      	cbnz	r3, 800f0da <_fflush_r+0x1a>
 800f0d6:	f000 f887 	bl	800f1e8 <__sinit>
 800f0da:	4b14      	ldr	r3, [pc, #80]	; (800f12c <_fflush_r+0x6c>)
 800f0dc:	429c      	cmp	r4, r3
 800f0de:	d11b      	bne.n	800f118 <_fflush_r+0x58>
 800f0e0:	686c      	ldr	r4, [r5, #4]
 800f0e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d0ef      	beq.n	800f0ca <_fflush_r+0xa>
 800f0ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f0ec:	07d0      	lsls	r0, r2, #31
 800f0ee:	d404      	bmi.n	800f0fa <_fflush_r+0x3a>
 800f0f0:	0599      	lsls	r1, r3, #22
 800f0f2:	d402      	bmi.n	800f0fa <_fflush_r+0x3a>
 800f0f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f0f6:	f000 f915 	bl	800f324 <__retarget_lock_acquire_recursive>
 800f0fa:	4628      	mov	r0, r5
 800f0fc:	4621      	mov	r1, r4
 800f0fe:	f7ff ff59 	bl	800efb4 <__sflush_r>
 800f102:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f104:	07da      	lsls	r2, r3, #31
 800f106:	4605      	mov	r5, r0
 800f108:	d4e0      	bmi.n	800f0cc <_fflush_r+0xc>
 800f10a:	89a3      	ldrh	r3, [r4, #12]
 800f10c:	059b      	lsls	r3, r3, #22
 800f10e:	d4dd      	bmi.n	800f0cc <_fflush_r+0xc>
 800f110:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f112:	f000 f908 	bl	800f326 <__retarget_lock_release_recursive>
 800f116:	e7d9      	b.n	800f0cc <_fflush_r+0xc>
 800f118:	4b05      	ldr	r3, [pc, #20]	; (800f130 <_fflush_r+0x70>)
 800f11a:	429c      	cmp	r4, r3
 800f11c:	d101      	bne.n	800f122 <_fflush_r+0x62>
 800f11e:	68ac      	ldr	r4, [r5, #8]
 800f120:	e7df      	b.n	800f0e2 <_fflush_r+0x22>
 800f122:	4b04      	ldr	r3, [pc, #16]	; (800f134 <_fflush_r+0x74>)
 800f124:	429c      	cmp	r4, r3
 800f126:	bf08      	it	eq
 800f128:	68ec      	ldreq	r4, [r5, #12]
 800f12a:	e7da      	b.n	800f0e2 <_fflush_r+0x22>
 800f12c:	08010544 	.word	0x08010544
 800f130:	08010564 	.word	0x08010564
 800f134:	08010524 	.word	0x08010524

0800f138 <std>:
 800f138:	2300      	movs	r3, #0
 800f13a:	b510      	push	{r4, lr}
 800f13c:	4604      	mov	r4, r0
 800f13e:	e9c0 3300 	strd	r3, r3, [r0]
 800f142:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f146:	6083      	str	r3, [r0, #8]
 800f148:	8181      	strh	r1, [r0, #12]
 800f14a:	6643      	str	r3, [r0, #100]	; 0x64
 800f14c:	81c2      	strh	r2, [r0, #14]
 800f14e:	6183      	str	r3, [r0, #24]
 800f150:	4619      	mov	r1, r3
 800f152:	2208      	movs	r2, #8
 800f154:	305c      	adds	r0, #92	; 0x5c
 800f156:	f7ff fe47 	bl	800ede8 <memset>
 800f15a:	4b05      	ldr	r3, [pc, #20]	; (800f170 <std+0x38>)
 800f15c:	6263      	str	r3, [r4, #36]	; 0x24
 800f15e:	4b05      	ldr	r3, [pc, #20]	; (800f174 <std+0x3c>)
 800f160:	62a3      	str	r3, [r4, #40]	; 0x28
 800f162:	4b05      	ldr	r3, [pc, #20]	; (800f178 <std+0x40>)
 800f164:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f166:	4b05      	ldr	r3, [pc, #20]	; (800f17c <std+0x44>)
 800f168:	6224      	str	r4, [r4, #32]
 800f16a:	6323      	str	r3, [r4, #48]	; 0x30
 800f16c:	bd10      	pop	{r4, pc}
 800f16e:	bf00      	nop
 800f170:	0800fbc1 	.word	0x0800fbc1
 800f174:	0800fbe3 	.word	0x0800fbe3
 800f178:	0800fc1b 	.word	0x0800fc1b
 800f17c:	0800fc3f 	.word	0x0800fc3f

0800f180 <_cleanup_r>:
 800f180:	4901      	ldr	r1, [pc, #4]	; (800f188 <_cleanup_r+0x8>)
 800f182:	f000 b8af 	b.w	800f2e4 <_fwalk_reent>
 800f186:	bf00      	nop
 800f188:	0800f0c1 	.word	0x0800f0c1

0800f18c <__sfmoreglue>:
 800f18c:	b570      	push	{r4, r5, r6, lr}
 800f18e:	2268      	movs	r2, #104	; 0x68
 800f190:	1e4d      	subs	r5, r1, #1
 800f192:	4355      	muls	r5, r2
 800f194:	460e      	mov	r6, r1
 800f196:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f19a:	f000 f99f 	bl	800f4dc <_malloc_r>
 800f19e:	4604      	mov	r4, r0
 800f1a0:	b140      	cbz	r0, 800f1b4 <__sfmoreglue+0x28>
 800f1a2:	2100      	movs	r1, #0
 800f1a4:	e9c0 1600 	strd	r1, r6, [r0]
 800f1a8:	300c      	adds	r0, #12
 800f1aa:	60a0      	str	r0, [r4, #8]
 800f1ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f1b0:	f7ff fe1a 	bl	800ede8 <memset>
 800f1b4:	4620      	mov	r0, r4
 800f1b6:	bd70      	pop	{r4, r5, r6, pc}

0800f1b8 <__sfp_lock_acquire>:
 800f1b8:	4801      	ldr	r0, [pc, #4]	; (800f1c0 <__sfp_lock_acquire+0x8>)
 800f1ba:	f000 b8b3 	b.w	800f324 <__retarget_lock_acquire_recursive>
 800f1be:	bf00      	nop
 800f1c0:	24060901 	.word	0x24060901

0800f1c4 <__sfp_lock_release>:
 800f1c4:	4801      	ldr	r0, [pc, #4]	; (800f1cc <__sfp_lock_release+0x8>)
 800f1c6:	f000 b8ae 	b.w	800f326 <__retarget_lock_release_recursive>
 800f1ca:	bf00      	nop
 800f1cc:	24060901 	.word	0x24060901

0800f1d0 <__sinit_lock_acquire>:
 800f1d0:	4801      	ldr	r0, [pc, #4]	; (800f1d8 <__sinit_lock_acquire+0x8>)
 800f1d2:	f000 b8a7 	b.w	800f324 <__retarget_lock_acquire_recursive>
 800f1d6:	bf00      	nop
 800f1d8:	24060902 	.word	0x24060902

0800f1dc <__sinit_lock_release>:
 800f1dc:	4801      	ldr	r0, [pc, #4]	; (800f1e4 <__sinit_lock_release+0x8>)
 800f1de:	f000 b8a2 	b.w	800f326 <__retarget_lock_release_recursive>
 800f1e2:	bf00      	nop
 800f1e4:	24060902 	.word	0x24060902

0800f1e8 <__sinit>:
 800f1e8:	b510      	push	{r4, lr}
 800f1ea:	4604      	mov	r4, r0
 800f1ec:	f7ff fff0 	bl	800f1d0 <__sinit_lock_acquire>
 800f1f0:	69a3      	ldr	r3, [r4, #24]
 800f1f2:	b11b      	cbz	r3, 800f1fc <__sinit+0x14>
 800f1f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1f8:	f7ff bff0 	b.w	800f1dc <__sinit_lock_release>
 800f1fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f200:	6523      	str	r3, [r4, #80]	; 0x50
 800f202:	4b13      	ldr	r3, [pc, #76]	; (800f250 <__sinit+0x68>)
 800f204:	4a13      	ldr	r2, [pc, #76]	; (800f254 <__sinit+0x6c>)
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	62a2      	str	r2, [r4, #40]	; 0x28
 800f20a:	42a3      	cmp	r3, r4
 800f20c:	bf04      	itt	eq
 800f20e:	2301      	moveq	r3, #1
 800f210:	61a3      	streq	r3, [r4, #24]
 800f212:	4620      	mov	r0, r4
 800f214:	f000 f820 	bl	800f258 <__sfp>
 800f218:	6060      	str	r0, [r4, #4]
 800f21a:	4620      	mov	r0, r4
 800f21c:	f000 f81c 	bl	800f258 <__sfp>
 800f220:	60a0      	str	r0, [r4, #8]
 800f222:	4620      	mov	r0, r4
 800f224:	f000 f818 	bl	800f258 <__sfp>
 800f228:	2200      	movs	r2, #0
 800f22a:	60e0      	str	r0, [r4, #12]
 800f22c:	2104      	movs	r1, #4
 800f22e:	6860      	ldr	r0, [r4, #4]
 800f230:	f7ff ff82 	bl	800f138 <std>
 800f234:	68a0      	ldr	r0, [r4, #8]
 800f236:	2201      	movs	r2, #1
 800f238:	2109      	movs	r1, #9
 800f23a:	f7ff ff7d 	bl	800f138 <std>
 800f23e:	68e0      	ldr	r0, [r4, #12]
 800f240:	2202      	movs	r2, #2
 800f242:	2112      	movs	r1, #18
 800f244:	f7ff ff78 	bl	800f138 <std>
 800f248:	2301      	movs	r3, #1
 800f24a:	61a3      	str	r3, [r4, #24]
 800f24c:	e7d2      	b.n	800f1f4 <__sinit+0xc>
 800f24e:	bf00      	nop
 800f250:	08010520 	.word	0x08010520
 800f254:	0800f181 	.word	0x0800f181

0800f258 <__sfp>:
 800f258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f25a:	4607      	mov	r7, r0
 800f25c:	f7ff ffac 	bl	800f1b8 <__sfp_lock_acquire>
 800f260:	4b1e      	ldr	r3, [pc, #120]	; (800f2dc <__sfp+0x84>)
 800f262:	681e      	ldr	r6, [r3, #0]
 800f264:	69b3      	ldr	r3, [r6, #24]
 800f266:	b913      	cbnz	r3, 800f26e <__sfp+0x16>
 800f268:	4630      	mov	r0, r6
 800f26a:	f7ff ffbd 	bl	800f1e8 <__sinit>
 800f26e:	3648      	adds	r6, #72	; 0x48
 800f270:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f274:	3b01      	subs	r3, #1
 800f276:	d503      	bpl.n	800f280 <__sfp+0x28>
 800f278:	6833      	ldr	r3, [r6, #0]
 800f27a:	b30b      	cbz	r3, 800f2c0 <__sfp+0x68>
 800f27c:	6836      	ldr	r6, [r6, #0]
 800f27e:	e7f7      	b.n	800f270 <__sfp+0x18>
 800f280:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f284:	b9d5      	cbnz	r5, 800f2bc <__sfp+0x64>
 800f286:	4b16      	ldr	r3, [pc, #88]	; (800f2e0 <__sfp+0x88>)
 800f288:	60e3      	str	r3, [r4, #12]
 800f28a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f28e:	6665      	str	r5, [r4, #100]	; 0x64
 800f290:	f000 f847 	bl	800f322 <__retarget_lock_init_recursive>
 800f294:	f7ff ff96 	bl	800f1c4 <__sfp_lock_release>
 800f298:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f29c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f2a0:	6025      	str	r5, [r4, #0]
 800f2a2:	61a5      	str	r5, [r4, #24]
 800f2a4:	2208      	movs	r2, #8
 800f2a6:	4629      	mov	r1, r5
 800f2a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f2ac:	f7ff fd9c 	bl	800ede8 <memset>
 800f2b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f2b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f2b8:	4620      	mov	r0, r4
 800f2ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2bc:	3468      	adds	r4, #104	; 0x68
 800f2be:	e7d9      	b.n	800f274 <__sfp+0x1c>
 800f2c0:	2104      	movs	r1, #4
 800f2c2:	4638      	mov	r0, r7
 800f2c4:	f7ff ff62 	bl	800f18c <__sfmoreglue>
 800f2c8:	4604      	mov	r4, r0
 800f2ca:	6030      	str	r0, [r6, #0]
 800f2cc:	2800      	cmp	r0, #0
 800f2ce:	d1d5      	bne.n	800f27c <__sfp+0x24>
 800f2d0:	f7ff ff78 	bl	800f1c4 <__sfp_lock_release>
 800f2d4:	230c      	movs	r3, #12
 800f2d6:	603b      	str	r3, [r7, #0]
 800f2d8:	e7ee      	b.n	800f2b8 <__sfp+0x60>
 800f2da:	bf00      	nop
 800f2dc:	08010520 	.word	0x08010520
 800f2e0:	ffff0001 	.word	0xffff0001

0800f2e4 <_fwalk_reent>:
 800f2e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2e8:	4606      	mov	r6, r0
 800f2ea:	4688      	mov	r8, r1
 800f2ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f2f0:	2700      	movs	r7, #0
 800f2f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f2f6:	f1b9 0901 	subs.w	r9, r9, #1
 800f2fa:	d505      	bpl.n	800f308 <_fwalk_reent+0x24>
 800f2fc:	6824      	ldr	r4, [r4, #0]
 800f2fe:	2c00      	cmp	r4, #0
 800f300:	d1f7      	bne.n	800f2f2 <_fwalk_reent+0xe>
 800f302:	4638      	mov	r0, r7
 800f304:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f308:	89ab      	ldrh	r3, [r5, #12]
 800f30a:	2b01      	cmp	r3, #1
 800f30c:	d907      	bls.n	800f31e <_fwalk_reent+0x3a>
 800f30e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f312:	3301      	adds	r3, #1
 800f314:	d003      	beq.n	800f31e <_fwalk_reent+0x3a>
 800f316:	4629      	mov	r1, r5
 800f318:	4630      	mov	r0, r6
 800f31a:	47c0      	blx	r8
 800f31c:	4307      	orrs	r7, r0
 800f31e:	3568      	adds	r5, #104	; 0x68
 800f320:	e7e9      	b.n	800f2f6 <_fwalk_reent+0x12>

0800f322 <__retarget_lock_init_recursive>:
 800f322:	4770      	bx	lr

0800f324 <__retarget_lock_acquire_recursive>:
 800f324:	4770      	bx	lr

0800f326 <__retarget_lock_release_recursive>:
 800f326:	4770      	bx	lr

0800f328 <__swhatbuf_r>:
 800f328:	b570      	push	{r4, r5, r6, lr}
 800f32a:	460e      	mov	r6, r1
 800f32c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f330:	2900      	cmp	r1, #0
 800f332:	b096      	sub	sp, #88	; 0x58
 800f334:	4614      	mov	r4, r2
 800f336:	461d      	mov	r5, r3
 800f338:	da08      	bge.n	800f34c <__swhatbuf_r+0x24>
 800f33a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f33e:	2200      	movs	r2, #0
 800f340:	602a      	str	r2, [r5, #0]
 800f342:	061a      	lsls	r2, r3, #24
 800f344:	d410      	bmi.n	800f368 <__swhatbuf_r+0x40>
 800f346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f34a:	e00e      	b.n	800f36a <__swhatbuf_r+0x42>
 800f34c:	466a      	mov	r2, sp
 800f34e:	f000 fd5d 	bl	800fe0c <_fstat_r>
 800f352:	2800      	cmp	r0, #0
 800f354:	dbf1      	blt.n	800f33a <__swhatbuf_r+0x12>
 800f356:	9a01      	ldr	r2, [sp, #4]
 800f358:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f35c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f360:	425a      	negs	r2, r3
 800f362:	415a      	adcs	r2, r3
 800f364:	602a      	str	r2, [r5, #0]
 800f366:	e7ee      	b.n	800f346 <__swhatbuf_r+0x1e>
 800f368:	2340      	movs	r3, #64	; 0x40
 800f36a:	2000      	movs	r0, #0
 800f36c:	6023      	str	r3, [r4, #0]
 800f36e:	b016      	add	sp, #88	; 0x58
 800f370:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f374 <__smakebuf_r>:
 800f374:	898b      	ldrh	r3, [r1, #12]
 800f376:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f378:	079d      	lsls	r5, r3, #30
 800f37a:	4606      	mov	r6, r0
 800f37c:	460c      	mov	r4, r1
 800f37e:	d507      	bpl.n	800f390 <__smakebuf_r+0x1c>
 800f380:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f384:	6023      	str	r3, [r4, #0]
 800f386:	6123      	str	r3, [r4, #16]
 800f388:	2301      	movs	r3, #1
 800f38a:	6163      	str	r3, [r4, #20]
 800f38c:	b002      	add	sp, #8
 800f38e:	bd70      	pop	{r4, r5, r6, pc}
 800f390:	ab01      	add	r3, sp, #4
 800f392:	466a      	mov	r2, sp
 800f394:	f7ff ffc8 	bl	800f328 <__swhatbuf_r>
 800f398:	9900      	ldr	r1, [sp, #0]
 800f39a:	4605      	mov	r5, r0
 800f39c:	4630      	mov	r0, r6
 800f39e:	f000 f89d 	bl	800f4dc <_malloc_r>
 800f3a2:	b948      	cbnz	r0, 800f3b8 <__smakebuf_r+0x44>
 800f3a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3a8:	059a      	lsls	r2, r3, #22
 800f3aa:	d4ef      	bmi.n	800f38c <__smakebuf_r+0x18>
 800f3ac:	f023 0303 	bic.w	r3, r3, #3
 800f3b0:	f043 0302 	orr.w	r3, r3, #2
 800f3b4:	81a3      	strh	r3, [r4, #12]
 800f3b6:	e7e3      	b.n	800f380 <__smakebuf_r+0xc>
 800f3b8:	4b0d      	ldr	r3, [pc, #52]	; (800f3f0 <__smakebuf_r+0x7c>)
 800f3ba:	62b3      	str	r3, [r6, #40]	; 0x28
 800f3bc:	89a3      	ldrh	r3, [r4, #12]
 800f3be:	6020      	str	r0, [r4, #0]
 800f3c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3c4:	81a3      	strh	r3, [r4, #12]
 800f3c6:	9b00      	ldr	r3, [sp, #0]
 800f3c8:	6163      	str	r3, [r4, #20]
 800f3ca:	9b01      	ldr	r3, [sp, #4]
 800f3cc:	6120      	str	r0, [r4, #16]
 800f3ce:	b15b      	cbz	r3, 800f3e8 <__smakebuf_r+0x74>
 800f3d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f3d4:	4630      	mov	r0, r6
 800f3d6:	f000 fd2b 	bl	800fe30 <_isatty_r>
 800f3da:	b128      	cbz	r0, 800f3e8 <__smakebuf_r+0x74>
 800f3dc:	89a3      	ldrh	r3, [r4, #12]
 800f3de:	f023 0303 	bic.w	r3, r3, #3
 800f3e2:	f043 0301 	orr.w	r3, r3, #1
 800f3e6:	81a3      	strh	r3, [r4, #12]
 800f3e8:	89a0      	ldrh	r0, [r4, #12]
 800f3ea:	4305      	orrs	r5, r0
 800f3ec:	81a5      	strh	r5, [r4, #12]
 800f3ee:	e7cd      	b.n	800f38c <__smakebuf_r+0x18>
 800f3f0:	0800f181 	.word	0x0800f181

0800f3f4 <malloc>:
 800f3f4:	4b02      	ldr	r3, [pc, #8]	; (800f400 <malloc+0xc>)
 800f3f6:	4601      	mov	r1, r0
 800f3f8:	6818      	ldr	r0, [r3, #0]
 800f3fa:	f000 b86f 	b.w	800f4dc <_malloc_r>
 800f3fe:	bf00      	nop
 800f400:	24000054 	.word	0x24000054

0800f404 <_free_r>:
 800f404:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f406:	2900      	cmp	r1, #0
 800f408:	d044      	beq.n	800f494 <_free_r+0x90>
 800f40a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f40e:	9001      	str	r0, [sp, #4]
 800f410:	2b00      	cmp	r3, #0
 800f412:	f1a1 0404 	sub.w	r4, r1, #4
 800f416:	bfb8      	it	lt
 800f418:	18e4      	addlt	r4, r4, r3
 800f41a:	f000 fd2b 	bl	800fe74 <__malloc_lock>
 800f41e:	4a1e      	ldr	r2, [pc, #120]	; (800f498 <_free_r+0x94>)
 800f420:	9801      	ldr	r0, [sp, #4]
 800f422:	6813      	ldr	r3, [r2, #0]
 800f424:	b933      	cbnz	r3, 800f434 <_free_r+0x30>
 800f426:	6063      	str	r3, [r4, #4]
 800f428:	6014      	str	r4, [r2, #0]
 800f42a:	b003      	add	sp, #12
 800f42c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f430:	f000 bd26 	b.w	800fe80 <__malloc_unlock>
 800f434:	42a3      	cmp	r3, r4
 800f436:	d908      	bls.n	800f44a <_free_r+0x46>
 800f438:	6825      	ldr	r5, [r4, #0]
 800f43a:	1961      	adds	r1, r4, r5
 800f43c:	428b      	cmp	r3, r1
 800f43e:	bf01      	itttt	eq
 800f440:	6819      	ldreq	r1, [r3, #0]
 800f442:	685b      	ldreq	r3, [r3, #4]
 800f444:	1949      	addeq	r1, r1, r5
 800f446:	6021      	streq	r1, [r4, #0]
 800f448:	e7ed      	b.n	800f426 <_free_r+0x22>
 800f44a:	461a      	mov	r2, r3
 800f44c:	685b      	ldr	r3, [r3, #4]
 800f44e:	b10b      	cbz	r3, 800f454 <_free_r+0x50>
 800f450:	42a3      	cmp	r3, r4
 800f452:	d9fa      	bls.n	800f44a <_free_r+0x46>
 800f454:	6811      	ldr	r1, [r2, #0]
 800f456:	1855      	adds	r5, r2, r1
 800f458:	42a5      	cmp	r5, r4
 800f45a:	d10b      	bne.n	800f474 <_free_r+0x70>
 800f45c:	6824      	ldr	r4, [r4, #0]
 800f45e:	4421      	add	r1, r4
 800f460:	1854      	adds	r4, r2, r1
 800f462:	42a3      	cmp	r3, r4
 800f464:	6011      	str	r1, [r2, #0]
 800f466:	d1e0      	bne.n	800f42a <_free_r+0x26>
 800f468:	681c      	ldr	r4, [r3, #0]
 800f46a:	685b      	ldr	r3, [r3, #4]
 800f46c:	6053      	str	r3, [r2, #4]
 800f46e:	4421      	add	r1, r4
 800f470:	6011      	str	r1, [r2, #0]
 800f472:	e7da      	b.n	800f42a <_free_r+0x26>
 800f474:	d902      	bls.n	800f47c <_free_r+0x78>
 800f476:	230c      	movs	r3, #12
 800f478:	6003      	str	r3, [r0, #0]
 800f47a:	e7d6      	b.n	800f42a <_free_r+0x26>
 800f47c:	6825      	ldr	r5, [r4, #0]
 800f47e:	1961      	adds	r1, r4, r5
 800f480:	428b      	cmp	r3, r1
 800f482:	bf04      	itt	eq
 800f484:	6819      	ldreq	r1, [r3, #0]
 800f486:	685b      	ldreq	r3, [r3, #4]
 800f488:	6063      	str	r3, [r4, #4]
 800f48a:	bf04      	itt	eq
 800f48c:	1949      	addeq	r1, r1, r5
 800f48e:	6021      	streq	r1, [r4, #0]
 800f490:	6054      	str	r4, [r2, #4]
 800f492:	e7ca      	b.n	800f42a <_free_r+0x26>
 800f494:	b003      	add	sp, #12
 800f496:	bd30      	pop	{r4, r5, pc}
 800f498:	24060904 	.word	0x24060904

0800f49c <sbrk_aligned>:
 800f49c:	b570      	push	{r4, r5, r6, lr}
 800f49e:	4e0e      	ldr	r6, [pc, #56]	; (800f4d8 <sbrk_aligned+0x3c>)
 800f4a0:	460c      	mov	r4, r1
 800f4a2:	6831      	ldr	r1, [r6, #0]
 800f4a4:	4605      	mov	r5, r0
 800f4a6:	b911      	cbnz	r1, 800f4ae <sbrk_aligned+0x12>
 800f4a8:	f000 fb7a 	bl	800fba0 <_sbrk_r>
 800f4ac:	6030      	str	r0, [r6, #0]
 800f4ae:	4621      	mov	r1, r4
 800f4b0:	4628      	mov	r0, r5
 800f4b2:	f000 fb75 	bl	800fba0 <_sbrk_r>
 800f4b6:	1c43      	adds	r3, r0, #1
 800f4b8:	d00a      	beq.n	800f4d0 <sbrk_aligned+0x34>
 800f4ba:	1cc4      	adds	r4, r0, #3
 800f4bc:	f024 0403 	bic.w	r4, r4, #3
 800f4c0:	42a0      	cmp	r0, r4
 800f4c2:	d007      	beq.n	800f4d4 <sbrk_aligned+0x38>
 800f4c4:	1a21      	subs	r1, r4, r0
 800f4c6:	4628      	mov	r0, r5
 800f4c8:	f000 fb6a 	bl	800fba0 <_sbrk_r>
 800f4cc:	3001      	adds	r0, #1
 800f4ce:	d101      	bne.n	800f4d4 <sbrk_aligned+0x38>
 800f4d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f4d4:	4620      	mov	r0, r4
 800f4d6:	bd70      	pop	{r4, r5, r6, pc}
 800f4d8:	24060908 	.word	0x24060908

0800f4dc <_malloc_r>:
 800f4dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4e0:	1ccd      	adds	r5, r1, #3
 800f4e2:	f025 0503 	bic.w	r5, r5, #3
 800f4e6:	3508      	adds	r5, #8
 800f4e8:	2d0c      	cmp	r5, #12
 800f4ea:	bf38      	it	cc
 800f4ec:	250c      	movcc	r5, #12
 800f4ee:	2d00      	cmp	r5, #0
 800f4f0:	4607      	mov	r7, r0
 800f4f2:	db01      	blt.n	800f4f8 <_malloc_r+0x1c>
 800f4f4:	42a9      	cmp	r1, r5
 800f4f6:	d905      	bls.n	800f504 <_malloc_r+0x28>
 800f4f8:	230c      	movs	r3, #12
 800f4fa:	603b      	str	r3, [r7, #0]
 800f4fc:	2600      	movs	r6, #0
 800f4fe:	4630      	mov	r0, r6
 800f500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f504:	4e2e      	ldr	r6, [pc, #184]	; (800f5c0 <_malloc_r+0xe4>)
 800f506:	f000 fcb5 	bl	800fe74 <__malloc_lock>
 800f50a:	6833      	ldr	r3, [r6, #0]
 800f50c:	461c      	mov	r4, r3
 800f50e:	bb34      	cbnz	r4, 800f55e <_malloc_r+0x82>
 800f510:	4629      	mov	r1, r5
 800f512:	4638      	mov	r0, r7
 800f514:	f7ff ffc2 	bl	800f49c <sbrk_aligned>
 800f518:	1c43      	adds	r3, r0, #1
 800f51a:	4604      	mov	r4, r0
 800f51c:	d14d      	bne.n	800f5ba <_malloc_r+0xde>
 800f51e:	6834      	ldr	r4, [r6, #0]
 800f520:	4626      	mov	r6, r4
 800f522:	2e00      	cmp	r6, #0
 800f524:	d140      	bne.n	800f5a8 <_malloc_r+0xcc>
 800f526:	6823      	ldr	r3, [r4, #0]
 800f528:	4631      	mov	r1, r6
 800f52a:	4638      	mov	r0, r7
 800f52c:	eb04 0803 	add.w	r8, r4, r3
 800f530:	f000 fb36 	bl	800fba0 <_sbrk_r>
 800f534:	4580      	cmp	r8, r0
 800f536:	d13a      	bne.n	800f5ae <_malloc_r+0xd2>
 800f538:	6821      	ldr	r1, [r4, #0]
 800f53a:	3503      	adds	r5, #3
 800f53c:	1a6d      	subs	r5, r5, r1
 800f53e:	f025 0503 	bic.w	r5, r5, #3
 800f542:	3508      	adds	r5, #8
 800f544:	2d0c      	cmp	r5, #12
 800f546:	bf38      	it	cc
 800f548:	250c      	movcc	r5, #12
 800f54a:	4629      	mov	r1, r5
 800f54c:	4638      	mov	r0, r7
 800f54e:	f7ff ffa5 	bl	800f49c <sbrk_aligned>
 800f552:	3001      	adds	r0, #1
 800f554:	d02b      	beq.n	800f5ae <_malloc_r+0xd2>
 800f556:	6823      	ldr	r3, [r4, #0]
 800f558:	442b      	add	r3, r5
 800f55a:	6023      	str	r3, [r4, #0]
 800f55c:	e00e      	b.n	800f57c <_malloc_r+0xa0>
 800f55e:	6822      	ldr	r2, [r4, #0]
 800f560:	1b52      	subs	r2, r2, r5
 800f562:	d41e      	bmi.n	800f5a2 <_malloc_r+0xc6>
 800f564:	2a0b      	cmp	r2, #11
 800f566:	d916      	bls.n	800f596 <_malloc_r+0xba>
 800f568:	1961      	adds	r1, r4, r5
 800f56a:	42a3      	cmp	r3, r4
 800f56c:	6025      	str	r5, [r4, #0]
 800f56e:	bf18      	it	ne
 800f570:	6059      	strne	r1, [r3, #4]
 800f572:	6863      	ldr	r3, [r4, #4]
 800f574:	bf08      	it	eq
 800f576:	6031      	streq	r1, [r6, #0]
 800f578:	5162      	str	r2, [r4, r5]
 800f57a:	604b      	str	r3, [r1, #4]
 800f57c:	4638      	mov	r0, r7
 800f57e:	f104 060b 	add.w	r6, r4, #11
 800f582:	f000 fc7d 	bl	800fe80 <__malloc_unlock>
 800f586:	f026 0607 	bic.w	r6, r6, #7
 800f58a:	1d23      	adds	r3, r4, #4
 800f58c:	1af2      	subs	r2, r6, r3
 800f58e:	d0b6      	beq.n	800f4fe <_malloc_r+0x22>
 800f590:	1b9b      	subs	r3, r3, r6
 800f592:	50a3      	str	r3, [r4, r2]
 800f594:	e7b3      	b.n	800f4fe <_malloc_r+0x22>
 800f596:	6862      	ldr	r2, [r4, #4]
 800f598:	42a3      	cmp	r3, r4
 800f59a:	bf0c      	ite	eq
 800f59c:	6032      	streq	r2, [r6, #0]
 800f59e:	605a      	strne	r2, [r3, #4]
 800f5a0:	e7ec      	b.n	800f57c <_malloc_r+0xa0>
 800f5a2:	4623      	mov	r3, r4
 800f5a4:	6864      	ldr	r4, [r4, #4]
 800f5a6:	e7b2      	b.n	800f50e <_malloc_r+0x32>
 800f5a8:	4634      	mov	r4, r6
 800f5aa:	6876      	ldr	r6, [r6, #4]
 800f5ac:	e7b9      	b.n	800f522 <_malloc_r+0x46>
 800f5ae:	230c      	movs	r3, #12
 800f5b0:	603b      	str	r3, [r7, #0]
 800f5b2:	4638      	mov	r0, r7
 800f5b4:	f000 fc64 	bl	800fe80 <__malloc_unlock>
 800f5b8:	e7a1      	b.n	800f4fe <_malloc_r+0x22>
 800f5ba:	6025      	str	r5, [r4, #0]
 800f5bc:	e7de      	b.n	800f57c <_malloc_r+0xa0>
 800f5be:	bf00      	nop
 800f5c0:	24060904 	.word	0x24060904

0800f5c4 <__sfputc_r>:
 800f5c4:	6893      	ldr	r3, [r2, #8]
 800f5c6:	3b01      	subs	r3, #1
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	b410      	push	{r4}
 800f5cc:	6093      	str	r3, [r2, #8]
 800f5ce:	da08      	bge.n	800f5e2 <__sfputc_r+0x1e>
 800f5d0:	6994      	ldr	r4, [r2, #24]
 800f5d2:	42a3      	cmp	r3, r4
 800f5d4:	db01      	blt.n	800f5da <__sfputc_r+0x16>
 800f5d6:	290a      	cmp	r1, #10
 800f5d8:	d103      	bne.n	800f5e2 <__sfputc_r+0x1e>
 800f5da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5de:	f000 bb33 	b.w	800fc48 <__swbuf_r>
 800f5e2:	6813      	ldr	r3, [r2, #0]
 800f5e4:	1c58      	adds	r0, r3, #1
 800f5e6:	6010      	str	r0, [r2, #0]
 800f5e8:	7019      	strb	r1, [r3, #0]
 800f5ea:	4608      	mov	r0, r1
 800f5ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5f0:	4770      	bx	lr

0800f5f2 <__sfputs_r>:
 800f5f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5f4:	4606      	mov	r6, r0
 800f5f6:	460f      	mov	r7, r1
 800f5f8:	4614      	mov	r4, r2
 800f5fa:	18d5      	adds	r5, r2, r3
 800f5fc:	42ac      	cmp	r4, r5
 800f5fe:	d101      	bne.n	800f604 <__sfputs_r+0x12>
 800f600:	2000      	movs	r0, #0
 800f602:	e007      	b.n	800f614 <__sfputs_r+0x22>
 800f604:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f608:	463a      	mov	r2, r7
 800f60a:	4630      	mov	r0, r6
 800f60c:	f7ff ffda 	bl	800f5c4 <__sfputc_r>
 800f610:	1c43      	adds	r3, r0, #1
 800f612:	d1f3      	bne.n	800f5fc <__sfputs_r+0xa>
 800f614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f618 <_vfiprintf_r>:
 800f618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f61c:	460d      	mov	r5, r1
 800f61e:	b09d      	sub	sp, #116	; 0x74
 800f620:	4614      	mov	r4, r2
 800f622:	4698      	mov	r8, r3
 800f624:	4606      	mov	r6, r0
 800f626:	b118      	cbz	r0, 800f630 <_vfiprintf_r+0x18>
 800f628:	6983      	ldr	r3, [r0, #24]
 800f62a:	b90b      	cbnz	r3, 800f630 <_vfiprintf_r+0x18>
 800f62c:	f7ff fddc 	bl	800f1e8 <__sinit>
 800f630:	4b89      	ldr	r3, [pc, #548]	; (800f858 <_vfiprintf_r+0x240>)
 800f632:	429d      	cmp	r5, r3
 800f634:	d11b      	bne.n	800f66e <_vfiprintf_r+0x56>
 800f636:	6875      	ldr	r5, [r6, #4]
 800f638:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f63a:	07d9      	lsls	r1, r3, #31
 800f63c:	d405      	bmi.n	800f64a <_vfiprintf_r+0x32>
 800f63e:	89ab      	ldrh	r3, [r5, #12]
 800f640:	059a      	lsls	r2, r3, #22
 800f642:	d402      	bmi.n	800f64a <_vfiprintf_r+0x32>
 800f644:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f646:	f7ff fe6d 	bl	800f324 <__retarget_lock_acquire_recursive>
 800f64a:	89ab      	ldrh	r3, [r5, #12]
 800f64c:	071b      	lsls	r3, r3, #28
 800f64e:	d501      	bpl.n	800f654 <_vfiprintf_r+0x3c>
 800f650:	692b      	ldr	r3, [r5, #16]
 800f652:	b9eb      	cbnz	r3, 800f690 <_vfiprintf_r+0x78>
 800f654:	4629      	mov	r1, r5
 800f656:	4630      	mov	r0, r6
 800f658:	f000 fb5a 	bl	800fd10 <__swsetup_r>
 800f65c:	b1c0      	cbz	r0, 800f690 <_vfiprintf_r+0x78>
 800f65e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f660:	07dc      	lsls	r4, r3, #31
 800f662:	d50e      	bpl.n	800f682 <_vfiprintf_r+0x6a>
 800f664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f668:	b01d      	add	sp, #116	; 0x74
 800f66a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f66e:	4b7b      	ldr	r3, [pc, #492]	; (800f85c <_vfiprintf_r+0x244>)
 800f670:	429d      	cmp	r5, r3
 800f672:	d101      	bne.n	800f678 <_vfiprintf_r+0x60>
 800f674:	68b5      	ldr	r5, [r6, #8]
 800f676:	e7df      	b.n	800f638 <_vfiprintf_r+0x20>
 800f678:	4b79      	ldr	r3, [pc, #484]	; (800f860 <_vfiprintf_r+0x248>)
 800f67a:	429d      	cmp	r5, r3
 800f67c:	bf08      	it	eq
 800f67e:	68f5      	ldreq	r5, [r6, #12]
 800f680:	e7da      	b.n	800f638 <_vfiprintf_r+0x20>
 800f682:	89ab      	ldrh	r3, [r5, #12]
 800f684:	0598      	lsls	r0, r3, #22
 800f686:	d4ed      	bmi.n	800f664 <_vfiprintf_r+0x4c>
 800f688:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f68a:	f7ff fe4c 	bl	800f326 <__retarget_lock_release_recursive>
 800f68e:	e7e9      	b.n	800f664 <_vfiprintf_r+0x4c>
 800f690:	2300      	movs	r3, #0
 800f692:	9309      	str	r3, [sp, #36]	; 0x24
 800f694:	2320      	movs	r3, #32
 800f696:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f69a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f69e:	2330      	movs	r3, #48	; 0x30
 800f6a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f864 <_vfiprintf_r+0x24c>
 800f6a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f6a8:	f04f 0901 	mov.w	r9, #1
 800f6ac:	4623      	mov	r3, r4
 800f6ae:	469a      	mov	sl, r3
 800f6b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f6b4:	b10a      	cbz	r2, 800f6ba <_vfiprintf_r+0xa2>
 800f6b6:	2a25      	cmp	r2, #37	; 0x25
 800f6b8:	d1f9      	bne.n	800f6ae <_vfiprintf_r+0x96>
 800f6ba:	ebba 0b04 	subs.w	fp, sl, r4
 800f6be:	d00b      	beq.n	800f6d8 <_vfiprintf_r+0xc0>
 800f6c0:	465b      	mov	r3, fp
 800f6c2:	4622      	mov	r2, r4
 800f6c4:	4629      	mov	r1, r5
 800f6c6:	4630      	mov	r0, r6
 800f6c8:	f7ff ff93 	bl	800f5f2 <__sfputs_r>
 800f6cc:	3001      	adds	r0, #1
 800f6ce:	f000 80aa 	beq.w	800f826 <_vfiprintf_r+0x20e>
 800f6d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f6d4:	445a      	add	r2, fp
 800f6d6:	9209      	str	r2, [sp, #36]	; 0x24
 800f6d8:	f89a 3000 	ldrb.w	r3, [sl]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	f000 80a2 	beq.w	800f826 <_vfiprintf_r+0x20e>
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f6e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f6ec:	f10a 0a01 	add.w	sl, sl, #1
 800f6f0:	9304      	str	r3, [sp, #16]
 800f6f2:	9307      	str	r3, [sp, #28]
 800f6f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f6f8:	931a      	str	r3, [sp, #104]	; 0x68
 800f6fa:	4654      	mov	r4, sl
 800f6fc:	2205      	movs	r2, #5
 800f6fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f702:	4858      	ldr	r0, [pc, #352]	; (800f864 <_vfiprintf_r+0x24c>)
 800f704:	f7f0 fdf4 	bl	80002f0 <memchr>
 800f708:	9a04      	ldr	r2, [sp, #16]
 800f70a:	b9d8      	cbnz	r0, 800f744 <_vfiprintf_r+0x12c>
 800f70c:	06d1      	lsls	r1, r2, #27
 800f70e:	bf44      	itt	mi
 800f710:	2320      	movmi	r3, #32
 800f712:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f716:	0713      	lsls	r3, r2, #28
 800f718:	bf44      	itt	mi
 800f71a:	232b      	movmi	r3, #43	; 0x2b
 800f71c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f720:	f89a 3000 	ldrb.w	r3, [sl]
 800f724:	2b2a      	cmp	r3, #42	; 0x2a
 800f726:	d015      	beq.n	800f754 <_vfiprintf_r+0x13c>
 800f728:	9a07      	ldr	r2, [sp, #28]
 800f72a:	4654      	mov	r4, sl
 800f72c:	2000      	movs	r0, #0
 800f72e:	f04f 0c0a 	mov.w	ip, #10
 800f732:	4621      	mov	r1, r4
 800f734:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f738:	3b30      	subs	r3, #48	; 0x30
 800f73a:	2b09      	cmp	r3, #9
 800f73c:	d94e      	bls.n	800f7dc <_vfiprintf_r+0x1c4>
 800f73e:	b1b0      	cbz	r0, 800f76e <_vfiprintf_r+0x156>
 800f740:	9207      	str	r2, [sp, #28]
 800f742:	e014      	b.n	800f76e <_vfiprintf_r+0x156>
 800f744:	eba0 0308 	sub.w	r3, r0, r8
 800f748:	fa09 f303 	lsl.w	r3, r9, r3
 800f74c:	4313      	orrs	r3, r2
 800f74e:	9304      	str	r3, [sp, #16]
 800f750:	46a2      	mov	sl, r4
 800f752:	e7d2      	b.n	800f6fa <_vfiprintf_r+0xe2>
 800f754:	9b03      	ldr	r3, [sp, #12]
 800f756:	1d19      	adds	r1, r3, #4
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	9103      	str	r1, [sp, #12]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	bfbb      	ittet	lt
 800f760:	425b      	neglt	r3, r3
 800f762:	f042 0202 	orrlt.w	r2, r2, #2
 800f766:	9307      	strge	r3, [sp, #28]
 800f768:	9307      	strlt	r3, [sp, #28]
 800f76a:	bfb8      	it	lt
 800f76c:	9204      	strlt	r2, [sp, #16]
 800f76e:	7823      	ldrb	r3, [r4, #0]
 800f770:	2b2e      	cmp	r3, #46	; 0x2e
 800f772:	d10c      	bne.n	800f78e <_vfiprintf_r+0x176>
 800f774:	7863      	ldrb	r3, [r4, #1]
 800f776:	2b2a      	cmp	r3, #42	; 0x2a
 800f778:	d135      	bne.n	800f7e6 <_vfiprintf_r+0x1ce>
 800f77a:	9b03      	ldr	r3, [sp, #12]
 800f77c:	1d1a      	adds	r2, r3, #4
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	9203      	str	r2, [sp, #12]
 800f782:	2b00      	cmp	r3, #0
 800f784:	bfb8      	it	lt
 800f786:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f78a:	3402      	adds	r4, #2
 800f78c:	9305      	str	r3, [sp, #20]
 800f78e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f874 <_vfiprintf_r+0x25c>
 800f792:	7821      	ldrb	r1, [r4, #0]
 800f794:	2203      	movs	r2, #3
 800f796:	4650      	mov	r0, sl
 800f798:	f7f0 fdaa 	bl	80002f0 <memchr>
 800f79c:	b140      	cbz	r0, 800f7b0 <_vfiprintf_r+0x198>
 800f79e:	2340      	movs	r3, #64	; 0x40
 800f7a0:	eba0 000a 	sub.w	r0, r0, sl
 800f7a4:	fa03 f000 	lsl.w	r0, r3, r0
 800f7a8:	9b04      	ldr	r3, [sp, #16]
 800f7aa:	4303      	orrs	r3, r0
 800f7ac:	3401      	adds	r4, #1
 800f7ae:	9304      	str	r3, [sp, #16]
 800f7b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7b4:	482c      	ldr	r0, [pc, #176]	; (800f868 <_vfiprintf_r+0x250>)
 800f7b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f7ba:	2206      	movs	r2, #6
 800f7bc:	f7f0 fd98 	bl	80002f0 <memchr>
 800f7c0:	2800      	cmp	r0, #0
 800f7c2:	d03f      	beq.n	800f844 <_vfiprintf_r+0x22c>
 800f7c4:	4b29      	ldr	r3, [pc, #164]	; (800f86c <_vfiprintf_r+0x254>)
 800f7c6:	bb1b      	cbnz	r3, 800f810 <_vfiprintf_r+0x1f8>
 800f7c8:	9b03      	ldr	r3, [sp, #12]
 800f7ca:	3307      	adds	r3, #7
 800f7cc:	f023 0307 	bic.w	r3, r3, #7
 800f7d0:	3308      	adds	r3, #8
 800f7d2:	9303      	str	r3, [sp, #12]
 800f7d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7d6:	443b      	add	r3, r7
 800f7d8:	9309      	str	r3, [sp, #36]	; 0x24
 800f7da:	e767      	b.n	800f6ac <_vfiprintf_r+0x94>
 800f7dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800f7e0:	460c      	mov	r4, r1
 800f7e2:	2001      	movs	r0, #1
 800f7e4:	e7a5      	b.n	800f732 <_vfiprintf_r+0x11a>
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	3401      	adds	r4, #1
 800f7ea:	9305      	str	r3, [sp, #20]
 800f7ec:	4619      	mov	r1, r3
 800f7ee:	f04f 0c0a 	mov.w	ip, #10
 800f7f2:	4620      	mov	r0, r4
 800f7f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f7f8:	3a30      	subs	r2, #48	; 0x30
 800f7fa:	2a09      	cmp	r2, #9
 800f7fc:	d903      	bls.n	800f806 <_vfiprintf_r+0x1ee>
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d0c5      	beq.n	800f78e <_vfiprintf_r+0x176>
 800f802:	9105      	str	r1, [sp, #20]
 800f804:	e7c3      	b.n	800f78e <_vfiprintf_r+0x176>
 800f806:	fb0c 2101 	mla	r1, ip, r1, r2
 800f80a:	4604      	mov	r4, r0
 800f80c:	2301      	movs	r3, #1
 800f80e:	e7f0      	b.n	800f7f2 <_vfiprintf_r+0x1da>
 800f810:	ab03      	add	r3, sp, #12
 800f812:	9300      	str	r3, [sp, #0]
 800f814:	462a      	mov	r2, r5
 800f816:	4b16      	ldr	r3, [pc, #88]	; (800f870 <_vfiprintf_r+0x258>)
 800f818:	a904      	add	r1, sp, #16
 800f81a:	4630      	mov	r0, r6
 800f81c:	f3af 8000 	nop.w
 800f820:	4607      	mov	r7, r0
 800f822:	1c78      	adds	r0, r7, #1
 800f824:	d1d6      	bne.n	800f7d4 <_vfiprintf_r+0x1bc>
 800f826:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f828:	07d9      	lsls	r1, r3, #31
 800f82a:	d405      	bmi.n	800f838 <_vfiprintf_r+0x220>
 800f82c:	89ab      	ldrh	r3, [r5, #12]
 800f82e:	059a      	lsls	r2, r3, #22
 800f830:	d402      	bmi.n	800f838 <_vfiprintf_r+0x220>
 800f832:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f834:	f7ff fd77 	bl	800f326 <__retarget_lock_release_recursive>
 800f838:	89ab      	ldrh	r3, [r5, #12]
 800f83a:	065b      	lsls	r3, r3, #25
 800f83c:	f53f af12 	bmi.w	800f664 <_vfiprintf_r+0x4c>
 800f840:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f842:	e711      	b.n	800f668 <_vfiprintf_r+0x50>
 800f844:	ab03      	add	r3, sp, #12
 800f846:	9300      	str	r3, [sp, #0]
 800f848:	462a      	mov	r2, r5
 800f84a:	4b09      	ldr	r3, [pc, #36]	; (800f870 <_vfiprintf_r+0x258>)
 800f84c:	a904      	add	r1, sp, #16
 800f84e:	4630      	mov	r0, r6
 800f850:	f000 f880 	bl	800f954 <_printf_i>
 800f854:	e7e4      	b.n	800f820 <_vfiprintf_r+0x208>
 800f856:	bf00      	nop
 800f858:	08010544 	.word	0x08010544
 800f85c:	08010564 	.word	0x08010564
 800f860:	08010524 	.word	0x08010524
 800f864:	08010584 	.word	0x08010584
 800f868:	0801058e 	.word	0x0801058e
 800f86c:	00000000 	.word	0x00000000
 800f870:	0800f5f3 	.word	0x0800f5f3
 800f874:	0801058a 	.word	0x0801058a

0800f878 <_printf_common>:
 800f878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f87c:	4616      	mov	r6, r2
 800f87e:	4699      	mov	r9, r3
 800f880:	688a      	ldr	r2, [r1, #8]
 800f882:	690b      	ldr	r3, [r1, #16]
 800f884:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f888:	4293      	cmp	r3, r2
 800f88a:	bfb8      	it	lt
 800f88c:	4613      	movlt	r3, r2
 800f88e:	6033      	str	r3, [r6, #0]
 800f890:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f894:	4607      	mov	r7, r0
 800f896:	460c      	mov	r4, r1
 800f898:	b10a      	cbz	r2, 800f89e <_printf_common+0x26>
 800f89a:	3301      	adds	r3, #1
 800f89c:	6033      	str	r3, [r6, #0]
 800f89e:	6823      	ldr	r3, [r4, #0]
 800f8a0:	0699      	lsls	r1, r3, #26
 800f8a2:	bf42      	ittt	mi
 800f8a4:	6833      	ldrmi	r3, [r6, #0]
 800f8a6:	3302      	addmi	r3, #2
 800f8a8:	6033      	strmi	r3, [r6, #0]
 800f8aa:	6825      	ldr	r5, [r4, #0]
 800f8ac:	f015 0506 	ands.w	r5, r5, #6
 800f8b0:	d106      	bne.n	800f8c0 <_printf_common+0x48>
 800f8b2:	f104 0a19 	add.w	sl, r4, #25
 800f8b6:	68e3      	ldr	r3, [r4, #12]
 800f8b8:	6832      	ldr	r2, [r6, #0]
 800f8ba:	1a9b      	subs	r3, r3, r2
 800f8bc:	42ab      	cmp	r3, r5
 800f8be:	dc26      	bgt.n	800f90e <_printf_common+0x96>
 800f8c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f8c4:	1e13      	subs	r3, r2, #0
 800f8c6:	6822      	ldr	r2, [r4, #0]
 800f8c8:	bf18      	it	ne
 800f8ca:	2301      	movne	r3, #1
 800f8cc:	0692      	lsls	r2, r2, #26
 800f8ce:	d42b      	bmi.n	800f928 <_printf_common+0xb0>
 800f8d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f8d4:	4649      	mov	r1, r9
 800f8d6:	4638      	mov	r0, r7
 800f8d8:	47c0      	blx	r8
 800f8da:	3001      	adds	r0, #1
 800f8dc:	d01e      	beq.n	800f91c <_printf_common+0xa4>
 800f8de:	6823      	ldr	r3, [r4, #0]
 800f8e0:	68e5      	ldr	r5, [r4, #12]
 800f8e2:	6832      	ldr	r2, [r6, #0]
 800f8e4:	f003 0306 	and.w	r3, r3, #6
 800f8e8:	2b04      	cmp	r3, #4
 800f8ea:	bf08      	it	eq
 800f8ec:	1aad      	subeq	r5, r5, r2
 800f8ee:	68a3      	ldr	r3, [r4, #8]
 800f8f0:	6922      	ldr	r2, [r4, #16]
 800f8f2:	bf0c      	ite	eq
 800f8f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f8f8:	2500      	movne	r5, #0
 800f8fa:	4293      	cmp	r3, r2
 800f8fc:	bfc4      	itt	gt
 800f8fe:	1a9b      	subgt	r3, r3, r2
 800f900:	18ed      	addgt	r5, r5, r3
 800f902:	2600      	movs	r6, #0
 800f904:	341a      	adds	r4, #26
 800f906:	42b5      	cmp	r5, r6
 800f908:	d11a      	bne.n	800f940 <_printf_common+0xc8>
 800f90a:	2000      	movs	r0, #0
 800f90c:	e008      	b.n	800f920 <_printf_common+0xa8>
 800f90e:	2301      	movs	r3, #1
 800f910:	4652      	mov	r2, sl
 800f912:	4649      	mov	r1, r9
 800f914:	4638      	mov	r0, r7
 800f916:	47c0      	blx	r8
 800f918:	3001      	adds	r0, #1
 800f91a:	d103      	bne.n	800f924 <_printf_common+0xac>
 800f91c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f924:	3501      	adds	r5, #1
 800f926:	e7c6      	b.n	800f8b6 <_printf_common+0x3e>
 800f928:	18e1      	adds	r1, r4, r3
 800f92a:	1c5a      	adds	r2, r3, #1
 800f92c:	2030      	movs	r0, #48	; 0x30
 800f92e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f932:	4422      	add	r2, r4
 800f934:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f938:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f93c:	3302      	adds	r3, #2
 800f93e:	e7c7      	b.n	800f8d0 <_printf_common+0x58>
 800f940:	2301      	movs	r3, #1
 800f942:	4622      	mov	r2, r4
 800f944:	4649      	mov	r1, r9
 800f946:	4638      	mov	r0, r7
 800f948:	47c0      	blx	r8
 800f94a:	3001      	adds	r0, #1
 800f94c:	d0e6      	beq.n	800f91c <_printf_common+0xa4>
 800f94e:	3601      	adds	r6, #1
 800f950:	e7d9      	b.n	800f906 <_printf_common+0x8e>
	...

0800f954 <_printf_i>:
 800f954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f958:	7e0f      	ldrb	r7, [r1, #24]
 800f95a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f95c:	2f78      	cmp	r7, #120	; 0x78
 800f95e:	4691      	mov	r9, r2
 800f960:	4680      	mov	r8, r0
 800f962:	460c      	mov	r4, r1
 800f964:	469a      	mov	sl, r3
 800f966:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f96a:	d807      	bhi.n	800f97c <_printf_i+0x28>
 800f96c:	2f62      	cmp	r7, #98	; 0x62
 800f96e:	d80a      	bhi.n	800f986 <_printf_i+0x32>
 800f970:	2f00      	cmp	r7, #0
 800f972:	f000 80d8 	beq.w	800fb26 <_printf_i+0x1d2>
 800f976:	2f58      	cmp	r7, #88	; 0x58
 800f978:	f000 80a3 	beq.w	800fac2 <_printf_i+0x16e>
 800f97c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f980:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f984:	e03a      	b.n	800f9fc <_printf_i+0xa8>
 800f986:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f98a:	2b15      	cmp	r3, #21
 800f98c:	d8f6      	bhi.n	800f97c <_printf_i+0x28>
 800f98e:	a101      	add	r1, pc, #4	; (adr r1, 800f994 <_printf_i+0x40>)
 800f990:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f994:	0800f9ed 	.word	0x0800f9ed
 800f998:	0800fa01 	.word	0x0800fa01
 800f99c:	0800f97d 	.word	0x0800f97d
 800f9a0:	0800f97d 	.word	0x0800f97d
 800f9a4:	0800f97d 	.word	0x0800f97d
 800f9a8:	0800f97d 	.word	0x0800f97d
 800f9ac:	0800fa01 	.word	0x0800fa01
 800f9b0:	0800f97d 	.word	0x0800f97d
 800f9b4:	0800f97d 	.word	0x0800f97d
 800f9b8:	0800f97d 	.word	0x0800f97d
 800f9bc:	0800f97d 	.word	0x0800f97d
 800f9c0:	0800fb0d 	.word	0x0800fb0d
 800f9c4:	0800fa31 	.word	0x0800fa31
 800f9c8:	0800faef 	.word	0x0800faef
 800f9cc:	0800f97d 	.word	0x0800f97d
 800f9d0:	0800f97d 	.word	0x0800f97d
 800f9d4:	0800fb2f 	.word	0x0800fb2f
 800f9d8:	0800f97d 	.word	0x0800f97d
 800f9dc:	0800fa31 	.word	0x0800fa31
 800f9e0:	0800f97d 	.word	0x0800f97d
 800f9e4:	0800f97d 	.word	0x0800f97d
 800f9e8:	0800faf7 	.word	0x0800faf7
 800f9ec:	682b      	ldr	r3, [r5, #0]
 800f9ee:	1d1a      	adds	r2, r3, #4
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	602a      	str	r2, [r5, #0]
 800f9f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f9f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f9fc:	2301      	movs	r3, #1
 800f9fe:	e0a3      	b.n	800fb48 <_printf_i+0x1f4>
 800fa00:	6820      	ldr	r0, [r4, #0]
 800fa02:	6829      	ldr	r1, [r5, #0]
 800fa04:	0606      	lsls	r6, r0, #24
 800fa06:	f101 0304 	add.w	r3, r1, #4
 800fa0a:	d50a      	bpl.n	800fa22 <_printf_i+0xce>
 800fa0c:	680e      	ldr	r6, [r1, #0]
 800fa0e:	602b      	str	r3, [r5, #0]
 800fa10:	2e00      	cmp	r6, #0
 800fa12:	da03      	bge.n	800fa1c <_printf_i+0xc8>
 800fa14:	232d      	movs	r3, #45	; 0x2d
 800fa16:	4276      	negs	r6, r6
 800fa18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa1c:	485e      	ldr	r0, [pc, #376]	; (800fb98 <_printf_i+0x244>)
 800fa1e:	230a      	movs	r3, #10
 800fa20:	e019      	b.n	800fa56 <_printf_i+0x102>
 800fa22:	680e      	ldr	r6, [r1, #0]
 800fa24:	602b      	str	r3, [r5, #0]
 800fa26:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fa2a:	bf18      	it	ne
 800fa2c:	b236      	sxthne	r6, r6
 800fa2e:	e7ef      	b.n	800fa10 <_printf_i+0xbc>
 800fa30:	682b      	ldr	r3, [r5, #0]
 800fa32:	6820      	ldr	r0, [r4, #0]
 800fa34:	1d19      	adds	r1, r3, #4
 800fa36:	6029      	str	r1, [r5, #0]
 800fa38:	0601      	lsls	r1, r0, #24
 800fa3a:	d501      	bpl.n	800fa40 <_printf_i+0xec>
 800fa3c:	681e      	ldr	r6, [r3, #0]
 800fa3e:	e002      	b.n	800fa46 <_printf_i+0xf2>
 800fa40:	0646      	lsls	r6, r0, #25
 800fa42:	d5fb      	bpl.n	800fa3c <_printf_i+0xe8>
 800fa44:	881e      	ldrh	r6, [r3, #0]
 800fa46:	4854      	ldr	r0, [pc, #336]	; (800fb98 <_printf_i+0x244>)
 800fa48:	2f6f      	cmp	r7, #111	; 0x6f
 800fa4a:	bf0c      	ite	eq
 800fa4c:	2308      	moveq	r3, #8
 800fa4e:	230a      	movne	r3, #10
 800fa50:	2100      	movs	r1, #0
 800fa52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fa56:	6865      	ldr	r5, [r4, #4]
 800fa58:	60a5      	str	r5, [r4, #8]
 800fa5a:	2d00      	cmp	r5, #0
 800fa5c:	bfa2      	ittt	ge
 800fa5e:	6821      	ldrge	r1, [r4, #0]
 800fa60:	f021 0104 	bicge.w	r1, r1, #4
 800fa64:	6021      	strge	r1, [r4, #0]
 800fa66:	b90e      	cbnz	r6, 800fa6c <_printf_i+0x118>
 800fa68:	2d00      	cmp	r5, #0
 800fa6a:	d04d      	beq.n	800fb08 <_printf_i+0x1b4>
 800fa6c:	4615      	mov	r5, r2
 800fa6e:	fbb6 f1f3 	udiv	r1, r6, r3
 800fa72:	fb03 6711 	mls	r7, r3, r1, r6
 800fa76:	5dc7      	ldrb	r7, [r0, r7]
 800fa78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fa7c:	4637      	mov	r7, r6
 800fa7e:	42bb      	cmp	r3, r7
 800fa80:	460e      	mov	r6, r1
 800fa82:	d9f4      	bls.n	800fa6e <_printf_i+0x11a>
 800fa84:	2b08      	cmp	r3, #8
 800fa86:	d10b      	bne.n	800faa0 <_printf_i+0x14c>
 800fa88:	6823      	ldr	r3, [r4, #0]
 800fa8a:	07de      	lsls	r6, r3, #31
 800fa8c:	d508      	bpl.n	800faa0 <_printf_i+0x14c>
 800fa8e:	6923      	ldr	r3, [r4, #16]
 800fa90:	6861      	ldr	r1, [r4, #4]
 800fa92:	4299      	cmp	r1, r3
 800fa94:	bfde      	ittt	le
 800fa96:	2330      	movle	r3, #48	; 0x30
 800fa98:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fa9c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800faa0:	1b52      	subs	r2, r2, r5
 800faa2:	6122      	str	r2, [r4, #16]
 800faa4:	f8cd a000 	str.w	sl, [sp]
 800faa8:	464b      	mov	r3, r9
 800faaa:	aa03      	add	r2, sp, #12
 800faac:	4621      	mov	r1, r4
 800faae:	4640      	mov	r0, r8
 800fab0:	f7ff fee2 	bl	800f878 <_printf_common>
 800fab4:	3001      	adds	r0, #1
 800fab6:	d14c      	bne.n	800fb52 <_printf_i+0x1fe>
 800fab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fabc:	b004      	add	sp, #16
 800fabe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fac2:	4835      	ldr	r0, [pc, #212]	; (800fb98 <_printf_i+0x244>)
 800fac4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fac8:	6829      	ldr	r1, [r5, #0]
 800faca:	6823      	ldr	r3, [r4, #0]
 800facc:	f851 6b04 	ldr.w	r6, [r1], #4
 800fad0:	6029      	str	r1, [r5, #0]
 800fad2:	061d      	lsls	r5, r3, #24
 800fad4:	d514      	bpl.n	800fb00 <_printf_i+0x1ac>
 800fad6:	07df      	lsls	r7, r3, #31
 800fad8:	bf44      	itt	mi
 800fada:	f043 0320 	orrmi.w	r3, r3, #32
 800fade:	6023      	strmi	r3, [r4, #0]
 800fae0:	b91e      	cbnz	r6, 800faea <_printf_i+0x196>
 800fae2:	6823      	ldr	r3, [r4, #0]
 800fae4:	f023 0320 	bic.w	r3, r3, #32
 800fae8:	6023      	str	r3, [r4, #0]
 800faea:	2310      	movs	r3, #16
 800faec:	e7b0      	b.n	800fa50 <_printf_i+0xfc>
 800faee:	6823      	ldr	r3, [r4, #0]
 800faf0:	f043 0320 	orr.w	r3, r3, #32
 800faf4:	6023      	str	r3, [r4, #0]
 800faf6:	2378      	movs	r3, #120	; 0x78
 800faf8:	4828      	ldr	r0, [pc, #160]	; (800fb9c <_printf_i+0x248>)
 800fafa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fafe:	e7e3      	b.n	800fac8 <_printf_i+0x174>
 800fb00:	0659      	lsls	r1, r3, #25
 800fb02:	bf48      	it	mi
 800fb04:	b2b6      	uxthmi	r6, r6
 800fb06:	e7e6      	b.n	800fad6 <_printf_i+0x182>
 800fb08:	4615      	mov	r5, r2
 800fb0a:	e7bb      	b.n	800fa84 <_printf_i+0x130>
 800fb0c:	682b      	ldr	r3, [r5, #0]
 800fb0e:	6826      	ldr	r6, [r4, #0]
 800fb10:	6961      	ldr	r1, [r4, #20]
 800fb12:	1d18      	adds	r0, r3, #4
 800fb14:	6028      	str	r0, [r5, #0]
 800fb16:	0635      	lsls	r5, r6, #24
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	d501      	bpl.n	800fb20 <_printf_i+0x1cc>
 800fb1c:	6019      	str	r1, [r3, #0]
 800fb1e:	e002      	b.n	800fb26 <_printf_i+0x1d2>
 800fb20:	0670      	lsls	r0, r6, #25
 800fb22:	d5fb      	bpl.n	800fb1c <_printf_i+0x1c8>
 800fb24:	8019      	strh	r1, [r3, #0]
 800fb26:	2300      	movs	r3, #0
 800fb28:	6123      	str	r3, [r4, #16]
 800fb2a:	4615      	mov	r5, r2
 800fb2c:	e7ba      	b.n	800faa4 <_printf_i+0x150>
 800fb2e:	682b      	ldr	r3, [r5, #0]
 800fb30:	1d1a      	adds	r2, r3, #4
 800fb32:	602a      	str	r2, [r5, #0]
 800fb34:	681d      	ldr	r5, [r3, #0]
 800fb36:	6862      	ldr	r2, [r4, #4]
 800fb38:	2100      	movs	r1, #0
 800fb3a:	4628      	mov	r0, r5
 800fb3c:	f7f0 fbd8 	bl	80002f0 <memchr>
 800fb40:	b108      	cbz	r0, 800fb46 <_printf_i+0x1f2>
 800fb42:	1b40      	subs	r0, r0, r5
 800fb44:	6060      	str	r0, [r4, #4]
 800fb46:	6863      	ldr	r3, [r4, #4]
 800fb48:	6123      	str	r3, [r4, #16]
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb50:	e7a8      	b.n	800faa4 <_printf_i+0x150>
 800fb52:	6923      	ldr	r3, [r4, #16]
 800fb54:	462a      	mov	r2, r5
 800fb56:	4649      	mov	r1, r9
 800fb58:	4640      	mov	r0, r8
 800fb5a:	47d0      	blx	sl
 800fb5c:	3001      	adds	r0, #1
 800fb5e:	d0ab      	beq.n	800fab8 <_printf_i+0x164>
 800fb60:	6823      	ldr	r3, [r4, #0]
 800fb62:	079b      	lsls	r3, r3, #30
 800fb64:	d413      	bmi.n	800fb8e <_printf_i+0x23a>
 800fb66:	68e0      	ldr	r0, [r4, #12]
 800fb68:	9b03      	ldr	r3, [sp, #12]
 800fb6a:	4298      	cmp	r0, r3
 800fb6c:	bfb8      	it	lt
 800fb6e:	4618      	movlt	r0, r3
 800fb70:	e7a4      	b.n	800fabc <_printf_i+0x168>
 800fb72:	2301      	movs	r3, #1
 800fb74:	4632      	mov	r2, r6
 800fb76:	4649      	mov	r1, r9
 800fb78:	4640      	mov	r0, r8
 800fb7a:	47d0      	blx	sl
 800fb7c:	3001      	adds	r0, #1
 800fb7e:	d09b      	beq.n	800fab8 <_printf_i+0x164>
 800fb80:	3501      	adds	r5, #1
 800fb82:	68e3      	ldr	r3, [r4, #12]
 800fb84:	9903      	ldr	r1, [sp, #12]
 800fb86:	1a5b      	subs	r3, r3, r1
 800fb88:	42ab      	cmp	r3, r5
 800fb8a:	dcf2      	bgt.n	800fb72 <_printf_i+0x21e>
 800fb8c:	e7eb      	b.n	800fb66 <_printf_i+0x212>
 800fb8e:	2500      	movs	r5, #0
 800fb90:	f104 0619 	add.w	r6, r4, #25
 800fb94:	e7f5      	b.n	800fb82 <_printf_i+0x22e>
 800fb96:	bf00      	nop
 800fb98:	08010595 	.word	0x08010595
 800fb9c:	080105a6 	.word	0x080105a6

0800fba0 <_sbrk_r>:
 800fba0:	b538      	push	{r3, r4, r5, lr}
 800fba2:	4d06      	ldr	r5, [pc, #24]	; (800fbbc <_sbrk_r+0x1c>)
 800fba4:	2300      	movs	r3, #0
 800fba6:	4604      	mov	r4, r0
 800fba8:	4608      	mov	r0, r1
 800fbaa:	602b      	str	r3, [r5, #0]
 800fbac:	f7f4 f96a 	bl	8003e84 <_sbrk>
 800fbb0:	1c43      	adds	r3, r0, #1
 800fbb2:	d102      	bne.n	800fbba <_sbrk_r+0x1a>
 800fbb4:	682b      	ldr	r3, [r5, #0]
 800fbb6:	b103      	cbz	r3, 800fbba <_sbrk_r+0x1a>
 800fbb8:	6023      	str	r3, [r4, #0]
 800fbba:	bd38      	pop	{r3, r4, r5, pc}
 800fbbc:	2406090c 	.word	0x2406090c

0800fbc0 <__sread>:
 800fbc0:	b510      	push	{r4, lr}
 800fbc2:	460c      	mov	r4, r1
 800fbc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbc8:	f000 f960 	bl	800fe8c <_read_r>
 800fbcc:	2800      	cmp	r0, #0
 800fbce:	bfab      	itete	ge
 800fbd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fbd2:	89a3      	ldrhlt	r3, [r4, #12]
 800fbd4:	181b      	addge	r3, r3, r0
 800fbd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fbda:	bfac      	ite	ge
 800fbdc:	6563      	strge	r3, [r4, #84]	; 0x54
 800fbde:	81a3      	strhlt	r3, [r4, #12]
 800fbe0:	bd10      	pop	{r4, pc}

0800fbe2 <__swrite>:
 800fbe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbe6:	461f      	mov	r7, r3
 800fbe8:	898b      	ldrh	r3, [r1, #12]
 800fbea:	05db      	lsls	r3, r3, #23
 800fbec:	4605      	mov	r5, r0
 800fbee:	460c      	mov	r4, r1
 800fbf0:	4616      	mov	r6, r2
 800fbf2:	d505      	bpl.n	800fc00 <__swrite+0x1e>
 800fbf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbf8:	2302      	movs	r3, #2
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	f000 f928 	bl	800fe50 <_lseek_r>
 800fc00:	89a3      	ldrh	r3, [r4, #12]
 800fc02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fc0a:	81a3      	strh	r3, [r4, #12]
 800fc0c:	4632      	mov	r2, r6
 800fc0e:	463b      	mov	r3, r7
 800fc10:	4628      	mov	r0, r5
 800fc12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc16:	f000 b869 	b.w	800fcec <_write_r>

0800fc1a <__sseek>:
 800fc1a:	b510      	push	{r4, lr}
 800fc1c:	460c      	mov	r4, r1
 800fc1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc22:	f000 f915 	bl	800fe50 <_lseek_r>
 800fc26:	1c43      	adds	r3, r0, #1
 800fc28:	89a3      	ldrh	r3, [r4, #12]
 800fc2a:	bf15      	itete	ne
 800fc2c:	6560      	strne	r0, [r4, #84]	; 0x54
 800fc2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fc32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fc36:	81a3      	strheq	r3, [r4, #12]
 800fc38:	bf18      	it	ne
 800fc3a:	81a3      	strhne	r3, [r4, #12]
 800fc3c:	bd10      	pop	{r4, pc}

0800fc3e <__sclose>:
 800fc3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc42:	f000 b8d3 	b.w	800fdec <_close_r>
	...

0800fc48 <__swbuf_r>:
 800fc48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc4a:	460e      	mov	r6, r1
 800fc4c:	4614      	mov	r4, r2
 800fc4e:	4605      	mov	r5, r0
 800fc50:	b118      	cbz	r0, 800fc5a <__swbuf_r+0x12>
 800fc52:	6983      	ldr	r3, [r0, #24]
 800fc54:	b90b      	cbnz	r3, 800fc5a <__swbuf_r+0x12>
 800fc56:	f7ff fac7 	bl	800f1e8 <__sinit>
 800fc5a:	4b21      	ldr	r3, [pc, #132]	; (800fce0 <__swbuf_r+0x98>)
 800fc5c:	429c      	cmp	r4, r3
 800fc5e:	d12b      	bne.n	800fcb8 <__swbuf_r+0x70>
 800fc60:	686c      	ldr	r4, [r5, #4]
 800fc62:	69a3      	ldr	r3, [r4, #24]
 800fc64:	60a3      	str	r3, [r4, #8]
 800fc66:	89a3      	ldrh	r3, [r4, #12]
 800fc68:	071a      	lsls	r2, r3, #28
 800fc6a:	d52f      	bpl.n	800fccc <__swbuf_r+0x84>
 800fc6c:	6923      	ldr	r3, [r4, #16]
 800fc6e:	b36b      	cbz	r3, 800fccc <__swbuf_r+0x84>
 800fc70:	6923      	ldr	r3, [r4, #16]
 800fc72:	6820      	ldr	r0, [r4, #0]
 800fc74:	1ac0      	subs	r0, r0, r3
 800fc76:	6963      	ldr	r3, [r4, #20]
 800fc78:	b2f6      	uxtb	r6, r6
 800fc7a:	4283      	cmp	r3, r0
 800fc7c:	4637      	mov	r7, r6
 800fc7e:	dc04      	bgt.n	800fc8a <__swbuf_r+0x42>
 800fc80:	4621      	mov	r1, r4
 800fc82:	4628      	mov	r0, r5
 800fc84:	f7ff fa1c 	bl	800f0c0 <_fflush_r>
 800fc88:	bb30      	cbnz	r0, 800fcd8 <__swbuf_r+0x90>
 800fc8a:	68a3      	ldr	r3, [r4, #8]
 800fc8c:	3b01      	subs	r3, #1
 800fc8e:	60a3      	str	r3, [r4, #8]
 800fc90:	6823      	ldr	r3, [r4, #0]
 800fc92:	1c5a      	adds	r2, r3, #1
 800fc94:	6022      	str	r2, [r4, #0]
 800fc96:	701e      	strb	r6, [r3, #0]
 800fc98:	6963      	ldr	r3, [r4, #20]
 800fc9a:	3001      	adds	r0, #1
 800fc9c:	4283      	cmp	r3, r0
 800fc9e:	d004      	beq.n	800fcaa <__swbuf_r+0x62>
 800fca0:	89a3      	ldrh	r3, [r4, #12]
 800fca2:	07db      	lsls	r3, r3, #31
 800fca4:	d506      	bpl.n	800fcb4 <__swbuf_r+0x6c>
 800fca6:	2e0a      	cmp	r6, #10
 800fca8:	d104      	bne.n	800fcb4 <__swbuf_r+0x6c>
 800fcaa:	4621      	mov	r1, r4
 800fcac:	4628      	mov	r0, r5
 800fcae:	f7ff fa07 	bl	800f0c0 <_fflush_r>
 800fcb2:	b988      	cbnz	r0, 800fcd8 <__swbuf_r+0x90>
 800fcb4:	4638      	mov	r0, r7
 800fcb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fcb8:	4b0a      	ldr	r3, [pc, #40]	; (800fce4 <__swbuf_r+0x9c>)
 800fcba:	429c      	cmp	r4, r3
 800fcbc:	d101      	bne.n	800fcc2 <__swbuf_r+0x7a>
 800fcbe:	68ac      	ldr	r4, [r5, #8]
 800fcc0:	e7cf      	b.n	800fc62 <__swbuf_r+0x1a>
 800fcc2:	4b09      	ldr	r3, [pc, #36]	; (800fce8 <__swbuf_r+0xa0>)
 800fcc4:	429c      	cmp	r4, r3
 800fcc6:	bf08      	it	eq
 800fcc8:	68ec      	ldreq	r4, [r5, #12]
 800fcca:	e7ca      	b.n	800fc62 <__swbuf_r+0x1a>
 800fccc:	4621      	mov	r1, r4
 800fcce:	4628      	mov	r0, r5
 800fcd0:	f000 f81e 	bl	800fd10 <__swsetup_r>
 800fcd4:	2800      	cmp	r0, #0
 800fcd6:	d0cb      	beq.n	800fc70 <__swbuf_r+0x28>
 800fcd8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800fcdc:	e7ea      	b.n	800fcb4 <__swbuf_r+0x6c>
 800fcde:	bf00      	nop
 800fce0:	08010544 	.word	0x08010544
 800fce4:	08010564 	.word	0x08010564
 800fce8:	08010524 	.word	0x08010524

0800fcec <_write_r>:
 800fcec:	b538      	push	{r3, r4, r5, lr}
 800fcee:	4d07      	ldr	r5, [pc, #28]	; (800fd0c <_write_r+0x20>)
 800fcf0:	4604      	mov	r4, r0
 800fcf2:	4608      	mov	r0, r1
 800fcf4:	4611      	mov	r1, r2
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	602a      	str	r2, [r5, #0]
 800fcfa:	461a      	mov	r2, r3
 800fcfc:	f7f2 ff2e 	bl	8002b5c <_write>
 800fd00:	1c43      	adds	r3, r0, #1
 800fd02:	d102      	bne.n	800fd0a <_write_r+0x1e>
 800fd04:	682b      	ldr	r3, [r5, #0]
 800fd06:	b103      	cbz	r3, 800fd0a <_write_r+0x1e>
 800fd08:	6023      	str	r3, [r4, #0]
 800fd0a:	bd38      	pop	{r3, r4, r5, pc}
 800fd0c:	2406090c 	.word	0x2406090c

0800fd10 <__swsetup_r>:
 800fd10:	4b32      	ldr	r3, [pc, #200]	; (800fddc <__swsetup_r+0xcc>)
 800fd12:	b570      	push	{r4, r5, r6, lr}
 800fd14:	681d      	ldr	r5, [r3, #0]
 800fd16:	4606      	mov	r6, r0
 800fd18:	460c      	mov	r4, r1
 800fd1a:	b125      	cbz	r5, 800fd26 <__swsetup_r+0x16>
 800fd1c:	69ab      	ldr	r3, [r5, #24]
 800fd1e:	b913      	cbnz	r3, 800fd26 <__swsetup_r+0x16>
 800fd20:	4628      	mov	r0, r5
 800fd22:	f7ff fa61 	bl	800f1e8 <__sinit>
 800fd26:	4b2e      	ldr	r3, [pc, #184]	; (800fde0 <__swsetup_r+0xd0>)
 800fd28:	429c      	cmp	r4, r3
 800fd2a:	d10f      	bne.n	800fd4c <__swsetup_r+0x3c>
 800fd2c:	686c      	ldr	r4, [r5, #4]
 800fd2e:	89a3      	ldrh	r3, [r4, #12]
 800fd30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fd34:	0719      	lsls	r1, r3, #28
 800fd36:	d42c      	bmi.n	800fd92 <__swsetup_r+0x82>
 800fd38:	06dd      	lsls	r5, r3, #27
 800fd3a:	d411      	bmi.n	800fd60 <__swsetup_r+0x50>
 800fd3c:	2309      	movs	r3, #9
 800fd3e:	6033      	str	r3, [r6, #0]
 800fd40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fd44:	81a3      	strh	r3, [r4, #12]
 800fd46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fd4a:	e03e      	b.n	800fdca <__swsetup_r+0xba>
 800fd4c:	4b25      	ldr	r3, [pc, #148]	; (800fde4 <__swsetup_r+0xd4>)
 800fd4e:	429c      	cmp	r4, r3
 800fd50:	d101      	bne.n	800fd56 <__swsetup_r+0x46>
 800fd52:	68ac      	ldr	r4, [r5, #8]
 800fd54:	e7eb      	b.n	800fd2e <__swsetup_r+0x1e>
 800fd56:	4b24      	ldr	r3, [pc, #144]	; (800fde8 <__swsetup_r+0xd8>)
 800fd58:	429c      	cmp	r4, r3
 800fd5a:	bf08      	it	eq
 800fd5c:	68ec      	ldreq	r4, [r5, #12]
 800fd5e:	e7e6      	b.n	800fd2e <__swsetup_r+0x1e>
 800fd60:	0758      	lsls	r0, r3, #29
 800fd62:	d512      	bpl.n	800fd8a <__swsetup_r+0x7a>
 800fd64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fd66:	b141      	cbz	r1, 800fd7a <__swsetup_r+0x6a>
 800fd68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fd6c:	4299      	cmp	r1, r3
 800fd6e:	d002      	beq.n	800fd76 <__swsetup_r+0x66>
 800fd70:	4630      	mov	r0, r6
 800fd72:	f7ff fb47 	bl	800f404 <_free_r>
 800fd76:	2300      	movs	r3, #0
 800fd78:	6363      	str	r3, [r4, #52]	; 0x34
 800fd7a:	89a3      	ldrh	r3, [r4, #12]
 800fd7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fd80:	81a3      	strh	r3, [r4, #12]
 800fd82:	2300      	movs	r3, #0
 800fd84:	6063      	str	r3, [r4, #4]
 800fd86:	6923      	ldr	r3, [r4, #16]
 800fd88:	6023      	str	r3, [r4, #0]
 800fd8a:	89a3      	ldrh	r3, [r4, #12]
 800fd8c:	f043 0308 	orr.w	r3, r3, #8
 800fd90:	81a3      	strh	r3, [r4, #12]
 800fd92:	6923      	ldr	r3, [r4, #16]
 800fd94:	b94b      	cbnz	r3, 800fdaa <__swsetup_r+0x9a>
 800fd96:	89a3      	ldrh	r3, [r4, #12]
 800fd98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fd9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fda0:	d003      	beq.n	800fdaa <__swsetup_r+0x9a>
 800fda2:	4621      	mov	r1, r4
 800fda4:	4630      	mov	r0, r6
 800fda6:	f7ff fae5 	bl	800f374 <__smakebuf_r>
 800fdaa:	89a0      	ldrh	r0, [r4, #12]
 800fdac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fdb0:	f010 0301 	ands.w	r3, r0, #1
 800fdb4:	d00a      	beq.n	800fdcc <__swsetup_r+0xbc>
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	60a3      	str	r3, [r4, #8]
 800fdba:	6963      	ldr	r3, [r4, #20]
 800fdbc:	425b      	negs	r3, r3
 800fdbe:	61a3      	str	r3, [r4, #24]
 800fdc0:	6923      	ldr	r3, [r4, #16]
 800fdc2:	b943      	cbnz	r3, 800fdd6 <__swsetup_r+0xc6>
 800fdc4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fdc8:	d1ba      	bne.n	800fd40 <__swsetup_r+0x30>
 800fdca:	bd70      	pop	{r4, r5, r6, pc}
 800fdcc:	0781      	lsls	r1, r0, #30
 800fdce:	bf58      	it	pl
 800fdd0:	6963      	ldrpl	r3, [r4, #20]
 800fdd2:	60a3      	str	r3, [r4, #8]
 800fdd4:	e7f4      	b.n	800fdc0 <__swsetup_r+0xb0>
 800fdd6:	2000      	movs	r0, #0
 800fdd8:	e7f7      	b.n	800fdca <__swsetup_r+0xba>
 800fdda:	bf00      	nop
 800fddc:	24000054 	.word	0x24000054
 800fde0:	08010544 	.word	0x08010544
 800fde4:	08010564 	.word	0x08010564
 800fde8:	08010524 	.word	0x08010524

0800fdec <_close_r>:
 800fdec:	b538      	push	{r3, r4, r5, lr}
 800fdee:	4d06      	ldr	r5, [pc, #24]	; (800fe08 <_close_r+0x1c>)
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	4604      	mov	r4, r0
 800fdf4:	4608      	mov	r0, r1
 800fdf6:	602b      	str	r3, [r5, #0]
 800fdf8:	f7f2 fedc 	bl	8002bb4 <_close>
 800fdfc:	1c43      	adds	r3, r0, #1
 800fdfe:	d102      	bne.n	800fe06 <_close_r+0x1a>
 800fe00:	682b      	ldr	r3, [r5, #0]
 800fe02:	b103      	cbz	r3, 800fe06 <_close_r+0x1a>
 800fe04:	6023      	str	r3, [r4, #0]
 800fe06:	bd38      	pop	{r3, r4, r5, pc}
 800fe08:	2406090c 	.word	0x2406090c

0800fe0c <_fstat_r>:
 800fe0c:	b538      	push	{r3, r4, r5, lr}
 800fe0e:	4d07      	ldr	r5, [pc, #28]	; (800fe2c <_fstat_r+0x20>)
 800fe10:	2300      	movs	r3, #0
 800fe12:	4604      	mov	r4, r0
 800fe14:	4608      	mov	r0, r1
 800fe16:	4611      	mov	r1, r2
 800fe18:	602b      	str	r3, [r5, #0]
 800fe1a:	f7f2 ff0b 	bl	8002c34 <_fstat>
 800fe1e:	1c43      	adds	r3, r0, #1
 800fe20:	d102      	bne.n	800fe28 <_fstat_r+0x1c>
 800fe22:	682b      	ldr	r3, [r5, #0]
 800fe24:	b103      	cbz	r3, 800fe28 <_fstat_r+0x1c>
 800fe26:	6023      	str	r3, [r4, #0]
 800fe28:	bd38      	pop	{r3, r4, r5, pc}
 800fe2a:	bf00      	nop
 800fe2c:	2406090c 	.word	0x2406090c

0800fe30 <_isatty_r>:
 800fe30:	b538      	push	{r3, r4, r5, lr}
 800fe32:	4d06      	ldr	r5, [pc, #24]	; (800fe4c <_isatty_r+0x1c>)
 800fe34:	2300      	movs	r3, #0
 800fe36:	4604      	mov	r4, r0
 800fe38:	4608      	mov	r0, r1
 800fe3a:	602b      	str	r3, [r5, #0]
 800fe3c:	f7f2 fe78 	bl	8002b30 <_isatty>
 800fe40:	1c43      	adds	r3, r0, #1
 800fe42:	d102      	bne.n	800fe4a <_isatty_r+0x1a>
 800fe44:	682b      	ldr	r3, [r5, #0]
 800fe46:	b103      	cbz	r3, 800fe4a <_isatty_r+0x1a>
 800fe48:	6023      	str	r3, [r4, #0]
 800fe4a:	bd38      	pop	{r3, r4, r5, pc}
 800fe4c:	2406090c 	.word	0x2406090c

0800fe50 <_lseek_r>:
 800fe50:	b538      	push	{r3, r4, r5, lr}
 800fe52:	4d07      	ldr	r5, [pc, #28]	; (800fe70 <_lseek_r+0x20>)
 800fe54:	4604      	mov	r4, r0
 800fe56:	4608      	mov	r0, r1
 800fe58:	4611      	mov	r1, r2
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	602a      	str	r2, [r5, #0]
 800fe5e:	461a      	mov	r2, r3
 800fe60:	f7f4 f802 	bl	8003e68 <_lseek>
 800fe64:	1c43      	adds	r3, r0, #1
 800fe66:	d102      	bne.n	800fe6e <_lseek_r+0x1e>
 800fe68:	682b      	ldr	r3, [r5, #0]
 800fe6a:	b103      	cbz	r3, 800fe6e <_lseek_r+0x1e>
 800fe6c:	6023      	str	r3, [r4, #0]
 800fe6e:	bd38      	pop	{r3, r4, r5, pc}
 800fe70:	2406090c 	.word	0x2406090c

0800fe74 <__malloc_lock>:
 800fe74:	4801      	ldr	r0, [pc, #4]	; (800fe7c <__malloc_lock+0x8>)
 800fe76:	f7ff ba55 	b.w	800f324 <__retarget_lock_acquire_recursive>
 800fe7a:	bf00      	nop
 800fe7c:	24060900 	.word	0x24060900

0800fe80 <__malloc_unlock>:
 800fe80:	4801      	ldr	r0, [pc, #4]	; (800fe88 <__malloc_unlock+0x8>)
 800fe82:	f7ff ba50 	b.w	800f326 <__retarget_lock_release_recursive>
 800fe86:	bf00      	nop
 800fe88:	24060900 	.word	0x24060900

0800fe8c <_read_r>:
 800fe8c:	b538      	push	{r3, r4, r5, lr}
 800fe8e:	4d07      	ldr	r5, [pc, #28]	; (800feac <_read_r+0x20>)
 800fe90:	4604      	mov	r4, r0
 800fe92:	4608      	mov	r0, r1
 800fe94:	4611      	mov	r1, r2
 800fe96:	2200      	movs	r2, #0
 800fe98:	602a      	str	r2, [r5, #0]
 800fe9a:	461a      	mov	r2, r3
 800fe9c:	f7f2 fea2 	bl	8002be4 <_read>
 800fea0:	1c43      	adds	r3, r0, #1
 800fea2:	d102      	bne.n	800feaa <_read_r+0x1e>
 800fea4:	682b      	ldr	r3, [r5, #0]
 800fea6:	b103      	cbz	r3, 800feaa <_read_r+0x1e>
 800fea8:	6023      	str	r3, [r4, #0]
 800feaa:	bd38      	pop	{r3, r4, r5, pc}
 800feac:	2406090c 	.word	0x2406090c

0800feb0 <_init>:
 800feb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800feb2:	bf00      	nop
 800feb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800feb6:	bc08      	pop	{r3}
 800feb8:	469e      	mov	lr, r3
 800feba:	4770      	bx	lr

0800febc <_fini>:
 800febc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800febe:	bf00      	nop
 800fec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fec2:	bc08      	pop	{r3}
 800fec4:	469e      	mov	lr, r3
 800fec6:	4770      	bx	lr
