
camera_bsp_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc2c  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000066c  0800fed8  0800fed8  0001fed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010544  08010544  00020544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801054c  0801054c  0002054c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010550  08010550  00020550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b8  24000000  08010554  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000dc8  240000b8  0801060c  000300b8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000e80  0801060c  00030e80  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00027a0b  00000000  00000000  000300e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000500a  00000000  00000000  00057af1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a30  00000000  00000000  0005cb00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001818  00000000  00000000  0005e530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039146  00000000  00000000  0005fd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000287a3  00000000  00000000  00098e8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00152ab4  00000000  00000000  000c1631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002140e5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007138  00000000  00000000  00214138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	240000b8 	.word	0x240000b8
 80002c8:	00000000 	.word	0x00000000
 80002cc:	0800fec0 	.word	0x0800fec0

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	240000bc 	.word	0x240000bc
 80002e8:	0800fec0 	.word	0x0800fec0

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b974 	b.w	80005ec <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468e      	mov	lr, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d14d      	bne.n	80003c6 <__udivmoddi4+0xaa>
 800032a:	428a      	cmp	r2, r1
 800032c:	4694      	mov	ip, r2
 800032e:	d969      	bls.n	8000404 <__udivmoddi4+0xe8>
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	b152      	cbz	r2, 800034c <__udivmoddi4+0x30>
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	f1c2 0120 	rsb	r1, r2, #32
 800033e:	fa20 f101 	lsr.w	r1, r0, r1
 8000342:	fa0c fc02 	lsl.w	ip, ip, r2
 8000346:	ea41 0e03 	orr.w	lr, r1, r3
 800034a:	4094      	lsls	r4, r2
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	0c21      	lsrs	r1, r4, #16
 8000352:	fbbe f6f8 	udiv	r6, lr, r8
 8000356:	fa1f f78c 	uxth.w	r7, ip
 800035a:	fb08 e316 	mls	r3, r8, r6, lr
 800035e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000362:	fb06 f107 	mul.w	r1, r6, r7
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 811f 	bcs.w	80005b4 <__udivmoddi4+0x298>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 811c 	bls.w	80005b4 <__udivmoddi4+0x298>
 800037c:	3e02      	subs	r6, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 f707 	mul.w	r7, r0, r7
 8000394:	42a7      	cmp	r7, r4
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x92>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a0:	f080 810a 	bcs.w	80005b8 <__udivmoddi4+0x29c>
 80003a4:	42a7      	cmp	r7, r4
 80003a6:	f240 8107 	bls.w	80005b8 <__udivmoddi4+0x29c>
 80003aa:	4464      	add	r4, ip
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa4>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xc2>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80ef 	beq.w	80005ae <__udivmoddi4+0x292>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x160>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd4>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80f9 	bhi.w	80005e2 <__udivmoddi4+0x2c6>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	469e      	mov	lr, r3
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa4>
 80003fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa4>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xec>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 8092 	bne.w	8000536 <__udivmoddi4+0x21a>
 8000412:	eba1 010c 	sub.w	r1, r1, ip
 8000416:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	2601      	movs	r6, #1
 8000420:	0c20      	lsrs	r0, r4, #16
 8000422:	fbb1 f3f7 	udiv	r3, r1, r7
 8000426:	fb07 1113 	mls	r1, r7, r3, r1
 800042a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042e:	fb0e f003 	mul.w	r0, lr, r3
 8000432:	4288      	cmp	r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x12c>
 8000436:	eb1c 0101 	adds.w	r1, ip, r1
 800043a:	f103 38ff 	add.w	r8, r3, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x12a>
 8000440:	4288      	cmp	r0, r1
 8000442:	f200 80cb 	bhi.w	80005dc <__udivmoddi4+0x2c0>
 8000446:	4643      	mov	r3, r8
 8000448:	1a09      	subs	r1, r1, r0
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1110 	mls	r1, r7, r0, r1
 8000454:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000458:	fb0e fe00 	mul.w	lr, lr, r0
 800045c:	45a6      	cmp	lr, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x156>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f100 31ff 	add.w	r1, r0, #4294967295
 8000468:	d202      	bcs.n	8000470 <__udivmoddi4+0x154>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f200 80bb 	bhi.w	80005e6 <__udivmoddi4+0x2ca>
 8000470:	4608      	mov	r0, r1
 8000472:	eba4 040e 	sub.w	r4, r4, lr
 8000476:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047a:	e79c      	b.n	80003b6 <__udivmoddi4+0x9a>
 800047c:	f1c6 0720 	rsb	r7, r6, #32
 8000480:	40b3      	lsls	r3, r6
 8000482:	fa22 fc07 	lsr.w	ip, r2, r7
 8000486:	ea4c 0c03 	orr.w	ip, ip, r3
 800048a:	fa20 f407 	lsr.w	r4, r0, r7
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	431c      	orrs	r4, r3
 8000494:	40f9      	lsrs	r1, r7
 8000496:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049a:	fa00 f306 	lsl.w	r3, r0, r6
 800049e:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a2:	0c20      	lsrs	r0, r4, #16
 80004a4:	fa1f fe8c 	uxth.w	lr, ip
 80004a8:	fb09 1118 	mls	r1, r9, r8, r1
 80004ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b0:	fb08 f00e 	mul.w	r0, r8, lr
 80004b4:	4288      	cmp	r0, r1
 80004b6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ba:	d90b      	bls.n	80004d4 <__udivmoddi4+0x1b8>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c4:	f080 8088 	bcs.w	80005d8 <__udivmoddi4+0x2bc>
 80004c8:	4288      	cmp	r0, r1
 80004ca:	f240 8085 	bls.w	80005d8 <__udivmoddi4+0x2bc>
 80004ce:	f1a8 0802 	sub.w	r8, r8, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	1a09      	subs	r1, r1, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004dc:	fb09 1110 	mls	r1, r9, r0, r1
 80004e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e8:	458e      	cmp	lr, r1
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x1e2>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f4:	d26c      	bcs.n	80005d0 <__udivmoddi4+0x2b4>
 80004f6:	458e      	cmp	lr, r1
 80004f8:	d96a      	bls.n	80005d0 <__udivmoddi4+0x2b4>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4461      	add	r1, ip
 80004fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000502:	fba0 9402 	umull	r9, r4, r0, r2
 8000506:	eba1 010e 	sub.w	r1, r1, lr
 800050a:	42a1      	cmp	r1, r4
 800050c:	46c8      	mov	r8, r9
 800050e:	46a6      	mov	lr, r4
 8000510:	d356      	bcc.n	80005c0 <__udivmoddi4+0x2a4>
 8000512:	d053      	beq.n	80005bc <__udivmoddi4+0x2a0>
 8000514:	b15d      	cbz	r5, 800052e <__udivmoddi4+0x212>
 8000516:	ebb3 0208 	subs.w	r2, r3, r8
 800051a:	eb61 010e 	sbc.w	r1, r1, lr
 800051e:	fa01 f707 	lsl.w	r7, r1, r7
 8000522:	fa22 f306 	lsr.w	r3, r2, r6
 8000526:	40f1      	lsrs	r1, r6
 8000528:	431f      	orrs	r7, r3
 800052a:	e9c5 7100 	strd	r7, r1, [r5]
 800052e:	2600      	movs	r6, #0
 8000530:	4631      	mov	r1, r6
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	40d8      	lsrs	r0, r3
 800053c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000540:	fa21 f303 	lsr.w	r3, r1, r3
 8000544:	4091      	lsls	r1, r2
 8000546:	4301      	orrs	r1, r0
 8000548:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800054c:	fa1f fe8c 	uxth.w	lr, ip
 8000550:	fbb3 f0f7 	udiv	r0, r3, r7
 8000554:	fb07 3610 	mls	r6, r7, r0, r3
 8000558:	0c0b      	lsrs	r3, r1, #16
 800055a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055e:	fb00 f60e 	mul.w	r6, r0, lr
 8000562:	429e      	cmp	r6, r3
 8000564:	fa04 f402 	lsl.w	r4, r4, r2
 8000568:	d908      	bls.n	800057c <__udivmoddi4+0x260>
 800056a:	eb1c 0303 	adds.w	r3, ip, r3
 800056e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000572:	d22f      	bcs.n	80005d4 <__udivmoddi4+0x2b8>
 8000574:	429e      	cmp	r6, r3
 8000576:	d92d      	bls.n	80005d4 <__udivmoddi4+0x2b8>
 8000578:	3802      	subs	r0, #2
 800057a:	4463      	add	r3, ip
 800057c:	1b9b      	subs	r3, r3, r6
 800057e:	b289      	uxth	r1, r1
 8000580:	fbb3 f6f7 	udiv	r6, r3, r7
 8000584:	fb07 3316 	mls	r3, r7, r6, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb06 f30e 	mul.w	r3, r6, lr
 8000590:	428b      	cmp	r3, r1
 8000592:	d908      	bls.n	80005a6 <__udivmoddi4+0x28a>
 8000594:	eb1c 0101 	adds.w	r1, ip, r1
 8000598:	f106 38ff 	add.w	r8, r6, #4294967295
 800059c:	d216      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d914      	bls.n	80005cc <__udivmoddi4+0x2b0>
 80005a2:	3e02      	subs	r6, #2
 80005a4:	4461      	add	r1, ip
 80005a6:	1ac9      	subs	r1, r1, r3
 80005a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005ac:	e738      	b.n	8000420 <__udivmoddi4+0x104>
 80005ae:	462e      	mov	r6, r5
 80005b0:	4628      	mov	r0, r5
 80005b2:	e705      	b.n	80003c0 <__udivmoddi4+0xa4>
 80005b4:	4606      	mov	r6, r0
 80005b6:	e6e3      	b.n	8000380 <__udivmoddi4+0x64>
 80005b8:	4618      	mov	r0, r3
 80005ba:	e6f8      	b.n	80003ae <__udivmoddi4+0x92>
 80005bc:	454b      	cmp	r3, r9
 80005be:	d2a9      	bcs.n	8000514 <__udivmoddi4+0x1f8>
 80005c0:	ebb9 0802 	subs.w	r8, r9, r2
 80005c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c8:	3801      	subs	r0, #1
 80005ca:	e7a3      	b.n	8000514 <__udivmoddi4+0x1f8>
 80005cc:	4646      	mov	r6, r8
 80005ce:	e7ea      	b.n	80005a6 <__udivmoddi4+0x28a>
 80005d0:	4620      	mov	r0, r4
 80005d2:	e794      	b.n	80004fe <__udivmoddi4+0x1e2>
 80005d4:	4640      	mov	r0, r8
 80005d6:	e7d1      	b.n	800057c <__udivmoddi4+0x260>
 80005d8:	46d0      	mov	r8, sl
 80005da:	e77b      	b.n	80004d4 <__udivmoddi4+0x1b8>
 80005dc:	3b02      	subs	r3, #2
 80005de:	4461      	add	r1, ip
 80005e0:	e732      	b.n	8000448 <__udivmoddi4+0x12c>
 80005e2:	4630      	mov	r0, r6
 80005e4:	e709      	b.n	80003fa <__udivmoddi4+0xde>
 80005e6:	4464      	add	r4, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e742      	b.n	8000472 <__udivmoddi4+0x156>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */
//
  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80005f4:	4b16      	ldr	r3, [pc, #88]	; (8000650 <MX_DCMI_Init+0x60>)
 80005f6:	4a17      	ldr	r2, [pc, #92]	; (8000654 <MX_DCMI_Init+0x64>)
 80005f8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80005fa:	4b15      	ldr	r3, [pc, #84]	; (8000650 <MX_DCMI_Init+0x60>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000600:	4b13      	ldr	r3, [pc, #76]	; (8000650 <MX_DCMI_Init+0x60>)
 8000602:	2220      	movs	r2, #32
 8000604:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <MX_DCMI_Init+0x60>)
 8000608:	2280      	movs	r2, #128	; 0x80
 800060a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 800060c:	4b10      	ldr	r3, [pc, #64]	; (8000650 <MX_DCMI_Init+0x60>)
 800060e:	2240      	movs	r2, #64	; 0x40
 8000610:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000612:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <MX_DCMI_Init+0x60>)
 8000614:	2200      	movs	r2, #0
 8000616:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000618:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <MX_DCMI_Init+0x60>)
 800061a:	2200      	movs	r2, #0
 800061c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800061e:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_DCMI_Init+0x60>)
 8000620:	2200      	movs	r2, #0
 8000622:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000624:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <MX_DCMI_Init+0x60>)
 8000626:	2200      	movs	r2, #0
 8000628:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <MX_DCMI_Init+0x60>)
 800062c:	2200      	movs	r2, #0
 800062e:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000630:	4b07      	ldr	r3, [pc, #28]	; (8000650 <MX_DCMI_Init+0x60>)
 8000632:	2200      	movs	r2, #0
 8000634:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000636:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_DCMI_Init+0x60>)
 8000638:	2200      	movs	r2, #0
 800063a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800063c:	4804      	ldr	r0, [pc, #16]	; (8000650 <MX_DCMI_Init+0x60>)
 800063e:	f004 f835 	bl	80046ac <HAL_DCMI_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000648:	f001 f878 	bl	800173c <Error_Handler>
//  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
//  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
//  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
  /* USER CODE END DCMI_Init 2 */

}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	240000d4 	.word	0x240000d4
 8000654:	48020000 	.word	0x48020000

08000658 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08e      	sub	sp, #56	; 0x38
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a76      	ldr	r2, [pc, #472]	; (8000850 <HAL_DCMI_MspInit+0x1f8>)
 8000676:	4293      	cmp	r3, r2
 8000678:	f040 80e5 	bne.w	8000846 <HAL_DCMI_MspInit+0x1ee>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */
//
  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800067c:	4b75      	ldr	r3, [pc, #468]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 800067e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8000682:	4a74      	ldr	r2, [pc, #464]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 800068c:	4b71      	ldr	r3, [pc, #452]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 800068e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	623b      	str	r3, [r7, #32]
 8000698:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800069a:	4b6e      	ldr	r3, [pc, #440]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 800069c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006a0:	4a6c      	ldr	r2, [pc, #432]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 80006a2:	f043 0302 	orr.w	r3, r3, #2
 80006a6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006aa:	4b6a      	ldr	r3, [pc, #424]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 80006ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006b0:	f003 0302 	and.w	r3, r3, #2
 80006b4:	61fb      	str	r3, [r7, #28]
 80006b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80006b8:	4b66      	ldr	r3, [pc, #408]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 80006ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006be:	4a65      	ldr	r2, [pc, #404]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 80006c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006c4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006c8:	4b62      	ldr	r3, [pc, #392]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 80006ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006d2:	61bb      	str	r3, [r7, #24]
 80006d4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d6:	4b5f      	ldr	r3, [pc, #380]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 80006d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006dc:	4a5d      	ldr	r2, [pc, #372]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 80006de:	f043 0308 	orr.w	r3, r3, #8
 80006e2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006e6:	4b5b      	ldr	r3, [pc, #364]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 80006e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006ec:	f003 0308 	and.w	r3, r3, #8
 80006f0:	617b      	str	r3, [r7, #20]
 80006f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f4:	4b57      	ldr	r3, [pc, #348]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 80006f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006fa:	4a56      	ldr	r2, [pc, #344]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 80006fc:	f043 0304 	orr.w	r3, r3, #4
 8000700:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000704:	4b53      	ldr	r3, [pc, #332]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 8000706:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	4b50      	ldr	r3, [pc, #320]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 8000714:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000718:	4a4e      	ldr	r2, [pc, #312]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 800071a:	f043 0301 	orr.w	r3, r3, #1
 800071e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000722:	4b4c      	ldr	r3, [pc, #304]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 8000724:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000728:	f003 0301 	and.w	r3, r3, #1
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	68fb      	ldr	r3, [r7, #12]
    PC7     ------> DCMI_D1
    PC6     ------> DCMI_D0
    PA4     ------> DCMI_HSYNC
    PA6     ------> DCMI_PIXCLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_7;
 8000730:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000736:	2302      	movs	r3, #2
 8000738:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	2300      	movs	r3, #0
 8000740:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000742:	230d      	movs	r3, #13
 8000744:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800074a:	4619      	mov	r1, r3
 800074c:	4842      	ldr	r0, [pc, #264]	; (8000858 <HAL_DCMI_MspInit+0x200>)
 800074e:	f008 f9e7 	bl	8008b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000756:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000758:	2302      	movs	r3, #2
 800075a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000760:	2300      	movs	r3, #0
 8000762:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000764:	230d      	movs	r3, #13
 8000766:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800076c:	4619      	mov	r1, r3
 800076e:	483b      	ldr	r0, [pc, #236]	; (800085c <HAL_DCMI_MspInit+0x204>)
 8000770:	f008 f9d6 	bl	8008b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000774:	2308      	movs	r3, #8
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000778:	2302      	movs	r3, #2
 800077a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000784:	230d      	movs	r3, #13
 8000786:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078c:	4619      	mov	r1, r3
 800078e:	4834      	ldr	r0, [pc, #208]	; (8000860 <HAL_DCMI_MspInit+0x208>)
 8000790:	f008 f9c6 	bl	8008b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6;
 8000794:	f44f 632c 	mov.w	r3, #2752	; 0xac0
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079a:	2302      	movs	r3, #2
 800079c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007a6:	230d      	movs	r3, #13
 80007a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ae:	4619      	mov	r1, r3
 80007b0:	482c      	ldr	r0, [pc, #176]	; (8000864 <HAL_DCMI_MspInit+0x20c>)
 80007b2:	f008 f9b5 	bl	8008b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80007b6:	2350      	movs	r3, #80	; 0x50
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ba:	2302      	movs	r3, #2
 80007bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007c6:	230d      	movs	r3, #13
 80007c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ce:	4619      	mov	r1, r3
 80007d0:	4825      	ldr	r0, [pc, #148]	; (8000868 <HAL_DCMI_MspInit+0x210>)
 80007d2:	f008 f9a5 	bl	8008b20 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 80007d6:	4b25      	ldr	r3, [pc, #148]	; (800086c <HAL_DCMI_MspInit+0x214>)
 80007d8:	4a25      	ldr	r2, [pc, #148]	; (8000870 <HAL_DCMI_MspInit+0x218>)
 80007da:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI_PSSI;
 80007dc:	4b23      	ldr	r3, [pc, #140]	; (800086c <HAL_DCMI_MspInit+0x214>)
 80007de:	224b      	movs	r2, #75	; 0x4b
 80007e0:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007e2:	4b22      	ldr	r3, [pc, #136]	; (800086c <HAL_DCMI_MspInit+0x214>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80007e8:	4b20      	ldr	r3, [pc, #128]	; (800086c <HAL_DCMI_MspInit+0x214>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80007ee:	4b1f      	ldr	r3, [pc, #124]	; (800086c <HAL_DCMI_MspInit+0x214>)
 80007f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007f4:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007f6:	4b1d      	ldr	r3, [pc, #116]	; (800086c <HAL_DCMI_MspInit+0x214>)
 80007f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007fc:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007fe:	4b1b      	ldr	r3, [pc, #108]	; (800086c <HAL_DCMI_MspInit+0x214>)
 8000800:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000804:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8000806:	4b19      	ldr	r3, [pc, #100]	; (800086c <HAL_DCMI_MspInit+0x214>)
 8000808:	2200      	movs	r2, #0
 800080a:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 800080c:	4b17      	ldr	r3, [pc, #92]	; (800086c <HAL_DCMI_MspInit+0x214>)
 800080e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000812:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000814:	4b15      	ldr	r3, [pc, #84]	; (800086c <HAL_DCMI_MspInit+0x214>)
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 800081a:	4814      	ldr	r0, [pc, #80]	; (800086c <HAL_DCMI_MspInit+0x214>)
 800081c:	f004 fa14 	bl	8004c48 <HAL_DMA_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <HAL_DCMI_MspInit+0x1d2>
    {
      Error_Handler();
 8000826:	f000 ff89 	bl	800173c <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4a0f      	ldr	r2, [pc, #60]	; (800086c <HAL_DCMI_MspInit+0x214>)
 800082e:	649a      	str	r2, [r3, #72]	; 0x48
 8000830:	4a0e      	ldr	r2, [pc, #56]	; (800086c <HAL_DCMI_MspInit+0x214>)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_PSSI_IRQn, 0, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	2100      	movs	r1, #0
 800083a:	204e      	movs	r0, #78	; 0x4e
 800083c:	f003 ff01 	bl	8004642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_PSSI_IRQn);
 8000840:	204e      	movs	r0, #78	; 0x4e
 8000842:	f003 ff18 	bl	8004676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */
//
  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8000846:	bf00      	nop
 8000848:	3738      	adds	r7, #56	; 0x38
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	48020000 	.word	0x48020000
 8000854:	58024400 	.word	0x58024400
 8000858:	58020400 	.word	0x58020400
 800085c:	58021800 	.word	0x58021800
 8000860:	58020c00 	.word	0x58020c00
 8000864:	58020800 	.word	0x58020800
 8000868:	58020000 	.word	0x58020000
 800086c:	24000124 	.word	0x24000124
 8000870:	40020428 	.word	0x40020428

08000874 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800087a:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <MX_DMA_Init+0x3c>)
 800087c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000880:	4a0b      	ldr	r2, [pc, #44]	; (80008b0 <MX_DMA_Init+0x3c>)
 8000882:	f043 0302 	orr.w	r3, r3, #2
 8000886:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_DMA_Init+0x3c>)
 800088c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000890:	f003 0302 	and.w	r3, r3, #2
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000898:	2200      	movs	r2, #0
 800089a:	2100      	movs	r1, #0
 800089c:	2039      	movs	r0, #57	; 0x39
 800089e:	f003 fed0 	bl	8004642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80008a2:	2039      	movs	r0, #57	; 0x39
 80008a4:	f003 fee7 	bl	8004676 <HAL_NVIC_EnableIRQ>

}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	58024400 	.word	0x58024400

080008b4 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80008b8:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008ba:	4a1b      	ldr	r2, [pc, #108]	; (8000928 <MX_DMA2D_Init+0x74>)
 80008bc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M_PFC;
 80008be:	4b19      	ldr	r3, [pc, #100]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008c4:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 80008c6:	4b17      	ldr	r3, [pc, #92]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008cc:	4b15      	ldr	r3, [pc, #84]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008da:	2201      	movs	r2, #1
 80008dc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008fc:	4809      	ldr	r0, [pc, #36]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008fe:	f007 f883 	bl	8007a08 <HAL_DMA2D_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_DMA2D_Init+0x58>
  {
    Error_Handler();
 8000908:	f000 ff18 	bl	800173c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800090c:	2101      	movs	r1, #1
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_DMA2D_Init+0x70>)
 8000910:	f007 fb02 	bl	8007f18 <HAL_DMA2D_ConfigLayer>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_DMA2D_Init+0x6a>
  {
    Error_Handler();
 800091a:	f000 ff0f 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	2400019c 	.word	0x2400019c
 8000928:	52001000 	.word	0x52001000

0800092c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a0e      	ldr	r2, [pc, #56]	; (8000974 <HAL_DMA2D_MspInit+0x48>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d116      	bne.n	800096c <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <HAL_DMA2D_MspInit+0x4c>)
 8000940:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000944:	4a0c      	ldr	r2, [pc, #48]	; (8000978 <HAL_DMA2D_MspInit+0x4c>)
 8000946:	f043 0310 	orr.w	r3, r3, #16
 800094a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 800094e:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <HAL_DMA2D_MspInit+0x4c>)
 8000950:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000954:	f003 0310 	and.w	r3, r3, #16
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800095c:	2200      	movs	r2, #0
 800095e:	2100      	movs	r1, #0
 8000960:	205a      	movs	r0, #90	; 0x5a
 8000962:	f003 fe6e 	bl	8004642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000966:	205a      	movs	r0, #90	; 0x5a
 8000968:	f003 fe85 	bl	8004676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800096c:	bf00      	nop
 800096e:	3710      	adds	r7, #16
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	52001000 	.word	0x52001000
 8000978:	58024400 	.word	0x58024400

0800097c <DMA2D_Convert>:
  }
}

/* USER CODE BEGIN 1 */
void DMA2D_Convert(uint8_t* source, uint32_t* destination)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af02      	add	r7, sp, #8
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  status = HAL_DMA2D_Start(&hdma2d, (uint32_t)source,
 8000986:	6879      	ldr	r1, [r7, #4]
 8000988:	683a      	ldr	r2, [r7, #0]
 800098a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000994:	480c      	ldr	r0, [pc, #48]	; (80009c8 <DMA2D_Convert+0x4c>)
 8000996:	f007 f89b 	bl	8007ad0 <HAL_DMA2D_Start>
 800099a:	4603      	mov	r3, r0
 800099c:	73fb      	strb	r3, [r7, #15]
                        (uint32_t)destination, 480, 272);
  if (status != HAL_OK) {
 800099e:	7bfb      	ldrb	r3, [r7, #15]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <DMA2D_Convert+0x2c>
    Error_Handler();
 80009a4:	f000 feca 	bl	800173c <Error_Handler>
  }

  status = HAL_DMA2D_PollForTransfer(&hdma2d, 1000);
 80009a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009ac:	4806      	ldr	r0, [pc, #24]	; (80009c8 <DMA2D_Convert+0x4c>)
 80009ae:	f007 f8ba 	bl	8007b26 <HAL_DMA2D_PollForTransfer>
 80009b2:	4603      	mov	r3, r0
 80009b4:	73fb      	strb	r3, [r7, #15]
  if (status != HAL_OK) {
 80009b6:	7bfb      	ldrb	r3, [r7, #15]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <DMA2D_Convert+0x44>
    Error_Handler();
 80009bc:	f000 febe 	bl	800173c <Error_Handler>
  }
}
 80009c0:	bf00      	nop
 80009c2:	3710      	adds	r7, #16
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	2400019c 	.word	0x2400019c

080009cc <drawVLine>:
/* Includes ------------------------------------------------------------------*/
#include "gpio.h"

void drawVLine(uint32_t *buffer, int32_t x, int32_t y_start, int32_t y_end){
 80009cc:	b480      	push	{r7}
 80009ce:	b087      	sub	sp, #28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
 80009d8:	603b      	str	r3, [r7, #0]
	if(y_start<0){
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	da01      	bge.n	80009e4 <drawVLine+0x18>
		y_start=0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	607b      	str	r3, [r7, #4]
	}
	if(y_end>LTDC_HEIGHT){
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80009ea:	dd02      	ble.n	80009f2 <drawVLine+0x26>
		y_end=LTDC_HEIGHT;
 80009ec:	f44f 7388 	mov.w	r3, #272	; 0x110
 80009f0:	603b      	str	r3, [r7, #0]
	}
	for(uint32_t i = y_start; i<y_end; i++){
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	617b      	str	r3, [r7, #20]
 80009f6:	e011      	b.n	8000a1c <drawVLine+0x50>
			buffer[(x+i*LTDC_WIDTH)/2] = COLOR;
 80009f8:	697a      	ldr	r2, [r7, #20]
 80009fa:	4613      	mov	r3, r2
 80009fc:	011b      	lsls	r3, r3, #4
 80009fe:	1a9b      	subs	r3, r3, r2
 8000a00:	015b      	lsls	r3, r3, #5
 8000a02:	461a      	mov	r2, r3
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	4413      	add	r3, r2
 8000a08:	085b      	lsrs	r3, r3, #1
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	68fa      	ldr	r2, [r7, #12]
 8000a0e:	4413      	add	r3, r2
 8000a10:	f04f 220f 	mov.w	r2, #251662080	; 0xf000f00
 8000a14:	601a      	str	r2, [r3, #0]
	for(uint32_t i = y_start; i<y_end; i++){
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	697a      	ldr	r2, [r7, #20]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d3e9      	bcc.n	80009f8 <drawVLine+0x2c>
	}
}
 8000a24:	bf00      	nop
 8000a26:	bf00      	nop
 8000a28:	371c      	adds	r7, #28
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <drawHLine>:
void drawHLine(uint32_t *buffer, int32_t x_start, int32_t x_end, int32_t y){
 8000a32:	b480      	push	{r7}
 8000a34:	b087      	sub	sp, #28
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	60f8      	str	r0, [r7, #12]
 8000a3a:	60b9      	str	r1, [r7, #8]
 8000a3c:	607a      	str	r2, [r7, #4]
 8000a3e:	603b      	str	r3, [r7, #0]
	if(x_start<0){
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	da01      	bge.n	8000a4a <drawHLine+0x18>
		x_start=0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60bb      	str	r3, [r7, #8]
	}
	if(x_end>LTDC_WIDTH){
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000a50:	dd02      	ble.n	8000a58 <drawHLine+0x26>
		x_end=LTDC_WIDTH;
 8000a52:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000a56:	607b      	str	r3, [r7, #4]
	}
	x_end=x_end+x_end%2;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	bfb8      	it	lt
 8000a62:	425b      	neglt	r3, r3
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	4413      	add	r3, r2
 8000a68:	607b      	str	r3, [r7, #4]
	for(uint32_t i = x_start/2; i<x_end/2; i++){
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	da00      	bge.n	8000a72 <drawHLine+0x40>
 8000a70:	3301      	adds	r3, #1
 8000a72:	105b      	asrs	r3, r3, #1
 8000a74:	617b      	str	r3, [r7, #20]
 8000a76:	e01f      	b.n	8000ab8 <drawHLine+0x86>
		buffer[i+LTDC_WIDTH*y/2] = COLOR;
 8000a78:	683a      	ldr	r2, [r7, #0]
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	011b      	lsls	r3, r3, #4
 8000a7e:	1a9b      	subs	r3, r3, r2
 8000a80:	011b      	lsls	r3, r3, #4
 8000a82:	461a      	mov	r2, r3
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	4413      	add	r3, r2
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	68fa      	ldr	r2, [r7, #12]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	f04f 220f 	mov.w	r2, #251662080	; 0xf000f00
 8000a92:	601a      	str	r2, [r3, #0]
		buffer[i+(LTDC_WIDTH+LTDC_WIDTH*y)/2] = COLOR;
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	1c5a      	adds	r2, r3, #1
 8000a98:	4613      	mov	r3, r2
 8000a9a:	011b      	lsls	r3, r3, #4
 8000a9c:	1a9b      	subs	r3, r3, r2
 8000a9e:	011b      	lsls	r3, r3, #4
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	68fa      	ldr	r2, [r7, #12]
 8000aaa:	4413      	add	r3, r2
 8000aac:	f04f 220f 	mov.w	r2, #251662080	; 0xf000f00
 8000ab0:	601a      	str	r2, [r3, #0]
	for(uint32_t i = x_start/2; i<x_end/2; i++){
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	617b      	str	r3, [r7, #20]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	da00      	bge.n	8000ac0 <drawHLine+0x8e>
 8000abe:	3301      	adds	r3, #1
 8000ac0:	105b      	asrs	r3, r3, #1
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d3d6      	bcc.n	8000a78 <drawHLine+0x46>
	}
}
 8000aca:	bf00      	nop
 8000acc:	bf00      	nop
 8000ace:	371c      	adds	r7, #28
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <drawCrosshair>:
	drawVLine(buffer, x_end, y_start, y_end);
	drawHLine(buffer, x_start, x_end, y_start);
	drawHLine(buffer, x_start, x_end, y_end);
}

void drawCrosshair(uint32_t *buffer, int32_t x, int32_t y){
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
	drawHLine(buffer, x-CROSSHAIR_SIZE, x+CROSSHAIR_SIZE, y);
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	f1a3 010f 	sub.w	r1, r3, #15
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	f103 020f 	add.w	r2, r3, #15
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	68f8      	ldr	r0, [r7, #12]
 8000af4:	f7ff ff9d 	bl	8000a32 <drawHLine>
	drawVLine(buffer, x, y-CROSSHAIR_SIZE, y+CROSSHAIR_SIZE);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f1a3 020f 	sub.w	r2, r3, #15
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	330f      	adds	r3, #15
 8000b02:	68b9      	ldr	r1, [r7, #8]
 8000b04:	68f8      	ldr	r0, [r7, #12]
 8000b06:	f7ff ff61 	bl	80009cc <drawVLine>
}
 8000b0a:	bf00      	nop
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram2;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08c      	sub	sp, #48	; 0x30
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]
 8000b2a:	615a      	str	r2, [r3, #20]
 8000b2c:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 8000b2e:	4b3c      	ldr	r3, [pc, #240]	; (8000c20 <MX_FMC_Init+0x10c>)
 8000b30:	4a3c      	ldr	r2, [pc, #240]	; (8000c24 <MX_FMC_Init+0x110>)
 8000b32:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 8000b34:	4b3a      	ldr	r3, [pc, #232]	; (8000c20 <MX_FMC_Init+0x10c>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000b3a:	4b39      	ldr	r3, [pc, #228]	; (8000c20 <MX_FMC_Init+0x10c>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b40:	4b37      	ldr	r3, [pc, #220]	; (8000c20 <MX_FMC_Init+0x10c>)
 8000b42:	2204      	movs	r2, #4
 8000b44:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b46:	4b36      	ldr	r3, [pc, #216]	; (8000c20 <MX_FMC_Init+0x10c>)
 8000b48:	2210      	movs	r2, #16
 8000b4a:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000b4c:	4b34      	ldr	r3, [pc, #208]	; (8000c20 <MX_FMC_Init+0x10c>)
 8000b4e:	2240      	movs	r2, #64	; 0x40
 8000b50:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000b52:	4b33      	ldr	r3, [pc, #204]	; (8000c20 <MX_FMC_Init+0x10c>)
 8000b54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b58:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000b5a:	4b31      	ldr	r3, [pc, #196]	; (8000c20 <MX_FMC_Init+0x10c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000b60:	4b2f      	ldr	r3, [pc, #188]	; (8000c20 <MX_FMC_Init+0x10c>)
 8000b62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b66:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000b68:	4b2d      	ldr	r3, [pc, #180]	; (8000c20 <MX_FMC_Init+0x10c>)
 8000b6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b6e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 8000b70:	4b2b      	ldr	r3, [pc, #172]	; (8000c20 <MX_FMC_Init+0x10c>)
 8000b72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b76:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	617b      	str	r3, [r7, #20]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000b7c:	2307      	movs	r3, #7
 8000b7e:	61bb      	str	r3, [r7, #24]
  SdramTiming.SelfRefreshTime = 5;
 8000b80:	2305      	movs	r3, #5
 8000b82:	61fb      	str	r3, [r7, #28]
  SdramTiming.RowCycleDelay = 6;
 8000b84:	2306      	movs	r3, #6
 8000b86:	623b      	str	r3, [r7, #32]
  SdramTiming.WriteRecoveryTime = 3;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.RPDelay = 2;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.RCDDelay = 2;
 8000b90:	2302      	movs	r3, #2
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4821      	ldr	r0, [pc, #132]	; (8000c20 <MX_FMC_Init+0x10c>)
 8000b9c:	f00c fc14 	bl	800d3c8 <HAL_SDRAM_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_FMC_Init+0x96>
  {
    Error_Handler( );
 8000ba6:	f000 fdc9 	bl	800173c <Error_Handler>

  /* USER CODE BEGIN FMC_Init 2 */
  FMC_SDRAM_CommandTypeDef Command;
  /* Step 1 and Step 2 already done in HAL_SDRAM_Init() */
  /* Step 3: Configure a clock configuration enable command */
	Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE; /* Set MODE bits to "001" */
 8000baa:	2301      	movs	r3, #1
 8000bac:	607b      	str	r3, [r7, #4]
	Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2; /* configure the Target Bank bits */
 8000bae:	2308      	movs	r3, #8
 8000bb0:	60bb      	str	r3, [r7, #8]
	Command.AutoRefreshNumber      = 1;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	60fb      	str	r3, [r7, #12]
	Command.ModeRegisterDefinition = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
	HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4817      	ldr	r0, [pc, #92]	; (8000c20 <MX_FMC_Init+0x10c>)
 8000bc4:	f00c fc3c 	bl	800d440 <HAL_SDRAM_SendCommand>
	HAL_Delay(1); /* Step 4: Insert 100 us minimum delay - Min HAL Delay is 1ms */
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f003 fc3b 	bl	8004444 <HAL_Delay>
	/* Step 5: Configure a PALL (precharge all) command */
	Command.CommandMode            = FMC_SDRAM_CMD_PALL; /* Set MODE bits to "010" */
 8000bce:	2302      	movs	r3, #2
 8000bd0:	607b      	str	r3, [r7, #4]
	HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4811      	ldr	r0, [pc, #68]	; (8000c20 <MX_FMC_Init+0x10c>)
 8000bdc:	f00c fc30 	bl	800d440 <HAL_SDRAM_SendCommand>
	/* Step 6: Configure an Auto Refresh command */
	Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE; /* Set MODE bits to "011" */
 8000be0:	2303      	movs	r3, #3
 8000be2:	607b      	str	r3, [r7, #4]
	Command.AutoRefreshNumber      = 2;
 8000be4:	2302      	movs	r3, #2
 8000be6:	60fb      	str	r3, [r7, #12]
	HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000bee:	4619      	mov	r1, r3
 8000bf0:	480b      	ldr	r0, [pc, #44]	; (8000c20 <MX_FMC_Init+0x10c>)
 8000bf2:	f00c fc25 	bl	800d440 <HAL_SDRAM_SendCommand>
	/* Step 7: Program the external memory mode register */
	Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;/*set the MODE bits to "100" */
 8000bf6:	2304      	movs	r3, #4
 8000bf8:	607b      	str	r3, [r7, #4]
	Command.ModeRegisterDefinition =  (uint32_t)0 | 0<<3 | 2<<4 | 0<<7 | 1<<9;
 8000bfa:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000bfe:	613b      	str	r3, [r7, #16]
	HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000c06:	4619      	mov	r1, r3
 8000c08:	4805      	ldr	r0, [pc, #20]	; (8000c20 <MX_FMC_Init+0x10c>)
 8000c0a:	f00c fc19 	bl	800d440 <HAL_SDRAM_SendCommand>
	/* Step 8: Set the refresh rate counter - refer to section SDRAM refresh timer register in RM0455 */
	/* Set the device refresh rate
	* COUNT = [(SDRAM self refresh time / number of row) x  SDRAM CLK] – 20
					= [(64ms/4096) * 200MHz] - 20 ~= 3115 */
	HAL_SDRAM_ProgramRefreshRate(&hsdram2, 3115);
 8000c0e:	f640 412b 	movw	r1, #3115	; 0xc2b
 8000c12:	4803      	ldr	r0, [pc, #12]	; (8000c20 <MX_FMC_Init+0x10c>)
 8000c14:	f00c fc49 	bl	800d4aa <HAL_SDRAM_ProgramRefreshRate>
  /* USER CODE END FMC_Init 2 */
}
 8000c18:	bf00      	nop
 8000c1a:	3730      	adds	r7, #48	; 0x30
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	24000204 	.word	0x24000204
 8000c24:	52004140 	.word	0x52004140

08000c28 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b0b8      	sub	sp, #224	; 0xe0
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
 8000c3c:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000c3e:	4b58      	ldr	r3, [pc, #352]	; (8000da0 <HAL_FMC_MspInit+0x178>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f040 80a7 	bne.w	8000d96 <HAL_FMC_MspInit+0x16e>
    return;
  }
  FMC_Initialized = 1;
 8000c48:	4b55      	ldr	r3, [pc, #340]	; (8000da0 <HAL_FMC_MspInit+0x178>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c4e:	f107 0308 	add.w	r3, r7, #8
 8000c52:	22c0      	movs	r2, #192	; 0xc0
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f00e fce4 	bl	800f624 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000c5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.PLL2.PLL2M = 24;
 8000c68:	2318      	movs	r3, #24
 8000c6a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2N = 200;
 8000c6c:	23c8      	movs	r3, #200	; 0xc8
 8000c6e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000c70:	2302      	movs	r3, #2
 8000c72:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000c74:	2302      	movs	r3, #2
 8000c76:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2R = 1;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 8000c84:	2302      	movs	r3, #2
 8000c86:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c88:	f107 0308 	add.w	r3, r7, #8
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f00a fc9d 	bl	800b5cc <HAL_RCCEx_PeriphCLKConfig>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <HAL_FMC_MspInit+0x74>
    {
      Error_Handler();
 8000c98:	f000 fd50 	bl	800173c <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000c9c:	4b41      	ldr	r3, [pc, #260]	; (8000da4 <HAL_FMC_MspInit+0x17c>)
 8000c9e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000ca2:	4a40      	ldr	r2, [pc, #256]	; (8000da4 <HAL_FMC_MspInit+0x17c>)
 8000ca4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ca8:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8000cac:	4b3d      	ldr	r3, [pc, #244]	; (8000da4 <HAL_FMC_MspInit+0x17c>)
 8000cae:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000cb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
  PE8   ------> FMC_D5
  PE11   ------> FMC_D8
  PH7   ------> FMC_SDCKE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A15_Pin|A14_Pin
 8000cba:	f248 1333 	movw	r3, #33075	; 0x8133
 8000cbe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |A11_Pin|A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cd4:	230c      	movs	r3, #12
 8000cd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cda:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4831      	ldr	r0, [pc, #196]	; (8000da8 <HAL_FMC_MspInit+0x180>)
 8000ce2:	f007 ff1d 	bl	8008b20 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D3_Pin|D2_Pin|D0_Pin|D1_Pin
 8000ce6:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000cea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |D13_Pin|D15_Pin|D14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d00:	230c      	movs	r3, #12
 8000d02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d06:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4827      	ldr	r0, [pc, #156]	; (8000dac <HAL_FMC_MspInit+0x184>)
 8000d0e:	f007 ff07 	bl	8008b20 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL0_Pin|FMC_NBL1_Pin|D9_Pin|D4_Pin
 8000d12:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000d16:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |D10_Pin|D11_Pin|D7_Pin|D6_Pin
                          |D12_Pin|D5_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d26:	2303      	movs	r3, #3
 8000d28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d2c:	230c      	movs	r3, #12
 8000d2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d32:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d36:	4619      	mov	r1, r3
 8000d38:	481d      	ldr	r0, [pc, #116]	; (8000db0 <HAL_FMC_MspInit+0x188>)
 8000d3a:	f007 fef1 	bl	8008b20 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A1_Pin|A0_Pin|A2_Pin|A4_Pin
 8000d3e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000d42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |A3_Pin|A5_Pin|A7_Pin|SDNRAS_Pin
                          |A9_Pin|A8_Pin|A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d52:	2303      	movs	r3, #3
 8000d54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d58:	230c      	movs	r3, #12
 8000d5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d5e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d62:	4619      	mov	r1, r3
 8000d64:	4813      	ldr	r0, [pc, #76]	; (8000db4 <HAL_FMC_MspInit+0x18c>)
 8000d66:	f007 fedb 	bl	8008b20 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNE1_Pin|SDNWE_Pin|SDCKE1_Pin;
 8000d6a:	23e0      	movs	r3, #224	; 0xe0
 8000d6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d82:	230c      	movs	r3, #12
 8000d84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d88:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	480a      	ldr	r0, [pc, #40]	; (8000db8 <HAL_FMC_MspInit+0x190>)
 8000d90:	f007 fec6 	bl	8008b20 <HAL_GPIO_Init>
 8000d94:	e000      	b.n	8000d98 <HAL_FMC_MspInit+0x170>
    return;
 8000d96:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000d98:	37e0      	adds	r7, #224	; 0xe0
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	24000238 	.word	0x24000238
 8000da4:	58024400 	.word	0x58024400
 8000da8:	58021800 	.word	0x58021800
 8000dac:	58020c00 	.word	0x58020c00
 8000db0:	58021000 	.word	0x58021000
 8000db4:	58021400 	.word	0x58021400
 8000db8:	58021c00 	.word	0x58021c00

08000dbc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000dc4:	f7ff ff30 	bl	8000c28 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <MX_GPIO_Init>:
     PA0   ------> I2S6_WS
     PA3   ------> I2S6_MCK
     PB2   ------> OCTOSPIM_P1_CLK
*/
void MX_GPIO_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b090      	sub	sp, #64	; 0x40
 8000dd4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]
 8000de4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000de6:	4bc0      	ldr	r3, [pc, #768]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000de8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dec:	4abe      	ldr	r2, [pc, #760]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000df6:	4bbc      	ldr	r3, [pc, #752]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000df8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e00:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e04:	4bb8      	ldr	r3, [pc, #736]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000e06:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e0a:	4ab7      	ldr	r2, [pc, #732]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000e0c:	f043 0302 	orr.w	r3, r3, #2
 8000e10:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e14:	4bb4      	ldr	r3, [pc, #720]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000e16:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8000e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e22:	4bb1      	ldr	r3, [pc, #708]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000e24:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e28:	4aaf      	ldr	r2, [pc, #700]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000e2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e2e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e32:	4bad      	ldr	r3, [pc, #692]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000e34:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e3c:	623b      	str	r3, [r7, #32]
 8000e3e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000e40:	4ba9      	ldr	r3, [pc, #676]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000e42:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e46:	4aa8      	ldr	r2, [pc, #672]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000e48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e4c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e50:	4ba5      	ldr	r3, [pc, #660]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000e52:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e5a:	61fb      	str	r3, [r7, #28]
 8000e5c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e5e:	4ba2      	ldr	r3, [pc, #648]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000e60:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e64:	4aa0      	ldr	r2, [pc, #640]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000e66:	f043 0308 	orr.w	r3, r3, #8
 8000e6a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e6e:	4b9e      	ldr	r3, [pc, #632]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000e70:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e74:	f003 0308 	and.w	r3, r3, #8
 8000e78:	61bb      	str	r3, [r7, #24]
 8000e7a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7c:	4b9a      	ldr	r3, [pc, #616]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000e7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e82:	4a99      	ldr	r2, [pc, #612]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000e84:	f043 0304 	orr.w	r3, r3, #4
 8000e88:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e8c:	4b96      	ldr	r3, [pc, #600]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000e8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e92:	f003 0304 	and.w	r3, r3, #4
 8000e96:	617b      	str	r3, [r7, #20]
 8000e98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e9a:	4b93      	ldr	r3, [pc, #588]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000e9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ea0:	4a91      	ldr	r2, [pc, #580]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000ea2:	f043 0310 	orr.w	r3, r3, #16
 8000ea6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000eaa:	4b8f      	ldr	r3, [pc, #572]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000eac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000eb0:	f003 0310 	and.w	r3, r3, #16
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000eb8:	4b8b      	ldr	r3, [pc, #556]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000eba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ebe:	4a8a      	ldr	r2, [pc, #552]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000ec0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ec4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ec8:	4b87      	ldr	r3, [pc, #540]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000eca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ece:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed6:	4b84      	ldr	r3, [pc, #528]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000ed8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000edc:	4a82      	ldr	r2, [pc, #520]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ee6:	4b80      	ldr	r3, [pc, #512]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000ee8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ef4:	4b7c      	ldr	r3, [pc, #496]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000ef6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000efa:	4a7b      	ldr	r2, [pc, #492]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000efc:	f043 0320 	orr.w	r3, r3, #32
 8000f00:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f04:	4b78      	ldr	r3, [pc, #480]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000f06:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f0a:	f003 0320 	and.w	r3, r3, #32
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f12:	4b75      	ldr	r3, [pc, #468]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000f14:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f18:	4a73      	ldr	r2, [pc, #460]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f1e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f22:	4b71      	ldr	r3, [pc, #452]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000f24:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f2c:	603b      	str	r3, [r7, #0]
 8000f2e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	210e      	movs	r1, #14
 8000f34:	486d      	ldr	r0, [pc, #436]	; (80010ec <MX_GPIO_Init+0x31c>)
 8000f36:	f008 f8ad 	bl	8009094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USER_LED1_Pin|USER_LED2_Pin, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f640 0104 	movw	r1, #2052	; 0x804
 8000f40:	486b      	ldr	r0, [pc, #428]	; (80010f0 <MX_GPIO_Init+0x320>)
 8000f42:	f008 f8a7 	bl	8009094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f4c:	4869      	ldr	r0, [pc, #420]	; (80010f4 <MX_GPIO_Init+0x324>)
 8000f4e:	f008 f8a1 	bl	8009094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_NRST_GPIO_Port, AUDIO_NRST_Pin, GPIO_PIN_SET);
 8000f52:	2201      	movs	r2, #1
 8000f54:	2108      	movs	r1, #8
 8000f56:	4866      	ldr	r0, [pc, #408]	; (80010f0 <MX_GPIO_Init+0x320>)
 8000f58:	f008 f89c 	bl	8009094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_SET);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	2106      	movs	r1, #6
 8000f60:	4864      	ldr	r0, [pc, #400]	; (80010f4 <MX_GPIO_Init+0x324>)
 8000f62:	f008 f897 	bl	8009094 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = WIFI_GPIO_Pin|WIFI_DATRDY_Pin;
 8000f66:	2330      	movs	r3, #48	; 0x30
 8000f68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f6a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f78:	4619      	mov	r1, r3
 8000f7a:	485c      	ldr	r0, [pc, #368]	; (80010ec <MX_GPIO_Init+0x31c>)
 8000f7c:	f007 fdd0 	bl	8008b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = I2S6_SDO_Pin|I2S6_SDI_Pin|I2S6_CK_Pin;
 8000f80:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8000f92:	2305      	movs	r3, #5
 8000f94:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4854      	ldr	r0, [pc, #336]	; (80010f0 <MX_GPIO_Init+0x320>)
 8000f9e:	f007 fdbf 	bl	8008b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 8000fa2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000fb4:	2309      	movs	r3, #9
 8000fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	484c      	ldr	r0, [pc, #304]	; (80010f0 <MX_GPIO_Init+0x320>)
 8000fc0:	f007 fdae 	bl	8008b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO7_Pin;
 8000fc4:	2380      	movs	r3, #128	; 0x80
 8000fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000fd4:	230a      	movs	r3, #10
 8000fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO7_GPIO_Port, &GPIO_InitStruct);
 8000fd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4846      	ldr	r0, [pc, #280]	; (80010f8 <MX_GPIO_Init+0x328>)
 8000fe0:	f007 fd9e 	bl	8008b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin;
 8000fe4:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000ff6:	230c      	movs	r3, #12
 8000ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ffa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ffe:	4619      	mov	r1, r3
 8001000:	483e      	ldr	r0, [pc, #248]	; (80010fc <MX_GPIO_Init+0x32c>)
 8001002:	f007 fd8d 	bl	8008b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin;
 8001006:	230e      	movs	r3, #14
 8001008:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100a:	2301      	movs	r3, #1
 800100c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001016:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800101a:	4619      	mov	r1, r3
 800101c:	4833      	ldr	r0, [pc, #204]	; (80010ec <MX_GPIO_Init+0x31c>)
 800101e:	f007 fd7f 	bl	8008b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = USER_LED1_Pin|AUDIO_NRST_Pin|USER_LED2_Pin;
 8001022:	f640 030c 	movw	r3, #2060	; 0x80c
 8001026:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001028:	2301      	movs	r3, #1
 800102a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001030:	2300      	movs	r3, #0
 8001032:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001034:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001038:	4619      	mov	r1, r3
 800103a:	482d      	ldr	r0, [pc, #180]	; (80010f0 <MX_GPIO_Init+0x320>)
 800103c:	f007 fd70 	bl	8008b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8001040:	2304      	movs	r3, #4
 8001042:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104c:	2303      	movs	r3, #3
 800104e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001050:	230c      	movs	r3, #12
 8001052:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001054:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001058:	4619      	mov	r1, r3
 800105a:	4827      	ldr	r0, [pc, #156]	; (80010f8 <MX_GPIO_Init+0x328>)
 800105c:	f007 fd60 	bl	8008b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001060:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001064:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001066:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800106a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800106c:	2301      	movs	r3, #1
 800106e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001070:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001074:	4619      	mov	r1, r3
 8001076:	481d      	ldr	r0, [pc, #116]	; (80010ec <MX_GPIO_Init+0x31c>)
 8001078:	f007 fd52 	bl	8008b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_SCK_Pin;
 800107c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001080:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001082:	2302      	movs	r3, #2
 8001084:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108a:	2300      	movs	r3, #0
 800108c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800108e:	2305      	movs	r3, #5
 8001090:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001092:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001096:	4619      	mov	r1, r3
 8001098:	4816      	ldr	r0, [pc, #88]	; (80010f4 <MX_GPIO_Init+0x324>)
 800109a:	f007 fd41 	bl	8008b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin;
 800109e:	f640 0306 	movw	r3, #2054	; 0x806
 80010a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a4:	2301      	movs	r3, #1
 80010a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ac:	2300      	movs	r3, #0
 80010ae:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010b4:	4619      	mov	r1, r3
 80010b6:	480f      	ldr	r0, [pc, #60]	; (80010f4 <MX_GPIO_Init+0x324>)
 80010b8:	f007 fd32 	bl	8008b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 80010bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010c2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 80010cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010d0:	4619      	mov	r1, r3
 80010d2:	480a      	ldr	r0, [pc, #40]	; (80010fc <MX_GPIO_Init+0x32c>)
 80010d4:	f007 fd24 	bl	8008b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCO_Pin;
 80010d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	2302      	movs	r3, #2
 80010e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e00c      	b.n	8001100 <MX_GPIO_Init+0x330>
 80010e6:	bf00      	nop
 80010e8:	58024400 	.word	0x58024400
 80010ec:	58022000 	.word	0x58022000
 80010f0:	58021800 	.word	0x58021800
 80010f4:	58020000 	.word	0x58020000
 80010f8:	58020c00 	.word	0x58020c00
 80010fc:	58020800 	.word	0x58020800
 8001100:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2300      	movs	r3, #0
 8001104:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001106:	2300      	movs	r3, #0
 8001108:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 800110a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800110e:	4619      	mov	r1, r3
 8001110:	4842      	ldr	r0, [pc, #264]	; (800121c <MX_GPIO_Init+0x44c>)
 8001112:	f007 fd05 	bl	8008b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 8001116:	2340      	movs	r3, #64	; 0x40
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001122:	2303      	movs	r3, #3
 8001124:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001126:	230a      	movs	r3, #10
 8001128:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 800112a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800112e:	4619      	mov	r1, r3
 8001130:	483b      	ldr	r0, [pc, #236]	; (8001220 <MX_GPIO_Init+0x450>)
 8001132:	f007 fcf5 	bl	8008b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8001136:	230c      	movs	r3, #12
 8001138:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	2302      	movs	r3, #2
 800113c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2300      	movs	r3, #0
 8001144:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001146:	2305      	movs	r3, #5
 8001148:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800114e:	4619      	mov	r1, r3
 8001150:	4834      	ldr	r0, [pc, #208]	; (8001224 <MX_GPIO_Init+0x454>)
 8001152:	f007 fce5 	bl	8008b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 8001156:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800115a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800115c:	2312      	movs	r3, #18
 800115e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001160:	2301      	movs	r3, #1
 8001162:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001168:	2304      	movs	r3, #4
 800116a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800116c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001170:	4619      	mov	r1, r3
 8001172:	482d      	ldr	r0, [pc, #180]	; (8001228 <MX_GPIO_Init+0x458>)
 8001174:	f007 fcd4 	bl	8008b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OCSPI1_IO4_Pin|OCSPI1_DQS_Pin;
 8001178:	2322      	movs	r3, #34	; 0x22
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117c:	2302      	movs	r3, #2
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001184:	2303      	movs	r3, #3
 8001186:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001188:	230a      	movs	r3, #10
 800118a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800118c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001190:	4619      	mov	r1, r3
 8001192:	4824      	ldr	r0, [pc, #144]	; (8001224 <MX_GPIO_Init+0x454>)
 8001194:	f007 fcc4 	bl	8008b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001198:	2304      	movs	r3, #4
 800119a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800119c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80011a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011aa:	4619      	mov	r1, r3
 80011ac:	481f      	ldr	r0, [pc, #124]	; (800122c <MX_GPIO_Init+0x45c>)
 80011ae:	f007 fcb7 	bl	8008b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO5_Pin;
 80011b2:	2308      	movs	r3, #8
 80011b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	2302      	movs	r3, #2
 80011b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011be:	2303      	movs	r3, #3
 80011c0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80011c2:	2309      	movs	r3, #9
 80011c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO5_GPIO_Port, &GPIO_InitStruct);
 80011c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011ca:	4619      	mov	r1, r3
 80011cc:	4817      	ldr	r0, [pc, #92]	; (800122c <MX_GPIO_Init+0x45c>)
 80011ce:	f007 fca7 	bl	8008b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = I2S6_WS_Pin|I2S6_MCK_Pin;
 80011d2:	2309      	movs	r3, #9
 80011d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d6:	2302      	movs	r3, #2
 80011d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	2300      	movs	r3, #0
 80011e0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 80011e2:	2305      	movs	r3, #5
 80011e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011ea:	4619      	mov	r1, r3
 80011ec:	480b      	ldr	r0, [pc, #44]	; (800121c <MX_GPIO_Init+0x44c>)
 80011ee:	f007 fc97 	bl	8008b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 80011f2:	2304      	movs	r3, #4
 80011f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fe:	2303      	movs	r3, #3
 8001200:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001202:	2309      	movs	r3, #9
 8001204:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 8001206:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800120a:	4619      	mov	r1, r3
 800120c:	4808      	ldr	r0, [pc, #32]	; (8001230 <MX_GPIO_Init+0x460>)
 800120e:	f007 fc87 	bl	8008b20 <HAL_GPIO_Init>

}
 8001212:	bf00      	nop
 8001214:	3740      	adds	r7, #64	; 0x40
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	58020000 	.word	0x58020000
 8001220:	58021800 	.word	0x58021800
 8001224:	58020800 	.word	0x58020800
 8001228:	58020c00 	.word	0x58020c00
 800122c:	58021c00 	.word	0x58021c00
 8001230:	58020400 	.word	0x58020400

08001234 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08e      	sub	sp, #56	; 0x38
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	2234      	movs	r2, #52	; 0x34
 800123e:	2100      	movs	r1, #0
 8001240:	4618      	mov	r0, r3
 8001242:	f00e f9ef 	bl	800f624 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001246:	4b38      	ldr	r3, [pc, #224]	; (8001328 <MX_LTDC_Init+0xf4>)
 8001248:	4a38      	ldr	r2, [pc, #224]	; (800132c <MX_LTDC_Init+0xf8>)
 800124a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800124c:	4b36      	ldr	r3, [pc, #216]	; (8001328 <MX_LTDC_Init+0xf4>)
 800124e:	2200      	movs	r2, #0
 8001250:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001252:	4b35      	ldr	r3, [pc, #212]	; (8001328 <MX_LTDC_Init+0xf4>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AH;
 8001258:	4b33      	ldr	r3, [pc, #204]	; (8001328 <MX_LTDC_Init+0xf4>)
 800125a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800125e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001260:	4b31      	ldr	r3, [pc, #196]	; (8001328 <MX_LTDC_Init+0xf4>)
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8001266:	4b30      	ldr	r3, [pc, #192]	; (8001328 <MX_LTDC_Init+0xf4>)
 8001268:	2207      	movs	r2, #7
 800126a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800126c:	4b2e      	ldr	r3, [pc, #184]	; (8001328 <MX_LTDC_Init+0xf4>)
 800126e:	2203      	movs	r2, #3
 8001270:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8001272:	4b2d      	ldr	r3, [pc, #180]	; (8001328 <MX_LTDC_Init+0xf4>)
 8001274:	220e      	movs	r2, #14
 8001276:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001278:	4b2b      	ldr	r3, [pc, #172]	; (8001328 <MX_LTDC_Init+0xf4>)
 800127a:	2205      	movs	r2, #5
 800127c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800127e:	4b2a      	ldr	r3, [pc, #168]	; (8001328 <MX_LTDC_Init+0xf4>)
 8001280:	f240 228e 	movw	r2, #654	; 0x28e
 8001284:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8001286:	4b28      	ldr	r3, [pc, #160]	; (8001328 <MX_LTDC_Init+0xf4>)
 8001288:	f240 12e5 	movw	r2, #485	; 0x1e5
 800128c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 800128e:	4b26      	ldr	r3, [pc, #152]	; (8001328 <MX_LTDC_Init+0xf4>)
 8001290:	f44f 7225 	mov.w	r2, #660	; 0x294
 8001294:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8001296:	4b24      	ldr	r3, [pc, #144]	; (8001328 <MX_LTDC_Init+0xf4>)
 8001298:	f240 12e7 	movw	r2, #487	; 0x1e7
 800129c:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800129e:	4b22      	ldr	r3, [pc, #136]	; (8001328 <MX_LTDC_Init+0xf4>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80012a6:	4b20      	ldr	r3, [pc, #128]	; (8001328 <MX_LTDC_Init+0xf4>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80012ae:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <MX_LTDC_Init+0xf4>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80012b6:	481c      	ldr	r0, [pc, #112]	; (8001328 <MX_LTDC_Init+0xf4>)
 80012b8:	f008 fd8c 	bl	8009dd4 <HAL_LTDC_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_LTDC_Init+0x92>
  {
    Error_Handler();
 80012c2:	f000 fa3b 	bl	800173c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80012d6:	2302      	movs	r3, #2
 80012d8:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80012e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012e6:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80012e8:	2305      	movs	r3, #5
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	2200      	movs	r2, #0
 800130e:	4619      	mov	r1, r3
 8001310:	4805      	ldr	r0, [pc, #20]	; (8001328 <MX_LTDC_Init+0xf4>)
 8001312:	f008 fef1 	bl	800a0f8 <HAL_LTDC_ConfigLayer>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 800131c:	f000 fa0e 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001320:	bf00      	nop
 8001322:	3738      	adds	r7, #56	; 0x38
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	2400023c 	.word	0x2400023c
 800132c:	50001000 	.word	0x50001000

08001330 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b0bc      	sub	sp, #240	; 0xf0
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001348:	f107 0318 	add.w	r3, r7, #24
 800134c:	22c0      	movs	r2, #192	; 0xc0
 800134e:	2100      	movs	r1, #0
 8001350:	4618      	mov	r0, r3
 8001352:	f00e f967 	bl	800f624 <memset>
  if(ltdcHandle->Instance==LTDC)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a5b      	ldr	r2, [pc, #364]	; (80014c8 <HAL_LTDC_MspInit+0x198>)
 800135c:	4293      	cmp	r3, r2
 800135e:	f040 80ae 	bne.w	80014be <HAL_LTDC_MspInit+0x18e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001362:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001366:	f04f 0300 	mov.w	r3, #0
 800136a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 800136e:	2318      	movs	r3, #24
 8001370:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8001372:	23c0      	movs	r3, #192	; 0xc0
 8001374:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 17;
 8001376:	2311      	movs	r3, #17
 8001378:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800137a:	2302      	movs	r3, #2
 800137c:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 16;
 800137e:	2310      	movs	r3, #16
 8001380:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8001382:	2300      	movs	r3, #0
 8001384:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001386:	2300      	movs	r3, #0
 8001388:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 5462;
 800138a:	f241 5356 	movw	r3, #5462	; 0x1556
 800138e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001390:	f107 0318 	add.w	r3, r7, #24
 8001394:	4618      	mov	r0, r3
 8001396:	f00a f919 	bl	800b5cc <HAL_RCCEx_PeriphCLKConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 80013a0:	f000 f9cc 	bl	800173c <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80013a4:	4b49      	ldr	r3, [pc, #292]	; (80014cc <HAL_LTDC_MspInit+0x19c>)
 80013a6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80013aa:	4a48      	ldr	r2, [pc, #288]	; (80014cc <HAL_LTDC_MspInit+0x19c>)
 80013ac:	f043 0308 	orr.w	r3, r3, #8
 80013b0:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 80013b4:	4b45      	ldr	r3, [pc, #276]	; (80014cc <HAL_LTDC_MspInit+0x19c>)
 80013b6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80013ba:	f003 0308 	and.w	r3, r3, #8
 80013be:	617b      	str	r3, [r7, #20]
 80013c0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 80013c2:	4b42      	ldr	r3, [pc, #264]	; (80014cc <HAL_LTDC_MspInit+0x19c>)
 80013c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013c8:	4a40      	ldr	r2, [pc, #256]	; (80014cc <HAL_LTDC_MspInit+0x19c>)
 80013ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ce:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013d2:	4b3e      	ldr	r3, [pc, #248]	; (80014cc <HAL_LTDC_MspInit+0x19c>)
 80013d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80013e0:	4b3a      	ldr	r3, [pc, #232]	; (80014cc <HAL_LTDC_MspInit+0x19c>)
 80013e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013e6:	4a39      	ldr	r2, [pc, #228]	; (80014cc <HAL_LTDC_MspInit+0x19c>)
 80013e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ec:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013f0:	4b36      	ldr	r3, [pc, #216]	; (80014cc <HAL_LTDC_MspInit+0x19c>)
 80013f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80013fe:	4b33      	ldr	r3, [pc, #204]	; (80014cc <HAL_LTDC_MspInit+0x19c>)
 8001400:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001404:	4a31      	ldr	r2, [pc, #196]	; (80014cc <HAL_LTDC_MspInit+0x19c>)
 8001406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800140a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800140e:	4b2f      	ldr	r3, [pc, #188]	; (80014cc <HAL_LTDC_MspInit+0x19c>)
 8001410:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	68bb      	ldr	r3, [r7, #8]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_B4_Pin|LCD_B5_Pin
 800141c:	23ff      	movs	r3, #255	; 0xff
 800141e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_DE_Pin|LCD_G7_Pin|LCD_G6_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142e:	2303      	movs	r3, #3
 8001430:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001434:	230e      	movs	r3, #14
 8001436:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800143a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800143e:	4619      	mov	r1, r3
 8001440:	4823      	ldr	r0, [pc, #140]	; (80014d0 <HAL_LTDC_MspInit+0x1a0>)
 8001442:	f007 fb6d 	bl	8008b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B3_Pin|LCD_B2_Pin|LCD_B1_Pin|LCD_B0_Pin
 8001446:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800144a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_G4_Pin|LCD_G3_Pin|LCD_G2_Pin|LCD_G1_Pin
                          |LCD_R7_Pin|LCD_G0_Pin|LCD_R1_Pin|LCD_R6_Pin
                          |LCD_R2_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	2302      	movs	r3, #2
 8001450:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145a:	2303      	movs	r3, #3
 800145c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001460:	230e      	movs	r3, #14
 8001462:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001466:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800146a:	4619      	mov	r1, r3
 800146c:	4819      	ldr	r0, [pc, #100]	; (80014d4 <HAL_LTDC_MspInit+0x1a4>)
 800146e:	f007 fb57 	bl	8008b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_CLK_Pin|LCD_VSYNC_Pin|LCD_R0_Pin;
 8001472:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001476:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147a:	2302      	movs	r3, #2
 800147c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001486:	2303      	movs	r3, #3
 8001488:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800148c:	230e      	movs	r3, #14
 800148e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001492:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001496:	4619      	mov	r1, r3
 8001498:	480f      	ldr	r0, [pc, #60]	; (80014d8 <HAL_LTDC_MspInit+0x1a8>)
 800149a:	f007 fb41 	bl	8008b20 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2100      	movs	r1, #0
 80014a2:	2058      	movs	r0, #88	; 0x58
 80014a4:	f003 f8cd 	bl	8004642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80014a8:	2058      	movs	r0, #88	; 0x58
 80014aa:	f003 f8e4 	bl	8004676 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2100      	movs	r1, #0
 80014b2:	2059      	movs	r0, #89	; 0x59
 80014b4:	f003 f8c5 	bl	8004642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 80014b8:	2059      	movs	r0, #89	; 0x59
 80014ba:	f003 f8dc 	bl	8004676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80014be:	bf00      	nop
 80014c0:	37f0      	adds	r7, #240	; 0xf0
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	50001000 	.word	0x50001000
 80014cc:	58024400 	.word	0x58024400
 80014d0:	58022800 	.word	0x58022800
 80014d4:	58022400 	.word	0x58022400
 80014d8:	58022000 	.word	0x58022000

080014dc <LTDC_Init_from_buffer>:
  /* USER CODE END LTDC_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void LTDC_Init_from_buffer(uint32_t* buffer){
 80014dc:	b580      	push	{r7, lr}
 80014de:	b090      	sub	sp, #64	; 0x40
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	2234      	movs	r2, #52	; 0x34
 80014ea:	2100      	movs	r1, #0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f00e f899 	bl	800f624 <memset>
	pLayerCfg.WindowX0 = 28;
 80014f2:	231c      	movs	r3, #28
 80014f4:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = 508;
 80014f6:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 80014fa:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 6;
 80014fc:	2306      	movs	r3, #6
 80014fe:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = 278;
 8001500:	f44f 738b 	mov.w	r3, #278	; 0x116
 8001504:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001506:	2302      	movs	r3, #2
 8001508:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 800150a:	23ff      	movs	r3, #255	; 0xff
 800150c:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001518:	2305      	movs	r3, #5
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.FBStartAdress = (uint32_t)buffer;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.ImageWidth = 480;
 8001520:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001524:	637b      	str	r3, [r7, #52]	; 0x34
	pLayerCfg.ImageHeight = 272;
 8001526:	f44f 7388 	mov.w	r3, #272	; 0x110
 800152a:	63bb      	str	r3, [r7, #56]	; 0x38
	pLayerCfg.Backcolor.Blue = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800153e:	f107 030c 	add.w	r3, r7, #12
 8001542:	2200      	movs	r2, #0
 8001544:	4619      	mov	r1, r3
 8001546:	4806      	ldr	r0, [pc, #24]	; (8001560 <LTDC_Init_from_buffer+0x84>)
 8001548:	f008 fdd6 	bl	800a0f8 <HAL_LTDC_ConfigLayer>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <LTDC_Init_from_buffer+0x7a>
	{
	Error_Handler();
 8001552:	f000 f8f3 	bl	800173c <Error_Handler>
	}
}
 8001556:	bf00      	nop
 8001558:	3740      	adds	r7, #64	; 0x40
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	2400023c 	.word	0x2400023c

08001564 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
    /* MCU
     * Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the
     * Systick. */
    HAL_Init();
 8001568:	f002 feda 	bl	8004320 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 800156c:	f000 f850 	bl	8001610 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001570:	f7ff fc2e 	bl	8000dd0 <MX_GPIO_Init>
    MX_DMA_Init();
 8001574:	f7ff f97e 	bl	8000874 <MX_DMA_Init>
    MX_USART1_UART_Init();
 8001578:	f002 fdea 	bl	8004150 <MX_USART1_UART_Init>
    MX_DMA2D_Init();
 800157c:	f7ff f99a 	bl	80008b4 <MX_DMA2D_Init>
    MX_LTDC_Init();
 8001580:	f7ff fe58 	bl	8001234 <MX_LTDC_Init>
    MX_DCMI_Init();
 8001584:	f7ff f834 	bl	80005f0 <MX_DCMI_Init>
    MX_RTC_Init();
 8001588:	f001 fe20 	bl	80031cc <MX_RTC_Init>
    MX_FMC_Init();
 800158c:	f7ff fac2 	bl	8000b14 <MX_FMC_Init>
    /* USER CODE BEGIN 2 */
    RetargetInit(&huart1);
 8001590:	481b      	ldr	r0, [pc, #108]	; (8001600 <main+0x9c>)
 8001592:	f001 fd7b 	bl	800308c <RetargetInit>

    BSP_CAMERA_PwrDown(0);
 8001596:	2000      	movs	r0, #0
 8001598:	f002 fb7b 	bl	8003c92 <BSP_CAMERA_PwrDown>
    if (BSP_CAMERA_Init(0, CAMERA_R480x272, CAMERA_PF_RGB565) !=
 800159c:	2200      	movs	r2, #0
 800159e:	2102      	movs	r1, #2
 80015a0:	2000      	movs	r0, #0
 80015a2:	f002 fac5 	bl	8003b30 <BSP_CAMERA_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <main+0x4c>
        BSP_ERROR_NONE) {
        Error_Handler();
 80015ac:	f000 f8c6 	bl	800173c <Error_Handler>
    }
    HAL_Delay(1000);
 80015b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015b4:	f002 ff46 	bl	8004444 <HAL_Delay>
    //  buffer[5460] = 255;
    LTDC_Init_from_buffer((uint32_t *)LCD_BUFFER);
 80015b8:	4812      	ldr	r0, [pc, #72]	; (8001604 <main+0xa0>)
 80015ba:	f7ff ff8f 	bl	80014dc <LTDC_Init_from_buffer>

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */

    while (1) {
        BSP_CAMERA_Start(0, (uint8_t *)CAMERA_BUFFER, CAMERA_MODE_SNAPSHOT);
 80015be:	2202      	movs	r2, #2
 80015c0:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80015c4:	2000      	movs	r0, #0
 80015c6:	f002 faf9 	bl	8003bbc <BSP_CAMERA_Start>
        while (camera_frame_ready == 0) {
 80015ca:	bf00      	nop
 80015cc:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <main+0xa4>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0fb      	beq.n	80015cc <main+0x68>
        };
        DMA2D_Convert((uint8_t *)CAMERA_BUFFER, (uint32_t *)LCD_BUFFER);
 80015d4:	490b      	ldr	r1, [pc, #44]	; (8001604 <main+0xa0>)
 80015d6:	f04f 4050 	mov.w	r0, #3489660928	; 0xd0000000
 80015da:	f7ff f9cf 	bl	800097c <DMA2D_Convert>
        drawCrosshair((uint32_t *)LCD_BUFFER, 470, 265);
 80015de:	f240 1209 	movw	r2, #265	; 0x109
 80015e2:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 80015e6:	4807      	ldr	r0, [pc, #28]	; (8001604 <main+0xa0>)
 80015e8:	f7ff fa76 	bl	8000ad8 <drawCrosshair>
        BSP_CAMERA_Stop(0);
 80015ec:	2000      	movs	r0, #0
 80015ee:	f002 fb1f 	bl	8003c30 <BSP_CAMERA_Stop>
        HAL_GPIO_TogglePin(USER_LED1_GPIO_Port, USER_LED1_Pin);
 80015f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015f6:	4805      	ldr	r0, [pc, #20]	; (800160c <main+0xa8>)
 80015f8:	f007 fd65 	bl	80090c6 <HAL_GPIO_TogglePin>
        BSP_CAMERA_Start(0, (uint8_t *)CAMERA_BUFFER, CAMERA_MODE_SNAPSHOT);
 80015fc:	e7df      	b.n	80015be <main+0x5a>
 80015fe:	bf00      	nop
 8001600:	24000dd8 	.word	0x24000dd8
 8001604:	d005fa00 	.word	0xd005fa00
 8001608:	240002e4 	.word	0x240002e4
 800160c:	58021800 	.word	0x58021800

08001610 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b09c      	sub	sp, #112	; 0x70
 8001614:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161a:	224c      	movs	r2, #76	; 0x4c
 800161c:	2100      	movs	r1, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f00e f800 	bl	800f624 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	2220      	movs	r2, #32
 8001628:	2100      	movs	r1, #0
 800162a:	4618      	mov	r0, r3
 800162c:	f00d fffa 	bl	800f624 <memset>

    /*AXI clock gating */
    RCC->CKGAENR = 0xFFFFFFFF;
 8001630:	4b38      	ldr	r3, [pc, #224]	; (8001714 <SystemClock_Config+0x104>)
 8001632:	f04f 32ff 	mov.w	r2, #4294967295
 8001636:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

    /** Supply configuration update enable
     */
    HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800163a:	2004      	movs	r0, #4
 800163c:	f008 ff44 	bl	800a4c8 <HAL_PWREx_ConfigSupply>

    /** Configure the main internal regulator output voltage
     */
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001640:	2300      	movs	r3, #0
 8001642:	603b      	str	r3, [r7, #0]
 8001644:	4b34      	ldr	r3, [pc, #208]	; (8001718 <SystemClock_Config+0x108>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	4a33      	ldr	r2, [pc, #204]	; (8001718 <SystemClock_Config+0x108>)
 800164a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800164e:	6193      	str	r3, [r2, #24]
 8001650:	4b31      	ldr	r3, [pc, #196]	; (8001718 <SystemClock_Config+0x108>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001658:	603b      	str	r3, [r7, #0]
 800165a:	683b      	ldr	r3, [r7, #0]

    while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 800165c:	bf00      	nop
 800165e:	4b2e      	ldr	r3, [pc, #184]	; (8001718 <SystemClock_Config+0x108>)
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001666:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800166a:	d1f8      	bne.n	800165e <SystemClock_Config+0x4e>
    }

    /** Configure LSE Drive Capability
     */
    HAL_PWR_EnableBkUpAccess();
 800166c:	f008 ff1c 	bl	800a4a8 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001670:	4b28      	ldr	r3, [pc, #160]	; (8001714 <SystemClock_Config+0x104>)
 8001672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001674:	4a27      	ldr	r2, [pc, #156]	; (8001714 <SystemClock_Config+0x104>)
 8001676:	f023 0318 	bic.w	r3, r3, #24
 800167a:	6713      	str	r3, [r2, #112]	; 0x70

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType =
 800167c:	2305      	movs	r3, #5
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
        RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE;
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001680:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001684:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001686:	2301      	movs	r3, #1
 8001688:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800168a:	2302      	movs	r3, #2
 800168c:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800168e:	2302      	movs	r3, #2
 8001690:	64fb      	str	r3, [r7, #76]	; 0x4c
    RCC_OscInitStruct.PLL.PLLM = 3;
 8001692:	2303      	movs	r3, #3
 8001694:	653b      	str	r3, [r7, #80]	; 0x50
    RCC_OscInitStruct.PLL.PLLN = 69;
 8001696:	2345      	movs	r3, #69	; 0x45
 8001698:	657b      	str	r3, [r7, #84]	; 0x54
    RCC_OscInitStruct.PLL.PLLP = 2;
 800169a:	2302      	movs	r3, #2
 800169c:	65bb      	str	r3, [r7, #88]	; 0x58
    RCC_OscInitStruct.PLL.PLLQ = 12;
 800169e:	230c      	movs	r3, #12
 80016a0:	65fb      	str	r3, [r7, #92]	; 0x5c
    RCC_OscInitStruct.PLL.PLLR = 16;
 80016a2:	2310      	movs	r3, #16
 80016a4:	663b      	str	r3, [r7, #96]	; 0x60
    RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80016a6:	230c      	movs	r3, #12
 80016a8:	667b      	str	r3, [r7, #100]	; 0x64
    RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_OscInitStruct.PLL.PLLFRACN = 5462;
 80016ae:	f241 5356 	movw	r3, #5462	; 0x1556
 80016b2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80016b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b8:	4618      	mov	r0, r3
 80016ba:	f008 ff5f 	bl	800a57c <HAL_RCC_OscConfig>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <SystemClock_Config+0xb8>
        Error_Handler();
 80016c4:	f000 f83a 	bl	800173c <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 80016c8:	233f      	movs	r3, #63	; 0x3f
 80016ca:	607b      	str	r3, [r7, #4]
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |
                                  RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016cc:	2303      	movs	r3, #3
 80016ce:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80016d4:	2300      	movs	r3, #0
 80016d6:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80016d8:	2340      	movs	r3, #64	; 0x40
 80016da:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80016dc:	2340      	movs	r3, #64	; 0x40
 80016de:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80016e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016e4:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80016e6:	2340      	movs	r3, #64	; 0x40
 80016e8:	623b      	str	r3, [r7, #32]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	2107      	movs	r1, #7
 80016ee:	4618      	mov	r0, r3
 80016f0:	f009 fb76 	bl	800ade0 <HAL_RCC_ClockConfig>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <SystemClock_Config+0xee>
        Error_Handler();
 80016fa:	f000 f81f 	bl	800173c <Error_Handler>
    }
    HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 80016fe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001702:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8001706:	2000      	movs	r0, #0
 8001708:	f009 fd20 	bl	800b14c <HAL_RCC_MCOConfig>
}
 800170c:	bf00      	nop
 800170e:	3770      	adds	r7, #112	; 0x70
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	58024400 	.word	0x58024400
 8001718:	58024800 	.word	0x58024800

0800171c <BSP_CAMERA_FrameEventCallback>:

/* USER CODE BEGIN 4 */

void BSP_CAMERA_FrameEventCallback(uint32_t Instance) {
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
    camera_frame_ready = 1;
 8001724:	4b04      	ldr	r3, [pc, #16]	; (8001738 <BSP_CAMERA_FrameEventCallback+0x1c>)
 8001726:	2201      	movs	r2, #1
 8001728:	601a      	str	r2, [r3, #0]
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	240002e4 	.word	0x240002e4

0800173c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001740:	b672      	cpsid	i
}
 8001742:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state
     */
    __disable_irq();
    while (1) {
 8001744:	e7fe      	b.n	8001744 <Error_Handler+0x8>
	...

08001748 <OV5640_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OV5640_RegisterBusIO(OV5640_Object_t *pObj, OV5640_IO_t *pIO)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d103      	bne.n	8001760 <OV5640_RegisterBusIO+0x18>
  {
    ret = OV5640_ERROR;
 8001758:	f04f 33ff 	mov.w	r3, #4294967295
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	e02c      	b.n	80017ba <OV5640_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	891a      	ldrh	r2, [r3, #8]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	68da      	ldr	r2, [r3, #12]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	691a      	ldr	r2, [r3, #16]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	695a      	ldr	r2, [r3, #20]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a0c      	ldr	r2, [pc, #48]	; (80017c4 <OV5640_RegisterBusIO+0x7c>)
 8001794:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a0b      	ldr	r2, [pc, #44]	; (80017c8 <OV5640_RegisterBusIO+0x80>)
 800179a:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	621a      	str	r2, [r3, #32]

    if (pObj->IO.Init != NULL)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d004      	beq.n	80017b4 <OV5640_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4798      	blx	r3
 80017b0:	60f8      	str	r0, [r7, #12]
 80017b2:	e002      	b.n	80017ba <OV5640_RegisterBusIO+0x72>
    }
    else
    {
      ret = OV5640_ERROR;
 80017b4:	f04f 33ff 	mov.w	r3, #4294967295
 80017b8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80017ba:	68fb      	ldr	r3, [r7, #12]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	08002fcb 	.word	0x08002fcb
 80017c8:	08002ffd 	.word	0x08002ffd

080017cc <OV5640_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_Init(OV5640_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b088      	sub	sp, #32
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 80017d8:	2300      	movs	r3, #0
 80017da:	61bb      	str	r3, [r7, #24]
    {OV5640_AEC_CTRL1F, 0x14},
    {OV5640_SYSTEM_CTROL0, 0x02},
  };
  uint8_t tmp;

  if (pObj->IsInitialized == 0U)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d165      	bne.n	80018b2 <OV5640_Init+0xe6>
  {
    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d80e      	bhi.n	800180a <OV5640_Init+0x3e>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00f      	beq.n	8001812 <OV5640_Init+0x46>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d00c      	beq.n	8001812 <OV5640_Init+0x46>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d009      	beq.n	8001812 <OV5640_Init+0x46>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b07      	cmp	r3, #7
 8001802:	d006      	beq.n	8001812 <OV5640_Init+0x46>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b08      	cmp	r3, #8
 8001808:	d003      	beq.n	8001812 <OV5640_Init+0x46>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 800180a:	f04f 33ff 	mov.w	r3, #4294967295
 800180e:	61bb      	str	r3, [r7, #24]
 8001810:	e04f      	b.n	80018b2 <OV5640_Init+0xe6>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
 8001816:	e01f      	b.n	8001858 <OV5640_Init+0x8c>
      {
        if (ret != OV5640_ERROR)
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800181e:	d018      	beq.n	8001852 <OV5640_Init+0x86>
        {
          tmp = (uint8_t)OV5640_Common[index][1];
 8001820:	4a26      	ldr	r2, [pc, #152]	; (80018bc <OV5640_Init+0xf0>)
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	885b      	ldrh	r3, [r3, #2]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	75fb      	strb	r3, [r7, #23]

          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f103 0018 	add.w	r0, r3, #24
 8001834:	4a21      	ldr	r2, [pc, #132]	; (80018bc <OV5640_Init+0xf0>)
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800183c:	f107 0217 	add.w	r2, r7, #23
 8001840:	2301      	movs	r3, #1
 8001842:	f001 fc0b 	bl	800305c <ov5640_write_reg>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d002      	beq.n	8001852 <OV5640_Init+0x86>
          {
            ret = OV5640_ERROR;
 800184c:	f04f 33ff 	mov.w	r3, #4294967295
 8001850:	61bb      	str	r3, [r7, #24]
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	3301      	adds	r3, #1
 8001856:	61fb      	str	r3, [r7, #28]
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	2bfd      	cmp	r3, #253	; 0xfd
 800185c:	d9dc      	bls.n	8001818 <OV5640_Init+0x4c>
          }
        }
      }

      if (ret == OV5640_OK)
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d126      	bne.n	80018b2 <OV5640_Init+0xe6>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 8001864:	68b9      	ldr	r1, [r7, #8]
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f000 f9e0 	bl	8001c2c <OV5640_SetResolution>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <OV5640_Init+0xae>
        {
          ret = OV5640_ERROR;
 8001872:	f04f 33ff 	mov.w	r3, #4294967295
 8001876:	61bb      	str	r3, [r7, #24]
 8001878:	e01b      	b.n	80018b2 <OV5640_Init+0xe6>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	f000 f833 	bl	80018e8 <OV5640_SetPixelFormat>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <OV5640_Init+0xc4>
        {
          ret = OV5640_ERROR;
 8001888:	f04f 33ff 	mov.w	r3, #4294967295
 800188c:	61bb      	str	r3, [r7, #24]
 800188e:	e010      	b.n	80018b2 <OV5640_Init+0xe6>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(pObj, OV5640_POLARITY_PCLK_HIGH, OV5640_POLARITY_HREF_HIGH,
 8001890:	2300      	movs	r3, #0
 8001892:	2201      	movs	r2, #1
 8001894:	2101      	movs	r1, #1
 8001896:	68f8      	ldr	r0, [r7, #12]
 8001898:	f000 fb64 	bl	8001f64 <OV5640_SetPolarities>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <OV5640_Init+0xde>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 80018a2:	f04f 33ff 	mov.w	r3, #4294967295
 80018a6:	61bb      	str	r3, [r7, #24]
 80018a8:	e003      	b.n	80018b2 <OV5640_Init+0xe6>
        }
        else
        {
          pObj->IsInitialized = 1U;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2201      	movs	r2, #1
 80018ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
      }
    }
  }

  return ret;
 80018b2:	69bb      	ldr	r3, [r7, #24]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3720      	adds	r7, #32
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	0800ff20 	.word	0x0800ff20

080018c0 <OV5640_DeInit>:
  * @brief  De-initializes the camera sensor.
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV5640_DeInit(OV5640_Object_t *pObj)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized == 1U)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d103      	bne.n	80018da <OV5640_DeInit+0x1a>
  {
    /* De-initialize camera sensor interface */
    pObj->IsInitialized = 0U;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return OV5640_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <OV5640_SetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_SetPixelFormat(OV5640_Object_t *pObj, uint32_t PixelFormat)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d00f      	beq.n	800191c <OV5640_SetPixelFormat+0x34>
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d00c      	beq.n	800191c <OV5640_SetPixelFormat+0x34>
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d009      	beq.n	800191c <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	2b07      	cmp	r3, #7
 800190c:	d006      	beq.n	800191c <OV5640_SetPixelFormat+0x34>
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	2b08      	cmp	r3, #8
 8001912:	d003      	beq.n	800191c <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 8001914:	f04f 33ff 	mov.w	r3, #4294967295
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	e16a      	b.n	8001bf2 <OV5640_SetPixelFormat+0x30a>
  }
  else
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	3b01      	subs	r3, #1
 8001920:	2b07      	cmp	r3, #7
 8001922:	f200 80c3 	bhi.w	8001aac <OV5640_SetPixelFormat+0x1c4>
 8001926:	a201      	add	r2, pc, #4	; (adr r2, 800192c <OV5640_SetPixelFormat+0x44>)
 8001928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800192c:	080019a5 	.word	0x080019a5
 8001930:	0800194d 	.word	0x0800194d
 8001934:	08001aad 	.word	0x08001aad
 8001938:	08001aad 	.word	0x08001aad
 800193c:	08001aad 	.word	0x08001aad
 8001940:	08001aad 	.word	0x08001aad
 8001944:	080019fd 	.word	0x080019fd
 8001948:	08001a55 	.word	0x08001a55
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 800194c:	2300      	movs	r3, #0
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	e024      	b.n	800199c <OV5640_SetPixelFormat+0xb4>
        {
          if (ret != OV5640_ERROR)
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001958:	d01d      	beq.n	8001996 <OV5640_SetPixelFormat+0xae>
          {
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 800195a:	4aa8      	ldr	r2, [pc, #672]	; (8001bfc <OV5640_SetPixelFormat+0x314>)
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	885b      	ldrh	r3, [r3, #2]
 8001964:	b2db      	uxtb	r3, r3
 8001966:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f103 0018 	add.w	r0, r3, #24
 800196e:	4aa3      	ldr	r2, [pc, #652]	; (8001bfc <OV5640_SetPixelFormat+0x314>)
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001976:	f107 020f 	add.w	r2, r7, #15
 800197a:	2301      	movs	r3, #1
 800197c:	f001 fb6e 	bl	800305c <ov5640_write_reg>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <OV5640_SetPixelFormat+0xa6>
            {
              ret = OV5640_ERROR;
 8001986:	f04f 33ff 	mov.w	r3, #4294967295
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	e003      	b.n	8001996 <OV5640_SetPixelFormat+0xae>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 800198e:	2101      	movs	r1, #1
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f001 fb00 	bl	8002f96 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	3301      	adds	r3, #1
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d9d7      	bls.n	8001952 <OV5640_SetPixelFormat+0x6a>
            }
          }
        }
        break;
 80019a2:	e0af      	b.n	8001b04 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 80019a4:	2300      	movs	r3, #0
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	e024      	b.n	80019f4 <OV5640_SetPixelFormat+0x10c>
        {
          if (ret != OV5640_ERROR)
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b0:	d01d      	beq.n	80019ee <OV5640_SetPixelFormat+0x106>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 80019b2:	4a93      	ldr	r2, [pc, #588]	; (8001c00 <OV5640_SetPixelFormat+0x318>)
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	885b      	ldrh	r3, [r3, #2]
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f103 0018 	add.w	r0, r3, #24
 80019c6:	4a8e      	ldr	r2, [pc, #568]	; (8001c00 <OV5640_SetPixelFormat+0x318>)
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80019ce:	f107 020f 	add.w	r2, r7, #15
 80019d2:	2301      	movs	r3, #1
 80019d4:	f001 fb42 	bl	800305c <ov5640_write_reg>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <OV5640_SetPixelFormat+0xfe>
            {
              ret = OV5640_ERROR;
 80019de:	f04f 33ff 	mov.w	r3, #4294967295
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	e003      	b.n	80019ee <OV5640_SetPixelFormat+0x106>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 80019e6:	2101      	movs	r1, #1
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f001 fad4 	bl	8002f96 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	3301      	adds	r3, #1
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d9d7      	bls.n	80019aa <OV5640_SetPixelFormat+0xc2>
            }
          }
        }
        break;
 80019fa:	e083      	b.n	8001b04 <OV5640_SetPixelFormat+0x21c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 80019fc:	2300      	movs	r3, #0
 80019fe:	613b      	str	r3, [r7, #16]
 8001a00:	e024      	b.n	8001a4c <OV5640_SetPixelFormat+0x164>
        {
          if (ret != OV5640_ERROR)
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a08:	d01d      	beq.n	8001a46 <OV5640_SetPixelFormat+0x15e>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 8001a0a:	4a7e      	ldr	r2, [pc, #504]	; (8001c04 <OV5640_SetPixelFormat+0x31c>)
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	885b      	ldrh	r3, [r3, #2]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f103 0018 	add.w	r0, r3, #24
 8001a1e:	4a79      	ldr	r2, [pc, #484]	; (8001c04 <OV5640_SetPixelFormat+0x31c>)
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001a26:	f107 020f 	add.w	r2, r7, #15
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	f001 fb16 	bl	800305c <ov5640_write_reg>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <OV5640_SetPixelFormat+0x156>
            {
              ret = OV5640_ERROR;
 8001a36:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	e003      	b.n	8001a46 <OV5640_SetPixelFormat+0x15e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001a3e:	2101      	movs	r1, #1
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f001 faa8 	bl	8002f96 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	613b      	str	r3, [r7, #16]
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d9d7      	bls.n	8001a02 <OV5640_SetPixelFormat+0x11a>
            }
          }
        }
        break;
 8001a52:	e057      	b.n	8001b04 <OV5640_SetPixelFormat+0x21c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8001a54:	2300      	movs	r3, #0
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	e024      	b.n	8001aa4 <OV5640_SetPixelFormat+0x1bc>
        {
          if (ret != OV5640_ERROR)
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a60:	d01d      	beq.n	8001a9e <OV5640_SetPixelFormat+0x1b6>
          {
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8001a62:	4a69      	ldr	r2, [pc, #420]	; (8001c08 <OV5640_SetPixelFormat+0x320>)
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	885b      	ldrh	r3, [r3, #2]
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f103 0018 	add.w	r0, r3, #24
 8001a76:	4a64      	ldr	r2, [pc, #400]	; (8001c08 <OV5640_SetPixelFormat+0x320>)
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001a7e:	f107 020f 	add.w	r2, r7, #15
 8001a82:	2301      	movs	r3, #1
 8001a84:	f001 faea 	bl	800305c <ov5640_write_reg>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <OV5640_SetPixelFormat+0x1ae>
            {
              ret = OV5640_ERROR;
 8001a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	e003      	b.n	8001a9e <OV5640_SetPixelFormat+0x1b6>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001a96:	2101      	movs	r1, #1
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f001 fa7c 	bl	8002f96 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d9d7      	bls.n	8001a5a <OV5640_SetPixelFormat+0x172>
            }
          }
        }
        break;
 8001aaa:	e02b      	b.n	8001b04 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8001aac:	2300      	movs	r3, #0
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	e024      	b.n	8001afc <OV5640_SetPixelFormat+0x214>
        {
          if (ret != OV5640_ERROR)
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab8:	d01d      	beq.n	8001af6 <OV5640_SetPixelFormat+0x20e>
          {
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 8001aba:	4a54      	ldr	r2, [pc, #336]	; (8001c0c <OV5640_SetPixelFormat+0x324>)
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	885b      	ldrh	r3, [r3, #2]
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f103 0018 	add.w	r0, r3, #24
 8001ace:	4a4f      	ldr	r2, [pc, #316]	; (8001c0c <OV5640_SetPixelFormat+0x324>)
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001ad6:	f107 020f 	add.w	r2, r7, #15
 8001ada:	2301      	movs	r3, #1
 8001adc:	f001 fabe 	bl	800305c <ov5640_write_reg>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <OV5640_SetPixelFormat+0x206>
            {
              ret = OV5640_ERROR;
 8001ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	e003      	b.n	8001af6 <OV5640_SetPixelFormat+0x20e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001aee:	2101      	movs	r1, #1
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f001 fa50 	bl	8002f96 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	3301      	adds	r3, #1
 8001afa:	613b      	str	r3, [r7, #16]
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d9d7      	bls.n	8001ab2 <OV5640_SetPixelFormat+0x1ca>
            }
          }
        }
        break;
 8001b02:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	2b08      	cmp	r3, #8
 8001b08:	d173      	bne.n	8001bf2 <OV5640_SetPixelFormat+0x30a>
    {
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f103 0018 	add.w	r0, r3, #24
 8001b10:	f107 020f 	add.w	r2, r7, #15
 8001b14:	2301      	movs	r3, #1
 8001b16:	f643 0121 	movw	r1, #14369	; 0x3821
 8001b1a:	f001 fa88 	bl	800302e <ov5640_read_reg>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d003      	beq.n	8001b2c <OV5640_SetPixelFormat+0x244>
      {
        ret = OV5640_ERROR;
 8001b24:	f04f 33ff 	mov.w	r3, #4294967295
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	e062      	b.n	8001bf2 <OV5640_SetPixelFormat+0x30a>
      }
      else
      {
        tmp |= (1 << 5);
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
 8001b2e:	f043 0320 	orr.w	r3, r3, #32
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	73fb      	strb	r3, [r7, #15]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f103 0018 	add.w	r0, r3, #24
 8001b3c:	f107 020f 	add.w	r2, r7, #15
 8001b40:	2301      	movs	r3, #1
 8001b42:	f643 0121 	movw	r1, #14369	; 0x3821
 8001b46:	f001 fa89 	bl	800305c <ov5640_write_reg>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <OV5640_SetPixelFormat+0x270>
        {
          ret = OV5640_ERROR;
 8001b50:	f04f 33ff 	mov.w	r3, #4294967295
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	e04c      	b.n	8001bf2 <OV5640_SetPixelFormat+0x30a>
        }
        else
        {
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f103 0018 	add.w	r0, r3, #24
 8001b5e:	f107 020f 	add.w	r2, r7, #15
 8001b62:	2301      	movs	r3, #1
 8001b64:	f243 0102 	movw	r1, #12290	; 0x3002
 8001b68:	f001 fa61 	bl	800302e <ov5640_read_reg>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <OV5640_SetPixelFormat+0x292>
          {
            ret = OV5640_ERROR;
 8001b72:	f04f 33ff 	mov.w	r3, #4294967295
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	e03b      	b.n	8001bf2 <OV5640_SetPixelFormat+0x30a>
          }
          else
          {
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	f023 031c 	bic.w	r3, r3, #28
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f103 0018 	add.w	r0, r3, #24
 8001b8a:	f107 020f 	add.w	r2, r7, #15
 8001b8e:	2301      	movs	r3, #1
 8001b90:	f243 0102 	movw	r1, #12290	; 0x3002
 8001b94:	f001 fa62 	bl	800305c <ov5640_write_reg>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <OV5640_SetPixelFormat+0x2be>
            {
              ret = OV5640_ERROR;
 8001b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	e025      	b.n	8001bf2 <OV5640_SetPixelFormat+0x30a>
            }
            else
            {
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f103 0018 	add.w	r0, r3, #24
 8001bac:	f107 020f 	add.w	r2, r7, #15
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	f243 0106 	movw	r1, #12294	; 0x3006
 8001bb6:	f001 fa3a 	bl	800302e <ov5640_read_reg>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <OV5640_SetPixelFormat+0x2e0>
              {
                ret = OV5640_ERROR;
 8001bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	e014      	b.n	8001bf2 <OV5640_SetPixelFormat+0x30a>
              }
              else
              {
                tmp |= ((1 << 5) | (1 << 3));
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
 8001bca:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	73fb      	strb	r3, [r7, #15]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f103 0018 	add.w	r0, r3, #24
 8001bd8:	f107 020f 	add.w	r2, r7, #15
 8001bdc:	2301      	movs	r3, #1
 8001bde:	f243 0106 	movw	r1, #12294	; 0x3006
 8001be2:	f001 fa3b 	bl	800305c <ov5640_write_reg>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d002      	beq.n	8001bf2 <OV5640_SetPixelFormat+0x30a>
                {
                  ret = OV5640_ERROR;
 8001bec:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf0:	617b      	str	r3, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 8001bf2:	697b      	ldr	r3, [r7, #20]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3718      	adds	r7, #24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	08010318 	.word	0x08010318
 8001c00:	08010320 	.word	0x08010320
 8001c04:	08010328 	.word	0x08010328
 8001c08:	08010330 	.word	0x08010330
 8001c0c:	08010338 	.word	0x08010338

08001c10 <OV5640_GetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_GetPixelFormat(OV5640_Object_t *pObj, uint32_t *PixelFormat)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(PixelFormat);

  return OV5640_ERROR;
 8001c1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
	...

08001c2c <OV5640_SetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_SetResolution(OV5640_Object_t *pObj, uint32_t Resolution)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	d903      	bls.n	8001c48 <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 8001c40:	f04f 33ff 	mov.w	r3, #4294967295
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	e0d8      	b.n	8001dfa <OV5640_SetResolution+0x1ce>
  }
  else
  {
    /* Initialize OV5640 */
    switch (Resolution)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	f200 80d1 	bhi.w	8001df2 <OV5640_SetResolution+0x1c6>
 8001c50:	a201      	add	r2, pc, #4	; (adr r2, 8001c58 <OV5640_SetResolution+0x2c>)
 8001c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c56:	bf00      	nop
 8001c58:	08001c6d 	.word	0x08001c6d
 8001c5c:	08001cbb 	.word	0x08001cbb
 8001c60:	08001d09 	.word	0x08001d09
 8001c64:	08001d57 	.word	0x08001d57
 8001c68:	08001da5 	.word	0x08001da5
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	613b      	str	r3, [r7, #16]
 8001c70:	e01f      	b.n	8001cb2 <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c78:	d018      	beq.n	8001cac <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8001c7a:	4a62      	ldr	r2, [pc, #392]	; (8001e04 <OV5640_SetResolution+0x1d8>)
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	885b      	ldrh	r3, [r3, #2]
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f103 0018 	add.w	r0, r3, #24
 8001c8e:	4a5d      	ldr	r2, [pc, #372]	; (8001e04 <OV5640_SetResolution+0x1d8>)
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001c96:	f107 020f 	add.w	r2, r7, #15
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	f001 f9de 	bl	800305c <ov5640_write_reg>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d002      	beq.n	8001cac <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 8001ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8001caa:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	613b      	str	r3, [r7, #16]
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	2b03      	cmp	r3, #3
 8001cb6:	d9dc      	bls.n	8001c72 <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 8001cb8:	e09f      	b.n	8001dfa <OV5640_SetResolution+0x1ce>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8001cba:	2300      	movs	r3, #0
 8001cbc:	613b      	str	r3, [r7, #16]
 8001cbe:	e01f      	b.n	8001d00 <OV5640_SetResolution+0xd4>
        {
          if (ret != OV5640_ERROR)
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc6:	d018      	beq.n	8001cfa <OV5640_SetResolution+0xce>
          {
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8001cc8:	4a4f      	ldr	r2, [pc, #316]	; (8001e08 <OV5640_SetResolution+0x1dc>)
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	885b      	ldrh	r3, [r3, #2]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f103 0018 	add.w	r0, r3, #24
 8001cdc:	4a4a      	ldr	r2, [pc, #296]	; (8001e08 <OV5640_SetResolution+0x1dc>)
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001ce4:	f107 020f 	add.w	r2, r7, #15
 8001ce8:	2301      	movs	r3, #1
 8001cea:	f001 f9b7 	bl	800305c <ov5640_write_reg>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d002      	beq.n	8001cfa <OV5640_SetResolution+0xce>
            {
              ret = OV5640_ERROR;
 8001cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf8:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	613b      	str	r3, [r7, #16]
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	2b03      	cmp	r3, #3
 8001d04:	d9dc      	bls.n	8001cc0 <OV5640_SetResolution+0x94>
            }
          }
        }
        break;
 8001d06:	e078      	b.n	8001dfa <OV5640_SetResolution+0x1ce>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8001d08:	2300      	movs	r3, #0
 8001d0a:	613b      	str	r3, [r7, #16]
 8001d0c:	e01f      	b.n	8001d4e <OV5640_SetResolution+0x122>
        {
          if (ret != OV5640_ERROR)
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d14:	d018      	beq.n	8001d48 <OV5640_SetResolution+0x11c>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 8001d16:	4a3d      	ldr	r2, [pc, #244]	; (8001e0c <OV5640_SetResolution+0x1e0>)
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	885b      	ldrh	r3, [r3, #2]
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f103 0018 	add.w	r0, r3, #24
 8001d2a:	4a38      	ldr	r2, [pc, #224]	; (8001e0c <OV5640_SetResolution+0x1e0>)
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001d32:	f107 020f 	add.w	r2, r7, #15
 8001d36:	2301      	movs	r3, #1
 8001d38:	f001 f990 	bl	800305c <ov5640_write_reg>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d002      	beq.n	8001d48 <OV5640_SetResolution+0x11c>
            {
              ret = OV5640_ERROR;
 8001d42:	f04f 33ff 	mov.w	r3, #4294967295
 8001d46:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	2b03      	cmp	r3, #3
 8001d52:	d9dc      	bls.n	8001d0e <OV5640_SetResolution+0xe2>
            }
          }
        }
        break;
 8001d54:	e051      	b.n	8001dfa <OV5640_SetResolution+0x1ce>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	e01f      	b.n	8001d9c <OV5640_SetResolution+0x170>
        {
          if (ret != OV5640_ERROR)
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d62:	d018      	beq.n	8001d96 <OV5640_SetResolution+0x16a>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 8001d64:	4a2a      	ldr	r2, [pc, #168]	; (8001e10 <OV5640_SetResolution+0x1e4>)
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	885b      	ldrh	r3, [r3, #2]
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f103 0018 	add.w	r0, r3, #24
 8001d78:	4a25      	ldr	r2, [pc, #148]	; (8001e10 <OV5640_SetResolution+0x1e4>)
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001d80:	f107 020f 	add.w	r2, r7, #15
 8001d84:	2301      	movs	r3, #1
 8001d86:	f001 f969 	bl	800305c <ov5640_write_reg>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d002      	beq.n	8001d96 <OV5640_SetResolution+0x16a>
            {
              ret = OV5640_ERROR;
 8001d90:	f04f 33ff 	mov.w	r3, #4294967295
 8001d94:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	2b03      	cmp	r3, #3
 8001da0:	d9dc      	bls.n	8001d5c <OV5640_SetResolution+0x130>
            }
          }
        }
        break;
 8001da2:	e02a      	b.n	8001dfa <OV5640_SetResolution+0x1ce>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8001da4:	2300      	movs	r3, #0
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	e01f      	b.n	8001dea <OV5640_SetResolution+0x1be>
        {
          if (ret != OV5640_ERROR)
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db0:	d018      	beq.n	8001de4 <OV5640_SetResolution+0x1b8>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8001db2:	4a18      	ldr	r2, [pc, #96]	; (8001e14 <OV5640_SetResolution+0x1e8>)
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	885b      	ldrh	r3, [r3, #2]
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f103 0018 	add.w	r0, r3, #24
 8001dc6:	4a13      	ldr	r2, [pc, #76]	; (8001e14 <OV5640_SetResolution+0x1e8>)
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001dce:	f107 020f 	add.w	r2, r7, #15
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	f001 f942 	bl	800305c <ov5640_write_reg>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d002      	beq.n	8001de4 <OV5640_SetResolution+0x1b8>
            {
              ret = OV5640_ERROR;
 8001dde:	f04f 33ff 	mov.w	r3, #4294967295
 8001de2:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	3301      	adds	r3, #1
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	2b03      	cmp	r3, #3
 8001dee:	d9dc      	bls.n	8001daa <OV5640_SetResolution+0x17e>
            }
          }
        }
        break;
 8001df0:	e003      	b.n	8001dfa <OV5640_SetResolution+0x1ce>
      default:
        ret = OV5640_ERROR;
 8001df2:	f04f 33ff 	mov.w	r3, #4294967295
 8001df6:	617b      	str	r3, [r7, #20]
        break;
 8001df8:	bf00      	nop
    }
  }

  return ret;
 8001dfa:	697b      	ldr	r3, [r7, #20]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	08010340 	.word	0x08010340
 8001e08:	08010350 	.word	0x08010350
 8001e0c:	08010360 	.word	0x08010360
 8001e10:	08010370 	.word	0x08010370
 8001e14:	08010380 	.word	0x08010380

08001e18 <OV5640_GetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_GetResolution(OV5640_Object_t *pObj, uint32_t *Resolution)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t x_size;
  uint16_t y_size;
  uint8_t tmp;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f103 0018 	add.w	r0, r3, #24
 8001e28:	f107 020f 	add.w	r2, r7, #15
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	f643 0108 	movw	r1, #14344	; 0x3808
 8001e32:	f001 f8fc 	bl	800302e <ov5640_read_reg>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <OV5640_GetResolution+0x2c>
  {
    ret = OV5640_ERROR;
 8001e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	e08a      	b.n	8001f5a <OV5640_GetResolution+0x142>
  }
  else
  {
    x_size = (uint16_t)tmp << 8U;
 8001e44:	7bfb      	ldrb	r3, [r7, #15]
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	021b      	lsls	r3, r3, #8
 8001e4a:	827b      	strh	r3, [r7, #18]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f103 0018 	add.w	r0, r3, #24
 8001e52:	f107 020f 	add.w	r2, r7, #15
 8001e56:	2301      	movs	r3, #1
 8001e58:	f643 0109 	movw	r1, #14345	; 0x3809
 8001e5c:	f001 f8e7 	bl	800302e <ov5640_read_reg>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <OV5640_GetResolution+0x56>
    {
      ret = OV5640_ERROR;
 8001e66:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	e075      	b.n	8001f5a <OV5640_GetResolution+0x142>
    }
    else
    {
      x_size |= tmp;
 8001e6e:	7bfb      	ldrb	r3, [r7, #15]
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	8a7b      	ldrh	r3, [r7, #18]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	827b      	strh	r3, [r7, #18]

      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f103 0018 	add.w	r0, r3, #24
 8001e7e:	f107 020f 	add.w	r2, r7, #15
 8001e82:	2301      	movs	r3, #1
 8001e84:	f643 010a 	movw	r1, #14346	; 0x380a
 8001e88:	f001 f8d1 	bl	800302e <ov5640_read_reg>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <OV5640_GetResolution+0x82>
      {
        ret = OV5640_ERROR;
 8001e92:	f04f 33ff 	mov.w	r3, #4294967295
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	e05f      	b.n	8001f5a <OV5640_GetResolution+0x142>
      }
      else
      {
        y_size = (uint16_t)tmp << 8U;
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	021b      	lsls	r3, r3, #8
 8001ea0:	823b      	strh	r3, [r7, #16]
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f103 0018 	add.w	r0, r3, #24
 8001ea8:	f107 020f 	add.w	r2, r7, #15
 8001eac:	2301      	movs	r3, #1
 8001eae:	f643 010b 	movw	r1, #14347	; 0x380b
 8001eb2:	f001 f8bc 	bl	800302e <ov5640_read_reg>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <OV5640_GetResolution+0xac>
        {
          ret = OV5640_ERROR;
 8001ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec0:	617b      	str	r3, [r7, #20]
 8001ec2:	e04a      	b.n	8001f5a <OV5640_GetResolution+0x142>
        }
        else
        {
          y_size |= tmp;
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	8a3b      	ldrh	r3, [r7, #16]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	823b      	strh	r3, [r7, #16]

          if ((x_size == 800U) && (y_size == 480U))
 8001ece:	8a7b      	ldrh	r3, [r7, #18]
 8001ed0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001ed4:	d109      	bne.n	8001eea <OV5640_GetResolution+0xd2>
 8001ed6:	8a3b      	ldrh	r3, [r7, #16]
 8001ed8:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001edc:	d105      	bne.n	8001eea <OV5640_GetResolution+0xd2>
          {
            *Resolution = OV5640_R800x480;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	2204      	movs	r2, #4
 8001ee2:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]
 8001ee8:	e037      	b.n	8001f5a <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 640U) && (y_size == 480U))
 8001eea:	8a7b      	ldrh	r3, [r7, #18]
 8001eec:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8001ef0:	d109      	bne.n	8001f06 <OV5640_GetResolution+0xee>
 8001ef2:	8a3b      	ldrh	r3, [r7, #16]
 8001ef4:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001ef8:	d105      	bne.n	8001f06 <OV5640_GetResolution+0xee>
          {
            *Resolution = OV5640_R640x480;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	2203      	movs	r2, #3
 8001efe:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	e029      	b.n	8001f5a <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 480U) && (y_size == 272U))
 8001f06:	8a7b      	ldrh	r3, [r7, #18]
 8001f08:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001f0c:	d109      	bne.n	8001f22 <OV5640_GetResolution+0x10a>
 8001f0e:	8a3b      	ldrh	r3, [r7, #16]
 8001f10:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8001f14:	d105      	bne.n	8001f22 <OV5640_GetResolution+0x10a>
          {
            *Resolution = OV5640_R480x272;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	2202      	movs	r2, #2
 8001f1a:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	e01b      	b.n	8001f5a <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 320U) && (y_size == 240U))
 8001f22:	8a7b      	ldrh	r3, [r7, #18]
 8001f24:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001f28:	d108      	bne.n	8001f3c <OV5640_GetResolution+0x124>
 8001f2a:	8a3b      	ldrh	r3, [r7, #16]
 8001f2c:	2bf0      	cmp	r3, #240	; 0xf0
 8001f2e:	d105      	bne.n	8001f3c <OV5640_GetResolution+0x124>
          {
            *Resolution = OV5640_R320x240;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	2201      	movs	r2, #1
 8001f34:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	e00e      	b.n	8001f5a <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 160U) && (y_size == 120U))
 8001f3c:	8a7b      	ldrh	r3, [r7, #18]
 8001f3e:	2ba0      	cmp	r3, #160	; 0xa0
 8001f40:	d108      	bne.n	8001f54 <OV5640_GetResolution+0x13c>
 8001f42:	8a3b      	ldrh	r3, [r7, #16]
 8001f44:	2b78      	cmp	r3, #120	; 0x78
 8001f46:	d105      	bne.n	8001f54 <OV5640_GetResolution+0x13c>
          {
            *Resolution = OV5640_R160x120;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
 8001f52:	e002      	b.n	8001f5a <OV5640_GetResolution+0x142>
          }
          else
          {
            ret = OV5640_ERROR;
 8001f54:	f04f 33ff 	mov.w	r3, #4294967295
 8001f58:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 8001f5a:	697b      	ldr	r3, [r7, #20]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <OV5640_SetPolarities>:
  * @param  VsyncPolarity Polarity of the Vsync
  * @retval Component status
  */
int32_t OV5640_SetPolarities(OV5640_Object_t *pObj, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
 8001f70:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]

  if ((pObj == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d011      	beq.n	8001fa0 <OV5640_SetPolarities+0x3c>
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d002      	beq.n	8001f88 <OV5640_SetPolarities+0x24>
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d10b      	bne.n	8001fa0 <OV5640_SetPolarities+0x3c>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d002      	beq.n	8001f94 <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d105      	bne.n	8001fa0 <OV5640_SetPolarities+0x3c>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d006      	beq.n	8001fa8 <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 8001fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	e01e      	b.n	8001fe6 <OV5640_SetPolarities+0x82>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	015b      	lsls	r3, r3, #5
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	74fb      	strb	r3, [r7, #19]

    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f103 0018 	add.w	r0, r3, #24
 8001fcc:	f107 0213 	add.w	r2, r7, #19
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	f244 7140 	movw	r1, #18240	; 0x4740
 8001fd6:	f001 f841 	bl	800305c <ov5640_write_reg>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d002      	beq.n	8001fe6 <OV5640_SetPolarities+0x82>
    {
      ret = OV5640_ERROR;
 8001fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8001fe6:	697b      	ldr	r3, [r7, #20]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <OV5640_ReadID>:
  * @param  pObj  pointer to component object
  * @param  Id    pointer to component ID
  * @retval Component status
  */
int32_t OV5640_ReadID(OV5640_Object_t *pObj, uint32_t *Id)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  /* Initialize I2C */
  pObj->IO.Init();
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4798      	blx	r3

  /* Prepare the camera to be configured */
  tmp = 0x80;
 8002000:	2380      	movs	r3, #128	; 0x80
 8002002:	72fb      	strb	r3, [r7, #11]
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f103 0018 	add.w	r0, r3, #24
 800200a:	f107 020b 	add.w	r2, r7, #11
 800200e:	2301      	movs	r3, #1
 8002010:	f243 0108 	movw	r1, #12296	; 0x3008
 8002014:	f001 f822 	bl	800305c <ov5640_write_reg>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <OV5640_ReadID+0x36>
  {
    ret = OV5640_ERROR;
 800201e:	f04f 33ff 	mov.w	r3, #4294967295
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	e032      	b.n	800208c <OV5640_ReadID+0x9c>
  }
  else
  {
    (void)OV5640_Delay(pObj, 500);
 8002026:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 ffb3 	bl	8002f96 <OV5640_Delay>

    if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f103 0018 	add.w	r0, r3, #24
 8002036:	f107 020b 	add.w	r2, r7, #11
 800203a:	2301      	movs	r3, #1
 800203c:	f243 010a 	movw	r1, #12298	; 0x300a
 8002040:	f000 fff5 	bl	800302e <ov5640_read_reg>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <OV5640_ReadID+0x62>
    {
      ret = OV5640_ERROR;
 800204a:	f04f 33ff 	mov.w	r3, #4294967295
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	e01c      	b.n	800208c <OV5640_ReadID+0x9c>
    }
    else
    {
      *Id = (uint32_t)tmp << 8U;
 8002052:	7afb      	ldrb	r3, [r7, #11]
 8002054:	021a      	lsls	r2, r3, #8
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	601a      	str	r2, [r3, #0]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f103 0018 	add.w	r0, r3, #24
 8002060:	f107 020b 	add.w	r2, r7, #11
 8002064:	2301      	movs	r3, #1
 8002066:	f243 010b 	movw	r1, #12299	; 0x300b
 800206a:	f000 ffe0 	bl	800302e <ov5640_read_reg>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <OV5640_ReadID+0x8c>
      {
        ret = OV5640_ERROR;
 8002074:	f04f 33ff 	mov.w	r3, #4294967295
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	e007      	b.n	800208c <OV5640_ReadID+0x9c>
      }
      else
      {
        *Id |= tmp;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	7afa      	ldrb	r2, [r7, #11]
 8002082:	431a      	orrs	r2, r3
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	601a      	str	r2, [r3, #0]
        ret = OV5640_OK;
 8002088:	2300      	movs	r3, #0
 800208a:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Component status */
  return ret;
 800208c:	68fb      	ldr	r3, [r7, #12]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <OV5640_GetCapabilities>:
  * @param  pObj          pointer to component object
  * @param  Capabilities  pointer to component Capabilities
  * @retval Component status
  */
int32_t OV5640_GetCapabilities(OV5640_Object_t *pObj, OV5640_Capabilities_t *Capabilities)
{
 8002096:	b480      	push	{r7}
 8002098:	b085      	sub	sp, #20
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
 800209e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d103      	bne.n	80020ae <OV5640_GetCapabilities+0x18>
  {
    ret = OV5640_ERROR;
 80020a6:	f04f 33ff 	mov.w	r3, #4294967295
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	e01f      	b.n	80020ee <OV5640_GetCapabilities+0x58>
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	2201      	movs	r2, #1
 80020b2:	60da      	str	r2, [r3, #12]
    Capabilities->Config_Contrast      = 1;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	2201      	movs	r2, #1
 80020b8:	615a      	str	r2, [r3, #20]
    Capabilities->Config_HueDegree     = 1;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	2201      	movs	r2, #1
 80020be:	619a      	str	r2, [r3, #24]
    Capabilities->Config_LightMode     = 1;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	2201      	movs	r2, #1
 80020c4:	605a      	str	r2, [r3, #4]
    Capabilities->Config_MirrorFlip    = 1;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	2201      	movs	r2, #1
 80020ca:	61da      	str	r2, [r3, #28]
    Capabilities->Config_NightMode     = 1;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	2201      	movs	r2, #1
 80020d0:	625a      	str	r2, [r3, #36]	; 0x24
    Capabilities->Config_Resolution    = 1;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	2201      	movs	r2, #1
 80020d6:	601a      	str	r2, [r3, #0]
    Capabilities->Config_Saturation    = 1;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	2201      	movs	r2, #1
 80020dc:	611a      	str	r2, [r3, #16]
    Capabilities->Config_SpecialEffect = 1;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	2201      	movs	r2, #1
 80020e2:	609a      	str	r2, [r3, #8]
    Capabilities->Config_Zoom          = 1;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	2201      	movs	r2, #1
 80020e8:	621a      	str	r2, [r3, #32]

    ret = OV5640_OK;
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80020ee:	68fb      	ldr	r3, [r7, #12]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <OV5640_SetLightMode>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetLightMode(OV5640_Object_t *pObj, uint32_t LightMode)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
    {OV5640_AWB_G_GAIN_LSB, 0x00},
    {OV5640_AWB_B_GAIN_MSB, 0x04},
    {OV5640_AWB_B_GAIN_LSB, 0xF3},
  };

  tmp = 0x00;
 8002106:	2300      	movs	r3, #0
 8002108:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f103 0018 	add.w	r0, r3, #24
 8002110:	f107 020f 	add.w	r2, r7, #15
 8002114:	2301      	movs	r3, #1
 8002116:	f243 4106 	movw	r1, #13318	; 0x3406
 800211a:	f000 ff9f 	bl	800305c <ov5640_write_reg>
 800211e:	6178      	str	r0, [r7, #20]
  if (ret == OV5640_OK)
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10c      	bne.n	8002140 <OV5640_SetLightMode+0x44>
  {
    tmp = 0x46;
 8002126:	2346      	movs	r3, #70	; 0x46
 8002128:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f103 0018 	add.w	r0, r3, #24
 8002130:	f107 020f 	add.w	r2, r7, #15
 8002134:	2301      	movs	r3, #1
 8002136:	f245 1190 	movw	r1, #20880	; 0x5190
 800213a:	f000 ff8f 	bl	800305c <ov5640_write_reg>
 800213e:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10c      	bne.n	8002160 <OV5640_SetLightMode+0x64>
  {
    tmp = 0xF8;
 8002146:	23f8      	movs	r3, #248	; 0xf8
 8002148:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f103 0018 	add.w	r0, r3, #24
 8002150:	f107 020f 	add.w	r2, r7, #15
 8002154:	2301      	movs	r3, #1
 8002156:	f245 1191 	movw	r1, #20881	; 0x5191
 800215a:	f000 ff7f 	bl	800305c <ov5640_write_reg>
 800215e:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10c      	bne.n	8002180 <OV5640_SetLightMode+0x84>
  {
    tmp = 0x04;
 8002166:	2304      	movs	r3, #4
 8002168:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f103 0018 	add.w	r0, r3, #24
 8002170:	f107 020f 	add.w	r2, r7, #15
 8002174:	2301      	movs	r3, #1
 8002176:	f245 1192 	movw	r1, #20882	; 0x5192
 800217a:	f000 ff6f 	bl	800305c <ov5640_write_reg>
 800217e:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	2b00      	cmp	r3, #0
 8002184:	f040 80db 	bne.w	800233e <OV5640_SetLightMode+0x242>
  {
    switch (LightMode)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	3b01      	subs	r3, #1
 800218c:	2b07      	cmp	r3, #7
 800218e:	f200 80af 	bhi.w	80022f0 <OV5640_SetLightMode+0x1f4>
 8002192:	a201      	add	r2, pc, #4	; (adr r2, 8002198 <OV5640_SetLightMode+0x9c>)
 8002194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002198:	080021b9 	.word	0x080021b9
 800219c:	08002207 	.word	0x08002207
 80021a0:	080022f1 	.word	0x080022f1
 80021a4:	080022a3 	.word	0x080022a3
 80021a8:	080022f1 	.word	0x080022f1
 80021ac:	080022f1 	.word	0x080022f1
 80021b0:	080022f1 	.word	0x080022f1
 80021b4:	08002255 	.word	0x08002255
    {
      case OV5640_LIGHT_SUNNY:
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 80021b8:	2300      	movs	r3, #0
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	e01f      	b.n	80021fe <OV5640_SetLightMode+0x102>
        {
          if (ret != OV5640_ERROR)
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c4:	d018      	beq.n	80021f8 <OV5640_SetLightMode+0xfc>
          {
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 80021c6:	4a61      	ldr	r2, [pc, #388]	; (800234c <OV5640_SetLightMode+0x250>)
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	885b      	ldrh	r3, [r3, #2]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f103 0018 	add.w	r0, r3, #24
 80021da:	4a5c      	ldr	r2, [pc, #368]	; (800234c <OV5640_SetLightMode+0x250>)
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80021e2:	f107 020f 	add.w	r2, r7, #15
 80021e6:	2301      	movs	r3, #1
 80021e8:	f000 ff38 	bl	800305c <ov5640_write_reg>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d002      	beq.n	80021f8 <OV5640_SetLightMode+0xfc>
            {
              ret = OV5640_ERROR;
 80021f2:	f04f 33ff 	mov.w	r3, #4294967295
 80021f6:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	3301      	adds	r3, #1
 80021fc:	613b      	str	r3, [r7, #16]
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	2b06      	cmp	r3, #6
 8002202:	d9dc      	bls.n	80021be <OV5640_SetLightMode+0xc2>
            }
          }
        }
        break;
 8002204:	e09c      	b.n	8002340 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_OFFICE:
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 8002206:	2300      	movs	r3, #0
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	e01f      	b.n	800224c <OV5640_SetLightMode+0x150>
        {
          if (ret != OV5640_ERROR)
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002212:	d018      	beq.n	8002246 <OV5640_SetLightMode+0x14a>
          {
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 8002214:	4a4e      	ldr	r2, [pc, #312]	; (8002350 <OV5640_SetLightMode+0x254>)
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	885b      	ldrh	r3, [r3, #2]
 800221e:	b2db      	uxtb	r3, r3
 8002220:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f103 0018 	add.w	r0, r3, #24
 8002228:	4a49      	ldr	r2, [pc, #292]	; (8002350 <OV5640_SetLightMode+0x254>)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002230:	f107 020f 	add.w	r2, r7, #15
 8002234:	2301      	movs	r3, #1
 8002236:	f000 ff11 	bl	800305c <ov5640_write_reg>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d002      	beq.n	8002246 <OV5640_SetLightMode+0x14a>
            {
              ret = OV5640_ERROR;
 8002240:	f04f 33ff 	mov.w	r3, #4294967295
 8002244:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	3301      	adds	r3, #1
 800224a:	613b      	str	r3, [r7, #16]
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	2b06      	cmp	r3, #6
 8002250:	d9dc      	bls.n	800220c <OV5640_SetLightMode+0x110>
            }
          }
        }
        break;
 8002252:	e075      	b.n	8002340 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_CLOUDY:
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8002254:	2300      	movs	r3, #0
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	e01f      	b.n	800229a <OV5640_SetLightMode+0x19e>
        {
          if (ret != OV5640_ERROR)
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002260:	d018      	beq.n	8002294 <OV5640_SetLightMode+0x198>
          {
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8002262:	4a3c      	ldr	r2, [pc, #240]	; (8002354 <OV5640_SetLightMode+0x258>)
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	885b      	ldrh	r3, [r3, #2]
 800226c:	b2db      	uxtb	r3, r3
 800226e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f103 0018 	add.w	r0, r3, #24
 8002276:	4a37      	ldr	r2, [pc, #220]	; (8002354 <OV5640_SetLightMode+0x258>)
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800227e:	f107 020f 	add.w	r2, r7, #15
 8002282:	2301      	movs	r3, #1
 8002284:	f000 feea 	bl	800305c <ov5640_write_reg>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d002      	beq.n	8002294 <OV5640_SetLightMode+0x198>
            {
              ret = OV5640_ERROR;
 800228e:	f04f 33ff 	mov.w	r3, #4294967295
 8002292:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	3301      	adds	r3, #1
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	2b06      	cmp	r3, #6
 800229e:	d9dc      	bls.n	800225a <OV5640_SetLightMode+0x15e>
            }
          }
        }
        break;
 80022a0:	e04e      	b.n	8002340 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_HOME:
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 80022a2:	2300      	movs	r3, #0
 80022a4:	613b      	str	r3, [r7, #16]
 80022a6:	e01f      	b.n	80022e8 <OV5640_SetLightMode+0x1ec>
        {
          if (ret != OV5640_ERROR)
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ae:	d018      	beq.n	80022e2 <OV5640_SetLightMode+0x1e6>
          {
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 80022b0:	4a29      	ldr	r2, [pc, #164]	; (8002358 <OV5640_SetLightMode+0x25c>)
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	885b      	ldrh	r3, [r3, #2]
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f103 0018 	add.w	r0, r3, #24
 80022c4:	4a24      	ldr	r2, [pc, #144]	; (8002358 <OV5640_SetLightMode+0x25c>)
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80022cc:	f107 020f 	add.w	r2, r7, #15
 80022d0:	2301      	movs	r3, #1
 80022d2:	f000 fec3 	bl	800305c <ov5640_write_reg>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d002      	beq.n	80022e2 <OV5640_SetLightMode+0x1e6>
            {
              ret = OV5640_ERROR;
 80022dc:	f04f 33ff 	mov.w	r3, #4294967295
 80022e0:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	3301      	adds	r3, #1
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	2b06      	cmp	r3, #6
 80022ec:	d9dc      	bls.n	80022a8 <OV5640_SetLightMode+0x1ac>
            }
          }
        }
        break;
 80022ee:	e027      	b.n	8002340 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_AUTO:
      default :
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 80022f0:	2300      	movs	r3, #0
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	e01f      	b.n	8002336 <OV5640_SetLightMode+0x23a>
        {
          if (ret != OV5640_ERROR)
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022fc:	d018      	beq.n	8002330 <OV5640_SetLightMode+0x234>
          {
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 80022fe:	4a17      	ldr	r2, [pc, #92]	; (800235c <OV5640_SetLightMode+0x260>)
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	885b      	ldrh	r3, [r3, #2]
 8002308:	b2db      	uxtb	r3, r3
 800230a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f103 0018 	add.w	r0, r3, #24
 8002312:	4a12      	ldr	r2, [pc, #72]	; (800235c <OV5640_SetLightMode+0x260>)
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800231a:	f107 020f 	add.w	r2, r7, #15
 800231e:	2301      	movs	r3, #1
 8002320:	f000 fe9c 	bl	800305c <ov5640_write_reg>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d002      	beq.n	8002330 <OV5640_SetLightMode+0x234>
            {
              ret = OV5640_ERROR;
 800232a:	f04f 33ff 	mov.w	r3, #4294967295
 800232e:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	3301      	adds	r3, #1
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	2b06      	cmp	r3, #6
 800233a:	d9dc      	bls.n	80022f6 <OV5640_SetLightMode+0x1fa>
            }
          }
        }
        break;
 800233c:	e000      	b.n	8002340 <OV5640_SetLightMode+0x244>
    }
  }
 800233e:	bf00      	nop
  return ret;
 8002340:	697b      	ldr	r3, [r7, #20]
}
 8002342:	4618      	mov	r0, r3
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	08010390 	.word	0x08010390
 8002350:	080103ac 	.word	0x080103ac
 8002354:	080103c8 	.word	0x080103c8
 8002358:	080103e4 	.word	0x080103e4
 800235c:	08010400 	.word	0x08010400

08002360 <OV5640_SetColorEffect>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetColorEffect(OV5640_Object_t *pObj, uint32_t Effect)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  switch (Effect)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	3b01      	subs	r3, #1
 800236e:	2b1f      	cmp	r3, #31
 8002370:	f200 81c0 	bhi.w	80026f4 <OV5640_SetColorEffect+0x394>
 8002374:	a201      	add	r2, pc, #4	; (adr r2, 800237c <OV5640_SetColorEffect+0x1c>)
 8002376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800237a:	bf00      	nop
 800237c:	080023fd 	.word	0x080023fd
 8002380:	08002487 	.word	0x08002487
 8002384:	080026f5 	.word	0x080026f5
 8002388:	08002511 	.word	0x08002511
 800238c:	080026f5 	.word	0x080026f5
 8002390:	080026f5 	.word	0x080026f5
 8002394:	080026f5 	.word	0x080026f5
 8002398:	0800259b 	.word	0x0800259b
 800239c:	080026f5 	.word	0x080026f5
 80023a0:	080026f5 	.word	0x080026f5
 80023a4:	080026f5 	.word	0x080026f5
 80023a8:	080026f5 	.word	0x080026f5
 80023ac:	080026f5 	.word	0x080026f5
 80023b0:	080026f5 	.word	0x080026f5
 80023b4:	080026f5 	.word	0x080026f5
 80023b8:	08002625 	.word	0x08002625
 80023bc:	080026f5 	.word	0x080026f5
 80023c0:	080026f5 	.word	0x080026f5
 80023c4:	080026f5 	.word	0x080026f5
 80023c8:	080026f5 	.word	0x080026f5
 80023cc:	080026f5 	.word	0x080026f5
 80023d0:	080026f5 	.word	0x080026f5
 80023d4:	080026f5 	.word	0x080026f5
 80023d8:	080026f5 	.word	0x080026f5
 80023dc:	080026f5 	.word	0x080026f5
 80023e0:	080026f5 	.word	0x080026f5
 80023e4:	080026f5 	.word	0x080026f5
 80023e8:	080026f5 	.word	0x080026f5
 80023ec:	080026f5 	.word	0x080026f5
 80023f0:	080026f5 	.word	0x080026f5
 80023f4:	080026f5 	.word	0x080026f5
 80023f8:	080026ad 	.word	0x080026ad
  {
    case OV5640_COLOR_EFFECT_BLUE:
      tmp = 0xFF;
 80023fc:	23ff      	movs	r3, #255	; 0xff
 80023fe:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f103 0018 	add.w	r0, r3, #24
 8002406:	f107 020b 	add.w	r2, r7, #11
 800240a:	2301      	movs	r3, #1
 800240c:	f245 0101 	movw	r1, #20481	; 0x5001
 8002410:	f000 fe24 	bl	800305c <ov5640_write_reg>
 8002414:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10c      	bne.n	8002436 <OV5640_SetColorEffect+0xd6>
      {
        tmp = 0x18;
 800241c:	2318      	movs	r3, #24
 800241e:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f103 0018 	add.w	r0, r3, #24
 8002426:	f107 020b 	add.w	r2, r7, #11
 800242a:	2301      	movs	r3, #1
 800242c:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002430:	f000 fe14 	bl	800305c <ov5640_write_reg>
 8002434:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d10c      	bne.n	8002456 <OV5640_SetColorEffect+0xf6>
      {
        tmp = 0xA0;
 800243c:	23a0      	movs	r3, #160	; 0xa0
 800243e:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f103 0018 	add.w	r0, r3, #24
 8002446:	f107 020b 	add.w	r2, r7, #11
 800244a:	2301      	movs	r3, #1
 800244c:	f245 5183 	movw	r1, #21891	; 0x5583
 8002450:	f000 fe04 	bl	800305c <ov5640_write_reg>
 8002454:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10c      	bne.n	8002476 <OV5640_SetColorEffect+0x116>
      {
        tmp = 0x40;
 800245c:	2340      	movs	r3, #64	; 0x40
 800245e:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f103 0018 	add.w	r0, r3, #24
 8002466:	f107 020b 	add.w	r2, r7, #11
 800246a:	2301      	movs	r3, #1
 800246c:	f245 5184 	movw	r1, #21892	; 0x5584
 8002470:	f000 fdf4 	bl	800305c <ov5640_write_reg>
 8002474:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 815f 	beq.w	800273c <OV5640_SetColorEffect+0x3dc>
      {
        ret = OV5640_ERROR;
 800247e:	f04f 33ff 	mov.w	r3, #4294967295
 8002482:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002484:	e15a      	b.n	800273c <OV5640_SetColorEffect+0x3dc>

    case OV5640_COLOR_EFFECT_RED:
      tmp = 0xFF;
 8002486:	23ff      	movs	r3, #255	; 0xff
 8002488:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f103 0018 	add.w	r0, r3, #24
 8002490:	f107 020b 	add.w	r2, r7, #11
 8002494:	2301      	movs	r3, #1
 8002496:	f245 0101 	movw	r1, #20481	; 0x5001
 800249a:	f000 fddf 	bl	800305c <ov5640_write_reg>
 800249e:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10c      	bne.n	80024c0 <OV5640_SetColorEffect+0x160>
      {
        tmp = 0x18;
 80024a6:	2318      	movs	r3, #24
 80024a8:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f103 0018 	add.w	r0, r3, #24
 80024b0:	f107 020b 	add.w	r2, r7, #11
 80024b4:	2301      	movs	r3, #1
 80024b6:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80024ba:	f000 fdcf 	bl	800305c <ov5640_write_reg>
 80024be:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10c      	bne.n	80024e0 <OV5640_SetColorEffect+0x180>
      {
        tmp = 0x80;
 80024c6:	2380      	movs	r3, #128	; 0x80
 80024c8:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f103 0018 	add.w	r0, r3, #24
 80024d0:	f107 020b 	add.w	r2, r7, #11
 80024d4:	2301      	movs	r3, #1
 80024d6:	f245 5183 	movw	r1, #21891	; 0x5583
 80024da:	f000 fdbf 	bl	800305c <ov5640_write_reg>
 80024de:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10c      	bne.n	8002500 <OV5640_SetColorEffect+0x1a0>
      {
        tmp = 0xC0;
 80024e6:	23c0      	movs	r3, #192	; 0xc0
 80024e8:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f103 0018 	add.w	r0, r3, #24
 80024f0:	f107 020b 	add.w	r2, r7, #11
 80024f4:	2301      	movs	r3, #1
 80024f6:	f245 5184 	movw	r1, #21892	; 0x5584
 80024fa:	f000 fdaf 	bl	800305c <ov5640_write_reg>
 80024fe:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 811c 	beq.w	8002740 <OV5640_SetColorEffect+0x3e0>
      {
        ret = OV5640_ERROR;
 8002508:	f04f 33ff 	mov.w	r3, #4294967295
 800250c:	60fb      	str	r3, [r7, #12]
      }
      break;
 800250e:	e117      	b.n	8002740 <OV5640_SetColorEffect+0x3e0>

    case OV5640_COLOR_EFFECT_GREEN:
      tmp = 0xFF;
 8002510:	23ff      	movs	r3, #255	; 0xff
 8002512:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f103 0018 	add.w	r0, r3, #24
 800251a:	f107 020b 	add.w	r2, r7, #11
 800251e:	2301      	movs	r3, #1
 8002520:	f245 0101 	movw	r1, #20481	; 0x5001
 8002524:	f000 fd9a 	bl	800305c <ov5640_write_reg>
 8002528:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10c      	bne.n	800254a <OV5640_SetColorEffect+0x1ea>
      {
        tmp = 0x18;
 8002530:	2318      	movs	r3, #24
 8002532:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f103 0018 	add.w	r0, r3, #24
 800253a:	f107 020b 	add.w	r2, r7, #11
 800253e:	2301      	movs	r3, #1
 8002540:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002544:	f000 fd8a 	bl	800305c <ov5640_write_reg>
 8002548:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10c      	bne.n	800256a <OV5640_SetColorEffect+0x20a>
      {
        tmp = 0x60;
 8002550:	2360      	movs	r3, #96	; 0x60
 8002552:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f103 0018 	add.w	r0, r3, #24
 800255a:	f107 020b 	add.w	r2, r7, #11
 800255e:	2301      	movs	r3, #1
 8002560:	f245 5183 	movw	r1, #21891	; 0x5583
 8002564:	f000 fd7a 	bl	800305c <ov5640_write_reg>
 8002568:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10c      	bne.n	800258a <OV5640_SetColorEffect+0x22a>
      {
        tmp = 0x60;
 8002570:	2360      	movs	r3, #96	; 0x60
 8002572:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f103 0018 	add.w	r0, r3, #24
 800257a:	f107 020b 	add.w	r2, r7, #11
 800257e:	2301      	movs	r3, #1
 8002580:	f245 5184 	movw	r1, #21892	; 0x5584
 8002584:	f000 fd6a 	bl	800305c <ov5640_write_reg>
 8002588:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80d9 	beq.w	8002744 <OV5640_SetColorEffect+0x3e4>
      {
        ret = OV5640_ERROR;
 8002592:	f04f 33ff 	mov.w	r3, #4294967295
 8002596:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002598:	e0d4      	b.n	8002744 <OV5640_SetColorEffect+0x3e4>

    case OV5640_COLOR_EFFECT_BW:
      tmp = 0xFF;
 800259a:	23ff      	movs	r3, #255	; 0xff
 800259c:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f103 0018 	add.w	r0, r3, #24
 80025a4:	f107 020b 	add.w	r2, r7, #11
 80025a8:	2301      	movs	r3, #1
 80025aa:	f245 0101 	movw	r1, #20481	; 0x5001
 80025ae:	f000 fd55 	bl	800305c <ov5640_write_reg>
 80025b2:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10c      	bne.n	80025d4 <OV5640_SetColorEffect+0x274>
      {
        tmp = 0x18;
 80025ba:	2318      	movs	r3, #24
 80025bc:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f103 0018 	add.w	r0, r3, #24
 80025c4:	f107 020b 	add.w	r2, r7, #11
 80025c8:	2301      	movs	r3, #1
 80025ca:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80025ce:	f000 fd45 	bl	800305c <ov5640_write_reg>
 80025d2:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10c      	bne.n	80025f4 <OV5640_SetColorEffect+0x294>
      {
        tmp = 0x80;
 80025da:	2380      	movs	r3, #128	; 0x80
 80025dc:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f103 0018 	add.w	r0, r3, #24
 80025e4:	f107 020b 	add.w	r2, r7, #11
 80025e8:	2301      	movs	r3, #1
 80025ea:	f245 5183 	movw	r1, #21891	; 0x5583
 80025ee:	f000 fd35 	bl	800305c <ov5640_write_reg>
 80025f2:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10c      	bne.n	8002614 <OV5640_SetColorEffect+0x2b4>
      {
        tmp = 0x80;
 80025fa:	2380      	movs	r3, #128	; 0x80
 80025fc:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f103 0018 	add.w	r0, r3, #24
 8002604:	f107 020b 	add.w	r2, r7, #11
 8002608:	2301      	movs	r3, #1
 800260a:	f245 5184 	movw	r1, #21892	; 0x5584
 800260e:	f000 fd25 	bl	800305c <ov5640_write_reg>
 8002612:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 8096 	beq.w	8002748 <OV5640_SetColorEffect+0x3e8>
      {
        ret = OV5640_ERROR;
 800261c:	f04f 33ff 	mov.w	r3, #4294967295
 8002620:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002622:	e091      	b.n	8002748 <OV5640_SetColorEffect+0x3e8>

    case OV5640_COLOR_EFFECT_SEPIA:
      tmp = 0xFF;
 8002624:	23ff      	movs	r3, #255	; 0xff
 8002626:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f103 0018 	add.w	r0, r3, #24
 800262e:	f107 020b 	add.w	r2, r7, #11
 8002632:	2301      	movs	r3, #1
 8002634:	f245 0101 	movw	r1, #20481	; 0x5001
 8002638:	f000 fd10 	bl	800305c <ov5640_write_reg>
 800263c:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10c      	bne.n	800265e <OV5640_SetColorEffect+0x2fe>
      {
        tmp = 0x18;
 8002644:	2318      	movs	r3, #24
 8002646:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f103 0018 	add.w	r0, r3, #24
 800264e:	f107 020b 	add.w	r2, r7, #11
 8002652:	2301      	movs	r3, #1
 8002654:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002658:	f000 fd00 	bl	800305c <ov5640_write_reg>
 800265c:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10c      	bne.n	800267e <OV5640_SetColorEffect+0x31e>
      {
        tmp = 0x40;
 8002664:	2340      	movs	r3, #64	; 0x40
 8002666:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f103 0018 	add.w	r0, r3, #24
 800266e:	f107 020b 	add.w	r2, r7, #11
 8002672:	2301      	movs	r3, #1
 8002674:	f245 5183 	movw	r1, #21891	; 0x5583
 8002678:	f000 fcf0 	bl	800305c <ov5640_write_reg>
 800267c:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10c      	bne.n	800269e <OV5640_SetColorEffect+0x33e>
      {
        tmp = 0xA0;
 8002684:	23a0      	movs	r3, #160	; 0xa0
 8002686:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f103 0018 	add.w	r0, r3, #24
 800268e:	f107 020b 	add.w	r2, r7, #11
 8002692:	2301      	movs	r3, #1
 8002694:	f245 5184 	movw	r1, #21892	; 0x5584
 8002698:	f000 fce0 	bl	800305c <ov5640_write_reg>
 800269c:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d053      	beq.n	800274c <OV5640_SetColorEffect+0x3ec>
      {
        ret = OV5640_ERROR;
 80026a4:	f04f 33ff 	mov.w	r3, #4294967295
 80026a8:	60fb      	str	r3, [r7, #12]
      }
      break;
 80026aa:	e04f      	b.n	800274c <OV5640_SetColorEffect+0x3ec>

    case OV5640_COLOR_EFFECT_NEGATIVE:
      tmp = 0xFF;
 80026ac:	23ff      	movs	r3, #255	; 0xff
 80026ae:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f103 0018 	add.w	r0, r3, #24
 80026b6:	f107 020b 	add.w	r2, r7, #11
 80026ba:	2301      	movs	r3, #1
 80026bc:	f245 0101 	movw	r1, #20481	; 0x5001
 80026c0:	f000 fccc 	bl	800305c <ov5640_write_reg>
 80026c4:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10c      	bne.n	80026e6 <OV5640_SetColorEffect+0x386>
      {
        tmp = 0x40;
 80026cc:	2340      	movs	r3, #64	; 0x40
 80026ce:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f103 0018 	add.w	r0, r3, #24
 80026d6:	f107 020b 	add.w	r2, r7, #11
 80026da:	2301      	movs	r3, #1
 80026dc:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80026e0:	f000 fcbc 	bl	800305c <ov5640_write_reg>
 80026e4:	60f8      	str	r0, [r7, #12]
      }
      if (ret != OV5640_OK)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d031      	beq.n	8002750 <OV5640_SetColorEffect+0x3f0>
      {
        ret = OV5640_ERROR;
 80026ec:	f04f 33ff 	mov.w	r3, #4294967295
 80026f0:	60fb      	str	r3, [r7, #12]
      }
      break;
 80026f2:	e02d      	b.n	8002750 <OV5640_SetColorEffect+0x3f0>

    case OV5640_COLOR_EFFECT_NONE:
    default :
      tmp = 0x7F;
 80026f4:	237f      	movs	r3, #127	; 0x7f
 80026f6:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f103 0018 	add.w	r0, r3, #24
 80026fe:	f107 020b 	add.w	r2, r7, #11
 8002702:	2301      	movs	r3, #1
 8002704:	f245 0101 	movw	r1, #20481	; 0x5001
 8002708:	f000 fca8 	bl	800305c <ov5640_write_reg>
 800270c:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10c      	bne.n	800272e <OV5640_SetColorEffect+0x3ce>
      {
        tmp = 0x00;
 8002714:	2300      	movs	r3, #0
 8002716:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f103 0018 	add.w	r0, r3, #24
 800271e:	f107 020b 	add.w	r2, r7, #11
 8002722:	2301      	movs	r3, #1
 8002724:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002728:	f000 fc98 	bl	800305c <ov5640_write_reg>
 800272c:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00f      	beq.n	8002754 <OV5640_SetColorEffect+0x3f4>
      {
        ret = OV5640_ERROR;
 8002734:	f04f 33ff 	mov.w	r3, #4294967295
 8002738:	60fb      	str	r3, [r7, #12]
      }

      break;
 800273a:	e00b      	b.n	8002754 <OV5640_SetColorEffect+0x3f4>
      break;
 800273c:	bf00      	nop
 800273e:	e00a      	b.n	8002756 <OV5640_SetColorEffect+0x3f6>
      break;
 8002740:	bf00      	nop
 8002742:	e008      	b.n	8002756 <OV5640_SetColorEffect+0x3f6>
      break;
 8002744:	bf00      	nop
 8002746:	e006      	b.n	8002756 <OV5640_SetColorEffect+0x3f6>
      break;
 8002748:	bf00      	nop
 800274a:	e004      	b.n	8002756 <OV5640_SetColorEffect+0x3f6>
      break;
 800274c:	bf00      	nop
 800274e:	e002      	b.n	8002756 <OV5640_SetColorEffect+0x3f6>
      break;
 8002750:	bf00      	nop
 8002752:	e000      	b.n	8002756 <OV5640_SetColorEffect+0x3f6>
      break;
 8002754:	bf00      	nop
  }

  return ret;
 8002756:	68fb      	ldr	r3, [r7, #12]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <OV5640_SetBrightness>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetBrightness(OV5640_Object_t *pObj, int32_t Level)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b088      	sub	sp, #32
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 800276a:	4a34      	ldr	r2, [pc, #208]	; (800283c <OV5640_SetBrightness+0xdc>)
 800276c:	f107 0310 	add.w	r3, r7, #16
 8002770:	ca07      	ldmia	r2, {r0, r1, r2}
 8002772:	c303      	stmia	r3!, {r0, r1}
 8002774:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 8002776:	23ff      	movs	r3, #255	; 0xff
 8002778:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f103 0018 	add.w	r0, r3, #24
 8002780:	f107 020f 	add.w	r2, r7, #15
 8002784:	2301      	movs	r3, #1
 8002786:	f245 0101 	movw	r1, #20481	; 0x5001
 800278a:	f000 fc67 	bl	800305c <ov5640_write_reg>
 800278e:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d111      	bne.n	80027ba <OV5640_SetBrightness+0x5a>
  {
    tmp = brightness_level[Level + 4];
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	3304      	adds	r3, #4
 800279a:	3320      	adds	r3, #32
 800279c:	443b      	add	r3, r7
 800279e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80027a2:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f103 0018 	add.w	r0, r3, #24
 80027aa:	f107 020f 	add.w	r2, r7, #15
 80027ae:	2301      	movs	r3, #1
 80027b0:	f245 5187 	movw	r1, #21895	; 0x5587
 80027b4:	f000 fc52 	bl	800305c <ov5640_write_reg>
 80027b8:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10c      	bne.n	80027da <OV5640_SetBrightness+0x7a>
  {
    tmp = 0x04;
 80027c0:	2304      	movs	r3, #4
 80027c2:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f103 0018 	add.w	r0, r3, #24
 80027ca:	f107 020f 	add.w	r2, r7, #15
 80027ce:	2301      	movs	r3, #1
 80027d0:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80027d4:	f000 fc42 	bl	800305c <ov5640_write_reg>
 80027d8:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d127      	bne.n	8002830 <OV5640_SetBrightness+0xd0>
  {
    if (Level < 0)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	da12      	bge.n	800280c <OV5640_SetBrightness+0xac>
    {
      tmp = 0x01;
 80027e6:	2301      	movs	r3, #1
 80027e8:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f103 0018 	add.w	r0, r3, #24
 80027f0:	f107 020f 	add.w	r2, r7, #15
 80027f4:	2301      	movs	r3, #1
 80027f6:	f245 5188 	movw	r1, #21896	; 0x5588
 80027fa:	f000 fc2f 	bl	800305c <ov5640_write_reg>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d015      	beq.n	8002830 <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 8002804:	f04f 33ff 	mov.w	r3, #4294967295
 8002808:	61fb      	str	r3, [r7, #28]
 800280a:	e011      	b.n	8002830 <OV5640_SetBrightness+0xd0>
      }
    }
    else
    {
      tmp = 0x09;
 800280c:	2309      	movs	r3, #9
 800280e:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f103 0018 	add.w	r0, r3, #24
 8002816:	f107 020f 	add.w	r2, r7, #15
 800281a:	2301      	movs	r3, #1
 800281c:	f245 5188 	movw	r1, #21896	; 0x5588
 8002820:	f000 fc1c 	bl	800305c <ov5640_write_reg>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d002      	beq.n	8002830 <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 800282a:	f04f 33ff 	mov.w	r3, #4294967295
 800282e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ret;
 8002830:	69fb      	ldr	r3, [r7, #28]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3720      	adds	r7, #32
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	0800fed8 	.word	0x0800fed8

08002840 <OV5640_SetSaturation>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetSaturation(OV5640_Object_t *pObj, int32_t Level)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 800284a:	4a30      	ldr	r2, [pc, #192]	; (800290c <OV5640_SetSaturation+0xcc>)
 800284c:	f107 0310 	add.w	r3, r7, #16
 8002850:	ca07      	ldmia	r2, {r0, r1, r2}
 8002852:	c303      	stmia	r3!, {r0, r1}
 8002854:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 8002856:	23ff      	movs	r3, #255	; 0xff
 8002858:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f103 0018 	add.w	r0, r3, #24
 8002860:	f107 020f 	add.w	r2, r7, #15
 8002864:	2301      	movs	r3, #1
 8002866:	f245 0101 	movw	r1, #20481	; 0x5001
 800286a:	f000 fbf7 	bl	800305c <ov5640_write_reg>
 800286e:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d111      	bne.n	800289a <OV5640_SetSaturation+0x5a>
  {
    tmp = saturation_level[Level + 4];
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	3304      	adds	r3, #4
 800287a:	3320      	adds	r3, #32
 800287c:	443b      	add	r3, r7
 800287e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002882:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f103 0018 	add.w	r0, r3, #24
 800288a:	f107 020f 	add.w	r2, r7, #15
 800288e:	2301      	movs	r3, #1
 8002890:	f245 5183 	movw	r1, #21891	; 0x5583
 8002894:	f000 fbe2 	bl	800305c <ov5640_write_reg>
 8002898:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10a      	bne.n	80028b6 <OV5640_SetSaturation+0x76>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f103 0018 	add.w	r0, r3, #24
 80028a6:	f107 020f 	add.w	r2, r7, #15
 80028aa:	2301      	movs	r3, #1
 80028ac:	f245 5184 	movw	r1, #21892	; 0x5584
 80028b0:	f000 fbd4 	bl	800305c <ov5640_write_reg>
 80028b4:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10c      	bne.n	80028d6 <OV5640_SetSaturation+0x96>
  {
    tmp = 0x02;
 80028bc:	2302      	movs	r3, #2
 80028be:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f103 0018 	add.w	r0, r3, #24
 80028c6:	f107 020f 	add.w	r2, r7, #15
 80028ca:	2301      	movs	r3, #1
 80028cc:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80028d0:	f000 fbc4 	bl	800305c <ov5640_write_reg>
 80028d4:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10c      	bne.n	80028f6 <OV5640_SetSaturation+0xb6>
  {
    tmp = 0x41;
 80028dc:	2341      	movs	r3, #65	; 0x41
 80028de:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f103 0018 	add.w	r0, r3, #24
 80028e6:	f107 020f 	add.w	r2, r7, #15
 80028ea:	2301      	movs	r3, #1
 80028ec:	f245 5188 	movw	r1, #21896	; 0x5588
 80028f0:	f000 fbb4 	bl	800305c <ov5640_write_reg>
 80028f4:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d002      	beq.n	8002902 <OV5640_SetSaturation+0xc2>
  {
    ret = OV5640_ERROR;
 80028fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002900:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8002902:	69fb      	ldr	r3, [r7, #28]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3720      	adds	r7, #32
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	0800fee4 	.word	0x0800fee4

08002910 <OV5640_SetContrast>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetContrast(OV5640_Object_t *pObj, int32_t Level)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b088      	sub	sp, #32
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 800291a:	4a30      	ldr	r2, [pc, #192]	; (80029dc <OV5640_SetContrast+0xcc>)
 800291c:	f107 0310 	add.w	r3, r7, #16
 8002920:	ca07      	ldmia	r2, {r0, r1, r2}
 8002922:	c303      	stmia	r3!, {r0, r1}
 8002924:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 8002926:	23ff      	movs	r3, #255	; 0xff
 8002928:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f103 0018 	add.w	r0, r3, #24
 8002930:	f107 020f 	add.w	r2, r7, #15
 8002934:	2301      	movs	r3, #1
 8002936:	f245 0101 	movw	r1, #20481	; 0x5001
 800293a:	f000 fb8f 	bl	800305c <ov5640_write_reg>
 800293e:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10c      	bne.n	8002960 <OV5640_SetContrast+0x50>
  {
    tmp = 0x04;
 8002946:	2304      	movs	r3, #4
 8002948:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f103 0018 	add.w	r0, r3, #24
 8002950:	f107 020f 	add.w	r2, r7, #15
 8002954:	2301      	movs	r3, #1
 8002956:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800295a:	f000 fb7f 	bl	800305c <ov5640_write_reg>
 800295e:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d111      	bne.n	800298a <OV5640_SetContrast+0x7a>
  {
    tmp = contrast_level[Level + 4];
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	3304      	adds	r3, #4
 800296a:	3320      	adds	r3, #32
 800296c:	443b      	add	r3, r7
 800296e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002972:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f103 0018 	add.w	r0, r3, #24
 800297a:	f107 020f 	add.w	r2, r7, #15
 800297e:	2301      	movs	r3, #1
 8002980:	f245 5186 	movw	r1, #21894	; 0x5586
 8002984:	f000 fb6a 	bl	800305c <ov5640_write_reg>
 8002988:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10a      	bne.n	80029a6 <OV5640_SetContrast+0x96>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL5, &tmp, 1);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f103 0018 	add.w	r0, r3, #24
 8002996:	f107 020f 	add.w	r2, r7, #15
 800299a:	2301      	movs	r3, #1
 800299c:	f245 5185 	movw	r1, #21893	; 0x5585
 80029a0:	f000 fb5c 	bl	800305c <ov5640_write_reg>
 80029a4:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10c      	bne.n	80029c6 <OV5640_SetContrast+0xb6>
  {
    tmp = 0x41;
 80029ac:	2341      	movs	r3, #65	; 0x41
 80029ae:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f103 0018 	add.w	r0, r3, #24
 80029b6:	f107 020f 	add.w	r2, r7, #15
 80029ba:	2301      	movs	r3, #1
 80029bc:	f245 5188 	movw	r1, #21896	; 0x5588
 80029c0:	f000 fb4c 	bl	800305c <ov5640_write_reg>
 80029c4:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d002      	beq.n	80029d2 <OV5640_SetContrast+0xc2>
  {
    ret = OV5640_ERROR;
 80029cc:	f04f 33ff 	mov.w	r3, #4294967295
 80029d0:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 80029d2:	69fb      	ldr	r3, [r7, #28]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3720      	adds	r7, #32
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	0800fef0 	.word	0x0800fef0

080029e0 <OV5640_SetHueDegree>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetHueDegree(OV5640_Object_t *pObj, int32_t Degree)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08e      	sub	sp, #56	; 0x38
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 80029ea:	4a3c      	ldr	r2, [pc, #240]	; (8002adc <OV5640_SetHueDegree+0xfc>)
 80029ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80029f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x6FU
                                     };
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 80029f6:	4a3a      	ldr	r2, [pc, #232]	; (8002ae0 <OV5640_SetHueDegree+0x100>)
 80029f8:	f107 031c 	add.w	r3, r7, #28
 80029fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80029fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x40U
                                     };
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 8002a02:	4a38      	ldr	r2, [pc, #224]	; (8002ae4 <OV5640_SetHueDegree+0x104>)
 8002a04:	f107 0310 	add.w	r3, r7, #16
 8002a08:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x31U
                                     };
  uint8_t tmp;

  tmp = 0xFF;
 8002a0e:	23ff      	movs	r3, #255	; 0xff
 8002a10:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f103 0018 	add.w	r0, r3, #24
 8002a18:	f107 020f 	add.w	r2, r7, #15
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	f245 0101 	movw	r1, #20481	; 0x5001
 8002a22:	f000 fb1b 	bl	800305c <ov5640_write_reg>
 8002a26:	6378      	str	r0, [r7, #52]	; 0x34

  if (ret == OV5640_OK)
 8002a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10c      	bne.n	8002a48 <OV5640_SetHueDegree+0x68>
  {
    tmp = 0x01;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f103 0018 	add.w	r0, r3, #24
 8002a38:	f107 020f 	add.w	r2, r7, #15
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002a42:	f000 fb0b 	bl	800305c <ov5640_write_reg>
 8002a46:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8002a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d111      	bne.n	8002a72 <OV5640_SetHueDegree+0x92>
  {
    tmp = hue_degree_ctrl1[Degree + 6];
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	3306      	adds	r3, #6
 8002a52:	3338      	adds	r3, #56	; 0x38
 8002a54:	443b      	add	r3, r7
 8002a56:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002a5a:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f103 0018 	add.w	r0, r3, #24
 8002a62:	f107 020f 	add.w	r2, r7, #15
 8002a66:	2301      	movs	r3, #1
 8002a68:	f245 5181 	movw	r1, #21889	; 0x5581
 8002a6c:	f000 faf6 	bl	800305c <ov5640_write_reg>
 8002a70:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8002a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d111      	bne.n	8002a9c <OV5640_SetHueDegree+0xbc>
  {
    tmp = hue_degree_ctrl2[Degree + 6];
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	3306      	adds	r3, #6
 8002a7c:	3338      	adds	r3, #56	; 0x38
 8002a7e:	443b      	add	r3, r7
 8002a80:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002a84:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f103 0018 	add.w	r0, r3, #24
 8002a8c:	f107 020f 	add.w	r2, r7, #15
 8002a90:	2301      	movs	r3, #1
 8002a92:	f245 5182 	movw	r1, #21890	; 0x5582
 8002a96:	f000 fae1 	bl	800305c <ov5640_write_reg>
 8002a9a:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8002a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d111      	bne.n	8002ac6 <OV5640_SetHueDegree+0xe6>
  {
    tmp = hue_degree_ctrl8[Degree + 6];
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	3306      	adds	r3, #6
 8002aa6:	3338      	adds	r3, #56	; 0x38
 8002aa8:	443b      	add	r3, r7
 8002aaa:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002aae:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f103 0018 	add.w	r0, r3, #24
 8002ab6:	f107 020f 	add.w	r2, r7, #15
 8002aba:	2301      	movs	r3, #1
 8002abc:	f245 5188 	movw	r1, #21896	; 0x5588
 8002ac0:	f000 facc 	bl	800305c <ov5640_write_reg>
 8002ac4:	6378      	str	r0, [r7, #52]	; 0x34
  }

  if (ret != OV5640_OK)
 8002ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d002      	beq.n	8002ad2 <OV5640_SetHueDegree+0xf2>
  {
    ret = OV5640_ERROR;
 8002acc:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  return ret;
 8002ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3738      	adds	r7, #56	; 0x38
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	0800fefc 	.word	0x0800fefc
 8002ae0:	0800ff08 	.word	0x0800ff08
 8002ae4:	0800ff14 	.word	0x0800ff14

08002ae8 <OV5640_MirrorFlipConfig>:
  * @param  pObj  pointer to component object
  * @param  Config To configure mirror, flip, both or none
  * @retval Component status
  */
int32_t OV5640_MirrorFlipConfig(OV5640_Object_t *pObj, uint32_t Config)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp3820 = 0;
 8002af2:	2300      	movs	r3, #0
 8002af4:	72fb      	strb	r3, [r7, #11]
  uint8_t tmp3821;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f103 0018 	add.w	r0, r3, #24
 8002afc:	f107 020b 	add.w	r2, r7, #11
 8002b00:	2301      	movs	r3, #1
 8002b02:	f643 0120 	movw	r1, #14368	; 0x3820
 8002b06:	f000 fa92 	bl	800302e <ov5640_read_reg>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <OV5640_MirrorFlipConfig+0x30>
  {
    ret = OV5640_ERROR;
 8002b10:	f04f 33ff 	mov.w	r3, #4294967295
 8002b14:	60fb      	str	r3, [r7, #12]
 8002b16:	e0cb      	b.n	8002cb0 <OV5640_MirrorFlipConfig+0x1c8>
  }
  else
  {
    tmp3820 &= 0xF9U;
 8002b18:	7afb      	ldrb	r3, [r7, #11]
 8002b1a:	f023 0306 	bic.w	r3, r3, #6
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	72fb      	strb	r3, [r7, #11]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f103 0018 	add.w	r0, r3, #24
 8002b28:	f107 020a 	add.w	r2, r7, #10
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	f643 0121 	movw	r1, #14369	; 0x3821
 8002b32:	f000 fa7c 	bl	800302e <ov5640_read_reg>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d003      	beq.n	8002b44 <OV5640_MirrorFlipConfig+0x5c>
    {
      ret = OV5640_ERROR;
 8002b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	e0b5      	b.n	8002cb0 <OV5640_MirrorFlipConfig+0x1c8>
    }
    else
    {
      ret = OV5640_OK;
 8002b44:	2300      	movs	r3, #0
 8002b46:	60fb      	str	r3, [r7, #12]
      tmp3821 &= 0xF9U;
 8002b48:	7abb      	ldrb	r3, [r7, #10]
 8002b4a:	f023 0306 	bic.w	r3, r3, #6
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	72bb      	strb	r3, [r7, #10]

      switch (Config)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	d056      	beq.n	8002c06 <OV5640_MirrorFlipConfig+0x11e>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	2b03      	cmp	r3, #3
 8002b5c:	d87f      	bhi.n	8002c5e <OV5640_MirrorFlipConfig+0x176>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d029      	beq.n	8002bb8 <OV5640_MirrorFlipConfig+0xd0>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d179      	bne.n	8002c5e <OV5640_MirrorFlipConfig+0x176>
      {
        case OV5640_MIRROR:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f103 0018 	add.w	r0, r3, #24
 8002b70:	f107 020b 	add.w	r2, r7, #11
 8002b74:	2301      	movs	r3, #1
 8002b76:	f643 0120 	movw	r1, #14368	; 0x3820
 8002b7a:	f000 fa6f 	bl	800305c <ov5640_write_reg>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <OV5640_MirrorFlipConfig+0xa4>
          {
            ret = OV5640_ERROR;
 8002b84:	f04f 33ff 	mov.w	r3, #4294967295
 8002b88:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002b8a:	e08a      	b.n	8002ca2 <OV5640_MirrorFlipConfig+0x1ba>
            tmp3821 |= 0x06U;
 8002b8c:	7abb      	ldrb	r3, [r7, #10]
 8002b8e:	f043 0306 	orr.w	r3, r3, #6
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f103 0018 	add.w	r0, r3, #24
 8002b9c:	f107 020a 	add.w	r2, r7, #10
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	f643 0121 	movw	r1, #14369	; 0x3821
 8002ba6:	f000 fa59 	bl	800305c <ov5640_write_reg>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d078      	beq.n	8002ca2 <OV5640_MirrorFlipConfig+0x1ba>
              ret = OV5640_ERROR;
 8002bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb4:	60fb      	str	r3, [r7, #12]
          break;
 8002bb6:	e074      	b.n	8002ca2 <OV5640_MirrorFlipConfig+0x1ba>
        case OV5640_FLIP:
          tmp3820 |= 0x06U;
 8002bb8:	7afb      	ldrb	r3, [r7, #11]
 8002bba:	f043 0306 	orr.w	r3, r3, #6
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f103 0018 	add.w	r0, r3, #24
 8002bc8:	f107 020b 	add.w	r2, r7, #11
 8002bcc:	2301      	movs	r3, #1
 8002bce:	f643 0120 	movw	r1, #14368	; 0x3820
 8002bd2:	f000 fa43 	bl	800305c <ov5640_write_reg>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d003      	beq.n	8002be4 <OV5640_MirrorFlipConfig+0xfc>
          {
            ret = OV5640_ERROR;
 8002bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8002be0:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002be2:	e060      	b.n	8002ca6 <OV5640_MirrorFlipConfig+0x1be>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f103 0018 	add.w	r0, r3, #24
 8002bea:	f107 020a 	add.w	r2, r7, #10
 8002bee:	2301      	movs	r3, #1
 8002bf0:	f643 0121 	movw	r1, #14369	; 0x3821
 8002bf4:	f000 fa32 	bl	800305c <ov5640_write_reg>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d053      	beq.n	8002ca6 <OV5640_MirrorFlipConfig+0x1be>
              ret = OV5640_ERROR;
 8002bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8002c02:	60fb      	str	r3, [r7, #12]
          break;
 8002c04:	e04f      	b.n	8002ca6 <OV5640_MirrorFlipConfig+0x1be>
        case OV5640_MIRROR_FLIP:
          tmp3820 |= 0x06U;
 8002c06:	7afb      	ldrb	r3, [r7, #11]
 8002c08:	f043 0306 	orr.w	r3, r3, #6
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f103 0018 	add.w	r0, r3, #24
 8002c16:	f107 020b 	add.w	r2, r7, #11
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	f643 0120 	movw	r1, #14368	; 0x3820
 8002c20:	f000 fa1c 	bl	800305c <ov5640_write_reg>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <OV5640_MirrorFlipConfig+0x14a>
          {
            ret = OV5640_ERROR;
 8002c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c2e:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002c30:	e03b      	b.n	8002caa <OV5640_MirrorFlipConfig+0x1c2>
            tmp3821 |= 0x06U;
 8002c32:	7abb      	ldrb	r3, [r7, #10]
 8002c34:	f043 0306 	orr.w	r3, r3, #6
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f103 0018 	add.w	r0, r3, #24
 8002c42:	f107 020a 	add.w	r2, r7, #10
 8002c46:	2301      	movs	r3, #1
 8002c48:	f643 0121 	movw	r1, #14369	; 0x3821
 8002c4c:	f000 fa06 	bl	800305c <ov5640_write_reg>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d029      	beq.n	8002caa <OV5640_MirrorFlipConfig+0x1c2>
              ret = OV5640_ERROR;
 8002c56:	f04f 33ff 	mov.w	r3, #4294967295
 8002c5a:	60fb      	str	r3, [r7, #12]
          break;
 8002c5c:	e025      	b.n	8002caa <OV5640_MirrorFlipConfig+0x1c2>

        case OV5640_MIRROR_FLIP_NONE:
        default:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f103 0018 	add.w	r0, r3, #24
 8002c64:	f107 020b 	add.w	r2, r7, #11
 8002c68:	2301      	movs	r3, #1
 8002c6a:	f643 0120 	movw	r1, #14368	; 0x3820
 8002c6e:	f000 f9f5 	bl	800305c <ov5640_write_reg>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d003      	beq.n	8002c80 <OV5640_MirrorFlipConfig+0x198>
          {
            ret = OV5640_ERROR;
 8002c78:	f04f 33ff 	mov.w	r3, #4294967295
 8002c7c:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002c7e:	e016      	b.n	8002cae <OV5640_MirrorFlipConfig+0x1c6>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f103 0018 	add.w	r0, r3, #24
 8002c86:	f107 020a 	add.w	r2, r7, #10
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	f643 0121 	movw	r1, #14369	; 0x3821
 8002c90:	f000 f9e4 	bl	800305c <ov5640_write_reg>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d009      	beq.n	8002cae <OV5640_MirrorFlipConfig+0x1c6>
              ret = OV5640_ERROR;
 8002c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c9e:	60fb      	str	r3, [r7, #12]
          break;
 8002ca0:	e005      	b.n	8002cae <OV5640_MirrorFlipConfig+0x1c6>
          break;
 8002ca2:	bf00      	nop
 8002ca4:	e004      	b.n	8002cb0 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002ca6:	bf00      	nop
 8002ca8:	e002      	b.n	8002cb0 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002caa:	bf00      	nop
 8002cac:	e000      	b.n	8002cb0 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002cae:	bf00      	nop
      }
    }
  }

  return ret;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <OV5640_ZoomConfig>:
  * @param  pObj  pointer to component object
  * @param  Zoom  Zoom to be configured
  * @retval Component status
  */
int32_t OV5640_ZoomConfig(OV5640_Object_t *pObj, uint32_t Zoom)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b086      	sub	sp, #24
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
 8002cc2:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]
  uint32_t res;
  uint32_t zoom;
  uint8_t tmp;

  /* Get camera resolution */
  if (OV5640_GetResolution(pObj, &res) != OV5640_OK)
 8002cc8:	f107 030c 	add.w	r3, r7, #12
 8002ccc:	4619      	mov	r1, r3
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7ff f8a2 	bl	8001e18 <OV5640_GetResolution>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <OV5640_ZoomConfig+0x28>
  {
    ret = OV5640_ERROR;
 8002cda:	f04f 33ff 	mov.w	r3, #4294967295
 8002cde:	617b      	str	r3, [r7, #20]
 8002ce0:	e04e      	b.n	8002d80 <OV5640_ZoomConfig+0xc6>
  }
  else
  {
    zoom = Zoom;
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	613b      	str	r3, [r7, #16]

    if (zoom == OV5640_ZOOM_x1)
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	2b44      	cmp	r3, #68	; 0x44
 8002cea:	d112      	bne.n	8002d12 <OV5640_ZoomConfig+0x58>
    {
      tmp = 0x10;
 8002cec:	2310      	movs	r3, #16
 8002cee:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f103 0018 	add.w	r0, r3, #24
 8002cf6:	f107 020b 	add.w	r2, r7, #11
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 8002d00:	f000 f9ac 	bl	800305c <ov5640_write_reg>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d03a      	beq.n	8002d80 <OV5640_ZoomConfig+0xc6>
      {
        ret = OV5640_ERROR;
 8002d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d0e:	617b      	str	r3, [r7, #20]
 8002d10:	e036      	b.n	8002d80 <OV5640_ZoomConfig+0xc6>
      }
    }
    else
    {
      switch (res)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d802      	bhi.n	8002d1e <OV5640_ZoomConfig+0x64>
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d103      	bne.n	8002d24 <OV5640_ZoomConfig+0x6a>
          break;
        case OV5640_R640x480:
          zoom = zoom >> 2U;
          break;
        default:
          break;
 8002d1c:	e00a      	b.n	8002d34 <OV5640_ZoomConfig+0x7a>
      switch (res)
 8002d1e:	2b03      	cmp	r3, #3
 8002d20:	d004      	beq.n	8002d2c <OV5640_ZoomConfig+0x72>
          break;
 8002d22:	e007      	b.n	8002d34 <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 1U;
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	085b      	lsrs	r3, r3, #1
 8002d28:	613b      	str	r3, [r7, #16]
          break;
 8002d2a:	e003      	b.n	8002d34 <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 2U;
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	089b      	lsrs	r3, r3, #2
 8002d30:	613b      	str	r3, [r7, #16]
          break;
 8002d32:	bf00      	nop
      }

      tmp = 0x00;
 8002d34:	2300      	movs	r3, #0
 8002d36:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f103 0018 	add.w	r0, r3, #24
 8002d3e:	f107 020b 	add.w	r2, r7, #11
 8002d42:	2301      	movs	r3, #1
 8002d44:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 8002d48:	f000 f988 	bl	800305c <ov5640_write_reg>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <OV5640_ZoomConfig+0xa0>
      {
        ret = OV5640_ERROR;
 8002d52:	f04f 33ff 	mov.w	r3, #4294967295
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	e012      	b.n	8002d80 <OV5640_ZoomConfig+0xc6>
      }
      else
      {
        tmp = (uint8_t)zoom;
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	72fb      	strb	r3, [r7, #11]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f103 0018 	add.w	r0, r3, #24
 8002d66:	f107 020b 	add.w	r2, r7, #11
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	f245 6101 	movw	r1, #22017	; 0x5601
 8002d70:	f000 f974 	bl	800305c <ov5640_write_reg>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d002      	beq.n	8002d80 <OV5640_ZoomConfig+0xc6>
        {
          ret = OV5640_ERROR;
 8002d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d7e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 8002d80:	697b      	ldr	r3, [r7, #20]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3718      	adds	r7, #24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <OV5640_NightModeConfig>:
  * @param  pObj  pointer to component object
  * @param  Cmd   Enable disable night mode
  * @retval Component status
  */
int32_t OV5640_NightModeConfig(OV5640_Object_t *pObj, uint32_t Cmd)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b084      	sub	sp, #16
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp = 0;
 8002d94:	2300      	movs	r3, #0
 8002d96:	72fb      	strb	r3, [r7, #11]

  if (Cmd == NIGHT_MODE_ENABLE)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	f040 80ce 	bne.w	8002f3c <OV5640_NightModeConfig+0x1b2>
  {
    /* Auto Frame Rate: 15fps ~ 3.75fps night mode for 60/50Hz light environment,
    24Mhz clock input,24Mhz PCLK*/
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL4, &tmp, 1);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f103 0018 	add.w	r0, r3, #24
 8002da6:	f107 020b 	add.w	r2, r7, #11
 8002daa:	2301      	movs	r3, #1
 8002dac:	f243 0138 	movw	r1, #12344	; 0x3038
 8002db0:	f000 f954 	bl	800305c <ov5640_write_reg>
 8002db4:	60f8      	str	r0, [r7, #12]
    if (ret == OV5640_OK)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10a      	bne.n	8002dd2 <OV5640_NightModeConfig+0x48>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL5, &tmp, 1);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f103 0018 	add.w	r0, r3, #24
 8002dc2:	f107 020b 	add.w	r2, r7, #11
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	f243 0139 	movw	r1, #12345	; 0x3039
 8002dcc:	f000 f946 	bl	800305c <ov5640_write_reg>
 8002dd0:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10c      	bne.n	8002df2 <OV5640_NightModeConfig+0x68>
    {
      tmp = 0x7C;
 8002dd8:	237c      	movs	r3, #124	; 0x7c
 8002dda:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f103 0018 	add.w	r0, r3, #24
 8002de2:	f107 020b 	add.w	r2, r7, #11
 8002de6:	2301      	movs	r3, #1
 8002de8:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8002dec:	f000 f936 	bl	800305c <ov5640_write_reg>
 8002df0:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10c      	bne.n	8002e12 <OV5640_NightModeConfig+0x88>
    {
      tmp = 0x01;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f103 0018 	add.w	r0, r3, #24
 8002e02:	f107 020b 	add.w	r2, r7, #11
 8002e06:	2301      	movs	r3, #1
 8002e08:	f643 2108 	movw	r1, #14856	; 0x3a08
 8002e0c:	f000 f926 	bl	800305c <ov5640_write_reg>
 8002e10:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10c      	bne.n	8002e32 <OV5640_NightModeConfig+0xa8>
    {
      tmp = 0x27;
 8002e18:	2327      	movs	r3, #39	; 0x27
 8002e1a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f103 0018 	add.w	r0, r3, #24
 8002e22:	f107 020b 	add.w	r2, r7, #11
 8002e26:	2301      	movs	r3, #1
 8002e28:	f643 2109 	movw	r1, #14857	; 0x3a09
 8002e2c:	f000 f916 	bl	800305c <ov5640_write_reg>
 8002e30:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10c      	bne.n	8002e52 <OV5640_NightModeConfig+0xc8>
    {
      tmp = 0x00;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_HIGH, &tmp, 1);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f103 0018 	add.w	r0, r3, #24
 8002e42:	f107 020b 	add.w	r2, r7, #11
 8002e46:	2301      	movs	r3, #1
 8002e48:	f643 210a 	movw	r1, #14858	; 0x3a0a
 8002e4c:	f000 f906 	bl	800305c <ov5640_write_reg>
 8002e50:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10c      	bne.n	8002e72 <OV5640_NightModeConfig+0xe8>
    {
      tmp = 0xF6;
 8002e58:	23f6      	movs	r3, #246	; 0xf6
 8002e5a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f103 0018 	add.w	r0, r3, #24
 8002e62:	f107 020b 	add.w	r2, r7, #11
 8002e66:	2301      	movs	r3, #1
 8002e68:	f643 210b 	movw	r1, #14859	; 0x3a0b
 8002e6c:	f000 f8f6 	bl	800305c <ov5640_write_reg>
 8002e70:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10c      	bne.n	8002e92 <OV5640_NightModeConfig+0x108>
    {
      tmp = 0x04;
 8002e78:	2304      	movs	r3, #4
 8002e7a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f103 0018 	add.w	r0, r3, #24
 8002e82:	f107 020b 	add.w	r2, r7, #11
 8002e86:	2301      	movs	r3, #1
 8002e88:	f643 210d 	movw	r1, #14861	; 0x3a0d
 8002e8c:	f000 f8e6 	bl	800305c <ov5640_write_reg>
 8002e90:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d10a      	bne.n	8002eae <OV5640_NightModeConfig+0x124>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0E, &tmp, 1);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f103 0018 	add.w	r0, r3, #24
 8002e9e:	f107 020b 	add.w	r2, r7, #11
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	f643 210e 	movw	r1, #14862	; 0x3a0e
 8002ea8:	f000 f8d8 	bl	800305c <ov5640_write_reg>
 8002eac:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10c      	bne.n	8002ece <OV5640_NightModeConfig+0x144>
    {
      tmp = 0x0B;
 8002eb4:	230b      	movs	r3, #11
 8002eb6:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f103 0018 	add.w	r0, r3, #24
 8002ebe:	f107 020b 	add.w	r2, r7, #11
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	f643 2102 	movw	r1, #14850	; 0x3a02
 8002ec8:	f000 f8c8 	bl	800305c <ov5640_write_reg>
 8002ecc:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10c      	bne.n	8002eee <OV5640_NightModeConfig+0x164>
    {
      tmp = 0x88;
 8002ed4:	2388      	movs	r3, #136	; 0x88
 8002ed6:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f103 0018 	add.w	r0, r3, #24
 8002ede:	f107 020b 	add.w	r2, r7, #11
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	f643 2103 	movw	r1, #14851	; 0x3a03
 8002ee8:	f000 f8b8 	bl	800305c <ov5640_write_reg>
 8002eec:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10c      	bne.n	8002f0e <OV5640_NightModeConfig+0x184>
    {
      tmp = 0x0B;
 8002ef4:	230b      	movs	r3, #11
 8002ef6:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f103 0018 	add.w	r0, r3, #24
 8002efe:	f107 020b 	add.w	r2, r7, #11
 8002f02:	2301      	movs	r3, #1
 8002f04:	f643 2114 	movw	r1, #14868	; 0x3a14
 8002f08:	f000 f8a8 	bl	800305c <ov5640_write_reg>
 8002f0c:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10c      	bne.n	8002f2e <OV5640_NightModeConfig+0x1a4>
    {
      tmp = 0x88;
 8002f14:	2388      	movs	r3, #136	; 0x88
 8002f16:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f103 0018 	add.w	r0, r3, #24
 8002f1e:	f107 020b 	add.w	r2, r7, #11
 8002f22:	2301      	movs	r3, #1
 8002f24:	f643 2115 	movw	r1, #14869	; 0x3a15
 8002f28:	f000 f898 	bl	800305c <ov5640_write_reg>
 8002f2c:	60f8      	str	r0, [r7, #12]
    }
    if (ret != OV5640_OK)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d02b      	beq.n	8002f8c <OV5640_NightModeConfig+0x202>
    {
      ret = OV5640_ERROR;
 8002f34:	f04f 33ff 	mov.w	r3, #4294967295
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	e027      	b.n	8002f8c <OV5640_NightModeConfig+0x202>
    }
  }
  else
  {
    if (ov5640_read_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f103 0018 	add.w	r0, r3, #24
 8002f42:	f107 020b 	add.w	r2, r7, #11
 8002f46:	2301      	movs	r3, #1
 8002f48:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8002f4c:	f000 f86f 	bl	800302e <ov5640_read_reg>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <OV5640_NightModeConfig+0x1d4>
    {
      ret = OV5640_ERROR;
 8002f56:	f04f 33ff 	mov.w	r3, #4294967295
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	e016      	b.n	8002f8c <OV5640_NightModeConfig+0x202>
    }
    else
    {
      ret = OV5640_OK;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]
      tmp &= 0xFBU;
 8002f62:	7afb      	ldrb	r3, [r7, #11]
 8002f64:	f023 0304 	bic.w	r3, r3, #4
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	72fb      	strb	r3, [r7, #11]
      /* Set Bit 2 to 0 */
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f103 0018 	add.w	r0, r3, #24
 8002f72:	f107 020b 	add.w	r2, r7, #11
 8002f76:	2301      	movs	r3, #1
 8002f78:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8002f7c:	f000 f86e 	bl	800305c <ov5640_write_reg>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d002      	beq.n	8002f8c <OV5640_NightModeConfig+0x202>
      {
        ret = OV5640_ERROR;
 8002f86:	f04f 33ff 	mov.w	r3, #4294967295
 8002f8a:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <OV5640_Delay>:
  * @param pObj   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval OV5640_OK
  */
static int32_t OV5640_Delay(OV5640_Object_t *pObj, uint32_t Delay)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b084      	sub	sp, #16
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
 8002f9e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	4798      	blx	r3
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	60fb      	str	r3, [r7, #12]
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8002faa:	bf00      	nop
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	4798      	blx	r3
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d8f5      	bhi.n	8002fac <OV5640_Delay+0x16>
  {
  }
  return OV5640_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <OV5640_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002fca:	b590      	push	{r4, r7, lr}
 8002fcc:	b087      	sub	sp, #28
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	60f8      	str	r0, [r7, #12]
 8002fd2:	607a      	str	r2, [r7, #4]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	817b      	strh	r3, [r7, #10]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	691c      	ldr	r4, [r3, #16]
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	8918      	ldrh	r0, [r3, #8]
 8002fea:	893b      	ldrh	r3, [r7, #8]
 8002fec:	8979      	ldrh	r1, [r7, #10]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	47a0      	blx	r4
 8002ff2:	4603      	mov	r3, r0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	371c      	adds	r7, #28
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd90      	pop	{r4, r7, pc}

08002ffc <OV5640_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002ffc:	b590      	push	{r4, r7, lr}
 8002ffe:	b087      	sub	sp, #28
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	607a      	str	r2, [r7, #4]
 8003006:	461a      	mov	r2, r3
 8003008:	460b      	mov	r3, r1
 800300a:	817b      	strh	r3, [r7, #10]
 800300c:	4613      	mov	r3, r2
 800300e:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	68dc      	ldr	r4, [r3, #12]
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	8918      	ldrh	r0, [r3, #8]
 800301c:	893b      	ldrh	r3, [r7, #8]
 800301e:	8979      	ldrh	r1, [r7, #10]
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	47a0      	blx	r4
 8003024:	4603      	mov	r3, r0
}
 8003026:	4618      	mov	r0, r3
 8003028:	371c      	adds	r7, #28
 800302a:	46bd      	mov	sp, r7
 800302c:	bd90      	pop	{r4, r7, pc}

0800302e <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 800302e:	b590      	push	{r4, r7, lr}
 8003030:	b085      	sub	sp, #20
 8003032:	af00      	add	r7, sp, #0
 8003034:	60f8      	str	r0, [r7, #12]
 8003036:	607a      	str	r2, [r7, #4]
 8003038:	461a      	mov	r2, r3
 800303a:	460b      	mov	r3, r1
 800303c:	817b      	strh	r3, [r7, #10]
 800303e:	4613      	mov	r3, r2
 8003040:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	685c      	ldr	r4, [r3, #4]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6898      	ldr	r0, [r3, #8]
 800304a:	893b      	ldrh	r3, [r7, #8]
 800304c:	8979      	ldrh	r1, [r7, #10]
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	47a0      	blx	r4
 8003052:	4603      	mov	r3, r0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3714      	adds	r7, #20
 8003058:	46bd      	mov	sp, r7
 800305a:	bd90      	pop	{r4, r7, pc}

0800305c <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 800305c:	b590      	push	{r4, r7, lr}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	607a      	str	r2, [r7, #4]
 8003066:	461a      	mov	r2, r3
 8003068:	460b      	mov	r3, r1
 800306a:	817b      	strh	r3, [r7, #10]
 800306c:	4613      	mov	r3, r2
 800306e:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681c      	ldr	r4, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6898      	ldr	r0, [r3, #8]
 8003078:	893b      	ldrh	r3, [r7, #8]
 800307a:	8979      	ldrh	r1, [r7, #10]
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	47a0      	blx	r4
 8003080:	4603      	mov	r3, r0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	bd90      	pop	{r4, r7, pc}
	...

0800308c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8003094:	4a07      	ldr	r2, [pc, #28]	; (80030b4 <RetargetInit+0x28>)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800309a:	4b07      	ldr	r3, [pc, #28]	; (80030b8 <RetargetInit+0x2c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6898      	ldr	r0, [r3, #8]
 80030a0:	2300      	movs	r3, #0
 80030a2:	2202      	movs	r2, #2
 80030a4:	2100      	movs	r1, #0
 80030a6:	f00c fac5 	bl	800f634 <setvbuf>
}
 80030aa:	bf00      	nop
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	240002e8 	.word	0x240002e8
 80030b8:	24000054 	.word	0x24000054

080030bc <_write>:

  errno = EBADF;
  return 0;
}

int _write(int fd, char* ptr, int len) {
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d002      	beq.n	80030d4 <_write+0x18>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d111      	bne.n	80030f8 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80030d4:	4b0e      	ldr	r3, [pc, #56]	; (8003110 <_write+0x54>)
 80030d6:	6818      	ldr	r0, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	b29a      	uxth	r2, r3
 80030dc:	f04f 33ff 	mov.w	r3, #4294967295
 80030e0:	68b9      	ldr	r1, [r7, #8]
 80030e2:	f00a fa5a 	bl	800d59a <HAL_UART_Transmit>
 80030e6:	4603      	mov	r3, r0
 80030e8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80030ea:	7dfb      	ldrb	r3, [r7, #23]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <_write+0x38>
      return len;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	e008      	b.n	8003106 <_write+0x4a>
    else
      return EIO;
 80030f4:	2305      	movs	r3, #5
 80030f6:	e006      	b.n	8003106 <_write+0x4a>
  }
  errno = EBADF;
 80030f8:	f00c fa6a 	bl	800f5d0 <__errno>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2209      	movs	r2, #9
 8003100:	601a      	str	r2, [r3, #0]
  return -1;
 8003102:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003106:	4618      	mov	r0, r3
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	240002e8 	.word	0x240002e8

08003114 <_close>:

int _close(int fd) {
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	db04      	blt.n	800312c <_close+0x18>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b02      	cmp	r3, #2
 8003126:	dc01      	bgt.n	800312c <_close+0x18>
    return 0;
 8003128:	2300      	movs	r3, #0
 800312a:	e006      	b.n	800313a <_close+0x26>

  errno = EBADF;
 800312c:	f00c fa50 	bl	800f5d0 <__errno>
 8003130:	4603      	mov	r3, r0
 8003132:	2209      	movs	r2, #9
 8003134:	601a      	str	r2, [r3, #0]
  return -1;
 8003136:	f04f 33ff 	mov.w	r3, #4294967295
}
 800313a:	4618      	mov	r0, r3
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
	...

08003144 <_read>:

int _read(int fd, char* ptr, int len) {
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d110      	bne.n	8003178 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8003156:	4b0e      	ldr	r3, [pc, #56]	; (8003190 <_read+0x4c>)
 8003158:	6818      	ldr	r0, [r3, #0]
 800315a:	f04f 33ff 	mov.w	r3, #4294967295
 800315e:	2201      	movs	r2, #1
 8003160:	68b9      	ldr	r1, [r7, #8]
 8003162:	f00a faa8 	bl	800d6b6 <HAL_UART_Receive>
 8003166:	4603      	mov	r3, r0
 8003168:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800316a:	7dfb      	ldrb	r3, [r7, #23]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d101      	bne.n	8003174 <_read+0x30>
      return 1;
 8003170:	2301      	movs	r3, #1
 8003172:	e008      	b.n	8003186 <_read+0x42>
    else
      return EIO;
 8003174:	2305      	movs	r3, #5
 8003176:	e006      	b.n	8003186 <_read+0x42>
  }
  errno = EBADF;
 8003178:	f00c fa2a 	bl	800f5d0 <__errno>
 800317c:	4603      	mov	r3, r0
 800317e:	2209      	movs	r2, #9
 8003180:	601a      	str	r2, [r3, #0]
  return -1;
 8003182:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003186:	4618      	mov	r0, r3
 8003188:	3718      	adds	r7, #24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	240002e8 	.word	0x240002e8

08003194 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	db08      	blt.n	80031b6 <_fstat+0x22>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	dc05      	bgt.n	80031b6 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031b0:	605a      	str	r2, [r3, #4]
    return 0;
 80031b2:	2300      	movs	r3, #0
 80031b4:	e005      	b.n	80031c2 <_fstat+0x2e>
  }

  errno = EBADF;
 80031b6:	f00c fa0b 	bl	800f5d0 <__errno>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2209      	movs	r2, #9
 80031be:	601a      	str	r2, [r3, #0]
  return 0;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
	...

080031cc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80031d0:	4b11      	ldr	r3, [pc, #68]	; (8003218 <MX_RTC_Init+0x4c>)
 80031d2:	4a12      	ldr	r2, [pc, #72]	; (800321c <MX_RTC_Init+0x50>)
 80031d4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80031d6:	4b10      	ldr	r3, [pc, #64]	; (8003218 <MX_RTC_Init+0x4c>)
 80031d8:	2200      	movs	r2, #0
 80031da:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80031dc:	4b0e      	ldr	r3, [pc, #56]	; (8003218 <MX_RTC_Init+0x4c>)
 80031de:	227f      	movs	r2, #127	; 0x7f
 80031e0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80031e2:	4b0d      	ldr	r3, [pc, #52]	; (8003218 <MX_RTC_Init+0x4c>)
 80031e4:	22ff      	movs	r2, #255	; 0xff
 80031e6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80031e8:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <MX_RTC_Init+0x4c>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80031ee:	4b0a      	ldr	r3, [pc, #40]	; (8003218 <MX_RTC_Init+0x4c>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80031f4:	4b08      	ldr	r3, [pc, #32]	; (8003218 <MX_RTC_Init+0x4c>)
 80031f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031fa:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80031fc:	4b06      	ldr	r3, [pc, #24]	; (8003218 <MX_RTC_Init+0x4c>)
 80031fe:	2200      	movs	r2, #0
 8003200:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003202:	4805      	ldr	r0, [pc, #20]	; (8003218 <MX_RTC_Init+0x4c>)
 8003204:	f009 ffc2 	bl	800d18c <HAL_RTC_Init>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800320e:	f7fe fa95 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003212:	bf00      	nop
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	240002ec 	.word	0x240002ec
 800321c:	58004000 	.word	0x58004000

08003220 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b0b2      	sub	sp, #200	; 0xc8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003228:	f107 0308 	add.w	r3, r7, #8
 800322c:	22c0      	movs	r2, #192	; 0xc0
 800322e:	2100      	movs	r1, #0
 8003230:	4618      	mov	r0, r3
 8003232:	f00c f9f7 	bl	800f624 <memset>
  if(rtcHandle->Instance==RTC)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a10      	ldr	r2, [pc, #64]	; (800327c <HAL_RTC_MspInit+0x5c>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d119      	bne.n	8003274 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003240:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800324c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003250:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003254:	f107 0308 	add.w	r3, r7, #8
 8003258:	4618      	mov	r0, r3
 800325a:	f008 f9b7 	bl	800b5cc <HAL_RCCEx_PeriphCLKConfig>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8003264:	f7fe fa6a 	bl	800173c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003268:	4b05      	ldr	r3, [pc, #20]	; (8003280 <HAL_RTC_MspInit+0x60>)
 800326a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326c:	4a04      	ldr	r2, [pc, #16]	; (8003280 <HAL_RTC_MspInit+0x60>)
 800326e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003272:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003274:	bf00      	nop
 8003276:	37c8      	adds	r7, #200	; 0xc8
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	58004000 	.word	0x58004000
 8003280:	58024400 	.word	0x58024400

08003284 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800328a:	2300      	movs	r3, #0
 800328c:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 800328e:	4b16      	ldr	r3, [pc, #88]	; (80032e8 <BSP_I2C4_Init+0x64>)
 8003290:	4a16      	ldr	r2, [pc, #88]	; (80032ec <BSP_I2C4_Init+0x68>)
 8003292:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 8003294:	4b16      	ldr	r3, [pc, #88]	; (80032f0 <BSP_I2C4_Init+0x6c>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d11f      	bne.n	80032dc <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 800329c:	4b14      	ldr	r3, [pc, #80]	; (80032f0 <BSP_I2C4_Init+0x6c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	3301      	adds	r3, #1
 80032a2:	4a13      	ldr	r2, [pc, #76]	; (80032f0 <BSP_I2C4_Init+0x6c>)
 80032a4:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 80032a6:	4810      	ldr	r0, [pc, #64]	; (80032e8 <BSP_I2C4_Init+0x64>)
 80032a8:	f006 fa2a 	bl	8009700 <HAL_I2C_GetState>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d114      	bne.n	80032dc <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 80032b2:	480d      	ldr	r0, [pc, #52]	; (80032e8 <BSP_I2C4_Init+0x64>)
 80032b4:	f000 fb60 	bl	8003978 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80032b8:	f008 f972 	bl	800b5a0 <HAL_RCC_GetPCLK2Freq>
 80032bc:	4603      	mov	r3, r0
 80032be:	490d      	ldr	r1, [pc, #52]	; (80032f4 <BSP_I2C4_Init+0x70>)
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 f8e3 	bl	800348c <I2C_GetTiming>
 80032c6:	4603      	mov	r3, r0
 80032c8:	4619      	mov	r1, r3
 80032ca:	4807      	ldr	r0, [pc, #28]	; (80032e8 <BSP_I2C4_Init+0x64>)
 80032cc:	f000 f838 	bl	8003340 <MX_I2C4_Init>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d002      	beq.n	80032dc <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80032d6:	f06f 0307 	mvn.w	r3, #7
 80032da:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 80032dc:	687b      	ldr	r3, [r7, #4]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	24000d1c 	.word	0x24000d1c
 80032ec:	58001c00 	.word	0x58001c00
 80032f0:	24000314 	.word	0x24000314
 80032f4:	000186a0 	.word	0x000186a0

080032f8 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 80032fe:	2300      	movs	r3, #0
 8003300:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 8003302:	4b0d      	ldr	r3, [pc, #52]	; (8003338 <BSP_I2C4_DeInit+0x40>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	3b01      	subs	r3, #1
 8003308:	4a0b      	ldr	r2, [pc, #44]	; (8003338 <BSP_I2C4_DeInit+0x40>)
 800330a:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 800330c:	4b0a      	ldr	r3, [pc, #40]	; (8003338 <BSP_I2C4_DeInit+0x40>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d10b      	bne.n	800332c <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 8003314:	4809      	ldr	r0, [pc, #36]	; (800333c <BSP_I2C4_DeInit+0x44>)
 8003316:	f000 fb9b 	bl	8003a50 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800331a:	4808      	ldr	r0, [pc, #32]	; (800333c <BSP_I2C4_DeInit+0x44>)
 800331c:	f005 ff7e 	bl	800921c <HAL_I2C_DeInit>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d002      	beq.n	800332c <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8003326:	f06f 0307 	mvn.w	r3, #7
 800332a:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 800332c:	687b      	ldr	r3, [r7, #4]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	24000314 	.word	0x24000314
 800333c:	24000d1c 	.word	0x24000d1c

08003340 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f005 febc 	bl	80090fc <HAL_I2C_Init>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d002      	beq.n	8003390 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	73fb      	strb	r3, [r7, #15]
 800338e:	e014      	b.n	80033ba <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8003390:	2300      	movs	r3, #0
 8003392:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8003394:	68b9      	ldr	r1, [r7, #8]
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f006 fc84 	bl	8009ca4 <HAL_I2CEx_ConfigAnalogFilter>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d002      	beq.n	80033a8 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	73fb      	strb	r3, [r7, #15]
 80033a6:	e008      	b.n	80033ba <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 80033a8:	2100      	movs	r1, #0
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f006 fcc5 	bl	8009d3a <HAL_I2CEx_ConfigDigitalFilter>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 80033ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <BSP_I2C4_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b088      	sub	sp, #32
 80033c8:	af02      	add	r7, sp, #8
 80033ca:	60ba      	str	r2, [r7, #8]
 80033cc:	461a      	mov	r2, r3
 80033ce:	4603      	mov	r3, r0
 80033d0:	81fb      	strh	r3, [r7, #14]
 80033d2:	460b      	mov	r3, r1
 80033d4:	81bb      	strh	r3, [r7, #12]
 80033d6:	4613      	mov	r3, r2
 80033d8:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
 #if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 80033da:	89b9      	ldrh	r1, [r7, #12]
 80033dc:	89f8      	ldrh	r0, [r7, #14]
 80033de:	88fb      	ldrh	r3, [r7, #6]
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	2202      	movs	r2, #2
 80033e6:	f000 fb57 	bl	8003a98 <I2C4_WriteReg>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d102      	bne.n	80033f6 <BSP_I2C4_WriteReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	e00c      	b.n	8003410 <BSP_I2C4_WriteReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80033f6:	4809      	ldr	r0, [pc, #36]	; (800341c <BSP_I2C4_WriteReg16+0x58>)
 80033f8:	f006 f990 	bl	800971c <HAL_I2C_GetError>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d103      	bne.n	800340a <BSP_I2C4_WriteReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003402:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8003406:	617b      	str	r3, [r7, #20]
 8003408:	e002      	b.n	8003410 <BSP_I2C4_WriteReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800340a:	f06f 0303 	mvn.w	r3, #3
 800340e:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8003410:	697b      	ldr	r3, [r7, #20]
}
 8003412:	4618      	mov	r0, r3
 8003414:	3718      	adds	r7, #24
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	24000d1c 	.word	0x24000d1c

08003420 <BSP_I2C4_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b088      	sub	sp, #32
 8003424:	af02      	add	r7, sp, #8
 8003426:	60ba      	str	r2, [r7, #8]
 8003428:	461a      	mov	r2, r3
 800342a:	4603      	mov	r3, r0
 800342c:	81fb      	strh	r3, [r7, #14]
 800342e:	460b      	mov	r3, r1
 8003430:	81bb      	strh	r3, [r7, #12]
 8003432:	4613      	mov	r3, r2
 8003434:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 8003436:	89b9      	ldrh	r1, [r7, #12]
 8003438:	89f8      	ldrh	r0, [r7, #14]
 800343a:	88fb      	ldrh	r3, [r7, #6]
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	2202      	movs	r2, #2
 8003442:	f000 fb4f 	bl	8003ae4 <I2C4_ReadReg>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d102      	bne.n	8003452 <BSP_I2C4_ReadReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 800344c:	2300      	movs	r3, #0
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	e00c      	b.n	800346c <BSP_I2C4_ReadReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8003452:	4809      	ldr	r0, [pc, #36]	; (8003478 <BSP_I2C4_ReadReg16+0x58>)
 8003454:	f006 f962 	bl	800971c <HAL_I2C_GetError>
 8003458:	4603      	mov	r3, r0
 800345a:	2b04      	cmp	r3, #4
 800345c:	d103      	bne.n	8003466 <BSP_I2C4_ReadReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800345e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8003462:	617b      	str	r3, [r7, #20]
 8003464:	e002      	b.n	800346c <BSP_I2C4_ReadReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003466:	f06f 0303 	mvn.w	r3, #3
 800346a:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800346c:	697b      	ldr	r3, [r7, #20]
}
 800346e:	4618      	mov	r0, r3
 8003470:	3718      	adds	r7, #24
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	24000d1c 	.word	0x24000d1c

0800347c <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8003480:	f000 ffd4 	bl	800442c <HAL_GetTick>
 8003484:	4603      	mov	r3, r0
}
 8003486:	4618      	mov	r0, r3
 8003488:	bd80      	pop	{r7, pc}
	...

0800348c <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8003496:	2300      	movs	r3, #0
 8003498:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d06b      	beq.n	8003578 <I2C_GetTiming+0xec>
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d068      	beq.n	8003578 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80034a6:	2300      	movs	r3, #0
 80034a8:	613b      	str	r3, [r7, #16]
 80034aa:	e060      	b.n	800356e <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 80034ac:	4a35      	ldr	r2, [pc, #212]	; (8003584 <I2C_GetTiming+0xf8>)
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	212c      	movs	r1, #44	; 0x2c
 80034b2:	fb01 f303 	mul.w	r3, r1, r3
 80034b6:	4413      	add	r3, r2
 80034b8:	3304      	adds	r3, #4
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d352      	bcc.n	8003568 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 80034c2:	4a30      	ldr	r2, [pc, #192]	; (8003584 <I2C_GetTiming+0xf8>)
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	212c      	movs	r1, #44	; 0x2c
 80034c8:	fb01 f303 	mul.w	r3, r1, r3
 80034cc:	4413      	add	r3, r2
 80034ce:	3308      	adds	r3, #8
 80034d0:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d847      	bhi.n	8003568 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 80034d8:	6939      	ldr	r1, [r7, #16]
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f856 	bl	800358c <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 80034e0:	6939      	ldr	r1, [r7, #16]
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f940 	bl	8003768 <I2C_Compute_SCLL_SCLH>
 80034e8:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2b7f      	cmp	r3, #127	; 0x7f
 80034ee:	d842      	bhi.n	8003576 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80034f0:	4925      	ldr	r1, [pc, #148]	; (8003588 <I2C_GetTiming+0xfc>)
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	4613      	mov	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8003502:	4821      	ldr	r0, [pc, #132]	; (8003588 <I2C_GetTiming+0xfc>)
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	4613      	mov	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4403      	add	r3, r0
 8003510:	3304      	adds	r3, #4
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	051b      	lsls	r3, r3, #20
 8003516:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800351a:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800351c:	481a      	ldr	r0, [pc, #104]	; (8003588 <I2C_GetTiming+0xfc>)
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	4613      	mov	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4403      	add	r3, r0
 800352a:	3308      	adds	r3, #8
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	041b      	lsls	r3, r3, #16
 8003530:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8003534:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8003536:	4814      	ldr	r0, [pc, #80]	; (8003588 <I2C_GetTiming+0xfc>)
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	4613      	mov	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	4403      	add	r3, r0
 8003544:	330c      	adds	r3, #12
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	021b      	lsls	r3, r3, #8
 800354a:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800354c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800354e:	480e      	ldr	r0, [pc, #56]	; (8003588 <I2C_GetTiming+0xfc>)
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	4613      	mov	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	4413      	add	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4403      	add	r3, r0
 800355c:	3310      	adds	r3, #16
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003562:	430b      	orrs	r3, r1
 8003564:	617b      	str	r3, [r7, #20]
        }
        break;
 8003566:	e006      	b.n	8003576 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	3301      	adds	r3, #1
 800356c:	613b      	str	r3, [r7, #16]
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	2b02      	cmp	r3, #2
 8003572:	d99b      	bls.n	80034ac <I2C_GetTiming+0x20>
 8003574:	e000      	b.n	8003578 <I2C_GetTiming+0xec>
        break;
 8003576:	bf00      	nop
      }
    }
  }

  return ret;
 8003578:	697b      	ldr	r3, [r7, #20]
}
 800357a:	4618      	mov	r0, r3
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	0801041c 	.word	0x0801041c
 8003588:	24000318 	.word	0x24000318

0800358c <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800358c:	b480      	push	{r7}
 800358e:	b08f      	sub	sp, #60	; 0x3c
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8003596:	2310      	movs	r3, #16
 8003598:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	085a      	lsrs	r2, r3, #1
 800359e:	4b6e      	ldr	r3, [pc, #440]	; (8003758 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 80035a0:	4413      	add	r3, r2
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80035a8:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 80035aa:	2332      	movs	r3, #50	; 0x32
 80035ac:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 80035ae:	f44f 7382 	mov.w	r3, #260	; 0x104
 80035b2:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80035b4:	4a69      	ldr	r2, [pc, #420]	; (800375c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	212c      	movs	r1, #44	; 0x2c
 80035ba:	fb01 f303 	mul.w	r3, r1, r3
 80035be:	4413      	add	r3, r2
 80035c0:	3324      	adds	r3, #36	; 0x24
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4618      	mov	r0, r3
 80035c6:	4a65      	ldr	r2, [pc, #404]	; (800375c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	212c      	movs	r1, #44	; 0x2c
 80035cc:	fb01 f303 	mul.w	r3, r1, r3
 80035d0:	4413      	add	r3, r2
 80035d2:	330c      	adds	r3, #12
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80035d8:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80035da:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80035dc:	495f      	ldr	r1, [pc, #380]	; (800375c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	202c      	movs	r0, #44	; 0x2c
 80035e2:	fb00 f303 	mul.w	r3, r0, r3
 80035e6:	440b      	add	r3, r1
 80035e8:	3328      	adds	r3, #40	; 0x28
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	3303      	adds	r3, #3
 80035ee:	69f9      	ldr	r1, [r7, #28]
 80035f0:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80035f8:	4a58      	ldr	r2, [pc, #352]	; (800375c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	212c      	movs	r1, #44	; 0x2c
 80035fe:	fb01 f303 	mul.w	r3, r1, r3
 8003602:	4413      	add	r3, r2
 8003604:	3310      	adds	r3, #16
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4618      	mov	r0, r3
 800360a:	4a54      	ldr	r2, [pc, #336]	; (800375c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	212c      	movs	r1, #44	; 0x2c
 8003610:	fb01 f303 	mul.w	r3, r1, r3
 8003614:	4413      	add	r3, r2
 8003616:	3320      	adds	r3, #32
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800361c:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800361e:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8003620:	494e      	ldr	r1, [pc, #312]	; (800375c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	202c      	movs	r0, #44	; 0x2c
 8003626:	fb00 f303 	mul.w	r3, r0, r3
 800362a:	440b      	add	r3, r1
 800362c:	3328      	adds	r3, #40	; 0x28
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	3304      	adds	r3, #4
 8003632:	69f9      	ldr	r1, [r7, #28]
 8003634:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 800363c:	4a47      	ldr	r2, [pc, #284]	; (800375c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	212c      	movs	r1, #44	; 0x2c
 8003642:	fb01 f303 	mul.w	r3, r1, r3
 8003646:	4413      	add	r3, r2
 8003648:	3320      	adds	r3, #32
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	4a43      	ldr	r2, [pc, #268]	; (800375c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	212c      	movs	r1, #44	; 0x2c
 8003654:	fb01 f303 	mul.w	r3, r1, r3
 8003658:	4413      	add	r3, r2
 800365a:	3314      	adds	r3, #20
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4403      	add	r3, r0
 8003660:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8003662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003664:	2b00      	cmp	r3, #0
 8003666:	dc01      	bgt.n	800366c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8003668:	2300      	movs	r3, #0
 800366a:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 800366c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366e:	2b00      	cmp	r3, #0
 8003670:	dc01      	bgt.n	8003676 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8003672:	2300      	movs	r3, #0
 8003674:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8003676:	2300      	movs	r3, #0
 8003678:	62bb      	str	r3, [r7, #40]	; 0x28
 800367a:	e062      	b.n	8003742 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800367c:	2300      	movs	r3, #0
 800367e:	627b      	str	r3, [r7, #36]	; 0x24
 8003680:	e059      	b.n	8003736 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	3301      	adds	r3, #1
 8003686:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003688:	3201      	adds	r2, #1
 800368a:	fb03 f202 	mul.w	r2, r3, r2
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	fb02 f303 	mul.w	r3, r2, r3
 8003694:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	429a      	cmp	r2, r3
 800369c:	d348      	bcc.n	8003730 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800369e:	2300      	movs	r3, #0
 80036a0:	623b      	str	r3, [r7, #32]
 80036a2:	e042      	b.n	800372a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 80036a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a6:	3301      	adds	r3, #1
 80036a8:	6a3a      	ldr	r2, [r7, #32]
 80036aa:	fb03 f202 	mul.w	r2, r3, r2
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	fb02 f303 	mul.w	r3, r2, r3
 80036b4:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 80036b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d332      	bcc.n	8003724 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 80036be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d82e      	bhi.n	8003724 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 80036c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d02a      	beq.n	8003724 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80036ce:	4b24      	ldr	r3, [pc, #144]	; (8003760 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	4924      	ldr	r1, [pc, #144]	; (8003764 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80036d4:	4613      	mov	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036e0:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80036e2:	4b1f      	ldr	r3, [pc, #124]	; (8003760 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	491f      	ldr	r1, [pc, #124]	; (8003764 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80036e8:	4613      	mov	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	440b      	add	r3, r1
 80036f2:	3304      	adds	r3, #4
 80036f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f6:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80036f8:	4b19      	ldr	r3, [pc, #100]	; (8003760 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	4919      	ldr	r1, [pc, #100]	; (8003764 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80036fe:	4613      	mov	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	440b      	add	r3, r1
 8003708:	3308      	adds	r3, #8
 800370a:	6a3a      	ldr	r2, [r7, #32]
 800370c:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800370e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003710:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 8003712:	4b13      	ldr	r3, [pc, #76]	; (8003760 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	3301      	adds	r3, #1
 8003718:	4a11      	ldr	r2, [pc, #68]	; (8003760 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800371a:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800371c:	4b10      	ldr	r3, [pc, #64]	; (8003760 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b7f      	cmp	r3, #127	; 0x7f
 8003722:	d812      	bhi.n	800374a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	3301      	adds	r3, #1
 8003728:	623b      	str	r3, [r7, #32]
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	2b0f      	cmp	r3, #15
 800372e:	d9b9      	bls.n	80036a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	3301      	adds	r3, #1
 8003734:	627b      	str	r3, [r7, #36]	; 0x24
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	2b0f      	cmp	r3, #15
 800373a:	d9a2      	bls.n	8003682 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800373c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373e:	3301      	adds	r3, #1
 8003740:	62bb      	str	r3, [r7, #40]	; 0x28
 8003742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003744:	2b0f      	cmp	r3, #15
 8003746:	d999      	bls.n	800367c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8003748:	e000      	b.n	800374c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800374a:	bf00      	nop
          }
        }
      }
    }
  }
}
 800374c:	373c      	adds	r7, #60	; 0x3c
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	3b9aca00 	.word	0x3b9aca00
 800375c:	0801041c 	.word	0x0801041c
 8003760:	24000d18 	.word	0x24000d18
 8003764:	24000318 	.word	0x24000318

08003768 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8003768:	b480      	push	{r7}
 800376a:	b093      	sub	sp, #76	; 0x4c
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 8003772:	f04f 33ff 	mov.w	r3, #4294967295
 8003776:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	085a      	lsrs	r2, r3, #1
 800377c:	4b7a      	ldr	r3, [pc, #488]	; (8003968 <I2C_Compute_SCLL_SCLH+0x200>)
 800377e:	4413      	add	r3, r2
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	fbb3 f3f2 	udiv	r3, r3, r2
 8003786:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8003788:	4a78      	ldr	r2, [pc, #480]	; (800396c <I2C_Compute_SCLL_SCLH+0x204>)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	212c      	movs	r1, #44	; 0x2c
 800378e:	fb01 f303 	mul.w	r3, r1, r3
 8003792:	4413      	add	r3, r2
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	085a      	lsrs	r2, r3, #1
 8003798:	4b73      	ldr	r3, [pc, #460]	; (8003968 <I2C_Compute_SCLL_SCLH+0x200>)
 800379a:	4413      	add	r3, r2
 800379c:	4973      	ldr	r1, [pc, #460]	; (800396c <I2C_Compute_SCLL_SCLH+0x204>)
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	202c      	movs	r0, #44	; 0x2c
 80037a2:	fb00 f202 	mul.w	r2, r0, r2
 80037a6:	440a      	add	r2, r1
 80037a8:	6812      	ldr	r2, [r2, #0]
 80037aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80037ae:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 80037b0:	2332      	movs	r3, #50	; 0x32
 80037b2:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 80037b4:	4a6d      	ldr	r2, [pc, #436]	; (800396c <I2C_Compute_SCLL_SCLH+0x204>)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	212c      	movs	r1, #44	; 0x2c
 80037ba:	fb01 f303 	mul.w	r3, r1, r3
 80037be:	4413      	add	r3, r2
 80037c0:	3328      	adds	r3, #40	; 0x28
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c6:	fb02 f303 	mul.w	r3, r2, r3
 80037ca:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 80037cc:	4a67      	ldr	r2, [pc, #412]	; (800396c <I2C_Compute_SCLL_SCLH+0x204>)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	212c      	movs	r1, #44	; 0x2c
 80037d2:	fb01 f303 	mul.w	r3, r1, r3
 80037d6:	4413      	add	r3, r2
 80037d8:	3304      	adds	r3, #4
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a62      	ldr	r2, [pc, #392]	; (8003968 <I2C_Compute_SCLL_SCLH+0x200>)
 80037de:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e2:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 80037e4:	4a61      	ldr	r2, [pc, #388]	; (800396c <I2C_Compute_SCLL_SCLH+0x204>)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	212c      	movs	r1, #44	; 0x2c
 80037ea:	fb01 f303 	mul.w	r3, r1, r3
 80037ee:	4413      	add	r3, r2
 80037f0:	3308      	adds	r3, #8
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a5c      	ldr	r2, [pc, #368]	; (8003968 <I2C_Compute_SCLL_SCLH+0x200>)
 80037f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fa:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 80037fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fe:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003800:	2300      	movs	r3, #0
 8003802:	637b      	str	r3, [r7, #52]	; 0x34
 8003804:	e0a3      	b.n	800394e <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8003806:	495a      	ldr	r1, [pc, #360]	; (8003970 <I2C_Compute_SCLL_SCLH+0x208>)
 8003808:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800380a:	4613      	mov	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4413      	add	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	440b      	add	r3, r1
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	1c5a      	adds	r2, r3, #1
 8003818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381a:	fb02 f303 	mul.w	r3, r2, r3
 800381e:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003820:	2300      	movs	r3, #0
 8003822:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003824:	e08c      	b.n	8003940 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8003826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003828:	6a3b      	ldr	r3, [r7, #32]
 800382a:	441a      	add	r2, r3
 800382c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800382e:	3301      	adds	r3, #1
 8003830:	6979      	ldr	r1, [r7, #20]
 8003832:	fb03 f101 	mul.w	r1, r3, r1
 8003836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	440b      	add	r3, r1
 800383c:	4413      	add	r3, r2
 800383e:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8003840:	4a4a      	ldr	r2, [pc, #296]	; (800396c <I2C_Compute_SCLL_SCLH+0x204>)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	212c      	movs	r1, #44	; 0x2c
 8003846:	fb01 f303 	mul.w	r3, r1, r3
 800384a:	4413      	add	r3, r2
 800384c:	3318      	adds	r3, #24
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	429a      	cmp	r2, r3
 8003854:	d971      	bls.n	800393a <I2C_Compute_SCLL_SCLH+0x1d2>
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385a:	1ad2      	subs	r2, r2, r3
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	089b      	lsrs	r3, r3, #2
 8003862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003864:	429a      	cmp	r2, r3
 8003866:	d268      	bcs.n	800393a <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003868:	2300      	movs	r3, #0
 800386a:	63bb      	str	r3, [r7, #56]	; 0x38
 800386c:	e062      	b.n	8003934 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800386e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003870:	6a3b      	ldr	r3, [r7, #32]
 8003872:	441a      	add	r2, r3
 8003874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003876:	3301      	adds	r3, #1
 8003878:	6979      	ldr	r1, [r7, #20]
 800387a:	fb03 f101 	mul.w	r1, r3, r1
 800387e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	440b      	add	r3, r1
 8003884:	4413      	add	r3, r2
 8003886:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	441a      	add	r2, r3
 800388e:	4937      	ldr	r1, [pc, #220]	; (800396c <I2C_Compute_SCLL_SCLH+0x204>)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	202c      	movs	r0, #44	; 0x2c
 8003894:	fb00 f303 	mul.w	r3, r0, r3
 8003898:	440b      	add	r3, r1
 800389a:	3320      	adds	r3, #32
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	441a      	add	r2, r3
 80038a0:	4932      	ldr	r1, [pc, #200]	; (800396c <I2C_Compute_SCLL_SCLH+0x204>)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	202c      	movs	r0, #44	; 0x2c
 80038a6:	fb00 f303 	mul.w	r3, r0, r3
 80038aa:	440b      	add	r3, r1
 80038ac:	3324      	adds	r3, #36	; 0x24
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4413      	add	r3, r2
 80038b2:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d338      	bcc.n	800392e <I2C_Compute_SCLL_SCLH+0x1c6>
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d834      	bhi.n	800392e <I2C_Compute_SCLL_SCLH+0x1c6>
 80038c4:	4a29      	ldr	r2, [pc, #164]	; (800396c <I2C_Compute_SCLL_SCLH+0x204>)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	212c      	movs	r1, #44	; 0x2c
 80038ca:	fb01 f303 	mul.w	r3, r1, r3
 80038ce:	4413      	add	r3, r2
 80038d0:	331c      	adds	r3, #28
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d329      	bcc.n	800392e <I2C_Compute_SCLL_SCLH+0x1c6>
 80038da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d225      	bcs.n	800392e <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 80038ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	da02      	bge.n	80038f6 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 80038f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f2:	425b      	negs	r3, r3
 80038f4:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 80038f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d917      	bls.n	800392e <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 80038fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003900:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 8003902:	491b      	ldr	r1, [pc, #108]	; (8003970 <I2C_Compute_SCLL_SCLH+0x208>)
 8003904:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003906:	4613      	mov	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4413      	add	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	440b      	add	r3, r1
 8003910:	3310      	adds	r3, #16
 8003912:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003914:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8003916:	4916      	ldr	r1, [pc, #88]	; (8003970 <I2C_Compute_SCLL_SCLH+0x208>)
 8003918:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800391a:	4613      	mov	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	440b      	add	r3, r1
 8003924:	330c      	adds	r3, #12
 8003926:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003928:	601a      	str	r2, [r3, #0]
              ret = count;
 800392a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800392c:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800392e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003930:	3301      	adds	r3, #1
 8003932:	63bb      	str	r3, [r7, #56]	; 0x38
 8003934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003936:	2bff      	cmp	r3, #255	; 0xff
 8003938:	d999      	bls.n	800386e <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800393a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800393c:	3301      	adds	r3, #1
 800393e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003942:	2bff      	cmp	r3, #255	; 0xff
 8003944:	f67f af6f 	bls.w	8003826 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800394a:	3301      	adds	r3, #1
 800394c:	637b      	str	r3, [r7, #52]	; 0x34
 800394e:	4b09      	ldr	r3, [pc, #36]	; (8003974 <I2C_Compute_SCLL_SCLH+0x20c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003954:	429a      	cmp	r2, r3
 8003956:	f4ff af56 	bcc.w	8003806 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800395a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800395c:	4618      	mov	r0, r3
 800395e:	374c      	adds	r7, #76	; 0x4c
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	3b9aca00 	.word	0x3b9aca00
 800396c:	0801041c 	.word	0x0801041c
 8003970:	24000318 	.word	0x24000318
 8003974:	24000d18 	.word	0x24000d18

08003978 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b08a      	sub	sp, #40	; 0x28
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8003980:	4b31      	ldr	r3, [pc, #196]	; (8003a48 <I2C4_MspInit+0xd0>)
 8003982:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003986:	4a30      	ldr	r2, [pc, #192]	; (8003a48 <I2C4_MspInit+0xd0>)
 8003988:	f043 0308 	orr.w	r3, r3, #8
 800398c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003990:	4b2d      	ldr	r3, [pc, #180]	; (8003a48 <I2C4_MspInit+0xd0>)
 8003992:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003996:	f003 0308 	and.w	r3, r3, #8
 800399a:	613b      	str	r3, [r7, #16]
 800399c:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800399e:	4b2a      	ldr	r3, [pc, #168]	; (8003a48 <I2C4_MspInit+0xd0>)
 80039a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80039a4:	4a28      	ldr	r2, [pc, #160]	; (8003a48 <I2C4_MspInit+0xd0>)
 80039a6:	f043 0308 	orr.w	r3, r3, #8
 80039aa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80039ae:	4b26      	ldr	r3, [pc, #152]	; (8003a48 <I2C4_MspInit+0xd0>)
 80039b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80039b4:	f003 0308 	and.w	r3, r3, #8
 80039b8:	60fb      	str	r3, [r7, #12]
 80039ba:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 80039bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039c0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80039c2:	2312      	movs	r3, #18
 80039c4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80039c6:	2300      	movs	r3, #0
 80039c8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 80039ca:	2302      	movs	r3, #2
 80039cc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80039ce:	2304      	movs	r3, #4
 80039d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80039d2:	f107 0314 	add.w	r3, r7, #20
 80039d6:	4619      	mov	r1, r3
 80039d8:	481c      	ldr	r0, [pc, #112]	; (8003a4c <I2C4_MspInit+0xd4>)
 80039da:	f005 f8a1 	bl	8008b20 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80039de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039e2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80039e4:	2312      	movs	r3, #18
 80039e6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80039e8:	2300      	movs	r3, #0
 80039ea:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 80039ec:	2302      	movs	r3, #2
 80039ee:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 80039f0:	2304      	movs	r3, #4
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80039f4:	f107 0314 	add.w	r3, r7, #20
 80039f8:	4619      	mov	r1, r3
 80039fa:	4814      	ldr	r0, [pc, #80]	; (8003a4c <I2C4_MspInit+0xd4>)
 80039fc:	f005 f890 	bl	8008b20 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8003a00:	4b11      	ldr	r3, [pc, #68]	; (8003a48 <I2C4_MspInit+0xd0>)
 8003a02:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003a06:	4a10      	ldr	r2, [pc, #64]	; (8003a48 <I2C4_MspInit+0xd0>)
 8003a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a0c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8003a10:	4b0d      	ldr	r3, [pc, #52]	; (8003a48 <I2C4_MspInit+0xd0>)
 8003a12:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a1a:	60bb      	str	r3, [r7, #8]
 8003a1c:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8003a1e:	4b0a      	ldr	r3, [pc, #40]	; (8003a48 <I2C4_MspInit+0xd0>)
 8003a20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a24:	4a08      	ldr	r2, [pc, #32]	; (8003a48 <I2C4_MspInit+0xd0>)
 8003a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a2a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8003a2e:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <I2C4_MspInit+0xd0>)
 8003a30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a34:	4a04      	ldr	r2, [pc, #16]	; (8003a48 <I2C4_MspInit+0xd0>)
 8003a36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a3a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8003a3e:	bf00      	nop
 8003a40:	3728      	adds	r7, #40	; 0x28
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	58024400 	.word	0x58024400
 8003a4c:	58020c00 	.word	0x58020c00

08003a50 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b088      	sub	sp, #32
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 8003a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a5c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	4619      	mov	r1, r3
 8003a62:	480b      	ldr	r0, [pc, #44]	; (8003a90 <I2C4_MspDeInit+0x40>)
 8003a64:	f005 fa0c 	bl	8008e80 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 8003a68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a6c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	4619      	mov	r1, r3
 8003a72:	4807      	ldr	r0, [pc, #28]	; (8003a90 <I2C4_MspDeInit+0x40>)
 8003a74:	f005 fa04 	bl	8008e80 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8003a78:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <I2C4_MspDeInit+0x44>)
 8003a7a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003a7e:	4a05      	ldr	r2, [pc, #20]	; (8003a94 <I2C4_MspDeInit+0x44>)
 8003a80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a84:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 8003a88:	bf00      	nop
 8003a8a:	3720      	adds	r7, #32
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	58020c00 	.word	0x58020c00
 8003a94:	58024400 	.word	0x58024400

08003a98 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b088      	sub	sp, #32
 8003a9c:	af04      	add	r7, sp, #16
 8003a9e:	607b      	str	r3, [r7, #4]
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	81fb      	strh	r3, [r7, #14]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	81bb      	strh	r3, [r7, #12]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003aac:	8978      	ldrh	r0, [r7, #10]
 8003aae:	89ba      	ldrh	r2, [r7, #12]
 8003ab0:	89f9      	ldrh	r1, [r7, #14]
 8003ab2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ab6:	9302      	str	r3, [sp, #8]
 8003ab8:	8b3b      	ldrh	r3, [r7, #24]
 8003aba:	9301      	str	r3, [sp, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	4807      	ldr	r0, [pc, #28]	; (8003ae0 <I2C4_WriteReg+0x48>)
 8003ac4:	f005 fbee 	bl	80092a4 <HAL_I2C_Mem_Write>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	e001      	b.n	8003ad6 <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8003ad2:	f06f 0307 	mvn.w	r3, #7
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	24000d1c 	.word	0x24000d1c

08003ae4 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b088      	sub	sp, #32
 8003ae8:	af04      	add	r7, sp, #16
 8003aea:	607b      	str	r3, [r7, #4]
 8003aec:	4603      	mov	r3, r0
 8003aee:	81fb      	strh	r3, [r7, #14]
 8003af0:	460b      	mov	r3, r1
 8003af2:	81bb      	strh	r3, [r7, #12]
 8003af4:	4613      	mov	r3, r2
 8003af6:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003af8:	8978      	ldrh	r0, [r7, #10]
 8003afa:	89ba      	ldrh	r2, [r7, #12]
 8003afc:	89f9      	ldrh	r1, [r7, #14]
 8003afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b02:	9302      	str	r3, [sp, #8]
 8003b04:	8b3b      	ldrh	r3, [r7, #24]
 8003b06:	9301      	str	r3, [sp, #4]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	4807      	ldr	r0, [pc, #28]	; (8003b2c <I2C4_ReadReg+0x48>)
 8003b10:	f005 fcdc 	bl	80094cc <HAL_I2C_Mem_Read>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	e001      	b.n	8003b22 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8003b1e:	f06f 0307 	mvn.w	r3, #7
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	24000d1c 	.word	0x24000d1c

08003b30 <BSP_CAMERA_Init>:
  *         naming QQVGA, QVGA, VGA ...
  * @param  PixelFormat Capture pixel format
  * @retval BSP status
  */
int32_t BSP_CAMERA_Init(uint32_t Instance, uint32_t Resolution, uint32_t PixelFormat)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	617b      	str	r3, [r7, #20]

#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif /*USE_BSP_IO_CLASS*/

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <BSP_CAMERA_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003b46:	f06f 0301 	mvn.w	r3, #1
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	e02d      	b.n	8003baa <BSP_CAMERA_Init+0x7a>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#else
    /* DCMI Initialization */
    HAL_DCMI_MspInit(&hdcmi);
 8003b4e:	4819      	ldr	r0, [pc, #100]	; (8003bb4 <BSP_CAMERA_Init+0x84>)
 8003b50:	f7fc fd82 	bl	8000658 <HAL_DCMI_MspInit>
#endif
    /* Initialize the camera driver structure */
    MX_DCMI_Init();
 8003b54:	f7fc fd4c 	bl	80005f0 <MX_DCMI_Init>

    if(BSP_CAMERA_HwReset(0) != BSP_ERROR_NONE)
 8003b58:	2000      	movs	r0, #0
 8003b5a:	f000 f887 	bl	8003c6c <BSP_CAMERA_HwReset>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d003      	beq.n	8003b6c <BSP_CAMERA_Init+0x3c>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8003b64:	f06f 0307 	mvn.w	r3, #7
 8003b68:	617b      	str	r3, [r7, #20]
 8003b6a:	e01e      	b.n	8003baa <BSP_CAMERA_Init+0x7a>
          ret = OV5640_Probe(Resolution, PixelFormat);
        }
#endif /* USE_CAMERA_SENSOR_OV5640 */
#else
#if (USE_CAMERA_SENSOR_OV5640 == 1)
        ret = OV5640_Probe(Resolution, PixelFormat);
 8003b6c:	6879      	ldr	r1, [r7, #4]
 8003b6e:	68b8      	ldr	r0, [r7, #8]
 8003b70:	f000 f93e 	bl	8003df0 <OV5640_Probe>
 8003b74:	6178      	str	r0, [r7, #20]
#endif /* USE_CAMERA_SENSOR_OV5640 */
#endif /* USE_CAMERA_SENSOR_S5K5CAG */

        if(ret != BSP_ERROR_NONE)
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d003      	beq.n	8003b84 <BSP_CAMERA_Init+0x54>
        {
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003b7c:	f06f 0306 	mvn.w	r3, #6
 8003b80:	617b      	str	r3, [r7, #20]
 8003b82:	e012      	b.n	8003baa <BSP_CAMERA_Init+0x7a>
          else
          {
            ret = BSP_ERROR_NONE;
          }
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS == 1) */
          Camera_Ctx[Instance].Resolution = Resolution;
 8003b84:	490c      	ldr	r1, [pc, #48]	; (8003bb8 <BSP_CAMERA_Init+0x88>)
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	4413      	add	r3, r2
 8003b8e:	011b      	lsls	r3, r3, #4
 8003b90:	440b      	add	r3, r1
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	601a      	str	r2, [r3, #0]
          Camera_Ctx[Instance].PixelFormat = PixelFormat;
 8003b96:	4908      	ldr	r1, [pc, #32]	; (8003bb8 <BSP_CAMERA_Init+0x88>)
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	4413      	add	r3, r2
 8003ba0:	011b      	lsls	r3, r3, #4
 8003ba2:	440b      	add	r3, r1
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	601a      	str	r2, [r3, #0]
#endif
    }
  }

  /* BSP status */
  return ret;
 8003baa:	697b      	ldr	r3, [r7, #20]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3718      	adds	r7, #24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	240000d4 	.word	0x240000d4
 8003bb8:	24000d74 	.word	0x24000d74

08003bbc <BSP_CAMERA_Start>:
  * @param  pBff     pointer to the camera output buffer
  * @param  Mode CAMERA_MODE_CONTINUOUS or CAMERA_MODE_SNAPSHOT
  * @retval BSP status
  */
int32_t BSP_CAMERA_Start(uint32_t Instance, uint8_t *pBff, uint32_t Mode)
{
 8003bbc:	b590      	push	{r4, r7, lr}
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d003      	beq.n	8003bd6 <BSP_CAMERA_Start+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003bce:	f06f 0301 	mvn.w	r3, #1
 8003bd2:	617b      	str	r3, [r7, #20]
 8003bd4:	e022      	b.n	8003c1c <BSP_CAMERA_Start+0x60>
  }
  else if(HAL_DCMI_Start_DMA(&hdcmi, Mode, (uint32_t)pBff, (uint32_t)GetSize(Camera_Ctx[Instance].Resolution, Camera_Ctx[Instance].PixelFormat)) != HAL_OK)
 8003bd6:	68bc      	ldr	r4, [r7, #8]
 8003bd8:	4913      	ldr	r1, [pc, #76]	; (8003c28 <BSP_CAMERA_Start+0x6c>)
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	4413      	add	r3, r2
 8003be2:	011b      	lsls	r3, r3, #4
 8003be4:	440b      	add	r3, r1
 8003be6:	6818      	ldr	r0, [r3, #0]
 8003be8:	490f      	ldr	r1, [pc, #60]	; (8003c28 <BSP_CAMERA_Start+0x6c>)
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	4613      	mov	r3, r2
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	4413      	add	r3, r2
 8003bf2:	011b      	lsls	r3, r3, #4
 8003bf4:	440b      	add	r3, r1
 8003bf6:	3304      	adds	r3, #4
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	f000 f8a6 	bl	8003d4c <GetSize>
 8003c00:	4603      	mov	r3, r0
 8003c02:	4622      	mov	r2, r4
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	4809      	ldr	r0, [pc, #36]	; (8003c2c <BSP_CAMERA_Start+0x70>)
 8003c08:	f000 fdca 	bl	80047a0 <HAL_DCMI_Start_DMA>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d002      	beq.n	8003c18 <BSP_CAMERA_Start+0x5c>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 8003c12:	f06f 0303 	mvn.w	r3, #3
 8003c16:	e002      	b.n	8003c1e <BSP_CAMERA_Start+0x62>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	617b      	str	r3, [r7, #20]
  }

  /* Return BSP status */
  return ret;
 8003c1c:	697b      	ldr	r3, [r7, #20]
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	371c      	adds	r7, #28
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd90      	pop	{r4, r7, pc}
 8003c26:	bf00      	nop
 8003c28:	24000d74 	.word	0x24000d74
 8003c2c:	240000d4 	.word	0x240000d4

08003c30 <BSP_CAMERA_Stop>:
  * @brief  Stop the CAMERA capture
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_Stop(uint32_t Instance)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <BSP_CAMERA_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003c3e:	f06f 0301 	mvn.w	r3, #1
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	e00b      	b.n	8003c5e <BSP_CAMERA_Stop+0x2e>
  }
  else if(HAL_DCMI_Stop(&hdcmi) != HAL_OK)
 8003c46:	4808      	ldr	r0, [pc, #32]	; (8003c68 <BSP_CAMERA_Stop+0x38>)
 8003c48:	f000 fe6c 	bl	8004924 <HAL_DCMI_Stop>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <BSP_CAMERA_Stop+0x2a>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8003c52:	f06f 0303 	mvn.w	r3, #3
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	e001      	b.n	8003c5e <BSP_CAMERA_Stop+0x2e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	240000d4 	.word	0x240000d4

08003c6c <BSP_CAMERA_HwReset>:
  * @brief  CAMERA hardware reset
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_HwReset(uint32_t Instance)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003c74:	2300      	movs	r3, #0
 8003c76:	60fb      	str	r3, [r7, #12]
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d002      	beq.n	8003c84 <BSP_CAMERA_HwReset+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003c7e:	f06f 0301 	mvn.w	r3, #1
 8003c82:	60fb      	str	r3, [r7, #12]
      }
    }
#endif
  }

  return ret;
 8003c84:	68fb      	ldr	r3, [r7, #12]
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3714      	adds	r7, #20
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <BSP_CAMERA_PwrDown>:
  * @brief  CAMERA power down
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_PwrDown(uint32_t Instance)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b085      	sub	sp, #20
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60fb      	str	r3, [r7, #12]
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <BSP_CAMERA_PwrDown+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003ca4:	f06f 0301 	mvn.w	r3, #1
 8003ca8:	60fb      	str	r3, [r7, #12]
      }
    }
#endif
  }

  return ret;
 8003caa:	68fb      	ldr	r3, [r7, #12]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <BSP_CAMERA_LineEventCallback>:
  * @brief  Line Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_LineEventCallback(uint32_t Instance)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <BSP_CAMERA_VsyncEventCallback>:
  * @brief  Vsync Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_VsyncEventCallback(uint32_t Instance)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <BSP_CAMERA_ErrorCallback>:
  * @brief  Error callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_ErrorCallback(uint32_t Instance)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_DCMI_LineEventCallback>:
  * @brief  Line event callback
  * @param  hdcmi  pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_LineEventCallback(0);
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	f7ff ffdb 	bl	8003cb8 <BSP_CAMERA_LineEventCallback>
}
 8003d02:	bf00      	nop
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <HAL_DCMI_FrameEventCallback>:
  * @brief  Frame event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
 {
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b082      	sub	sp, #8
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_FrameEventCallback(0);
 8003d12:	2000      	movs	r0, #0
 8003d14:	f7fd fd02 	bl	800171c <BSP_CAMERA_FrameEventCallback>
}
 8003d18:	bf00      	nop
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_DCMI_VsyncEventCallback>:
  * @brief  Vsync event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_VsyncEventCallback(0);
 8003d28:	2000      	movs	r0, #0
 8003d2a:	f7ff ffcf 	bl	8003ccc <BSP_CAMERA_VsyncEventCallback>
}
 8003d2e:	bf00      	nop
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <HAL_DCMI_ErrorCallback>:
  * @brief  Error callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b082      	sub	sp, #8
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_ErrorCallback(0);
 8003d3e:	2000      	movs	r0, #0
 8003d40:	f7ff ffce 	bl	8003ce0 <BSP_CAMERA_ErrorCallback>
}
 8003d44:	bf00      	nop
 8003d46:	3708      	adds	r7, #8
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <GetSize>:
  * @param  Resolution  the current resolution.
  * @param  PixelFormat Pixel format
  * @retval capture size in pixels unit.
  */
static int32_t GetSize(uint32_t Resolution, uint32_t PixelFormat)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t size = 0;
 8003d56:	2300      	movs	r3, #0
 8003d58:	60fb      	str	r3, [r7, #12]
  uint32_t pf_div;
  if(PixelFormat == CAMERA_PF_RGB888)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d102      	bne.n	8003d66 <GetSize+0x1a>
  {
    pf_div = 3; /* each pixel on 3 bytes so 3/4 words */
 8003d60:	2303      	movs	r3, #3
 8003d62:	60bb      	str	r3, [r7, #8]
 8003d64:	e001      	b.n	8003d6a <GetSize+0x1e>
  }
  else
  {
    pf_div = 2; /* each pixel on 2 bytes so 1/2 words*/
 8003d66:	2302      	movs	r3, #2
 8003d68:	60bb      	str	r3, [r7, #8]
  }
  /* Get capture size */
  switch (Resolution)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b04      	cmp	r3, #4
 8003d6e:	d834      	bhi.n	8003dda <GetSize+0x8e>
 8003d70:	a201      	add	r2, pc, #4	; (adr r2, 8003d78 <GetSize+0x2c>)
 8003d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d76:	bf00      	nop
 8003d78:	08003d8d 	.word	0x08003d8d
 8003d7c:	08003d9d 	.word	0x08003d9d
 8003d80:	08003dad 	.word	0x08003dad
 8003d84:	08003dbd 	.word	0x08003dbd
 8003d88:	08003dcd 	.word	0x08003dcd
  {
  case CAMERA_R160x120:
    size =  ((uint32_t)(160*120)*pf_div)/4U;
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8003d92:	fb02 f303 	mul.w	r3, r2, r3
 8003d96:	089b      	lsrs	r3, r3, #2
 8003d98:	60fb      	str	r3, [r7, #12]
    break;
 8003d9a:	e01f      	b.n	8003ddc <GetSize+0x90>
  case CAMERA_R320x240:
    size =  ((uint32_t)(320*240)*pf_div)/4U;
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 8003da2:	fb02 f303 	mul.w	r3, r2, r3
 8003da6:	089b      	lsrs	r3, r3, #2
 8003da8:	60fb      	str	r3, [r7, #12]
    break;
 8003daa:	e017      	b.n	8003ddc <GetSize+0x90>
  case CAMERA_R480x272:
    size =  ((uint32_t)(480*272)*pf_div)/4U;
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	4613      	mov	r3, r2
 8003db0:	021b      	lsls	r3, r3, #8
 8003db2:	1a9b      	subs	r3, r3, r2
 8003db4:	025b      	lsls	r3, r3, #9
 8003db6:	089b      	lsrs	r3, r3, #2
 8003db8:	60fb      	str	r3, [r7, #12]
    break;
 8003dba:	e00f      	b.n	8003ddc <GetSize+0x90>
  case CAMERA_R640x480:
    size =  ((uint32_t)(640*480)*pf_div)/4U;
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
 8003dc2:	fb02 f303 	mul.w	r3, r2, r3
 8003dc6:	089b      	lsrs	r3, r3, #2
 8003dc8:	60fb      	str	r3, [r7, #12]
    break;
 8003dca:	e007      	b.n	8003ddc <GetSize+0x90>
  case CAMERA_R800x480:
    size =  ((uint32_t)(800*480)*pf_div)/4U;
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	4a07      	ldr	r2, [pc, #28]	; (8003dec <GetSize+0xa0>)
 8003dd0:	fb02 f303 	mul.w	r3, r2, r3
 8003dd4:	089b      	lsrs	r3, r3, #2
 8003dd6:	60fb      	str	r3, [r7, #12]
    break;
 8003dd8:	e000      	b.n	8003ddc <GetSize+0x90>
  default:
    break;
 8003dda:	bf00      	nop
  }

  return (int32_t)size;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3714      	adds	r7, #20
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	0005dc00 	.word	0x0005dc00

08003df0 <OV5640_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t OV5640_Probe(uint32_t Resolution, uint32_t PixelFormat)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b08a      	sub	sp, #40	; 0x28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  OV5640_IO_t              IOCtx;
  uint32_t                  id;
  static OV5640_Object_t   OV5640Obj;

  /* Configure the audio driver */
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
 8003dfa:	2378      	movs	r3, #120	; 0x78
 8003dfc:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 8003dfe:	4b2c      	ldr	r3, [pc, #176]	; (8003eb0 <OV5640_Probe+0xc0>)
 8003e00:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8003e02:	4b2c      	ldr	r3, [pc, #176]	; (8003eb4 <OV5640_Probe+0xc4>)
 8003e04:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 8003e06:	4b2c      	ldr	r3, [pc, #176]	; (8003eb8 <OV5640_Probe+0xc8>)
 8003e08:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 8003e0a:	4b2c      	ldr	r3, [pc, #176]	; (8003ebc <OV5640_Probe+0xcc>)
 8003e0c:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8003e0e:	4b2c      	ldr	r3, [pc, #176]	; (8003ec0 <OV5640_Probe+0xd0>)
 8003e10:	623b      	str	r3, [r7, #32]

  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 8003e12:	f107 030c 	add.w	r3, r7, #12
 8003e16:	4619      	mov	r1, r3
 8003e18:	482a      	ldr	r0, [pc, #168]	; (8003ec4 <OV5640_Probe+0xd4>)
 8003e1a:	f7fd fc95 	bl	8001748 <OV5640_RegisterBusIO>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <OV5640_Probe+0x3c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003e24:	f06f 0304 	mvn.w	r3, #4
 8003e28:	627b      	str	r3, [r7, #36]	; 0x24
 8003e2a:	e03c      	b.n	8003ea6 <OV5640_Probe+0xb6>
  }
  else if(OV5640_ReadID(&OV5640Obj, &id) != OV5640_OK)
 8003e2c:	f107 0308 	add.w	r3, r7, #8
 8003e30:	4619      	mov	r1, r3
 8003e32:	4824      	ldr	r0, [pc, #144]	; (8003ec4 <OV5640_Probe+0xd4>)
 8003e34:	f7fe f8dc 	bl	8001ff0 <OV5640_ReadID>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d003      	beq.n	8003e46 <OV5640_Probe+0x56>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003e3e:	f06f 0304 	mvn.w	r3, #4
 8003e42:	627b      	str	r3, [r7, #36]	; 0x24
 8003e44:	e02f      	b.n	8003ea6 <OV5640_Probe+0xb6>
  }
  else
  {
    if(id != OV5640_ID)
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	f245 6240 	movw	r2, #22080	; 0x5640
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d003      	beq.n	8003e58 <OV5640_Probe+0x68>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003e50:	f06f 0306 	mvn.w	r3, #6
 8003e54:	627b      	str	r3, [r7, #36]	; 0x24
 8003e56:	e026      	b.n	8003ea6 <OV5640_Probe+0xb6>
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 8003e58:	4b1b      	ldr	r3, [pc, #108]	; (8003ec8 <OV5640_Probe+0xd8>)
 8003e5a:	4a1c      	ldr	r2, [pc, #112]	; (8003ecc <OV5640_Probe+0xdc>)
 8003e5c:	601a      	str	r2, [r3, #0]
      Camera_CompObj = &OV5640Obj;
 8003e5e:	4b1c      	ldr	r3, [pc, #112]	; (8003ed0 <OV5640_Probe+0xe0>)
 8003e60:	4a18      	ldr	r2, [pc, #96]	; (8003ec4 <OV5640_Probe+0xd4>)
 8003e62:	601a      	str	r2, [r3, #0]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 8003e64:	4b18      	ldr	r3, [pc, #96]	; (8003ec8 <OV5640_Probe+0xd8>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a19      	ldr	r2, [pc, #100]	; (8003ed0 <OV5640_Probe+0xe0>)
 8003e6c:	6810      	ldr	r0, [r2, #0]
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	6879      	ldr	r1, [r7, #4]
 8003e72:	4798      	blx	r3
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <OV5640_Probe+0x92>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003e7a:	f06f 0304 	mvn.w	r3, #4
 8003e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e80:	e011      	b.n	8003ea6 <OV5640_Probe+0xb6>
      }
	  else if(Camera_Drv->GetCapabilities(Camera_CompObj, Camera_Cap) != OV5640_OK)
 8003e82:	4b11      	ldr	r3, [pc, #68]	; (8003ec8 <OV5640_Probe+0xd8>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	4a11      	ldr	r2, [pc, #68]	; (8003ed0 <OV5640_Probe+0xe0>)
 8003e8a:	6812      	ldr	r2, [r2, #0]
 8003e8c:	4911      	ldr	r1, [pc, #68]	; (8003ed4 <OV5640_Probe+0xe4>)
 8003e8e:	6809      	ldr	r1, [r1, #0]
 8003e90:	4610      	mov	r0, r2
 8003e92:	4798      	blx	r3
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <OV5640_Probe+0xb2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003e9a:	f06f 0304 	mvn.w	r3, #4
 8003e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea0:	e001      	b.n	8003ea6 <OV5640_Probe+0xb6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3728      	adds	r7, #40	; 0x28
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	08003285 	.word	0x08003285
 8003eb4:	080032f9 	.word	0x080032f9
 8003eb8:	08003421 	.word	0x08003421
 8003ebc:	080033c5 	.word	0x080033c5
 8003ec0:	0800347d 	.word	0x0800347d
 8003ec4:	24000dac 	.word	0x24000dac
 8003ec8:	24000da4 	.word	0x24000da4
 8003ecc:	24000000 	.word	0x24000000
 8003ed0:	24000d70 	.word	0x24000d70
 8003ed4:	24000da8 	.word	0x24000da8

08003ed8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ede:	4b0a      	ldr	r3, [pc, #40]	; (8003f08 <HAL_MspInit+0x30>)
 8003ee0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003ee4:	4a08      	ldr	r2, [pc, #32]	; (8003f08 <HAL_MspInit+0x30>)
 8003ee6:	f043 0302 	orr.w	r3, r3, #2
 8003eea:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8003eee:	4b06      	ldr	r3, [pc, #24]	; (8003f08 <HAL_MspInit+0x30>)
 8003ef0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	607b      	str	r3, [r7, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	58024400 	.word	0x58024400

08003f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f10:	e7fe      	b.n	8003f10 <NMI_Handler+0x4>

08003f12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f12:	b480      	push	{r7}
 8003f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f16:	e7fe      	b.n	8003f16 <HardFault_Handler+0x4>

08003f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f1c:	e7fe      	b.n	8003f1c <MemManage_Handler+0x4>

08003f1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f22:	e7fe      	b.n	8003f22 <BusFault_Handler+0x4>

08003f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f28:	e7fe      	b.n	8003f28 <UsageFault_Handler+0x4>

08003f2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f2e:	bf00      	nop
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f3c:	bf00      	nop
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f46:	b480      	push	{r7}
 8003f48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f4a:	bf00      	nop
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f58:	f000 fa54 	bl	8004404 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f5c:	bf00      	nop
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003f64:	4802      	ldr	r0, [pc, #8]	; (8003f70 <USART1_IRQHandler+0x10>)
 8003f66:	f009 fc6f 	bl	800d848 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003f6a:	bf00      	nop
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	24000dd8 	.word	0x24000dd8

08003f74 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8003f78:	4802      	ldr	r0, [pc, #8]	; (8003f84 <DMA2_Stream1_IRQHandler+0x10>)
 8003f7a:	f002 f9c3 	bl	8006304 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003f7e:	bf00      	nop
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	24000124 	.word	0x24000124

08003f88 <DCMI_PSSI_IRQHandler>:

/**
  * @brief This function handles DCMI and PSSI global interrupt.
  */
void DCMI_PSSI_IRQHandler(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_PSSI_IRQn 0 */

  /* USER CODE END DCMI_PSSI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8003f8c:	4802      	ldr	r0, [pc, #8]	; (8003f98 <DCMI_PSSI_IRQHandler+0x10>)
 8003f8e:	f000 fd29 	bl	80049e4 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_PSSI_IRQn 1 */

  /* USER CODE END DCMI_PSSI_IRQn 1 */
}
 8003f92:	bf00      	nop
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	240000d4 	.word	0x240000d4

08003f9c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003fa0:	4802      	ldr	r0, [pc, #8]	; (8003fac <LTDC_IRQHandler+0x10>)
 8003fa2:	f005 ffe7 	bl	8009f74 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003fa6:	bf00      	nop
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	2400023c 	.word	0x2400023c

08003fb0 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC Error global Interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003fb4:	4802      	ldr	r0, [pc, #8]	; (8003fc0 <LTDC_ER_IRQHandler+0x10>)
 8003fb6:	f005 ffdd 	bl	8009f74 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 8003fba:	bf00      	nop
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	2400023c 	.word	0x2400023c

08003fc4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003fc8:	4802      	ldr	r0, [pc, #8]	; (8003fd4 <DMA2D_IRQHandler+0x10>)
 8003fca:	f003 fe95 	bl	8007cf8 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003fce:	bf00      	nop
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	2400019c 	.word	0x2400019c

08003fd8 <_lseek>:
//  (void)file;
//  return 1;
//}

int _lseek(int file, int ptr, int dir)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
	...

08003ff4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ffc:	4a14      	ldr	r2, [pc, #80]	; (8004050 <_sbrk+0x5c>)
 8003ffe:	4b15      	ldr	r3, [pc, #84]	; (8004054 <_sbrk+0x60>)
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004008:	4b13      	ldr	r3, [pc, #76]	; (8004058 <_sbrk+0x64>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d102      	bne.n	8004016 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004010:	4b11      	ldr	r3, [pc, #68]	; (8004058 <_sbrk+0x64>)
 8004012:	4a12      	ldr	r2, [pc, #72]	; (800405c <_sbrk+0x68>)
 8004014:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004016:	4b10      	ldr	r3, [pc, #64]	; (8004058 <_sbrk+0x64>)
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4413      	add	r3, r2
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	429a      	cmp	r2, r3
 8004022:	d207      	bcs.n	8004034 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004024:	f00b fad4 	bl	800f5d0 <__errno>
 8004028:	4603      	mov	r3, r0
 800402a:	220c      	movs	r2, #12
 800402c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800402e:	f04f 33ff 	mov.w	r3, #4294967295
 8004032:	e009      	b.n	8004048 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004034:	4b08      	ldr	r3, [pc, #32]	; (8004058 <_sbrk+0x64>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800403a:	4b07      	ldr	r3, [pc, #28]	; (8004058 <_sbrk+0x64>)
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4413      	add	r3, r2
 8004042:	4a05      	ldr	r2, [pc, #20]	; (8004058 <_sbrk+0x64>)
 8004044:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004046:	68fb      	ldr	r3, [r7, #12]
}
 8004048:	4618      	mov	r0, r3
 800404a:	3718      	adds	r7, #24
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	24100000 	.word	0x24100000
 8004054:	00000400 	.word	0x00000400
 8004058:	24000dd4 	.word	0x24000dd4
 800405c:	24000e80 	.word	0x24000e80

08004060 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004060:	b480      	push	{r7}
 8004062:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004064:	4b32      	ldr	r3, [pc, #200]	; (8004130 <SystemInit+0xd0>)
 8004066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406a:	4a31      	ldr	r2, [pc, #196]	; (8004130 <SystemInit+0xd0>)
 800406c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004070:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004074:	4b2f      	ldr	r3, [pc, #188]	; (8004134 <SystemInit+0xd4>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 030f 	and.w	r3, r3, #15
 800407c:	2b02      	cmp	r3, #2
 800407e:	d807      	bhi.n	8004090 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004080:	4b2c      	ldr	r3, [pc, #176]	; (8004134 <SystemInit+0xd4>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f023 030f 	bic.w	r3, r3, #15
 8004088:	4a2a      	ldr	r2, [pc, #168]	; (8004134 <SystemInit+0xd4>)
 800408a:	f043 0303 	orr.w	r3, r3, #3
 800408e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004090:	4b29      	ldr	r3, [pc, #164]	; (8004138 <SystemInit+0xd8>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a28      	ldr	r2, [pc, #160]	; (8004138 <SystemInit+0xd8>)
 8004096:	f043 0301 	orr.w	r3, r3, #1
 800409a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800409c:	4b26      	ldr	r3, [pc, #152]	; (8004138 <SystemInit+0xd8>)
 800409e:	2200      	movs	r2, #0
 80040a0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80040a2:	4b25      	ldr	r3, [pc, #148]	; (8004138 <SystemInit+0xd8>)
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	4924      	ldr	r1, [pc, #144]	; (8004138 <SystemInit+0xd8>)
 80040a8:	4b24      	ldr	r3, [pc, #144]	; (800413c <SystemInit+0xdc>)
 80040aa:	4013      	ands	r3, r2
 80040ac:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80040ae:	4b21      	ldr	r3, [pc, #132]	; (8004134 <SystemInit+0xd4>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 030c 	and.w	r3, r3, #12
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d007      	beq.n	80040ca <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80040ba:	4b1e      	ldr	r3, [pc, #120]	; (8004134 <SystemInit+0xd4>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f023 030f 	bic.w	r3, r3, #15
 80040c2:	4a1c      	ldr	r2, [pc, #112]	; (8004134 <SystemInit+0xd4>)
 80040c4:	f043 0303 	orr.w	r3, r3, #3
 80040c8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80040ca:	4b1b      	ldr	r3, [pc, #108]	; (8004138 <SystemInit+0xd8>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80040d0:	4b19      	ldr	r3, [pc, #100]	; (8004138 <SystemInit+0xd8>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80040d6:	4b18      	ldr	r3, [pc, #96]	; (8004138 <SystemInit+0xd8>)
 80040d8:	2200      	movs	r2, #0
 80040da:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80040dc:	4b16      	ldr	r3, [pc, #88]	; (8004138 <SystemInit+0xd8>)
 80040de:	4a18      	ldr	r2, [pc, #96]	; (8004140 <SystemInit+0xe0>)
 80040e0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80040e2:	4b15      	ldr	r3, [pc, #84]	; (8004138 <SystemInit+0xd8>)
 80040e4:	4a17      	ldr	r2, [pc, #92]	; (8004144 <SystemInit+0xe4>)
 80040e6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80040e8:	4b13      	ldr	r3, [pc, #76]	; (8004138 <SystemInit+0xd8>)
 80040ea:	4a17      	ldr	r2, [pc, #92]	; (8004148 <SystemInit+0xe8>)
 80040ec:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80040ee:	4b12      	ldr	r3, [pc, #72]	; (8004138 <SystemInit+0xd8>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80040f4:	4b10      	ldr	r3, [pc, #64]	; (8004138 <SystemInit+0xd8>)
 80040f6:	4a14      	ldr	r2, [pc, #80]	; (8004148 <SystemInit+0xe8>)
 80040f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80040fa:	4b0f      	ldr	r3, [pc, #60]	; (8004138 <SystemInit+0xd8>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004100:	4b0d      	ldr	r3, [pc, #52]	; (8004138 <SystemInit+0xd8>)
 8004102:	4a11      	ldr	r2, [pc, #68]	; (8004148 <SystemInit+0xe8>)
 8004104:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004106:	4b0c      	ldr	r3, [pc, #48]	; (8004138 <SystemInit+0xd8>)
 8004108:	2200      	movs	r2, #0
 800410a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800410c:	4b0a      	ldr	r3, [pc, #40]	; (8004138 <SystemInit+0xd8>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a09      	ldr	r2, [pc, #36]	; (8004138 <SystemInit+0xd8>)
 8004112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004116:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004118:	4b07      	ldr	r3, [pc, #28]	; (8004138 <SystemInit+0xd8>)
 800411a:	2200      	movs	r2, #0
 800411c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800411e:	4b0b      	ldr	r3, [pc, #44]	; (800414c <SystemInit+0xec>)
 8004120:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004124:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004126:	bf00      	nop
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	e000ed00 	.word	0xe000ed00
 8004134:	52002000 	.word	0x52002000
 8004138:	58024400 	.word	0x58024400
 800413c:	eaf6ed7f 	.word	0xeaf6ed7f
 8004140:	02020200 	.word	0x02020200
 8004144:	01ff0000 	.word	0x01ff0000
 8004148:	01010280 	.word	0x01010280
 800414c:	52004000 	.word	0x52004000

08004150 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004154:	4b22      	ldr	r3, [pc, #136]	; (80041e0 <MX_USART1_UART_Init+0x90>)
 8004156:	4a23      	ldr	r2, [pc, #140]	; (80041e4 <MX_USART1_UART_Init+0x94>)
 8004158:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800415a:	4b21      	ldr	r3, [pc, #132]	; (80041e0 <MX_USART1_UART_Init+0x90>)
 800415c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004160:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004162:	4b1f      	ldr	r3, [pc, #124]	; (80041e0 <MX_USART1_UART_Init+0x90>)
 8004164:	2200      	movs	r2, #0
 8004166:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004168:	4b1d      	ldr	r3, [pc, #116]	; (80041e0 <MX_USART1_UART_Init+0x90>)
 800416a:	2200      	movs	r2, #0
 800416c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800416e:	4b1c      	ldr	r3, [pc, #112]	; (80041e0 <MX_USART1_UART_Init+0x90>)
 8004170:	2200      	movs	r2, #0
 8004172:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004174:	4b1a      	ldr	r3, [pc, #104]	; (80041e0 <MX_USART1_UART_Init+0x90>)
 8004176:	220c      	movs	r2, #12
 8004178:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800417a:	4b19      	ldr	r3, [pc, #100]	; (80041e0 <MX_USART1_UART_Init+0x90>)
 800417c:	2200      	movs	r2, #0
 800417e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004180:	4b17      	ldr	r3, [pc, #92]	; (80041e0 <MX_USART1_UART_Init+0x90>)
 8004182:	2200      	movs	r2, #0
 8004184:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004186:	4b16      	ldr	r3, [pc, #88]	; (80041e0 <MX_USART1_UART_Init+0x90>)
 8004188:	2200      	movs	r2, #0
 800418a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800418c:	4b14      	ldr	r3, [pc, #80]	; (80041e0 <MX_USART1_UART_Init+0x90>)
 800418e:	2200      	movs	r2, #0
 8004190:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004192:	4b13      	ldr	r3, [pc, #76]	; (80041e0 <MX_USART1_UART_Init+0x90>)
 8004194:	2200      	movs	r2, #0
 8004196:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004198:	4811      	ldr	r0, [pc, #68]	; (80041e0 <MX_USART1_UART_Init+0x90>)
 800419a:	f009 f9ae 	bl	800d4fa <HAL_UART_Init>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80041a4:	f7fd faca 	bl	800173c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80041a8:	2100      	movs	r1, #0
 80041aa:	480d      	ldr	r0, [pc, #52]	; (80041e0 <MX_USART1_UART_Init+0x90>)
 80041ac:	f00b f844 	bl	800f238 <HAL_UARTEx_SetTxFifoThreshold>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80041b6:	f7fd fac1 	bl	800173c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80041ba:	2100      	movs	r1, #0
 80041bc:	4808      	ldr	r0, [pc, #32]	; (80041e0 <MX_USART1_UART_Init+0x90>)
 80041be:	f00b f879 	bl	800f2b4 <HAL_UARTEx_SetRxFifoThreshold>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80041c8:	f7fd fab8 	bl	800173c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80041cc:	4804      	ldr	r0, [pc, #16]	; (80041e0 <MX_USART1_UART_Init+0x90>)
 80041ce:	f00a fffa 	bl	800f1c6 <HAL_UARTEx_DisableFifoMode>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80041d8:	f7fd fab0 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80041dc:	bf00      	nop
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	24000dd8 	.word	0x24000dd8
 80041e4:	40011000 	.word	0x40011000

080041e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b0ba      	sub	sp, #232	; 0xe8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	605a      	str	r2, [r3, #4]
 80041fa:	609a      	str	r2, [r3, #8]
 80041fc:	60da      	str	r2, [r3, #12]
 80041fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004200:	f107 0310 	add.w	r3, r7, #16
 8004204:	22c0      	movs	r2, #192	; 0xc0
 8004206:	2100      	movs	r1, #0
 8004208:	4618      	mov	r0, r3
 800420a:	f00b fa0b 	bl	800f624 <memset>
  if(uartHandle->Instance==USART1)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a2b      	ldr	r2, [pc, #172]	; (80042c0 <HAL_UART_MspInit+0xd8>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d14e      	bne.n	80042b6 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004218:	f04f 0201 	mov.w	r2, #1
 800421c:	f04f 0300 	mov.w	r3, #0
 8004220:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8004224:	2300      	movs	r3, #0
 8004226:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800422a:	f107 0310 	add.w	r3, r7, #16
 800422e:	4618      	mov	r0, r3
 8004230:	f007 f9cc 	bl	800b5cc <HAL_RCCEx_PeriphCLKConfig>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800423a:	f7fd fa7f 	bl	800173c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800423e:	4b21      	ldr	r3, [pc, #132]	; (80042c4 <HAL_UART_MspInit+0xdc>)
 8004240:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8004244:	4a1f      	ldr	r2, [pc, #124]	; (80042c4 <HAL_UART_MspInit+0xdc>)
 8004246:	f043 0310 	orr.w	r3, r3, #16
 800424a:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 800424e:	4b1d      	ldr	r3, [pc, #116]	; (80042c4 <HAL_UART_MspInit+0xdc>)
 8004250:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8004254:	f003 0310 	and.w	r3, r3, #16
 8004258:	60fb      	str	r3, [r7, #12]
 800425a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800425c:	4b19      	ldr	r3, [pc, #100]	; (80042c4 <HAL_UART_MspInit+0xdc>)
 800425e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004262:	4a18      	ldr	r2, [pc, #96]	; (80042c4 <HAL_UART_MspInit+0xdc>)
 8004264:	f043 0301 	orr.w	r3, r3, #1
 8004268:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800426c:	4b15      	ldr	r3, [pc, #84]	; (80042c4 <HAL_UART_MspInit+0xdc>)
 800426e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	60bb      	str	r3, [r7, #8]
 8004278:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 800427a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800427e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004282:	2302      	movs	r3, #2
 8004284:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004288:	2300      	movs	r3, #0
 800428a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800428e:	2300      	movs	r3, #0
 8004290:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004294:	2307      	movs	r3, #7
 8004296:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800429a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800429e:	4619      	mov	r1, r3
 80042a0:	4809      	ldr	r0, [pc, #36]	; (80042c8 <HAL_UART_MspInit+0xe0>)
 80042a2:	f004 fc3d 	bl	8008b20 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80042a6:	2200      	movs	r2, #0
 80042a8:	2100      	movs	r1, #0
 80042aa:	2025      	movs	r0, #37	; 0x25
 80042ac:	f000 f9c9 	bl	8004642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80042b0:	2025      	movs	r0, #37	; 0x25
 80042b2:	f000 f9e0 	bl	8004676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80042b6:	bf00      	nop
 80042b8:	37e8      	adds	r7, #232	; 0xe8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	40011000 	.word	0x40011000
 80042c4:	58024400 	.word	0x58024400
 80042c8:	58020000 	.word	0x58020000

080042cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80042cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004304 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80042d0:	f7ff fec6 	bl	8004060 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80042d4:	480c      	ldr	r0, [pc, #48]	; (8004308 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80042d6:	490d      	ldr	r1, [pc, #52]	; (800430c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80042d8:	4a0d      	ldr	r2, [pc, #52]	; (8004310 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80042da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042dc:	e002      	b.n	80042e4 <LoopCopyDataInit>

080042de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042e2:	3304      	adds	r3, #4

080042e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80042e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042e8:	d3f9      	bcc.n	80042de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042ea:	4a0a      	ldr	r2, [pc, #40]	; (8004314 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80042ec:	4c0a      	ldr	r4, [pc, #40]	; (8004318 <LoopFillZerobss+0x22>)
  movs r3, #0
 80042ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042f0:	e001      	b.n	80042f6 <LoopFillZerobss>

080042f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042f4:	3204      	adds	r2, #4

080042f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042f8:	d3fb      	bcc.n	80042f2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80042fa:	f00b f96f 	bl	800f5dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042fe:	f7fd f931 	bl	8001564 <main>
  bx  lr
 8004302:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004304:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8004308:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800430c:	240000b8 	.word	0x240000b8
  ldr r2, =_sidata
 8004310:	08010554 	.word	0x08010554
  ldr r2, =_sbss
 8004314:	240000b8 	.word	0x240000b8
  ldr r4, =_ebss
 8004318:	24000e80 	.word	0x24000e80

0800431c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800431c:	e7fe      	b.n	800431c <ADC_IRQHandler>
	...

08004320 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004326:	2003      	movs	r0, #3
 8004328:	f000 f980 	bl	800462c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800432c:	f006 ff78 	bl	800b220 <HAL_RCC_GetSysClockFreq>
 8004330:	4602      	mov	r2, r0
 8004332:	4b15      	ldr	r3, [pc, #84]	; (8004388 <HAL_Init+0x68>)
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	0a1b      	lsrs	r3, r3, #8
 8004338:	f003 030f 	and.w	r3, r3, #15
 800433c:	4913      	ldr	r1, [pc, #76]	; (800438c <HAL_Init+0x6c>)
 800433e:	5ccb      	ldrb	r3, [r1, r3]
 8004340:	f003 031f 	and.w	r3, r3, #31
 8004344:	fa22 f303 	lsr.w	r3, r2, r3
 8004348:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800434a:	4b0f      	ldr	r3, [pc, #60]	; (8004388 <HAL_Init+0x68>)
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	f003 030f 	and.w	r3, r3, #15
 8004352:	4a0e      	ldr	r2, [pc, #56]	; (800438c <HAL_Init+0x6c>)
 8004354:	5cd3      	ldrb	r3, [r2, r3]
 8004356:	f003 031f 	and.w	r3, r3, #31
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	fa22 f303 	lsr.w	r3, r2, r3
 8004360:	4a0b      	ldr	r2, [pc, #44]	; (8004390 <HAL_Init+0x70>)
 8004362:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004364:	4a0b      	ldr	r2, [pc, #44]	; (8004394 <HAL_Init+0x74>)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800436a:	2000      	movs	r0, #0
 800436c:	f000 f814 	bl	8004398 <HAL_InitTick>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e002      	b.n	8004380 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800437a:	f7ff fdad 	bl	8003ed8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	58024400 	.word	0x58024400
 800438c:	080104a0 	.word	0x080104a0
 8004390:	24000048 	.word	0x24000048
 8004394:	24000044 	.word	0x24000044

08004398 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80043a0:	4b15      	ldr	r3, [pc, #84]	; (80043f8 <HAL_InitTick+0x60>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d101      	bne.n	80043ac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e021      	b.n	80043f0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80043ac:	4b13      	ldr	r3, [pc, #76]	; (80043fc <HAL_InitTick+0x64>)
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	4b11      	ldr	r3, [pc, #68]	; (80043f8 <HAL_InitTick+0x60>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	4619      	mov	r1, r3
 80043b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80043be:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 f965 	bl	8004692 <HAL_SYSTICK_Config>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e00e      	b.n	80043f0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b0f      	cmp	r3, #15
 80043d6:	d80a      	bhi.n	80043ee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043d8:	2200      	movs	r2, #0
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	f04f 30ff 	mov.w	r0, #4294967295
 80043e0:	f000 f92f 	bl	8004642 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043e4:	4a06      	ldr	r2, [pc, #24]	; (8004400 <HAL_InitTick+0x68>)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
 80043ec:	e000      	b.n	80043f0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3708      	adds	r7, #8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	24000050 	.word	0x24000050
 80043fc:	24000044 	.word	0x24000044
 8004400:	2400004c 	.word	0x2400004c

08004404 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004408:	4b06      	ldr	r3, [pc, #24]	; (8004424 <HAL_IncTick+0x20>)
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	461a      	mov	r2, r3
 800440e:	4b06      	ldr	r3, [pc, #24]	; (8004428 <HAL_IncTick+0x24>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4413      	add	r3, r2
 8004414:	4a04      	ldr	r2, [pc, #16]	; (8004428 <HAL_IncTick+0x24>)
 8004416:	6013      	str	r3, [r2, #0]
}
 8004418:	bf00      	nop
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	24000050 	.word	0x24000050
 8004428:	24000e6c 	.word	0x24000e6c

0800442c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
  return uwTick;
 8004430:	4b03      	ldr	r3, [pc, #12]	; (8004440 <HAL_GetTick+0x14>)
 8004432:	681b      	ldr	r3, [r3, #0]
}
 8004434:	4618      	mov	r0, r3
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	24000e6c 	.word	0x24000e6c

08004444 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800444c:	f7ff ffee 	bl	800442c <HAL_GetTick>
 8004450:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445c:	d005      	beq.n	800446a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800445e:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <HAL_Delay+0x44>)
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4413      	add	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800446a:	bf00      	nop
 800446c:	f7ff ffde 	bl	800442c <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	429a      	cmp	r2, r3
 800447a:	d8f7      	bhi.n	800446c <HAL_Delay+0x28>
  {
  }
}
 800447c:	bf00      	nop
 800447e:	bf00      	nop
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	24000050 	.word	0x24000050

0800448c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f003 0307 	and.w	r3, r3, #7
 800449a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800449c:	4b0b      	ldr	r3, [pc, #44]	; (80044cc <__NVIC_SetPriorityGrouping+0x40>)
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044a8:	4013      	ands	r3, r2
 80044aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80044b4:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <__NVIC_SetPriorityGrouping+0x44>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044ba:	4a04      	ldr	r2, [pc, #16]	; (80044cc <__NVIC_SetPriorityGrouping+0x40>)
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	60d3      	str	r3, [r2, #12]
}
 80044c0:	bf00      	nop
 80044c2:	3714      	adds	r7, #20
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr
 80044cc:	e000ed00 	.word	0xe000ed00
 80044d0:	05fa0000 	.word	0x05fa0000

080044d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044d8:	4b04      	ldr	r3, [pc, #16]	; (80044ec <__NVIC_GetPriorityGrouping+0x18>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	0a1b      	lsrs	r3, r3, #8
 80044de:	f003 0307 	and.w	r3, r3, #7
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	e000ed00 	.word	0xe000ed00

080044f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	4603      	mov	r3, r0
 80044f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80044fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	db0b      	blt.n	800451a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004502:	88fb      	ldrh	r3, [r7, #6]
 8004504:	f003 021f 	and.w	r2, r3, #31
 8004508:	4907      	ldr	r1, [pc, #28]	; (8004528 <__NVIC_EnableIRQ+0x38>)
 800450a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800450e:	095b      	lsrs	r3, r3, #5
 8004510:	2001      	movs	r0, #1
 8004512:	fa00 f202 	lsl.w	r2, r0, r2
 8004516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	e000e100 	.word	0xe000e100

0800452c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	4603      	mov	r3, r0
 8004534:	6039      	str	r1, [r7, #0]
 8004536:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004538:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800453c:	2b00      	cmp	r3, #0
 800453e:	db0a      	blt.n	8004556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	b2da      	uxtb	r2, r3
 8004544:	490c      	ldr	r1, [pc, #48]	; (8004578 <__NVIC_SetPriority+0x4c>)
 8004546:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800454a:	0112      	lsls	r2, r2, #4
 800454c:	b2d2      	uxtb	r2, r2
 800454e:	440b      	add	r3, r1
 8004550:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004554:	e00a      	b.n	800456c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	b2da      	uxtb	r2, r3
 800455a:	4908      	ldr	r1, [pc, #32]	; (800457c <__NVIC_SetPriority+0x50>)
 800455c:	88fb      	ldrh	r3, [r7, #6]
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	3b04      	subs	r3, #4
 8004564:	0112      	lsls	r2, r2, #4
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	440b      	add	r3, r1
 800456a:	761a      	strb	r2, [r3, #24]
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	e000e100 	.word	0xe000e100
 800457c:	e000ed00 	.word	0xe000ed00

08004580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004580:	b480      	push	{r7}
 8004582:	b089      	sub	sp, #36	; 0x24
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	f1c3 0307 	rsb	r3, r3, #7
 800459a:	2b04      	cmp	r3, #4
 800459c:	bf28      	it	cs
 800459e:	2304      	movcs	r3, #4
 80045a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	3304      	adds	r3, #4
 80045a6:	2b06      	cmp	r3, #6
 80045a8:	d902      	bls.n	80045b0 <NVIC_EncodePriority+0x30>
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	3b03      	subs	r3, #3
 80045ae:	e000      	b.n	80045b2 <NVIC_EncodePriority+0x32>
 80045b0:	2300      	movs	r3, #0
 80045b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045b4:	f04f 32ff 	mov.w	r2, #4294967295
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	fa02 f303 	lsl.w	r3, r2, r3
 80045be:	43da      	mvns	r2, r3
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	401a      	ands	r2, r3
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045c8:	f04f 31ff 	mov.w	r1, #4294967295
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	fa01 f303 	lsl.w	r3, r1, r3
 80045d2:	43d9      	mvns	r1, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045d8:	4313      	orrs	r3, r2
         );
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3724      	adds	r7, #36	; 0x24
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
	...

080045e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	3b01      	subs	r3, #1
 80045f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045f8:	d301      	bcc.n	80045fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045fa:	2301      	movs	r3, #1
 80045fc:	e00f      	b.n	800461e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045fe:	4a0a      	ldr	r2, [pc, #40]	; (8004628 <SysTick_Config+0x40>)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	3b01      	subs	r3, #1
 8004604:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004606:	210f      	movs	r1, #15
 8004608:	f04f 30ff 	mov.w	r0, #4294967295
 800460c:	f7ff ff8e 	bl	800452c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004610:	4b05      	ldr	r3, [pc, #20]	; (8004628 <SysTick_Config+0x40>)
 8004612:	2200      	movs	r2, #0
 8004614:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004616:	4b04      	ldr	r3, [pc, #16]	; (8004628 <SysTick_Config+0x40>)
 8004618:	2207      	movs	r2, #7
 800461a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	e000e010 	.word	0xe000e010

0800462c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f7ff ff29 	bl	800448c <__NVIC_SetPriorityGrouping>
}
 800463a:	bf00      	nop
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b086      	sub	sp, #24
 8004646:	af00      	add	r7, sp, #0
 8004648:	4603      	mov	r3, r0
 800464a:	60b9      	str	r1, [r7, #8]
 800464c:	607a      	str	r2, [r7, #4]
 800464e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004650:	f7ff ff40 	bl	80044d4 <__NVIC_GetPriorityGrouping>
 8004654:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	68b9      	ldr	r1, [r7, #8]
 800465a:	6978      	ldr	r0, [r7, #20]
 800465c:	f7ff ff90 	bl	8004580 <NVIC_EncodePriority>
 8004660:	4602      	mov	r2, r0
 8004662:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004666:	4611      	mov	r1, r2
 8004668:	4618      	mov	r0, r3
 800466a:	f7ff ff5f 	bl	800452c <__NVIC_SetPriority>
}
 800466e:	bf00      	nop
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b082      	sub	sp, #8
 800467a:	af00      	add	r7, sp, #0
 800467c:	4603      	mov	r3, r0
 800467e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004680:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004684:	4618      	mov	r0, r3
 8004686:	f7ff ff33 	bl	80044f0 <__NVIC_EnableIRQ>
}
 800468a:	bf00      	nop
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b082      	sub	sp, #8
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7ff ffa4 	bl	80045e8 <SysTick_Config>
 80046a0:	4603      	mov	r3, r0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
	...

080046ac <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e069      	b.n	8004792 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d102      	bne.n	80046d0 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7fb ffc4 	bl	8000658 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d002      	beq.n	80046e6 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	6819      	ldr	r1, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	4b2a      	ldr	r3, [pc, #168]	; (800479c <HAL_DCMI_Init+0xf0>)
 80046f2:	400b      	ands	r3, r1
 80046f4:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	6819      	ldr	r1, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800470a:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004716:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004722:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004728:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800472e:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004734:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800473a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	2b10      	cmp	r3, #16
 800474a:	d112      	bne.n	8004772 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	7f1b      	ldrb	r3, [r3, #28]
 8004750:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	7f5b      	ldrb	r3, [r3, #29]
 8004756:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004758:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	7f9b      	ldrb	r3, [r3, #30]
 800475e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004760:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	7fdb      	ldrb	r3, [r3, #31]
 8004768:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800476e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004770:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68da      	ldr	r2, [r3, #12]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f042 021e 	orr.w	r2, r2, #30
 8004780:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	ffe0f007 	.word	0xffe0f007

080047a0 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b088      	sub	sp, #32
 80047a4:	af02      	add	r7, sp, #8
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
 80047ac:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d101      	bne.n	80047bc <HAL_DCMI_Start_DMA+0x1c>
 80047b8:	2302      	movs	r3, #2
 80047ba:	e0ab      	b.n	8004914 <HAL_DCMI_Start_DMA+0x174>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2202      	movs	r2, #2
 80047c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047da:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 0202 	bic.w	r2, r2, #2
 80047ea:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6819      	ldr	r1, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	430a      	orrs	r2, r1
 80047fa:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004800:	4a46      	ldr	r2, [pc, #280]	; (800491c <HAL_DCMI_Start_DMA+0x17c>)
 8004802:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004808:	4a45      	ldr	r2, [pc, #276]	; (8004920 <HAL_DCMI_Start_DMA+0x180>)
 800480a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004810:	2200      	movs	r2, #0
 8004812:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004832:	d219      	bcs.n	8004868 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	3328      	adds	r3, #40	; 0x28
 800483e:	4619      	mov	r1, r3
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	f000 fd90 	bl	8005368 <HAL_DMA_Start_IT>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d055      	beq.n	80048fa <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2240      	movs	r2, #64	; 0x40
 8004852:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e055      	b.n	8004914 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800486c:	4a2b      	ldr	r2, [pc, #172]	; (800491c <HAL_DCMI_Start_DMA+0x17c>)
 800486e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2201      	movs	r2, #1
 8004874:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8004882:	e009      	b.n	8004898 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004888:	085a      	lsrs	r2, r3, #1
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004892:	005a      	lsls	r2, r3, #1
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800489c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048a0:	d2f0      	bcs.n	8004884 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a6:	1e9a      	subs	r2, r3, #2
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	4413      	add	r3, r2
 80048be:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	3328      	adds	r3, #40	; 0x28
 80048ca:	4619      	mov	r1, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d0:	9300      	str	r3, [sp, #0]
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	f003 fc73 	bl	80081c0 <HAL_DMAEx_MultiBufferStart_IT>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00c      	beq.n	80048fa <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2240      	movs	r2, #64	; 0x40
 80048e4:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e00c      	b.n	8004914 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f042 0201 	orr.w	r2, r2, #1
 8004908:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	08004ae9 	.word	0x08004ae9
 8004920:	08004c0f 	.word	0x08004c0f

08004924 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800492c:	4b2b      	ldr	r3, [pc, #172]	; (80049dc <HAL_DCMI_Stop+0xb8>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a2b      	ldr	r2, [pc, #172]	; (80049e0 <HAL_DCMI_Stop+0xbc>)
 8004932:	fba2 2303 	umull	r2, r3, r2, r3
 8004936:	0a5b      	lsrs	r3, r3, #9
 8004938:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800493c:	fb02 f303 	mul.w	r3, r2, r3
 8004940:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004942:	2300      	movs	r3, #0
 8004944:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800494c:	2b01      	cmp	r3, #1
 800494e:	d101      	bne.n	8004954 <HAL_DCMI_Stop+0x30>
 8004950:	2302      	movs	r3, #2
 8004952:	e03f      	b.n	80049d4 <HAL_DCMI_Stop+0xb0>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2202      	movs	r2, #2
 8004960:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 0201 	bic.w	r2, r2, #1
 8004972:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	3b01      	subs	r3, #1
 8004978:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d108      	bne.n	8004992 <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004984:	f043 0220 	orr.w	r2, r3, #32
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	72fb      	strb	r3, [r7, #11]
      break;
 8004990:	e006      	b.n	80049a0 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1e9      	bne.n	8004974 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80049ae:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049b4:	4618      	mov	r0, r3
 80049b6:	f000 ff41 	bl	800583c <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 80049d2:	7afb      	ldrb	r3, [r7, #11]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3710      	adds	r7, #16
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	24000044 	.word	0x24000044
 80049e0:	10624dd3 	.word	0x10624dd3

080049e4 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f003 0304 	and.w	r3, r3, #4
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d016      	beq.n	8004a2c <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2204      	movs	r2, #4
 8004a04:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a0a:	f043 0202 	orr.w	r2, r3, #2
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2204      	movs	r2, #4
 8004a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a1e:	4a31      	ldr	r2, [pc, #196]	; (8004ae4 <HAL_DCMI_IRQHandler+0x100>)
 8004a20:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a26:	4618      	mov	r0, r3
 8004a28:	f001 fa26 	bl	8005e78 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d016      	beq.n	8004a64 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a42:	f043 0201 	orr.w	r2, r3, #1
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2204      	movs	r2, #4
 8004a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a56:	4a23      	ldr	r2, [pc, #140]	; (8004ae4 <HAL_DCMI_IRQHandler+0x100>)
 8004a58:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f001 fa0a 	bl	8005e78 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f003 0310 	and.w	r3, r3, #16
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d006      	beq.n	8004a7c <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2210      	movs	r2, #16
 8004a74:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7ff f93c 	bl	8003cf4 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f003 0308 	and.w	r3, r3, #8
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d006      	beq.n	8004a94 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2208      	movs	r2, #8
 8004a8c:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f7ff f946 	bl	8003d20 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d01d      	beq.n	8004ada <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d107      	bne.n	8004abc <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68da      	ldr	r2, [r3, #12]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 021e 	bic.w	r2, r2, #30
 8004aba:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68da      	ldr	r2, [r3, #12]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f022 0201 	bic.w	r2, r2, #1
 8004aca:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f7ff f918 	bl	8003d0a <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8004ada:	bf00      	nop
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	08004c0f 	.word	0x08004c0f

08004ae8 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af4:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d043      	beq.n	8004b86 <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b0a:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d118      	bne.n	8004b4a <DCMI_DMAXferCplt+0x62>
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d015      	beq.n	8004b4a <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b30:	00da      	lsls	r2, r3, #3
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	4413      	add	r3, r2
 8004b36:	2200      	movs	r2, #0
 8004b38:	4619      	mov	r1, r3
 8004b3a:	f003 fe9f 	bl	800887c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b42:	1e5a      	subs	r2, r3, #1
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	639a      	str	r2, [r3, #56]	; 0x38
 8004b48:	e044      	b.n	8004bd4 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d13c      	bne.n	8004bd4 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b6c:	00da      	lsls	r2, r3, #3
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	4413      	add	r3, r2
 8004b72:	2201      	movs	r2, #1
 8004b74:	4619      	mov	r1, r3
 8004b76:	f003 fe81 	bl	800887c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7e:	1e5a      	subs	r2, r3, #1
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	639a      	str	r2, [r3, #56]	; 0x38
 8004b84:	e026      	b.n	8004bd4 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d006      	beq.n	8004ba4 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004ba0:	60da      	str	r2, [r3, #12]
 8004ba2:	e017      	b.n	8004bd4 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10f      	bne.n	8004bd4 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb8:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bbe:	0099      	lsls	r1, r3, #2
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	440a      	add	r2, r1
 8004bca:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d112      	bne.n	8004c06 <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68da      	ldr	r2, [r3, #12]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f042 0201 	orr.w	r2, r2, #1
 8004bee:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d103      	bne.n	8004c06 <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 8004c06:	bf00      	nop
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b084      	sub	sp, #16
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1a:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d009      	beq.n	8004c3a <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f7ff f87b 	bl	8003d36 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8004c40:	bf00      	nop
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004c50:	f7ff fbec 	bl	800442c <HAL_GetTick>
 8004c54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e37f      	b.n	8005360 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a66      	ldr	r2, [pc, #408]	; (8004e00 <HAL_DMA_Init+0x1b8>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d04a      	beq.n	8004d00 <HAL_DMA_Init+0xb8>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a65      	ldr	r2, [pc, #404]	; (8004e04 <HAL_DMA_Init+0x1bc>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d045      	beq.n	8004d00 <HAL_DMA_Init+0xb8>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a63      	ldr	r2, [pc, #396]	; (8004e08 <HAL_DMA_Init+0x1c0>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d040      	beq.n	8004d00 <HAL_DMA_Init+0xb8>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a62      	ldr	r2, [pc, #392]	; (8004e0c <HAL_DMA_Init+0x1c4>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d03b      	beq.n	8004d00 <HAL_DMA_Init+0xb8>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a60      	ldr	r2, [pc, #384]	; (8004e10 <HAL_DMA_Init+0x1c8>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d036      	beq.n	8004d00 <HAL_DMA_Init+0xb8>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a5f      	ldr	r2, [pc, #380]	; (8004e14 <HAL_DMA_Init+0x1cc>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d031      	beq.n	8004d00 <HAL_DMA_Init+0xb8>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a5d      	ldr	r2, [pc, #372]	; (8004e18 <HAL_DMA_Init+0x1d0>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d02c      	beq.n	8004d00 <HAL_DMA_Init+0xb8>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a5c      	ldr	r2, [pc, #368]	; (8004e1c <HAL_DMA_Init+0x1d4>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d027      	beq.n	8004d00 <HAL_DMA_Init+0xb8>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a5a      	ldr	r2, [pc, #360]	; (8004e20 <HAL_DMA_Init+0x1d8>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d022      	beq.n	8004d00 <HAL_DMA_Init+0xb8>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a59      	ldr	r2, [pc, #356]	; (8004e24 <HAL_DMA_Init+0x1dc>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d01d      	beq.n	8004d00 <HAL_DMA_Init+0xb8>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a57      	ldr	r2, [pc, #348]	; (8004e28 <HAL_DMA_Init+0x1e0>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d018      	beq.n	8004d00 <HAL_DMA_Init+0xb8>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a56      	ldr	r2, [pc, #344]	; (8004e2c <HAL_DMA_Init+0x1e4>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d013      	beq.n	8004d00 <HAL_DMA_Init+0xb8>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a54      	ldr	r2, [pc, #336]	; (8004e30 <HAL_DMA_Init+0x1e8>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d00e      	beq.n	8004d00 <HAL_DMA_Init+0xb8>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a53      	ldr	r2, [pc, #332]	; (8004e34 <HAL_DMA_Init+0x1ec>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d009      	beq.n	8004d00 <HAL_DMA_Init+0xb8>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a51      	ldr	r2, [pc, #324]	; (8004e38 <HAL_DMA_Init+0x1f0>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d004      	beq.n	8004d00 <HAL_DMA_Init+0xb8>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a50      	ldr	r2, [pc, #320]	; (8004e3c <HAL_DMA_Init+0x1f4>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d101      	bne.n	8004d04 <HAL_DMA_Init+0xbc>
 8004d00:	2301      	movs	r3, #1
 8004d02:	e000      	b.n	8004d06 <HAL_DMA_Init+0xbe>
 8004d04:	2300      	movs	r3, #0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 813c 	beq.w	8004f84 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2202      	movs	r2, #2
 8004d10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a37      	ldr	r2, [pc, #220]	; (8004e00 <HAL_DMA_Init+0x1b8>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d04a      	beq.n	8004dbc <HAL_DMA_Init+0x174>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a36      	ldr	r2, [pc, #216]	; (8004e04 <HAL_DMA_Init+0x1bc>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d045      	beq.n	8004dbc <HAL_DMA_Init+0x174>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a34      	ldr	r2, [pc, #208]	; (8004e08 <HAL_DMA_Init+0x1c0>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d040      	beq.n	8004dbc <HAL_DMA_Init+0x174>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a33      	ldr	r2, [pc, #204]	; (8004e0c <HAL_DMA_Init+0x1c4>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d03b      	beq.n	8004dbc <HAL_DMA_Init+0x174>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a31      	ldr	r2, [pc, #196]	; (8004e10 <HAL_DMA_Init+0x1c8>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d036      	beq.n	8004dbc <HAL_DMA_Init+0x174>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a30      	ldr	r2, [pc, #192]	; (8004e14 <HAL_DMA_Init+0x1cc>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d031      	beq.n	8004dbc <HAL_DMA_Init+0x174>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a2e      	ldr	r2, [pc, #184]	; (8004e18 <HAL_DMA_Init+0x1d0>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d02c      	beq.n	8004dbc <HAL_DMA_Init+0x174>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a2d      	ldr	r2, [pc, #180]	; (8004e1c <HAL_DMA_Init+0x1d4>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d027      	beq.n	8004dbc <HAL_DMA_Init+0x174>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a2b      	ldr	r2, [pc, #172]	; (8004e20 <HAL_DMA_Init+0x1d8>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d022      	beq.n	8004dbc <HAL_DMA_Init+0x174>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a2a      	ldr	r2, [pc, #168]	; (8004e24 <HAL_DMA_Init+0x1dc>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d01d      	beq.n	8004dbc <HAL_DMA_Init+0x174>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a28      	ldr	r2, [pc, #160]	; (8004e28 <HAL_DMA_Init+0x1e0>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d018      	beq.n	8004dbc <HAL_DMA_Init+0x174>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a27      	ldr	r2, [pc, #156]	; (8004e2c <HAL_DMA_Init+0x1e4>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d013      	beq.n	8004dbc <HAL_DMA_Init+0x174>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a25      	ldr	r2, [pc, #148]	; (8004e30 <HAL_DMA_Init+0x1e8>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d00e      	beq.n	8004dbc <HAL_DMA_Init+0x174>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a24      	ldr	r2, [pc, #144]	; (8004e34 <HAL_DMA_Init+0x1ec>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d009      	beq.n	8004dbc <HAL_DMA_Init+0x174>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a22      	ldr	r2, [pc, #136]	; (8004e38 <HAL_DMA_Init+0x1f0>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d004      	beq.n	8004dbc <HAL_DMA_Init+0x174>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a21      	ldr	r2, [pc, #132]	; (8004e3c <HAL_DMA_Init+0x1f4>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d108      	bne.n	8004dce <HAL_DMA_Init+0x186>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 0201 	bic.w	r2, r2, #1
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	e007      	b.n	8004dde <HAL_DMA_Init+0x196>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 0201 	bic.w	r2, r2, #1
 8004ddc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004dde:	e02f      	b.n	8004e40 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004de0:	f7ff fb24 	bl	800442c <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b05      	cmp	r3, #5
 8004dec:	d928      	bls.n	8004e40 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2220      	movs	r2, #32
 8004df2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2203      	movs	r2, #3
 8004df8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e2af      	b.n	8005360 <HAL_DMA_Init+0x718>
 8004e00:	40020010 	.word	0x40020010
 8004e04:	40020028 	.word	0x40020028
 8004e08:	40020040 	.word	0x40020040
 8004e0c:	40020058 	.word	0x40020058
 8004e10:	40020070 	.word	0x40020070
 8004e14:	40020088 	.word	0x40020088
 8004e18:	400200a0 	.word	0x400200a0
 8004e1c:	400200b8 	.word	0x400200b8
 8004e20:	40020410 	.word	0x40020410
 8004e24:	40020428 	.word	0x40020428
 8004e28:	40020440 	.word	0x40020440
 8004e2c:	40020458 	.word	0x40020458
 8004e30:	40020470 	.word	0x40020470
 8004e34:	40020488 	.word	0x40020488
 8004e38:	400204a0 	.word	0x400204a0
 8004e3c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1c8      	bne.n	8004de0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	4b73      	ldr	r3, [pc, #460]	; (8005028 <HAL_DMA_Init+0x3e0>)
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004e66:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e72:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e7e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a1b      	ldr	r3, [r3, #32]
 8004e84:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e90:	2b04      	cmp	r3, #4
 8004e92:	d107      	bne.n	8004ea4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	2b28      	cmp	r3, #40	; 0x28
 8004eaa:	d903      	bls.n	8004eb4 <HAL_DMA_Init+0x26c>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	2b2e      	cmp	r3, #46	; 0x2e
 8004eb2:	d91f      	bls.n	8004ef4 <HAL_DMA_Init+0x2ac>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	2b3e      	cmp	r3, #62	; 0x3e
 8004eba:	d903      	bls.n	8004ec4 <HAL_DMA_Init+0x27c>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	2b42      	cmp	r3, #66	; 0x42
 8004ec2:	d917      	bls.n	8004ef4 <HAL_DMA_Init+0x2ac>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	2b46      	cmp	r3, #70	; 0x46
 8004eca:	d903      	bls.n	8004ed4 <HAL_DMA_Init+0x28c>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	2b48      	cmp	r3, #72	; 0x48
 8004ed2:	d90f      	bls.n	8004ef4 <HAL_DMA_Init+0x2ac>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	2b4e      	cmp	r3, #78	; 0x4e
 8004eda:	d903      	bls.n	8004ee4 <HAL_DMA_Init+0x29c>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	2b52      	cmp	r3, #82	; 0x52
 8004ee2:	d907      	bls.n	8004ef4 <HAL_DMA_Init+0x2ac>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	2b73      	cmp	r3, #115	; 0x73
 8004eea:	d905      	bls.n	8004ef8 <HAL_DMA_Init+0x2b0>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	2b77      	cmp	r3, #119	; 0x77
 8004ef2:	d801      	bhi.n	8004ef8 <HAL_DMA_Init+0x2b0>
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e000      	b.n	8004efa <HAL_DMA_Init+0x2b2>
 8004ef8:	2300      	movs	r3, #0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f04:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f023 0307 	bic.w	r3, r3, #7
 8004f1c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2c:	2b04      	cmp	r3, #4
 8004f2e:	d117      	bne.n	8004f60 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00e      	beq.n	8004f60 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f002 fbd6 	bl	80076f4 <DMA_CheckFifoParam>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d008      	beq.n	8004f60 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2240      	movs	r2, #64	; 0x40
 8004f52:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e1ff      	b.n	8005360 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f002 fb11 	bl	8007590 <DMA_CalcBaseAndBitshift>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f76:	f003 031f 	and.w	r3, r3, #31
 8004f7a:	223f      	movs	r2, #63	; 0x3f
 8004f7c:	409a      	lsls	r2, r3
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	609a      	str	r2, [r3, #8]
 8004f82:	e0fe      	b.n	8005182 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a28      	ldr	r2, [pc, #160]	; (800502c <HAL_DMA_Init+0x3e4>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d04a      	beq.n	8005024 <HAL_DMA_Init+0x3dc>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a27      	ldr	r2, [pc, #156]	; (8005030 <HAL_DMA_Init+0x3e8>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d045      	beq.n	8005024 <HAL_DMA_Init+0x3dc>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a25      	ldr	r2, [pc, #148]	; (8005034 <HAL_DMA_Init+0x3ec>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d040      	beq.n	8005024 <HAL_DMA_Init+0x3dc>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a24      	ldr	r2, [pc, #144]	; (8005038 <HAL_DMA_Init+0x3f0>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d03b      	beq.n	8005024 <HAL_DMA_Init+0x3dc>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a22      	ldr	r2, [pc, #136]	; (800503c <HAL_DMA_Init+0x3f4>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d036      	beq.n	8005024 <HAL_DMA_Init+0x3dc>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a21      	ldr	r2, [pc, #132]	; (8005040 <HAL_DMA_Init+0x3f8>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d031      	beq.n	8005024 <HAL_DMA_Init+0x3dc>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a1f      	ldr	r2, [pc, #124]	; (8005044 <HAL_DMA_Init+0x3fc>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d02c      	beq.n	8005024 <HAL_DMA_Init+0x3dc>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a1e      	ldr	r2, [pc, #120]	; (8005048 <HAL_DMA_Init+0x400>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d027      	beq.n	8005024 <HAL_DMA_Init+0x3dc>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a1c      	ldr	r2, [pc, #112]	; (800504c <HAL_DMA_Init+0x404>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d022      	beq.n	8005024 <HAL_DMA_Init+0x3dc>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a1b      	ldr	r2, [pc, #108]	; (8005050 <HAL_DMA_Init+0x408>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d01d      	beq.n	8005024 <HAL_DMA_Init+0x3dc>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a19      	ldr	r2, [pc, #100]	; (8005054 <HAL_DMA_Init+0x40c>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d018      	beq.n	8005024 <HAL_DMA_Init+0x3dc>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a18      	ldr	r2, [pc, #96]	; (8005058 <HAL_DMA_Init+0x410>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d013      	beq.n	8005024 <HAL_DMA_Init+0x3dc>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a16      	ldr	r2, [pc, #88]	; (800505c <HAL_DMA_Init+0x414>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d00e      	beq.n	8005024 <HAL_DMA_Init+0x3dc>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a15      	ldr	r2, [pc, #84]	; (8005060 <HAL_DMA_Init+0x418>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d009      	beq.n	8005024 <HAL_DMA_Init+0x3dc>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a13      	ldr	r2, [pc, #76]	; (8005064 <HAL_DMA_Init+0x41c>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d004      	beq.n	8005024 <HAL_DMA_Init+0x3dc>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a12      	ldr	r2, [pc, #72]	; (8005068 <HAL_DMA_Init+0x420>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d123      	bne.n	800506c <HAL_DMA_Init+0x424>
 8005024:	2301      	movs	r3, #1
 8005026:	e022      	b.n	800506e <HAL_DMA_Init+0x426>
 8005028:	fe10803f 	.word	0xfe10803f
 800502c:	48022c08 	.word	0x48022c08
 8005030:	48022c1c 	.word	0x48022c1c
 8005034:	48022c30 	.word	0x48022c30
 8005038:	48022c44 	.word	0x48022c44
 800503c:	48022c58 	.word	0x48022c58
 8005040:	48022c6c 	.word	0x48022c6c
 8005044:	48022c80 	.word	0x48022c80
 8005048:	48022c94 	.word	0x48022c94
 800504c:	58025408 	.word	0x58025408
 8005050:	5802541c 	.word	0x5802541c
 8005054:	58025430 	.word	0x58025430
 8005058:	58025444 	.word	0x58025444
 800505c:	58025458 	.word	0x58025458
 8005060:	5802546c 	.word	0x5802546c
 8005064:	58025480 	.word	0x58025480
 8005068:	58025494 	.word	0x58025494
 800506c:	2300      	movs	r3, #0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d07e      	beq.n	8005170 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a80      	ldr	r2, [pc, #512]	; (8005278 <HAL_DMA_Init+0x630>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d021      	beq.n	80050c0 <HAL_DMA_Init+0x478>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a7e      	ldr	r2, [pc, #504]	; (800527c <HAL_DMA_Init+0x634>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d01c      	beq.n	80050c0 <HAL_DMA_Init+0x478>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a7d      	ldr	r2, [pc, #500]	; (8005280 <HAL_DMA_Init+0x638>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d017      	beq.n	80050c0 <HAL_DMA_Init+0x478>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a7b      	ldr	r2, [pc, #492]	; (8005284 <HAL_DMA_Init+0x63c>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d012      	beq.n	80050c0 <HAL_DMA_Init+0x478>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a7a      	ldr	r2, [pc, #488]	; (8005288 <HAL_DMA_Init+0x640>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d00d      	beq.n	80050c0 <HAL_DMA_Init+0x478>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a78      	ldr	r2, [pc, #480]	; (800528c <HAL_DMA_Init+0x644>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d008      	beq.n	80050c0 <HAL_DMA_Init+0x478>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a77      	ldr	r2, [pc, #476]	; (8005290 <HAL_DMA_Init+0x648>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d003      	beq.n	80050c0 <HAL_DMA_Init+0x478>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a75      	ldr	r2, [pc, #468]	; (8005294 <HAL_DMA_Init+0x64c>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2202      	movs	r2, #2
 80050c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	4b6e      	ldr	r3, [pc, #440]	; (8005298 <HAL_DMA_Init+0x650>)
 80050de:	4013      	ands	r3, r2
 80050e0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	2b40      	cmp	r3, #64	; 0x40
 80050e8:	d008      	beq.n	80050fc <HAL_DMA_Init+0x4b4>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	2b80      	cmp	r3, #128	; 0x80
 80050f0:	d102      	bne.n	80050f8 <HAL_DMA_Init+0x4b0>
 80050f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80050f6:	e002      	b.n	80050fe <HAL_DMA_Init+0x4b6>
 80050f8:	2300      	movs	r3, #0
 80050fa:	e000      	b.n	80050fe <HAL_DMA_Init+0x4b6>
 80050fc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	68d2      	ldr	r2, [r2, #12]
 8005102:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005104:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800510c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005114:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800511c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005124:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800512c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	4313      	orrs	r3, r2
 8005132:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	461a      	mov	r2, r3
 8005142:	4b56      	ldr	r3, [pc, #344]	; (800529c <HAL_DMA_Init+0x654>)
 8005144:	4413      	add	r3, r2
 8005146:	4a56      	ldr	r2, [pc, #344]	; (80052a0 <HAL_DMA_Init+0x658>)
 8005148:	fba2 2303 	umull	r2, r3, r2, r3
 800514c:	091b      	lsrs	r3, r3, #4
 800514e:	009a      	lsls	r2, r3, #2
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f002 fa1b 	bl	8007590 <DMA_CalcBaseAndBitshift>
 800515a:	4603      	mov	r3, r0
 800515c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005162:	f003 031f 	and.w	r3, r3, #31
 8005166:	2201      	movs	r2, #1
 8005168:	409a      	lsls	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	605a      	str	r2, [r3, #4]
 800516e:	e008      	b.n	8005182 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2240      	movs	r2, #64	; 0x40
 8005174:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2203      	movs	r2, #3
 800517a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e0ee      	b.n	8005360 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a47      	ldr	r2, [pc, #284]	; (80052a4 <HAL_DMA_Init+0x65c>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d072      	beq.n	8005272 <HAL_DMA_Init+0x62a>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a45      	ldr	r2, [pc, #276]	; (80052a8 <HAL_DMA_Init+0x660>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d06d      	beq.n	8005272 <HAL_DMA_Init+0x62a>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a44      	ldr	r2, [pc, #272]	; (80052ac <HAL_DMA_Init+0x664>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d068      	beq.n	8005272 <HAL_DMA_Init+0x62a>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a42      	ldr	r2, [pc, #264]	; (80052b0 <HAL_DMA_Init+0x668>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d063      	beq.n	8005272 <HAL_DMA_Init+0x62a>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a41      	ldr	r2, [pc, #260]	; (80052b4 <HAL_DMA_Init+0x66c>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d05e      	beq.n	8005272 <HAL_DMA_Init+0x62a>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a3f      	ldr	r2, [pc, #252]	; (80052b8 <HAL_DMA_Init+0x670>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d059      	beq.n	8005272 <HAL_DMA_Init+0x62a>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a3e      	ldr	r2, [pc, #248]	; (80052bc <HAL_DMA_Init+0x674>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d054      	beq.n	8005272 <HAL_DMA_Init+0x62a>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a3c      	ldr	r2, [pc, #240]	; (80052c0 <HAL_DMA_Init+0x678>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d04f      	beq.n	8005272 <HAL_DMA_Init+0x62a>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a3b      	ldr	r2, [pc, #236]	; (80052c4 <HAL_DMA_Init+0x67c>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d04a      	beq.n	8005272 <HAL_DMA_Init+0x62a>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a39      	ldr	r2, [pc, #228]	; (80052c8 <HAL_DMA_Init+0x680>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d045      	beq.n	8005272 <HAL_DMA_Init+0x62a>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a38      	ldr	r2, [pc, #224]	; (80052cc <HAL_DMA_Init+0x684>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d040      	beq.n	8005272 <HAL_DMA_Init+0x62a>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a36      	ldr	r2, [pc, #216]	; (80052d0 <HAL_DMA_Init+0x688>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d03b      	beq.n	8005272 <HAL_DMA_Init+0x62a>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a35      	ldr	r2, [pc, #212]	; (80052d4 <HAL_DMA_Init+0x68c>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d036      	beq.n	8005272 <HAL_DMA_Init+0x62a>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a33      	ldr	r2, [pc, #204]	; (80052d8 <HAL_DMA_Init+0x690>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d031      	beq.n	8005272 <HAL_DMA_Init+0x62a>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a32      	ldr	r2, [pc, #200]	; (80052dc <HAL_DMA_Init+0x694>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d02c      	beq.n	8005272 <HAL_DMA_Init+0x62a>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a30      	ldr	r2, [pc, #192]	; (80052e0 <HAL_DMA_Init+0x698>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d027      	beq.n	8005272 <HAL_DMA_Init+0x62a>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a14      	ldr	r2, [pc, #80]	; (8005278 <HAL_DMA_Init+0x630>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d022      	beq.n	8005272 <HAL_DMA_Init+0x62a>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a12      	ldr	r2, [pc, #72]	; (800527c <HAL_DMA_Init+0x634>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d01d      	beq.n	8005272 <HAL_DMA_Init+0x62a>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a11      	ldr	r2, [pc, #68]	; (8005280 <HAL_DMA_Init+0x638>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d018      	beq.n	8005272 <HAL_DMA_Init+0x62a>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a0f      	ldr	r2, [pc, #60]	; (8005284 <HAL_DMA_Init+0x63c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d013      	beq.n	8005272 <HAL_DMA_Init+0x62a>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a0e      	ldr	r2, [pc, #56]	; (8005288 <HAL_DMA_Init+0x640>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d00e      	beq.n	8005272 <HAL_DMA_Init+0x62a>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a0c      	ldr	r2, [pc, #48]	; (800528c <HAL_DMA_Init+0x644>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d009      	beq.n	8005272 <HAL_DMA_Init+0x62a>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a0b      	ldr	r2, [pc, #44]	; (8005290 <HAL_DMA_Init+0x648>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d004      	beq.n	8005272 <HAL_DMA_Init+0x62a>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a09      	ldr	r2, [pc, #36]	; (8005294 <HAL_DMA_Init+0x64c>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d138      	bne.n	80052e4 <HAL_DMA_Init+0x69c>
 8005272:	2301      	movs	r3, #1
 8005274:	e037      	b.n	80052e6 <HAL_DMA_Init+0x69e>
 8005276:	bf00      	nop
 8005278:	58025408 	.word	0x58025408
 800527c:	5802541c 	.word	0x5802541c
 8005280:	58025430 	.word	0x58025430
 8005284:	58025444 	.word	0x58025444
 8005288:	58025458 	.word	0x58025458
 800528c:	5802546c 	.word	0x5802546c
 8005290:	58025480 	.word	0x58025480
 8005294:	58025494 	.word	0x58025494
 8005298:	fffe000f 	.word	0xfffe000f
 800529c:	a7fdabf8 	.word	0xa7fdabf8
 80052a0:	cccccccd 	.word	0xcccccccd
 80052a4:	40020010 	.word	0x40020010
 80052a8:	40020028 	.word	0x40020028
 80052ac:	40020040 	.word	0x40020040
 80052b0:	40020058 	.word	0x40020058
 80052b4:	40020070 	.word	0x40020070
 80052b8:	40020088 	.word	0x40020088
 80052bc:	400200a0 	.word	0x400200a0
 80052c0:	400200b8 	.word	0x400200b8
 80052c4:	40020410 	.word	0x40020410
 80052c8:	40020428 	.word	0x40020428
 80052cc:	40020440 	.word	0x40020440
 80052d0:	40020458 	.word	0x40020458
 80052d4:	40020470 	.word	0x40020470
 80052d8:	40020488 	.word	0x40020488
 80052dc:	400204a0 	.word	0x400204a0
 80052e0:	400204b8 	.word	0x400204b8
 80052e4:	2300      	movs	r3, #0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d032      	beq.n	8005350 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f002 fa7e 	bl	80077ec <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	2b80      	cmp	r3, #128	; 0x80
 80052f6:	d102      	bne.n	80052fe <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685a      	ldr	r2, [r3, #4]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005306:	b2d2      	uxtb	r2, r2
 8005308:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005312:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d010      	beq.n	800533e <HAL_DMA_Init+0x6f6>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	2b08      	cmp	r3, #8
 8005322:	d80c      	bhi.n	800533e <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f002 fafb 	bl	8007920 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800532e:	2200      	movs	r2, #0
 8005330:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800533a:	605a      	str	r2, [r3, #4]
 800533c:	e008      	b.n	8005350 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3718      	adds	r7, #24
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
 8005374:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005376:	2300      	movs	r3, #0
 8005378:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d101      	bne.n	8005384 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e226      	b.n	80057d2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800538a:	2b01      	cmp	r3, #1
 800538c:	d101      	bne.n	8005392 <HAL_DMA_Start_IT+0x2a>
 800538e:	2302      	movs	r3, #2
 8005390:	e21f      	b.n	80057d2 <HAL_DMA_Start_IT+0x46a>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	f040 820a 	bne.w	80057bc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2202      	movs	r2, #2
 80053ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a68      	ldr	r2, [pc, #416]	; (800555c <HAL_DMA_Start_IT+0x1f4>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d04a      	beq.n	8005456 <HAL_DMA_Start_IT+0xee>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a66      	ldr	r2, [pc, #408]	; (8005560 <HAL_DMA_Start_IT+0x1f8>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d045      	beq.n	8005456 <HAL_DMA_Start_IT+0xee>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a65      	ldr	r2, [pc, #404]	; (8005564 <HAL_DMA_Start_IT+0x1fc>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d040      	beq.n	8005456 <HAL_DMA_Start_IT+0xee>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a63      	ldr	r2, [pc, #396]	; (8005568 <HAL_DMA_Start_IT+0x200>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d03b      	beq.n	8005456 <HAL_DMA_Start_IT+0xee>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a62      	ldr	r2, [pc, #392]	; (800556c <HAL_DMA_Start_IT+0x204>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d036      	beq.n	8005456 <HAL_DMA_Start_IT+0xee>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a60      	ldr	r2, [pc, #384]	; (8005570 <HAL_DMA_Start_IT+0x208>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d031      	beq.n	8005456 <HAL_DMA_Start_IT+0xee>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a5f      	ldr	r2, [pc, #380]	; (8005574 <HAL_DMA_Start_IT+0x20c>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d02c      	beq.n	8005456 <HAL_DMA_Start_IT+0xee>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a5d      	ldr	r2, [pc, #372]	; (8005578 <HAL_DMA_Start_IT+0x210>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d027      	beq.n	8005456 <HAL_DMA_Start_IT+0xee>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a5c      	ldr	r2, [pc, #368]	; (800557c <HAL_DMA_Start_IT+0x214>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d022      	beq.n	8005456 <HAL_DMA_Start_IT+0xee>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a5a      	ldr	r2, [pc, #360]	; (8005580 <HAL_DMA_Start_IT+0x218>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d01d      	beq.n	8005456 <HAL_DMA_Start_IT+0xee>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a59      	ldr	r2, [pc, #356]	; (8005584 <HAL_DMA_Start_IT+0x21c>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d018      	beq.n	8005456 <HAL_DMA_Start_IT+0xee>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a57      	ldr	r2, [pc, #348]	; (8005588 <HAL_DMA_Start_IT+0x220>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d013      	beq.n	8005456 <HAL_DMA_Start_IT+0xee>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a56      	ldr	r2, [pc, #344]	; (800558c <HAL_DMA_Start_IT+0x224>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d00e      	beq.n	8005456 <HAL_DMA_Start_IT+0xee>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a54      	ldr	r2, [pc, #336]	; (8005590 <HAL_DMA_Start_IT+0x228>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d009      	beq.n	8005456 <HAL_DMA_Start_IT+0xee>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a53      	ldr	r2, [pc, #332]	; (8005594 <HAL_DMA_Start_IT+0x22c>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d004      	beq.n	8005456 <HAL_DMA_Start_IT+0xee>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a51      	ldr	r2, [pc, #324]	; (8005598 <HAL_DMA_Start_IT+0x230>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d108      	bne.n	8005468 <HAL_DMA_Start_IT+0x100>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f022 0201 	bic.w	r2, r2, #1
 8005464:	601a      	str	r2, [r3, #0]
 8005466:	e007      	b.n	8005478 <HAL_DMA_Start_IT+0x110>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f022 0201 	bic.w	r2, r2, #1
 8005476:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	68b9      	ldr	r1, [r7, #8]
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f001 fea2 	bl	80071c8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a34      	ldr	r2, [pc, #208]	; (800555c <HAL_DMA_Start_IT+0x1f4>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d04a      	beq.n	8005524 <HAL_DMA_Start_IT+0x1bc>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a33      	ldr	r2, [pc, #204]	; (8005560 <HAL_DMA_Start_IT+0x1f8>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d045      	beq.n	8005524 <HAL_DMA_Start_IT+0x1bc>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a31      	ldr	r2, [pc, #196]	; (8005564 <HAL_DMA_Start_IT+0x1fc>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d040      	beq.n	8005524 <HAL_DMA_Start_IT+0x1bc>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a30      	ldr	r2, [pc, #192]	; (8005568 <HAL_DMA_Start_IT+0x200>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d03b      	beq.n	8005524 <HAL_DMA_Start_IT+0x1bc>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a2e      	ldr	r2, [pc, #184]	; (800556c <HAL_DMA_Start_IT+0x204>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d036      	beq.n	8005524 <HAL_DMA_Start_IT+0x1bc>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a2d      	ldr	r2, [pc, #180]	; (8005570 <HAL_DMA_Start_IT+0x208>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d031      	beq.n	8005524 <HAL_DMA_Start_IT+0x1bc>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a2b      	ldr	r2, [pc, #172]	; (8005574 <HAL_DMA_Start_IT+0x20c>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d02c      	beq.n	8005524 <HAL_DMA_Start_IT+0x1bc>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a2a      	ldr	r2, [pc, #168]	; (8005578 <HAL_DMA_Start_IT+0x210>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d027      	beq.n	8005524 <HAL_DMA_Start_IT+0x1bc>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a28      	ldr	r2, [pc, #160]	; (800557c <HAL_DMA_Start_IT+0x214>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d022      	beq.n	8005524 <HAL_DMA_Start_IT+0x1bc>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a27      	ldr	r2, [pc, #156]	; (8005580 <HAL_DMA_Start_IT+0x218>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d01d      	beq.n	8005524 <HAL_DMA_Start_IT+0x1bc>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a25      	ldr	r2, [pc, #148]	; (8005584 <HAL_DMA_Start_IT+0x21c>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d018      	beq.n	8005524 <HAL_DMA_Start_IT+0x1bc>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a24      	ldr	r2, [pc, #144]	; (8005588 <HAL_DMA_Start_IT+0x220>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d013      	beq.n	8005524 <HAL_DMA_Start_IT+0x1bc>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a22      	ldr	r2, [pc, #136]	; (800558c <HAL_DMA_Start_IT+0x224>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d00e      	beq.n	8005524 <HAL_DMA_Start_IT+0x1bc>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a21      	ldr	r2, [pc, #132]	; (8005590 <HAL_DMA_Start_IT+0x228>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d009      	beq.n	8005524 <HAL_DMA_Start_IT+0x1bc>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a1f      	ldr	r2, [pc, #124]	; (8005594 <HAL_DMA_Start_IT+0x22c>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d004      	beq.n	8005524 <HAL_DMA_Start_IT+0x1bc>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a1e      	ldr	r2, [pc, #120]	; (8005598 <HAL_DMA_Start_IT+0x230>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d101      	bne.n	8005528 <HAL_DMA_Start_IT+0x1c0>
 8005524:	2301      	movs	r3, #1
 8005526:	e000      	b.n	800552a <HAL_DMA_Start_IT+0x1c2>
 8005528:	2300      	movs	r3, #0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d036      	beq.n	800559c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f023 021e 	bic.w	r2, r3, #30
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f042 0216 	orr.w	r2, r2, #22
 8005540:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005546:	2b00      	cmp	r3, #0
 8005548:	d03e      	beq.n	80055c8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f042 0208 	orr.w	r2, r2, #8
 8005558:	601a      	str	r2, [r3, #0]
 800555a:	e035      	b.n	80055c8 <HAL_DMA_Start_IT+0x260>
 800555c:	40020010 	.word	0x40020010
 8005560:	40020028 	.word	0x40020028
 8005564:	40020040 	.word	0x40020040
 8005568:	40020058 	.word	0x40020058
 800556c:	40020070 	.word	0x40020070
 8005570:	40020088 	.word	0x40020088
 8005574:	400200a0 	.word	0x400200a0
 8005578:	400200b8 	.word	0x400200b8
 800557c:	40020410 	.word	0x40020410
 8005580:	40020428 	.word	0x40020428
 8005584:	40020440 	.word	0x40020440
 8005588:	40020458 	.word	0x40020458
 800558c:	40020470 	.word	0x40020470
 8005590:	40020488 	.word	0x40020488
 8005594:	400204a0 	.word	0x400204a0
 8005598:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f023 020e 	bic.w	r2, r3, #14
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f042 020a 	orr.w	r2, r2, #10
 80055ae:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d007      	beq.n	80055c8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f042 0204 	orr.w	r2, r2, #4
 80055c6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a83      	ldr	r2, [pc, #524]	; (80057dc <HAL_DMA_Start_IT+0x474>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d072      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a82      	ldr	r2, [pc, #520]	; (80057e0 <HAL_DMA_Start_IT+0x478>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d06d      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a80      	ldr	r2, [pc, #512]	; (80057e4 <HAL_DMA_Start_IT+0x47c>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d068      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a7f      	ldr	r2, [pc, #508]	; (80057e8 <HAL_DMA_Start_IT+0x480>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d063      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a7d      	ldr	r2, [pc, #500]	; (80057ec <HAL_DMA_Start_IT+0x484>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d05e      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a7c      	ldr	r2, [pc, #496]	; (80057f0 <HAL_DMA_Start_IT+0x488>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d059      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a7a      	ldr	r2, [pc, #488]	; (80057f4 <HAL_DMA_Start_IT+0x48c>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d054      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a79      	ldr	r2, [pc, #484]	; (80057f8 <HAL_DMA_Start_IT+0x490>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d04f      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a77      	ldr	r2, [pc, #476]	; (80057fc <HAL_DMA_Start_IT+0x494>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d04a      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a76      	ldr	r2, [pc, #472]	; (8005800 <HAL_DMA_Start_IT+0x498>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d045      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a74      	ldr	r2, [pc, #464]	; (8005804 <HAL_DMA_Start_IT+0x49c>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d040      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a73      	ldr	r2, [pc, #460]	; (8005808 <HAL_DMA_Start_IT+0x4a0>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d03b      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a71      	ldr	r2, [pc, #452]	; (800580c <HAL_DMA_Start_IT+0x4a4>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d036      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a70      	ldr	r2, [pc, #448]	; (8005810 <HAL_DMA_Start_IT+0x4a8>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d031      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a6e      	ldr	r2, [pc, #440]	; (8005814 <HAL_DMA_Start_IT+0x4ac>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d02c      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a6d      	ldr	r2, [pc, #436]	; (8005818 <HAL_DMA_Start_IT+0x4b0>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d027      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a6b      	ldr	r2, [pc, #428]	; (800581c <HAL_DMA_Start_IT+0x4b4>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d022      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a6a      	ldr	r2, [pc, #424]	; (8005820 <HAL_DMA_Start_IT+0x4b8>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d01d      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a68      	ldr	r2, [pc, #416]	; (8005824 <HAL_DMA_Start_IT+0x4bc>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d018      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a67      	ldr	r2, [pc, #412]	; (8005828 <HAL_DMA_Start_IT+0x4c0>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d013      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a65      	ldr	r2, [pc, #404]	; (800582c <HAL_DMA_Start_IT+0x4c4>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d00e      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a64      	ldr	r2, [pc, #400]	; (8005830 <HAL_DMA_Start_IT+0x4c8>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d009      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a62      	ldr	r2, [pc, #392]	; (8005834 <HAL_DMA_Start_IT+0x4cc>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d004      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a61      	ldr	r2, [pc, #388]	; (8005838 <HAL_DMA_Start_IT+0x4d0>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d101      	bne.n	80056bc <HAL_DMA_Start_IT+0x354>
 80056b8:	2301      	movs	r3, #1
 80056ba:	e000      	b.n	80056be <HAL_DMA_Start_IT+0x356>
 80056bc:	2300      	movs	r3, #0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d01a      	beq.n	80056f8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d007      	beq.n	80056e0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056de:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d007      	beq.n	80056f8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056f6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a37      	ldr	r2, [pc, #220]	; (80057dc <HAL_DMA_Start_IT+0x474>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d04a      	beq.n	8005798 <HAL_DMA_Start_IT+0x430>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a36      	ldr	r2, [pc, #216]	; (80057e0 <HAL_DMA_Start_IT+0x478>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d045      	beq.n	8005798 <HAL_DMA_Start_IT+0x430>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a34      	ldr	r2, [pc, #208]	; (80057e4 <HAL_DMA_Start_IT+0x47c>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d040      	beq.n	8005798 <HAL_DMA_Start_IT+0x430>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a33      	ldr	r2, [pc, #204]	; (80057e8 <HAL_DMA_Start_IT+0x480>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d03b      	beq.n	8005798 <HAL_DMA_Start_IT+0x430>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a31      	ldr	r2, [pc, #196]	; (80057ec <HAL_DMA_Start_IT+0x484>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d036      	beq.n	8005798 <HAL_DMA_Start_IT+0x430>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a30      	ldr	r2, [pc, #192]	; (80057f0 <HAL_DMA_Start_IT+0x488>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d031      	beq.n	8005798 <HAL_DMA_Start_IT+0x430>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a2e      	ldr	r2, [pc, #184]	; (80057f4 <HAL_DMA_Start_IT+0x48c>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d02c      	beq.n	8005798 <HAL_DMA_Start_IT+0x430>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a2d      	ldr	r2, [pc, #180]	; (80057f8 <HAL_DMA_Start_IT+0x490>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d027      	beq.n	8005798 <HAL_DMA_Start_IT+0x430>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a2b      	ldr	r2, [pc, #172]	; (80057fc <HAL_DMA_Start_IT+0x494>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d022      	beq.n	8005798 <HAL_DMA_Start_IT+0x430>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a2a      	ldr	r2, [pc, #168]	; (8005800 <HAL_DMA_Start_IT+0x498>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d01d      	beq.n	8005798 <HAL_DMA_Start_IT+0x430>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a28      	ldr	r2, [pc, #160]	; (8005804 <HAL_DMA_Start_IT+0x49c>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d018      	beq.n	8005798 <HAL_DMA_Start_IT+0x430>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a27      	ldr	r2, [pc, #156]	; (8005808 <HAL_DMA_Start_IT+0x4a0>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d013      	beq.n	8005798 <HAL_DMA_Start_IT+0x430>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a25      	ldr	r2, [pc, #148]	; (800580c <HAL_DMA_Start_IT+0x4a4>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d00e      	beq.n	8005798 <HAL_DMA_Start_IT+0x430>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a24      	ldr	r2, [pc, #144]	; (8005810 <HAL_DMA_Start_IT+0x4a8>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d009      	beq.n	8005798 <HAL_DMA_Start_IT+0x430>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a22      	ldr	r2, [pc, #136]	; (8005814 <HAL_DMA_Start_IT+0x4ac>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d004      	beq.n	8005798 <HAL_DMA_Start_IT+0x430>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a21      	ldr	r2, [pc, #132]	; (8005818 <HAL_DMA_Start_IT+0x4b0>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d108      	bne.n	80057aa <HAL_DMA_Start_IT+0x442>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f042 0201 	orr.w	r2, r2, #1
 80057a6:	601a      	str	r2, [r3, #0]
 80057a8:	e012      	b.n	80057d0 <HAL_DMA_Start_IT+0x468>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f042 0201 	orr.w	r2, r2, #1
 80057b8:	601a      	str	r2, [r3, #0]
 80057ba:	e009      	b.n	80057d0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057c2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80057d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3718      	adds	r7, #24
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	40020010 	.word	0x40020010
 80057e0:	40020028 	.word	0x40020028
 80057e4:	40020040 	.word	0x40020040
 80057e8:	40020058 	.word	0x40020058
 80057ec:	40020070 	.word	0x40020070
 80057f0:	40020088 	.word	0x40020088
 80057f4:	400200a0 	.word	0x400200a0
 80057f8:	400200b8 	.word	0x400200b8
 80057fc:	40020410 	.word	0x40020410
 8005800:	40020428 	.word	0x40020428
 8005804:	40020440 	.word	0x40020440
 8005808:	40020458 	.word	0x40020458
 800580c:	40020470 	.word	0x40020470
 8005810:	40020488 	.word	0x40020488
 8005814:	400204a0 	.word	0x400204a0
 8005818:	400204b8 	.word	0x400204b8
 800581c:	58025408 	.word	0x58025408
 8005820:	5802541c 	.word	0x5802541c
 8005824:	58025430 	.word	0x58025430
 8005828:	58025444 	.word	0x58025444
 800582c:	58025458 	.word	0x58025458
 8005830:	5802546c 	.word	0x5802546c
 8005834:	58025480 	.word	0x58025480
 8005838:	58025494 	.word	0x58025494

0800583c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005844:	f7fe fdf2 	bl	800442c <HAL_GetTick>
 8005848:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d101      	bne.n	8005854 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e2dc      	b.n	8005e0e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800585a:	b2db      	uxtb	r3, r3
 800585c:	2b02      	cmp	r3, #2
 800585e:	d008      	beq.n	8005872 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2280      	movs	r2, #128	; 0x80
 8005864:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e2cd      	b.n	8005e0e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a76      	ldr	r2, [pc, #472]	; (8005a50 <HAL_DMA_Abort+0x214>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d04a      	beq.n	8005912 <HAL_DMA_Abort+0xd6>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a74      	ldr	r2, [pc, #464]	; (8005a54 <HAL_DMA_Abort+0x218>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d045      	beq.n	8005912 <HAL_DMA_Abort+0xd6>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a73      	ldr	r2, [pc, #460]	; (8005a58 <HAL_DMA_Abort+0x21c>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d040      	beq.n	8005912 <HAL_DMA_Abort+0xd6>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a71      	ldr	r2, [pc, #452]	; (8005a5c <HAL_DMA_Abort+0x220>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d03b      	beq.n	8005912 <HAL_DMA_Abort+0xd6>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a70      	ldr	r2, [pc, #448]	; (8005a60 <HAL_DMA_Abort+0x224>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d036      	beq.n	8005912 <HAL_DMA_Abort+0xd6>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a6e      	ldr	r2, [pc, #440]	; (8005a64 <HAL_DMA_Abort+0x228>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d031      	beq.n	8005912 <HAL_DMA_Abort+0xd6>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a6d      	ldr	r2, [pc, #436]	; (8005a68 <HAL_DMA_Abort+0x22c>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d02c      	beq.n	8005912 <HAL_DMA_Abort+0xd6>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a6b      	ldr	r2, [pc, #428]	; (8005a6c <HAL_DMA_Abort+0x230>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d027      	beq.n	8005912 <HAL_DMA_Abort+0xd6>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a6a      	ldr	r2, [pc, #424]	; (8005a70 <HAL_DMA_Abort+0x234>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d022      	beq.n	8005912 <HAL_DMA_Abort+0xd6>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a68      	ldr	r2, [pc, #416]	; (8005a74 <HAL_DMA_Abort+0x238>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d01d      	beq.n	8005912 <HAL_DMA_Abort+0xd6>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a67      	ldr	r2, [pc, #412]	; (8005a78 <HAL_DMA_Abort+0x23c>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d018      	beq.n	8005912 <HAL_DMA_Abort+0xd6>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a65      	ldr	r2, [pc, #404]	; (8005a7c <HAL_DMA_Abort+0x240>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d013      	beq.n	8005912 <HAL_DMA_Abort+0xd6>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a64      	ldr	r2, [pc, #400]	; (8005a80 <HAL_DMA_Abort+0x244>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d00e      	beq.n	8005912 <HAL_DMA_Abort+0xd6>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a62      	ldr	r2, [pc, #392]	; (8005a84 <HAL_DMA_Abort+0x248>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d009      	beq.n	8005912 <HAL_DMA_Abort+0xd6>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a61      	ldr	r2, [pc, #388]	; (8005a88 <HAL_DMA_Abort+0x24c>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d004      	beq.n	8005912 <HAL_DMA_Abort+0xd6>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a5f      	ldr	r2, [pc, #380]	; (8005a8c <HAL_DMA_Abort+0x250>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d101      	bne.n	8005916 <HAL_DMA_Abort+0xda>
 8005912:	2301      	movs	r3, #1
 8005914:	e000      	b.n	8005918 <HAL_DMA_Abort+0xdc>
 8005916:	2300      	movs	r3, #0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d013      	beq.n	8005944 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f022 021e 	bic.w	r2, r2, #30
 800592a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	695a      	ldr	r2, [r3, #20]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800593a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	617b      	str	r3, [r7, #20]
 8005942:	e00a      	b.n	800595a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f022 020e 	bic.w	r2, r2, #14
 8005952:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a3c      	ldr	r2, [pc, #240]	; (8005a50 <HAL_DMA_Abort+0x214>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d072      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a3a      	ldr	r2, [pc, #232]	; (8005a54 <HAL_DMA_Abort+0x218>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d06d      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a39      	ldr	r2, [pc, #228]	; (8005a58 <HAL_DMA_Abort+0x21c>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d068      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a37      	ldr	r2, [pc, #220]	; (8005a5c <HAL_DMA_Abort+0x220>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d063      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a36      	ldr	r2, [pc, #216]	; (8005a60 <HAL_DMA_Abort+0x224>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d05e      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a34      	ldr	r2, [pc, #208]	; (8005a64 <HAL_DMA_Abort+0x228>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d059      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a33      	ldr	r2, [pc, #204]	; (8005a68 <HAL_DMA_Abort+0x22c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d054      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a31      	ldr	r2, [pc, #196]	; (8005a6c <HAL_DMA_Abort+0x230>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d04f      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a30      	ldr	r2, [pc, #192]	; (8005a70 <HAL_DMA_Abort+0x234>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d04a      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a2e      	ldr	r2, [pc, #184]	; (8005a74 <HAL_DMA_Abort+0x238>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d045      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a2d      	ldr	r2, [pc, #180]	; (8005a78 <HAL_DMA_Abort+0x23c>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d040      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a2b      	ldr	r2, [pc, #172]	; (8005a7c <HAL_DMA_Abort+0x240>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d03b      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a2a      	ldr	r2, [pc, #168]	; (8005a80 <HAL_DMA_Abort+0x244>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d036      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a28      	ldr	r2, [pc, #160]	; (8005a84 <HAL_DMA_Abort+0x248>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d031      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a27      	ldr	r2, [pc, #156]	; (8005a88 <HAL_DMA_Abort+0x24c>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d02c      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a25      	ldr	r2, [pc, #148]	; (8005a8c <HAL_DMA_Abort+0x250>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d027      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a24      	ldr	r2, [pc, #144]	; (8005a90 <HAL_DMA_Abort+0x254>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d022      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a22      	ldr	r2, [pc, #136]	; (8005a94 <HAL_DMA_Abort+0x258>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d01d      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a21      	ldr	r2, [pc, #132]	; (8005a98 <HAL_DMA_Abort+0x25c>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d018      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a1f      	ldr	r2, [pc, #124]	; (8005a9c <HAL_DMA_Abort+0x260>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d013      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a1e      	ldr	r2, [pc, #120]	; (8005aa0 <HAL_DMA_Abort+0x264>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d00e      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a1c      	ldr	r2, [pc, #112]	; (8005aa4 <HAL_DMA_Abort+0x268>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d009      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a1b      	ldr	r2, [pc, #108]	; (8005aa8 <HAL_DMA_Abort+0x26c>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d004      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a19      	ldr	r2, [pc, #100]	; (8005aac <HAL_DMA_Abort+0x270>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d132      	bne.n	8005ab0 <HAL_DMA_Abort+0x274>
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e031      	b.n	8005ab2 <HAL_DMA_Abort+0x276>
 8005a4e:	bf00      	nop
 8005a50:	40020010 	.word	0x40020010
 8005a54:	40020028 	.word	0x40020028
 8005a58:	40020040 	.word	0x40020040
 8005a5c:	40020058 	.word	0x40020058
 8005a60:	40020070 	.word	0x40020070
 8005a64:	40020088 	.word	0x40020088
 8005a68:	400200a0 	.word	0x400200a0
 8005a6c:	400200b8 	.word	0x400200b8
 8005a70:	40020410 	.word	0x40020410
 8005a74:	40020428 	.word	0x40020428
 8005a78:	40020440 	.word	0x40020440
 8005a7c:	40020458 	.word	0x40020458
 8005a80:	40020470 	.word	0x40020470
 8005a84:	40020488 	.word	0x40020488
 8005a88:	400204a0 	.word	0x400204a0
 8005a8c:	400204b8 	.word	0x400204b8
 8005a90:	58025408 	.word	0x58025408
 8005a94:	5802541c 	.word	0x5802541c
 8005a98:	58025430 	.word	0x58025430
 8005a9c:	58025444 	.word	0x58025444
 8005aa0:	58025458 	.word	0x58025458
 8005aa4:	5802546c 	.word	0x5802546c
 8005aa8:	58025480 	.word	0x58025480
 8005aac:	58025494 	.word	0x58025494
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d007      	beq.n	8005ac6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ac0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ac4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a6d      	ldr	r2, [pc, #436]	; (8005c80 <HAL_DMA_Abort+0x444>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d04a      	beq.n	8005b66 <HAL_DMA_Abort+0x32a>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a6b      	ldr	r2, [pc, #428]	; (8005c84 <HAL_DMA_Abort+0x448>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d045      	beq.n	8005b66 <HAL_DMA_Abort+0x32a>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a6a      	ldr	r2, [pc, #424]	; (8005c88 <HAL_DMA_Abort+0x44c>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d040      	beq.n	8005b66 <HAL_DMA_Abort+0x32a>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a68      	ldr	r2, [pc, #416]	; (8005c8c <HAL_DMA_Abort+0x450>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d03b      	beq.n	8005b66 <HAL_DMA_Abort+0x32a>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a67      	ldr	r2, [pc, #412]	; (8005c90 <HAL_DMA_Abort+0x454>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d036      	beq.n	8005b66 <HAL_DMA_Abort+0x32a>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a65      	ldr	r2, [pc, #404]	; (8005c94 <HAL_DMA_Abort+0x458>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d031      	beq.n	8005b66 <HAL_DMA_Abort+0x32a>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a64      	ldr	r2, [pc, #400]	; (8005c98 <HAL_DMA_Abort+0x45c>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d02c      	beq.n	8005b66 <HAL_DMA_Abort+0x32a>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a62      	ldr	r2, [pc, #392]	; (8005c9c <HAL_DMA_Abort+0x460>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d027      	beq.n	8005b66 <HAL_DMA_Abort+0x32a>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a61      	ldr	r2, [pc, #388]	; (8005ca0 <HAL_DMA_Abort+0x464>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d022      	beq.n	8005b66 <HAL_DMA_Abort+0x32a>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a5f      	ldr	r2, [pc, #380]	; (8005ca4 <HAL_DMA_Abort+0x468>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d01d      	beq.n	8005b66 <HAL_DMA_Abort+0x32a>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a5e      	ldr	r2, [pc, #376]	; (8005ca8 <HAL_DMA_Abort+0x46c>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d018      	beq.n	8005b66 <HAL_DMA_Abort+0x32a>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a5c      	ldr	r2, [pc, #368]	; (8005cac <HAL_DMA_Abort+0x470>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d013      	beq.n	8005b66 <HAL_DMA_Abort+0x32a>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a5b      	ldr	r2, [pc, #364]	; (8005cb0 <HAL_DMA_Abort+0x474>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d00e      	beq.n	8005b66 <HAL_DMA_Abort+0x32a>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a59      	ldr	r2, [pc, #356]	; (8005cb4 <HAL_DMA_Abort+0x478>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d009      	beq.n	8005b66 <HAL_DMA_Abort+0x32a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a58      	ldr	r2, [pc, #352]	; (8005cb8 <HAL_DMA_Abort+0x47c>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d004      	beq.n	8005b66 <HAL_DMA_Abort+0x32a>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a56      	ldr	r2, [pc, #344]	; (8005cbc <HAL_DMA_Abort+0x480>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d108      	bne.n	8005b78 <HAL_DMA_Abort+0x33c>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f022 0201 	bic.w	r2, r2, #1
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	e007      	b.n	8005b88 <HAL_DMA_Abort+0x34c>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f022 0201 	bic.w	r2, r2, #1
 8005b86:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005b88:	e013      	b.n	8005bb2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b8a:	f7fe fc4f 	bl	800442c <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	2b05      	cmp	r3, #5
 8005b96:	d90c      	bls.n	8005bb2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2203      	movs	r2, #3
 8005ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e12d      	b.n	8005e0e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1e5      	bne.n	8005b8a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a2f      	ldr	r2, [pc, #188]	; (8005c80 <HAL_DMA_Abort+0x444>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d04a      	beq.n	8005c5e <HAL_DMA_Abort+0x422>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a2d      	ldr	r2, [pc, #180]	; (8005c84 <HAL_DMA_Abort+0x448>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d045      	beq.n	8005c5e <HAL_DMA_Abort+0x422>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a2c      	ldr	r2, [pc, #176]	; (8005c88 <HAL_DMA_Abort+0x44c>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d040      	beq.n	8005c5e <HAL_DMA_Abort+0x422>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a2a      	ldr	r2, [pc, #168]	; (8005c8c <HAL_DMA_Abort+0x450>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d03b      	beq.n	8005c5e <HAL_DMA_Abort+0x422>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a29      	ldr	r2, [pc, #164]	; (8005c90 <HAL_DMA_Abort+0x454>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d036      	beq.n	8005c5e <HAL_DMA_Abort+0x422>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a27      	ldr	r2, [pc, #156]	; (8005c94 <HAL_DMA_Abort+0x458>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d031      	beq.n	8005c5e <HAL_DMA_Abort+0x422>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a26      	ldr	r2, [pc, #152]	; (8005c98 <HAL_DMA_Abort+0x45c>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d02c      	beq.n	8005c5e <HAL_DMA_Abort+0x422>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a24      	ldr	r2, [pc, #144]	; (8005c9c <HAL_DMA_Abort+0x460>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d027      	beq.n	8005c5e <HAL_DMA_Abort+0x422>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a23      	ldr	r2, [pc, #140]	; (8005ca0 <HAL_DMA_Abort+0x464>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d022      	beq.n	8005c5e <HAL_DMA_Abort+0x422>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a21      	ldr	r2, [pc, #132]	; (8005ca4 <HAL_DMA_Abort+0x468>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d01d      	beq.n	8005c5e <HAL_DMA_Abort+0x422>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a20      	ldr	r2, [pc, #128]	; (8005ca8 <HAL_DMA_Abort+0x46c>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d018      	beq.n	8005c5e <HAL_DMA_Abort+0x422>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a1e      	ldr	r2, [pc, #120]	; (8005cac <HAL_DMA_Abort+0x470>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d013      	beq.n	8005c5e <HAL_DMA_Abort+0x422>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a1d      	ldr	r2, [pc, #116]	; (8005cb0 <HAL_DMA_Abort+0x474>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d00e      	beq.n	8005c5e <HAL_DMA_Abort+0x422>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a1b      	ldr	r2, [pc, #108]	; (8005cb4 <HAL_DMA_Abort+0x478>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d009      	beq.n	8005c5e <HAL_DMA_Abort+0x422>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a1a      	ldr	r2, [pc, #104]	; (8005cb8 <HAL_DMA_Abort+0x47c>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d004      	beq.n	8005c5e <HAL_DMA_Abort+0x422>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a18      	ldr	r2, [pc, #96]	; (8005cbc <HAL_DMA_Abort+0x480>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d101      	bne.n	8005c62 <HAL_DMA_Abort+0x426>
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e000      	b.n	8005c64 <HAL_DMA_Abort+0x428>
 8005c62:	2300      	movs	r3, #0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d02b      	beq.n	8005cc0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c6c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c72:	f003 031f 	and.w	r3, r3, #31
 8005c76:	223f      	movs	r2, #63	; 0x3f
 8005c78:	409a      	lsls	r2, r3
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	609a      	str	r2, [r3, #8]
 8005c7e:	e02a      	b.n	8005cd6 <HAL_DMA_Abort+0x49a>
 8005c80:	40020010 	.word	0x40020010
 8005c84:	40020028 	.word	0x40020028
 8005c88:	40020040 	.word	0x40020040
 8005c8c:	40020058 	.word	0x40020058
 8005c90:	40020070 	.word	0x40020070
 8005c94:	40020088 	.word	0x40020088
 8005c98:	400200a0 	.word	0x400200a0
 8005c9c:	400200b8 	.word	0x400200b8
 8005ca0:	40020410 	.word	0x40020410
 8005ca4:	40020428 	.word	0x40020428
 8005ca8:	40020440 	.word	0x40020440
 8005cac:	40020458 	.word	0x40020458
 8005cb0:	40020470 	.word	0x40020470
 8005cb4:	40020488 	.word	0x40020488
 8005cb8:	400204a0 	.word	0x400204a0
 8005cbc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cc4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cca:	f003 031f 	and.w	r3, r3, #31
 8005cce:	2201      	movs	r2, #1
 8005cd0:	409a      	lsls	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a4f      	ldr	r2, [pc, #316]	; (8005e18 <HAL_DMA_Abort+0x5dc>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d072      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a4d      	ldr	r2, [pc, #308]	; (8005e1c <HAL_DMA_Abort+0x5e0>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d06d      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a4c      	ldr	r2, [pc, #304]	; (8005e20 <HAL_DMA_Abort+0x5e4>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d068      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a4a      	ldr	r2, [pc, #296]	; (8005e24 <HAL_DMA_Abort+0x5e8>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d063      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a49      	ldr	r2, [pc, #292]	; (8005e28 <HAL_DMA_Abort+0x5ec>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d05e      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a47      	ldr	r2, [pc, #284]	; (8005e2c <HAL_DMA_Abort+0x5f0>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d059      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a46      	ldr	r2, [pc, #280]	; (8005e30 <HAL_DMA_Abort+0x5f4>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d054      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a44      	ldr	r2, [pc, #272]	; (8005e34 <HAL_DMA_Abort+0x5f8>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d04f      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a43      	ldr	r2, [pc, #268]	; (8005e38 <HAL_DMA_Abort+0x5fc>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d04a      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a41      	ldr	r2, [pc, #260]	; (8005e3c <HAL_DMA_Abort+0x600>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d045      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a40      	ldr	r2, [pc, #256]	; (8005e40 <HAL_DMA_Abort+0x604>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d040      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a3e      	ldr	r2, [pc, #248]	; (8005e44 <HAL_DMA_Abort+0x608>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d03b      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a3d      	ldr	r2, [pc, #244]	; (8005e48 <HAL_DMA_Abort+0x60c>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d036      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a3b      	ldr	r2, [pc, #236]	; (8005e4c <HAL_DMA_Abort+0x610>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d031      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a3a      	ldr	r2, [pc, #232]	; (8005e50 <HAL_DMA_Abort+0x614>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d02c      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a38      	ldr	r2, [pc, #224]	; (8005e54 <HAL_DMA_Abort+0x618>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d027      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a37      	ldr	r2, [pc, #220]	; (8005e58 <HAL_DMA_Abort+0x61c>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d022      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a35      	ldr	r2, [pc, #212]	; (8005e5c <HAL_DMA_Abort+0x620>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d01d      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a34      	ldr	r2, [pc, #208]	; (8005e60 <HAL_DMA_Abort+0x624>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d018      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a32      	ldr	r2, [pc, #200]	; (8005e64 <HAL_DMA_Abort+0x628>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d013      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a31      	ldr	r2, [pc, #196]	; (8005e68 <HAL_DMA_Abort+0x62c>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d00e      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a2f      	ldr	r2, [pc, #188]	; (8005e6c <HAL_DMA_Abort+0x630>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d009      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a2e      	ldr	r2, [pc, #184]	; (8005e70 <HAL_DMA_Abort+0x634>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d004      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a2c      	ldr	r2, [pc, #176]	; (8005e74 <HAL_DMA_Abort+0x638>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d101      	bne.n	8005dca <HAL_DMA_Abort+0x58e>
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e000      	b.n	8005dcc <HAL_DMA_Abort+0x590>
 8005dca:	2300      	movs	r3, #0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d015      	beq.n	8005dfc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005dd8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00c      	beq.n	8005dfc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005df0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005dfa:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3718      	adds	r7, #24
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	40020010 	.word	0x40020010
 8005e1c:	40020028 	.word	0x40020028
 8005e20:	40020040 	.word	0x40020040
 8005e24:	40020058 	.word	0x40020058
 8005e28:	40020070 	.word	0x40020070
 8005e2c:	40020088 	.word	0x40020088
 8005e30:	400200a0 	.word	0x400200a0
 8005e34:	400200b8 	.word	0x400200b8
 8005e38:	40020410 	.word	0x40020410
 8005e3c:	40020428 	.word	0x40020428
 8005e40:	40020440 	.word	0x40020440
 8005e44:	40020458 	.word	0x40020458
 8005e48:	40020470 	.word	0x40020470
 8005e4c:	40020488 	.word	0x40020488
 8005e50:	400204a0 	.word	0x400204a0
 8005e54:	400204b8 	.word	0x400204b8
 8005e58:	58025408 	.word	0x58025408
 8005e5c:	5802541c 	.word	0x5802541c
 8005e60:	58025430 	.word	0x58025430
 8005e64:	58025444 	.word	0x58025444
 8005e68:	58025458 	.word	0x58025458
 8005e6c:	5802546c 	.word	0x5802546c
 8005e70:	58025480 	.word	0x58025480
 8005e74:	58025494 	.word	0x58025494

08005e78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e237      	b.n	80062fa <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d004      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2280      	movs	r2, #128	; 0x80
 8005e9a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e22c      	b.n	80062fa <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a5c      	ldr	r2, [pc, #368]	; (8006018 <HAL_DMA_Abort_IT+0x1a0>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d04a      	beq.n	8005f40 <HAL_DMA_Abort_IT+0xc8>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a5b      	ldr	r2, [pc, #364]	; (800601c <HAL_DMA_Abort_IT+0x1a4>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d045      	beq.n	8005f40 <HAL_DMA_Abort_IT+0xc8>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a59      	ldr	r2, [pc, #356]	; (8006020 <HAL_DMA_Abort_IT+0x1a8>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d040      	beq.n	8005f40 <HAL_DMA_Abort_IT+0xc8>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a58      	ldr	r2, [pc, #352]	; (8006024 <HAL_DMA_Abort_IT+0x1ac>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d03b      	beq.n	8005f40 <HAL_DMA_Abort_IT+0xc8>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a56      	ldr	r2, [pc, #344]	; (8006028 <HAL_DMA_Abort_IT+0x1b0>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d036      	beq.n	8005f40 <HAL_DMA_Abort_IT+0xc8>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a55      	ldr	r2, [pc, #340]	; (800602c <HAL_DMA_Abort_IT+0x1b4>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d031      	beq.n	8005f40 <HAL_DMA_Abort_IT+0xc8>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a53      	ldr	r2, [pc, #332]	; (8006030 <HAL_DMA_Abort_IT+0x1b8>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d02c      	beq.n	8005f40 <HAL_DMA_Abort_IT+0xc8>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a52      	ldr	r2, [pc, #328]	; (8006034 <HAL_DMA_Abort_IT+0x1bc>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d027      	beq.n	8005f40 <HAL_DMA_Abort_IT+0xc8>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a50      	ldr	r2, [pc, #320]	; (8006038 <HAL_DMA_Abort_IT+0x1c0>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d022      	beq.n	8005f40 <HAL_DMA_Abort_IT+0xc8>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a4f      	ldr	r2, [pc, #316]	; (800603c <HAL_DMA_Abort_IT+0x1c4>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d01d      	beq.n	8005f40 <HAL_DMA_Abort_IT+0xc8>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a4d      	ldr	r2, [pc, #308]	; (8006040 <HAL_DMA_Abort_IT+0x1c8>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d018      	beq.n	8005f40 <HAL_DMA_Abort_IT+0xc8>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a4c      	ldr	r2, [pc, #304]	; (8006044 <HAL_DMA_Abort_IT+0x1cc>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d013      	beq.n	8005f40 <HAL_DMA_Abort_IT+0xc8>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a4a      	ldr	r2, [pc, #296]	; (8006048 <HAL_DMA_Abort_IT+0x1d0>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d00e      	beq.n	8005f40 <HAL_DMA_Abort_IT+0xc8>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a49      	ldr	r2, [pc, #292]	; (800604c <HAL_DMA_Abort_IT+0x1d4>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d009      	beq.n	8005f40 <HAL_DMA_Abort_IT+0xc8>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a47      	ldr	r2, [pc, #284]	; (8006050 <HAL_DMA_Abort_IT+0x1d8>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d004      	beq.n	8005f40 <HAL_DMA_Abort_IT+0xc8>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a46      	ldr	r2, [pc, #280]	; (8006054 <HAL_DMA_Abort_IT+0x1dc>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d101      	bne.n	8005f44 <HAL_DMA_Abort_IT+0xcc>
 8005f40:	2301      	movs	r3, #1
 8005f42:	e000      	b.n	8005f46 <HAL_DMA_Abort_IT+0xce>
 8005f44:	2300      	movs	r3, #0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f000 8086 	beq.w	8006058 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2204      	movs	r2, #4
 8005f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a2f      	ldr	r2, [pc, #188]	; (8006018 <HAL_DMA_Abort_IT+0x1a0>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d04a      	beq.n	8005ff4 <HAL_DMA_Abort_IT+0x17c>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a2e      	ldr	r2, [pc, #184]	; (800601c <HAL_DMA_Abort_IT+0x1a4>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d045      	beq.n	8005ff4 <HAL_DMA_Abort_IT+0x17c>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a2c      	ldr	r2, [pc, #176]	; (8006020 <HAL_DMA_Abort_IT+0x1a8>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d040      	beq.n	8005ff4 <HAL_DMA_Abort_IT+0x17c>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a2b      	ldr	r2, [pc, #172]	; (8006024 <HAL_DMA_Abort_IT+0x1ac>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d03b      	beq.n	8005ff4 <HAL_DMA_Abort_IT+0x17c>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a29      	ldr	r2, [pc, #164]	; (8006028 <HAL_DMA_Abort_IT+0x1b0>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d036      	beq.n	8005ff4 <HAL_DMA_Abort_IT+0x17c>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a28      	ldr	r2, [pc, #160]	; (800602c <HAL_DMA_Abort_IT+0x1b4>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d031      	beq.n	8005ff4 <HAL_DMA_Abort_IT+0x17c>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a26      	ldr	r2, [pc, #152]	; (8006030 <HAL_DMA_Abort_IT+0x1b8>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d02c      	beq.n	8005ff4 <HAL_DMA_Abort_IT+0x17c>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a25      	ldr	r2, [pc, #148]	; (8006034 <HAL_DMA_Abort_IT+0x1bc>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d027      	beq.n	8005ff4 <HAL_DMA_Abort_IT+0x17c>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a23      	ldr	r2, [pc, #140]	; (8006038 <HAL_DMA_Abort_IT+0x1c0>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d022      	beq.n	8005ff4 <HAL_DMA_Abort_IT+0x17c>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a22      	ldr	r2, [pc, #136]	; (800603c <HAL_DMA_Abort_IT+0x1c4>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d01d      	beq.n	8005ff4 <HAL_DMA_Abort_IT+0x17c>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a20      	ldr	r2, [pc, #128]	; (8006040 <HAL_DMA_Abort_IT+0x1c8>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d018      	beq.n	8005ff4 <HAL_DMA_Abort_IT+0x17c>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a1f      	ldr	r2, [pc, #124]	; (8006044 <HAL_DMA_Abort_IT+0x1cc>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d013      	beq.n	8005ff4 <HAL_DMA_Abort_IT+0x17c>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a1d      	ldr	r2, [pc, #116]	; (8006048 <HAL_DMA_Abort_IT+0x1d0>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d00e      	beq.n	8005ff4 <HAL_DMA_Abort_IT+0x17c>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a1c      	ldr	r2, [pc, #112]	; (800604c <HAL_DMA_Abort_IT+0x1d4>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d009      	beq.n	8005ff4 <HAL_DMA_Abort_IT+0x17c>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a1a      	ldr	r2, [pc, #104]	; (8006050 <HAL_DMA_Abort_IT+0x1d8>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d004      	beq.n	8005ff4 <HAL_DMA_Abort_IT+0x17c>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a19      	ldr	r2, [pc, #100]	; (8006054 <HAL_DMA_Abort_IT+0x1dc>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d108      	bne.n	8006006 <HAL_DMA_Abort_IT+0x18e>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f022 0201 	bic.w	r2, r2, #1
 8006002:	601a      	str	r2, [r3, #0]
 8006004:	e178      	b.n	80062f8 <HAL_DMA_Abort_IT+0x480>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f022 0201 	bic.w	r2, r2, #1
 8006014:	601a      	str	r2, [r3, #0]
 8006016:	e16f      	b.n	80062f8 <HAL_DMA_Abort_IT+0x480>
 8006018:	40020010 	.word	0x40020010
 800601c:	40020028 	.word	0x40020028
 8006020:	40020040 	.word	0x40020040
 8006024:	40020058 	.word	0x40020058
 8006028:	40020070 	.word	0x40020070
 800602c:	40020088 	.word	0x40020088
 8006030:	400200a0 	.word	0x400200a0
 8006034:	400200b8 	.word	0x400200b8
 8006038:	40020410 	.word	0x40020410
 800603c:	40020428 	.word	0x40020428
 8006040:	40020440 	.word	0x40020440
 8006044:	40020458 	.word	0x40020458
 8006048:	40020470 	.word	0x40020470
 800604c:	40020488 	.word	0x40020488
 8006050:	400204a0 	.word	0x400204a0
 8006054:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f022 020e 	bic.w	r2, r2, #14
 8006066:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a6c      	ldr	r2, [pc, #432]	; (8006220 <HAL_DMA_Abort_IT+0x3a8>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d04a      	beq.n	8006108 <HAL_DMA_Abort_IT+0x290>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a6b      	ldr	r2, [pc, #428]	; (8006224 <HAL_DMA_Abort_IT+0x3ac>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d045      	beq.n	8006108 <HAL_DMA_Abort_IT+0x290>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a69      	ldr	r2, [pc, #420]	; (8006228 <HAL_DMA_Abort_IT+0x3b0>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d040      	beq.n	8006108 <HAL_DMA_Abort_IT+0x290>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a68      	ldr	r2, [pc, #416]	; (800622c <HAL_DMA_Abort_IT+0x3b4>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d03b      	beq.n	8006108 <HAL_DMA_Abort_IT+0x290>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a66      	ldr	r2, [pc, #408]	; (8006230 <HAL_DMA_Abort_IT+0x3b8>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d036      	beq.n	8006108 <HAL_DMA_Abort_IT+0x290>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a65      	ldr	r2, [pc, #404]	; (8006234 <HAL_DMA_Abort_IT+0x3bc>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d031      	beq.n	8006108 <HAL_DMA_Abort_IT+0x290>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a63      	ldr	r2, [pc, #396]	; (8006238 <HAL_DMA_Abort_IT+0x3c0>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d02c      	beq.n	8006108 <HAL_DMA_Abort_IT+0x290>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a62      	ldr	r2, [pc, #392]	; (800623c <HAL_DMA_Abort_IT+0x3c4>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d027      	beq.n	8006108 <HAL_DMA_Abort_IT+0x290>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a60      	ldr	r2, [pc, #384]	; (8006240 <HAL_DMA_Abort_IT+0x3c8>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d022      	beq.n	8006108 <HAL_DMA_Abort_IT+0x290>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a5f      	ldr	r2, [pc, #380]	; (8006244 <HAL_DMA_Abort_IT+0x3cc>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d01d      	beq.n	8006108 <HAL_DMA_Abort_IT+0x290>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a5d      	ldr	r2, [pc, #372]	; (8006248 <HAL_DMA_Abort_IT+0x3d0>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d018      	beq.n	8006108 <HAL_DMA_Abort_IT+0x290>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a5c      	ldr	r2, [pc, #368]	; (800624c <HAL_DMA_Abort_IT+0x3d4>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d013      	beq.n	8006108 <HAL_DMA_Abort_IT+0x290>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a5a      	ldr	r2, [pc, #360]	; (8006250 <HAL_DMA_Abort_IT+0x3d8>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d00e      	beq.n	8006108 <HAL_DMA_Abort_IT+0x290>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a59      	ldr	r2, [pc, #356]	; (8006254 <HAL_DMA_Abort_IT+0x3dc>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d009      	beq.n	8006108 <HAL_DMA_Abort_IT+0x290>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a57      	ldr	r2, [pc, #348]	; (8006258 <HAL_DMA_Abort_IT+0x3e0>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d004      	beq.n	8006108 <HAL_DMA_Abort_IT+0x290>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a56      	ldr	r2, [pc, #344]	; (800625c <HAL_DMA_Abort_IT+0x3e4>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d108      	bne.n	800611a <HAL_DMA_Abort_IT+0x2a2>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f022 0201 	bic.w	r2, r2, #1
 8006116:	601a      	str	r2, [r3, #0]
 8006118:	e007      	b.n	800612a <HAL_DMA_Abort_IT+0x2b2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f022 0201 	bic.w	r2, r2, #1
 8006128:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a3c      	ldr	r2, [pc, #240]	; (8006220 <HAL_DMA_Abort_IT+0x3a8>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d072      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a3a      	ldr	r2, [pc, #232]	; (8006224 <HAL_DMA_Abort_IT+0x3ac>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d06d      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a39      	ldr	r2, [pc, #228]	; (8006228 <HAL_DMA_Abort_IT+0x3b0>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d068      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a37      	ldr	r2, [pc, #220]	; (800622c <HAL_DMA_Abort_IT+0x3b4>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d063      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a36      	ldr	r2, [pc, #216]	; (8006230 <HAL_DMA_Abort_IT+0x3b8>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d05e      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a34      	ldr	r2, [pc, #208]	; (8006234 <HAL_DMA_Abort_IT+0x3bc>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d059      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a33      	ldr	r2, [pc, #204]	; (8006238 <HAL_DMA_Abort_IT+0x3c0>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d054      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a31      	ldr	r2, [pc, #196]	; (800623c <HAL_DMA_Abort_IT+0x3c4>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d04f      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a30      	ldr	r2, [pc, #192]	; (8006240 <HAL_DMA_Abort_IT+0x3c8>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d04a      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a2e      	ldr	r2, [pc, #184]	; (8006244 <HAL_DMA_Abort_IT+0x3cc>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d045      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a2d      	ldr	r2, [pc, #180]	; (8006248 <HAL_DMA_Abort_IT+0x3d0>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d040      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a2b      	ldr	r2, [pc, #172]	; (800624c <HAL_DMA_Abort_IT+0x3d4>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d03b      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a2a      	ldr	r2, [pc, #168]	; (8006250 <HAL_DMA_Abort_IT+0x3d8>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d036      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a28      	ldr	r2, [pc, #160]	; (8006254 <HAL_DMA_Abort_IT+0x3dc>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d031      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a27      	ldr	r2, [pc, #156]	; (8006258 <HAL_DMA_Abort_IT+0x3e0>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d02c      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a25      	ldr	r2, [pc, #148]	; (800625c <HAL_DMA_Abort_IT+0x3e4>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d027      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a24      	ldr	r2, [pc, #144]	; (8006260 <HAL_DMA_Abort_IT+0x3e8>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d022      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a22      	ldr	r2, [pc, #136]	; (8006264 <HAL_DMA_Abort_IT+0x3ec>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d01d      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a21      	ldr	r2, [pc, #132]	; (8006268 <HAL_DMA_Abort_IT+0x3f0>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d018      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a1f      	ldr	r2, [pc, #124]	; (800626c <HAL_DMA_Abort_IT+0x3f4>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d013      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a1e      	ldr	r2, [pc, #120]	; (8006270 <HAL_DMA_Abort_IT+0x3f8>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d00e      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a1c      	ldr	r2, [pc, #112]	; (8006274 <HAL_DMA_Abort_IT+0x3fc>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d009      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a1b      	ldr	r2, [pc, #108]	; (8006278 <HAL_DMA_Abort_IT+0x400>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d004      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a19      	ldr	r2, [pc, #100]	; (800627c <HAL_DMA_Abort_IT+0x404>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d132      	bne.n	8006280 <HAL_DMA_Abort_IT+0x408>
 800621a:	2301      	movs	r3, #1
 800621c:	e031      	b.n	8006282 <HAL_DMA_Abort_IT+0x40a>
 800621e:	bf00      	nop
 8006220:	40020010 	.word	0x40020010
 8006224:	40020028 	.word	0x40020028
 8006228:	40020040 	.word	0x40020040
 800622c:	40020058 	.word	0x40020058
 8006230:	40020070 	.word	0x40020070
 8006234:	40020088 	.word	0x40020088
 8006238:	400200a0 	.word	0x400200a0
 800623c:	400200b8 	.word	0x400200b8
 8006240:	40020410 	.word	0x40020410
 8006244:	40020428 	.word	0x40020428
 8006248:	40020440 	.word	0x40020440
 800624c:	40020458 	.word	0x40020458
 8006250:	40020470 	.word	0x40020470
 8006254:	40020488 	.word	0x40020488
 8006258:	400204a0 	.word	0x400204a0
 800625c:	400204b8 	.word	0x400204b8
 8006260:	58025408 	.word	0x58025408
 8006264:	5802541c 	.word	0x5802541c
 8006268:	58025430 	.word	0x58025430
 800626c:	58025444 	.word	0x58025444
 8006270:	58025458 	.word	0x58025458
 8006274:	5802546c 	.word	0x5802546c
 8006278:	58025480 	.word	0x58025480
 800627c:	58025494 	.word	0x58025494
 8006280:	2300      	movs	r3, #0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d028      	beq.n	80062d8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006290:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006294:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800629a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062a0:	f003 031f 	and.w	r3, r3, #31
 80062a4:	2201      	movs	r2, #1
 80062a6:	409a      	lsls	r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80062b4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00c      	beq.n	80062d8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062cc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80062d6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d003      	beq.n	80062f8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop

08006304 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b08a      	sub	sp, #40	; 0x28
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800630c:	2300      	movs	r3, #0
 800630e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006310:	4b67      	ldr	r3, [pc, #412]	; (80064b0 <HAL_DMA_IRQHandler+0x1ac>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a67      	ldr	r2, [pc, #412]	; (80064b4 <HAL_DMA_IRQHandler+0x1b0>)
 8006316:	fba2 2303 	umull	r2, r3, r2, r3
 800631a:	0a9b      	lsrs	r3, r3, #10
 800631c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006322:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006328:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800632a:	6a3b      	ldr	r3, [r7, #32]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a5f      	ldr	r2, [pc, #380]	; (80064b8 <HAL_DMA_IRQHandler+0x1b4>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d04a      	beq.n	80063d6 <HAL_DMA_IRQHandler+0xd2>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a5d      	ldr	r2, [pc, #372]	; (80064bc <HAL_DMA_IRQHandler+0x1b8>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d045      	beq.n	80063d6 <HAL_DMA_IRQHandler+0xd2>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a5c      	ldr	r2, [pc, #368]	; (80064c0 <HAL_DMA_IRQHandler+0x1bc>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d040      	beq.n	80063d6 <HAL_DMA_IRQHandler+0xd2>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a5a      	ldr	r2, [pc, #360]	; (80064c4 <HAL_DMA_IRQHandler+0x1c0>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d03b      	beq.n	80063d6 <HAL_DMA_IRQHandler+0xd2>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a59      	ldr	r2, [pc, #356]	; (80064c8 <HAL_DMA_IRQHandler+0x1c4>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d036      	beq.n	80063d6 <HAL_DMA_IRQHandler+0xd2>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a57      	ldr	r2, [pc, #348]	; (80064cc <HAL_DMA_IRQHandler+0x1c8>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d031      	beq.n	80063d6 <HAL_DMA_IRQHandler+0xd2>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a56      	ldr	r2, [pc, #344]	; (80064d0 <HAL_DMA_IRQHandler+0x1cc>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d02c      	beq.n	80063d6 <HAL_DMA_IRQHandler+0xd2>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a54      	ldr	r2, [pc, #336]	; (80064d4 <HAL_DMA_IRQHandler+0x1d0>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d027      	beq.n	80063d6 <HAL_DMA_IRQHandler+0xd2>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a53      	ldr	r2, [pc, #332]	; (80064d8 <HAL_DMA_IRQHandler+0x1d4>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d022      	beq.n	80063d6 <HAL_DMA_IRQHandler+0xd2>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a51      	ldr	r2, [pc, #324]	; (80064dc <HAL_DMA_IRQHandler+0x1d8>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d01d      	beq.n	80063d6 <HAL_DMA_IRQHandler+0xd2>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a50      	ldr	r2, [pc, #320]	; (80064e0 <HAL_DMA_IRQHandler+0x1dc>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d018      	beq.n	80063d6 <HAL_DMA_IRQHandler+0xd2>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a4e      	ldr	r2, [pc, #312]	; (80064e4 <HAL_DMA_IRQHandler+0x1e0>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d013      	beq.n	80063d6 <HAL_DMA_IRQHandler+0xd2>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a4d      	ldr	r2, [pc, #308]	; (80064e8 <HAL_DMA_IRQHandler+0x1e4>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d00e      	beq.n	80063d6 <HAL_DMA_IRQHandler+0xd2>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a4b      	ldr	r2, [pc, #300]	; (80064ec <HAL_DMA_IRQHandler+0x1e8>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d009      	beq.n	80063d6 <HAL_DMA_IRQHandler+0xd2>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a4a      	ldr	r2, [pc, #296]	; (80064f0 <HAL_DMA_IRQHandler+0x1ec>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d004      	beq.n	80063d6 <HAL_DMA_IRQHandler+0xd2>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a48      	ldr	r2, [pc, #288]	; (80064f4 <HAL_DMA_IRQHandler+0x1f0>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d101      	bne.n	80063da <HAL_DMA_IRQHandler+0xd6>
 80063d6:	2301      	movs	r3, #1
 80063d8:	e000      	b.n	80063dc <HAL_DMA_IRQHandler+0xd8>
 80063da:	2300      	movs	r3, #0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f000 842b 	beq.w	8006c38 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063e6:	f003 031f 	and.w	r3, r3, #31
 80063ea:	2208      	movs	r2, #8
 80063ec:	409a      	lsls	r2, r3
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	4013      	ands	r3, r2
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	f000 80a2 	beq.w	800653c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a2e      	ldr	r2, [pc, #184]	; (80064b8 <HAL_DMA_IRQHandler+0x1b4>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d04a      	beq.n	8006498 <HAL_DMA_IRQHandler+0x194>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a2d      	ldr	r2, [pc, #180]	; (80064bc <HAL_DMA_IRQHandler+0x1b8>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d045      	beq.n	8006498 <HAL_DMA_IRQHandler+0x194>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a2b      	ldr	r2, [pc, #172]	; (80064c0 <HAL_DMA_IRQHandler+0x1bc>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d040      	beq.n	8006498 <HAL_DMA_IRQHandler+0x194>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a2a      	ldr	r2, [pc, #168]	; (80064c4 <HAL_DMA_IRQHandler+0x1c0>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d03b      	beq.n	8006498 <HAL_DMA_IRQHandler+0x194>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a28      	ldr	r2, [pc, #160]	; (80064c8 <HAL_DMA_IRQHandler+0x1c4>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d036      	beq.n	8006498 <HAL_DMA_IRQHandler+0x194>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a27      	ldr	r2, [pc, #156]	; (80064cc <HAL_DMA_IRQHandler+0x1c8>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d031      	beq.n	8006498 <HAL_DMA_IRQHandler+0x194>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a25      	ldr	r2, [pc, #148]	; (80064d0 <HAL_DMA_IRQHandler+0x1cc>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d02c      	beq.n	8006498 <HAL_DMA_IRQHandler+0x194>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a24      	ldr	r2, [pc, #144]	; (80064d4 <HAL_DMA_IRQHandler+0x1d0>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d027      	beq.n	8006498 <HAL_DMA_IRQHandler+0x194>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a22      	ldr	r2, [pc, #136]	; (80064d8 <HAL_DMA_IRQHandler+0x1d4>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d022      	beq.n	8006498 <HAL_DMA_IRQHandler+0x194>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a21      	ldr	r2, [pc, #132]	; (80064dc <HAL_DMA_IRQHandler+0x1d8>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d01d      	beq.n	8006498 <HAL_DMA_IRQHandler+0x194>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a1f      	ldr	r2, [pc, #124]	; (80064e0 <HAL_DMA_IRQHandler+0x1dc>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d018      	beq.n	8006498 <HAL_DMA_IRQHandler+0x194>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a1e      	ldr	r2, [pc, #120]	; (80064e4 <HAL_DMA_IRQHandler+0x1e0>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d013      	beq.n	8006498 <HAL_DMA_IRQHandler+0x194>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a1c      	ldr	r2, [pc, #112]	; (80064e8 <HAL_DMA_IRQHandler+0x1e4>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d00e      	beq.n	8006498 <HAL_DMA_IRQHandler+0x194>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a1b      	ldr	r2, [pc, #108]	; (80064ec <HAL_DMA_IRQHandler+0x1e8>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d009      	beq.n	8006498 <HAL_DMA_IRQHandler+0x194>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a19      	ldr	r2, [pc, #100]	; (80064f0 <HAL_DMA_IRQHandler+0x1ec>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d004      	beq.n	8006498 <HAL_DMA_IRQHandler+0x194>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a18      	ldr	r2, [pc, #96]	; (80064f4 <HAL_DMA_IRQHandler+0x1f0>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d12f      	bne.n	80064f8 <HAL_DMA_IRQHandler+0x1f4>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0304 	and.w	r3, r3, #4
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	bf14      	ite	ne
 80064a6:	2301      	movne	r3, #1
 80064a8:	2300      	moveq	r3, #0
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	e02e      	b.n	800650c <HAL_DMA_IRQHandler+0x208>
 80064ae:	bf00      	nop
 80064b0:	24000044 	.word	0x24000044
 80064b4:	1b4e81b5 	.word	0x1b4e81b5
 80064b8:	40020010 	.word	0x40020010
 80064bc:	40020028 	.word	0x40020028
 80064c0:	40020040 	.word	0x40020040
 80064c4:	40020058 	.word	0x40020058
 80064c8:	40020070 	.word	0x40020070
 80064cc:	40020088 	.word	0x40020088
 80064d0:	400200a0 	.word	0x400200a0
 80064d4:	400200b8 	.word	0x400200b8
 80064d8:	40020410 	.word	0x40020410
 80064dc:	40020428 	.word	0x40020428
 80064e0:	40020440 	.word	0x40020440
 80064e4:	40020458 	.word	0x40020458
 80064e8:	40020470 	.word	0x40020470
 80064ec:	40020488 	.word	0x40020488
 80064f0:	400204a0 	.word	0x400204a0
 80064f4:	400204b8 	.word	0x400204b8
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0308 	and.w	r3, r3, #8
 8006502:	2b00      	cmp	r3, #0
 8006504:	bf14      	ite	ne
 8006506:	2301      	movne	r3, #1
 8006508:	2300      	moveq	r3, #0
 800650a:	b2db      	uxtb	r3, r3
 800650c:	2b00      	cmp	r3, #0
 800650e:	d015      	beq.n	800653c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f022 0204 	bic.w	r2, r2, #4
 800651e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006524:	f003 031f 	and.w	r3, r3, #31
 8006528:	2208      	movs	r2, #8
 800652a:	409a      	lsls	r2, r3
 800652c:	6a3b      	ldr	r3, [r7, #32]
 800652e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006534:	f043 0201 	orr.w	r2, r3, #1
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006540:	f003 031f 	and.w	r3, r3, #31
 8006544:	69ba      	ldr	r2, [r7, #24]
 8006546:	fa22 f303 	lsr.w	r3, r2, r3
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	2b00      	cmp	r3, #0
 8006550:	d06e      	beq.n	8006630 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a69      	ldr	r2, [pc, #420]	; (80066fc <HAL_DMA_IRQHandler+0x3f8>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d04a      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x2ee>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a67      	ldr	r2, [pc, #412]	; (8006700 <HAL_DMA_IRQHandler+0x3fc>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d045      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x2ee>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a66      	ldr	r2, [pc, #408]	; (8006704 <HAL_DMA_IRQHandler+0x400>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d040      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x2ee>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a64      	ldr	r2, [pc, #400]	; (8006708 <HAL_DMA_IRQHandler+0x404>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d03b      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x2ee>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a63      	ldr	r2, [pc, #396]	; (800670c <HAL_DMA_IRQHandler+0x408>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d036      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x2ee>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a61      	ldr	r2, [pc, #388]	; (8006710 <HAL_DMA_IRQHandler+0x40c>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d031      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x2ee>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a60      	ldr	r2, [pc, #384]	; (8006714 <HAL_DMA_IRQHandler+0x410>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d02c      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x2ee>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a5e      	ldr	r2, [pc, #376]	; (8006718 <HAL_DMA_IRQHandler+0x414>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d027      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x2ee>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a5d      	ldr	r2, [pc, #372]	; (800671c <HAL_DMA_IRQHandler+0x418>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d022      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x2ee>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a5b      	ldr	r2, [pc, #364]	; (8006720 <HAL_DMA_IRQHandler+0x41c>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d01d      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x2ee>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a5a      	ldr	r2, [pc, #360]	; (8006724 <HAL_DMA_IRQHandler+0x420>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d018      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x2ee>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a58      	ldr	r2, [pc, #352]	; (8006728 <HAL_DMA_IRQHandler+0x424>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d013      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x2ee>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a57      	ldr	r2, [pc, #348]	; (800672c <HAL_DMA_IRQHandler+0x428>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d00e      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x2ee>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a55      	ldr	r2, [pc, #340]	; (8006730 <HAL_DMA_IRQHandler+0x42c>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d009      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x2ee>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a54      	ldr	r2, [pc, #336]	; (8006734 <HAL_DMA_IRQHandler+0x430>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d004      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x2ee>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a52      	ldr	r2, [pc, #328]	; (8006738 <HAL_DMA_IRQHandler+0x434>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d10a      	bne.n	8006608 <HAL_DMA_IRQHandler+0x304>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	bf14      	ite	ne
 8006600:	2301      	movne	r3, #1
 8006602:	2300      	moveq	r3, #0
 8006604:	b2db      	uxtb	r3, r3
 8006606:	e003      	b.n	8006610 <HAL_DMA_IRQHandler+0x30c>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2300      	movs	r3, #0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00d      	beq.n	8006630 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006618:	f003 031f 	and.w	r3, r3, #31
 800661c:	2201      	movs	r2, #1
 800661e:	409a      	lsls	r2, r3
 8006620:	6a3b      	ldr	r3, [r7, #32]
 8006622:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006628:	f043 0202 	orr.w	r2, r3, #2
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006634:	f003 031f 	and.w	r3, r3, #31
 8006638:	2204      	movs	r2, #4
 800663a:	409a      	lsls	r2, r3
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	4013      	ands	r3, r2
 8006640:	2b00      	cmp	r3, #0
 8006642:	f000 808f 	beq.w	8006764 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a2c      	ldr	r2, [pc, #176]	; (80066fc <HAL_DMA_IRQHandler+0x3f8>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d04a      	beq.n	80066e6 <HAL_DMA_IRQHandler+0x3e2>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a2a      	ldr	r2, [pc, #168]	; (8006700 <HAL_DMA_IRQHandler+0x3fc>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d045      	beq.n	80066e6 <HAL_DMA_IRQHandler+0x3e2>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a29      	ldr	r2, [pc, #164]	; (8006704 <HAL_DMA_IRQHandler+0x400>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d040      	beq.n	80066e6 <HAL_DMA_IRQHandler+0x3e2>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a27      	ldr	r2, [pc, #156]	; (8006708 <HAL_DMA_IRQHandler+0x404>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d03b      	beq.n	80066e6 <HAL_DMA_IRQHandler+0x3e2>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a26      	ldr	r2, [pc, #152]	; (800670c <HAL_DMA_IRQHandler+0x408>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d036      	beq.n	80066e6 <HAL_DMA_IRQHandler+0x3e2>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a24      	ldr	r2, [pc, #144]	; (8006710 <HAL_DMA_IRQHandler+0x40c>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d031      	beq.n	80066e6 <HAL_DMA_IRQHandler+0x3e2>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a23      	ldr	r2, [pc, #140]	; (8006714 <HAL_DMA_IRQHandler+0x410>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d02c      	beq.n	80066e6 <HAL_DMA_IRQHandler+0x3e2>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a21      	ldr	r2, [pc, #132]	; (8006718 <HAL_DMA_IRQHandler+0x414>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d027      	beq.n	80066e6 <HAL_DMA_IRQHandler+0x3e2>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a20      	ldr	r2, [pc, #128]	; (800671c <HAL_DMA_IRQHandler+0x418>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d022      	beq.n	80066e6 <HAL_DMA_IRQHandler+0x3e2>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a1e      	ldr	r2, [pc, #120]	; (8006720 <HAL_DMA_IRQHandler+0x41c>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d01d      	beq.n	80066e6 <HAL_DMA_IRQHandler+0x3e2>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a1d      	ldr	r2, [pc, #116]	; (8006724 <HAL_DMA_IRQHandler+0x420>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d018      	beq.n	80066e6 <HAL_DMA_IRQHandler+0x3e2>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a1b      	ldr	r2, [pc, #108]	; (8006728 <HAL_DMA_IRQHandler+0x424>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d013      	beq.n	80066e6 <HAL_DMA_IRQHandler+0x3e2>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a1a      	ldr	r2, [pc, #104]	; (800672c <HAL_DMA_IRQHandler+0x428>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d00e      	beq.n	80066e6 <HAL_DMA_IRQHandler+0x3e2>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a18      	ldr	r2, [pc, #96]	; (8006730 <HAL_DMA_IRQHandler+0x42c>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d009      	beq.n	80066e6 <HAL_DMA_IRQHandler+0x3e2>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a17      	ldr	r2, [pc, #92]	; (8006734 <HAL_DMA_IRQHandler+0x430>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d004      	beq.n	80066e6 <HAL_DMA_IRQHandler+0x3e2>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a15      	ldr	r2, [pc, #84]	; (8006738 <HAL_DMA_IRQHandler+0x434>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d12a      	bne.n	800673c <HAL_DMA_IRQHandler+0x438>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 0302 	and.w	r3, r3, #2
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	bf14      	ite	ne
 80066f4:	2301      	movne	r3, #1
 80066f6:	2300      	moveq	r3, #0
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	e023      	b.n	8006744 <HAL_DMA_IRQHandler+0x440>
 80066fc:	40020010 	.word	0x40020010
 8006700:	40020028 	.word	0x40020028
 8006704:	40020040 	.word	0x40020040
 8006708:	40020058 	.word	0x40020058
 800670c:	40020070 	.word	0x40020070
 8006710:	40020088 	.word	0x40020088
 8006714:	400200a0 	.word	0x400200a0
 8006718:	400200b8 	.word	0x400200b8
 800671c:	40020410 	.word	0x40020410
 8006720:	40020428 	.word	0x40020428
 8006724:	40020440 	.word	0x40020440
 8006728:	40020458 	.word	0x40020458
 800672c:	40020470 	.word	0x40020470
 8006730:	40020488 	.word	0x40020488
 8006734:	400204a0 	.word	0x400204a0
 8006738:	400204b8 	.word	0x400204b8
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2300      	movs	r3, #0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00d      	beq.n	8006764 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800674c:	f003 031f 	and.w	r3, r3, #31
 8006750:	2204      	movs	r2, #4
 8006752:	409a      	lsls	r2, r3
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800675c:	f043 0204 	orr.w	r2, r3, #4
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006768:	f003 031f 	and.w	r3, r3, #31
 800676c:	2210      	movs	r2, #16
 800676e:	409a      	lsls	r2, r3
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	4013      	ands	r3, r2
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 80a6 	beq.w	80068c6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a85      	ldr	r2, [pc, #532]	; (8006994 <HAL_DMA_IRQHandler+0x690>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d04a      	beq.n	800681a <HAL_DMA_IRQHandler+0x516>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a83      	ldr	r2, [pc, #524]	; (8006998 <HAL_DMA_IRQHandler+0x694>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d045      	beq.n	800681a <HAL_DMA_IRQHandler+0x516>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a82      	ldr	r2, [pc, #520]	; (800699c <HAL_DMA_IRQHandler+0x698>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d040      	beq.n	800681a <HAL_DMA_IRQHandler+0x516>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a80      	ldr	r2, [pc, #512]	; (80069a0 <HAL_DMA_IRQHandler+0x69c>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d03b      	beq.n	800681a <HAL_DMA_IRQHandler+0x516>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a7f      	ldr	r2, [pc, #508]	; (80069a4 <HAL_DMA_IRQHandler+0x6a0>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d036      	beq.n	800681a <HAL_DMA_IRQHandler+0x516>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a7d      	ldr	r2, [pc, #500]	; (80069a8 <HAL_DMA_IRQHandler+0x6a4>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d031      	beq.n	800681a <HAL_DMA_IRQHandler+0x516>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a7c      	ldr	r2, [pc, #496]	; (80069ac <HAL_DMA_IRQHandler+0x6a8>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d02c      	beq.n	800681a <HAL_DMA_IRQHandler+0x516>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a7a      	ldr	r2, [pc, #488]	; (80069b0 <HAL_DMA_IRQHandler+0x6ac>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d027      	beq.n	800681a <HAL_DMA_IRQHandler+0x516>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a79      	ldr	r2, [pc, #484]	; (80069b4 <HAL_DMA_IRQHandler+0x6b0>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d022      	beq.n	800681a <HAL_DMA_IRQHandler+0x516>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a77      	ldr	r2, [pc, #476]	; (80069b8 <HAL_DMA_IRQHandler+0x6b4>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d01d      	beq.n	800681a <HAL_DMA_IRQHandler+0x516>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a76      	ldr	r2, [pc, #472]	; (80069bc <HAL_DMA_IRQHandler+0x6b8>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d018      	beq.n	800681a <HAL_DMA_IRQHandler+0x516>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a74      	ldr	r2, [pc, #464]	; (80069c0 <HAL_DMA_IRQHandler+0x6bc>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d013      	beq.n	800681a <HAL_DMA_IRQHandler+0x516>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a73      	ldr	r2, [pc, #460]	; (80069c4 <HAL_DMA_IRQHandler+0x6c0>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d00e      	beq.n	800681a <HAL_DMA_IRQHandler+0x516>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a71      	ldr	r2, [pc, #452]	; (80069c8 <HAL_DMA_IRQHandler+0x6c4>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d009      	beq.n	800681a <HAL_DMA_IRQHandler+0x516>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a70      	ldr	r2, [pc, #448]	; (80069cc <HAL_DMA_IRQHandler+0x6c8>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d004      	beq.n	800681a <HAL_DMA_IRQHandler+0x516>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a6e      	ldr	r2, [pc, #440]	; (80069d0 <HAL_DMA_IRQHandler+0x6cc>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d10a      	bne.n	8006830 <HAL_DMA_IRQHandler+0x52c>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0308 	and.w	r3, r3, #8
 8006824:	2b00      	cmp	r3, #0
 8006826:	bf14      	ite	ne
 8006828:	2301      	movne	r3, #1
 800682a:	2300      	moveq	r3, #0
 800682c:	b2db      	uxtb	r3, r3
 800682e:	e009      	b.n	8006844 <HAL_DMA_IRQHandler+0x540>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0304 	and.w	r3, r3, #4
 800683a:	2b00      	cmp	r3, #0
 800683c:	bf14      	ite	ne
 800683e:	2301      	movne	r3, #1
 8006840:	2300      	moveq	r3, #0
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b00      	cmp	r3, #0
 8006846:	d03e      	beq.n	80068c6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800684c:	f003 031f 	and.w	r3, r3, #31
 8006850:	2210      	movs	r2, #16
 8006852:	409a      	lsls	r2, r3
 8006854:	6a3b      	ldr	r3, [r7, #32]
 8006856:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006862:	2b00      	cmp	r3, #0
 8006864:	d018      	beq.n	8006898 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006870:	2b00      	cmp	r3, #0
 8006872:	d108      	bne.n	8006886 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006878:	2b00      	cmp	r3, #0
 800687a:	d024      	beq.n	80068c6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	4798      	blx	r3
 8006884:	e01f      	b.n	80068c6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800688a:	2b00      	cmp	r3, #0
 800688c:	d01b      	beq.n	80068c6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	4798      	blx	r3
 8006896:	e016      	b.n	80068c6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d107      	bne.n	80068b6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f022 0208 	bic.w	r2, r2, #8
 80068b4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d003      	beq.n	80068c6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ca:	f003 031f 	and.w	r3, r3, #31
 80068ce:	2220      	movs	r2, #32
 80068d0:	409a      	lsls	r2, r3
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	4013      	ands	r3, r2
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	f000 8110 	beq.w	8006afc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a2c      	ldr	r2, [pc, #176]	; (8006994 <HAL_DMA_IRQHandler+0x690>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d04a      	beq.n	800697c <HAL_DMA_IRQHandler+0x678>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a2b      	ldr	r2, [pc, #172]	; (8006998 <HAL_DMA_IRQHandler+0x694>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d045      	beq.n	800697c <HAL_DMA_IRQHandler+0x678>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a29      	ldr	r2, [pc, #164]	; (800699c <HAL_DMA_IRQHandler+0x698>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d040      	beq.n	800697c <HAL_DMA_IRQHandler+0x678>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a28      	ldr	r2, [pc, #160]	; (80069a0 <HAL_DMA_IRQHandler+0x69c>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d03b      	beq.n	800697c <HAL_DMA_IRQHandler+0x678>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a26      	ldr	r2, [pc, #152]	; (80069a4 <HAL_DMA_IRQHandler+0x6a0>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d036      	beq.n	800697c <HAL_DMA_IRQHandler+0x678>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a25      	ldr	r2, [pc, #148]	; (80069a8 <HAL_DMA_IRQHandler+0x6a4>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d031      	beq.n	800697c <HAL_DMA_IRQHandler+0x678>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a23      	ldr	r2, [pc, #140]	; (80069ac <HAL_DMA_IRQHandler+0x6a8>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d02c      	beq.n	800697c <HAL_DMA_IRQHandler+0x678>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a22      	ldr	r2, [pc, #136]	; (80069b0 <HAL_DMA_IRQHandler+0x6ac>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d027      	beq.n	800697c <HAL_DMA_IRQHandler+0x678>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a20      	ldr	r2, [pc, #128]	; (80069b4 <HAL_DMA_IRQHandler+0x6b0>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d022      	beq.n	800697c <HAL_DMA_IRQHandler+0x678>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a1f      	ldr	r2, [pc, #124]	; (80069b8 <HAL_DMA_IRQHandler+0x6b4>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d01d      	beq.n	800697c <HAL_DMA_IRQHandler+0x678>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a1d      	ldr	r2, [pc, #116]	; (80069bc <HAL_DMA_IRQHandler+0x6b8>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d018      	beq.n	800697c <HAL_DMA_IRQHandler+0x678>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a1c      	ldr	r2, [pc, #112]	; (80069c0 <HAL_DMA_IRQHandler+0x6bc>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d013      	beq.n	800697c <HAL_DMA_IRQHandler+0x678>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a1a      	ldr	r2, [pc, #104]	; (80069c4 <HAL_DMA_IRQHandler+0x6c0>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d00e      	beq.n	800697c <HAL_DMA_IRQHandler+0x678>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a19      	ldr	r2, [pc, #100]	; (80069c8 <HAL_DMA_IRQHandler+0x6c4>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d009      	beq.n	800697c <HAL_DMA_IRQHandler+0x678>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a17      	ldr	r2, [pc, #92]	; (80069cc <HAL_DMA_IRQHandler+0x6c8>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d004      	beq.n	800697c <HAL_DMA_IRQHandler+0x678>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a16      	ldr	r2, [pc, #88]	; (80069d0 <HAL_DMA_IRQHandler+0x6cc>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d12b      	bne.n	80069d4 <HAL_DMA_IRQHandler+0x6d0>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0310 	and.w	r3, r3, #16
 8006986:	2b00      	cmp	r3, #0
 8006988:	bf14      	ite	ne
 800698a:	2301      	movne	r3, #1
 800698c:	2300      	moveq	r3, #0
 800698e:	b2db      	uxtb	r3, r3
 8006990:	e02a      	b.n	80069e8 <HAL_DMA_IRQHandler+0x6e4>
 8006992:	bf00      	nop
 8006994:	40020010 	.word	0x40020010
 8006998:	40020028 	.word	0x40020028
 800699c:	40020040 	.word	0x40020040
 80069a0:	40020058 	.word	0x40020058
 80069a4:	40020070 	.word	0x40020070
 80069a8:	40020088 	.word	0x40020088
 80069ac:	400200a0 	.word	0x400200a0
 80069b0:	400200b8 	.word	0x400200b8
 80069b4:	40020410 	.word	0x40020410
 80069b8:	40020428 	.word	0x40020428
 80069bc:	40020440 	.word	0x40020440
 80069c0:	40020458 	.word	0x40020458
 80069c4:	40020470 	.word	0x40020470
 80069c8:	40020488 	.word	0x40020488
 80069cc:	400204a0 	.word	0x400204a0
 80069d0:	400204b8 	.word	0x400204b8
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0302 	and.w	r3, r3, #2
 80069de:	2b00      	cmp	r3, #0
 80069e0:	bf14      	ite	ne
 80069e2:	2301      	movne	r3, #1
 80069e4:	2300      	moveq	r3, #0
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f000 8087 	beq.w	8006afc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069f2:	f003 031f 	and.w	r3, r3, #31
 80069f6:	2220      	movs	r2, #32
 80069f8:	409a      	lsls	r2, r3
 80069fa:	6a3b      	ldr	r3, [r7, #32]
 80069fc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b04      	cmp	r3, #4
 8006a08:	d139      	bne.n	8006a7e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f022 0216 	bic.w	r2, r2, #22
 8006a18:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	695a      	ldr	r2, [r3, #20]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a28:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d103      	bne.n	8006a3a <HAL_DMA_IRQHandler+0x736>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d007      	beq.n	8006a4a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f022 0208 	bic.w	r2, r2, #8
 8006a48:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a4e:	f003 031f 	and.w	r3, r3, #31
 8006a52:	223f      	movs	r2, #63	; 0x3f
 8006a54:	409a      	lsls	r2, r3
 8006a56:	6a3b      	ldr	r3, [r7, #32]
 8006a58:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f000 8382 	beq.w	8007178 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	4798      	blx	r3
          }
          return;
 8006a7c:	e37c      	b.n	8007178 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d018      	beq.n	8006abe <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d108      	bne.n	8006aac <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d02c      	beq.n	8006afc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	4798      	blx	r3
 8006aaa:	e027      	b.n	8006afc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d023      	beq.n	8006afc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	4798      	blx	r3
 8006abc:	e01e      	b.n	8006afc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d10f      	bne.n	8006aec <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f022 0210 	bic.w	r2, r2, #16
 8006ada:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d003      	beq.n	8006afc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f000 833e 	beq.w	8007182 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b0a:	f003 0301 	and.w	r3, r3, #1
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f000 8088 	beq.w	8006c24 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2204      	movs	r2, #4
 8006b18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a89      	ldr	r2, [pc, #548]	; (8006d48 <HAL_DMA_IRQHandler+0xa44>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d04a      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x8b8>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a88      	ldr	r2, [pc, #544]	; (8006d4c <HAL_DMA_IRQHandler+0xa48>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d045      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x8b8>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a86      	ldr	r2, [pc, #536]	; (8006d50 <HAL_DMA_IRQHandler+0xa4c>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d040      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x8b8>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a85      	ldr	r2, [pc, #532]	; (8006d54 <HAL_DMA_IRQHandler+0xa50>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d03b      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x8b8>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a83      	ldr	r2, [pc, #524]	; (8006d58 <HAL_DMA_IRQHandler+0xa54>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d036      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x8b8>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a82      	ldr	r2, [pc, #520]	; (8006d5c <HAL_DMA_IRQHandler+0xa58>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d031      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x8b8>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a80      	ldr	r2, [pc, #512]	; (8006d60 <HAL_DMA_IRQHandler+0xa5c>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d02c      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x8b8>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a7f      	ldr	r2, [pc, #508]	; (8006d64 <HAL_DMA_IRQHandler+0xa60>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d027      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x8b8>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a7d      	ldr	r2, [pc, #500]	; (8006d68 <HAL_DMA_IRQHandler+0xa64>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d022      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x8b8>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a7c      	ldr	r2, [pc, #496]	; (8006d6c <HAL_DMA_IRQHandler+0xa68>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d01d      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x8b8>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a7a      	ldr	r2, [pc, #488]	; (8006d70 <HAL_DMA_IRQHandler+0xa6c>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d018      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x8b8>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a79      	ldr	r2, [pc, #484]	; (8006d74 <HAL_DMA_IRQHandler+0xa70>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d013      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x8b8>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a77      	ldr	r2, [pc, #476]	; (8006d78 <HAL_DMA_IRQHandler+0xa74>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d00e      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x8b8>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a76      	ldr	r2, [pc, #472]	; (8006d7c <HAL_DMA_IRQHandler+0xa78>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d009      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x8b8>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a74      	ldr	r2, [pc, #464]	; (8006d80 <HAL_DMA_IRQHandler+0xa7c>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d004      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x8b8>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a73      	ldr	r2, [pc, #460]	; (8006d84 <HAL_DMA_IRQHandler+0xa80>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d108      	bne.n	8006bce <HAL_DMA_IRQHandler+0x8ca>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f022 0201 	bic.w	r2, r2, #1
 8006bca:	601a      	str	r2, [r3, #0]
 8006bcc:	e007      	b.n	8006bde <HAL_DMA_IRQHandler+0x8da>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f022 0201 	bic.w	r2, r2, #1
 8006bdc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	3301      	adds	r3, #1
 8006be2:	60fb      	str	r3, [r7, #12]
 8006be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d307      	bcc.n	8006bfa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1f2      	bne.n	8006bde <HAL_DMA_IRQHandler+0x8da>
 8006bf8:	e000      	b.n	8006bfc <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006bfa:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 0301 	and.w	r3, r3, #1
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d004      	beq.n	8006c14 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2203      	movs	r2, #3
 8006c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006c12:	e003      	b.n	8006c1c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f000 82aa 	beq.w	8007182 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	4798      	blx	r3
 8006c36:	e2a4      	b.n	8007182 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a52      	ldr	r2, [pc, #328]	; (8006d88 <HAL_DMA_IRQHandler+0xa84>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d04a      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x9d4>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a51      	ldr	r2, [pc, #324]	; (8006d8c <HAL_DMA_IRQHandler+0xa88>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d045      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x9d4>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a4f      	ldr	r2, [pc, #316]	; (8006d90 <HAL_DMA_IRQHandler+0xa8c>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d040      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x9d4>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a4e      	ldr	r2, [pc, #312]	; (8006d94 <HAL_DMA_IRQHandler+0xa90>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d03b      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x9d4>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a4c      	ldr	r2, [pc, #304]	; (8006d98 <HAL_DMA_IRQHandler+0xa94>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d036      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x9d4>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a4b      	ldr	r2, [pc, #300]	; (8006d9c <HAL_DMA_IRQHandler+0xa98>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d031      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x9d4>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a49      	ldr	r2, [pc, #292]	; (8006da0 <HAL_DMA_IRQHandler+0xa9c>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d02c      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x9d4>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a48      	ldr	r2, [pc, #288]	; (8006da4 <HAL_DMA_IRQHandler+0xaa0>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d027      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x9d4>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a46      	ldr	r2, [pc, #280]	; (8006da8 <HAL_DMA_IRQHandler+0xaa4>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d022      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x9d4>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a45      	ldr	r2, [pc, #276]	; (8006dac <HAL_DMA_IRQHandler+0xaa8>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d01d      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x9d4>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a43      	ldr	r2, [pc, #268]	; (8006db0 <HAL_DMA_IRQHandler+0xaac>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d018      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x9d4>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a42      	ldr	r2, [pc, #264]	; (8006db4 <HAL_DMA_IRQHandler+0xab0>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d013      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x9d4>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a40      	ldr	r2, [pc, #256]	; (8006db8 <HAL_DMA_IRQHandler+0xab4>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d00e      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x9d4>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a3f      	ldr	r2, [pc, #252]	; (8006dbc <HAL_DMA_IRQHandler+0xab8>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d009      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x9d4>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a3d      	ldr	r2, [pc, #244]	; (8006dc0 <HAL_DMA_IRQHandler+0xabc>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d004      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x9d4>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a3c      	ldr	r2, [pc, #240]	; (8006dc4 <HAL_DMA_IRQHandler+0xac0>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d101      	bne.n	8006cdc <HAL_DMA_IRQHandler+0x9d8>
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e000      	b.n	8006cde <HAL_DMA_IRQHandler+0x9da>
 8006cdc:	2300      	movs	r3, #0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f000 824f 	beq.w	8007182 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cf0:	f003 031f 	and.w	r3, r3, #31
 8006cf4:	2204      	movs	r2, #4
 8006cf6:	409a      	lsls	r2, r3
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f000 80dd 	beq.w	8006ebc <HAL_DMA_IRQHandler+0xbb8>
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	f003 0304 	and.w	r3, r3, #4
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f000 80d7 	beq.w	8006ebc <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d12:	f003 031f 	and.w	r3, r3, #31
 8006d16:	2204      	movs	r2, #4
 8006d18:	409a      	lsls	r2, r3
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d059      	beq.n	8006ddc <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d14a      	bne.n	8006dc8 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f000 8220 	beq.w	800717c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d44:	e21a      	b.n	800717c <HAL_DMA_IRQHandler+0xe78>
 8006d46:	bf00      	nop
 8006d48:	40020010 	.word	0x40020010
 8006d4c:	40020028 	.word	0x40020028
 8006d50:	40020040 	.word	0x40020040
 8006d54:	40020058 	.word	0x40020058
 8006d58:	40020070 	.word	0x40020070
 8006d5c:	40020088 	.word	0x40020088
 8006d60:	400200a0 	.word	0x400200a0
 8006d64:	400200b8 	.word	0x400200b8
 8006d68:	40020410 	.word	0x40020410
 8006d6c:	40020428 	.word	0x40020428
 8006d70:	40020440 	.word	0x40020440
 8006d74:	40020458 	.word	0x40020458
 8006d78:	40020470 	.word	0x40020470
 8006d7c:	40020488 	.word	0x40020488
 8006d80:	400204a0 	.word	0x400204a0
 8006d84:	400204b8 	.word	0x400204b8
 8006d88:	48022c08 	.word	0x48022c08
 8006d8c:	48022c1c 	.word	0x48022c1c
 8006d90:	48022c30 	.word	0x48022c30
 8006d94:	48022c44 	.word	0x48022c44
 8006d98:	48022c58 	.word	0x48022c58
 8006d9c:	48022c6c 	.word	0x48022c6c
 8006da0:	48022c80 	.word	0x48022c80
 8006da4:	48022c94 	.word	0x48022c94
 8006da8:	58025408 	.word	0x58025408
 8006dac:	5802541c 	.word	0x5802541c
 8006db0:	58025430 	.word	0x58025430
 8006db4:	58025444 	.word	0x58025444
 8006db8:	58025458 	.word	0x58025458
 8006dbc:	5802546c 	.word	0x5802546c
 8006dc0:	58025480 	.word	0x58025480
 8006dc4:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f000 81d5 	beq.w	800717c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dda:	e1cf      	b.n	800717c <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	f003 0320 	and.w	r3, r3, #32
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d160      	bne.n	8006ea8 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a7f      	ldr	r2, [pc, #508]	; (8006fe8 <HAL_DMA_IRQHandler+0xce4>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d04a      	beq.n	8006e86 <HAL_DMA_IRQHandler+0xb82>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a7d      	ldr	r2, [pc, #500]	; (8006fec <HAL_DMA_IRQHandler+0xce8>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d045      	beq.n	8006e86 <HAL_DMA_IRQHandler+0xb82>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a7c      	ldr	r2, [pc, #496]	; (8006ff0 <HAL_DMA_IRQHandler+0xcec>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d040      	beq.n	8006e86 <HAL_DMA_IRQHandler+0xb82>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a7a      	ldr	r2, [pc, #488]	; (8006ff4 <HAL_DMA_IRQHandler+0xcf0>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d03b      	beq.n	8006e86 <HAL_DMA_IRQHandler+0xb82>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a79      	ldr	r2, [pc, #484]	; (8006ff8 <HAL_DMA_IRQHandler+0xcf4>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d036      	beq.n	8006e86 <HAL_DMA_IRQHandler+0xb82>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a77      	ldr	r2, [pc, #476]	; (8006ffc <HAL_DMA_IRQHandler+0xcf8>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d031      	beq.n	8006e86 <HAL_DMA_IRQHandler+0xb82>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a76      	ldr	r2, [pc, #472]	; (8007000 <HAL_DMA_IRQHandler+0xcfc>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d02c      	beq.n	8006e86 <HAL_DMA_IRQHandler+0xb82>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a74      	ldr	r2, [pc, #464]	; (8007004 <HAL_DMA_IRQHandler+0xd00>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d027      	beq.n	8006e86 <HAL_DMA_IRQHandler+0xb82>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a73      	ldr	r2, [pc, #460]	; (8007008 <HAL_DMA_IRQHandler+0xd04>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d022      	beq.n	8006e86 <HAL_DMA_IRQHandler+0xb82>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a71      	ldr	r2, [pc, #452]	; (800700c <HAL_DMA_IRQHandler+0xd08>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d01d      	beq.n	8006e86 <HAL_DMA_IRQHandler+0xb82>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a70      	ldr	r2, [pc, #448]	; (8007010 <HAL_DMA_IRQHandler+0xd0c>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d018      	beq.n	8006e86 <HAL_DMA_IRQHandler+0xb82>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a6e      	ldr	r2, [pc, #440]	; (8007014 <HAL_DMA_IRQHandler+0xd10>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d013      	beq.n	8006e86 <HAL_DMA_IRQHandler+0xb82>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a6d      	ldr	r2, [pc, #436]	; (8007018 <HAL_DMA_IRQHandler+0xd14>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d00e      	beq.n	8006e86 <HAL_DMA_IRQHandler+0xb82>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a6b      	ldr	r2, [pc, #428]	; (800701c <HAL_DMA_IRQHandler+0xd18>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d009      	beq.n	8006e86 <HAL_DMA_IRQHandler+0xb82>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a6a      	ldr	r2, [pc, #424]	; (8007020 <HAL_DMA_IRQHandler+0xd1c>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d004      	beq.n	8006e86 <HAL_DMA_IRQHandler+0xb82>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a68      	ldr	r2, [pc, #416]	; (8007024 <HAL_DMA_IRQHandler+0xd20>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d108      	bne.n	8006e98 <HAL_DMA_IRQHandler+0xb94>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f022 0208 	bic.w	r2, r2, #8
 8006e94:	601a      	str	r2, [r3, #0]
 8006e96:	e007      	b.n	8006ea8 <HAL_DMA_IRQHandler+0xba4>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f022 0204 	bic.w	r2, r2, #4
 8006ea6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f000 8165 	beq.w	800717c <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006eba:	e15f      	b.n	800717c <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ec0:	f003 031f 	and.w	r3, r3, #31
 8006ec4:	2202      	movs	r2, #2
 8006ec6:	409a      	lsls	r2, r3
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	4013      	ands	r3, r2
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f000 80c5 	beq.w	800705c <HAL_DMA_IRQHandler+0xd58>
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	f003 0302 	and.w	r3, r3, #2
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 80bf 	beq.w	800705c <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ee2:	f003 031f 	and.w	r3, r3, #31
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	409a      	lsls	r2, r3
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d018      	beq.n	8006f2a <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d109      	bne.n	8006f16 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	f000 813a 	beq.w	8007180 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f14:	e134      	b.n	8007180 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f000 8130 	beq.w	8007180 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f28:	e12a      	b.n	8007180 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	f003 0320 	and.w	r3, r3, #32
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f040 8089 	bne.w	8007048 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a2b      	ldr	r2, [pc, #172]	; (8006fe8 <HAL_DMA_IRQHandler+0xce4>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d04a      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0xcd2>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a29      	ldr	r2, [pc, #164]	; (8006fec <HAL_DMA_IRQHandler+0xce8>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d045      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0xcd2>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a28      	ldr	r2, [pc, #160]	; (8006ff0 <HAL_DMA_IRQHandler+0xcec>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d040      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0xcd2>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a26      	ldr	r2, [pc, #152]	; (8006ff4 <HAL_DMA_IRQHandler+0xcf0>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d03b      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0xcd2>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a25      	ldr	r2, [pc, #148]	; (8006ff8 <HAL_DMA_IRQHandler+0xcf4>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d036      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0xcd2>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a23      	ldr	r2, [pc, #140]	; (8006ffc <HAL_DMA_IRQHandler+0xcf8>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d031      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0xcd2>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a22      	ldr	r2, [pc, #136]	; (8007000 <HAL_DMA_IRQHandler+0xcfc>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d02c      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0xcd2>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a20      	ldr	r2, [pc, #128]	; (8007004 <HAL_DMA_IRQHandler+0xd00>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d027      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0xcd2>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a1f      	ldr	r2, [pc, #124]	; (8007008 <HAL_DMA_IRQHandler+0xd04>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d022      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0xcd2>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a1d      	ldr	r2, [pc, #116]	; (800700c <HAL_DMA_IRQHandler+0xd08>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d01d      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0xcd2>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a1c      	ldr	r2, [pc, #112]	; (8007010 <HAL_DMA_IRQHandler+0xd0c>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d018      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0xcd2>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a1a      	ldr	r2, [pc, #104]	; (8007014 <HAL_DMA_IRQHandler+0xd10>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d013      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0xcd2>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a19      	ldr	r2, [pc, #100]	; (8007018 <HAL_DMA_IRQHandler+0xd14>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d00e      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0xcd2>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a17      	ldr	r2, [pc, #92]	; (800701c <HAL_DMA_IRQHandler+0xd18>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d009      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0xcd2>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a16      	ldr	r2, [pc, #88]	; (8007020 <HAL_DMA_IRQHandler+0xd1c>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d004      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0xcd2>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a14      	ldr	r2, [pc, #80]	; (8007024 <HAL_DMA_IRQHandler+0xd20>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d128      	bne.n	8007028 <HAL_DMA_IRQHandler+0xd24>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f022 0214 	bic.w	r2, r2, #20
 8006fe4:	601a      	str	r2, [r3, #0]
 8006fe6:	e027      	b.n	8007038 <HAL_DMA_IRQHandler+0xd34>
 8006fe8:	40020010 	.word	0x40020010
 8006fec:	40020028 	.word	0x40020028
 8006ff0:	40020040 	.word	0x40020040
 8006ff4:	40020058 	.word	0x40020058
 8006ff8:	40020070 	.word	0x40020070
 8006ffc:	40020088 	.word	0x40020088
 8007000:	400200a0 	.word	0x400200a0
 8007004:	400200b8 	.word	0x400200b8
 8007008:	40020410 	.word	0x40020410
 800700c:	40020428 	.word	0x40020428
 8007010:	40020440 	.word	0x40020440
 8007014:	40020458 	.word	0x40020458
 8007018:	40020470 	.word	0x40020470
 800701c:	40020488 	.word	0x40020488
 8007020:	400204a0 	.word	0x400204a0
 8007024:	400204b8 	.word	0x400204b8
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f022 020a 	bic.w	r2, r2, #10
 8007036:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800704c:	2b00      	cmp	r3, #0
 800704e:	f000 8097 	beq.w	8007180 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800705a:	e091      	b.n	8007180 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007060:	f003 031f 	and.w	r3, r3, #31
 8007064:	2208      	movs	r2, #8
 8007066:	409a      	lsls	r2, r3
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	4013      	ands	r3, r2
 800706c:	2b00      	cmp	r3, #0
 800706e:	f000 8088 	beq.w	8007182 <HAL_DMA_IRQHandler+0xe7e>
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	f003 0308 	and.w	r3, r3, #8
 8007078:	2b00      	cmp	r3, #0
 800707a:	f000 8082 	beq.w	8007182 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a41      	ldr	r2, [pc, #260]	; (8007188 <HAL_DMA_IRQHandler+0xe84>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d04a      	beq.n	800711e <HAL_DMA_IRQHandler+0xe1a>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a3f      	ldr	r2, [pc, #252]	; (800718c <HAL_DMA_IRQHandler+0xe88>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d045      	beq.n	800711e <HAL_DMA_IRQHandler+0xe1a>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a3e      	ldr	r2, [pc, #248]	; (8007190 <HAL_DMA_IRQHandler+0xe8c>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d040      	beq.n	800711e <HAL_DMA_IRQHandler+0xe1a>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a3c      	ldr	r2, [pc, #240]	; (8007194 <HAL_DMA_IRQHandler+0xe90>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d03b      	beq.n	800711e <HAL_DMA_IRQHandler+0xe1a>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a3b      	ldr	r2, [pc, #236]	; (8007198 <HAL_DMA_IRQHandler+0xe94>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d036      	beq.n	800711e <HAL_DMA_IRQHandler+0xe1a>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a39      	ldr	r2, [pc, #228]	; (800719c <HAL_DMA_IRQHandler+0xe98>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d031      	beq.n	800711e <HAL_DMA_IRQHandler+0xe1a>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a38      	ldr	r2, [pc, #224]	; (80071a0 <HAL_DMA_IRQHandler+0xe9c>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d02c      	beq.n	800711e <HAL_DMA_IRQHandler+0xe1a>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a36      	ldr	r2, [pc, #216]	; (80071a4 <HAL_DMA_IRQHandler+0xea0>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d027      	beq.n	800711e <HAL_DMA_IRQHandler+0xe1a>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a35      	ldr	r2, [pc, #212]	; (80071a8 <HAL_DMA_IRQHandler+0xea4>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d022      	beq.n	800711e <HAL_DMA_IRQHandler+0xe1a>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a33      	ldr	r2, [pc, #204]	; (80071ac <HAL_DMA_IRQHandler+0xea8>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d01d      	beq.n	800711e <HAL_DMA_IRQHandler+0xe1a>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a32      	ldr	r2, [pc, #200]	; (80071b0 <HAL_DMA_IRQHandler+0xeac>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d018      	beq.n	800711e <HAL_DMA_IRQHandler+0xe1a>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a30      	ldr	r2, [pc, #192]	; (80071b4 <HAL_DMA_IRQHandler+0xeb0>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d013      	beq.n	800711e <HAL_DMA_IRQHandler+0xe1a>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a2f      	ldr	r2, [pc, #188]	; (80071b8 <HAL_DMA_IRQHandler+0xeb4>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d00e      	beq.n	800711e <HAL_DMA_IRQHandler+0xe1a>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a2d      	ldr	r2, [pc, #180]	; (80071bc <HAL_DMA_IRQHandler+0xeb8>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d009      	beq.n	800711e <HAL_DMA_IRQHandler+0xe1a>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a2c      	ldr	r2, [pc, #176]	; (80071c0 <HAL_DMA_IRQHandler+0xebc>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d004      	beq.n	800711e <HAL_DMA_IRQHandler+0xe1a>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a2a      	ldr	r2, [pc, #168]	; (80071c4 <HAL_DMA_IRQHandler+0xec0>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d108      	bne.n	8007130 <HAL_DMA_IRQHandler+0xe2c>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f022 021c 	bic.w	r2, r2, #28
 800712c:	601a      	str	r2, [r3, #0]
 800712e:	e007      	b.n	8007140 <HAL_DMA_IRQHandler+0xe3c>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f022 020e 	bic.w	r2, r2, #14
 800713e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007144:	f003 031f 	and.w	r3, r3, #31
 8007148:	2201      	movs	r2, #1
 800714a:	409a      	lsls	r2, r3
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2201      	movs	r2, #1
 800715a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800716a:	2b00      	cmp	r3, #0
 800716c:	d009      	beq.n	8007182 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	4798      	blx	r3
 8007176:	e004      	b.n	8007182 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8007178:	bf00      	nop
 800717a:	e002      	b.n	8007182 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800717c:	bf00      	nop
 800717e:	e000      	b.n	8007182 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007180:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007182:	3728      	adds	r7, #40	; 0x28
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	40020010 	.word	0x40020010
 800718c:	40020028 	.word	0x40020028
 8007190:	40020040 	.word	0x40020040
 8007194:	40020058 	.word	0x40020058
 8007198:	40020070 	.word	0x40020070
 800719c:	40020088 	.word	0x40020088
 80071a0:	400200a0 	.word	0x400200a0
 80071a4:	400200b8 	.word	0x400200b8
 80071a8:	40020410 	.word	0x40020410
 80071ac:	40020428 	.word	0x40020428
 80071b0:	40020440 	.word	0x40020440
 80071b4:	40020458 	.word	0x40020458
 80071b8:	40020470 	.word	0x40020470
 80071bc:	40020488 	.word	0x40020488
 80071c0:	400204a0 	.word	0x400204a0
 80071c4:	400204b8 	.word	0x400204b8

080071c8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b087      	sub	sp, #28
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
 80071d4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071da:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071e0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a7f      	ldr	r2, [pc, #508]	; (80073e4 <DMA_SetConfig+0x21c>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d072      	beq.n	80072d2 <DMA_SetConfig+0x10a>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a7d      	ldr	r2, [pc, #500]	; (80073e8 <DMA_SetConfig+0x220>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d06d      	beq.n	80072d2 <DMA_SetConfig+0x10a>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a7c      	ldr	r2, [pc, #496]	; (80073ec <DMA_SetConfig+0x224>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d068      	beq.n	80072d2 <DMA_SetConfig+0x10a>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a7a      	ldr	r2, [pc, #488]	; (80073f0 <DMA_SetConfig+0x228>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d063      	beq.n	80072d2 <DMA_SetConfig+0x10a>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a79      	ldr	r2, [pc, #484]	; (80073f4 <DMA_SetConfig+0x22c>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d05e      	beq.n	80072d2 <DMA_SetConfig+0x10a>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a77      	ldr	r2, [pc, #476]	; (80073f8 <DMA_SetConfig+0x230>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d059      	beq.n	80072d2 <DMA_SetConfig+0x10a>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a76      	ldr	r2, [pc, #472]	; (80073fc <DMA_SetConfig+0x234>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d054      	beq.n	80072d2 <DMA_SetConfig+0x10a>
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a74      	ldr	r2, [pc, #464]	; (8007400 <DMA_SetConfig+0x238>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d04f      	beq.n	80072d2 <DMA_SetConfig+0x10a>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a73      	ldr	r2, [pc, #460]	; (8007404 <DMA_SetConfig+0x23c>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d04a      	beq.n	80072d2 <DMA_SetConfig+0x10a>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a71      	ldr	r2, [pc, #452]	; (8007408 <DMA_SetConfig+0x240>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d045      	beq.n	80072d2 <DMA_SetConfig+0x10a>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a70      	ldr	r2, [pc, #448]	; (800740c <DMA_SetConfig+0x244>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d040      	beq.n	80072d2 <DMA_SetConfig+0x10a>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a6e      	ldr	r2, [pc, #440]	; (8007410 <DMA_SetConfig+0x248>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d03b      	beq.n	80072d2 <DMA_SetConfig+0x10a>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a6d      	ldr	r2, [pc, #436]	; (8007414 <DMA_SetConfig+0x24c>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d036      	beq.n	80072d2 <DMA_SetConfig+0x10a>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a6b      	ldr	r2, [pc, #428]	; (8007418 <DMA_SetConfig+0x250>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d031      	beq.n	80072d2 <DMA_SetConfig+0x10a>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a6a      	ldr	r2, [pc, #424]	; (800741c <DMA_SetConfig+0x254>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d02c      	beq.n	80072d2 <DMA_SetConfig+0x10a>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a68      	ldr	r2, [pc, #416]	; (8007420 <DMA_SetConfig+0x258>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d027      	beq.n	80072d2 <DMA_SetConfig+0x10a>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a67      	ldr	r2, [pc, #412]	; (8007424 <DMA_SetConfig+0x25c>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d022      	beq.n	80072d2 <DMA_SetConfig+0x10a>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a65      	ldr	r2, [pc, #404]	; (8007428 <DMA_SetConfig+0x260>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d01d      	beq.n	80072d2 <DMA_SetConfig+0x10a>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a64      	ldr	r2, [pc, #400]	; (800742c <DMA_SetConfig+0x264>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d018      	beq.n	80072d2 <DMA_SetConfig+0x10a>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a62      	ldr	r2, [pc, #392]	; (8007430 <DMA_SetConfig+0x268>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d013      	beq.n	80072d2 <DMA_SetConfig+0x10a>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a61      	ldr	r2, [pc, #388]	; (8007434 <DMA_SetConfig+0x26c>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d00e      	beq.n	80072d2 <DMA_SetConfig+0x10a>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a5f      	ldr	r2, [pc, #380]	; (8007438 <DMA_SetConfig+0x270>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d009      	beq.n	80072d2 <DMA_SetConfig+0x10a>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a5e      	ldr	r2, [pc, #376]	; (800743c <DMA_SetConfig+0x274>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d004      	beq.n	80072d2 <DMA_SetConfig+0x10a>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a5c      	ldr	r2, [pc, #368]	; (8007440 <DMA_SetConfig+0x278>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d101      	bne.n	80072d6 <DMA_SetConfig+0x10e>
 80072d2:	2301      	movs	r3, #1
 80072d4:	e000      	b.n	80072d8 <DMA_SetConfig+0x110>
 80072d6:	2300      	movs	r3, #0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00d      	beq.n	80072f8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80072e4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d004      	beq.n	80072f8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80072f6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a39      	ldr	r2, [pc, #228]	; (80073e4 <DMA_SetConfig+0x21c>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d04a      	beq.n	8007398 <DMA_SetConfig+0x1d0>
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a38      	ldr	r2, [pc, #224]	; (80073e8 <DMA_SetConfig+0x220>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d045      	beq.n	8007398 <DMA_SetConfig+0x1d0>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a36      	ldr	r2, [pc, #216]	; (80073ec <DMA_SetConfig+0x224>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d040      	beq.n	8007398 <DMA_SetConfig+0x1d0>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a35      	ldr	r2, [pc, #212]	; (80073f0 <DMA_SetConfig+0x228>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d03b      	beq.n	8007398 <DMA_SetConfig+0x1d0>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a33      	ldr	r2, [pc, #204]	; (80073f4 <DMA_SetConfig+0x22c>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d036      	beq.n	8007398 <DMA_SetConfig+0x1d0>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a32      	ldr	r2, [pc, #200]	; (80073f8 <DMA_SetConfig+0x230>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d031      	beq.n	8007398 <DMA_SetConfig+0x1d0>
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a30      	ldr	r2, [pc, #192]	; (80073fc <DMA_SetConfig+0x234>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d02c      	beq.n	8007398 <DMA_SetConfig+0x1d0>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a2f      	ldr	r2, [pc, #188]	; (8007400 <DMA_SetConfig+0x238>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d027      	beq.n	8007398 <DMA_SetConfig+0x1d0>
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a2d      	ldr	r2, [pc, #180]	; (8007404 <DMA_SetConfig+0x23c>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d022      	beq.n	8007398 <DMA_SetConfig+0x1d0>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a2c      	ldr	r2, [pc, #176]	; (8007408 <DMA_SetConfig+0x240>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d01d      	beq.n	8007398 <DMA_SetConfig+0x1d0>
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a2a      	ldr	r2, [pc, #168]	; (800740c <DMA_SetConfig+0x244>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d018      	beq.n	8007398 <DMA_SetConfig+0x1d0>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a29      	ldr	r2, [pc, #164]	; (8007410 <DMA_SetConfig+0x248>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d013      	beq.n	8007398 <DMA_SetConfig+0x1d0>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a27      	ldr	r2, [pc, #156]	; (8007414 <DMA_SetConfig+0x24c>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d00e      	beq.n	8007398 <DMA_SetConfig+0x1d0>
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a26      	ldr	r2, [pc, #152]	; (8007418 <DMA_SetConfig+0x250>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d009      	beq.n	8007398 <DMA_SetConfig+0x1d0>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a24      	ldr	r2, [pc, #144]	; (800741c <DMA_SetConfig+0x254>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d004      	beq.n	8007398 <DMA_SetConfig+0x1d0>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a23      	ldr	r2, [pc, #140]	; (8007420 <DMA_SetConfig+0x258>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d101      	bne.n	800739c <DMA_SetConfig+0x1d4>
 8007398:	2301      	movs	r3, #1
 800739a:	e000      	b.n	800739e <DMA_SetConfig+0x1d6>
 800739c:	2300      	movs	r3, #0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d059      	beq.n	8007456 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073a6:	f003 031f 	and.w	r3, r3, #31
 80073aa:	223f      	movs	r2, #63	; 0x3f
 80073ac:	409a      	lsls	r2, r3
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80073c0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	683a      	ldr	r2, [r7, #0]
 80073c8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	2b40      	cmp	r3, #64	; 0x40
 80073d0:	d138      	bne.n	8007444 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68ba      	ldr	r2, [r7, #8]
 80073e0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80073e2:	e0ae      	b.n	8007542 <DMA_SetConfig+0x37a>
 80073e4:	40020010 	.word	0x40020010
 80073e8:	40020028 	.word	0x40020028
 80073ec:	40020040 	.word	0x40020040
 80073f0:	40020058 	.word	0x40020058
 80073f4:	40020070 	.word	0x40020070
 80073f8:	40020088 	.word	0x40020088
 80073fc:	400200a0 	.word	0x400200a0
 8007400:	400200b8 	.word	0x400200b8
 8007404:	40020410 	.word	0x40020410
 8007408:	40020428 	.word	0x40020428
 800740c:	40020440 	.word	0x40020440
 8007410:	40020458 	.word	0x40020458
 8007414:	40020470 	.word	0x40020470
 8007418:	40020488 	.word	0x40020488
 800741c:	400204a0 	.word	0x400204a0
 8007420:	400204b8 	.word	0x400204b8
 8007424:	58025408 	.word	0x58025408
 8007428:	5802541c 	.word	0x5802541c
 800742c:	58025430 	.word	0x58025430
 8007430:	58025444 	.word	0x58025444
 8007434:	58025458 	.word	0x58025458
 8007438:	5802546c 	.word	0x5802546c
 800743c:	58025480 	.word	0x58025480
 8007440:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	60da      	str	r2, [r3, #12]
}
 8007454:	e075      	b.n	8007542 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a3d      	ldr	r2, [pc, #244]	; (8007550 <DMA_SetConfig+0x388>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d04a      	beq.n	80074f6 <DMA_SetConfig+0x32e>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a3b      	ldr	r2, [pc, #236]	; (8007554 <DMA_SetConfig+0x38c>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d045      	beq.n	80074f6 <DMA_SetConfig+0x32e>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a3a      	ldr	r2, [pc, #232]	; (8007558 <DMA_SetConfig+0x390>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d040      	beq.n	80074f6 <DMA_SetConfig+0x32e>
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a38      	ldr	r2, [pc, #224]	; (800755c <DMA_SetConfig+0x394>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d03b      	beq.n	80074f6 <DMA_SetConfig+0x32e>
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a37      	ldr	r2, [pc, #220]	; (8007560 <DMA_SetConfig+0x398>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d036      	beq.n	80074f6 <DMA_SetConfig+0x32e>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a35      	ldr	r2, [pc, #212]	; (8007564 <DMA_SetConfig+0x39c>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d031      	beq.n	80074f6 <DMA_SetConfig+0x32e>
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a34      	ldr	r2, [pc, #208]	; (8007568 <DMA_SetConfig+0x3a0>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d02c      	beq.n	80074f6 <DMA_SetConfig+0x32e>
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a32      	ldr	r2, [pc, #200]	; (800756c <DMA_SetConfig+0x3a4>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d027      	beq.n	80074f6 <DMA_SetConfig+0x32e>
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a31      	ldr	r2, [pc, #196]	; (8007570 <DMA_SetConfig+0x3a8>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d022      	beq.n	80074f6 <DMA_SetConfig+0x32e>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a2f      	ldr	r2, [pc, #188]	; (8007574 <DMA_SetConfig+0x3ac>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d01d      	beq.n	80074f6 <DMA_SetConfig+0x32e>
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a2e      	ldr	r2, [pc, #184]	; (8007578 <DMA_SetConfig+0x3b0>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d018      	beq.n	80074f6 <DMA_SetConfig+0x32e>
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a2c      	ldr	r2, [pc, #176]	; (800757c <DMA_SetConfig+0x3b4>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d013      	beq.n	80074f6 <DMA_SetConfig+0x32e>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a2b      	ldr	r2, [pc, #172]	; (8007580 <DMA_SetConfig+0x3b8>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d00e      	beq.n	80074f6 <DMA_SetConfig+0x32e>
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a29      	ldr	r2, [pc, #164]	; (8007584 <DMA_SetConfig+0x3bc>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d009      	beq.n	80074f6 <DMA_SetConfig+0x32e>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a28      	ldr	r2, [pc, #160]	; (8007588 <DMA_SetConfig+0x3c0>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d004      	beq.n	80074f6 <DMA_SetConfig+0x32e>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a26      	ldr	r2, [pc, #152]	; (800758c <DMA_SetConfig+0x3c4>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d101      	bne.n	80074fa <DMA_SetConfig+0x332>
 80074f6:	2301      	movs	r3, #1
 80074f8:	e000      	b.n	80074fc <DMA_SetConfig+0x334>
 80074fa:	2300      	movs	r3, #0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d020      	beq.n	8007542 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007504:	f003 031f 	and.w	r3, r3, #31
 8007508:	2201      	movs	r2, #1
 800750a:	409a      	lsls	r2, r3
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	683a      	ldr	r2, [r7, #0]
 8007516:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	2b40      	cmp	r3, #64	; 0x40
 800751e:	d108      	bne.n	8007532 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	60da      	str	r2, [r3, #12]
}
 8007530:	e007      	b.n	8007542 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	60da      	str	r2, [r3, #12]
}
 8007542:	bf00      	nop
 8007544:	371c      	adds	r7, #28
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	48022c08 	.word	0x48022c08
 8007554:	48022c1c 	.word	0x48022c1c
 8007558:	48022c30 	.word	0x48022c30
 800755c:	48022c44 	.word	0x48022c44
 8007560:	48022c58 	.word	0x48022c58
 8007564:	48022c6c 	.word	0x48022c6c
 8007568:	48022c80 	.word	0x48022c80
 800756c:	48022c94 	.word	0x48022c94
 8007570:	58025408 	.word	0x58025408
 8007574:	5802541c 	.word	0x5802541c
 8007578:	58025430 	.word	0x58025430
 800757c:	58025444 	.word	0x58025444
 8007580:	58025458 	.word	0x58025458
 8007584:	5802546c 	.word	0x5802546c
 8007588:	58025480 	.word	0x58025480
 800758c:	58025494 	.word	0x58025494

08007590 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a42      	ldr	r2, [pc, #264]	; (80076a8 <DMA_CalcBaseAndBitshift+0x118>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d04a      	beq.n	8007638 <DMA_CalcBaseAndBitshift+0xa8>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a41      	ldr	r2, [pc, #260]	; (80076ac <DMA_CalcBaseAndBitshift+0x11c>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d045      	beq.n	8007638 <DMA_CalcBaseAndBitshift+0xa8>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a3f      	ldr	r2, [pc, #252]	; (80076b0 <DMA_CalcBaseAndBitshift+0x120>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d040      	beq.n	8007638 <DMA_CalcBaseAndBitshift+0xa8>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a3e      	ldr	r2, [pc, #248]	; (80076b4 <DMA_CalcBaseAndBitshift+0x124>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d03b      	beq.n	8007638 <DMA_CalcBaseAndBitshift+0xa8>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a3c      	ldr	r2, [pc, #240]	; (80076b8 <DMA_CalcBaseAndBitshift+0x128>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d036      	beq.n	8007638 <DMA_CalcBaseAndBitshift+0xa8>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a3b      	ldr	r2, [pc, #236]	; (80076bc <DMA_CalcBaseAndBitshift+0x12c>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d031      	beq.n	8007638 <DMA_CalcBaseAndBitshift+0xa8>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a39      	ldr	r2, [pc, #228]	; (80076c0 <DMA_CalcBaseAndBitshift+0x130>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d02c      	beq.n	8007638 <DMA_CalcBaseAndBitshift+0xa8>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a38      	ldr	r2, [pc, #224]	; (80076c4 <DMA_CalcBaseAndBitshift+0x134>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d027      	beq.n	8007638 <DMA_CalcBaseAndBitshift+0xa8>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a36      	ldr	r2, [pc, #216]	; (80076c8 <DMA_CalcBaseAndBitshift+0x138>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d022      	beq.n	8007638 <DMA_CalcBaseAndBitshift+0xa8>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a35      	ldr	r2, [pc, #212]	; (80076cc <DMA_CalcBaseAndBitshift+0x13c>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d01d      	beq.n	8007638 <DMA_CalcBaseAndBitshift+0xa8>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a33      	ldr	r2, [pc, #204]	; (80076d0 <DMA_CalcBaseAndBitshift+0x140>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d018      	beq.n	8007638 <DMA_CalcBaseAndBitshift+0xa8>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a32      	ldr	r2, [pc, #200]	; (80076d4 <DMA_CalcBaseAndBitshift+0x144>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d013      	beq.n	8007638 <DMA_CalcBaseAndBitshift+0xa8>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a30      	ldr	r2, [pc, #192]	; (80076d8 <DMA_CalcBaseAndBitshift+0x148>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d00e      	beq.n	8007638 <DMA_CalcBaseAndBitshift+0xa8>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a2f      	ldr	r2, [pc, #188]	; (80076dc <DMA_CalcBaseAndBitshift+0x14c>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d009      	beq.n	8007638 <DMA_CalcBaseAndBitshift+0xa8>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a2d      	ldr	r2, [pc, #180]	; (80076e0 <DMA_CalcBaseAndBitshift+0x150>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d004      	beq.n	8007638 <DMA_CalcBaseAndBitshift+0xa8>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a2c      	ldr	r2, [pc, #176]	; (80076e4 <DMA_CalcBaseAndBitshift+0x154>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d101      	bne.n	800763c <DMA_CalcBaseAndBitshift+0xac>
 8007638:	2301      	movs	r3, #1
 800763a:	e000      	b.n	800763e <DMA_CalcBaseAndBitshift+0xae>
 800763c:	2300      	movs	r3, #0
 800763e:	2b00      	cmp	r3, #0
 8007640:	d024      	beq.n	800768c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	b2db      	uxtb	r3, r3
 8007648:	3b10      	subs	r3, #16
 800764a:	4a27      	ldr	r2, [pc, #156]	; (80076e8 <DMA_CalcBaseAndBitshift+0x158>)
 800764c:	fba2 2303 	umull	r2, r3, r2, r3
 8007650:	091b      	lsrs	r3, r3, #4
 8007652:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f003 0307 	and.w	r3, r3, #7
 800765a:	4a24      	ldr	r2, [pc, #144]	; (80076ec <DMA_CalcBaseAndBitshift+0x15c>)
 800765c:	5cd3      	ldrb	r3, [r2, r3]
 800765e:	461a      	mov	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2b03      	cmp	r3, #3
 8007668:	d908      	bls.n	800767c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	461a      	mov	r2, r3
 8007670:	4b1f      	ldr	r3, [pc, #124]	; (80076f0 <DMA_CalcBaseAndBitshift+0x160>)
 8007672:	4013      	ands	r3, r2
 8007674:	1d1a      	adds	r2, r3, #4
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	659a      	str	r2, [r3, #88]	; 0x58
 800767a:	e00d      	b.n	8007698 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	461a      	mov	r2, r3
 8007682:	4b1b      	ldr	r3, [pc, #108]	; (80076f0 <DMA_CalcBaseAndBitshift+0x160>)
 8007684:	4013      	ands	r3, r2
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	6593      	str	r3, [r2, #88]	; 0x58
 800768a:	e005      	b.n	8007698 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800769c:	4618      	mov	r0, r3
 800769e:	3714      	adds	r7, #20
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr
 80076a8:	40020010 	.word	0x40020010
 80076ac:	40020028 	.word	0x40020028
 80076b0:	40020040 	.word	0x40020040
 80076b4:	40020058 	.word	0x40020058
 80076b8:	40020070 	.word	0x40020070
 80076bc:	40020088 	.word	0x40020088
 80076c0:	400200a0 	.word	0x400200a0
 80076c4:	400200b8 	.word	0x400200b8
 80076c8:	40020410 	.word	0x40020410
 80076cc:	40020428 	.word	0x40020428
 80076d0:	40020440 	.word	0x40020440
 80076d4:	40020458 	.word	0x40020458
 80076d8:	40020470 	.word	0x40020470
 80076dc:	40020488 	.word	0x40020488
 80076e0:	400204a0 	.word	0x400204a0
 80076e4:	400204b8 	.word	0x400204b8
 80076e8:	aaaaaaab 	.word	0xaaaaaaab
 80076ec:	080104b0 	.word	0x080104b0
 80076f0:	fffffc00 	.word	0xfffffc00

080076f4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076fc:	2300      	movs	r3, #0
 80076fe:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	699b      	ldr	r3, [r3, #24]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d120      	bne.n	800774a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800770c:	2b03      	cmp	r3, #3
 800770e:	d858      	bhi.n	80077c2 <DMA_CheckFifoParam+0xce>
 8007710:	a201      	add	r2, pc, #4	; (adr r2, 8007718 <DMA_CheckFifoParam+0x24>)
 8007712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007716:	bf00      	nop
 8007718:	08007729 	.word	0x08007729
 800771c:	0800773b 	.word	0x0800773b
 8007720:	08007729 	.word	0x08007729
 8007724:	080077c3 	.word	0x080077c3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007730:	2b00      	cmp	r3, #0
 8007732:	d048      	beq.n	80077c6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007738:	e045      	b.n	80077c6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007742:	d142      	bne.n	80077ca <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007748:	e03f      	b.n	80077ca <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	699b      	ldr	r3, [r3, #24]
 800774e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007752:	d123      	bne.n	800779c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007758:	2b03      	cmp	r3, #3
 800775a:	d838      	bhi.n	80077ce <DMA_CheckFifoParam+0xda>
 800775c:	a201      	add	r2, pc, #4	; (adr r2, 8007764 <DMA_CheckFifoParam+0x70>)
 800775e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007762:	bf00      	nop
 8007764:	08007775 	.word	0x08007775
 8007768:	0800777b 	.word	0x0800777b
 800776c:	08007775 	.word	0x08007775
 8007770:	0800778d 	.word	0x0800778d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	73fb      	strb	r3, [r7, #15]
        break;
 8007778:	e030      	b.n	80077dc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007782:	2b00      	cmp	r3, #0
 8007784:	d025      	beq.n	80077d2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800778a:	e022      	b.n	80077d2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007790:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007794:	d11f      	bne.n	80077d6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800779a:	e01c      	b.n	80077d6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	d902      	bls.n	80077aa <DMA_CheckFifoParam+0xb6>
 80077a4:	2b03      	cmp	r3, #3
 80077a6:	d003      	beq.n	80077b0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80077a8:	e018      	b.n	80077dc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	73fb      	strb	r3, [r7, #15]
        break;
 80077ae:	e015      	b.n	80077dc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00e      	beq.n	80077da <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	73fb      	strb	r3, [r7, #15]
    break;
 80077c0:	e00b      	b.n	80077da <DMA_CheckFifoParam+0xe6>
        break;
 80077c2:	bf00      	nop
 80077c4:	e00a      	b.n	80077dc <DMA_CheckFifoParam+0xe8>
        break;
 80077c6:	bf00      	nop
 80077c8:	e008      	b.n	80077dc <DMA_CheckFifoParam+0xe8>
        break;
 80077ca:	bf00      	nop
 80077cc:	e006      	b.n	80077dc <DMA_CheckFifoParam+0xe8>
        break;
 80077ce:	bf00      	nop
 80077d0:	e004      	b.n	80077dc <DMA_CheckFifoParam+0xe8>
        break;
 80077d2:	bf00      	nop
 80077d4:	e002      	b.n	80077dc <DMA_CheckFifoParam+0xe8>
        break;
 80077d6:	bf00      	nop
 80077d8:	e000      	b.n	80077dc <DMA_CheckFifoParam+0xe8>
    break;
 80077da:	bf00      	nop
    }
  }

  return status;
 80077dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3714      	adds	r7, #20
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop

080077ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b085      	sub	sp, #20
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a38      	ldr	r2, [pc, #224]	; (80078e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d022      	beq.n	800784a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a36      	ldr	r2, [pc, #216]	; (80078e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d01d      	beq.n	800784a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a35      	ldr	r2, [pc, #212]	; (80078e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d018      	beq.n	800784a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a33      	ldr	r2, [pc, #204]	; (80078ec <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d013      	beq.n	800784a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a32      	ldr	r2, [pc, #200]	; (80078f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d00e      	beq.n	800784a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a30      	ldr	r2, [pc, #192]	; (80078f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d009      	beq.n	800784a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a2f      	ldr	r2, [pc, #188]	; (80078f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d004      	beq.n	800784a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a2d      	ldr	r2, [pc, #180]	; (80078fc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d101      	bne.n	800784e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800784a:	2301      	movs	r3, #1
 800784c:	e000      	b.n	8007850 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800784e:	2300      	movs	r3, #0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d01a      	beq.n	800788a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	b2db      	uxtb	r3, r3
 800785a:	3b08      	subs	r3, #8
 800785c:	4a28      	ldr	r2, [pc, #160]	; (8007900 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800785e:	fba2 2303 	umull	r2, r3, r2, r3
 8007862:	091b      	lsrs	r3, r3, #4
 8007864:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	4b26      	ldr	r3, [pc, #152]	; (8007904 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800786a:	4413      	add	r3, r2
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	461a      	mov	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	4a24      	ldr	r2, [pc, #144]	; (8007908 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007878:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f003 031f 	and.w	r3, r3, #31
 8007880:	2201      	movs	r2, #1
 8007882:	409a      	lsls	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007888:	e024      	b.n	80078d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	b2db      	uxtb	r3, r3
 8007890:	3b10      	subs	r3, #16
 8007892:	4a1e      	ldr	r2, [pc, #120]	; (800790c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007894:	fba2 2303 	umull	r2, r3, r2, r3
 8007898:	091b      	lsrs	r3, r3, #4
 800789a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	4a1c      	ldr	r2, [pc, #112]	; (8007910 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d806      	bhi.n	80078b2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	4a1b      	ldr	r2, [pc, #108]	; (8007914 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d902      	bls.n	80078b2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	3308      	adds	r3, #8
 80078b0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	4b18      	ldr	r3, [pc, #96]	; (8007918 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80078b6:	4413      	add	r3, r2
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	461a      	mov	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a16      	ldr	r2, [pc, #88]	; (800791c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80078c4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f003 031f 	and.w	r3, r3, #31
 80078cc:	2201      	movs	r2, #1
 80078ce:	409a      	lsls	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80078d4:	bf00      	nop
 80078d6:	3714      	adds	r7, #20
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr
 80078e0:	58025408 	.word	0x58025408
 80078e4:	5802541c 	.word	0x5802541c
 80078e8:	58025430 	.word	0x58025430
 80078ec:	58025444 	.word	0x58025444
 80078f0:	58025458 	.word	0x58025458
 80078f4:	5802546c 	.word	0x5802546c
 80078f8:	58025480 	.word	0x58025480
 80078fc:	58025494 	.word	0x58025494
 8007900:	cccccccd 	.word	0xcccccccd
 8007904:	16009600 	.word	0x16009600
 8007908:	58025880 	.word	0x58025880
 800790c:	aaaaaaab 	.word	0xaaaaaaab
 8007910:	400204b8 	.word	0x400204b8
 8007914:	4002040f 	.word	0x4002040f
 8007918:	10008200 	.word	0x10008200
 800791c:	40020880 	.word	0x40020880

08007920 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007920:	b480      	push	{r7}
 8007922:	b085      	sub	sp, #20
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	b2db      	uxtb	r3, r3
 800792e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d04a      	beq.n	80079cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2b08      	cmp	r3, #8
 800793a:	d847      	bhi.n	80079cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a25      	ldr	r2, [pc, #148]	; (80079d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d022      	beq.n	800798c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a24      	ldr	r2, [pc, #144]	; (80079dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d01d      	beq.n	800798c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a22      	ldr	r2, [pc, #136]	; (80079e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d018      	beq.n	800798c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a21      	ldr	r2, [pc, #132]	; (80079e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d013      	beq.n	800798c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a1f      	ldr	r2, [pc, #124]	; (80079e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d00e      	beq.n	800798c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a1e      	ldr	r2, [pc, #120]	; (80079ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d009      	beq.n	800798c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a1c      	ldr	r2, [pc, #112]	; (80079f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d004      	beq.n	800798c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a1b      	ldr	r2, [pc, #108]	; (80079f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d101      	bne.n	8007990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800798c:	2301      	movs	r3, #1
 800798e:	e000      	b.n	8007992 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007990:	2300      	movs	r3, #0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00a      	beq.n	80079ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	4b17      	ldr	r3, [pc, #92]	; (80079f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800799a:	4413      	add	r3, r2
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	461a      	mov	r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a15      	ldr	r2, [pc, #84]	; (80079fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80079a8:	671a      	str	r2, [r3, #112]	; 0x70
 80079aa:	e009      	b.n	80079c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	4b14      	ldr	r3, [pc, #80]	; (8007a00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80079b0:	4413      	add	r3, r2
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	461a      	mov	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a11      	ldr	r2, [pc, #68]	; (8007a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80079be:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	3b01      	subs	r3, #1
 80079c4:	2201      	movs	r2, #1
 80079c6:	409a      	lsls	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80079cc:	bf00      	nop
 80079ce:	3714      	adds	r7, #20
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr
 80079d8:	58025408 	.word	0x58025408
 80079dc:	5802541c 	.word	0x5802541c
 80079e0:	58025430 	.word	0x58025430
 80079e4:	58025444 	.word	0x58025444
 80079e8:	58025458 	.word	0x58025458
 80079ec:	5802546c 	.word	0x5802546c
 80079f0:	58025480 	.word	0x58025480
 80079f4:	58025494 	.word	0x58025494
 80079f8:	1600963f 	.word	0x1600963f
 80079fc:	58025940 	.word	0x58025940
 8007a00:	1000823f 	.word	0x1000823f
 8007a04:	40020940 	.word	0x40020940

08007a08 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d101      	bne.n	8007a1a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	e04f      	b.n	8007aba <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d106      	bne.n	8007a34 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f7f8 ff7c 	bl	800092c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2202      	movs	r2, #2
 8007a38:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	4b20      	ldr	r3, [pc, #128]	; (8007ac4 <HAL_DMA2D_Init+0xbc>)
 8007a44:	4013      	ands	r3, r2
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	6851      	ldr	r1, [r2, #4]
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	69d2      	ldr	r2, [r2, #28]
 8007a4e:	4311      	orrs	r1, r2
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	6812      	ldr	r2, [r2, #0]
 8007a54:	430b      	orrs	r3, r1
 8007a56:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a5e:	4b1a      	ldr	r3, [pc, #104]	; (8007ac8 <HAL_DMA2D_Init+0xc0>)
 8007a60:	4013      	ands	r3, r2
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	6891      	ldr	r1, [r2, #8]
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	6992      	ldr	r2, [r2, #24]
 8007a6a:	4311      	orrs	r1, r2
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	6812      	ldr	r2, [r2, #0]
 8007a70:	430b      	orrs	r3, r1
 8007a72:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a7a:	4b14      	ldr	r3, [pc, #80]	; (8007acc <HAL_DMA2D_Init+0xc4>)
 8007a7c:	4013      	ands	r3, r2
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	68d1      	ldr	r1, [r2, #12]
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	6812      	ldr	r2, [r2, #0]
 8007a86:	430b      	orrs	r3, r1
 8007a88:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a90:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	691b      	ldr	r3, [r3, #16]
 8007a98:	051a      	lsls	r2, r3, #20
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	695b      	ldr	r3, [r3, #20]
 8007a9e:	055b      	lsls	r3, r3, #21
 8007aa0:	431a      	orrs	r2, r3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	430a      	orrs	r2, r1
 8007aa8:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3708      	adds	r7, #8
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	fff8ffbf 	.word	0xfff8ffbf
 8007ac8:	fffffef8 	.word	0xfffffef8
 8007acc:	ffff0000 	.word	0xffff0000

08007ad0 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b086      	sub	sp, #24
 8007ad4:	af02      	add	r7, sp, #8
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
 8007adc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d101      	bne.n	8007aec <HAL_DMA2D_Start+0x1c>
 8007ae8:	2302      	movs	r3, #2
 8007aea:	e018      	b.n	8007b1e <HAL_DMA2D_Start+0x4e>
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2202      	movs	r2, #2
 8007af8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	9300      	str	r3, [sp, #0]
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	68b9      	ldr	r1, [r7, #8]
 8007b06:	68f8      	ldr	r0, [r7, #12]
 8007b08:	f000 fab4 	bl	8008074 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f042 0201 	orr.w	r2, r2, #1
 8007b1a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8007b26:	b580      	push	{r7, lr}
 8007b28:	b086      	sub	sp, #24
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
 8007b2e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8007b30:	2300      	movs	r3, #0
 8007b32:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 0301 	and.w	r3, r3, #1
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d056      	beq.n	8007bf0 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b42:	f7fc fc73 	bl	800442c <HAL_GetTick>
 8007b46:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007b48:	e04b      	b.n	8007be2 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d023      	beq.n	8007ba4 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f003 0320 	and.w	r3, r3, #32
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d005      	beq.n	8007b72 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b6a:	f043 0202 	orr.w	r2, r3, #2
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f003 0301 	and.w	r3, r3, #1
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d005      	beq.n	8007b88 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b80:	f043 0201 	orr.w	r2, r3, #1
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2221      	movs	r2, #33	; 0x21
 8007b8e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2204      	movs	r2, #4
 8007b94:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	e0a5      	b.n	8007cf0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007baa:	d01a      	beq.n	8007be2 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007bac:	f7fc fc3e 	bl	800442c <HAL_GetTick>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	1ad3      	subs	r3, r2, r3
 8007bb6:	683a      	ldr	r2, [r7, #0]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d302      	bcc.n	8007bc2 <HAL_DMA2D_PollForTransfer+0x9c>
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d10f      	bne.n	8007be2 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bc6:	f043 0220 	orr.w	r2, r3, #32
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2203      	movs	r2, #3
 8007bd2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8007bde:	2303      	movs	r3, #3
 8007be0:	e086      	b.n	8007cf0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	f003 0302 	and.w	r3, r3, #2
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d0ac      	beq.n	8007b4a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	69db      	ldr	r3, [r3, #28]
 8007bf6:	f003 0320 	and.w	r3, r3, #32
 8007bfa:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c02:	f003 0320 	and.w	r3, r3, #32
 8007c06:	693a      	ldr	r2, [r7, #16]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d061      	beq.n	8007cd6 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007c12:	f7fc fc0b 	bl	800442c <HAL_GetTick>
 8007c16:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007c18:	e056      	b.n	8007cc8 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d02e      	beq.n	8007c8a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f003 0308 	and.w	r3, r3, #8
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d005      	beq.n	8007c42 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c3a:	f043 0204 	orr.w	r2, r3, #4
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f003 0320 	and.w	r3, r3, #32
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d005      	beq.n	8007c58 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c50:	f043 0202 	orr.w	r2, r3, #2
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f003 0301 	and.w	r3, r3, #1
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d005      	beq.n	8007c6e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c66:	f043 0201 	orr.w	r2, r3, #1
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2229      	movs	r2, #41	; 0x29
 8007c74:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2204      	movs	r2, #4
 8007c7a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e032      	b.n	8007cf0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c90:	d01a      	beq.n	8007cc8 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007c92:	f7fc fbcb 	bl	800442c <HAL_GetTick>
 8007c96:	4602      	mov	r2, r0
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	1ad3      	subs	r3, r2, r3
 8007c9c:	683a      	ldr	r2, [r7, #0]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d302      	bcc.n	8007ca8 <HAL_DMA2D_PollForTransfer+0x182>
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d10f      	bne.n	8007cc8 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cac:	f043 0220 	orr.w	r2, r3, #32
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2203      	movs	r2, #3
 8007cb8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8007cc4:	2303      	movs	r3, #3
 8007cc6:	e013      	b.n	8007cf0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	f003 0310 	and.w	r3, r3, #16
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d0a1      	beq.n	8007c1a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2212      	movs	r2, #18
 8007cdc:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8007cee:	2300      	movs	r3, #0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3718      	adds	r7, #24
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f003 0301 	and.w	r3, r3, #1
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d026      	beq.n	8007d68 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d021      	beq.n	8007d68 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d32:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d38:	f043 0201 	orr.w	r2, r3, #1
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2201      	movs	r2, #1
 8007d46:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2204      	movs	r2, #4
 8007d4c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d003      	beq.n	8007d68 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f003 0320 	and.w	r3, r3, #32
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d026      	beq.n	8007dc0 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d021      	beq.n	8007dc0 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d8a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2220      	movs	r2, #32
 8007d92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d98:	f043 0202 	orr.w	r2, r3, #2
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2204      	movs	r2, #4
 8007da4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d003      	beq.n	8007dc0 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f003 0308 	and.w	r3, r3, #8
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d026      	beq.n	8007e18 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d021      	beq.n	8007e18 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007de2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2208      	movs	r2, #8
 8007dea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007df0:	f043 0204 	orr.w	r2, r3, #4
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2204      	movs	r2, #4
 8007dfc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d003      	beq.n	8007e18 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f003 0304 	and.w	r3, r3, #4
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d013      	beq.n	8007e4a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00e      	beq.n	8007e4a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e3a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	2204      	movs	r2, #4
 8007e42:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 f853 	bl	8007ef0 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f003 0302 	and.w	r3, r3, #2
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d024      	beq.n	8007e9e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d01f      	beq.n	8007e9e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007e6c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2202      	movs	r2, #2
 8007e74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2201      	movs	r2, #1
 8007e82:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a1b      	ldr	r3, [r3, #32]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d003      	beq.n	8007e9e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a1b      	ldr	r3, [r3, #32]
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f003 0310 	and.w	r3, r3, #16
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d01f      	beq.n	8007ee8 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d01a      	beq.n	8007ee8 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007ec0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2210      	movs	r2, #16
 8007ec8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f80e 	bl	8007f04 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8007ee8:	bf00      	nop
 8007eea:	3710      	adds	r7, #16
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8007ef8:	bf00      	nop
 8007efa:	370c      	adds	r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8007f0c:	bf00      	nop
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b087      	sub	sp, #28
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d101      	bne.n	8007f3c <HAL_DMA2D_ConfigLayer+0x24>
 8007f38:	2302      	movs	r3, #2
 8007f3a:	e092      	b.n	8008062 <HAL_DMA2D_ConfigLayer+0x14a>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2202      	movs	r2, #2
 8007f48:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007f4c:	683a      	ldr	r2, [r7, #0]
 8007f4e:	4613      	mov	r3, r2
 8007f50:	00db      	lsls	r3, r3, #3
 8007f52:	1a9b      	subs	r3, r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	3328      	adds	r3, #40	; 0x28
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	685a      	ldr	r2, [r3, #4]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	041b      	lsls	r3, r3, #16
 8007f68:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007f70:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	695b      	ldr	r3, [r3, #20]
 8007f76:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8007f7c:	4b3c      	ldr	r3, [pc, #240]	; (8008070 <HAL_DMA2D_ConfigLayer+0x158>)
 8007f7e:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	2b0a      	cmp	r3, #10
 8007f86:	d003      	beq.n	8007f90 <HAL_DMA2D_ConfigLayer+0x78>
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	2b09      	cmp	r3, #9
 8007f8e:	d107      	bne.n	8007fa0 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007f98:	693a      	ldr	r2, [r7, #16]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	613b      	str	r3, [r7, #16]
 8007f9e:	e005      	b.n	8007fac <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	061b      	lsls	r3, r3, #24
 8007fa6:	693a      	ldr	r2, [r7, #16]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d120      	bne.n	8007ff4 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	43db      	mvns	r3, r3
 8007fbc:	ea02 0103 	and.w	r1, r2, r3
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	693a      	ldr	r2, [r7, #16]
 8007fc6:	430a      	orrs	r2, r1
 8007fc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	6812      	ldr	r2, [r2, #0]
 8007fd2:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	2b0a      	cmp	r3, #10
 8007fda:	d003      	beq.n	8007fe4 <HAL_DMA2D_ConfigLayer+0xcc>
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	2b09      	cmp	r3, #9
 8007fe2:	d135      	bne.n	8008050 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	68da      	ldr	r2, [r3, #12]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007ff0:	629a      	str	r2, [r3, #40]	; 0x28
 8007ff2:	e02d      	b.n	8008050 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	2b0b      	cmp	r3, #11
 8007ffa:	d109      	bne.n	8008010 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	699b      	ldr	r3, [r3, #24]
 8008000:	049b      	lsls	r3, r3, #18
 8008002:	693a      	ldr	r2, [r7, #16]
 8008004:	4313      	orrs	r3, r2
 8008006:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800800e:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	69da      	ldr	r2, [r3, #28]
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	43db      	mvns	r3, r3
 800801a:	ea02 0103 	and.w	r1, r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	693a      	ldr	r2, [r7, #16]
 8008024:	430a      	orrs	r2, r1
 8008026:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	6812      	ldr	r2, [r2, #0]
 8008030:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	2b0a      	cmp	r3, #10
 8008038:	d003      	beq.n	8008042 <HAL_DMA2D_ConfigLayer+0x12a>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	2b09      	cmp	r3, #9
 8008040:	d106      	bne.n	8008050 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	68da      	ldr	r2, [r3, #12]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800804e:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	371c      	adds	r7, #28
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop
 8008070:	ff33000f 	.word	0xff33000f

08008074 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8008074:	b480      	push	{r7}
 8008076:	b08b      	sub	sp, #44	; 0x2c
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	607a      	str	r2, [r7, #4]
 8008080:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008088:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	041a      	lsls	r2, r3, #16
 8008090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008092:	431a      	orrs	r2, r3
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	430a      	orrs	r2, r1
 800809a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80080ac:	d174      	bne.n	8008198 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80080b4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80080bc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80080c4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d108      	bne.n	80080e6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80080d4:	69ba      	ldr	r2, [r7, #24]
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	431a      	orrs	r2, r3
 80080da:	6a3b      	ldr	r3, [r7, #32]
 80080dc:	4313      	orrs	r3, r2
 80080de:	697a      	ldr	r2, [r7, #20]
 80080e0:	4313      	orrs	r3, r2
 80080e2:	627b      	str	r3, [r7, #36]	; 0x24
 80080e4:	e053      	b.n	800818e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d106      	bne.n	80080fc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80080ee:	69ba      	ldr	r2, [r7, #24]
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	697a      	ldr	r2, [r7, #20]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	627b      	str	r3, [r7, #36]	; 0x24
 80080fa:	e048      	b.n	800818e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	2b02      	cmp	r3, #2
 8008102:	d111      	bne.n	8008128 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8008104:	69fb      	ldr	r3, [r7, #28]
 8008106:	0cdb      	lsrs	r3, r3, #19
 8008108:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	0a9b      	lsrs	r3, r3, #10
 800810e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	08db      	lsrs	r3, r3, #3
 8008114:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8008116:	69bb      	ldr	r3, [r7, #24]
 8008118:	015a      	lsls	r2, r3, #5
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	02db      	lsls	r3, r3, #11
 800811e:	4313      	orrs	r3, r2
 8008120:	697a      	ldr	r2, [r7, #20]
 8008122:	4313      	orrs	r3, r2
 8008124:	627b      	str	r3, [r7, #36]	; 0x24
 8008126:	e032      	b.n	800818e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	2b03      	cmp	r3, #3
 800812e:	d117      	bne.n	8008160 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8008130:	6a3b      	ldr	r3, [r7, #32]
 8008132:	0fdb      	lsrs	r3, r3, #31
 8008134:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	0cdb      	lsrs	r3, r3, #19
 800813a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	0adb      	lsrs	r3, r3, #11
 8008140:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	08db      	lsrs	r3, r3, #3
 8008146:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	015a      	lsls	r2, r3, #5
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	029b      	lsls	r3, r3, #10
 8008150:	431a      	orrs	r2, r3
 8008152:	6a3b      	ldr	r3, [r7, #32]
 8008154:	03db      	lsls	r3, r3, #15
 8008156:	4313      	orrs	r3, r2
 8008158:	697a      	ldr	r2, [r7, #20]
 800815a:	4313      	orrs	r3, r2
 800815c:	627b      	str	r3, [r7, #36]	; 0x24
 800815e:	e016      	b.n	800818e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8008160:	6a3b      	ldr	r3, [r7, #32]
 8008162:	0f1b      	lsrs	r3, r3, #28
 8008164:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8008166:	69fb      	ldr	r3, [r7, #28]
 8008168:	0d1b      	lsrs	r3, r3, #20
 800816a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	0b1b      	lsrs	r3, r3, #12
 8008170:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	091b      	lsrs	r3, r3, #4
 8008176:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	011a      	lsls	r2, r3, #4
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	021b      	lsls	r3, r3, #8
 8008180:	431a      	orrs	r2, r3
 8008182:	6a3b      	ldr	r3, [r7, #32]
 8008184:	031b      	lsls	r3, r3, #12
 8008186:	4313      	orrs	r3, r2
 8008188:	697a      	ldr	r2, [r7, #20]
 800818a:	4313      	orrs	r3, r2
 800818c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008194:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8008196:	e00d      	b.n	80081b4 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80081a0:	d104      	bne.n	80081ac <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68ba      	ldr	r2, [r7, #8]
 80081a8:	615a      	str	r2, [r3, #20]
}
 80081aa:	e003      	b.n	80081b4 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	68ba      	ldr	r2, [r7, #8]
 80081b2:	60da      	str	r2, [r3, #12]
}
 80081b4:	bf00      	nop
 80081b6:	372c      	adds	r7, #44	; 0x2c
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b086      	sub	sp, #24
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	607a      	str	r2, [r7, #4]
 80081cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081ce:	2300      	movs	r3, #0
 80081d0:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	2b80      	cmp	r3, #128	; 0x80
 80081d8:	d105      	bne.n	80081e6 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80081e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	e315      	b.n	8008812 <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d101      	bne.n	80081f4 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 80081f0:	2302      	movs	r3, #2
 80081f2:	e30e      	b.n	8008812 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008202:	b2db      	uxtb	r3, r3
 8008204:	2b01      	cmp	r3, #1
 8008206:	f040 82fd 	bne.w	8008804 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2202      	movs	r2, #2
 800820e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2200      	movs	r2, #0
 8008216:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a82      	ldr	r2, [pc, #520]	; (8008428 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d04a      	beq.n	80082b8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a81      	ldr	r2, [pc, #516]	; (800842c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d045      	beq.n	80082b8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a7f      	ldr	r2, [pc, #508]	; (8008430 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d040      	beq.n	80082b8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a7e      	ldr	r2, [pc, #504]	; (8008434 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d03b      	beq.n	80082b8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a7c      	ldr	r2, [pc, #496]	; (8008438 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d036      	beq.n	80082b8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a7b      	ldr	r2, [pc, #492]	; (800843c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d031      	beq.n	80082b8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a79      	ldr	r2, [pc, #484]	; (8008440 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d02c      	beq.n	80082b8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a78      	ldr	r2, [pc, #480]	; (8008444 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d027      	beq.n	80082b8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a76      	ldr	r2, [pc, #472]	; (8008448 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d022      	beq.n	80082b8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a75      	ldr	r2, [pc, #468]	; (800844c <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d01d      	beq.n	80082b8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a73      	ldr	r2, [pc, #460]	; (8008450 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d018      	beq.n	80082b8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a72      	ldr	r2, [pc, #456]	; (8008454 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d013      	beq.n	80082b8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a70      	ldr	r2, [pc, #448]	; (8008458 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d00e      	beq.n	80082b8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a6f      	ldr	r2, [pc, #444]	; (800845c <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d009      	beq.n	80082b8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a6d      	ldr	r2, [pc, #436]	; (8008460 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d004      	beq.n	80082b8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a6c      	ldr	r2, [pc, #432]	; (8008464 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d101      	bne.n	80082bc <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 80082b8:	2301      	movs	r3, #1
 80082ba:	e000      	b.n	80082be <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 80082bc:	2300      	movs	r3, #0
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d018      	beq.n	80082f4 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80082d0:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	683a      	ldr	r2, [r7, #0]
 80082d8:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082de:	3308      	adds	r3, #8
 80082e0:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082e6:	f003 031f 	and.w	r3, r3, #31
 80082ea:	223f      	movs	r2, #63	; 0x3f
 80082ec:	409a      	lsls	r2, r3
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	601a      	str	r2, [r3, #0]
 80082f2:	e018      	b.n	8008326 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	6819      	ldr	r1, [r3, #0]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	f248 0320 	movw	r3, #32800	; 0x8020
 8008302:	430b      	orrs	r3, r1
 8008304:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	683a      	ldr	r2, [r7, #0]
 800830c:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008312:	3304      	adds	r3, #4
 8008314:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800831a:	f003 031f 	and.w	r3, r3, #31
 800831e:	2201      	movs	r2, #1
 8008320:	409a      	lsls	r2, r3
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008326:	6a3b      	ldr	r3, [r7, #32]
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	68b9      	ldr	r1, [r7, #8]
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	f000 fb41 	bl	80089b4 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a3c      	ldr	r2, [pc, #240]	; (8008428 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d072      	beq.n	8008422 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a3a      	ldr	r2, [pc, #232]	; (800842c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d06d      	beq.n	8008422 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a39      	ldr	r2, [pc, #228]	; (8008430 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d068      	beq.n	8008422 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a37      	ldr	r2, [pc, #220]	; (8008434 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d063      	beq.n	8008422 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a36      	ldr	r2, [pc, #216]	; (8008438 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d05e      	beq.n	8008422 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a34      	ldr	r2, [pc, #208]	; (800843c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d059      	beq.n	8008422 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a33      	ldr	r2, [pc, #204]	; (8008440 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d054      	beq.n	8008422 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a31      	ldr	r2, [pc, #196]	; (8008444 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d04f      	beq.n	8008422 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a30      	ldr	r2, [pc, #192]	; (8008448 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d04a      	beq.n	8008422 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a2e      	ldr	r2, [pc, #184]	; (800844c <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d045      	beq.n	8008422 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a2d      	ldr	r2, [pc, #180]	; (8008450 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d040      	beq.n	8008422 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a2b      	ldr	r2, [pc, #172]	; (8008454 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d03b      	beq.n	8008422 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a2a      	ldr	r2, [pc, #168]	; (8008458 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d036      	beq.n	8008422 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a28      	ldr	r2, [pc, #160]	; (800845c <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d031      	beq.n	8008422 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a27      	ldr	r2, [pc, #156]	; (8008460 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d02c      	beq.n	8008422 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a25      	ldr	r2, [pc, #148]	; (8008464 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d027      	beq.n	8008422 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a24      	ldr	r2, [pc, #144]	; (8008468 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d022      	beq.n	8008422 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a22      	ldr	r2, [pc, #136]	; (800846c <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d01d      	beq.n	8008422 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a21      	ldr	r2, [pc, #132]	; (8008470 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d018      	beq.n	8008422 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a1f      	ldr	r2, [pc, #124]	; (8008474 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d013      	beq.n	8008422 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a1e      	ldr	r2, [pc, #120]	; (8008478 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d00e      	beq.n	8008422 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a1c      	ldr	r2, [pc, #112]	; (800847c <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d009      	beq.n	8008422 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a1b      	ldr	r2, [pc, #108]	; (8008480 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d004      	beq.n	8008422 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a19      	ldr	r2, [pc, #100]	; (8008484 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d132      	bne.n	8008488 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8008422:	2301      	movs	r3, #1
 8008424:	e031      	b.n	800848a <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8008426:	bf00      	nop
 8008428:	40020010 	.word	0x40020010
 800842c:	40020028 	.word	0x40020028
 8008430:	40020040 	.word	0x40020040
 8008434:	40020058 	.word	0x40020058
 8008438:	40020070 	.word	0x40020070
 800843c:	40020088 	.word	0x40020088
 8008440:	400200a0 	.word	0x400200a0
 8008444:	400200b8 	.word	0x400200b8
 8008448:	40020410 	.word	0x40020410
 800844c:	40020428 	.word	0x40020428
 8008450:	40020440 	.word	0x40020440
 8008454:	40020458 	.word	0x40020458
 8008458:	40020470 	.word	0x40020470
 800845c:	40020488 	.word	0x40020488
 8008460:	400204a0 	.word	0x400204a0
 8008464:	400204b8 	.word	0x400204b8
 8008468:	58025408 	.word	0x58025408
 800846c:	5802541c 	.word	0x5802541c
 8008470:	58025430 	.word	0x58025430
 8008474:	58025444 	.word	0x58025444
 8008478:	58025458 	.word	0x58025458
 800847c:	5802546c 	.word	0x5802546c
 8008480:	58025480 	.word	0x58025480
 8008484:	58025494 	.word	0x58025494
 8008488:	2300      	movs	r3, #0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d00d      	beq.n	80084aa <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008492:	68fa      	ldr	r2, [r7, #12]
 8008494:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008496:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800849c:	2b00      	cmp	r3, #0
 800849e:	d004      	beq.n	80084aa <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80084a8:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a3b      	ldr	r2, [pc, #236]	; (800859c <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d04a      	beq.n	800854a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a39      	ldr	r2, [pc, #228]	; (80085a0 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d045      	beq.n	800854a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a38      	ldr	r2, [pc, #224]	; (80085a4 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d040      	beq.n	800854a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a36      	ldr	r2, [pc, #216]	; (80085a8 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d03b      	beq.n	800854a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a35      	ldr	r2, [pc, #212]	; (80085ac <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d036      	beq.n	800854a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a33      	ldr	r2, [pc, #204]	; (80085b0 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d031      	beq.n	800854a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a32      	ldr	r2, [pc, #200]	; (80085b4 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d02c      	beq.n	800854a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a30      	ldr	r2, [pc, #192]	; (80085b8 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d027      	beq.n	800854a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a2f      	ldr	r2, [pc, #188]	; (80085bc <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d022      	beq.n	800854a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a2d      	ldr	r2, [pc, #180]	; (80085c0 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d01d      	beq.n	800854a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a2c      	ldr	r2, [pc, #176]	; (80085c4 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d018      	beq.n	800854a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a2a      	ldr	r2, [pc, #168]	; (80085c8 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d013      	beq.n	800854a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a29      	ldr	r2, [pc, #164]	; (80085cc <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d00e      	beq.n	800854a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a27      	ldr	r2, [pc, #156]	; (80085d0 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d009      	beq.n	800854a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a26      	ldr	r2, [pc, #152]	; (80085d4 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d004      	beq.n	800854a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a24      	ldr	r2, [pc, #144]	; (80085d8 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d101      	bne.n	800854e <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 800854a:	2301      	movs	r3, #1
 800854c:	e000      	b.n	8008550 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 800854e:	2300      	movs	r3, #0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d043      	beq.n	80085dc <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f023 021e 	bic.w	r2, r3, #30
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f042 0216 	orr.w	r2, r2, #22
 8008566:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	695a      	ldr	r2, [r3, #20]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008576:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800857c:	2b00      	cmp	r3, #0
 800857e:	d103      	bne.n	8008588 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008584:	2b00      	cmp	r3, #0
 8008586:	d043      	beq.n	8008610 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f042 0208 	orr.w	r2, r2, #8
 8008596:	601a      	str	r2, [r3, #0]
 8008598:	e03a      	b.n	8008610 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 800859a:	bf00      	nop
 800859c:	40020010 	.word	0x40020010
 80085a0:	40020028 	.word	0x40020028
 80085a4:	40020040 	.word	0x40020040
 80085a8:	40020058 	.word	0x40020058
 80085ac:	40020070 	.word	0x40020070
 80085b0:	40020088 	.word	0x40020088
 80085b4:	400200a0 	.word	0x400200a0
 80085b8:	400200b8 	.word	0x400200b8
 80085bc:	40020410 	.word	0x40020410
 80085c0:	40020428 	.word	0x40020428
 80085c4:	40020440 	.word	0x40020440
 80085c8:	40020458 	.word	0x40020458
 80085cc:	40020470 	.word	0x40020470
 80085d0:	40020488 	.word	0x40020488
 80085d4:	400204a0 	.word	0x400204a0
 80085d8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f023 020e 	bic.w	r2, r3, #14
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f042 020a 	orr.w	r2, r2, #10
 80085ee:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d103      	bne.n	8008600 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d007      	beq.n	8008610 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f042 0204 	orr.w	r2, r2, #4
 800860e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a81      	ldr	r2, [pc, #516]	; (800881c <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d072      	beq.n	8008700 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a80      	ldr	r2, [pc, #512]	; (8008820 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d06d      	beq.n	8008700 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a7e      	ldr	r2, [pc, #504]	; (8008824 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d068      	beq.n	8008700 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a7d      	ldr	r2, [pc, #500]	; (8008828 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d063      	beq.n	8008700 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a7b      	ldr	r2, [pc, #492]	; (800882c <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d05e      	beq.n	8008700 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a7a      	ldr	r2, [pc, #488]	; (8008830 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d059      	beq.n	8008700 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a78      	ldr	r2, [pc, #480]	; (8008834 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d054      	beq.n	8008700 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a77      	ldr	r2, [pc, #476]	; (8008838 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d04f      	beq.n	8008700 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a75      	ldr	r2, [pc, #468]	; (800883c <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d04a      	beq.n	8008700 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a74      	ldr	r2, [pc, #464]	; (8008840 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d045      	beq.n	8008700 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a72      	ldr	r2, [pc, #456]	; (8008844 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d040      	beq.n	8008700 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a71      	ldr	r2, [pc, #452]	; (8008848 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d03b      	beq.n	8008700 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a6f      	ldr	r2, [pc, #444]	; (800884c <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d036      	beq.n	8008700 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a6e      	ldr	r2, [pc, #440]	; (8008850 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d031      	beq.n	8008700 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a6c      	ldr	r2, [pc, #432]	; (8008854 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d02c      	beq.n	8008700 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a6b      	ldr	r2, [pc, #428]	; (8008858 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d027      	beq.n	8008700 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a69      	ldr	r2, [pc, #420]	; (800885c <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d022      	beq.n	8008700 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a68      	ldr	r2, [pc, #416]	; (8008860 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d01d      	beq.n	8008700 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a66      	ldr	r2, [pc, #408]	; (8008864 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d018      	beq.n	8008700 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a65      	ldr	r2, [pc, #404]	; (8008868 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d013      	beq.n	8008700 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a63      	ldr	r2, [pc, #396]	; (800886c <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d00e      	beq.n	8008700 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a62      	ldr	r2, [pc, #392]	; (8008870 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d009      	beq.n	8008700 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a60      	ldr	r2, [pc, #384]	; (8008874 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d004      	beq.n	8008700 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a5f      	ldr	r2, [pc, #380]	; (8008878 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d101      	bne.n	8008704 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8008700:	2301      	movs	r3, #1
 8008702:	e000      	b.n	8008706 <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8008704:	2300      	movs	r3, #0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d01a      	beq.n	8008740 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008714:	2b00      	cmp	r3, #0
 8008716:	d007      	beq.n	8008728 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008722:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008726:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800872c:	2b00      	cmp	r3, #0
 800872e:	d007      	beq.n	8008740 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800873a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800873e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a35      	ldr	r2, [pc, #212]	; (800881c <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d04a      	beq.n	80087e0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a34      	ldr	r2, [pc, #208]	; (8008820 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d045      	beq.n	80087e0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a32      	ldr	r2, [pc, #200]	; (8008824 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d040      	beq.n	80087e0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a31      	ldr	r2, [pc, #196]	; (8008828 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d03b      	beq.n	80087e0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a2f      	ldr	r2, [pc, #188]	; (800882c <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d036      	beq.n	80087e0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a2e      	ldr	r2, [pc, #184]	; (8008830 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d031      	beq.n	80087e0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a2c      	ldr	r2, [pc, #176]	; (8008834 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d02c      	beq.n	80087e0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a2b      	ldr	r2, [pc, #172]	; (8008838 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d027      	beq.n	80087e0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a29      	ldr	r2, [pc, #164]	; (800883c <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d022      	beq.n	80087e0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a28      	ldr	r2, [pc, #160]	; (8008840 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d01d      	beq.n	80087e0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a26      	ldr	r2, [pc, #152]	; (8008844 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d018      	beq.n	80087e0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a25      	ldr	r2, [pc, #148]	; (8008848 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d013      	beq.n	80087e0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a23      	ldr	r2, [pc, #140]	; (800884c <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d00e      	beq.n	80087e0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a22      	ldr	r2, [pc, #136]	; (8008850 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d009      	beq.n	80087e0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a20      	ldr	r2, [pc, #128]	; (8008854 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d004      	beq.n	80087e0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a1f      	ldr	r2, [pc, #124]	; (8008858 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d108      	bne.n	80087f2 <HAL_DMAEx_MultiBufferStart_IT+0x632>
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f042 0201 	orr.w	r2, r2, #1
 80087ee:	601a      	str	r2, [r3, #0]
 80087f0:	e00e      	b.n	8008810 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f042 0201 	orr.w	r2, r2, #1
 8008800:	601a      	str	r2, [r3, #0]
 8008802:	e005      	b.n	8008810 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800880a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008810:	7dfb      	ldrb	r3, [r7, #23]
}
 8008812:	4618      	mov	r0, r3
 8008814:	3718      	adds	r7, #24
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	40020010 	.word	0x40020010
 8008820:	40020028 	.word	0x40020028
 8008824:	40020040 	.word	0x40020040
 8008828:	40020058 	.word	0x40020058
 800882c:	40020070 	.word	0x40020070
 8008830:	40020088 	.word	0x40020088
 8008834:	400200a0 	.word	0x400200a0
 8008838:	400200b8 	.word	0x400200b8
 800883c:	40020410 	.word	0x40020410
 8008840:	40020428 	.word	0x40020428
 8008844:	40020440 	.word	0x40020440
 8008848:	40020458 	.word	0x40020458
 800884c:	40020470 	.word	0x40020470
 8008850:	40020488 	.word	0x40020488
 8008854:	400204a0 	.word	0x400204a0
 8008858:	400204b8 	.word	0x400204b8
 800885c:	58025408 	.word	0x58025408
 8008860:	5802541c 	.word	0x5802541c
 8008864:	58025430 	.word	0x58025430
 8008868:	58025444 	.word	0x58025444
 800886c:	58025458 	.word	0x58025458
 8008870:	5802546c 	.word	0x5802546c
 8008874:	58025480 	.word	0x58025480
 8008878:	58025494 	.word	0x58025494

0800887c <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 800887c:	b480      	push	{r7}
 800887e:	b085      	sub	sp, #20
 8008880:	af00      	add	r7, sp, #0
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	4613      	mov	r3, r2
 8008888:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a39      	ldr	r2, [pc, #228]	; (8008974 <HAL_DMAEx_ChangeMemory+0xf8>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d04a      	beq.n	800892a <HAL_DMAEx_ChangeMemory+0xae>
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a37      	ldr	r2, [pc, #220]	; (8008978 <HAL_DMAEx_ChangeMemory+0xfc>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d045      	beq.n	800892a <HAL_DMAEx_ChangeMemory+0xae>
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a36      	ldr	r2, [pc, #216]	; (800897c <HAL_DMAEx_ChangeMemory+0x100>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d040      	beq.n	800892a <HAL_DMAEx_ChangeMemory+0xae>
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a34      	ldr	r2, [pc, #208]	; (8008980 <HAL_DMAEx_ChangeMemory+0x104>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d03b      	beq.n	800892a <HAL_DMAEx_ChangeMemory+0xae>
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a33      	ldr	r2, [pc, #204]	; (8008984 <HAL_DMAEx_ChangeMemory+0x108>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d036      	beq.n	800892a <HAL_DMAEx_ChangeMemory+0xae>
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a31      	ldr	r2, [pc, #196]	; (8008988 <HAL_DMAEx_ChangeMemory+0x10c>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d031      	beq.n	800892a <HAL_DMAEx_ChangeMemory+0xae>
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a30      	ldr	r2, [pc, #192]	; (800898c <HAL_DMAEx_ChangeMemory+0x110>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d02c      	beq.n	800892a <HAL_DMAEx_ChangeMemory+0xae>
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a2e      	ldr	r2, [pc, #184]	; (8008990 <HAL_DMAEx_ChangeMemory+0x114>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d027      	beq.n	800892a <HAL_DMAEx_ChangeMemory+0xae>
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a2d      	ldr	r2, [pc, #180]	; (8008994 <HAL_DMAEx_ChangeMemory+0x118>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d022      	beq.n	800892a <HAL_DMAEx_ChangeMemory+0xae>
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a2b      	ldr	r2, [pc, #172]	; (8008998 <HAL_DMAEx_ChangeMemory+0x11c>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d01d      	beq.n	800892a <HAL_DMAEx_ChangeMemory+0xae>
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a2a      	ldr	r2, [pc, #168]	; (800899c <HAL_DMAEx_ChangeMemory+0x120>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d018      	beq.n	800892a <HAL_DMAEx_ChangeMemory+0xae>
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a28      	ldr	r2, [pc, #160]	; (80089a0 <HAL_DMAEx_ChangeMemory+0x124>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d013      	beq.n	800892a <HAL_DMAEx_ChangeMemory+0xae>
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a27      	ldr	r2, [pc, #156]	; (80089a4 <HAL_DMAEx_ChangeMemory+0x128>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d00e      	beq.n	800892a <HAL_DMAEx_ChangeMemory+0xae>
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a25      	ldr	r2, [pc, #148]	; (80089a8 <HAL_DMAEx_ChangeMemory+0x12c>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d009      	beq.n	800892a <HAL_DMAEx_ChangeMemory+0xae>
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a24      	ldr	r2, [pc, #144]	; (80089ac <HAL_DMAEx_ChangeMemory+0x130>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d004      	beq.n	800892a <HAL_DMAEx_ChangeMemory+0xae>
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a22      	ldr	r2, [pc, #136]	; (80089b0 <HAL_DMAEx_ChangeMemory+0x134>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d101      	bne.n	800892e <HAL_DMAEx_ChangeMemory+0xb2>
 800892a:	2301      	movs	r3, #1
 800892c:	e000      	b.n	8008930 <HAL_DMAEx_ChangeMemory+0xb4>
 800892e:	2300      	movs	r3, #0
 8008930:	2b00      	cmp	r3, #0
 8008932:	d00c      	beq.n	800894e <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 8008934:	79fb      	ldrb	r3, [r7, #7]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d104      	bne.n	8008944 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	68ba      	ldr	r2, [r7, #8]
 8008940:	60da      	str	r2, [r3, #12]
 8008942:	e010      	b.n	8008966 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68ba      	ldr	r2, [r7, #8]
 800894a:	611a      	str	r2, [r3, #16]
 800894c:	e00b      	b.n	8008966 <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 800894e:	79fb      	ldrb	r3, [r7, #7]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d104      	bne.n	800895e <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	60da      	str	r2, [r3, #12]
 800895c:	e003      	b.n	8008966 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	68ba      	ldr	r2, [r7, #8]
 8008964:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 8008966:	2300      	movs	r3, #0
}
 8008968:	4618      	mov	r0, r3
 800896a:	3714      	adds	r7, #20
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr
 8008974:	40020010 	.word	0x40020010
 8008978:	40020028 	.word	0x40020028
 800897c:	40020040 	.word	0x40020040
 8008980:	40020058 	.word	0x40020058
 8008984:	40020070 	.word	0x40020070
 8008988:	40020088 	.word	0x40020088
 800898c:	400200a0 	.word	0x400200a0
 8008990:	400200b8 	.word	0x400200b8
 8008994:	40020410 	.word	0x40020410
 8008998:	40020428 	.word	0x40020428
 800899c:	40020440 	.word	0x40020440
 80089a0:	40020458 	.word	0x40020458
 80089a4:	40020470 	.word	0x40020470
 80089a8:	40020488 	.word	0x40020488
 80089ac:	400204a0 	.word	0x400204a0
 80089b0:	400204b8 	.word	0x400204b8

080089b4 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	607a      	str	r2, [r7, #4]
 80089c0:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a46      	ldr	r2, [pc, #280]	; (8008ae0 <DMA_MultiBufferSetConfig+0x12c>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d04a      	beq.n	8008a62 <DMA_MultiBufferSetConfig+0xae>
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a44      	ldr	r2, [pc, #272]	; (8008ae4 <DMA_MultiBufferSetConfig+0x130>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d045      	beq.n	8008a62 <DMA_MultiBufferSetConfig+0xae>
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a43      	ldr	r2, [pc, #268]	; (8008ae8 <DMA_MultiBufferSetConfig+0x134>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d040      	beq.n	8008a62 <DMA_MultiBufferSetConfig+0xae>
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a41      	ldr	r2, [pc, #260]	; (8008aec <DMA_MultiBufferSetConfig+0x138>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d03b      	beq.n	8008a62 <DMA_MultiBufferSetConfig+0xae>
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a40      	ldr	r2, [pc, #256]	; (8008af0 <DMA_MultiBufferSetConfig+0x13c>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d036      	beq.n	8008a62 <DMA_MultiBufferSetConfig+0xae>
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a3e      	ldr	r2, [pc, #248]	; (8008af4 <DMA_MultiBufferSetConfig+0x140>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d031      	beq.n	8008a62 <DMA_MultiBufferSetConfig+0xae>
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a3d      	ldr	r2, [pc, #244]	; (8008af8 <DMA_MultiBufferSetConfig+0x144>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d02c      	beq.n	8008a62 <DMA_MultiBufferSetConfig+0xae>
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a3b      	ldr	r2, [pc, #236]	; (8008afc <DMA_MultiBufferSetConfig+0x148>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d027      	beq.n	8008a62 <DMA_MultiBufferSetConfig+0xae>
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a3a      	ldr	r2, [pc, #232]	; (8008b00 <DMA_MultiBufferSetConfig+0x14c>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d022      	beq.n	8008a62 <DMA_MultiBufferSetConfig+0xae>
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a38      	ldr	r2, [pc, #224]	; (8008b04 <DMA_MultiBufferSetConfig+0x150>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d01d      	beq.n	8008a62 <DMA_MultiBufferSetConfig+0xae>
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a37      	ldr	r2, [pc, #220]	; (8008b08 <DMA_MultiBufferSetConfig+0x154>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d018      	beq.n	8008a62 <DMA_MultiBufferSetConfig+0xae>
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a35      	ldr	r2, [pc, #212]	; (8008b0c <DMA_MultiBufferSetConfig+0x158>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d013      	beq.n	8008a62 <DMA_MultiBufferSetConfig+0xae>
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a34      	ldr	r2, [pc, #208]	; (8008b10 <DMA_MultiBufferSetConfig+0x15c>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d00e      	beq.n	8008a62 <DMA_MultiBufferSetConfig+0xae>
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a32      	ldr	r2, [pc, #200]	; (8008b14 <DMA_MultiBufferSetConfig+0x160>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d009      	beq.n	8008a62 <DMA_MultiBufferSetConfig+0xae>
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a31      	ldr	r2, [pc, #196]	; (8008b18 <DMA_MultiBufferSetConfig+0x164>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d004      	beq.n	8008a62 <DMA_MultiBufferSetConfig+0xae>
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a2f      	ldr	r2, [pc, #188]	; (8008b1c <DMA_MultiBufferSetConfig+0x168>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d101      	bne.n	8008a66 <DMA_MultiBufferSetConfig+0xb2>
 8008a62:	2301      	movs	r3, #1
 8008a64:	e000      	b.n	8008a68 <DMA_MultiBufferSetConfig+0xb4>
 8008a66:	2300      	movs	r3, #0
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d019      	beq.n	8008aa0 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	683a      	ldr	r2, [r7, #0]
 8008a72:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	2b40      	cmp	r3, #64	; 0x40
 8008a7a:	d108      	bne.n	8008a8e <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	68ba      	ldr	r2, [r7, #8]
 8008a8a:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8008a8c:	e021      	b.n	8008ad2 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	60da      	str	r2, [r3, #12]
}
 8008a9e:	e018      	b.n	8008ad2 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	683a      	ldr	r2, [r7, #0]
 8008aa6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	2b40      	cmp	r3, #64	; 0x40
 8008aae:	d108      	bne.n	8008ac2 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	68ba      	ldr	r2, [r7, #8]
 8008abe:	60da      	str	r2, [r3, #12]
}
 8008ac0:	e007      	b.n	8008ad2 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	68ba      	ldr	r2, [r7, #8]
 8008ac8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	60da      	str	r2, [r3, #12]
}
 8008ad2:	bf00      	nop
 8008ad4:	3714      	adds	r7, #20
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr
 8008ade:	bf00      	nop
 8008ae0:	40020010 	.word	0x40020010
 8008ae4:	40020028 	.word	0x40020028
 8008ae8:	40020040 	.word	0x40020040
 8008aec:	40020058 	.word	0x40020058
 8008af0:	40020070 	.word	0x40020070
 8008af4:	40020088 	.word	0x40020088
 8008af8:	400200a0 	.word	0x400200a0
 8008afc:	400200b8 	.word	0x400200b8
 8008b00:	40020410 	.word	0x40020410
 8008b04:	40020428 	.word	0x40020428
 8008b08:	40020440 	.word	0x40020440
 8008b0c:	40020458 	.word	0x40020458
 8008b10:	40020470 	.word	0x40020470
 8008b14:	40020488 	.word	0x40020488
 8008b18:	400204a0 	.word	0x400204a0
 8008b1c:	400204b8 	.word	0x400204b8

08008b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b089      	sub	sp, #36	; 0x24
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008b2e:	4b89      	ldr	r3, [pc, #548]	; (8008d54 <HAL_GPIO_Init+0x234>)
 8008b30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008b32:	e194      	b.n	8008e5e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	681a      	ldr	r2, [r3, #0]
 8008b38:	2101      	movs	r1, #1
 8008b3a:	69fb      	ldr	r3, [r7, #28]
 8008b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8008b40:	4013      	ands	r3, r2
 8008b42:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	f000 8186 	beq.w	8008e58 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	f003 0303 	and.w	r3, r3, #3
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d005      	beq.n	8008b64 <HAL_GPIO_Init+0x44>
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	f003 0303 	and.w	r3, r3, #3
 8008b60:	2b02      	cmp	r3, #2
 8008b62:	d130      	bne.n	8008bc6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	005b      	lsls	r3, r3, #1
 8008b6e:	2203      	movs	r2, #3
 8008b70:	fa02 f303 	lsl.w	r3, r2, r3
 8008b74:	43db      	mvns	r3, r3
 8008b76:	69ba      	ldr	r2, [r7, #24]
 8008b78:	4013      	ands	r3, r2
 8008b7a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	68da      	ldr	r2, [r3, #12]
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	005b      	lsls	r3, r3, #1
 8008b84:	fa02 f303 	lsl.w	r3, r2, r3
 8008b88:	69ba      	ldr	r2, [r7, #24]
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	69ba      	ldr	r2, [r7, #24]
 8008b92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	69fb      	ldr	r3, [r7, #28]
 8008b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba2:	43db      	mvns	r3, r3
 8008ba4:	69ba      	ldr	r2, [r7, #24]
 8008ba6:	4013      	ands	r3, r2
 8008ba8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	091b      	lsrs	r3, r3, #4
 8008bb0:	f003 0201 	and.w	r2, r3, #1
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8008bba:	69ba      	ldr	r2, [r7, #24]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	69ba      	ldr	r2, [r7, #24]
 8008bc4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	f003 0303 	and.w	r3, r3, #3
 8008bce:	2b03      	cmp	r3, #3
 8008bd0:	d017      	beq.n	8008c02 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	68db      	ldr	r3, [r3, #12]
 8008bd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	005b      	lsls	r3, r3, #1
 8008bdc:	2203      	movs	r2, #3
 8008bde:	fa02 f303 	lsl.w	r3, r2, r3
 8008be2:	43db      	mvns	r3, r3
 8008be4:	69ba      	ldr	r2, [r7, #24]
 8008be6:	4013      	ands	r3, r2
 8008be8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	689a      	ldr	r2, [r3, #8]
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	005b      	lsls	r3, r3, #1
 8008bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf6:	69ba      	ldr	r2, [r7, #24]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	69ba      	ldr	r2, [r7, #24]
 8008c00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	f003 0303 	and.w	r3, r3, #3
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	d123      	bne.n	8008c56 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	08da      	lsrs	r2, r3, #3
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	3208      	adds	r2, #8
 8008c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	f003 0307 	and.w	r3, r3, #7
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	220f      	movs	r2, #15
 8008c26:	fa02 f303 	lsl.w	r3, r2, r3
 8008c2a:	43db      	mvns	r3, r3
 8008c2c:	69ba      	ldr	r2, [r7, #24]
 8008c2e:	4013      	ands	r3, r2
 8008c30:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	691a      	ldr	r2, [r3, #16]
 8008c36:	69fb      	ldr	r3, [r7, #28]
 8008c38:	f003 0307 	and.w	r3, r3, #7
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c42:	69ba      	ldr	r2, [r7, #24]
 8008c44:	4313      	orrs	r3, r2
 8008c46:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008c48:	69fb      	ldr	r3, [r7, #28]
 8008c4a:	08da      	lsrs	r2, r3, #3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	3208      	adds	r2, #8
 8008c50:	69b9      	ldr	r1, [r7, #24]
 8008c52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	005b      	lsls	r3, r3, #1
 8008c60:	2203      	movs	r2, #3
 8008c62:	fa02 f303 	lsl.w	r3, r2, r3
 8008c66:	43db      	mvns	r3, r3
 8008c68:	69ba      	ldr	r2, [r7, #24]
 8008c6a:	4013      	ands	r3, r2
 8008c6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	f003 0203 	and.w	r2, r3, #3
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	005b      	lsls	r3, r3, #1
 8008c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c7e:	69ba      	ldr	r2, [r7, #24]
 8008c80:	4313      	orrs	r3, r2
 8008c82:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	69ba      	ldr	r2, [r7, #24]
 8008c88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f000 80e0 	beq.w	8008e58 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c98:	4b2f      	ldr	r3, [pc, #188]	; (8008d58 <HAL_GPIO_Init+0x238>)
 8008c9a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8008c9e:	4a2e      	ldr	r2, [pc, #184]	; (8008d58 <HAL_GPIO_Init+0x238>)
 8008ca0:	f043 0302 	orr.w	r3, r3, #2
 8008ca4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8008ca8:	4b2b      	ldr	r3, [pc, #172]	; (8008d58 <HAL_GPIO_Init+0x238>)
 8008caa:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8008cae:	f003 0302 	and.w	r3, r3, #2
 8008cb2:	60fb      	str	r3, [r7, #12]
 8008cb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008cb6:	4a29      	ldr	r2, [pc, #164]	; (8008d5c <HAL_GPIO_Init+0x23c>)
 8008cb8:	69fb      	ldr	r3, [r7, #28]
 8008cba:	089b      	lsrs	r3, r3, #2
 8008cbc:	3302      	adds	r3, #2
 8008cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	f003 0303 	and.w	r3, r3, #3
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	220f      	movs	r2, #15
 8008cce:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd2:	43db      	mvns	r3, r3
 8008cd4:	69ba      	ldr	r2, [r7, #24]
 8008cd6:	4013      	ands	r3, r2
 8008cd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4a20      	ldr	r2, [pc, #128]	; (8008d60 <HAL_GPIO_Init+0x240>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d052      	beq.n	8008d88 <HAL_GPIO_Init+0x268>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	4a1f      	ldr	r2, [pc, #124]	; (8008d64 <HAL_GPIO_Init+0x244>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d031      	beq.n	8008d4e <HAL_GPIO_Init+0x22e>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	4a1e      	ldr	r2, [pc, #120]	; (8008d68 <HAL_GPIO_Init+0x248>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d02b      	beq.n	8008d4a <HAL_GPIO_Init+0x22a>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	4a1d      	ldr	r2, [pc, #116]	; (8008d6c <HAL_GPIO_Init+0x24c>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d025      	beq.n	8008d46 <HAL_GPIO_Init+0x226>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4a1c      	ldr	r2, [pc, #112]	; (8008d70 <HAL_GPIO_Init+0x250>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d01f      	beq.n	8008d42 <HAL_GPIO_Init+0x222>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4a1b      	ldr	r2, [pc, #108]	; (8008d74 <HAL_GPIO_Init+0x254>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d019      	beq.n	8008d3e <HAL_GPIO_Init+0x21e>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4a1a      	ldr	r2, [pc, #104]	; (8008d78 <HAL_GPIO_Init+0x258>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d013      	beq.n	8008d3a <HAL_GPIO_Init+0x21a>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4a19      	ldr	r2, [pc, #100]	; (8008d7c <HAL_GPIO_Init+0x25c>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d00d      	beq.n	8008d36 <HAL_GPIO_Init+0x216>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a18      	ldr	r2, [pc, #96]	; (8008d80 <HAL_GPIO_Init+0x260>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d007      	beq.n	8008d32 <HAL_GPIO_Init+0x212>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a17      	ldr	r2, [pc, #92]	; (8008d84 <HAL_GPIO_Init+0x264>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d101      	bne.n	8008d2e <HAL_GPIO_Init+0x20e>
 8008d2a:	2309      	movs	r3, #9
 8008d2c:	e02d      	b.n	8008d8a <HAL_GPIO_Init+0x26a>
 8008d2e:	230a      	movs	r3, #10
 8008d30:	e02b      	b.n	8008d8a <HAL_GPIO_Init+0x26a>
 8008d32:	2308      	movs	r3, #8
 8008d34:	e029      	b.n	8008d8a <HAL_GPIO_Init+0x26a>
 8008d36:	2307      	movs	r3, #7
 8008d38:	e027      	b.n	8008d8a <HAL_GPIO_Init+0x26a>
 8008d3a:	2306      	movs	r3, #6
 8008d3c:	e025      	b.n	8008d8a <HAL_GPIO_Init+0x26a>
 8008d3e:	2305      	movs	r3, #5
 8008d40:	e023      	b.n	8008d8a <HAL_GPIO_Init+0x26a>
 8008d42:	2304      	movs	r3, #4
 8008d44:	e021      	b.n	8008d8a <HAL_GPIO_Init+0x26a>
 8008d46:	2303      	movs	r3, #3
 8008d48:	e01f      	b.n	8008d8a <HAL_GPIO_Init+0x26a>
 8008d4a:	2302      	movs	r3, #2
 8008d4c:	e01d      	b.n	8008d8a <HAL_GPIO_Init+0x26a>
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e01b      	b.n	8008d8a <HAL_GPIO_Init+0x26a>
 8008d52:	bf00      	nop
 8008d54:	58000080 	.word	0x58000080
 8008d58:	58024400 	.word	0x58024400
 8008d5c:	58000400 	.word	0x58000400
 8008d60:	58020000 	.word	0x58020000
 8008d64:	58020400 	.word	0x58020400
 8008d68:	58020800 	.word	0x58020800
 8008d6c:	58020c00 	.word	0x58020c00
 8008d70:	58021000 	.word	0x58021000
 8008d74:	58021400 	.word	0x58021400
 8008d78:	58021800 	.word	0x58021800
 8008d7c:	58021c00 	.word	0x58021c00
 8008d80:	58022000 	.word	0x58022000
 8008d84:	58022400 	.word	0x58022400
 8008d88:	2300      	movs	r3, #0
 8008d8a:	69fa      	ldr	r2, [r7, #28]
 8008d8c:	f002 0203 	and.w	r2, r2, #3
 8008d90:	0092      	lsls	r2, r2, #2
 8008d92:	4093      	lsls	r3, r2
 8008d94:	69ba      	ldr	r2, [r7, #24]
 8008d96:	4313      	orrs	r3, r2
 8008d98:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008d9a:	4938      	ldr	r1, [pc, #224]	; (8008e7c <HAL_GPIO_Init+0x35c>)
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	089b      	lsrs	r3, r3, #2
 8008da0:	3302      	adds	r3, #2
 8008da2:	69ba      	ldr	r2, [r7, #24]
 8008da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	43db      	mvns	r3, r3
 8008db4:	69ba      	ldr	r2, [r7, #24]
 8008db6:	4013      	ands	r3, r2
 8008db8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d003      	beq.n	8008dce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008dc6:	69ba      	ldr	r2, [r7, #24]
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008dce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008dd2:	69bb      	ldr	r3, [r7, #24]
 8008dd4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	43db      	mvns	r3, r3
 8008de2:	69ba      	ldr	r2, [r7, #24]
 8008de4:	4013      	ands	r3, r2
 8008de6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d003      	beq.n	8008dfc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008df4:	69ba      	ldr	r2, [r7, #24]
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008dfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	43db      	mvns	r3, r3
 8008e0e:	69ba      	ldr	r2, [r7, #24]
 8008e10:	4013      	ands	r3, r2
 8008e12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d003      	beq.n	8008e28 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008e20:	69ba      	ldr	r2, [r7, #24]
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	4313      	orrs	r3, r2
 8008e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	69ba      	ldr	r2, [r7, #24]
 8008e2c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	43db      	mvns	r3, r3
 8008e38:	69ba      	ldr	r2, [r7, #24]
 8008e3a:	4013      	ands	r3, r2
 8008e3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d003      	beq.n	8008e52 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008e4a:	69ba      	ldr	r2, [r7, #24]
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	69ba      	ldr	r2, [r7, #24]
 8008e56:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008e58:	69fb      	ldr	r3, [r7, #28]
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	69fb      	ldr	r3, [r7, #28]
 8008e64:	fa22 f303 	lsr.w	r3, r2, r3
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	f47f ae63 	bne.w	8008b34 <HAL_GPIO_Init+0x14>
  }
}
 8008e6e:	bf00      	nop
 8008e70:	bf00      	nop
 8008e72:	3724      	adds	r7, #36	; 0x24
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr
 8008e7c:	58000400 	.word	0x58000400

08008e80 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b087      	sub	sp, #28
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008e8e:	4b75      	ldr	r3, [pc, #468]	; (8009064 <HAL_GPIO_DeInit+0x1e4>)
 8008e90:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8008e92:	e0d9      	b.n	8009048 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8008e94:	2201      	movs	r2, #1
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	fa02 f303 	lsl.w	r3, r2, r3
 8008e9c:	683a      	ldr	r2, [r7, #0]
 8008e9e:	4013      	ands	r3, r2
 8008ea0:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	f000 80cc 	beq.w	8009042 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008eaa:	4a6f      	ldr	r2, [pc, #444]	; (8009068 <HAL_GPIO_DeInit+0x1e8>)
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	089b      	lsrs	r3, r3, #2
 8008eb0:	3302      	adds	r3, #2
 8008eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008eb6:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	f003 0303 	and.w	r3, r3, #3
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	220f      	movs	r2, #15
 8008ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec6:	68ba      	ldr	r2, [r7, #8]
 8008ec8:	4013      	ands	r3, r2
 8008eca:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a67      	ldr	r2, [pc, #412]	; (800906c <HAL_GPIO_DeInit+0x1ec>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d037      	beq.n	8008f44 <HAL_GPIO_DeInit+0xc4>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	4a66      	ldr	r2, [pc, #408]	; (8009070 <HAL_GPIO_DeInit+0x1f0>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d031      	beq.n	8008f40 <HAL_GPIO_DeInit+0xc0>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	4a65      	ldr	r2, [pc, #404]	; (8009074 <HAL_GPIO_DeInit+0x1f4>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d02b      	beq.n	8008f3c <HAL_GPIO_DeInit+0xbc>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	4a64      	ldr	r2, [pc, #400]	; (8009078 <HAL_GPIO_DeInit+0x1f8>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d025      	beq.n	8008f38 <HAL_GPIO_DeInit+0xb8>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	4a63      	ldr	r2, [pc, #396]	; (800907c <HAL_GPIO_DeInit+0x1fc>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d01f      	beq.n	8008f34 <HAL_GPIO_DeInit+0xb4>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	4a62      	ldr	r2, [pc, #392]	; (8009080 <HAL_GPIO_DeInit+0x200>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d019      	beq.n	8008f30 <HAL_GPIO_DeInit+0xb0>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	4a61      	ldr	r2, [pc, #388]	; (8009084 <HAL_GPIO_DeInit+0x204>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d013      	beq.n	8008f2c <HAL_GPIO_DeInit+0xac>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	4a60      	ldr	r2, [pc, #384]	; (8009088 <HAL_GPIO_DeInit+0x208>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d00d      	beq.n	8008f28 <HAL_GPIO_DeInit+0xa8>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4a5f      	ldr	r2, [pc, #380]	; (800908c <HAL_GPIO_DeInit+0x20c>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d007      	beq.n	8008f24 <HAL_GPIO_DeInit+0xa4>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	4a5e      	ldr	r2, [pc, #376]	; (8009090 <HAL_GPIO_DeInit+0x210>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d101      	bne.n	8008f20 <HAL_GPIO_DeInit+0xa0>
 8008f1c:	2309      	movs	r3, #9
 8008f1e:	e012      	b.n	8008f46 <HAL_GPIO_DeInit+0xc6>
 8008f20:	230a      	movs	r3, #10
 8008f22:	e010      	b.n	8008f46 <HAL_GPIO_DeInit+0xc6>
 8008f24:	2308      	movs	r3, #8
 8008f26:	e00e      	b.n	8008f46 <HAL_GPIO_DeInit+0xc6>
 8008f28:	2307      	movs	r3, #7
 8008f2a:	e00c      	b.n	8008f46 <HAL_GPIO_DeInit+0xc6>
 8008f2c:	2306      	movs	r3, #6
 8008f2e:	e00a      	b.n	8008f46 <HAL_GPIO_DeInit+0xc6>
 8008f30:	2305      	movs	r3, #5
 8008f32:	e008      	b.n	8008f46 <HAL_GPIO_DeInit+0xc6>
 8008f34:	2304      	movs	r3, #4
 8008f36:	e006      	b.n	8008f46 <HAL_GPIO_DeInit+0xc6>
 8008f38:	2303      	movs	r3, #3
 8008f3a:	e004      	b.n	8008f46 <HAL_GPIO_DeInit+0xc6>
 8008f3c:	2302      	movs	r3, #2
 8008f3e:	e002      	b.n	8008f46 <HAL_GPIO_DeInit+0xc6>
 8008f40:	2301      	movs	r3, #1
 8008f42:	e000      	b.n	8008f46 <HAL_GPIO_DeInit+0xc6>
 8008f44:	2300      	movs	r3, #0
 8008f46:	697a      	ldr	r2, [r7, #20]
 8008f48:	f002 0203 	and.w	r2, r2, #3
 8008f4c:	0092      	lsls	r2, r2, #2
 8008f4e:	4093      	lsls	r3, r2
 8008f50:	68ba      	ldr	r2, [r7, #8]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d136      	bne.n	8008fc4 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	43db      	mvns	r3, r3
 8008f5e:	401a      	ands	r2, r3
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	685a      	ldr	r2, [r3, #4]
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	43db      	mvns	r3, r3
 8008f6c:	401a      	ands	r2, r3
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8008f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f76:	685a      	ldr	r2, [r3, #4]
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	43db      	mvns	r3, r3
 8008f7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008f80:	4013      	ands	r3, r2
 8008f82:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8008f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	43db      	mvns	r3, r3
 8008f8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008f92:	4013      	ands	r3, r2
 8008f94:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	f003 0303 	and.w	r3, r3, #3
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	220f      	movs	r2, #15
 8008fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fa4:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008fa6:	4a30      	ldr	r2, [pc, #192]	; (8009068 <HAL_GPIO_DeInit+0x1e8>)
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	089b      	lsrs	r3, r3, #2
 8008fac:	3302      	adds	r3, #2
 8008fae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	43da      	mvns	r2, r3
 8008fb6:	482c      	ldr	r0, [pc, #176]	; (8009068 <HAL_GPIO_DeInit+0x1e8>)
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	089b      	lsrs	r3, r3, #2
 8008fbc:	400a      	ands	r2, r1
 8008fbe:	3302      	adds	r3, #2
 8008fc0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	005b      	lsls	r3, r3, #1
 8008fcc:	2103      	movs	r1, #3
 8008fce:	fa01 f303 	lsl.w	r3, r1, r3
 8008fd2:	431a      	orrs	r2, r3
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	08da      	lsrs	r2, r3, #3
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	3208      	adds	r2, #8
 8008fe0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	f003 0307 	and.w	r3, r3, #7
 8008fea:	009b      	lsls	r3, r3, #2
 8008fec:	220f      	movs	r2, #15
 8008fee:	fa02 f303 	lsl.w	r3, r2, r3
 8008ff2:	43db      	mvns	r3, r3
 8008ff4:	697a      	ldr	r2, [r7, #20]
 8008ff6:	08d2      	lsrs	r2, r2, #3
 8008ff8:	4019      	ands	r1, r3
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	3208      	adds	r2, #8
 8008ffe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	68da      	ldr	r2, [r3, #12]
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	005b      	lsls	r3, r3, #1
 800900a:	2103      	movs	r1, #3
 800900c:	fa01 f303 	lsl.w	r3, r1, r3
 8009010:	43db      	mvns	r3, r3
 8009012:	401a      	ands	r2, r3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	685a      	ldr	r2, [r3, #4]
 800901c:	2101      	movs	r1, #1
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	fa01 f303 	lsl.w	r3, r1, r3
 8009024:	43db      	mvns	r3, r3
 8009026:	401a      	ands	r2, r3
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	689a      	ldr	r2, [r3, #8]
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	005b      	lsls	r3, r3, #1
 8009034:	2103      	movs	r1, #3
 8009036:	fa01 f303 	lsl.w	r3, r1, r3
 800903a:	43db      	mvns	r3, r3
 800903c:	401a      	ands	r2, r3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	609a      	str	r2, [r3, #8]
    }

    position++;
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	3301      	adds	r3, #1
 8009046:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8009048:	683a      	ldr	r2, [r7, #0]
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	fa22 f303 	lsr.w	r3, r2, r3
 8009050:	2b00      	cmp	r3, #0
 8009052:	f47f af1f 	bne.w	8008e94 <HAL_GPIO_DeInit+0x14>
  }
}
 8009056:	bf00      	nop
 8009058:	bf00      	nop
 800905a:	371c      	adds	r7, #28
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr
 8009064:	58000080 	.word	0x58000080
 8009068:	58000400 	.word	0x58000400
 800906c:	58020000 	.word	0x58020000
 8009070:	58020400 	.word	0x58020400
 8009074:	58020800 	.word	0x58020800
 8009078:	58020c00 	.word	0x58020c00
 800907c:	58021000 	.word	0x58021000
 8009080:	58021400 	.word	0x58021400
 8009084:	58021800 	.word	0x58021800
 8009088:	58021c00 	.word	0x58021c00
 800908c:	58022000 	.word	0x58022000
 8009090:	58022400 	.word	0x58022400

08009094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	460b      	mov	r3, r1
 800909e:	807b      	strh	r3, [r7, #2]
 80090a0:	4613      	mov	r3, r2
 80090a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80090a4:	787b      	ldrb	r3, [r7, #1]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d003      	beq.n	80090b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80090aa:	887a      	ldrh	r2, [r7, #2]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80090b0:	e003      	b.n	80090ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80090b2:	887b      	ldrh	r3, [r7, #2]
 80090b4:	041a      	lsls	r2, r3, #16
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	619a      	str	r2, [r3, #24]
}
 80090ba:	bf00      	nop
 80090bc:	370c      	adds	r7, #12
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr

080090c6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80090c6:	b480      	push	{r7}
 80090c8:	b085      	sub	sp, #20
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
 80090ce:	460b      	mov	r3, r1
 80090d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	695b      	ldr	r3, [r3, #20]
 80090d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80090d8:	887a      	ldrh	r2, [r7, #2]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	4013      	ands	r3, r2
 80090de:	041a      	lsls	r2, r3, #16
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	43d9      	mvns	r1, r3
 80090e4:	887b      	ldrh	r3, [r7, #2]
 80090e6:	400b      	ands	r3, r1
 80090e8:	431a      	orrs	r2, r3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	619a      	str	r2, [r3, #24]
}
 80090ee:	bf00      	nop
 80090f0:	3714      	adds	r7, #20
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr
	...

080090fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b082      	sub	sp, #8
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d101      	bne.n	800910e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e07f      	b.n	800920e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009114:	b2db      	uxtb	r3, r3
 8009116:	2b00      	cmp	r3, #0
 8009118:	d106      	bne.n	8009128 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 f8a9 	bl	800927a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2224      	movs	r2, #36	; 0x24
 800912c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f022 0201 	bic.w	r2, r2, #1
 800913e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	685a      	ldr	r2, [r3, #4]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800914c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	689a      	ldr	r2, [r3, #8]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800915c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	2b01      	cmp	r3, #1
 8009164:	d107      	bne.n	8009176 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	689a      	ldr	r2, [r3, #8]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009172:	609a      	str	r2, [r3, #8]
 8009174:	e006      	b.n	8009184 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	689a      	ldr	r2, [r3, #8]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009182:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	2b02      	cmp	r3, #2
 800918a:	d104      	bne.n	8009196 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009194:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	6859      	ldr	r1, [r3, #4]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	4b1d      	ldr	r3, [pc, #116]	; (8009218 <HAL_I2C_Init+0x11c>)
 80091a2:	430b      	orrs	r3, r1
 80091a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	68da      	ldr	r2, [r3, #12]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80091b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	691a      	ldr	r2, [r3, #16]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	695b      	ldr	r3, [r3, #20]
 80091be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	699b      	ldr	r3, [r3, #24]
 80091c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	430a      	orrs	r2, r1
 80091ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	69d9      	ldr	r1, [r3, #28]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6a1a      	ldr	r2, [r3, #32]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	430a      	orrs	r2, r1
 80091de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f042 0201 	orr.w	r2, r2, #1
 80091ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2220      	movs	r2, #32
 80091fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800920c:	2300      	movs	r3, #0
}
 800920e:	4618      	mov	r0, r3
 8009210:	3708      	adds	r7, #8
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	02008000 	.word	0x02008000

0800921c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d101      	bne.n	800922e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800922a:	2301      	movs	r3, #1
 800922c:	e021      	b.n	8009272 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2224      	movs	r2, #36	; 0x24
 8009232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f022 0201 	bic.w	r2, r2, #1
 8009244:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 f821 	bl	800928e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2200      	movs	r2, #0
 800926c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009270:	2300      	movs	r3, #0
}
 8009272:	4618      	mov	r0, r3
 8009274:	3708      	adds	r7, #8
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800927a:	b480      	push	{r7}
 800927c:	b083      	sub	sp, #12
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8009282:	bf00      	nop
 8009284:	370c      	adds	r7, #12
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr

0800928e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800928e:	b480      	push	{r7}
 8009290:	b083      	sub	sp, #12
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8009296:	bf00      	nop
 8009298:	370c      	adds	r7, #12
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr
	...

080092a4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b088      	sub	sp, #32
 80092a8:	af02      	add	r7, sp, #8
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	4608      	mov	r0, r1
 80092ae:	4611      	mov	r1, r2
 80092b0:	461a      	mov	r2, r3
 80092b2:	4603      	mov	r3, r0
 80092b4:	817b      	strh	r3, [r7, #10]
 80092b6:	460b      	mov	r3, r1
 80092b8:	813b      	strh	r3, [r7, #8]
 80092ba:	4613      	mov	r3, r2
 80092bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	2b20      	cmp	r3, #32
 80092c8:	f040 80f9 	bne.w	80094be <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80092cc:	6a3b      	ldr	r3, [r7, #32]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d002      	beq.n	80092d8 <HAL_I2C_Mem_Write+0x34>
 80092d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d105      	bne.n	80092e4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80092e0:	2301      	movs	r3, #1
 80092e2:	e0ed      	b.n	80094c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d101      	bne.n	80092f2 <HAL_I2C_Mem_Write+0x4e>
 80092ee:	2302      	movs	r3, #2
 80092f0:	e0e6      	b.n	80094c0 <HAL_I2C_Mem_Write+0x21c>
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2201      	movs	r2, #1
 80092f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80092fa:	f7fb f897 	bl	800442c <HAL_GetTick>
 80092fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	9300      	str	r3, [sp, #0]
 8009304:	2319      	movs	r3, #25
 8009306:	2201      	movs	r2, #1
 8009308:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800930c:	68f8      	ldr	r0, [r7, #12]
 800930e:	f000 fadd 	bl	80098cc <I2C_WaitOnFlagUntilTimeout>
 8009312:	4603      	mov	r3, r0
 8009314:	2b00      	cmp	r3, #0
 8009316:	d001      	beq.n	800931c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009318:	2301      	movs	r3, #1
 800931a:	e0d1      	b.n	80094c0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2221      	movs	r2, #33	; 0x21
 8009320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2240      	movs	r2, #64	; 0x40
 8009328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2200      	movs	r2, #0
 8009330:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	6a3a      	ldr	r2, [r7, #32]
 8009336:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800933c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2200      	movs	r2, #0
 8009342:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009344:	88f8      	ldrh	r0, [r7, #6]
 8009346:	893a      	ldrh	r2, [r7, #8]
 8009348:	8979      	ldrh	r1, [r7, #10]
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	9301      	str	r3, [sp, #4]
 800934e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009350:	9300      	str	r3, [sp, #0]
 8009352:	4603      	mov	r3, r0
 8009354:	68f8      	ldr	r0, [r7, #12]
 8009356:	f000 f9ed 	bl	8009734 <I2C_RequestMemoryWrite>
 800935a:	4603      	mov	r3, r0
 800935c:	2b00      	cmp	r3, #0
 800935e:	d005      	beq.n	800936c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2200      	movs	r2, #0
 8009364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009368:	2301      	movs	r3, #1
 800936a:	e0a9      	b.n	80094c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009370:	b29b      	uxth	r3, r3
 8009372:	2bff      	cmp	r3, #255	; 0xff
 8009374:	d90e      	bls.n	8009394 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	22ff      	movs	r2, #255	; 0xff
 800937a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009380:	b2da      	uxtb	r2, r3
 8009382:	8979      	ldrh	r1, [r7, #10]
 8009384:	2300      	movs	r3, #0
 8009386:	9300      	str	r3, [sp, #0]
 8009388:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800938c:	68f8      	ldr	r0, [r7, #12]
 800938e:	f000 fc57 	bl	8009c40 <I2C_TransferConfig>
 8009392:	e00f      	b.n	80093b4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009398:	b29a      	uxth	r2, r3
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093a2:	b2da      	uxtb	r2, r3
 80093a4:	8979      	ldrh	r1, [r7, #10]
 80093a6:	2300      	movs	r3, #0
 80093a8:	9300      	str	r3, [sp, #0]
 80093aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80093ae:	68f8      	ldr	r0, [r7, #12]
 80093b0:	f000 fc46 	bl	8009c40 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093b4:	697a      	ldr	r2, [r7, #20]
 80093b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093b8:	68f8      	ldr	r0, [r7, #12]
 80093ba:	f000 fad6 	bl	800996a <I2C_WaitOnTXISFlagUntilTimeout>
 80093be:	4603      	mov	r3, r0
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d001      	beq.n	80093c8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80093c4:	2301      	movs	r3, #1
 80093c6:	e07b      	b.n	80094c0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093cc:	781a      	ldrb	r2, [r3, #0]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d8:	1c5a      	adds	r2, r3, #1
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	3b01      	subs	r3, #1
 80093e6:	b29a      	uxth	r2, r3
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093f0:	3b01      	subs	r3, #1
 80093f2:	b29a      	uxth	r2, r3
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d034      	beq.n	800946c <HAL_I2C_Mem_Write+0x1c8>
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009406:	2b00      	cmp	r3, #0
 8009408:	d130      	bne.n	800946c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	9300      	str	r3, [sp, #0]
 800940e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009410:	2200      	movs	r2, #0
 8009412:	2180      	movs	r1, #128	; 0x80
 8009414:	68f8      	ldr	r0, [r7, #12]
 8009416:	f000 fa59 	bl	80098cc <I2C_WaitOnFlagUntilTimeout>
 800941a:	4603      	mov	r3, r0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d001      	beq.n	8009424 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009420:	2301      	movs	r3, #1
 8009422:	e04d      	b.n	80094c0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009428:	b29b      	uxth	r3, r3
 800942a:	2bff      	cmp	r3, #255	; 0xff
 800942c:	d90e      	bls.n	800944c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	22ff      	movs	r2, #255	; 0xff
 8009432:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009438:	b2da      	uxtb	r2, r3
 800943a:	8979      	ldrh	r1, [r7, #10]
 800943c:	2300      	movs	r3, #0
 800943e:	9300      	str	r3, [sp, #0]
 8009440:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009444:	68f8      	ldr	r0, [r7, #12]
 8009446:	f000 fbfb 	bl	8009c40 <I2C_TransferConfig>
 800944a:	e00f      	b.n	800946c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009450:	b29a      	uxth	r2, r3
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800945a:	b2da      	uxtb	r2, r3
 800945c:	8979      	ldrh	r1, [r7, #10]
 800945e:	2300      	movs	r3, #0
 8009460:	9300      	str	r3, [sp, #0]
 8009462:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009466:	68f8      	ldr	r0, [r7, #12]
 8009468:	f000 fbea 	bl	8009c40 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009470:	b29b      	uxth	r3, r3
 8009472:	2b00      	cmp	r3, #0
 8009474:	d19e      	bne.n	80093b4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009476:	697a      	ldr	r2, [r7, #20]
 8009478:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800947a:	68f8      	ldr	r0, [r7, #12]
 800947c:	f000 fabc 	bl	80099f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009480:	4603      	mov	r3, r0
 8009482:	2b00      	cmp	r3, #0
 8009484:	d001      	beq.n	800948a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009486:	2301      	movs	r3, #1
 8009488:	e01a      	b.n	80094c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	2220      	movs	r2, #32
 8009490:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	6859      	ldr	r1, [r3, #4]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681a      	ldr	r2, [r3, #0]
 800949c:	4b0a      	ldr	r3, [pc, #40]	; (80094c8 <HAL_I2C_Mem_Write+0x224>)
 800949e:	400b      	ands	r3, r1
 80094a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2220      	movs	r2, #32
 80094a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2200      	movs	r2, #0
 80094ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80094ba:	2300      	movs	r3, #0
 80094bc:	e000      	b.n	80094c0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80094be:	2302      	movs	r3, #2
  }
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3718      	adds	r7, #24
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	fe00e800 	.word	0xfe00e800

080094cc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b088      	sub	sp, #32
 80094d0:	af02      	add	r7, sp, #8
 80094d2:	60f8      	str	r0, [r7, #12]
 80094d4:	4608      	mov	r0, r1
 80094d6:	4611      	mov	r1, r2
 80094d8:	461a      	mov	r2, r3
 80094da:	4603      	mov	r3, r0
 80094dc:	817b      	strh	r3, [r7, #10]
 80094de:	460b      	mov	r3, r1
 80094e0:	813b      	strh	r3, [r7, #8]
 80094e2:	4613      	mov	r3, r2
 80094e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094ec:	b2db      	uxtb	r3, r3
 80094ee:	2b20      	cmp	r3, #32
 80094f0:	f040 80fd 	bne.w	80096ee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80094f4:	6a3b      	ldr	r3, [r7, #32]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d002      	beq.n	8009500 <HAL_I2C_Mem_Read+0x34>
 80094fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d105      	bne.n	800950c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009506:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009508:	2301      	movs	r3, #1
 800950a:	e0f1      	b.n	80096f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009512:	2b01      	cmp	r3, #1
 8009514:	d101      	bne.n	800951a <HAL_I2C_Mem_Read+0x4e>
 8009516:	2302      	movs	r3, #2
 8009518:	e0ea      	b.n	80096f0 <HAL_I2C_Mem_Read+0x224>
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2201      	movs	r2, #1
 800951e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009522:	f7fa ff83 	bl	800442c <HAL_GetTick>
 8009526:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	9300      	str	r3, [sp, #0]
 800952c:	2319      	movs	r3, #25
 800952e:	2201      	movs	r2, #1
 8009530:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009534:	68f8      	ldr	r0, [r7, #12]
 8009536:	f000 f9c9 	bl	80098cc <I2C_WaitOnFlagUntilTimeout>
 800953a:	4603      	mov	r3, r0
 800953c:	2b00      	cmp	r3, #0
 800953e:	d001      	beq.n	8009544 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009540:	2301      	movs	r3, #1
 8009542:	e0d5      	b.n	80096f0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2222      	movs	r2, #34	; 0x22
 8009548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2240      	movs	r2, #64	; 0x40
 8009550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2200      	movs	r2, #0
 8009558:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6a3a      	ldr	r2, [r7, #32]
 800955e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009564:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2200      	movs	r2, #0
 800956a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800956c:	88f8      	ldrh	r0, [r7, #6]
 800956e:	893a      	ldrh	r2, [r7, #8]
 8009570:	8979      	ldrh	r1, [r7, #10]
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	9301      	str	r3, [sp, #4]
 8009576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009578:	9300      	str	r3, [sp, #0]
 800957a:	4603      	mov	r3, r0
 800957c:	68f8      	ldr	r0, [r7, #12]
 800957e:	f000 f92d 	bl	80097dc <I2C_RequestMemoryRead>
 8009582:	4603      	mov	r3, r0
 8009584:	2b00      	cmp	r3, #0
 8009586:	d005      	beq.n	8009594 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2200      	movs	r2, #0
 800958c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009590:	2301      	movs	r3, #1
 8009592:	e0ad      	b.n	80096f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009598:	b29b      	uxth	r3, r3
 800959a:	2bff      	cmp	r3, #255	; 0xff
 800959c:	d90e      	bls.n	80095bc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	22ff      	movs	r2, #255	; 0xff
 80095a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095a8:	b2da      	uxtb	r2, r3
 80095aa:	8979      	ldrh	r1, [r7, #10]
 80095ac:	4b52      	ldr	r3, [pc, #328]	; (80096f8 <HAL_I2C_Mem_Read+0x22c>)
 80095ae:	9300      	str	r3, [sp, #0]
 80095b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80095b4:	68f8      	ldr	r0, [r7, #12]
 80095b6:	f000 fb43 	bl	8009c40 <I2C_TransferConfig>
 80095ba:	e00f      	b.n	80095dc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095c0:	b29a      	uxth	r2, r3
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095ca:	b2da      	uxtb	r2, r3
 80095cc:	8979      	ldrh	r1, [r7, #10]
 80095ce:	4b4a      	ldr	r3, [pc, #296]	; (80096f8 <HAL_I2C_Mem_Read+0x22c>)
 80095d0:	9300      	str	r3, [sp, #0]
 80095d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80095d6:	68f8      	ldr	r0, [r7, #12]
 80095d8:	f000 fb32 	bl	8009c40 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	9300      	str	r3, [sp, #0]
 80095e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e2:	2200      	movs	r2, #0
 80095e4:	2104      	movs	r1, #4
 80095e6:	68f8      	ldr	r0, [r7, #12]
 80095e8:	f000 f970 	bl	80098cc <I2C_WaitOnFlagUntilTimeout>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d001      	beq.n	80095f6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80095f2:	2301      	movs	r3, #1
 80095f4:	e07c      	b.n	80096f0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009600:	b2d2      	uxtb	r2, r2
 8009602:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009608:	1c5a      	adds	r2, r3, #1
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009612:	3b01      	subs	r3, #1
 8009614:	b29a      	uxth	r2, r3
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800961e:	b29b      	uxth	r3, r3
 8009620:	3b01      	subs	r3, #1
 8009622:	b29a      	uxth	r2, r3
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800962c:	b29b      	uxth	r3, r3
 800962e:	2b00      	cmp	r3, #0
 8009630:	d034      	beq.n	800969c <HAL_I2C_Mem_Read+0x1d0>
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009636:	2b00      	cmp	r3, #0
 8009638:	d130      	bne.n	800969c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	9300      	str	r3, [sp, #0]
 800963e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009640:	2200      	movs	r2, #0
 8009642:	2180      	movs	r1, #128	; 0x80
 8009644:	68f8      	ldr	r0, [r7, #12]
 8009646:	f000 f941 	bl	80098cc <I2C_WaitOnFlagUntilTimeout>
 800964a:	4603      	mov	r3, r0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d001      	beq.n	8009654 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009650:	2301      	movs	r3, #1
 8009652:	e04d      	b.n	80096f0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009658:	b29b      	uxth	r3, r3
 800965a:	2bff      	cmp	r3, #255	; 0xff
 800965c:	d90e      	bls.n	800967c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	22ff      	movs	r2, #255	; 0xff
 8009662:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009668:	b2da      	uxtb	r2, r3
 800966a:	8979      	ldrh	r1, [r7, #10]
 800966c:	2300      	movs	r3, #0
 800966e:	9300      	str	r3, [sp, #0]
 8009670:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009674:	68f8      	ldr	r0, [r7, #12]
 8009676:	f000 fae3 	bl	8009c40 <I2C_TransferConfig>
 800967a:	e00f      	b.n	800969c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009680:	b29a      	uxth	r2, r3
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800968a:	b2da      	uxtb	r2, r3
 800968c:	8979      	ldrh	r1, [r7, #10]
 800968e:	2300      	movs	r3, #0
 8009690:	9300      	str	r3, [sp, #0]
 8009692:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	f000 fad2 	bl	8009c40 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d19a      	bne.n	80095dc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096a6:	697a      	ldr	r2, [r7, #20]
 80096a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096aa:	68f8      	ldr	r0, [r7, #12]
 80096ac:	f000 f9a4 	bl	80099f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d001      	beq.n	80096ba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80096b6:	2301      	movs	r3, #1
 80096b8:	e01a      	b.n	80096f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	2220      	movs	r2, #32
 80096c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	6859      	ldr	r1, [r3, #4]
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	4b0b      	ldr	r3, [pc, #44]	; (80096fc <HAL_I2C_Mem_Read+0x230>)
 80096ce:	400b      	ands	r3, r1
 80096d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2220      	movs	r2, #32
 80096d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2200      	movs	r2, #0
 80096de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80096ea:	2300      	movs	r3, #0
 80096ec:	e000      	b.n	80096f0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80096ee:	2302      	movs	r3, #2
  }
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3718      	adds	r7, #24
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}
 80096f8:	80002400 	.word	0x80002400
 80096fc:	fe00e800 	.word	0xfe00e800

08009700 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800970e:	b2db      	uxtb	r3, r3
}
 8009710:	4618      	mov	r0, r3
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8009728:	4618      	mov	r0, r3
 800972a:	370c      	adds	r7, #12
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b086      	sub	sp, #24
 8009738:	af02      	add	r7, sp, #8
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	4608      	mov	r0, r1
 800973e:	4611      	mov	r1, r2
 8009740:	461a      	mov	r2, r3
 8009742:	4603      	mov	r3, r0
 8009744:	817b      	strh	r3, [r7, #10]
 8009746:	460b      	mov	r3, r1
 8009748:	813b      	strh	r3, [r7, #8]
 800974a:	4613      	mov	r3, r2
 800974c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800974e:	88fb      	ldrh	r3, [r7, #6]
 8009750:	b2da      	uxtb	r2, r3
 8009752:	8979      	ldrh	r1, [r7, #10]
 8009754:	4b20      	ldr	r3, [pc, #128]	; (80097d8 <I2C_RequestMemoryWrite+0xa4>)
 8009756:	9300      	str	r3, [sp, #0]
 8009758:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800975c:	68f8      	ldr	r0, [r7, #12]
 800975e:	f000 fa6f 	bl	8009c40 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009762:	69fa      	ldr	r2, [r7, #28]
 8009764:	69b9      	ldr	r1, [r7, #24]
 8009766:	68f8      	ldr	r0, [r7, #12]
 8009768:	f000 f8ff 	bl	800996a <I2C_WaitOnTXISFlagUntilTimeout>
 800976c:	4603      	mov	r3, r0
 800976e:	2b00      	cmp	r3, #0
 8009770:	d001      	beq.n	8009776 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	e02c      	b.n	80097d0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009776:	88fb      	ldrh	r3, [r7, #6]
 8009778:	2b01      	cmp	r3, #1
 800977a:	d105      	bne.n	8009788 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800977c:	893b      	ldrh	r3, [r7, #8]
 800977e:	b2da      	uxtb	r2, r3
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	629a      	str	r2, [r3, #40]	; 0x28
 8009786:	e015      	b.n	80097b4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009788:	893b      	ldrh	r3, [r7, #8]
 800978a:	0a1b      	lsrs	r3, r3, #8
 800978c:	b29b      	uxth	r3, r3
 800978e:	b2da      	uxtb	r2, r3
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009796:	69fa      	ldr	r2, [r7, #28]
 8009798:	69b9      	ldr	r1, [r7, #24]
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f000 f8e5 	bl	800996a <I2C_WaitOnTXISFlagUntilTimeout>
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d001      	beq.n	80097aa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80097a6:	2301      	movs	r3, #1
 80097a8:	e012      	b.n	80097d0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80097aa:	893b      	ldrh	r3, [r7, #8]
 80097ac:	b2da      	uxtb	r2, r3
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	9300      	str	r3, [sp, #0]
 80097b8:	69bb      	ldr	r3, [r7, #24]
 80097ba:	2200      	movs	r2, #0
 80097bc:	2180      	movs	r1, #128	; 0x80
 80097be:	68f8      	ldr	r0, [r7, #12]
 80097c0:	f000 f884 	bl	80098cc <I2C_WaitOnFlagUntilTimeout>
 80097c4:	4603      	mov	r3, r0
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d001      	beq.n	80097ce <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80097ca:	2301      	movs	r3, #1
 80097cc:	e000      	b.n	80097d0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80097ce:	2300      	movs	r3, #0
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3710      	adds	r7, #16
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	80002000 	.word	0x80002000

080097dc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b086      	sub	sp, #24
 80097e0:	af02      	add	r7, sp, #8
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	4608      	mov	r0, r1
 80097e6:	4611      	mov	r1, r2
 80097e8:	461a      	mov	r2, r3
 80097ea:	4603      	mov	r3, r0
 80097ec:	817b      	strh	r3, [r7, #10]
 80097ee:	460b      	mov	r3, r1
 80097f0:	813b      	strh	r3, [r7, #8]
 80097f2:	4613      	mov	r3, r2
 80097f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80097f6:	88fb      	ldrh	r3, [r7, #6]
 80097f8:	b2da      	uxtb	r2, r3
 80097fa:	8979      	ldrh	r1, [r7, #10]
 80097fc:	4b20      	ldr	r3, [pc, #128]	; (8009880 <I2C_RequestMemoryRead+0xa4>)
 80097fe:	9300      	str	r3, [sp, #0]
 8009800:	2300      	movs	r3, #0
 8009802:	68f8      	ldr	r0, [r7, #12]
 8009804:	f000 fa1c 	bl	8009c40 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009808:	69fa      	ldr	r2, [r7, #28]
 800980a:	69b9      	ldr	r1, [r7, #24]
 800980c:	68f8      	ldr	r0, [r7, #12]
 800980e:	f000 f8ac 	bl	800996a <I2C_WaitOnTXISFlagUntilTimeout>
 8009812:	4603      	mov	r3, r0
 8009814:	2b00      	cmp	r3, #0
 8009816:	d001      	beq.n	800981c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009818:	2301      	movs	r3, #1
 800981a:	e02c      	b.n	8009876 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800981c:	88fb      	ldrh	r3, [r7, #6]
 800981e:	2b01      	cmp	r3, #1
 8009820:	d105      	bne.n	800982e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009822:	893b      	ldrh	r3, [r7, #8]
 8009824:	b2da      	uxtb	r2, r3
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	629a      	str	r2, [r3, #40]	; 0x28
 800982c:	e015      	b.n	800985a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800982e:	893b      	ldrh	r3, [r7, #8]
 8009830:	0a1b      	lsrs	r3, r3, #8
 8009832:	b29b      	uxth	r3, r3
 8009834:	b2da      	uxtb	r2, r3
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800983c:	69fa      	ldr	r2, [r7, #28]
 800983e:	69b9      	ldr	r1, [r7, #24]
 8009840:	68f8      	ldr	r0, [r7, #12]
 8009842:	f000 f892 	bl	800996a <I2C_WaitOnTXISFlagUntilTimeout>
 8009846:	4603      	mov	r3, r0
 8009848:	2b00      	cmp	r3, #0
 800984a:	d001      	beq.n	8009850 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800984c:	2301      	movs	r3, #1
 800984e:	e012      	b.n	8009876 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009850:	893b      	ldrh	r3, [r7, #8]
 8009852:	b2da      	uxtb	r2, r3
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800985a:	69fb      	ldr	r3, [r7, #28]
 800985c:	9300      	str	r3, [sp, #0]
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	2200      	movs	r2, #0
 8009862:	2140      	movs	r1, #64	; 0x40
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f000 f831 	bl	80098cc <I2C_WaitOnFlagUntilTimeout>
 800986a:	4603      	mov	r3, r0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d001      	beq.n	8009874 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009870:	2301      	movs	r3, #1
 8009872:	e000      	b.n	8009876 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009874:	2300      	movs	r3, #0
}
 8009876:	4618      	mov	r0, r3
 8009878:	3710      	adds	r7, #16
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	80002000 	.word	0x80002000

08009884 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009884:	b480      	push	{r7}
 8009886:	b083      	sub	sp, #12
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	699b      	ldr	r3, [r3, #24]
 8009892:	f003 0302 	and.w	r3, r3, #2
 8009896:	2b02      	cmp	r3, #2
 8009898:	d103      	bne.n	80098a2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	2200      	movs	r2, #0
 80098a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	699b      	ldr	r3, [r3, #24]
 80098a8:	f003 0301 	and.w	r3, r3, #1
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d007      	beq.n	80098c0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	699a      	ldr	r2, [r3, #24]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f042 0201 	orr.w	r2, r2, #1
 80098be:	619a      	str	r2, [r3, #24]
  }
}
 80098c0:	bf00      	nop
 80098c2:	370c      	adds	r7, #12
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	60b9      	str	r1, [r7, #8]
 80098d6:	603b      	str	r3, [r7, #0]
 80098d8:	4613      	mov	r3, r2
 80098da:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80098dc:	e031      	b.n	8009942 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098e4:	d02d      	beq.n	8009942 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098e6:	f7fa fda1 	bl	800442c <HAL_GetTick>
 80098ea:	4602      	mov	r2, r0
 80098ec:	69bb      	ldr	r3, [r7, #24]
 80098ee:	1ad3      	subs	r3, r2, r3
 80098f0:	683a      	ldr	r2, [r7, #0]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d302      	bcc.n	80098fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d122      	bne.n	8009942 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	699a      	ldr	r2, [r3, #24]
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	4013      	ands	r3, r2
 8009906:	68ba      	ldr	r2, [r7, #8]
 8009908:	429a      	cmp	r2, r3
 800990a:	bf0c      	ite	eq
 800990c:	2301      	moveq	r3, #1
 800990e:	2300      	movne	r3, #0
 8009910:	b2db      	uxtb	r3, r3
 8009912:	461a      	mov	r2, r3
 8009914:	79fb      	ldrb	r3, [r7, #7]
 8009916:	429a      	cmp	r2, r3
 8009918:	d113      	bne.n	8009942 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800991e:	f043 0220 	orr.w	r2, r3, #32
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2220      	movs	r2, #32
 800992a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2200      	movs	r2, #0
 8009932:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2200      	movs	r2, #0
 800993a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800993e:	2301      	movs	r3, #1
 8009940:	e00f      	b.n	8009962 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	699a      	ldr	r2, [r3, #24]
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	4013      	ands	r3, r2
 800994c:	68ba      	ldr	r2, [r7, #8]
 800994e:	429a      	cmp	r2, r3
 8009950:	bf0c      	ite	eq
 8009952:	2301      	moveq	r3, #1
 8009954:	2300      	movne	r3, #0
 8009956:	b2db      	uxtb	r3, r3
 8009958:	461a      	mov	r2, r3
 800995a:	79fb      	ldrb	r3, [r7, #7]
 800995c:	429a      	cmp	r2, r3
 800995e:	d0be      	beq.n	80098de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009960:	2300      	movs	r3, #0
}
 8009962:	4618      	mov	r0, r3
 8009964:	3710      	adds	r7, #16
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}

0800996a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800996a:	b580      	push	{r7, lr}
 800996c:	b084      	sub	sp, #16
 800996e:	af00      	add	r7, sp, #0
 8009970:	60f8      	str	r0, [r7, #12]
 8009972:	60b9      	str	r1, [r7, #8]
 8009974:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009976:	e033      	b.n	80099e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	68b9      	ldr	r1, [r7, #8]
 800997c:	68f8      	ldr	r0, [r7, #12]
 800997e:	f000 f87f 	bl	8009a80 <I2C_IsErrorOccurred>
 8009982:	4603      	mov	r3, r0
 8009984:	2b00      	cmp	r3, #0
 8009986:	d001      	beq.n	800998c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009988:	2301      	movs	r3, #1
 800998a:	e031      	b.n	80099f0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009992:	d025      	beq.n	80099e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009994:	f7fa fd4a 	bl	800442c <HAL_GetTick>
 8009998:	4602      	mov	r2, r0
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	1ad3      	subs	r3, r2, r3
 800999e:	68ba      	ldr	r2, [r7, #8]
 80099a0:	429a      	cmp	r2, r3
 80099a2:	d302      	bcc.n	80099aa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d11a      	bne.n	80099e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	699b      	ldr	r3, [r3, #24]
 80099b0:	f003 0302 	and.w	r3, r3, #2
 80099b4:	2b02      	cmp	r3, #2
 80099b6:	d013      	beq.n	80099e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099bc:	f043 0220 	orr.w	r2, r3, #32
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2220      	movs	r2, #32
 80099c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2200      	movs	r2, #0
 80099d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2200      	movs	r2, #0
 80099d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80099dc:	2301      	movs	r3, #1
 80099de:	e007      	b.n	80099f0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	699b      	ldr	r3, [r3, #24]
 80099e6:	f003 0302 	and.w	r3, r3, #2
 80099ea:	2b02      	cmp	r3, #2
 80099ec:	d1c4      	bne.n	8009978 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80099ee:	2300      	movs	r3, #0
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3710      	adds	r7, #16
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	60f8      	str	r0, [r7, #12]
 8009a00:	60b9      	str	r1, [r7, #8]
 8009a02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a04:	e02f      	b.n	8009a66 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a06:	687a      	ldr	r2, [r7, #4]
 8009a08:	68b9      	ldr	r1, [r7, #8]
 8009a0a:	68f8      	ldr	r0, [r7, #12]
 8009a0c:	f000 f838 	bl	8009a80 <I2C_IsErrorOccurred>
 8009a10:	4603      	mov	r3, r0
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d001      	beq.n	8009a1a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009a16:	2301      	movs	r3, #1
 8009a18:	e02d      	b.n	8009a76 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a1a:	f7fa fd07 	bl	800442c <HAL_GetTick>
 8009a1e:	4602      	mov	r2, r0
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	1ad3      	subs	r3, r2, r3
 8009a24:	68ba      	ldr	r2, [r7, #8]
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d302      	bcc.n	8009a30 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d11a      	bne.n	8009a66 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	699b      	ldr	r3, [r3, #24]
 8009a36:	f003 0320 	and.w	r3, r3, #32
 8009a3a:	2b20      	cmp	r3, #32
 8009a3c:	d013      	beq.n	8009a66 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a42:	f043 0220 	orr.w	r2, r3, #32
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2220      	movs	r2, #32
 8009a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2200      	movs	r2, #0
 8009a56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009a62:	2301      	movs	r3, #1
 8009a64:	e007      	b.n	8009a76 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	699b      	ldr	r3, [r3, #24]
 8009a6c:	f003 0320 	and.w	r3, r3, #32
 8009a70:	2b20      	cmp	r3, #32
 8009a72:	d1c8      	bne.n	8009a06 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009a74:	2300      	movs	r3, #0
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
	...

08009a80 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b08a      	sub	sp, #40	; 0x28
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	60b9      	str	r1, [r7, #8]
 8009a8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	699b      	ldr	r3, [r3, #24]
 8009a98:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	f003 0310 	and.w	r3, r3, #16
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d068      	beq.n	8009b7e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2210      	movs	r2, #16
 8009ab2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009ab4:	e049      	b.n	8009b4a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009abc:	d045      	beq.n	8009b4a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009abe:	f7fa fcb5 	bl	800442c <HAL_GetTick>
 8009ac2:	4602      	mov	r2, r0
 8009ac4:	69fb      	ldr	r3, [r7, #28]
 8009ac6:	1ad3      	subs	r3, r2, r3
 8009ac8:	68ba      	ldr	r2, [r7, #8]
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d302      	bcc.n	8009ad4 <I2C_IsErrorOccurred+0x54>
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d13a      	bne.n	8009b4a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ade:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009ae6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	699b      	ldr	r3, [r3, #24]
 8009aee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009af2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009af6:	d121      	bne.n	8009b3c <I2C_IsErrorOccurred+0xbc>
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009afe:	d01d      	beq.n	8009b3c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009b00:	7cfb      	ldrb	r3, [r7, #19]
 8009b02:	2b20      	cmp	r3, #32
 8009b04:	d01a      	beq.n	8009b3c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	685a      	ldr	r2, [r3, #4]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b14:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009b16:	f7fa fc89 	bl	800442c <HAL_GetTick>
 8009b1a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b1c:	e00e      	b.n	8009b3c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009b1e:	f7fa fc85 	bl	800442c <HAL_GetTick>
 8009b22:	4602      	mov	r2, r0
 8009b24:	69fb      	ldr	r3, [r7, #28]
 8009b26:	1ad3      	subs	r3, r2, r3
 8009b28:	2b19      	cmp	r3, #25
 8009b2a:	d907      	bls.n	8009b3c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009b2c:	6a3b      	ldr	r3, [r7, #32]
 8009b2e:	f043 0320 	orr.w	r3, r3, #32
 8009b32:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009b34:	2301      	movs	r3, #1
 8009b36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009b3a:	e006      	b.n	8009b4a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	699b      	ldr	r3, [r3, #24]
 8009b42:	f003 0320 	and.w	r3, r3, #32
 8009b46:	2b20      	cmp	r3, #32
 8009b48:	d1e9      	bne.n	8009b1e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	699b      	ldr	r3, [r3, #24]
 8009b50:	f003 0320 	and.w	r3, r3, #32
 8009b54:	2b20      	cmp	r3, #32
 8009b56:	d003      	beq.n	8009b60 <I2C_IsErrorOccurred+0xe0>
 8009b58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d0aa      	beq.n	8009ab6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009b60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d103      	bne.n	8009b70 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	2220      	movs	r2, #32
 8009b6e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009b70:	6a3b      	ldr	r3, [r7, #32]
 8009b72:	f043 0304 	orr.w	r3, r3, #4
 8009b76:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	699b      	ldr	r3, [r3, #24]
 8009b84:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009b86:	69bb      	ldr	r3, [r7, #24]
 8009b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00b      	beq.n	8009ba8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009b90:	6a3b      	ldr	r3, [r7, #32]
 8009b92:	f043 0301 	orr.w	r3, r3, #1
 8009b96:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009ba0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009ba8:	69bb      	ldr	r3, [r7, #24]
 8009baa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d00b      	beq.n	8009bca <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009bb2:	6a3b      	ldr	r3, [r7, #32]
 8009bb4:	f043 0308 	orr.w	r3, r3, #8
 8009bb8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009bc2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009bca:	69bb      	ldr	r3, [r7, #24]
 8009bcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d00b      	beq.n	8009bec <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009bd4:	6a3b      	ldr	r3, [r7, #32]
 8009bd6:	f043 0302 	orr.w	r3, r3, #2
 8009bda:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009be4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009be6:	2301      	movs	r3, #1
 8009be8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009bec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d01c      	beq.n	8009c2e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009bf4:	68f8      	ldr	r0, [r7, #12]
 8009bf6:	f7ff fe45 	bl	8009884 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	6859      	ldr	r1, [r3, #4]
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681a      	ldr	r2, [r3, #0]
 8009c04:	4b0d      	ldr	r3, [pc, #52]	; (8009c3c <I2C_IsErrorOccurred+0x1bc>)
 8009c06:	400b      	ands	r3, r1
 8009c08:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c0e:	6a3b      	ldr	r3, [r7, #32]
 8009c10:	431a      	orrs	r2, r3
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2220      	movs	r2, #32
 8009c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2200      	movs	r2, #0
 8009c22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009c2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3728      	adds	r7, #40	; 0x28
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
 8009c3a:	bf00      	nop
 8009c3c:	fe00e800 	.word	0xfe00e800

08009c40 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b087      	sub	sp, #28
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	607b      	str	r3, [r7, #4]
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	817b      	strh	r3, [r7, #10]
 8009c4e:	4613      	mov	r3, r2
 8009c50:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c52:	897b      	ldrh	r3, [r7, #10]
 8009c54:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009c58:	7a7b      	ldrb	r3, [r7, #9]
 8009c5a:	041b      	lsls	r3, r3, #16
 8009c5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c60:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c66:	6a3b      	ldr	r3, [r7, #32]
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c6e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	685a      	ldr	r2, [r3, #4]
 8009c76:	6a3b      	ldr	r3, [r7, #32]
 8009c78:	0d5b      	lsrs	r3, r3, #21
 8009c7a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009c7e:	4b08      	ldr	r3, [pc, #32]	; (8009ca0 <I2C_TransferConfig+0x60>)
 8009c80:	430b      	orrs	r3, r1
 8009c82:	43db      	mvns	r3, r3
 8009c84:	ea02 0103 	and.w	r1, r2, r3
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	697a      	ldr	r2, [r7, #20]
 8009c8e:	430a      	orrs	r2, r1
 8009c90:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009c92:	bf00      	nop
 8009c94:	371c      	adds	r7, #28
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr
 8009c9e:	bf00      	nop
 8009ca0:	03ff63ff 	.word	0x03ff63ff

08009ca4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009cb4:	b2db      	uxtb	r3, r3
 8009cb6:	2b20      	cmp	r3, #32
 8009cb8:	d138      	bne.n	8009d2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d101      	bne.n	8009cc8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009cc4:	2302      	movs	r3, #2
 8009cc6:	e032      	b.n	8009d2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2224      	movs	r2, #36	; 0x24
 8009cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f022 0201 	bic.w	r2, r2, #1
 8009ce6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009cf6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	6819      	ldr	r1, [r3, #0]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	683a      	ldr	r2, [r7, #0]
 8009d04:	430a      	orrs	r2, r1
 8009d06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	681a      	ldr	r2, [r3, #0]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f042 0201 	orr.w	r2, r2, #1
 8009d16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2220      	movs	r2, #32
 8009d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2200      	movs	r2, #0
 8009d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	e000      	b.n	8009d2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009d2c:	2302      	movs	r3, #2
  }
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	370c      	adds	r7, #12
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr

08009d3a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009d3a:	b480      	push	{r7}
 8009d3c:	b085      	sub	sp, #20
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
 8009d42:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d4a:	b2db      	uxtb	r3, r3
 8009d4c:	2b20      	cmp	r3, #32
 8009d4e:	d139      	bne.n	8009dc4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d56:	2b01      	cmp	r3, #1
 8009d58:	d101      	bne.n	8009d5e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009d5a:	2302      	movs	r3, #2
 8009d5c:	e033      	b.n	8009dc6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2201      	movs	r2, #1
 8009d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2224      	movs	r2, #36	; 0x24
 8009d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	681a      	ldr	r2, [r3, #0]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f022 0201 	bic.w	r2, r2, #1
 8009d7c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009d8c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	021b      	lsls	r3, r3, #8
 8009d92:	68fa      	ldr	r2, [r7, #12]
 8009d94:	4313      	orrs	r3, r2
 8009d96:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	68fa      	ldr	r2, [r7, #12]
 8009d9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	681a      	ldr	r2, [r3, #0]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f042 0201 	orr.w	r2, r2, #1
 8009dae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2220      	movs	r2, #32
 8009db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	e000      	b.n	8009dc6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009dc4:	2302      	movs	r3, #2
  }
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3714      	adds	r7, #20
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr
	...

08009dd4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d101      	bne.n	8009de6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8009de2:	2301      	movs	r3, #1
 8009de4:	e0bf      	b.n	8009f66 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d106      	bne.n	8009e00 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2200      	movs	r2, #0
 8009df6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f7f7 fa98 	bl	8001330 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2202      	movs	r2, #2
 8009e04:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	699a      	ldr	r2, [r3, #24]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8009e16:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	6999      	ldr	r1, [r3, #24]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	685a      	ldr	r2, [r3, #4]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	689b      	ldr	r3, [r3, #8]
 8009e26:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009e2c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	691b      	ldr	r3, [r3, #16]
 8009e32:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	430a      	orrs	r2, r1
 8009e3a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	6899      	ldr	r1, [r3, #8]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	4b4a      	ldr	r3, [pc, #296]	; (8009f70 <HAL_LTDC_Init+0x19c>)
 8009e48:	400b      	ands	r3, r1
 8009e4a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	695b      	ldr	r3, [r3, #20]
 8009e50:	041b      	lsls	r3, r3, #16
 8009e52:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	6899      	ldr	r1, [r3, #8]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	699a      	ldr	r2, [r3, #24]
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	431a      	orrs	r2, r3
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	430a      	orrs	r2, r1
 8009e68:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	68d9      	ldr	r1, [r3, #12]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	4b3e      	ldr	r3, [pc, #248]	; (8009f70 <HAL_LTDC_Init+0x19c>)
 8009e76:	400b      	ands	r3, r1
 8009e78:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	69db      	ldr	r3, [r3, #28]
 8009e7e:	041b      	lsls	r3, r3, #16
 8009e80:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	68d9      	ldr	r1, [r3, #12]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6a1a      	ldr	r2, [r3, #32]
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	431a      	orrs	r2, r3
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	430a      	orrs	r2, r1
 8009e96:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	6919      	ldr	r1, [r3, #16]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	4b33      	ldr	r3, [pc, #204]	; (8009f70 <HAL_LTDC_Init+0x19c>)
 8009ea4:	400b      	ands	r3, r1
 8009ea6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eac:	041b      	lsls	r3, r3, #16
 8009eae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	6919      	ldr	r1, [r3, #16]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	431a      	orrs	r2, r3
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	430a      	orrs	r2, r1
 8009ec4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	6959      	ldr	r1, [r3, #20]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681a      	ldr	r2, [r3, #0]
 8009ed0:	4b27      	ldr	r3, [pc, #156]	; (8009f70 <HAL_LTDC_Init+0x19c>)
 8009ed2:	400b      	ands	r3, r1
 8009ed4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eda:	041b      	lsls	r3, r3, #16
 8009edc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	6959      	ldr	r1, [r3, #20]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	431a      	orrs	r2, r3
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	430a      	orrs	r2, r1
 8009ef2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009efa:	021b      	lsls	r3, r3, #8
 8009efc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009f04:	041b      	lsls	r3, r3, #16
 8009f06:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8009f16:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009f1e:	68ba      	ldr	r2, [r7, #8]
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	4313      	orrs	r3, r2
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8009f2a:	431a      	orrs	r2, r3
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	430a      	orrs	r2, r1
 8009f32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f042 0206 	orr.w	r2, r2, #6
 8009f42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	699a      	ldr	r2, [r3, #24]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f042 0201 	orr.w	r2, r2, #1
 8009f52:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2200      	movs	r2, #0
 8009f58:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8009f64:	2300      	movs	r3, #0
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3710      	adds	r7, #16
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
 8009f6e:	bf00      	nop
 8009f70:	f000f800 	.word	0xf000f800

08009f74 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f82:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f8a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f003 0304 	and.w	r3, r3, #4
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d023      	beq.n	8009fde <HAL_LTDC_IRQHandler+0x6a>
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	f003 0304 	and.w	r3, r3, #4
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d01e      	beq.n	8009fde <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f022 0204 	bic.w	r2, r2, #4
 8009fae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	2204      	movs	r2, #4
 8009fb6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009fbe:	f043 0201 	orr.w	r2, r3, #1
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2204      	movs	r2, #4
 8009fcc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f000 f86f 	bl	800a0bc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	f003 0302 	and.w	r3, r3, #2
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d023      	beq.n	800a030 <HAL_LTDC_IRQHandler+0xbc>
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	f003 0302 	and.w	r3, r3, #2
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d01e      	beq.n	800a030 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f022 0202 	bic.w	r2, r2, #2
 800a000:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	2202      	movs	r2, #2
 800a008:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a010:	f043 0202 	orr.w	r2, r3, #2
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2204      	movs	r2, #4
 800a01e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2200      	movs	r2, #0
 800a026:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 f846 	bl	800a0bc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f003 0301 	and.w	r3, r3, #1
 800a036:	2b00      	cmp	r3, #0
 800a038:	d01b      	beq.n	800a072 <HAL_LTDC_IRQHandler+0xfe>
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	f003 0301 	and.w	r3, r3, #1
 800a040:	2b00      	cmp	r3, #0
 800a042:	d016      	beq.n	800a072 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f022 0201 	bic.w	r2, r2, #1
 800a052:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2201      	movs	r2, #1
 800a05a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2201      	movs	r2, #1
 800a060:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 f82f 	bl	800a0d0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f003 0308 	and.w	r3, r3, #8
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d01b      	beq.n	800a0b4 <HAL_LTDC_IRQHandler+0x140>
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	f003 0308 	and.w	r3, r3, #8
 800a082:	2b00      	cmp	r3, #0
 800a084:	d016      	beq.n	800a0b4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f022 0208 	bic.w	r2, r2, #8
 800a094:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	2208      	movs	r2, #8
 800a09c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 f818 	bl	800a0e4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800a0b4:	bf00      	nop
 800a0b6:	3710      	adds	r7, #16
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b083      	sub	sp, #12
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800a0c4:	bf00      	nop
 800a0c6:	370c      	adds	r7, #12
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr

0800a0d0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b083      	sub	sp, #12
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800a0d8:	bf00      	nop
 800a0da:	370c      	adds	r7, #12
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800a0ec:	bf00      	nop
 800a0ee:	370c      	adds	r7, #12
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a0f8:	b5b0      	push	{r4, r5, r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	60b9      	str	r1, [r7, #8]
 800a102:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	d101      	bne.n	800a112 <HAL_LTDC_ConfigLayer+0x1a>
 800a10e:	2302      	movs	r3, #2
 800a110:	e02c      	b.n	800a16c <HAL_LTDC_ConfigLayer+0x74>
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2201      	movs	r2, #1
 800a116:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2202      	movs	r2, #2
 800a11e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a122:	68fa      	ldr	r2, [r7, #12]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2134      	movs	r1, #52	; 0x34
 800a128:	fb01 f303 	mul.w	r3, r1, r3
 800a12c:	4413      	add	r3, r2
 800a12e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	4614      	mov	r4, r2
 800a136:	461d      	mov	r5, r3
 800a138:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a13a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a13c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a13e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a140:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a142:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a144:	682b      	ldr	r3, [r5, #0]
 800a146:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	68b9      	ldr	r1, [r7, #8]
 800a14c:	68f8      	ldr	r0, [r7, #12]
 800a14e:	f000 f811 	bl	800a174 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	2201      	movs	r2, #1
 800a158:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2201      	movs	r2, #1
 800a15e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2200      	movs	r2, #0
 800a166:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800a16a:	2300      	movs	r3, #0
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3710      	adds	r7, #16
 800a170:	46bd      	mov	sp, r7
 800a172:	bdb0      	pop	{r4, r5, r7, pc}

0800a174 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a174:	b480      	push	{r7}
 800a176:	b089      	sub	sp, #36	; 0x24
 800a178:	af00      	add	r7, sp, #0
 800a17a:	60f8      	str	r0, [r7, #12]
 800a17c:	60b9      	str	r1, [r7, #8]
 800a17e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	685a      	ldr	r2, [r3, #4]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	68db      	ldr	r3, [r3, #12]
 800a18a:	0c1b      	lsrs	r3, r3, #16
 800a18c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a190:	4413      	add	r3, r2
 800a192:	041b      	lsls	r3, r3, #16
 800a194:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	461a      	mov	r2, r3
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	01db      	lsls	r3, r3, #7
 800a1a0:	4413      	add	r3, r2
 800a1a2:	3384      	adds	r3, #132	; 0x84
 800a1a4:	685b      	ldr	r3, [r3, #4]
 800a1a6:	68fa      	ldr	r2, [r7, #12]
 800a1a8:	6812      	ldr	r2, [r2, #0]
 800a1aa:	4611      	mov	r1, r2
 800a1ac:	687a      	ldr	r2, [r7, #4]
 800a1ae:	01d2      	lsls	r2, r2, #7
 800a1b0:	440a      	add	r2, r1
 800a1b2:	3284      	adds	r2, #132	; 0x84
 800a1b4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a1b8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	68db      	ldr	r3, [r3, #12]
 800a1c4:	0c1b      	lsrs	r3, r3, #16
 800a1c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a1ca:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a1cc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	4619      	mov	r1, r3
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	01db      	lsls	r3, r3, #7
 800a1d8:	440b      	add	r3, r1
 800a1da:	3384      	adds	r3, #132	; 0x84
 800a1dc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a1de:	69fb      	ldr	r3, [r7, #28]
 800a1e0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a1e2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	68da      	ldr	r2, [r3, #12]
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	68db      	ldr	r3, [r3, #12]
 800a1ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a1f2:	4413      	add	r3, r2
 800a1f4:	041b      	lsls	r3, r3, #16
 800a1f6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	01db      	lsls	r3, r3, #7
 800a202:	4413      	add	r3, r2
 800a204:	3384      	adds	r3, #132	; 0x84
 800a206:	689b      	ldr	r3, [r3, #8]
 800a208:	68fa      	ldr	r2, [r7, #12]
 800a20a:	6812      	ldr	r2, [r2, #0]
 800a20c:	4611      	mov	r1, r2
 800a20e:	687a      	ldr	r2, [r7, #4]
 800a210:	01d2      	lsls	r2, r2, #7
 800a212:	440a      	add	r2, r1
 800a214:	3284      	adds	r2, #132	; 0x84
 800a216:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a21a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	689a      	ldr	r2, [r3, #8]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	68db      	ldr	r3, [r3, #12]
 800a226:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a22a:	4413      	add	r3, r2
 800a22c:	1c5a      	adds	r2, r3, #1
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4619      	mov	r1, r3
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	01db      	lsls	r3, r3, #7
 800a238:	440b      	add	r3, r1
 800a23a:	3384      	adds	r3, #132	; 0x84
 800a23c:	4619      	mov	r1, r3
 800a23e:	69fb      	ldr	r3, [r7, #28]
 800a240:	4313      	orrs	r3, r2
 800a242:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	461a      	mov	r2, r3
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	01db      	lsls	r3, r3, #7
 800a24e:	4413      	add	r3, r2
 800a250:	3384      	adds	r3, #132	; 0x84
 800a252:	691b      	ldr	r3, [r3, #16]
 800a254:	68fa      	ldr	r2, [r7, #12]
 800a256:	6812      	ldr	r2, [r2, #0]
 800a258:	4611      	mov	r1, r2
 800a25a:	687a      	ldr	r2, [r7, #4]
 800a25c:	01d2      	lsls	r2, r2, #7
 800a25e:	440a      	add	r2, r1
 800a260:	3284      	adds	r2, #132	; 0x84
 800a262:	f023 0307 	bic.w	r3, r3, #7
 800a266:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	461a      	mov	r2, r3
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	01db      	lsls	r3, r3, #7
 800a272:	4413      	add	r3, r2
 800a274:	3384      	adds	r3, #132	; 0x84
 800a276:	461a      	mov	r2, r3
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	691b      	ldr	r3, [r3, #16]
 800a27c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a284:	021b      	lsls	r3, r3, #8
 800a286:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a28e:	041b      	lsls	r3, r3, #16
 800a290:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	699b      	ldr	r3, [r3, #24]
 800a296:	061b      	lsls	r3, r3, #24
 800a298:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	461a      	mov	r2, r3
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	01db      	lsls	r3, r3, #7
 800a2a4:	4413      	add	r3, r2
 800a2a6:	3384      	adds	r3, #132	; 0x84
 800a2a8:	699b      	ldr	r3, [r3, #24]
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	01db      	lsls	r3, r3, #7
 800a2b4:	4413      	add	r3, r2
 800a2b6:	3384      	adds	r3, #132	; 0x84
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	69fb      	ldr	r3, [r7, #28]
 800a2c8:	431a      	orrs	r2, r3
 800a2ca:	69bb      	ldr	r3, [r7, #24]
 800a2cc:	431a      	orrs	r2, r3
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	01db      	lsls	r3, r3, #7
 800a2d8:	440b      	add	r3, r1
 800a2da:	3384      	adds	r3, #132	; 0x84
 800a2dc:	4619      	mov	r1, r3
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	01db      	lsls	r3, r3, #7
 800a2ee:	4413      	add	r3, r2
 800a2f0:	3384      	adds	r3, #132	; 0x84
 800a2f2:	695b      	ldr	r3, [r3, #20]
 800a2f4:	68fa      	ldr	r2, [r7, #12]
 800a2f6:	6812      	ldr	r2, [r2, #0]
 800a2f8:	4611      	mov	r1, r2
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	01d2      	lsls	r2, r2, #7
 800a2fe:	440a      	add	r2, r1
 800a300:	3284      	adds	r2, #132	; 0x84
 800a302:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a306:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	461a      	mov	r2, r3
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	01db      	lsls	r3, r3, #7
 800a312:	4413      	add	r3, r2
 800a314:	3384      	adds	r3, #132	; 0x84
 800a316:	461a      	mov	r2, r3
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	695b      	ldr	r3, [r3, #20]
 800a31c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	461a      	mov	r2, r3
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	01db      	lsls	r3, r3, #7
 800a328:	4413      	add	r3, r2
 800a32a:	3384      	adds	r3, #132	; 0x84
 800a32c:	69da      	ldr	r2, [r3, #28]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4619      	mov	r1, r3
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	01db      	lsls	r3, r3, #7
 800a338:	440b      	add	r3, r1
 800a33a:	3384      	adds	r3, #132	; 0x84
 800a33c:	4619      	mov	r1, r3
 800a33e:	4b58      	ldr	r3, [pc, #352]	; (800a4a0 <LTDC_SetConfig+0x32c>)
 800a340:	4013      	ands	r3, r2
 800a342:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	69da      	ldr	r2, [r3, #28]
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	6a1b      	ldr	r3, [r3, #32]
 800a34c:	68f9      	ldr	r1, [r7, #12]
 800a34e:	6809      	ldr	r1, [r1, #0]
 800a350:	4608      	mov	r0, r1
 800a352:	6879      	ldr	r1, [r7, #4]
 800a354:	01c9      	lsls	r1, r1, #7
 800a356:	4401      	add	r1, r0
 800a358:	3184      	adds	r1, #132	; 0x84
 800a35a:	4313      	orrs	r3, r2
 800a35c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	461a      	mov	r2, r3
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	01db      	lsls	r3, r3, #7
 800a368:	4413      	add	r3, r2
 800a36a:	3384      	adds	r3, #132	; 0x84
 800a36c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	461a      	mov	r2, r3
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	01db      	lsls	r3, r3, #7
 800a378:	4413      	add	r3, r2
 800a37a:	3384      	adds	r3, #132	; 0x84
 800a37c:	461a      	mov	r2, r3
 800a37e:	2300      	movs	r3, #0
 800a380:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	461a      	mov	r2, r3
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	01db      	lsls	r3, r3, #7
 800a38c:	4413      	add	r3, r2
 800a38e:	3384      	adds	r3, #132	; 0x84
 800a390:	461a      	mov	r2, r3
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a396:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	691b      	ldr	r3, [r3, #16]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d102      	bne.n	800a3a6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800a3a0:	2304      	movs	r3, #4
 800a3a2:	61fb      	str	r3, [r7, #28]
 800a3a4:	e01b      	b.n	800a3de <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	691b      	ldr	r3, [r3, #16]
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d102      	bne.n	800a3b4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800a3ae:	2303      	movs	r3, #3
 800a3b0:	61fb      	str	r3, [r7, #28]
 800a3b2:	e014      	b.n	800a3de <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	691b      	ldr	r3, [r3, #16]
 800a3b8:	2b04      	cmp	r3, #4
 800a3ba:	d00b      	beq.n	800a3d4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a3c0:	2b02      	cmp	r3, #2
 800a3c2:	d007      	beq.n	800a3d4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a3c8:	2b03      	cmp	r3, #3
 800a3ca:	d003      	beq.n	800a3d4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a3d0:	2b07      	cmp	r3, #7
 800a3d2:	d102      	bne.n	800a3da <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800a3d4:	2302      	movs	r3, #2
 800a3d6:	61fb      	str	r3, [r7, #28]
 800a3d8:	e001      	b.n	800a3de <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800a3da:	2301      	movs	r3, #1
 800a3dc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	461a      	mov	r2, r3
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	01db      	lsls	r3, r3, #7
 800a3e8:	4413      	add	r3, r2
 800a3ea:	3384      	adds	r3, #132	; 0x84
 800a3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ee:	68fa      	ldr	r2, [r7, #12]
 800a3f0:	6812      	ldr	r2, [r2, #0]
 800a3f2:	4611      	mov	r1, r2
 800a3f4:	687a      	ldr	r2, [r7, #4]
 800a3f6:	01d2      	lsls	r2, r2, #7
 800a3f8:	440a      	add	r2, r1
 800a3fa:	3284      	adds	r2, #132	; 0x84
 800a3fc:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800a400:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a406:	69fa      	ldr	r2, [r7, #28]
 800a408:	fb02 f303 	mul.w	r3, r2, r3
 800a40c:	041a      	lsls	r2, r3, #16
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	6859      	ldr	r1, [r3, #4]
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	1acb      	subs	r3, r1, r3
 800a418:	69f9      	ldr	r1, [r7, #28]
 800a41a:	fb01 f303 	mul.w	r3, r1, r3
 800a41e:	3307      	adds	r3, #7
 800a420:	68f9      	ldr	r1, [r7, #12]
 800a422:	6809      	ldr	r1, [r1, #0]
 800a424:	4608      	mov	r0, r1
 800a426:	6879      	ldr	r1, [r7, #4]
 800a428:	01c9      	lsls	r1, r1, #7
 800a42a:	4401      	add	r1, r0
 800a42c:	3184      	adds	r1, #132	; 0x84
 800a42e:	4313      	orrs	r3, r2
 800a430:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	461a      	mov	r2, r3
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	01db      	lsls	r3, r3, #7
 800a43c:	4413      	add	r3, r2
 800a43e:	3384      	adds	r3, #132	; 0x84
 800a440:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4619      	mov	r1, r3
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	01db      	lsls	r3, r3, #7
 800a44c:	440b      	add	r3, r1
 800a44e:	3384      	adds	r3, #132	; 0x84
 800a450:	4619      	mov	r1, r3
 800a452:	4b14      	ldr	r3, [pc, #80]	; (800a4a4 <LTDC_SetConfig+0x330>)
 800a454:	4013      	ands	r3, r2
 800a456:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	461a      	mov	r2, r3
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	01db      	lsls	r3, r3, #7
 800a462:	4413      	add	r3, r2
 800a464:	3384      	adds	r3, #132	; 0x84
 800a466:	461a      	mov	r2, r3
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a46c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	461a      	mov	r2, r3
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	01db      	lsls	r3, r3, #7
 800a478:	4413      	add	r3, r2
 800a47a:	3384      	adds	r3, #132	; 0x84
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	68fa      	ldr	r2, [r7, #12]
 800a480:	6812      	ldr	r2, [r2, #0]
 800a482:	4611      	mov	r1, r2
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	01d2      	lsls	r2, r2, #7
 800a488:	440a      	add	r2, r1
 800a48a:	3284      	adds	r2, #132	; 0x84
 800a48c:	f043 0301 	orr.w	r3, r3, #1
 800a490:	6013      	str	r3, [r2, #0]
}
 800a492:	bf00      	nop
 800a494:	3724      	adds	r7, #36	; 0x24
 800a496:	46bd      	mov	sp, r7
 800a498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49c:	4770      	bx	lr
 800a49e:	bf00      	nop
 800a4a0:	fffff8f8 	.word	0xfffff8f8
 800a4a4:	fffff800 	.word	0xfffff800

0800a4a8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 800a4ac:	4b05      	ldr	r3, [pc, #20]	; (800a4c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4a04      	ldr	r2, [pc, #16]	; (800a4c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a4b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4b6:	6013      	str	r3, [r2, #0]
}
 800a4b8:	bf00      	nop
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr
 800a4c2:	bf00      	nop
 800a4c4:	58024800 	.word	0x58024800

0800a4c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b084      	sub	sp, #16
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800a4d0:	4b29      	ldr	r3, [pc, #164]	; (800a578 <HAL_PWREx_ConfigSupply+0xb0>)
 800a4d2:	68db      	ldr	r3, [r3, #12]
 800a4d4:	f003 0307 	and.w	r3, r3, #7
 800a4d8:	2b06      	cmp	r3, #6
 800a4da:	d00a      	beq.n	800a4f2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a4dc:	4b26      	ldr	r3, [pc, #152]	; (800a578 <HAL_PWREx_ConfigSupply+0xb0>)
 800a4de:	68db      	ldr	r3, [r3, #12]
 800a4e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a4e4:	687a      	ldr	r2, [r7, #4]
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d001      	beq.n	800a4ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	e040      	b.n	800a570 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	e03e      	b.n	800a570 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a4f2:	4b21      	ldr	r3, [pc, #132]	; (800a578 <HAL_PWREx_ConfigSupply+0xb0>)
 800a4f4:	68db      	ldr	r3, [r3, #12]
 800a4f6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800a4fa:	491f      	ldr	r1, [pc, #124]	; (800a578 <HAL_PWREx_ConfigSupply+0xb0>)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	4313      	orrs	r3, r2
 800a500:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a502:	f7f9 ff93 	bl	800442c <HAL_GetTick>
 800a506:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a508:	e009      	b.n	800a51e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a50a:	f7f9 ff8f 	bl	800442c <HAL_GetTick>
 800a50e:	4602      	mov	r2, r0
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	1ad3      	subs	r3, r2, r3
 800a514:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a518:	d901      	bls.n	800a51e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a51a:	2301      	movs	r3, #1
 800a51c:	e028      	b.n	800a570 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a51e:	4b16      	ldr	r3, [pc, #88]	; (800a578 <HAL_PWREx_ConfigSupply+0xb0>)
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a526:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a52a:	d1ee      	bne.n	800a50a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2b1e      	cmp	r3, #30
 800a530:	d008      	beq.n	800a544 <HAL_PWREx_ConfigSupply+0x7c>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2b2e      	cmp	r3, #46	; 0x2e
 800a536:	d005      	beq.n	800a544 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2b1d      	cmp	r3, #29
 800a53c:	d002      	beq.n	800a544 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2b2d      	cmp	r3, #45	; 0x2d
 800a542:	d114      	bne.n	800a56e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800a544:	f7f9 ff72 	bl	800442c <HAL_GetTick>
 800a548:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a54a:	e009      	b.n	800a560 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a54c:	f7f9 ff6e 	bl	800442c <HAL_GetTick>
 800a550:	4602      	mov	r2, r0
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	1ad3      	subs	r3, r2, r3
 800a556:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a55a:	d901      	bls.n	800a560 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800a55c:	2301      	movs	r3, #1
 800a55e:	e007      	b.n	800a570 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a560:	4b05      	ldr	r3, [pc, #20]	; (800a578 <HAL_PWREx_ConfigSupply+0xb0>)
 800a562:	68db      	ldr	r3, [r3, #12]
 800a564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a56c:	d1ee      	bne.n	800a54c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a56e:	2300      	movs	r3, #0
}
 800a570:	4618      	mov	r0, r3
 800a572:	3710      	adds	r7, #16
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}
 800a578:	58024800 	.word	0x58024800

0800a57c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b08c      	sub	sp, #48	; 0x30
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d102      	bne.n	800a590 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a58a:	2301      	movs	r3, #1
 800a58c:	f000 bc1f 	b.w	800adce <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f003 0301 	and.w	r3, r3, #1
 800a598:	2b00      	cmp	r3, #0
 800a59a:	f000 80b3 	beq.w	800a704 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a59e:	4b95      	ldr	r3, [pc, #596]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a5a0:	691b      	ldr	r3, [r3, #16]
 800a5a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a5a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a5a8:	4b92      	ldr	r3, [pc, #584]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a5aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ac:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5b0:	2b10      	cmp	r3, #16
 800a5b2:	d007      	beq.n	800a5c4 <HAL_RCC_OscConfig+0x48>
 800a5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5b6:	2b18      	cmp	r3, #24
 800a5b8:	d112      	bne.n	800a5e0 <HAL_RCC_OscConfig+0x64>
 800a5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5bc:	f003 0303 	and.w	r3, r3, #3
 800a5c0:	2b02      	cmp	r3, #2
 800a5c2:	d10d      	bne.n	800a5e0 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a5c4:	4b8b      	ldr	r3, [pc, #556]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	f000 8098 	beq.w	800a702 <HAL_RCC_OscConfig+0x186>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	685b      	ldr	r3, [r3, #4]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	f040 8093 	bne.w	800a702 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	e3f6      	b.n	800adce <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5e8:	d106      	bne.n	800a5f8 <HAL_RCC_OscConfig+0x7c>
 800a5ea:	4b82      	ldr	r3, [pc, #520]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	4a81      	ldr	r2, [pc, #516]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a5f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a5f4:	6013      	str	r3, [r2, #0]
 800a5f6:	e058      	b.n	800a6aa <HAL_RCC_OscConfig+0x12e>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d112      	bne.n	800a626 <HAL_RCC_OscConfig+0xaa>
 800a600:	4b7c      	ldr	r3, [pc, #496]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4a7b      	ldr	r2, [pc, #492]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a60a:	6013      	str	r3, [r2, #0]
 800a60c:	4b79      	ldr	r3, [pc, #484]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4a78      	ldr	r2, [pc, #480]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a612:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a616:	6013      	str	r3, [r2, #0]
 800a618:	4b76      	ldr	r3, [pc, #472]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	4a75      	ldr	r2, [pc, #468]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a61e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a622:	6013      	str	r3, [r2, #0]
 800a624:	e041      	b.n	800a6aa <HAL_RCC_OscConfig+0x12e>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a62e:	d112      	bne.n	800a656 <HAL_RCC_OscConfig+0xda>
 800a630:	4b70      	ldr	r3, [pc, #448]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a6f      	ldr	r2, [pc, #444]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a636:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a63a:	6013      	str	r3, [r2, #0]
 800a63c:	4b6d      	ldr	r3, [pc, #436]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4a6c      	ldr	r2, [pc, #432]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a642:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a646:	6013      	str	r3, [r2, #0]
 800a648:	4b6a      	ldr	r3, [pc, #424]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4a69      	ldr	r2, [pc, #420]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a64e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a652:	6013      	str	r3, [r2, #0]
 800a654:	e029      	b.n	800a6aa <HAL_RCC_OscConfig+0x12e>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800a65e:	d112      	bne.n	800a686 <HAL_RCC_OscConfig+0x10a>
 800a660:	4b64      	ldr	r3, [pc, #400]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	4a63      	ldr	r2, [pc, #396]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a666:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a66a:	6013      	str	r3, [r2, #0]
 800a66c:	4b61      	ldr	r3, [pc, #388]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4a60      	ldr	r2, [pc, #384]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a672:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a676:	6013      	str	r3, [r2, #0]
 800a678:	4b5e      	ldr	r3, [pc, #376]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	4a5d      	ldr	r2, [pc, #372]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a67e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a682:	6013      	str	r3, [r2, #0]
 800a684:	e011      	b.n	800a6aa <HAL_RCC_OscConfig+0x12e>
 800a686:	4b5b      	ldr	r3, [pc, #364]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4a5a      	ldr	r2, [pc, #360]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a68c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a690:	6013      	str	r3, [r2, #0]
 800a692:	4b58      	ldr	r3, [pc, #352]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	4a57      	ldr	r2, [pc, #348]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a698:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a69c:	6013      	str	r3, [r2, #0]
 800a69e:	4b55      	ldr	r3, [pc, #340]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	4a54      	ldr	r2, [pc, #336]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a6a4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a6a8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d013      	beq.n	800a6da <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6b2:	f7f9 febb 	bl	800442c <HAL_GetTick>
 800a6b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a6b8:	e008      	b.n	800a6cc <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a6ba:	f7f9 feb7 	bl	800442c <HAL_GetTick>
 800a6be:	4602      	mov	r2, r0
 800a6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c2:	1ad3      	subs	r3, r2, r3
 800a6c4:	2b64      	cmp	r3, #100	; 0x64
 800a6c6:	d901      	bls.n	800a6cc <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800a6c8:	2303      	movs	r3, #3
 800a6ca:	e380      	b.n	800adce <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a6cc:	4b49      	ldr	r3, [pc, #292]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d0f0      	beq.n	800a6ba <HAL_RCC_OscConfig+0x13e>
 800a6d8:	e014      	b.n	800a704 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6da:	f7f9 fea7 	bl	800442c <HAL_GetTick>
 800a6de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a6e0:	e008      	b.n	800a6f4 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a6e2:	f7f9 fea3 	bl	800442c <HAL_GetTick>
 800a6e6:	4602      	mov	r2, r0
 800a6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ea:	1ad3      	subs	r3, r2, r3
 800a6ec:	2b64      	cmp	r3, #100	; 0x64
 800a6ee:	d901      	bls.n	800a6f4 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800a6f0:	2303      	movs	r3, #3
 800a6f2:	e36c      	b.n	800adce <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a6f4:	4b3f      	ldr	r3, [pc, #252]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d1f0      	bne.n	800a6e2 <HAL_RCC_OscConfig+0x166>
 800a700:	e000      	b.n	800a704 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a702:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f003 0302 	and.w	r3, r3, #2
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	f000 808c 	beq.w	800a82a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a712:	4b38      	ldr	r3, [pc, #224]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a714:	691b      	ldr	r3, [r3, #16]
 800a716:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a71a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a71c:	4b35      	ldr	r3, [pc, #212]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a71e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a720:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a722:	6a3b      	ldr	r3, [r7, #32]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d007      	beq.n	800a738 <HAL_RCC_OscConfig+0x1bc>
 800a728:	6a3b      	ldr	r3, [r7, #32]
 800a72a:	2b18      	cmp	r3, #24
 800a72c:	d137      	bne.n	800a79e <HAL_RCC_OscConfig+0x222>
 800a72e:	69fb      	ldr	r3, [r7, #28]
 800a730:	f003 0303 	and.w	r3, r3, #3
 800a734:	2b00      	cmp	r3, #0
 800a736:	d132      	bne.n	800a79e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a738:	4b2e      	ldr	r3, [pc, #184]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f003 0304 	and.w	r3, r3, #4
 800a740:	2b00      	cmp	r3, #0
 800a742:	d005      	beq.n	800a750 <HAL_RCC_OscConfig+0x1d4>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	68db      	ldr	r3, [r3, #12]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d101      	bne.n	800a750 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800a74c:	2301      	movs	r3, #1
 800a74e:	e33e      	b.n	800adce <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a750:	4b28      	ldr	r3, [pc, #160]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f023 0219 	bic.w	r2, r3, #25
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	68db      	ldr	r3, [r3, #12]
 800a75c:	4925      	ldr	r1, [pc, #148]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a75e:	4313      	orrs	r3, r2
 800a760:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a762:	f7f9 fe63 	bl	800442c <HAL_GetTick>
 800a766:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a768:	e008      	b.n	800a77c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a76a:	f7f9 fe5f 	bl	800442c <HAL_GetTick>
 800a76e:	4602      	mov	r2, r0
 800a770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a772:	1ad3      	subs	r3, r2, r3
 800a774:	2b02      	cmp	r3, #2
 800a776:	d901      	bls.n	800a77c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800a778:	2303      	movs	r3, #3
 800a77a:	e328      	b.n	800adce <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a77c:	4b1d      	ldr	r3, [pc, #116]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f003 0304 	and.w	r3, r3, #4
 800a784:	2b00      	cmp	r3, #0
 800a786:	d0f0      	beq.n	800a76a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a788:	4b1a      	ldr	r3, [pc, #104]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a78a:	685b      	ldr	r3, [r3, #4]
 800a78c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	691b      	ldr	r3, [r3, #16]
 800a794:	061b      	lsls	r3, r3, #24
 800a796:	4917      	ldr	r1, [pc, #92]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a798:	4313      	orrs	r3, r2
 800a79a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a79c:	e045      	b.n	800a82a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	68db      	ldr	r3, [r3, #12]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d028      	beq.n	800a7f8 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a7a6:	4b13      	ldr	r3, [pc, #76]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f023 0219 	bic.w	r2, r3, #25
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	68db      	ldr	r3, [r3, #12]
 800a7b2:	4910      	ldr	r1, [pc, #64]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7b8:	f7f9 fe38 	bl	800442c <HAL_GetTick>
 800a7bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a7be:	e008      	b.n	800a7d2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a7c0:	f7f9 fe34 	bl	800442c <HAL_GetTick>
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c8:	1ad3      	subs	r3, r2, r3
 800a7ca:	2b02      	cmp	r3, #2
 800a7cc:	d901      	bls.n	800a7d2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800a7ce:	2303      	movs	r3, #3
 800a7d0:	e2fd      	b.n	800adce <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a7d2:	4b08      	ldr	r3, [pc, #32]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f003 0304 	and.w	r3, r3, #4
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d0f0      	beq.n	800a7c0 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a7de:	4b05      	ldr	r3, [pc, #20]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	691b      	ldr	r3, [r3, #16]
 800a7ea:	061b      	lsls	r3, r3, #24
 800a7ec:	4901      	ldr	r1, [pc, #4]	; (800a7f4 <HAL_RCC_OscConfig+0x278>)
 800a7ee:	4313      	orrs	r3, r2
 800a7f0:	604b      	str	r3, [r1, #4]
 800a7f2:	e01a      	b.n	800a82a <HAL_RCC_OscConfig+0x2ae>
 800a7f4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a7f8:	4b97      	ldr	r3, [pc, #604]	; (800aa58 <HAL_RCC_OscConfig+0x4dc>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4a96      	ldr	r2, [pc, #600]	; (800aa58 <HAL_RCC_OscConfig+0x4dc>)
 800a7fe:	f023 0301 	bic.w	r3, r3, #1
 800a802:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a804:	f7f9 fe12 	bl	800442c <HAL_GetTick>
 800a808:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a80a:	e008      	b.n	800a81e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a80c:	f7f9 fe0e 	bl	800442c <HAL_GetTick>
 800a810:	4602      	mov	r2, r0
 800a812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a814:	1ad3      	subs	r3, r2, r3
 800a816:	2b02      	cmp	r3, #2
 800a818:	d901      	bls.n	800a81e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800a81a:	2303      	movs	r3, #3
 800a81c:	e2d7      	b.n	800adce <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a81e:	4b8e      	ldr	r3, [pc, #568]	; (800aa58 <HAL_RCC_OscConfig+0x4dc>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f003 0304 	and.w	r3, r3, #4
 800a826:	2b00      	cmp	r3, #0
 800a828:	d1f0      	bne.n	800a80c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f003 0310 	and.w	r3, r3, #16
 800a832:	2b00      	cmp	r3, #0
 800a834:	d06a      	beq.n	800a90c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a836:	4b88      	ldr	r3, [pc, #544]	; (800aa58 <HAL_RCC_OscConfig+0x4dc>)
 800a838:	691b      	ldr	r3, [r3, #16]
 800a83a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a83e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a840:	4b85      	ldr	r3, [pc, #532]	; (800aa58 <HAL_RCC_OscConfig+0x4dc>)
 800a842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a844:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a846:	69bb      	ldr	r3, [r7, #24]
 800a848:	2b08      	cmp	r3, #8
 800a84a:	d007      	beq.n	800a85c <HAL_RCC_OscConfig+0x2e0>
 800a84c:	69bb      	ldr	r3, [r7, #24]
 800a84e:	2b18      	cmp	r3, #24
 800a850:	d11b      	bne.n	800a88a <HAL_RCC_OscConfig+0x30e>
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	f003 0303 	and.w	r3, r3, #3
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d116      	bne.n	800a88a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a85c:	4b7e      	ldr	r3, [pc, #504]	; (800aa58 <HAL_RCC_OscConfig+0x4dc>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a864:	2b00      	cmp	r3, #0
 800a866:	d005      	beq.n	800a874 <HAL_RCC_OscConfig+0x2f8>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	69db      	ldr	r3, [r3, #28]
 800a86c:	2b80      	cmp	r3, #128	; 0x80
 800a86e:	d001      	beq.n	800a874 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800a870:	2301      	movs	r3, #1
 800a872:	e2ac      	b.n	800adce <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a874:	4b78      	ldr	r3, [pc, #480]	; (800aa58 <HAL_RCC_OscConfig+0x4dc>)
 800a876:	68db      	ldr	r3, [r3, #12]
 800a878:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6a1b      	ldr	r3, [r3, #32]
 800a880:	061b      	lsls	r3, r3, #24
 800a882:	4975      	ldr	r1, [pc, #468]	; (800aa58 <HAL_RCC_OscConfig+0x4dc>)
 800a884:	4313      	orrs	r3, r2
 800a886:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a888:	e040      	b.n	800a90c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	69db      	ldr	r3, [r3, #28]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d023      	beq.n	800a8da <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a892:	4b71      	ldr	r3, [pc, #452]	; (800aa58 <HAL_RCC_OscConfig+0x4dc>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a70      	ldr	r2, [pc, #448]	; (800aa58 <HAL_RCC_OscConfig+0x4dc>)
 800a898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a89c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a89e:	f7f9 fdc5 	bl	800442c <HAL_GetTick>
 800a8a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a8a4:	e008      	b.n	800a8b8 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a8a6:	f7f9 fdc1 	bl	800442c <HAL_GetTick>
 800a8aa:	4602      	mov	r2, r0
 800a8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ae:	1ad3      	subs	r3, r2, r3
 800a8b0:	2b02      	cmp	r3, #2
 800a8b2:	d901      	bls.n	800a8b8 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800a8b4:	2303      	movs	r3, #3
 800a8b6:	e28a      	b.n	800adce <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a8b8:	4b67      	ldr	r3, [pc, #412]	; (800aa58 <HAL_RCC_OscConfig+0x4dc>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d0f0      	beq.n	800a8a6 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a8c4:	4b64      	ldr	r3, [pc, #400]	; (800aa58 <HAL_RCC_OscConfig+0x4dc>)
 800a8c6:	68db      	ldr	r3, [r3, #12]
 800a8c8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6a1b      	ldr	r3, [r3, #32]
 800a8d0:	061b      	lsls	r3, r3, #24
 800a8d2:	4961      	ldr	r1, [pc, #388]	; (800aa58 <HAL_RCC_OscConfig+0x4dc>)
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	60cb      	str	r3, [r1, #12]
 800a8d8:	e018      	b.n	800a90c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a8da:	4b5f      	ldr	r3, [pc, #380]	; (800aa58 <HAL_RCC_OscConfig+0x4dc>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	4a5e      	ldr	r2, [pc, #376]	; (800aa58 <HAL_RCC_OscConfig+0x4dc>)
 800a8e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a8e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8e6:	f7f9 fda1 	bl	800442c <HAL_GetTick>
 800a8ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a8ec:	e008      	b.n	800a900 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a8ee:	f7f9 fd9d 	bl	800442c <HAL_GetTick>
 800a8f2:	4602      	mov	r2, r0
 800a8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f6:	1ad3      	subs	r3, r2, r3
 800a8f8:	2b02      	cmp	r3, #2
 800a8fa:	d901      	bls.n	800a900 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800a8fc:	2303      	movs	r3, #3
 800a8fe:	e266      	b.n	800adce <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a900:	4b55      	ldr	r3, [pc, #340]	; (800aa58 <HAL_RCC_OscConfig+0x4dc>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d1f0      	bne.n	800a8ee <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f003 0308 	and.w	r3, r3, #8
 800a914:	2b00      	cmp	r3, #0
 800a916:	d036      	beq.n	800a986 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	695b      	ldr	r3, [r3, #20]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d019      	beq.n	800a954 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a920:	4b4d      	ldr	r3, [pc, #308]	; (800aa58 <HAL_RCC_OscConfig+0x4dc>)
 800a922:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a924:	4a4c      	ldr	r2, [pc, #304]	; (800aa58 <HAL_RCC_OscConfig+0x4dc>)
 800a926:	f043 0301 	orr.w	r3, r3, #1
 800a92a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a92c:	f7f9 fd7e 	bl	800442c <HAL_GetTick>
 800a930:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a932:	e008      	b.n	800a946 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a934:	f7f9 fd7a 	bl	800442c <HAL_GetTick>
 800a938:	4602      	mov	r2, r0
 800a93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a93c:	1ad3      	subs	r3, r2, r3
 800a93e:	2b02      	cmp	r3, #2
 800a940:	d901      	bls.n	800a946 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800a942:	2303      	movs	r3, #3
 800a944:	e243      	b.n	800adce <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a946:	4b44      	ldr	r3, [pc, #272]	; (800aa58 <HAL_RCC_OscConfig+0x4dc>)
 800a948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a94a:	f003 0302 	and.w	r3, r3, #2
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d0f0      	beq.n	800a934 <HAL_RCC_OscConfig+0x3b8>
 800a952:	e018      	b.n	800a986 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a954:	4b40      	ldr	r3, [pc, #256]	; (800aa58 <HAL_RCC_OscConfig+0x4dc>)
 800a956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a958:	4a3f      	ldr	r2, [pc, #252]	; (800aa58 <HAL_RCC_OscConfig+0x4dc>)
 800a95a:	f023 0301 	bic.w	r3, r3, #1
 800a95e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a960:	f7f9 fd64 	bl	800442c <HAL_GetTick>
 800a964:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a966:	e008      	b.n	800a97a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a968:	f7f9 fd60 	bl	800442c <HAL_GetTick>
 800a96c:	4602      	mov	r2, r0
 800a96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a970:	1ad3      	subs	r3, r2, r3
 800a972:	2b02      	cmp	r3, #2
 800a974:	d901      	bls.n	800a97a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a976:	2303      	movs	r3, #3
 800a978:	e229      	b.n	800adce <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a97a:	4b37      	ldr	r3, [pc, #220]	; (800aa58 <HAL_RCC_OscConfig+0x4dc>)
 800a97c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a97e:	f003 0302 	and.w	r3, r3, #2
 800a982:	2b00      	cmp	r3, #0
 800a984:	d1f0      	bne.n	800a968 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f003 0320 	and.w	r3, r3, #32
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d036      	beq.n	800aa00 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	699b      	ldr	r3, [r3, #24]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d019      	beq.n	800a9ce <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a99a:	4b2f      	ldr	r3, [pc, #188]	; (800aa58 <HAL_RCC_OscConfig+0x4dc>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	4a2e      	ldr	r2, [pc, #184]	; (800aa58 <HAL_RCC_OscConfig+0x4dc>)
 800a9a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a9a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a9a6:	f7f9 fd41 	bl	800442c <HAL_GetTick>
 800a9aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a9ac:	e008      	b.n	800a9c0 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a9ae:	f7f9 fd3d 	bl	800442c <HAL_GetTick>
 800a9b2:	4602      	mov	r2, r0
 800a9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b6:	1ad3      	subs	r3, r2, r3
 800a9b8:	2b02      	cmp	r3, #2
 800a9ba:	d901      	bls.n	800a9c0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800a9bc:	2303      	movs	r3, #3
 800a9be:	e206      	b.n	800adce <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a9c0:	4b25      	ldr	r3, [pc, #148]	; (800aa58 <HAL_RCC_OscConfig+0x4dc>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d0f0      	beq.n	800a9ae <HAL_RCC_OscConfig+0x432>
 800a9cc:	e018      	b.n	800aa00 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a9ce:	4b22      	ldr	r3, [pc, #136]	; (800aa58 <HAL_RCC_OscConfig+0x4dc>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	4a21      	ldr	r2, [pc, #132]	; (800aa58 <HAL_RCC_OscConfig+0x4dc>)
 800a9d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a9d8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a9da:	f7f9 fd27 	bl	800442c <HAL_GetTick>
 800a9de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a9e0:	e008      	b.n	800a9f4 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a9e2:	f7f9 fd23 	bl	800442c <HAL_GetTick>
 800a9e6:	4602      	mov	r2, r0
 800a9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ea:	1ad3      	subs	r3, r2, r3
 800a9ec:	2b02      	cmp	r3, #2
 800a9ee:	d901      	bls.n	800a9f4 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800a9f0:	2303      	movs	r3, #3
 800a9f2:	e1ec      	b.n	800adce <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a9f4:	4b18      	ldr	r3, [pc, #96]	; (800aa58 <HAL_RCC_OscConfig+0x4dc>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d1f0      	bne.n	800a9e2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f003 0304 	and.w	r3, r3, #4
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	f000 80af 	beq.w	800ab6c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800aa0e:	4b13      	ldr	r3, [pc, #76]	; (800aa5c <HAL_RCC_OscConfig+0x4e0>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	4a12      	ldr	r2, [pc, #72]	; (800aa5c <HAL_RCC_OscConfig+0x4e0>)
 800aa14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aa1a:	f7f9 fd07 	bl	800442c <HAL_GetTick>
 800aa1e:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aa20:	e008      	b.n	800aa34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa22:	f7f9 fd03 	bl	800442c <HAL_GetTick>
 800aa26:	4602      	mov	r2, r0
 800aa28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa2a:	1ad3      	subs	r3, r2, r3
 800aa2c:	2b64      	cmp	r3, #100	; 0x64
 800aa2e:	d901      	bls.n	800aa34 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800aa30:	2303      	movs	r3, #3
 800aa32:	e1cc      	b.n	800adce <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aa34:	4b09      	ldr	r3, [pc, #36]	; (800aa5c <HAL_RCC_OscConfig+0x4e0>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d0f0      	beq.n	800aa22 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	689b      	ldr	r3, [r3, #8]
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	d10b      	bne.n	800aa60 <HAL_RCC_OscConfig+0x4e4>
 800aa48:	4b03      	ldr	r3, [pc, #12]	; (800aa58 <HAL_RCC_OscConfig+0x4dc>)
 800aa4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa4c:	4a02      	ldr	r2, [pc, #8]	; (800aa58 <HAL_RCC_OscConfig+0x4dc>)
 800aa4e:	f043 0301 	orr.w	r3, r3, #1
 800aa52:	6713      	str	r3, [r2, #112]	; 0x70
 800aa54:	e05b      	b.n	800ab0e <HAL_RCC_OscConfig+0x592>
 800aa56:	bf00      	nop
 800aa58:	58024400 	.word	0x58024400
 800aa5c:	58024800 	.word	0x58024800
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	689b      	ldr	r3, [r3, #8]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d112      	bne.n	800aa8e <HAL_RCC_OscConfig+0x512>
 800aa68:	4b9d      	ldr	r3, [pc, #628]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800aa6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa6c:	4a9c      	ldr	r2, [pc, #624]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800aa6e:	f023 0301 	bic.w	r3, r3, #1
 800aa72:	6713      	str	r3, [r2, #112]	; 0x70
 800aa74:	4b9a      	ldr	r3, [pc, #616]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800aa76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa78:	4a99      	ldr	r2, [pc, #612]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800aa7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa7e:	6713      	str	r3, [r2, #112]	; 0x70
 800aa80:	4b97      	ldr	r3, [pc, #604]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800aa82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa84:	4a96      	ldr	r2, [pc, #600]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800aa86:	f023 0304 	bic.w	r3, r3, #4
 800aa8a:	6713      	str	r3, [r2, #112]	; 0x70
 800aa8c:	e03f      	b.n	800ab0e <HAL_RCC_OscConfig+0x592>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	689b      	ldr	r3, [r3, #8]
 800aa92:	2b05      	cmp	r3, #5
 800aa94:	d112      	bne.n	800aabc <HAL_RCC_OscConfig+0x540>
 800aa96:	4b92      	ldr	r3, [pc, #584]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800aa98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa9a:	4a91      	ldr	r2, [pc, #580]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800aa9c:	f043 0304 	orr.w	r3, r3, #4
 800aaa0:	6713      	str	r3, [r2, #112]	; 0x70
 800aaa2:	4b8f      	ldr	r3, [pc, #572]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800aaa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaa6:	4a8e      	ldr	r2, [pc, #568]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800aaa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aaac:	6713      	str	r3, [r2, #112]	; 0x70
 800aaae:	4b8c      	ldr	r3, [pc, #560]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800aab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aab2:	4a8b      	ldr	r2, [pc, #556]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800aab4:	f043 0301 	orr.w	r3, r3, #1
 800aab8:	6713      	str	r3, [r2, #112]	; 0x70
 800aaba:	e028      	b.n	800ab0e <HAL_RCC_OscConfig+0x592>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	689b      	ldr	r3, [r3, #8]
 800aac0:	2b85      	cmp	r3, #133	; 0x85
 800aac2:	d112      	bne.n	800aaea <HAL_RCC_OscConfig+0x56e>
 800aac4:	4b86      	ldr	r3, [pc, #536]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800aac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aac8:	4a85      	ldr	r2, [pc, #532]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800aaca:	f043 0304 	orr.w	r3, r3, #4
 800aace:	6713      	str	r3, [r2, #112]	; 0x70
 800aad0:	4b83      	ldr	r3, [pc, #524]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800aad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aad4:	4a82      	ldr	r2, [pc, #520]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800aad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aada:	6713      	str	r3, [r2, #112]	; 0x70
 800aadc:	4b80      	ldr	r3, [pc, #512]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800aade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aae0:	4a7f      	ldr	r2, [pc, #508]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800aae2:	f043 0301 	orr.w	r3, r3, #1
 800aae6:	6713      	str	r3, [r2, #112]	; 0x70
 800aae8:	e011      	b.n	800ab0e <HAL_RCC_OscConfig+0x592>
 800aaea:	4b7d      	ldr	r3, [pc, #500]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800aaec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaee:	4a7c      	ldr	r2, [pc, #496]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800aaf0:	f023 0301 	bic.w	r3, r3, #1
 800aaf4:	6713      	str	r3, [r2, #112]	; 0x70
 800aaf6:	4b7a      	ldr	r3, [pc, #488]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800aaf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aafa:	4a79      	ldr	r2, [pc, #484]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800aafc:	f023 0304 	bic.w	r3, r3, #4
 800ab00:	6713      	str	r3, [r2, #112]	; 0x70
 800ab02:	4b77      	ldr	r3, [pc, #476]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800ab04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab06:	4a76      	ldr	r2, [pc, #472]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800ab08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	689b      	ldr	r3, [r3, #8]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d015      	beq.n	800ab42 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab16:	f7f9 fc89 	bl	800442c <HAL_GetTick>
 800ab1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ab1c:	e00a      	b.n	800ab34 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab1e:	f7f9 fc85 	bl	800442c <HAL_GetTick>
 800ab22:	4602      	mov	r2, r0
 800ab24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab26:	1ad3      	subs	r3, r2, r3
 800ab28:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d901      	bls.n	800ab34 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800ab30:	2303      	movs	r3, #3
 800ab32:	e14c      	b.n	800adce <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ab34:	4b6a      	ldr	r3, [pc, #424]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800ab36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab38:	f003 0302 	and.w	r3, r3, #2
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d0ee      	beq.n	800ab1e <HAL_RCC_OscConfig+0x5a2>
 800ab40:	e014      	b.n	800ab6c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab42:	f7f9 fc73 	bl	800442c <HAL_GetTick>
 800ab46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ab48:	e00a      	b.n	800ab60 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab4a:	f7f9 fc6f 	bl	800442c <HAL_GetTick>
 800ab4e:	4602      	mov	r2, r0
 800ab50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab52:	1ad3      	subs	r3, r2, r3
 800ab54:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d901      	bls.n	800ab60 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800ab5c:	2303      	movs	r3, #3
 800ab5e:	e136      	b.n	800adce <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ab60:	4b5f      	ldr	r3, [pc, #380]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800ab62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab64:	f003 0302 	and.w	r3, r3, #2
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d1ee      	bne.n	800ab4a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	f000 812b 	beq.w	800adcc <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ab76:	4b5a      	ldr	r3, [pc, #360]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800ab78:	691b      	ldr	r3, [r3, #16]
 800ab7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab7e:	2b18      	cmp	r3, #24
 800ab80:	f000 80bb 	beq.w	800acfa <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab88:	2b02      	cmp	r3, #2
 800ab8a:	f040 8095 	bne.w	800acb8 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab8e:	4b54      	ldr	r3, [pc, #336]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	4a53      	ldr	r2, [pc, #332]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800ab94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ab98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab9a:	f7f9 fc47 	bl	800442c <HAL_GetTick>
 800ab9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aba0:	e008      	b.n	800abb4 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aba2:	f7f9 fc43 	bl	800442c <HAL_GetTick>
 800aba6:	4602      	mov	r2, r0
 800aba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abaa:	1ad3      	subs	r3, r2, r3
 800abac:	2b02      	cmp	r3, #2
 800abae:	d901      	bls.n	800abb4 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800abb0:	2303      	movs	r3, #3
 800abb2:	e10c      	b.n	800adce <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800abb4:	4b4a      	ldr	r3, [pc, #296]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d1f0      	bne.n	800aba2 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800abc0:	4b47      	ldr	r3, [pc, #284]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800abc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800abc4:	4b47      	ldr	r3, [pc, #284]	; (800ace4 <HAL_RCC_OscConfig+0x768>)
 800abc6:	4013      	ands	r3, r2
 800abc8:	687a      	ldr	r2, [r7, #4]
 800abca:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800abd0:	0112      	lsls	r2, r2, #4
 800abd2:	430a      	orrs	r2, r1
 800abd4:	4942      	ldr	r1, [pc, #264]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800abd6:	4313      	orrs	r3, r2
 800abd8:	628b      	str	r3, [r1, #40]	; 0x28
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abde:	3b01      	subs	r3, #1
 800abe0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abe8:	3b01      	subs	r3, #1
 800abea:	025b      	lsls	r3, r3, #9
 800abec:	b29b      	uxth	r3, r3
 800abee:	431a      	orrs	r2, r3
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abf4:	3b01      	subs	r3, #1
 800abf6:	041b      	lsls	r3, r3, #16
 800abf8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800abfc:	431a      	orrs	r2, r3
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac02:	3b01      	subs	r3, #1
 800ac04:	061b      	lsls	r3, r3, #24
 800ac06:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ac0a:	4935      	ldr	r1, [pc, #212]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800ac0c:	4313      	orrs	r3, r2
 800ac0e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800ac10:	4b33      	ldr	r3, [pc, #204]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800ac12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac14:	4a32      	ldr	r2, [pc, #200]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800ac16:	f023 0301 	bic.w	r3, r3, #1
 800ac1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ac1c:	4b30      	ldr	r3, [pc, #192]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800ac1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac20:	4b31      	ldr	r3, [pc, #196]	; (800ace8 <HAL_RCC_OscConfig+0x76c>)
 800ac22:	4013      	ands	r3, r2
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ac28:	00d2      	lsls	r2, r2, #3
 800ac2a:	492d      	ldr	r1, [pc, #180]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ac30:	4b2b      	ldr	r3, [pc, #172]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800ac32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac34:	f023 020c 	bic.w	r2, r3, #12
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac3c:	4928      	ldr	r1, [pc, #160]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800ac3e:	4313      	orrs	r3, r2
 800ac40:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ac42:	4b27      	ldr	r3, [pc, #156]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800ac44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac46:	f023 0202 	bic.w	r2, r3, #2
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac4e:	4924      	ldr	r1, [pc, #144]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800ac50:	4313      	orrs	r3, r2
 800ac52:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ac54:	4b22      	ldr	r3, [pc, #136]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800ac56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac58:	4a21      	ldr	r2, [pc, #132]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800ac5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac60:	4b1f      	ldr	r3, [pc, #124]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800ac62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac64:	4a1e      	ldr	r2, [pc, #120]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800ac66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ac6c:	4b1c      	ldr	r3, [pc, #112]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800ac6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac70:	4a1b      	ldr	r2, [pc, #108]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800ac72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ac76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800ac78:	4b19      	ldr	r3, [pc, #100]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800ac7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac7c:	4a18      	ldr	r2, [pc, #96]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800ac7e:	f043 0301 	orr.w	r3, r3, #1
 800ac82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ac84:	4b16      	ldr	r3, [pc, #88]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	4a15      	ldr	r2, [pc, #84]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800ac8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ac8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac90:	f7f9 fbcc 	bl	800442c <HAL_GetTick>
 800ac94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ac96:	e008      	b.n	800acaa <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac98:	f7f9 fbc8 	bl	800442c <HAL_GetTick>
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca0:	1ad3      	subs	r3, r2, r3
 800aca2:	2b02      	cmp	r3, #2
 800aca4:	d901      	bls.n	800acaa <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800aca6:	2303      	movs	r3, #3
 800aca8:	e091      	b.n	800adce <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800acaa:	4b0d      	ldr	r3, [pc, #52]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d0f0      	beq.n	800ac98 <HAL_RCC_OscConfig+0x71c>
 800acb6:	e089      	b.n	800adcc <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800acb8:	4b09      	ldr	r3, [pc, #36]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4a08      	ldr	r2, [pc, #32]	; (800ace0 <HAL_RCC_OscConfig+0x764>)
 800acbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800acc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acc4:	f7f9 fbb2 	bl	800442c <HAL_GetTick>
 800acc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800acca:	e00f      	b.n	800acec <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800accc:	f7f9 fbae 	bl	800442c <HAL_GetTick>
 800acd0:	4602      	mov	r2, r0
 800acd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd4:	1ad3      	subs	r3, r2, r3
 800acd6:	2b02      	cmp	r3, #2
 800acd8:	d908      	bls.n	800acec <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800acda:	2303      	movs	r3, #3
 800acdc:	e077      	b.n	800adce <HAL_RCC_OscConfig+0x852>
 800acde:	bf00      	nop
 800ace0:	58024400 	.word	0x58024400
 800ace4:	fffffc0c 	.word	0xfffffc0c
 800ace8:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800acec:	4b3a      	ldr	r3, [pc, #232]	; (800add8 <HAL_RCC_OscConfig+0x85c>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d1e9      	bne.n	800accc <HAL_RCC_OscConfig+0x750>
 800acf8:	e068      	b.n	800adcc <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800acfa:	4b37      	ldr	r3, [pc, #220]	; (800add8 <HAL_RCC_OscConfig+0x85c>)
 800acfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acfe:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ad00:	4b35      	ldr	r3, [pc, #212]	; (800add8 <HAL_RCC_OscConfig+0x85c>)
 800ad02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad04:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	d031      	beq.n	800ad72 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	f003 0203 	and.w	r2, r3, #3
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d12a      	bne.n	800ad72 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	091b      	lsrs	r3, r3, #4
 800ad20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d122      	bne.n	800ad72 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad36:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d11a      	bne.n	800ad72 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	0a5b      	lsrs	r3, r3, #9
 800ad40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad48:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	d111      	bne.n	800ad72 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	0c1b      	lsrs	r3, r3, #16
 800ad52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad5a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	d108      	bne.n	800ad72 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	0e1b      	lsrs	r3, r3, #24
 800ad64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad6c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	d001      	beq.n	800ad76 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800ad72:	2301      	movs	r3, #1
 800ad74:	e02b      	b.n	800adce <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ad76:	4b18      	ldr	r3, [pc, #96]	; (800add8 <HAL_RCC_OscConfig+0x85c>)
 800ad78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad7a:	08db      	lsrs	r3, r3, #3
 800ad7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ad80:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad86:	693a      	ldr	r2, [r7, #16]
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	d01f      	beq.n	800adcc <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800ad8c:	4b12      	ldr	r3, [pc, #72]	; (800add8 <HAL_RCC_OscConfig+0x85c>)
 800ad8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad90:	4a11      	ldr	r2, [pc, #68]	; (800add8 <HAL_RCC_OscConfig+0x85c>)
 800ad92:	f023 0301 	bic.w	r3, r3, #1
 800ad96:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ad98:	f7f9 fb48 	bl	800442c <HAL_GetTick>
 800ad9c:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800ad9e:	bf00      	nop
 800ada0:	f7f9 fb44 	bl	800442c <HAL_GetTick>
 800ada4:	4602      	mov	r2, r0
 800ada6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d0f9      	beq.n	800ada0 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800adac:	4b0a      	ldr	r3, [pc, #40]	; (800add8 <HAL_RCC_OscConfig+0x85c>)
 800adae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800adb0:	4b0a      	ldr	r3, [pc, #40]	; (800addc <HAL_RCC_OscConfig+0x860>)
 800adb2:	4013      	ands	r3, r2
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800adb8:	00d2      	lsls	r2, r2, #3
 800adba:	4907      	ldr	r1, [pc, #28]	; (800add8 <HAL_RCC_OscConfig+0x85c>)
 800adbc:	4313      	orrs	r3, r2
 800adbe:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800adc0:	4b05      	ldr	r3, [pc, #20]	; (800add8 <HAL_RCC_OscConfig+0x85c>)
 800adc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc4:	4a04      	ldr	r2, [pc, #16]	; (800add8 <HAL_RCC_OscConfig+0x85c>)
 800adc6:	f043 0301 	orr.w	r3, r3, #1
 800adca:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800adcc:	2300      	movs	r3, #0
}
 800adce:	4618      	mov	r0, r3
 800add0:	3730      	adds	r7, #48	; 0x30
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop
 800add8:	58024400 	.word	0x58024400
 800addc:	ffff0007 	.word	0xffff0007

0800ade0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b086      	sub	sp, #24
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d101      	bne.n	800adf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800adf0:	2301      	movs	r3, #1
 800adf2:	e19c      	b.n	800b12e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800adf4:	4b8a      	ldr	r3, [pc, #552]	; (800b020 <HAL_RCC_ClockConfig+0x240>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f003 030f 	and.w	r3, r3, #15
 800adfc:	683a      	ldr	r2, [r7, #0]
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d910      	bls.n	800ae24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae02:	4b87      	ldr	r3, [pc, #540]	; (800b020 <HAL_RCC_ClockConfig+0x240>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f023 020f 	bic.w	r2, r3, #15
 800ae0a:	4985      	ldr	r1, [pc, #532]	; (800b020 <HAL_RCC_ClockConfig+0x240>)
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	4313      	orrs	r3, r2
 800ae10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae12:	4b83      	ldr	r3, [pc, #524]	; (800b020 <HAL_RCC_ClockConfig+0x240>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f003 030f 	and.w	r3, r3, #15
 800ae1a:	683a      	ldr	r2, [r7, #0]
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d001      	beq.n	800ae24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ae20:	2301      	movs	r3, #1
 800ae22:	e184      	b.n	800b12e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f003 0304 	and.w	r3, r3, #4
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d010      	beq.n	800ae52 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	691a      	ldr	r2, [r3, #16]
 800ae34:	4b7b      	ldr	r3, [pc, #492]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800ae36:	699b      	ldr	r3, [r3, #24]
 800ae38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d908      	bls.n	800ae52 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ae40:	4b78      	ldr	r3, [pc, #480]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800ae42:	699b      	ldr	r3, [r3, #24]
 800ae44:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	691b      	ldr	r3, [r3, #16]
 800ae4c:	4975      	ldr	r1, [pc, #468]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800ae4e:	4313      	orrs	r3, r2
 800ae50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f003 0308 	and.w	r3, r3, #8
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d010      	beq.n	800ae80 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	695a      	ldr	r2, [r3, #20]
 800ae62:	4b70      	ldr	r3, [pc, #448]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800ae64:	69db      	ldr	r3, [r3, #28]
 800ae66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d908      	bls.n	800ae80 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ae6e:	4b6d      	ldr	r3, [pc, #436]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800ae70:	69db      	ldr	r3, [r3, #28]
 800ae72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	695b      	ldr	r3, [r3, #20]
 800ae7a:	496a      	ldr	r1, [pc, #424]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800ae7c:	4313      	orrs	r3, r2
 800ae7e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f003 0310 	and.w	r3, r3, #16
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d010      	beq.n	800aeae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	699a      	ldr	r2, [r3, #24]
 800ae90:	4b64      	ldr	r3, [pc, #400]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800ae92:	69db      	ldr	r3, [r3, #28]
 800ae94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d908      	bls.n	800aeae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ae9c:	4b61      	ldr	r3, [pc, #388]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800ae9e:	69db      	ldr	r3, [r3, #28]
 800aea0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	699b      	ldr	r3, [r3, #24]
 800aea8:	495e      	ldr	r1, [pc, #376]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f003 0320 	and.w	r3, r3, #32
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d010      	beq.n	800aedc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	69da      	ldr	r2, [r3, #28]
 800aebe:	4b59      	ldr	r3, [pc, #356]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800aec0:	6a1b      	ldr	r3, [r3, #32]
 800aec2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d908      	bls.n	800aedc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800aeca:	4b56      	ldr	r3, [pc, #344]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800aecc:	6a1b      	ldr	r3, [r3, #32]
 800aece:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	69db      	ldr	r3, [r3, #28]
 800aed6:	4953      	ldr	r1, [pc, #332]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800aed8:	4313      	orrs	r3, r2
 800aeda:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f003 0302 	and.w	r3, r3, #2
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d010      	beq.n	800af0a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	68da      	ldr	r2, [r3, #12]
 800aeec:	4b4d      	ldr	r3, [pc, #308]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800aeee:	699b      	ldr	r3, [r3, #24]
 800aef0:	f003 030f 	and.w	r3, r3, #15
 800aef4:	429a      	cmp	r2, r3
 800aef6:	d908      	bls.n	800af0a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aef8:	4b4a      	ldr	r3, [pc, #296]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800aefa:	699b      	ldr	r3, [r3, #24]
 800aefc:	f023 020f 	bic.w	r2, r3, #15
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	68db      	ldr	r3, [r3, #12]
 800af04:	4947      	ldr	r1, [pc, #284]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800af06:	4313      	orrs	r3, r2
 800af08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f003 0301 	and.w	r3, r3, #1
 800af12:	2b00      	cmp	r3, #0
 800af14:	d055      	beq.n	800afc2 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800af16:	4b43      	ldr	r3, [pc, #268]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800af18:	699b      	ldr	r3, [r3, #24]
 800af1a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	689b      	ldr	r3, [r3, #8]
 800af22:	4940      	ldr	r1, [pc, #256]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800af24:	4313      	orrs	r3, r2
 800af26:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	685b      	ldr	r3, [r3, #4]
 800af2c:	2b02      	cmp	r3, #2
 800af2e:	d107      	bne.n	800af40 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800af30:	4b3c      	ldr	r3, [pc, #240]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d121      	bne.n	800af80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800af3c:	2301      	movs	r3, #1
 800af3e:	e0f6      	b.n	800b12e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	2b03      	cmp	r3, #3
 800af46:	d107      	bne.n	800af58 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800af48:	4b36      	ldr	r3, [pc, #216]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af50:	2b00      	cmp	r3, #0
 800af52:	d115      	bne.n	800af80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800af54:	2301      	movs	r3, #1
 800af56:	e0ea      	b.n	800b12e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d107      	bne.n	800af70 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800af60:	4b30      	ldr	r3, [pc, #192]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d109      	bne.n	800af80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800af6c:	2301      	movs	r3, #1
 800af6e:	e0de      	b.n	800b12e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800af70:	4b2c      	ldr	r3, [pc, #176]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f003 0304 	and.w	r3, r3, #4
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d101      	bne.n	800af80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800af7c:	2301      	movs	r3, #1
 800af7e:	e0d6      	b.n	800b12e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800af80:	4b28      	ldr	r3, [pc, #160]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800af82:	691b      	ldr	r3, [r3, #16]
 800af84:	f023 0207 	bic.w	r2, r3, #7
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	4925      	ldr	r1, [pc, #148]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800af8e:	4313      	orrs	r3, r2
 800af90:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af92:	f7f9 fa4b 	bl	800442c <HAL_GetTick>
 800af96:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af98:	e00a      	b.n	800afb0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800af9a:	f7f9 fa47 	bl	800442c <HAL_GetTick>
 800af9e:	4602      	mov	r2, r0
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	1ad3      	subs	r3, r2, r3
 800afa4:	f241 3288 	movw	r2, #5000	; 0x1388
 800afa8:	4293      	cmp	r3, r2
 800afaa:	d901      	bls.n	800afb0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800afac:	2303      	movs	r3, #3
 800afae:	e0be      	b.n	800b12e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800afb0:	4b1c      	ldr	r3, [pc, #112]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800afb2:	691b      	ldr	r3, [r3, #16]
 800afb4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	00db      	lsls	r3, r3, #3
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d1eb      	bne.n	800af9a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f003 0302 	and.w	r3, r3, #2
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d010      	beq.n	800aff0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	68da      	ldr	r2, [r3, #12]
 800afd2:	4b14      	ldr	r3, [pc, #80]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800afd4:	699b      	ldr	r3, [r3, #24]
 800afd6:	f003 030f 	and.w	r3, r3, #15
 800afda:	429a      	cmp	r2, r3
 800afdc:	d208      	bcs.n	800aff0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800afde:	4b11      	ldr	r3, [pc, #68]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800afe0:	699b      	ldr	r3, [r3, #24]
 800afe2:	f023 020f 	bic.w	r2, r3, #15
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	68db      	ldr	r3, [r3, #12]
 800afea:	490e      	ldr	r1, [pc, #56]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800afec:	4313      	orrs	r3, r2
 800afee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800aff0:	4b0b      	ldr	r3, [pc, #44]	; (800b020 <HAL_RCC_ClockConfig+0x240>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f003 030f 	and.w	r3, r3, #15
 800aff8:	683a      	ldr	r2, [r7, #0]
 800affa:	429a      	cmp	r2, r3
 800affc:	d214      	bcs.n	800b028 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800affe:	4b08      	ldr	r3, [pc, #32]	; (800b020 <HAL_RCC_ClockConfig+0x240>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f023 020f 	bic.w	r2, r3, #15
 800b006:	4906      	ldr	r1, [pc, #24]	; (800b020 <HAL_RCC_ClockConfig+0x240>)
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	4313      	orrs	r3, r2
 800b00c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b00e:	4b04      	ldr	r3, [pc, #16]	; (800b020 <HAL_RCC_ClockConfig+0x240>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f003 030f 	and.w	r3, r3, #15
 800b016:	683a      	ldr	r2, [r7, #0]
 800b018:	429a      	cmp	r2, r3
 800b01a:	d005      	beq.n	800b028 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b01c:	2301      	movs	r3, #1
 800b01e:	e086      	b.n	800b12e <HAL_RCC_ClockConfig+0x34e>
 800b020:	52002000 	.word	0x52002000
 800b024:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f003 0304 	and.w	r3, r3, #4
 800b030:	2b00      	cmp	r3, #0
 800b032:	d010      	beq.n	800b056 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	691a      	ldr	r2, [r3, #16]
 800b038:	4b3f      	ldr	r3, [pc, #252]	; (800b138 <HAL_RCC_ClockConfig+0x358>)
 800b03a:	699b      	ldr	r3, [r3, #24]
 800b03c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b040:	429a      	cmp	r2, r3
 800b042:	d208      	bcs.n	800b056 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b044:	4b3c      	ldr	r3, [pc, #240]	; (800b138 <HAL_RCC_ClockConfig+0x358>)
 800b046:	699b      	ldr	r3, [r3, #24]
 800b048:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	691b      	ldr	r3, [r3, #16]
 800b050:	4939      	ldr	r1, [pc, #228]	; (800b138 <HAL_RCC_ClockConfig+0x358>)
 800b052:	4313      	orrs	r3, r2
 800b054:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f003 0308 	and.w	r3, r3, #8
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d010      	beq.n	800b084 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	695a      	ldr	r2, [r3, #20]
 800b066:	4b34      	ldr	r3, [pc, #208]	; (800b138 <HAL_RCC_ClockConfig+0x358>)
 800b068:	69db      	ldr	r3, [r3, #28]
 800b06a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b06e:	429a      	cmp	r2, r3
 800b070:	d208      	bcs.n	800b084 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b072:	4b31      	ldr	r3, [pc, #196]	; (800b138 <HAL_RCC_ClockConfig+0x358>)
 800b074:	69db      	ldr	r3, [r3, #28]
 800b076:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	695b      	ldr	r3, [r3, #20]
 800b07e:	492e      	ldr	r1, [pc, #184]	; (800b138 <HAL_RCC_ClockConfig+0x358>)
 800b080:	4313      	orrs	r3, r2
 800b082:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f003 0310 	and.w	r3, r3, #16
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d010      	beq.n	800b0b2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	699a      	ldr	r2, [r3, #24]
 800b094:	4b28      	ldr	r3, [pc, #160]	; (800b138 <HAL_RCC_ClockConfig+0x358>)
 800b096:	69db      	ldr	r3, [r3, #28]
 800b098:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b09c:	429a      	cmp	r2, r3
 800b09e:	d208      	bcs.n	800b0b2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b0a0:	4b25      	ldr	r3, [pc, #148]	; (800b138 <HAL_RCC_ClockConfig+0x358>)
 800b0a2:	69db      	ldr	r3, [r3, #28]
 800b0a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	699b      	ldr	r3, [r3, #24]
 800b0ac:	4922      	ldr	r1, [pc, #136]	; (800b138 <HAL_RCC_ClockConfig+0x358>)
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f003 0320 	and.w	r3, r3, #32
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d010      	beq.n	800b0e0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	69da      	ldr	r2, [r3, #28]
 800b0c2:	4b1d      	ldr	r3, [pc, #116]	; (800b138 <HAL_RCC_ClockConfig+0x358>)
 800b0c4:	6a1b      	ldr	r3, [r3, #32]
 800b0c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d208      	bcs.n	800b0e0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b0ce:	4b1a      	ldr	r3, [pc, #104]	; (800b138 <HAL_RCC_ClockConfig+0x358>)
 800b0d0:	6a1b      	ldr	r3, [r3, #32]
 800b0d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	69db      	ldr	r3, [r3, #28]
 800b0da:	4917      	ldr	r1, [pc, #92]	; (800b138 <HAL_RCC_ClockConfig+0x358>)
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800b0e0:	f000 f89e 	bl	800b220 <HAL_RCC_GetSysClockFreq>
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	4b14      	ldr	r3, [pc, #80]	; (800b138 <HAL_RCC_ClockConfig+0x358>)
 800b0e8:	699b      	ldr	r3, [r3, #24]
 800b0ea:	0a1b      	lsrs	r3, r3, #8
 800b0ec:	f003 030f 	and.w	r3, r3, #15
 800b0f0:	4912      	ldr	r1, [pc, #72]	; (800b13c <HAL_RCC_ClockConfig+0x35c>)
 800b0f2:	5ccb      	ldrb	r3, [r1, r3]
 800b0f4:	f003 031f 	and.w	r3, r3, #31
 800b0f8:	fa22 f303 	lsr.w	r3, r2, r3
 800b0fc:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b0fe:	4b0e      	ldr	r3, [pc, #56]	; (800b138 <HAL_RCC_ClockConfig+0x358>)
 800b100:	699b      	ldr	r3, [r3, #24]
 800b102:	f003 030f 	and.w	r3, r3, #15
 800b106:	4a0d      	ldr	r2, [pc, #52]	; (800b13c <HAL_RCC_ClockConfig+0x35c>)
 800b108:	5cd3      	ldrb	r3, [r2, r3]
 800b10a:	f003 031f 	and.w	r3, r3, #31
 800b10e:	693a      	ldr	r2, [r7, #16]
 800b110:	fa22 f303 	lsr.w	r3, r2, r3
 800b114:	4a0a      	ldr	r2, [pc, #40]	; (800b140 <HAL_RCC_ClockConfig+0x360>)
 800b116:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b118:	4a0a      	ldr	r2, [pc, #40]	; (800b144 <HAL_RCC_ClockConfig+0x364>)
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b11e:	4b0a      	ldr	r3, [pc, #40]	; (800b148 <HAL_RCC_ClockConfig+0x368>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	4618      	mov	r0, r3
 800b124:	f7f9 f938 	bl	8004398 <HAL_InitTick>
 800b128:	4603      	mov	r3, r0
 800b12a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b12c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3718      	adds	r7, #24
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
 800b136:	bf00      	nop
 800b138:	58024400 	.word	0x58024400
 800b13c:	080104a0 	.word	0x080104a0
 800b140:	24000048 	.word	0x24000048
 800b144:	24000044 	.word	0x24000044
 800b148:	2400004c 	.word	0x2400004c

0800b14c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b08c      	sub	sp, #48	; 0x30
 800b150:	af00      	add	r7, sp, #0
 800b152:	60f8      	str	r0, [r7, #12]
 800b154:	60b9      	str	r1, [r7, #8]
 800b156:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d12a      	bne.n	800b1b4 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800b15e:	4b2d      	ldr	r3, [pc, #180]	; (800b214 <HAL_RCC_MCOConfig+0xc8>)
 800b160:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b164:	4a2b      	ldr	r2, [pc, #172]	; (800b214 <HAL_RCC_MCOConfig+0xc8>)
 800b166:	f043 0301 	orr.w	r3, r3, #1
 800b16a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800b16e:	4b29      	ldr	r3, [pc, #164]	; (800b214 <HAL_RCC_MCOConfig+0xc8>)
 800b170:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b174:	f003 0301 	and.w	r3, r3, #1
 800b178:	61bb      	str	r3, [r7, #24]
 800b17a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800b17c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b182:	2302      	movs	r3, #2
 800b184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b186:	2303      	movs	r3, #3
 800b188:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b18a:	2300      	movs	r3, #0
 800b18c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b18e:	2300      	movs	r3, #0
 800b190:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b192:	f107 031c 	add.w	r3, r7, #28
 800b196:	4619      	mov	r1, r3
 800b198:	481f      	ldr	r0, [pc, #124]	; (800b218 <HAL_RCC_MCOConfig+0xcc>)
 800b19a:	f7fd fcc1 	bl	8008b20 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800b19e:	4b1d      	ldr	r3, [pc, #116]	; (800b214 <HAL_RCC_MCOConfig+0xc8>)
 800b1a0:	691b      	ldr	r3, [r3, #16]
 800b1a2:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800b1a6:	68b9      	ldr	r1, [r7, #8]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	430b      	orrs	r3, r1
 800b1ac:	4919      	ldr	r1, [pc, #100]	; (800b214 <HAL_RCC_MCOConfig+0xc8>)
 800b1ae:	4313      	orrs	r3, r2
 800b1b0:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800b1b2:	e02a      	b.n	800b20a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800b1b4:	4b17      	ldr	r3, [pc, #92]	; (800b214 <HAL_RCC_MCOConfig+0xc8>)
 800b1b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b1ba:	4a16      	ldr	r2, [pc, #88]	; (800b214 <HAL_RCC_MCOConfig+0xc8>)
 800b1bc:	f043 0304 	orr.w	r3, r3, #4
 800b1c0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800b1c4:	4b13      	ldr	r3, [pc, #76]	; (800b214 <HAL_RCC_MCOConfig+0xc8>)
 800b1c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b1ca:	f003 0304 	and.w	r3, r3, #4
 800b1ce:	617b      	str	r3, [r7, #20]
 800b1d0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b1d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b1d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1d8:	2302      	movs	r3, #2
 800b1da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b1dc:	2303      	movs	r3, #3
 800b1de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b1e8:	f107 031c 	add.w	r3, r7, #28
 800b1ec:	4619      	mov	r1, r3
 800b1ee:	480b      	ldr	r0, [pc, #44]	; (800b21c <HAL_RCC_MCOConfig+0xd0>)
 800b1f0:	f7fd fc96 	bl	8008b20 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800b1f4:	4b07      	ldr	r3, [pc, #28]	; (800b214 <HAL_RCC_MCOConfig+0xc8>)
 800b1f6:	691b      	ldr	r3, [r3, #16]
 800b1f8:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	01d9      	lsls	r1, r3, #7
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	430b      	orrs	r3, r1
 800b204:	4903      	ldr	r1, [pc, #12]	; (800b214 <HAL_RCC_MCOConfig+0xc8>)
 800b206:	4313      	orrs	r3, r2
 800b208:	610b      	str	r3, [r1, #16]
}
 800b20a:	bf00      	nop
 800b20c:	3730      	adds	r7, #48	; 0x30
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
 800b212:	bf00      	nop
 800b214:	58024400 	.word	0x58024400
 800b218:	58020000 	.word	0x58020000
 800b21c:	58020800 	.word	0x58020800

0800b220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b220:	b480      	push	{r7}
 800b222:	b089      	sub	sp, #36	; 0x24
 800b224:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b226:	4bb3      	ldr	r3, [pc, #716]	; (800b4f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b228:	691b      	ldr	r3, [r3, #16]
 800b22a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b22e:	2b18      	cmp	r3, #24
 800b230:	f200 8155 	bhi.w	800b4de <HAL_RCC_GetSysClockFreq+0x2be>
 800b234:	a201      	add	r2, pc, #4	; (adr r2, 800b23c <HAL_RCC_GetSysClockFreq+0x1c>)
 800b236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b23a:	bf00      	nop
 800b23c:	0800b2a1 	.word	0x0800b2a1
 800b240:	0800b4df 	.word	0x0800b4df
 800b244:	0800b4df 	.word	0x0800b4df
 800b248:	0800b4df 	.word	0x0800b4df
 800b24c:	0800b4df 	.word	0x0800b4df
 800b250:	0800b4df 	.word	0x0800b4df
 800b254:	0800b4df 	.word	0x0800b4df
 800b258:	0800b4df 	.word	0x0800b4df
 800b25c:	0800b2c7 	.word	0x0800b2c7
 800b260:	0800b4df 	.word	0x0800b4df
 800b264:	0800b4df 	.word	0x0800b4df
 800b268:	0800b4df 	.word	0x0800b4df
 800b26c:	0800b4df 	.word	0x0800b4df
 800b270:	0800b4df 	.word	0x0800b4df
 800b274:	0800b4df 	.word	0x0800b4df
 800b278:	0800b4df 	.word	0x0800b4df
 800b27c:	0800b2cd 	.word	0x0800b2cd
 800b280:	0800b4df 	.word	0x0800b4df
 800b284:	0800b4df 	.word	0x0800b4df
 800b288:	0800b4df 	.word	0x0800b4df
 800b28c:	0800b4df 	.word	0x0800b4df
 800b290:	0800b4df 	.word	0x0800b4df
 800b294:	0800b4df 	.word	0x0800b4df
 800b298:	0800b4df 	.word	0x0800b4df
 800b29c:	0800b2d3 	.word	0x0800b2d3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2a0:	4b94      	ldr	r3, [pc, #592]	; (800b4f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f003 0320 	and.w	r3, r3, #32
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d009      	beq.n	800b2c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2ac:	4b91      	ldr	r3, [pc, #580]	; (800b4f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	08db      	lsrs	r3, r3, #3
 800b2b2:	f003 0303 	and.w	r3, r3, #3
 800b2b6:	4a90      	ldr	r2, [pc, #576]	; (800b4f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b2b8:	fa22 f303 	lsr.w	r3, r2, r3
 800b2bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b2be:	e111      	b.n	800b4e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b2c0:	4b8d      	ldr	r3, [pc, #564]	; (800b4f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b2c2:	61bb      	str	r3, [r7, #24]
      break;
 800b2c4:	e10e      	b.n	800b4e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b2c6:	4b8d      	ldr	r3, [pc, #564]	; (800b4fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b2c8:	61bb      	str	r3, [r7, #24]
      break;
 800b2ca:	e10b      	b.n	800b4e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b2cc:	4b8c      	ldr	r3, [pc, #560]	; (800b500 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b2ce:	61bb      	str	r3, [r7, #24]
      break;
 800b2d0:	e108      	b.n	800b4e4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b2d2:	4b88      	ldr	r3, [pc, #544]	; (800b4f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2d6:	f003 0303 	and.w	r3, r3, #3
 800b2da:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b2dc:	4b85      	ldr	r3, [pc, #532]	; (800b4f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2e0:	091b      	lsrs	r3, r3, #4
 800b2e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2e6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b2e8:	4b82      	ldr	r3, [pc, #520]	; (800b4f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ec:	f003 0301 	and.w	r3, r3, #1
 800b2f0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b2f2:	4b80      	ldr	r3, [pc, #512]	; (800b4f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2f6:	08db      	lsrs	r3, r3, #3
 800b2f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b2fc:	68fa      	ldr	r2, [r7, #12]
 800b2fe:	fb02 f303 	mul.w	r3, r2, r3
 800b302:	ee07 3a90 	vmov	s15, r3
 800b306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b30a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	2b00      	cmp	r3, #0
 800b312:	f000 80e1 	beq.w	800b4d8 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	2b02      	cmp	r3, #2
 800b31a:	f000 8083 	beq.w	800b424 <HAL_RCC_GetSysClockFreq+0x204>
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	2b02      	cmp	r3, #2
 800b322:	f200 80a1 	bhi.w	800b468 <HAL_RCC_GetSysClockFreq+0x248>
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d003      	beq.n	800b334 <HAL_RCC_GetSysClockFreq+0x114>
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	2b01      	cmp	r3, #1
 800b330:	d056      	beq.n	800b3e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b332:	e099      	b.n	800b468 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b334:	4b6f      	ldr	r3, [pc, #444]	; (800b4f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f003 0320 	and.w	r3, r3, #32
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d02d      	beq.n	800b39c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b340:	4b6c      	ldr	r3, [pc, #432]	; (800b4f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	08db      	lsrs	r3, r3, #3
 800b346:	f003 0303 	and.w	r3, r3, #3
 800b34a:	4a6b      	ldr	r2, [pc, #428]	; (800b4f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b34c:	fa22 f303 	lsr.w	r3, r2, r3
 800b350:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	ee07 3a90 	vmov	s15, r3
 800b358:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	ee07 3a90 	vmov	s15, r3
 800b362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b36a:	4b62      	ldr	r3, [pc, #392]	; (800b4f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b36c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b36e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b372:	ee07 3a90 	vmov	s15, r3
 800b376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b37a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b37e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b504 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b38a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b38e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b392:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b396:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b39a:	e087      	b.n	800b4ac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	ee07 3a90 	vmov	s15, r3
 800b3a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3a6:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b508 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b3aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3ae:	4b51      	ldr	r3, [pc, #324]	; (800b4f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3b6:	ee07 3a90 	vmov	s15, r3
 800b3ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3be:	ed97 6a02 	vldr	s12, [r7, #8]
 800b3c2:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b504 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b3c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b3de:	e065      	b.n	800b4ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	ee07 3a90 	vmov	s15, r3
 800b3e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3ea:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b50c <HAL_RCC_GetSysClockFreq+0x2ec>
 800b3ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3f2:	4b40      	ldr	r3, [pc, #256]	; (800b4f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3fa:	ee07 3a90 	vmov	s15, r3
 800b3fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b402:	ed97 6a02 	vldr	s12, [r7, #8]
 800b406:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b504 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b40a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b40e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b412:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b41a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b41e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b422:	e043      	b.n	800b4ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	ee07 3a90 	vmov	s15, r3
 800b42a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b42e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b510 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b436:	4b2f      	ldr	r3, [pc, #188]	; (800b4f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b43a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b43e:	ee07 3a90 	vmov	s15, r3
 800b442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b446:	ed97 6a02 	vldr	s12, [r7, #8]
 800b44a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b504 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b44e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b456:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b45a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b45e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b462:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b466:	e021      	b.n	800b4ac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	ee07 3a90 	vmov	s15, r3
 800b46e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b472:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b50c <HAL_RCC_GetSysClockFreq+0x2ec>
 800b476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b47a:	4b1e      	ldr	r3, [pc, #120]	; (800b4f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b47c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b47e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b482:	ee07 3a90 	vmov	s15, r3
 800b486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b48a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b48e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b504 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b49a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b49e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b4aa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b4ac:	4b11      	ldr	r3, [pc, #68]	; (800b4f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4b0:	0a5b      	lsrs	r3, r3, #9
 800b4b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	ee07 3a90 	vmov	s15, r3
 800b4c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b4c4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4d0:	ee17 3a90 	vmov	r3, s15
 800b4d4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b4d6:	e005      	b.n	800b4e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	61bb      	str	r3, [r7, #24]
      break;
 800b4dc:	e002      	b.n	800b4e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b4de:	4b07      	ldr	r3, [pc, #28]	; (800b4fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b4e0:	61bb      	str	r3, [r7, #24]
      break;
 800b4e2:	bf00      	nop
  }

  return sysclockfreq;
 800b4e4:	69bb      	ldr	r3, [r7, #24]
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3724      	adds	r7, #36	; 0x24
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f0:	4770      	bx	lr
 800b4f2:	bf00      	nop
 800b4f4:	58024400 	.word	0x58024400
 800b4f8:	03d09000 	.word	0x03d09000
 800b4fc:	003d0900 	.word	0x003d0900
 800b500:	016e3600 	.word	0x016e3600
 800b504:	46000000 	.word	0x46000000
 800b508:	4c742400 	.word	0x4c742400
 800b50c:	4a742400 	.word	0x4a742400
 800b510:	4bb71b00 	.word	0x4bb71b00

0800b514 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800b51a:	f7ff fe81 	bl	800b220 <HAL_RCC_GetSysClockFreq>
 800b51e:	4602      	mov	r2, r0
 800b520:	4b10      	ldr	r3, [pc, #64]	; (800b564 <HAL_RCC_GetHCLKFreq+0x50>)
 800b522:	699b      	ldr	r3, [r3, #24]
 800b524:	0a1b      	lsrs	r3, r3, #8
 800b526:	f003 030f 	and.w	r3, r3, #15
 800b52a:	490f      	ldr	r1, [pc, #60]	; (800b568 <HAL_RCC_GetHCLKFreq+0x54>)
 800b52c:	5ccb      	ldrb	r3, [r1, r3]
 800b52e:	f003 031f 	and.w	r3, r3, #31
 800b532:	fa22 f303 	lsr.w	r3, r2, r3
 800b536:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b538:	4b0a      	ldr	r3, [pc, #40]	; (800b564 <HAL_RCC_GetHCLKFreq+0x50>)
 800b53a:	699b      	ldr	r3, [r3, #24]
 800b53c:	f003 030f 	and.w	r3, r3, #15
 800b540:	4a09      	ldr	r2, [pc, #36]	; (800b568 <HAL_RCC_GetHCLKFreq+0x54>)
 800b542:	5cd3      	ldrb	r3, [r2, r3]
 800b544:	f003 031f 	and.w	r3, r3, #31
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	fa22 f303 	lsr.w	r3, r2, r3
 800b54e:	4a07      	ldr	r2, [pc, #28]	; (800b56c <HAL_RCC_GetHCLKFreq+0x58>)
 800b550:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b552:	4a07      	ldr	r2, [pc, #28]	; (800b570 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b558:	4b04      	ldr	r3, [pc, #16]	; (800b56c <HAL_RCC_GetHCLKFreq+0x58>)
 800b55a:	681b      	ldr	r3, [r3, #0]
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3708      	adds	r7, #8
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}
 800b564:	58024400 	.word	0x58024400
 800b568:	080104a0 	.word	0x080104a0
 800b56c:	24000048 	.word	0x24000048
 800b570:	24000044 	.word	0x24000044

0800b574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800b578:	f7ff ffcc 	bl	800b514 <HAL_RCC_GetHCLKFreq>
 800b57c:	4602      	mov	r2, r0
 800b57e:	4b06      	ldr	r3, [pc, #24]	; (800b598 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b580:	69db      	ldr	r3, [r3, #28]
 800b582:	091b      	lsrs	r3, r3, #4
 800b584:	f003 0307 	and.w	r3, r3, #7
 800b588:	4904      	ldr	r1, [pc, #16]	; (800b59c <HAL_RCC_GetPCLK1Freq+0x28>)
 800b58a:	5ccb      	ldrb	r3, [r1, r3]
 800b58c:	f003 031f 	and.w	r3, r3, #31
 800b590:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b594:	4618      	mov	r0, r3
 800b596:	bd80      	pop	{r7, pc}
 800b598:	58024400 	.word	0x58024400
 800b59c:	080104a0 	.word	0x080104a0

0800b5a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800b5a4:	f7ff ffb6 	bl	800b514 <HAL_RCC_GetHCLKFreq>
 800b5a8:	4602      	mov	r2, r0
 800b5aa:	4b06      	ldr	r3, [pc, #24]	; (800b5c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b5ac:	69db      	ldr	r3, [r3, #28]
 800b5ae:	0a1b      	lsrs	r3, r3, #8
 800b5b0:	f003 0307 	and.w	r3, r3, #7
 800b5b4:	4904      	ldr	r1, [pc, #16]	; (800b5c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b5b6:	5ccb      	ldrb	r3, [r1, r3]
 800b5b8:	f003 031f 	and.w	r3, r3, #31
 800b5bc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	bd80      	pop	{r7, pc}
 800b5c4:	58024400 	.word	0x58024400
 800b5c8:	080104a0 	.word	0x080104a0

0800b5cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b5cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b5d0:	b0c8      	sub	sp, #288	; 0x120
 800b5d2:	af00      	add	r7, sp, #0
 800b5d4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b5d8:	2300      	movs	r3, #0
 800b5da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b5de:	2300      	movs	r3, #0
 800b5e0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b5e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ec:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b5f0:	2500      	movs	r5, #0
 800b5f2:	ea54 0305 	orrs.w	r3, r4, r5
 800b5f6:	d049      	beq.n	800b68c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b5f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b5fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b602:	d02f      	beq.n	800b664 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b604:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b608:	d828      	bhi.n	800b65c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b60a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b60e:	d01a      	beq.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b610:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b614:	d822      	bhi.n	800b65c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b616:	2b00      	cmp	r3, #0
 800b618:	d003      	beq.n	800b622 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b61a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b61e:	d007      	beq.n	800b630 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b620:	e01c      	b.n	800b65c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b622:	4ba7      	ldr	r3, [pc, #668]	; (800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b626:	4aa6      	ldr	r2, [pc, #664]	; (800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b62c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b62e:	e01a      	b.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b630:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b634:	3308      	adds	r3, #8
 800b636:	2102      	movs	r1, #2
 800b638:	4618      	mov	r0, r3
 800b63a:	f001 fc43 	bl	800cec4 <RCCEx_PLL2_Config>
 800b63e:	4603      	mov	r3, r0
 800b640:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b644:	e00f      	b.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b646:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b64a:	3328      	adds	r3, #40	; 0x28
 800b64c:	2102      	movs	r1, #2
 800b64e:	4618      	mov	r0, r3
 800b650:	f001 fcea 	bl	800d028 <RCCEx_PLL3_Config>
 800b654:	4603      	mov	r3, r0
 800b656:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b65a:	e004      	b.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b65c:	2301      	movs	r3, #1
 800b65e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b662:	e000      	b.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b664:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b666:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d10a      	bne.n	800b684 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b66e:	4b94      	ldr	r3, [pc, #592]	; (800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b672:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b676:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b67a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b67c:	4a90      	ldr	r2, [pc, #576]	; (800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b67e:	430b      	orrs	r3, r1
 800b680:	6513      	str	r3, [r2, #80]	; 0x50
 800b682:	e003      	b.n	800b68c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b684:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b688:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b68c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b694:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b698:	f04f 0900 	mov.w	r9, #0
 800b69c:	ea58 0309 	orrs.w	r3, r8, r9
 800b6a0:	d047      	beq.n	800b732 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b6a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6a8:	2b04      	cmp	r3, #4
 800b6aa:	d82a      	bhi.n	800b702 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b6ac:	a201      	add	r2, pc, #4	; (adr r2, 800b6b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b6ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6b2:	bf00      	nop
 800b6b4:	0800b6c9 	.word	0x0800b6c9
 800b6b8:	0800b6d7 	.word	0x0800b6d7
 800b6bc:	0800b6ed 	.word	0x0800b6ed
 800b6c0:	0800b70b 	.word	0x0800b70b
 800b6c4:	0800b70b 	.word	0x0800b70b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6c8:	4b7d      	ldr	r3, [pc, #500]	; (800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b6ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6cc:	4a7c      	ldr	r2, [pc, #496]	; (800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b6ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b6d4:	e01a      	b.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b6d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6da:	3308      	adds	r3, #8
 800b6dc:	2100      	movs	r1, #0
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f001 fbf0 	bl	800cec4 <RCCEx_PLL2_Config>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b6ea:	e00f      	b.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b6ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6f0:	3328      	adds	r3, #40	; 0x28
 800b6f2:	2100      	movs	r1, #0
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f001 fc97 	bl	800d028 <RCCEx_PLL3_Config>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b700:	e004      	b.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b702:	2301      	movs	r3, #1
 800b704:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b708:	e000      	b.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b70a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b70c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b710:	2b00      	cmp	r3, #0
 800b712:	d10a      	bne.n	800b72a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b714:	4b6a      	ldr	r3, [pc, #424]	; (800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b718:	f023 0107 	bic.w	r1, r3, #7
 800b71c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b722:	4a67      	ldr	r2, [pc, #412]	; (800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b724:	430b      	orrs	r3, r1
 800b726:	6513      	str	r3, [r2, #80]	; 0x50
 800b728:	e003      	b.n	800b732 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b72a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b72e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800b732:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b73a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b73e:	f04f 0b00 	mov.w	fp, #0
 800b742:	ea5a 030b 	orrs.w	r3, sl, fp
 800b746:	d054      	beq.n	800b7f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800b748:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b74c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b74e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b752:	d036      	beq.n	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800b754:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b758:	d82f      	bhi.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b75a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b75e:	d032      	beq.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b760:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b764:	d829      	bhi.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b766:	2bc0      	cmp	r3, #192	; 0xc0
 800b768:	d02f      	beq.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800b76a:	2bc0      	cmp	r3, #192	; 0xc0
 800b76c:	d825      	bhi.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b76e:	2b80      	cmp	r3, #128	; 0x80
 800b770:	d018      	beq.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800b772:	2b80      	cmp	r3, #128	; 0x80
 800b774:	d821      	bhi.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b776:	2b00      	cmp	r3, #0
 800b778:	d002      	beq.n	800b780 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800b77a:	2b40      	cmp	r3, #64	; 0x40
 800b77c:	d007      	beq.n	800b78e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800b77e:	e01c      	b.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b780:	4b4f      	ldr	r3, [pc, #316]	; (800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b784:	4a4e      	ldr	r2, [pc, #312]	; (800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b786:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b78a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b78c:	e01e      	b.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b78e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b792:	3308      	adds	r3, #8
 800b794:	2100      	movs	r1, #0
 800b796:	4618      	mov	r0, r3
 800b798:	f001 fb94 	bl	800cec4 <RCCEx_PLL2_Config>
 800b79c:	4603      	mov	r3, r0
 800b79e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b7a2:	e013      	b.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b7a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7a8:	3328      	adds	r3, #40	; 0x28
 800b7aa:	2100      	movs	r1, #0
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f001 fc3b 	bl	800d028 <RCCEx_PLL3_Config>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b7b8:	e008      	b.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b7c0:	e004      	b.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b7c2:	bf00      	nop
 800b7c4:	e002      	b.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b7c6:	bf00      	nop
 800b7c8:	e000      	b.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b7ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d10a      	bne.n	800b7ea <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800b7d4:	4b3a      	ldr	r3, [pc, #232]	; (800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b7d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7d8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b7dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7e2:	4a37      	ldr	r2, [pc, #220]	; (800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b7e4:	430b      	orrs	r3, r1
 800b7e6:	6513      	str	r3, [r2, #80]	; 0x50
 800b7e8:	e003      	b.n	800b7f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b7ee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800b7f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7fa:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b7fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b802:	2300      	movs	r3, #0
 800b804:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b808:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b80c:	460b      	mov	r3, r1
 800b80e:	4313      	orrs	r3, r2
 800b810:	d05c      	beq.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800b812:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b818:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800b81c:	d03b      	beq.n	800b896 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b81e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800b822:	d834      	bhi.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b824:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b828:	d037      	beq.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800b82a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b82e:	d82e      	bhi.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b830:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b834:	d033      	beq.n	800b89e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b836:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b83a:	d828      	bhi.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b83c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b840:	d01a      	beq.n	800b878 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800b842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b846:	d822      	bhi.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d003      	beq.n	800b854 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800b84c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b850:	d007      	beq.n	800b862 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800b852:	e01c      	b.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b854:	4b1a      	ldr	r3, [pc, #104]	; (800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b858:	4a19      	ldr	r2, [pc, #100]	; (800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b85a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b85e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b860:	e01e      	b.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b862:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b866:	3308      	adds	r3, #8
 800b868:	2100      	movs	r1, #0
 800b86a:	4618      	mov	r0, r3
 800b86c:	f001 fb2a 	bl	800cec4 <RCCEx_PLL2_Config>
 800b870:	4603      	mov	r3, r0
 800b872:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b876:	e013      	b.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b878:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b87c:	3328      	adds	r3, #40	; 0x28
 800b87e:	2100      	movs	r1, #0
 800b880:	4618      	mov	r0, r3
 800b882:	f001 fbd1 	bl	800d028 <RCCEx_PLL3_Config>
 800b886:	4603      	mov	r3, r0
 800b888:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b88c:	e008      	b.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b88e:	2301      	movs	r3, #1
 800b890:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b894:	e004      	b.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b896:	bf00      	nop
 800b898:	e002      	b.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b89a:	bf00      	nop
 800b89c:	e000      	b.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b89e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d10d      	bne.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800b8a8:	4b05      	ldr	r3, [pc, #20]	; (800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b8aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8ac:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800b8b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b8b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b8b6:	4a02      	ldr	r2, [pc, #8]	; (800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b8b8:	430b      	orrs	r3, r1
 800b8ba:	6513      	str	r3, [r2, #80]	; 0x50
 800b8bc:	e006      	b.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0x300>
 800b8be:	bf00      	nop
 800b8c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b8c8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b8cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b8d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b8dc:	2300      	movs	r3, #0
 800b8de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b8e2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b8e6:	460b      	mov	r3, r1
 800b8e8:	4313      	orrs	r3, r2
 800b8ea:	d03a      	beq.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800b8ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b8f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8f2:	2b30      	cmp	r3, #48	; 0x30
 800b8f4:	d01f      	beq.n	800b936 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800b8f6:	2b30      	cmp	r3, #48	; 0x30
 800b8f8:	d819      	bhi.n	800b92e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800b8fa:	2b20      	cmp	r3, #32
 800b8fc:	d00c      	beq.n	800b918 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800b8fe:	2b20      	cmp	r3, #32
 800b900:	d815      	bhi.n	800b92e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800b902:	2b00      	cmp	r3, #0
 800b904:	d019      	beq.n	800b93a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800b906:	2b10      	cmp	r3, #16
 800b908:	d111      	bne.n	800b92e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b90a:	4bae      	ldr	r3, [pc, #696]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b90c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b90e:	4aad      	ldr	r2, [pc, #692]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b914:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b916:	e011      	b.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b918:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b91c:	3308      	adds	r3, #8
 800b91e:	2102      	movs	r1, #2
 800b920:	4618      	mov	r0, r3
 800b922:	f001 facf 	bl	800cec4 <RCCEx_PLL2_Config>
 800b926:	4603      	mov	r3, r0
 800b928:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b92c:	e006      	b.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b92e:	2301      	movs	r3, #1
 800b930:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b934:	e002      	b.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800b936:	bf00      	nop
 800b938:	e000      	b.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800b93a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b93c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b940:	2b00      	cmp	r3, #0
 800b942:	d10a      	bne.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b944:	4b9f      	ldr	r3, [pc, #636]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b948:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b94c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b952:	4a9c      	ldr	r2, [pc, #624]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b954:	430b      	orrs	r3, r1
 800b956:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b958:	e003      	b.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b95a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b95e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b962:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b96e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b972:	2300      	movs	r3, #0
 800b974:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b978:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b97c:	460b      	mov	r3, r1
 800b97e:	4313      	orrs	r3, r2
 800b980:	d051      	beq.n	800ba26 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b982:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b986:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b988:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b98c:	d035      	beq.n	800b9fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800b98e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b992:	d82e      	bhi.n	800b9f2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b994:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b998:	d031      	beq.n	800b9fe <HAL_RCCEx_PeriphCLKConfig+0x432>
 800b99a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b99e:	d828      	bhi.n	800b9f2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b9a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b9a4:	d01a      	beq.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0x410>
 800b9a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b9aa:	d822      	bhi.n	800b9f2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d003      	beq.n	800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800b9b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9b4:	d007      	beq.n	800b9c6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800b9b6:	e01c      	b.n	800b9f2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9b8:	4b82      	ldr	r3, [pc, #520]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9bc:	4a81      	ldr	r2, [pc, #516]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b9be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b9c4:	e01c      	b.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b9c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b9ca:	3308      	adds	r3, #8
 800b9cc:	2100      	movs	r1, #0
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f001 fa78 	bl	800cec4 <RCCEx_PLL2_Config>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b9da:	e011      	b.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b9dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b9e0:	3328      	adds	r3, #40	; 0x28
 800b9e2:	2100      	movs	r1, #0
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f001 fb1f 	bl	800d028 <RCCEx_PLL3_Config>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b9f0:	e006      	b.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b9f8:	e002      	b.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800b9fa:	bf00      	nop
 800b9fc:	e000      	b.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800b9fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d10a      	bne.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ba08:	4b6e      	ldr	r3, [pc, #440]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba0c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800ba10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba16:	4a6b      	ldr	r2, [pc, #428]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba18:	430b      	orrs	r3, r1
 800ba1a:	6513      	str	r3, [r2, #80]	; 0x50
 800ba1c:	e003      	b.n	800ba26 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba1e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ba22:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ba26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba2e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800ba32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ba36:	2300      	movs	r3, #0
 800ba38:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ba3c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800ba40:	460b      	mov	r3, r1
 800ba42:	4313      	orrs	r3, r2
 800ba44:	d053      	beq.n	800baee <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ba46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ba50:	d033      	beq.n	800baba <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800ba52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ba56:	d82c      	bhi.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800ba58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ba5c:	d02f      	beq.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800ba5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ba62:	d826      	bhi.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800ba64:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ba68:	d02b      	beq.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ba6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ba6e:	d820      	bhi.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800ba70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba74:	d012      	beq.n	800ba9c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800ba76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba7a:	d81a      	bhi.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d022      	beq.n	800bac6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800ba80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba84:	d115      	bne.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba8a:	3308      	adds	r3, #8
 800ba8c:	2101      	movs	r1, #1
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f001 fa18 	bl	800cec4 <RCCEx_PLL2_Config>
 800ba94:	4603      	mov	r3, r0
 800ba96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ba9a:	e015      	b.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800baa0:	3328      	adds	r3, #40	; 0x28
 800baa2:	2101      	movs	r1, #1
 800baa4:	4618      	mov	r0, r3
 800baa6:	f001 fabf 	bl	800d028 <RCCEx_PLL3_Config>
 800baaa:	4603      	mov	r3, r0
 800baac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bab0:	e00a      	b.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bab2:	2301      	movs	r3, #1
 800bab4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bab8:	e006      	b.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800baba:	bf00      	nop
 800babc:	e004      	b.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800babe:	bf00      	nop
 800bac0:	e002      	b.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bac2:	bf00      	nop
 800bac4:	e000      	b.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bac6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bac8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d10a      	bne.n	800bae6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bad0:	4b3c      	ldr	r3, [pc, #240]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bad4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800bad8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800badc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bade:	4a39      	ldr	r2, [pc, #228]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bae0:	430b      	orrs	r3, r1
 800bae2:	6513      	str	r3, [r2, #80]	; 0x50
 800bae4:	e003      	b.n	800baee <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bae6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800baea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800baee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800baf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800bafa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bafe:	2300      	movs	r3, #0
 800bb00:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bb04:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800bb08:	460b      	mov	r3, r1
 800bb0a:	4313      	orrs	r3, r2
 800bb0c:	d060      	beq.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800bb0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bb16:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800bb1a:	d039      	beq.n	800bb90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800bb1c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800bb20:	d832      	bhi.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bb22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bb26:	d035      	beq.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800bb28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bb2c:	d82c      	bhi.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bb2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb32:	d031      	beq.n	800bb98 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800bb34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb38:	d826      	bhi.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bb3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bb3e:	d02d      	beq.n	800bb9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800bb40:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bb44:	d820      	bhi.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bb46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb4a:	d012      	beq.n	800bb72 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800bb4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb50:	d81a      	bhi.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d024      	beq.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800bb56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb5a:	d115      	bne.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bb5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb60:	3308      	adds	r3, #8
 800bb62:	2101      	movs	r1, #1
 800bb64:	4618      	mov	r0, r3
 800bb66:	f001 f9ad 	bl	800cec4 <RCCEx_PLL2_Config>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bb70:	e017      	b.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb76:	3328      	adds	r3, #40	; 0x28
 800bb78:	2101      	movs	r1, #1
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f001 fa54 	bl	800d028 <RCCEx_PLL3_Config>
 800bb80:	4603      	mov	r3, r0
 800bb82:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bb86:	e00c      	b.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800bb88:	2301      	movs	r3, #1
 800bb8a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bb8e:	e008      	b.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bb90:	bf00      	nop
 800bb92:	e006      	b.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bb94:	bf00      	nop
 800bb96:	e004      	b.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bb98:	bf00      	nop
 800bb9a:	e002      	b.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bb9c:	bf00      	nop
 800bb9e:	e000      	b.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bba0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bba2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d10e      	bne.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bbaa:	4b06      	ldr	r3, [pc, #24]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bbac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbae:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bbb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bbb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bbba:	4a02      	ldr	r2, [pc, #8]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bbbc:	430b      	orrs	r3, r1
 800bbbe:	6593      	str	r3, [r2, #88]	; 0x58
 800bbc0:	e006      	b.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800bbc2:	bf00      	nop
 800bbc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbc8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bbcc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bbd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800bbdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bbe6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bbea:	460b      	mov	r3, r1
 800bbec:	4313      	orrs	r3, r2
 800bbee:	d037      	beq.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800bbf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bbf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbfa:	d00e      	beq.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800bbfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc00:	d816      	bhi.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d018      	beq.n	800bc38 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800bc06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc0a:	d111      	bne.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc0c:	4bc4      	ldr	r3, [pc, #784]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc10:	4ac3      	ldr	r2, [pc, #780]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bc18:	e00f      	b.n	800bc3a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc1e:	3308      	adds	r3, #8
 800bc20:	2101      	movs	r1, #1
 800bc22:	4618      	mov	r0, r3
 800bc24:	f001 f94e 	bl	800cec4 <RCCEx_PLL2_Config>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bc2e:	e004      	b.n	800bc3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc30:	2301      	movs	r3, #1
 800bc32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bc36:	e000      	b.n	800bc3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800bc38:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc3a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d10a      	bne.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bc42:	4bb7      	ldr	r3, [pc, #732]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc46:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bc4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc50:	4ab3      	ldr	r2, [pc, #716]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc52:	430b      	orrs	r3, r1
 800bc54:	6513      	str	r3, [r2, #80]	; 0x50
 800bc56:	e003      	b.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bc5c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bc60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc68:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800bc6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bc70:	2300      	movs	r3, #0
 800bc72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bc76:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800bc7a:	460b      	mov	r3, r1
 800bc7c:	4313      	orrs	r3, r2
 800bc7e:	d039      	beq.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800bc80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc86:	2b03      	cmp	r3, #3
 800bc88:	d81c      	bhi.n	800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800bc8a:	a201      	add	r2, pc, #4	; (adr r2, 800bc90 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800bc8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc90:	0800bccd 	.word	0x0800bccd
 800bc94:	0800bca1 	.word	0x0800bca1
 800bc98:	0800bcaf 	.word	0x0800bcaf
 800bc9c:	0800bccd 	.word	0x0800bccd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bca0:	4b9f      	ldr	r3, [pc, #636]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bca4:	4a9e      	ldr	r2, [pc, #632]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bca6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bcaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bcac:	e00f      	b.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bcae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bcb2:	3308      	adds	r3, #8
 800bcb4:	2102      	movs	r1, #2
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f001 f904 	bl	800cec4 <RCCEx_PLL2_Config>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bcc2:	e004      	b.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bcca:	e000      	b.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800bccc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d10a      	bne.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bcd6:	4b92      	ldr	r3, [pc, #584]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcda:	f023 0103 	bic.w	r1, r3, #3
 800bcde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bce4:	4a8e      	ldr	r2, [pc, #568]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bce6:	430b      	orrs	r3, r1
 800bce8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bcea:	e003      	b.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bcf0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bcf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bcf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800bd00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bd04:	2300      	movs	r3, #0
 800bd06:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bd0a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800bd0e:	460b      	mov	r3, r1
 800bd10:	4313      	orrs	r3, r2
 800bd12:	f000 8099 	beq.w	800be48 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bd16:	4b83      	ldr	r3, [pc, #524]	; (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	4a82      	ldr	r2, [pc, #520]	; (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bd1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bd22:	f7f8 fb83 	bl	800442c <HAL_GetTick>
 800bd26:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bd2a:	e00b      	b.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bd2c:	f7f8 fb7e 	bl	800442c <HAL_GetTick>
 800bd30:	4602      	mov	r2, r0
 800bd32:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bd36:	1ad3      	subs	r3, r2, r3
 800bd38:	2b64      	cmp	r3, #100	; 0x64
 800bd3a:	d903      	bls.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800bd3c:	2303      	movs	r3, #3
 800bd3e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bd42:	e005      	b.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bd44:	4b77      	ldr	r3, [pc, #476]	; (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d0ed      	beq.n	800bd2c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800bd50:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d173      	bne.n	800be40 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bd58:	4b71      	ldr	r3, [pc, #452]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bd5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bd64:	4053      	eors	r3, r2
 800bd66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d015      	beq.n	800bd9a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bd6e:	4b6c      	ldr	r3, [pc, #432]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd76:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bd7a:	4b69      	ldr	r3, [pc, #420]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd7e:	4a68      	ldr	r2, [pc, #416]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bd84:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bd86:	4b66      	ldr	r3, [pc, #408]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd8a:	4a65      	ldr	r2, [pc, #404]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bd90:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bd92:	4a63      	ldr	r2, [pc, #396]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd98:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bd9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bda2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bda6:	d118      	bne.n	800bdda <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bda8:	f7f8 fb40 	bl	800442c <HAL_GetTick>
 800bdac:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bdb0:	e00d      	b.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bdb2:	f7f8 fb3b 	bl	800442c <HAL_GetTick>
 800bdb6:	4602      	mov	r2, r0
 800bdb8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bdbc:	1ad2      	subs	r2, r2, r3
 800bdbe:	f241 3388 	movw	r3, #5000	; 0x1388
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	d903      	bls.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800bdc6:	2303      	movs	r3, #3
 800bdc8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800bdcc:	e005      	b.n	800bdda <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bdce:	4b54      	ldr	r3, [pc, #336]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdd2:	f003 0302 	and.w	r3, r3, #2
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d0eb      	beq.n	800bdb2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800bdda:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d129      	bne.n	800be36 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bde2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bde6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bdea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bdee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bdf2:	d10e      	bne.n	800be12 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800bdf4:	4b4a      	ldr	r3, [pc, #296]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdf6:	691b      	ldr	r3, [r3, #16]
 800bdf8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800bdfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800be04:	091a      	lsrs	r2, r3, #4
 800be06:	4b48      	ldr	r3, [pc, #288]	; (800bf28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800be08:	4013      	ands	r3, r2
 800be0a:	4a45      	ldr	r2, [pc, #276]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be0c:	430b      	orrs	r3, r1
 800be0e:	6113      	str	r3, [r2, #16]
 800be10:	e005      	b.n	800be1e <HAL_RCCEx_PeriphCLKConfig+0x852>
 800be12:	4b43      	ldr	r3, [pc, #268]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be14:	691b      	ldr	r3, [r3, #16]
 800be16:	4a42      	ldr	r2, [pc, #264]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be18:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800be1c:	6113      	str	r3, [r2, #16]
 800be1e:	4b40      	ldr	r3, [pc, #256]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be20:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800be22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800be2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800be2e:	4a3c      	ldr	r2, [pc, #240]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be30:	430b      	orrs	r3, r1
 800be32:	6713      	str	r3, [r2, #112]	; 0x70
 800be34:	e008      	b.n	800be48 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800be36:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800be3a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800be3e:	e003      	b.n	800be48 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800be44:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800be48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be50:	f002 0301 	and.w	r3, r2, #1
 800be54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800be58:	2300      	movs	r3, #0
 800be5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800be5e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800be62:	460b      	mov	r3, r1
 800be64:	4313      	orrs	r3, r2
 800be66:	f000 8090 	beq.w	800bf8a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800be6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be72:	2b28      	cmp	r3, #40	; 0x28
 800be74:	d870      	bhi.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800be76:	a201      	add	r2, pc, #4	; (adr r2, 800be7c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800be78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be7c:	0800bf61 	.word	0x0800bf61
 800be80:	0800bf59 	.word	0x0800bf59
 800be84:	0800bf59 	.word	0x0800bf59
 800be88:	0800bf59 	.word	0x0800bf59
 800be8c:	0800bf59 	.word	0x0800bf59
 800be90:	0800bf59 	.word	0x0800bf59
 800be94:	0800bf59 	.word	0x0800bf59
 800be98:	0800bf59 	.word	0x0800bf59
 800be9c:	0800bf2d 	.word	0x0800bf2d
 800bea0:	0800bf59 	.word	0x0800bf59
 800bea4:	0800bf59 	.word	0x0800bf59
 800bea8:	0800bf59 	.word	0x0800bf59
 800beac:	0800bf59 	.word	0x0800bf59
 800beb0:	0800bf59 	.word	0x0800bf59
 800beb4:	0800bf59 	.word	0x0800bf59
 800beb8:	0800bf59 	.word	0x0800bf59
 800bebc:	0800bf43 	.word	0x0800bf43
 800bec0:	0800bf59 	.word	0x0800bf59
 800bec4:	0800bf59 	.word	0x0800bf59
 800bec8:	0800bf59 	.word	0x0800bf59
 800becc:	0800bf59 	.word	0x0800bf59
 800bed0:	0800bf59 	.word	0x0800bf59
 800bed4:	0800bf59 	.word	0x0800bf59
 800bed8:	0800bf59 	.word	0x0800bf59
 800bedc:	0800bf61 	.word	0x0800bf61
 800bee0:	0800bf59 	.word	0x0800bf59
 800bee4:	0800bf59 	.word	0x0800bf59
 800bee8:	0800bf59 	.word	0x0800bf59
 800beec:	0800bf59 	.word	0x0800bf59
 800bef0:	0800bf59 	.word	0x0800bf59
 800bef4:	0800bf59 	.word	0x0800bf59
 800bef8:	0800bf59 	.word	0x0800bf59
 800befc:	0800bf61 	.word	0x0800bf61
 800bf00:	0800bf59 	.word	0x0800bf59
 800bf04:	0800bf59 	.word	0x0800bf59
 800bf08:	0800bf59 	.word	0x0800bf59
 800bf0c:	0800bf59 	.word	0x0800bf59
 800bf10:	0800bf59 	.word	0x0800bf59
 800bf14:	0800bf59 	.word	0x0800bf59
 800bf18:	0800bf59 	.word	0x0800bf59
 800bf1c:	0800bf61 	.word	0x0800bf61
 800bf20:	58024400 	.word	0x58024400
 800bf24:	58024800 	.word	0x58024800
 800bf28:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bf2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf30:	3308      	adds	r3, #8
 800bf32:	2101      	movs	r1, #1
 800bf34:	4618      	mov	r0, r3
 800bf36:	f000 ffc5 	bl	800cec4 <RCCEx_PLL2_Config>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bf40:	e00f      	b.n	800bf62 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bf42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf46:	3328      	adds	r3, #40	; 0x28
 800bf48:	2101      	movs	r1, #1
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f001 f86c 	bl	800d028 <RCCEx_PLL3_Config>
 800bf50:	4603      	mov	r3, r0
 800bf52:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bf56:	e004      	b.n	800bf62 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf58:	2301      	movs	r3, #1
 800bf5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bf5e:	e000      	b.n	800bf62 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800bf60:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf62:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d10b      	bne.n	800bf82 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bf6a:	4bc0      	ldr	r3, [pc, #768]	; (800c26c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bf6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf6e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800bf72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf7a:	4abc      	ldr	r2, [pc, #752]	; (800c26c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bf7c:	430b      	orrs	r3, r1
 800bf7e:	6553      	str	r3, [r2, #84]	; 0x54
 800bf80:	e003      	b.n	800bf8a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf82:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bf86:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bf8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf92:	f002 0302 	and.w	r3, r2, #2
 800bf96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bfa0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800bfa4:	460b      	mov	r3, r1
 800bfa6:	4313      	orrs	r3, r2
 800bfa8:	d043      	beq.n	800c032 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800bfaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bfae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bfb2:	2b05      	cmp	r3, #5
 800bfb4:	d824      	bhi.n	800c000 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800bfb6:	a201      	add	r2, pc, #4	; (adr r2, 800bfbc <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800bfb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfbc:	0800c009 	.word	0x0800c009
 800bfc0:	0800bfd5 	.word	0x0800bfd5
 800bfc4:	0800bfeb 	.word	0x0800bfeb
 800bfc8:	0800c009 	.word	0x0800c009
 800bfcc:	0800c009 	.word	0x0800c009
 800bfd0:	0800c009 	.word	0x0800c009
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bfd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bfd8:	3308      	adds	r3, #8
 800bfda:	2101      	movs	r1, #1
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f000 ff71 	bl	800cec4 <RCCEx_PLL2_Config>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bfe8:	e00f      	b.n	800c00a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bfea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bfee:	3328      	adds	r3, #40	; 0x28
 800bff0:	2101      	movs	r1, #1
 800bff2:	4618      	mov	r0, r3
 800bff4:	f001 f818 	bl	800d028 <RCCEx_PLL3_Config>
 800bff8:	4603      	mov	r3, r0
 800bffa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bffe:	e004      	b.n	800c00a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c000:	2301      	movs	r3, #1
 800c002:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c006:	e000      	b.n	800c00a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800c008:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c00a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d10b      	bne.n	800c02a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c012:	4b96      	ldr	r3, [pc, #600]	; (800c26c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c016:	f023 0107 	bic.w	r1, r3, #7
 800c01a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c01e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c022:	4a92      	ldr	r2, [pc, #584]	; (800c26c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c024:	430b      	orrs	r3, r1
 800c026:	6553      	str	r3, [r2, #84]	; 0x54
 800c028:	e003      	b.n	800c032 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c02a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c02e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c032:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c03a:	f002 0304 	and.w	r3, r2, #4
 800c03e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c042:	2300      	movs	r3, #0
 800c044:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c048:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800c04c:	460b      	mov	r3, r1
 800c04e:	4313      	orrs	r3, r2
 800c050:	d043      	beq.n	800c0da <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c052:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c056:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c05a:	2b05      	cmp	r3, #5
 800c05c:	d824      	bhi.n	800c0a8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800c05e:	a201      	add	r2, pc, #4	; (adr r2, 800c064 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800c060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c064:	0800c0b1 	.word	0x0800c0b1
 800c068:	0800c07d 	.word	0x0800c07d
 800c06c:	0800c093 	.word	0x0800c093
 800c070:	0800c0b1 	.word	0x0800c0b1
 800c074:	0800c0b1 	.word	0x0800c0b1
 800c078:	0800c0b1 	.word	0x0800c0b1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c07c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c080:	3308      	adds	r3, #8
 800c082:	2101      	movs	r1, #1
 800c084:	4618      	mov	r0, r3
 800c086:	f000 ff1d 	bl	800cec4 <RCCEx_PLL2_Config>
 800c08a:	4603      	mov	r3, r0
 800c08c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c090:	e00f      	b.n	800c0b2 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c092:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c096:	3328      	adds	r3, #40	; 0x28
 800c098:	2101      	movs	r1, #1
 800c09a:	4618      	mov	r0, r3
 800c09c:	f000 ffc4 	bl	800d028 <RCCEx_PLL3_Config>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c0a6:	e004      	b.n	800c0b2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c0ae:	e000      	b.n	800c0b2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800c0b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c0b2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d10b      	bne.n	800c0d2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c0ba:	4b6c      	ldr	r3, [pc, #432]	; (800c26c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c0bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0be:	f023 0107 	bic.w	r1, r3, #7
 800c0c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c0ca:	4a68      	ldr	r2, [pc, #416]	; (800c26c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c0cc:	430b      	orrs	r3, r1
 800c0ce:	6593      	str	r3, [r2, #88]	; 0x58
 800c0d0:	e003      	b.n	800c0da <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0d2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c0d6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c0da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e2:	f002 0320 	and.w	r3, r2, #32
 800c0e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c0f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c0f4:	460b      	mov	r3, r1
 800c0f6:	4313      	orrs	r3, r2
 800c0f8:	d055      	beq.n	800c1a6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c0fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c102:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c106:	d033      	beq.n	800c170 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c108:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c10c:	d82c      	bhi.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c10e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c112:	d02f      	beq.n	800c174 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c118:	d826      	bhi.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c11a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c11e:	d02b      	beq.n	800c178 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c120:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c124:	d820      	bhi.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c126:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c12a:	d012      	beq.n	800c152 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800c12c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c130:	d81a      	bhi.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c132:	2b00      	cmp	r3, #0
 800c134:	d022      	beq.n	800c17c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800c136:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c13a:	d115      	bne.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c13c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c140:	3308      	adds	r3, #8
 800c142:	2100      	movs	r1, #0
 800c144:	4618      	mov	r0, r3
 800c146:	f000 febd 	bl	800cec4 <RCCEx_PLL2_Config>
 800c14a:	4603      	mov	r3, r0
 800c14c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c150:	e015      	b.n	800c17e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c152:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c156:	3328      	adds	r3, #40	; 0x28
 800c158:	2102      	movs	r1, #2
 800c15a:	4618      	mov	r0, r3
 800c15c:	f000 ff64 	bl	800d028 <RCCEx_PLL3_Config>
 800c160:	4603      	mov	r3, r0
 800c162:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c166:	e00a      	b.n	800c17e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c168:	2301      	movs	r3, #1
 800c16a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c16e:	e006      	b.n	800c17e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c170:	bf00      	nop
 800c172:	e004      	b.n	800c17e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c174:	bf00      	nop
 800c176:	e002      	b.n	800c17e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c178:	bf00      	nop
 800c17a:	e000      	b.n	800c17e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c17c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c17e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c182:	2b00      	cmp	r3, #0
 800c184:	d10b      	bne.n	800c19e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c186:	4b39      	ldr	r3, [pc, #228]	; (800c26c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c18a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c18e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c192:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c196:	4a35      	ldr	r2, [pc, #212]	; (800c26c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c198:	430b      	orrs	r3, r1
 800c19a:	6553      	str	r3, [r2, #84]	; 0x54
 800c19c:	e003      	b.n	800c1a6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c19e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c1a2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c1a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ae:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800c1b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c1bc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800c1c0:	460b      	mov	r3, r1
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	d058      	beq.n	800c278 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c1c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c1ce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c1d2:	d033      	beq.n	800c23c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c1d4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c1d8:	d82c      	bhi.n	800c234 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c1da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1de:	d02f      	beq.n	800c240 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c1e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1e4:	d826      	bhi.n	800c234 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c1e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c1ea:	d02b      	beq.n	800c244 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c1ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c1f0:	d820      	bhi.n	800c234 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c1f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c1f6:	d012      	beq.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800c1f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c1fc:	d81a      	bhi.n	800c234 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d022      	beq.n	800c248 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800c202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c206:	d115      	bne.n	800c234 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c208:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c20c:	3308      	adds	r3, #8
 800c20e:	2100      	movs	r1, #0
 800c210:	4618      	mov	r0, r3
 800c212:	f000 fe57 	bl	800cec4 <RCCEx_PLL2_Config>
 800c216:	4603      	mov	r3, r0
 800c218:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c21c:	e015      	b.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c21e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c222:	3328      	adds	r3, #40	; 0x28
 800c224:	2102      	movs	r1, #2
 800c226:	4618      	mov	r0, r3
 800c228:	f000 fefe 	bl	800d028 <RCCEx_PLL3_Config>
 800c22c:	4603      	mov	r3, r0
 800c22e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c232:	e00a      	b.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c234:	2301      	movs	r3, #1
 800c236:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c23a:	e006      	b.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c23c:	bf00      	nop
 800c23e:	e004      	b.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c240:	bf00      	nop
 800c242:	e002      	b.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c244:	bf00      	nop
 800c246:	e000      	b.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c248:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c24a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d10e      	bne.n	800c270 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c252:	4b06      	ldr	r3, [pc, #24]	; (800c26c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c256:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800c25a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c25e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c262:	4a02      	ldr	r2, [pc, #8]	; (800c26c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c264:	430b      	orrs	r3, r1
 800c266:	6593      	str	r3, [r2, #88]	; 0x58
 800c268:	e006      	b.n	800c278 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800c26a:	bf00      	nop
 800c26c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c270:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c274:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c278:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c280:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800c284:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c288:	2300      	movs	r3, #0
 800c28a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c28e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800c292:	460b      	mov	r3, r1
 800c294:	4313      	orrs	r3, r2
 800c296:	d055      	beq.n	800c344 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c298:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c29c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c2a0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c2a4:	d033      	beq.n	800c30e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c2a6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c2aa:	d82c      	bhi.n	800c306 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c2ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c2b0:	d02f      	beq.n	800c312 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c2b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c2b6:	d826      	bhi.n	800c306 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c2b8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c2bc:	d02b      	beq.n	800c316 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c2be:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c2c2:	d820      	bhi.n	800c306 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c2c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c2c8:	d012      	beq.n	800c2f0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800c2ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c2ce:	d81a      	bhi.n	800c306 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d022      	beq.n	800c31a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800c2d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c2d8:	d115      	bne.n	800c306 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c2da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2de:	3308      	adds	r3, #8
 800c2e0:	2100      	movs	r1, #0
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f000 fdee 	bl	800cec4 <RCCEx_PLL2_Config>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c2ee:	e015      	b.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c2f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2f4:	3328      	adds	r3, #40	; 0x28
 800c2f6:	2102      	movs	r1, #2
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f000 fe95 	bl	800d028 <RCCEx_PLL3_Config>
 800c2fe:	4603      	mov	r3, r0
 800c300:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c304:	e00a      	b.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c306:	2301      	movs	r3, #1
 800c308:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c30c:	e006      	b.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c30e:	bf00      	nop
 800c310:	e004      	b.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c312:	bf00      	nop
 800c314:	e002      	b.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c316:	bf00      	nop
 800c318:	e000      	b.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c31a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c31c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c320:	2b00      	cmp	r3, #0
 800c322:	d10b      	bne.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c324:	4ba1      	ldr	r3, [pc, #644]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c328:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c32c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c330:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c334:	4a9d      	ldr	r2, [pc, #628]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c336:	430b      	orrs	r3, r1
 800c338:	6593      	str	r3, [r2, #88]	; 0x58
 800c33a:	e003      	b.n	800c344 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c33c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c340:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c344:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c34c:	f002 0308 	and.w	r3, r2, #8
 800c350:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c354:	2300      	movs	r3, #0
 800c356:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c35a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c35e:	460b      	mov	r3, r1
 800c360:	4313      	orrs	r3, r2
 800c362:	d01e      	beq.n	800c3a2 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c364:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c368:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c36c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c370:	d10c      	bne.n	800c38c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c372:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c376:	3328      	adds	r3, #40	; 0x28
 800c378:	2102      	movs	r1, #2
 800c37a:	4618      	mov	r0, r3
 800c37c:	f000 fe54 	bl	800d028 <RCCEx_PLL3_Config>
 800c380:	4603      	mov	r3, r0
 800c382:	2b00      	cmp	r3, #0
 800c384:	d002      	beq.n	800c38c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800c386:	2301      	movs	r3, #1
 800c388:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c38c:	4b87      	ldr	r3, [pc, #540]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c38e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c390:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c394:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c39c:	4a83      	ldr	r2, [pc, #524]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c39e:	430b      	orrs	r3, r1
 800c3a0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c3a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3aa:	f002 0310 	and.w	r3, r2, #16
 800c3ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c3b8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c3bc:	460b      	mov	r3, r1
 800c3be:	4313      	orrs	r3, r2
 800c3c0:	d01e      	beq.n	800c400 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c3c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c3ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3ce:	d10c      	bne.n	800c3ea <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c3d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3d4:	3328      	adds	r3, #40	; 0x28
 800c3d6:	2102      	movs	r1, #2
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f000 fe25 	bl	800d028 <RCCEx_PLL3_Config>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d002      	beq.n	800c3ea <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c3ea:	4b70      	ldr	r3, [pc, #448]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c3ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c3f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c3fa:	4a6c      	ldr	r2, [pc, #432]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c3fc:	430b      	orrs	r3, r1
 800c3fe:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c400:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c408:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c40c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c410:	2300      	movs	r3, #0
 800c412:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c416:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c41a:	460b      	mov	r3, r1
 800c41c:	4313      	orrs	r3, r2
 800c41e:	d03e      	beq.n	800c49e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c420:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c424:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c428:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c42c:	d022      	beq.n	800c474 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800c42e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c432:	d81b      	bhi.n	800c46c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c434:	2b00      	cmp	r3, #0
 800c436:	d003      	beq.n	800c440 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800c438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c43c:	d00b      	beq.n	800c456 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800c43e:	e015      	b.n	800c46c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c440:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c444:	3308      	adds	r3, #8
 800c446:	2100      	movs	r1, #0
 800c448:	4618      	mov	r0, r3
 800c44a:	f000 fd3b 	bl	800cec4 <RCCEx_PLL2_Config>
 800c44e:	4603      	mov	r3, r0
 800c450:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c454:	e00f      	b.n	800c476 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c456:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c45a:	3328      	adds	r3, #40	; 0x28
 800c45c:	2102      	movs	r1, #2
 800c45e:	4618      	mov	r0, r3
 800c460:	f000 fde2 	bl	800d028 <RCCEx_PLL3_Config>
 800c464:	4603      	mov	r3, r0
 800c466:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c46a:	e004      	b.n	800c476 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c46c:	2301      	movs	r3, #1
 800c46e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c472:	e000      	b.n	800c476 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800c474:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c476:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d10b      	bne.n	800c496 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c47e:	4b4b      	ldr	r3, [pc, #300]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c482:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c486:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c48a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c48e:	4a47      	ldr	r2, [pc, #284]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c490:	430b      	orrs	r3, r1
 800c492:	6593      	str	r3, [r2, #88]	; 0x58
 800c494:	e003      	b.n	800c49e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c496:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c49a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c49e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c4aa:	67bb      	str	r3, [r7, #120]	; 0x78
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c4b0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c4b4:	460b      	mov	r3, r1
 800c4b6:	4313      	orrs	r3, r2
 800c4b8:	d03b      	beq.n	800c532 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c4ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c4c6:	d01f      	beq.n	800c508 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800c4c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c4cc:	d818      	bhi.n	800c500 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c4ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c4d2:	d003      	beq.n	800c4dc <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800c4d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c4d8:	d007      	beq.n	800c4ea <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800c4da:	e011      	b.n	800c500 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4dc:	4b33      	ldr	r3, [pc, #204]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c4de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4e0:	4a32      	ldr	r2, [pc, #200]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c4e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c4e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c4e8:	e00f      	b.n	800c50a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c4ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4ee:	3328      	adds	r3, #40	; 0x28
 800c4f0:	2101      	movs	r1, #1
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f000 fd98 	bl	800d028 <RCCEx_PLL3_Config>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800c4fe:	e004      	b.n	800c50a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c500:	2301      	movs	r3, #1
 800c502:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c506:	e000      	b.n	800c50a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800c508:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c50a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d10b      	bne.n	800c52a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c512:	4b26      	ldr	r3, [pc, #152]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c516:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c51a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c51e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c522:	4a22      	ldr	r2, [pc, #136]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c524:	430b      	orrs	r3, r1
 800c526:	6553      	str	r3, [r2, #84]	; 0x54
 800c528:	e003      	b.n	800c532 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c52a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c52e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c532:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c53a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c53e:	673b      	str	r3, [r7, #112]	; 0x70
 800c540:	2300      	movs	r3, #0
 800c542:	677b      	str	r3, [r7, #116]	; 0x74
 800c544:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c548:	460b      	mov	r3, r1
 800c54a:	4313      	orrs	r3, r2
 800c54c:	d034      	beq.n	800c5b8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c54e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c554:	2b00      	cmp	r3, #0
 800c556:	d003      	beq.n	800c560 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800c558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c55c:	d007      	beq.n	800c56e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800c55e:	e011      	b.n	800c584 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c560:	4b12      	ldr	r3, [pc, #72]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c564:	4a11      	ldr	r2, [pc, #68]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c56a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c56c:	e00e      	b.n	800c58c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c56e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c572:	3308      	adds	r3, #8
 800c574:	2102      	movs	r1, #2
 800c576:	4618      	mov	r0, r3
 800c578:	f000 fca4 	bl	800cec4 <RCCEx_PLL2_Config>
 800c57c:	4603      	mov	r3, r0
 800c57e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c582:	e003      	b.n	800c58c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800c584:	2301      	movs	r3, #1
 800c586:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c58a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c58c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c590:	2b00      	cmp	r3, #0
 800c592:	d10d      	bne.n	800c5b0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c594:	4b05      	ldr	r3, [pc, #20]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c598:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c59c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5a2:	4a02      	ldr	r2, [pc, #8]	; (800c5ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c5a4:	430b      	orrs	r3, r1
 800c5a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c5a8:	e006      	b.n	800c5b8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800c5aa:	bf00      	nop
 800c5ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c5b4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c5b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c5c4:	66bb      	str	r3, [r7, #104]	; 0x68
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c5ca:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c5ce:	460b      	mov	r3, r1
 800c5d0:	4313      	orrs	r3, r2
 800c5d2:	d00c      	beq.n	800c5ee <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c5d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5d8:	3328      	adds	r3, #40	; 0x28
 800c5da:	2102      	movs	r1, #2
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f000 fd23 	bl	800d028 <RCCEx_PLL3_Config>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d002      	beq.n	800c5ee <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c5ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c5fa:	663b      	str	r3, [r7, #96]	; 0x60
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	667b      	str	r3, [r7, #100]	; 0x64
 800c600:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c604:	460b      	mov	r3, r1
 800c606:	4313      	orrs	r3, r2
 800c608:	d038      	beq.n	800c67c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c60a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c60e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c612:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c616:	d018      	beq.n	800c64a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800c618:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c61c:	d811      	bhi.n	800c642 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c61e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c622:	d014      	beq.n	800c64e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800c624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c628:	d80b      	bhi.n	800c642 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d011      	beq.n	800c652 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800c62e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c632:	d106      	bne.n	800c642 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c634:	4bc3      	ldr	r3, [pc, #780]	; (800c944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c638:	4ac2      	ldr	r2, [pc, #776]	; (800c944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c63a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c63e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c640:	e008      	b.n	800c654 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c642:	2301      	movs	r3, #1
 800c644:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c648:	e004      	b.n	800c654 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c64a:	bf00      	nop
 800c64c:	e002      	b.n	800c654 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c64e:	bf00      	nop
 800c650:	e000      	b.n	800c654 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c652:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c654:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d10b      	bne.n	800c674 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c65c:	4bb9      	ldr	r3, [pc, #740]	; (800c944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c65e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c660:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c664:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c66c:	4ab5      	ldr	r2, [pc, #724]	; (800c944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c66e:	430b      	orrs	r3, r1
 800c670:	6553      	str	r3, [r2, #84]	; 0x54
 800c672:	e003      	b.n	800c67c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c674:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c678:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c67c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c684:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c688:	65bb      	str	r3, [r7, #88]	; 0x58
 800c68a:	2300      	movs	r3, #0
 800c68c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c68e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c692:	460b      	mov	r3, r1
 800c694:	4313      	orrs	r3, r2
 800c696:	d009      	beq.n	800c6ac <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c698:	4baa      	ldr	r3, [pc, #680]	; (800c944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c69a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c69c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c6a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6a6:	4aa7      	ldr	r2, [pc, #668]	; (800c944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c6a8:	430b      	orrs	r3, r1
 800c6aa:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c6ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c6b8:	653b      	str	r3, [r7, #80]	; 0x50
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	657b      	str	r3, [r7, #84]	; 0x54
 800c6be:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c6c2:	460b      	mov	r3, r1
 800c6c4:	4313      	orrs	r3, r2
 800c6c6:	d009      	beq.n	800c6dc <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c6c8:	4b9e      	ldr	r3, [pc, #632]	; (800c944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c6ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6cc:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c6d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6d6:	4a9b      	ldr	r2, [pc, #620]	; (800c944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c6d8:	430b      	orrs	r3, r1
 800c6da:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800c6dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e4:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800c6e8:	64bb      	str	r3, [r7, #72]	; 0x48
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c6ee:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c6f2:	460b      	mov	r3, r1
 800c6f4:	4313      	orrs	r3, r2
 800c6f6:	d009      	beq.n	800c70c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800c6f8:	4b92      	ldr	r3, [pc, #584]	; (800c944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c6fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6fc:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 800c700:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c706:	4a8f      	ldr	r2, [pc, #572]	; (800c944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c708:	430b      	orrs	r3, r1
 800c70a:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c70c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c714:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c718:	643b      	str	r3, [r7, #64]	; 0x40
 800c71a:	2300      	movs	r3, #0
 800c71c:	647b      	str	r3, [r7, #68]	; 0x44
 800c71e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c722:	460b      	mov	r3, r1
 800c724:	4313      	orrs	r3, r2
 800c726:	d00e      	beq.n	800c746 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c728:	4b86      	ldr	r3, [pc, #536]	; (800c944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c72a:	691b      	ldr	r3, [r3, #16]
 800c72c:	4a85      	ldr	r2, [pc, #532]	; (800c944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c72e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c732:	6113      	str	r3, [r2, #16]
 800c734:	4b83      	ldr	r3, [pc, #524]	; (800c944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c736:	6919      	ldr	r1, [r3, #16]
 800c738:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c73c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c740:	4a80      	ldr	r2, [pc, #512]	; (800c944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c742:	430b      	orrs	r3, r1
 800c744:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c746:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c74e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c752:	63bb      	str	r3, [r7, #56]	; 0x38
 800c754:	2300      	movs	r3, #0
 800c756:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c758:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c75c:	460b      	mov	r3, r1
 800c75e:	4313      	orrs	r3, r2
 800c760:	d009      	beq.n	800c776 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c762:	4b78      	ldr	r3, [pc, #480]	; (800c944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c766:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c76a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c76e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c770:	4a74      	ldr	r2, [pc, #464]	; (800c944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c772:	430b      	orrs	r3, r1
 800c774:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c776:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c77e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c782:	633b      	str	r3, [r7, #48]	; 0x30
 800c784:	2300      	movs	r3, #0
 800c786:	637b      	str	r3, [r7, #52]	; 0x34
 800c788:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c78c:	460b      	mov	r3, r1
 800c78e:	4313      	orrs	r3, r2
 800c790:	d00a      	beq.n	800c7a8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c792:	4b6c      	ldr	r3, [pc, #432]	; (800c944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c796:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c79a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c79e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c7a2:	4a68      	ldr	r2, [pc, #416]	; (800c944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c7a4:	430b      	orrs	r3, r1
 800c7a6:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c7a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b0:	2100      	movs	r1, #0
 800c7b2:	62b9      	str	r1, [r7, #40]	; 0x28
 800c7b4:	f003 0301 	and.w	r3, r3, #1
 800c7b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c7ba:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c7be:	460b      	mov	r3, r1
 800c7c0:	4313      	orrs	r3, r2
 800c7c2:	d011      	beq.n	800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c7c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7c8:	3308      	adds	r3, #8
 800c7ca:	2100      	movs	r1, #0
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f000 fb79 	bl	800cec4 <RCCEx_PLL2_Config>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c7d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d003      	beq.n	800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c7e4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c7e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f0:	2100      	movs	r1, #0
 800c7f2:	6239      	str	r1, [r7, #32]
 800c7f4:	f003 0302 	and.w	r3, r3, #2
 800c7f8:	627b      	str	r3, [r7, #36]	; 0x24
 800c7fa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c7fe:	460b      	mov	r3, r1
 800c800:	4313      	orrs	r3, r2
 800c802:	d011      	beq.n	800c828 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c804:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c808:	3308      	adds	r3, #8
 800c80a:	2101      	movs	r1, #1
 800c80c:	4618      	mov	r0, r3
 800c80e:	f000 fb59 	bl	800cec4 <RCCEx_PLL2_Config>
 800c812:	4603      	mov	r3, r0
 800c814:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c818:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d003      	beq.n	800c828 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c820:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c824:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c828:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c830:	2100      	movs	r1, #0
 800c832:	61b9      	str	r1, [r7, #24]
 800c834:	f003 0304 	and.w	r3, r3, #4
 800c838:	61fb      	str	r3, [r7, #28]
 800c83a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c83e:	460b      	mov	r3, r1
 800c840:	4313      	orrs	r3, r2
 800c842:	d011      	beq.n	800c868 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c844:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c848:	3308      	adds	r3, #8
 800c84a:	2102      	movs	r1, #2
 800c84c:	4618      	mov	r0, r3
 800c84e:	f000 fb39 	bl	800cec4 <RCCEx_PLL2_Config>
 800c852:	4603      	mov	r3, r0
 800c854:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c858:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d003      	beq.n	800c868 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c860:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c864:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c868:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c870:	2100      	movs	r1, #0
 800c872:	6139      	str	r1, [r7, #16]
 800c874:	f003 0308 	and.w	r3, r3, #8
 800c878:	617b      	str	r3, [r7, #20]
 800c87a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c87e:	460b      	mov	r3, r1
 800c880:	4313      	orrs	r3, r2
 800c882:	d011      	beq.n	800c8a8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c884:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c888:	3328      	adds	r3, #40	; 0x28
 800c88a:	2100      	movs	r1, #0
 800c88c:	4618      	mov	r0, r3
 800c88e:	f000 fbcb 	bl	800d028 <RCCEx_PLL3_Config>
 800c892:	4603      	mov	r3, r0
 800c894:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800c898:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d003      	beq.n	800c8a8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c8a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c8a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b0:	2100      	movs	r1, #0
 800c8b2:	60b9      	str	r1, [r7, #8]
 800c8b4:	f003 0310 	and.w	r3, r3, #16
 800c8b8:	60fb      	str	r3, [r7, #12]
 800c8ba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c8be:	460b      	mov	r3, r1
 800c8c0:	4313      	orrs	r3, r2
 800c8c2:	d011      	beq.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c8c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c8c8:	3328      	adds	r3, #40	; 0x28
 800c8ca:	2101      	movs	r1, #1
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f000 fbab 	bl	800d028 <RCCEx_PLL3_Config>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c8d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d003      	beq.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c8e4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c8e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f0:	2100      	movs	r1, #0
 800c8f2:	6039      	str	r1, [r7, #0]
 800c8f4:	f003 0320 	and.w	r3, r3, #32
 800c8f8:	607b      	str	r3, [r7, #4]
 800c8fa:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c8fe:	460b      	mov	r3, r1
 800c900:	4313      	orrs	r3, r2
 800c902:	d011      	beq.n	800c928 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c904:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c908:	3328      	adds	r3, #40	; 0x28
 800c90a:	2102      	movs	r1, #2
 800c90c:	4618      	mov	r0, r3
 800c90e:	f000 fb8b 	bl	800d028 <RCCEx_PLL3_Config>
 800c912:	4603      	mov	r3, r0
 800c914:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c918:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d003      	beq.n	800c928 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c920:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c924:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 800c928:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d101      	bne.n	800c934 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800c930:	2300      	movs	r3, #0
 800c932:	e000      	b.n	800c936 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800c934:	2301      	movs	r3, #1
}
 800c936:	4618      	mov	r0, r3
 800c938:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800c93c:	46bd      	mov	sp, r7
 800c93e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c942:	bf00      	nop
 800c944:	58024400 	.word	0x58024400

0800c948 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800c94c:	f7fe fde2 	bl	800b514 <HAL_RCC_GetHCLKFreq>
 800c950:	4602      	mov	r2, r0
 800c952:	4b06      	ldr	r3, [pc, #24]	; (800c96c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c954:	6a1b      	ldr	r3, [r3, #32]
 800c956:	091b      	lsrs	r3, r3, #4
 800c958:	f003 0307 	and.w	r3, r3, #7
 800c95c:	4904      	ldr	r1, [pc, #16]	; (800c970 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c95e:	5ccb      	ldrb	r3, [r1, r3]
 800c960:	f003 031f 	and.w	r3, r3, #31
 800c964:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800c968:	4618      	mov	r0, r3
 800c96a:	bd80      	pop	{r7, pc}
 800c96c:	58024400 	.word	0x58024400
 800c970:	080104a0 	.word	0x080104a0

0800c974 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c974:	b480      	push	{r7}
 800c976:	b089      	sub	sp, #36	; 0x24
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c97c:	4ba1      	ldr	r3, [pc, #644]	; (800cc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c97e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c980:	f003 0303 	and.w	r3, r3, #3
 800c984:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c986:	4b9f      	ldr	r3, [pc, #636]	; (800cc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c98a:	0b1b      	lsrs	r3, r3, #12
 800c98c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c990:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c992:	4b9c      	ldr	r3, [pc, #624]	; (800cc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c996:	091b      	lsrs	r3, r3, #4
 800c998:	f003 0301 	and.w	r3, r3, #1
 800c99c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c99e:	4b99      	ldr	r3, [pc, #612]	; (800cc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9a2:	08db      	lsrs	r3, r3, #3
 800c9a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c9a8:	693a      	ldr	r2, [r7, #16]
 800c9aa:	fb02 f303 	mul.w	r3, r2, r3
 800c9ae:	ee07 3a90 	vmov	s15, r3
 800c9b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	f000 8111 	beq.w	800cbe4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c9c2:	69bb      	ldr	r3, [r7, #24]
 800c9c4:	2b02      	cmp	r3, #2
 800c9c6:	f000 8083 	beq.w	800cad0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c9ca:	69bb      	ldr	r3, [r7, #24]
 800c9cc:	2b02      	cmp	r3, #2
 800c9ce:	f200 80a1 	bhi.w	800cb14 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c9d2:	69bb      	ldr	r3, [r7, #24]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d003      	beq.n	800c9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c9d8:	69bb      	ldr	r3, [r7, #24]
 800c9da:	2b01      	cmp	r3, #1
 800c9dc:	d056      	beq.n	800ca8c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c9de:	e099      	b.n	800cb14 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c9e0:	4b88      	ldr	r3, [pc, #544]	; (800cc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	f003 0320 	and.w	r3, r3, #32
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d02d      	beq.n	800ca48 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9ec:	4b85      	ldr	r3, [pc, #532]	; (800cc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	08db      	lsrs	r3, r3, #3
 800c9f2:	f003 0303 	and.w	r3, r3, #3
 800c9f6:	4a84      	ldr	r2, [pc, #528]	; (800cc08 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c9f8:	fa22 f303 	lsr.w	r3, r2, r3
 800c9fc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	ee07 3a90 	vmov	s15, r3
 800ca04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	ee07 3a90 	vmov	s15, r3
 800ca0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca16:	4b7b      	ldr	r3, [pc, #492]	; (800cc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca1e:	ee07 3a90 	vmov	s15, r3
 800ca22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca26:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca2a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cc0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca42:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ca46:	e087      	b.n	800cb58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	ee07 3a90 	vmov	s15, r3
 800ca4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca52:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cc10 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ca56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca5a:	4b6a      	ldr	r3, [pc, #424]	; (800cc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca62:	ee07 3a90 	vmov	s15, r3
 800ca66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca6e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cc0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca8a:	e065      	b.n	800cb58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca8c:	697b      	ldr	r3, [r7, #20]
 800ca8e:	ee07 3a90 	vmov	s15, r3
 800ca92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca96:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cc14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ca9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca9e:	4b59      	ldr	r3, [pc, #356]	; (800cc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800caa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caa6:	ee07 3a90 	vmov	s15, r3
 800caaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800caae:	ed97 6a03 	vldr	s12, [r7, #12]
 800cab2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cc0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800caba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cabe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800caca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cace:	e043      	b.n	800cb58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	ee07 3a90 	vmov	s15, r3
 800cad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cada:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cc18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cae2:	4b48      	ldr	r3, [pc, #288]	; (800cc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caea:	ee07 3a90 	vmov	s15, r3
 800caee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800caf2:	ed97 6a03 	vldr	s12, [r7, #12]
 800caf6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cc0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cafa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cafe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb12:	e021      	b.n	800cb58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	ee07 3a90 	vmov	s15, r3
 800cb1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb1e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cc14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cb22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb26:	4b37      	ldr	r3, [pc, #220]	; (800cc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb2e:	ee07 3a90 	vmov	s15, r3
 800cb32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb36:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb3a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cc0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb56:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cb58:	4b2a      	ldr	r3, [pc, #168]	; (800cc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb5c:	0a5b      	lsrs	r3, r3, #9
 800cb5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb62:	ee07 3a90 	vmov	s15, r3
 800cb66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb72:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb7e:	ee17 2a90 	vmov	r2, s15
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800cb86:	4b1f      	ldr	r3, [pc, #124]	; (800cc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb8a:	0c1b      	lsrs	r3, r3, #16
 800cb8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb90:	ee07 3a90 	vmov	s15, r3
 800cb94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cba0:	edd7 6a07 	vldr	s13, [r7, #28]
 800cba4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cba8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbac:	ee17 2a90 	vmov	r2, s15
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cbb4:	4b13      	ldr	r3, [pc, #76]	; (800cc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbb8:	0e1b      	lsrs	r3, r3, #24
 800cbba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbbe:	ee07 3a90 	vmov	s15, r3
 800cbc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cbca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbce:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbda:	ee17 2a90 	vmov	r2, s15
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cbe2:	e008      	b.n	800cbf6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2200      	movs	r2, #0
 800cbee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	609a      	str	r2, [r3, #8]
}
 800cbf6:	bf00      	nop
 800cbf8:	3724      	adds	r7, #36	; 0x24
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc00:	4770      	bx	lr
 800cc02:	bf00      	nop
 800cc04:	58024400 	.word	0x58024400
 800cc08:	03d09000 	.word	0x03d09000
 800cc0c:	46000000 	.word	0x46000000
 800cc10:	4c742400 	.word	0x4c742400
 800cc14:	4a742400 	.word	0x4a742400
 800cc18:	4bb71b00 	.word	0x4bb71b00

0800cc1c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	b089      	sub	sp, #36	; 0x24
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cc24:	4ba1      	ldr	r3, [pc, #644]	; (800ceac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc28:	f003 0303 	and.w	r3, r3, #3
 800cc2c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cc2e:	4b9f      	ldr	r3, [pc, #636]	; (800ceac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc32:	0d1b      	lsrs	r3, r3, #20
 800cc34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc38:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cc3a:	4b9c      	ldr	r3, [pc, #624]	; (800ceac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc3e:	0a1b      	lsrs	r3, r3, #8
 800cc40:	f003 0301 	and.w	r3, r3, #1
 800cc44:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cc46:	4b99      	ldr	r3, [pc, #612]	; (800ceac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc4a:	08db      	lsrs	r3, r3, #3
 800cc4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cc50:	693a      	ldr	r2, [r7, #16]
 800cc52:	fb02 f303 	mul.w	r3, r2, r3
 800cc56:	ee07 3a90 	vmov	s15, r3
 800cc5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	f000 8111 	beq.w	800ce8c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cc6a:	69bb      	ldr	r3, [r7, #24]
 800cc6c:	2b02      	cmp	r3, #2
 800cc6e:	f000 8083 	beq.w	800cd78 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cc72:	69bb      	ldr	r3, [r7, #24]
 800cc74:	2b02      	cmp	r3, #2
 800cc76:	f200 80a1 	bhi.w	800cdbc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cc7a:	69bb      	ldr	r3, [r7, #24]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d003      	beq.n	800cc88 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cc80:	69bb      	ldr	r3, [r7, #24]
 800cc82:	2b01      	cmp	r3, #1
 800cc84:	d056      	beq.n	800cd34 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cc86:	e099      	b.n	800cdbc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc88:	4b88      	ldr	r3, [pc, #544]	; (800ceac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f003 0320 	and.w	r3, r3, #32
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d02d      	beq.n	800ccf0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc94:	4b85      	ldr	r3, [pc, #532]	; (800ceac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	08db      	lsrs	r3, r3, #3
 800cc9a:	f003 0303 	and.w	r3, r3, #3
 800cc9e:	4a84      	ldr	r2, [pc, #528]	; (800ceb0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cca0:	fa22 f303 	lsr.w	r3, r2, r3
 800cca4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	ee07 3a90 	vmov	s15, r3
 800ccac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	ee07 3a90 	vmov	s15, r3
 800ccb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccbe:	4b7b      	ldr	r3, [pc, #492]	; (800ceac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccc6:	ee07 3a90 	vmov	s15, r3
 800ccca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccce:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccd2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ceb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ccd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ccee:	e087      	b.n	800ce00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	ee07 3a90 	vmov	s15, r3
 800ccf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccfa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ceb8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ccfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd02:	4b6a      	ldr	r3, [pc, #424]	; (800ceac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd0a:	ee07 3a90 	vmov	s15, r3
 800cd0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd12:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd16:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ceb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd32:	e065      	b.n	800ce00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd34:	697b      	ldr	r3, [r7, #20]
 800cd36:	ee07 3a90 	vmov	s15, r3
 800cd3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd3e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cebc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cd42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd46:	4b59      	ldr	r3, [pc, #356]	; (800ceac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd4e:	ee07 3a90 	vmov	s15, r3
 800cd52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd56:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd5a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ceb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd76:	e043      	b.n	800ce00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	ee07 3a90 	vmov	s15, r3
 800cd7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd82:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cec0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cd86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd8a:	4b48      	ldr	r3, [pc, #288]	; (800ceac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd92:	ee07 3a90 	vmov	s15, r3
 800cd96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd9e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ceb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cda2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cda6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cdba:	e021      	b.n	800ce00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cdbc:	697b      	ldr	r3, [r7, #20]
 800cdbe:	ee07 3a90 	vmov	s15, r3
 800cdc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdc6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cebc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cdca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdce:	4b37      	ldr	r3, [pc, #220]	; (800ceac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdd6:	ee07 3a90 	vmov	s15, r3
 800cdda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdde:	ed97 6a03 	vldr	s12, [r7, #12]
 800cde2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ceb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cde6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cdfe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ce00:	4b2a      	ldr	r3, [pc, #168]	; (800ceac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce04:	0a5b      	lsrs	r3, r3, #9
 800ce06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce0a:	ee07 3a90 	vmov	s15, r3
 800ce0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce16:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce1a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce26:	ee17 2a90 	vmov	r2, s15
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ce2e:	4b1f      	ldr	r3, [pc, #124]	; (800ceac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce32:	0c1b      	lsrs	r3, r3, #16
 800ce34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce38:	ee07 3a90 	vmov	s15, r3
 800ce3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce44:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce48:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce54:	ee17 2a90 	vmov	r2, s15
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ce5c:	4b13      	ldr	r3, [pc, #76]	; (800ceac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce60:	0e1b      	lsrs	r3, r3, #24
 800ce62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce66:	ee07 3a90 	vmov	s15, r3
 800ce6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce72:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce76:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce82:	ee17 2a90 	vmov	r2, s15
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ce8a:	e008      	b.n	800ce9e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2200      	movs	r2, #0
 800ce90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2200      	movs	r2, #0
 800ce96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	609a      	str	r2, [r3, #8]
}
 800ce9e:	bf00      	nop
 800cea0:	3724      	adds	r7, #36	; 0x24
 800cea2:	46bd      	mov	sp, r7
 800cea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea8:	4770      	bx	lr
 800ceaa:	bf00      	nop
 800ceac:	58024400 	.word	0x58024400
 800ceb0:	03d09000 	.word	0x03d09000
 800ceb4:	46000000 	.word	0x46000000
 800ceb8:	4c742400 	.word	0x4c742400
 800cebc:	4a742400 	.word	0x4a742400
 800cec0:	4bb71b00 	.word	0x4bb71b00

0800cec4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b084      	sub	sp, #16
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
 800cecc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cece:	2300      	movs	r3, #0
 800ced0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ced2:	4b53      	ldr	r3, [pc, #332]	; (800d020 <RCCEx_PLL2_Config+0x15c>)
 800ced4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ced6:	f003 0303 	and.w	r3, r3, #3
 800ceda:	2b03      	cmp	r3, #3
 800cedc:	d101      	bne.n	800cee2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cede:	2301      	movs	r3, #1
 800cee0:	e099      	b.n	800d016 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cee2:	4b4f      	ldr	r3, [pc, #316]	; (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	4a4e      	ldr	r2, [pc, #312]	; (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cee8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ceec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ceee:	f7f7 fa9d 	bl	800442c <HAL_GetTick>
 800cef2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cef4:	e008      	b.n	800cf08 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cef6:	f7f7 fa99 	bl	800442c <HAL_GetTick>
 800cefa:	4602      	mov	r2, r0
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	1ad3      	subs	r3, r2, r3
 800cf00:	2b02      	cmp	r3, #2
 800cf02:	d901      	bls.n	800cf08 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cf04:	2303      	movs	r3, #3
 800cf06:	e086      	b.n	800d016 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cf08:	4b45      	ldr	r3, [pc, #276]	; (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d1f0      	bne.n	800cef6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cf14:	4b42      	ldr	r3, [pc, #264]	; (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cf16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf18:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	031b      	lsls	r3, r3, #12
 800cf22:	493f      	ldr	r1, [pc, #252]	; (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cf24:	4313      	orrs	r3, r2
 800cf26:	628b      	str	r3, [r1, #40]	; 0x28
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	685b      	ldr	r3, [r3, #4]
 800cf2c:	3b01      	subs	r3, #1
 800cf2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	689b      	ldr	r3, [r3, #8]
 800cf36:	3b01      	subs	r3, #1
 800cf38:	025b      	lsls	r3, r3, #9
 800cf3a:	b29b      	uxth	r3, r3
 800cf3c:	431a      	orrs	r2, r3
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	68db      	ldr	r3, [r3, #12]
 800cf42:	3b01      	subs	r3, #1
 800cf44:	041b      	lsls	r3, r3, #16
 800cf46:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cf4a:	431a      	orrs	r2, r3
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	691b      	ldr	r3, [r3, #16]
 800cf50:	3b01      	subs	r3, #1
 800cf52:	061b      	lsls	r3, r3, #24
 800cf54:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cf58:	4931      	ldr	r1, [pc, #196]	; (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cf5a:	4313      	orrs	r3, r2
 800cf5c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cf5e:	4b30      	ldr	r3, [pc, #192]	; (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cf60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf62:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	695b      	ldr	r3, [r3, #20]
 800cf6a:	492d      	ldr	r1, [pc, #180]	; (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cf6c:	4313      	orrs	r3, r2
 800cf6e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cf70:	4b2b      	ldr	r3, [pc, #172]	; (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cf72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf74:	f023 0220 	bic.w	r2, r3, #32
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	699b      	ldr	r3, [r3, #24]
 800cf7c:	4928      	ldr	r1, [pc, #160]	; (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cf7e:	4313      	orrs	r3, r2
 800cf80:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cf82:	4b27      	ldr	r3, [pc, #156]	; (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cf84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf86:	4a26      	ldr	r2, [pc, #152]	; (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cf88:	f023 0310 	bic.w	r3, r3, #16
 800cf8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cf8e:	4b24      	ldr	r3, [pc, #144]	; (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cf90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf92:	4b24      	ldr	r3, [pc, #144]	; (800d024 <RCCEx_PLL2_Config+0x160>)
 800cf94:	4013      	ands	r3, r2
 800cf96:	687a      	ldr	r2, [r7, #4]
 800cf98:	69d2      	ldr	r2, [r2, #28]
 800cf9a:	00d2      	lsls	r2, r2, #3
 800cf9c:	4920      	ldr	r1, [pc, #128]	; (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cf9e:	4313      	orrs	r3, r2
 800cfa0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cfa2:	4b1f      	ldr	r3, [pc, #124]	; (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cfa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfa6:	4a1e      	ldr	r2, [pc, #120]	; (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cfa8:	f043 0310 	orr.w	r3, r3, #16
 800cfac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d106      	bne.n	800cfc2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cfb4:	4b1a      	ldr	r3, [pc, #104]	; (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cfb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfb8:	4a19      	ldr	r2, [pc, #100]	; (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cfba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cfbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cfc0:	e00f      	b.n	800cfe2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	2b01      	cmp	r3, #1
 800cfc6:	d106      	bne.n	800cfd6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cfc8:	4b15      	ldr	r3, [pc, #84]	; (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cfca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfcc:	4a14      	ldr	r2, [pc, #80]	; (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cfce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cfd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cfd4:	e005      	b.n	800cfe2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cfd6:	4b12      	ldr	r3, [pc, #72]	; (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cfd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfda:	4a11      	ldr	r2, [pc, #68]	; (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cfdc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cfe0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cfe2:	4b0f      	ldr	r3, [pc, #60]	; (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	4a0e      	ldr	r2, [pc, #56]	; (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cfe8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cfec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cfee:	f7f7 fa1d 	bl	800442c <HAL_GetTick>
 800cff2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cff4:	e008      	b.n	800d008 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cff6:	f7f7 fa19 	bl	800442c <HAL_GetTick>
 800cffa:	4602      	mov	r2, r0
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	1ad3      	subs	r3, r2, r3
 800d000:	2b02      	cmp	r3, #2
 800d002:	d901      	bls.n	800d008 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d004:	2303      	movs	r3, #3
 800d006:	e006      	b.n	800d016 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d008:	4b05      	ldr	r3, [pc, #20]	; (800d020 <RCCEx_PLL2_Config+0x15c>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d010:	2b00      	cmp	r3, #0
 800d012:	d0f0      	beq.n	800cff6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d014:	7bfb      	ldrb	r3, [r7, #15]
}
 800d016:	4618      	mov	r0, r3
 800d018:	3710      	adds	r7, #16
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}
 800d01e:	bf00      	nop
 800d020:	58024400 	.word	0x58024400
 800d024:	ffff0007 	.word	0xffff0007

0800d028 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b084      	sub	sp, #16
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
 800d030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d032:	2300      	movs	r3, #0
 800d034:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d036:	4b53      	ldr	r3, [pc, #332]	; (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d03a:	f003 0303 	and.w	r3, r3, #3
 800d03e:	2b03      	cmp	r3, #3
 800d040:	d101      	bne.n	800d046 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d042:	2301      	movs	r3, #1
 800d044:	e099      	b.n	800d17a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d046:	4b4f      	ldr	r3, [pc, #316]	; (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	4a4e      	ldr	r2, [pc, #312]	; (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d04c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d050:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d052:	f7f7 f9eb 	bl	800442c <HAL_GetTick>
 800d056:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d058:	e008      	b.n	800d06c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d05a:	f7f7 f9e7 	bl	800442c <HAL_GetTick>
 800d05e:	4602      	mov	r2, r0
 800d060:	68bb      	ldr	r3, [r7, #8]
 800d062:	1ad3      	subs	r3, r2, r3
 800d064:	2b02      	cmp	r3, #2
 800d066:	d901      	bls.n	800d06c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d068:	2303      	movs	r3, #3
 800d06a:	e086      	b.n	800d17a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d06c:	4b45      	ldr	r3, [pc, #276]	; (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d074:	2b00      	cmp	r3, #0
 800d076:	d1f0      	bne.n	800d05a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d078:	4b42      	ldr	r3, [pc, #264]	; (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d07a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d07c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	051b      	lsls	r3, r3, #20
 800d086:	493f      	ldr	r1, [pc, #252]	; (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d088:	4313      	orrs	r3, r2
 800d08a:	628b      	str	r3, [r1, #40]	; 0x28
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	685b      	ldr	r3, [r3, #4]
 800d090:	3b01      	subs	r3, #1
 800d092:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	689b      	ldr	r3, [r3, #8]
 800d09a:	3b01      	subs	r3, #1
 800d09c:	025b      	lsls	r3, r3, #9
 800d09e:	b29b      	uxth	r3, r3
 800d0a0:	431a      	orrs	r2, r3
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	68db      	ldr	r3, [r3, #12]
 800d0a6:	3b01      	subs	r3, #1
 800d0a8:	041b      	lsls	r3, r3, #16
 800d0aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d0ae:	431a      	orrs	r2, r3
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	691b      	ldr	r3, [r3, #16]
 800d0b4:	3b01      	subs	r3, #1
 800d0b6:	061b      	lsls	r3, r3, #24
 800d0b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d0bc:	4931      	ldr	r1, [pc, #196]	; (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d0be:	4313      	orrs	r3, r2
 800d0c0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d0c2:	4b30      	ldr	r3, [pc, #192]	; (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d0c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	695b      	ldr	r3, [r3, #20]
 800d0ce:	492d      	ldr	r1, [pc, #180]	; (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d0d0:	4313      	orrs	r3, r2
 800d0d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d0d4:	4b2b      	ldr	r3, [pc, #172]	; (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0d8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	699b      	ldr	r3, [r3, #24]
 800d0e0:	4928      	ldr	r1, [pc, #160]	; (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d0e2:	4313      	orrs	r3, r2
 800d0e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d0e6:	4b27      	ldr	r3, [pc, #156]	; (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0ea:	4a26      	ldr	r2, [pc, #152]	; (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d0ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d0f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d0f2:	4b24      	ldr	r3, [pc, #144]	; (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d0f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d0f6:	4b24      	ldr	r3, [pc, #144]	; (800d188 <RCCEx_PLL3_Config+0x160>)
 800d0f8:	4013      	ands	r3, r2
 800d0fa:	687a      	ldr	r2, [r7, #4]
 800d0fc:	69d2      	ldr	r2, [r2, #28]
 800d0fe:	00d2      	lsls	r2, r2, #3
 800d100:	4920      	ldr	r1, [pc, #128]	; (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d102:	4313      	orrs	r3, r2
 800d104:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d106:	4b1f      	ldr	r3, [pc, #124]	; (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d10a:	4a1e      	ldr	r2, [pc, #120]	; (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d10c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d110:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d106      	bne.n	800d126 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d118:	4b1a      	ldr	r3, [pc, #104]	; (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d11a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d11c:	4a19      	ldr	r2, [pc, #100]	; (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d11e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d122:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d124:	e00f      	b.n	800d146 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	2b01      	cmp	r3, #1
 800d12a:	d106      	bne.n	800d13a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d12c:	4b15      	ldr	r3, [pc, #84]	; (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d12e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d130:	4a14      	ldr	r2, [pc, #80]	; (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d132:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d136:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d138:	e005      	b.n	800d146 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d13a:	4b12      	ldr	r3, [pc, #72]	; (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d13c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d13e:	4a11      	ldr	r2, [pc, #68]	; (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d140:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d144:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d146:	4b0f      	ldr	r3, [pc, #60]	; (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	4a0e      	ldr	r2, [pc, #56]	; (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d14c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d150:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d152:	f7f7 f96b 	bl	800442c <HAL_GetTick>
 800d156:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d158:	e008      	b.n	800d16c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d15a:	f7f7 f967 	bl	800442c <HAL_GetTick>
 800d15e:	4602      	mov	r2, r0
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	1ad3      	subs	r3, r2, r3
 800d164:	2b02      	cmp	r3, #2
 800d166:	d901      	bls.n	800d16c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d168:	2303      	movs	r3, #3
 800d16a:	e006      	b.n	800d17a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d16c:	4b05      	ldr	r3, [pc, #20]	; (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d174:	2b00      	cmp	r3, #0
 800d176:	d0f0      	beq.n	800d15a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d178:	7bfb      	ldrb	r3, [r7, #15]
}
 800d17a:	4618      	mov	r0, r3
 800d17c:	3710      	adds	r7, #16
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}
 800d182:	bf00      	nop
 800d184:	58024400 	.word	0x58024400
 800d188:	ffff0007 	.word	0xffff0007

0800d18c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b084      	sub	sp, #16
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d194:	2301      	movs	r3, #1
 800d196:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d074      	beq.n	800d288 <HAL_RTC_Init+0xfc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800d1a4:	b2db      	uxtb	r3, r3
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d106      	bne.n	800d1b8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f7f6 f834 	bl	8003220 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2202      	movs	r2, #2
 800d1bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	68db      	ldr	r3, [r3, #12]
 800d1c6:	f003 0310 	and.w	r3, r3, #16
 800d1ca:	2b10      	cmp	r3, #16
 800d1cc:	d053      	beq.n	800d276 <HAL_RTC_Init+0xea>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	22ca      	movs	r2, #202	; 0xca
 800d1d4:	625a      	str	r2, [r3, #36]	; 0x24
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	2253      	movs	r2, #83	; 0x53
 800d1dc:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f000 f87e 	bl	800d2e0 <RTC_EnterInitMode>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d1e8:	7bfb      	ldrb	r3, [r7, #15]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d124      	bne.n	800d238 <HAL_RTC_Init+0xac>
      {
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	6999      	ldr	r1, [r3, #24]
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681a      	ldr	r2, [r3, #0]
 800d1f8:	4b26      	ldr	r3, [pc, #152]	; (800d294 <HAL_RTC_Init+0x108>)
 800d1fa:	400b      	ands	r3, r1
 800d1fc:	6193      	str	r3, [r2, #24]
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	6999      	ldr	r1, [r3, #24]
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	685a      	ldr	r2, [r3, #4]
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	691b      	ldr	r3, [r3, #16]
 800d20c:	431a      	orrs	r2, r3
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	699b      	ldr	r3, [r3, #24]
 800d212:	431a      	orrs	r2, r3
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	430a      	orrs	r2, r1
 800d21a:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	689b      	ldr	r3, [r3, #8]
 800d220:	0419      	lsls	r1, r3, #16
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	68da      	ldr	r2, [r3, #12]
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	430a      	orrs	r2, r1
 800d22c:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	f000 f88c 	bl	800d34c <RTC_ExitInitMode>
 800d234:	4603      	mov	r3, r0
 800d236:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800d238:	7bfb      	ldrb	r3, [r7, #15]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d116      	bne.n	800d26c <HAL_RTC_Init+0xe0>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	699a      	ldr	r2, [r3, #24]
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800d24c:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	6999      	ldr	r1, [r3, #24]
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6a1a      	ldr	r2, [r3, #32]
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	69db      	ldr	r3, [r3, #28]
 800d25c:	431a      	orrs	r2, r3
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	695b      	ldr	r3, [r3, #20]
 800d262:	431a      	orrs	r2, r3
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	430a      	orrs	r2, r1
 800d26a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	22ff      	movs	r2, #255	; 0xff
 800d272:	625a      	str	r2, [r3, #36]	; 0x24
 800d274:	e001      	b.n	800d27a <HAL_RTC_Init+0xee>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800d276:	2300      	movs	r3, #0
 800d278:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d27a:	7bfb      	ldrb	r3, [r7, #15]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d103      	bne.n	800d288 <HAL_RTC_Init+0xfc>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2201      	movs	r2, #1
 800d284:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  /* return status */
  return status;
 800d288:	7bfb      	ldrb	r3, [r7, #15]
}
 800d28a:	4618      	mov	r0, r3
 800d28c:	3710      	adds	r7, #16
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}
 800d292:	bf00      	nop
 800d294:	fb8fffbf 	.word	0xfb8fffbf

0800d298 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b084      	sub	sp, #16
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	4a0d      	ldr	r2, [pc, #52]	; (800d2dc <HAL_RTC_WaitForSynchro+0x44>)
 800d2a6:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800d2a8:	f7f7 f8c0 	bl	800442c <HAL_GetTick>
 800d2ac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800d2ae:	e009      	b.n	800d2c4 <HAL_RTC_WaitForSynchro+0x2c>
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d2b0:	f7f7 f8bc 	bl	800442c <HAL_GetTick>
 800d2b4:	4602      	mov	r2, r0
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	1ad3      	subs	r3, r2, r3
 800d2ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d2be:	d901      	bls.n	800d2c4 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800d2c0:	2303      	movs	r3, #3
 800d2c2:	e007      	b.n	800d2d4 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	68db      	ldr	r3, [r3, #12]
 800d2ca:	f003 0320 	and.w	r3, r3, #32
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d0ee      	beq.n	800d2b0 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800d2d2:	2300      	movs	r3, #0
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3710      	adds	r7, #16
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}
 800d2dc:	0001005f 	.word	0x0001005f

0800d2e0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b084      	sub	sp, #16
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(TAMP)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	68db      	ldr	r3, [r3, #12]
 800d2f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d123      	bne.n	800d342 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	68da      	ldr	r2, [r3, #12]
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d308:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d30a:	f7f7 f88f 	bl	800442c <HAL_GetTick>
 800d30e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d310:	e00d      	b.n	800d32e <RTC_EnterInitMode+0x4e>

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d312:	f7f7 f88b 	bl	800442c <HAL_GetTick>
 800d316:	4602      	mov	r2, r0
 800d318:	68bb      	ldr	r3, [r7, #8]
 800d31a:	1ad3      	subs	r3, r2, r3
 800d31c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d320:	d905      	bls.n	800d32e <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800d322:	2303      	movs	r3, #3
 800d324:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2203      	movs	r2, #3
 800d32a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	68db      	ldr	r3, [r3, #12]
 800d334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d102      	bne.n	800d342 <RTC_EnterInitMode+0x62>
 800d33c:	7bfb      	ldrb	r3, [r7, #15]
 800d33e:	2b03      	cmp	r3, #3
 800d340:	d1e7      	bne.n	800d312 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 800d342:	7bfb      	ldrb	r3, [r7, #15]
}
 800d344:	4618      	mov	r0, r3
 800d346:	3710      	adds	r7, #16
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}

0800d34c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b084      	sub	sp, #16
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d354:	2300      	movs	r3, #0
 800d356:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800d358:	4b1a      	ldr	r3, [pc, #104]	; (800d3c4 <RTC_ExitInitMode+0x78>)
 800d35a:	68db      	ldr	r3, [r3, #12]
 800d35c:	4a19      	ldr	r2, [pc, #100]	; (800d3c4 <RTC_ExitInitMode+0x78>)
 800d35e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d362:	60d3      	str	r3, [r2, #12]
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800d364:	4b17      	ldr	r3, [pc, #92]	; (800d3c4 <RTC_ExitInitMode+0x78>)
 800d366:	699b      	ldr	r3, [r3, #24]
 800d368:	f003 0320 	and.w	r3, r3, #32
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d10c      	bne.n	800d38a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d370:	6878      	ldr	r0, [r7, #4]
 800d372:	f7ff ff91 	bl	800d298 <HAL_RTC_WaitForSynchro>
 800d376:	4603      	mov	r3, r0
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d01e      	beq.n	800d3ba <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2203      	movs	r2, #3
 800d380:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800d384:	2303      	movs	r3, #3
 800d386:	73fb      	strb	r3, [r7, #15]
 800d388:	e017      	b.n	800d3ba <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d38a:	4b0e      	ldr	r3, [pc, #56]	; (800d3c4 <RTC_ExitInitMode+0x78>)
 800d38c:	699b      	ldr	r3, [r3, #24]
 800d38e:	4a0d      	ldr	r2, [pc, #52]	; (800d3c4 <RTC_ExitInitMode+0x78>)
 800d390:	f023 0320 	bic.w	r3, r3, #32
 800d394:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f7ff ff7e 	bl	800d298 <HAL_RTC_WaitForSynchro>
 800d39c:	4603      	mov	r3, r0
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d005      	beq.n	800d3ae <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2203      	movs	r2, #3
 800d3a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800d3aa:	2303      	movs	r3, #3
 800d3ac:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d3ae:	4b05      	ldr	r3, [pc, #20]	; (800d3c4 <RTC_ExitInitMode+0x78>)
 800d3b0:	699b      	ldr	r3, [r3, #24]
 800d3b2:	4a04      	ldr	r2, [pc, #16]	; (800d3c4 <RTC_ExitInitMode+0x78>)
 800d3b4:	f043 0320 	orr.w	r3, r3, #32
 800d3b8:	6193      	str	r3, [r2, #24]
  }

  return status;
 800d3ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	3710      	adds	r7, #16
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}
 800d3c4:	58004000 	.word	0x58004000

0800d3c8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b082      	sub	sp, #8
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
 800d3d0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d101      	bne.n	800d3dc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800d3d8:	2301      	movs	r3, #1
 800d3da:	e02b      	b.n	800d434 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d3e2:	b2db      	uxtb	r3, r3
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d106      	bne.n	800d3f6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f7f3 fce3 	bl	8000dbc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	2202      	movs	r2, #2
 800d3fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681a      	ldr	r2, [r3, #0]
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	3304      	adds	r3, #4
 800d406:	4619      	mov	r1, r3
 800d408:	4610      	mov	r0, r2
 800d40a:	f001 ffdf 	bl	800f3cc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6818      	ldr	r0, [r3, #0]
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	685b      	ldr	r3, [r3, #4]
 800d416:	461a      	mov	r2, r3
 800d418:	6839      	ldr	r1, [r7, #0]
 800d41a:	f002 f833 	bl	800f484 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800d41e:	4b07      	ldr	r3, [pc, #28]	; (800d43c <HAL_SDRAM_Init+0x74>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	4a06      	ldr	r2, [pc, #24]	; (800d43c <HAL_SDRAM_Init+0x74>)
 800d424:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d428:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2201      	movs	r2, #1
 800d42e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d432:	2300      	movs	r3, #0
}
 800d434:	4618      	mov	r0, r3
 800d436:	3708      	adds	r7, #8
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}
 800d43c:	52004000 	.word	0x52004000

0800d440 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b086      	sub	sp, #24
 800d444:	af00      	add	r7, sp, #0
 800d446:	60f8      	str	r0, [r7, #12]
 800d448:	60b9      	str	r1, [r7, #8]
 800d44a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d452:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800d454:	7dfb      	ldrb	r3, [r7, #23]
 800d456:	2b02      	cmp	r3, #2
 800d458:	d101      	bne.n	800d45e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800d45a:	2302      	movs	r3, #2
 800d45c:	e021      	b.n	800d4a2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800d45e:	7dfb      	ldrb	r3, [r7, #23]
 800d460:	2b01      	cmp	r3, #1
 800d462:	d002      	beq.n	800d46a <HAL_SDRAM_SendCommand+0x2a>
 800d464:	7dfb      	ldrb	r3, [r7, #23]
 800d466:	2b05      	cmp	r3, #5
 800d468:	d118      	bne.n	800d49c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	2202      	movs	r2, #2
 800d46e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	687a      	ldr	r2, [r7, #4]
 800d478:	68b9      	ldr	r1, [r7, #8]
 800d47a:	4618      	mov	r0, r3
 800d47c:	f002 f86c 	bl	800f558 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	2b02      	cmp	r3, #2
 800d486:	d104      	bne.n	800d492 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	2205      	movs	r2, #5
 800d48c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d490:	e006      	b.n	800d4a0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	2201      	movs	r2, #1
 800d496:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d49a:	e001      	b.n	800d4a0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800d49c:	2301      	movs	r3, #1
 800d49e:	e000      	b.n	800d4a2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800d4a0:	2300      	movs	r3, #0
}
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	3718      	adds	r7, #24
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}

0800d4aa <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800d4aa:	b580      	push	{r7, lr}
 800d4ac:	b082      	sub	sp, #8
 800d4ae:	af00      	add	r7, sp, #0
 800d4b0:	6078      	str	r0, [r7, #4]
 800d4b2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d4ba:	b2db      	uxtb	r3, r3
 800d4bc:	2b02      	cmp	r3, #2
 800d4be:	d101      	bne.n	800d4c4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800d4c0:	2302      	movs	r3, #2
 800d4c2:	e016      	b.n	800d4f2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d4ca:	b2db      	uxtb	r3, r3
 800d4cc:	2b01      	cmp	r3, #1
 800d4ce:	d10f      	bne.n	800d4f0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2202      	movs	r2, #2
 800d4d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	6839      	ldr	r1, [r7, #0]
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f002 f85e 	bl	800f5a0 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2201      	movs	r2, #1
 800d4e8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	e000      	b.n	800d4f2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800d4f0:	2301      	movs	r3, #1
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	3708      	adds	r7, #8
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}

0800d4fa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d4fa:	b580      	push	{r7, lr}
 800d4fc:	b082      	sub	sp, #8
 800d4fe:	af00      	add	r7, sp, #0
 800d500:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d101      	bne.n	800d50c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d508:	2301      	movs	r3, #1
 800d50a:	e042      	b.n	800d592 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d512:	2b00      	cmp	r3, #0
 800d514:	d106      	bne.n	800d524 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2200      	movs	r2, #0
 800d51a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f7f6 fe62 	bl	80041e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2224      	movs	r2, #36	; 0x24
 800d528:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	681a      	ldr	r2, [r3, #0]
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f022 0201 	bic.w	r2, r2, #1
 800d53a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f000 fd5d 	bl	800dffc <UART_SetConfig>
 800d542:	4603      	mov	r3, r0
 800d544:	2b01      	cmp	r3, #1
 800d546:	d101      	bne.n	800d54c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d548:	2301      	movs	r3, #1
 800d54a:	e022      	b.n	800d592 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d550:	2b00      	cmp	r3, #0
 800d552:	d002      	beq.n	800d55a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d554:	6878      	ldr	r0, [r7, #4]
 800d556:	f001 fbbd 	bl	800ecd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	685a      	ldr	r2, [r3, #4]
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d568:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	689a      	ldr	r2, [r3, #8]
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d578:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	681a      	ldr	r2, [r3, #0]
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	f042 0201 	orr.w	r2, r2, #1
 800d588:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f001 fc44 	bl	800ee18 <UART_CheckIdleState>
 800d590:	4603      	mov	r3, r0
}
 800d592:	4618      	mov	r0, r3
 800d594:	3708      	adds	r7, #8
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}

0800d59a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d59a:	b580      	push	{r7, lr}
 800d59c:	b08a      	sub	sp, #40	; 0x28
 800d59e:	af02      	add	r7, sp, #8
 800d5a0:	60f8      	str	r0, [r7, #12]
 800d5a2:	60b9      	str	r1, [r7, #8]
 800d5a4:	603b      	str	r3, [r7, #0]
 800d5a6:	4613      	mov	r3, r2
 800d5a8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5b0:	2b20      	cmp	r3, #32
 800d5b2:	d17b      	bne.n	800d6ac <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d002      	beq.n	800d5c0 <HAL_UART_Transmit+0x26>
 800d5ba:	88fb      	ldrh	r3, [r7, #6]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d101      	bne.n	800d5c4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d5c0:	2301      	movs	r3, #1
 800d5c2:	e074      	b.n	800d6ae <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	2221      	movs	r2, #33	; 0x21
 800d5d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d5d4:	f7f6 ff2a 	bl	800442c <HAL_GetTick>
 800d5d8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	88fa      	ldrh	r2, [r7, #6]
 800d5de:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	88fa      	ldrh	r2, [r7, #6]
 800d5e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	689b      	ldr	r3, [r3, #8]
 800d5ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5f2:	d108      	bne.n	800d606 <HAL_UART_Transmit+0x6c>
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	691b      	ldr	r3, [r3, #16]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d104      	bne.n	800d606 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	61bb      	str	r3, [r7, #24]
 800d604:	e003      	b.n	800d60e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d60a:	2300      	movs	r3, #0
 800d60c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d60e:	e030      	b.n	800d672 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	9300      	str	r3, [sp, #0]
 800d614:	697b      	ldr	r3, [r7, #20]
 800d616:	2200      	movs	r2, #0
 800d618:	2180      	movs	r1, #128	; 0x80
 800d61a:	68f8      	ldr	r0, [r7, #12]
 800d61c:	f001 fca6 	bl	800ef6c <UART_WaitOnFlagUntilTimeout>
 800d620:	4603      	mov	r3, r0
 800d622:	2b00      	cmp	r3, #0
 800d624:	d005      	beq.n	800d632 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	2220      	movs	r2, #32
 800d62a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800d62e:	2303      	movs	r3, #3
 800d630:	e03d      	b.n	800d6ae <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d632:	69fb      	ldr	r3, [r7, #28]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d10b      	bne.n	800d650 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d638:	69bb      	ldr	r3, [r7, #24]
 800d63a:	881b      	ldrh	r3, [r3, #0]
 800d63c:	461a      	mov	r2, r3
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d646:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d648:	69bb      	ldr	r3, [r7, #24]
 800d64a:	3302      	adds	r3, #2
 800d64c:	61bb      	str	r3, [r7, #24]
 800d64e:	e007      	b.n	800d660 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d650:	69fb      	ldr	r3, [r7, #28]
 800d652:	781a      	ldrb	r2, [r3, #0]
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d65a:	69fb      	ldr	r3, [r7, #28]
 800d65c:	3301      	adds	r3, #1
 800d65e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d666:	b29b      	uxth	r3, r3
 800d668:	3b01      	subs	r3, #1
 800d66a:	b29a      	uxth	r2, r3
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d678:	b29b      	uxth	r3, r3
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d1c8      	bne.n	800d610 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	9300      	str	r3, [sp, #0]
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	2200      	movs	r2, #0
 800d686:	2140      	movs	r1, #64	; 0x40
 800d688:	68f8      	ldr	r0, [r7, #12]
 800d68a:	f001 fc6f 	bl	800ef6c <UART_WaitOnFlagUntilTimeout>
 800d68e:	4603      	mov	r3, r0
 800d690:	2b00      	cmp	r3, #0
 800d692:	d005      	beq.n	800d6a0 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	2220      	movs	r2, #32
 800d698:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800d69c:	2303      	movs	r3, #3
 800d69e:	e006      	b.n	800d6ae <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	2220      	movs	r2, #32
 800d6a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	e000      	b.n	800d6ae <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d6ac:	2302      	movs	r3, #2
  }
}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	3720      	adds	r7, #32
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}

0800d6b6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d6b6:	b580      	push	{r7, lr}
 800d6b8:	b08a      	sub	sp, #40	; 0x28
 800d6ba:	af02      	add	r7, sp, #8
 800d6bc:	60f8      	str	r0, [r7, #12]
 800d6be:	60b9      	str	r1, [r7, #8]
 800d6c0:	603b      	str	r3, [r7, #0]
 800d6c2:	4613      	mov	r3, r2
 800d6c4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d6cc:	2b20      	cmp	r3, #32
 800d6ce:	f040 80b5 	bne.w	800d83c <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d002      	beq.n	800d6de <HAL_UART_Receive+0x28>
 800d6d8:	88fb      	ldrh	r3, [r7, #6]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d101      	bne.n	800d6e2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800d6de:	2301      	movs	r3, #1
 800d6e0:	e0ad      	b.n	800d83e <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	2222      	movs	r2, #34	; 0x22
 800d6ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d6f8:	f7f6 fe98 	bl	800442c <HAL_GetTick>
 800d6fc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	88fa      	ldrh	r2, [r7, #6]
 800d702:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	88fa      	ldrh	r2, [r7, #6]
 800d70a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	689b      	ldr	r3, [r3, #8]
 800d712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d716:	d10e      	bne.n	800d736 <HAL_UART_Receive+0x80>
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	691b      	ldr	r3, [r3, #16]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d105      	bne.n	800d72c <HAL_UART_Receive+0x76>
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d726:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d72a:	e02d      	b.n	800d788 <HAL_UART_Receive+0xd2>
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	22ff      	movs	r2, #255	; 0xff
 800d730:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d734:	e028      	b.n	800d788 <HAL_UART_Receive+0xd2>
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	689b      	ldr	r3, [r3, #8]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d10d      	bne.n	800d75a <HAL_UART_Receive+0xa4>
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	691b      	ldr	r3, [r3, #16]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d104      	bne.n	800d750 <HAL_UART_Receive+0x9a>
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	22ff      	movs	r2, #255	; 0xff
 800d74a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d74e:	e01b      	b.n	800d788 <HAL_UART_Receive+0xd2>
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	227f      	movs	r2, #127	; 0x7f
 800d754:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d758:	e016      	b.n	800d788 <HAL_UART_Receive+0xd2>
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	689b      	ldr	r3, [r3, #8]
 800d75e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d762:	d10d      	bne.n	800d780 <HAL_UART_Receive+0xca>
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	691b      	ldr	r3, [r3, #16]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d104      	bne.n	800d776 <HAL_UART_Receive+0xc0>
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	227f      	movs	r2, #127	; 0x7f
 800d770:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d774:	e008      	b.n	800d788 <HAL_UART_Receive+0xd2>
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	223f      	movs	r2, #63	; 0x3f
 800d77a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d77e:	e003      	b.n	800d788 <HAL_UART_Receive+0xd2>
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	2200      	movs	r2, #0
 800d784:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d78e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	689b      	ldr	r3, [r3, #8]
 800d794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d798:	d108      	bne.n	800d7ac <HAL_UART_Receive+0xf6>
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	691b      	ldr	r3, [r3, #16]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d104      	bne.n	800d7ac <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	61bb      	str	r3, [r7, #24]
 800d7aa:	e003      	b.n	800d7b4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800d7ac:	68bb      	ldr	r3, [r7, #8]
 800d7ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800d7b4:	e036      	b.n	800d824 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	9300      	str	r3, [sp, #0]
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	2200      	movs	r2, #0
 800d7be:	2120      	movs	r1, #32
 800d7c0:	68f8      	ldr	r0, [r7, #12]
 800d7c2:	f001 fbd3 	bl	800ef6c <UART_WaitOnFlagUntilTimeout>
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d005      	beq.n	800d7d8 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	2220      	movs	r2, #32
 800d7d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800d7d4:	2303      	movs	r3, #3
 800d7d6:	e032      	b.n	800d83e <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800d7d8:	69fb      	ldr	r3, [r7, #28]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d10c      	bne.n	800d7f8 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7e4:	b29a      	uxth	r2, r3
 800d7e6:	8a7b      	ldrh	r3, [r7, #18]
 800d7e8:	4013      	ands	r3, r2
 800d7ea:	b29a      	uxth	r2, r3
 800d7ec:	69bb      	ldr	r3, [r7, #24]
 800d7ee:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800d7f0:	69bb      	ldr	r3, [r7, #24]
 800d7f2:	3302      	adds	r3, #2
 800d7f4:	61bb      	str	r3, [r7, #24]
 800d7f6:	e00c      	b.n	800d812 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7fe:	b2da      	uxtb	r2, r3
 800d800:	8a7b      	ldrh	r3, [r7, #18]
 800d802:	b2db      	uxtb	r3, r3
 800d804:	4013      	ands	r3, r2
 800d806:	b2da      	uxtb	r2, r3
 800d808:	69fb      	ldr	r3, [r7, #28]
 800d80a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800d80c:	69fb      	ldr	r3, [r7, #28]
 800d80e:	3301      	adds	r3, #1
 800d810:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d818:	b29b      	uxth	r3, r3
 800d81a:	3b01      	subs	r3, #1
 800d81c:	b29a      	uxth	r2, r3
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d82a:	b29b      	uxth	r3, r3
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d1c2      	bne.n	800d7b6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	2220      	movs	r2, #32
 800d834:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800d838:	2300      	movs	r3, #0
 800d83a:	e000      	b.n	800d83e <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800d83c:	2302      	movs	r3, #2
  }
}
 800d83e:	4618      	mov	r0, r3
 800d840:	3720      	adds	r7, #32
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}
	...

0800d848 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b0ba      	sub	sp, #232	; 0xe8
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	69db      	ldr	r3, [r3, #28]
 800d856:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	689b      	ldr	r3, [r3, #8]
 800d86a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d86e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d872:	f640 030f 	movw	r3, #2063	; 0x80f
 800d876:	4013      	ands	r3, r2
 800d878:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d87c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d880:	2b00      	cmp	r3, #0
 800d882:	d11b      	bne.n	800d8bc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d888:	f003 0320 	and.w	r3, r3, #32
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d015      	beq.n	800d8bc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d894:	f003 0320 	and.w	r3, r3, #32
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d105      	bne.n	800d8a8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d89c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d8a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d009      	beq.n	800d8bc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	f000 8377 	beq.w	800dfa0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	4798      	blx	r3
      }
      return;
 800d8ba:	e371      	b.n	800dfa0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d8bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	f000 8123 	beq.w	800db0c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d8c6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d8ca:	4b8d      	ldr	r3, [pc, #564]	; (800db00 <HAL_UART_IRQHandler+0x2b8>)
 800d8cc:	4013      	ands	r3, r2
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d106      	bne.n	800d8e0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d8d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d8d6:	4b8b      	ldr	r3, [pc, #556]	; (800db04 <HAL_UART_IRQHandler+0x2bc>)
 800d8d8:	4013      	ands	r3, r2
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	f000 8116 	beq.w	800db0c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d8e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8e4:	f003 0301 	and.w	r3, r3, #1
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d011      	beq.n	800d910 <HAL_UART_IRQHandler+0xc8>
 800d8ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d00b      	beq.n	800d910 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	2201      	movs	r2, #1
 800d8fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d906:	f043 0201 	orr.w	r2, r3, #1
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d914:	f003 0302 	and.w	r3, r3, #2
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d011      	beq.n	800d940 <HAL_UART_IRQHandler+0xf8>
 800d91c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d920:	f003 0301 	and.w	r3, r3, #1
 800d924:	2b00      	cmp	r3, #0
 800d926:	d00b      	beq.n	800d940 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	2202      	movs	r2, #2
 800d92e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d936:	f043 0204 	orr.w	r2, r3, #4
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d944:	f003 0304 	and.w	r3, r3, #4
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d011      	beq.n	800d970 <HAL_UART_IRQHandler+0x128>
 800d94c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d950:	f003 0301 	and.w	r3, r3, #1
 800d954:	2b00      	cmp	r3, #0
 800d956:	d00b      	beq.n	800d970 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	2204      	movs	r2, #4
 800d95e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d966:	f043 0202 	orr.w	r2, r3, #2
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d974:	f003 0308 	and.w	r3, r3, #8
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d017      	beq.n	800d9ac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d97c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d980:	f003 0320 	and.w	r3, r3, #32
 800d984:	2b00      	cmp	r3, #0
 800d986:	d105      	bne.n	800d994 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d988:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d98c:	4b5c      	ldr	r3, [pc, #368]	; (800db00 <HAL_UART_IRQHandler+0x2b8>)
 800d98e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d990:	2b00      	cmp	r3, #0
 800d992:	d00b      	beq.n	800d9ac <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	2208      	movs	r2, #8
 800d99a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9a2:	f043 0208 	orr.w	r2, r3, #8
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d9ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d012      	beq.n	800d9de <HAL_UART_IRQHandler+0x196>
 800d9b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d9bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d00c      	beq.n	800d9de <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d9cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9d4:	f043 0220 	orr.w	r2, r3, #32
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	f000 82dd 	beq.w	800dfa4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d9ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9ee:	f003 0320 	and.w	r3, r3, #32
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d013      	beq.n	800da1e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d9f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d9fa:	f003 0320 	and.w	r3, r3, #32
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d105      	bne.n	800da0e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800da02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800da06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d007      	beq.n	800da1e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da12:	2b00      	cmp	r3, #0
 800da14:	d003      	beq.n	800da1e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	689b      	ldr	r3, [r3, #8]
 800da2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da32:	2b40      	cmp	r3, #64	; 0x40
 800da34:	d005      	beq.n	800da42 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800da36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800da3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d054      	beq.n	800daec <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f001 fafa 	bl	800f03c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	689b      	ldr	r3, [r3, #8]
 800da4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da52:	2b40      	cmp	r3, #64	; 0x40
 800da54:	d146      	bne.n	800dae4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	3308      	adds	r3, #8
 800da5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800da64:	e853 3f00 	ldrex	r3, [r3]
 800da68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800da6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800da70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	3308      	adds	r3, #8
 800da7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800da82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800da86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800da8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800da92:	e841 2300 	strex	r3, r2, [r1]
 800da96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800da9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d1d9      	bne.n	800da56 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d017      	beq.n	800dadc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dab2:	4a15      	ldr	r2, [pc, #84]	; (800db08 <HAL_UART_IRQHandler+0x2c0>)
 800dab4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dabc:	4618      	mov	r0, r3
 800dabe:	f7f8 f9db 	bl	8005e78 <HAL_DMA_Abort_IT>
 800dac2:	4603      	mov	r3, r0
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d019      	beq.n	800dafc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dad0:	687a      	ldr	r2, [r7, #4]
 800dad2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800dad6:	4610      	mov	r0, r2
 800dad8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dada:	e00f      	b.n	800dafc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800dadc:	6878      	ldr	r0, [r7, #4]
 800dade:	f000 fa77 	bl	800dfd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dae2:	e00b      	b.n	800dafc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dae4:	6878      	ldr	r0, [r7, #4]
 800dae6:	f000 fa73 	bl	800dfd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800daea:	e007      	b.n	800dafc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f000 fa6f 	bl	800dfd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2200      	movs	r2, #0
 800daf6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800dafa:	e253      	b.n	800dfa4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dafc:	bf00      	nop
    return;
 800dafe:	e251      	b.n	800dfa4 <HAL_UART_IRQHandler+0x75c>
 800db00:	10000001 	.word	0x10000001
 800db04:	04000120 	.word	0x04000120
 800db08:	0800f109 	.word	0x0800f109

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db10:	2b01      	cmp	r3, #1
 800db12:	f040 81e7 	bne.w	800dee4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800db16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db1a:	f003 0310 	and.w	r3, r3, #16
 800db1e:	2b00      	cmp	r3, #0
 800db20:	f000 81e0 	beq.w	800dee4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800db24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800db28:	f003 0310 	and.w	r3, r3, #16
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	f000 81d9 	beq.w	800dee4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	2210      	movs	r2, #16
 800db38:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	689b      	ldr	r3, [r3, #8]
 800db40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db44:	2b40      	cmp	r3, #64	; 0x40
 800db46:	f040 8151 	bne.w	800ddec <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	4a96      	ldr	r2, [pc, #600]	; (800ddac <HAL_UART_IRQHandler+0x564>)
 800db54:	4293      	cmp	r3, r2
 800db56:	d068      	beq.n	800dc2a <HAL_UART_IRQHandler+0x3e2>
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	4a93      	ldr	r2, [pc, #588]	; (800ddb0 <HAL_UART_IRQHandler+0x568>)
 800db62:	4293      	cmp	r3, r2
 800db64:	d061      	beq.n	800dc2a <HAL_UART_IRQHandler+0x3e2>
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	4a91      	ldr	r2, [pc, #580]	; (800ddb4 <HAL_UART_IRQHandler+0x56c>)
 800db70:	4293      	cmp	r3, r2
 800db72:	d05a      	beq.n	800dc2a <HAL_UART_IRQHandler+0x3e2>
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	4a8e      	ldr	r2, [pc, #568]	; (800ddb8 <HAL_UART_IRQHandler+0x570>)
 800db7e:	4293      	cmp	r3, r2
 800db80:	d053      	beq.n	800dc2a <HAL_UART_IRQHandler+0x3e2>
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	4a8c      	ldr	r2, [pc, #560]	; (800ddbc <HAL_UART_IRQHandler+0x574>)
 800db8c:	4293      	cmp	r3, r2
 800db8e:	d04c      	beq.n	800dc2a <HAL_UART_IRQHandler+0x3e2>
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	4a89      	ldr	r2, [pc, #548]	; (800ddc0 <HAL_UART_IRQHandler+0x578>)
 800db9a:	4293      	cmp	r3, r2
 800db9c:	d045      	beq.n	800dc2a <HAL_UART_IRQHandler+0x3e2>
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	4a87      	ldr	r2, [pc, #540]	; (800ddc4 <HAL_UART_IRQHandler+0x57c>)
 800dba8:	4293      	cmp	r3, r2
 800dbaa:	d03e      	beq.n	800dc2a <HAL_UART_IRQHandler+0x3e2>
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	4a84      	ldr	r2, [pc, #528]	; (800ddc8 <HAL_UART_IRQHandler+0x580>)
 800dbb6:	4293      	cmp	r3, r2
 800dbb8:	d037      	beq.n	800dc2a <HAL_UART_IRQHandler+0x3e2>
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	4a82      	ldr	r2, [pc, #520]	; (800ddcc <HAL_UART_IRQHandler+0x584>)
 800dbc4:	4293      	cmp	r3, r2
 800dbc6:	d030      	beq.n	800dc2a <HAL_UART_IRQHandler+0x3e2>
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	4a7f      	ldr	r2, [pc, #508]	; (800ddd0 <HAL_UART_IRQHandler+0x588>)
 800dbd2:	4293      	cmp	r3, r2
 800dbd4:	d029      	beq.n	800dc2a <HAL_UART_IRQHandler+0x3e2>
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	4a7d      	ldr	r2, [pc, #500]	; (800ddd4 <HAL_UART_IRQHandler+0x58c>)
 800dbe0:	4293      	cmp	r3, r2
 800dbe2:	d022      	beq.n	800dc2a <HAL_UART_IRQHandler+0x3e2>
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	4a7a      	ldr	r2, [pc, #488]	; (800ddd8 <HAL_UART_IRQHandler+0x590>)
 800dbee:	4293      	cmp	r3, r2
 800dbf0:	d01b      	beq.n	800dc2a <HAL_UART_IRQHandler+0x3e2>
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	4a78      	ldr	r2, [pc, #480]	; (800dddc <HAL_UART_IRQHandler+0x594>)
 800dbfc:	4293      	cmp	r3, r2
 800dbfe:	d014      	beq.n	800dc2a <HAL_UART_IRQHandler+0x3e2>
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	4a75      	ldr	r2, [pc, #468]	; (800dde0 <HAL_UART_IRQHandler+0x598>)
 800dc0a:	4293      	cmp	r3, r2
 800dc0c:	d00d      	beq.n	800dc2a <HAL_UART_IRQHandler+0x3e2>
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	4a73      	ldr	r2, [pc, #460]	; (800dde4 <HAL_UART_IRQHandler+0x59c>)
 800dc18:	4293      	cmp	r3, r2
 800dc1a:	d006      	beq.n	800dc2a <HAL_UART_IRQHandler+0x3e2>
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	4a70      	ldr	r2, [pc, #448]	; (800dde8 <HAL_UART_IRQHandler+0x5a0>)
 800dc26:	4293      	cmp	r3, r2
 800dc28:	d106      	bne.n	800dc38 <HAL_UART_IRQHandler+0x3f0>
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	685b      	ldr	r3, [r3, #4]
 800dc34:	b29b      	uxth	r3, r3
 800dc36:	e005      	b.n	800dc44 <HAL_UART_IRQHandler+0x3fc>
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	685b      	ldr	r3, [r3, #4]
 800dc42:	b29b      	uxth	r3, r3
 800dc44:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800dc48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	f000 81ab 	beq.w	800dfa8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dc58:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dc5c:	429a      	cmp	r2, r3
 800dc5e:	f080 81a3 	bcs.w	800dfa8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dc68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc72:	69db      	ldr	r3, [r3, #28]
 800dc74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc78:	f000 8087 	beq.w	800dd8a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dc88:	e853 3f00 	ldrex	r3, [r3]
 800dc8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800dc90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dc94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dc98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	461a      	mov	r2, r3
 800dca2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dca6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dcaa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800dcb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dcb6:	e841 2300 	strex	r3, r2, [r1]
 800dcba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800dcbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d1da      	bne.n	800dc7c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	3308      	adds	r3, #8
 800dccc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dcd0:	e853 3f00 	ldrex	r3, [r3]
 800dcd4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800dcd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dcd8:	f023 0301 	bic.w	r3, r3, #1
 800dcdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	3308      	adds	r3, #8
 800dce6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800dcea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800dcee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcf0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800dcf2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dcf6:	e841 2300 	strex	r3, r2, [r1]
 800dcfa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800dcfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d1e1      	bne.n	800dcc6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	3308      	adds	r3, #8
 800dd08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd0c:	e853 3f00 	ldrex	r3, [r3]
 800dd10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800dd12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dd18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	3308      	adds	r3, #8
 800dd22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800dd26:	66fa      	str	r2, [r7, #108]	; 0x6c
 800dd28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dd2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dd2e:	e841 2300 	strex	r3, r2, [r1]
 800dd32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800dd34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d1e3      	bne.n	800dd02 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	2220      	movs	r2, #32
 800dd3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2200      	movs	r2, #0
 800dd46:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd50:	e853 3f00 	ldrex	r3, [r3]
 800dd54:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800dd56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd58:	f023 0310 	bic.w	r3, r3, #16
 800dd5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	461a      	mov	r2, r3
 800dd66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dd6a:	65bb      	str	r3, [r7, #88]	; 0x58
 800dd6c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dd70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dd72:	e841 2300 	strex	r3, r2, [r1]
 800dd76:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800dd78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d1e4      	bne.n	800dd48 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd84:	4618      	mov	r0, r3
 800dd86:	f7f7 fd59 	bl	800583c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2202      	movs	r2, #2
 800dd8e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dd9c:	b29b      	uxth	r3, r3
 800dd9e:	1ad3      	subs	r3, r2, r3
 800dda0:	b29b      	uxth	r3, r3
 800dda2:	4619      	mov	r1, r3
 800dda4:	6878      	ldr	r0, [r7, #4]
 800dda6:	f000 f91d 	bl	800dfe4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ddaa:	e0fd      	b.n	800dfa8 <HAL_UART_IRQHandler+0x760>
 800ddac:	40020010 	.word	0x40020010
 800ddb0:	40020028 	.word	0x40020028
 800ddb4:	40020040 	.word	0x40020040
 800ddb8:	40020058 	.word	0x40020058
 800ddbc:	40020070 	.word	0x40020070
 800ddc0:	40020088 	.word	0x40020088
 800ddc4:	400200a0 	.word	0x400200a0
 800ddc8:	400200b8 	.word	0x400200b8
 800ddcc:	40020410 	.word	0x40020410
 800ddd0:	40020428 	.word	0x40020428
 800ddd4:	40020440 	.word	0x40020440
 800ddd8:	40020458 	.word	0x40020458
 800dddc:	40020470 	.word	0x40020470
 800dde0:	40020488 	.word	0x40020488
 800dde4:	400204a0 	.word	0x400204a0
 800dde8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ddf8:	b29b      	uxth	r3, r3
 800ddfa:	1ad3      	subs	r3, r2, r3
 800ddfc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800de06:	b29b      	uxth	r3, r3
 800de08:	2b00      	cmp	r3, #0
 800de0a:	f000 80cf 	beq.w	800dfac <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800de0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800de12:	2b00      	cmp	r3, #0
 800de14:	f000 80ca 	beq.w	800dfac <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de20:	e853 3f00 	ldrex	r3, [r3]
 800de24:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800de26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800de2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	461a      	mov	r2, r3
 800de36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800de3a:	647b      	str	r3, [r7, #68]	; 0x44
 800de3c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800de40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800de42:	e841 2300 	strex	r3, r2, [r1]
 800de46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800de48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d1e4      	bne.n	800de18 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	3308      	adds	r3, #8
 800de54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de58:	e853 3f00 	ldrex	r3, [r3]
 800de5c:	623b      	str	r3, [r7, #32]
   return(result);
 800de5e:	6a3a      	ldr	r2, [r7, #32]
 800de60:	4b55      	ldr	r3, [pc, #340]	; (800dfb8 <HAL_UART_IRQHandler+0x770>)
 800de62:	4013      	ands	r3, r2
 800de64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	3308      	adds	r3, #8
 800de6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800de72:	633a      	str	r2, [r7, #48]	; 0x30
 800de74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800de78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de7a:	e841 2300 	strex	r3, r2, [r1]
 800de7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800de80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de82:	2b00      	cmp	r3, #0
 800de84:	d1e3      	bne.n	800de4e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	2220      	movs	r2, #32
 800de8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2200      	movs	r2, #0
 800de92:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2200      	movs	r2, #0
 800de98:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dea0:	693b      	ldr	r3, [r7, #16]
 800dea2:	e853 3f00 	ldrex	r3, [r3]
 800dea6:	60fb      	str	r3, [r7, #12]
   return(result);
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	f023 0310 	bic.w	r3, r3, #16
 800deae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	461a      	mov	r2, r3
 800deb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800debc:	61fb      	str	r3, [r7, #28]
 800debe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dec0:	69b9      	ldr	r1, [r7, #24]
 800dec2:	69fa      	ldr	r2, [r7, #28]
 800dec4:	e841 2300 	strex	r3, r2, [r1]
 800dec8:	617b      	str	r3, [r7, #20]
   return(result);
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d1e4      	bne.n	800de9a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	2202      	movs	r2, #2
 800ded4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ded6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800deda:	4619      	mov	r1, r3
 800dedc:	6878      	ldr	r0, [r7, #4]
 800dede:	f000 f881 	bl	800dfe4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dee2:	e063      	b.n	800dfac <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800dee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dee8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800deec:	2b00      	cmp	r3, #0
 800deee:	d00e      	beq.n	800df0e <HAL_UART_IRQHandler+0x6c6>
 800def0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800def4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800def8:	2b00      	cmp	r3, #0
 800defa:	d008      	beq.n	800df0e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800df04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800df06:	6878      	ldr	r0, [r7, #4]
 800df08:	f001 f93f 	bl	800f18a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800df0c:	e051      	b.n	800dfb2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800df0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df16:	2b00      	cmp	r3, #0
 800df18:	d014      	beq.n	800df44 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800df1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df22:	2b00      	cmp	r3, #0
 800df24:	d105      	bne.n	800df32 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800df26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d008      	beq.n	800df44 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df36:	2b00      	cmp	r3, #0
 800df38:	d03a      	beq.n	800dfb0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df3e:	6878      	ldr	r0, [r7, #4]
 800df40:	4798      	blx	r3
    }
    return;
 800df42:	e035      	b.n	800dfb0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800df44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d009      	beq.n	800df64 <HAL_UART_IRQHandler+0x71c>
 800df50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d003      	beq.n	800df64 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800df5c:	6878      	ldr	r0, [r7, #4]
 800df5e:	f001 f8e9 	bl	800f134 <UART_EndTransmit_IT>
    return;
 800df62:	e026      	b.n	800dfb2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800df64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d009      	beq.n	800df84 <HAL_UART_IRQHandler+0x73c>
 800df70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d003      	beq.n	800df84 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800df7c:	6878      	ldr	r0, [r7, #4]
 800df7e:	f001 f918 	bl	800f1b2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800df82:	e016      	b.n	800dfb2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800df84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d010      	beq.n	800dfb2 <HAL_UART_IRQHandler+0x76a>
 800df90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df94:	2b00      	cmp	r3, #0
 800df96:	da0c      	bge.n	800dfb2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800df98:	6878      	ldr	r0, [r7, #4]
 800df9a:	f001 f900 	bl	800f19e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800df9e:	e008      	b.n	800dfb2 <HAL_UART_IRQHandler+0x76a>
      return;
 800dfa0:	bf00      	nop
 800dfa2:	e006      	b.n	800dfb2 <HAL_UART_IRQHandler+0x76a>
    return;
 800dfa4:	bf00      	nop
 800dfa6:	e004      	b.n	800dfb2 <HAL_UART_IRQHandler+0x76a>
      return;
 800dfa8:	bf00      	nop
 800dfaa:	e002      	b.n	800dfb2 <HAL_UART_IRQHandler+0x76a>
      return;
 800dfac:	bf00      	nop
 800dfae:	e000      	b.n	800dfb2 <HAL_UART_IRQHandler+0x76a>
    return;
 800dfb0:	bf00      	nop
  }
}
 800dfb2:	37e8      	adds	r7, #232	; 0xe8
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	bd80      	pop	{r7, pc}
 800dfb8:	effffffe 	.word	0xeffffffe

0800dfbc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800dfbc:	b480      	push	{r7}
 800dfbe:	b083      	sub	sp, #12
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800dfc4:	bf00      	nop
 800dfc6:	370c      	adds	r7, #12
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfce:	4770      	bx	lr

0800dfd0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dfd0:	b480      	push	{r7}
 800dfd2:	b083      	sub	sp, #12
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800dfd8:	bf00      	nop
 800dfda:	370c      	adds	r7, #12
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe2:	4770      	bx	lr

0800dfe4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800dfe4:	b480      	push	{r7}
 800dfe6:	b083      	sub	sp, #12
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
 800dfec:	460b      	mov	r3, r1
 800dfee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800dff0:	bf00      	nop
 800dff2:	370c      	adds	r7, #12
 800dff4:	46bd      	mov	sp, r7
 800dff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffa:	4770      	bx	lr

0800dffc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e000:	b092      	sub	sp, #72	; 0x48
 800e002:	af00      	add	r7, sp, #0
 800e004:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e006:	2300      	movs	r3, #0
 800e008:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e00c:	697b      	ldr	r3, [r7, #20]
 800e00e:	689a      	ldr	r2, [r3, #8]
 800e010:	697b      	ldr	r3, [r7, #20]
 800e012:	691b      	ldr	r3, [r3, #16]
 800e014:	431a      	orrs	r2, r3
 800e016:	697b      	ldr	r3, [r7, #20]
 800e018:	695b      	ldr	r3, [r3, #20]
 800e01a:	431a      	orrs	r2, r3
 800e01c:	697b      	ldr	r3, [r7, #20]
 800e01e:	69db      	ldr	r3, [r3, #28]
 800e020:	4313      	orrs	r3, r2
 800e022:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e024:	697b      	ldr	r3, [r7, #20]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	681a      	ldr	r2, [r3, #0]
 800e02a:	4bbe      	ldr	r3, [pc, #760]	; (800e324 <UART_SetConfig+0x328>)
 800e02c:	4013      	ands	r3, r2
 800e02e:	697a      	ldr	r2, [r7, #20]
 800e030:	6812      	ldr	r2, [r2, #0]
 800e032:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e034:	430b      	orrs	r3, r1
 800e036:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	685b      	ldr	r3, [r3, #4]
 800e03e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e042:	697b      	ldr	r3, [r7, #20]
 800e044:	68da      	ldr	r2, [r3, #12]
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	430a      	orrs	r2, r1
 800e04c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e04e:	697b      	ldr	r3, [r7, #20]
 800e050:	699b      	ldr	r3, [r3, #24]
 800e052:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e054:	697b      	ldr	r3, [r7, #20]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	4ab3      	ldr	r2, [pc, #716]	; (800e328 <UART_SetConfig+0x32c>)
 800e05a:	4293      	cmp	r3, r2
 800e05c:	d004      	beq.n	800e068 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e05e:	697b      	ldr	r3, [r7, #20]
 800e060:	6a1b      	ldr	r3, [r3, #32]
 800e062:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e064:	4313      	orrs	r3, r2
 800e066:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e068:	697b      	ldr	r3, [r7, #20]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	689a      	ldr	r2, [r3, #8]
 800e06e:	4baf      	ldr	r3, [pc, #700]	; (800e32c <UART_SetConfig+0x330>)
 800e070:	4013      	ands	r3, r2
 800e072:	697a      	ldr	r2, [r7, #20]
 800e074:	6812      	ldr	r2, [r2, #0]
 800e076:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e078:	430b      	orrs	r3, r1
 800e07a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e07c:	697b      	ldr	r3, [r7, #20]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e082:	f023 010f 	bic.w	r1, r3, #15
 800e086:	697b      	ldr	r3, [r7, #20]
 800e088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e08a:	697b      	ldr	r3, [r7, #20]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	430a      	orrs	r2, r1
 800e090:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	4aa6      	ldr	r2, [pc, #664]	; (800e330 <UART_SetConfig+0x334>)
 800e098:	4293      	cmp	r3, r2
 800e09a:	d177      	bne.n	800e18c <UART_SetConfig+0x190>
 800e09c:	4ba5      	ldr	r3, [pc, #660]	; (800e334 <UART_SetConfig+0x338>)
 800e09e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e0a4:	2b28      	cmp	r3, #40	; 0x28
 800e0a6:	d86d      	bhi.n	800e184 <UART_SetConfig+0x188>
 800e0a8:	a201      	add	r2, pc, #4	; (adr r2, 800e0b0 <UART_SetConfig+0xb4>)
 800e0aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0ae:	bf00      	nop
 800e0b0:	0800e155 	.word	0x0800e155
 800e0b4:	0800e185 	.word	0x0800e185
 800e0b8:	0800e185 	.word	0x0800e185
 800e0bc:	0800e185 	.word	0x0800e185
 800e0c0:	0800e185 	.word	0x0800e185
 800e0c4:	0800e185 	.word	0x0800e185
 800e0c8:	0800e185 	.word	0x0800e185
 800e0cc:	0800e185 	.word	0x0800e185
 800e0d0:	0800e15d 	.word	0x0800e15d
 800e0d4:	0800e185 	.word	0x0800e185
 800e0d8:	0800e185 	.word	0x0800e185
 800e0dc:	0800e185 	.word	0x0800e185
 800e0e0:	0800e185 	.word	0x0800e185
 800e0e4:	0800e185 	.word	0x0800e185
 800e0e8:	0800e185 	.word	0x0800e185
 800e0ec:	0800e185 	.word	0x0800e185
 800e0f0:	0800e165 	.word	0x0800e165
 800e0f4:	0800e185 	.word	0x0800e185
 800e0f8:	0800e185 	.word	0x0800e185
 800e0fc:	0800e185 	.word	0x0800e185
 800e100:	0800e185 	.word	0x0800e185
 800e104:	0800e185 	.word	0x0800e185
 800e108:	0800e185 	.word	0x0800e185
 800e10c:	0800e185 	.word	0x0800e185
 800e110:	0800e16d 	.word	0x0800e16d
 800e114:	0800e185 	.word	0x0800e185
 800e118:	0800e185 	.word	0x0800e185
 800e11c:	0800e185 	.word	0x0800e185
 800e120:	0800e185 	.word	0x0800e185
 800e124:	0800e185 	.word	0x0800e185
 800e128:	0800e185 	.word	0x0800e185
 800e12c:	0800e185 	.word	0x0800e185
 800e130:	0800e175 	.word	0x0800e175
 800e134:	0800e185 	.word	0x0800e185
 800e138:	0800e185 	.word	0x0800e185
 800e13c:	0800e185 	.word	0x0800e185
 800e140:	0800e185 	.word	0x0800e185
 800e144:	0800e185 	.word	0x0800e185
 800e148:	0800e185 	.word	0x0800e185
 800e14c:	0800e185 	.word	0x0800e185
 800e150:	0800e17d 	.word	0x0800e17d
 800e154:	2301      	movs	r3, #1
 800e156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e15a:	e326      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e15c:	2304      	movs	r3, #4
 800e15e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e162:	e322      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e164:	2308      	movs	r3, #8
 800e166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e16a:	e31e      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e16c:	2310      	movs	r3, #16
 800e16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e172:	e31a      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e174:	2320      	movs	r3, #32
 800e176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e17a:	e316      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e17c:	2340      	movs	r3, #64	; 0x40
 800e17e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e182:	e312      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e184:	2380      	movs	r3, #128	; 0x80
 800e186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e18a:	e30e      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e18c:	697b      	ldr	r3, [r7, #20]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	4a69      	ldr	r2, [pc, #420]	; (800e338 <UART_SetConfig+0x33c>)
 800e192:	4293      	cmp	r3, r2
 800e194:	d130      	bne.n	800e1f8 <UART_SetConfig+0x1fc>
 800e196:	4b67      	ldr	r3, [pc, #412]	; (800e334 <UART_SetConfig+0x338>)
 800e198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e19a:	f003 0307 	and.w	r3, r3, #7
 800e19e:	2b05      	cmp	r3, #5
 800e1a0:	d826      	bhi.n	800e1f0 <UART_SetConfig+0x1f4>
 800e1a2:	a201      	add	r2, pc, #4	; (adr r2, 800e1a8 <UART_SetConfig+0x1ac>)
 800e1a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1a8:	0800e1c1 	.word	0x0800e1c1
 800e1ac:	0800e1c9 	.word	0x0800e1c9
 800e1b0:	0800e1d1 	.word	0x0800e1d1
 800e1b4:	0800e1d9 	.word	0x0800e1d9
 800e1b8:	0800e1e1 	.word	0x0800e1e1
 800e1bc:	0800e1e9 	.word	0x0800e1e9
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1c6:	e2f0      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e1c8:	2304      	movs	r3, #4
 800e1ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1ce:	e2ec      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e1d0:	2308      	movs	r3, #8
 800e1d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1d6:	e2e8      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e1d8:	2310      	movs	r3, #16
 800e1da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1de:	e2e4      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e1e0:	2320      	movs	r3, #32
 800e1e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1e6:	e2e0      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e1e8:	2340      	movs	r3, #64	; 0x40
 800e1ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1ee:	e2dc      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e1f0:	2380      	movs	r3, #128	; 0x80
 800e1f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1f6:	e2d8      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e1f8:	697b      	ldr	r3, [r7, #20]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	4a4f      	ldr	r2, [pc, #316]	; (800e33c <UART_SetConfig+0x340>)
 800e1fe:	4293      	cmp	r3, r2
 800e200:	d130      	bne.n	800e264 <UART_SetConfig+0x268>
 800e202:	4b4c      	ldr	r3, [pc, #304]	; (800e334 <UART_SetConfig+0x338>)
 800e204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e206:	f003 0307 	and.w	r3, r3, #7
 800e20a:	2b05      	cmp	r3, #5
 800e20c:	d826      	bhi.n	800e25c <UART_SetConfig+0x260>
 800e20e:	a201      	add	r2, pc, #4	; (adr r2, 800e214 <UART_SetConfig+0x218>)
 800e210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e214:	0800e22d 	.word	0x0800e22d
 800e218:	0800e235 	.word	0x0800e235
 800e21c:	0800e23d 	.word	0x0800e23d
 800e220:	0800e245 	.word	0x0800e245
 800e224:	0800e24d 	.word	0x0800e24d
 800e228:	0800e255 	.word	0x0800e255
 800e22c:	2300      	movs	r3, #0
 800e22e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e232:	e2ba      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e234:	2304      	movs	r3, #4
 800e236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e23a:	e2b6      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e23c:	2308      	movs	r3, #8
 800e23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e242:	e2b2      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e244:	2310      	movs	r3, #16
 800e246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e24a:	e2ae      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e24c:	2320      	movs	r3, #32
 800e24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e252:	e2aa      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e254:	2340      	movs	r3, #64	; 0x40
 800e256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e25a:	e2a6      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e25c:	2380      	movs	r3, #128	; 0x80
 800e25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e262:	e2a2      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e264:	697b      	ldr	r3, [r7, #20]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	4a35      	ldr	r2, [pc, #212]	; (800e340 <UART_SetConfig+0x344>)
 800e26a:	4293      	cmp	r3, r2
 800e26c:	d130      	bne.n	800e2d0 <UART_SetConfig+0x2d4>
 800e26e:	4b31      	ldr	r3, [pc, #196]	; (800e334 <UART_SetConfig+0x338>)
 800e270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e272:	f003 0307 	and.w	r3, r3, #7
 800e276:	2b05      	cmp	r3, #5
 800e278:	d826      	bhi.n	800e2c8 <UART_SetConfig+0x2cc>
 800e27a:	a201      	add	r2, pc, #4	; (adr r2, 800e280 <UART_SetConfig+0x284>)
 800e27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e280:	0800e299 	.word	0x0800e299
 800e284:	0800e2a1 	.word	0x0800e2a1
 800e288:	0800e2a9 	.word	0x0800e2a9
 800e28c:	0800e2b1 	.word	0x0800e2b1
 800e290:	0800e2b9 	.word	0x0800e2b9
 800e294:	0800e2c1 	.word	0x0800e2c1
 800e298:	2300      	movs	r3, #0
 800e29a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e29e:	e284      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e2a0:	2304      	movs	r3, #4
 800e2a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2a6:	e280      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e2a8:	2308      	movs	r3, #8
 800e2aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2ae:	e27c      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e2b0:	2310      	movs	r3, #16
 800e2b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2b6:	e278      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e2b8:	2320      	movs	r3, #32
 800e2ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2be:	e274      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e2c0:	2340      	movs	r3, #64	; 0x40
 800e2c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2c6:	e270      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e2c8:	2380      	movs	r3, #128	; 0x80
 800e2ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2ce:	e26c      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e2d0:	697b      	ldr	r3, [r7, #20]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	4a1b      	ldr	r2, [pc, #108]	; (800e344 <UART_SetConfig+0x348>)
 800e2d6:	4293      	cmp	r3, r2
 800e2d8:	d142      	bne.n	800e360 <UART_SetConfig+0x364>
 800e2da:	4b16      	ldr	r3, [pc, #88]	; (800e334 <UART_SetConfig+0x338>)
 800e2dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2de:	f003 0307 	and.w	r3, r3, #7
 800e2e2:	2b05      	cmp	r3, #5
 800e2e4:	d838      	bhi.n	800e358 <UART_SetConfig+0x35c>
 800e2e6:	a201      	add	r2, pc, #4	; (adr r2, 800e2ec <UART_SetConfig+0x2f0>)
 800e2e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2ec:	0800e305 	.word	0x0800e305
 800e2f0:	0800e30d 	.word	0x0800e30d
 800e2f4:	0800e315 	.word	0x0800e315
 800e2f8:	0800e31d 	.word	0x0800e31d
 800e2fc:	0800e349 	.word	0x0800e349
 800e300:	0800e351 	.word	0x0800e351
 800e304:	2300      	movs	r3, #0
 800e306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e30a:	e24e      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e30c:	2304      	movs	r3, #4
 800e30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e312:	e24a      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e314:	2308      	movs	r3, #8
 800e316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e31a:	e246      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e31c:	2310      	movs	r3, #16
 800e31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e322:	e242      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e324:	cfff69f3 	.word	0xcfff69f3
 800e328:	58000c00 	.word	0x58000c00
 800e32c:	11fff4ff 	.word	0x11fff4ff
 800e330:	40011000 	.word	0x40011000
 800e334:	58024400 	.word	0x58024400
 800e338:	40004400 	.word	0x40004400
 800e33c:	40004800 	.word	0x40004800
 800e340:	40004c00 	.word	0x40004c00
 800e344:	40005000 	.word	0x40005000
 800e348:	2320      	movs	r3, #32
 800e34a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e34e:	e22c      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e350:	2340      	movs	r3, #64	; 0x40
 800e352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e356:	e228      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e358:	2380      	movs	r3, #128	; 0x80
 800e35a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e35e:	e224      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e360:	697b      	ldr	r3, [r7, #20]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	4ab1      	ldr	r2, [pc, #708]	; (800e62c <UART_SetConfig+0x630>)
 800e366:	4293      	cmp	r3, r2
 800e368:	d176      	bne.n	800e458 <UART_SetConfig+0x45c>
 800e36a:	4bb1      	ldr	r3, [pc, #708]	; (800e630 <UART_SetConfig+0x634>)
 800e36c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e36e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e372:	2b28      	cmp	r3, #40	; 0x28
 800e374:	d86c      	bhi.n	800e450 <UART_SetConfig+0x454>
 800e376:	a201      	add	r2, pc, #4	; (adr r2, 800e37c <UART_SetConfig+0x380>)
 800e378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e37c:	0800e421 	.word	0x0800e421
 800e380:	0800e451 	.word	0x0800e451
 800e384:	0800e451 	.word	0x0800e451
 800e388:	0800e451 	.word	0x0800e451
 800e38c:	0800e451 	.word	0x0800e451
 800e390:	0800e451 	.word	0x0800e451
 800e394:	0800e451 	.word	0x0800e451
 800e398:	0800e451 	.word	0x0800e451
 800e39c:	0800e429 	.word	0x0800e429
 800e3a0:	0800e451 	.word	0x0800e451
 800e3a4:	0800e451 	.word	0x0800e451
 800e3a8:	0800e451 	.word	0x0800e451
 800e3ac:	0800e451 	.word	0x0800e451
 800e3b0:	0800e451 	.word	0x0800e451
 800e3b4:	0800e451 	.word	0x0800e451
 800e3b8:	0800e451 	.word	0x0800e451
 800e3bc:	0800e431 	.word	0x0800e431
 800e3c0:	0800e451 	.word	0x0800e451
 800e3c4:	0800e451 	.word	0x0800e451
 800e3c8:	0800e451 	.word	0x0800e451
 800e3cc:	0800e451 	.word	0x0800e451
 800e3d0:	0800e451 	.word	0x0800e451
 800e3d4:	0800e451 	.word	0x0800e451
 800e3d8:	0800e451 	.word	0x0800e451
 800e3dc:	0800e439 	.word	0x0800e439
 800e3e0:	0800e451 	.word	0x0800e451
 800e3e4:	0800e451 	.word	0x0800e451
 800e3e8:	0800e451 	.word	0x0800e451
 800e3ec:	0800e451 	.word	0x0800e451
 800e3f0:	0800e451 	.word	0x0800e451
 800e3f4:	0800e451 	.word	0x0800e451
 800e3f8:	0800e451 	.word	0x0800e451
 800e3fc:	0800e441 	.word	0x0800e441
 800e400:	0800e451 	.word	0x0800e451
 800e404:	0800e451 	.word	0x0800e451
 800e408:	0800e451 	.word	0x0800e451
 800e40c:	0800e451 	.word	0x0800e451
 800e410:	0800e451 	.word	0x0800e451
 800e414:	0800e451 	.word	0x0800e451
 800e418:	0800e451 	.word	0x0800e451
 800e41c:	0800e449 	.word	0x0800e449
 800e420:	2301      	movs	r3, #1
 800e422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e426:	e1c0      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e428:	2304      	movs	r3, #4
 800e42a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e42e:	e1bc      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e430:	2308      	movs	r3, #8
 800e432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e436:	e1b8      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e438:	2310      	movs	r3, #16
 800e43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e43e:	e1b4      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e440:	2320      	movs	r3, #32
 800e442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e446:	e1b0      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e448:	2340      	movs	r3, #64	; 0x40
 800e44a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e44e:	e1ac      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e450:	2380      	movs	r3, #128	; 0x80
 800e452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e456:	e1a8      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e458:	697b      	ldr	r3, [r7, #20]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	4a75      	ldr	r2, [pc, #468]	; (800e634 <UART_SetConfig+0x638>)
 800e45e:	4293      	cmp	r3, r2
 800e460:	d130      	bne.n	800e4c4 <UART_SetConfig+0x4c8>
 800e462:	4b73      	ldr	r3, [pc, #460]	; (800e630 <UART_SetConfig+0x634>)
 800e464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e466:	f003 0307 	and.w	r3, r3, #7
 800e46a:	2b05      	cmp	r3, #5
 800e46c:	d826      	bhi.n	800e4bc <UART_SetConfig+0x4c0>
 800e46e:	a201      	add	r2, pc, #4	; (adr r2, 800e474 <UART_SetConfig+0x478>)
 800e470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e474:	0800e48d 	.word	0x0800e48d
 800e478:	0800e495 	.word	0x0800e495
 800e47c:	0800e49d 	.word	0x0800e49d
 800e480:	0800e4a5 	.word	0x0800e4a5
 800e484:	0800e4ad 	.word	0x0800e4ad
 800e488:	0800e4b5 	.word	0x0800e4b5
 800e48c:	2300      	movs	r3, #0
 800e48e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e492:	e18a      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e494:	2304      	movs	r3, #4
 800e496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e49a:	e186      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e49c:	2308      	movs	r3, #8
 800e49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4a2:	e182      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e4a4:	2310      	movs	r3, #16
 800e4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4aa:	e17e      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e4ac:	2320      	movs	r3, #32
 800e4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4b2:	e17a      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e4b4:	2340      	movs	r3, #64	; 0x40
 800e4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4ba:	e176      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e4bc:	2380      	movs	r3, #128	; 0x80
 800e4be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4c2:	e172      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e4c4:	697b      	ldr	r3, [r7, #20]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	4a5b      	ldr	r2, [pc, #364]	; (800e638 <UART_SetConfig+0x63c>)
 800e4ca:	4293      	cmp	r3, r2
 800e4cc:	d130      	bne.n	800e530 <UART_SetConfig+0x534>
 800e4ce:	4b58      	ldr	r3, [pc, #352]	; (800e630 <UART_SetConfig+0x634>)
 800e4d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4d2:	f003 0307 	and.w	r3, r3, #7
 800e4d6:	2b05      	cmp	r3, #5
 800e4d8:	d826      	bhi.n	800e528 <UART_SetConfig+0x52c>
 800e4da:	a201      	add	r2, pc, #4	; (adr r2, 800e4e0 <UART_SetConfig+0x4e4>)
 800e4dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4e0:	0800e4f9 	.word	0x0800e4f9
 800e4e4:	0800e501 	.word	0x0800e501
 800e4e8:	0800e509 	.word	0x0800e509
 800e4ec:	0800e511 	.word	0x0800e511
 800e4f0:	0800e519 	.word	0x0800e519
 800e4f4:	0800e521 	.word	0x0800e521
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4fe:	e154      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e500:	2304      	movs	r3, #4
 800e502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e506:	e150      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e508:	2308      	movs	r3, #8
 800e50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e50e:	e14c      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e510:	2310      	movs	r3, #16
 800e512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e516:	e148      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e518:	2320      	movs	r3, #32
 800e51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e51e:	e144      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e520:	2340      	movs	r3, #64	; 0x40
 800e522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e526:	e140      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e528:	2380      	movs	r3, #128	; 0x80
 800e52a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e52e:	e13c      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e530:	697b      	ldr	r3, [r7, #20]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	4a41      	ldr	r2, [pc, #260]	; (800e63c <UART_SetConfig+0x640>)
 800e536:	4293      	cmp	r3, r2
 800e538:	f040 8082 	bne.w	800e640 <UART_SetConfig+0x644>
 800e53c:	4b3c      	ldr	r3, [pc, #240]	; (800e630 <UART_SetConfig+0x634>)
 800e53e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e540:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e544:	2b28      	cmp	r3, #40	; 0x28
 800e546:	d86d      	bhi.n	800e624 <UART_SetConfig+0x628>
 800e548:	a201      	add	r2, pc, #4	; (adr r2, 800e550 <UART_SetConfig+0x554>)
 800e54a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e54e:	bf00      	nop
 800e550:	0800e5f5 	.word	0x0800e5f5
 800e554:	0800e625 	.word	0x0800e625
 800e558:	0800e625 	.word	0x0800e625
 800e55c:	0800e625 	.word	0x0800e625
 800e560:	0800e625 	.word	0x0800e625
 800e564:	0800e625 	.word	0x0800e625
 800e568:	0800e625 	.word	0x0800e625
 800e56c:	0800e625 	.word	0x0800e625
 800e570:	0800e5fd 	.word	0x0800e5fd
 800e574:	0800e625 	.word	0x0800e625
 800e578:	0800e625 	.word	0x0800e625
 800e57c:	0800e625 	.word	0x0800e625
 800e580:	0800e625 	.word	0x0800e625
 800e584:	0800e625 	.word	0x0800e625
 800e588:	0800e625 	.word	0x0800e625
 800e58c:	0800e625 	.word	0x0800e625
 800e590:	0800e605 	.word	0x0800e605
 800e594:	0800e625 	.word	0x0800e625
 800e598:	0800e625 	.word	0x0800e625
 800e59c:	0800e625 	.word	0x0800e625
 800e5a0:	0800e625 	.word	0x0800e625
 800e5a4:	0800e625 	.word	0x0800e625
 800e5a8:	0800e625 	.word	0x0800e625
 800e5ac:	0800e625 	.word	0x0800e625
 800e5b0:	0800e60d 	.word	0x0800e60d
 800e5b4:	0800e625 	.word	0x0800e625
 800e5b8:	0800e625 	.word	0x0800e625
 800e5bc:	0800e625 	.word	0x0800e625
 800e5c0:	0800e625 	.word	0x0800e625
 800e5c4:	0800e625 	.word	0x0800e625
 800e5c8:	0800e625 	.word	0x0800e625
 800e5cc:	0800e625 	.word	0x0800e625
 800e5d0:	0800e615 	.word	0x0800e615
 800e5d4:	0800e625 	.word	0x0800e625
 800e5d8:	0800e625 	.word	0x0800e625
 800e5dc:	0800e625 	.word	0x0800e625
 800e5e0:	0800e625 	.word	0x0800e625
 800e5e4:	0800e625 	.word	0x0800e625
 800e5e8:	0800e625 	.word	0x0800e625
 800e5ec:	0800e625 	.word	0x0800e625
 800e5f0:	0800e61d 	.word	0x0800e61d
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5fa:	e0d6      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e5fc:	2304      	movs	r3, #4
 800e5fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e602:	e0d2      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e604:	2308      	movs	r3, #8
 800e606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e60a:	e0ce      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e60c:	2310      	movs	r3, #16
 800e60e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e612:	e0ca      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e614:	2320      	movs	r3, #32
 800e616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e61a:	e0c6      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e61c:	2340      	movs	r3, #64	; 0x40
 800e61e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e622:	e0c2      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e624:	2380      	movs	r3, #128	; 0x80
 800e626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e62a:	e0be      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e62c:	40011400 	.word	0x40011400
 800e630:	58024400 	.word	0x58024400
 800e634:	40007800 	.word	0x40007800
 800e638:	40007c00 	.word	0x40007c00
 800e63c:	40011800 	.word	0x40011800
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	4aad      	ldr	r2, [pc, #692]	; (800e8fc <UART_SetConfig+0x900>)
 800e646:	4293      	cmp	r3, r2
 800e648:	d176      	bne.n	800e738 <UART_SetConfig+0x73c>
 800e64a:	4bad      	ldr	r3, [pc, #692]	; (800e900 <UART_SetConfig+0x904>)
 800e64c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e64e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e652:	2b28      	cmp	r3, #40	; 0x28
 800e654:	d86c      	bhi.n	800e730 <UART_SetConfig+0x734>
 800e656:	a201      	add	r2, pc, #4	; (adr r2, 800e65c <UART_SetConfig+0x660>)
 800e658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e65c:	0800e701 	.word	0x0800e701
 800e660:	0800e731 	.word	0x0800e731
 800e664:	0800e731 	.word	0x0800e731
 800e668:	0800e731 	.word	0x0800e731
 800e66c:	0800e731 	.word	0x0800e731
 800e670:	0800e731 	.word	0x0800e731
 800e674:	0800e731 	.word	0x0800e731
 800e678:	0800e731 	.word	0x0800e731
 800e67c:	0800e709 	.word	0x0800e709
 800e680:	0800e731 	.word	0x0800e731
 800e684:	0800e731 	.word	0x0800e731
 800e688:	0800e731 	.word	0x0800e731
 800e68c:	0800e731 	.word	0x0800e731
 800e690:	0800e731 	.word	0x0800e731
 800e694:	0800e731 	.word	0x0800e731
 800e698:	0800e731 	.word	0x0800e731
 800e69c:	0800e711 	.word	0x0800e711
 800e6a0:	0800e731 	.word	0x0800e731
 800e6a4:	0800e731 	.word	0x0800e731
 800e6a8:	0800e731 	.word	0x0800e731
 800e6ac:	0800e731 	.word	0x0800e731
 800e6b0:	0800e731 	.word	0x0800e731
 800e6b4:	0800e731 	.word	0x0800e731
 800e6b8:	0800e731 	.word	0x0800e731
 800e6bc:	0800e719 	.word	0x0800e719
 800e6c0:	0800e731 	.word	0x0800e731
 800e6c4:	0800e731 	.word	0x0800e731
 800e6c8:	0800e731 	.word	0x0800e731
 800e6cc:	0800e731 	.word	0x0800e731
 800e6d0:	0800e731 	.word	0x0800e731
 800e6d4:	0800e731 	.word	0x0800e731
 800e6d8:	0800e731 	.word	0x0800e731
 800e6dc:	0800e721 	.word	0x0800e721
 800e6e0:	0800e731 	.word	0x0800e731
 800e6e4:	0800e731 	.word	0x0800e731
 800e6e8:	0800e731 	.word	0x0800e731
 800e6ec:	0800e731 	.word	0x0800e731
 800e6f0:	0800e731 	.word	0x0800e731
 800e6f4:	0800e731 	.word	0x0800e731
 800e6f8:	0800e731 	.word	0x0800e731
 800e6fc:	0800e729 	.word	0x0800e729
 800e700:	2301      	movs	r3, #1
 800e702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e706:	e050      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e708:	2304      	movs	r3, #4
 800e70a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e70e:	e04c      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e710:	2308      	movs	r3, #8
 800e712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e716:	e048      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e718:	2310      	movs	r3, #16
 800e71a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e71e:	e044      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e720:	2320      	movs	r3, #32
 800e722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e726:	e040      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e728:	2340      	movs	r3, #64	; 0x40
 800e72a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e72e:	e03c      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e730:	2380      	movs	r3, #128	; 0x80
 800e732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e736:	e038      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e738:	697b      	ldr	r3, [r7, #20]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	4a71      	ldr	r2, [pc, #452]	; (800e904 <UART_SetConfig+0x908>)
 800e73e:	4293      	cmp	r3, r2
 800e740:	d130      	bne.n	800e7a4 <UART_SetConfig+0x7a8>
 800e742:	4b6f      	ldr	r3, [pc, #444]	; (800e900 <UART_SetConfig+0x904>)
 800e744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e746:	f003 0307 	and.w	r3, r3, #7
 800e74a:	2b05      	cmp	r3, #5
 800e74c:	d826      	bhi.n	800e79c <UART_SetConfig+0x7a0>
 800e74e:	a201      	add	r2, pc, #4	; (adr r2, 800e754 <UART_SetConfig+0x758>)
 800e750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e754:	0800e76d 	.word	0x0800e76d
 800e758:	0800e775 	.word	0x0800e775
 800e75c:	0800e77d 	.word	0x0800e77d
 800e760:	0800e785 	.word	0x0800e785
 800e764:	0800e78d 	.word	0x0800e78d
 800e768:	0800e795 	.word	0x0800e795
 800e76c:	2302      	movs	r3, #2
 800e76e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e772:	e01a      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e774:	2304      	movs	r3, #4
 800e776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e77a:	e016      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e77c:	2308      	movs	r3, #8
 800e77e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e782:	e012      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e784:	2310      	movs	r3, #16
 800e786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e78a:	e00e      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e78c:	2320      	movs	r3, #32
 800e78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e792:	e00a      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e794:	2340      	movs	r3, #64	; 0x40
 800e796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e79a:	e006      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e79c:	2380      	movs	r3, #128	; 0x80
 800e79e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7a2:	e002      	b.n	800e7aa <UART_SetConfig+0x7ae>
 800e7a4:	2380      	movs	r3, #128	; 0x80
 800e7a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e7aa:	697b      	ldr	r3, [r7, #20]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	4a55      	ldr	r2, [pc, #340]	; (800e904 <UART_SetConfig+0x908>)
 800e7b0:	4293      	cmp	r3, r2
 800e7b2:	f040 80f8 	bne.w	800e9a6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e7b6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e7ba:	2b20      	cmp	r3, #32
 800e7bc:	dc46      	bgt.n	800e84c <UART_SetConfig+0x850>
 800e7be:	2b02      	cmp	r3, #2
 800e7c0:	db75      	blt.n	800e8ae <UART_SetConfig+0x8b2>
 800e7c2:	3b02      	subs	r3, #2
 800e7c4:	2b1e      	cmp	r3, #30
 800e7c6:	d872      	bhi.n	800e8ae <UART_SetConfig+0x8b2>
 800e7c8:	a201      	add	r2, pc, #4	; (adr r2, 800e7d0 <UART_SetConfig+0x7d4>)
 800e7ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7ce:	bf00      	nop
 800e7d0:	0800e853 	.word	0x0800e853
 800e7d4:	0800e8af 	.word	0x0800e8af
 800e7d8:	0800e85b 	.word	0x0800e85b
 800e7dc:	0800e8af 	.word	0x0800e8af
 800e7e0:	0800e8af 	.word	0x0800e8af
 800e7e4:	0800e8af 	.word	0x0800e8af
 800e7e8:	0800e86b 	.word	0x0800e86b
 800e7ec:	0800e8af 	.word	0x0800e8af
 800e7f0:	0800e8af 	.word	0x0800e8af
 800e7f4:	0800e8af 	.word	0x0800e8af
 800e7f8:	0800e8af 	.word	0x0800e8af
 800e7fc:	0800e8af 	.word	0x0800e8af
 800e800:	0800e8af 	.word	0x0800e8af
 800e804:	0800e8af 	.word	0x0800e8af
 800e808:	0800e87b 	.word	0x0800e87b
 800e80c:	0800e8af 	.word	0x0800e8af
 800e810:	0800e8af 	.word	0x0800e8af
 800e814:	0800e8af 	.word	0x0800e8af
 800e818:	0800e8af 	.word	0x0800e8af
 800e81c:	0800e8af 	.word	0x0800e8af
 800e820:	0800e8af 	.word	0x0800e8af
 800e824:	0800e8af 	.word	0x0800e8af
 800e828:	0800e8af 	.word	0x0800e8af
 800e82c:	0800e8af 	.word	0x0800e8af
 800e830:	0800e8af 	.word	0x0800e8af
 800e834:	0800e8af 	.word	0x0800e8af
 800e838:	0800e8af 	.word	0x0800e8af
 800e83c:	0800e8af 	.word	0x0800e8af
 800e840:	0800e8af 	.word	0x0800e8af
 800e844:	0800e8af 	.word	0x0800e8af
 800e848:	0800e8a1 	.word	0x0800e8a1
 800e84c:	2b40      	cmp	r3, #64	; 0x40
 800e84e:	d02a      	beq.n	800e8a6 <UART_SetConfig+0x8aa>
 800e850:	e02d      	b.n	800e8ae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e852:	f7fe f879 	bl	800c948 <HAL_RCCEx_GetD3PCLK1Freq>
 800e856:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e858:	e02f      	b.n	800e8ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e85a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e85e:	4618      	mov	r0, r3
 800e860:	f7fe f888 	bl	800c974 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e866:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e868:	e027      	b.n	800e8ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e86a:	f107 0318 	add.w	r3, r7, #24
 800e86e:	4618      	mov	r0, r3
 800e870:	f7fe f9d4 	bl	800cc1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e874:	69fb      	ldr	r3, [r7, #28]
 800e876:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e878:	e01f      	b.n	800e8ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e87a:	4b21      	ldr	r3, [pc, #132]	; (800e900 <UART_SetConfig+0x904>)
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	f003 0320 	and.w	r3, r3, #32
 800e882:	2b00      	cmp	r3, #0
 800e884:	d009      	beq.n	800e89a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e886:	4b1e      	ldr	r3, [pc, #120]	; (800e900 <UART_SetConfig+0x904>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	08db      	lsrs	r3, r3, #3
 800e88c:	f003 0303 	and.w	r3, r3, #3
 800e890:	4a1d      	ldr	r2, [pc, #116]	; (800e908 <UART_SetConfig+0x90c>)
 800e892:	fa22 f303 	lsr.w	r3, r2, r3
 800e896:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e898:	e00f      	b.n	800e8ba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e89a:	4b1b      	ldr	r3, [pc, #108]	; (800e908 <UART_SetConfig+0x90c>)
 800e89c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e89e:	e00c      	b.n	800e8ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e8a0:	4b1a      	ldr	r3, [pc, #104]	; (800e90c <UART_SetConfig+0x910>)
 800e8a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8a4:	e009      	b.n	800e8ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e8a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8ac:	e005      	b.n	800e8ba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e8b2:	2301      	movs	r3, #1
 800e8b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e8b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e8ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	f000 81ee 	beq.w	800ec9e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e8c2:	697b      	ldr	r3, [r7, #20]
 800e8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8c6:	4a12      	ldr	r2, [pc, #72]	; (800e910 <UART_SetConfig+0x914>)
 800e8c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e8cc:	461a      	mov	r2, r3
 800e8ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800e8d4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	685a      	ldr	r2, [r3, #4]
 800e8da:	4613      	mov	r3, r2
 800e8dc:	005b      	lsls	r3, r3, #1
 800e8de:	4413      	add	r3, r2
 800e8e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8e2:	429a      	cmp	r2, r3
 800e8e4:	d305      	bcc.n	800e8f2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e8e6:	697b      	ldr	r3, [r7, #20]
 800e8e8:	685b      	ldr	r3, [r3, #4]
 800e8ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e8ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8ee:	429a      	cmp	r2, r3
 800e8f0:	d910      	bls.n	800e914 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800e8f2:	2301      	movs	r3, #1
 800e8f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e8f8:	e1d1      	b.n	800ec9e <UART_SetConfig+0xca2>
 800e8fa:	bf00      	nop
 800e8fc:	40011c00 	.word	0x40011c00
 800e900:	58024400 	.word	0x58024400
 800e904:	58000c00 	.word	0x58000c00
 800e908:	03d09000 	.word	0x03d09000
 800e90c:	003d0900 	.word	0x003d0900
 800e910:	080104b8 	.word	0x080104b8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e916:	2200      	movs	r2, #0
 800e918:	60bb      	str	r3, [r7, #8]
 800e91a:	60fa      	str	r2, [r7, #12]
 800e91c:	697b      	ldr	r3, [r7, #20]
 800e91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e920:	4ac0      	ldr	r2, [pc, #768]	; (800ec24 <UART_SetConfig+0xc28>)
 800e922:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e926:	b29b      	uxth	r3, r3
 800e928:	2200      	movs	r2, #0
 800e92a:	603b      	str	r3, [r7, #0]
 800e92c:	607a      	str	r2, [r7, #4]
 800e92e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e932:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e936:	f7f1 fcd9 	bl	80002ec <__aeabi_uldivmod>
 800e93a:	4602      	mov	r2, r0
 800e93c:	460b      	mov	r3, r1
 800e93e:	4610      	mov	r0, r2
 800e940:	4619      	mov	r1, r3
 800e942:	f04f 0200 	mov.w	r2, #0
 800e946:	f04f 0300 	mov.w	r3, #0
 800e94a:	020b      	lsls	r3, r1, #8
 800e94c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e950:	0202      	lsls	r2, r0, #8
 800e952:	6979      	ldr	r1, [r7, #20]
 800e954:	6849      	ldr	r1, [r1, #4]
 800e956:	0849      	lsrs	r1, r1, #1
 800e958:	2000      	movs	r0, #0
 800e95a:	460c      	mov	r4, r1
 800e95c:	4605      	mov	r5, r0
 800e95e:	eb12 0804 	adds.w	r8, r2, r4
 800e962:	eb43 0905 	adc.w	r9, r3, r5
 800e966:	697b      	ldr	r3, [r7, #20]
 800e968:	685b      	ldr	r3, [r3, #4]
 800e96a:	2200      	movs	r2, #0
 800e96c:	469a      	mov	sl, r3
 800e96e:	4693      	mov	fp, r2
 800e970:	4652      	mov	r2, sl
 800e972:	465b      	mov	r3, fp
 800e974:	4640      	mov	r0, r8
 800e976:	4649      	mov	r1, r9
 800e978:	f7f1 fcb8 	bl	80002ec <__aeabi_uldivmod>
 800e97c:	4602      	mov	r2, r0
 800e97e:	460b      	mov	r3, r1
 800e980:	4613      	mov	r3, r2
 800e982:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e986:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e98a:	d308      	bcc.n	800e99e <UART_SetConfig+0x9a2>
 800e98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e98e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e992:	d204      	bcs.n	800e99e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800e994:	697b      	ldr	r3, [r7, #20]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e99a:	60da      	str	r2, [r3, #12]
 800e99c:	e17f      	b.n	800ec9e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800e99e:	2301      	movs	r3, #1
 800e9a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e9a4:	e17b      	b.n	800ec9e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e9a6:	697b      	ldr	r3, [r7, #20]
 800e9a8:	69db      	ldr	r3, [r3, #28]
 800e9aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e9ae:	f040 80bd 	bne.w	800eb2c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800e9b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e9b6:	2b20      	cmp	r3, #32
 800e9b8:	dc48      	bgt.n	800ea4c <UART_SetConfig+0xa50>
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	db7b      	blt.n	800eab6 <UART_SetConfig+0xaba>
 800e9be:	2b20      	cmp	r3, #32
 800e9c0:	d879      	bhi.n	800eab6 <UART_SetConfig+0xaba>
 800e9c2:	a201      	add	r2, pc, #4	; (adr r2, 800e9c8 <UART_SetConfig+0x9cc>)
 800e9c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9c8:	0800ea53 	.word	0x0800ea53
 800e9cc:	0800ea5b 	.word	0x0800ea5b
 800e9d0:	0800eab7 	.word	0x0800eab7
 800e9d4:	0800eab7 	.word	0x0800eab7
 800e9d8:	0800ea63 	.word	0x0800ea63
 800e9dc:	0800eab7 	.word	0x0800eab7
 800e9e0:	0800eab7 	.word	0x0800eab7
 800e9e4:	0800eab7 	.word	0x0800eab7
 800e9e8:	0800ea73 	.word	0x0800ea73
 800e9ec:	0800eab7 	.word	0x0800eab7
 800e9f0:	0800eab7 	.word	0x0800eab7
 800e9f4:	0800eab7 	.word	0x0800eab7
 800e9f8:	0800eab7 	.word	0x0800eab7
 800e9fc:	0800eab7 	.word	0x0800eab7
 800ea00:	0800eab7 	.word	0x0800eab7
 800ea04:	0800eab7 	.word	0x0800eab7
 800ea08:	0800ea83 	.word	0x0800ea83
 800ea0c:	0800eab7 	.word	0x0800eab7
 800ea10:	0800eab7 	.word	0x0800eab7
 800ea14:	0800eab7 	.word	0x0800eab7
 800ea18:	0800eab7 	.word	0x0800eab7
 800ea1c:	0800eab7 	.word	0x0800eab7
 800ea20:	0800eab7 	.word	0x0800eab7
 800ea24:	0800eab7 	.word	0x0800eab7
 800ea28:	0800eab7 	.word	0x0800eab7
 800ea2c:	0800eab7 	.word	0x0800eab7
 800ea30:	0800eab7 	.word	0x0800eab7
 800ea34:	0800eab7 	.word	0x0800eab7
 800ea38:	0800eab7 	.word	0x0800eab7
 800ea3c:	0800eab7 	.word	0x0800eab7
 800ea40:	0800eab7 	.word	0x0800eab7
 800ea44:	0800eab7 	.word	0x0800eab7
 800ea48:	0800eaa9 	.word	0x0800eaa9
 800ea4c:	2b40      	cmp	r3, #64	; 0x40
 800ea4e:	d02e      	beq.n	800eaae <UART_SetConfig+0xab2>
 800ea50:	e031      	b.n	800eab6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ea52:	f7fc fd8f 	bl	800b574 <HAL_RCC_GetPCLK1Freq>
 800ea56:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ea58:	e033      	b.n	800eac2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ea5a:	f7fc fda1 	bl	800b5a0 <HAL_RCC_GetPCLK2Freq>
 800ea5e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ea60:	e02f      	b.n	800eac2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ea62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ea66:	4618      	mov	r0, r3
 800ea68:	f7fd ff84 	bl	800c974 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ea6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea70:	e027      	b.n	800eac2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ea72:	f107 0318 	add.w	r3, r7, #24
 800ea76:	4618      	mov	r0, r3
 800ea78:	f7fe f8d0 	bl	800cc1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ea7c:	69fb      	ldr	r3, [r7, #28]
 800ea7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea80:	e01f      	b.n	800eac2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ea82:	4b69      	ldr	r3, [pc, #420]	; (800ec28 <UART_SetConfig+0xc2c>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	f003 0320 	and.w	r3, r3, #32
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d009      	beq.n	800eaa2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ea8e:	4b66      	ldr	r3, [pc, #408]	; (800ec28 <UART_SetConfig+0xc2c>)
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	08db      	lsrs	r3, r3, #3
 800ea94:	f003 0303 	and.w	r3, r3, #3
 800ea98:	4a64      	ldr	r2, [pc, #400]	; (800ec2c <UART_SetConfig+0xc30>)
 800ea9a:	fa22 f303 	lsr.w	r3, r2, r3
 800ea9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800eaa0:	e00f      	b.n	800eac2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800eaa2:	4b62      	ldr	r3, [pc, #392]	; (800ec2c <UART_SetConfig+0xc30>)
 800eaa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eaa6:	e00c      	b.n	800eac2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800eaa8:	4b61      	ldr	r3, [pc, #388]	; (800ec30 <UART_SetConfig+0xc34>)
 800eaaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eaac:	e009      	b.n	800eac2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eaae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eab2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eab4:	e005      	b.n	800eac2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800eab6:	2300      	movs	r3, #0
 800eab8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800eaba:	2301      	movs	r3, #1
 800eabc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800eac0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800eac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	f000 80ea 	beq.w	800ec9e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eaca:	697b      	ldr	r3, [r7, #20]
 800eacc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eace:	4a55      	ldr	r2, [pc, #340]	; (800ec24 <UART_SetConfig+0xc28>)
 800ead0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ead4:	461a      	mov	r2, r3
 800ead6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ead8:	fbb3 f3f2 	udiv	r3, r3, r2
 800eadc:	005a      	lsls	r2, r3, #1
 800eade:	697b      	ldr	r3, [r7, #20]
 800eae0:	685b      	ldr	r3, [r3, #4]
 800eae2:	085b      	lsrs	r3, r3, #1
 800eae4:	441a      	add	r2, r3
 800eae6:	697b      	ldr	r3, [r7, #20]
 800eae8:	685b      	ldr	r3, [r3, #4]
 800eaea:	fbb2 f3f3 	udiv	r3, r2, r3
 800eaee:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eaf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaf2:	2b0f      	cmp	r3, #15
 800eaf4:	d916      	bls.n	800eb24 <UART_SetConfig+0xb28>
 800eaf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eafc:	d212      	bcs.n	800eb24 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800eafe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb00:	b29b      	uxth	r3, r3
 800eb02:	f023 030f 	bic.w	r3, r3, #15
 800eb06:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800eb08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb0a:	085b      	lsrs	r3, r3, #1
 800eb0c:	b29b      	uxth	r3, r3
 800eb0e:	f003 0307 	and.w	r3, r3, #7
 800eb12:	b29a      	uxth	r2, r3
 800eb14:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800eb16:	4313      	orrs	r3, r2
 800eb18:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800eb1a:	697b      	ldr	r3, [r7, #20]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800eb20:	60da      	str	r2, [r3, #12]
 800eb22:	e0bc      	b.n	800ec9e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800eb24:	2301      	movs	r3, #1
 800eb26:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800eb2a:	e0b8      	b.n	800ec9e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800eb2c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800eb30:	2b20      	cmp	r3, #32
 800eb32:	dc4b      	bgt.n	800ebcc <UART_SetConfig+0xbd0>
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	f2c0 8087 	blt.w	800ec48 <UART_SetConfig+0xc4c>
 800eb3a:	2b20      	cmp	r3, #32
 800eb3c:	f200 8084 	bhi.w	800ec48 <UART_SetConfig+0xc4c>
 800eb40:	a201      	add	r2, pc, #4	; (adr r2, 800eb48 <UART_SetConfig+0xb4c>)
 800eb42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb46:	bf00      	nop
 800eb48:	0800ebd3 	.word	0x0800ebd3
 800eb4c:	0800ebdb 	.word	0x0800ebdb
 800eb50:	0800ec49 	.word	0x0800ec49
 800eb54:	0800ec49 	.word	0x0800ec49
 800eb58:	0800ebe3 	.word	0x0800ebe3
 800eb5c:	0800ec49 	.word	0x0800ec49
 800eb60:	0800ec49 	.word	0x0800ec49
 800eb64:	0800ec49 	.word	0x0800ec49
 800eb68:	0800ebf3 	.word	0x0800ebf3
 800eb6c:	0800ec49 	.word	0x0800ec49
 800eb70:	0800ec49 	.word	0x0800ec49
 800eb74:	0800ec49 	.word	0x0800ec49
 800eb78:	0800ec49 	.word	0x0800ec49
 800eb7c:	0800ec49 	.word	0x0800ec49
 800eb80:	0800ec49 	.word	0x0800ec49
 800eb84:	0800ec49 	.word	0x0800ec49
 800eb88:	0800ec03 	.word	0x0800ec03
 800eb8c:	0800ec49 	.word	0x0800ec49
 800eb90:	0800ec49 	.word	0x0800ec49
 800eb94:	0800ec49 	.word	0x0800ec49
 800eb98:	0800ec49 	.word	0x0800ec49
 800eb9c:	0800ec49 	.word	0x0800ec49
 800eba0:	0800ec49 	.word	0x0800ec49
 800eba4:	0800ec49 	.word	0x0800ec49
 800eba8:	0800ec49 	.word	0x0800ec49
 800ebac:	0800ec49 	.word	0x0800ec49
 800ebb0:	0800ec49 	.word	0x0800ec49
 800ebb4:	0800ec49 	.word	0x0800ec49
 800ebb8:	0800ec49 	.word	0x0800ec49
 800ebbc:	0800ec49 	.word	0x0800ec49
 800ebc0:	0800ec49 	.word	0x0800ec49
 800ebc4:	0800ec49 	.word	0x0800ec49
 800ebc8:	0800ec3b 	.word	0x0800ec3b
 800ebcc:	2b40      	cmp	r3, #64	; 0x40
 800ebce:	d037      	beq.n	800ec40 <UART_SetConfig+0xc44>
 800ebd0:	e03a      	b.n	800ec48 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ebd2:	f7fc fccf 	bl	800b574 <HAL_RCC_GetPCLK1Freq>
 800ebd6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ebd8:	e03c      	b.n	800ec54 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ebda:	f7fc fce1 	bl	800b5a0 <HAL_RCC_GetPCLK2Freq>
 800ebde:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ebe0:	e038      	b.n	800ec54 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ebe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f7fd fec4 	bl	800c974 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ebec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebf0:	e030      	b.n	800ec54 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ebf2:	f107 0318 	add.w	r3, r7, #24
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	f7fe f810 	bl	800cc1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ebfc:	69fb      	ldr	r3, [r7, #28]
 800ebfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec00:	e028      	b.n	800ec54 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ec02:	4b09      	ldr	r3, [pc, #36]	; (800ec28 <UART_SetConfig+0xc2c>)
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	f003 0320 	and.w	r3, r3, #32
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d012      	beq.n	800ec34 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ec0e:	4b06      	ldr	r3, [pc, #24]	; (800ec28 <UART_SetConfig+0xc2c>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	08db      	lsrs	r3, r3, #3
 800ec14:	f003 0303 	and.w	r3, r3, #3
 800ec18:	4a04      	ldr	r2, [pc, #16]	; (800ec2c <UART_SetConfig+0xc30>)
 800ec1a:	fa22 f303 	lsr.w	r3, r2, r3
 800ec1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ec20:	e018      	b.n	800ec54 <UART_SetConfig+0xc58>
 800ec22:	bf00      	nop
 800ec24:	080104b8 	.word	0x080104b8
 800ec28:	58024400 	.word	0x58024400
 800ec2c:	03d09000 	.word	0x03d09000
 800ec30:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800ec34:	4b24      	ldr	r3, [pc, #144]	; (800ecc8 <UART_SetConfig+0xccc>)
 800ec36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec38:	e00c      	b.n	800ec54 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ec3a:	4b24      	ldr	r3, [pc, #144]	; (800eccc <UART_SetConfig+0xcd0>)
 800ec3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec3e:	e009      	b.n	800ec54 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ec40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ec44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec46:	e005      	b.n	800ec54 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800ec48:	2300      	movs	r3, #0
 800ec4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ec52:	bf00      	nop
    }

    if (pclk != 0U)
 800ec54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d021      	beq.n	800ec9e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ec5a:	697b      	ldr	r3, [r7, #20]
 800ec5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec5e:	4a1c      	ldr	r2, [pc, #112]	; (800ecd0 <UART_SetConfig+0xcd4>)
 800ec60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ec64:	461a      	mov	r2, r3
 800ec66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec68:	fbb3 f2f2 	udiv	r2, r3, r2
 800ec6c:	697b      	ldr	r3, [r7, #20]
 800ec6e:	685b      	ldr	r3, [r3, #4]
 800ec70:	085b      	lsrs	r3, r3, #1
 800ec72:	441a      	add	r2, r3
 800ec74:	697b      	ldr	r3, [r7, #20]
 800ec76:	685b      	ldr	r3, [r3, #4]
 800ec78:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec7c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ec7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec80:	2b0f      	cmp	r3, #15
 800ec82:	d909      	bls.n	800ec98 <UART_SetConfig+0xc9c>
 800ec84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec8a:	d205      	bcs.n	800ec98 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ec8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec8e:	b29a      	uxth	r2, r3
 800ec90:	697b      	ldr	r3, [r7, #20]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	60da      	str	r2, [r3, #12]
 800ec96:	e002      	b.n	800ec9e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ec98:	2301      	movs	r3, #1
 800ec9a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ec9e:	697b      	ldr	r3, [r7, #20]
 800eca0:	2201      	movs	r2, #1
 800eca2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800eca6:	697b      	ldr	r3, [r7, #20]
 800eca8:	2201      	movs	r2, #1
 800ecaa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ecae:	697b      	ldr	r3, [r7, #20]
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ecb4:	697b      	ldr	r3, [r7, #20]
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ecba:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	3748      	adds	r7, #72	; 0x48
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ecc8:	03d09000 	.word	0x03d09000
 800eccc:	003d0900 	.word	0x003d0900
 800ecd0:	080104b8 	.word	0x080104b8

0800ecd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ecd4:	b480      	push	{r7}
 800ecd6:	b083      	sub	sp, #12
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ece0:	f003 0301 	and.w	r3, r3, #1
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d00a      	beq.n	800ecfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	685b      	ldr	r3, [r3, #4]
 800ecee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	430a      	orrs	r2, r1
 800ecfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed02:	f003 0302 	and.w	r3, r3, #2
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d00a      	beq.n	800ed20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	685b      	ldr	r3, [r3, #4]
 800ed10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	430a      	orrs	r2, r1
 800ed1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed24:	f003 0304 	and.w	r3, r3, #4
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d00a      	beq.n	800ed42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	685b      	ldr	r3, [r3, #4]
 800ed32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	430a      	orrs	r2, r1
 800ed40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed46:	f003 0308 	and.w	r3, r3, #8
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d00a      	beq.n	800ed64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	685b      	ldr	r3, [r3, #4]
 800ed54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	430a      	orrs	r2, r1
 800ed62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed68:	f003 0310 	and.w	r3, r3, #16
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d00a      	beq.n	800ed86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	689b      	ldr	r3, [r3, #8]
 800ed76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	430a      	orrs	r2, r1
 800ed84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed8a:	f003 0320 	and.w	r3, r3, #32
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d00a      	beq.n	800eda8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	689b      	ldr	r3, [r3, #8]
 800ed98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	430a      	orrs	r2, r1
 800eda6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d01a      	beq.n	800edea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	685b      	ldr	r3, [r3, #4]
 800edba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	430a      	orrs	r2, r1
 800edc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800edd2:	d10a      	bne.n	800edea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	685b      	ldr	r3, [r3, #4]
 800edda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	430a      	orrs	r2, r1
 800ede8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d00a      	beq.n	800ee0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	685b      	ldr	r3, [r3, #4]
 800edfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	430a      	orrs	r2, r1
 800ee0a:	605a      	str	r2, [r3, #4]
  }
}
 800ee0c:	bf00      	nop
 800ee0e:	370c      	adds	r7, #12
 800ee10:	46bd      	mov	sp, r7
 800ee12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee16:	4770      	bx	lr

0800ee18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b098      	sub	sp, #96	; 0x60
 800ee1c:	af02      	add	r7, sp, #8
 800ee1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2200      	movs	r2, #0
 800ee24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ee28:	f7f5 fb00 	bl	800442c <HAL_GetTick>
 800ee2c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	f003 0308 	and.w	r3, r3, #8
 800ee38:	2b08      	cmp	r3, #8
 800ee3a:	d12f      	bne.n	800ee9c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ee3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ee40:	9300      	str	r3, [sp, #0]
 800ee42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee44:	2200      	movs	r2, #0
 800ee46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ee4a:	6878      	ldr	r0, [r7, #4]
 800ee4c:	f000 f88e 	bl	800ef6c <UART_WaitOnFlagUntilTimeout>
 800ee50:	4603      	mov	r3, r0
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d022      	beq.n	800ee9c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee5e:	e853 3f00 	ldrex	r3, [r3]
 800ee62:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ee64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ee6a:	653b      	str	r3, [r7, #80]	; 0x50
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	461a      	mov	r2, r3
 800ee72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee74:	647b      	str	r3, [r7, #68]	; 0x44
 800ee76:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee78:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ee7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ee7c:	e841 2300 	strex	r3, r2, [r1]
 800ee80:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ee82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d1e6      	bne.n	800ee56 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2220      	movs	r2, #32
 800ee8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	2200      	movs	r2, #0
 800ee94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ee98:	2303      	movs	r3, #3
 800ee9a:	e063      	b.n	800ef64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	f003 0304 	and.w	r3, r3, #4
 800eea6:	2b04      	cmp	r3, #4
 800eea8:	d149      	bne.n	800ef3e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eeaa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eeae:	9300      	str	r3, [sp, #0]
 800eeb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800eeb8:	6878      	ldr	r0, [r7, #4]
 800eeba:	f000 f857 	bl	800ef6c <UART_WaitOnFlagUntilTimeout>
 800eebe:	4603      	mov	r3, r0
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d03c      	beq.n	800ef3e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eeca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eecc:	e853 3f00 	ldrex	r3, [r3]
 800eed0:	623b      	str	r3, [r7, #32]
   return(result);
 800eed2:	6a3b      	ldr	r3, [r7, #32]
 800eed4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eed8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	461a      	mov	r2, r3
 800eee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eee2:	633b      	str	r3, [r7, #48]	; 0x30
 800eee4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eee6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eeea:	e841 2300 	strex	r3, r2, [r1]
 800eeee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800eef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d1e6      	bne.n	800eec4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	3308      	adds	r3, #8
 800eefc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eefe:	693b      	ldr	r3, [r7, #16]
 800ef00:	e853 3f00 	ldrex	r3, [r3]
 800ef04:	60fb      	str	r3, [r7, #12]
   return(result);
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	f023 0301 	bic.w	r3, r3, #1
 800ef0c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	3308      	adds	r3, #8
 800ef14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef16:	61fa      	str	r2, [r7, #28]
 800ef18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef1a:	69b9      	ldr	r1, [r7, #24]
 800ef1c:	69fa      	ldr	r2, [r7, #28]
 800ef1e:	e841 2300 	strex	r3, r2, [r1]
 800ef22:	617b      	str	r3, [r7, #20]
   return(result);
 800ef24:	697b      	ldr	r3, [r7, #20]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d1e5      	bne.n	800eef6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	2220      	movs	r2, #32
 800ef2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	2200      	movs	r2, #0
 800ef36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ef3a:	2303      	movs	r3, #3
 800ef3c:	e012      	b.n	800ef64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	2220      	movs	r2, #32
 800ef42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2220      	movs	r2, #32
 800ef4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	2200      	movs	r2, #0
 800ef52:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2200      	movs	r2, #0
 800ef58:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ef62:	2300      	movs	r3, #0
}
 800ef64:	4618      	mov	r0, r3
 800ef66:	3758      	adds	r7, #88	; 0x58
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	bd80      	pop	{r7, pc}

0800ef6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b084      	sub	sp, #16
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	60f8      	str	r0, [r7, #12]
 800ef74:	60b9      	str	r1, [r7, #8]
 800ef76:	603b      	str	r3, [r7, #0]
 800ef78:	4613      	mov	r3, r2
 800ef7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ef7c:	e049      	b.n	800f012 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ef7e:	69bb      	ldr	r3, [r7, #24]
 800ef80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef84:	d045      	beq.n	800f012 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ef86:	f7f5 fa51 	bl	800442c <HAL_GetTick>
 800ef8a:	4602      	mov	r2, r0
 800ef8c:	683b      	ldr	r3, [r7, #0]
 800ef8e:	1ad3      	subs	r3, r2, r3
 800ef90:	69ba      	ldr	r2, [r7, #24]
 800ef92:	429a      	cmp	r2, r3
 800ef94:	d302      	bcc.n	800ef9c <UART_WaitOnFlagUntilTimeout+0x30>
 800ef96:	69bb      	ldr	r3, [r7, #24]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d101      	bne.n	800efa0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ef9c:	2303      	movs	r3, #3
 800ef9e:	e048      	b.n	800f032 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	f003 0304 	and.w	r3, r3, #4
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d031      	beq.n	800f012 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	69db      	ldr	r3, [r3, #28]
 800efb4:	f003 0308 	and.w	r3, r3, #8
 800efb8:	2b08      	cmp	r3, #8
 800efba:	d110      	bne.n	800efde <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	2208      	movs	r2, #8
 800efc2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800efc4:	68f8      	ldr	r0, [r7, #12]
 800efc6:	f000 f839 	bl	800f03c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	2208      	movs	r2, #8
 800efce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	2200      	movs	r2, #0
 800efd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800efda:	2301      	movs	r3, #1
 800efdc:	e029      	b.n	800f032 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	69db      	ldr	r3, [r3, #28]
 800efe4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800efe8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800efec:	d111      	bne.n	800f012 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eff6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800eff8:	68f8      	ldr	r0, [r7, #12]
 800effa:	f000 f81f 	bl	800f03c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	2220      	movs	r2, #32
 800f002:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	2200      	movs	r2, #0
 800f00a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f00e:	2303      	movs	r3, #3
 800f010:	e00f      	b.n	800f032 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	69da      	ldr	r2, [r3, #28]
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	4013      	ands	r3, r2
 800f01c:	68ba      	ldr	r2, [r7, #8]
 800f01e:	429a      	cmp	r2, r3
 800f020:	bf0c      	ite	eq
 800f022:	2301      	moveq	r3, #1
 800f024:	2300      	movne	r3, #0
 800f026:	b2db      	uxtb	r3, r3
 800f028:	461a      	mov	r2, r3
 800f02a:	79fb      	ldrb	r3, [r7, #7]
 800f02c:	429a      	cmp	r2, r3
 800f02e:	d0a6      	beq.n	800ef7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f030:	2300      	movs	r3, #0
}
 800f032:	4618      	mov	r0, r3
 800f034:	3710      	adds	r7, #16
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}
	...

0800f03c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f03c:	b480      	push	{r7}
 800f03e:	b095      	sub	sp, #84	; 0x54
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f04a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f04c:	e853 3f00 	ldrex	r3, [r3]
 800f050:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f054:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f058:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	461a      	mov	r2, r3
 800f060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f062:	643b      	str	r3, [r7, #64]	; 0x40
 800f064:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f066:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f068:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f06a:	e841 2300 	strex	r3, r2, [r1]
 800f06e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f072:	2b00      	cmp	r3, #0
 800f074:	d1e6      	bne.n	800f044 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	3308      	adds	r3, #8
 800f07c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f07e:	6a3b      	ldr	r3, [r7, #32]
 800f080:	e853 3f00 	ldrex	r3, [r3]
 800f084:	61fb      	str	r3, [r7, #28]
   return(result);
 800f086:	69fa      	ldr	r2, [r7, #28]
 800f088:	4b1e      	ldr	r3, [pc, #120]	; (800f104 <UART_EndRxTransfer+0xc8>)
 800f08a:	4013      	ands	r3, r2
 800f08c:	64bb      	str	r3, [r7, #72]	; 0x48
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	3308      	adds	r3, #8
 800f094:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f096:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f098:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f09a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f09c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f09e:	e841 2300 	strex	r3, r2, [r1]
 800f0a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d1e5      	bne.n	800f076 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0ae:	2b01      	cmp	r3, #1
 800f0b0:	d118      	bne.n	800f0e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	e853 3f00 	ldrex	r3, [r3]
 800f0be:	60bb      	str	r3, [r7, #8]
   return(result);
 800f0c0:	68bb      	ldr	r3, [r7, #8]
 800f0c2:	f023 0310 	bic.w	r3, r3, #16
 800f0c6:	647b      	str	r3, [r7, #68]	; 0x44
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	461a      	mov	r2, r3
 800f0ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0d0:	61bb      	str	r3, [r7, #24]
 800f0d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0d4:	6979      	ldr	r1, [r7, #20]
 800f0d6:	69ba      	ldr	r2, [r7, #24]
 800f0d8:	e841 2300 	strex	r3, r2, [r1]
 800f0dc:	613b      	str	r3, [r7, #16]
   return(result);
 800f0de:	693b      	ldr	r3, [r7, #16]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d1e6      	bne.n	800f0b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	2220      	movs	r2, #32
 800f0e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f0f8:	bf00      	nop
 800f0fa:	3754      	adds	r7, #84	; 0x54
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f102:	4770      	bx	lr
 800f104:	effffffe 	.word	0xeffffffe

0800f108 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b084      	sub	sp, #16
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f114:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	2200      	movs	r2, #0
 800f11a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	2200      	movs	r2, #0
 800f122:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f126:	68f8      	ldr	r0, [r7, #12]
 800f128:	f7fe ff52 	bl	800dfd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f12c:	bf00      	nop
 800f12e:	3710      	adds	r7, #16
 800f130:	46bd      	mov	sp, r7
 800f132:	bd80      	pop	{r7, pc}

0800f134 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b088      	sub	sp, #32
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	e853 3f00 	ldrex	r3, [r3]
 800f148:	60bb      	str	r3, [r7, #8]
   return(result);
 800f14a:	68bb      	ldr	r3, [r7, #8]
 800f14c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f150:	61fb      	str	r3, [r7, #28]
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	461a      	mov	r2, r3
 800f158:	69fb      	ldr	r3, [r7, #28]
 800f15a:	61bb      	str	r3, [r7, #24]
 800f15c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f15e:	6979      	ldr	r1, [r7, #20]
 800f160:	69ba      	ldr	r2, [r7, #24]
 800f162:	e841 2300 	strex	r3, r2, [r1]
 800f166:	613b      	str	r3, [r7, #16]
   return(result);
 800f168:	693b      	ldr	r3, [r7, #16]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d1e6      	bne.n	800f13c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	2220      	movs	r2, #32
 800f172:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	2200      	movs	r2, #0
 800f17a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f17c:	6878      	ldr	r0, [r7, #4]
 800f17e:	f7fe ff1d 	bl	800dfbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f182:	bf00      	nop
 800f184:	3720      	adds	r7, #32
 800f186:	46bd      	mov	sp, r7
 800f188:	bd80      	pop	{r7, pc}

0800f18a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f18a:	b480      	push	{r7}
 800f18c:	b083      	sub	sp, #12
 800f18e:	af00      	add	r7, sp, #0
 800f190:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f192:	bf00      	nop
 800f194:	370c      	adds	r7, #12
 800f196:	46bd      	mov	sp, r7
 800f198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19c:	4770      	bx	lr

0800f19e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f19e:	b480      	push	{r7}
 800f1a0:	b083      	sub	sp, #12
 800f1a2:	af00      	add	r7, sp, #0
 800f1a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f1a6:	bf00      	nop
 800f1a8:	370c      	adds	r7, #12
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b0:	4770      	bx	lr

0800f1b2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f1b2:	b480      	push	{r7}
 800f1b4:	b083      	sub	sp, #12
 800f1b6:	af00      	add	r7, sp, #0
 800f1b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f1ba:	bf00      	nop
 800f1bc:	370c      	adds	r7, #12
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c4:	4770      	bx	lr

0800f1c6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f1c6:	b480      	push	{r7}
 800f1c8:	b085      	sub	sp, #20
 800f1ca:	af00      	add	r7, sp, #0
 800f1cc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f1d4:	2b01      	cmp	r3, #1
 800f1d6:	d101      	bne.n	800f1dc <HAL_UARTEx_DisableFifoMode+0x16>
 800f1d8:	2302      	movs	r3, #2
 800f1da:	e027      	b.n	800f22c <HAL_UARTEx_DisableFifoMode+0x66>
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	2201      	movs	r2, #1
 800f1e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	2224      	movs	r2, #36	; 0x24
 800f1e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	681a      	ldr	r2, [r3, #0]
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	f022 0201 	bic.w	r2, r2, #1
 800f202:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f20a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2200      	movs	r2, #0
 800f210:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	68fa      	ldr	r2, [r7, #12]
 800f218:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	2220      	movs	r2, #32
 800f21e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	2200      	movs	r2, #0
 800f226:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f22a:	2300      	movs	r3, #0
}
 800f22c:	4618      	mov	r0, r3
 800f22e:	3714      	adds	r7, #20
 800f230:	46bd      	mov	sp, r7
 800f232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f236:	4770      	bx	lr

0800f238 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	b084      	sub	sp, #16
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]
 800f240:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f248:	2b01      	cmp	r3, #1
 800f24a:	d101      	bne.n	800f250 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f24c:	2302      	movs	r3, #2
 800f24e:	e02d      	b.n	800f2ac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	2201      	movs	r2, #1
 800f254:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	2224      	movs	r2, #36	; 0x24
 800f25c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	681a      	ldr	r2, [r3, #0]
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	f022 0201 	bic.w	r2, r2, #1
 800f276:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	689b      	ldr	r3, [r3, #8]
 800f27e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	683a      	ldr	r2, [r7, #0]
 800f288:	430a      	orrs	r2, r1
 800f28a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f28c:	6878      	ldr	r0, [r7, #4]
 800f28e:	f000 f84f 	bl	800f330 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	68fa      	ldr	r2, [r7, #12]
 800f298:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	2220      	movs	r2, #32
 800f29e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f2aa:	2300      	movs	r3, #0
}
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	3710      	adds	r7, #16
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bd80      	pop	{r7, pc}

0800f2b4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b084      	sub	sp, #16
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
 800f2bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f2c4:	2b01      	cmp	r3, #1
 800f2c6:	d101      	bne.n	800f2cc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f2c8:	2302      	movs	r3, #2
 800f2ca:	e02d      	b.n	800f328 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	2201      	movs	r2, #1
 800f2d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	2224      	movs	r2, #36	; 0x24
 800f2d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	681a      	ldr	r2, [r3, #0]
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	f022 0201 	bic.w	r2, r2, #1
 800f2f2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	689b      	ldr	r3, [r3, #8]
 800f2fa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	683a      	ldr	r2, [r7, #0]
 800f304:	430a      	orrs	r2, r1
 800f306:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f308:	6878      	ldr	r0, [r7, #4]
 800f30a:	f000 f811 	bl	800f330 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	68fa      	ldr	r2, [r7, #12]
 800f314:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	2220      	movs	r2, #32
 800f31a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	2200      	movs	r2, #0
 800f322:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f326:	2300      	movs	r3, #0
}
 800f328:	4618      	mov	r0, r3
 800f32a:	3710      	adds	r7, #16
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bd80      	pop	{r7, pc}

0800f330 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f330:	b480      	push	{r7}
 800f332:	b085      	sub	sp, #20
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d108      	bne.n	800f352 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	2201      	movs	r2, #1
 800f344:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2201      	movs	r2, #1
 800f34c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f350:	e031      	b.n	800f3b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f352:	2310      	movs	r3, #16
 800f354:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f356:	2310      	movs	r3, #16
 800f358:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	689b      	ldr	r3, [r3, #8]
 800f360:	0e5b      	lsrs	r3, r3, #25
 800f362:	b2db      	uxtb	r3, r3
 800f364:	f003 0307 	and.w	r3, r3, #7
 800f368:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	689b      	ldr	r3, [r3, #8]
 800f370:	0f5b      	lsrs	r3, r3, #29
 800f372:	b2db      	uxtb	r3, r3
 800f374:	f003 0307 	and.w	r3, r3, #7
 800f378:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f37a:	7bbb      	ldrb	r3, [r7, #14]
 800f37c:	7b3a      	ldrb	r2, [r7, #12]
 800f37e:	4911      	ldr	r1, [pc, #68]	; (800f3c4 <UARTEx_SetNbDataToProcess+0x94>)
 800f380:	5c8a      	ldrb	r2, [r1, r2]
 800f382:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f386:	7b3a      	ldrb	r2, [r7, #12]
 800f388:	490f      	ldr	r1, [pc, #60]	; (800f3c8 <UARTEx_SetNbDataToProcess+0x98>)
 800f38a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f38c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f390:	b29a      	uxth	r2, r3
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f398:	7bfb      	ldrb	r3, [r7, #15]
 800f39a:	7b7a      	ldrb	r2, [r7, #13]
 800f39c:	4909      	ldr	r1, [pc, #36]	; (800f3c4 <UARTEx_SetNbDataToProcess+0x94>)
 800f39e:	5c8a      	ldrb	r2, [r1, r2]
 800f3a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f3a4:	7b7a      	ldrb	r2, [r7, #13]
 800f3a6:	4908      	ldr	r1, [pc, #32]	; (800f3c8 <UARTEx_SetNbDataToProcess+0x98>)
 800f3a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f3aa:	fb93 f3f2 	sdiv	r3, r3, r2
 800f3ae:	b29a      	uxth	r2, r3
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f3b6:	bf00      	nop
 800f3b8:	3714      	adds	r7, #20
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c0:	4770      	bx	lr
 800f3c2:	bf00      	nop
 800f3c4:	080104d0 	.word	0x080104d0
 800f3c8:	080104d8 	.word	0x080104d8

0800f3cc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800f3cc:	b480      	push	{r7}
 800f3ce:	b083      	sub	sp, #12
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
 800f3d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d121      	bne.n	800f422 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	681a      	ldr	r2, [r3, #0]
 800f3e2:	4b27      	ldr	r3, [pc, #156]	; (800f480 <FMC_SDRAM_Init+0xb4>)
 800f3e4:	4013      	ands	r3, r2
 800f3e6:	683a      	ldr	r2, [r7, #0]
 800f3e8:	6851      	ldr	r1, [r2, #4]
 800f3ea:	683a      	ldr	r2, [r7, #0]
 800f3ec:	6892      	ldr	r2, [r2, #8]
 800f3ee:	4311      	orrs	r1, r2
 800f3f0:	683a      	ldr	r2, [r7, #0]
 800f3f2:	68d2      	ldr	r2, [r2, #12]
 800f3f4:	4311      	orrs	r1, r2
 800f3f6:	683a      	ldr	r2, [r7, #0]
 800f3f8:	6912      	ldr	r2, [r2, #16]
 800f3fa:	4311      	orrs	r1, r2
 800f3fc:	683a      	ldr	r2, [r7, #0]
 800f3fe:	6952      	ldr	r2, [r2, #20]
 800f400:	4311      	orrs	r1, r2
 800f402:	683a      	ldr	r2, [r7, #0]
 800f404:	6992      	ldr	r2, [r2, #24]
 800f406:	4311      	orrs	r1, r2
 800f408:	683a      	ldr	r2, [r7, #0]
 800f40a:	69d2      	ldr	r2, [r2, #28]
 800f40c:	4311      	orrs	r1, r2
 800f40e:	683a      	ldr	r2, [r7, #0]
 800f410:	6a12      	ldr	r2, [r2, #32]
 800f412:	4311      	orrs	r1, r2
 800f414:	683a      	ldr	r2, [r7, #0]
 800f416:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800f418:	430a      	orrs	r2, r1
 800f41a:	431a      	orrs	r2, r3
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	601a      	str	r2, [r3, #0]
 800f420:	e026      	b.n	800f470 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	69d9      	ldr	r1, [r3, #28]
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	6a1b      	ldr	r3, [r3, #32]
 800f432:	4319      	orrs	r1, r3
 800f434:	683b      	ldr	r3, [r7, #0]
 800f436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f438:	430b      	orrs	r3, r1
 800f43a:	431a      	orrs	r2, r3
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	685a      	ldr	r2, [r3, #4]
 800f444:	4b0e      	ldr	r3, [pc, #56]	; (800f480 <FMC_SDRAM_Init+0xb4>)
 800f446:	4013      	ands	r3, r2
 800f448:	683a      	ldr	r2, [r7, #0]
 800f44a:	6851      	ldr	r1, [r2, #4]
 800f44c:	683a      	ldr	r2, [r7, #0]
 800f44e:	6892      	ldr	r2, [r2, #8]
 800f450:	4311      	orrs	r1, r2
 800f452:	683a      	ldr	r2, [r7, #0]
 800f454:	68d2      	ldr	r2, [r2, #12]
 800f456:	4311      	orrs	r1, r2
 800f458:	683a      	ldr	r2, [r7, #0]
 800f45a:	6912      	ldr	r2, [r2, #16]
 800f45c:	4311      	orrs	r1, r2
 800f45e:	683a      	ldr	r2, [r7, #0]
 800f460:	6952      	ldr	r2, [r2, #20]
 800f462:	4311      	orrs	r1, r2
 800f464:	683a      	ldr	r2, [r7, #0]
 800f466:	6992      	ldr	r2, [r2, #24]
 800f468:	430a      	orrs	r2, r1
 800f46a:	431a      	orrs	r2, r3
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800f470:	2300      	movs	r3, #0
}
 800f472:	4618      	mov	r0, r3
 800f474:	370c      	adds	r7, #12
 800f476:	46bd      	mov	sp, r7
 800f478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f47c:	4770      	bx	lr
 800f47e:	bf00      	nop
 800f480:	ffff8000 	.word	0xffff8000

0800f484 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f484:	b480      	push	{r7}
 800f486:	b085      	sub	sp, #20
 800f488:	af00      	add	r7, sp, #0
 800f48a:	60f8      	str	r0, [r7, #12]
 800f48c:	60b9      	str	r1, [r7, #8]
 800f48e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d128      	bne.n	800f4e8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	689b      	ldr	r3, [r3, #8]
 800f49a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	1e59      	subs	r1, r3, #1
 800f4a4:	68bb      	ldr	r3, [r7, #8]
 800f4a6:	685b      	ldr	r3, [r3, #4]
 800f4a8:	3b01      	subs	r3, #1
 800f4aa:	011b      	lsls	r3, r3, #4
 800f4ac:	4319      	orrs	r1, r3
 800f4ae:	68bb      	ldr	r3, [r7, #8]
 800f4b0:	689b      	ldr	r3, [r3, #8]
 800f4b2:	3b01      	subs	r3, #1
 800f4b4:	021b      	lsls	r3, r3, #8
 800f4b6:	4319      	orrs	r1, r3
 800f4b8:	68bb      	ldr	r3, [r7, #8]
 800f4ba:	68db      	ldr	r3, [r3, #12]
 800f4bc:	3b01      	subs	r3, #1
 800f4be:	031b      	lsls	r3, r3, #12
 800f4c0:	4319      	orrs	r1, r3
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	691b      	ldr	r3, [r3, #16]
 800f4c6:	3b01      	subs	r3, #1
 800f4c8:	041b      	lsls	r3, r3, #16
 800f4ca:	4319      	orrs	r1, r3
 800f4cc:	68bb      	ldr	r3, [r7, #8]
 800f4ce:	695b      	ldr	r3, [r3, #20]
 800f4d0:	3b01      	subs	r3, #1
 800f4d2:	051b      	lsls	r3, r3, #20
 800f4d4:	4319      	orrs	r1, r3
 800f4d6:	68bb      	ldr	r3, [r7, #8]
 800f4d8:	699b      	ldr	r3, [r3, #24]
 800f4da:	3b01      	subs	r3, #1
 800f4dc:	061b      	lsls	r3, r3, #24
 800f4de:	430b      	orrs	r3, r1
 800f4e0:	431a      	orrs	r2, r3
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	609a      	str	r2, [r3, #8]
 800f4e6:	e02d      	b.n	800f544 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	689a      	ldr	r2, [r3, #8]
 800f4ec:	4b19      	ldr	r3, [pc, #100]	; (800f554 <FMC_SDRAM_Timing_Init+0xd0>)
 800f4ee:	4013      	ands	r3, r2
 800f4f0:	68ba      	ldr	r2, [r7, #8]
 800f4f2:	68d2      	ldr	r2, [r2, #12]
 800f4f4:	3a01      	subs	r2, #1
 800f4f6:	0311      	lsls	r1, r2, #12
 800f4f8:	68ba      	ldr	r2, [r7, #8]
 800f4fa:	6952      	ldr	r2, [r2, #20]
 800f4fc:	3a01      	subs	r2, #1
 800f4fe:	0512      	lsls	r2, r2, #20
 800f500:	430a      	orrs	r2, r1
 800f502:	431a      	orrs	r2, r3
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	68db      	ldr	r3, [r3, #12]
 800f50c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800f510:	68bb      	ldr	r3, [r7, #8]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	1e59      	subs	r1, r3, #1
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	685b      	ldr	r3, [r3, #4]
 800f51a:	3b01      	subs	r3, #1
 800f51c:	011b      	lsls	r3, r3, #4
 800f51e:	4319      	orrs	r1, r3
 800f520:	68bb      	ldr	r3, [r7, #8]
 800f522:	689b      	ldr	r3, [r3, #8]
 800f524:	3b01      	subs	r3, #1
 800f526:	021b      	lsls	r3, r3, #8
 800f528:	4319      	orrs	r1, r3
 800f52a:	68bb      	ldr	r3, [r7, #8]
 800f52c:	691b      	ldr	r3, [r3, #16]
 800f52e:	3b01      	subs	r3, #1
 800f530:	041b      	lsls	r3, r3, #16
 800f532:	4319      	orrs	r1, r3
 800f534:	68bb      	ldr	r3, [r7, #8]
 800f536:	699b      	ldr	r3, [r3, #24]
 800f538:	3b01      	subs	r3, #1
 800f53a:	061b      	lsls	r3, r3, #24
 800f53c:	430b      	orrs	r3, r1
 800f53e:	431a      	orrs	r2, r3
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800f544:	2300      	movs	r3, #0
}
 800f546:	4618      	mov	r0, r3
 800f548:	3714      	adds	r7, #20
 800f54a:	46bd      	mov	sp, r7
 800f54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f550:	4770      	bx	lr
 800f552:	bf00      	nop
 800f554:	ff0f0fff 	.word	0xff0f0fff

0800f558 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800f558:	b480      	push	{r7}
 800f55a:	b085      	sub	sp, #20
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	60f8      	str	r0, [r7, #12]
 800f560:	60b9      	str	r1, [r7, #8]
 800f562:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	691a      	ldr	r2, [r3, #16]
 800f568:	4b0c      	ldr	r3, [pc, #48]	; (800f59c <FMC_SDRAM_SendCommand+0x44>)
 800f56a:	4013      	ands	r3, r2
 800f56c:	68ba      	ldr	r2, [r7, #8]
 800f56e:	6811      	ldr	r1, [r2, #0]
 800f570:	68ba      	ldr	r2, [r7, #8]
 800f572:	6852      	ldr	r2, [r2, #4]
 800f574:	4311      	orrs	r1, r2
 800f576:	68ba      	ldr	r2, [r7, #8]
 800f578:	6892      	ldr	r2, [r2, #8]
 800f57a:	3a01      	subs	r2, #1
 800f57c:	0152      	lsls	r2, r2, #5
 800f57e:	4311      	orrs	r1, r2
 800f580:	68ba      	ldr	r2, [r7, #8]
 800f582:	68d2      	ldr	r2, [r2, #12]
 800f584:	0252      	lsls	r2, r2, #9
 800f586:	430a      	orrs	r2, r1
 800f588:	431a      	orrs	r2, r3
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800f58e:	2300      	movs	r3, #0
}
 800f590:	4618      	mov	r0, r3
 800f592:	3714      	adds	r7, #20
 800f594:	46bd      	mov	sp, r7
 800f596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59a:	4770      	bx	lr
 800f59c:	ffc00000 	.word	0xffc00000

0800f5a0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800f5a0:	b480      	push	{r7}
 800f5a2:	b083      	sub	sp, #12
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	6078      	str	r0, [r7, #4]
 800f5a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	695a      	ldr	r2, [r3, #20]
 800f5ae:	4b07      	ldr	r3, [pc, #28]	; (800f5cc <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800f5b0:	4013      	ands	r3, r2
 800f5b2:	683a      	ldr	r2, [r7, #0]
 800f5b4:	0052      	lsls	r2, r2, #1
 800f5b6:	431a      	orrs	r2, r3
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800f5bc:	2300      	movs	r3, #0
}
 800f5be:	4618      	mov	r0, r3
 800f5c0:	370c      	adds	r7, #12
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c8:	4770      	bx	lr
 800f5ca:	bf00      	nop
 800f5cc:	ffffc001 	.word	0xffffc001

0800f5d0 <__errno>:
 800f5d0:	4b01      	ldr	r3, [pc, #4]	; (800f5d8 <__errno+0x8>)
 800f5d2:	6818      	ldr	r0, [r3, #0]
 800f5d4:	4770      	bx	lr
 800f5d6:	bf00      	nop
 800f5d8:	24000054 	.word	0x24000054

0800f5dc <__libc_init_array>:
 800f5dc:	b570      	push	{r4, r5, r6, lr}
 800f5de:	4d0d      	ldr	r5, [pc, #52]	; (800f614 <__libc_init_array+0x38>)
 800f5e0:	4c0d      	ldr	r4, [pc, #52]	; (800f618 <__libc_init_array+0x3c>)
 800f5e2:	1b64      	subs	r4, r4, r5
 800f5e4:	10a4      	asrs	r4, r4, #2
 800f5e6:	2600      	movs	r6, #0
 800f5e8:	42a6      	cmp	r6, r4
 800f5ea:	d109      	bne.n	800f600 <__libc_init_array+0x24>
 800f5ec:	4d0b      	ldr	r5, [pc, #44]	; (800f61c <__libc_init_array+0x40>)
 800f5ee:	4c0c      	ldr	r4, [pc, #48]	; (800f620 <__libc_init_array+0x44>)
 800f5f0:	f000 fc66 	bl	800fec0 <_init>
 800f5f4:	1b64      	subs	r4, r4, r5
 800f5f6:	10a4      	asrs	r4, r4, #2
 800f5f8:	2600      	movs	r6, #0
 800f5fa:	42a6      	cmp	r6, r4
 800f5fc:	d105      	bne.n	800f60a <__libc_init_array+0x2e>
 800f5fe:	bd70      	pop	{r4, r5, r6, pc}
 800f600:	f855 3b04 	ldr.w	r3, [r5], #4
 800f604:	4798      	blx	r3
 800f606:	3601      	adds	r6, #1
 800f608:	e7ee      	b.n	800f5e8 <__libc_init_array+0xc>
 800f60a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f60e:	4798      	blx	r3
 800f610:	3601      	adds	r6, #1
 800f612:	e7f2      	b.n	800f5fa <__libc_init_array+0x1e>
 800f614:	0801054c 	.word	0x0801054c
 800f618:	0801054c 	.word	0x0801054c
 800f61c:	0801054c 	.word	0x0801054c
 800f620:	08010550 	.word	0x08010550

0800f624 <memset>:
 800f624:	4402      	add	r2, r0
 800f626:	4603      	mov	r3, r0
 800f628:	4293      	cmp	r3, r2
 800f62a:	d100      	bne.n	800f62e <memset+0xa>
 800f62c:	4770      	bx	lr
 800f62e:	f803 1b01 	strb.w	r1, [r3], #1
 800f632:	e7f9      	b.n	800f628 <memset+0x4>

0800f634 <setvbuf>:
 800f634:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f638:	461d      	mov	r5, r3
 800f63a:	4b5d      	ldr	r3, [pc, #372]	; (800f7b0 <setvbuf+0x17c>)
 800f63c:	681f      	ldr	r7, [r3, #0]
 800f63e:	4604      	mov	r4, r0
 800f640:	460e      	mov	r6, r1
 800f642:	4690      	mov	r8, r2
 800f644:	b127      	cbz	r7, 800f650 <setvbuf+0x1c>
 800f646:	69bb      	ldr	r3, [r7, #24]
 800f648:	b913      	cbnz	r3, 800f650 <setvbuf+0x1c>
 800f64a:	4638      	mov	r0, r7
 800f64c:	f000 f9d2 	bl	800f9f4 <__sinit>
 800f650:	4b58      	ldr	r3, [pc, #352]	; (800f7b4 <setvbuf+0x180>)
 800f652:	429c      	cmp	r4, r3
 800f654:	d167      	bne.n	800f726 <setvbuf+0xf2>
 800f656:	687c      	ldr	r4, [r7, #4]
 800f658:	f1b8 0f02 	cmp.w	r8, #2
 800f65c:	d006      	beq.n	800f66c <setvbuf+0x38>
 800f65e:	f1b8 0f01 	cmp.w	r8, #1
 800f662:	f200 809f 	bhi.w	800f7a4 <setvbuf+0x170>
 800f666:	2d00      	cmp	r5, #0
 800f668:	f2c0 809c 	blt.w	800f7a4 <setvbuf+0x170>
 800f66c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f66e:	07db      	lsls	r3, r3, #31
 800f670:	d405      	bmi.n	800f67e <setvbuf+0x4a>
 800f672:	89a3      	ldrh	r3, [r4, #12]
 800f674:	0598      	lsls	r0, r3, #22
 800f676:	d402      	bmi.n	800f67e <setvbuf+0x4a>
 800f678:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f67a:	f000 fa59 	bl	800fb30 <__retarget_lock_acquire_recursive>
 800f67e:	4621      	mov	r1, r4
 800f680:	4638      	mov	r0, r7
 800f682:	f000 f923 	bl	800f8cc <_fflush_r>
 800f686:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f688:	b141      	cbz	r1, 800f69c <setvbuf+0x68>
 800f68a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f68e:	4299      	cmp	r1, r3
 800f690:	d002      	beq.n	800f698 <setvbuf+0x64>
 800f692:	4638      	mov	r0, r7
 800f694:	f000 fa7c 	bl	800fb90 <_free_r>
 800f698:	2300      	movs	r3, #0
 800f69a:	6363      	str	r3, [r4, #52]	; 0x34
 800f69c:	2300      	movs	r3, #0
 800f69e:	61a3      	str	r3, [r4, #24]
 800f6a0:	6063      	str	r3, [r4, #4]
 800f6a2:	89a3      	ldrh	r3, [r4, #12]
 800f6a4:	0619      	lsls	r1, r3, #24
 800f6a6:	d503      	bpl.n	800f6b0 <setvbuf+0x7c>
 800f6a8:	6921      	ldr	r1, [r4, #16]
 800f6aa:	4638      	mov	r0, r7
 800f6ac:	f000 fa70 	bl	800fb90 <_free_r>
 800f6b0:	89a3      	ldrh	r3, [r4, #12]
 800f6b2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800f6b6:	f023 0303 	bic.w	r3, r3, #3
 800f6ba:	f1b8 0f02 	cmp.w	r8, #2
 800f6be:	81a3      	strh	r3, [r4, #12]
 800f6c0:	d06c      	beq.n	800f79c <setvbuf+0x168>
 800f6c2:	ab01      	add	r3, sp, #4
 800f6c4:	466a      	mov	r2, sp
 800f6c6:	4621      	mov	r1, r4
 800f6c8:	4638      	mov	r0, r7
 800f6ca:	f000 fa33 	bl	800fb34 <__swhatbuf_r>
 800f6ce:	89a3      	ldrh	r3, [r4, #12]
 800f6d0:	4318      	orrs	r0, r3
 800f6d2:	81a0      	strh	r0, [r4, #12]
 800f6d4:	2d00      	cmp	r5, #0
 800f6d6:	d130      	bne.n	800f73a <setvbuf+0x106>
 800f6d8:	9d00      	ldr	r5, [sp, #0]
 800f6da:	4628      	mov	r0, r5
 800f6dc:	f000 fa50 	bl	800fb80 <malloc>
 800f6e0:	4606      	mov	r6, r0
 800f6e2:	2800      	cmp	r0, #0
 800f6e4:	d155      	bne.n	800f792 <setvbuf+0x15e>
 800f6e6:	f8dd 9000 	ldr.w	r9, [sp]
 800f6ea:	45a9      	cmp	r9, r5
 800f6ec:	d14a      	bne.n	800f784 <setvbuf+0x150>
 800f6ee:	f04f 35ff 	mov.w	r5, #4294967295
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	60a2      	str	r2, [r4, #8]
 800f6f6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800f6fa:	6022      	str	r2, [r4, #0]
 800f6fc:	6122      	str	r2, [r4, #16]
 800f6fe:	2201      	movs	r2, #1
 800f700:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f704:	6162      	str	r2, [r4, #20]
 800f706:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f708:	f043 0302 	orr.w	r3, r3, #2
 800f70c:	07d2      	lsls	r2, r2, #31
 800f70e:	81a3      	strh	r3, [r4, #12]
 800f710:	d405      	bmi.n	800f71e <setvbuf+0xea>
 800f712:	f413 7f00 	tst.w	r3, #512	; 0x200
 800f716:	d102      	bne.n	800f71e <setvbuf+0xea>
 800f718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f71a:	f000 fa0a 	bl	800fb32 <__retarget_lock_release_recursive>
 800f71e:	4628      	mov	r0, r5
 800f720:	b003      	add	sp, #12
 800f722:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f726:	4b24      	ldr	r3, [pc, #144]	; (800f7b8 <setvbuf+0x184>)
 800f728:	429c      	cmp	r4, r3
 800f72a:	d101      	bne.n	800f730 <setvbuf+0xfc>
 800f72c:	68bc      	ldr	r4, [r7, #8]
 800f72e:	e793      	b.n	800f658 <setvbuf+0x24>
 800f730:	4b22      	ldr	r3, [pc, #136]	; (800f7bc <setvbuf+0x188>)
 800f732:	429c      	cmp	r4, r3
 800f734:	bf08      	it	eq
 800f736:	68fc      	ldreq	r4, [r7, #12]
 800f738:	e78e      	b.n	800f658 <setvbuf+0x24>
 800f73a:	2e00      	cmp	r6, #0
 800f73c:	d0cd      	beq.n	800f6da <setvbuf+0xa6>
 800f73e:	69bb      	ldr	r3, [r7, #24]
 800f740:	b913      	cbnz	r3, 800f748 <setvbuf+0x114>
 800f742:	4638      	mov	r0, r7
 800f744:	f000 f956 	bl	800f9f4 <__sinit>
 800f748:	f1b8 0f01 	cmp.w	r8, #1
 800f74c:	bf08      	it	eq
 800f74e:	89a3      	ldrheq	r3, [r4, #12]
 800f750:	6026      	str	r6, [r4, #0]
 800f752:	bf04      	itt	eq
 800f754:	f043 0301 	orreq.w	r3, r3, #1
 800f758:	81a3      	strheq	r3, [r4, #12]
 800f75a:	89a2      	ldrh	r2, [r4, #12]
 800f75c:	f012 0308 	ands.w	r3, r2, #8
 800f760:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800f764:	d01c      	beq.n	800f7a0 <setvbuf+0x16c>
 800f766:	07d3      	lsls	r3, r2, #31
 800f768:	bf41      	itttt	mi
 800f76a:	2300      	movmi	r3, #0
 800f76c:	426d      	negmi	r5, r5
 800f76e:	60a3      	strmi	r3, [r4, #8]
 800f770:	61a5      	strmi	r5, [r4, #24]
 800f772:	bf58      	it	pl
 800f774:	60a5      	strpl	r5, [r4, #8]
 800f776:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800f778:	f015 0501 	ands.w	r5, r5, #1
 800f77c:	d115      	bne.n	800f7aa <setvbuf+0x176>
 800f77e:	f412 7f00 	tst.w	r2, #512	; 0x200
 800f782:	e7c8      	b.n	800f716 <setvbuf+0xe2>
 800f784:	4648      	mov	r0, r9
 800f786:	f000 f9fb 	bl	800fb80 <malloc>
 800f78a:	4606      	mov	r6, r0
 800f78c:	2800      	cmp	r0, #0
 800f78e:	d0ae      	beq.n	800f6ee <setvbuf+0xba>
 800f790:	464d      	mov	r5, r9
 800f792:	89a3      	ldrh	r3, [r4, #12]
 800f794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f798:	81a3      	strh	r3, [r4, #12]
 800f79a:	e7d0      	b.n	800f73e <setvbuf+0x10a>
 800f79c:	2500      	movs	r5, #0
 800f79e:	e7a8      	b.n	800f6f2 <setvbuf+0xbe>
 800f7a0:	60a3      	str	r3, [r4, #8]
 800f7a2:	e7e8      	b.n	800f776 <setvbuf+0x142>
 800f7a4:	f04f 35ff 	mov.w	r5, #4294967295
 800f7a8:	e7b9      	b.n	800f71e <setvbuf+0xea>
 800f7aa:	2500      	movs	r5, #0
 800f7ac:	e7b7      	b.n	800f71e <setvbuf+0xea>
 800f7ae:	bf00      	nop
 800f7b0:	24000054 	.word	0x24000054
 800f7b4:	08010504 	.word	0x08010504
 800f7b8:	08010524 	.word	0x08010524
 800f7bc:	080104e4 	.word	0x080104e4

0800f7c0 <__sflush_r>:
 800f7c0:	898a      	ldrh	r2, [r1, #12]
 800f7c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7c6:	4605      	mov	r5, r0
 800f7c8:	0710      	lsls	r0, r2, #28
 800f7ca:	460c      	mov	r4, r1
 800f7cc:	d458      	bmi.n	800f880 <__sflush_r+0xc0>
 800f7ce:	684b      	ldr	r3, [r1, #4]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	dc05      	bgt.n	800f7e0 <__sflush_r+0x20>
 800f7d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	dc02      	bgt.n	800f7e0 <__sflush_r+0x20>
 800f7da:	2000      	movs	r0, #0
 800f7dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f7e2:	2e00      	cmp	r6, #0
 800f7e4:	d0f9      	beq.n	800f7da <__sflush_r+0x1a>
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f7ec:	682f      	ldr	r7, [r5, #0]
 800f7ee:	602b      	str	r3, [r5, #0]
 800f7f0:	d032      	beq.n	800f858 <__sflush_r+0x98>
 800f7f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f7f4:	89a3      	ldrh	r3, [r4, #12]
 800f7f6:	075a      	lsls	r2, r3, #29
 800f7f8:	d505      	bpl.n	800f806 <__sflush_r+0x46>
 800f7fa:	6863      	ldr	r3, [r4, #4]
 800f7fc:	1ac0      	subs	r0, r0, r3
 800f7fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f800:	b10b      	cbz	r3, 800f806 <__sflush_r+0x46>
 800f802:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f804:	1ac0      	subs	r0, r0, r3
 800f806:	2300      	movs	r3, #0
 800f808:	4602      	mov	r2, r0
 800f80a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f80c:	6a21      	ldr	r1, [r4, #32]
 800f80e:	4628      	mov	r0, r5
 800f810:	47b0      	blx	r6
 800f812:	1c43      	adds	r3, r0, #1
 800f814:	89a3      	ldrh	r3, [r4, #12]
 800f816:	d106      	bne.n	800f826 <__sflush_r+0x66>
 800f818:	6829      	ldr	r1, [r5, #0]
 800f81a:	291d      	cmp	r1, #29
 800f81c:	d82c      	bhi.n	800f878 <__sflush_r+0xb8>
 800f81e:	4a2a      	ldr	r2, [pc, #168]	; (800f8c8 <__sflush_r+0x108>)
 800f820:	40ca      	lsrs	r2, r1
 800f822:	07d6      	lsls	r6, r2, #31
 800f824:	d528      	bpl.n	800f878 <__sflush_r+0xb8>
 800f826:	2200      	movs	r2, #0
 800f828:	6062      	str	r2, [r4, #4]
 800f82a:	04d9      	lsls	r1, r3, #19
 800f82c:	6922      	ldr	r2, [r4, #16]
 800f82e:	6022      	str	r2, [r4, #0]
 800f830:	d504      	bpl.n	800f83c <__sflush_r+0x7c>
 800f832:	1c42      	adds	r2, r0, #1
 800f834:	d101      	bne.n	800f83a <__sflush_r+0x7a>
 800f836:	682b      	ldr	r3, [r5, #0]
 800f838:	b903      	cbnz	r3, 800f83c <__sflush_r+0x7c>
 800f83a:	6560      	str	r0, [r4, #84]	; 0x54
 800f83c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f83e:	602f      	str	r7, [r5, #0]
 800f840:	2900      	cmp	r1, #0
 800f842:	d0ca      	beq.n	800f7da <__sflush_r+0x1a>
 800f844:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f848:	4299      	cmp	r1, r3
 800f84a:	d002      	beq.n	800f852 <__sflush_r+0x92>
 800f84c:	4628      	mov	r0, r5
 800f84e:	f000 f99f 	bl	800fb90 <_free_r>
 800f852:	2000      	movs	r0, #0
 800f854:	6360      	str	r0, [r4, #52]	; 0x34
 800f856:	e7c1      	b.n	800f7dc <__sflush_r+0x1c>
 800f858:	6a21      	ldr	r1, [r4, #32]
 800f85a:	2301      	movs	r3, #1
 800f85c:	4628      	mov	r0, r5
 800f85e:	47b0      	blx	r6
 800f860:	1c41      	adds	r1, r0, #1
 800f862:	d1c7      	bne.n	800f7f4 <__sflush_r+0x34>
 800f864:	682b      	ldr	r3, [r5, #0]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d0c4      	beq.n	800f7f4 <__sflush_r+0x34>
 800f86a:	2b1d      	cmp	r3, #29
 800f86c:	d001      	beq.n	800f872 <__sflush_r+0xb2>
 800f86e:	2b16      	cmp	r3, #22
 800f870:	d101      	bne.n	800f876 <__sflush_r+0xb6>
 800f872:	602f      	str	r7, [r5, #0]
 800f874:	e7b1      	b.n	800f7da <__sflush_r+0x1a>
 800f876:	89a3      	ldrh	r3, [r4, #12]
 800f878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f87c:	81a3      	strh	r3, [r4, #12]
 800f87e:	e7ad      	b.n	800f7dc <__sflush_r+0x1c>
 800f880:	690f      	ldr	r7, [r1, #16]
 800f882:	2f00      	cmp	r7, #0
 800f884:	d0a9      	beq.n	800f7da <__sflush_r+0x1a>
 800f886:	0793      	lsls	r3, r2, #30
 800f888:	680e      	ldr	r6, [r1, #0]
 800f88a:	bf08      	it	eq
 800f88c:	694b      	ldreq	r3, [r1, #20]
 800f88e:	600f      	str	r7, [r1, #0]
 800f890:	bf18      	it	ne
 800f892:	2300      	movne	r3, #0
 800f894:	eba6 0807 	sub.w	r8, r6, r7
 800f898:	608b      	str	r3, [r1, #8]
 800f89a:	f1b8 0f00 	cmp.w	r8, #0
 800f89e:	dd9c      	ble.n	800f7da <__sflush_r+0x1a>
 800f8a0:	6a21      	ldr	r1, [r4, #32]
 800f8a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f8a4:	4643      	mov	r3, r8
 800f8a6:	463a      	mov	r2, r7
 800f8a8:	4628      	mov	r0, r5
 800f8aa:	47b0      	blx	r6
 800f8ac:	2800      	cmp	r0, #0
 800f8ae:	dc06      	bgt.n	800f8be <__sflush_r+0xfe>
 800f8b0:	89a3      	ldrh	r3, [r4, #12]
 800f8b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8b6:	81a3      	strh	r3, [r4, #12]
 800f8b8:	f04f 30ff 	mov.w	r0, #4294967295
 800f8bc:	e78e      	b.n	800f7dc <__sflush_r+0x1c>
 800f8be:	4407      	add	r7, r0
 800f8c0:	eba8 0800 	sub.w	r8, r8, r0
 800f8c4:	e7e9      	b.n	800f89a <__sflush_r+0xda>
 800f8c6:	bf00      	nop
 800f8c8:	20400001 	.word	0x20400001

0800f8cc <_fflush_r>:
 800f8cc:	b538      	push	{r3, r4, r5, lr}
 800f8ce:	690b      	ldr	r3, [r1, #16]
 800f8d0:	4605      	mov	r5, r0
 800f8d2:	460c      	mov	r4, r1
 800f8d4:	b913      	cbnz	r3, 800f8dc <_fflush_r+0x10>
 800f8d6:	2500      	movs	r5, #0
 800f8d8:	4628      	mov	r0, r5
 800f8da:	bd38      	pop	{r3, r4, r5, pc}
 800f8dc:	b118      	cbz	r0, 800f8e6 <_fflush_r+0x1a>
 800f8de:	6983      	ldr	r3, [r0, #24]
 800f8e0:	b90b      	cbnz	r3, 800f8e6 <_fflush_r+0x1a>
 800f8e2:	f000 f887 	bl	800f9f4 <__sinit>
 800f8e6:	4b14      	ldr	r3, [pc, #80]	; (800f938 <_fflush_r+0x6c>)
 800f8e8:	429c      	cmp	r4, r3
 800f8ea:	d11b      	bne.n	800f924 <_fflush_r+0x58>
 800f8ec:	686c      	ldr	r4, [r5, #4]
 800f8ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d0ef      	beq.n	800f8d6 <_fflush_r+0xa>
 800f8f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f8f8:	07d0      	lsls	r0, r2, #31
 800f8fa:	d404      	bmi.n	800f906 <_fflush_r+0x3a>
 800f8fc:	0599      	lsls	r1, r3, #22
 800f8fe:	d402      	bmi.n	800f906 <_fflush_r+0x3a>
 800f900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f902:	f000 f915 	bl	800fb30 <__retarget_lock_acquire_recursive>
 800f906:	4628      	mov	r0, r5
 800f908:	4621      	mov	r1, r4
 800f90a:	f7ff ff59 	bl	800f7c0 <__sflush_r>
 800f90e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f910:	07da      	lsls	r2, r3, #31
 800f912:	4605      	mov	r5, r0
 800f914:	d4e0      	bmi.n	800f8d8 <_fflush_r+0xc>
 800f916:	89a3      	ldrh	r3, [r4, #12]
 800f918:	059b      	lsls	r3, r3, #22
 800f91a:	d4dd      	bmi.n	800f8d8 <_fflush_r+0xc>
 800f91c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f91e:	f000 f908 	bl	800fb32 <__retarget_lock_release_recursive>
 800f922:	e7d9      	b.n	800f8d8 <_fflush_r+0xc>
 800f924:	4b05      	ldr	r3, [pc, #20]	; (800f93c <_fflush_r+0x70>)
 800f926:	429c      	cmp	r4, r3
 800f928:	d101      	bne.n	800f92e <_fflush_r+0x62>
 800f92a:	68ac      	ldr	r4, [r5, #8]
 800f92c:	e7df      	b.n	800f8ee <_fflush_r+0x22>
 800f92e:	4b04      	ldr	r3, [pc, #16]	; (800f940 <_fflush_r+0x74>)
 800f930:	429c      	cmp	r4, r3
 800f932:	bf08      	it	eq
 800f934:	68ec      	ldreq	r4, [r5, #12]
 800f936:	e7da      	b.n	800f8ee <_fflush_r+0x22>
 800f938:	08010504 	.word	0x08010504
 800f93c:	08010524 	.word	0x08010524
 800f940:	080104e4 	.word	0x080104e4

0800f944 <std>:
 800f944:	2300      	movs	r3, #0
 800f946:	b510      	push	{r4, lr}
 800f948:	4604      	mov	r4, r0
 800f94a:	e9c0 3300 	strd	r3, r3, [r0]
 800f94e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f952:	6083      	str	r3, [r0, #8]
 800f954:	8181      	strh	r1, [r0, #12]
 800f956:	6643      	str	r3, [r0, #100]	; 0x64
 800f958:	81c2      	strh	r2, [r0, #14]
 800f95a:	6183      	str	r3, [r0, #24]
 800f95c:	4619      	mov	r1, r3
 800f95e:	2208      	movs	r2, #8
 800f960:	305c      	adds	r0, #92	; 0x5c
 800f962:	f7ff fe5f 	bl	800f624 <memset>
 800f966:	4b05      	ldr	r3, [pc, #20]	; (800f97c <std+0x38>)
 800f968:	6263      	str	r3, [r4, #36]	; 0x24
 800f96a:	4b05      	ldr	r3, [pc, #20]	; (800f980 <std+0x3c>)
 800f96c:	62a3      	str	r3, [r4, #40]	; 0x28
 800f96e:	4b05      	ldr	r3, [pc, #20]	; (800f984 <std+0x40>)
 800f970:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f972:	4b05      	ldr	r3, [pc, #20]	; (800f988 <std+0x44>)
 800f974:	6224      	str	r4, [r4, #32]
 800f976:	6323      	str	r3, [r4, #48]	; 0x30
 800f978:	bd10      	pop	{r4, pc}
 800f97a:	bf00      	nop
 800f97c:	0800fd71 	.word	0x0800fd71
 800f980:	0800fd93 	.word	0x0800fd93
 800f984:	0800fdcb 	.word	0x0800fdcb
 800f988:	0800fdef 	.word	0x0800fdef

0800f98c <_cleanup_r>:
 800f98c:	4901      	ldr	r1, [pc, #4]	; (800f994 <_cleanup_r+0x8>)
 800f98e:	f000 b8af 	b.w	800faf0 <_fwalk_reent>
 800f992:	bf00      	nop
 800f994:	0800f8cd 	.word	0x0800f8cd

0800f998 <__sfmoreglue>:
 800f998:	b570      	push	{r4, r5, r6, lr}
 800f99a:	2268      	movs	r2, #104	; 0x68
 800f99c:	1e4d      	subs	r5, r1, #1
 800f99e:	4355      	muls	r5, r2
 800f9a0:	460e      	mov	r6, r1
 800f9a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f9a6:	f000 f95f 	bl	800fc68 <_malloc_r>
 800f9aa:	4604      	mov	r4, r0
 800f9ac:	b140      	cbz	r0, 800f9c0 <__sfmoreglue+0x28>
 800f9ae:	2100      	movs	r1, #0
 800f9b0:	e9c0 1600 	strd	r1, r6, [r0]
 800f9b4:	300c      	adds	r0, #12
 800f9b6:	60a0      	str	r0, [r4, #8]
 800f9b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f9bc:	f7ff fe32 	bl	800f624 <memset>
 800f9c0:	4620      	mov	r0, r4
 800f9c2:	bd70      	pop	{r4, r5, r6, pc}

0800f9c4 <__sfp_lock_acquire>:
 800f9c4:	4801      	ldr	r0, [pc, #4]	; (800f9cc <__sfp_lock_acquire+0x8>)
 800f9c6:	f000 b8b3 	b.w	800fb30 <__retarget_lock_acquire_recursive>
 800f9ca:	bf00      	nop
 800f9cc:	24000e71 	.word	0x24000e71

0800f9d0 <__sfp_lock_release>:
 800f9d0:	4801      	ldr	r0, [pc, #4]	; (800f9d8 <__sfp_lock_release+0x8>)
 800f9d2:	f000 b8ae 	b.w	800fb32 <__retarget_lock_release_recursive>
 800f9d6:	bf00      	nop
 800f9d8:	24000e71 	.word	0x24000e71

0800f9dc <__sinit_lock_acquire>:
 800f9dc:	4801      	ldr	r0, [pc, #4]	; (800f9e4 <__sinit_lock_acquire+0x8>)
 800f9de:	f000 b8a7 	b.w	800fb30 <__retarget_lock_acquire_recursive>
 800f9e2:	bf00      	nop
 800f9e4:	24000e72 	.word	0x24000e72

0800f9e8 <__sinit_lock_release>:
 800f9e8:	4801      	ldr	r0, [pc, #4]	; (800f9f0 <__sinit_lock_release+0x8>)
 800f9ea:	f000 b8a2 	b.w	800fb32 <__retarget_lock_release_recursive>
 800f9ee:	bf00      	nop
 800f9f0:	24000e72 	.word	0x24000e72

0800f9f4 <__sinit>:
 800f9f4:	b510      	push	{r4, lr}
 800f9f6:	4604      	mov	r4, r0
 800f9f8:	f7ff fff0 	bl	800f9dc <__sinit_lock_acquire>
 800f9fc:	69a3      	ldr	r3, [r4, #24]
 800f9fe:	b11b      	cbz	r3, 800fa08 <__sinit+0x14>
 800fa00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa04:	f7ff bff0 	b.w	800f9e8 <__sinit_lock_release>
 800fa08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fa0c:	6523      	str	r3, [r4, #80]	; 0x50
 800fa0e:	4b13      	ldr	r3, [pc, #76]	; (800fa5c <__sinit+0x68>)
 800fa10:	4a13      	ldr	r2, [pc, #76]	; (800fa60 <__sinit+0x6c>)
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	62a2      	str	r2, [r4, #40]	; 0x28
 800fa16:	42a3      	cmp	r3, r4
 800fa18:	bf04      	itt	eq
 800fa1a:	2301      	moveq	r3, #1
 800fa1c:	61a3      	streq	r3, [r4, #24]
 800fa1e:	4620      	mov	r0, r4
 800fa20:	f000 f820 	bl	800fa64 <__sfp>
 800fa24:	6060      	str	r0, [r4, #4]
 800fa26:	4620      	mov	r0, r4
 800fa28:	f000 f81c 	bl	800fa64 <__sfp>
 800fa2c:	60a0      	str	r0, [r4, #8]
 800fa2e:	4620      	mov	r0, r4
 800fa30:	f000 f818 	bl	800fa64 <__sfp>
 800fa34:	2200      	movs	r2, #0
 800fa36:	60e0      	str	r0, [r4, #12]
 800fa38:	2104      	movs	r1, #4
 800fa3a:	6860      	ldr	r0, [r4, #4]
 800fa3c:	f7ff ff82 	bl	800f944 <std>
 800fa40:	68a0      	ldr	r0, [r4, #8]
 800fa42:	2201      	movs	r2, #1
 800fa44:	2109      	movs	r1, #9
 800fa46:	f7ff ff7d 	bl	800f944 <std>
 800fa4a:	68e0      	ldr	r0, [r4, #12]
 800fa4c:	2202      	movs	r2, #2
 800fa4e:	2112      	movs	r1, #18
 800fa50:	f7ff ff78 	bl	800f944 <std>
 800fa54:	2301      	movs	r3, #1
 800fa56:	61a3      	str	r3, [r4, #24]
 800fa58:	e7d2      	b.n	800fa00 <__sinit+0xc>
 800fa5a:	bf00      	nop
 800fa5c:	080104e0 	.word	0x080104e0
 800fa60:	0800f98d 	.word	0x0800f98d

0800fa64 <__sfp>:
 800fa64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa66:	4607      	mov	r7, r0
 800fa68:	f7ff ffac 	bl	800f9c4 <__sfp_lock_acquire>
 800fa6c:	4b1e      	ldr	r3, [pc, #120]	; (800fae8 <__sfp+0x84>)
 800fa6e:	681e      	ldr	r6, [r3, #0]
 800fa70:	69b3      	ldr	r3, [r6, #24]
 800fa72:	b913      	cbnz	r3, 800fa7a <__sfp+0x16>
 800fa74:	4630      	mov	r0, r6
 800fa76:	f7ff ffbd 	bl	800f9f4 <__sinit>
 800fa7a:	3648      	adds	r6, #72	; 0x48
 800fa7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fa80:	3b01      	subs	r3, #1
 800fa82:	d503      	bpl.n	800fa8c <__sfp+0x28>
 800fa84:	6833      	ldr	r3, [r6, #0]
 800fa86:	b30b      	cbz	r3, 800facc <__sfp+0x68>
 800fa88:	6836      	ldr	r6, [r6, #0]
 800fa8a:	e7f7      	b.n	800fa7c <__sfp+0x18>
 800fa8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fa90:	b9d5      	cbnz	r5, 800fac8 <__sfp+0x64>
 800fa92:	4b16      	ldr	r3, [pc, #88]	; (800faec <__sfp+0x88>)
 800fa94:	60e3      	str	r3, [r4, #12]
 800fa96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fa9a:	6665      	str	r5, [r4, #100]	; 0x64
 800fa9c:	f000 f847 	bl	800fb2e <__retarget_lock_init_recursive>
 800faa0:	f7ff ff96 	bl	800f9d0 <__sfp_lock_release>
 800faa4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800faa8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800faac:	6025      	str	r5, [r4, #0]
 800faae:	61a5      	str	r5, [r4, #24]
 800fab0:	2208      	movs	r2, #8
 800fab2:	4629      	mov	r1, r5
 800fab4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fab8:	f7ff fdb4 	bl	800f624 <memset>
 800fabc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fac0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fac4:	4620      	mov	r0, r4
 800fac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fac8:	3468      	adds	r4, #104	; 0x68
 800faca:	e7d9      	b.n	800fa80 <__sfp+0x1c>
 800facc:	2104      	movs	r1, #4
 800face:	4638      	mov	r0, r7
 800fad0:	f7ff ff62 	bl	800f998 <__sfmoreglue>
 800fad4:	4604      	mov	r4, r0
 800fad6:	6030      	str	r0, [r6, #0]
 800fad8:	2800      	cmp	r0, #0
 800fada:	d1d5      	bne.n	800fa88 <__sfp+0x24>
 800fadc:	f7ff ff78 	bl	800f9d0 <__sfp_lock_release>
 800fae0:	230c      	movs	r3, #12
 800fae2:	603b      	str	r3, [r7, #0]
 800fae4:	e7ee      	b.n	800fac4 <__sfp+0x60>
 800fae6:	bf00      	nop
 800fae8:	080104e0 	.word	0x080104e0
 800faec:	ffff0001 	.word	0xffff0001

0800faf0 <_fwalk_reent>:
 800faf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800faf4:	4606      	mov	r6, r0
 800faf6:	4688      	mov	r8, r1
 800faf8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fafc:	2700      	movs	r7, #0
 800fafe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fb02:	f1b9 0901 	subs.w	r9, r9, #1
 800fb06:	d505      	bpl.n	800fb14 <_fwalk_reent+0x24>
 800fb08:	6824      	ldr	r4, [r4, #0]
 800fb0a:	2c00      	cmp	r4, #0
 800fb0c:	d1f7      	bne.n	800fafe <_fwalk_reent+0xe>
 800fb0e:	4638      	mov	r0, r7
 800fb10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb14:	89ab      	ldrh	r3, [r5, #12]
 800fb16:	2b01      	cmp	r3, #1
 800fb18:	d907      	bls.n	800fb2a <_fwalk_reent+0x3a>
 800fb1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fb1e:	3301      	adds	r3, #1
 800fb20:	d003      	beq.n	800fb2a <_fwalk_reent+0x3a>
 800fb22:	4629      	mov	r1, r5
 800fb24:	4630      	mov	r0, r6
 800fb26:	47c0      	blx	r8
 800fb28:	4307      	orrs	r7, r0
 800fb2a:	3568      	adds	r5, #104	; 0x68
 800fb2c:	e7e9      	b.n	800fb02 <_fwalk_reent+0x12>

0800fb2e <__retarget_lock_init_recursive>:
 800fb2e:	4770      	bx	lr

0800fb30 <__retarget_lock_acquire_recursive>:
 800fb30:	4770      	bx	lr

0800fb32 <__retarget_lock_release_recursive>:
 800fb32:	4770      	bx	lr

0800fb34 <__swhatbuf_r>:
 800fb34:	b570      	push	{r4, r5, r6, lr}
 800fb36:	460e      	mov	r6, r1
 800fb38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb3c:	2900      	cmp	r1, #0
 800fb3e:	b096      	sub	sp, #88	; 0x58
 800fb40:	4614      	mov	r4, r2
 800fb42:	461d      	mov	r5, r3
 800fb44:	da08      	bge.n	800fb58 <__swhatbuf_r+0x24>
 800fb46:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	602a      	str	r2, [r5, #0]
 800fb4e:	061a      	lsls	r2, r3, #24
 800fb50:	d410      	bmi.n	800fb74 <__swhatbuf_r+0x40>
 800fb52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fb56:	e00e      	b.n	800fb76 <__swhatbuf_r+0x42>
 800fb58:	466a      	mov	r2, sp
 800fb5a:	f000 f96f 	bl	800fe3c <_fstat_r>
 800fb5e:	2800      	cmp	r0, #0
 800fb60:	dbf1      	blt.n	800fb46 <__swhatbuf_r+0x12>
 800fb62:	9a01      	ldr	r2, [sp, #4]
 800fb64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fb68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fb6c:	425a      	negs	r2, r3
 800fb6e:	415a      	adcs	r2, r3
 800fb70:	602a      	str	r2, [r5, #0]
 800fb72:	e7ee      	b.n	800fb52 <__swhatbuf_r+0x1e>
 800fb74:	2340      	movs	r3, #64	; 0x40
 800fb76:	2000      	movs	r0, #0
 800fb78:	6023      	str	r3, [r4, #0]
 800fb7a:	b016      	add	sp, #88	; 0x58
 800fb7c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fb80 <malloc>:
 800fb80:	4b02      	ldr	r3, [pc, #8]	; (800fb8c <malloc+0xc>)
 800fb82:	4601      	mov	r1, r0
 800fb84:	6818      	ldr	r0, [r3, #0]
 800fb86:	f000 b86f 	b.w	800fc68 <_malloc_r>
 800fb8a:	bf00      	nop
 800fb8c:	24000054 	.word	0x24000054

0800fb90 <_free_r>:
 800fb90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb92:	2900      	cmp	r1, #0
 800fb94:	d044      	beq.n	800fc20 <_free_r+0x90>
 800fb96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb9a:	9001      	str	r0, [sp, #4]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	f1a1 0404 	sub.w	r4, r1, #4
 800fba2:	bfb8      	it	lt
 800fba4:	18e4      	addlt	r4, r4, r3
 800fba6:	f000 f96d 	bl	800fe84 <__malloc_lock>
 800fbaa:	4a1e      	ldr	r2, [pc, #120]	; (800fc24 <_free_r+0x94>)
 800fbac:	9801      	ldr	r0, [sp, #4]
 800fbae:	6813      	ldr	r3, [r2, #0]
 800fbb0:	b933      	cbnz	r3, 800fbc0 <_free_r+0x30>
 800fbb2:	6063      	str	r3, [r4, #4]
 800fbb4:	6014      	str	r4, [r2, #0]
 800fbb6:	b003      	add	sp, #12
 800fbb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fbbc:	f000 b968 	b.w	800fe90 <__malloc_unlock>
 800fbc0:	42a3      	cmp	r3, r4
 800fbc2:	d908      	bls.n	800fbd6 <_free_r+0x46>
 800fbc4:	6825      	ldr	r5, [r4, #0]
 800fbc6:	1961      	adds	r1, r4, r5
 800fbc8:	428b      	cmp	r3, r1
 800fbca:	bf01      	itttt	eq
 800fbcc:	6819      	ldreq	r1, [r3, #0]
 800fbce:	685b      	ldreq	r3, [r3, #4]
 800fbd0:	1949      	addeq	r1, r1, r5
 800fbd2:	6021      	streq	r1, [r4, #0]
 800fbd4:	e7ed      	b.n	800fbb2 <_free_r+0x22>
 800fbd6:	461a      	mov	r2, r3
 800fbd8:	685b      	ldr	r3, [r3, #4]
 800fbda:	b10b      	cbz	r3, 800fbe0 <_free_r+0x50>
 800fbdc:	42a3      	cmp	r3, r4
 800fbde:	d9fa      	bls.n	800fbd6 <_free_r+0x46>
 800fbe0:	6811      	ldr	r1, [r2, #0]
 800fbe2:	1855      	adds	r5, r2, r1
 800fbe4:	42a5      	cmp	r5, r4
 800fbe6:	d10b      	bne.n	800fc00 <_free_r+0x70>
 800fbe8:	6824      	ldr	r4, [r4, #0]
 800fbea:	4421      	add	r1, r4
 800fbec:	1854      	adds	r4, r2, r1
 800fbee:	42a3      	cmp	r3, r4
 800fbf0:	6011      	str	r1, [r2, #0]
 800fbf2:	d1e0      	bne.n	800fbb6 <_free_r+0x26>
 800fbf4:	681c      	ldr	r4, [r3, #0]
 800fbf6:	685b      	ldr	r3, [r3, #4]
 800fbf8:	6053      	str	r3, [r2, #4]
 800fbfa:	4421      	add	r1, r4
 800fbfc:	6011      	str	r1, [r2, #0]
 800fbfe:	e7da      	b.n	800fbb6 <_free_r+0x26>
 800fc00:	d902      	bls.n	800fc08 <_free_r+0x78>
 800fc02:	230c      	movs	r3, #12
 800fc04:	6003      	str	r3, [r0, #0]
 800fc06:	e7d6      	b.n	800fbb6 <_free_r+0x26>
 800fc08:	6825      	ldr	r5, [r4, #0]
 800fc0a:	1961      	adds	r1, r4, r5
 800fc0c:	428b      	cmp	r3, r1
 800fc0e:	bf04      	itt	eq
 800fc10:	6819      	ldreq	r1, [r3, #0]
 800fc12:	685b      	ldreq	r3, [r3, #4]
 800fc14:	6063      	str	r3, [r4, #4]
 800fc16:	bf04      	itt	eq
 800fc18:	1949      	addeq	r1, r1, r5
 800fc1a:	6021      	streq	r1, [r4, #0]
 800fc1c:	6054      	str	r4, [r2, #4]
 800fc1e:	e7ca      	b.n	800fbb6 <_free_r+0x26>
 800fc20:	b003      	add	sp, #12
 800fc22:	bd30      	pop	{r4, r5, pc}
 800fc24:	24000e74 	.word	0x24000e74

0800fc28 <sbrk_aligned>:
 800fc28:	b570      	push	{r4, r5, r6, lr}
 800fc2a:	4e0e      	ldr	r6, [pc, #56]	; (800fc64 <sbrk_aligned+0x3c>)
 800fc2c:	460c      	mov	r4, r1
 800fc2e:	6831      	ldr	r1, [r6, #0]
 800fc30:	4605      	mov	r5, r0
 800fc32:	b911      	cbnz	r1, 800fc3a <sbrk_aligned+0x12>
 800fc34:	f000 f88c 	bl	800fd50 <_sbrk_r>
 800fc38:	6030      	str	r0, [r6, #0]
 800fc3a:	4621      	mov	r1, r4
 800fc3c:	4628      	mov	r0, r5
 800fc3e:	f000 f887 	bl	800fd50 <_sbrk_r>
 800fc42:	1c43      	adds	r3, r0, #1
 800fc44:	d00a      	beq.n	800fc5c <sbrk_aligned+0x34>
 800fc46:	1cc4      	adds	r4, r0, #3
 800fc48:	f024 0403 	bic.w	r4, r4, #3
 800fc4c:	42a0      	cmp	r0, r4
 800fc4e:	d007      	beq.n	800fc60 <sbrk_aligned+0x38>
 800fc50:	1a21      	subs	r1, r4, r0
 800fc52:	4628      	mov	r0, r5
 800fc54:	f000 f87c 	bl	800fd50 <_sbrk_r>
 800fc58:	3001      	adds	r0, #1
 800fc5a:	d101      	bne.n	800fc60 <sbrk_aligned+0x38>
 800fc5c:	f04f 34ff 	mov.w	r4, #4294967295
 800fc60:	4620      	mov	r0, r4
 800fc62:	bd70      	pop	{r4, r5, r6, pc}
 800fc64:	24000e78 	.word	0x24000e78

0800fc68 <_malloc_r>:
 800fc68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc6c:	1ccd      	adds	r5, r1, #3
 800fc6e:	f025 0503 	bic.w	r5, r5, #3
 800fc72:	3508      	adds	r5, #8
 800fc74:	2d0c      	cmp	r5, #12
 800fc76:	bf38      	it	cc
 800fc78:	250c      	movcc	r5, #12
 800fc7a:	2d00      	cmp	r5, #0
 800fc7c:	4607      	mov	r7, r0
 800fc7e:	db01      	blt.n	800fc84 <_malloc_r+0x1c>
 800fc80:	42a9      	cmp	r1, r5
 800fc82:	d905      	bls.n	800fc90 <_malloc_r+0x28>
 800fc84:	230c      	movs	r3, #12
 800fc86:	603b      	str	r3, [r7, #0]
 800fc88:	2600      	movs	r6, #0
 800fc8a:	4630      	mov	r0, r6
 800fc8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc90:	4e2e      	ldr	r6, [pc, #184]	; (800fd4c <_malloc_r+0xe4>)
 800fc92:	f000 f8f7 	bl	800fe84 <__malloc_lock>
 800fc96:	6833      	ldr	r3, [r6, #0]
 800fc98:	461c      	mov	r4, r3
 800fc9a:	bb34      	cbnz	r4, 800fcea <_malloc_r+0x82>
 800fc9c:	4629      	mov	r1, r5
 800fc9e:	4638      	mov	r0, r7
 800fca0:	f7ff ffc2 	bl	800fc28 <sbrk_aligned>
 800fca4:	1c43      	adds	r3, r0, #1
 800fca6:	4604      	mov	r4, r0
 800fca8:	d14d      	bne.n	800fd46 <_malloc_r+0xde>
 800fcaa:	6834      	ldr	r4, [r6, #0]
 800fcac:	4626      	mov	r6, r4
 800fcae:	2e00      	cmp	r6, #0
 800fcb0:	d140      	bne.n	800fd34 <_malloc_r+0xcc>
 800fcb2:	6823      	ldr	r3, [r4, #0]
 800fcb4:	4631      	mov	r1, r6
 800fcb6:	4638      	mov	r0, r7
 800fcb8:	eb04 0803 	add.w	r8, r4, r3
 800fcbc:	f000 f848 	bl	800fd50 <_sbrk_r>
 800fcc0:	4580      	cmp	r8, r0
 800fcc2:	d13a      	bne.n	800fd3a <_malloc_r+0xd2>
 800fcc4:	6821      	ldr	r1, [r4, #0]
 800fcc6:	3503      	adds	r5, #3
 800fcc8:	1a6d      	subs	r5, r5, r1
 800fcca:	f025 0503 	bic.w	r5, r5, #3
 800fcce:	3508      	adds	r5, #8
 800fcd0:	2d0c      	cmp	r5, #12
 800fcd2:	bf38      	it	cc
 800fcd4:	250c      	movcc	r5, #12
 800fcd6:	4629      	mov	r1, r5
 800fcd8:	4638      	mov	r0, r7
 800fcda:	f7ff ffa5 	bl	800fc28 <sbrk_aligned>
 800fcde:	3001      	adds	r0, #1
 800fce0:	d02b      	beq.n	800fd3a <_malloc_r+0xd2>
 800fce2:	6823      	ldr	r3, [r4, #0]
 800fce4:	442b      	add	r3, r5
 800fce6:	6023      	str	r3, [r4, #0]
 800fce8:	e00e      	b.n	800fd08 <_malloc_r+0xa0>
 800fcea:	6822      	ldr	r2, [r4, #0]
 800fcec:	1b52      	subs	r2, r2, r5
 800fcee:	d41e      	bmi.n	800fd2e <_malloc_r+0xc6>
 800fcf0:	2a0b      	cmp	r2, #11
 800fcf2:	d916      	bls.n	800fd22 <_malloc_r+0xba>
 800fcf4:	1961      	adds	r1, r4, r5
 800fcf6:	42a3      	cmp	r3, r4
 800fcf8:	6025      	str	r5, [r4, #0]
 800fcfa:	bf18      	it	ne
 800fcfc:	6059      	strne	r1, [r3, #4]
 800fcfe:	6863      	ldr	r3, [r4, #4]
 800fd00:	bf08      	it	eq
 800fd02:	6031      	streq	r1, [r6, #0]
 800fd04:	5162      	str	r2, [r4, r5]
 800fd06:	604b      	str	r3, [r1, #4]
 800fd08:	4638      	mov	r0, r7
 800fd0a:	f104 060b 	add.w	r6, r4, #11
 800fd0e:	f000 f8bf 	bl	800fe90 <__malloc_unlock>
 800fd12:	f026 0607 	bic.w	r6, r6, #7
 800fd16:	1d23      	adds	r3, r4, #4
 800fd18:	1af2      	subs	r2, r6, r3
 800fd1a:	d0b6      	beq.n	800fc8a <_malloc_r+0x22>
 800fd1c:	1b9b      	subs	r3, r3, r6
 800fd1e:	50a3      	str	r3, [r4, r2]
 800fd20:	e7b3      	b.n	800fc8a <_malloc_r+0x22>
 800fd22:	6862      	ldr	r2, [r4, #4]
 800fd24:	42a3      	cmp	r3, r4
 800fd26:	bf0c      	ite	eq
 800fd28:	6032      	streq	r2, [r6, #0]
 800fd2a:	605a      	strne	r2, [r3, #4]
 800fd2c:	e7ec      	b.n	800fd08 <_malloc_r+0xa0>
 800fd2e:	4623      	mov	r3, r4
 800fd30:	6864      	ldr	r4, [r4, #4]
 800fd32:	e7b2      	b.n	800fc9a <_malloc_r+0x32>
 800fd34:	4634      	mov	r4, r6
 800fd36:	6876      	ldr	r6, [r6, #4]
 800fd38:	e7b9      	b.n	800fcae <_malloc_r+0x46>
 800fd3a:	230c      	movs	r3, #12
 800fd3c:	603b      	str	r3, [r7, #0]
 800fd3e:	4638      	mov	r0, r7
 800fd40:	f000 f8a6 	bl	800fe90 <__malloc_unlock>
 800fd44:	e7a1      	b.n	800fc8a <_malloc_r+0x22>
 800fd46:	6025      	str	r5, [r4, #0]
 800fd48:	e7de      	b.n	800fd08 <_malloc_r+0xa0>
 800fd4a:	bf00      	nop
 800fd4c:	24000e74 	.word	0x24000e74

0800fd50 <_sbrk_r>:
 800fd50:	b538      	push	{r3, r4, r5, lr}
 800fd52:	4d06      	ldr	r5, [pc, #24]	; (800fd6c <_sbrk_r+0x1c>)
 800fd54:	2300      	movs	r3, #0
 800fd56:	4604      	mov	r4, r0
 800fd58:	4608      	mov	r0, r1
 800fd5a:	602b      	str	r3, [r5, #0]
 800fd5c:	f7f4 f94a 	bl	8003ff4 <_sbrk>
 800fd60:	1c43      	adds	r3, r0, #1
 800fd62:	d102      	bne.n	800fd6a <_sbrk_r+0x1a>
 800fd64:	682b      	ldr	r3, [r5, #0]
 800fd66:	b103      	cbz	r3, 800fd6a <_sbrk_r+0x1a>
 800fd68:	6023      	str	r3, [r4, #0]
 800fd6a:	bd38      	pop	{r3, r4, r5, pc}
 800fd6c:	24000e7c 	.word	0x24000e7c

0800fd70 <__sread>:
 800fd70:	b510      	push	{r4, lr}
 800fd72:	460c      	mov	r4, r1
 800fd74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd78:	f000 f890 	bl	800fe9c <_read_r>
 800fd7c:	2800      	cmp	r0, #0
 800fd7e:	bfab      	itete	ge
 800fd80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fd82:	89a3      	ldrhlt	r3, [r4, #12]
 800fd84:	181b      	addge	r3, r3, r0
 800fd86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fd8a:	bfac      	ite	ge
 800fd8c:	6563      	strge	r3, [r4, #84]	; 0x54
 800fd8e:	81a3      	strhlt	r3, [r4, #12]
 800fd90:	bd10      	pop	{r4, pc}

0800fd92 <__swrite>:
 800fd92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd96:	461f      	mov	r7, r3
 800fd98:	898b      	ldrh	r3, [r1, #12]
 800fd9a:	05db      	lsls	r3, r3, #23
 800fd9c:	4605      	mov	r5, r0
 800fd9e:	460c      	mov	r4, r1
 800fda0:	4616      	mov	r6, r2
 800fda2:	d505      	bpl.n	800fdb0 <__swrite+0x1e>
 800fda4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fda8:	2302      	movs	r3, #2
 800fdaa:	2200      	movs	r2, #0
 800fdac:	f000 f858 	bl	800fe60 <_lseek_r>
 800fdb0:	89a3      	ldrh	r3, [r4, #12]
 800fdb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fdb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fdba:	81a3      	strh	r3, [r4, #12]
 800fdbc:	4632      	mov	r2, r6
 800fdbe:	463b      	mov	r3, r7
 800fdc0:	4628      	mov	r0, r5
 800fdc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fdc6:	f000 b817 	b.w	800fdf8 <_write_r>

0800fdca <__sseek>:
 800fdca:	b510      	push	{r4, lr}
 800fdcc:	460c      	mov	r4, r1
 800fdce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdd2:	f000 f845 	bl	800fe60 <_lseek_r>
 800fdd6:	1c43      	adds	r3, r0, #1
 800fdd8:	89a3      	ldrh	r3, [r4, #12]
 800fdda:	bf15      	itete	ne
 800fddc:	6560      	strne	r0, [r4, #84]	; 0x54
 800fdde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fde2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fde6:	81a3      	strheq	r3, [r4, #12]
 800fde8:	bf18      	it	ne
 800fdea:	81a3      	strhne	r3, [r4, #12]
 800fdec:	bd10      	pop	{r4, pc}

0800fdee <__sclose>:
 800fdee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdf2:	f000 b813 	b.w	800fe1c <_close_r>
	...

0800fdf8 <_write_r>:
 800fdf8:	b538      	push	{r3, r4, r5, lr}
 800fdfa:	4d07      	ldr	r5, [pc, #28]	; (800fe18 <_write_r+0x20>)
 800fdfc:	4604      	mov	r4, r0
 800fdfe:	4608      	mov	r0, r1
 800fe00:	4611      	mov	r1, r2
 800fe02:	2200      	movs	r2, #0
 800fe04:	602a      	str	r2, [r5, #0]
 800fe06:	461a      	mov	r2, r3
 800fe08:	f7f3 f958 	bl	80030bc <_write>
 800fe0c:	1c43      	adds	r3, r0, #1
 800fe0e:	d102      	bne.n	800fe16 <_write_r+0x1e>
 800fe10:	682b      	ldr	r3, [r5, #0]
 800fe12:	b103      	cbz	r3, 800fe16 <_write_r+0x1e>
 800fe14:	6023      	str	r3, [r4, #0]
 800fe16:	bd38      	pop	{r3, r4, r5, pc}
 800fe18:	24000e7c 	.word	0x24000e7c

0800fe1c <_close_r>:
 800fe1c:	b538      	push	{r3, r4, r5, lr}
 800fe1e:	4d06      	ldr	r5, [pc, #24]	; (800fe38 <_close_r+0x1c>)
 800fe20:	2300      	movs	r3, #0
 800fe22:	4604      	mov	r4, r0
 800fe24:	4608      	mov	r0, r1
 800fe26:	602b      	str	r3, [r5, #0]
 800fe28:	f7f3 f974 	bl	8003114 <_close>
 800fe2c:	1c43      	adds	r3, r0, #1
 800fe2e:	d102      	bne.n	800fe36 <_close_r+0x1a>
 800fe30:	682b      	ldr	r3, [r5, #0]
 800fe32:	b103      	cbz	r3, 800fe36 <_close_r+0x1a>
 800fe34:	6023      	str	r3, [r4, #0]
 800fe36:	bd38      	pop	{r3, r4, r5, pc}
 800fe38:	24000e7c 	.word	0x24000e7c

0800fe3c <_fstat_r>:
 800fe3c:	b538      	push	{r3, r4, r5, lr}
 800fe3e:	4d07      	ldr	r5, [pc, #28]	; (800fe5c <_fstat_r+0x20>)
 800fe40:	2300      	movs	r3, #0
 800fe42:	4604      	mov	r4, r0
 800fe44:	4608      	mov	r0, r1
 800fe46:	4611      	mov	r1, r2
 800fe48:	602b      	str	r3, [r5, #0]
 800fe4a:	f7f3 f9a3 	bl	8003194 <_fstat>
 800fe4e:	1c43      	adds	r3, r0, #1
 800fe50:	d102      	bne.n	800fe58 <_fstat_r+0x1c>
 800fe52:	682b      	ldr	r3, [r5, #0]
 800fe54:	b103      	cbz	r3, 800fe58 <_fstat_r+0x1c>
 800fe56:	6023      	str	r3, [r4, #0]
 800fe58:	bd38      	pop	{r3, r4, r5, pc}
 800fe5a:	bf00      	nop
 800fe5c:	24000e7c 	.word	0x24000e7c

0800fe60 <_lseek_r>:
 800fe60:	b538      	push	{r3, r4, r5, lr}
 800fe62:	4d07      	ldr	r5, [pc, #28]	; (800fe80 <_lseek_r+0x20>)
 800fe64:	4604      	mov	r4, r0
 800fe66:	4608      	mov	r0, r1
 800fe68:	4611      	mov	r1, r2
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	602a      	str	r2, [r5, #0]
 800fe6e:	461a      	mov	r2, r3
 800fe70:	f7f4 f8b2 	bl	8003fd8 <_lseek>
 800fe74:	1c43      	adds	r3, r0, #1
 800fe76:	d102      	bne.n	800fe7e <_lseek_r+0x1e>
 800fe78:	682b      	ldr	r3, [r5, #0]
 800fe7a:	b103      	cbz	r3, 800fe7e <_lseek_r+0x1e>
 800fe7c:	6023      	str	r3, [r4, #0]
 800fe7e:	bd38      	pop	{r3, r4, r5, pc}
 800fe80:	24000e7c 	.word	0x24000e7c

0800fe84 <__malloc_lock>:
 800fe84:	4801      	ldr	r0, [pc, #4]	; (800fe8c <__malloc_lock+0x8>)
 800fe86:	f7ff be53 	b.w	800fb30 <__retarget_lock_acquire_recursive>
 800fe8a:	bf00      	nop
 800fe8c:	24000e70 	.word	0x24000e70

0800fe90 <__malloc_unlock>:
 800fe90:	4801      	ldr	r0, [pc, #4]	; (800fe98 <__malloc_unlock+0x8>)
 800fe92:	f7ff be4e 	b.w	800fb32 <__retarget_lock_release_recursive>
 800fe96:	bf00      	nop
 800fe98:	24000e70 	.word	0x24000e70

0800fe9c <_read_r>:
 800fe9c:	b538      	push	{r3, r4, r5, lr}
 800fe9e:	4d07      	ldr	r5, [pc, #28]	; (800febc <_read_r+0x20>)
 800fea0:	4604      	mov	r4, r0
 800fea2:	4608      	mov	r0, r1
 800fea4:	4611      	mov	r1, r2
 800fea6:	2200      	movs	r2, #0
 800fea8:	602a      	str	r2, [r5, #0]
 800feaa:	461a      	mov	r2, r3
 800feac:	f7f3 f94a 	bl	8003144 <_read>
 800feb0:	1c43      	adds	r3, r0, #1
 800feb2:	d102      	bne.n	800feba <_read_r+0x1e>
 800feb4:	682b      	ldr	r3, [r5, #0]
 800feb6:	b103      	cbz	r3, 800feba <_read_r+0x1e>
 800feb8:	6023      	str	r3, [r4, #0]
 800feba:	bd38      	pop	{r3, r4, r5, pc}
 800febc:	24000e7c 	.word	0x24000e7c

0800fec0 <_init>:
 800fec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fec2:	bf00      	nop
 800fec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fec6:	bc08      	pop	{r3}
 800fec8:	469e      	mov	lr, r3
 800feca:	4770      	bx	lr

0800fecc <_fini>:
 800fecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fece:	bf00      	nop
 800fed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fed2:	bc08      	pop	{r3}
 800fed4:	469e      	mov	lr, r3
 800fed6:	4770      	bx	lr
