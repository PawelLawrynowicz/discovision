
camera_bsp_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018f70  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007480  08019220  08019220  00029220  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080206a0  080206a0  000306a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080206a8  080206a8  000306a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080206ac  080206ac  000306ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00003524  24000000  080206b0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0001e1dc  24003540  08023bd4  00043540  2**5
                  ALLOC
  8 ._user_heap_stack 00001000  20000000  20000000  00050000  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00043524  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002d23e  00000000  00000000  00043552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005c6d  00000000  00000000  00070790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ba0  00000000  00000000  00076400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001910  00000000  00000000  00077fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003bdc1  00000000  00000000  000798b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002db3b  00000000  00000000  000b5671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00160ce2  00000000  00000000  000e31ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00243e8e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007984  00000000  00000000  00243ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .stab         00000024  00000000  00000000  0024b864  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      0000003f  00000000  00000000  0024b888  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24003540 	.word	0x24003540
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08019208 	.word	0x08019208

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24003544 	.word	0x24003544
 80002ec:	08019208 	.word	0x08019208

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b9a8 	b.w	80006f8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f83a 	bl	8000428 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__aeabi_f2lz>:
 80003c0:	ee07 0a90 	vmov	s15, r0
 80003c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80003c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003cc:	d401      	bmi.n	80003d2 <__aeabi_f2lz+0x12>
 80003ce:	f000 b80b 	b.w	80003e8 <__aeabi_f2ulz>
 80003d2:	eef1 7a67 	vneg.f32	s15, s15
 80003d6:	b508      	push	{r3, lr}
 80003d8:	ee17 0a90 	vmov	r0, s15
 80003dc:	f000 f804 	bl	80003e8 <__aeabi_f2ulz>
 80003e0:	4240      	negs	r0, r0
 80003e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003e6:	bd08      	pop	{r3, pc}

080003e8 <__aeabi_f2ulz>:
 80003e8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000418 <__aeabi_f2ulz+0x30>
 80003ec:	ee07 0a90 	vmov	s15, r0
 80003f0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000420 <__aeabi_f2ulz+0x38>
 80003f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80003f8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80003fc:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000400:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000404:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000408:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800040c:	ee16 1a10 	vmov	r1, s12
 8000410:	ee17 0a90 	vmov	r0, s15
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	00000000 	.word	0x00000000
 800041c:	3df00000 	.word	0x3df00000
 8000420:	00000000 	.word	0x00000000
 8000424:	41f00000 	.word	0x41f00000

08000428 <__udivmoddi4>:
 8000428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800042c:	9d08      	ldr	r5, [sp, #32]
 800042e:	4604      	mov	r4, r0
 8000430:	468e      	mov	lr, r1
 8000432:	2b00      	cmp	r3, #0
 8000434:	d14d      	bne.n	80004d2 <__udivmoddi4+0xaa>
 8000436:	428a      	cmp	r2, r1
 8000438:	4694      	mov	ip, r2
 800043a:	d969      	bls.n	8000510 <__udivmoddi4+0xe8>
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	b152      	cbz	r2, 8000458 <__udivmoddi4+0x30>
 8000442:	fa01 f302 	lsl.w	r3, r1, r2
 8000446:	f1c2 0120 	rsb	r1, r2, #32
 800044a:	fa20 f101 	lsr.w	r1, r0, r1
 800044e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000452:	ea41 0e03 	orr.w	lr, r1, r3
 8000456:	4094      	lsls	r4, r2
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	0c21      	lsrs	r1, r4, #16
 800045e:	fbbe f6f8 	udiv	r6, lr, r8
 8000462:	fa1f f78c 	uxth.w	r7, ip
 8000466:	fb08 e316 	mls	r3, r8, r6, lr
 800046a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800046e:	fb06 f107 	mul.w	r1, r6, r7
 8000472:	4299      	cmp	r1, r3
 8000474:	d90a      	bls.n	800048c <__udivmoddi4+0x64>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f106 30ff 	add.w	r0, r6, #4294967295
 800047e:	f080 811f 	bcs.w	80006c0 <__udivmoddi4+0x298>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 811c 	bls.w	80006c0 <__udivmoddi4+0x298>
 8000488:	3e02      	subs	r6, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f0f8 	udiv	r0, r3, r8
 8000494:	fb08 3310 	mls	r3, r8, r0, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb00 f707 	mul.w	r7, r0, r7
 80004a0:	42a7      	cmp	r7, r4
 80004a2:	d90a      	bls.n	80004ba <__udivmoddi4+0x92>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80004ac:	f080 810a 	bcs.w	80006c4 <__udivmoddi4+0x29c>
 80004b0:	42a7      	cmp	r7, r4
 80004b2:	f240 8107 	bls.w	80006c4 <__udivmoddi4+0x29c>
 80004b6:	4464      	add	r4, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004be:	1be4      	subs	r4, r4, r7
 80004c0:	2600      	movs	r6, #0
 80004c2:	b11d      	cbz	r5, 80004cc <__udivmoddi4+0xa4>
 80004c4:	40d4      	lsrs	r4, r2
 80004c6:	2300      	movs	r3, #0
 80004c8:	e9c5 4300 	strd	r4, r3, [r5]
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d909      	bls.n	80004ea <__udivmoddi4+0xc2>
 80004d6:	2d00      	cmp	r5, #0
 80004d8:	f000 80ef 	beq.w	80006ba <__udivmoddi4+0x292>
 80004dc:	2600      	movs	r6, #0
 80004de:	e9c5 0100 	strd	r0, r1, [r5]
 80004e2:	4630      	mov	r0, r6
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	fab3 f683 	clz	r6, r3
 80004ee:	2e00      	cmp	r6, #0
 80004f0:	d14a      	bne.n	8000588 <__udivmoddi4+0x160>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d302      	bcc.n	80004fc <__udivmoddi4+0xd4>
 80004f6:	4282      	cmp	r2, r0
 80004f8:	f200 80f9 	bhi.w	80006ee <__udivmoddi4+0x2c6>
 80004fc:	1a84      	subs	r4, r0, r2
 80004fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000502:	2001      	movs	r0, #1
 8000504:	469e      	mov	lr, r3
 8000506:	2d00      	cmp	r5, #0
 8000508:	d0e0      	beq.n	80004cc <__udivmoddi4+0xa4>
 800050a:	e9c5 4e00 	strd	r4, lr, [r5]
 800050e:	e7dd      	b.n	80004cc <__udivmoddi4+0xa4>
 8000510:	b902      	cbnz	r2, 8000514 <__udivmoddi4+0xec>
 8000512:	deff      	udf	#255	; 0xff
 8000514:	fab2 f282 	clz	r2, r2
 8000518:	2a00      	cmp	r2, #0
 800051a:	f040 8092 	bne.w	8000642 <__udivmoddi4+0x21a>
 800051e:	eba1 010c 	sub.w	r1, r1, ip
 8000522:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000526:	fa1f fe8c 	uxth.w	lr, ip
 800052a:	2601      	movs	r6, #1
 800052c:	0c20      	lsrs	r0, r4, #16
 800052e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000532:	fb07 1113 	mls	r1, r7, r3, r1
 8000536:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800053a:	fb0e f003 	mul.w	r0, lr, r3
 800053e:	4288      	cmp	r0, r1
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x12c>
 8000542:	eb1c 0101 	adds.w	r1, ip, r1
 8000546:	f103 38ff 	add.w	r8, r3, #4294967295
 800054a:	d202      	bcs.n	8000552 <__udivmoddi4+0x12a>
 800054c:	4288      	cmp	r0, r1
 800054e:	f200 80cb 	bhi.w	80006e8 <__udivmoddi4+0x2c0>
 8000552:	4643      	mov	r3, r8
 8000554:	1a09      	subs	r1, r1, r0
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb1 f0f7 	udiv	r0, r1, r7
 800055c:	fb07 1110 	mls	r1, r7, r0, r1
 8000560:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000564:	fb0e fe00 	mul.w	lr, lr, r0
 8000568:	45a6      	cmp	lr, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x156>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f100 31ff 	add.w	r1, r0, #4294967295
 8000574:	d202      	bcs.n	800057c <__udivmoddi4+0x154>
 8000576:	45a6      	cmp	lr, r4
 8000578:	f200 80bb 	bhi.w	80006f2 <__udivmoddi4+0x2ca>
 800057c:	4608      	mov	r0, r1
 800057e:	eba4 040e 	sub.w	r4, r4, lr
 8000582:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x9a>
 8000588:	f1c6 0720 	rsb	r7, r6, #32
 800058c:	40b3      	lsls	r3, r6
 800058e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000592:	ea4c 0c03 	orr.w	ip, ip, r3
 8000596:	fa20 f407 	lsr.w	r4, r0, r7
 800059a:	fa01 f306 	lsl.w	r3, r1, r6
 800059e:	431c      	orrs	r4, r3
 80005a0:	40f9      	lsrs	r1, r7
 80005a2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80005a6:	fa00 f306 	lsl.w	r3, r0, r6
 80005aa:	fbb1 f8f9 	udiv	r8, r1, r9
 80005ae:	0c20      	lsrs	r0, r4, #16
 80005b0:	fa1f fe8c 	uxth.w	lr, ip
 80005b4:	fb09 1118 	mls	r1, r9, r8, r1
 80005b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005bc:	fb08 f00e 	mul.w	r0, r8, lr
 80005c0:	4288      	cmp	r0, r1
 80005c2:	fa02 f206 	lsl.w	r2, r2, r6
 80005c6:	d90b      	bls.n	80005e0 <__udivmoddi4+0x1b8>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f108 3aff 	add.w	sl, r8, #4294967295
 80005d0:	f080 8088 	bcs.w	80006e4 <__udivmoddi4+0x2bc>
 80005d4:	4288      	cmp	r0, r1
 80005d6:	f240 8085 	bls.w	80006e4 <__udivmoddi4+0x2bc>
 80005da:	f1a8 0802 	sub.w	r8, r8, #2
 80005de:	4461      	add	r1, ip
 80005e0:	1a09      	subs	r1, r1, r0
 80005e2:	b2a4      	uxth	r4, r4
 80005e4:	fbb1 f0f9 	udiv	r0, r1, r9
 80005e8:	fb09 1110 	mls	r1, r9, r0, r1
 80005ec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80005f4:	458e      	cmp	lr, r1
 80005f6:	d908      	bls.n	800060a <__udivmoddi4+0x1e2>
 80005f8:	eb1c 0101 	adds.w	r1, ip, r1
 80005fc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000600:	d26c      	bcs.n	80006dc <__udivmoddi4+0x2b4>
 8000602:	458e      	cmp	lr, r1
 8000604:	d96a      	bls.n	80006dc <__udivmoddi4+0x2b4>
 8000606:	3802      	subs	r0, #2
 8000608:	4461      	add	r1, ip
 800060a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800060e:	fba0 9402 	umull	r9, r4, r0, r2
 8000612:	eba1 010e 	sub.w	r1, r1, lr
 8000616:	42a1      	cmp	r1, r4
 8000618:	46c8      	mov	r8, r9
 800061a:	46a6      	mov	lr, r4
 800061c:	d356      	bcc.n	80006cc <__udivmoddi4+0x2a4>
 800061e:	d053      	beq.n	80006c8 <__udivmoddi4+0x2a0>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x212>
 8000622:	ebb3 0208 	subs.w	r2, r3, r8
 8000626:	eb61 010e 	sbc.w	r1, r1, lr
 800062a:	fa01 f707 	lsl.w	r7, r1, r7
 800062e:	fa22 f306 	lsr.w	r3, r2, r6
 8000632:	40f1      	lsrs	r1, r6
 8000634:	431f      	orrs	r7, r3
 8000636:	e9c5 7100 	strd	r7, r1, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	f1c2 0320 	rsb	r3, r2, #32
 8000646:	40d8      	lsrs	r0, r3
 8000648:	fa0c fc02 	lsl.w	ip, ip, r2
 800064c:	fa21 f303 	lsr.w	r3, r1, r3
 8000650:	4091      	lsls	r1, r2
 8000652:	4301      	orrs	r1, r0
 8000654:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000658:	fa1f fe8c 	uxth.w	lr, ip
 800065c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000660:	fb07 3610 	mls	r6, r7, r0, r3
 8000664:	0c0b      	lsrs	r3, r1, #16
 8000666:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800066a:	fb00 f60e 	mul.w	r6, r0, lr
 800066e:	429e      	cmp	r6, r3
 8000670:	fa04 f402 	lsl.w	r4, r4, r2
 8000674:	d908      	bls.n	8000688 <__udivmoddi4+0x260>
 8000676:	eb1c 0303 	adds.w	r3, ip, r3
 800067a:	f100 38ff 	add.w	r8, r0, #4294967295
 800067e:	d22f      	bcs.n	80006e0 <__udivmoddi4+0x2b8>
 8000680:	429e      	cmp	r6, r3
 8000682:	d92d      	bls.n	80006e0 <__udivmoddi4+0x2b8>
 8000684:	3802      	subs	r0, #2
 8000686:	4463      	add	r3, ip
 8000688:	1b9b      	subs	r3, r3, r6
 800068a:	b289      	uxth	r1, r1
 800068c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000690:	fb07 3316 	mls	r3, r7, r6, r3
 8000694:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000698:	fb06 f30e 	mul.w	r3, r6, lr
 800069c:	428b      	cmp	r3, r1
 800069e:	d908      	bls.n	80006b2 <__udivmoddi4+0x28a>
 80006a0:	eb1c 0101 	adds.w	r1, ip, r1
 80006a4:	f106 38ff 	add.w	r8, r6, #4294967295
 80006a8:	d216      	bcs.n	80006d8 <__udivmoddi4+0x2b0>
 80006aa:	428b      	cmp	r3, r1
 80006ac:	d914      	bls.n	80006d8 <__udivmoddi4+0x2b0>
 80006ae:	3e02      	subs	r6, #2
 80006b0:	4461      	add	r1, ip
 80006b2:	1ac9      	subs	r1, r1, r3
 80006b4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80006b8:	e738      	b.n	800052c <__udivmoddi4+0x104>
 80006ba:	462e      	mov	r6, r5
 80006bc:	4628      	mov	r0, r5
 80006be:	e705      	b.n	80004cc <__udivmoddi4+0xa4>
 80006c0:	4606      	mov	r6, r0
 80006c2:	e6e3      	b.n	800048c <__udivmoddi4+0x64>
 80006c4:	4618      	mov	r0, r3
 80006c6:	e6f8      	b.n	80004ba <__udivmoddi4+0x92>
 80006c8:	454b      	cmp	r3, r9
 80006ca:	d2a9      	bcs.n	8000620 <__udivmoddi4+0x1f8>
 80006cc:	ebb9 0802 	subs.w	r8, r9, r2
 80006d0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80006d4:	3801      	subs	r0, #1
 80006d6:	e7a3      	b.n	8000620 <__udivmoddi4+0x1f8>
 80006d8:	4646      	mov	r6, r8
 80006da:	e7ea      	b.n	80006b2 <__udivmoddi4+0x28a>
 80006dc:	4620      	mov	r0, r4
 80006de:	e794      	b.n	800060a <__udivmoddi4+0x1e2>
 80006e0:	4640      	mov	r0, r8
 80006e2:	e7d1      	b.n	8000688 <__udivmoddi4+0x260>
 80006e4:	46d0      	mov	r8, sl
 80006e6:	e77b      	b.n	80005e0 <__udivmoddi4+0x1b8>
 80006e8:	3b02      	subs	r3, #2
 80006ea:	4461      	add	r1, ip
 80006ec:	e732      	b.n	8000554 <__udivmoddi4+0x12c>
 80006ee:	4630      	mov	r0, r6
 80006f0:	e709      	b.n	8000506 <__udivmoddi4+0xde>
 80006f2:	4464      	add	r4, ip
 80006f4:	3802      	subs	r0, #2
 80006f6:	e742      	b.n	800057e <__udivmoddi4+0x156>

080006f8 <__aeabi_idiv0>:
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop

080006fc <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000700:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <MX_CRC_Init+0x3c>)
 8000702:	4a0e      	ldr	r2, [pc, #56]	; (800073c <MX_CRC_Init+0x40>)
 8000704:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_CRC_Init+0x3c>)
 8000708:	2200      	movs	r2, #0
 800070a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800070c:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <MX_CRC_Init+0x3c>)
 800070e:	2200      	movs	r2, #0
 8000710:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_CRC_Init+0x3c>)
 8000714:	2200      	movs	r2, #0
 8000716:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000718:	4b07      	ldr	r3, [pc, #28]	; (8000738 <MX_CRC_Init+0x3c>)
 800071a:	2200      	movs	r2, #0
 800071c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_CRC_Init+0x3c>)
 8000720:	2201      	movs	r2, #1
 8000722:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000724:	4804      	ldr	r0, [pc, #16]	; (8000738 <MX_CRC_Init+0x3c>)
 8000726:	f004 f967 	bl	80049f8 <HAL_CRC_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000730:	f001 f940 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	2400355c 	.word	0x2400355c
 800073c:	40023000 	.word	0x40023000

08000740 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a0b      	ldr	r2, [pc, #44]	; (800077c <HAL_CRC_MspInit+0x3c>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d10e      	bne.n	8000770 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <HAL_CRC_MspInit+0x40>)
 8000754:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000758:	4a09      	ldr	r2, [pc, #36]	; (8000780 <HAL_CRC_MspInit+0x40>)
 800075a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800075e:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000762:	4b07      	ldr	r3, [pc, #28]	; (8000780 <HAL_CRC_MspInit+0x40>)
 8000764:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000770:	bf00      	nop
 8000772:	3714      	adds	r7, #20
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	40023000 	.word	0x40023000
 8000780:	58024400 	.word	0x58024400

08000784 <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */
//
  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000788:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <MX_DCMI_Init+0x60>)
 800078a:	4a17      	ldr	r2, [pc, #92]	; (80007e8 <MX_DCMI_Init+0x64>)
 800078c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800078e:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <MX_DCMI_Init+0x60>)
 8000790:	2200      	movs	r2, #0
 8000792:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000794:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <MX_DCMI_Init+0x60>)
 8000796:	2220      	movs	r2, #32
 8000798:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 800079a:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <MX_DCMI_Init+0x60>)
 800079c:	2280      	movs	r2, #128	; 0x80
 800079e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 80007a0:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <MX_DCMI_Init+0x60>)
 80007a2:	2240      	movs	r2, #64	; 0x40
 80007a4:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80007a6:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_DCMI_Init+0x60>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80007ac:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <MX_DCMI_Init+0x60>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_DCMI_Init+0x60>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80007b8:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <MX_DCMI_Init+0x60>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_DCMI_Init+0x60>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80007c4:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <MX_DCMI_Init+0x60>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_DCMI_Init+0x60>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80007d0:	4804      	ldr	r0, [pc, #16]	; (80007e4 <MX_DCMI_Init+0x60>)
 80007d2:	f004 fa03 	bl	8004bdc <HAL_DCMI_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80007dc:	f001 f8ea 	bl	80019b4 <Error_Handler>
//  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
//  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
//  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
  /* USER CODE END DCMI_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	24003580 	.word	0x24003580
 80007e8:	48020000 	.word	0x48020000

080007ec <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08e      	sub	sp, #56	; 0x38
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a76      	ldr	r2, [pc, #472]	; (80009e4 <HAL_DCMI_MspInit+0x1f8>)
 800080a:	4293      	cmp	r3, r2
 800080c:	f040 80e5 	bne.w	80009da <HAL_DCMI_MspInit+0x1ee>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */
//
  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000810:	4b75      	ldr	r3, [pc, #468]	; (80009e8 <HAL_DCMI_MspInit+0x1fc>)
 8000812:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8000816:	4a74      	ldr	r2, [pc, #464]	; (80009e8 <HAL_DCMI_MspInit+0x1fc>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 8000820:	4b71      	ldr	r3, [pc, #452]	; (80009e8 <HAL_DCMI_MspInit+0x1fc>)
 8000822:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	623b      	str	r3, [r7, #32]
 800082c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	4b6e      	ldr	r3, [pc, #440]	; (80009e8 <HAL_DCMI_MspInit+0x1fc>)
 8000830:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000834:	4a6c      	ldr	r2, [pc, #432]	; (80009e8 <HAL_DCMI_MspInit+0x1fc>)
 8000836:	f043 0302 	orr.w	r3, r3, #2
 800083a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800083e:	4b6a      	ldr	r3, [pc, #424]	; (80009e8 <HAL_DCMI_MspInit+0x1fc>)
 8000840:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000844:	f003 0302 	and.w	r3, r3, #2
 8000848:	61fb      	str	r3, [r7, #28]
 800084a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800084c:	4b66      	ldr	r3, [pc, #408]	; (80009e8 <HAL_DCMI_MspInit+0x1fc>)
 800084e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000852:	4a65      	ldr	r2, [pc, #404]	; (80009e8 <HAL_DCMI_MspInit+0x1fc>)
 8000854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000858:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800085c:	4b62      	ldr	r3, [pc, #392]	; (80009e8 <HAL_DCMI_MspInit+0x1fc>)
 800085e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000866:	61bb      	str	r3, [r7, #24]
 8000868:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800086a:	4b5f      	ldr	r3, [pc, #380]	; (80009e8 <HAL_DCMI_MspInit+0x1fc>)
 800086c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000870:	4a5d      	ldr	r2, [pc, #372]	; (80009e8 <HAL_DCMI_MspInit+0x1fc>)
 8000872:	f043 0308 	orr.w	r3, r3, #8
 8000876:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800087a:	4b5b      	ldr	r3, [pc, #364]	; (80009e8 <HAL_DCMI_MspInit+0x1fc>)
 800087c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000880:	f003 0308 	and.w	r3, r3, #8
 8000884:	617b      	str	r3, [r7, #20]
 8000886:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000888:	4b57      	ldr	r3, [pc, #348]	; (80009e8 <HAL_DCMI_MspInit+0x1fc>)
 800088a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800088e:	4a56      	ldr	r2, [pc, #344]	; (80009e8 <HAL_DCMI_MspInit+0x1fc>)
 8000890:	f043 0304 	orr.w	r3, r3, #4
 8000894:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000898:	4b53      	ldr	r3, [pc, #332]	; (80009e8 <HAL_DCMI_MspInit+0x1fc>)
 800089a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800089e:	f003 0304 	and.w	r3, r3, #4
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	4b50      	ldr	r3, [pc, #320]	; (80009e8 <HAL_DCMI_MspInit+0x1fc>)
 80008a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ac:	4a4e      	ldr	r2, [pc, #312]	; (80009e8 <HAL_DCMI_MspInit+0x1fc>)
 80008ae:	f043 0301 	orr.w	r3, r3, #1
 80008b2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008b6:	4b4c      	ldr	r3, [pc, #304]	; (80009e8 <HAL_DCMI_MspInit+0x1fc>)
 80008b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008bc:	f003 0301 	and.w	r3, r3, #1
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	68fb      	ldr	r3, [r7, #12]
    PC7     ------> DCMI_D1
    PC6     ------> DCMI_D0
    PA4     ------> DCMI_HSYNC
    PA6     ------> DCMI_PIXCLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_7;
 80008c4:	f44f 7360 	mov.w	r3, #896	; 0x380
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008d6:	230d      	movs	r3, #13
 80008d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008de:	4619      	mov	r1, r3
 80008e0:	4842      	ldr	r0, [pc, #264]	; (80009ec <HAL_DCMI_MspInit+0x200>)
 80008e2:	f008 fbb5 	bl	8009050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008f8:	230d      	movs	r3, #13
 80008fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000900:	4619      	mov	r1, r3
 8000902:	483b      	ldr	r0, [pc, #236]	; (80009f0 <HAL_DCMI_MspInit+0x204>)
 8000904:	f008 fba4 	bl	8009050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000908:	2308      	movs	r3, #8
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000918:	230d      	movs	r3, #13
 800091a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800091c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000920:	4619      	mov	r1, r3
 8000922:	4834      	ldr	r0, [pc, #208]	; (80009f4 <HAL_DCMI_MspInit+0x208>)
 8000924:	f008 fb94 	bl	8009050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6;
 8000928:	f44f 632c 	mov.w	r3, #2752	; 0xac0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	2302      	movs	r3, #2
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800093a:	230d      	movs	r3, #13
 800093c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800093e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000942:	4619      	mov	r1, r3
 8000944:	482c      	ldr	r0, [pc, #176]	; (80009f8 <HAL_DCMI_MspInit+0x20c>)
 8000946:	f008 fb83 	bl	8009050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800094a:	2350      	movs	r3, #80	; 0x50
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800095a:	230d      	movs	r3, #13
 800095c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000962:	4619      	mov	r1, r3
 8000964:	4825      	ldr	r0, [pc, #148]	; (80009fc <HAL_DCMI_MspInit+0x210>)
 8000966:	f008 fb73 	bl	8009050 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 800096a:	4b25      	ldr	r3, [pc, #148]	; (8000a00 <HAL_DCMI_MspInit+0x214>)
 800096c:	4a25      	ldr	r2, [pc, #148]	; (8000a04 <HAL_DCMI_MspInit+0x218>)
 800096e:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI_PSSI;
 8000970:	4b23      	ldr	r3, [pc, #140]	; (8000a00 <HAL_DCMI_MspInit+0x214>)
 8000972:	224b      	movs	r2, #75	; 0x4b
 8000974:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000976:	4b22      	ldr	r3, [pc, #136]	; (8000a00 <HAL_DCMI_MspInit+0x214>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 800097c:	4b20      	ldr	r3, [pc, #128]	; (8000a00 <HAL_DCMI_MspInit+0x214>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8000982:	4b1f      	ldr	r3, [pc, #124]	; (8000a00 <HAL_DCMI_MspInit+0x214>)
 8000984:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000988:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800098a:	4b1d      	ldr	r3, [pc, #116]	; (8000a00 <HAL_DCMI_MspInit+0x214>)
 800098c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000990:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000992:	4b1b      	ldr	r3, [pc, #108]	; (8000a00 <HAL_DCMI_MspInit+0x214>)
 8000994:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000998:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 800099a:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <HAL_DCMI_MspInit+0x214>)
 800099c:	2200      	movs	r2, #0
 800099e:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 80009a0:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <HAL_DCMI_MspInit+0x214>)
 80009a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009a6:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009a8:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <HAL_DCMI_MspInit+0x214>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80009ae:	4814      	ldr	r0, [pc, #80]	; (8000a00 <HAL_DCMI_MspInit+0x214>)
 80009b0:	f004 fbe2 	bl	8005178 <HAL_DMA_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <HAL_DCMI_MspInit+0x1d2>
    {
      Error_Handler();
 80009ba:	f000 fffb 	bl	80019b4 <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a0f      	ldr	r2, [pc, #60]	; (8000a00 <HAL_DCMI_MspInit+0x214>)
 80009c2:	649a      	str	r2, [r3, #72]	; 0x48
 80009c4:	4a0e      	ldr	r2, [pc, #56]	; (8000a00 <HAL_DCMI_MspInit+0x214>)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_PSSI_IRQn, 0, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2100      	movs	r1, #0
 80009ce:	204e      	movs	r0, #78	; 0x4e
 80009d0:	f003 ffdd 	bl	800498e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_PSSI_IRQn);
 80009d4:	204e      	movs	r0, #78	; 0x4e
 80009d6:	f003 fff4 	bl	80049c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */
//
  /* USER CODE END DCMI_MspInit 1 */
  }
}
 80009da:	bf00      	nop
 80009dc:	3738      	adds	r7, #56	; 0x38
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	48020000 	.word	0x48020000
 80009e8:	58024400 	.word	0x58024400
 80009ec:	58020400 	.word	0x58020400
 80009f0:	58021800 	.word	0x58021800
 80009f4:	58020c00 	.word	0x58020c00
 80009f8:	58020800 	.word	0x58020800
 80009fc:	58020000 	.word	0x58020000
 8000a00:	240035d0 	.word	0x240035d0
 8000a04:	40020428 	.word	0x40020428

08000a08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <MX_DMA_Init+0x3c>)
 8000a10:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000a14:	4a0b      	ldr	r2, [pc, #44]	; (8000a44 <MX_DMA_Init+0x3c>)
 8000a16:	f043 0302 	orr.w	r3, r3, #2
 8000a1a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_DMA_Init+0x3c>)
 8000a20:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000a24:	f003 0302 	and.w	r3, r3, #2
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2100      	movs	r1, #0
 8000a30:	2039      	movs	r0, #57	; 0x39
 8000a32:	f003 ffac 	bl	800498e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000a36:	2039      	movs	r0, #57	; 0x39
 8000a38:	f003 ffc3 	bl	80049c2 <HAL_NVIC_EnableIRQ>

}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	58024400 	.word	0x58024400

08000a48 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000a4c:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <MX_DMA2D_Init+0x70>)
 8000a4e:	4a1b      	ldr	r2, [pc, #108]	; (8000abc <MX_DMA2D_Init+0x74>)
 8000a50:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M_PFC;
 8000a52:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <MX_DMA2D_Init+0x70>)
 8000a54:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a58:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8000a5a:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <MX_DMA2D_Init+0x70>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000a60:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <MX_DMA2D_Init+0x70>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000a66:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <MX_DMA2D_Init+0x70>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <MX_DMA2D_Init+0x70>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_DMA2D_Init+0x70>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_DMA2D_Init+0x70>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_DMA2D_Init+0x70>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_DMA2D_Init+0x70>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <MX_DMA2D_Init+0x70>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a90:	4809      	ldr	r0, [pc, #36]	; (8000ab8 <MX_DMA2D_Init+0x70>)
 8000a92:	f007 fa51 	bl	8007f38 <HAL_DMA2D_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_DMA2D_Init+0x58>
  {
    Error_Handler();
 8000a9c:	f000 ff8a 	bl	80019b4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_DMA2D_Init+0x70>)
 8000aa4:	f007 fcd0 	bl	8008448 <HAL_DMA2D_ConfigLayer>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_DMA2D_Init+0x6a>
  {
    Error_Handler();
 8000aae:	f000 ff81 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	24003648 	.word	0x24003648
 8000abc:	52001000 	.word	0x52001000

08000ac0 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a0e      	ldr	r2, [pc, #56]	; (8000b08 <HAL_DMA2D_MspInit+0x48>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d116      	bne.n	8000b00 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <HAL_DMA2D_MspInit+0x4c>)
 8000ad4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000ad8:	4a0c      	ldr	r2, [pc, #48]	; (8000b0c <HAL_DMA2D_MspInit+0x4c>)
 8000ada:	f043 0310 	orr.w	r3, r3, #16
 8000ade:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <HAL_DMA2D_MspInit+0x4c>)
 8000ae4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000ae8:	f003 0310 	and.w	r3, r3, #16
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2100      	movs	r1, #0
 8000af4:	205a      	movs	r0, #90	; 0x5a
 8000af6:	f003 ff4a 	bl	800498e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000afa:	205a      	movs	r0, #90	; 0x5a
 8000afc:	f003 ff61 	bl	80049c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000b00:	bf00      	nop
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	52001000 	.word	0x52001000
 8000b0c:	58024400 	.word	0x58024400

08000b10 <DMA2D_Convert>:
  }
}

/* USER CODE BEGIN 1 */
void DMA2D_Convert(uint8_t* source, uint32_t* destination)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af02      	add	r7, sp, #8
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  status = HAL_DMA2D_Start(&hdma2d, (uint32_t)source,
 8000b1a:	6879      	ldr	r1, [r7, #4]
 8000b1c:	683a      	ldr	r2, [r7, #0]
 8000b1e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b28:	480c      	ldr	r0, [pc, #48]	; (8000b5c <DMA2D_Convert+0x4c>)
 8000b2a:	f007 fa69 	bl	8008000 <HAL_DMA2D_Start>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	73fb      	strb	r3, [r7, #15]
                        (uint32_t)destination, 480, 272);
  if (status != HAL_OK) {
 8000b32:	7bfb      	ldrb	r3, [r7, #15]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <DMA2D_Convert+0x2c>
    Error_Handler();
 8000b38:	f000 ff3c 	bl	80019b4 <Error_Handler>
  }

  status = HAL_DMA2D_PollForTransfer(&hdma2d, 1000);
 8000b3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b40:	4806      	ldr	r0, [pc, #24]	; (8000b5c <DMA2D_Convert+0x4c>)
 8000b42:	f007 fa88 	bl	8008056 <HAL_DMA2D_PollForTransfer>
 8000b46:	4603      	mov	r3, r0
 8000b48:	73fb      	strb	r3, [r7, #15]
  if (status != HAL_OK) {
 8000b4a:	7bfb      	ldrb	r3, [r7, #15]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <DMA2D_Convert+0x44>
    Error_Handler();
 8000b50:	f000 ff30 	bl	80019b4 <Error_Handler>
  }
}
 8000b54:	bf00      	nop
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	24003648 	.word	0x24003648

08000b60 <drawVLine>:
/* Includes ------------------------------------------------------------------*/
#include "draw.h"

void drawVLine(uint32_t *buffer, int32_t x, int32_t y_start, int32_t y_end){
 8000b60:	b480      	push	{r7}
 8000b62:	b087      	sub	sp, #28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
 8000b6c:	603b      	str	r3, [r7, #0]
	if(y_start<0){
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	da01      	bge.n	8000b78 <drawVLine+0x18>
		y_start=0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	607b      	str	r3, [r7, #4]
	}
	if(y_end>LTDC_HEIGHT){
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8000b7e:	dd02      	ble.n	8000b86 <drawVLine+0x26>
		y_end=LTDC_HEIGHT;
 8000b80:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000b84:	603b      	str	r3, [r7, #0]
	}
	for(uint32_t i = y_start; i<y_end; i++){
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	617b      	str	r3, [r7, #20]
 8000b8a:	e011      	b.n	8000bb0 <drawVLine+0x50>
			buffer[(x+i*LTDC_WIDTH)/2] = COLOR;
 8000b8c:	697a      	ldr	r2, [r7, #20]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	011b      	lsls	r3, r3, #4
 8000b92:	1a9b      	subs	r3, r3, r2
 8000b94:	015b      	lsls	r3, r3, #5
 8000b96:	461a      	mov	r2, r3
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	085b      	lsrs	r3, r3, #1
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	68fa      	ldr	r2, [r7, #12]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	f04f 220f 	mov.w	r2, #251662080	; 0xf000f00
 8000ba8:	601a      	str	r2, [r3, #0]
	for(uint32_t i = y_start; i<y_end; i++){
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	3301      	adds	r3, #1
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	697a      	ldr	r2, [r7, #20]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d3e9      	bcc.n	8000b8c <drawVLine+0x2c>
	}
}
 8000bb8:	bf00      	nop
 8000bba:	bf00      	nop
 8000bbc:	371c      	adds	r7, #28
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <drawHLine>:
void drawHLine(uint32_t *buffer, int32_t x_start, int32_t x_end, int32_t y){
 8000bc6:	b480      	push	{r7}
 8000bc8:	b087      	sub	sp, #28
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	60f8      	str	r0, [r7, #12]
 8000bce:	60b9      	str	r1, [r7, #8]
 8000bd0:	607a      	str	r2, [r7, #4]
 8000bd2:	603b      	str	r3, [r7, #0]
	if(x_start<0){
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	da01      	bge.n	8000bde <drawHLine+0x18>
		x_start=0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60bb      	str	r3, [r7, #8]
	}
	if(x_end>LTDC_WIDTH){
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000be4:	dd02      	ble.n	8000bec <drawHLine+0x26>
		x_end=LTDC_WIDTH;
 8000be6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000bea:	607b      	str	r3, [r7, #4]
	}
	x_end=x_end+x_end%2;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f003 0301 	and.w	r3, r3, #1
 8000bf4:	bfb8      	it	lt
 8000bf6:	425b      	neglt	r3, r3
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	607b      	str	r3, [r7, #4]
	for(uint32_t i = x_start/2; i<x_end/2; i++){
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	da00      	bge.n	8000c06 <drawHLine+0x40>
 8000c04:	3301      	adds	r3, #1
 8000c06:	105b      	asrs	r3, r3, #1
 8000c08:	617b      	str	r3, [r7, #20]
 8000c0a:	e01f      	b.n	8000c4c <drawHLine+0x86>
		buffer[i+LTDC_WIDTH*y/2] = COLOR;
 8000c0c:	683a      	ldr	r2, [r7, #0]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	011b      	lsls	r3, r3, #4
 8000c12:	1a9b      	subs	r3, r3, r2
 8000c14:	011b      	lsls	r3, r3, #4
 8000c16:	461a      	mov	r2, r3
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	4413      	add	r3, r2
 8000c22:	f04f 220f 	mov.w	r2, #251662080	; 0xf000f00
 8000c26:	601a      	str	r2, [r3, #0]
		buffer[i+(LTDC_WIDTH+LTDC_WIDTH*y)/2] = COLOR;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	1c5a      	adds	r2, r3, #1
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	011b      	lsls	r3, r3, #4
 8000c30:	1a9b      	subs	r3, r3, r2
 8000c32:	011b      	lsls	r3, r3, #4
 8000c34:	461a      	mov	r2, r3
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	4413      	add	r3, r2
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	68fa      	ldr	r2, [r7, #12]
 8000c3e:	4413      	add	r3, r2
 8000c40:	f04f 220f 	mov.w	r2, #251662080	; 0xf000f00
 8000c44:	601a      	str	r2, [r3, #0]
	for(uint32_t i = x_start/2; i<x_end/2; i++){
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	da00      	bge.n	8000c54 <drawHLine+0x8e>
 8000c52:	3301      	adds	r3, #1
 8000c54:	105b      	asrs	r3, r3, #1
 8000c56:	461a      	mov	r2, r3
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d3d6      	bcc.n	8000c0c <drawHLine+0x46>
	}
}
 8000c5e:	bf00      	nop
 8000c60:	bf00      	nop
 8000c62:	371c      	adds	r7, #28
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <drawCrosshair>:
	drawVLine(buffer, x_end, y_start, y_end);
	drawHLine(buffer, x_start, x_end, y_start);
	drawHLine(buffer, x_start, x_end, y_end);
}

void drawCrosshair(uint32_t *buffer, int32_t x, int32_t y){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
	drawHLine(buffer, x-CROSSHAIR_SIZE, x+CROSSHAIR_SIZE, y);
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	f1a3 010f 	sub.w	r1, r3, #15
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	f103 020f 	add.w	r2, r3, #15
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	68f8      	ldr	r0, [r7, #12]
 8000c88:	f7ff ff9d 	bl	8000bc6 <drawHLine>
	drawVLine(buffer, x, y-CROSSHAIR_SIZE, y+CROSSHAIR_SIZE);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f1a3 020f 	sub.w	r2, r3, #15
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	330f      	adds	r3, #15
 8000c96:	68b9      	ldr	r1, [r7, #8]
 8000c98:	68f8      	ldr	r0, [r7, #12]
 8000c9a:	f7ff ff61 	bl	8000b60 <drawVLine>
}
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram2;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08c      	sub	sp, #48	; 0x30
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]
 8000cbe:	615a      	str	r2, [r3, #20]
 8000cc0:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 8000cc2:	4b3c      	ldr	r3, [pc, #240]	; (8000db4 <MX_FMC_Init+0x10c>)
 8000cc4:	4a3c      	ldr	r2, [pc, #240]	; (8000db8 <MX_FMC_Init+0x110>)
 8000cc6:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 8000cc8:	4b3a      	ldr	r3, [pc, #232]	; (8000db4 <MX_FMC_Init+0x10c>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000cce:	4b39      	ldr	r3, [pc, #228]	; (8000db4 <MX_FMC_Init+0x10c>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000cd4:	4b37      	ldr	r3, [pc, #220]	; (8000db4 <MX_FMC_Init+0x10c>)
 8000cd6:	2204      	movs	r2, #4
 8000cd8:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000cda:	4b36      	ldr	r3, [pc, #216]	; (8000db4 <MX_FMC_Init+0x10c>)
 8000cdc:	2210      	movs	r2, #16
 8000cde:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000ce0:	4b34      	ldr	r3, [pc, #208]	; (8000db4 <MX_FMC_Init+0x10c>)
 8000ce2:	2240      	movs	r2, #64	; 0x40
 8000ce4:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000ce6:	4b33      	ldr	r3, [pc, #204]	; (8000db4 <MX_FMC_Init+0x10c>)
 8000ce8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cec:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000cee:	4b31      	ldr	r3, [pc, #196]	; (8000db4 <MX_FMC_Init+0x10c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000cf4:	4b2f      	ldr	r3, [pc, #188]	; (8000db4 <MX_FMC_Init+0x10c>)
 8000cf6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cfa:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000cfc:	4b2d      	ldr	r3, [pc, #180]	; (8000db4 <MX_FMC_Init+0x10c>)
 8000cfe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d02:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 8000d04:	4b2b      	ldr	r3, [pc, #172]	; (8000db4 <MX_FMC_Init+0x10c>)
 8000d06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d0a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	617b      	str	r3, [r7, #20]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000d10:	2307      	movs	r3, #7
 8000d12:	61bb      	str	r3, [r7, #24]
  SdramTiming.SelfRefreshTime = 5;
 8000d14:	2305      	movs	r3, #5
 8000d16:	61fb      	str	r3, [r7, #28]
  SdramTiming.RowCycleDelay = 6;
 8000d18:	2306      	movs	r3, #6
 8000d1a:	623b      	str	r3, [r7, #32]
  SdramTiming.WriteRecoveryTime = 3;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.RPDelay = 2;
 8000d20:	2302      	movs	r3, #2
 8000d22:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.RCDDelay = 2;
 8000d24:	2302      	movs	r3, #2
 8000d26:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4821      	ldr	r0, [pc, #132]	; (8000db4 <MX_FMC_Init+0x10c>)
 8000d30:	f00c fde2 	bl	800d8f8 <HAL_SDRAM_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_FMC_Init+0x96>
  {
    Error_Handler( );
 8000d3a:	f000 fe3b 	bl	80019b4 <Error_Handler>

  /* USER CODE BEGIN FMC_Init 2 */
  FMC_SDRAM_CommandTypeDef Command;
  /* Step 1 and Step 2 already done in HAL_SDRAM_Init() */
  /* Step 3: Configure a clock configuration enable command */
	Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE; /* Set MODE bits to "001" */
 8000d3e:	2301      	movs	r3, #1
 8000d40:	607b      	str	r3, [r7, #4]
	Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2; /* configure the Target Bank bits */
 8000d42:	2308      	movs	r3, #8
 8000d44:	60bb      	str	r3, [r7, #8]
	Command.AutoRefreshNumber      = 1;
 8000d46:	2301      	movs	r3, #1
 8000d48:	60fb      	str	r3, [r7, #12]
	Command.ModeRegisterDefinition = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
	HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000d54:	4619      	mov	r1, r3
 8000d56:	4817      	ldr	r0, [pc, #92]	; (8000db4 <MX_FMC_Init+0x10c>)
 8000d58:	f00c fe0a 	bl	800d970 <HAL_SDRAM_SendCommand>
	HAL_Delay(1); /* Step 4: Insert 100 us minimum delay - Min HAL Delay is 1ms */
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f003 fd17 	bl	8004790 <HAL_Delay>
	/* Step 5: Configure a PALL (precharge all) command */
	Command.CommandMode            = FMC_SDRAM_CMD_PALL; /* Set MODE bits to "010" */
 8000d62:	2302      	movs	r3, #2
 8000d64:	607b      	str	r3, [r7, #4]
	HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4811      	ldr	r0, [pc, #68]	; (8000db4 <MX_FMC_Init+0x10c>)
 8000d70:	f00c fdfe 	bl	800d970 <HAL_SDRAM_SendCommand>
	/* Step 6: Configure an Auto Refresh command */
	Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE; /* Set MODE bits to "011" */
 8000d74:	2303      	movs	r3, #3
 8000d76:	607b      	str	r3, [r7, #4]
	Command.AutoRefreshNumber      = 2;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	60fb      	str	r3, [r7, #12]
	HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000d82:	4619      	mov	r1, r3
 8000d84:	480b      	ldr	r0, [pc, #44]	; (8000db4 <MX_FMC_Init+0x10c>)
 8000d86:	f00c fdf3 	bl	800d970 <HAL_SDRAM_SendCommand>
	/* Step 7: Program the external memory mode register */
	Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;/*set the MODE bits to "100" */
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	607b      	str	r3, [r7, #4]
	Command.ModeRegisterDefinition =  (uint32_t)0 | 0<<3 | 2<<4 | 0<<7 | 1<<9;
 8000d8e:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000d92:	613b      	str	r3, [r7, #16]
	HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4805      	ldr	r0, [pc, #20]	; (8000db4 <MX_FMC_Init+0x10c>)
 8000d9e:	f00c fde7 	bl	800d970 <HAL_SDRAM_SendCommand>
	/* Step 8: Set the refresh rate counter - refer to section SDRAM refresh timer register in RM0455 */
	/* Set the device refresh rate
	* COUNT = [(SDRAM self refresh time / number of row) x  SDRAM CLK] – 20
					= [(64ms/4096) * 200MHz] - 20 ~= 3115 */
	HAL_SDRAM_ProgramRefreshRate(&hsdram2, 3115);
 8000da2:	f640 412b 	movw	r1, #3115	; 0xc2b
 8000da6:	4803      	ldr	r0, [pc, #12]	; (8000db4 <MX_FMC_Init+0x10c>)
 8000da8:	f00c fe17 	bl	800d9da <HAL_SDRAM_ProgramRefreshRate>
  /* USER CODE END FMC_Init 2 */
}
 8000dac:	bf00      	nop
 8000dae:	3730      	adds	r7, #48	; 0x30
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	240036b0 	.word	0x240036b0
 8000db8:	52004140 	.word	0x52004140

08000dbc <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b0b8      	sub	sp, #224	; 0xe0
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	60da      	str	r2, [r3, #12]
 8000dd0:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000dd2:	4b58      	ldr	r3, [pc, #352]	; (8000f34 <HAL_FMC_MspInit+0x178>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f040 80a7 	bne.w	8000f2a <HAL_FMC_MspInit+0x16e>
    return;
  }
  FMC_Initialized = 1;
 8000ddc:	4b55      	ldr	r3, [pc, #340]	; (8000f34 <HAL_FMC_MspInit+0x178>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000de2:	f107 0308 	add.w	r3, r7, #8
 8000de6:	22c0      	movs	r2, #192	; 0xc0
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f016 fefe 	bl	8017bec <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000df0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.PLL2.PLL2M = 12;
 8000dfc:	230c      	movs	r3, #12
 8000dfe:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2N = 200;
 8000e00:	23c8      	movs	r3, #200	; 0xc8
 8000e02:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000e04:	2302      	movs	r3, #2
 8000e06:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2R = 4;
 8000e0c:	2304      	movs	r3, #4
 8000e0e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000e10:	2340      	movs	r3, #64	; 0x40
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e1c:	f107 0308 	add.w	r3, r7, #8
 8000e20:	4618      	mov	r0, r3
 8000e22:	f00a fe6b 	bl	800bafc <HAL_RCCEx_PeriphCLKConfig>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <HAL_FMC_MspInit+0x74>
    {
      Error_Handler();
 8000e2c:	f000 fdc2 	bl	80019b4 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000e30:	4b41      	ldr	r3, [pc, #260]	; (8000f38 <HAL_FMC_MspInit+0x17c>)
 8000e32:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000e36:	4a40      	ldr	r2, [pc, #256]	; (8000f38 <HAL_FMC_MspInit+0x17c>)
 8000e38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e3c:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8000e40:	4b3d      	ldr	r3, [pc, #244]	; (8000f38 <HAL_FMC_MspInit+0x17c>)
 8000e42:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000e46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]
  PE8   ------> FMC_D5
  PE11   ------> FMC_D8
  PH7   ------> FMC_SDCKE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A15_Pin|A14_Pin
 8000e4e:	f248 1333 	movw	r3, #33075	; 0x8133
 8000e52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |A11_Pin|A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2302      	movs	r3, #2
 8000e58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e62:	2303      	movs	r3, #3
 8000e64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e68:	230c      	movs	r3, #12
 8000e6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e6e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e72:	4619      	mov	r1, r3
 8000e74:	4831      	ldr	r0, [pc, #196]	; (8000f3c <HAL_FMC_MspInit+0x180>)
 8000e76:	f008 f8eb 	bl	8009050 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D3_Pin|D2_Pin|D0_Pin|D1_Pin
 8000e7a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000e7e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |D13_Pin|D15_Pin|D14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e82:	2302      	movs	r3, #2
 8000e84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e94:	230c      	movs	r3, #12
 8000e96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e9a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4827      	ldr	r0, [pc, #156]	; (8000f40 <HAL_FMC_MspInit+0x184>)
 8000ea2:	f008 f8d5 	bl	8009050 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL0_Pin|FMC_NBL1_Pin|D9_Pin|D4_Pin
 8000ea6:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000eaa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |D10_Pin|D11_Pin|D7_Pin|D6_Pin
                          |D12_Pin|D5_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ec0:	230c      	movs	r3, #12
 8000ec2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ec6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000eca:	4619      	mov	r1, r3
 8000ecc:	481d      	ldr	r0, [pc, #116]	; (8000f44 <HAL_FMC_MspInit+0x188>)
 8000ece:	f008 f8bf 	bl	8009050 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A1_Pin|A0_Pin|A2_Pin|A4_Pin
 8000ed2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000ed6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |A3_Pin|A5_Pin|A7_Pin|SDNRAS_Pin
                          |A9_Pin|A8_Pin|A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000eec:	230c      	movs	r3, #12
 8000eee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ef2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4813      	ldr	r0, [pc, #76]	; (8000f48 <HAL_FMC_MspInit+0x18c>)
 8000efa:	f008 f8a9 	bl	8009050 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNE1_Pin|SDNWE_Pin|SDCKE1_Pin;
 8000efe:	23e0      	movs	r3, #224	; 0xe0
 8000f00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f10:	2303      	movs	r3, #3
 8000f12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f16:	230c      	movs	r3, #12
 8000f18:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f1c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f20:	4619      	mov	r1, r3
 8000f22:	480a      	ldr	r0, [pc, #40]	; (8000f4c <HAL_FMC_MspInit+0x190>)
 8000f24:	f008 f894 	bl	8009050 <HAL_GPIO_Init>
 8000f28:	e000      	b.n	8000f2c <HAL_FMC_MspInit+0x170>
    return;
 8000f2a:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000f2c:	37e0      	adds	r7, #224	; 0xe0
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	240036e4 	.word	0x240036e4
 8000f38:	58024400 	.word	0x58024400
 8000f3c:	58021800 	.word	0x58021800
 8000f40:	58020c00 	.word	0x58020c00
 8000f44:	58021000 	.word	0x58021000
 8000f48:	58021400 	.word	0x58021400
 8000f4c:	58021c00 	.word	0x58021c00

08000f50 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000f58:	f7ff ff30 	bl	8000dbc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <MX_GPIO_Init>:
     PA0   ------> I2S6_WS
     PA3   ------> I2S6_MCK
     PB2   ------> OCTOSPIM_P1_CLK
*/
void MX_GPIO_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b090      	sub	sp, #64	; 0x40
 8000f68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
 8000f78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f7a:	4bc0      	ldr	r3, [pc, #768]	; (800127c <MX_GPIO_Init+0x318>)
 8000f7c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f80:	4abe      	ldr	r2, [pc, #760]	; (800127c <MX_GPIO_Init+0x318>)
 8000f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f86:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f8a:	4bbc      	ldr	r3, [pc, #752]	; (800127c <MX_GPIO_Init+0x318>)
 8000f8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f94:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f98:	4bb8      	ldr	r3, [pc, #736]	; (800127c <MX_GPIO_Init+0x318>)
 8000f9a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f9e:	4ab7      	ldr	r2, [pc, #732]	; (800127c <MX_GPIO_Init+0x318>)
 8000fa0:	f043 0302 	orr.w	r3, r3, #2
 8000fa4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000fa8:	4bb4      	ldr	r3, [pc, #720]	; (800127c <MX_GPIO_Init+0x318>)
 8000faa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8000fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fb6:	4bb1      	ldr	r3, [pc, #708]	; (800127c <MX_GPIO_Init+0x318>)
 8000fb8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fbc:	4aaf      	ldr	r2, [pc, #700]	; (800127c <MX_GPIO_Init+0x318>)
 8000fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fc2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000fc6:	4bad      	ldr	r3, [pc, #692]	; (800127c <MX_GPIO_Init+0x318>)
 8000fc8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fd0:	623b      	str	r3, [r7, #32]
 8000fd2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000fd4:	4ba9      	ldr	r3, [pc, #676]	; (800127c <MX_GPIO_Init+0x318>)
 8000fd6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fda:	4aa8      	ldr	r2, [pc, #672]	; (800127c <MX_GPIO_Init+0x318>)
 8000fdc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fe0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000fe4:	4ba5      	ldr	r3, [pc, #660]	; (800127c <MX_GPIO_Init+0x318>)
 8000fe6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fee:	61fb      	str	r3, [r7, #28]
 8000ff0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff2:	4ba2      	ldr	r3, [pc, #648]	; (800127c <MX_GPIO_Init+0x318>)
 8000ff4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ff8:	4aa0      	ldr	r2, [pc, #640]	; (800127c <MX_GPIO_Init+0x318>)
 8000ffa:	f043 0308 	orr.w	r3, r3, #8
 8000ffe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001002:	4b9e      	ldr	r3, [pc, #632]	; (800127c <MX_GPIO_Init+0x318>)
 8001004:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001008:	f003 0308 	and.w	r3, r3, #8
 800100c:	61bb      	str	r3, [r7, #24]
 800100e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001010:	4b9a      	ldr	r3, [pc, #616]	; (800127c <MX_GPIO_Init+0x318>)
 8001012:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001016:	4a99      	ldr	r2, [pc, #612]	; (800127c <MX_GPIO_Init+0x318>)
 8001018:	f043 0304 	orr.w	r3, r3, #4
 800101c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001020:	4b96      	ldr	r3, [pc, #600]	; (800127c <MX_GPIO_Init+0x318>)
 8001022:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001026:	f003 0304 	and.w	r3, r3, #4
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800102e:	4b93      	ldr	r3, [pc, #588]	; (800127c <MX_GPIO_Init+0x318>)
 8001030:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001034:	4a91      	ldr	r2, [pc, #580]	; (800127c <MX_GPIO_Init+0x318>)
 8001036:	f043 0310 	orr.w	r3, r3, #16
 800103a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800103e:	4b8f      	ldr	r3, [pc, #572]	; (800127c <MX_GPIO_Init+0x318>)
 8001040:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001044:	f003 0310 	and.w	r3, r3, #16
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800104c:	4b8b      	ldr	r3, [pc, #556]	; (800127c <MX_GPIO_Init+0x318>)
 800104e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001052:	4a8a      	ldr	r2, [pc, #552]	; (800127c <MX_GPIO_Init+0x318>)
 8001054:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001058:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800105c:	4b87      	ldr	r3, [pc, #540]	; (800127c <MX_GPIO_Init+0x318>)
 800105e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001062:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	4b84      	ldr	r3, [pc, #528]	; (800127c <MX_GPIO_Init+0x318>)
 800106c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001070:	4a82      	ldr	r2, [pc, #520]	; (800127c <MX_GPIO_Init+0x318>)
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800107a:	4b80      	ldr	r3, [pc, #512]	; (800127c <MX_GPIO_Init+0x318>)
 800107c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001088:	4b7c      	ldr	r3, [pc, #496]	; (800127c <MX_GPIO_Init+0x318>)
 800108a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800108e:	4a7b      	ldr	r2, [pc, #492]	; (800127c <MX_GPIO_Init+0x318>)
 8001090:	f043 0320 	orr.w	r3, r3, #32
 8001094:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001098:	4b78      	ldr	r3, [pc, #480]	; (800127c <MX_GPIO_Init+0x318>)
 800109a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800109e:	f003 0320 	and.w	r3, r3, #32
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010a6:	4b75      	ldr	r3, [pc, #468]	; (800127c <MX_GPIO_Init+0x318>)
 80010a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010ac:	4a73      	ldr	r2, [pc, #460]	; (800127c <MX_GPIO_Init+0x318>)
 80010ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010b2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010b6:	4b71      	ldr	r3, [pc, #452]	; (800127c <MX_GPIO_Init+0x318>)
 80010b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010c0:	603b      	str	r3, [r7, #0]
 80010c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin, GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	210e      	movs	r1, #14
 80010c8:	486d      	ldr	r0, [pc, #436]	; (8001280 <MX_GPIO_Init+0x31c>)
 80010ca:	f008 fa7b 	bl	80095c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USER_LED1_Pin|USER_LED2_Pin, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	f640 0104 	movw	r1, #2052	; 0x804
 80010d4:	486b      	ldr	r0, [pc, #428]	; (8001284 <MX_GPIO_Init+0x320>)
 80010d6:	f008 fa75 	bl	80095c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010e0:	4869      	ldr	r0, [pc, #420]	; (8001288 <MX_GPIO_Init+0x324>)
 80010e2:	f008 fa6f 	bl	80095c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_NRST_GPIO_Port, AUDIO_NRST_Pin, GPIO_PIN_SET);
 80010e6:	2201      	movs	r2, #1
 80010e8:	2108      	movs	r1, #8
 80010ea:	4866      	ldr	r0, [pc, #408]	; (8001284 <MX_GPIO_Init+0x320>)
 80010ec:	f008 fa6a 	bl	80095c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_SET);
 80010f0:	2201      	movs	r2, #1
 80010f2:	2106      	movs	r1, #6
 80010f4:	4864      	ldr	r0, [pc, #400]	; (8001288 <MX_GPIO_Init+0x324>)
 80010f6:	f008 fa65 	bl	80095c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = WIFI_GPIO_Pin|WIFI_DATRDY_Pin;
 80010fa:	2330      	movs	r3, #48	; 0x30
 80010fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001102:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001108:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800110c:	4619      	mov	r1, r3
 800110e:	485c      	ldr	r0, [pc, #368]	; (8001280 <MX_GPIO_Init+0x31c>)
 8001110:	f007 ff9e 	bl	8009050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = I2S6_SDO_Pin|I2S6_SDI_Pin|I2S6_CK_Pin;
 8001114:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2300      	movs	r3, #0
 8001124:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8001126:	2305      	movs	r3, #5
 8001128:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800112a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800112e:	4619      	mov	r1, r3
 8001130:	4854      	ldr	r0, [pc, #336]	; (8001284 <MX_GPIO_Init+0x320>)
 8001132:	f007 ff8d 	bl	8009050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 8001136:	f44f 7300 	mov.w	r3, #512	; 0x200
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001144:	2303      	movs	r3, #3
 8001146:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001148:	2309      	movs	r3, #9
 800114a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 800114c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001150:	4619      	mov	r1, r3
 8001152:	484c      	ldr	r0, [pc, #304]	; (8001284 <MX_GPIO_Init+0x320>)
 8001154:	f007 ff7c 	bl	8009050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO7_Pin;
 8001158:	2380      	movs	r3, #128	; 0x80
 800115a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001164:	2303      	movs	r3, #3
 8001166:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001168:	230a      	movs	r3, #10
 800116a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO7_GPIO_Port, &GPIO_InitStruct);
 800116c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001170:	4619      	mov	r1, r3
 8001172:	4846      	ldr	r0, [pc, #280]	; (800128c <MX_GPIO_Init+0x328>)
 8001174:	f007 ff6c 	bl	8009050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin;
 8001178:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 800117c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001186:	2303      	movs	r3, #3
 8001188:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800118a:	230c      	movs	r3, #12
 800118c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800118e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001192:	4619      	mov	r1, r3
 8001194:	483e      	ldr	r0, [pc, #248]	; (8001290 <MX_GPIO_Init+0x32c>)
 8001196:	f007 ff5b 	bl	8009050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin;
 800119a:	230e      	movs	r3, #14
 800119c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119e:	2301      	movs	r3, #1
 80011a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80011aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011ae:	4619      	mov	r1, r3
 80011b0:	4833      	ldr	r0, [pc, #204]	; (8001280 <MX_GPIO_Init+0x31c>)
 80011b2:	f007 ff4d 	bl	8009050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = USER_LED1_Pin|AUDIO_NRST_Pin|USER_LED2_Pin;
 80011b6:	f640 030c 	movw	r3, #2060	; 0x80c
 80011ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011bc:	2301      	movs	r3, #1
 80011be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2300      	movs	r3, #0
 80011c6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011cc:	4619      	mov	r1, r3
 80011ce:	482d      	ldr	r0, [pc, #180]	; (8001284 <MX_GPIO_Init+0x320>)
 80011d0:	f007 ff3e 	bl	8009050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 80011d4:	2304      	movs	r3, #4
 80011d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e0:	2303      	movs	r3, #3
 80011e2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80011e4:	230c      	movs	r3, #12
 80011e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 80011e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011ec:	4619      	mov	r1, r3
 80011ee:	4827      	ldr	r0, [pc, #156]	; (800128c <MX_GPIO_Init+0x328>)
 80011f0:	f007 ff2e 	bl	8009050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80011f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001200:	2301      	movs	r3, #1
 8001202:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001204:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001208:	4619      	mov	r1, r3
 800120a:	481d      	ldr	r0, [pc, #116]	; (8001280 <MX_GPIO_Init+0x31c>)
 800120c:	f007 ff20 	bl	8009050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_SCK_Pin;
 8001210:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001214:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2300      	movs	r3, #0
 8001220:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001222:	2305      	movs	r3, #5
 8001224:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001226:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800122a:	4619      	mov	r1, r3
 800122c:	4816      	ldr	r0, [pc, #88]	; (8001288 <MX_GPIO_Init+0x324>)
 800122e:	f007 ff0f 	bl	8009050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin;
 8001232:	f640 0306 	movw	r3, #2054	; 0x806
 8001236:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001238:	2301      	movs	r3, #1
 800123a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001240:	2300      	movs	r3, #0
 8001242:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001244:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001248:	4619      	mov	r1, r3
 800124a:	480f      	ldr	r0, [pc, #60]	; (8001288 <MX_GPIO_Init+0x324>)
 800124c:	f007 ff00 	bl	8009050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 8001250:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001254:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001256:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800125a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8001260:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001264:	4619      	mov	r1, r3
 8001266:	480a      	ldr	r0, [pc, #40]	; (8001290 <MX_GPIO_Init+0x32c>)
 8001268:	f007 fef2 	bl	8009050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCO_Pin;
 800126c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001270:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001272:	2302      	movs	r3, #2
 8001274:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	e00c      	b.n	8001294 <MX_GPIO_Init+0x330>
 800127a:	bf00      	nop
 800127c:	58024400 	.word	0x58024400
 8001280:	58022000 	.word	0x58022000
 8001284:	58021800 	.word	0x58021800
 8001288:	58020000 	.word	0x58020000
 800128c:	58020c00 	.word	0x58020c00
 8001290:	58020800 	.word	0x58020800
 8001294:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	2300      	movs	r3, #0
 8001298:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800129a:	2300      	movs	r3, #0
 800129c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 800129e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012a2:	4619      	mov	r1, r3
 80012a4:	4842      	ldr	r0, [pc, #264]	; (80013b0 <MX_GPIO_Init+0x44c>)
 80012a6:	f007 fed3 	bl	8009050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 80012aa:	2340      	movs	r3, #64	; 0x40
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b6:	2303      	movs	r3, #3
 80012b8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80012ba:	230a      	movs	r3, #10
 80012bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 80012be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012c2:	4619      	mov	r1, r3
 80012c4:	483b      	ldr	r0, [pc, #236]	; (80013b4 <MX_GPIO_Init+0x450>)
 80012c6:	f007 fec3 	bl	8009050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 80012ca:	230c      	movs	r3, #12
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ce:	2302      	movs	r3, #2
 80012d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	2300      	movs	r3, #0
 80012d8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012da:	2305      	movs	r3, #5
 80012dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012e2:	4619      	mov	r1, r3
 80012e4:	4834      	ldr	r0, [pc, #208]	; (80013b8 <MX_GPIO_Init+0x454>)
 80012e6:	f007 feb3 	bl	8009050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 80012ea:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80012ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012f0:	2312      	movs	r3, #18
 80012f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012f4:	2301      	movs	r3, #1
 80012f6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	2300      	movs	r3, #0
 80012fa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80012fc:	2304      	movs	r3, #4
 80012fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001300:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001304:	4619      	mov	r1, r3
 8001306:	482d      	ldr	r0, [pc, #180]	; (80013bc <MX_GPIO_Init+0x458>)
 8001308:	f007 fea2 	bl	8009050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OCSPI1_IO4_Pin|OCSPI1_DQS_Pin;
 800130c:	2322      	movs	r3, #34	; 0x22
 800130e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001310:	2302      	movs	r3, #2
 8001312:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001318:	2303      	movs	r3, #3
 800131a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800131c:	230a      	movs	r3, #10
 800131e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001320:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001324:	4619      	mov	r1, r3
 8001326:	4824      	ldr	r0, [pc, #144]	; (80013b8 <MX_GPIO_Init+0x454>)
 8001328:	f007 fe92 	bl	8009050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800132c:	2304      	movs	r3, #4
 800132e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001330:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001334:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800133a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800133e:	4619      	mov	r1, r3
 8001340:	481f      	ldr	r0, [pc, #124]	; (80013c0 <MX_GPIO_Init+0x45c>)
 8001342:	f007 fe85 	bl	8009050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO5_Pin;
 8001346:	2308      	movs	r3, #8
 8001348:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001356:	2309      	movs	r3, #9
 8001358:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO5_GPIO_Port, &GPIO_InitStruct);
 800135a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800135e:	4619      	mov	r1, r3
 8001360:	4817      	ldr	r0, [pc, #92]	; (80013c0 <MX_GPIO_Init+0x45c>)
 8001362:	f007 fe75 	bl	8009050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = I2S6_WS_Pin|I2S6_MCK_Pin;
 8001366:	2309      	movs	r3, #9
 8001368:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2300      	movs	r3, #0
 8001374:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8001376:	2305      	movs	r3, #5
 8001378:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800137e:	4619      	mov	r1, r3
 8001380:	480b      	ldr	r0, [pc, #44]	; (80013b0 <MX_GPIO_Init+0x44c>)
 8001382:	f007 fe65 	bl	8009050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 8001386:	2304      	movs	r3, #4
 8001388:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001392:	2303      	movs	r3, #3
 8001394:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001396:	2309      	movs	r3, #9
 8001398:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 800139a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800139e:	4619      	mov	r1, r3
 80013a0:	4808      	ldr	r0, [pc, #32]	; (80013c4 <MX_GPIO_Init+0x460>)
 80013a2:	f007 fe55 	bl	8009050 <HAL_GPIO_Init>

}
 80013a6:	bf00      	nop
 80013a8:	3740      	adds	r7, #64	; 0x40
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	58020000 	.word	0x58020000
 80013b4:	58021800 	.word	0x58021800
 80013b8:	58020800 	.word	0x58020800
 80013bc:	58020c00 	.word	0x58020c00
 80013c0:	58021c00 	.word	0x58021c00
 80013c4:	58020400 	.word	0x58020400

080013c8 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08e      	sub	sp, #56	; 0x38
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	2234      	movs	r2, #52	; 0x34
 80013d2:	2100      	movs	r1, #0
 80013d4:	4618      	mov	r0, r3
 80013d6:	f016 fc09 	bl	8017bec <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80013da:	4b38      	ldr	r3, [pc, #224]	; (80014bc <MX_LTDC_Init+0xf4>)
 80013dc:	4a38      	ldr	r2, [pc, #224]	; (80014c0 <MX_LTDC_Init+0xf8>)
 80013de:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80013e0:	4b36      	ldr	r3, [pc, #216]	; (80014bc <MX_LTDC_Init+0xf4>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80013e6:	4b35      	ldr	r3, [pc, #212]	; (80014bc <MX_LTDC_Init+0xf4>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AH;
 80013ec:	4b33      	ldr	r3, [pc, #204]	; (80014bc <MX_LTDC_Init+0xf4>)
 80013ee:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80013f2:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80013f4:	4b31      	ldr	r3, [pc, #196]	; (80014bc <MX_LTDC_Init+0xf4>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80013fa:	4b30      	ldr	r3, [pc, #192]	; (80014bc <MX_LTDC_Init+0xf4>)
 80013fc:	2207      	movs	r2, #7
 80013fe:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001400:	4b2e      	ldr	r3, [pc, #184]	; (80014bc <MX_LTDC_Init+0xf4>)
 8001402:	2203      	movs	r2, #3
 8001404:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8001406:	4b2d      	ldr	r3, [pc, #180]	; (80014bc <MX_LTDC_Init+0xf4>)
 8001408:	220e      	movs	r2, #14
 800140a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 800140c:	4b2b      	ldr	r3, [pc, #172]	; (80014bc <MX_LTDC_Init+0xf4>)
 800140e:	2205      	movs	r2, #5
 8001410:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8001412:	4b2a      	ldr	r3, [pc, #168]	; (80014bc <MX_LTDC_Init+0xf4>)
 8001414:	f240 228e 	movw	r2, #654	; 0x28e
 8001418:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800141a:	4b28      	ldr	r3, [pc, #160]	; (80014bc <MX_LTDC_Init+0xf4>)
 800141c:	f240 12e5 	movw	r2, #485	; 0x1e5
 8001420:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8001422:	4b26      	ldr	r3, [pc, #152]	; (80014bc <MX_LTDC_Init+0xf4>)
 8001424:	f44f 7225 	mov.w	r2, #660	; 0x294
 8001428:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 800142a:	4b24      	ldr	r3, [pc, #144]	; (80014bc <MX_LTDC_Init+0xf4>)
 800142c:	f240 12e7 	movw	r2, #487	; 0x1e7
 8001430:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001432:	4b22      	ldr	r3, [pc, #136]	; (80014bc <MX_LTDC_Init+0xf4>)
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800143a:	4b20      	ldr	r3, [pc, #128]	; (80014bc <MX_LTDC_Init+0xf4>)
 800143c:	2200      	movs	r2, #0
 800143e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001442:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <MX_LTDC_Init+0xf4>)
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800144a:	481c      	ldr	r0, [pc, #112]	; (80014bc <MX_LTDC_Init+0xf4>)
 800144c:	f008 ff5a 	bl	800a304 <HAL_LTDC_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_LTDC_Init+0x92>
  {
    Error_Handler();
 8001456:	f000 faad 	bl	80019b4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800146a:	2302      	movs	r3, #2
 800146c:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800147a:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800147c:	2305      	movs	r3, #5
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	2200      	movs	r2, #0
 80014a2:	4619      	mov	r1, r3
 80014a4:	4805      	ldr	r0, [pc, #20]	; (80014bc <MX_LTDC_Init+0xf4>)
 80014a6:	f009 f8bf 	bl	800a628 <HAL_LTDC_ConfigLayer>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 80014b0:	f000 fa80 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80014b4:	bf00      	nop
 80014b6:	3738      	adds	r7, #56	; 0x38
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	240036e8 	.word	0x240036e8
 80014c0:	50001000 	.word	0x50001000

080014c4 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b0bc      	sub	sp, #240	; 0xf0
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014dc:	f107 0318 	add.w	r3, r7, #24
 80014e0:	22c0      	movs	r2, #192	; 0xc0
 80014e2:	2100      	movs	r1, #0
 80014e4:	4618      	mov	r0, r3
 80014e6:	f016 fb81 	bl	8017bec <memset>
  if(ltdcHandle->Instance==LTDC)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a5a      	ldr	r2, [pc, #360]	; (8001658 <HAL_LTDC_MspInit+0x194>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	f040 80ad 	bne.w	8001650 <HAL_LTDC_MspInit+0x18c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80014f6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80014fa:	f04f 0300 	mov.w	r3, #0
 80014fe:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 8001502:	2318      	movs	r3, #24
 8001504:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8001506:	23c0      	movs	r3, #192	; 0xc0
 8001508:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 17;
 800150a:	2311      	movs	r3, #17
 800150c:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800150e:	2302      	movs	r3, #2
 8001510:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 16;
 8001512:	2310      	movs	r3, #16
 8001514:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8001516:	2300      	movs	r3, #0
 8001518:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800151a:	2300      	movs	r3, #0
 800151c:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001522:	f107 0318 	add.w	r3, r7, #24
 8001526:	4618      	mov	r0, r3
 8001528:	f00a fae8 	bl	800bafc <HAL_RCCEx_PeriphCLKConfig>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_LTDC_MspInit+0x72>
    {
      Error_Handler();
 8001532:	f000 fa3f 	bl	80019b4 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001536:	4b49      	ldr	r3, [pc, #292]	; (800165c <HAL_LTDC_MspInit+0x198>)
 8001538:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800153c:	4a47      	ldr	r2, [pc, #284]	; (800165c <HAL_LTDC_MspInit+0x198>)
 800153e:	f043 0308 	orr.w	r3, r3, #8
 8001542:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 8001546:	4b45      	ldr	r3, [pc, #276]	; (800165c <HAL_LTDC_MspInit+0x198>)
 8001548:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800154c:	f003 0308 	and.w	r3, r3, #8
 8001550:	617b      	str	r3, [r7, #20]
 8001552:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001554:	4b41      	ldr	r3, [pc, #260]	; (800165c <HAL_LTDC_MspInit+0x198>)
 8001556:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800155a:	4a40      	ldr	r2, [pc, #256]	; (800165c <HAL_LTDC_MspInit+0x198>)
 800155c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001560:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001564:	4b3d      	ldr	r3, [pc, #244]	; (800165c <HAL_LTDC_MspInit+0x198>)
 8001566:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800156a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001572:	4b3a      	ldr	r3, [pc, #232]	; (800165c <HAL_LTDC_MspInit+0x198>)
 8001574:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001578:	4a38      	ldr	r2, [pc, #224]	; (800165c <HAL_LTDC_MspInit+0x198>)
 800157a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800157e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001582:	4b36      	ldr	r3, [pc, #216]	; (800165c <HAL_LTDC_MspInit+0x198>)
 8001584:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001588:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001590:	4b32      	ldr	r3, [pc, #200]	; (800165c <HAL_LTDC_MspInit+0x198>)
 8001592:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001596:	4a31      	ldr	r2, [pc, #196]	; (800165c <HAL_LTDC_MspInit+0x198>)
 8001598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800159c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80015a0:	4b2e      	ldr	r3, [pc, #184]	; (800165c <HAL_LTDC_MspInit+0x198>)
 80015a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	68bb      	ldr	r3, [r7, #8]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_B4_Pin|LCD_B5_Pin
 80015ae:	23ff      	movs	r3, #255	; 0xff
 80015b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_DE_Pin|LCD_G7_Pin|LCD_G6_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c0:	2303      	movs	r3, #3
 80015c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015c6:	230e      	movs	r3, #14
 80015c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80015cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015d0:	4619      	mov	r1, r3
 80015d2:	4823      	ldr	r0, [pc, #140]	; (8001660 <HAL_LTDC_MspInit+0x19c>)
 80015d4:	f007 fd3c 	bl	8009050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B3_Pin|LCD_B2_Pin|LCD_B1_Pin|LCD_B0_Pin
 80015d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_G4_Pin|LCD_G3_Pin|LCD_G2_Pin|LCD_G1_Pin
                          |LCD_R7_Pin|LCD_G0_Pin|LCD_R1_Pin|LCD_R6_Pin
                          |LCD_R2_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e0:	2302      	movs	r3, #2
 80015e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ec:	2303      	movs	r3, #3
 80015ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015f2:	230e      	movs	r3, #14
 80015f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80015f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015fc:	4619      	mov	r1, r3
 80015fe:	4819      	ldr	r0, [pc, #100]	; (8001664 <HAL_LTDC_MspInit+0x1a0>)
 8001600:	f007 fd26 	bl	8009050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_CLK_Pin|LCD_VSYNC_Pin|LCD_R0_Pin;
 8001604:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001608:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160c:	2302      	movs	r3, #2
 800160e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001618:	2303      	movs	r3, #3
 800161a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800161e:	230e      	movs	r3, #14
 8001620:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001624:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001628:	4619      	mov	r1, r3
 800162a:	480f      	ldr	r0, [pc, #60]	; (8001668 <HAL_LTDC_MspInit+0x1a4>)
 800162c:	f007 fd10 	bl	8009050 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001630:	2200      	movs	r2, #0
 8001632:	2100      	movs	r1, #0
 8001634:	2058      	movs	r0, #88	; 0x58
 8001636:	f003 f9aa 	bl	800498e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800163a:	2058      	movs	r0, #88	; 0x58
 800163c:	f003 f9c1 	bl	80049c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 8001640:	2200      	movs	r2, #0
 8001642:	2100      	movs	r1, #0
 8001644:	2059      	movs	r0, #89	; 0x59
 8001646:	f003 f9a2 	bl	800498e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 800164a:	2059      	movs	r0, #89	; 0x59
 800164c:	f003 f9b9 	bl	80049c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001650:	bf00      	nop
 8001652:	37f0      	adds	r7, #240	; 0xf0
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	50001000 	.word	0x50001000
 800165c:	58024400 	.word	0x58024400
 8001660:	58022800 	.word	0x58022800
 8001664:	58022400 	.word	0x58022400
 8001668:	58022000 	.word	0x58022000

0800166c <LTDC_Init_from_buffer>:
  /* USER CODE END LTDC_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void LTDC_Init_from_buffer(uint32_t* buffer){
 800166c:	b580      	push	{r7, lr}
 800166e:	b090      	sub	sp, #64	; 0x40
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001674:	f107 030c 	add.w	r3, r7, #12
 8001678:	2234      	movs	r2, #52	; 0x34
 800167a:	2100      	movs	r1, #0
 800167c:	4618      	mov	r0, r3
 800167e:	f016 fab5 	bl	8017bec <memset>
	pLayerCfg.WindowX0 = 28;
 8001682:	231c      	movs	r3, #28
 8001684:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = 508;
 8001686:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 800168a:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 6;
 800168c:	2306      	movs	r3, #6
 800168e:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = 278;
 8001690:	f44f 738b 	mov.w	r3, #278	; 0x116
 8001694:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001696:	2302      	movs	r3, #2
 8001698:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 800169a:	23ff      	movs	r3, #255	; 0xff
 800169c:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80016a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016a6:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80016a8:	2305      	movs	r3, #5
 80016aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.FBStartAdress = (uint32_t)buffer;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.ImageWidth = 480;
 80016b0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80016b4:	637b      	str	r3, [r7, #52]	; 0x34
	pLayerCfg.ImageHeight = 272;
 80016b6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80016ba:	63bb      	str	r3, [r7, #56]	; 0x38
	pLayerCfg.Backcolor.Blue = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	pLayerCfg.Backcolor.Green = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	pLayerCfg.Backcolor.Red = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80016ce:	f107 030c 	add.w	r3, r7, #12
 80016d2:	2200      	movs	r2, #0
 80016d4:	4619      	mov	r1, r3
 80016d6:	4806      	ldr	r0, [pc, #24]	; (80016f0 <LTDC_Init_from_buffer+0x84>)
 80016d8:	f008 ffa6 	bl	800a628 <HAL_LTDC_ConfigLayer>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <LTDC_Init_from_buffer+0x7a>
	{
	Error_Handler();
 80016e2:	f000 f967 	bl	80019b4 <Error_Handler>
	}
}
 80016e6:	bf00      	nop
 80016e8:	3740      	adds	r7, #64	; 0x40
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	240036e8 	.word	0x240036e8

080016f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b088      	sub	sp, #32
 80016f8:	af04      	add	r7, sp, #16
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80016fa:	4b5d      	ldr	r3, [pc, #372]	; (8001870 <main+0x17c>)
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d11b      	bne.n	800173e <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001706:	f3bf 8f4f 	dsb	sy
}
 800170a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800170c:	f3bf 8f6f 	isb	sy
}
 8001710:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001712:	4b57      	ldr	r3, [pc, #348]	; (8001870 <main+0x17c>)
 8001714:	2200      	movs	r2, #0
 8001716:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800171a:	f3bf 8f4f 	dsb	sy
}
 800171e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001720:	f3bf 8f6f 	isb	sy
}
 8001724:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001726:	4b52      	ldr	r3, [pc, #328]	; (8001870 <main+0x17c>)
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	4a51      	ldr	r2, [pc, #324]	; (8001870 <main+0x17c>)
 800172c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001730:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001732:	f3bf 8f4f 	dsb	sy
}
 8001736:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001738:	f3bf 8f6f 	isb	sy
}
 800173c:	e000      	b.n	8001740 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800173e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001740:	4b4b      	ldr	r3, [pc, #300]	; (8001870 <main+0x17c>)
 8001742:	695b      	ldr	r3, [r3, #20]
 8001744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d138      	bne.n	80017be <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800174c:	4b48      	ldr	r3, [pc, #288]	; (8001870 <main+0x17c>)
 800174e:	2200      	movs	r2, #0
 8001750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001754:	f3bf 8f4f 	dsb	sy
}
 8001758:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800175a:	4b45      	ldr	r3, [pc, #276]	; (8001870 <main+0x17c>)
 800175c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001760:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	0b5b      	lsrs	r3, r3, #13
 8001766:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800176a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	08db      	lsrs	r3, r3, #3
 8001770:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001774:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	015a      	lsls	r2, r3, #5
 800177a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800177e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001784:	493a      	ldr	r1, [pc, #232]	; (8001870 <main+0x17c>)
 8001786:	4313      	orrs	r3, r2
 8001788:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	1e5a      	subs	r2, r3, #1
 8001790:	607a      	str	r2, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1ef      	bne.n	8001776 <main+0x82>
    } while(sets-- != 0U);
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	1e5a      	subs	r2, r3, #1
 800179a:	60ba      	str	r2, [r7, #8]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1e5      	bne.n	800176c <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80017a0:	f3bf 8f4f 	dsb	sy
}
 80017a4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80017a6:	4b32      	ldr	r3, [pc, #200]	; (8001870 <main+0x17c>)
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	4a31      	ldr	r2, [pc, #196]	; (8001870 <main+0x17c>)
 80017ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80017b2:	f3bf 8f4f 	dsb	sy
}
 80017b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017b8:	f3bf 8f6f 	isb	sy
}
 80017bc:	e000      	b.n	80017c0 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80017be:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017c0:	f002 ff54 	bl	800466c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017c4:	f000 f860 	bl	8001888 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017c8:	f7ff fbcc 	bl	8000f64 <MX_GPIO_Init>
  MX_DMA_Init();
 80017cc:	f7ff f91c 	bl	8000a08 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80017d0:	f002 fe64 	bl	800449c <MX_USART1_UART_Init>
  MX_DMA2D_Init();
 80017d4:	f7ff f938 	bl	8000a48 <MX_DMA2D_Init>
  MX_LTDC_Init();
 80017d8:	f7ff fdf6 	bl	80013c8 <MX_LTDC_Init>
  MX_DCMI_Init();
 80017dc:	f7fe ffd2 	bl	8000784 <MX_DCMI_Init>
  MX_RTC_Init();
 80017e0:	f001 fea8 	bl	8003534 <MX_RTC_Init>
  MX_FMC_Init();
 80017e4:	f7ff fa60 	bl	8000ca8 <MX_FMC_Init>
  MX_CRC_Init();
 80017e8:	f7fe ff88 	bl	80006fc <MX_CRC_Init>
  MX_X_CUBE_AI_Init();
 80017ec:	f00e fa4c 	bl	800fc88 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */
    RetargetInit(&huart1);
 80017f0:	4820      	ldr	r0, [pc, #128]	; (8001874 <main+0x180>)
 80017f2:	f001 fde9 	bl	80033c8 <RetargetInit>

    BSP_CAMERA_PwrDown(0);
 80017f6:	2000      	movs	r0, #0
 80017f8:	f002 fbff 	bl	8003ffa <BSP_CAMERA_PwrDown>
    if (BSP_CAMERA_Init(0, CAMERA_R480x272, CAMERA_PF_RGB565) !=
 80017fc:	2200      	movs	r2, #0
 80017fe:	2102      	movs	r1, #2
 8001800:	2000      	movs	r0, #0
 8001802:	f002 fb49 	bl	8003e98 <BSP_CAMERA_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <main+0x11c>
        BSP_ERROR_NONE) {
        Error_Handler();
 800180c:	f000 f8d2 	bl	80019b4 <Error_Handler>
    }
    HAL_Delay(1000);
 8001810:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001814:	f002 ffbc 	bl	8004790 <HAL_Delay>
    //  buffer[5460] = 255;
    LTDC_Init_from_buffer((uint32_t *)LCD_BUFFER);
 8001818:	4817      	ldr	r0, [pc, #92]	; (8001878 <main+0x184>)
 800181a:	f7ff ff27 	bl	800166c <LTDC_Init_from_buffer>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    while (1) {
    	// make photo
        BSP_CAMERA_Start(0, (uint8_t *)CAMERA_BUFFER, CAMERA_MODE_SNAPSHOT);
 800181e:	2202      	movs	r2, #2
 8001820:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001824:	2000      	movs	r0, #0
 8001826:	f002 fb7d 	bl	8003f24 <BSP_CAMERA_Start>
        while (camera_frame_ready == 0) {
 800182a:	bf00      	nop
 800182c:	4b13      	ldr	r3, [pc, #76]	; (800187c <main+0x188>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0fb      	beq.n	800182c <main+0x138>
        };
        BSP_CAMERA_Stop(0);
 8001834:	2000      	movs	r0, #0
 8001836:	f002 fbaf 	bl	8003f98 <BSP_CAMERA_Stop>
        // process photo
        DMA2D_Convert((uint8_t *)CAMERA_BUFFER, (uint32_t *)LCD_BUFFER);
 800183a:	490f      	ldr	r1, [pc, #60]	; (8001878 <main+0x184>)
 800183c:	f04f 4050 	mov.w	r0, #3489660928	; 0xd0000000
 8001840:	f7ff f966 	bl	8000b10 <DMA2D_Convert>

        // post process
        postProcess((uint32_t *)LCD_BUFFER, LTDC_WIDTH, LTDC_HEIGHT, 96, 96, GRID_SIZE, probabilites);
 8001844:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <main+0x18c>)
 8001846:	9302      	str	r3, [sp, #8]
 8001848:	230c      	movs	r3, #12
 800184a:	9301      	str	r3, [sp, #4]
 800184c:	2360      	movs	r3, #96	; 0x60
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	2360      	movs	r3, #96	; 0x60
 8001852:	f44f 7288 	mov.w	r2, #272	; 0x110
 8001856:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800185a:	4807      	ldr	r0, [pc, #28]	; (8001878 <main+0x184>)
 800185c:	f001 fd52 	bl	8003304 <postProcess>

        HAL_GPIO_TogglePin(USER_LED1_GPIO_Port, USER_LED1_Pin);
 8001860:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001864:	4807      	ldr	r0, [pc, #28]	; (8001884 <main+0x190>)
 8001866:	f007 fec6 	bl	80095f6 <HAL_GPIO_TogglePin>
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 800186a:	f00e fa1b 	bl	800fca4 <MX_X_CUBE_AI_Process>
        BSP_CAMERA_Start(0, (uint8_t *)CAMERA_BUFFER, CAMERA_MODE_SNAPSHOT);
 800186e:	e7d6      	b.n	800181e <main+0x12a>
 8001870:	e000ed00 	.word	0xe000ed00
 8001874:	24004284 	.word	0x24004284
 8001878:	d005fa00 	.word	0xd005fa00
 800187c:	24003790 	.word	0x24003790
 8001880:	24000000 	.word	0x24000000
 8001884:	58021800 	.word	0x58021800

08001888 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b09c      	sub	sp, #112	; 0x70
 800188c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800188e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001892:	224c      	movs	r2, #76	; 0x4c
 8001894:	2100      	movs	r1, #0
 8001896:	4618      	mov	r0, r3
 8001898:	f016 f9a8 	bl	8017bec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800189c:	1d3b      	adds	r3, r7, #4
 800189e:	2220      	movs	r2, #32
 80018a0:	2100      	movs	r1, #0
 80018a2:	4618      	mov	r0, r3
 80018a4:	f016 f9a2 	bl	8017bec <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80018a8:	4b38      	ldr	r3, [pc, #224]	; (800198c <SystemClock_Config+0x104>)
 80018aa:	f04f 32ff 	mov.w	r2, #4294967295
 80018ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80018b2:	2004      	movs	r0, #4
 80018b4:	f009 f8a0 	bl	800a9f8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80018b8:	2300      	movs	r3, #0
 80018ba:	603b      	str	r3, [r7, #0]
 80018bc:	4b34      	ldr	r3, [pc, #208]	; (8001990 <SystemClock_Config+0x108>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	4a33      	ldr	r2, [pc, #204]	; (8001990 <SystemClock_Config+0x108>)
 80018c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018c6:	6193      	str	r3, [r2, #24]
 80018c8:	4b31      	ldr	r3, [pc, #196]	; (8001990 <SystemClock_Config+0x108>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018d0:	603b      	str	r3, [r7, #0]
 80018d2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80018d4:	bf00      	nop
 80018d6:	4b2e      	ldr	r3, [pc, #184]	; (8001990 <SystemClock_Config+0x108>)
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018e2:	d1f8      	bne.n	80018d6 <SystemClock_Config+0x4e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80018e4:	f009 f878 	bl	800a9d8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80018e8:	4b28      	ldr	r3, [pc, #160]	; (800198c <SystemClock_Config+0x104>)
 80018ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ec:	4a27      	ldr	r2, [pc, #156]	; (800198c <SystemClock_Config+0x104>)
 80018ee:	f023 0318 	bic.w	r3, r3, #24
 80018f2:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80018f4:	2305      	movs	r3, #5
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80018fe:	2301      	movs	r3, #1
 8001900:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001902:	2302      	movs	r3, #2
 8001904:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001906:	2302      	movs	r3, #2
 8001908:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800190a:	230c      	movs	r3, #12
 800190c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 800190e:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001912:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001914:	2302      	movs	r3, #2
 8001916:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001918:	2303      	movs	r3, #3
 800191a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 800191c:	2304      	movs	r3, #4
 800191e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8001920:	2304      	movs	r3, #4
 8001922:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001924:	2300      	movs	r3, #0
 8001926:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800192c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001930:	4618      	mov	r0, r3
 8001932:	f009 f8bb 	bl	800aaac <HAL_RCC_OscConfig>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800193c:	f000 f83a 	bl	80019b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001940:	233f      	movs	r3, #63	; 0x3f
 8001942:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001944:	2303      	movs	r3, #3
 8001946:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800194c:	2300      	movs	r3, #0
 800194e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001950:	2340      	movs	r3, #64	; 0x40
 8001952:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001954:	2340      	movs	r3, #64	; 0x40
 8001956:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800195c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800195e:	2340      	movs	r3, #64	; 0x40
 8001960:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	2107      	movs	r1, #7
 8001966:	4618      	mov	r0, r3
 8001968:	f009 fcd2 	bl	800b310 <HAL_RCC_ClockConfig>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001972:	f000 f81f 	bl	80019b4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8001976:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800197a:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 800197e:	2000      	movs	r0, #0
 8001980:	f009 fe7c 	bl	800b67c <HAL_RCC_MCOConfig>
}
 8001984:	bf00      	nop
 8001986:	3770      	adds	r7, #112	; 0x70
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	58024400 	.word	0x58024400
 8001990:	58024800 	.word	0x58024800

08001994 <BSP_CAMERA_FrameEventCallback>:

/* USER CODE BEGIN 4 */

void BSP_CAMERA_FrameEventCallback(uint32_t Instance) {
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
    camera_frame_ready = 1;
 800199c:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <BSP_CAMERA_FrameEventCallback+0x1c>)
 800199e:	2201      	movs	r2, #1
 80019a0:	601a      	str	r2, [r3, #0]
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	24003790 	.word	0x24003790

080019b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80019b8:	b672      	cpsid	i
}
 80019ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state
     */
    __disable_irq();
    while (1) {
 80019bc:	e7fe      	b.n	80019bc <Error_Handler+0x8>
	...

080019c0 <OV5640_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OV5640_RegisterBusIO(OV5640_Object_t *pObj, OV5640_IO_t *pIO)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d103      	bne.n	80019d8 <OV5640_RegisterBusIO+0x18>
  {
    ret = OV5640_ERROR;
 80019d0:	f04f 33ff 	mov.w	r3, #4294967295
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	e02c      	b.n	8001a32 <OV5640_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	891a      	ldrh	r2, [r3, #8]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	68da      	ldr	r2, [r3, #12]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	691a      	ldr	r2, [r3, #16]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	695a      	ldr	r2, [r3, #20]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a0c      	ldr	r2, [pc, #48]	; (8001a3c <OV5640_RegisterBusIO+0x7c>)
 8001a0c:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a0b      	ldr	r2, [pc, #44]	; (8001a40 <OV5640_RegisterBusIO+0x80>)
 8001a12:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	621a      	str	r2, [r3, #32]

    if (pObj->IO.Init != NULL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d004      	beq.n	8001a2c <OV5640_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4798      	blx	r3
 8001a28:	60f8      	str	r0, [r7, #12]
 8001a2a:	e002      	b.n	8001a32 <OV5640_RegisterBusIO+0x72>
    }
    else
    {
      ret = OV5640_ERROR;
 8001a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a30:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001a32:	68fb      	ldr	r3, [r7, #12]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	08003243 	.word	0x08003243
 8001a40:	08003275 	.word	0x08003275

08001a44 <OV5640_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_Init(OV5640_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b088      	sub	sp, #32
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 8001a50:	2300      	movs	r3, #0
 8001a52:	61bb      	str	r3, [r7, #24]
    {OV5640_AEC_CTRL1F, 0x14},
    {OV5640_SYSTEM_CTROL0, 0x02},
  };
  uint8_t tmp;

  if (pObj->IsInitialized == 0U)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d165      	bne.n	8001b2a <OV5640_Init+0xe6>
  {
    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	2b04      	cmp	r3, #4
 8001a62:	d80e      	bhi.n	8001a82 <OV5640_Init+0x3e>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00f      	beq.n	8001a8a <OV5640_Init+0x46>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d00c      	beq.n	8001a8a <OV5640_Init+0x46>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d009      	beq.n	8001a8a <OV5640_Init+0x46>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b07      	cmp	r3, #7
 8001a7a:	d006      	beq.n	8001a8a <OV5640_Init+0x46>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b08      	cmp	r3, #8
 8001a80:	d003      	beq.n	8001a8a <OV5640_Init+0x46>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 8001a82:	f04f 33ff 	mov.w	r3, #4294967295
 8001a86:	61bb      	str	r3, [r7, #24]
 8001a88:	e04f      	b.n	8001b2a <OV5640_Init+0xe6>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]
 8001a8e:	e01f      	b.n	8001ad0 <OV5640_Init+0x8c>
      {
        if (ret != OV5640_ERROR)
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a96:	d018      	beq.n	8001aca <OV5640_Init+0x86>
        {
          tmp = (uint8_t)OV5640_Common[index][1];
 8001a98:	4a26      	ldr	r2, [pc, #152]	; (8001b34 <OV5640_Init+0xf0>)
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	885b      	ldrh	r3, [r3, #2]
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	75fb      	strb	r3, [r7, #23]

          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f103 0018 	add.w	r0, r3, #24
 8001aac:	4a21      	ldr	r2, [pc, #132]	; (8001b34 <OV5640_Init+0xf0>)
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001ab4:	f107 0217 	add.w	r2, r7, #23
 8001ab8:	2301      	movs	r3, #1
 8001aba:	f001 fc0b 	bl	80032d4 <ov5640_write_reg>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d002      	beq.n	8001aca <OV5640_Init+0x86>
          {
            ret = OV5640_ERROR;
 8001ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac8:	61bb      	str	r3, [r7, #24]
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3301      	adds	r3, #1
 8001ace:	61fb      	str	r3, [r7, #28]
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	2bfd      	cmp	r3, #253	; 0xfd
 8001ad4:	d9dc      	bls.n	8001a90 <OV5640_Init+0x4c>
          }
        }
      }

      if (ret == OV5640_OK)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d126      	bne.n	8001b2a <OV5640_Init+0xe6>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 8001adc:	68b9      	ldr	r1, [r7, #8]
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f000 f9e0 	bl	8001ea4 <OV5640_SetResolution>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <OV5640_Init+0xae>
        {
          ret = OV5640_ERROR;
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295
 8001aee:	61bb      	str	r3, [r7, #24]
 8001af0:	e01b      	b.n	8001b2a <OV5640_Init+0xe6>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 8001af2:	6879      	ldr	r1, [r7, #4]
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f000 f833 	bl	8001b60 <OV5640_SetPixelFormat>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <OV5640_Init+0xc4>
        {
          ret = OV5640_ERROR;
 8001b00:	f04f 33ff 	mov.w	r3, #4294967295
 8001b04:	61bb      	str	r3, [r7, #24]
 8001b06:	e010      	b.n	8001b2a <OV5640_Init+0xe6>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(pObj, OV5640_POLARITY_PCLK_HIGH, OV5640_POLARITY_HREF_HIGH,
 8001b08:	2300      	movs	r3, #0
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f000 fb64 	bl	80021dc <OV5640_SetPolarities>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <OV5640_Init+0xde>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 8001b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1e:	61bb      	str	r3, [r7, #24]
 8001b20:	e003      	b.n	8001b2a <OV5640_Init+0xe6>
        }
        else
        {
          pObj->IsInitialized = 1U;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
      }
    }
  }

  return ret;
 8001b2a:	69bb      	ldr	r3, [r7, #24]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3720      	adds	r7, #32
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	08019388 	.word	0x08019388

08001b38 <OV5640_DeInit>:
  * @brief  De-initializes the camera sensor.
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV5640_DeInit(OV5640_Object_t *pObj)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized == 1U)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d103      	bne.n	8001b52 <OV5640_DeInit+0x1a>
  {
    /* De-initialize camera sensor interface */
    pObj->IsInitialized = 0U;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return OV5640_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <OV5640_SetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_SetPixelFormat(OV5640_Object_t *pObj, uint32_t PixelFormat)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00f      	beq.n	8001b94 <OV5640_SetPixelFormat+0x34>
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d00c      	beq.n	8001b94 <OV5640_SetPixelFormat+0x34>
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d009      	beq.n	8001b94 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	2b07      	cmp	r3, #7
 8001b84:	d006      	beq.n	8001b94 <OV5640_SetPixelFormat+0x34>
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	d003      	beq.n	8001b94 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 8001b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	e16a      	b.n	8001e6a <OV5640_SetPixelFormat+0x30a>
  }
  else
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	2b07      	cmp	r3, #7
 8001b9a:	f200 80c3 	bhi.w	8001d24 <OV5640_SetPixelFormat+0x1c4>
 8001b9e:	a201      	add	r2, pc, #4	; (adr r2, 8001ba4 <OV5640_SetPixelFormat+0x44>)
 8001ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba4:	08001c1d 	.word	0x08001c1d
 8001ba8:	08001bc5 	.word	0x08001bc5
 8001bac:	08001d25 	.word	0x08001d25
 8001bb0:	08001d25 	.word	0x08001d25
 8001bb4:	08001d25 	.word	0x08001d25
 8001bb8:	08001d25 	.word	0x08001d25
 8001bbc:	08001c75 	.word	0x08001c75
 8001bc0:	08001ccd 	.word	0x08001ccd
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	e024      	b.n	8001c14 <OV5640_SetPixelFormat+0xb4>
        {
          if (ret != OV5640_ERROR)
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd0:	d01d      	beq.n	8001c0e <OV5640_SetPixelFormat+0xae>
          {
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8001bd2:	4aa8      	ldr	r2, [pc, #672]	; (8001e74 <OV5640_SetPixelFormat+0x314>)
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	885b      	ldrh	r3, [r3, #2]
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f103 0018 	add.w	r0, r3, #24
 8001be6:	4aa3      	ldr	r2, [pc, #652]	; (8001e74 <OV5640_SetPixelFormat+0x314>)
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001bee:	f107 020f 	add.w	r2, r7, #15
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	f001 fb6e 	bl	80032d4 <ov5640_write_reg>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <OV5640_SetPixelFormat+0xa6>
            {
              ret = OV5640_ERROR;
 8001bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	e003      	b.n	8001c0e <OV5640_SetPixelFormat+0xae>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001c06:	2101      	movs	r1, #1
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f001 fb00 	bl	800320e <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	3301      	adds	r3, #1
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d9d7      	bls.n	8001bca <OV5640_SetPixelFormat+0x6a>
            }
          }
        }
        break;
 8001c1a:	e0af      	b.n	8001d7c <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	e024      	b.n	8001c6c <OV5640_SetPixelFormat+0x10c>
        {
          if (ret != OV5640_ERROR)
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c28:	d01d      	beq.n	8001c66 <OV5640_SetPixelFormat+0x106>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8001c2a:	4a93      	ldr	r2, [pc, #588]	; (8001e78 <OV5640_SetPixelFormat+0x318>)
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	885b      	ldrh	r3, [r3, #2]
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f103 0018 	add.w	r0, r3, #24
 8001c3e:	4a8e      	ldr	r2, [pc, #568]	; (8001e78 <OV5640_SetPixelFormat+0x318>)
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001c46:	f107 020f 	add.w	r2, r7, #15
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	f001 fb42 	bl	80032d4 <ov5640_write_reg>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <OV5640_SetPixelFormat+0xfe>
            {
              ret = OV5640_ERROR;
 8001c56:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5a:	617b      	str	r3, [r7, #20]
 8001c5c:	e003      	b.n	8001c66 <OV5640_SetPixelFormat+0x106>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001c5e:	2101      	movs	r1, #1
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f001 fad4 	bl	800320e <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d9d7      	bls.n	8001c22 <OV5640_SetPixelFormat+0xc2>
            }
          }
        }
        break;
 8001c72:	e083      	b.n	8001d7c <OV5640_SetPixelFormat+0x21c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8001c74:	2300      	movs	r3, #0
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	e024      	b.n	8001cc4 <OV5640_SetPixelFormat+0x164>
        {
          if (ret != OV5640_ERROR)
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c80:	d01d      	beq.n	8001cbe <OV5640_SetPixelFormat+0x15e>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 8001c82:	4a7e      	ldr	r2, [pc, #504]	; (8001e7c <OV5640_SetPixelFormat+0x31c>)
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	885b      	ldrh	r3, [r3, #2]
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f103 0018 	add.w	r0, r3, #24
 8001c96:	4a79      	ldr	r2, [pc, #484]	; (8001e7c <OV5640_SetPixelFormat+0x31c>)
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001c9e:	f107 020f 	add.w	r2, r7, #15
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	f001 fb16 	bl	80032d4 <ov5640_write_reg>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <OV5640_SetPixelFormat+0x156>
            {
              ret = OV5640_ERROR;
 8001cae:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	e003      	b.n	8001cbe <OV5640_SetPixelFormat+0x15e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f001 faa8 	bl	800320e <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d9d7      	bls.n	8001c7a <OV5640_SetPixelFormat+0x11a>
            }
          }
        }
        break;
 8001cca:	e057      	b.n	8001d7c <OV5640_SetPixelFormat+0x21c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8001ccc:	2300      	movs	r3, #0
 8001cce:	613b      	str	r3, [r7, #16]
 8001cd0:	e024      	b.n	8001d1c <OV5640_SetPixelFormat+0x1bc>
        {
          if (ret != OV5640_ERROR)
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd8:	d01d      	beq.n	8001d16 <OV5640_SetPixelFormat+0x1b6>
          {
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8001cda:	4a69      	ldr	r2, [pc, #420]	; (8001e80 <OV5640_SetPixelFormat+0x320>)
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	885b      	ldrh	r3, [r3, #2]
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f103 0018 	add.w	r0, r3, #24
 8001cee:	4a64      	ldr	r2, [pc, #400]	; (8001e80 <OV5640_SetPixelFormat+0x320>)
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001cf6:	f107 020f 	add.w	r2, r7, #15
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	f001 faea 	bl	80032d4 <ov5640_write_reg>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <OV5640_SetPixelFormat+0x1ae>
            {
              ret = OV5640_ERROR;
 8001d06:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	e003      	b.n	8001d16 <OV5640_SetPixelFormat+0x1b6>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001d0e:	2101      	movs	r1, #1
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f001 fa7c 	bl	800320e <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	613b      	str	r3, [r7, #16]
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d9d7      	bls.n	8001cd2 <OV5640_SetPixelFormat+0x172>
            }
          }
        }
        break;
 8001d22:	e02b      	b.n	8001d7c <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8001d24:	2300      	movs	r3, #0
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	e024      	b.n	8001d74 <OV5640_SetPixelFormat+0x214>
        {
          if (ret != OV5640_ERROR)
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d30:	d01d      	beq.n	8001d6e <OV5640_SetPixelFormat+0x20e>
          {
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 8001d32:	4a54      	ldr	r2, [pc, #336]	; (8001e84 <OV5640_SetPixelFormat+0x324>)
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	885b      	ldrh	r3, [r3, #2]
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f103 0018 	add.w	r0, r3, #24
 8001d46:	4a4f      	ldr	r2, [pc, #316]	; (8001e84 <OV5640_SetPixelFormat+0x324>)
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001d4e:	f107 020f 	add.w	r2, r7, #15
 8001d52:	2301      	movs	r3, #1
 8001d54:	f001 fabe 	bl	80032d4 <ov5640_write_reg>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <OV5640_SetPixelFormat+0x206>
            {
              ret = OV5640_ERROR;
 8001d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	e003      	b.n	8001d6e <OV5640_SetPixelFormat+0x20e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001d66:	2101      	movs	r1, #1
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f001 fa50 	bl	800320e <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	3301      	adds	r3, #1
 8001d72:	613b      	str	r3, [r7, #16]
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d9d7      	bls.n	8001d2a <OV5640_SetPixelFormat+0x1ca>
            }
          }
        }
        break;
 8001d7a:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	2b08      	cmp	r3, #8
 8001d80:	d173      	bne.n	8001e6a <OV5640_SetPixelFormat+0x30a>
    {
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f103 0018 	add.w	r0, r3, #24
 8001d88:	f107 020f 	add.w	r2, r7, #15
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	f643 0121 	movw	r1, #14369	; 0x3821
 8001d92:	f001 fa88 	bl	80032a6 <ov5640_read_reg>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <OV5640_SetPixelFormat+0x244>
      {
        ret = OV5640_ERROR;
 8001d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001da0:	617b      	str	r3, [r7, #20]
 8001da2:	e062      	b.n	8001e6a <OV5640_SetPixelFormat+0x30a>
      }
      else
      {
        tmp |= (1 << 5);
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
 8001da6:	f043 0320 	orr.w	r3, r3, #32
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	73fb      	strb	r3, [r7, #15]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f103 0018 	add.w	r0, r3, #24
 8001db4:	f107 020f 	add.w	r2, r7, #15
 8001db8:	2301      	movs	r3, #1
 8001dba:	f643 0121 	movw	r1, #14369	; 0x3821
 8001dbe:	f001 fa89 	bl	80032d4 <ov5640_write_reg>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <OV5640_SetPixelFormat+0x270>
        {
          ret = OV5640_ERROR;
 8001dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dcc:	617b      	str	r3, [r7, #20]
 8001dce:	e04c      	b.n	8001e6a <OV5640_SetPixelFormat+0x30a>
        }
        else
        {
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f103 0018 	add.w	r0, r3, #24
 8001dd6:	f107 020f 	add.w	r2, r7, #15
 8001dda:	2301      	movs	r3, #1
 8001ddc:	f243 0102 	movw	r1, #12290	; 0x3002
 8001de0:	f001 fa61 	bl	80032a6 <ov5640_read_reg>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <OV5640_SetPixelFormat+0x292>
          {
            ret = OV5640_ERROR;
 8001dea:	f04f 33ff 	mov.w	r3, #4294967295
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	e03b      	b.n	8001e6a <OV5640_SetPixelFormat+0x30a>
          }
          else
          {
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
 8001df4:	f023 031c 	bic.w	r3, r3, #28
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f103 0018 	add.w	r0, r3, #24
 8001e02:	f107 020f 	add.w	r2, r7, #15
 8001e06:	2301      	movs	r3, #1
 8001e08:	f243 0102 	movw	r1, #12290	; 0x3002
 8001e0c:	f001 fa62 	bl	80032d4 <ov5640_write_reg>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <OV5640_SetPixelFormat+0x2be>
            {
              ret = OV5640_ERROR;
 8001e16:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	e025      	b.n	8001e6a <OV5640_SetPixelFormat+0x30a>
            }
            else
            {
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f103 0018 	add.w	r0, r3, #24
 8001e24:	f107 020f 	add.w	r2, r7, #15
 8001e28:	2301      	movs	r3, #1
 8001e2a:	f243 0106 	movw	r1, #12294	; 0x3006
 8001e2e:	f001 fa3a 	bl	80032a6 <ov5640_read_reg>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <OV5640_SetPixelFormat+0x2e0>
              {
                ret = OV5640_ERROR;
 8001e38:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	e014      	b.n	8001e6a <OV5640_SetPixelFormat+0x30a>
              }
              else
              {
                tmp |= ((1 << 5) | (1 << 3));
 8001e40:	7bfb      	ldrb	r3, [r7, #15]
 8001e42:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	73fb      	strb	r3, [r7, #15]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f103 0018 	add.w	r0, r3, #24
 8001e50:	f107 020f 	add.w	r2, r7, #15
 8001e54:	2301      	movs	r3, #1
 8001e56:	f243 0106 	movw	r1, #12294	; 0x3006
 8001e5a:	f001 fa3b 	bl	80032d4 <ov5640_write_reg>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d002      	beq.n	8001e6a <OV5640_SetPixelFormat+0x30a>
                {
                  ret = OV5640_ERROR;
 8001e64:	f04f 33ff 	mov.w	r3, #4294967295
 8001e68:	617b      	str	r3, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 8001e6a:	697b      	ldr	r3, [r7, #20]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	08019780 	.word	0x08019780
 8001e78:	08019788 	.word	0x08019788
 8001e7c:	08019790 	.word	0x08019790
 8001e80:	08019798 	.word	0x08019798
 8001e84:	080197a0 	.word	0x080197a0

08001e88 <OV5640_GetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_GetPixelFormat(OV5640_Object_t *pObj, uint32_t *PixelFormat)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(PixelFormat);

  return OV5640_ERROR;
 8001e92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
	...

08001ea4 <OV5640_SetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_SetResolution(OV5640_Object_t *pObj, uint32_t Resolution)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	2b04      	cmp	r3, #4
 8001eb6:	d903      	bls.n	8001ec0 <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 8001eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ebc:	617b      	str	r3, [r7, #20]
 8001ebe:	e0d8      	b.n	8002072 <OV5640_SetResolution+0x1ce>
  }
  else
  {
    /* Initialize OV5640 */
    switch (Resolution)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	f200 80d1 	bhi.w	800206a <OV5640_SetResolution+0x1c6>
 8001ec8:	a201      	add	r2, pc, #4	; (adr r2, 8001ed0 <OV5640_SetResolution+0x2c>)
 8001eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ece:	bf00      	nop
 8001ed0:	08001ee5 	.word	0x08001ee5
 8001ed4:	08001f33 	.word	0x08001f33
 8001ed8:	08001f81 	.word	0x08001f81
 8001edc:	08001fcf 	.word	0x08001fcf
 8001ee0:	0800201d 	.word	0x0800201d
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	613b      	str	r3, [r7, #16]
 8001ee8:	e01f      	b.n	8001f2a <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef0:	d018      	beq.n	8001f24 <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8001ef2:	4a62      	ldr	r2, [pc, #392]	; (800207c <OV5640_SetResolution+0x1d8>)
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4413      	add	r3, r2
 8001efa:	885b      	ldrh	r3, [r3, #2]
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f103 0018 	add.w	r0, r3, #24
 8001f06:	4a5d      	ldr	r2, [pc, #372]	; (800207c <OV5640_SetResolution+0x1d8>)
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001f0e:	f107 020f 	add.w	r2, r7, #15
 8001f12:	2301      	movs	r3, #1
 8001f14:	f001 f9de 	bl	80032d4 <ov5640_write_reg>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d002      	beq.n	8001f24 <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 8001f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f22:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	3301      	adds	r3, #1
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	2b03      	cmp	r3, #3
 8001f2e:	d9dc      	bls.n	8001eea <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 8001f30:	e09f      	b.n	8002072 <OV5640_SetResolution+0x1ce>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8001f32:	2300      	movs	r3, #0
 8001f34:	613b      	str	r3, [r7, #16]
 8001f36:	e01f      	b.n	8001f78 <OV5640_SetResolution+0xd4>
        {
          if (ret != OV5640_ERROR)
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f3e:	d018      	beq.n	8001f72 <OV5640_SetResolution+0xce>
          {
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8001f40:	4a4f      	ldr	r2, [pc, #316]	; (8002080 <OV5640_SetResolution+0x1dc>)
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	885b      	ldrh	r3, [r3, #2]
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f103 0018 	add.w	r0, r3, #24
 8001f54:	4a4a      	ldr	r2, [pc, #296]	; (8002080 <OV5640_SetResolution+0x1dc>)
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001f5c:	f107 020f 	add.w	r2, r7, #15
 8001f60:	2301      	movs	r3, #1
 8001f62:	f001 f9b7 	bl	80032d4 <ov5640_write_reg>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d002      	beq.n	8001f72 <OV5640_SetResolution+0xce>
            {
              ret = OV5640_ERROR;
 8001f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f70:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	3301      	adds	r3, #1
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	2b03      	cmp	r3, #3
 8001f7c:	d9dc      	bls.n	8001f38 <OV5640_SetResolution+0x94>
            }
          }
        }
        break;
 8001f7e:	e078      	b.n	8002072 <OV5640_SetResolution+0x1ce>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8001f80:	2300      	movs	r3, #0
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	e01f      	b.n	8001fc6 <OV5640_SetResolution+0x122>
        {
          if (ret != OV5640_ERROR)
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f8c:	d018      	beq.n	8001fc0 <OV5640_SetResolution+0x11c>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 8001f8e:	4a3d      	ldr	r2, [pc, #244]	; (8002084 <OV5640_SetResolution+0x1e0>)
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	885b      	ldrh	r3, [r3, #2]
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f103 0018 	add.w	r0, r3, #24
 8001fa2:	4a38      	ldr	r2, [pc, #224]	; (8002084 <OV5640_SetResolution+0x1e0>)
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001faa:	f107 020f 	add.w	r2, r7, #15
 8001fae:	2301      	movs	r3, #1
 8001fb0:	f001 f990 	bl	80032d4 <ov5640_write_reg>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d002      	beq.n	8001fc0 <OV5640_SetResolution+0x11c>
            {
              ret = OV5640_ERROR;
 8001fba:	f04f 33ff 	mov.w	r3, #4294967295
 8001fbe:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	613b      	str	r3, [r7, #16]
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	2b03      	cmp	r3, #3
 8001fca:	d9dc      	bls.n	8001f86 <OV5640_SetResolution+0xe2>
            }
          }
        }
        break;
 8001fcc:	e051      	b.n	8002072 <OV5640_SetResolution+0x1ce>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8001fce:	2300      	movs	r3, #0
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	e01f      	b.n	8002014 <OV5640_SetResolution+0x170>
        {
          if (ret != OV5640_ERROR)
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fda:	d018      	beq.n	800200e <OV5640_SetResolution+0x16a>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 8001fdc:	4a2a      	ldr	r2, [pc, #168]	; (8002088 <OV5640_SetResolution+0x1e4>)
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	885b      	ldrh	r3, [r3, #2]
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f103 0018 	add.w	r0, r3, #24
 8001ff0:	4a25      	ldr	r2, [pc, #148]	; (8002088 <OV5640_SetResolution+0x1e4>)
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001ff8:	f107 020f 	add.w	r2, r7, #15
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	f001 f969 	bl	80032d4 <ov5640_write_reg>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d002      	beq.n	800200e <OV5640_SetResolution+0x16a>
            {
              ret = OV5640_ERROR;
 8002008:	f04f 33ff 	mov.w	r3, #4294967295
 800200c:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	3301      	adds	r3, #1
 8002012:	613b      	str	r3, [r7, #16]
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	2b03      	cmp	r3, #3
 8002018:	d9dc      	bls.n	8001fd4 <OV5640_SetResolution+0x130>
            }
          }
        }
        break;
 800201a:	e02a      	b.n	8002072 <OV5640_SetResolution+0x1ce>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 800201c:	2300      	movs	r3, #0
 800201e:	613b      	str	r3, [r7, #16]
 8002020:	e01f      	b.n	8002062 <OV5640_SetResolution+0x1be>
        {
          if (ret != OV5640_ERROR)
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002028:	d018      	beq.n	800205c <OV5640_SetResolution+0x1b8>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 800202a:	4a18      	ldr	r2, [pc, #96]	; (800208c <OV5640_SetResolution+0x1e8>)
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	885b      	ldrh	r3, [r3, #2]
 8002034:	b2db      	uxtb	r3, r3
 8002036:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f103 0018 	add.w	r0, r3, #24
 800203e:	4a13      	ldr	r2, [pc, #76]	; (800208c <OV5640_SetResolution+0x1e8>)
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002046:	f107 020f 	add.w	r2, r7, #15
 800204a:	2301      	movs	r3, #1
 800204c:	f001 f942 	bl	80032d4 <ov5640_write_reg>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d002      	beq.n	800205c <OV5640_SetResolution+0x1b8>
            {
              ret = OV5640_ERROR;
 8002056:	f04f 33ff 	mov.w	r3, #4294967295
 800205a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	3301      	adds	r3, #1
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	2b03      	cmp	r3, #3
 8002066:	d9dc      	bls.n	8002022 <OV5640_SetResolution+0x17e>
            }
          }
        }
        break;
 8002068:	e003      	b.n	8002072 <OV5640_SetResolution+0x1ce>
      default:
        ret = OV5640_ERROR;
 800206a:	f04f 33ff 	mov.w	r3, #4294967295
 800206e:	617b      	str	r3, [r7, #20]
        break;
 8002070:	bf00      	nop
    }
  }

  return ret;
 8002072:	697b      	ldr	r3, [r7, #20]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	080197a8 	.word	0x080197a8
 8002080:	080197b8 	.word	0x080197b8
 8002084:	080197c8 	.word	0x080197c8
 8002088:	080197d8 	.word	0x080197d8
 800208c:	080197e8 	.word	0x080197e8

08002090 <OV5640_GetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_GetResolution(OV5640_Object_t *pObj, uint32_t *Resolution)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t x_size;
  uint16_t y_size;
  uint8_t tmp;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f103 0018 	add.w	r0, r3, #24
 80020a0:	f107 020f 	add.w	r2, r7, #15
 80020a4:	2301      	movs	r3, #1
 80020a6:	f643 0108 	movw	r1, #14344	; 0x3808
 80020aa:	f001 f8fc 	bl	80032a6 <ov5640_read_reg>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <OV5640_GetResolution+0x2c>
  {
    ret = OV5640_ERROR;
 80020b4:	f04f 33ff 	mov.w	r3, #4294967295
 80020b8:	617b      	str	r3, [r7, #20]
 80020ba:	e08a      	b.n	80021d2 <OV5640_GetResolution+0x142>
  }
  else
  {
    x_size = (uint16_t)tmp << 8U;
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	b29b      	uxth	r3, r3
 80020c0:	021b      	lsls	r3, r3, #8
 80020c2:	827b      	strh	r3, [r7, #18]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f103 0018 	add.w	r0, r3, #24
 80020ca:	f107 020f 	add.w	r2, r7, #15
 80020ce:	2301      	movs	r3, #1
 80020d0:	f643 0109 	movw	r1, #14345	; 0x3809
 80020d4:	f001 f8e7 	bl	80032a6 <ov5640_read_reg>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <OV5640_GetResolution+0x56>
    {
      ret = OV5640_ERROR;
 80020de:	f04f 33ff 	mov.w	r3, #4294967295
 80020e2:	617b      	str	r3, [r7, #20]
 80020e4:	e075      	b.n	80021d2 <OV5640_GetResolution+0x142>
    }
    else
    {
      x_size |= tmp;
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	8a7b      	ldrh	r3, [r7, #18]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	827b      	strh	r3, [r7, #18]

      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f103 0018 	add.w	r0, r3, #24
 80020f6:	f107 020f 	add.w	r2, r7, #15
 80020fa:	2301      	movs	r3, #1
 80020fc:	f643 010a 	movw	r1, #14346	; 0x380a
 8002100:	f001 f8d1 	bl	80032a6 <ov5640_read_reg>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <OV5640_GetResolution+0x82>
      {
        ret = OV5640_ERROR;
 800210a:	f04f 33ff 	mov.w	r3, #4294967295
 800210e:	617b      	str	r3, [r7, #20]
 8002110:	e05f      	b.n	80021d2 <OV5640_GetResolution+0x142>
      }
      else
      {
        y_size = (uint16_t)tmp << 8U;
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	b29b      	uxth	r3, r3
 8002116:	021b      	lsls	r3, r3, #8
 8002118:	823b      	strh	r3, [r7, #16]
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f103 0018 	add.w	r0, r3, #24
 8002120:	f107 020f 	add.w	r2, r7, #15
 8002124:	2301      	movs	r3, #1
 8002126:	f643 010b 	movw	r1, #14347	; 0x380b
 800212a:	f001 f8bc 	bl	80032a6 <ov5640_read_reg>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <OV5640_GetResolution+0xac>
        {
          ret = OV5640_ERROR;
 8002134:	f04f 33ff 	mov.w	r3, #4294967295
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	e04a      	b.n	80021d2 <OV5640_GetResolution+0x142>
        }
        else
        {
          y_size |= tmp;
 800213c:	7bfb      	ldrb	r3, [r7, #15]
 800213e:	b29a      	uxth	r2, r3
 8002140:	8a3b      	ldrh	r3, [r7, #16]
 8002142:	4313      	orrs	r3, r2
 8002144:	823b      	strh	r3, [r7, #16]

          if ((x_size == 800U) && (y_size == 480U))
 8002146:	8a7b      	ldrh	r3, [r7, #18]
 8002148:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800214c:	d109      	bne.n	8002162 <OV5640_GetResolution+0xd2>
 800214e:	8a3b      	ldrh	r3, [r7, #16]
 8002150:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002154:	d105      	bne.n	8002162 <OV5640_GetResolution+0xd2>
          {
            *Resolution = OV5640_R800x480;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	2204      	movs	r2, #4
 800215a:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]
 8002160:	e037      	b.n	80021d2 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 640U) && (y_size == 480U))
 8002162:	8a7b      	ldrh	r3, [r7, #18]
 8002164:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8002168:	d109      	bne.n	800217e <OV5640_GetResolution+0xee>
 800216a:	8a3b      	ldrh	r3, [r7, #16]
 800216c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002170:	d105      	bne.n	800217e <OV5640_GetResolution+0xee>
          {
            *Resolution = OV5640_R640x480;
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	2203      	movs	r2, #3
 8002176:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	e029      	b.n	80021d2 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 480U) && (y_size == 272U))
 800217e:	8a7b      	ldrh	r3, [r7, #18]
 8002180:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002184:	d109      	bne.n	800219a <OV5640_GetResolution+0x10a>
 8002186:	8a3b      	ldrh	r3, [r7, #16]
 8002188:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800218c:	d105      	bne.n	800219a <OV5640_GetResolution+0x10a>
          {
            *Resolution = OV5640_R480x272;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	2202      	movs	r2, #2
 8002192:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	e01b      	b.n	80021d2 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 320U) && (y_size == 240U))
 800219a:	8a7b      	ldrh	r3, [r7, #18]
 800219c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80021a0:	d108      	bne.n	80021b4 <OV5640_GetResolution+0x124>
 80021a2:	8a3b      	ldrh	r3, [r7, #16]
 80021a4:	2bf0      	cmp	r3, #240	; 0xf0
 80021a6:	d105      	bne.n	80021b4 <OV5640_GetResolution+0x124>
          {
            *Resolution = OV5640_R320x240;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	2201      	movs	r2, #1
 80021ac:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	e00e      	b.n	80021d2 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 160U) && (y_size == 120U))
 80021b4:	8a7b      	ldrh	r3, [r7, #18]
 80021b6:	2ba0      	cmp	r3, #160	; 0xa0
 80021b8:	d108      	bne.n	80021cc <OV5640_GetResolution+0x13c>
 80021ba:	8a3b      	ldrh	r3, [r7, #16]
 80021bc:	2b78      	cmp	r3, #120	; 0x78
 80021be:	d105      	bne.n	80021cc <OV5640_GetResolution+0x13c>
          {
            *Resolution = OV5640_R160x120;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	617b      	str	r3, [r7, #20]
 80021ca:	e002      	b.n	80021d2 <OV5640_GetResolution+0x142>
          }
          else
          {
            ret = OV5640_ERROR;
 80021cc:	f04f 33ff 	mov.w	r3, #4294967295
 80021d0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 80021d2:	697b      	ldr	r3, [r7, #20]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <OV5640_SetPolarities>:
  * @param  VsyncPolarity Polarity of the Vsync
  * @retval Component status
  */
int32_t OV5640_SetPolarities(OV5640_Object_t *pObj, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
 80021e8:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]

  if ((pObj == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d011      	beq.n	8002218 <OV5640_SetPolarities+0x3c>
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d002      	beq.n	8002200 <OV5640_SetPolarities+0x24>
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d10b      	bne.n	8002218 <OV5640_SetPolarities+0x3c>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d002      	beq.n	800220c <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d105      	bne.n	8002218 <OV5640_SetPolarities+0x3c>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d006      	beq.n	8002220 <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 8002218:	f04f 33ff 	mov.w	r3, #4294967295
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	e01e      	b.n	800225e <OV5640_SetPolarities+0x82>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	b2db      	uxtb	r3, r3
 8002224:	015b      	lsls	r3, r3, #5
 8002226:	b2da      	uxtb	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	b2db      	uxtb	r3, r3
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	b2db      	uxtb	r3, r3
 8002230:	4313      	orrs	r3, r2
 8002232:	b2da      	uxtb	r2, r3
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	b2db      	uxtb	r3, r3
 8002238:	4313      	orrs	r3, r2
 800223a:	b2db      	uxtb	r3, r3
 800223c:	74fb      	strb	r3, [r7, #19]

    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f103 0018 	add.w	r0, r3, #24
 8002244:	f107 0213 	add.w	r2, r7, #19
 8002248:	2301      	movs	r3, #1
 800224a:	f244 7140 	movw	r1, #18240	; 0x4740
 800224e:	f001 f841 	bl	80032d4 <ov5640_write_reg>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d002      	beq.n	800225e <OV5640_SetPolarities+0x82>
    {
      ret = OV5640_ERROR;
 8002258:	f04f 33ff 	mov.w	r3, #4294967295
 800225c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800225e:	697b      	ldr	r3, [r7, #20]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <OV5640_ReadID>:
  * @param  pObj  pointer to component object
  * @param  Id    pointer to component ID
  * @retval Component status
  */
int32_t OV5640_ReadID(OV5640_Object_t *pObj, uint32_t *Id)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  /* Initialize I2C */
  pObj->IO.Init();
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4798      	blx	r3

  /* Prepare the camera to be configured */
  tmp = 0x80;
 8002278:	2380      	movs	r3, #128	; 0x80
 800227a:	72fb      	strb	r3, [r7, #11]
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f103 0018 	add.w	r0, r3, #24
 8002282:	f107 020b 	add.w	r2, r7, #11
 8002286:	2301      	movs	r3, #1
 8002288:	f243 0108 	movw	r1, #12296	; 0x3008
 800228c:	f001 f822 	bl	80032d4 <ov5640_write_reg>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <OV5640_ReadID+0x36>
  {
    ret = OV5640_ERROR;
 8002296:	f04f 33ff 	mov.w	r3, #4294967295
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	e032      	b.n	8002304 <OV5640_ReadID+0x9c>
  }
  else
  {
    (void)OV5640_Delay(pObj, 500);
 800229e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 ffb3 	bl	800320e <OV5640_Delay>

    if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f103 0018 	add.w	r0, r3, #24
 80022ae:	f107 020b 	add.w	r2, r7, #11
 80022b2:	2301      	movs	r3, #1
 80022b4:	f243 010a 	movw	r1, #12298	; 0x300a
 80022b8:	f000 fff5 	bl	80032a6 <ov5640_read_reg>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <OV5640_ReadID+0x62>
    {
      ret = OV5640_ERROR;
 80022c2:	f04f 33ff 	mov.w	r3, #4294967295
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	e01c      	b.n	8002304 <OV5640_ReadID+0x9c>
    }
    else
    {
      *Id = (uint32_t)tmp << 8U;
 80022ca:	7afb      	ldrb	r3, [r7, #11]
 80022cc:	021a      	lsls	r2, r3, #8
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	601a      	str	r2, [r3, #0]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f103 0018 	add.w	r0, r3, #24
 80022d8:	f107 020b 	add.w	r2, r7, #11
 80022dc:	2301      	movs	r3, #1
 80022de:	f243 010b 	movw	r1, #12299	; 0x300b
 80022e2:	f000 ffe0 	bl	80032a6 <ov5640_read_reg>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <OV5640_ReadID+0x8c>
      {
        ret = OV5640_ERROR;
 80022ec:	f04f 33ff 	mov.w	r3, #4294967295
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	e007      	b.n	8002304 <OV5640_ReadID+0x9c>
      }
      else
      {
        *Id |= tmp;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	7afa      	ldrb	r2, [r7, #11]
 80022fa:	431a      	orrs	r2, r3
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	601a      	str	r2, [r3, #0]
        ret = OV5640_OK;
 8002300:	2300      	movs	r3, #0
 8002302:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Component status */
  return ret;
 8002304:	68fb      	ldr	r3, [r7, #12]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <OV5640_GetCapabilities>:
  * @param  pObj          pointer to component object
  * @param  Capabilities  pointer to component Capabilities
  * @retval Component status
  */
int32_t OV5640_GetCapabilities(OV5640_Object_t *pObj, OV5640_Capabilities_t *Capabilities)
{
 800230e:	b480      	push	{r7}
 8002310:	b085      	sub	sp, #20
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d103      	bne.n	8002326 <OV5640_GetCapabilities+0x18>
  {
    ret = OV5640_ERROR;
 800231e:	f04f 33ff 	mov.w	r3, #4294967295
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	e01f      	b.n	8002366 <OV5640_GetCapabilities+0x58>
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2201      	movs	r2, #1
 800232a:	60da      	str	r2, [r3, #12]
    Capabilities->Config_Contrast      = 1;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	2201      	movs	r2, #1
 8002330:	615a      	str	r2, [r3, #20]
    Capabilities->Config_HueDegree     = 1;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2201      	movs	r2, #1
 8002336:	619a      	str	r2, [r3, #24]
    Capabilities->Config_LightMode     = 1;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	2201      	movs	r2, #1
 800233c:	605a      	str	r2, [r3, #4]
    Capabilities->Config_MirrorFlip    = 1;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	2201      	movs	r2, #1
 8002342:	61da      	str	r2, [r3, #28]
    Capabilities->Config_NightMode     = 1;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	2201      	movs	r2, #1
 8002348:	625a      	str	r2, [r3, #36]	; 0x24
    Capabilities->Config_Resolution    = 1;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	2201      	movs	r2, #1
 800234e:	601a      	str	r2, [r3, #0]
    Capabilities->Config_Saturation    = 1;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	2201      	movs	r2, #1
 8002354:	611a      	str	r2, [r3, #16]
    Capabilities->Config_SpecialEffect = 1;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	2201      	movs	r2, #1
 800235a:	609a      	str	r2, [r3, #8]
    Capabilities->Config_Zoom          = 1;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	2201      	movs	r2, #1
 8002360:	621a      	str	r2, [r3, #32]

    ret = OV5640_OK;
 8002362:	2300      	movs	r3, #0
 8002364:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002366:	68fb      	ldr	r3, [r7, #12]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <OV5640_SetLightMode>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetLightMode(OV5640_Object_t *pObj, uint32_t LightMode)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
    {OV5640_AWB_G_GAIN_LSB, 0x00},
    {OV5640_AWB_B_GAIN_MSB, 0x04},
    {OV5640_AWB_B_GAIN_LSB, 0xF3},
  };

  tmp = 0x00;
 800237e:	2300      	movs	r3, #0
 8002380:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f103 0018 	add.w	r0, r3, #24
 8002388:	f107 020f 	add.w	r2, r7, #15
 800238c:	2301      	movs	r3, #1
 800238e:	f243 4106 	movw	r1, #13318	; 0x3406
 8002392:	f000 ff9f 	bl	80032d4 <ov5640_write_reg>
 8002396:	6178      	str	r0, [r7, #20]
  if (ret == OV5640_OK)
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10c      	bne.n	80023b8 <OV5640_SetLightMode+0x44>
  {
    tmp = 0x46;
 800239e:	2346      	movs	r3, #70	; 0x46
 80023a0:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f103 0018 	add.w	r0, r3, #24
 80023a8:	f107 020f 	add.w	r2, r7, #15
 80023ac:	2301      	movs	r3, #1
 80023ae:	f245 1190 	movw	r1, #20880	; 0x5190
 80023b2:	f000 ff8f 	bl	80032d4 <ov5640_write_reg>
 80023b6:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10c      	bne.n	80023d8 <OV5640_SetLightMode+0x64>
  {
    tmp = 0xF8;
 80023be:	23f8      	movs	r3, #248	; 0xf8
 80023c0:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f103 0018 	add.w	r0, r3, #24
 80023c8:	f107 020f 	add.w	r2, r7, #15
 80023cc:	2301      	movs	r3, #1
 80023ce:	f245 1191 	movw	r1, #20881	; 0x5191
 80023d2:	f000 ff7f 	bl	80032d4 <ov5640_write_reg>
 80023d6:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10c      	bne.n	80023f8 <OV5640_SetLightMode+0x84>
  {
    tmp = 0x04;
 80023de:	2304      	movs	r3, #4
 80023e0:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f103 0018 	add.w	r0, r3, #24
 80023e8:	f107 020f 	add.w	r2, r7, #15
 80023ec:	2301      	movs	r3, #1
 80023ee:	f245 1192 	movw	r1, #20882	; 0x5192
 80023f2:	f000 ff6f 	bl	80032d4 <ov5640_write_reg>
 80023f6:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f040 80db 	bne.w	80025b6 <OV5640_SetLightMode+0x242>
  {
    switch (LightMode)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	3b01      	subs	r3, #1
 8002404:	2b07      	cmp	r3, #7
 8002406:	f200 80af 	bhi.w	8002568 <OV5640_SetLightMode+0x1f4>
 800240a:	a201      	add	r2, pc, #4	; (adr r2, 8002410 <OV5640_SetLightMode+0x9c>)
 800240c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002410:	08002431 	.word	0x08002431
 8002414:	0800247f 	.word	0x0800247f
 8002418:	08002569 	.word	0x08002569
 800241c:	0800251b 	.word	0x0800251b
 8002420:	08002569 	.word	0x08002569
 8002424:	08002569 	.word	0x08002569
 8002428:	08002569 	.word	0x08002569
 800242c:	080024cd 	.word	0x080024cd
    {
      case OV5640_LIGHT_SUNNY:
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8002430:	2300      	movs	r3, #0
 8002432:	613b      	str	r3, [r7, #16]
 8002434:	e01f      	b.n	8002476 <OV5640_SetLightMode+0x102>
        {
          if (ret != OV5640_ERROR)
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800243c:	d018      	beq.n	8002470 <OV5640_SetLightMode+0xfc>
          {
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 800243e:	4a61      	ldr	r2, [pc, #388]	; (80025c4 <OV5640_SetLightMode+0x250>)
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	885b      	ldrh	r3, [r3, #2]
 8002448:	b2db      	uxtb	r3, r3
 800244a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f103 0018 	add.w	r0, r3, #24
 8002452:	4a5c      	ldr	r2, [pc, #368]	; (80025c4 <OV5640_SetLightMode+0x250>)
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800245a:	f107 020f 	add.w	r2, r7, #15
 800245e:	2301      	movs	r3, #1
 8002460:	f000 ff38 	bl	80032d4 <ov5640_write_reg>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d002      	beq.n	8002470 <OV5640_SetLightMode+0xfc>
            {
              ret = OV5640_ERROR;
 800246a:	f04f 33ff 	mov.w	r3, #4294967295
 800246e:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	3301      	adds	r3, #1
 8002474:	613b      	str	r3, [r7, #16]
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	2b06      	cmp	r3, #6
 800247a:	d9dc      	bls.n	8002436 <OV5640_SetLightMode+0xc2>
            }
          }
        }
        break;
 800247c:	e09c      	b.n	80025b8 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_OFFICE:
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 800247e:	2300      	movs	r3, #0
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	e01f      	b.n	80024c4 <OV5640_SetLightMode+0x150>
        {
          if (ret != OV5640_ERROR)
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248a:	d018      	beq.n	80024be <OV5640_SetLightMode+0x14a>
          {
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 800248c:	4a4e      	ldr	r2, [pc, #312]	; (80025c8 <OV5640_SetLightMode+0x254>)
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	885b      	ldrh	r3, [r3, #2]
 8002496:	b2db      	uxtb	r3, r3
 8002498:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f103 0018 	add.w	r0, r3, #24
 80024a0:	4a49      	ldr	r2, [pc, #292]	; (80025c8 <OV5640_SetLightMode+0x254>)
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80024a8:	f107 020f 	add.w	r2, r7, #15
 80024ac:	2301      	movs	r3, #1
 80024ae:	f000 ff11 	bl	80032d4 <ov5640_write_reg>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d002      	beq.n	80024be <OV5640_SetLightMode+0x14a>
            {
              ret = OV5640_ERROR;
 80024b8:	f04f 33ff 	mov.w	r3, #4294967295
 80024bc:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	3301      	adds	r3, #1
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	2b06      	cmp	r3, #6
 80024c8:	d9dc      	bls.n	8002484 <OV5640_SetLightMode+0x110>
            }
          }
        }
        break;
 80024ca:	e075      	b.n	80025b8 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_CLOUDY:
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 80024cc:	2300      	movs	r3, #0
 80024ce:	613b      	str	r3, [r7, #16]
 80024d0:	e01f      	b.n	8002512 <OV5640_SetLightMode+0x19e>
        {
          if (ret != OV5640_ERROR)
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d8:	d018      	beq.n	800250c <OV5640_SetLightMode+0x198>
          {
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 80024da:	4a3c      	ldr	r2, [pc, #240]	; (80025cc <OV5640_SetLightMode+0x258>)
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4413      	add	r3, r2
 80024e2:	885b      	ldrh	r3, [r3, #2]
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f103 0018 	add.w	r0, r3, #24
 80024ee:	4a37      	ldr	r2, [pc, #220]	; (80025cc <OV5640_SetLightMode+0x258>)
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80024f6:	f107 020f 	add.w	r2, r7, #15
 80024fa:	2301      	movs	r3, #1
 80024fc:	f000 feea 	bl	80032d4 <ov5640_write_reg>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d002      	beq.n	800250c <OV5640_SetLightMode+0x198>
            {
              ret = OV5640_ERROR;
 8002506:	f04f 33ff 	mov.w	r3, #4294967295
 800250a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	3301      	adds	r3, #1
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	2b06      	cmp	r3, #6
 8002516:	d9dc      	bls.n	80024d2 <OV5640_SetLightMode+0x15e>
            }
          }
        }
        break;
 8002518:	e04e      	b.n	80025b8 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_HOME:
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 800251a:	2300      	movs	r3, #0
 800251c:	613b      	str	r3, [r7, #16]
 800251e:	e01f      	b.n	8002560 <OV5640_SetLightMode+0x1ec>
        {
          if (ret != OV5640_ERROR)
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002526:	d018      	beq.n	800255a <OV5640_SetLightMode+0x1e6>
          {
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8002528:	4a29      	ldr	r2, [pc, #164]	; (80025d0 <OV5640_SetLightMode+0x25c>)
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	885b      	ldrh	r3, [r3, #2]
 8002532:	b2db      	uxtb	r3, r3
 8002534:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f103 0018 	add.w	r0, r3, #24
 800253c:	4a24      	ldr	r2, [pc, #144]	; (80025d0 <OV5640_SetLightMode+0x25c>)
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002544:	f107 020f 	add.w	r2, r7, #15
 8002548:	2301      	movs	r3, #1
 800254a:	f000 fec3 	bl	80032d4 <ov5640_write_reg>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d002      	beq.n	800255a <OV5640_SetLightMode+0x1e6>
            {
              ret = OV5640_ERROR;
 8002554:	f04f 33ff 	mov.w	r3, #4294967295
 8002558:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	3301      	adds	r3, #1
 800255e:	613b      	str	r3, [r7, #16]
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	2b06      	cmp	r3, #6
 8002564:	d9dc      	bls.n	8002520 <OV5640_SetLightMode+0x1ac>
            }
          }
        }
        break;
 8002566:	e027      	b.n	80025b8 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_AUTO:
      default :
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8002568:	2300      	movs	r3, #0
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	e01f      	b.n	80025ae <OV5640_SetLightMode+0x23a>
        {
          if (ret != OV5640_ERROR)
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002574:	d018      	beq.n	80025a8 <OV5640_SetLightMode+0x234>
          {
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 8002576:	4a17      	ldr	r2, [pc, #92]	; (80025d4 <OV5640_SetLightMode+0x260>)
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	885b      	ldrh	r3, [r3, #2]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f103 0018 	add.w	r0, r3, #24
 800258a:	4a12      	ldr	r2, [pc, #72]	; (80025d4 <OV5640_SetLightMode+0x260>)
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002592:	f107 020f 	add.w	r2, r7, #15
 8002596:	2301      	movs	r3, #1
 8002598:	f000 fe9c 	bl	80032d4 <ov5640_write_reg>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d002      	beq.n	80025a8 <OV5640_SetLightMode+0x234>
            {
              ret = OV5640_ERROR;
 80025a2:	f04f 33ff 	mov.w	r3, #4294967295
 80025a6:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	3301      	adds	r3, #1
 80025ac:	613b      	str	r3, [r7, #16]
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	2b06      	cmp	r3, #6
 80025b2:	d9dc      	bls.n	800256e <OV5640_SetLightMode+0x1fa>
            }
          }
        }
        break;
 80025b4:	e000      	b.n	80025b8 <OV5640_SetLightMode+0x244>
    }
  }
 80025b6:	bf00      	nop
  return ret;
 80025b8:	697b      	ldr	r3, [r7, #20]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	080197f8 	.word	0x080197f8
 80025c8:	08019814 	.word	0x08019814
 80025cc:	08019830 	.word	0x08019830
 80025d0:	0801984c 	.word	0x0801984c
 80025d4:	08019868 	.word	0x08019868

080025d8 <OV5640_SetColorEffect>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetColorEffect(OV5640_Object_t *pObj, uint32_t Effect)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  switch (Effect)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	3b01      	subs	r3, #1
 80025e6:	2b1f      	cmp	r3, #31
 80025e8:	f200 81c0 	bhi.w	800296c <OV5640_SetColorEffect+0x394>
 80025ec:	a201      	add	r2, pc, #4	; (adr r2, 80025f4 <OV5640_SetColorEffect+0x1c>)
 80025ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f2:	bf00      	nop
 80025f4:	08002675 	.word	0x08002675
 80025f8:	080026ff 	.word	0x080026ff
 80025fc:	0800296d 	.word	0x0800296d
 8002600:	08002789 	.word	0x08002789
 8002604:	0800296d 	.word	0x0800296d
 8002608:	0800296d 	.word	0x0800296d
 800260c:	0800296d 	.word	0x0800296d
 8002610:	08002813 	.word	0x08002813
 8002614:	0800296d 	.word	0x0800296d
 8002618:	0800296d 	.word	0x0800296d
 800261c:	0800296d 	.word	0x0800296d
 8002620:	0800296d 	.word	0x0800296d
 8002624:	0800296d 	.word	0x0800296d
 8002628:	0800296d 	.word	0x0800296d
 800262c:	0800296d 	.word	0x0800296d
 8002630:	0800289d 	.word	0x0800289d
 8002634:	0800296d 	.word	0x0800296d
 8002638:	0800296d 	.word	0x0800296d
 800263c:	0800296d 	.word	0x0800296d
 8002640:	0800296d 	.word	0x0800296d
 8002644:	0800296d 	.word	0x0800296d
 8002648:	0800296d 	.word	0x0800296d
 800264c:	0800296d 	.word	0x0800296d
 8002650:	0800296d 	.word	0x0800296d
 8002654:	0800296d 	.word	0x0800296d
 8002658:	0800296d 	.word	0x0800296d
 800265c:	0800296d 	.word	0x0800296d
 8002660:	0800296d 	.word	0x0800296d
 8002664:	0800296d 	.word	0x0800296d
 8002668:	0800296d 	.word	0x0800296d
 800266c:	0800296d 	.word	0x0800296d
 8002670:	08002925 	.word	0x08002925
  {
    case OV5640_COLOR_EFFECT_BLUE:
      tmp = 0xFF;
 8002674:	23ff      	movs	r3, #255	; 0xff
 8002676:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f103 0018 	add.w	r0, r3, #24
 800267e:	f107 020b 	add.w	r2, r7, #11
 8002682:	2301      	movs	r3, #1
 8002684:	f245 0101 	movw	r1, #20481	; 0x5001
 8002688:	f000 fe24 	bl	80032d4 <ov5640_write_reg>
 800268c:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10c      	bne.n	80026ae <OV5640_SetColorEffect+0xd6>
      {
        tmp = 0x18;
 8002694:	2318      	movs	r3, #24
 8002696:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f103 0018 	add.w	r0, r3, #24
 800269e:	f107 020b 	add.w	r2, r7, #11
 80026a2:	2301      	movs	r3, #1
 80026a4:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80026a8:	f000 fe14 	bl	80032d4 <ov5640_write_reg>
 80026ac:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10c      	bne.n	80026ce <OV5640_SetColorEffect+0xf6>
      {
        tmp = 0xA0;
 80026b4:	23a0      	movs	r3, #160	; 0xa0
 80026b6:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f103 0018 	add.w	r0, r3, #24
 80026be:	f107 020b 	add.w	r2, r7, #11
 80026c2:	2301      	movs	r3, #1
 80026c4:	f245 5183 	movw	r1, #21891	; 0x5583
 80026c8:	f000 fe04 	bl	80032d4 <ov5640_write_reg>
 80026cc:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10c      	bne.n	80026ee <OV5640_SetColorEffect+0x116>
      {
        tmp = 0x40;
 80026d4:	2340      	movs	r3, #64	; 0x40
 80026d6:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f103 0018 	add.w	r0, r3, #24
 80026de:	f107 020b 	add.w	r2, r7, #11
 80026e2:	2301      	movs	r3, #1
 80026e4:	f245 5184 	movw	r1, #21892	; 0x5584
 80026e8:	f000 fdf4 	bl	80032d4 <ov5640_write_reg>
 80026ec:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 815f 	beq.w	80029b4 <OV5640_SetColorEffect+0x3dc>
      {
        ret = OV5640_ERROR;
 80026f6:	f04f 33ff 	mov.w	r3, #4294967295
 80026fa:	60fb      	str	r3, [r7, #12]
      }
      break;
 80026fc:	e15a      	b.n	80029b4 <OV5640_SetColorEffect+0x3dc>

    case OV5640_COLOR_EFFECT_RED:
      tmp = 0xFF;
 80026fe:	23ff      	movs	r3, #255	; 0xff
 8002700:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f103 0018 	add.w	r0, r3, #24
 8002708:	f107 020b 	add.w	r2, r7, #11
 800270c:	2301      	movs	r3, #1
 800270e:	f245 0101 	movw	r1, #20481	; 0x5001
 8002712:	f000 fddf 	bl	80032d4 <ov5640_write_reg>
 8002716:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10c      	bne.n	8002738 <OV5640_SetColorEffect+0x160>
      {
        tmp = 0x18;
 800271e:	2318      	movs	r3, #24
 8002720:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f103 0018 	add.w	r0, r3, #24
 8002728:	f107 020b 	add.w	r2, r7, #11
 800272c:	2301      	movs	r3, #1
 800272e:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002732:	f000 fdcf 	bl	80032d4 <ov5640_write_reg>
 8002736:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10c      	bne.n	8002758 <OV5640_SetColorEffect+0x180>
      {
        tmp = 0x80;
 800273e:	2380      	movs	r3, #128	; 0x80
 8002740:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f103 0018 	add.w	r0, r3, #24
 8002748:	f107 020b 	add.w	r2, r7, #11
 800274c:	2301      	movs	r3, #1
 800274e:	f245 5183 	movw	r1, #21891	; 0x5583
 8002752:	f000 fdbf 	bl	80032d4 <ov5640_write_reg>
 8002756:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10c      	bne.n	8002778 <OV5640_SetColorEffect+0x1a0>
      {
        tmp = 0xC0;
 800275e:	23c0      	movs	r3, #192	; 0xc0
 8002760:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f103 0018 	add.w	r0, r3, #24
 8002768:	f107 020b 	add.w	r2, r7, #11
 800276c:	2301      	movs	r3, #1
 800276e:	f245 5184 	movw	r1, #21892	; 0x5584
 8002772:	f000 fdaf 	bl	80032d4 <ov5640_write_reg>
 8002776:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 811c 	beq.w	80029b8 <OV5640_SetColorEffect+0x3e0>
      {
        ret = OV5640_ERROR;
 8002780:	f04f 33ff 	mov.w	r3, #4294967295
 8002784:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002786:	e117      	b.n	80029b8 <OV5640_SetColorEffect+0x3e0>

    case OV5640_COLOR_EFFECT_GREEN:
      tmp = 0xFF;
 8002788:	23ff      	movs	r3, #255	; 0xff
 800278a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f103 0018 	add.w	r0, r3, #24
 8002792:	f107 020b 	add.w	r2, r7, #11
 8002796:	2301      	movs	r3, #1
 8002798:	f245 0101 	movw	r1, #20481	; 0x5001
 800279c:	f000 fd9a 	bl	80032d4 <ov5640_write_reg>
 80027a0:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10c      	bne.n	80027c2 <OV5640_SetColorEffect+0x1ea>
      {
        tmp = 0x18;
 80027a8:	2318      	movs	r3, #24
 80027aa:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f103 0018 	add.w	r0, r3, #24
 80027b2:	f107 020b 	add.w	r2, r7, #11
 80027b6:	2301      	movs	r3, #1
 80027b8:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80027bc:	f000 fd8a 	bl	80032d4 <ov5640_write_reg>
 80027c0:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10c      	bne.n	80027e2 <OV5640_SetColorEffect+0x20a>
      {
        tmp = 0x60;
 80027c8:	2360      	movs	r3, #96	; 0x60
 80027ca:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f103 0018 	add.w	r0, r3, #24
 80027d2:	f107 020b 	add.w	r2, r7, #11
 80027d6:	2301      	movs	r3, #1
 80027d8:	f245 5183 	movw	r1, #21891	; 0x5583
 80027dc:	f000 fd7a 	bl	80032d4 <ov5640_write_reg>
 80027e0:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10c      	bne.n	8002802 <OV5640_SetColorEffect+0x22a>
      {
        tmp = 0x60;
 80027e8:	2360      	movs	r3, #96	; 0x60
 80027ea:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f103 0018 	add.w	r0, r3, #24
 80027f2:	f107 020b 	add.w	r2, r7, #11
 80027f6:	2301      	movs	r3, #1
 80027f8:	f245 5184 	movw	r1, #21892	; 0x5584
 80027fc:	f000 fd6a 	bl	80032d4 <ov5640_write_reg>
 8002800:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 80d9 	beq.w	80029bc <OV5640_SetColorEffect+0x3e4>
      {
        ret = OV5640_ERROR;
 800280a:	f04f 33ff 	mov.w	r3, #4294967295
 800280e:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002810:	e0d4      	b.n	80029bc <OV5640_SetColorEffect+0x3e4>

    case OV5640_COLOR_EFFECT_BW:
      tmp = 0xFF;
 8002812:	23ff      	movs	r3, #255	; 0xff
 8002814:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f103 0018 	add.w	r0, r3, #24
 800281c:	f107 020b 	add.w	r2, r7, #11
 8002820:	2301      	movs	r3, #1
 8002822:	f245 0101 	movw	r1, #20481	; 0x5001
 8002826:	f000 fd55 	bl	80032d4 <ov5640_write_reg>
 800282a:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10c      	bne.n	800284c <OV5640_SetColorEffect+0x274>
      {
        tmp = 0x18;
 8002832:	2318      	movs	r3, #24
 8002834:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f103 0018 	add.w	r0, r3, #24
 800283c:	f107 020b 	add.w	r2, r7, #11
 8002840:	2301      	movs	r3, #1
 8002842:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002846:	f000 fd45 	bl	80032d4 <ov5640_write_reg>
 800284a:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10c      	bne.n	800286c <OV5640_SetColorEffect+0x294>
      {
        tmp = 0x80;
 8002852:	2380      	movs	r3, #128	; 0x80
 8002854:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f103 0018 	add.w	r0, r3, #24
 800285c:	f107 020b 	add.w	r2, r7, #11
 8002860:	2301      	movs	r3, #1
 8002862:	f245 5183 	movw	r1, #21891	; 0x5583
 8002866:	f000 fd35 	bl	80032d4 <ov5640_write_reg>
 800286a:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10c      	bne.n	800288c <OV5640_SetColorEffect+0x2b4>
      {
        tmp = 0x80;
 8002872:	2380      	movs	r3, #128	; 0x80
 8002874:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f103 0018 	add.w	r0, r3, #24
 800287c:	f107 020b 	add.w	r2, r7, #11
 8002880:	2301      	movs	r3, #1
 8002882:	f245 5184 	movw	r1, #21892	; 0x5584
 8002886:	f000 fd25 	bl	80032d4 <ov5640_write_reg>
 800288a:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 8096 	beq.w	80029c0 <OV5640_SetColorEffect+0x3e8>
      {
        ret = OV5640_ERROR;
 8002894:	f04f 33ff 	mov.w	r3, #4294967295
 8002898:	60fb      	str	r3, [r7, #12]
      }
      break;
 800289a:	e091      	b.n	80029c0 <OV5640_SetColorEffect+0x3e8>

    case OV5640_COLOR_EFFECT_SEPIA:
      tmp = 0xFF;
 800289c:	23ff      	movs	r3, #255	; 0xff
 800289e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f103 0018 	add.w	r0, r3, #24
 80028a6:	f107 020b 	add.w	r2, r7, #11
 80028aa:	2301      	movs	r3, #1
 80028ac:	f245 0101 	movw	r1, #20481	; 0x5001
 80028b0:	f000 fd10 	bl	80032d4 <ov5640_write_reg>
 80028b4:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10c      	bne.n	80028d6 <OV5640_SetColorEffect+0x2fe>
      {
        tmp = 0x18;
 80028bc:	2318      	movs	r3, #24
 80028be:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f103 0018 	add.w	r0, r3, #24
 80028c6:	f107 020b 	add.w	r2, r7, #11
 80028ca:	2301      	movs	r3, #1
 80028cc:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80028d0:	f000 fd00 	bl	80032d4 <ov5640_write_reg>
 80028d4:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10c      	bne.n	80028f6 <OV5640_SetColorEffect+0x31e>
      {
        tmp = 0x40;
 80028dc:	2340      	movs	r3, #64	; 0x40
 80028de:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f103 0018 	add.w	r0, r3, #24
 80028e6:	f107 020b 	add.w	r2, r7, #11
 80028ea:	2301      	movs	r3, #1
 80028ec:	f245 5183 	movw	r1, #21891	; 0x5583
 80028f0:	f000 fcf0 	bl	80032d4 <ov5640_write_reg>
 80028f4:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10c      	bne.n	8002916 <OV5640_SetColorEffect+0x33e>
      {
        tmp = 0xA0;
 80028fc:	23a0      	movs	r3, #160	; 0xa0
 80028fe:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f103 0018 	add.w	r0, r3, #24
 8002906:	f107 020b 	add.w	r2, r7, #11
 800290a:	2301      	movs	r3, #1
 800290c:	f245 5184 	movw	r1, #21892	; 0x5584
 8002910:	f000 fce0 	bl	80032d4 <ov5640_write_reg>
 8002914:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d053      	beq.n	80029c4 <OV5640_SetColorEffect+0x3ec>
      {
        ret = OV5640_ERROR;
 800291c:	f04f 33ff 	mov.w	r3, #4294967295
 8002920:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002922:	e04f      	b.n	80029c4 <OV5640_SetColorEffect+0x3ec>

    case OV5640_COLOR_EFFECT_NEGATIVE:
      tmp = 0xFF;
 8002924:	23ff      	movs	r3, #255	; 0xff
 8002926:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f103 0018 	add.w	r0, r3, #24
 800292e:	f107 020b 	add.w	r2, r7, #11
 8002932:	2301      	movs	r3, #1
 8002934:	f245 0101 	movw	r1, #20481	; 0x5001
 8002938:	f000 fccc 	bl	80032d4 <ov5640_write_reg>
 800293c:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10c      	bne.n	800295e <OV5640_SetColorEffect+0x386>
      {
        tmp = 0x40;
 8002944:	2340      	movs	r3, #64	; 0x40
 8002946:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f103 0018 	add.w	r0, r3, #24
 800294e:	f107 020b 	add.w	r2, r7, #11
 8002952:	2301      	movs	r3, #1
 8002954:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002958:	f000 fcbc 	bl	80032d4 <ov5640_write_reg>
 800295c:	60f8      	str	r0, [r7, #12]
      }
      if (ret != OV5640_OK)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d031      	beq.n	80029c8 <OV5640_SetColorEffect+0x3f0>
      {
        ret = OV5640_ERROR;
 8002964:	f04f 33ff 	mov.w	r3, #4294967295
 8002968:	60fb      	str	r3, [r7, #12]
      }
      break;
 800296a:	e02d      	b.n	80029c8 <OV5640_SetColorEffect+0x3f0>

    case OV5640_COLOR_EFFECT_NONE:
    default :
      tmp = 0x7F;
 800296c:	237f      	movs	r3, #127	; 0x7f
 800296e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f103 0018 	add.w	r0, r3, #24
 8002976:	f107 020b 	add.w	r2, r7, #11
 800297a:	2301      	movs	r3, #1
 800297c:	f245 0101 	movw	r1, #20481	; 0x5001
 8002980:	f000 fca8 	bl	80032d4 <ov5640_write_reg>
 8002984:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10c      	bne.n	80029a6 <OV5640_SetColorEffect+0x3ce>
      {
        tmp = 0x00;
 800298c:	2300      	movs	r3, #0
 800298e:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f103 0018 	add.w	r0, r3, #24
 8002996:	f107 020b 	add.w	r2, r7, #11
 800299a:	2301      	movs	r3, #1
 800299c:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80029a0:	f000 fc98 	bl	80032d4 <ov5640_write_reg>
 80029a4:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00f      	beq.n	80029cc <OV5640_SetColorEffect+0x3f4>
      {
        ret = OV5640_ERROR;
 80029ac:	f04f 33ff 	mov.w	r3, #4294967295
 80029b0:	60fb      	str	r3, [r7, #12]
      }

      break;
 80029b2:	e00b      	b.n	80029cc <OV5640_SetColorEffect+0x3f4>
      break;
 80029b4:	bf00      	nop
 80029b6:	e00a      	b.n	80029ce <OV5640_SetColorEffect+0x3f6>
      break;
 80029b8:	bf00      	nop
 80029ba:	e008      	b.n	80029ce <OV5640_SetColorEffect+0x3f6>
      break;
 80029bc:	bf00      	nop
 80029be:	e006      	b.n	80029ce <OV5640_SetColorEffect+0x3f6>
      break;
 80029c0:	bf00      	nop
 80029c2:	e004      	b.n	80029ce <OV5640_SetColorEffect+0x3f6>
      break;
 80029c4:	bf00      	nop
 80029c6:	e002      	b.n	80029ce <OV5640_SetColorEffect+0x3f6>
      break;
 80029c8:	bf00      	nop
 80029ca:	e000      	b.n	80029ce <OV5640_SetColorEffect+0x3f6>
      break;
 80029cc:	bf00      	nop
  }

  return ret;
 80029ce:	68fb      	ldr	r3, [r7, #12]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <OV5640_SetBrightness>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetBrightness(OV5640_Object_t *pObj, int32_t Level)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b088      	sub	sp, #32
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 80029e2:	4a34      	ldr	r2, [pc, #208]	; (8002ab4 <OV5640_SetBrightness+0xdc>)
 80029e4:	f107 0310 	add.w	r3, r7, #16
 80029e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80029ea:	c303      	stmia	r3!, {r0, r1}
 80029ec:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 80029ee:	23ff      	movs	r3, #255	; 0xff
 80029f0:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f103 0018 	add.w	r0, r3, #24
 80029f8:	f107 020f 	add.w	r2, r7, #15
 80029fc:	2301      	movs	r3, #1
 80029fe:	f245 0101 	movw	r1, #20481	; 0x5001
 8002a02:	f000 fc67 	bl	80032d4 <ov5640_write_reg>
 8002a06:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d111      	bne.n	8002a32 <OV5640_SetBrightness+0x5a>
  {
    tmp = brightness_level[Level + 4];
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	3304      	adds	r3, #4
 8002a12:	3320      	adds	r3, #32
 8002a14:	443b      	add	r3, r7
 8002a16:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002a1a:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f103 0018 	add.w	r0, r3, #24
 8002a22:	f107 020f 	add.w	r2, r7, #15
 8002a26:	2301      	movs	r3, #1
 8002a28:	f245 5187 	movw	r1, #21895	; 0x5587
 8002a2c:	f000 fc52 	bl	80032d4 <ov5640_write_reg>
 8002a30:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10c      	bne.n	8002a52 <OV5640_SetBrightness+0x7a>
  {
    tmp = 0x04;
 8002a38:	2304      	movs	r3, #4
 8002a3a:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f103 0018 	add.w	r0, r3, #24
 8002a42:	f107 020f 	add.w	r2, r7, #15
 8002a46:	2301      	movs	r3, #1
 8002a48:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002a4c:	f000 fc42 	bl	80032d4 <ov5640_write_reg>
 8002a50:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d127      	bne.n	8002aa8 <OV5640_SetBrightness+0xd0>
  {
    if (Level < 0)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	da12      	bge.n	8002a84 <OV5640_SetBrightness+0xac>
    {
      tmp = 0x01;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f103 0018 	add.w	r0, r3, #24
 8002a68:	f107 020f 	add.w	r2, r7, #15
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	f245 5188 	movw	r1, #21896	; 0x5588
 8002a72:	f000 fc2f 	bl	80032d4 <ov5640_write_reg>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d015      	beq.n	8002aa8 <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 8002a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a80:	61fb      	str	r3, [r7, #28]
 8002a82:	e011      	b.n	8002aa8 <OV5640_SetBrightness+0xd0>
      }
    }
    else
    {
      tmp = 0x09;
 8002a84:	2309      	movs	r3, #9
 8002a86:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f103 0018 	add.w	r0, r3, #24
 8002a8e:	f107 020f 	add.w	r2, r7, #15
 8002a92:	2301      	movs	r3, #1
 8002a94:	f245 5188 	movw	r1, #21896	; 0x5588
 8002a98:	f000 fc1c 	bl	80032d4 <ov5640_write_reg>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d002      	beq.n	8002aa8 <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 8002aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ret;
 8002aa8:	69fb      	ldr	r3, [r7, #28]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3720      	adds	r7, #32
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	08019220 	.word	0x08019220

08002ab8 <OV5640_SetSaturation>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetSaturation(OV5640_Object_t *pObj, int32_t Level)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b088      	sub	sp, #32
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 8002ac2:	4a30      	ldr	r2, [pc, #192]	; (8002b84 <OV5640_SetSaturation+0xcc>)
 8002ac4:	f107 0310 	add.w	r3, r7, #16
 8002ac8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002aca:	c303      	stmia	r3!, {r0, r1}
 8002acc:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 8002ace:	23ff      	movs	r3, #255	; 0xff
 8002ad0:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f103 0018 	add.w	r0, r3, #24
 8002ad8:	f107 020f 	add.w	r2, r7, #15
 8002adc:	2301      	movs	r3, #1
 8002ade:	f245 0101 	movw	r1, #20481	; 0x5001
 8002ae2:	f000 fbf7 	bl	80032d4 <ov5640_write_reg>
 8002ae6:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d111      	bne.n	8002b12 <OV5640_SetSaturation+0x5a>
  {
    tmp = saturation_level[Level + 4];
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	3304      	adds	r3, #4
 8002af2:	3320      	adds	r3, #32
 8002af4:	443b      	add	r3, r7
 8002af6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002afa:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f103 0018 	add.w	r0, r3, #24
 8002b02:	f107 020f 	add.w	r2, r7, #15
 8002b06:	2301      	movs	r3, #1
 8002b08:	f245 5183 	movw	r1, #21891	; 0x5583
 8002b0c:	f000 fbe2 	bl	80032d4 <ov5640_write_reg>
 8002b10:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d10a      	bne.n	8002b2e <OV5640_SetSaturation+0x76>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f103 0018 	add.w	r0, r3, #24
 8002b1e:	f107 020f 	add.w	r2, r7, #15
 8002b22:	2301      	movs	r3, #1
 8002b24:	f245 5184 	movw	r1, #21892	; 0x5584
 8002b28:	f000 fbd4 	bl	80032d4 <ov5640_write_reg>
 8002b2c:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10c      	bne.n	8002b4e <OV5640_SetSaturation+0x96>
  {
    tmp = 0x02;
 8002b34:	2302      	movs	r3, #2
 8002b36:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f103 0018 	add.w	r0, r3, #24
 8002b3e:	f107 020f 	add.w	r2, r7, #15
 8002b42:	2301      	movs	r3, #1
 8002b44:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002b48:	f000 fbc4 	bl	80032d4 <ov5640_write_reg>
 8002b4c:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10c      	bne.n	8002b6e <OV5640_SetSaturation+0xb6>
  {
    tmp = 0x41;
 8002b54:	2341      	movs	r3, #65	; 0x41
 8002b56:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f103 0018 	add.w	r0, r3, #24
 8002b5e:	f107 020f 	add.w	r2, r7, #15
 8002b62:	2301      	movs	r3, #1
 8002b64:	f245 5188 	movw	r1, #21896	; 0x5588
 8002b68:	f000 fbb4 	bl	80032d4 <ov5640_write_reg>
 8002b6c:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d002      	beq.n	8002b7a <OV5640_SetSaturation+0xc2>
  {
    ret = OV5640_ERROR;
 8002b74:	f04f 33ff 	mov.w	r3, #4294967295
 8002b78:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8002b7a:	69fb      	ldr	r3, [r7, #28]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3720      	adds	r7, #32
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	0801922c 	.word	0x0801922c

08002b88 <OV5640_SetContrast>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetContrast(OV5640_Object_t *pObj, int32_t Level)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b088      	sub	sp, #32
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 8002b92:	4a30      	ldr	r2, [pc, #192]	; (8002c54 <OV5640_SetContrast+0xcc>)
 8002b94:	f107 0310 	add.w	r3, r7, #16
 8002b98:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b9a:	c303      	stmia	r3!, {r0, r1}
 8002b9c:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 8002b9e:	23ff      	movs	r3, #255	; 0xff
 8002ba0:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f103 0018 	add.w	r0, r3, #24
 8002ba8:	f107 020f 	add.w	r2, r7, #15
 8002bac:	2301      	movs	r3, #1
 8002bae:	f245 0101 	movw	r1, #20481	; 0x5001
 8002bb2:	f000 fb8f 	bl	80032d4 <ov5640_write_reg>
 8002bb6:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10c      	bne.n	8002bd8 <OV5640_SetContrast+0x50>
  {
    tmp = 0x04;
 8002bbe:	2304      	movs	r3, #4
 8002bc0:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f103 0018 	add.w	r0, r3, #24
 8002bc8:	f107 020f 	add.w	r2, r7, #15
 8002bcc:	2301      	movs	r3, #1
 8002bce:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002bd2:	f000 fb7f 	bl	80032d4 <ov5640_write_reg>
 8002bd6:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d111      	bne.n	8002c02 <OV5640_SetContrast+0x7a>
  {
    tmp = contrast_level[Level + 4];
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	3304      	adds	r3, #4
 8002be2:	3320      	adds	r3, #32
 8002be4:	443b      	add	r3, r7
 8002be6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002bea:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f103 0018 	add.w	r0, r3, #24
 8002bf2:	f107 020f 	add.w	r2, r7, #15
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	f245 5186 	movw	r1, #21894	; 0x5586
 8002bfc:	f000 fb6a 	bl	80032d4 <ov5640_write_reg>
 8002c00:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10a      	bne.n	8002c1e <OV5640_SetContrast+0x96>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL5, &tmp, 1);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f103 0018 	add.w	r0, r3, #24
 8002c0e:	f107 020f 	add.w	r2, r7, #15
 8002c12:	2301      	movs	r3, #1
 8002c14:	f245 5185 	movw	r1, #21893	; 0x5585
 8002c18:	f000 fb5c 	bl	80032d4 <ov5640_write_reg>
 8002c1c:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10c      	bne.n	8002c3e <OV5640_SetContrast+0xb6>
  {
    tmp = 0x41;
 8002c24:	2341      	movs	r3, #65	; 0x41
 8002c26:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f103 0018 	add.w	r0, r3, #24
 8002c2e:	f107 020f 	add.w	r2, r7, #15
 8002c32:	2301      	movs	r3, #1
 8002c34:	f245 5188 	movw	r1, #21896	; 0x5588
 8002c38:	f000 fb4c 	bl	80032d4 <ov5640_write_reg>
 8002c3c:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d002      	beq.n	8002c4a <OV5640_SetContrast+0xc2>
  {
    ret = OV5640_ERROR;
 8002c44:	f04f 33ff 	mov.w	r3, #4294967295
 8002c48:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8002c4a:	69fb      	ldr	r3, [r7, #28]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3720      	adds	r7, #32
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	08019238 	.word	0x08019238

08002c58 <OV5640_SetHueDegree>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetHueDegree(OV5640_Object_t *pObj, int32_t Degree)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08e      	sub	sp, #56	; 0x38
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 8002c62:	4a3c      	ldr	r2, [pc, #240]	; (8002d54 <OV5640_SetHueDegree+0xfc>)
 8002c64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c68:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x6FU
                                     };
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 8002c6e:	4a3a      	ldr	r2, [pc, #232]	; (8002d58 <OV5640_SetHueDegree+0x100>)
 8002c70:	f107 031c 	add.w	r3, r7, #28
 8002c74:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x40U
                                     };
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 8002c7a:	4a38      	ldr	r2, [pc, #224]	; (8002d5c <OV5640_SetHueDegree+0x104>)
 8002c7c:	f107 0310 	add.w	r3, r7, #16
 8002c80:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c82:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x31U
                                     };
  uint8_t tmp;

  tmp = 0xFF;
 8002c86:	23ff      	movs	r3, #255	; 0xff
 8002c88:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f103 0018 	add.w	r0, r3, #24
 8002c90:	f107 020f 	add.w	r2, r7, #15
 8002c94:	2301      	movs	r3, #1
 8002c96:	f245 0101 	movw	r1, #20481	; 0x5001
 8002c9a:	f000 fb1b 	bl	80032d4 <ov5640_write_reg>
 8002c9e:	6378      	str	r0, [r7, #52]	; 0x34

  if (ret == OV5640_OK)
 8002ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10c      	bne.n	8002cc0 <OV5640_SetHueDegree+0x68>
  {
    tmp = 0x01;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f103 0018 	add.w	r0, r3, #24
 8002cb0:	f107 020f 	add.w	r2, r7, #15
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002cba:	f000 fb0b 	bl	80032d4 <ov5640_write_reg>
 8002cbe:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8002cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d111      	bne.n	8002cea <OV5640_SetHueDegree+0x92>
  {
    tmp = hue_degree_ctrl1[Degree + 6];
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	3306      	adds	r3, #6
 8002cca:	3338      	adds	r3, #56	; 0x38
 8002ccc:	443b      	add	r3, r7
 8002cce:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002cd2:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f103 0018 	add.w	r0, r3, #24
 8002cda:	f107 020f 	add.w	r2, r7, #15
 8002cde:	2301      	movs	r3, #1
 8002ce0:	f245 5181 	movw	r1, #21889	; 0x5581
 8002ce4:	f000 faf6 	bl	80032d4 <ov5640_write_reg>
 8002ce8:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8002cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d111      	bne.n	8002d14 <OV5640_SetHueDegree+0xbc>
  {
    tmp = hue_degree_ctrl2[Degree + 6];
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	3306      	adds	r3, #6
 8002cf4:	3338      	adds	r3, #56	; 0x38
 8002cf6:	443b      	add	r3, r7
 8002cf8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002cfc:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f103 0018 	add.w	r0, r3, #24
 8002d04:	f107 020f 	add.w	r2, r7, #15
 8002d08:	2301      	movs	r3, #1
 8002d0a:	f245 5182 	movw	r1, #21890	; 0x5582
 8002d0e:	f000 fae1 	bl	80032d4 <ov5640_write_reg>
 8002d12:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8002d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d111      	bne.n	8002d3e <OV5640_SetHueDegree+0xe6>
  {
    tmp = hue_degree_ctrl8[Degree + 6];
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	3306      	adds	r3, #6
 8002d1e:	3338      	adds	r3, #56	; 0x38
 8002d20:	443b      	add	r3, r7
 8002d22:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d26:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f103 0018 	add.w	r0, r3, #24
 8002d2e:	f107 020f 	add.w	r2, r7, #15
 8002d32:	2301      	movs	r3, #1
 8002d34:	f245 5188 	movw	r1, #21896	; 0x5588
 8002d38:	f000 facc 	bl	80032d4 <ov5640_write_reg>
 8002d3c:	6378      	str	r0, [r7, #52]	; 0x34
  }

  if (ret != OV5640_OK)
 8002d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d002      	beq.n	8002d4a <OV5640_SetHueDegree+0xf2>
  {
    ret = OV5640_ERROR;
 8002d44:	f04f 33ff 	mov.w	r3, #4294967295
 8002d48:	637b      	str	r3, [r7, #52]	; 0x34
  }

  return ret;
 8002d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3738      	adds	r7, #56	; 0x38
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	08019244 	.word	0x08019244
 8002d58:	08019250 	.word	0x08019250
 8002d5c:	0801925c 	.word	0x0801925c

08002d60 <OV5640_MirrorFlipConfig>:
  * @param  pObj  pointer to component object
  * @param  Config To configure mirror, flip, both or none
  * @retval Component status
  */
int32_t OV5640_MirrorFlipConfig(OV5640_Object_t *pObj, uint32_t Config)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp3820 = 0;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	72fb      	strb	r3, [r7, #11]
  uint8_t tmp3821;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f103 0018 	add.w	r0, r3, #24
 8002d74:	f107 020b 	add.w	r2, r7, #11
 8002d78:	2301      	movs	r3, #1
 8002d7a:	f643 0120 	movw	r1, #14368	; 0x3820
 8002d7e:	f000 fa92 	bl	80032a6 <ov5640_read_reg>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <OV5640_MirrorFlipConfig+0x30>
  {
    ret = OV5640_ERROR;
 8002d88:	f04f 33ff 	mov.w	r3, #4294967295
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	e0cb      	b.n	8002f28 <OV5640_MirrorFlipConfig+0x1c8>
  }
  else
  {
    tmp3820 &= 0xF9U;
 8002d90:	7afb      	ldrb	r3, [r7, #11]
 8002d92:	f023 0306 	bic.w	r3, r3, #6
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	72fb      	strb	r3, [r7, #11]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f103 0018 	add.w	r0, r3, #24
 8002da0:	f107 020a 	add.w	r2, r7, #10
 8002da4:	2301      	movs	r3, #1
 8002da6:	f643 0121 	movw	r1, #14369	; 0x3821
 8002daa:	f000 fa7c 	bl	80032a6 <ov5640_read_reg>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d003      	beq.n	8002dbc <OV5640_MirrorFlipConfig+0x5c>
    {
      ret = OV5640_ERROR;
 8002db4:	f04f 33ff 	mov.w	r3, #4294967295
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	e0b5      	b.n	8002f28 <OV5640_MirrorFlipConfig+0x1c8>
    }
    else
    {
      ret = OV5640_OK;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	60fb      	str	r3, [r7, #12]
      tmp3821 &= 0xF9U;
 8002dc0:	7abb      	ldrb	r3, [r7, #10]
 8002dc2:	f023 0306 	bic.w	r3, r3, #6
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	72bb      	strb	r3, [r7, #10]

      switch (Config)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2b03      	cmp	r3, #3
 8002dce:	d056      	beq.n	8002e7e <OV5640_MirrorFlipConfig+0x11e>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	2b03      	cmp	r3, #3
 8002dd4:	d87f      	bhi.n	8002ed6 <OV5640_MirrorFlipConfig+0x176>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d029      	beq.n	8002e30 <OV5640_MirrorFlipConfig+0xd0>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d179      	bne.n	8002ed6 <OV5640_MirrorFlipConfig+0x176>
      {
        case OV5640_MIRROR:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f103 0018 	add.w	r0, r3, #24
 8002de8:	f107 020b 	add.w	r2, r7, #11
 8002dec:	2301      	movs	r3, #1
 8002dee:	f643 0120 	movw	r1, #14368	; 0x3820
 8002df2:	f000 fa6f 	bl	80032d4 <ov5640_write_reg>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <OV5640_MirrorFlipConfig+0xa4>
          {
            ret = OV5640_ERROR;
 8002dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8002e00:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002e02:	e08a      	b.n	8002f1a <OV5640_MirrorFlipConfig+0x1ba>
            tmp3821 |= 0x06U;
 8002e04:	7abb      	ldrb	r3, [r7, #10]
 8002e06:	f043 0306 	orr.w	r3, r3, #6
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f103 0018 	add.w	r0, r3, #24
 8002e14:	f107 020a 	add.w	r2, r7, #10
 8002e18:	2301      	movs	r3, #1
 8002e1a:	f643 0121 	movw	r1, #14369	; 0x3821
 8002e1e:	f000 fa59 	bl	80032d4 <ov5640_write_reg>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d078      	beq.n	8002f1a <OV5640_MirrorFlipConfig+0x1ba>
              ret = OV5640_ERROR;
 8002e28:	f04f 33ff 	mov.w	r3, #4294967295
 8002e2c:	60fb      	str	r3, [r7, #12]
          break;
 8002e2e:	e074      	b.n	8002f1a <OV5640_MirrorFlipConfig+0x1ba>
        case OV5640_FLIP:
          tmp3820 |= 0x06U;
 8002e30:	7afb      	ldrb	r3, [r7, #11]
 8002e32:	f043 0306 	orr.w	r3, r3, #6
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f103 0018 	add.w	r0, r3, #24
 8002e40:	f107 020b 	add.w	r2, r7, #11
 8002e44:	2301      	movs	r3, #1
 8002e46:	f643 0120 	movw	r1, #14368	; 0x3820
 8002e4a:	f000 fa43 	bl	80032d4 <ov5640_write_reg>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <OV5640_MirrorFlipConfig+0xfc>
          {
            ret = OV5640_ERROR;
 8002e54:	f04f 33ff 	mov.w	r3, #4294967295
 8002e58:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002e5a:	e060      	b.n	8002f1e <OV5640_MirrorFlipConfig+0x1be>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f103 0018 	add.w	r0, r3, #24
 8002e62:	f107 020a 	add.w	r2, r7, #10
 8002e66:	2301      	movs	r3, #1
 8002e68:	f643 0121 	movw	r1, #14369	; 0x3821
 8002e6c:	f000 fa32 	bl	80032d4 <ov5640_write_reg>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d053      	beq.n	8002f1e <OV5640_MirrorFlipConfig+0x1be>
              ret = OV5640_ERROR;
 8002e76:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7a:	60fb      	str	r3, [r7, #12]
          break;
 8002e7c:	e04f      	b.n	8002f1e <OV5640_MirrorFlipConfig+0x1be>
        case OV5640_MIRROR_FLIP:
          tmp3820 |= 0x06U;
 8002e7e:	7afb      	ldrb	r3, [r7, #11]
 8002e80:	f043 0306 	orr.w	r3, r3, #6
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f103 0018 	add.w	r0, r3, #24
 8002e8e:	f107 020b 	add.w	r2, r7, #11
 8002e92:	2301      	movs	r3, #1
 8002e94:	f643 0120 	movw	r1, #14368	; 0x3820
 8002e98:	f000 fa1c 	bl	80032d4 <ov5640_write_reg>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <OV5640_MirrorFlipConfig+0x14a>
          {
            ret = OV5640_ERROR;
 8002ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea6:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002ea8:	e03b      	b.n	8002f22 <OV5640_MirrorFlipConfig+0x1c2>
            tmp3821 |= 0x06U;
 8002eaa:	7abb      	ldrb	r3, [r7, #10]
 8002eac:	f043 0306 	orr.w	r3, r3, #6
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f103 0018 	add.w	r0, r3, #24
 8002eba:	f107 020a 	add.w	r2, r7, #10
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	f643 0121 	movw	r1, #14369	; 0x3821
 8002ec4:	f000 fa06 	bl	80032d4 <ov5640_write_reg>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d029      	beq.n	8002f22 <OV5640_MirrorFlipConfig+0x1c2>
              ret = OV5640_ERROR;
 8002ece:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed2:	60fb      	str	r3, [r7, #12]
          break;
 8002ed4:	e025      	b.n	8002f22 <OV5640_MirrorFlipConfig+0x1c2>

        case OV5640_MIRROR_FLIP_NONE:
        default:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f103 0018 	add.w	r0, r3, #24
 8002edc:	f107 020b 	add.w	r2, r7, #11
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	f643 0120 	movw	r1, #14368	; 0x3820
 8002ee6:	f000 f9f5 	bl	80032d4 <ov5640_write_reg>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d003      	beq.n	8002ef8 <OV5640_MirrorFlipConfig+0x198>
          {
            ret = OV5640_ERROR;
 8002ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef4:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002ef6:	e016      	b.n	8002f26 <OV5640_MirrorFlipConfig+0x1c6>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f103 0018 	add.w	r0, r3, #24
 8002efe:	f107 020a 	add.w	r2, r7, #10
 8002f02:	2301      	movs	r3, #1
 8002f04:	f643 0121 	movw	r1, #14369	; 0x3821
 8002f08:	f000 f9e4 	bl	80032d4 <ov5640_write_reg>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d009      	beq.n	8002f26 <OV5640_MirrorFlipConfig+0x1c6>
              ret = OV5640_ERROR;
 8002f12:	f04f 33ff 	mov.w	r3, #4294967295
 8002f16:	60fb      	str	r3, [r7, #12]
          break;
 8002f18:	e005      	b.n	8002f26 <OV5640_MirrorFlipConfig+0x1c6>
          break;
 8002f1a:	bf00      	nop
 8002f1c:	e004      	b.n	8002f28 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002f1e:	bf00      	nop
 8002f20:	e002      	b.n	8002f28 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002f22:	bf00      	nop
 8002f24:	e000      	b.n	8002f28 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002f26:	bf00      	nop
      }
    }
  }

  return ret;
 8002f28:	68fb      	ldr	r3, [r7, #12]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <OV5640_ZoomConfig>:
  * @param  pObj  pointer to component object
  * @param  Zoom  Zoom to be configured
  * @retval Component status
  */
int32_t OV5640_ZoomConfig(OV5640_Object_t *pObj, uint32_t Zoom)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b086      	sub	sp, #24
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
 8002f3a:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	617b      	str	r3, [r7, #20]
  uint32_t res;
  uint32_t zoom;
  uint8_t tmp;

  /* Get camera resolution */
  if (OV5640_GetResolution(pObj, &res) != OV5640_OK)
 8002f40:	f107 030c 	add.w	r3, r7, #12
 8002f44:	4619      	mov	r1, r3
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7ff f8a2 	bl	8002090 <OV5640_GetResolution>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <OV5640_ZoomConfig+0x28>
  {
    ret = OV5640_ERROR;
 8002f52:	f04f 33ff 	mov.w	r3, #4294967295
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	e04e      	b.n	8002ff8 <OV5640_ZoomConfig+0xc6>
  }
  else
  {
    zoom = Zoom;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	613b      	str	r3, [r7, #16]

    if (zoom == OV5640_ZOOM_x1)
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	2b44      	cmp	r3, #68	; 0x44
 8002f62:	d112      	bne.n	8002f8a <OV5640_ZoomConfig+0x58>
    {
      tmp = 0x10;
 8002f64:	2310      	movs	r3, #16
 8002f66:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f103 0018 	add.w	r0, r3, #24
 8002f6e:	f107 020b 	add.w	r2, r7, #11
 8002f72:	2301      	movs	r3, #1
 8002f74:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 8002f78:	f000 f9ac 	bl	80032d4 <ov5640_write_reg>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d03a      	beq.n	8002ff8 <OV5640_ZoomConfig+0xc6>
      {
        ret = OV5640_ERROR;
 8002f82:	f04f 33ff 	mov.w	r3, #4294967295
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	e036      	b.n	8002ff8 <OV5640_ZoomConfig+0xc6>
      }
    }
    else
    {
      switch (res)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d802      	bhi.n	8002f96 <OV5640_ZoomConfig+0x64>
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d103      	bne.n	8002f9c <OV5640_ZoomConfig+0x6a>
          break;
        case OV5640_R640x480:
          zoom = zoom >> 2U;
          break;
        default:
          break;
 8002f94:	e00a      	b.n	8002fac <OV5640_ZoomConfig+0x7a>
      switch (res)
 8002f96:	2b03      	cmp	r3, #3
 8002f98:	d004      	beq.n	8002fa4 <OV5640_ZoomConfig+0x72>
          break;
 8002f9a:	e007      	b.n	8002fac <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 1U;
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	085b      	lsrs	r3, r3, #1
 8002fa0:	613b      	str	r3, [r7, #16]
          break;
 8002fa2:	e003      	b.n	8002fac <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 2U;
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	089b      	lsrs	r3, r3, #2
 8002fa8:	613b      	str	r3, [r7, #16]
          break;
 8002faa:	bf00      	nop
      }

      tmp = 0x00;
 8002fac:	2300      	movs	r3, #0
 8002fae:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f103 0018 	add.w	r0, r3, #24
 8002fb6:	f107 020b 	add.w	r2, r7, #11
 8002fba:	2301      	movs	r3, #1
 8002fbc:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 8002fc0:	f000 f988 	bl	80032d4 <ov5640_write_reg>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <OV5640_ZoomConfig+0xa0>
      {
        ret = OV5640_ERROR;
 8002fca:	f04f 33ff 	mov.w	r3, #4294967295
 8002fce:	617b      	str	r3, [r7, #20]
 8002fd0:	e012      	b.n	8002ff8 <OV5640_ZoomConfig+0xc6>
      }
      else
      {
        tmp = (uint8_t)zoom;
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	72fb      	strb	r3, [r7, #11]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f103 0018 	add.w	r0, r3, #24
 8002fde:	f107 020b 	add.w	r2, r7, #11
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	f245 6101 	movw	r1, #22017	; 0x5601
 8002fe8:	f000 f974 	bl	80032d4 <ov5640_write_reg>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <OV5640_ZoomConfig+0xc6>
        {
          ret = OV5640_ERROR;
 8002ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff6:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 8002ff8:	697b      	ldr	r3, [r7, #20]
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3718      	adds	r7, #24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <OV5640_NightModeConfig>:
  * @param  pObj  pointer to component object
  * @param  Cmd   Enable disable night mode
  * @retval Component status
  */
int32_t OV5640_NightModeConfig(OV5640_Object_t *pObj, uint32_t Cmd)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b084      	sub	sp, #16
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
 800300a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp = 0;
 800300c:	2300      	movs	r3, #0
 800300e:	72fb      	strb	r3, [r7, #11]

  if (Cmd == NIGHT_MODE_ENABLE)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	2b01      	cmp	r3, #1
 8003014:	f040 80ce 	bne.w	80031b4 <OV5640_NightModeConfig+0x1b2>
  {
    /* Auto Frame Rate: 15fps ~ 3.75fps night mode for 60/50Hz light environment,
    24Mhz clock input,24Mhz PCLK*/
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL4, &tmp, 1);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f103 0018 	add.w	r0, r3, #24
 800301e:	f107 020b 	add.w	r2, r7, #11
 8003022:	2301      	movs	r3, #1
 8003024:	f243 0138 	movw	r1, #12344	; 0x3038
 8003028:	f000 f954 	bl	80032d4 <ov5640_write_reg>
 800302c:	60f8      	str	r0, [r7, #12]
    if (ret == OV5640_OK)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10a      	bne.n	800304a <OV5640_NightModeConfig+0x48>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL5, &tmp, 1);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f103 0018 	add.w	r0, r3, #24
 800303a:	f107 020b 	add.w	r2, r7, #11
 800303e:	2301      	movs	r3, #1
 8003040:	f243 0139 	movw	r1, #12345	; 0x3039
 8003044:	f000 f946 	bl	80032d4 <ov5640_write_reg>
 8003048:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10c      	bne.n	800306a <OV5640_NightModeConfig+0x68>
    {
      tmp = 0x7C;
 8003050:	237c      	movs	r3, #124	; 0x7c
 8003052:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f103 0018 	add.w	r0, r3, #24
 800305a:	f107 020b 	add.w	r2, r7, #11
 800305e:	2301      	movs	r3, #1
 8003060:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8003064:	f000 f936 	bl	80032d4 <ov5640_write_reg>
 8003068:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10c      	bne.n	800308a <OV5640_NightModeConfig+0x88>
    {
      tmp = 0x01;
 8003070:	2301      	movs	r3, #1
 8003072:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f103 0018 	add.w	r0, r3, #24
 800307a:	f107 020b 	add.w	r2, r7, #11
 800307e:	2301      	movs	r3, #1
 8003080:	f643 2108 	movw	r1, #14856	; 0x3a08
 8003084:	f000 f926 	bl	80032d4 <ov5640_write_reg>
 8003088:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10c      	bne.n	80030aa <OV5640_NightModeConfig+0xa8>
    {
      tmp = 0x27;
 8003090:	2327      	movs	r3, #39	; 0x27
 8003092:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f103 0018 	add.w	r0, r3, #24
 800309a:	f107 020b 	add.w	r2, r7, #11
 800309e:	2301      	movs	r3, #1
 80030a0:	f643 2109 	movw	r1, #14857	; 0x3a09
 80030a4:	f000 f916 	bl	80032d4 <ov5640_write_reg>
 80030a8:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d10c      	bne.n	80030ca <OV5640_NightModeConfig+0xc8>
    {
      tmp = 0x00;
 80030b0:	2300      	movs	r3, #0
 80030b2:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_HIGH, &tmp, 1);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f103 0018 	add.w	r0, r3, #24
 80030ba:	f107 020b 	add.w	r2, r7, #11
 80030be:	2301      	movs	r3, #1
 80030c0:	f643 210a 	movw	r1, #14858	; 0x3a0a
 80030c4:	f000 f906 	bl	80032d4 <ov5640_write_reg>
 80030c8:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10c      	bne.n	80030ea <OV5640_NightModeConfig+0xe8>
    {
      tmp = 0xF6;
 80030d0:	23f6      	movs	r3, #246	; 0xf6
 80030d2:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f103 0018 	add.w	r0, r3, #24
 80030da:	f107 020b 	add.w	r2, r7, #11
 80030de:	2301      	movs	r3, #1
 80030e0:	f643 210b 	movw	r1, #14859	; 0x3a0b
 80030e4:	f000 f8f6 	bl	80032d4 <ov5640_write_reg>
 80030e8:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10c      	bne.n	800310a <OV5640_NightModeConfig+0x108>
    {
      tmp = 0x04;
 80030f0:	2304      	movs	r3, #4
 80030f2:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f103 0018 	add.w	r0, r3, #24
 80030fa:	f107 020b 	add.w	r2, r7, #11
 80030fe:	2301      	movs	r3, #1
 8003100:	f643 210d 	movw	r1, #14861	; 0x3a0d
 8003104:	f000 f8e6 	bl	80032d4 <ov5640_write_reg>
 8003108:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10a      	bne.n	8003126 <OV5640_NightModeConfig+0x124>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0E, &tmp, 1);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f103 0018 	add.w	r0, r3, #24
 8003116:	f107 020b 	add.w	r2, r7, #11
 800311a:	2301      	movs	r3, #1
 800311c:	f643 210e 	movw	r1, #14862	; 0x3a0e
 8003120:	f000 f8d8 	bl	80032d4 <ov5640_write_reg>
 8003124:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10c      	bne.n	8003146 <OV5640_NightModeConfig+0x144>
    {
      tmp = 0x0B;
 800312c:	230b      	movs	r3, #11
 800312e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f103 0018 	add.w	r0, r3, #24
 8003136:	f107 020b 	add.w	r2, r7, #11
 800313a:	2301      	movs	r3, #1
 800313c:	f643 2102 	movw	r1, #14850	; 0x3a02
 8003140:	f000 f8c8 	bl	80032d4 <ov5640_write_reg>
 8003144:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10c      	bne.n	8003166 <OV5640_NightModeConfig+0x164>
    {
      tmp = 0x88;
 800314c:	2388      	movs	r3, #136	; 0x88
 800314e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f103 0018 	add.w	r0, r3, #24
 8003156:	f107 020b 	add.w	r2, r7, #11
 800315a:	2301      	movs	r3, #1
 800315c:	f643 2103 	movw	r1, #14851	; 0x3a03
 8003160:	f000 f8b8 	bl	80032d4 <ov5640_write_reg>
 8003164:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10c      	bne.n	8003186 <OV5640_NightModeConfig+0x184>
    {
      tmp = 0x0B;
 800316c:	230b      	movs	r3, #11
 800316e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f103 0018 	add.w	r0, r3, #24
 8003176:	f107 020b 	add.w	r2, r7, #11
 800317a:	2301      	movs	r3, #1
 800317c:	f643 2114 	movw	r1, #14868	; 0x3a14
 8003180:	f000 f8a8 	bl	80032d4 <ov5640_write_reg>
 8003184:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10c      	bne.n	80031a6 <OV5640_NightModeConfig+0x1a4>
    {
      tmp = 0x88;
 800318c:	2388      	movs	r3, #136	; 0x88
 800318e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f103 0018 	add.w	r0, r3, #24
 8003196:	f107 020b 	add.w	r2, r7, #11
 800319a:	2301      	movs	r3, #1
 800319c:	f643 2115 	movw	r1, #14869	; 0x3a15
 80031a0:	f000 f898 	bl	80032d4 <ov5640_write_reg>
 80031a4:	60f8      	str	r0, [r7, #12]
    }
    if (ret != OV5640_OK)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d02b      	beq.n	8003204 <OV5640_NightModeConfig+0x202>
    {
      ret = OV5640_ERROR;
 80031ac:	f04f 33ff 	mov.w	r3, #4294967295
 80031b0:	60fb      	str	r3, [r7, #12]
 80031b2:	e027      	b.n	8003204 <OV5640_NightModeConfig+0x202>
    }
  }
  else
  {
    if (ov5640_read_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f103 0018 	add.w	r0, r3, #24
 80031ba:	f107 020b 	add.w	r2, r7, #11
 80031be:	2301      	movs	r3, #1
 80031c0:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 80031c4:	f000 f86f 	bl	80032a6 <ov5640_read_reg>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <OV5640_NightModeConfig+0x1d4>
    {
      ret = OV5640_ERROR;
 80031ce:	f04f 33ff 	mov.w	r3, #4294967295
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	e016      	b.n	8003204 <OV5640_NightModeConfig+0x202>
    }
    else
    {
      ret = OV5640_OK;
 80031d6:	2300      	movs	r3, #0
 80031d8:	60fb      	str	r3, [r7, #12]
      tmp &= 0xFBU;
 80031da:	7afb      	ldrb	r3, [r7, #11]
 80031dc:	f023 0304 	bic.w	r3, r3, #4
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	72fb      	strb	r3, [r7, #11]
      /* Set Bit 2 to 0 */
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f103 0018 	add.w	r0, r3, #24
 80031ea:	f107 020b 	add.w	r2, r7, #11
 80031ee:	2301      	movs	r3, #1
 80031f0:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 80031f4:	f000 f86e 	bl	80032d4 <ov5640_write_reg>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d002      	beq.n	8003204 <OV5640_NightModeConfig+0x202>
      {
        ret = OV5640_ERROR;
 80031fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003202:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8003204:	68fb      	ldr	r3, [r7, #12]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <OV5640_Delay>:
  * @param pObj   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval OV5640_OK
  */
static int32_t OV5640_Delay(OV5640_Object_t *pObj, uint32_t Delay)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b084      	sub	sp, #16
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
 8003216:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	4798      	blx	r3
 800321e:	4603      	mov	r3, r0
 8003220:	60fb      	str	r3, [r7, #12]
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8003222:	bf00      	nop
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	4798      	blx	r3
 800322a:	4603      	mov	r3, r0
 800322c:	461a      	mov	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	429a      	cmp	r2, r3
 8003236:	d8f5      	bhi.n	8003224 <OV5640_Delay+0x16>
  {
  }
  return OV5640_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <OV5640_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003242:	b590      	push	{r4, r7, lr}
 8003244:	b087      	sub	sp, #28
 8003246:	af00      	add	r7, sp, #0
 8003248:	60f8      	str	r0, [r7, #12]
 800324a:	607a      	str	r2, [r7, #4]
 800324c:	461a      	mov	r2, r3
 800324e:	460b      	mov	r3, r1
 8003250:	817b      	strh	r3, [r7, #10]
 8003252:	4613      	mov	r3, r2
 8003254:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	691c      	ldr	r4, [r3, #16]
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	8918      	ldrh	r0, [r3, #8]
 8003262:	893b      	ldrh	r3, [r7, #8]
 8003264:	8979      	ldrh	r1, [r7, #10]
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	47a0      	blx	r4
 800326a:	4603      	mov	r3, r0
}
 800326c:	4618      	mov	r0, r3
 800326e:	371c      	adds	r7, #28
 8003270:	46bd      	mov	sp, r7
 8003272:	bd90      	pop	{r4, r7, pc}

08003274 <OV5640_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003274:	b590      	push	{r4, r7, lr}
 8003276:	b087      	sub	sp, #28
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	607a      	str	r2, [r7, #4]
 800327e:	461a      	mov	r2, r3
 8003280:	460b      	mov	r3, r1
 8003282:	817b      	strh	r3, [r7, #10]
 8003284:	4613      	mov	r3, r2
 8003286:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	68dc      	ldr	r4, [r3, #12]
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	8918      	ldrh	r0, [r3, #8]
 8003294:	893b      	ldrh	r3, [r7, #8]
 8003296:	8979      	ldrh	r1, [r7, #10]
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	47a0      	blx	r4
 800329c:	4603      	mov	r3, r0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	371c      	adds	r7, #28
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd90      	pop	{r4, r7, pc}

080032a6 <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 80032a6:	b590      	push	{r4, r7, lr}
 80032a8:	b085      	sub	sp, #20
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	60f8      	str	r0, [r7, #12]
 80032ae:	607a      	str	r2, [r7, #4]
 80032b0:	461a      	mov	r2, r3
 80032b2:	460b      	mov	r3, r1
 80032b4:	817b      	strh	r3, [r7, #10]
 80032b6:	4613      	mov	r3, r2
 80032b8:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	685c      	ldr	r4, [r3, #4]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6898      	ldr	r0, [r3, #8]
 80032c2:	893b      	ldrh	r3, [r7, #8]
 80032c4:	8979      	ldrh	r1, [r7, #10]
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	47a0      	blx	r4
 80032ca:	4603      	mov	r3, r0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd90      	pop	{r4, r7, pc}

080032d4 <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 80032d4:	b590      	push	{r4, r7, lr}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	607a      	str	r2, [r7, #4]
 80032de:	461a      	mov	r2, r3
 80032e0:	460b      	mov	r3, r1
 80032e2:	817b      	strh	r3, [r7, #10]
 80032e4:	4613      	mov	r3, r2
 80032e6:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681c      	ldr	r4, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6898      	ldr	r0, [r3, #8]
 80032f0:	893b      	ldrh	r3, [r7, #8]
 80032f2:	8979      	ldrh	r1, [r7, #10]
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	47a0      	blx	r4
 80032f8:	4603      	mov	r3, r0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd90      	pop	{r4, r7, pc}
	...

08003304 <postProcess>:
		uint32_t original_height,
		uint32_t scaled_width,
		uint32_t scaled_height,
		uint32_t grid_size,
		float probabilities[GRID_SIZE][GRID_SIZE]
){
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
 8003310:	603b      	str	r3, [r7, #0]
	if(scaled_width != scaled_height){
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	6a3b      	ldr	r3, [r7, #32]
 8003316:	429a      	cmp	r2, r3
 8003318:	d14f      	bne.n	80033ba <postProcess+0xb6>
		return;
	}

	uint8_t pixels_per_grid = scaled_width/GRID_SIZE;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	4a29      	ldr	r2, [pc, #164]	; (80033c4 <postProcess+0xc0>)
 800331e:	fba2 2303 	umull	r2, r3, r2, r3
 8003322:	08db      	lsrs	r3, r3, #3
 8003324:	757b      	strb	r3, [r7, #21]

	for(uint8_t i=0; i<GRID_SIZE; i++){
 8003326:	2300      	movs	r3, #0
 8003328:	75fb      	strb	r3, [r7, #23]
 800332a:	e042      	b.n	80033b2 <postProcess+0xae>
		for(uint8_t j=0; j<GRID_SIZE; j++){
 800332c:	2300      	movs	r3, #0
 800332e:	75bb      	strb	r3, [r7, #22]
 8003330:	e039      	b.n	80033a6 <postProcess+0xa2>
			if(probabilities[j][i]>THRESHOLD){
 8003332:	7dba      	ldrb	r2, [r7, #22]
 8003334:	4613      	mov	r3, r2
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	4413      	add	r3, r2
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	461a      	mov	r2, r3
 800333e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003340:	441a      	add	r2, r3
 8003342:	7dfb      	ldrb	r3, [r7, #23]
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	edd3 7a00 	vldr	s15, [r3]
 800334c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003350:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003358:	dd22      	ble.n	80033a0 <postProcess+0x9c>
				drawCrosshair(buffer, ((i*pixels_per_grid+pixels_per_grid/2)*original_width)/scaled_width, ((j*pixels_per_grid+pixels_per_grid/2)*original_height)/scaled_height);
 800335a:	7dfb      	ldrb	r3, [r7, #23]
 800335c:	7d7a      	ldrb	r2, [r7, #21]
 800335e:	fb02 f303 	mul.w	r3, r2, r3
 8003362:	7d7a      	ldrb	r2, [r7, #21]
 8003364:	0852      	lsrs	r2, r2, #1
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	4413      	add	r3, r2
 800336a:	461a      	mov	r2, r3
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	fb03 f202 	mul.w	r2, r3, r2
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	fbb2 f3f3 	udiv	r3, r2, r3
 8003378:	4619      	mov	r1, r3
 800337a:	7dbb      	ldrb	r3, [r7, #22]
 800337c:	7d7a      	ldrb	r2, [r7, #21]
 800337e:	fb02 f303 	mul.w	r3, r2, r3
 8003382:	7d7a      	ldrb	r2, [r7, #21]
 8003384:	0852      	lsrs	r2, r2, #1
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	4413      	add	r3, r2
 800338a:	461a      	mov	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	fb03 f202 	mul.w	r2, r3, r2
 8003392:	6a3b      	ldr	r3, [r7, #32]
 8003394:	fbb2 f3f3 	udiv	r3, r2, r3
 8003398:	461a      	mov	r2, r3
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f7fd fc66 	bl	8000c6c <drawCrosshair>
		for(uint8_t j=0; j<GRID_SIZE; j++){
 80033a0:	7dbb      	ldrb	r3, [r7, #22]
 80033a2:	3301      	adds	r3, #1
 80033a4:	75bb      	strb	r3, [r7, #22]
 80033a6:	7dbb      	ldrb	r3, [r7, #22]
 80033a8:	2b0b      	cmp	r3, #11
 80033aa:	d9c2      	bls.n	8003332 <postProcess+0x2e>
	for(uint8_t i=0; i<GRID_SIZE; i++){
 80033ac:	7dfb      	ldrb	r3, [r7, #23]
 80033ae:	3301      	adds	r3, #1
 80033b0:	75fb      	strb	r3, [r7, #23]
 80033b2:	7dfb      	ldrb	r3, [r7, #23]
 80033b4:	2b0b      	cmp	r3, #11
 80033b6:	d9b9      	bls.n	800332c <postProcess+0x28>
 80033b8:	e000      	b.n	80033bc <postProcess+0xb8>
		return;
 80033ba:	bf00      	nop
			}
		}
	}
}
 80033bc:	3718      	adds	r7, #24
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	aaaaaaab 	.word	0xaaaaaaab

080033c8 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80033d0:	4a07      	ldr	r2, [pc, #28]	; (80033f0 <RetargetInit+0x28>)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80033d6:	4b07      	ldr	r3, [pc, #28]	; (80033f4 <RetargetInit+0x2c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6898      	ldr	r0, [r3, #8]
 80033dc:	2300      	movs	r3, #0
 80033de:	2202      	movs	r2, #2
 80033e0:	2100      	movs	r1, #0
 80033e2:	f014 fd89 	bl	8017ef8 <setvbuf>
}
 80033e6:	bf00      	nop
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	24003794 	.word	0x24003794
 80033f4:	240034c0 	.word	0x240034c0

080033f8 <_isatty>:

int _isatty(int fd) {
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	db04      	blt.n	8003410 <_isatty+0x18>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b02      	cmp	r3, #2
 800340a:	dc01      	bgt.n	8003410 <_isatty+0x18>
    return 1;
 800340c:	2301      	movs	r3, #1
 800340e:	e005      	b.n	800341c <_isatty+0x24>

  errno = EBADF;
 8003410:	f014 fbac 	bl	8017b6c <__errno>
 8003414:	4603      	mov	r3, r0
 8003416:	2209      	movs	r2, #9
 8003418:	601a      	str	r2, [r3, #0]
  return 0;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <_write>:

int _write(int fd, char* ptr, int len) {
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d002      	beq.n	800343c <_write+0x18>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2b02      	cmp	r3, #2
 800343a:	d111      	bne.n	8003460 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800343c:	4b0e      	ldr	r3, [pc, #56]	; (8003478 <_write+0x54>)
 800343e:	6818      	ldr	r0, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	b29a      	uxth	r2, r3
 8003444:	f04f 33ff 	mov.w	r3, #4294967295
 8003448:	68b9      	ldr	r1, [r7, #8]
 800344a:	f00a fb3e 	bl	800daca <HAL_UART_Transmit>
 800344e:	4603      	mov	r3, r0
 8003450:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003452:	7dfb      	ldrb	r3, [r7, #23]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d101      	bne.n	800345c <_write+0x38>
      return len;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	e008      	b.n	800346e <_write+0x4a>
    else
      return EIO;
 800345c:	2305      	movs	r3, #5
 800345e:	e006      	b.n	800346e <_write+0x4a>
  }
  errno = EBADF;
 8003460:	f014 fb84 	bl	8017b6c <__errno>
 8003464:	4603      	mov	r3, r0
 8003466:	2209      	movs	r2, #9
 8003468:	601a      	str	r2, [r3, #0]
  return -1;
 800346a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800346e:	4618      	mov	r0, r3
 8003470:	3718      	adds	r7, #24
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	24003794 	.word	0x24003794

0800347c <_close>:

int _close(int fd) {
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	db04      	blt.n	8003494 <_close+0x18>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b02      	cmp	r3, #2
 800348e:	dc01      	bgt.n	8003494 <_close+0x18>
    return 0;
 8003490:	2300      	movs	r3, #0
 8003492:	e006      	b.n	80034a2 <_close+0x26>

  errno = EBADF;
 8003494:	f014 fb6a 	bl	8017b6c <__errno>
 8003498:	4603      	mov	r3, r0
 800349a:	2209      	movs	r2, #9
 800349c:	601a      	str	r2, [r3, #0]
  return -1;
 800349e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
	...

080034ac <_read>:

int _read(int fd, char* ptr, int len) {
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d110      	bne.n	80034e0 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80034be:	4b0e      	ldr	r3, [pc, #56]	; (80034f8 <_read+0x4c>)
 80034c0:	6818      	ldr	r0, [r3, #0]
 80034c2:	f04f 33ff 	mov.w	r3, #4294967295
 80034c6:	2201      	movs	r2, #1
 80034c8:	68b9      	ldr	r1, [r7, #8]
 80034ca:	f00a fb8c 	bl	800dbe6 <HAL_UART_Receive>
 80034ce:	4603      	mov	r3, r0
 80034d0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80034d2:	7dfb      	ldrb	r3, [r7, #23]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <_read+0x30>
      return 1;
 80034d8:	2301      	movs	r3, #1
 80034da:	e008      	b.n	80034ee <_read+0x42>
    else
      return EIO;
 80034dc:	2305      	movs	r3, #5
 80034de:	e006      	b.n	80034ee <_read+0x42>
  }
  errno = EBADF;
 80034e0:	f014 fb44 	bl	8017b6c <__errno>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2209      	movs	r2, #9
 80034e8:	601a      	str	r2, [r3, #0]
  return -1;
 80034ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3718      	adds	r7, #24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	24003794 	.word	0x24003794

080034fc <_fstat>:

int _fstat(int fd, struct stat* st) {
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	db08      	blt.n	800351e <_fstat+0x22>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b02      	cmp	r3, #2
 8003510:	dc05      	bgt.n	800351e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003518:	605a      	str	r2, [r3, #4]
    return 0;
 800351a:	2300      	movs	r3, #0
 800351c:	e005      	b.n	800352a <_fstat+0x2e>
  }

  errno = EBADF;
 800351e:	f014 fb25 	bl	8017b6c <__errno>
 8003522:	4603      	mov	r3, r0
 8003524:	2209      	movs	r2, #9
 8003526:	601a      	str	r2, [r3, #0]
  return 0;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
	...

08003534 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003538:	4b11      	ldr	r3, [pc, #68]	; (8003580 <MX_RTC_Init+0x4c>)
 800353a:	4a12      	ldr	r2, [pc, #72]	; (8003584 <MX_RTC_Init+0x50>)
 800353c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800353e:	4b10      	ldr	r3, [pc, #64]	; (8003580 <MX_RTC_Init+0x4c>)
 8003540:	2200      	movs	r2, #0
 8003542:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003544:	4b0e      	ldr	r3, [pc, #56]	; (8003580 <MX_RTC_Init+0x4c>)
 8003546:	227f      	movs	r2, #127	; 0x7f
 8003548:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800354a:	4b0d      	ldr	r3, [pc, #52]	; (8003580 <MX_RTC_Init+0x4c>)
 800354c:	22ff      	movs	r2, #255	; 0xff
 800354e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003550:	4b0b      	ldr	r3, [pc, #44]	; (8003580 <MX_RTC_Init+0x4c>)
 8003552:	2200      	movs	r2, #0
 8003554:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003556:	4b0a      	ldr	r3, [pc, #40]	; (8003580 <MX_RTC_Init+0x4c>)
 8003558:	2200      	movs	r2, #0
 800355a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800355c:	4b08      	ldr	r3, [pc, #32]	; (8003580 <MX_RTC_Init+0x4c>)
 800355e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003562:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003564:	4b06      	ldr	r3, [pc, #24]	; (8003580 <MX_RTC_Init+0x4c>)
 8003566:	2200      	movs	r2, #0
 8003568:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800356a:	4805      	ldr	r0, [pc, #20]	; (8003580 <MX_RTC_Init+0x4c>)
 800356c:	f00a f8a6 	bl	800d6bc <HAL_RTC_Init>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8003576:	f7fe fa1d 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800357a:	bf00      	nop
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	24003798 	.word	0x24003798
 8003584:	58004000 	.word	0x58004000

08003588 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b0b2      	sub	sp, #200	; 0xc8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003590:	f107 0308 	add.w	r3, r7, #8
 8003594:	22c0      	movs	r2, #192	; 0xc0
 8003596:	2100      	movs	r1, #0
 8003598:	4618      	mov	r0, r3
 800359a:	f014 fb27 	bl	8017bec <memset>
  if(rtcHandle->Instance==RTC)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a10      	ldr	r2, [pc, #64]	; (80035e4 <HAL_RTC_MspInit+0x5c>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d119      	bne.n	80035dc <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80035a8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80035ac:	f04f 0300 	mov.w	r3, #0
 80035b0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80035b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035bc:	f107 0308 	add.w	r3, r7, #8
 80035c0:	4618      	mov	r0, r3
 80035c2:	f008 fa9b 	bl	800bafc <HAL_RCCEx_PeriphCLKConfig>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80035cc:	f7fe f9f2 	bl	80019b4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80035d0:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <HAL_RTC_MspInit+0x60>)
 80035d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d4:	4a04      	ldr	r2, [pc, #16]	; (80035e8 <HAL_RTC_MspInit+0x60>)
 80035d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035da:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80035dc:	bf00      	nop
 80035de:	37c8      	adds	r7, #200	; 0xc8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	58004000 	.word	0x58004000
 80035e8:	58024400 	.word	0x58024400

080035ec <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80035f2:	2300      	movs	r3, #0
 80035f4:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 80035f6:	4b16      	ldr	r3, [pc, #88]	; (8003650 <BSP_I2C4_Init+0x64>)
 80035f8:	4a16      	ldr	r2, [pc, #88]	; (8003654 <BSP_I2C4_Init+0x68>)
 80035fa:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 80035fc:	4b16      	ldr	r3, [pc, #88]	; (8003658 <BSP_I2C4_Init+0x6c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d11f      	bne.n	8003644 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 8003604:	4b14      	ldr	r3, [pc, #80]	; (8003658 <BSP_I2C4_Init+0x6c>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	3301      	adds	r3, #1
 800360a:	4a13      	ldr	r2, [pc, #76]	; (8003658 <BSP_I2C4_Init+0x6c>)
 800360c:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800360e:	4810      	ldr	r0, [pc, #64]	; (8003650 <BSP_I2C4_Init+0x64>)
 8003610:	f006 fb0e 	bl	8009c30 <HAL_I2C_GetState>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d114      	bne.n	8003644 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 800361a:	480d      	ldr	r0, [pc, #52]	; (8003650 <BSP_I2C4_Init+0x64>)
 800361c:	f000 fb60 	bl	8003ce0 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8003620:	f008 fa56 	bl	800bad0 <HAL_RCC_GetPCLK2Freq>
 8003624:	4603      	mov	r3, r0
 8003626:	490d      	ldr	r1, [pc, #52]	; (800365c <BSP_I2C4_Init+0x70>)
 8003628:	4618      	mov	r0, r3
 800362a:	f000 f8e3 	bl	80037f4 <I2C_GetTiming>
 800362e:	4603      	mov	r3, r0
 8003630:	4619      	mov	r1, r3
 8003632:	4807      	ldr	r0, [pc, #28]	; (8003650 <BSP_I2C4_Init+0x64>)
 8003634:	f000 f838 	bl	80036a8 <MX_I2C4_Init>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800363e:	f06f 0307 	mvn.w	r3, #7
 8003642:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 8003644:	687b      	ldr	r3, [r7, #4]
}
 8003646:	4618      	mov	r0, r3
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	240041c8 	.word	0x240041c8
 8003654:	58001c00 	.word	0x58001c00
 8003658:	240037c0 	.word	0x240037c0
 800365c:	000186a0 	.word	0x000186a0

08003660 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8003666:	2300      	movs	r3, #0
 8003668:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 800366a:	4b0d      	ldr	r3, [pc, #52]	; (80036a0 <BSP_I2C4_DeInit+0x40>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	3b01      	subs	r3, #1
 8003670:	4a0b      	ldr	r2, [pc, #44]	; (80036a0 <BSP_I2C4_DeInit+0x40>)
 8003672:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 8003674:	4b0a      	ldr	r3, [pc, #40]	; (80036a0 <BSP_I2C4_DeInit+0x40>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10b      	bne.n	8003694 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 800367c:	4809      	ldr	r0, [pc, #36]	; (80036a4 <BSP_I2C4_DeInit+0x44>)
 800367e:	f000 fb9b 	bl	8003db8 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8003682:	4808      	ldr	r0, [pc, #32]	; (80036a4 <BSP_I2C4_DeInit+0x44>)
 8003684:	f006 f862 	bl	800974c <HAL_I2C_DeInit>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800368e:	f06f 0307 	mvn.w	r3, #7
 8003692:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8003694:	687b      	ldr	r3, [r7, #4]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	240037c0 	.word	0x240037c0
 80036a4:	240041c8 	.word	0x240041c8

080036a8 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036b2:	2300      	movs	r3, #0
 80036b4:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f005 ffa0 	bl	800962c <HAL_I2C_Init>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d002      	beq.n	80036f8 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	73fb      	strb	r3, [r7, #15]
 80036f6:	e014      	b.n	8003722 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 80036f8:	2300      	movs	r3, #0
 80036fa:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 80036fc:	68b9      	ldr	r1, [r7, #8]
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f006 fd68 	bl	800a1d4 <HAL_I2CEx_ConfigAnalogFilter>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d002      	beq.n	8003710 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	73fb      	strb	r3, [r7, #15]
 800370e:	e008      	b.n	8003722 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8003710:	2100      	movs	r1, #0
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f006 fda9 	bl	800a26a <HAL_I2CEx_ConfigDigitalFilter>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8003722:	7bfb      	ldrb	r3, [r7, #15]
}
 8003724:	4618      	mov	r0, r3
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <BSP_I2C4_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af02      	add	r7, sp, #8
 8003732:	60ba      	str	r2, [r7, #8]
 8003734:	461a      	mov	r2, r3
 8003736:	4603      	mov	r3, r0
 8003738:	81fb      	strh	r3, [r7, #14]
 800373a:	460b      	mov	r3, r1
 800373c:	81bb      	strh	r3, [r7, #12]
 800373e:	4613      	mov	r3, r2
 8003740:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
 #if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 8003742:	89b9      	ldrh	r1, [r7, #12]
 8003744:	89f8      	ldrh	r0, [r7, #14]
 8003746:	88fb      	ldrh	r3, [r7, #6]
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	2202      	movs	r2, #2
 800374e:	f000 fb57 	bl	8003e00 <I2C4_WriteReg>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d102      	bne.n	800375e <BSP_I2C4_WriteReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 8003758:	2300      	movs	r3, #0
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	e00c      	b.n	8003778 <BSP_I2C4_WriteReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800375e:	4809      	ldr	r0, [pc, #36]	; (8003784 <BSP_I2C4_WriteReg16+0x58>)
 8003760:	f006 fa74 	bl	8009c4c <HAL_I2C_GetError>
 8003764:	4603      	mov	r3, r0
 8003766:	2b04      	cmp	r3, #4
 8003768:	d103      	bne.n	8003772 <BSP_I2C4_WriteReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800376a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800376e:	617b      	str	r3, [r7, #20]
 8003770:	e002      	b.n	8003778 <BSP_I2C4_WriteReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003772:	f06f 0303 	mvn.w	r3, #3
 8003776:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8003778:	697b      	ldr	r3, [r7, #20]
}
 800377a:	4618      	mov	r0, r3
 800377c:	3718      	adds	r7, #24
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	240041c8 	.word	0x240041c8

08003788 <BSP_I2C4_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b088      	sub	sp, #32
 800378c:	af02      	add	r7, sp, #8
 800378e:	60ba      	str	r2, [r7, #8]
 8003790:	461a      	mov	r2, r3
 8003792:	4603      	mov	r3, r0
 8003794:	81fb      	strh	r3, [r7, #14]
 8003796:	460b      	mov	r3, r1
 8003798:	81bb      	strh	r3, [r7, #12]
 800379a:	4613      	mov	r3, r2
 800379c:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 800379e:	89b9      	ldrh	r1, [r7, #12]
 80037a0:	89f8      	ldrh	r0, [r7, #14]
 80037a2:	88fb      	ldrh	r3, [r7, #6]
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2202      	movs	r2, #2
 80037aa:	f000 fb4f 	bl	8003e4c <I2C4_ReadReg>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d102      	bne.n	80037ba <BSP_I2C4_ReadReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 80037b4:	2300      	movs	r3, #0
 80037b6:	617b      	str	r3, [r7, #20]
 80037b8:	e00c      	b.n	80037d4 <BSP_I2C4_ReadReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80037ba:	4809      	ldr	r0, [pc, #36]	; (80037e0 <BSP_I2C4_ReadReg16+0x58>)
 80037bc:	f006 fa46 	bl	8009c4c <HAL_I2C_GetError>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	d103      	bne.n	80037ce <BSP_I2C4_ReadReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80037c6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	e002      	b.n	80037d4 <BSP_I2C4_ReadReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80037ce:	f06f 0303 	mvn.w	r3, #3
 80037d2:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 80037d4:	697b      	ldr	r3, [r7, #20]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	240041c8 	.word	0x240041c8

080037e4 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 80037e8:	f000 ffc6 	bl	8004778 <HAL_GetTick>
 80037ec:	4603      	mov	r3, r0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	bd80      	pop	{r7, pc}
	...

080037f4 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 80037fe:	2300      	movs	r3, #0
 8003800:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d06b      	beq.n	80038e0 <I2C_GetTiming+0xec>
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d068      	beq.n	80038e0 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800380e:	2300      	movs	r3, #0
 8003810:	613b      	str	r3, [r7, #16]
 8003812:	e060      	b.n	80038d6 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8003814:	4a35      	ldr	r2, [pc, #212]	; (80038ec <I2C_GetTiming+0xf8>)
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	212c      	movs	r1, #44	; 0x2c
 800381a:	fb01 f303 	mul.w	r3, r1, r3
 800381e:	4413      	add	r3, r2
 8003820:	3304      	adds	r3, #4
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d352      	bcc.n	80038d0 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800382a:	4a30      	ldr	r2, [pc, #192]	; (80038ec <I2C_GetTiming+0xf8>)
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	212c      	movs	r1, #44	; 0x2c
 8003830:	fb01 f303 	mul.w	r3, r1, r3
 8003834:	4413      	add	r3, r2
 8003836:	3308      	adds	r3, #8
 8003838:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	429a      	cmp	r2, r3
 800383e:	d847      	bhi.n	80038d0 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8003840:	6939      	ldr	r1, [r7, #16]
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f856 	bl	80038f4 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8003848:	6939      	ldr	r1, [r7, #16]
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f940 	bl	8003ad0 <I2C_Compute_SCLL_SCLH>
 8003850:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2b7f      	cmp	r3, #127	; 0x7f
 8003856:	d842      	bhi.n	80038de <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003858:	4925      	ldr	r1, [pc, #148]	; (80038f0 <I2C_GetTiming+0xfc>)
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	4613      	mov	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	440b      	add	r3, r1
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800386a:	4821      	ldr	r0, [pc, #132]	; (80038f0 <I2C_GetTiming+0xfc>)
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	4613      	mov	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4403      	add	r3, r0
 8003878:	3304      	adds	r3, #4
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	051b      	lsls	r3, r3, #20
 800387e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003882:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8003884:	481a      	ldr	r0, [pc, #104]	; (80038f0 <I2C_GetTiming+0xfc>)
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	4613      	mov	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4403      	add	r3, r0
 8003892:	3308      	adds	r3, #8
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	041b      	lsls	r3, r3, #16
 8003898:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800389c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800389e:	4814      	ldr	r0, [pc, #80]	; (80038f0 <I2C_GetTiming+0xfc>)
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4613      	mov	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4403      	add	r3, r0
 80038ac:	330c      	adds	r3, #12
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	021b      	lsls	r3, r3, #8
 80038b2:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80038b4:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 80038b6:	480e      	ldr	r0, [pc, #56]	; (80038f0 <I2C_GetTiming+0xfc>)
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	4613      	mov	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	4403      	add	r3, r0
 80038c4:	3310      	adds	r3, #16
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80038ca:	430b      	orrs	r3, r1
 80038cc:	617b      	str	r3, [r7, #20]
        }
        break;
 80038ce:	e006      	b.n	80038de <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	3301      	adds	r3, #1
 80038d4:	613b      	str	r3, [r7, #16]
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d99b      	bls.n	8003814 <I2C_GetTiming+0x20>
 80038dc:	e000      	b.n	80038e0 <I2C_GetTiming+0xec>
        break;
 80038de:	bf00      	nop
      }
    }
  }

  return ret;
 80038e0:	697b      	ldr	r3, [r7, #20]
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	08019884 	.word	0x08019884
 80038f0:	240037c4 	.word	0x240037c4

080038f4 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b08f      	sub	sp, #60	; 0x3c
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 80038fe:	2310      	movs	r3, #16
 8003900:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	085a      	lsrs	r2, r3, #1
 8003906:	4b6e      	ldr	r3, [pc, #440]	; (8003ac0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8003908:	4413      	add	r3, r2
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003910:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8003912:	2332      	movs	r3, #50	; 0x32
 8003914:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8003916:	f44f 7382 	mov.w	r3, #260	; 0x104
 800391a:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800391c:	4a69      	ldr	r2, [pc, #420]	; (8003ac4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	212c      	movs	r1, #44	; 0x2c
 8003922:	fb01 f303 	mul.w	r3, r1, r3
 8003926:	4413      	add	r3, r2
 8003928:	3324      	adds	r3, #36	; 0x24
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	4a65      	ldr	r2, [pc, #404]	; (8003ac4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	212c      	movs	r1, #44	; 0x2c
 8003934:	fb01 f303 	mul.w	r3, r1, r3
 8003938:	4413      	add	r3, r2
 800393a:	330c      	adds	r3, #12
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8003940:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8003942:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8003944:	495f      	ldr	r1, [pc, #380]	; (8003ac4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	202c      	movs	r0, #44	; 0x2c
 800394a:	fb00 f303 	mul.w	r3, r0, r3
 800394e:	440b      	add	r3, r1
 8003950:	3328      	adds	r3, #40	; 0x28
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	3303      	adds	r3, #3
 8003956:	69f9      	ldr	r1, [r7, #28]
 8003958:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003960:	4a58      	ldr	r2, [pc, #352]	; (8003ac4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	212c      	movs	r1, #44	; 0x2c
 8003966:	fb01 f303 	mul.w	r3, r1, r3
 800396a:	4413      	add	r3, r2
 800396c:	3310      	adds	r3, #16
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4618      	mov	r0, r3
 8003972:	4a54      	ldr	r2, [pc, #336]	; (8003ac4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	212c      	movs	r1, #44	; 0x2c
 8003978:	fb01 f303 	mul.w	r3, r1, r3
 800397c:	4413      	add	r3, r2
 800397e:	3320      	adds	r3, #32
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8003984:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003986:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8003988:	494e      	ldr	r1, [pc, #312]	; (8003ac4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	202c      	movs	r0, #44	; 0x2c
 800398e:	fb00 f303 	mul.w	r3, r0, r3
 8003992:	440b      	add	r3, r1
 8003994:	3328      	adds	r3, #40	; 0x28
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	3304      	adds	r3, #4
 800399a:	69f9      	ldr	r1, [r7, #28]
 800399c:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 80039a4:	4a47      	ldr	r2, [pc, #284]	; (8003ac4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	212c      	movs	r1, #44	; 0x2c
 80039aa:	fb01 f303 	mul.w	r3, r1, r3
 80039ae:	4413      	add	r3, r2
 80039b0:	3320      	adds	r3, #32
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4618      	mov	r0, r3
 80039b6:	4a43      	ldr	r2, [pc, #268]	; (8003ac4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	212c      	movs	r1, #44	; 0x2c
 80039bc:	fb01 f303 	mul.w	r3, r1, r3
 80039c0:	4413      	add	r3, r2
 80039c2:	3314      	adds	r3, #20
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4403      	add	r3, r0
 80039c8:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 80039ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	dc01      	bgt.n	80039d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 80039d0:	2300      	movs	r3, #0
 80039d2:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 80039d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	dc01      	bgt.n	80039de <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 80039da:	2300      	movs	r3, #0
 80039dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80039de:	2300      	movs	r3, #0
 80039e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80039e2:	e062      	b.n	8003aaa <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80039e4:	2300      	movs	r3, #0
 80039e6:	627b      	str	r3, [r7, #36]	; 0x24
 80039e8:	e059      	b.n	8003a9e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	3301      	adds	r3, #1
 80039ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039f0:	3201      	adds	r2, #1
 80039f2:	fb03 f202 	mul.w	r2, r3, r2
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	fb02 f303 	mul.w	r3, r2, r3
 80039fc:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d348      	bcc.n	8003a98 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8003a06:	2300      	movs	r3, #0
 8003a08:	623b      	str	r3, [r7, #32]
 8003a0a:	e042      	b.n	8003a92 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8003a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0e:	3301      	adds	r3, #1
 8003a10:	6a3a      	ldr	r2, [r7, #32]
 8003a12:	fb03 f202 	mul.w	r2, r3, r2
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	fb02 f303 	mul.w	r3, r2, r3
 8003a1c:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8003a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d332      	bcc.n	8003a8c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8003a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d82e      	bhi.n	8003a8c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 8003a2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d02a      	beq.n	8003a8c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8003a36:	4b24      	ldr	r3, [pc, #144]	; (8003ac8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	4924      	ldr	r1, [pc, #144]	; (8003acc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a48:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8003a4a:	4b1f      	ldr	r3, [pc, #124]	; (8003ac8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	491f      	ldr	r1, [pc, #124]	; (8003acc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8003a50:	4613      	mov	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	440b      	add	r3, r1
 8003a5a:	3304      	adds	r3, #4
 8003a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a5e:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8003a60:	4b19      	ldr	r3, [pc, #100]	; (8003ac8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	4919      	ldr	r1, [pc, #100]	; (8003acc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8003a66:	4613      	mov	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	3308      	adds	r3, #8
 8003a72:	6a3a      	ldr	r2, [r7, #32]
 8003a74:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8003a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a78:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 8003a7a:	4b13      	ldr	r3, [pc, #76]	; (8003ac8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	4a11      	ldr	r2, [pc, #68]	; (8003ac8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003a82:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8003a84:	4b10      	ldr	r3, [pc, #64]	; (8003ac8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b7f      	cmp	r3, #127	; 0x7f
 8003a8a:	d812      	bhi.n	8003ab2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	623b      	str	r3, [r7, #32]
 8003a92:	6a3b      	ldr	r3, [r7, #32]
 8003a94:	2b0f      	cmp	r3, #15
 8003a96:	d9b9      	bls.n	8003a0c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	2b0f      	cmp	r3, #15
 8003aa2:	d9a2      	bls.n	80039ea <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8003aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aac:	2b0f      	cmp	r3, #15
 8003aae:	d999      	bls.n	80039e4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8003ab0:	e000      	b.n	8003ab4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8003ab2:	bf00      	nop
          }
        }
      }
    }
  }
}
 8003ab4:	373c      	adds	r7, #60	; 0x3c
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	3b9aca00 	.word	0x3b9aca00
 8003ac4:	08019884 	.word	0x08019884
 8003ac8:	240041c4 	.word	0x240041c4
 8003acc:	240037c4 	.word	0x240037c4

08003ad0 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b093      	sub	sp, #76	; 0x4c
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 8003ada:	f04f 33ff 	mov.w	r3, #4294967295
 8003ade:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	085a      	lsrs	r2, r3, #1
 8003ae4:	4b7a      	ldr	r3, [pc, #488]	; (8003cd0 <I2C_Compute_SCLL_SCLH+0x200>)
 8003ae6:	4413      	add	r3, r2
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	fbb3 f3f2 	udiv	r3, r3, r2
 8003aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8003af0:	4a78      	ldr	r2, [pc, #480]	; (8003cd4 <I2C_Compute_SCLL_SCLH+0x204>)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	212c      	movs	r1, #44	; 0x2c
 8003af6:	fb01 f303 	mul.w	r3, r1, r3
 8003afa:	4413      	add	r3, r2
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	085a      	lsrs	r2, r3, #1
 8003b00:	4b73      	ldr	r3, [pc, #460]	; (8003cd0 <I2C_Compute_SCLL_SCLH+0x200>)
 8003b02:	4413      	add	r3, r2
 8003b04:	4973      	ldr	r1, [pc, #460]	; (8003cd4 <I2C_Compute_SCLL_SCLH+0x204>)
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	202c      	movs	r0, #44	; 0x2c
 8003b0a:	fb00 f202 	mul.w	r2, r0, r2
 8003b0e:	440a      	add	r2, r1
 8003b10:	6812      	ldr	r2, [r2, #0]
 8003b12:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b16:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8003b18:	2332      	movs	r3, #50	; 0x32
 8003b1a:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8003b1c:	4a6d      	ldr	r2, [pc, #436]	; (8003cd4 <I2C_Compute_SCLL_SCLH+0x204>)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	212c      	movs	r1, #44	; 0x2c
 8003b22:	fb01 f303 	mul.w	r3, r1, r3
 8003b26:	4413      	add	r3, r2
 8003b28:	3328      	adds	r3, #40	; 0x28
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2e:	fb02 f303 	mul.w	r3, r2, r3
 8003b32:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8003b34:	4a67      	ldr	r2, [pc, #412]	; (8003cd4 <I2C_Compute_SCLL_SCLH+0x204>)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	212c      	movs	r1, #44	; 0x2c
 8003b3a:	fb01 f303 	mul.w	r3, r1, r3
 8003b3e:	4413      	add	r3, r2
 8003b40:	3304      	adds	r3, #4
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a62      	ldr	r2, [pc, #392]	; (8003cd0 <I2C_Compute_SCLL_SCLH+0x200>)
 8003b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4a:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8003b4c:	4a61      	ldr	r2, [pc, #388]	; (8003cd4 <I2C_Compute_SCLL_SCLH+0x204>)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	212c      	movs	r1, #44	; 0x2c
 8003b52:	fb01 f303 	mul.w	r3, r1, r3
 8003b56:	4413      	add	r3, r2
 8003b58:	3308      	adds	r3, #8
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a5c      	ldr	r2, [pc, #368]	; (8003cd0 <I2C_Compute_SCLL_SCLH+0x200>)
 8003b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b62:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8003b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b66:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003b68:	2300      	movs	r3, #0
 8003b6a:	637b      	str	r3, [r7, #52]	; 0x34
 8003b6c:	e0a3      	b.n	8003cb6 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8003b6e:	495a      	ldr	r1, [pc, #360]	; (8003cd8 <I2C_Compute_SCLL_SCLH+0x208>)
 8003b70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	440b      	add	r3, r1
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	1c5a      	adds	r2, r3, #1
 8003b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b82:	fb02 f303 	mul.w	r3, r2, r3
 8003b86:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003b88:	2300      	movs	r3, #0
 8003b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b8c:	e08c      	b.n	8003ca8 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8003b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	441a      	add	r2, r3
 8003b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b96:	3301      	adds	r3, #1
 8003b98:	6979      	ldr	r1, [r7, #20]
 8003b9a:	fb03 f101 	mul.w	r1, r3, r1
 8003b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	440b      	add	r3, r1
 8003ba4:	4413      	add	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8003ba8:	4a4a      	ldr	r2, [pc, #296]	; (8003cd4 <I2C_Compute_SCLL_SCLH+0x204>)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	212c      	movs	r1, #44	; 0x2c
 8003bae:	fb01 f303 	mul.w	r3, r1, r3
 8003bb2:	4413      	add	r3, r2
 8003bb4:	3318      	adds	r3, #24
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d971      	bls.n	8003ca2 <I2C_Compute_SCLL_SCLH+0x1d2>
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	1ad2      	subs	r2, r2, r3
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	089b      	lsrs	r3, r3, #2
 8003bca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d268      	bcs.n	8003ca2 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bd4:	e062      	b.n	8003c9c <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8003bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd8:	6a3b      	ldr	r3, [r7, #32]
 8003bda:	441a      	add	r2, r3
 8003bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bde:	3301      	adds	r3, #1
 8003be0:	6979      	ldr	r1, [r7, #20]
 8003be2:	fb03 f101 	mul.w	r1, r3, r1
 8003be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	440b      	add	r3, r1
 8003bec:	4413      	add	r3, r2
 8003bee:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	441a      	add	r2, r3
 8003bf6:	4937      	ldr	r1, [pc, #220]	; (8003cd4 <I2C_Compute_SCLL_SCLH+0x204>)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	202c      	movs	r0, #44	; 0x2c
 8003bfc:	fb00 f303 	mul.w	r3, r0, r3
 8003c00:	440b      	add	r3, r1
 8003c02:	3320      	adds	r3, #32
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	441a      	add	r2, r3
 8003c08:	4932      	ldr	r1, [pc, #200]	; (8003cd4 <I2C_Compute_SCLL_SCLH+0x204>)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	202c      	movs	r0, #44	; 0x2c
 8003c0e:	fb00 f303 	mul.w	r3, r0, r3
 8003c12:	440b      	add	r3, r1
 8003c14:	3324      	adds	r3, #36	; 0x24
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4413      	add	r3, r2
 8003c1a:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d338      	bcc.n	8003c96 <I2C_Compute_SCLL_SCLH+0x1c6>
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d834      	bhi.n	8003c96 <I2C_Compute_SCLL_SCLH+0x1c6>
 8003c2c:	4a29      	ldr	r2, [pc, #164]	; (8003cd4 <I2C_Compute_SCLL_SCLH+0x204>)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	212c      	movs	r1, #44	; 0x2c
 8003c32:	fb01 f303 	mul.w	r3, r1, r3
 8003c36:	4413      	add	r3, r2
 8003c38:	331c      	adds	r3, #28
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d329      	bcc.n	8003c96 <I2C_Compute_SCLL_SCLH+0x1c6>
 8003c42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d225      	bcs.n	8003c96 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 8003c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	da02      	bge.n	8003c5e <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8003c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5a:	425b      	negs	r3, r3
 8003c5c:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8003c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d917      	bls.n	8003c96 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8003c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c68:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 8003c6a:	491b      	ldr	r1, [pc, #108]	; (8003cd8 <I2C_Compute_SCLL_SCLH+0x208>)
 8003c6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c6e:	4613      	mov	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	440b      	add	r3, r1
 8003c78:	3310      	adds	r3, #16
 8003c7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c7c:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8003c7e:	4916      	ldr	r1, [pc, #88]	; (8003cd8 <I2C_Compute_SCLL_SCLH+0x208>)
 8003c80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c82:	4613      	mov	r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	4413      	add	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	440b      	add	r3, r1
 8003c8c:	330c      	adds	r3, #12
 8003c8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c90:	601a      	str	r2, [r3, #0]
              ret = count;
 8003c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c94:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c98:	3301      	adds	r3, #1
 8003c9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c9e:	2bff      	cmp	r3, #255	; 0xff
 8003ca0:	d999      	bls.n	8003bd6 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003caa:	2bff      	cmp	r3, #255	; 0xff
 8003cac:	f67f af6f 	bls.w	8003b8e <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8003cb6:	4b09      	ldr	r3, [pc, #36]	; (8003cdc <I2C_Compute_SCLL_SCLH+0x20c>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	f4ff af56 	bcc.w	8003b6e <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8003cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	374c      	adds	r7, #76	; 0x4c
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr
 8003cd0:	3b9aca00 	.word	0x3b9aca00
 8003cd4:	08019884 	.word	0x08019884
 8003cd8:	240037c4 	.word	0x240037c4
 8003cdc:	240041c4 	.word	0x240041c4

08003ce0 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b08a      	sub	sp, #40	; 0x28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8003ce8:	4b31      	ldr	r3, [pc, #196]	; (8003db0 <I2C4_MspInit+0xd0>)
 8003cea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003cee:	4a30      	ldr	r2, [pc, #192]	; (8003db0 <I2C4_MspInit+0xd0>)
 8003cf0:	f043 0308 	orr.w	r3, r3, #8
 8003cf4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003cf8:	4b2d      	ldr	r3, [pc, #180]	; (8003db0 <I2C4_MspInit+0xd0>)
 8003cfa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003cfe:	f003 0308 	and.w	r3, r3, #8
 8003d02:	613b      	str	r3, [r7, #16]
 8003d04:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8003d06:	4b2a      	ldr	r3, [pc, #168]	; (8003db0 <I2C4_MspInit+0xd0>)
 8003d08:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003d0c:	4a28      	ldr	r2, [pc, #160]	; (8003db0 <I2C4_MspInit+0xd0>)
 8003d0e:	f043 0308 	orr.w	r3, r3, #8
 8003d12:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003d16:	4b26      	ldr	r3, [pc, #152]	; (8003db0 <I2C4_MspInit+0xd0>)
 8003d18:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003d1c:	f003 0308 	and.w	r3, r3, #8
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8003d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d28:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8003d2a:	2312      	movs	r3, #18
 8003d2c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8003d32:	2302      	movs	r3, #2
 8003d34:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8003d36:	2304      	movs	r3, #4
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8003d3a:	f107 0314 	add.w	r3, r7, #20
 8003d3e:	4619      	mov	r1, r3
 8003d40:	481c      	ldr	r0, [pc, #112]	; (8003db4 <I2C4_MspInit+0xd4>)
 8003d42:	f005 f985 	bl	8009050 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8003d46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d4a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8003d4c:	2312      	movs	r3, #18
 8003d4e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003d50:	2300      	movs	r3, #0
 8003d52:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8003d54:	2302      	movs	r3, #2
 8003d56:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8003d58:	2304      	movs	r3, #4
 8003d5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8003d5c:	f107 0314 	add.w	r3, r7, #20
 8003d60:	4619      	mov	r1, r3
 8003d62:	4814      	ldr	r0, [pc, #80]	; (8003db4 <I2C4_MspInit+0xd4>)
 8003d64:	f005 f974 	bl	8009050 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8003d68:	4b11      	ldr	r3, [pc, #68]	; (8003db0 <I2C4_MspInit+0xd0>)
 8003d6a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003d6e:	4a10      	ldr	r2, [pc, #64]	; (8003db0 <I2C4_MspInit+0xd0>)
 8003d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d74:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8003d78:	4b0d      	ldr	r3, [pc, #52]	; (8003db0 <I2C4_MspInit+0xd0>)
 8003d7a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d82:	60bb      	str	r3, [r7, #8]
 8003d84:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8003d86:	4b0a      	ldr	r3, [pc, #40]	; (8003db0 <I2C4_MspInit+0xd0>)
 8003d88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d8c:	4a08      	ldr	r2, [pc, #32]	; (8003db0 <I2C4_MspInit+0xd0>)
 8003d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d92:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8003d96:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <I2C4_MspInit+0xd0>)
 8003d98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d9c:	4a04      	ldr	r2, [pc, #16]	; (8003db0 <I2C4_MspInit+0xd0>)
 8003d9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003da2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8003da6:	bf00      	nop
 8003da8:	3728      	adds	r7, #40	; 0x28
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	58024400 	.word	0x58024400
 8003db4:	58020c00 	.word	0x58020c00

08003db8 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b088      	sub	sp, #32
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 8003dc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dc4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	4619      	mov	r1, r3
 8003dca:	480b      	ldr	r0, [pc, #44]	; (8003df8 <I2C4_MspDeInit+0x40>)
 8003dcc:	f005 faf0 	bl	80093b0 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 8003dd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003dd4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4807      	ldr	r0, [pc, #28]	; (8003df8 <I2C4_MspDeInit+0x40>)
 8003ddc:	f005 fae8 	bl	80093b0 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8003de0:	4b06      	ldr	r3, [pc, #24]	; (8003dfc <I2C4_MspDeInit+0x44>)
 8003de2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003de6:	4a05      	ldr	r2, [pc, #20]	; (8003dfc <I2C4_MspDeInit+0x44>)
 8003de8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dec:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 8003df0:	bf00      	nop
 8003df2:	3720      	adds	r7, #32
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	58020c00 	.word	0x58020c00
 8003dfc:	58024400 	.word	0x58024400

08003e00 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af04      	add	r7, sp, #16
 8003e06:	607b      	str	r3, [r7, #4]
 8003e08:	4603      	mov	r3, r0
 8003e0a:	81fb      	strh	r3, [r7, #14]
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	81bb      	strh	r3, [r7, #12]
 8003e10:	4613      	mov	r3, r2
 8003e12:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003e14:	8978      	ldrh	r0, [r7, #10]
 8003e16:	89ba      	ldrh	r2, [r7, #12]
 8003e18:	89f9      	ldrh	r1, [r7, #14]
 8003e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e1e:	9302      	str	r3, [sp, #8]
 8003e20:	8b3b      	ldrh	r3, [r7, #24]
 8003e22:	9301      	str	r3, [sp, #4]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	4603      	mov	r3, r0
 8003e2a:	4807      	ldr	r0, [pc, #28]	; (8003e48 <I2C4_WriteReg+0x48>)
 8003e2c:	f005 fcd2 	bl	80097d4 <HAL_I2C_Mem_Write>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8003e36:	2300      	movs	r3, #0
 8003e38:	e001      	b.n	8003e3e <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8003e3a:	f06f 0307 	mvn.w	r3, #7
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	240041c8 	.word	0x240041c8

08003e4c <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b088      	sub	sp, #32
 8003e50:	af04      	add	r7, sp, #16
 8003e52:	607b      	str	r3, [r7, #4]
 8003e54:	4603      	mov	r3, r0
 8003e56:	81fb      	strh	r3, [r7, #14]
 8003e58:	460b      	mov	r3, r1
 8003e5a:	81bb      	strh	r3, [r7, #12]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003e60:	8978      	ldrh	r0, [r7, #10]
 8003e62:	89ba      	ldrh	r2, [r7, #12]
 8003e64:	89f9      	ldrh	r1, [r7, #14]
 8003e66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e6a:	9302      	str	r3, [sp, #8]
 8003e6c:	8b3b      	ldrh	r3, [r7, #24]
 8003e6e:	9301      	str	r3, [sp, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	4603      	mov	r3, r0
 8003e76:	4807      	ldr	r0, [pc, #28]	; (8003e94 <I2C4_ReadReg+0x48>)
 8003e78:	f005 fdc0 	bl	80099fc <HAL_I2C_Mem_Read>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8003e82:	2300      	movs	r3, #0
 8003e84:	e001      	b.n	8003e8a <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8003e86:	f06f 0307 	mvn.w	r3, #7
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	240041c8 	.word	0x240041c8

08003e98 <BSP_CAMERA_Init>:
  *         naming QQVGA, QVGA, VGA ...
  * @param  PixelFormat Capture pixel format
  * @retval BSP status
  */
int32_t BSP_CAMERA_Init(uint32_t Instance, uint32_t Resolution, uint32_t PixelFormat)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	617b      	str	r3, [r7, #20]

#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif /*USE_BSP_IO_CLASS*/

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <BSP_CAMERA_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003eae:	f06f 0301 	mvn.w	r3, #1
 8003eb2:	617b      	str	r3, [r7, #20]
 8003eb4:	e02d      	b.n	8003f12 <BSP_CAMERA_Init+0x7a>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#else
    /* DCMI Initialization */
    HAL_DCMI_MspInit(&hdcmi);
 8003eb6:	4819      	ldr	r0, [pc, #100]	; (8003f1c <BSP_CAMERA_Init+0x84>)
 8003eb8:	f7fc fc98 	bl	80007ec <HAL_DCMI_MspInit>
#endif
    /* Initialize the camera driver structure */
    MX_DCMI_Init();
 8003ebc:	f7fc fc62 	bl	8000784 <MX_DCMI_Init>

    if(BSP_CAMERA_HwReset(0) != BSP_ERROR_NONE)
 8003ec0:	2000      	movs	r0, #0
 8003ec2:	f000 f887 	bl	8003fd4 <BSP_CAMERA_HwReset>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <BSP_CAMERA_Init+0x3c>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8003ecc:	f06f 0307 	mvn.w	r3, #7
 8003ed0:	617b      	str	r3, [r7, #20]
 8003ed2:	e01e      	b.n	8003f12 <BSP_CAMERA_Init+0x7a>
          ret = OV5640_Probe(Resolution, PixelFormat);
        }
#endif /* USE_CAMERA_SENSOR_OV5640 */
#else
#if (USE_CAMERA_SENSOR_OV5640 == 1)
        ret = OV5640_Probe(Resolution, PixelFormat);
 8003ed4:	6879      	ldr	r1, [r7, #4]
 8003ed6:	68b8      	ldr	r0, [r7, #8]
 8003ed8:	f000 f93e 	bl	8004158 <OV5640_Probe>
 8003edc:	6178      	str	r0, [r7, #20]
#endif /* USE_CAMERA_SENSOR_OV5640 */
#endif /* USE_CAMERA_SENSOR_S5K5CAG */

        if(ret != BSP_ERROR_NONE)
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <BSP_CAMERA_Init+0x54>
        {
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003ee4:	f06f 0306 	mvn.w	r3, #6
 8003ee8:	617b      	str	r3, [r7, #20]
 8003eea:	e012      	b.n	8003f12 <BSP_CAMERA_Init+0x7a>
          else
          {
            ret = BSP_ERROR_NONE;
          }
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS == 1) */
          Camera_Ctx[Instance].Resolution = Resolution;
 8003eec:	490c      	ldr	r1, [pc, #48]	; (8003f20 <BSP_CAMERA_Init+0x88>)
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	4413      	add	r3, r2
 8003ef6:	011b      	lsls	r3, r3, #4
 8003ef8:	440b      	add	r3, r1
 8003efa:	68ba      	ldr	r2, [r7, #8]
 8003efc:	601a      	str	r2, [r3, #0]
          Camera_Ctx[Instance].PixelFormat = PixelFormat;
 8003efe:	4908      	ldr	r1, [pc, #32]	; (8003f20 <BSP_CAMERA_Init+0x88>)
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	4613      	mov	r3, r2
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	4413      	add	r3, r2
 8003f08:	011b      	lsls	r3, r3, #4
 8003f0a:	440b      	add	r3, r1
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	601a      	str	r2, [r3, #0]
#endif
    }
  }

  /* BSP status */
  return ret;
 8003f12:	697b      	ldr	r3, [r7, #20]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3718      	adds	r7, #24
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	24003580 	.word	0x24003580
 8003f20:	24004220 	.word	0x24004220

08003f24 <BSP_CAMERA_Start>:
  * @param  pBff     pointer to the camera output buffer
  * @param  Mode CAMERA_MODE_CONTINUOUS or CAMERA_MODE_SNAPSHOT
  * @retval BSP status
  */
int32_t BSP_CAMERA_Start(uint32_t Instance, uint8_t *pBff, uint32_t Mode)
{
 8003f24:	b590      	push	{r4, r7, lr}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <BSP_CAMERA_Start+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003f36:	f06f 0301 	mvn.w	r3, #1
 8003f3a:	617b      	str	r3, [r7, #20]
 8003f3c:	e022      	b.n	8003f84 <BSP_CAMERA_Start+0x60>
  }
  else if(HAL_DCMI_Start_DMA(&hdcmi, Mode, (uint32_t)pBff, (uint32_t)GetSize(Camera_Ctx[Instance].Resolution, Camera_Ctx[Instance].PixelFormat)) != HAL_OK)
 8003f3e:	68bc      	ldr	r4, [r7, #8]
 8003f40:	4913      	ldr	r1, [pc, #76]	; (8003f90 <BSP_CAMERA_Start+0x6c>)
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	4613      	mov	r3, r2
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	4413      	add	r3, r2
 8003f4a:	011b      	lsls	r3, r3, #4
 8003f4c:	440b      	add	r3, r1
 8003f4e:	6818      	ldr	r0, [r3, #0]
 8003f50:	490f      	ldr	r1, [pc, #60]	; (8003f90 <BSP_CAMERA_Start+0x6c>)
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	4613      	mov	r3, r2
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	4413      	add	r3, r2
 8003f5a:	011b      	lsls	r3, r3, #4
 8003f5c:	440b      	add	r3, r1
 8003f5e:	3304      	adds	r3, #4
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4619      	mov	r1, r3
 8003f64:	f000 f8a6 	bl	80040b4 <GetSize>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	4622      	mov	r2, r4
 8003f6c:	6879      	ldr	r1, [r7, #4]
 8003f6e:	4809      	ldr	r0, [pc, #36]	; (8003f94 <BSP_CAMERA_Start+0x70>)
 8003f70:	f000 feae 	bl	8004cd0 <HAL_DCMI_Start_DMA>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d002      	beq.n	8003f80 <BSP_CAMERA_Start+0x5c>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 8003f7a:	f06f 0303 	mvn.w	r3, #3
 8003f7e:	e002      	b.n	8003f86 <BSP_CAMERA_Start+0x62>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8003f80:	2300      	movs	r3, #0
 8003f82:	617b      	str	r3, [r7, #20]
  }

  /* Return BSP status */
  return ret;
 8003f84:	697b      	ldr	r3, [r7, #20]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	371c      	adds	r7, #28
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd90      	pop	{r4, r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	24004220 	.word	0x24004220
 8003f94:	24003580 	.word	0x24003580

08003f98 <BSP_CAMERA_Stop>:
  * @brief  Stop the CAMERA capture
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_Stop(uint32_t Instance)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <BSP_CAMERA_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003fa6:	f06f 0301 	mvn.w	r3, #1
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	e00b      	b.n	8003fc6 <BSP_CAMERA_Stop+0x2e>
  }
  else if(HAL_DCMI_Stop(&hdcmi) != HAL_OK)
 8003fae:	4808      	ldr	r0, [pc, #32]	; (8003fd0 <BSP_CAMERA_Stop+0x38>)
 8003fb0:	f000 ff50 	bl	8004e54 <HAL_DCMI_Stop>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <BSP_CAMERA_Stop+0x2a>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8003fba:	f06f 0303 	mvn.w	r3, #3
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	e001      	b.n	8003fc6 <BSP_CAMERA_Stop+0x2e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	24003580 	.word	0x24003580

08003fd4 <BSP_CAMERA_HwReset>:
  * @brief  CAMERA hardware reset
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_HwReset(uint32_t Instance)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	60fb      	str	r3, [r7, #12]
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d002      	beq.n	8003fec <BSP_CAMERA_HwReset+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003fe6:	f06f 0301 	mvn.w	r3, #1
 8003fea:	60fb      	str	r3, [r7, #12]
      }
    }
#endif
  }

  return ret;
 8003fec:	68fb      	ldr	r3, [r7, #12]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <BSP_CAMERA_PwrDown>:
  * @brief  CAMERA power down
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_PwrDown(uint32_t Instance)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b085      	sub	sp, #20
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8004002:	2300      	movs	r3, #0
 8004004:	60fb      	str	r3, [r7, #12]
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif

  if(Instance >= CAMERA_INSTANCES_NBR)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d002      	beq.n	8004012 <BSP_CAMERA_PwrDown+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800400c:	f06f 0301 	mvn.w	r3, #1
 8004010:	60fb      	str	r3, [r7, #12]
      }
    }
#endif
  }

  return ret;
 8004012:	68fb      	ldr	r3, [r7, #12]
}
 8004014:	4618      	mov	r0, r3
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <BSP_CAMERA_LineEventCallback>:
  * @brief  Line Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_LineEventCallback(uint32_t Instance)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <BSP_CAMERA_VsyncEventCallback>:
  * @brief  Vsync Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_VsyncEventCallback(uint32_t Instance)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <BSP_CAMERA_ErrorCallback>:
  * @brief  Error callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_ErrorCallback(uint32_t Instance)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <HAL_DCMI_LineEventCallback>:
  * @brief  Line event callback
  * @param  hdcmi  pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_LineEventCallback(0);
 8004064:	2000      	movs	r0, #0
 8004066:	f7ff ffdb 	bl	8004020 <BSP_CAMERA_LineEventCallback>
}
 800406a:	bf00      	nop
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <HAL_DCMI_FrameEventCallback>:
  * @brief  Frame event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
 {
 8004072:	b580      	push	{r7, lr}
 8004074:	b082      	sub	sp, #8
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_FrameEventCallback(0);
 800407a:	2000      	movs	r0, #0
 800407c:	f7fd fc8a 	bl	8001994 <BSP_CAMERA_FrameEventCallback>
}
 8004080:	bf00      	nop
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_DCMI_VsyncEventCallback>:
  * @brief  Vsync event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_VsyncEventCallback(0);
 8004090:	2000      	movs	r0, #0
 8004092:	f7ff ffcf 	bl	8004034 <BSP_CAMERA_VsyncEventCallback>
}
 8004096:	bf00      	nop
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <HAL_DCMI_ErrorCallback>:
  * @brief  Error callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b082      	sub	sp, #8
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_ErrorCallback(0);
 80040a6:	2000      	movs	r0, #0
 80040a8:	f7ff ffce 	bl	8004048 <BSP_CAMERA_ErrorCallback>
}
 80040ac:	bf00      	nop
 80040ae:	3708      	adds	r7, #8
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <GetSize>:
  * @param  Resolution  the current resolution.
  * @param  PixelFormat Pixel format
  * @retval capture size in pixels unit.
  */
static int32_t GetSize(uint32_t Resolution, uint32_t PixelFormat)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t size = 0;
 80040be:	2300      	movs	r3, #0
 80040c0:	60fb      	str	r3, [r7, #12]
  uint32_t pf_div;
  if(PixelFormat == CAMERA_PF_RGB888)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d102      	bne.n	80040ce <GetSize+0x1a>
  {
    pf_div = 3; /* each pixel on 3 bytes so 3/4 words */
 80040c8:	2303      	movs	r3, #3
 80040ca:	60bb      	str	r3, [r7, #8]
 80040cc:	e001      	b.n	80040d2 <GetSize+0x1e>
  }
  else
  {
    pf_div = 2; /* each pixel on 2 bytes so 1/2 words*/
 80040ce:	2302      	movs	r3, #2
 80040d0:	60bb      	str	r3, [r7, #8]
  }
  /* Get capture size */
  switch (Resolution)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b04      	cmp	r3, #4
 80040d6:	d834      	bhi.n	8004142 <GetSize+0x8e>
 80040d8:	a201      	add	r2, pc, #4	; (adr r2, 80040e0 <GetSize+0x2c>)
 80040da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040de:	bf00      	nop
 80040e0:	080040f5 	.word	0x080040f5
 80040e4:	08004105 	.word	0x08004105
 80040e8:	08004115 	.word	0x08004115
 80040ec:	08004125 	.word	0x08004125
 80040f0:	08004135 	.word	0x08004135
  {
  case CAMERA_R160x120:
    size =  ((uint32_t)(160*120)*pf_div)/4U;
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80040fa:	fb02 f303 	mul.w	r3, r2, r3
 80040fe:	089b      	lsrs	r3, r3, #2
 8004100:	60fb      	str	r3, [r7, #12]
    break;
 8004102:	e01f      	b.n	8004144 <GetSize+0x90>
  case CAMERA_R320x240:
    size =  ((uint32_t)(320*240)*pf_div)/4U;
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 800410a:	fb02 f303 	mul.w	r3, r2, r3
 800410e:	089b      	lsrs	r3, r3, #2
 8004110:	60fb      	str	r3, [r7, #12]
    break;
 8004112:	e017      	b.n	8004144 <GetSize+0x90>
  case CAMERA_R480x272:
    size =  ((uint32_t)(480*272)*pf_div)/4U;
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	4613      	mov	r3, r2
 8004118:	021b      	lsls	r3, r3, #8
 800411a:	1a9b      	subs	r3, r3, r2
 800411c:	025b      	lsls	r3, r3, #9
 800411e:	089b      	lsrs	r3, r3, #2
 8004120:	60fb      	str	r3, [r7, #12]
    break;
 8004122:	e00f      	b.n	8004144 <GetSize+0x90>
  case CAMERA_R640x480:
    size =  ((uint32_t)(640*480)*pf_div)/4U;
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
 800412a:	fb02 f303 	mul.w	r3, r2, r3
 800412e:	089b      	lsrs	r3, r3, #2
 8004130:	60fb      	str	r3, [r7, #12]
    break;
 8004132:	e007      	b.n	8004144 <GetSize+0x90>
  case CAMERA_R800x480:
    size =  ((uint32_t)(800*480)*pf_div)/4U;
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	4a07      	ldr	r2, [pc, #28]	; (8004154 <GetSize+0xa0>)
 8004138:	fb02 f303 	mul.w	r3, r2, r3
 800413c:	089b      	lsrs	r3, r3, #2
 800413e:	60fb      	str	r3, [r7, #12]
    break;
 8004140:	e000      	b.n	8004144 <GetSize+0x90>
  default:
    break;
 8004142:	bf00      	nop
  }

  return (int32_t)size;
 8004144:	68fb      	ldr	r3, [r7, #12]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	0005dc00 	.word	0x0005dc00

08004158 <OV5640_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t OV5640_Probe(uint32_t Resolution, uint32_t PixelFormat)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b08a      	sub	sp, #40	; 0x28
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  OV5640_IO_t              IOCtx;
  uint32_t                  id;
  static OV5640_Object_t   OV5640Obj;

  /* Configure the audio driver */
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
 8004162:	2378      	movs	r3, #120	; 0x78
 8004164:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 8004166:	4b2c      	ldr	r3, [pc, #176]	; (8004218 <OV5640_Probe+0xc0>)
 8004168:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800416a:	4b2c      	ldr	r3, [pc, #176]	; (800421c <OV5640_Probe+0xc4>)
 800416c:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 800416e:	4b2c      	ldr	r3, [pc, #176]	; (8004220 <OV5640_Probe+0xc8>)
 8004170:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 8004172:	4b2c      	ldr	r3, [pc, #176]	; (8004224 <OV5640_Probe+0xcc>)
 8004174:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8004176:	4b2c      	ldr	r3, [pc, #176]	; (8004228 <OV5640_Probe+0xd0>)
 8004178:	623b      	str	r3, [r7, #32]

  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 800417a:	f107 030c 	add.w	r3, r7, #12
 800417e:	4619      	mov	r1, r3
 8004180:	482a      	ldr	r0, [pc, #168]	; (800422c <OV5640_Probe+0xd4>)
 8004182:	f7fd fc1d 	bl	80019c0 <OV5640_RegisterBusIO>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <OV5640_Probe+0x3c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800418c:	f06f 0304 	mvn.w	r3, #4
 8004190:	627b      	str	r3, [r7, #36]	; 0x24
 8004192:	e03c      	b.n	800420e <OV5640_Probe+0xb6>
  }
  else if(OV5640_ReadID(&OV5640Obj, &id) != OV5640_OK)
 8004194:	f107 0308 	add.w	r3, r7, #8
 8004198:	4619      	mov	r1, r3
 800419a:	4824      	ldr	r0, [pc, #144]	; (800422c <OV5640_Probe+0xd4>)
 800419c:	f7fe f864 	bl	8002268 <OV5640_ReadID>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <OV5640_Probe+0x56>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80041a6:	f06f 0304 	mvn.w	r3, #4
 80041aa:	627b      	str	r3, [r7, #36]	; 0x24
 80041ac:	e02f      	b.n	800420e <OV5640_Probe+0xb6>
  }
  else
  {
    if(id != OV5640_ID)
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	f245 6240 	movw	r2, #22080	; 0x5640
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d003      	beq.n	80041c0 <OV5640_Probe+0x68>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80041b8:	f06f 0306 	mvn.w	r3, #6
 80041bc:	627b      	str	r3, [r7, #36]	; 0x24
 80041be:	e026      	b.n	800420e <OV5640_Probe+0xb6>
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 80041c0:	4b1b      	ldr	r3, [pc, #108]	; (8004230 <OV5640_Probe+0xd8>)
 80041c2:	4a1c      	ldr	r2, [pc, #112]	; (8004234 <OV5640_Probe+0xdc>)
 80041c4:	601a      	str	r2, [r3, #0]
      Camera_CompObj = &OV5640Obj;
 80041c6:	4b1c      	ldr	r3, [pc, #112]	; (8004238 <OV5640_Probe+0xe0>)
 80041c8:	4a18      	ldr	r2, [pc, #96]	; (800422c <OV5640_Probe+0xd4>)
 80041ca:	601a      	str	r2, [r3, #0]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 80041cc:	4b18      	ldr	r3, [pc, #96]	; (8004230 <OV5640_Probe+0xd8>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a19      	ldr	r2, [pc, #100]	; (8004238 <OV5640_Probe+0xe0>)
 80041d4:	6810      	ldr	r0, [r2, #0]
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	4798      	blx	r3
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <OV5640_Probe+0x92>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80041e2:	f06f 0304 	mvn.w	r3, #4
 80041e6:	627b      	str	r3, [r7, #36]	; 0x24
 80041e8:	e011      	b.n	800420e <OV5640_Probe+0xb6>
      }
	  else if(Camera_Drv->GetCapabilities(Camera_CompObj, Camera_Cap) != OV5640_OK)
 80041ea:	4b11      	ldr	r3, [pc, #68]	; (8004230 <OV5640_Probe+0xd8>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	4a11      	ldr	r2, [pc, #68]	; (8004238 <OV5640_Probe+0xe0>)
 80041f2:	6812      	ldr	r2, [r2, #0]
 80041f4:	4911      	ldr	r1, [pc, #68]	; (800423c <OV5640_Probe+0xe4>)
 80041f6:	6809      	ldr	r1, [r1, #0]
 80041f8:	4610      	mov	r0, r2
 80041fa:	4798      	blx	r3
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <OV5640_Probe+0xb2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004202:	f06f 0304 	mvn.w	r3, #4
 8004206:	627b      	str	r3, [r7, #36]	; 0x24
 8004208:	e001      	b.n	800420e <OV5640_Probe+0xb6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800420a:	2300      	movs	r3, #0
 800420c:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004210:	4618      	mov	r0, r3
 8004212:	3728      	adds	r7, #40	; 0x28
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	080035ed 	.word	0x080035ed
 800421c:	08003661 	.word	0x08003661
 8004220:	08003789 	.word	0x08003789
 8004224:	0800372d 	.word	0x0800372d
 8004228:	080037e5 	.word	0x080037e5
 800422c:	24004258 	.word	0x24004258
 8004230:	24004250 	.word	0x24004250
 8004234:	24000240 	.word	0x24000240
 8004238:	2400421c 	.word	0x2400421c
 800423c:	24004254 	.word	0x24004254

08004240 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004246:	4b0a      	ldr	r3, [pc, #40]	; (8004270 <HAL_MspInit+0x30>)
 8004248:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800424c:	4a08      	ldr	r2, [pc, #32]	; (8004270 <HAL_MspInit+0x30>)
 800424e:	f043 0302 	orr.w	r3, r3, #2
 8004252:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8004256:	4b06      	ldr	r3, [pc, #24]	; (8004270 <HAL_MspInit+0x30>)
 8004258:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	607b      	str	r3, [r7, #4]
 8004262:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	58024400 	.word	0x58024400

08004274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004278:	e7fe      	b.n	8004278 <NMI_Handler+0x4>

0800427a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800427a:	b480      	push	{r7}
 800427c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800427e:	e7fe      	b.n	800427e <HardFault_Handler+0x4>

08004280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004284:	e7fe      	b.n	8004284 <MemManage_Handler+0x4>

08004286 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004286:	b480      	push	{r7}
 8004288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800428a:	e7fe      	b.n	800428a <BusFault_Handler+0x4>

0800428c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004290:	e7fe      	b.n	8004290 <UsageFault_Handler+0x4>

08004292 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004292:	b480      	push	{r7}
 8004294:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004296:	bf00      	nop
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042a4:	bf00      	nop
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042ae:	b480      	push	{r7}
 80042b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042b2:	bf00      	nop
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042c0:	f000 fa46 	bl	8004750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042c4:	bf00      	nop
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80042cc:	4802      	ldr	r0, [pc, #8]	; (80042d8 <USART1_IRQHandler+0x10>)
 80042ce:	f009 fd53 	bl	800dd78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80042d2:	bf00      	nop
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	24004284 	.word	0x24004284

080042dc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80042e0:	4802      	ldr	r0, [pc, #8]	; (80042ec <DMA2_Stream1_IRQHandler+0x10>)
 80042e2:	f002 faa7 	bl	8006834 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80042e6:	bf00      	nop
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	240035d0 	.word	0x240035d0

080042f0 <DCMI_PSSI_IRQHandler>:

/**
  * @brief This function handles DCMI and PSSI global interrupt.
  */
void DCMI_PSSI_IRQHandler(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_PSSI_IRQn 0 */

  /* USER CODE END DCMI_PSSI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80042f4:	4802      	ldr	r0, [pc, #8]	; (8004300 <DCMI_PSSI_IRQHandler+0x10>)
 80042f6:	f000 fe0d 	bl	8004f14 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_PSSI_IRQn 1 */

  /* USER CODE END DCMI_PSSI_IRQn 1 */
}
 80042fa:	bf00      	nop
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	24003580 	.word	0x24003580

08004304 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004308:	4802      	ldr	r0, [pc, #8]	; (8004314 <LTDC_IRQHandler+0x10>)
 800430a:	f006 f8cb 	bl	800a4a4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800430e:	bf00      	nop
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	240036e8 	.word	0x240036e8

08004318 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC Error global Interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800431c:	4802      	ldr	r0, [pc, #8]	; (8004328 <LTDC_ER_IRQHandler+0x10>)
 800431e:	f006 f8c1 	bl	800a4a4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 8004322:	bf00      	nop
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	240036e8 	.word	0x240036e8

0800432c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004330:	4802      	ldr	r0, [pc, #8]	; (800433c <DMA2D_IRQHandler+0x10>)
 8004332:	f003 ff79 	bl	8008228 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8004336:	bf00      	nop
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	24003648 	.word	0x24003648

08004340 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004348:	4a14      	ldr	r2, [pc, #80]	; (800439c <_sbrk+0x5c>)
 800434a:	4b15      	ldr	r3, [pc, #84]	; (80043a0 <_sbrk+0x60>)
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004354:	4b13      	ldr	r3, [pc, #76]	; (80043a4 <_sbrk+0x64>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d102      	bne.n	8004362 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800435c:	4b11      	ldr	r3, [pc, #68]	; (80043a4 <_sbrk+0x64>)
 800435e:	4a12      	ldr	r2, [pc, #72]	; (80043a8 <_sbrk+0x68>)
 8004360:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004362:	4b10      	ldr	r3, [pc, #64]	; (80043a4 <_sbrk+0x64>)
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4413      	add	r3, r2
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	429a      	cmp	r2, r3
 800436e:	d207      	bcs.n	8004380 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004370:	f013 fbfc 	bl	8017b6c <__errno>
 8004374:	4603      	mov	r3, r0
 8004376:	220c      	movs	r2, #12
 8004378:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800437a:	f04f 33ff 	mov.w	r3, #4294967295
 800437e:	e009      	b.n	8004394 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004380:	4b08      	ldr	r3, [pc, #32]	; (80043a4 <_sbrk+0x64>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004386:	4b07      	ldr	r3, [pc, #28]	; (80043a4 <_sbrk+0x64>)
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4413      	add	r3, r2
 800438e:	4a05      	ldr	r2, [pc, #20]	; (80043a4 <_sbrk+0x64>)
 8004390:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004392:	68fb      	ldr	r3, [r7, #12]
}
 8004394:	4618      	mov	r0, r3
 8004396:	3718      	adds	r7, #24
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	24100000 	.word	0x24100000
 80043a0:	00000800 	.word	0x00000800
 80043a4:	24004280 	.word	0x24004280
 80043a8:	20000000 	.word	0x20000000

080043ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80043ac:	b480      	push	{r7}
 80043ae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80043b0:	4b32      	ldr	r3, [pc, #200]	; (800447c <SystemInit+0xd0>)
 80043b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b6:	4a31      	ldr	r2, [pc, #196]	; (800447c <SystemInit+0xd0>)
 80043b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80043c0:	4b2f      	ldr	r3, [pc, #188]	; (8004480 <SystemInit+0xd4>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 030f 	and.w	r3, r3, #15
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d807      	bhi.n	80043dc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80043cc:	4b2c      	ldr	r3, [pc, #176]	; (8004480 <SystemInit+0xd4>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f023 030f 	bic.w	r3, r3, #15
 80043d4:	4a2a      	ldr	r2, [pc, #168]	; (8004480 <SystemInit+0xd4>)
 80043d6:	f043 0303 	orr.w	r3, r3, #3
 80043da:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80043dc:	4b29      	ldr	r3, [pc, #164]	; (8004484 <SystemInit+0xd8>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a28      	ldr	r2, [pc, #160]	; (8004484 <SystemInit+0xd8>)
 80043e2:	f043 0301 	orr.w	r3, r3, #1
 80043e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80043e8:	4b26      	ldr	r3, [pc, #152]	; (8004484 <SystemInit+0xd8>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80043ee:	4b25      	ldr	r3, [pc, #148]	; (8004484 <SystemInit+0xd8>)
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	4924      	ldr	r1, [pc, #144]	; (8004484 <SystemInit+0xd8>)
 80043f4:	4b24      	ldr	r3, [pc, #144]	; (8004488 <SystemInit+0xdc>)
 80043f6:	4013      	ands	r3, r2
 80043f8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80043fa:	4b21      	ldr	r3, [pc, #132]	; (8004480 <SystemInit+0xd4>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 030c 	and.w	r3, r3, #12
 8004402:	2b00      	cmp	r3, #0
 8004404:	d007      	beq.n	8004416 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004406:	4b1e      	ldr	r3, [pc, #120]	; (8004480 <SystemInit+0xd4>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f023 030f 	bic.w	r3, r3, #15
 800440e:	4a1c      	ldr	r2, [pc, #112]	; (8004480 <SystemInit+0xd4>)
 8004410:	f043 0303 	orr.w	r3, r3, #3
 8004414:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8004416:	4b1b      	ldr	r3, [pc, #108]	; (8004484 <SystemInit+0xd8>)
 8004418:	2200      	movs	r2, #0
 800441a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800441c:	4b19      	ldr	r3, [pc, #100]	; (8004484 <SystemInit+0xd8>)
 800441e:	2200      	movs	r2, #0
 8004420:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8004422:	4b18      	ldr	r3, [pc, #96]	; (8004484 <SystemInit+0xd8>)
 8004424:	2200      	movs	r2, #0
 8004426:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004428:	4b16      	ldr	r3, [pc, #88]	; (8004484 <SystemInit+0xd8>)
 800442a:	4a18      	ldr	r2, [pc, #96]	; (800448c <SystemInit+0xe0>)
 800442c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800442e:	4b15      	ldr	r3, [pc, #84]	; (8004484 <SystemInit+0xd8>)
 8004430:	4a17      	ldr	r2, [pc, #92]	; (8004490 <SystemInit+0xe4>)
 8004432:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004434:	4b13      	ldr	r3, [pc, #76]	; (8004484 <SystemInit+0xd8>)
 8004436:	4a17      	ldr	r2, [pc, #92]	; (8004494 <SystemInit+0xe8>)
 8004438:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800443a:	4b12      	ldr	r3, [pc, #72]	; (8004484 <SystemInit+0xd8>)
 800443c:	2200      	movs	r2, #0
 800443e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004440:	4b10      	ldr	r3, [pc, #64]	; (8004484 <SystemInit+0xd8>)
 8004442:	4a14      	ldr	r2, [pc, #80]	; (8004494 <SystemInit+0xe8>)
 8004444:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004446:	4b0f      	ldr	r3, [pc, #60]	; (8004484 <SystemInit+0xd8>)
 8004448:	2200      	movs	r2, #0
 800444a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800444c:	4b0d      	ldr	r3, [pc, #52]	; (8004484 <SystemInit+0xd8>)
 800444e:	4a11      	ldr	r2, [pc, #68]	; (8004494 <SystemInit+0xe8>)
 8004450:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004452:	4b0c      	ldr	r3, [pc, #48]	; (8004484 <SystemInit+0xd8>)
 8004454:	2200      	movs	r2, #0
 8004456:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004458:	4b0a      	ldr	r3, [pc, #40]	; (8004484 <SystemInit+0xd8>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a09      	ldr	r2, [pc, #36]	; (8004484 <SystemInit+0xd8>)
 800445e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004462:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004464:	4b07      	ldr	r3, [pc, #28]	; (8004484 <SystemInit+0xd8>)
 8004466:	2200      	movs	r2, #0
 8004468:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800446a:	4b0b      	ldr	r3, [pc, #44]	; (8004498 <SystemInit+0xec>)
 800446c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004470:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004472:	bf00      	nop
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr
 800447c:	e000ed00 	.word	0xe000ed00
 8004480:	52002000 	.word	0x52002000
 8004484:	58024400 	.word	0x58024400
 8004488:	eaf6ed7f 	.word	0xeaf6ed7f
 800448c:	02020200 	.word	0x02020200
 8004490:	01ff0000 	.word	0x01ff0000
 8004494:	01010280 	.word	0x01010280
 8004498:	52004000 	.word	0x52004000

0800449c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80044a0:	4b22      	ldr	r3, [pc, #136]	; (800452c <MX_USART1_UART_Init+0x90>)
 80044a2:	4a23      	ldr	r2, [pc, #140]	; (8004530 <MX_USART1_UART_Init+0x94>)
 80044a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80044a6:	4b21      	ldr	r3, [pc, #132]	; (800452c <MX_USART1_UART_Init+0x90>)
 80044a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80044ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80044ae:	4b1f      	ldr	r3, [pc, #124]	; (800452c <MX_USART1_UART_Init+0x90>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80044b4:	4b1d      	ldr	r3, [pc, #116]	; (800452c <MX_USART1_UART_Init+0x90>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80044ba:	4b1c      	ldr	r3, [pc, #112]	; (800452c <MX_USART1_UART_Init+0x90>)
 80044bc:	2200      	movs	r2, #0
 80044be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80044c0:	4b1a      	ldr	r3, [pc, #104]	; (800452c <MX_USART1_UART_Init+0x90>)
 80044c2:	220c      	movs	r2, #12
 80044c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044c6:	4b19      	ldr	r3, [pc, #100]	; (800452c <MX_USART1_UART_Init+0x90>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80044cc:	4b17      	ldr	r3, [pc, #92]	; (800452c <MX_USART1_UART_Init+0x90>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80044d2:	4b16      	ldr	r3, [pc, #88]	; (800452c <MX_USART1_UART_Init+0x90>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80044d8:	4b14      	ldr	r3, [pc, #80]	; (800452c <MX_USART1_UART_Init+0x90>)
 80044da:	2200      	movs	r2, #0
 80044dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80044de:	4b13      	ldr	r3, [pc, #76]	; (800452c <MX_USART1_UART_Init+0x90>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80044e4:	4811      	ldr	r0, [pc, #68]	; (800452c <MX_USART1_UART_Init+0x90>)
 80044e6:	f009 faa0 	bl	800da2a <HAL_UART_Init>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80044f0:	f7fd fa60 	bl	80019b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80044f4:	2100      	movs	r1, #0
 80044f6:	480d      	ldr	r0, [pc, #52]	; (800452c <MX_USART1_UART_Init+0x90>)
 80044f8:	f00b f936 	bl	800f768 <HAL_UARTEx_SetTxFifoThreshold>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004502:	f7fd fa57 	bl	80019b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004506:	2100      	movs	r1, #0
 8004508:	4808      	ldr	r0, [pc, #32]	; (800452c <MX_USART1_UART_Init+0x90>)
 800450a:	f00b f96b 	bl	800f7e4 <HAL_UARTEx_SetRxFifoThreshold>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004514:	f7fd fa4e 	bl	80019b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004518:	4804      	ldr	r0, [pc, #16]	; (800452c <MX_USART1_UART_Init+0x90>)
 800451a:	f00b f8ec 	bl	800f6f6 <HAL_UARTEx_DisableFifoMode>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004524:	f7fd fa46 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004528:	bf00      	nop
 800452a:	bd80      	pop	{r7, pc}
 800452c:	24004284 	.word	0x24004284
 8004530:	40011000 	.word	0x40011000

08004534 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b0ba      	sub	sp, #232	; 0xe8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800453c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004540:	2200      	movs	r2, #0
 8004542:	601a      	str	r2, [r3, #0]
 8004544:	605a      	str	r2, [r3, #4]
 8004546:	609a      	str	r2, [r3, #8]
 8004548:	60da      	str	r2, [r3, #12]
 800454a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800454c:	f107 0310 	add.w	r3, r7, #16
 8004550:	22c0      	movs	r2, #192	; 0xc0
 8004552:	2100      	movs	r1, #0
 8004554:	4618      	mov	r0, r3
 8004556:	f013 fb49 	bl	8017bec <memset>
  if(uartHandle->Instance==USART1)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a2b      	ldr	r2, [pc, #172]	; (800460c <HAL_UART_MspInit+0xd8>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d14e      	bne.n	8004602 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004564:	f04f 0201 	mov.w	r2, #1
 8004568:	f04f 0300 	mov.w	r3, #0
 800456c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8004570:	2300      	movs	r3, #0
 8004572:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004576:	f107 0310 	add.w	r3, r7, #16
 800457a:	4618      	mov	r0, r3
 800457c:	f007 fabe 	bl	800bafc <HAL_RCCEx_PeriphCLKConfig>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8004586:	f7fd fa15 	bl	80019b4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800458a:	4b21      	ldr	r3, [pc, #132]	; (8004610 <HAL_UART_MspInit+0xdc>)
 800458c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8004590:	4a1f      	ldr	r2, [pc, #124]	; (8004610 <HAL_UART_MspInit+0xdc>)
 8004592:	f043 0310 	orr.w	r3, r3, #16
 8004596:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 800459a:	4b1d      	ldr	r3, [pc, #116]	; (8004610 <HAL_UART_MspInit+0xdc>)
 800459c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80045a0:	f003 0310 	and.w	r3, r3, #16
 80045a4:	60fb      	str	r3, [r7, #12]
 80045a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045a8:	4b19      	ldr	r3, [pc, #100]	; (8004610 <HAL_UART_MspInit+0xdc>)
 80045aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80045ae:	4a18      	ldr	r2, [pc, #96]	; (8004610 <HAL_UART_MspInit+0xdc>)
 80045b0:	f043 0301 	orr.w	r3, r3, #1
 80045b4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80045b8:	4b15      	ldr	r3, [pc, #84]	; (8004610 <HAL_UART_MspInit+0xdc>)
 80045ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	60bb      	str	r3, [r7, #8]
 80045c4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 80045c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80045ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ce:	2302      	movs	r3, #2
 80045d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d4:	2300      	movs	r3, #0
 80045d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045da:	2300      	movs	r3, #0
 80045dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80045e0:	2307      	movs	r3, #7
 80045e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045e6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80045ea:	4619      	mov	r1, r3
 80045ec:	4809      	ldr	r0, [pc, #36]	; (8004614 <HAL_UART_MspInit+0xe0>)
 80045ee:	f004 fd2f 	bl	8009050 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80045f2:	2200      	movs	r2, #0
 80045f4:	2100      	movs	r1, #0
 80045f6:	2025      	movs	r0, #37	; 0x25
 80045f8:	f000 f9c9 	bl	800498e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80045fc:	2025      	movs	r0, #37	; 0x25
 80045fe:	f000 f9e0 	bl	80049c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004602:	bf00      	nop
 8004604:	37e8      	adds	r7, #232	; 0xe8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	40011000 	.word	0x40011000
 8004610:	58024400 	.word	0x58024400
 8004614:	58020000 	.word	0x58020000

08004618 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004618:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004650 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800461c:	f7ff fec6 	bl	80043ac <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004620:	480c      	ldr	r0, [pc, #48]	; (8004654 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004622:	490d      	ldr	r1, [pc, #52]	; (8004658 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004624:	4a0d      	ldr	r2, [pc, #52]	; (800465c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004628:	e002      	b.n	8004630 <LoopCopyDataInit>

0800462a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800462a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800462c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800462e:	3304      	adds	r3, #4

08004630 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8004630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004634:	d3f9      	bcc.n	800462a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004636:	4a0a      	ldr	r2, [pc, #40]	; (8004660 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004638:	4c0a      	ldr	r4, [pc, #40]	; (8004664 <LoopFillZerobss+0x22>)
  movs r3, #0
 800463a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800463c:	e001      	b.n	8004642 <LoopFillZerobss>

0800463e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800463e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004640:	3204      	adds	r2, #4

08004642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004644:	d3fb      	bcc.n	800463e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004646:	f013 fa97 	bl	8017b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800464a:	f7fd f853 	bl	80016f4 <main>
  bx  lr
 800464e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004650:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8004654:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004658:	24003524 	.word	0x24003524
  ldr r2, =_sidata
 800465c:	080206b0 	.word	0x080206b0
  ldr r2, =_sbss
 8004660:	24003540 	.word	0x24003540
  ldr r4, =_ebss
 8004664:	2402171c 	.word	0x2402171c

08004668 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004668:	e7fe      	b.n	8004668 <ADC_IRQHandler>
	...

0800466c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004672:	2003      	movs	r0, #3
 8004674:	f000 f980 	bl	8004978 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004678:	f007 f86a 	bl	800b750 <HAL_RCC_GetSysClockFreq>
 800467c:	4602      	mov	r2, r0
 800467e:	4b15      	ldr	r3, [pc, #84]	; (80046d4 <HAL_Init+0x68>)
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	0a1b      	lsrs	r3, r3, #8
 8004684:	f003 030f 	and.w	r3, r3, #15
 8004688:	4913      	ldr	r1, [pc, #76]	; (80046d8 <HAL_Init+0x6c>)
 800468a:	5ccb      	ldrb	r3, [r1, r3]
 800468c:	f003 031f 	and.w	r3, r3, #31
 8004690:	fa22 f303 	lsr.w	r3, r2, r3
 8004694:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004696:	4b0f      	ldr	r3, [pc, #60]	; (80046d4 <HAL_Init+0x68>)
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	f003 030f 	and.w	r3, r3, #15
 800469e:	4a0e      	ldr	r2, [pc, #56]	; (80046d8 <HAL_Init+0x6c>)
 80046a0:	5cd3      	ldrb	r3, [r2, r3]
 80046a2:	f003 031f 	and.w	r3, r3, #31
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	fa22 f303 	lsr.w	r3, r2, r3
 80046ac:	4a0b      	ldr	r2, [pc, #44]	; (80046dc <HAL_Init+0x70>)
 80046ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80046b0:	4a0b      	ldr	r2, [pc, #44]	; (80046e0 <HAL_Init+0x74>)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80046b6:	2000      	movs	r0, #0
 80046b8:	f000 f814 	bl	80046e4 <HAL_InitTick>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e002      	b.n	80046cc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80046c6:	f7ff fdbb 	bl	8004240 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3708      	adds	r7, #8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	58024400 	.word	0x58024400
 80046d8:	08019908 	.word	0x08019908
 80046dc:	24000288 	.word	0x24000288
 80046e0:	24000284 	.word	0x24000284

080046e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80046ec:	4b15      	ldr	r3, [pc, #84]	; (8004744 <HAL_InitTick+0x60>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e021      	b.n	800473c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80046f8:	4b13      	ldr	r3, [pc, #76]	; (8004748 <HAL_InitTick+0x64>)
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	4b11      	ldr	r3, [pc, #68]	; (8004744 <HAL_InitTick+0x60>)
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	4619      	mov	r1, r3
 8004702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004706:	fbb3 f3f1 	udiv	r3, r3, r1
 800470a:	fbb2 f3f3 	udiv	r3, r2, r3
 800470e:	4618      	mov	r0, r3
 8004710:	f000 f965 	bl	80049de <HAL_SYSTICK_Config>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e00e      	b.n	800473c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b0f      	cmp	r3, #15
 8004722:	d80a      	bhi.n	800473a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004724:	2200      	movs	r2, #0
 8004726:	6879      	ldr	r1, [r7, #4]
 8004728:	f04f 30ff 	mov.w	r0, #4294967295
 800472c:	f000 f92f 	bl	800498e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004730:	4a06      	ldr	r2, [pc, #24]	; (800474c <HAL_InitTick+0x68>)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004736:	2300      	movs	r3, #0
 8004738:	e000      	b.n	800473c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
}
 800473c:	4618      	mov	r0, r3
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	24000290 	.word	0x24000290
 8004748:	24000284 	.word	0x24000284
 800474c:	2400028c 	.word	0x2400028c

08004750 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004754:	4b06      	ldr	r3, [pc, #24]	; (8004770 <HAL_IncTick+0x20>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	461a      	mov	r2, r3
 800475a:	4b06      	ldr	r3, [pc, #24]	; (8004774 <HAL_IncTick+0x24>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4413      	add	r3, r2
 8004760:	4a04      	ldr	r2, [pc, #16]	; (8004774 <HAL_IncTick+0x24>)
 8004762:	6013      	str	r3, [r2, #0]
}
 8004764:	bf00      	nop
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	24000290 	.word	0x24000290
 8004774:	24004318 	.word	0x24004318

08004778 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
  return uwTick;
 800477c:	4b03      	ldr	r3, [pc, #12]	; (800478c <HAL_GetTick+0x14>)
 800477e:	681b      	ldr	r3, [r3, #0]
}
 8004780:	4618      	mov	r0, r3
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	24004318 	.word	0x24004318

08004790 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004798:	f7ff ffee 	bl	8004778 <HAL_GetTick>
 800479c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a8:	d005      	beq.n	80047b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80047aa:	4b0a      	ldr	r3, [pc, #40]	; (80047d4 <HAL_Delay+0x44>)
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	461a      	mov	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4413      	add	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80047b6:	bf00      	nop
 80047b8:	f7ff ffde 	bl	8004778 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d8f7      	bhi.n	80047b8 <HAL_Delay+0x28>
  {
  }
}
 80047c8:	bf00      	nop
 80047ca:	bf00      	nop
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	24000290 	.word	0x24000290

080047d8 <__NVIC_SetPriorityGrouping>:
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f003 0307 	and.w	r3, r3, #7
 80047e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047e8:	4b0b      	ldr	r3, [pc, #44]	; (8004818 <__NVIC_SetPriorityGrouping+0x40>)
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80047f4:	4013      	ands	r3, r2
 80047f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004800:	4b06      	ldr	r3, [pc, #24]	; (800481c <__NVIC_SetPriorityGrouping+0x44>)
 8004802:	4313      	orrs	r3, r2
 8004804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004806:	4a04      	ldr	r2, [pc, #16]	; (8004818 <__NVIC_SetPriorityGrouping+0x40>)
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	60d3      	str	r3, [r2, #12]
}
 800480c:	bf00      	nop
 800480e:	3714      	adds	r7, #20
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr
 8004818:	e000ed00 	.word	0xe000ed00
 800481c:	05fa0000 	.word	0x05fa0000

08004820 <__NVIC_GetPriorityGrouping>:
{
 8004820:	b480      	push	{r7}
 8004822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004824:	4b04      	ldr	r3, [pc, #16]	; (8004838 <__NVIC_GetPriorityGrouping+0x18>)
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	0a1b      	lsrs	r3, r3, #8
 800482a:	f003 0307 	and.w	r3, r3, #7
}
 800482e:	4618      	mov	r0, r3
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	e000ed00 	.word	0xe000ed00

0800483c <__NVIC_EnableIRQ>:
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	4603      	mov	r3, r0
 8004844:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004846:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800484a:	2b00      	cmp	r3, #0
 800484c:	db0b      	blt.n	8004866 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800484e:	88fb      	ldrh	r3, [r7, #6]
 8004850:	f003 021f 	and.w	r2, r3, #31
 8004854:	4907      	ldr	r1, [pc, #28]	; (8004874 <__NVIC_EnableIRQ+0x38>)
 8004856:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800485a:	095b      	lsrs	r3, r3, #5
 800485c:	2001      	movs	r0, #1
 800485e:	fa00 f202 	lsl.w	r2, r0, r2
 8004862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004866:	bf00      	nop
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	e000e100 	.word	0xe000e100

08004878 <__NVIC_SetPriority>:
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	4603      	mov	r3, r0
 8004880:	6039      	str	r1, [r7, #0]
 8004882:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004884:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004888:	2b00      	cmp	r3, #0
 800488a:	db0a      	blt.n	80048a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	b2da      	uxtb	r2, r3
 8004890:	490c      	ldr	r1, [pc, #48]	; (80048c4 <__NVIC_SetPriority+0x4c>)
 8004892:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004896:	0112      	lsls	r2, r2, #4
 8004898:	b2d2      	uxtb	r2, r2
 800489a:	440b      	add	r3, r1
 800489c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80048a0:	e00a      	b.n	80048b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	b2da      	uxtb	r2, r3
 80048a6:	4908      	ldr	r1, [pc, #32]	; (80048c8 <__NVIC_SetPriority+0x50>)
 80048a8:	88fb      	ldrh	r3, [r7, #6]
 80048aa:	f003 030f 	and.w	r3, r3, #15
 80048ae:	3b04      	subs	r3, #4
 80048b0:	0112      	lsls	r2, r2, #4
 80048b2:	b2d2      	uxtb	r2, r2
 80048b4:	440b      	add	r3, r1
 80048b6:	761a      	strb	r2, [r3, #24]
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr
 80048c4:	e000e100 	.word	0xe000e100
 80048c8:	e000ed00 	.word	0xe000ed00

080048cc <NVIC_EncodePriority>:
{
 80048cc:	b480      	push	{r7}
 80048ce:	b089      	sub	sp, #36	; 0x24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f003 0307 	and.w	r3, r3, #7
 80048de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	f1c3 0307 	rsb	r3, r3, #7
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	bf28      	it	cs
 80048ea:	2304      	movcs	r3, #4
 80048ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	3304      	adds	r3, #4
 80048f2:	2b06      	cmp	r3, #6
 80048f4:	d902      	bls.n	80048fc <NVIC_EncodePriority+0x30>
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	3b03      	subs	r3, #3
 80048fa:	e000      	b.n	80048fe <NVIC_EncodePriority+0x32>
 80048fc:	2300      	movs	r3, #0
 80048fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004900:	f04f 32ff 	mov.w	r2, #4294967295
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	fa02 f303 	lsl.w	r3, r2, r3
 800490a:	43da      	mvns	r2, r3
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	401a      	ands	r2, r3
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004914:	f04f 31ff 	mov.w	r1, #4294967295
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	fa01 f303 	lsl.w	r3, r1, r3
 800491e:	43d9      	mvns	r1, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004924:	4313      	orrs	r3, r2
}
 8004926:	4618      	mov	r0, r3
 8004928:	3724      	adds	r7, #36	; 0x24
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
	...

08004934 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	3b01      	subs	r3, #1
 8004940:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004944:	d301      	bcc.n	800494a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004946:	2301      	movs	r3, #1
 8004948:	e00f      	b.n	800496a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800494a:	4a0a      	ldr	r2, [pc, #40]	; (8004974 <SysTick_Config+0x40>)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3b01      	subs	r3, #1
 8004950:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004952:	210f      	movs	r1, #15
 8004954:	f04f 30ff 	mov.w	r0, #4294967295
 8004958:	f7ff ff8e 	bl	8004878 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800495c:	4b05      	ldr	r3, [pc, #20]	; (8004974 <SysTick_Config+0x40>)
 800495e:	2200      	movs	r2, #0
 8004960:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004962:	4b04      	ldr	r3, [pc, #16]	; (8004974 <SysTick_Config+0x40>)
 8004964:	2207      	movs	r2, #7
 8004966:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	e000e010 	.word	0xe000e010

08004978 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f7ff ff29 	bl	80047d8 <__NVIC_SetPriorityGrouping>
}
 8004986:	bf00      	nop
 8004988:	3708      	adds	r7, #8
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b086      	sub	sp, #24
 8004992:	af00      	add	r7, sp, #0
 8004994:	4603      	mov	r3, r0
 8004996:	60b9      	str	r1, [r7, #8]
 8004998:	607a      	str	r2, [r7, #4]
 800499a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800499c:	f7ff ff40 	bl	8004820 <__NVIC_GetPriorityGrouping>
 80049a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	68b9      	ldr	r1, [r7, #8]
 80049a6:	6978      	ldr	r0, [r7, #20]
 80049a8:	f7ff ff90 	bl	80048cc <NVIC_EncodePriority>
 80049ac:	4602      	mov	r2, r0
 80049ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80049b2:	4611      	mov	r1, r2
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7ff ff5f 	bl	8004878 <__NVIC_SetPriority>
}
 80049ba:	bf00      	nop
 80049bc:	3718      	adds	r7, #24
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b082      	sub	sp, #8
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	4603      	mov	r3, r0
 80049ca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7ff ff33 	bl	800483c <__NVIC_EnableIRQ>
}
 80049d6:	bf00      	nop
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b082      	sub	sp, #8
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7ff ffa4 	bl	8004934 <SysTick_Config>
 80049ec:	4603      	mov	r3, r0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
	...

080049f8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e054      	b.n	8004ab4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	7f5b      	ldrb	r3, [r3, #29]
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d105      	bne.n	8004a20 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7fb fe90 	bl	8000740 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2202      	movs	r2, #2
 8004a24:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	791b      	ldrb	r3, [r3, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10c      	bne.n	8004a48 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a22      	ldr	r2, [pc, #136]	; (8004abc <HAL_CRC_Init+0xc4>)
 8004a34:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f022 0218 	bic.w	r2, r2, #24
 8004a44:	609a      	str	r2, [r3, #8]
 8004a46:	e00c      	b.n	8004a62 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6899      	ldr	r1, [r3, #8]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	461a      	mov	r2, r3
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f834 	bl	8004ac0 <HAL_CRCEx_Polynomial_Set>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e028      	b.n	8004ab4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	795b      	ldrb	r3, [r3, #5]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d105      	bne.n	8004a76 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a72:	611a      	str	r2, [r3, #16]
 8004a74:	e004      	b.n	8004a80 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	6912      	ldr	r2, [r2, #16]
 8004a7e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	695a      	ldr	r2, [r3, #20]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	699a      	ldr	r2, [r3, #24]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3708      	adds	r7, #8
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	04c11db7 	.word	0x04c11db7

08004ac0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b087      	sub	sp, #28
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004acc:	2300      	movs	r3, #0
 8004ace:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004ad0:	231f      	movs	r3, #31
 8004ad2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d102      	bne.n	8004ae4 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	75fb      	strb	r3, [r7, #23]
 8004ae2:	e063      	b.n	8004bac <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004ae4:	bf00      	nop
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1e5a      	subs	r2, r3, #1
 8004aea:	613a      	str	r2, [r7, #16]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d009      	beq.n	8004b04 <HAL_CRCEx_Polynomial_Set+0x44>
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	f003 031f 	and.w	r3, r3, #31
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	fa22 f303 	lsr.w	r3, r2, r3
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d0f0      	beq.n	8004ae6 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b18      	cmp	r3, #24
 8004b08:	d846      	bhi.n	8004b98 <HAL_CRCEx_Polynomial_Set+0xd8>
 8004b0a:	a201      	add	r2, pc, #4	; (adr r2, 8004b10 <HAL_CRCEx_Polynomial_Set+0x50>)
 8004b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b10:	08004b9f 	.word	0x08004b9f
 8004b14:	08004b99 	.word	0x08004b99
 8004b18:	08004b99 	.word	0x08004b99
 8004b1c:	08004b99 	.word	0x08004b99
 8004b20:	08004b99 	.word	0x08004b99
 8004b24:	08004b99 	.word	0x08004b99
 8004b28:	08004b99 	.word	0x08004b99
 8004b2c:	08004b99 	.word	0x08004b99
 8004b30:	08004b8d 	.word	0x08004b8d
 8004b34:	08004b99 	.word	0x08004b99
 8004b38:	08004b99 	.word	0x08004b99
 8004b3c:	08004b99 	.word	0x08004b99
 8004b40:	08004b99 	.word	0x08004b99
 8004b44:	08004b99 	.word	0x08004b99
 8004b48:	08004b99 	.word	0x08004b99
 8004b4c:	08004b99 	.word	0x08004b99
 8004b50:	08004b81 	.word	0x08004b81
 8004b54:	08004b99 	.word	0x08004b99
 8004b58:	08004b99 	.word	0x08004b99
 8004b5c:	08004b99 	.word	0x08004b99
 8004b60:	08004b99 	.word	0x08004b99
 8004b64:	08004b99 	.word	0x08004b99
 8004b68:	08004b99 	.word	0x08004b99
 8004b6c:	08004b99 	.word	0x08004b99
 8004b70:	08004b75 	.word	0x08004b75
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	2b06      	cmp	r3, #6
 8004b78:	d913      	bls.n	8004ba2 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004b7e:	e010      	b.n	8004ba2 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	2b07      	cmp	r3, #7
 8004b84:	d90f      	bls.n	8004ba6 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004b8a:	e00c      	b.n	8004ba6 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	2b0f      	cmp	r3, #15
 8004b90:	d90b      	bls.n	8004baa <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004b96:	e008      	b.n	8004baa <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	75fb      	strb	r3, [r7, #23]
        break;
 8004b9c:	e006      	b.n	8004bac <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004b9e:	bf00      	nop
 8004ba0:	e004      	b.n	8004bac <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004ba2:	bf00      	nop
 8004ba4:	e002      	b.n	8004bac <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004ba6:	bf00      	nop
 8004ba8:	e000      	b.n	8004bac <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004baa:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8004bac:	7dfb      	ldrb	r3, [r7, #23]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10d      	bne.n	8004bce <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f023 0118 	bic.w	r1, r3, #24
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	371c      	adds	r7, #28
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e069      	b.n	8004cc2 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d102      	bne.n	8004c00 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7fb fdf6 	bl	80007ec <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2202      	movs	r2, #2
 8004c04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d002      	beq.n	8004c16 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	6819      	ldr	r1, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	4b2a      	ldr	r3, [pc, #168]	; (8004ccc <HAL_DCMI_Init+0xf0>)
 8004c22:	400b      	ands	r3, r1
 8004c24:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6819      	ldr	r1, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004c3a:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004c46:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004c52:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c58:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004c5e:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c64:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004c6a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	430a      	orrs	r2, r1
 8004c72:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	2b10      	cmp	r3, #16
 8004c7a:	d112      	bne.n	8004ca2 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	7f1b      	ldrb	r3, [r3, #28]
 8004c80:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	7f5b      	ldrb	r3, [r3, #29]
 8004c86:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004c88:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	7f9b      	ldrb	r3, [r3, #30]
 8004c8e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004c90:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	7fdb      	ldrb	r3, [r3, #31]
 8004c98:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004c9e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004ca0:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68da      	ldr	r2, [r3, #12]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f042 021e 	orr.w	r2, r2, #30
 8004cb0:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	ffe0f007 	.word	0xffe0f007

08004cd0 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b088      	sub	sp, #32
 8004cd4:	af02      	add	r7, sp, #8
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
 8004cdc:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d101      	bne.n	8004cec <HAL_DCMI_Start_DMA+0x1c>
 8004ce8:	2302      	movs	r3, #2
 8004cea:	e0ab      	b.n	8004e44 <HAL_DCMI_Start_DMA+0x174>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d0a:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0202 	bic.w	r2, r2, #2
 8004d1a:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6819      	ldr	r1, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d30:	4a46      	ldr	r2, [pc, #280]	; (8004e4c <HAL_DCMI_Start_DMA+0x17c>)
 8004d32:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d38:	4a45      	ldr	r2, [pc, #276]	; (8004e50 <HAL_DCMI_Start_DMA+0x180>)
 8004d3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d40:	2200      	movs	r2, #0
 8004d42:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d62:	d219      	bcs.n	8004d98 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	3328      	adds	r3, #40	; 0x28
 8004d6e:	4619      	mov	r1, r3
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	f000 fd90 	bl	8005898 <HAL_DMA_Start_IT>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d055      	beq.n	8004e2a <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2240      	movs	r2, #64	; 0x40
 8004d82:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e055      	b.n	8004e44 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d9c:	4a2b      	ldr	r2, [pc, #172]	; (8004e4c <HAL_DCMI_Start_DMA+0x17c>)
 8004d9e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2201      	movs	r2, #1
 8004da4:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8004db2:	e009      	b.n	8004dc8 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db8:	085a      	lsrs	r2, r3, #1
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc2:	005a      	lsls	r2, r3, #1
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd0:	d2f0      	bcs.n	8004db4 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd6:	1e9a      	subs	r2, r3, #2
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	4413      	add	r3, r2
 8004dee:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	3328      	adds	r3, #40	; 0x28
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	f003 fc73 	bl	80086f0 <HAL_DMAEx_MultiBufferStart_IT>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00c      	beq.n	8004e2a <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2240      	movs	r2, #64	; 0x40
 8004e14:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e00c      	b.n	8004e44 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f042 0201 	orr.w	r2, r2, #1
 8004e38:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3718      	adds	r7, #24
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	08005019 	.word	0x08005019
 8004e50:	0800513f 	.word	0x0800513f

08004e54 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8004e5c:	4b2b      	ldr	r3, [pc, #172]	; (8004f0c <HAL_DCMI_Stop+0xb8>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a2b      	ldr	r2, [pc, #172]	; (8004f10 <HAL_DCMI_Stop+0xbc>)
 8004e62:	fba2 2303 	umull	r2, r3, r2, r3
 8004e66:	0a5b      	lsrs	r3, r3, #9
 8004e68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e6c:	fb02 f303 	mul.w	r3, r2, r3
 8004e70:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004e72:	2300      	movs	r3, #0
 8004e74:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d101      	bne.n	8004e84 <HAL_DCMI_Stop+0x30>
 8004e80:	2302      	movs	r3, #2
 8004e82:	e03f      	b.n	8004f04 <HAL_DCMI_Stop+0xb0>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f022 0201 	bic.w	r2, r2, #1
 8004ea2:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d108      	bne.n	8004ec2 <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eb4:	f043 0220 	orr.w	r2, r3, #32
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	72fb      	strb	r3, [r7, #11]
      break;
 8004ec0:	e006      	b.n	8004ed0 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1e9      	bne.n	8004ea4 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ede:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f000 ff41 	bl	8005d6c <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8004f02:	7afb      	ldrb	r3, [r7, #11]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	24000284 	.word	0x24000284
 8004f10:	10624dd3 	.word	0x10624dd3

08004f14 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f003 0304 	and.w	r3, r3, #4
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d016      	beq.n	8004f5c <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2204      	movs	r2, #4
 8004f34:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f3a:	f043 0202 	orr.w	r2, r3, #2
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2204      	movs	r2, #4
 8004f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f4e:	4a31      	ldr	r2, [pc, #196]	; (8005014 <HAL_DCMI_IRQHandler+0x100>)
 8004f50:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f56:	4618      	mov	r0, r3
 8004f58:	f001 fa26 	bl	80063a8 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f003 0302 	and.w	r3, r3, #2
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d016      	beq.n	8004f94 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f72:	f043 0201 	orr.w	r2, r3, #1
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2204      	movs	r2, #4
 8004f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f86:	4a23      	ldr	r2, [pc, #140]	; (8005014 <HAL_DCMI_IRQHandler+0x100>)
 8004f88:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f001 fa0a 	bl	80063a8 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f003 0310 	and.w	r3, r3, #16
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d006      	beq.n	8004fac <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2210      	movs	r2, #16
 8004fa4:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f7ff f858 	bl	800405c <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f003 0308 	and.w	r3, r3, #8
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d006      	beq.n	8004fc4 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2208      	movs	r2, #8
 8004fbc:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7ff f862 	bl	8004088 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d01d      	beq.n	800500a <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d107      	bne.n	8004fec <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68da      	ldr	r2, [r3, #12]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f022 021e 	bic.w	r2, r2, #30
 8004fea:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68da      	ldr	r2, [r3, #12]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f022 0201 	bic.w	r2, r2, #1
 8004ffa:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2201      	movs	r2, #1
 8005002:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f7ff f834 	bl	8004072 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 800500a:	bf00      	nop
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	0800513f 	.word	0x0800513f

08005018 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005024:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502a:	2b00      	cmp	r3, #0
 800502c:	d043      	beq.n	80050b6 <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800503a:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	2b00      	cmp	r3, #0
 8005046:	d118      	bne.n	800507a <DCMI_DMAXferCplt+0x62>
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d015      	beq.n	800507a <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005060:	00da      	lsls	r2, r3, #3
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	4413      	add	r3, r2
 8005066:	2200      	movs	r2, #0
 8005068:	4619      	mov	r1, r3
 800506a:	f003 fe9f 	bl	8008dac <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005072:	1e5a      	subs	r2, r3, #1
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	639a      	str	r2, [r3, #56]	; 0x38
 8005078:	e044      	b.n	8005104 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d13c      	bne.n	8005104 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800509c:	00da      	lsls	r2, r3, #3
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	4413      	add	r3, r2
 80050a2:	2201      	movs	r2, #1
 80050a4:	4619      	mov	r1, r3
 80050a6:	f003 fe81 	bl	8008dac <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ae:	1e5a      	subs	r2, r3, #1
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	639a      	str	r2, [r3, #56]	; 0x38
 80050b4:	e026      	b.n	8005104 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d006      	beq.n	80050d4 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80050d0:	60da      	str	r2, [r3, #12]
 80050d2:	e017      	b.n	8005104 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d10f      	bne.n	8005104 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e8:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ee:	0099      	lsls	r1, r3, #2
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	440a      	add	r2, r1
 80050fa:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510c:	429a      	cmp	r2, r3
 800510e:	d112      	bne.n	8005136 <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68da      	ldr	r2, [r3, #12]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f042 0201 	orr.w	r2, r2, #1
 800511e:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b02      	cmp	r3, #2
 800512c:	d103      	bne.n	8005136 <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 8005136:	bf00      	nop
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b084      	sub	sp, #16
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514a:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005152:	2b02      	cmp	r3, #2
 8005154:	d009      	beq.n	800516a <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005162:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f7fe ff97 	bl	800409e <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8005170:	bf00      	nop
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005180:	f7ff fafa 	bl	8004778 <HAL_GetTick>
 8005184:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e37f      	b.n	8005890 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a66      	ldr	r2, [pc, #408]	; (8005330 <HAL_DMA_Init+0x1b8>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d04a      	beq.n	8005230 <HAL_DMA_Init+0xb8>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a65      	ldr	r2, [pc, #404]	; (8005334 <HAL_DMA_Init+0x1bc>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d045      	beq.n	8005230 <HAL_DMA_Init+0xb8>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a63      	ldr	r2, [pc, #396]	; (8005338 <HAL_DMA_Init+0x1c0>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d040      	beq.n	8005230 <HAL_DMA_Init+0xb8>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a62      	ldr	r2, [pc, #392]	; (800533c <HAL_DMA_Init+0x1c4>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d03b      	beq.n	8005230 <HAL_DMA_Init+0xb8>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a60      	ldr	r2, [pc, #384]	; (8005340 <HAL_DMA_Init+0x1c8>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d036      	beq.n	8005230 <HAL_DMA_Init+0xb8>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a5f      	ldr	r2, [pc, #380]	; (8005344 <HAL_DMA_Init+0x1cc>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d031      	beq.n	8005230 <HAL_DMA_Init+0xb8>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a5d      	ldr	r2, [pc, #372]	; (8005348 <HAL_DMA_Init+0x1d0>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d02c      	beq.n	8005230 <HAL_DMA_Init+0xb8>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a5c      	ldr	r2, [pc, #368]	; (800534c <HAL_DMA_Init+0x1d4>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d027      	beq.n	8005230 <HAL_DMA_Init+0xb8>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a5a      	ldr	r2, [pc, #360]	; (8005350 <HAL_DMA_Init+0x1d8>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d022      	beq.n	8005230 <HAL_DMA_Init+0xb8>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a59      	ldr	r2, [pc, #356]	; (8005354 <HAL_DMA_Init+0x1dc>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d01d      	beq.n	8005230 <HAL_DMA_Init+0xb8>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a57      	ldr	r2, [pc, #348]	; (8005358 <HAL_DMA_Init+0x1e0>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d018      	beq.n	8005230 <HAL_DMA_Init+0xb8>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a56      	ldr	r2, [pc, #344]	; (800535c <HAL_DMA_Init+0x1e4>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d013      	beq.n	8005230 <HAL_DMA_Init+0xb8>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a54      	ldr	r2, [pc, #336]	; (8005360 <HAL_DMA_Init+0x1e8>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d00e      	beq.n	8005230 <HAL_DMA_Init+0xb8>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a53      	ldr	r2, [pc, #332]	; (8005364 <HAL_DMA_Init+0x1ec>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d009      	beq.n	8005230 <HAL_DMA_Init+0xb8>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a51      	ldr	r2, [pc, #324]	; (8005368 <HAL_DMA_Init+0x1f0>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d004      	beq.n	8005230 <HAL_DMA_Init+0xb8>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a50      	ldr	r2, [pc, #320]	; (800536c <HAL_DMA_Init+0x1f4>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d101      	bne.n	8005234 <HAL_DMA_Init+0xbc>
 8005230:	2301      	movs	r3, #1
 8005232:	e000      	b.n	8005236 <HAL_DMA_Init+0xbe>
 8005234:	2300      	movs	r3, #0
 8005236:	2b00      	cmp	r3, #0
 8005238:	f000 813c 	beq.w	80054b4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a37      	ldr	r2, [pc, #220]	; (8005330 <HAL_DMA_Init+0x1b8>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d04a      	beq.n	80052ec <HAL_DMA_Init+0x174>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a36      	ldr	r2, [pc, #216]	; (8005334 <HAL_DMA_Init+0x1bc>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d045      	beq.n	80052ec <HAL_DMA_Init+0x174>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a34      	ldr	r2, [pc, #208]	; (8005338 <HAL_DMA_Init+0x1c0>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d040      	beq.n	80052ec <HAL_DMA_Init+0x174>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a33      	ldr	r2, [pc, #204]	; (800533c <HAL_DMA_Init+0x1c4>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d03b      	beq.n	80052ec <HAL_DMA_Init+0x174>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a31      	ldr	r2, [pc, #196]	; (8005340 <HAL_DMA_Init+0x1c8>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d036      	beq.n	80052ec <HAL_DMA_Init+0x174>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a30      	ldr	r2, [pc, #192]	; (8005344 <HAL_DMA_Init+0x1cc>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d031      	beq.n	80052ec <HAL_DMA_Init+0x174>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a2e      	ldr	r2, [pc, #184]	; (8005348 <HAL_DMA_Init+0x1d0>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d02c      	beq.n	80052ec <HAL_DMA_Init+0x174>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a2d      	ldr	r2, [pc, #180]	; (800534c <HAL_DMA_Init+0x1d4>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d027      	beq.n	80052ec <HAL_DMA_Init+0x174>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a2b      	ldr	r2, [pc, #172]	; (8005350 <HAL_DMA_Init+0x1d8>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d022      	beq.n	80052ec <HAL_DMA_Init+0x174>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a2a      	ldr	r2, [pc, #168]	; (8005354 <HAL_DMA_Init+0x1dc>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d01d      	beq.n	80052ec <HAL_DMA_Init+0x174>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a28      	ldr	r2, [pc, #160]	; (8005358 <HAL_DMA_Init+0x1e0>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d018      	beq.n	80052ec <HAL_DMA_Init+0x174>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a27      	ldr	r2, [pc, #156]	; (800535c <HAL_DMA_Init+0x1e4>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d013      	beq.n	80052ec <HAL_DMA_Init+0x174>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a25      	ldr	r2, [pc, #148]	; (8005360 <HAL_DMA_Init+0x1e8>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d00e      	beq.n	80052ec <HAL_DMA_Init+0x174>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a24      	ldr	r2, [pc, #144]	; (8005364 <HAL_DMA_Init+0x1ec>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d009      	beq.n	80052ec <HAL_DMA_Init+0x174>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a22      	ldr	r2, [pc, #136]	; (8005368 <HAL_DMA_Init+0x1f0>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d004      	beq.n	80052ec <HAL_DMA_Init+0x174>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a21      	ldr	r2, [pc, #132]	; (800536c <HAL_DMA_Init+0x1f4>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d108      	bne.n	80052fe <HAL_DMA_Init+0x186>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f022 0201 	bic.w	r2, r2, #1
 80052fa:	601a      	str	r2, [r3, #0]
 80052fc:	e007      	b.n	800530e <HAL_DMA_Init+0x196>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 0201 	bic.w	r2, r2, #1
 800530c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800530e:	e02f      	b.n	8005370 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005310:	f7ff fa32 	bl	8004778 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b05      	cmp	r3, #5
 800531c:	d928      	bls.n	8005370 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2220      	movs	r2, #32
 8005322:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2203      	movs	r2, #3
 8005328:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e2af      	b.n	8005890 <HAL_DMA_Init+0x718>
 8005330:	40020010 	.word	0x40020010
 8005334:	40020028 	.word	0x40020028
 8005338:	40020040 	.word	0x40020040
 800533c:	40020058 	.word	0x40020058
 8005340:	40020070 	.word	0x40020070
 8005344:	40020088 	.word	0x40020088
 8005348:	400200a0 	.word	0x400200a0
 800534c:	400200b8 	.word	0x400200b8
 8005350:	40020410 	.word	0x40020410
 8005354:	40020428 	.word	0x40020428
 8005358:	40020440 	.word	0x40020440
 800535c:	40020458 	.word	0x40020458
 8005360:	40020470 	.word	0x40020470
 8005364:	40020488 	.word	0x40020488
 8005368:	400204a0 	.word	0x400204a0
 800536c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1c8      	bne.n	8005310 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	4b73      	ldr	r3, [pc, #460]	; (8005558 <HAL_DMA_Init+0x3e0>)
 800538a:	4013      	ands	r3, r2
 800538c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005396:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053a2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053ae:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c0:	2b04      	cmp	r3, #4
 80053c2:	d107      	bne.n	80053d4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053cc:	4313      	orrs	r3, r2
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	2b28      	cmp	r3, #40	; 0x28
 80053da:	d903      	bls.n	80053e4 <HAL_DMA_Init+0x26c>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	2b2e      	cmp	r3, #46	; 0x2e
 80053e2:	d91f      	bls.n	8005424 <HAL_DMA_Init+0x2ac>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	2b3e      	cmp	r3, #62	; 0x3e
 80053ea:	d903      	bls.n	80053f4 <HAL_DMA_Init+0x27c>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	2b42      	cmp	r3, #66	; 0x42
 80053f2:	d917      	bls.n	8005424 <HAL_DMA_Init+0x2ac>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	2b46      	cmp	r3, #70	; 0x46
 80053fa:	d903      	bls.n	8005404 <HAL_DMA_Init+0x28c>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	2b48      	cmp	r3, #72	; 0x48
 8005402:	d90f      	bls.n	8005424 <HAL_DMA_Init+0x2ac>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	2b4e      	cmp	r3, #78	; 0x4e
 800540a:	d903      	bls.n	8005414 <HAL_DMA_Init+0x29c>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	2b52      	cmp	r3, #82	; 0x52
 8005412:	d907      	bls.n	8005424 <HAL_DMA_Init+0x2ac>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	2b73      	cmp	r3, #115	; 0x73
 800541a:	d905      	bls.n	8005428 <HAL_DMA_Init+0x2b0>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	2b77      	cmp	r3, #119	; 0x77
 8005422:	d801      	bhi.n	8005428 <HAL_DMA_Init+0x2b0>
 8005424:	2301      	movs	r3, #1
 8005426:	e000      	b.n	800542a <HAL_DMA_Init+0x2b2>
 8005428:	2300      	movs	r3, #0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005434:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f023 0307 	bic.w	r3, r3, #7
 800544c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	4313      	orrs	r3, r2
 8005456:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	2b04      	cmp	r3, #4
 800545e:	d117      	bne.n	8005490 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	4313      	orrs	r3, r2
 8005468:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00e      	beq.n	8005490 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f002 fbd6 	bl	8007c24 <DMA_CheckFifoParam>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d008      	beq.n	8005490 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2240      	movs	r2, #64	; 0x40
 8005482:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e1ff      	b.n	8005890 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f002 fb11 	bl	8007ac0 <DMA_CalcBaseAndBitshift>
 800549e:	4603      	mov	r3, r0
 80054a0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054a6:	f003 031f 	and.w	r3, r3, #31
 80054aa:	223f      	movs	r2, #63	; 0x3f
 80054ac:	409a      	lsls	r2, r3
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	609a      	str	r2, [r3, #8]
 80054b2:	e0fe      	b.n	80056b2 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a28      	ldr	r2, [pc, #160]	; (800555c <HAL_DMA_Init+0x3e4>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d04a      	beq.n	8005554 <HAL_DMA_Init+0x3dc>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a27      	ldr	r2, [pc, #156]	; (8005560 <HAL_DMA_Init+0x3e8>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d045      	beq.n	8005554 <HAL_DMA_Init+0x3dc>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a25      	ldr	r2, [pc, #148]	; (8005564 <HAL_DMA_Init+0x3ec>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d040      	beq.n	8005554 <HAL_DMA_Init+0x3dc>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a24      	ldr	r2, [pc, #144]	; (8005568 <HAL_DMA_Init+0x3f0>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d03b      	beq.n	8005554 <HAL_DMA_Init+0x3dc>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a22      	ldr	r2, [pc, #136]	; (800556c <HAL_DMA_Init+0x3f4>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d036      	beq.n	8005554 <HAL_DMA_Init+0x3dc>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a21      	ldr	r2, [pc, #132]	; (8005570 <HAL_DMA_Init+0x3f8>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d031      	beq.n	8005554 <HAL_DMA_Init+0x3dc>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a1f      	ldr	r2, [pc, #124]	; (8005574 <HAL_DMA_Init+0x3fc>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d02c      	beq.n	8005554 <HAL_DMA_Init+0x3dc>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a1e      	ldr	r2, [pc, #120]	; (8005578 <HAL_DMA_Init+0x400>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d027      	beq.n	8005554 <HAL_DMA_Init+0x3dc>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a1c      	ldr	r2, [pc, #112]	; (800557c <HAL_DMA_Init+0x404>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d022      	beq.n	8005554 <HAL_DMA_Init+0x3dc>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a1b      	ldr	r2, [pc, #108]	; (8005580 <HAL_DMA_Init+0x408>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d01d      	beq.n	8005554 <HAL_DMA_Init+0x3dc>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a19      	ldr	r2, [pc, #100]	; (8005584 <HAL_DMA_Init+0x40c>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d018      	beq.n	8005554 <HAL_DMA_Init+0x3dc>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a18      	ldr	r2, [pc, #96]	; (8005588 <HAL_DMA_Init+0x410>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d013      	beq.n	8005554 <HAL_DMA_Init+0x3dc>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a16      	ldr	r2, [pc, #88]	; (800558c <HAL_DMA_Init+0x414>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d00e      	beq.n	8005554 <HAL_DMA_Init+0x3dc>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a15      	ldr	r2, [pc, #84]	; (8005590 <HAL_DMA_Init+0x418>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d009      	beq.n	8005554 <HAL_DMA_Init+0x3dc>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a13      	ldr	r2, [pc, #76]	; (8005594 <HAL_DMA_Init+0x41c>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d004      	beq.n	8005554 <HAL_DMA_Init+0x3dc>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a12      	ldr	r2, [pc, #72]	; (8005598 <HAL_DMA_Init+0x420>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d123      	bne.n	800559c <HAL_DMA_Init+0x424>
 8005554:	2301      	movs	r3, #1
 8005556:	e022      	b.n	800559e <HAL_DMA_Init+0x426>
 8005558:	fe10803f 	.word	0xfe10803f
 800555c:	48022c08 	.word	0x48022c08
 8005560:	48022c1c 	.word	0x48022c1c
 8005564:	48022c30 	.word	0x48022c30
 8005568:	48022c44 	.word	0x48022c44
 800556c:	48022c58 	.word	0x48022c58
 8005570:	48022c6c 	.word	0x48022c6c
 8005574:	48022c80 	.word	0x48022c80
 8005578:	48022c94 	.word	0x48022c94
 800557c:	58025408 	.word	0x58025408
 8005580:	5802541c 	.word	0x5802541c
 8005584:	58025430 	.word	0x58025430
 8005588:	58025444 	.word	0x58025444
 800558c:	58025458 	.word	0x58025458
 8005590:	5802546c 	.word	0x5802546c
 8005594:	58025480 	.word	0x58025480
 8005598:	58025494 	.word	0x58025494
 800559c:	2300      	movs	r3, #0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d07e      	beq.n	80056a0 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a80      	ldr	r2, [pc, #512]	; (80057a8 <HAL_DMA_Init+0x630>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d021      	beq.n	80055f0 <HAL_DMA_Init+0x478>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a7e      	ldr	r2, [pc, #504]	; (80057ac <HAL_DMA_Init+0x634>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d01c      	beq.n	80055f0 <HAL_DMA_Init+0x478>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a7d      	ldr	r2, [pc, #500]	; (80057b0 <HAL_DMA_Init+0x638>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d017      	beq.n	80055f0 <HAL_DMA_Init+0x478>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a7b      	ldr	r2, [pc, #492]	; (80057b4 <HAL_DMA_Init+0x63c>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d012      	beq.n	80055f0 <HAL_DMA_Init+0x478>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a7a      	ldr	r2, [pc, #488]	; (80057b8 <HAL_DMA_Init+0x640>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d00d      	beq.n	80055f0 <HAL_DMA_Init+0x478>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a78      	ldr	r2, [pc, #480]	; (80057bc <HAL_DMA_Init+0x644>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d008      	beq.n	80055f0 <HAL_DMA_Init+0x478>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a77      	ldr	r2, [pc, #476]	; (80057c0 <HAL_DMA_Init+0x648>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d003      	beq.n	80055f0 <HAL_DMA_Init+0x478>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a75      	ldr	r2, [pc, #468]	; (80057c4 <HAL_DMA_Init+0x64c>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2202      	movs	r2, #2
 80055f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	4b6e      	ldr	r3, [pc, #440]	; (80057c8 <HAL_DMA_Init+0x650>)
 800560e:	4013      	ands	r3, r2
 8005610:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	2b40      	cmp	r3, #64	; 0x40
 8005618:	d008      	beq.n	800562c <HAL_DMA_Init+0x4b4>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	2b80      	cmp	r3, #128	; 0x80
 8005620:	d102      	bne.n	8005628 <HAL_DMA_Init+0x4b0>
 8005622:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005626:	e002      	b.n	800562e <HAL_DMA_Init+0x4b6>
 8005628:	2300      	movs	r3, #0
 800562a:	e000      	b.n	800562e <HAL_DMA_Init+0x4b6>
 800562c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	68d2      	ldr	r2, [r2, #12]
 8005632:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005634:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800563c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005644:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800564c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005654:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800565c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	4313      	orrs	r3, r2
 8005662:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	461a      	mov	r2, r3
 8005672:	4b56      	ldr	r3, [pc, #344]	; (80057cc <HAL_DMA_Init+0x654>)
 8005674:	4413      	add	r3, r2
 8005676:	4a56      	ldr	r2, [pc, #344]	; (80057d0 <HAL_DMA_Init+0x658>)
 8005678:	fba2 2303 	umull	r2, r3, r2, r3
 800567c:	091b      	lsrs	r3, r3, #4
 800567e:	009a      	lsls	r2, r3, #2
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f002 fa1b 	bl	8007ac0 <DMA_CalcBaseAndBitshift>
 800568a:	4603      	mov	r3, r0
 800568c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005692:	f003 031f 	and.w	r3, r3, #31
 8005696:	2201      	movs	r2, #1
 8005698:	409a      	lsls	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	605a      	str	r2, [r3, #4]
 800569e:	e008      	b.n	80056b2 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2240      	movs	r2, #64	; 0x40
 80056a4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2203      	movs	r2, #3
 80056aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e0ee      	b.n	8005890 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a47      	ldr	r2, [pc, #284]	; (80057d4 <HAL_DMA_Init+0x65c>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d072      	beq.n	80057a2 <HAL_DMA_Init+0x62a>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a45      	ldr	r2, [pc, #276]	; (80057d8 <HAL_DMA_Init+0x660>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d06d      	beq.n	80057a2 <HAL_DMA_Init+0x62a>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a44      	ldr	r2, [pc, #272]	; (80057dc <HAL_DMA_Init+0x664>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d068      	beq.n	80057a2 <HAL_DMA_Init+0x62a>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a42      	ldr	r2, [pc, #264]	; (80057e0 <HAL_DMA_Init+0x668>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d063      	beq.n	80057a2 <HAL_DMA_Init+0x62a>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a41      	ldr	r2, [pc, #260]	; (80057e4 <HAL_DMA_Init+0x66c>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d05e      	beq.n	80057a2 <HAL_DMA_Init+0x62a>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a3f      	ldr	r2, [pc, #252]	; (80057e8 <HAL_DMA_Init+0x670>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d059      	beq.n	80057a2 <HAL_DMA_Init+0x62a>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a3e      	ldr	r2, [pc, #248]	; (80057ec <HAL_DMA_Init+0x674>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d054      	beq.n	80057a2 <HAL_DMA_Init+0x62a>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a3c      	ldr	r2, [pc, #240]	; (80057f0 <HAL_DMA_Init+0x678>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d04f      	beq.n	80057a2 <HAL_DMA_Init+0x62a>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a3b      	ldr	r2, [pc, #236]	; (80057f4 <HAL_DMA_Init+0x67c>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d04a      	beq.n	80057a2 <HAL_DMA_Init+0x62a>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a39      	ldr	r2, [pc, #228]	; (80057f8 <HAL_DMA_Init+0x680>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d045      	beq.n	80057a2 <HAL_DMA_Init+0x62a>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a38      	ldr	r2, [pc, #224]	; (80057fc <HAL_DMA_Init+0x684>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d040      	beq.n	80057a2 <HAL_DMA_Init+0x62a>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a36      	ldr	r2, [pc, #216]	; (8005800 <HAL_DMA_Init+0x688>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d03b      	beq.n	80057a2 <HAL_DMA_Init+0x62a>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a35      	ldr	r2, [pc, #212]	; (8005804 <HAL_DMA_Init+0x68c>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d036      	beq.n	80057a2 <HAL_DMA_Init+0x62a>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a33      	ldr	r2, [pc, #204]	; (8005808 <HAL_DMA_Init+0x690>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d031      	beq.n	80057a2 <HAL_DMA_Init+0x62a>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a32      	ldr	r2, [pc, #200]	; (800580c <HAL_DMA_Init+0x694>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d02c      	beq.n	80057a2 <HAL_DMA_Init+0x62a>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a30      	ldr	r2, [pc, #192]	; (8005810 <HAL_DMA_Init+0x698>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d027      	beq.n	80057a2 <HAL_DMA_Init+0x62a>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a14      	ldr	r2, [pc, #80]	; (80057a8 <HAL_DMA_Init+0x630>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d022      	beq.n	80057a2 <HAL_DMA_Init+0x62a>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a12      	ldr	r2, [pc, #72]	; (80057ac <HAL_DMA_Init+0x634>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d01d      	beq.n	80057a2 <HAL_DMA_Init+0x62a>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a11      	ldr	r2, [pc, #68]	; (80057b0 <HAL_DMA_Init+0x638>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d018      	beq.n	80057a2 <HAL_DMA_Init+0x62a>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a0f      	ldr	r2, [pc, #60]	; (80057b4 <HAL_DMA_Init+0x63c>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d013      	beq.n	80057a2 <HAL_DMA_Init+0x62a>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a0e      	ldr	r2, [pc, #56]	; (80057b8 <HAL_DMA_Init+0x640>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d00e      	beq.n	80057a2 <HAL_DMA_Init+0x62a>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a0c      	ldr	r2, [pc, #48]	; (80057bc <HAL_DMA_Init+0x644>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d009      	beq.n	80057a2 <HAL_DMA_Init+0x62a>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a0b      	ldr	r2, [pc, #44]	; (80057c0 <HAL_DMA_Init+0x648>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d004      	beq.n	80057a2 <HAL_DMA_Init+0x62a>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a09      	ldr	r2, [pc, #36]	; (80057c4 <HAL_DMA_Init+0x64c>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d138      	bne.n	8005814 <HAL_DMA_Init+0x69c>
 80057a2:	2301      	movs	r3, #1
 80057a4:	e037      	b.n	8005816 <HAL_DMA_Init+0x69e>
 80057a6:	bf00      	nop
 80057a8:	58025408 	.word	0x58025408
 80057ac:	5802541c 	.word	0x5802541c
 80057b0:	58025430 	.word	0x58025430
 80057b4:	58025444 	.word	0x58025444
 80057b8:	58025458 	.word	0x58025458
 80057bc:	5802546c 	.word	0x5802546c
 80057c0:	58025480 	.word	0x58025480
 80057c4:	58025494 	.word	0x58025494
 80057c8:	fffe000f 	.word	0xfffe000f
 80057cc:	a7fdabf8 	.word	0xa7fdabf8
 80057d0:	cccccccd 	.word	0xcccccccd
 80057d4:	40020010 	.word	0x40020010
 80057d8:	40020028 	.word	0x40020028
 80057dc:	40020040 	.word	0x40020040
 80057e0:	40020058 	.word	0x40020058
 80057e4:	40020070 	.word	0x40020070
 80057e8:	40020088 	.word	0x40020088
 80057ec:	400200a0 	.word	0x400200a0
 80057f0:	400200b8 	.word	0x400200b8
 80057f4:	40020410 	.word	0x40020410
 80057f8:	40020428 	.word	0x40020428
 80057fc:	40020440 	.word	0x40020440
 8005800:	40020458 	.word	0x40020458
 8005804:	40020470 	.word	0x40020470
 8005808:	40020488 	.word	0x40020488
 800580c:	400204a0 	.word	0x400204a0
 8005810:	400204b8 	.word	0x400204b8
 8005814:	2300      	movs	r3, #0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d032      	beq.n	8005880 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f002 fa7e 	bl	8007d1c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	2b80      	cmp	r3, #128	; 0x80
 8005826:	d102      	bne.n	800582e <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685a      	ldr	r2, [r3, #4]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005836:	b2d2      	uxtb	r2, r2
 8005838:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005842:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d010      	beq.n	800586e <HAL_DMA_Init+0x6f6>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	2b08      	cmp	r3, #8
 8005852:	d80c      	bhi.n	800586e <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f002 fafb 	bl	8007e50 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800585e:	2200      	movs	r2, #0
 8005860:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800586a:	605a      	str	r2, [r3, #4]
 800586c:	e008      	b.n	8005880 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3718      	adds	r7, #24
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b086      	sub	sp, #24
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
 80058a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058a6:	2300      	movs	r3, #0
 80058a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d101      	bne.n	80058b4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e226      	b.n	8005d02 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d101      	bne.n	80058c2 <HAL_DMA_Start_IT+0x2a>
 80058be:	2302      	movs	r3, #2
 80058c0:	e21f      	b.n	8005d02 <HAL_DMA_Start_IT+0x46a>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	f040 820a 	bne.w	8005cec <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2202      	movs	r2, #2
 80058dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a68      	ldr	r2, [pc, #416]	; (8005a8c <HAL_DMA_Start_IT+0x1f4>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d04a      	beq.n	8005986 <HAL_DMA_Start_IT+0xee>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a66      	ldr	r2, [pc, #408]	; (8005a90 <HAL_DMA_Start_IT+0x1f8>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d045      	beq.n	8005986 <HAL_DMA_Start_IT+0xee>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a65      	ldr	r2, [pc, #404]	; (8005a94 <HAL_DMA_Start_IT+0x1fc>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d040      	beq.n	8005986 <HAL_DMA_Start_IT+0xee>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a63      	ldr	r2, [pc, #396]	; (8005a98 <HAL_DMA_Start_IT+0x200>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d03b      	beq.n	8005986 <HAL_DMA_Start_IT+0xee>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a62      	ldr	r2, [pc, #392]	; (8005a9c <HAL_DMA_Start_IT+0x204>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d036      	beq.n	8005986 <HAL_DMA_Start_IT+0xee>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a60      	ldr	r2, [pc, #384]	; (8005aa0 <HAL_DMA_Start_IT+0x208>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d031      	beq.n	8005986 <HAL_DMA_Start_IT+0xee>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a5f      	ldr	r2, [pc, #380]	; (8005aa4 <HAL_DMA_Start_IT+0x20c>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d02c      	beq.n	8005986 <HAL_DMA_Start_IT+0xee>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a5d      	ldr	r2, [pc, #372]	; (8005aa8 <HAL_DMA_Start_IT+0x210>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d027      	beq.n	8005986 <HAL_DMA_Start_IT+0xee>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a5c      	ldr	r2, [pc, #368]	; (8005aac <HAL_DMA_Start_IT+0x214>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d022      	beq.n	8005986 <HAL_DMA_Start_IT+0xee>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a5a      	ldr	r2, [pc, #360]	; (8005ab0 <HAL_DMA_Start_IT+0x218>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d01d      	beq.n	8005986 <HAL_DMA_Start_IT+0xee>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a59      	ldr	r2, [pc, #356]	; (8005ab4 <HAL_DMA_Start_IT+0x21c>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d018      	beq.n	8005986 <HAL_DMA_Start_IT+0xee>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a57      	ldr	r2, [pc, #348]	; (8005ab8 <HAL_DMA_Start_IT+0x220>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d013      	beq.n	8005986 <HAL_DMA_Start_IT+0xee>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a56      	ldr	r2, [pc, #344]	; (8005abc <HAL_DMA_Start_IT+0x224>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d00e      	beq.n	8005986 <HAL_DMA_Start_IT+0xee>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a54      	ldr	r2, [pc, #336]	; (8005ac0 <HAL_DMA_Start_IT+0x228>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d009      	beq.n	8005986 <HAL_DMA_Start_IT+0xee>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a53      	ldr	r2, [pc, #332]	; (8005ac4 <HAL_DMA_Start_IT+0x22c>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d004      	beq.n	8005986 <HAL_DMA_Start_IT+0xee>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a51      	ldr	r2, [pc, #324]	; (8005ac8 <HAL_DMA_Start_IT+0x230>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d108      	bne.n	8005998 <HAL_DMA_Start_IT+0x100>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f022 0201 	bic.w	r2, r2, #1
 8005994:	601a      	str	r2, [r3, #0]
 8005996:	e007      	b.n	80059a8 <HAL_DMA_Start_IT+0x110>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f022 0201 	bic.w	r2, r2, #1
 80059a6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	68b9      	ldr	r1, [r7, #8]
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f001 fea2 	bl	80076f8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a34      	ldr	r2, [pc, #208]	; (8005a8c <HAL_DMA_Start_IT+0x1f4>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d04a      	beq.n	8005a54 <HAL_DMA_Start_IT+0x1bc>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a33      	ldr	r2, [pc, #204]	; (8005a90 <HAL_DMA_Start_IT+0x1f8>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d045      	beq.n	8005a54 <HAL_DMA_Start_IT+0x1bc>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a31      	ldr	r2, [pc, #196]	; (8005a94 <HAL_DMA_Start_IT+0x1fc>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d040      	beq.n	8005a54 <HAL_DMA_Start_IT+0x1bc>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a30      	ldr	r2, [pc, #192]	; (8005a98 <HAL_DMA_Start_IT+0x200>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d03b      	beq.n	8005a54 <HAL_DMA_Start_IT+0x1bc>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a2e      	ldr	r2, [pc, #184]	; (8005a9c <HAL_DMA_Start_IT+0x204>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d036      	beq.n	8005a54 <HAL_DMA_Start_IT+0x1bc>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a2d      	ldr	r2, [pc, #180]	; (8005aa0 <HAL_DMA_Start_IT+0x208>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d031      	beq.n	8005a54 <HAL_DMA_Start_IT+0x1bc>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a2b      	ldr	r2, [pc, #172]	; (8005aa4 <HAL_DMA_Start_IT+0x20c>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d02c      	beq.n	8005a54 <HAL_DMA_Start_IT+0x1bc>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a2a      	ldr	r2, [pc, #168]	; (8005aa8 <HAL_DMA_Start_IT+0x210>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d027      	beq.n	8005a54 <HAL_DMA_Start_IT+0x1bc>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a28      	ldr	r2, [pc, #160]	; (8005aac <HAL_DMA_Start_IT+0x214>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d022      	beq.n	8005a54 <HAL_DMA_Start_IT+0x1bc>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a27      	ldr	r2, [pc, #156]	; (8005ab0 <HAL_DMA_Start_IT+0x218>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d01d      	beq.n	8005a54 <HAL_DMA_Start_IT+0x1bc>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a25      	ldr	r2, [pc, #148]	; (8005ab4 <HAL_DMA_Start_IT+0x21c>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d018      	beq.n	8005a54 <HAL_DMA_Start_IT+0x1bc>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a24      	ldr	r2, [pc, #144]	; (8005ab8 <HAL_DMA_Start_IT+0x220>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d013      	beq.n	8005a54 <HAL_DMA_Start_IT+0x1bc>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a22      	ldr	r2, [pc, #136]	; (8005abc <HAL_DMA_Start_IT+0x224>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d00e      	beq.n	8005a54 <HAL_DMA_Start_IT+0x1bc>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a21      	ldr	r2, [pc, #132]	; (8005ac0 <HAL_DMA_Start_IT+0x228>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d009      	beq.n	8005a54 <HAL_DMA_Start_IT+0x1bc>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a1f      	ldr	r2, [pc, #124]	; (8005ac4 <HAL_DMA_Start_IT+0x22c>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d004      	beq.n	8005a54 <HAL_DMA_Start_IT+0x1bc>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a1e      	ldr	r2, [pc, #120]	; (8005ac8 <HAL_DMA_Start_IT+0x230>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d101      	bne.n	8005a58 <HAL_DMA_Start_IT+0x1c0>
 8005a54:	2301      	movs	r3, #1
 8005a56:	e000      	b.n	8005a5a <HAL_DMA_Start_IT+0x1c2>
 8005a58:	2300      	movs	r3, #0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d036      	beq.n	8005acc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f023 021e 	bic.w	r2, r3, #30
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f042 0216 	orr.w	r2, r2, #22
 8005a70:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d03e      	beq.n	8005af8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f042 0208 	orr.w	r2, r2, #8
 8005a88:	601a      	str	r2, [r3, #0]
 8005a8a:	e035      	b.n	8005af8 <HAL_DMA_Start_IT+0x260>
 8005a8c:	40020010 	.word	0x40020010
 8005a90:	40020028 	.word	0x40020028
 8005a94:	40020040 	.word	0x40020040
 8005a98:	40020058 	.word	0x40020058
 8005a9c:	40020070 	.word	0x40020070
 8005aa0:	40020088 	.word	0x40020088
 8005aa4:	400200a0 	.word	0x400200a0
 8005aa8:	400200b8 	.word	0x400200b8
 8005aac:	40020410 	.word	0x40020410
 8005ab0:	40020428 	.word	0x40020428
 8005ab4:	40020440 	.word	0x40020440
 8005ab8:	40020458 	.word	0x40020458
 8005abc:	40020470 	.word	0x40020470
 8005ac0:	40020488 	.word	0x40020488
 8005ac4:	400204a0 	.word	0x400204a0
 8005ac8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f023 020e 	bic.w	r2, r3, #14
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f042 020a 	orr.w	r2, r2, #10
 8005ade:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d007      	beq.n	8005af8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f042 0204 	orr.w	r2, r2, #4
 8005af6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a83      	ldr	r2, [pc, #524]	; (8005d0c <HAL_DMA_Start_IT+0x474>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d072      	beq.n	8005be8 <HAL_DMA_Start_IT+0x350>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a82      	ldr	r2, [pc, #520]	; (8005d10 <HAL_DMA_Start_IT+0x478>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d06d      	beq.n	8005be8 <HAL_DMA_Start_IT+0x350>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a80      	ldr	r2, [pc, #512]	; (8005d14 <HAL_DMA_Start_IT+0x47c>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d068      	beq.n	8005be8 <HAL_DMA_Start_IT+0x350>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a7f      	ldr	r2, [pc, #508]	; (8005d18 <HAL_DMA_Start_IT+0x480>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d063      	beq.n	8005be8 <HAL_DMA_Start_IT+0x350>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a7d      	ldr	r2, [pc, #500]	; (8005d1c <HAL_DMA_Start_IT+0x484>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d05e      	beq.n	8005be8 <HAL_DMA_Start_IT+0x350>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a7c      	ldr	r2, [pc, #496]	; (8005d20 <HAL_DMA_Start_IT+0x488>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d059      	beq.n	8005be8 <HAL_DMA_Start_IT+0x350>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a7a      	ldr	r2, [pc, #488]	; (8005d24 <HAL_DMA_Start_IT+0x48c>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d054      	beq.n	8005be8 <HAL_DMA_Start_IT+0x350>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a79      	ldr	r2, [pc, #484]	; (8005d28 <HAL_DMA_Start_IT+0x490>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d04f      	beq.n	8005be8 <HAL_DMA_Start_IT+0x350>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a77      	ldr	r2, [pc, #476]	; (8005d2c <HAL_DMA_Start_IT+0x494>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d04a      	beq.n	8005be8 <HAL_DMA_Start_IT+0x350>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a76      	ldr	r2, [pc, #472]	; (8005d30 <HAL_DMA_Start_IT+0x498>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d045      	beq.n	8005be8 <HAL_DMA_Start_IT+0x350>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a74      	ldr	r2, [pc, #464]	; (8005d34 <HAL_DMA_Start_IT+0x49c>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d040      	beq.n	8005be8 <HAL_DMA_Start_IT+0x350>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a73      	ldr	r2, [pc, #460]	; (8005d38 <HAL_DMA_Start_IT+0x4a0>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d03b      	beq.n	8005be8 <HAL_DMA_Start_IT+0x350>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a71      	ldr	r2, [pc, #452]	; (8005d3c <HAL_DMA_Start_IT+0x4a4>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d036      	beq.n	8005be8 <HAL_DMA_Start_IT+0x350>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a70      	ldr	r2, [pc, #448]	; (8005d40 <HAL_DMA_Start_IT+0x4a8>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d031      	beq.n	8005be8 <HAL_DMA_Start_IT+0x350>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a6e      	ldr	r2, [pc, #440]	; (8005d44 <HAL_DMA_Start_IT+0x4ac>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d02c      	beq.n	8005be8 <HAL_DMA_Start_IT+0x350>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a6d      	ldr	r2, [pc, #436]	; (8005d48 <HAL_DMA_Start_IT+0x4b0>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d027      	beq.n	8005be8 <HAL_DMA_Start_IT+0x350>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a6b      	ldr	r2, [pc, #428]	; (8005d4c <HAL_DMA_Start_IT+0x4b4>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d022      	beq.n	8005be8 <HAL_DMA_Start_IT+0x350>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a6a      	ldr	r2, [pc, #424]	; (8005d50 <HAL_DMA_Start_IT+0x4b8>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d01d      	beq.n	8005be8 <HAL_DMA_Start_IT+0x350>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a68      	ldr	r2, [pc, #416]	; (8005d54 <HAL_DMA_Start_IT+0x4bc>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d018      	beq.n	8005be8 <HAL_DMA_Start_IT+0x350>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a67      	ldr	r2, [pc, #412]	; (8005d58 <HAL_DMA_Start_IT+0x4c0>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d013      	beq.n	8005be8 <HAL_DMA_Start_IT+0x350>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a65      	ldr	r2, [pc, #404]	; (8005d5c <HAL_DMA_Start_IT+0x4c4>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d00e      	beq.n	8005be8 <HAL_DMA_Start_IT+0x350>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a64      	ldr	r2, [pc, #400]	; (8005d60 <HAL_DMA_Start_IT+0x4c8>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d009      	beq.n	8005be8 <HAL_DMA_Start_IT+0x350>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a62      	ldr	r2, [pc, #392]	; (8005d64 <HAL_DMA_Start_IT+0x4cc>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d004      	beq.n	8005be8 <HAL_DMA_Start_IT+0x350>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a61      	ldr	r2, [pc, #388]	; (8005d68 <HAL_DMA_Start_IT+0x4d0>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d101      	bne.n	8005bec <HAL_DMA_Start_IT+0x354>
 8005be8:	2301      	movs	r3, #1
 8005bea:	e000      	b.n	8005bee <HAL_DMA_Start_IT+0x356>
 8005bec:	2300      	movs	r3, #0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d01a      	beq.n	8005c28 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d007      	beq.n	8005c10 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c0e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d007      	beq.n	8005c28 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c26:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a37      	ldr	r2, [pc, #220]	; (8005d0c <HAL_DMA_Start_IT+0x474>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d04a      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x430>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a36      	ldr	r2, [pc, #216]	; (8005d10 <HAL_DMA_Start_IT+0x478>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d045      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x430>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a34      	ldr	r2, [pc, #208]	; (8005d14 <HAL_DMA_Start_IT+0x47c>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d040      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x430>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a33      	ldr	r2, [pc, #204]	; (8005d18 <HAL_DMA_Start_IT+0x480>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d03b      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x430>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a31      	ldr	r2, [pc, #196]	; (8005d1c <HAL_DMA_Start_IT+0x484>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d036      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x430>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a30      	ldr	r2, [pc, #192]	; (8005d20 <HAL_DMA_Start_IT+0x488>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d031      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x430>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a2e      	ldr	r2, [pc, #184]	; (8005d24 <HAL_DMA_Start_IT+0x48c>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d02c      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x430>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a2d      	ldr	r2, [pc, #180]	; (8005d28 <HAL_DMA_Start_IT+0x490>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d027      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x430>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a2b      	ldr	r2, [pc, #172]	; (8005d2c <HAL_DMA_Start_IT+0x494>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d022      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x430>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a2a      	ldr	r2, [pc, #168]	; (8005d30 <HAL_DMA_Start_IT+0x498>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d01d      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x430>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a28      	ldr	r2, [pc, #160]	; (8005d34 <HAL_DMA_Start_IT+0x49c>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d018      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x430>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a27      	ldr	r2, [pc, #156]	; (8005d38 <HAL_DMA_Start_IT+0x4a0>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d013      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x430>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a25      	ldr	r2, [pc, #148]	; (8005d3c <HAL_DMA_Start_IT+0x4a4>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d00e      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x430>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a24      	ldr	r2, [pc, #144]	; (8005d40 <HAL_DMA_Start_IT+0x4a8>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d009      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x430>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a22      	ldr	r2, [pc, #136]	; (8005d44 <HAL_DMA_Start_IT+0x4ac>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d004      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x430>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a21      	ldr	r2, [pc, #132]	; (8005d48 <HAL_DMA_Start_IT+0x4b0>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d108      	bne.n	8005cda <HAL_DMA_Start_IT+0x442>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f042 0201 	orr.w	r2, r2, #1
 8005cd6:	601a      	str	r2, [r3, #0]
 8005cd8:	e012      	b.n	8005d00 <HAL_DMA_Start_IT+0x468>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f042 0201 	orr.w	r2, r2, #1
 8005ce8:	601a      	str	r2, [r3, #0]
 8005cea:	e009      	b.n	8005d00 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cf2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3718      	adds	r7, #24
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	40020010 	.word	0x40020010
 8005d10:	40020028 	.word	0x40020028
 8005d14:	40020040 	.word	0x40020040
 8005d18:	40020058 	.word	0x40020058
 8005d1c:	40020070 	.word	0x40020070
 8005d20:	40020088 	.word	0x40020088
 8005d24:	400200a0 	.word	0x400200a0
 8005d28:	400200b8 	.word	0x400200b8
 8005d2c:	40020410 	.word	0x40020410
 8005d30:	40020428 	.word	0x40020428
 8005d34:	40020440 	.word	0x40020440
 8005d38:	40020458 	.word	0x40020458
 8005d3c:	40020470 	.word	0x40020470
 8005d40:	40020488 	.word	0x40020488
 8005d44:	400204a0 	.word	0x400204a0
 8005d48:	400204b8 	.word	0x400204b8
 8005d4c:	58025408 	.word	0x58025408
 8005d50:	5802541c 	.word	0x5802541c
 8005d54:	58025430 	.word	0x58025430
 8005d58:	58025444 	.word	0x58025444
 8005d5c:	58025458 	.word	0x58025458
 8005d60:	5802546c 	.word	0x5802546c
 8005d64:	58025480 	.word	0x58025480
 8005d68:	58025494 	.word	0x58025494

08005d6c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005d74:	f7fe fd00 	bl	8004778 <HAL_GetTick>
 8005d78:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d101      	bne.n	8005d84 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e2dc      	b.n	800633e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d008      	beq.n	8005da2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2280      	movs	r2, #128	; 0x80
 8005d94:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e2cd      	b.n	800633e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a76      	ldr	r2, [pc, #472]	; (8005f80 <HAL_DMA_Abort+0x214>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d04a      	beq.n	8005e42 <HAL_DMA_Abort+0xd6>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a74      	ldr	r2, [pc, #464]	; (8005f84 <HAL_DMA_Abort+0x218>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d045      	beq.n	8005e42 <HAL_DMA_Abort+0xd6>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a73      	ldr	r2, [pc, #460]	; (8005f88 <HAL_DMA_Abort+0x21c>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d040      	beq.n	8005e42 <HAL_DMA_Abort+0xd6>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a71      	ldr	r2, [pc, #452]	; (8005f8c <HAL_DMA_Abort+0x220>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d03b      	beq.n	8005e42 <HAL_DMA_Abort+0xd6>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a70      	ldr	r2, [pc, #448]	; (8005f90 <HAL_DMA_Abort+0x224>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d036      	beq.n	8005e42 <HAL_DMA_Abort+0xd6>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a6e      	ldr	r2, [pc, #440]	; (8005f94 <HAL_DMA_Abort+0x228>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d031      	beq.n	8005e42 <HAL_DMA_Abort+0xd6>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a6d      	ldr	r2, [pc, #436]	; (8005f98 <HAL_DMA_Abort+0x22c>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d02c      	beq.n	8005e42 <HAL_DMA_Abort+0xd6>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a6b      	ldr	r2, [pc, #428]	; (8005f9c <HAL_DMA_Abort+0x230>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d027      	beq.n	8005e42 <HAL_DMA_Abort+0xd6>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a6a      	ldr	r2, [pc, #424]	; (8005fa0 <HAL_DMA_Abort+0x234>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d022      	beq.n	8005e42 <HAL_DMA_Abort+0xd6>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a68      	ldr	r2, [pc, #416]	; (8005fa4 <HAL_DMA_Abort+0x238>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d01d      	beq.n	8005e42 <HAL_DMA_Abort+0xd6>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a67      	ldr	r2, [pc, #412]	; (8005fa8 <HAL_DMA_Abort+0x23c>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d018      	beq.n	8005e42 <HAL_DMA_Abort+0xd6>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a65      	ldr	r2, [pc, #404]	; (8005fac <HAL_DMA_Abort+0x240>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d013      	beq.n	8005e42 <HAL_DMA_Abort+0xd6>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a64      	ldr	r2, [pc, #400]	; (8005fb0 <HAL_DMA_Abort+0x244>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d00e      	beq.n	8005e42 <HAL_DMA_Abort+0xd6>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a62      	ldr	r2, [pc, #392]	; (8005fb4 <HAL_DMA_Abort+0x248>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d009      	beq.n	8005e42 <HAL_DMA_Abort+0xd6>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a61      	ldr	r2, [pc, #388]	; (8005fb8 <HAL_DMA_Abort+0x24c>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d004      	beq.n	8005e42 <HAL_DMA_Abort+0xd6>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a5f      	ldr	r2, [pc, #380]	; (8005fbc <HAL_DMA_Abort+0x250>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d101      	bne.n	8005e46 <HAL_DMA_Abort+0xda>
 8005e42:	2301      	movs	r3, #1
 8005e44:	e000      	b.n	8005e48 <HAL_DMA_Abort+0xdc>
 8005e46:	2300      	movs	r3, #0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d013      	beq.n	8005e74 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f022 021e 	bic.w	r2, r2, #30
 8005e5a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	695a      	ldr	r2, [r3, #20]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e6a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	617b      	str	r3, [r7, #20]
 8005e72:	e00a      	b.n	8005e8a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f022 020e 	bic.w	r2, r2, #14
 8005e82:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a3c      	ldr	r2, [pc, #240]	; (8005f80 <HAL_DMA_Abort+0x214>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d072      	beq.n	8005f7a <HAL_DMA_Abort+0x20e>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a3a      	ldr	r2, [pc, #232]	; (8005f84 <HAL_DMA_Abort+0x218>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d06d      	beq.n	8005f7a <HAL_DMA_Abort+0x20e>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a39      	ldr	r2, [pc, #228]	; (8005f88 <HAL_DMA_Abort+0x21c>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d068      	beq.n	8005f7a <HAL_DMA_Abort+0x20e>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a37      	ldr	r2, [pc, #220]	; (8005f8c <HAL_DMA_Abort+0x220>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d063      	beq.n	8005f7a <HAL_DMA_Abort+0x20e>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a36      	ldr	r2, [pc, #216]	; (8005f90 <HAL_DMA_Abort+0x224>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d05e      	beq.n	8005f7a <HAL_DMA_Abort+0x20e>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a34      	ldr	r2, [pc, #208]	; (8005f94 <HAL_DMA_Abort+0x228>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d059      	beq.n	8005f7a <HAL_DMA_Abort+0x20e>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a33      	ldr	r2, [pc, #204]	; (8005f98 <HAL_DMA_Abort+0x22c>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d054      	beq.n	8005f7a <HAL_DMA_Abort+0x20e>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a31      	ldr	r2, [pc, #196]	; (8005f9c <HAL_DMA_Abort+0x230>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d04f      	beq.n	8005f7a <HAL_DMA_Abort+0x20e>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a30      	ldr	r2, [pc, #192]	; (8005fa0 <HAL_DMA_Abort+0x234>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d04a      	beq.n	8005f7a <HAL_DMA_Abort+0x20e>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a2e      	ldr	r2, [pc, #184]	; (8005fa4 <HAL_DMA_Abort+0x238>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d045      	beq.n	8005f7a <HAL_DMA_Abort+0x20e>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a2d      	ldr	r2, [pc, #180]	; (8005fa8 <HAL_DMA_Abort+0x23c>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d040      	beq.n	8005f7a <HAL_DMA_Abort+0x20e>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a2b      	ldr	r2, [pc, #172]	; (8005fac <HAL_DMA_Abort+0x240>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d03b      	beq.n	8005f7a <HAL_DMA_Abort+0x20e>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a2a      	ldr	r2, [pc, #168]	; (8005fb0 <HAL_DMA_Abort+0x244>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d036      	beq.n	8005f7a <HAL_DMA_Abort+0x20e>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a28      	ldr	r2, [pc, #160]	; (8005fb4 <HAL_DMA_Abort+0x248>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d031      	beq.n	8005f7a <HAL_DMA_Abort+0x20e>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a27      	ldr	r2, [pc, #156]	; (8005fb8 <HAL_DMA_Abort+0x24c>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d02c      	beq.n	8005f7a <HAL_DMA_Abort+0x20e>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a25      	ldr	r2, [pc, #148]	; (8005fbc <HAL_DMA_Abort+0x250>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d027      	beq.n	8005f7a <HAL_DMA_Abort+0x20e>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a24      	ldr	r2, [pc, #144]	; (8005fc0 <HAL_DMA_Abort+0x254>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d022      	beq.n	8005f7a <HAL_DMA_Abort+0x20e>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a22      	ldr	r2, [pc, #136]	; (8005fc4 <HAL_DMA_Abort+0x258>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d01d      	beq.n	8005f7a <HAL_DMA_Abort+0x20e>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a21      	ldr	r2, [pc, #132]	; (8005fc8 <HAL_DMA_Abort+0x25c>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d018      	beq.n	8005f7a <HAL_DMA_Abort+0x20e>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a1f      	ldr	r2, [pc, #124]	; (8005fcc <HAL_DMA_Abort+0x260>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d013      	beq.n	8005f7a <HAL_DMA_Abort+0x20e>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a1e      	ldr	r2, [pc, #120]	; (8005fd0 <HAL_DMA_Abort+0x264>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d00e      	beq.n	8005f7a <HAL_DMA_Abort+0x20e>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a1c      	ldr	r2, [pc, #112]	; (8005fd4 <HAL_DMA_Abort+0x268>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d009      	beq.n	8005f7a <HAL_DMA_Abort+0x20e>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a1b      	ldr	r2, [pc, #108]	; (8005fd8 <HAL_DMA_Abort+0x26c>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d004      	beq.n	8005f7a <HAL_DMA_Abort+0x20e>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a19      	ldr	r2, [pc, #100]	; (8005fdc <HAL_DMA_Abort+0x270>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d132      	bne.n	8005fe0 <HAL_DMA_Abort+0x274>
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e031      	b.n	8005fe2 <HAL_DMA_Abort+0x276>
 8005f7e:	bf00      	nop
 8005f80:	40020010 	.word	0x40020010
 8005f84:	40020028 	.word	0x40020028
 8005f88:	40020040 	.word	0x40020040
 8005f8c:	40020058 	.word	0x40020058
 8005f90:	40020070 	.word	0x40020070
 8005f94:	40020088 	.word	0x40020088
 8005f98:	400200a0 	.word	0x400200a0
 8005f9c:	400200b8 	.word	0x400200b8
 8005fa0:	40020410 	.word	0x40020410
 8005fa4:	40020428 	.word	0x40020428
 8005fa8:	40020440 	.word	0x40020440
 8005fac:	40020458 	.word	0x40020458
 8005fb0:	40020470 	.word	0x40020470
 8005fb4:	40020488 	.word	0x40020488
 8005fb8:	400204a0 	.word	0x400204a0
 8005fbc:	400204b8 	.word	0x400204b8
 8005fc0:	58025408 	.word	0x58025408
 8005fc4:	5802541c 	.word	0x5802541c
 8005fc8:	58025430 	.word	0x58025430
 8005fcc:	58025444 	.word	0x58025444
 8005fd0:	58025458 	.word	0x58025458
 8005fd4:	5802546c 	.word	0x5802546c
 8005fd8:	58025480 	.word	0x58025480
 8005fdc:	58025494 	.word	0x58025494
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d007      	beq.n	8005ff6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ff0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ff4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a6d      	ldr	r2, [pc, #436]	; (80061b0 <HAL_DMA_Abort+0x444>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d04a      	beq.n	8006096 <HAL_DMA_Abort+0x32a>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a6b      	ldr	r2, [pc, #428]	; (80061b4 <HAL_DMA_Abort+0x448>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d045      	beq.n	8006096 <HAL_DMA_Abort+0x32a>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a6a      	ldr	r2, [pc, #424]	; (80061b8 <HAL_DMA_Abort+0x44c>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d040      	beq.n	8006096 <HAL_DMA_Abort+0x32a>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a68      	ldr	r2, [pc, #416]	; (80061bc <HAL_DMA_Abort+0x450>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d03b      	beq.n	8006096 <HAL_DMA_Abort+0x32a>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a67      	ldr	r2, [pc, #412]	; (80061c0 <HAL_DMA_Abort+0x454>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d036      	beq.n	8006096 <HAL_DMA_Abort+0x32a>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a65      	ldr	r2, [pc, #404]	; (80061c4 <HAL_DMA_Abort+0x458>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d031      	beq.n	8006096 <HAL_DMA_Abort+0x32a>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a64      	ldr	r2, [pc, #400]	; (80061c8 <HAL_DMA_Abort+0x45c>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d02c      	beq.n	8006096 <HAL_DMA_Abort+0x32a>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a62      	ldr	r2, [pc, #392]	; (80061cc <HAL_DMA_Abort+0x460>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d027      	beq.n	8006096 <HAL_DMA_Abort+0x32a>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a61      	ldr	r2, [pc, #388]	; (80061d0 <HAL_DMA_Abort+0x464>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d022      	beq.n	8006096 <HAL_DMA_Abort+0x32a>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a5f      	ldr	r2, [pc, #380]	; (80061d4 <HAL_DMA_Abort+0x468>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d01d      	beq.n	8006096 <HAL_DMA_Abort+0x32a>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a5e      	ldr	r2, [pc, #376]	; (80061d8 <HAL_DMA_Abort+0x46c>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d018      	beq.n	8006096 <HAL_DMA_Abort+0x32a>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a5c      	ldr	r2, [pc, #368]	; (80061dc <HAL_DMA_Abort+0x470>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d013      	beq.n	8006096 <HAL_DMA_Abort+0x32a>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a5b      	ldr	r2, [pc, #364]	; (80061e0 <HAL_DMA_Abort+0x474>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d00e      	beq.n	8006096 <HAL_DMA_Abort+0x32a>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a59      	ldr	r2, [pc, #356]	; (80061e4 <HAL_DMA_Abort+0x478>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d009      	beq.n	8006096 <HAL_DMA_Abort+0x32a>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a58      	ldr	r2, [pc, #352]	; (80061e8 <HAL_DMA_Abort+0x47c>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d004      	beq.n	8006096 <HAL_DMA_Abort+0x32a>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a56      	ldr	r2, [pc, #344]	; (80061ec <HAL_DMA_Abort+0x480>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d108      	bne.n	80060a8 <HAL_DMA_Abort+0x33c>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f022 0201 	bic.w	r2, r2, #1
 80060a4:	601a      	str	r2, [r3, #0]
 80060a6:	e007      	b.n	80060b8 <HAL_DMA_Abort+0x34c>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f022 0201 	bic.w	r2, r2, #1
 80060b6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80060b8:	e013      	b.n	80060e2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80060ba:	f7fe fb5d 	bl	8004778 <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	2b05      	cmp	r3, #5
 80060c6:	d90c      	bls.n	80060e2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2220      	movs	r2, #32
 80060cc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2203      	movs	r2, #3
 80060d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e12d      	b.n	800633e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1e5      	bne.n	80060ba <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a2f      	ldr	r2, [pc, #188]	; (80061b0 <HAL_DMA_Abort+0x444>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d04a      	beq.n	800618e <HAL_DMA_Abort+0x422>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a2d      	ldr	r2, [pc, #180]	; (80061b4 <HAL_DMA_Abort+0x448>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d045      	beq.n	800618e <HAL_DMA_Abort+0x422>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a2c      	ldr	r2, [pc, #176]	; (80061b8 <HAL_DMA_Abort+0x44c>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d040      	beq.n	800618e <HAL_DMA_Abort+0x422>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a2a      	ldr	r2, [pc, #168]	; (80061bc <HAL_DMA_Abort+0x450>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d03b      	beq.n	800618e <HAL_DMA_Abort+0x422>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a29      	ldr	r2, [pc, #164]	; (80061c0 <HAL_DMA_Abort+0x454>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d036      	beq.n	800618e <HAL_DMA_Abort+0x422>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a27      	ldr	r2, [pc, #156]	; (80061c4 <HAL_DMA_Abort+0x458>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d031      	beq.n	800618e <HAL_DMA_Abort+0x422>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a26      	ldr	r2, [pc, #152]	; (80061c8 <HAL_DMA_Abort+0x45c>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d02c      	beq.n	800618e <HAL_DMA_Abort+0x422>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a24      	ldr	r2, [pc, #144]	; (80061cc <HAL_DMA_Abort+0x460>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d027      	beq.n	800618e <HAL_DMA_Abort+0x422>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a23      	ldr	r2, [pc, #140]	; (80061d0 <HAL_DMA_Abort+0x464>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d022      	beq.n	800618e <HAL_DMA_Abort+0x422>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a21      	ldr	r2, [pc, #132]	; (80061d4 <HAL_DMA_Abort+0x468>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d01d      	beq.n	800618e <HAL_DMA_Abort+0x422>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a20      	ldr	r2, [pc, #128]	; (80061d8 <HAL_DMA_Abort+0x46c>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d018      	beq.n	800618e <HAL_DMA_Abort+0x422>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a1e      	ldr	r2, [pc, #120]	; (80061dc <HAL_DMA_Abort+0x470>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d013      	beq.n	800618e <HAL_DMA_Abort+0x422>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a1d      	ldr	r2, [pc, #116]	; (80061e0 <HAL_DMA_Abort+0x474>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d00e      	beq.n	800618e <HAL_DMA_Abort+0x422>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a1b      	ldr	r2, [pc, #108]	; (80061e4 <HAL_DMA_Abort+0x478>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d009      	beq.n	800618e <HAL_DMA_Abort+0x422>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a1a      	ldr	r2, [pc, #104]	; (80061e8 <HAL_DMA_Abort+0x47c>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d004      	beq.n	800618e <HAL_DMA_Abort+0x422>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a18      	ldr	r2, [pc, #96]	; (80061ec <HAL_DMA_Abort+0x480>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d101      	bne.n	8006192 <HAL_DMA_Abort+0x426>
 800618e:	2301      	movs	r3, #1
 8006190:	e000      	b.n	8006194 <HAL_DMA_Abort+0x428>
 8006192:	2300      	movs	r3, #0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d02b      	beq.n	80061f0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800619c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061a2:	f003 031f 	and.w	r3, r3, #31
 80061a6:	223f      	movs	r2, #63	; 0x3f
 80061a8:	409a      	lsls	r2, r3
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	609a      	str	r2, [r3, #8]
 80061ae:	e02a      	b.n	8006206 <HAL_DMA_Abort+0x49a>
 80061b0:	40020010 	.word	0x40020010
 80061b4:	40020028 	.word	0x40020028
 80061b8:	40020040 	.word	0x40020040
 80061bc:	40020058 	.word	0x40020058
 80061c0:	40020070 	.word	0x40020070
 80061c4:	40020088 	.word	0x40020088
 80061c8:	400200a0 	.word	0x400200a0
 80061cc:	400200b8 	.word	0x400200b8
 80061d0:	40020410 	.word	0x40020410
 80061d4:	40020428 	.word	0x40020428
 80061d8:	40020440 	.word	0x40020440
 80061dc:	40020458 	.word	0x40020458
 80061e0:	40020470 	.word	0x40020470
 80061e4:	40020488 	.word	0x40020488
 80061e8:	400204a0 	.word	0x400204a0
 80061ec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061f4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061fa:	f003 031f 	and.w	r3, r3, #31
 80061fe:	2201      	movs	r2, #1
 8006200:	409a      	lsls	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a4f      	ldr	r2, [pc, #316]	; (8006348 <HAL_DMA_Abort+0x5dc>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d072      	beq.n	80062f6 <HAL_DMA_Abort+0x58a>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a4d      	ldr	r2, [pc, #308]	; (800634c <HAL_DMA_Abort+0x5e0>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d06d      	beq.n	80062f6 <HAL_DMA_Abort+0x58a>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a4c      	ldr	r2, [pc, #304]	; (8006350 <HAL_DMA_Abort+0x5e4>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d068      	beq.n	80062f6 <HAL_DMA_Abort+0x58a>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a4a      	ldr	r2, [pc, #296]	; (8006354 <HAL_DMA_Abort+0x5e8>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d063      	beq.n	80062f6 <HAL_DMA_Abort+0x58a>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a49      	ldr	r2, [pc, #292]	; (8006358 <HAL_DMA_Abort+0x5ec>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d05e      	beq.n	80062f6 <HAL_DMA_Abort+0x58a>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a47      	ldr	r2, [pc, #284]	; (800635c <HAL_DMA_Abort+0x5f0>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d059      	beq.n	80062f6 <HAL_DMA_Abort+0x58a>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a46      	ldr	r2, [pc, #280]	; (8006360 <HAL_DMA_Abort+0x5f4>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d054      	beq.n	80062f6 <HAL_DMA_Abort+0x58a>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a44      	ldr	r2, [pc, #272]	; (8006364 <HAL_DMA_Abort+0x5f8>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d04f      	beq.n	80062f6 <HAL_DMA_Abort+0x58a>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a43      	ldr	r2, [pc, #268]	; (8006368 <HAL_DMA_Abort+0x5fc>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d04a      	beq.n	80062f6 <HAL_DMA_Abort+0x58a>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a41      	ldr	r2, [pc, #260]	; (800636c <HAL_DMA_Abort+0x600>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d045      	beq.n	80062f6 <HAL_DMA_Abort+0x58a>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a40      	ldr	r2, [pc, #256]	; (8006370 <HAL_DMA_Abort+0x604>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d040      	beq.n	80062f6 <HAL_DMA_Abort+0x58a>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a3e      	ldr	r2, [pc, #248]	; (8006374 <HAL_DMA_Abort+0x608>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d03b      	beq.n	80062f6 <HAL_DMA_Abort+0x58a>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a3d      	ldr	r2, [pc, #244]	; (8006378 <HAL_DMA_Abort+0x60c>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d036      	beq.n	80062f6 <HAL_DMA_Abort+0x58a>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a3b      	ldr	r2, [pc, #236]	; (800637c <HAL_DMA_Abort+0x610>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d031      	beq.n	80062f6 <HAL_DMA_Abort+0x58a>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a3a      	ldr	r2, [pc, #232]	; (8006380 <HAL_DMA_Abort+0x614>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d02c      	beq.n	80062f6 <HAL_DMA_Abort+0x58a>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a38      	ldr	r2, [pc, #224]	; (8006384 <HAL_DMA_Abort+0x618>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d027      	beq.n	80062f6 <HAL_DMA_Abort+0x58a>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a37      	ldr	r2, [pc, #220]	; (8006388 <HAL_DMA_Abort+0x61c>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d022      	beq.n	80062f6 <HAL_DMA_Abort+0x58a>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a35      	ldr	r2, [pc, #212]	; (800638c <HAL_DMA_Abort+0x620>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d01d      	beq.n	80062f6 <HAL_DMA_Abort+0x58a>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a34      	ldr	r2, [pc, #208]	; (8006390 <HAL_DMA_Abort+0x624>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d018      	beq.n	80062f6 <HAL_DMA_Abort+0x58a>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a32      	ldr	r2, [pc, #200]	; (8006394 <HAL_DMA_Abort+0x628>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d013      	beq.n	80062f6 <HAL_DMA_Abort+0x58a>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a31      	ldr	r2, [pc, #196]	; (8006398 <HAL_DMA_Abort+0x62c>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d00e      	beq.n	80062f6 <HAL_DMA_Abort+0x58a>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a2f      	ldr	r2, [pc, #188]	; (800639c <HAL_DMA_Abort+0x630>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d009      	beq.n	80062f6 <HAL_DMA_Abort+0x58a>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a2e      	ldr	r2, [pc, #184]	; (80063a0 <HAL_DMA_Abort+0x634>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d004      	beq.n	80062f6 <HAL_DMA_Abort+0x58a>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a2c      	ldr	r2, [pc, #176]	; (80063a4 <HAL_DMA_Abort+0x638>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d101      	bne.n	80062fa <HAL_DMA_Abort+0x58e>
 80062f6:	2301      	movs	r3, #1
 80062f8:	e000      	b.n	80062fc <HAL_DMA_Abort+0x590>
 80062fa:	2300      	movs	r3, #0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d015      	beq.n	800632c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006308:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00c      	beq.n	800632c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800631c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006320:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800632a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3718      	adds	r7, #24
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	40020010 	.word	0x40020010
 800634c:	40020028 	.word	0x40020028
 8006350:	40020040 	.word	0x40020040
 8006354:	40020058 	.word	0x40020058
 8006358:	40020070 	.word	0x40020070
 800635c:	40020088 	.word	0x40020088
 8006360:	400200a0 	.word	0x400200a0
 8006364:	400200b8 	.word	0x400200b8
 8006368:	40020410 	.word	0x40020410
 800636c:	40020428 	.word	0x40020428
 8006370:	40020440 	.word	0x40020440
 8006374:	40020458 	.word	0x40020458
 8006378:	40020470 	.word	0x40020470
 800637c:	40020488 	.word	0x40020488
 8006380:	400204a0 	.word	0x400204a0
 8006384:	400204b8 	.word	0x400204b8
 8006388:	58025408 	.word	0x58025408
 800638c:	5802541c 	.word	0x5802541c
 8006390:	58025430 	.word	0x58025430
 8006394:	58025444 	.word	0x58025444
 8006398:	58025458 	.word	0x58025458
 800639c:	5802546c 	.word	0x5802546c
 80063a0:	58025480 	.word	0x58025480
 80063a4:	58025494 	.word	0x58025494

080063a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d101      	bne.n	80063ba <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e237      	b.n	800682a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d004      	beq.n	80063d0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2280      	movs	r2, #128	; 0x80
 80063ca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e22c      	b.n	800682a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a5c      	ldr	r2, [pc, #368]	; (8006548 <HAL_DMA_Abort_IT+0x1a0>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d04a      	beq.n	8006470 <HAL_DMA_Abort_IT+0xc8>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a5b      	ldr	r2, [pc, #364]	; (800654c <HAL_DMA_Abort_IT+0x1a4>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d045      	beq.n	8006470 <HAL_DMA_Abort_IT+0xc8>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a59      	ldr	r2, [pc, #356]	; (8006550 <HAL_DMA_Abort_IT+0x1a8>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d040      	beq.n	8006470 <HAL_DMA_Abort_IT+0xc8>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a58      	ldr	r2, [pc, #352]	; (8006554 <HAL_DMA_Abort_IT+0x1ac>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d03b      	beq.n	8006470 <HAL_DMA_Abort_IT+0xc8>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a56      	ldr	r2, [pc, #344]	; (8006558 <HAL_DMA_Abort_IT+0x1b0>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d036      	beq.n	8006470 <HAL_DMA_Abort_IT+0xc8>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a55      	ldr	r2, [pc, #340]	; (800655c <HAL_DMA_Abort_IT+0x1b4>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d031      	beq.n	8006470 <HAL_DMA_Abort_IT+0xc8>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a53      	ldr	r2, [pc, #332]	; (8006560 <HAL_DMA_Abort_IT+0x1b8>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d02c      	beq.n	8006470 <HAL_DMA_Abort_IT+0xc8>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a52      	ldr	r2, [pc, #328]	; (8006564 <HAL_DMA_Abort_IT+0x1bc>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d027      	beq.n	8006470 <HAL_DMA_Abort_IT+0xc8>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a50      	ldr	r2, [pc, #320]	; (8006568 <HAL_DMA_Abort_IT+0x1c0>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d022      	beq.n	8006470 <HAL_DMA_Abort_IT+0xc8>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a4f      	ldr	r2, [pc, #316]	; (800656c <HAL_DMA_Abort_IT+0x1c4>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d01d      	beq.n	8006470 <HAL_DMA_Abort_IT+0xc8>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a4d      	ldr	r2, [pc, #308]	; (8006570 <HAL_DMA_Abort_IT+0x1c8>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d018      	beq.n	8006470 <HAL_DMA_Abort_IT+0xc8>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a4c      	ldr	r2, [pc, #304]	; (8006574 <HAL_DMA_Abort_IT+0x1cc>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d013      	beq.n	8006470 <HAL_DMA_Abort_IT+0xc8>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a4a      	ldr	r2, [pc, #296]	; (8006578 <HAL_DMA_Abort_IT+0x1d0>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d00e      	beq.n	8006470 <HAL_DMA_Abort_IT+0xc8>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a49      	ldr	r2, [pc, #292]	; (800657c <HAL_DMA_Abort_IT+0x1d4>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d009      	beq.n	8006470 <HAL_DMA_Abort_IT+0xc8>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a47      	ldr	r2, [pc, #284]	; (8006580 <HAL_DMA_Abort_IT+0x1d8>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d004      	beq.n	8006470 <HAL_DMA_Abort_IT+0xc8>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a46      	ldr	r2, [pc, #280]	; (8006584 <HAL_DMA_Abort_IT+0x1dc>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d101      	bne.n	8006474 <HAL_DMA_Abort_IT+0xcc>
 8006470:	2301      	movs	r3, #1
 8006472:	e000      	b.n	8006476 <HAL_DMA_Abort_IT+0xce>
 8006474:	2300      	movs	r3, #0
 8006476:	2b00      	cmp	r3, #0
 8006478:	f000 8086 	beq.w	8006588 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2204      	movs	r2, #4
 8006480:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a2f      	ldr	r2, [pc, #188]	; (8006548 <HAL_DMA_Abort_IT+0x1a0>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d04a      	beq.n	8006524 <HAL_DMA_Abort_IT+0x17c>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a2e      	ldr	r2, [pc, #184]	; (800654c <HAL_DMA_Abort_IT+0x1a4>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d045      	beq.n	8006524 <HAL_DMA_Abort_IT+0x17c>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a2c      	ldr	r2, [pc, #176]	; (8006550 <HAL_DMA_Abort_IT+0x1a8>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d040      	beq.n	8006524 <HAL_DMA_Abort_IT+0x17c>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a2b      	ldr	r2, [pc, #172]	; (8006554 <HAL_DMA_Abort_IT+0x1ac>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d03b      	beq.n	8006524 <HAL_DMA_Abort_IT+0x17c>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a29      	ldr	r2, [pc, #164]	; (8006558 <HAL_DMA_Abort_IT+0x1b0>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d036      	beq.n	8006524 <HAL_DMA_Abort_IT+0x17c>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a28      	ldr	r2, [pc, #160]	; (800655c <HAL_DMA_Abort_IT+0x1b4>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d031      	beq.n	8006524 <HAL_DMA_Abort_IT+0x17c>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a26      	ldr	r2, [pc, #152]	; (8006560 <HAL_DMA_Abort_IT+0x1b8>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d02c      	beq.n	8006524 <HAL_DMA_Abort_IT+0x17c>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a25      	ldr	r2, [pc, #148]	; (8006564 <HAL_DMA_Abort_IT+0x1bc>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d027      	beq.n	8006524 <HAL_DMA_Abort_IT+0x17c>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a23      	ldr	r2, [pc, #140]	; (8006568 <HAL_DMA_Abort_IT+0x1c0>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d022      	beq.n	8006524 <HAL_DMA_Abort_IT+0x17c>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a22      	ldr	r2, [pc, #136]	; (800656c <HAL_DMA_Abort_IT+0x1c4>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d01d      	beq.n	8006524 <HAL_DMA_Abort_IT+0x17c>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a20      	ldr	r2, [pc, #128]	; (8006570 <HAL_DMA_Abort_IT+0x1c8>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d018      	beq.n	8006524 <HAL_DMA_Abort_IT+0x17c>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a1f      	ldr	r2, [pc, #124]	; (8006574 <HAL_DMA_Abort_IT+0x1cc>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d013      	beq.n	8006524 <HAL_DMA_Abort_IT+0x17c>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a1d      	ldr	r2, [pc, #116]	; (8006578 <HAL_DMA_Abort_IT+0x1d0>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d00e      	beq.n	8006524 <HAL_DMA_Abort_IT+0x17c>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a1c      	ldr	r2, [pc, #112]	; (800657c <HAL_DMA_Abort_IT+0x1d4>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d009      	beq.n	8006524 <HAL_DMA_Abort_IT+0x17c>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a1a      	ldr	r2, [pc, #104]	; (8006580 <HAL_DMA_Abort_IT+0x1d8>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d004      	beq.n	8006524 <HAL_DMA_Abort_IT+0x17c>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a19      	ldr	r2, [pc, #100]	; (8006584 <HAL_DMA_Abort_IT+0x1dc>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d108      	bne.n	8006536 <HAL_DMA_Abort_IT+0x18e>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f022 0201 	bic.w	r2, r2, #1
 8006532:	601a      	str	r2, [r3, #0]
 8006534:	e178      	b.n	8006828 <HAL_DMA_Abort_IT+0x480>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f022 0201 	bic.w	r2, r2, #1
 8006544:	601a      	str	r2, [r3, #0]
 8006546:	e16f      	b.n	8006828 <HAL_DMA_Abort_IT+0x480>
 8006548:	40020010 	.word	0x40020010
 800654c:	40020028 	.word	0x40020028
 8006550:	40020040 	.word	0x40020040
 8006554:	40020058 	.word	0x40020058
 8006558:	40020070 	.word	0x40020070
 800655c:	40020088 	.word	0x40020088
 8006560:	400200a0 	.word	0x400200a0
 8006564:	400200b8 	.word	0x400200b8
 8006568:	40020410 	.word	0x40020410
 800656c:	40020428 	.word	0x40020428
 8006570:	40020440 	.word	0x40020440
 8006574:	40020458 	.word	0x40020458
 8006578:	40020470 	.word	0x40020470
 800657c:	40020488 	.word	0x40020488
 8006580:	400204a0 	.word	0x400204a0
 8006584:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f022 020e 	bic.w	r2, r2, #14
 8006596:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a6c      	ldr	r2, [pc, #432]	; (8006750 <HAL_DMA_Abort_IT+0x3a8>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d04a      	beq.n	8006638 <HAL_DMA_Abort_IT+0x290>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a6b      	ldr	r2, [pc, #428]	; (8006754 <HAL_DMA_Abort_IT+0x3ac>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d045      	beq.n	8006638 <HAL_DMA_Abort_IT+0x290>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a69      	ldr	r2, [pc, #420]	; (8006758 <HAL_DMA_Abort_IT+0x3b0>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d040      	beq.n	8006638 <HAL_DMA_Abort_IT+0x290>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a68      	ldr	r2, [pc, #416]	; (800675c <HAL_DMA_Abort_IT+0x3b4>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d03b      	beq.n	8006638 <HAL_DMA_Abort_IT+0x290>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a66      	ldr	r2, [pc, #408]	; (8006760 <HAL_DMA_Abort_IT+0x3b8>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d036      	beq.n	8006638 <HAL_DMA_Abort_IT+0x290>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a65      	ldr	r2, [pc, #404]	; (8006764 <HAL_DMA_Abort_IT+0x3bc>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d031      	beq.n	8006638 <HAL_DMA_Abort_IT+0x290>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a63      	ldr	r2, [pc, #396]	; (8006768 <HAL_DMA_Abort_IT+0x3c0>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d02c      	beq.n	8006638 <HAL_DMA_Abort_IT+0x290>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a62      	ldr	r2, [pc, #392]	; (800676c <HAL_DMA_Abort_IT+0x3c4>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d027      	beq.n	8006638 <HAL_DMA_Abort_IT+0x290>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a60      	ldr	r2, [pc, #384]	; (8006770 <HAL_DMA_Abort_IT+0x3c8>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d022      	beq.n	8006638 <HAL_DMA_Abort_IT+0x290>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a5f      	ldr	r2, [pc, #380]	; (8006774 <HAL_DMA_Abort_IT+0x3cc>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d01d      	beq.n	8006638 <HAL_DMA_Abort_IT+0x290>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a5d      	ldr	r2, [pc, #372]	; (8006778 <HAL_DMA_Abort_IT+0x3d0>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d018      	beq.n	8006638 <HAL_DMA_Abort_IT+0x290>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a5c      	ldr	r2, [pc, #368]	; (800677c <HAL_DMA_Abort_IT+0x3d4>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d013      	beq.n	8006638 <HAL_DMA_Abort_IT+0x290>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a5a      	ldr	r2, [pc, #360]	; (8006780 <HAL_DMA_Abort_IT+0x3d8>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d00e      	beq.n	8006638 <HAL_DMA_Abort_IT+0x290>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a59      	ldr	r2, [pc, #356]	; (8006784 <HAL_DMA_Abort_IT+0x3dc>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d009      	beq.n	8006638 <HAL_DMA_Abort_IT+0x290>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a57      	ldr	r2, [pc, #348]	; (8006788 <HAL_DMA_Abort_IT+0x3e0>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d004      	beq.n	8006638 <HAL_DMA_Abort_IT+0x290>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a56      	ldr	r2, [pc, #344]	; (800678c <HAL_DMA_Abort_IT+0x3e4>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d108      	bne.n	800664a <HAL_DMA_Abort_IT+0x2a2>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f022 0201 	bic.w	r2, r2, #1
 8006646:	601a      	str	r2, [r3, #0]
 8006648:	e007      	b.n	800665a <HAL_DMA_Abort_IT+0x2b2>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f022 0201 	bic.w	r2, r2, #1
 8006658:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a3c      	ldr	r2, [pc, #240]	; (8006750 <HAL_DMA_Abort_IT+0x3a8>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d072      	beq.n	800674a <HAL_DMA_Abort_IT+0x3a2>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a3a      	ldr	r2, [pc, #232]	; (8006754 <HAL_DMA_Abort_IT+0x3ac>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d06d      	beq.n	800674a <HAL_DMA_Abort_IT+0x3a2>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a39      	ldr	r2, [pc, #228]	; (8006758 <HAL_DMA_Abort_IT+0x3b0>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d068      	beq.n	800674a <HAL_DMA_Abort_IT+0x3a2>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a37      	ldr	r2, [pc, #220]	; (800675c <HAL_DMA_Abort_IT+0x3b4>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d063      	beq.n	800674a <HAL_DMA_Abort_IT+0x3a2>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a36      	ldr	r2, [pc, #216]	; (8006760 <HAL_DMA_Abort_IT+0x3b8>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d05e      	beq.n	800674a <HAL_DMA_Abort_IT+0x3a2>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a34      	ldr	r2, [pc, #208]	; (8006764 <HAL_DMA_Abort_IT+0x3bc>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d059      	beq.n	800674a <HAL_DMA_Abort_IT+0x3a2>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a33      	ldr	r2, [pc, #204]	; (8006768 <HAL_DMA_Abort_IT+0x3c0>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d054      	beq.n	800674a <HAL_DMA_Abort_IT+0x3a2>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a31      	ldr	r2, [pc, #196]	; (800676c <HAL_DMA_Abort_IT+0x3c4>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d04f      	beq.n	800674a <HAL_DMA_Abort_IT+0x3a2>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a30      	ldr	r2, [pc, #192]	; (8006770 <HAL_DMA_Abort_IT+0x3c8>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d04a      	beq.n	800674a <HAL_DMA_Abort_IT+0x3a2>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a2e      	ldr	r2, [pc, #184]	; (8006774 <HAL_DMA_Abort_IT+0x3cc>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d045      	beq.n	800674a <HAL_DMA_Abort_IT+0x3a2>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a2d      	ldr	r2, [pc, #180]	; (8006778 <HAL_DMA_Abort_IT+0x3d0>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d040      	beq.n	800674a <HAL_DMA_Abort_IT+0x3a2>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a2b      	ldr	r2, [pc, #172]	; (800677c <HAL_DMA_Abort_IT+0x3d4>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d03b      	beq.n	800674a <HAL_DMA_Abort_IT+0x3a2>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a2a      	ldr	r2, [pc, #168]	; (8006780 <HAL_DMA_Abort_IT+0x3d8>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d036      	beq.n	800674a <HAL_DMA_Abort_IT+0x3a2>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a28      	ldr	r2, [pc, #160]	; (8006784 <HAL_DMA_Abort_IT+0x3dc>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d031      	beq.n	800674a <HAL_DMA_Abort_IT+0x3a2>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a27      	ldr	r2, [pc, #156]	; (8006788 <HAL_DMA_Abort_IT+0x3e0>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d02c      	beq.n	800674a <HAL_DMA_Abort_IT+0x3a2>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a25      	ldr	r2, [pc, #148]	; (800678c <HAL_DMA_Abort_IT+0x3e4>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d027      	beq.n	800674a <HAL_DMA_Abort_IT+0x3a2>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a24      	ldr	r2, [pc, #144]	; (8006790 <HAL_DMA_Abort_IT+0x3e8>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d022      	beq.n	800674a <HAL_DMA_Abort_IT+0x3a2>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a22      	ldr	r2, [pc, #136]	; (8006794 <HAL_DMA_Abort_IT+0x3ec>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d01d      	beq.n	800674a <HAL_DMA_Abort_IT+0x3a2>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a21      	ldr	r2, [pc, #132]	; (8006798 <HAL_DMA_Abort_IT+0x3f0>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d018      	beq.n	800674a <HAL_DMA_Abort_IT+0x3a2>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a1f      	ldr	r2, [pc, #124]	; (800679c <HAL_DMA_Abort_IT+0x3f4>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d013      	beq.n	800674a <HAL_DMA_Abort_IT+0x3a2>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a1e      	ldr	r2, [pc, #120]	; (80067a0 <HAL_DMA_Abort_IT+0x3f8>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d00e      	beq.n	800674a <HAL_DMA_Abort_IT+0x3a2>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a1c      	ldr	r2, [pc, #112]	; (80067a4 <HAL_DMA_Abort_IT+0x3fc>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d009      	beq.n	800674a <HAL_DMA_Abort_IT+0x3a2>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a1b      	ldr	r2, [pc, #108]	; (80067a8 <HAL_DMA_Abort_IT+0x400>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d004      	beq.n	800674a <HAL_DMA_Abort_IT+0x3a2>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a19      	ldr	r2, [pc, #100]	; (80067ac <HAL_DMA_Abort_IT+0x404>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d132      	bne.n	80067b0 <HAL_DMA_Abort_IT+0x408>
 800674a:	2301      	movs	r3, #1
 800674c:	e031      	b.n	80067b2 <HAL_DMA_Abort_IT+0x40a>
 800674e:	bf00      	nop
 8006750:	40020010 	.word	0x40020010
 8006754:	40020028 	.word	0x40020028
 8006758:	40020040 	.word	0x40020040
 800675c:	40020058 	.word	0x40020058
 8006760:	40020070 	.word	0x40020070
 8006764:	40020088 	.word	0x40020088
 8006768:	400200a0 	.word	0x400200a0
 800676c:	400200b8 	.word	0x400200b8
 8006770:	40020410 	.word	0x40020410
 8006774:	40020428 	.word	0x40020428
 8006778:	40020440 	.word	0x40020440
 800677c:	40020458 	.word	0x40020458
 8006780:	40020470 	.word	0x40020470
 8006784:	40020488 	.word	0x40020488
 8006788:	400204a0 	.word	0x400204a0
 800678c:	400204b8 	.word	0x400204b8
 8006790:	58025408 	.word	0x58025408
 8006794:	5802541c 	.word	0x5802541c
 8006798:	58025430 	.word	0x58025430
 800679c:	58025444 	.word	0x58025444
 80067a0:	58025458 	.word	0x58025458
 80067a4:	5802546c 	.word	0x5802546c
 80067a8:	58025480 	.word	0x58025480
 80067ac:	58025494 	.word	0x58025494
 80067b0:	2300      	movs	r3, #0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d028      	beq.n	8006808 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067c4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ca:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067d0:	f003 031f 	and.w	r3, r3, #31
 80067d4:	2201      	movs	r2, #1
 80067d6:	409a      	lsls	r2, r3
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80067e4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00c      	beq.n	8006808 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067fc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006806:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800681c:	2b00      	cmp	r3, #0
 800681e:	d003      	beq.n	8006828 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop

08006834 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b08a      	sub	sp, #40	; 0x28
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800683c:	2300      	movs	r3, #0
 800683e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006840:	4b67      	ldr	r3, [pc, #412]	; (80069e0 <HAL_DMA_IRQHandler+0x1ac>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a67      	ldr	r2, [pc, #412]	; (80069e4 <HAL_DMA_IRQHandler+0x1b0>)
 8006846:	fba2 2303 	umull	r2, r3, r2, r3
 800684a:	0a9b      	lsrs	r3, r3, #10
 800684c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006852:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006858:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800685a:	6a3b      	ldr	r3, [r7, #32]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a5f      	ldr	r2, [pc, #380]	; (80069e8 <HAL_DMA_IRQHandler+0x1b4>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d04a      	beq.n	8006906 <HAL_DMA_IRQHandler+0xd2>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a5d      	ldr	r2, [pc, #372]	; (80069ec <HAL_DMA_IRQHandler+0x1b8>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d045      	beq.n	8006906 <HAL_DMA_IRQHandler+0xd2>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a5c      	ldr	r2, [pc, #368]	; (80069f0 <HAL_DMA_IRQHandler+0x1bc>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d040      	beq.n	8006906 <HAL_DMA_IRQHandler+0xd2>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a5a      	ldr	r2, [pc, #360]	; (80069f4 <HAL_DMA_IRQHandler+0x1c0>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d03b      	beq.n	8006906 <HAL_DMA_IRQHandler+0xd2>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a59      	ldr	r2, [pc, #356]	; (80069f8 <HAL_DMA_IRQHandler+0x1c4>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d036      	beq.n	8006906 <HAL_DMA_IRQHandler+0xd2>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a57      	ldr	r2, [pc, #348]	; (80069fc <HAL_DMA_IRQHandler+0x1c8>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d031      	beq.n	8006906 <HAL_DMA_IRQHandler+0xd2>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a56      	ldr	r2, [pc, #344]	; (8006a00 <HAL_DMA_IRQHandler+0x1cc>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d02c      	beq.n	8006906 <HAL_DMA_IRQHandler+0xd2>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a54      	ldr	r2, [pc, #336]	; (8006a04 <HAL_DMA_IRQHandler+0x1d0>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d027      	beq.n	8006906 <HAL_DMA_IRQHandler+0xd2>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a53      	ldr	r2, [pc, #332]	; (8006a08 <HAL_DMA_IRQHandler+0x1d4>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d022      	beq.n	8006906 <HAL_DMA_IRQHandler+0xd2>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a51      	ldr	r2, [pc, #324]	; (8006a0c <HAL_DMA_IRQHandler+0x1d8>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d01d      	beq.n	8006906 <HAL_DMA_IRQHandler+0xd2>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a50      	ldr	r2, [pc, #320]	; (8006a10 <HAL_DMA_IRQHandler+0x1dc>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d018      	beq.n	8006906 <HAL_DMA_IRQHandler+0xd2>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a4e      	ldr	r2, [pc, #312]	; (8006a14 <HAL_DMA_IRQHandler+0x1e0>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d013      	beq.n	8006906 <HAL_DMA_IRQHandler+0xd2>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a4d      	ldr	r2, [pc, #308]	; (8006a18 <HAL_DMA_IRQHandler+0x1e4>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d00e      	beq.n	8006906 <HAL_DMA_IRQHandler+0xd2>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a4b      	ldr	r2, [pc, #300]	; (8006a1c <HAL_DMA_IRQHandler+0x1e8>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d009      	beq.n	8006906 <HAL_DMA_IRQHandler+0xd2>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a4a      	ldr	r2, [pc, #296]	; (8006a20 <HAL_DMA_IRQHandler+0x1ec>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d004      	beq.n	8006906 <HAL_DMA_IRQHandler+0xd2>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a48      	ldr	r2, [pc, #288]	; (8006a24 <HAL_DMA_IRQHandler+0x1f0>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d101      	bne.n	800690a <HAL_DMA_IRQHandler+0xd6>
 8006906:	2301      	movs	r3, #1
 8006908:	e000      	b.n	800690c <HAL_DMA_IRQHandler+0xd8>
 800690a:	2300      	movs	r3, #0
 800690c:	2b00      	cmp	r3, #0
 800690e:	f000 842b 	beq.w	8007168 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006916:	f003 031f 	and.w	r3, r3, #31
 800691a:	2208      	movs	r2, #8
 800691c:	409a      	lsls	r2, r3
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	4013      	ands	r3, r2
 8006922:	2b00      	cmp	r3, #0
 8006924:	f000 80a2 	beq.w	8006a6c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a2e      	ldr	r2, [pc, #184]	; (80069e8 <HAL_DMA_IRQHandler+0x1b4>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d04a      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x194>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a2d      	ldr	r2, [pc, #180]	; (80069ec <HAL_DMA_IRQHandler+0x1b8>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d045      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x194>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a2b      	ldr	r2, [pc, #172]	; (80069f0 <HAL_DMA_IRQHandler+0x1bc>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d040      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x194>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a2a      	ldr	r2, [pc, #168]	; (80069f4 <HAL_DMA_IRQHandler+0x1c0>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d03b      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x194>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a28      	ldr	r2, [pc, #160]	; (80069f8 <HAL_DMA_IRQHandler+0x1c4>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d036      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x194>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a27      	ldr	r2, [pc, #156]	; (80069fc <HAL_DMA_IRQHandler+0x1c8>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d031      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x194>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a25      	ldr	r2, [pc, #148]	; (8006a00 <HAL_DMA_IRQHandler+0x1cc>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d02c      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x194>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a24      	ldr	r2, [pc, #144]	; (8006a04 <HAL_DMA_IRQHandler+0x1d0>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d027      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x194>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a22      	ldr	r2, [pc, #136]	; (8006a08 <HAL_DMA_IRQHandler+0x1d4>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d022      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x194>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a21      	ldr	r2, [pc, #132]	; (8006a0c <HAL_DMA_IRQHandler+0x1d8>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d01d      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x194>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a1f      	ldr	r2, [pc, #124]	; (8006a10 <HAL_DMA_IRQHandler+0x1dc>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d018      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x194>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a1e      	ldr	r2, [pc, #120]	; (8006a14 <HAL_DMA_IRQHandler+0x1e0>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d013      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x194>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a1c      	ldr	r2, [pc, #112]	; (8006a18 <HAL_DMA_IRQHandler+0x1e4>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d00e      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x194>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a1b      	ldr	r2, [pc, #108]	; (8006a1c <HAL_DMA_IRQHandler+0x1e8>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d009      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x194>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a19      	ldr	r2, [pc, #100]	; (8006a20 <HAL_DMA_IRQHandler+0x1ec>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d004      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x194>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a18      	ldr	r2, [pc, #96]	; (8006a24 <HAL_DMA_IRQHandler+0x1f0>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d12f      	bne.n	8006a28 <HAL_DMA_IRQHandler+0x1f4>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0304 	and.w	r3, r3, #4
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	bf14      	ite	ne
 80069d6:	2301      	movne	r3, #1
 80069d8:	2300      	moveq	r3, #0
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	e02e      	b.n	8006a3c <HAL_DMA_IRQHandler+0x208>
 80069de:	bf00      	nop
 80069e0:	24000284 	.word	0x24000284
 80069e4:	1b4e81b5 	.word	0x1b4e81b5
 80069e8:	40020010 	.word	0x40020010
 80069ec:	40020028 	.word	0x40020028
 80069f0:	40020040 	.word	0x40020040
 80069f4:	40020058 	.word	0x40020058
 80069f8:	40020070 	.word	0x40020070
 80069fc:	40020088 	.word	0x40020088
 8006a00:	400200a0 	.word	0x400200a0
 8006a04:	400200b8 	.word	0x400200b8
 8006a08:	40020410 	.word	0x40020410
 8006a0c:	40020428 	.word	0x40020428
 8006a10:	40020440 	.word	0x40020440
 8006a14:	40020458 	.word	0x40020458
 8006a18:	40020470 	.word	0x40020470
 8006a1c:	40020488 	.word	0x40020488
 8006a20:	400204a0 	.word	0x400204a0
 8006a24:	400204b8 	.word	0x400204b8
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0308 	and.w	r3, r3, #8
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	bf14      	ite	ne
 8006a36:	2301      	movne	r3, #1
 8006a38:	2300      	moveq	r3, #0
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d015      	beq.n	8006a6c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f022 0204 	bic.w	r2, r2, #4
 8006a4e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a54:	f003 031f 	and.w	r3, r3, #31
 8006a58:	2208      	movs	r2, #8
 8006a5a:	409a      	lsls	r2, r3
 8006a5c:	6a3b      	ldr	r3, [r7, #32]
 8006a5e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a64:	f043 0201 	orr.w	r2, r3, #1
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a70:	f003 031f 	and.w	r3, r3, #31
 8006a74:	69ba      	ldr	r2, [r7, #24]
 8006a76:	fa22 f303 	lsr.w	r3, r2, r3
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d06e      	beq.n	8006b60 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a69      	ldr	r2, [pc, #420]	; (8006c2c <HAL_DMA_IRQHandler+0x3f8>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d04a      	beq.n	8006b22 <HAL_DMA_IRQHandler+0x2ee>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a67      	ldr	r2, [pc, #412]	; (8006c30 <HAL_DMA_IRQHandler+0x3fc>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d045      	beq.n	8006b22 <HAL_DMA_IRQHandler+0x2ee>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a66      	ldr	r2, [pc, #408]	; (8006c34 <HAL_DMA_IRQHandler+0x400>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d040      	beq.n	8006b22 <HAL_DMA_IRQHandler+0x2ee>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a64      	ldr	r2, [pc, #400]	; (8006c38 <HAL_DMA_IRQHandler+0x404>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d03b      	beq.n	8006b22 <HAL_DMA_IRQHandler+0x2ee>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a63      	ldr	r2, [pc, #396]	; (8006c3c <HAL_DMA_IRQHandler+0x408>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d036      	beq.n	8006b22 <HAL_DMA_IRQHandler+0x2ee>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a61      	ldr	r2, [pc, #388]	; (8006c40 <HAL_DMA_IRQHandler+0x40c>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d031      	beq.n	8006b22 <HAL_DMA_IRQHandler+0x2ee>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a60      	ldr	r2, [pc, #384]	; (8006c44 <HAL_DMA_IRQHandler+0x410>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d02c      	beq.n	8006b22 <HAL_DMA_IRQHandler+0x2ee>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a5e      	ldr	r2, [pc, #376]	; (8006c48 <HAL_DMA_IRQHandler+0x414>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d027      	beq.n	8006b22 <HAL_DMA_IRQHandler+0x2ee>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a5d      	ldr	r2, [pc, #372]	; (8006c4c <HAL_DMA_IRQHandler+0x418>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d022      	beq.n	8006b22 <HAL_DMA_IRQHandler+0x2ee>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a5b      	ldr	r2, [pc, #364]	; (8006c50 <HAL_DMA_IRQHandler+0x41c>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d01d      	beq.n	8006b22 <HAL_DMA_IRQHandler+0x2ee>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a5a      	ldr	r2, [pc, #360]	; (8006c54 <HAL_DMA_IRQHandler+0x420>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d018      	beq.n	8006b22 <HAL_DMA_IRQHandler+0x2ee>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a58      	ldr	r2, [pc, #352]	; (8006c58 <HAL_DMA_IRQHandler+0x424>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d013      	beq.n	8006b22 <HAL_DMA_IRQHandler+0x2ee>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a57      	ldr	r2, [pc, #348]	; (8006c5c <HAL_DMA_IRQHandler+0x428>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d00e      	beq.n	8006b22 <HAL_DMA_IRQHandler+0x2ee>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a55      	ldr	r2, [pc, #340]	; (8006c60 <HAL_DMA_IRQHandler+0x42c>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d009      	beq.n	8006b22 <HAL_DMA_IRQHandler+0x2ee>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a54      	ldr	r2, [pc, #336]	; (8006c64 <HAL_DMA_IRQHandler+0x430>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d004      	beq.n	8006b22 <HAL_DMA_IRQHandler+0x2ee>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a52      	ldr	r2, [pc, #328]	; (8006c68 <HAL_DMA_IRQHandler+0x434>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d10a      	bne.n	8006b38 <HAL_DMA_IRQHandler+0x304>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	695b      	ldr	r3, [r3, #20]
 8006b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	bf14      	ite	ne
 8006b30:	2301      	movne	r3, #1
 8006b32:	2300      	moveq	r3, #0
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	e003      	b.n	8006b40 <HAL_DMA_IRQHandler+0x30c>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2300      	movs	r3, #0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00d      	beq.n	8006b60 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b48:	f003 031f 	and.w	r3, r3, #31
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	409a      	lsls	r2, r3
 8006b50:	6a3b      	ldr	r3, [r7, #32]
 8006b52:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b58:	f043 0202 	orr.w	r2, r3, #2
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b64:	f003 031f 	and.w	r3, r3, #31
 8006b68:	2204      	movs	r2, #4
 8006b6a:	409a      	lsls	r2, r3
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	4013      	ands	r3, r2
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f000 808f 	beq.w	8006c94 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a2c      	ldr	r2, [pc, #176]	; (8006c2c <HAL_DMA_IRQHandler+0x3f8>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d04a      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x3e2>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a2a      	ldr	r2, [pc, #168]	; (8006c30 <HAL_DMA_IRQHandler+0x3fc>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d045      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x3e2>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a29      	ldr	r2, [pc, #164]	; (8006c34 <HAL_DMA_IRQHandler+0x400>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d040      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x3e2>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a27      	ldr	r2, [pc, #156]	; (8006c38 <HAL_DMA_IRQHandler+0x404>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d03b      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x3e2>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a26      	ldr	r2, [pc, #152]	; (8006c3c <HAL_DMA_IRQHandler+0x408>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d036      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x3e2>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a24      	ldr	r2, [pc, #144]	; (8006c40 <HAL_DMA_IRQHandler+0x40c>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d031      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x3e2>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a23      	ldr	r2, [pc, #140]	; (8006c44 <HAL_DMA_IRQHandler+0x410>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d02c      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x3e2>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a21      	ldr	r2, [pc, #132]	; (8006c48 <HAL_DMA_IRQHandler+0x414>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d027      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x3e2>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a20      	ldr	r2, [pc, #128]	; (8006c4c <HAL_DMA_IRQHandler+0x418>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d022      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x3e2>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a1e      	ldr	r2, [pc, #120]	; (8006c50 <HAL_DMA_IRQHandler+0x41c>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d01d      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x3e2>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a1d      	ldr	r2, [pc, #116]	; (8006c54 <HAL_DMA_IRQHandler+0x420>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d018      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x3e2>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a1b      	ldr	r2, [pc, #108]	; (8006c58 <HAL_DMA_IRQHandler+0x424>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d013      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x3e2>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a1a      	ldr	r2, [pc, #104]	; (8006c5c <HAL_DMA_IRQHandler+0x428>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d00e      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x3e2>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a18      	ldr	r2, [pc, #96]	; (8006c60 <HAL_DMA_IRQHandler+0x42c>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d009      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x3e2>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a17      	ldr	r2, [pc, #92]	; (8006c64 <HAL_DMA_IRQHandler+0x430>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d004      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x3e2>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a15      	ldr	r2, [pc, #84]	; (8006c68 <HAL_DMA_IRQHandler+0x434>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d12a      	bne.n	8006c6c <HAL_DMA_IRQHandler+0x438>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0302 	and.w	r3, r3, #2
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	bf14      	ite	ne
 8006c24:	2301      	movne	r3, #1
 8006c26:	2300      	moveq	r3, #0
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	e023      	b.n	8006c74 <HAL_DMA_IRQHandler+0x440>
 8006c2c:	40020010 	.word	0x40020010
 8006c30:	40020028 	.word	0x40020028
 8006c34:	40020040 	.word	0x40020040
 8006c38:	40020058 	.word	0x40020058
 8006c3c:	40020070 	.word	0x40020070
 8006c40:	40020088 	.word	0x40020088
 8006c44:	400200a0 	.word	0x400200a0
 8006c48:	400200b8 	.word	0x400200b8
 8006c4c:	40020410 	.word	0x40020410
 8006c50:	40020428 	.word	0x40020428
 8006c54:	40020440 	.word	0x40020440
 8006c58:	40020458 	.word	0x40020458
 8006c5c:	40020470 	.word	0x40020470
 8006c60:	40020488 	.word	0x40020488
 8006c64:	400204a0 	.word	0x400204a0
 8006c68:	400204b8 	.word	0x400204b8
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2300      	movs	r3, #0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00d      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c7c:	f003 031f 	and.w	r3, r3, #31
 8006c80:	2204      	movs	r2, #4
 8006c82:	409a      	lsls	r2, r3
 8006c84:	6a3b      	ldr	r3, [r7, #32]
 8006c86:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c8c:	f043 0204 	orr.w	r2, r3, #4
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c98:	f003 031f 	and.w	r3, r3, #31
 8006c9c:	2210      	movs	r2, #16
 8006c9e:	409a      	lsls	r2, r3
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f000 80a6 	beq.w	8006df6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a85      	ldr	r2, [pc, #532]	; (8006ec4 <HAL_DMA_IRQHandler+0x690>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d04a      	beq.n	8006d4a <HAL_DMA_IRQHandler+0x516>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a83      	ldr	r2, [pc, #524]	; (8006ec8 <HAL_DMA_IRQHandler+0x694>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d045      	beq.n	8006d4a <HAL_DMA_IRQHandler+0x516>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a82      	ldr	r2, [pc, #520]	; (8006ecc <HAL_DMA_IRQHandler+0x698>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d040      	beq.n	8006d4a <HAL_DMA_IRQHandler+0x516>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a80      	ldr	r2, [pc, #512]	; (8006ed0 <HAL_DMA_IRQHandler+0x69c>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d03b      	beq.n	8006d4a <HAL_DMA_IRQHandler+0x516>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a7f      	ldr	r2, [pc, #508]	; (8006ed4 <HAL_DMA_IRQHandler+0x6a0>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d036      	beq.n	8006d4a <HAL_DMA_IRQHandler+0x516>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a7d      	ldr	r2, [pc, #500]	; (8006ed8 <HAL_DMA_IRQHandler+0x6a4>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d031      	beq.n	8006d4a <HAL_DMA_IRQHandler+0x516>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a7c      	ldr	r2, [pc, #496]	; (8006edc <HAL_DMA_IRQHandler+0x6a8>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d02c      	beq.n	8006d4a <HAL_DMA_IRQHandler+0x516>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a7a      	ldr	r2, [pc, #488]	; (8006ee0 <HAL_DMA_IRQHandler+0x6ac>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d027      	beq.n	8006d4a <HAL_DMA_IRQHandler+0x516>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a79      	ldr	r2, [pc, #484]	; (8006ee4 <HAL_DMA_IRQHandler+0x6b0>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d022      	beq.n	8006d4a <HAL_DMA_IRQHandler+0x516>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a77      	ldr	r2, [pc, #476]	; (8006ee8 <HAL_DMA_IRQHandler+0x6b4>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d01d      	beq.n	8006d4a <HAL_DMA_IRQHandler+0x516>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a76      	ldr	r2, [pc, #472]	; (8006eec <HAL_DMA_IRQHandler+0x6b8>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d018      	beq.n	8006d4a <HAL_DMA_IRQHandler+0x516>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a74      	ldr	r2, [pc, #464]	; (8006ef0 <HAL_DMA_IRQHandler+0x6bc>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d013      	beq.n	8006d4a <HAL_DMA_IRQHandler+0x516>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a73      	ldr	r2, [pc, #460]	; (8006ef4 <HAL_DMA_IRQHandler+0x6c0>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d00e      	beq.n	8006d4a <HAL_DMA_IRQHandler+0x516>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a71      	ldr	r2, [pc, #452]	; (8006ef8 <HAL_DMA_IRQHandler+0x6c4>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d009      	beq.n	8006d4a <HAL_DMA_IRQHandler+0x516>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a70      	ldr	r2, [pc, #448]	; (8006efc <HAL_DMA_IRQHandler+0x6c8>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d004      	beq.n	8006d4a <HAL_DMA_IRQHandler+0x516>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a6e      	ldr	r2, [pc, #440]	; (8006f00 <HAL_DMA_IRQHandler+0x6cc>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d10a      	bne.n	8006d60 <HAL_DMA_IRQHandler+0x52c>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 0308 	and.w	r3, r3, #8
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	bf14      	ite	ne
 8006d58:	2301      	movne	r3, #1
 8006d5a:	2300      	moveq	r3, #0
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	e009      	b.n	8006d74 <HAL_DMA_IRQHandler+0x540>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 0304 	and.w	r3, r3, #4
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	bf14      	ite	ne
 8006d6e:	2301      	movne	r3, #1
 8006d70:	2300      	moveq	r3, #0
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d03e      	beq.n	8006df6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d7c:	f003 031f 	and.w	r3, r3, #31
 8006d80:	2210      	movs	r2, #16
 8006d82:	409a      	lsls	r2, r3
 8006d84:	6a3b      	ldr	r3, [r7, #32]
 8006d86:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d018      	beq.n	8006dc8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d108      	bne.n	8006db6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d024      	beq.n	8006df6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	4798      	blx	r3
 8006db4:	e01f      	b.n	8006df6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d01b      	beq.n	8006df6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	4798      	blx	r3
 8006dc6:	e016      	b.n	8006df6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d107      	bne.n	8006de6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f022 0208 	bic.w	r2, r2, #8
 8006de4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dfa:	f003 031f 	and.w	r3, r3, #31
 8006dfe:	2220      	movs	r2, #32
 8006e00:	409a      	lsls	r2, r3
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	4013      	ands	r3, r2
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	f000 8110 	beq.w	800702c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a2c      	ldr	r2, [pc, #176]	; (8006ec4 <HAL_DMA_IRQHandler+0x690>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d04a      	beq.n	8006eac <HAL_DMA_IRQHandler+0x678>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a2b      	ldr	r2, [pc, #172]	; (8006ec8 <HAL_DMA_IRQHandler+0x694>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d045      	beq.n	8006eac <HAL_DMA_IRQHandler+0x678>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a29      	ldr	r2, [pc, #164]	; (8006ecc <HAL_DMA_IRQHandler+0x698>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d040      	beq.n	8006eac <HAL_DMA_IRQHandler+0x678>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a28      	ldr	r2, [pc, #160]	; (8006ed0 <HAL_DMA_IRQHandler+0x69c>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d03b      	beq.n	8006eac <HAL_DMA_IRQHandler+0x678>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a26      	ldr	r2, [pc, #152]	; (8006ed4 <HAL_DMA_IRQHandler+0x6a0>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d036      	beq.n	8006eac <HAL_DMA_IRQHandler+0x678>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a25      	ldr	r2, [pc, #148]	; (8006ed8 <HAL_DMA_IRQHandler+0x6a4>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d031      	beq.n	8006eac <HAL_DMA_IRQHandler+0x678>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a23      	ldr	r2, [pc, #140]	; (8006edc <HAL_DMA_IRQHandler+0x6a8>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d02c      	beq.n	8006eac <HAL_DMA_IRQHandler+0x678>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a22      	ldr	r2, [pc, #136]	; (8006ee0 <HAL_DMA_IRQHandler+0x6ac>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d027      	beq.n	8006eac <HAL_DMA_IRQHandler+0x678>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a20      	ldr	r2, [pc, #128]	; (8006ee4 <HAL_DMA_IRQHandler+0x6b0>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d022      	beq.n	8006eac <HAL_DMA_IRQHandler+0x678>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a1f      	ldr	r2, [pc, #124]	; (8006ee8 <HAL_DMA_IRQHandler+0x6b4>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d01d      	beq.n	8006eac <HAL_DMA_IRQHandler+0x678>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a1d      	ldr	r2, [pc, #116]	; (8006eec <HAL_DMA_IRQHandler+0x6b8>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d018      	beq.n	8006eac <HAL_DMA_IRQHandler+0x678>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a1c      	ldr	r2, [pc, #112]	; (8006ef0 <HAL_DMA_IRQHandler+0x6bc>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d013      	beq.n	8006eac <HAL_DMA_IRQHandler+0x678>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a1a      	ldr	r2, [pc, #104]	; (8006ef4 <HAL_DMA_IRQHandler+0x6c0>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d00e      	beq.n	8006eac <HAL_DMA_IRQHandler+0x678>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a19      	ldr	r2, [pc, #100]	; (8006ef8 <HAL_DMA_IRQHandler+0x6c4>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d009      	beq.n	8006eac <HAL_DMA_IRQHandler+0x678>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a17      	ldr	r2, [pc, #92]	; (8006efc <HAL_DMA_IRQHandler+0x6c8>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d004      	beq.n	8006eac <HAL_DMA_IRQHandler+0x678>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a16      	ldr	r2, [pc, #88]	; (8006f00 <HAL_DMA_IRQHandler+0x6cc>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d12b      	bne.n	8006f04 <HAL_DMA_IRQHandler+0x6d0>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0310 	and.w	r3, r3, #16
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	bf14      	ite	ne
 8006eba:	2301      	movne	r3, #1
 8006ebc:	2300      	moveq	r3, #0
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	e02a      	b.n	8006f18 <HAL_DMA_IRQHandler+0x6e4>
 8006ec2:	bf00      	nop
 8006ec4:	40020010 	.word	0x40020010
 8006ec8:	40020028 	.word	0x40020028
 8006ecc:	40020040 	.word	0x40020040
 8006ed0:	40020058 	.word	0x40020058
 8006ed4:	40020070 	.word	0x40020070
 8006ed8:	40020088 	.word	0x40020088
 8006edc:	400200a0 	.word	0x400200a0
 8006ee0:	400200b8 	.word	0x400200b8
 8006ee4:	40020410 	.word	0x40020410
 8006ee8:	40020428 	.word	0x40020428
 8006eec:	40020440 	.word	0x40020440
 8006ef0:	40020458 	.word	0x40020458
 8006ef4:	40020470 	.word	0x40020470
 8006ef8:	40020488 	.word	0x40020488
 8006efc:	400204a0 	.word	0x400204a0
 8006f00:	400204b8 	.word	0x400204b8
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 0302 	and.w	r3, r3, #2
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	bf14      	ite	ne
 8006f12:	2301      	movne	r3, #1
 8006f14:	2300      	moveq	r3, #0
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f000 8087 	beq.w	800702c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f22:	f003 031f 	and.w	r3, r3, #31
 8006f26:	2220      	movs	r2, #32
 8006f28:	409a      	lsls	r2, r3
 8006f2a:	6a3b      	ldr	r3, [r7, #32]
 8006f2c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	2b04      	cmp	r3, #4
 8006f38:	d139      	bne.n	8006fae <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f022 0216 	bic.w	r2, r2, #22
 8006f48:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	695a      	ldr	r2, [r3, #20]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f58:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d103      	bne.n	8006f6a <HAL_DMA_IRQHandler+0x736>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d007      	beq.n	8006f7a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f022 0208 	bic.w	r2, r2, #8
 8006f78:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f7e:	f003 031f 	and.w	r3, r3, #31
 8006f82:	223f      	movs	r2, #63	; 0x3f
 8006f84:	409a      	lsls	r2, r3
 8006f86:	6a3b      	ldr	r3, [r7, #32]
 8006f88:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	f000 8382 	beq.w	80076a8 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	4798      	blx	r3
          }
          return;
 8006fac:	e37c      	b.n	80076a8 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d018      	beq.n	8006fee <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d108      	bne.n	8006fdc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d02c      	beq.n	800702c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	4798      	blx	r3
 8006fda:	e027      	b.n	800702c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d023      	beq.n	800702c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	4798      	blx	r3
 8006fec:	e01e      	b.n	800702c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d10f      	bne.n	800701c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f022 0210 	bic.w	r2, r2, #16
 800700a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007020:	2b00      	cmp	r3, #0
 8007022:	d003      	beq.n	800702c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007030:	2b00      	cmp	r3, #0
 8007032:	f000 833e 	beq.w	80076b2 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	2b00      	cmp	r3, #0
 8007040:	f000 8088 	beq.w	8007154 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2204      	movs	r2, #4
 8007048:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a89      	ldr	r2, [pc, #548]	; (8007278 <HAL_DMA_IRQHandler+0xa44>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d04a      	beq.n	80070ec <HAL_DMA_IRQHandler+0x8b8>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a88      	ldr	r2, [pc, #544]	; (800727c <HAL_DMA_IRQHandler+0xa48>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d045      	beq.n	80070ec <HAL_DMA_IRQHandler+0x8b8>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a86      	ldr	r2, [pc, #536]	; (8007280 <HAL_DMA_IRQHandler+0xa4c>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d040      	beq.n	80070ec <HAL_DMA_IRQHandler+0x8b8>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a85      	ldr	r2, [pc, #532]	; (8007284 <HAL_DMA_IRQHandler+0xa50>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d03b      	beq.n	80070ec <HAL_DMA_IRQHandler+0x8b8>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a83      	ldr	r2, [pc, #524]	; (8007288 <HAL_DMA_IRQHandler+0xa54>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d036      	beq.n	80070ec <HAL_DMA_IRQHandler+0x8b8>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a82      	ldr	r2, [pc, #520]	; (800728c <HAL_DMA_IRQHandler+0xa58>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d031      	beq.n	80070ec <HAL_DMA_IRQHandler+0x8b8>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a80      	ldr	r2, [pc, #512]	; (8007290 <HAL_DMA_IRQHandler+0xa5c>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d02c      	beq.n	80070ec <HAL_DMA_IRQHandler+0x8b8>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a7f      	ldr	r2, [pc, #508]	; (8007294 <HAL_DMA_IRQHandler+0xa60>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d027      	beq.n	80070ec <HAL_DMA_IRQHandler+0x8b8>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a7d      	ldr	r2, [pc, #500]	; (8007298 <HAL_DMA_IRQHandler+0xa64>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d022      	beq.n	80070ec <HAL_DMA_IRQHandler+0x8b8>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a7c      	ldr	r2, [pc, #496]	; (800729c <HAL_DMA_IRQHandler+0xa68>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d01d      	beq.n	80070ec <HAL_DMA_IRQHandler+0x8b8>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a7a      	ldr	r2, [pc, #488]	; (80072a0 <HAL_DMA_IRQHandler+0xa6c>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d018      	beq.n	80070ec <HAL_DMA_IRQHandler+0x8b8>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a79      	ldr	r2, [pc, #484]	; (80072a4 <HAL_DMA_IRQHandler+0xa70>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d013      	beq.n	80070ec <HAL_DMA_IRQHandler+0x8b8>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a77      	ldr	r2, [pc, #476]	; (80072a8 <HAL_DMA_IRQHandler+0xa74>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d00e      	beq.n	80070ec <HAL_DMA_IRQHandler+0x8b8>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a76      	ldr	r2, [pc, #472]	; (80072ac <HAL_DMA_IRQHandler+0xa78>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d009      	beq.n	80070ec <HAL_DMA_IRQHandler+0x8b8>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a74      	ldr	r2, [pc, #464]	; (80072b0 <HAL_DMA_IRQHandler+0xa7c>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d004      	beq.n	80070ec <HAL_DMA_IRQHandler+0x8b8>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a73      	ldr	r2, [pc, #460]	; (80072b4 <HAL_DMA_IRQHandler+0xa80>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d108      	bne.n	80070fe <HAL_DMA_IRQHandler+0x8ca>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f022 0201 	bic.w	r2, r2, #1
 80070fa:	601a      	str	r2, [r3, #0]
 80070fc:	e007      	b.n	800710e <HAL_DMA_IRQHandler+0x8da>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f022 0201 	bic.w	r2, r2, #1
 800710c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	3301      	adds	r3, #1
 8007112:	60fb      	str	r3, [r7, #12]
 8007114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007116:	429a      	cmp	r2, r3
 8007118:	d307      	bcc.n	800712a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 0301 	and.w	r3, r3, #1
 8007124:	2b00      	cmp	r3, #0
 8007126:	d1f2      	bne.n	800710e <HAL_DMA_IRQHandler+0x8da>
 8007128:	e000      	b.n	800712c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800712a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0301 	and.w	r3, r3, #1
 8007136:	2b00      	cmp	r3, #0
 8007138:	d004      	beq.n	8007144 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2203      	movs	r2, #3
 800713e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007142:	e003      	b.n	800714c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007158:	2b00      	cmp	r3, #0
 800715a:	f000 82aa 	beq.w	80076b2 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	4798      	blx	r3
 8007166:	e2a4      	b.n	80076b2 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a52      	ldr	r2, [pc, #328]	; (80072b8 <HAL_DMA_IRQHandler+0xa84>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d04a      	beq.n	8007208 <HAL_DMA_IRQHandler+0x9d4>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a51      	ldr	r2, [pc, #324]	; (80072bc <HAL_DMA_IRQHandler+0xa88>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d045      	beq.n	8007208 <HAL_DMA_IRQHandler+0x9d4>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a4f      	ldr	r2, [pc, #316]	; (80072c0 <HAL_DMA_IRQHandler+0xa8c>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d040      	beq.n	8007208 <HAL_DMA_IRQHandler+0x9d4>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a4e      	ldr	r2, [pc, #312]	; (80072c4 <HAL_DMA_IRQHandler+0xa90>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d03b      	beq.n	8007208 <HAL_DMA_IRQHandler+0x9d4>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a4c      	ldr	r2, [pc, #304]	; (80072c8 <HAL_DMA_IRQHandler+0xa94>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d036      	beq.n	8007208 <HAL_DMA_IRQHandler+0x9d4>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a4b      	ldr	r2, [pc, #300]	; (80072cc <HAL_DMA_IRQHandler+0xa98>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d031      	beq.n	8007208 <HAL_DMA_IRQHandler+0x9d4>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a49      	ldr	r2, [pc, #292]	; (80072d0 <HAL_DMA_IRQHandler+0xa9c>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d02c      	beq.n	8007208 <HAL_DMA_IRQHandler+0x9d4>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a48      	ldr	r2, [pc, #288]	; (80072d4 <HAL_DMA_IRQHandler+0xaa0>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d027      	beq.n	8007208 <HAL_DMA_IRQHandler+0x9d4>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a46      	ldr	r2, [pc, #280]	; (80072d8 <HAL_DMA_IRQHandler+0xaa4>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d022      	beq.n	8007208 <HAL_DMA_IRQHandler+0x9d4>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a45      	ldr	r2, [pc, #276]	; (80072dc <HAL_DMA_IRQHandler+0xaa8>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d01d      	beq.n	8007208 <HAL_DMA_IRQHandler+0x9d4>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a43      	ldr	r2, [pc, #268]	; (80072e0 <HAL_DMA_IRQHandler+0xaac>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d018      	beq.n	8007208 <HAL_DMA_IRQHandler+0x9d4>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a42      	ldr	r2, [pc, #264]	; (80072e4 <HAL_DMA_IRQHandler+0xab0>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d013      	beq.n	8007208 <HAL_DMA_IRQHandler+0x9d4>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a40      	ldr	r2, [pc, #256]	; (80072e8 <HAL_DMA_IRQHandler+0xab4>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d00e      	beq.n	8007208 <HAL_DMA_IRQHandler+0x9d4>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a3f      	ldr	r2, [pc, #252]	; (80072ec <HAL_DMA_IRQHandler+0xab8>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d009      	beq.n	8007208 <HAL_DMA_IRQHandler+0x9d4>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a3d      	ldr	r2, [pc, #244]	; (80072f0 <HAL_DMA_IRQHandler+0xabc>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d004      	beq.n	8007208 <HAL_DMA_IRQHandler+0x9d4>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a3c      	ldr	r2, [pc, #240]	; (80072f4 <HAL_DMA_IRQHandler+0xac0>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d101      	bne.n	800720c <HAL_DMA_IRQHandler+0x9d8>
 8007208:	2301      	movs	r3, #1
 800720a:	e000      	b.n	800720e <HAL_DMA_IRQHandler+0x9da>
 800720c:	2300      	movs	r3, #0
 800720e:	2b00      	cmp	r3, #0
 8007210:	f000 824f 	beq.w	80076b2 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007220:	f003 031f 	and.w	r3, r3, #31
 8007224:	2204      	movs	r2, #4
 8007226:	409a      	lsls	r2, r3
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	4013      	ands	r3, r2
 800722c:	2b00      	cmp	r3, #0
 800722e:	f000 80dd 	beq.w	80073ec <HAL_DMA_IRQHandler+0xbb8>
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	f003 0304 	and.w	r3, r3, #4
 8007238:	2b00      	cmp	r3, #0
 800723a:	f000 80d7 	beq.w	80073ec <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007242:	f003 031f 	and.w	r3, r3, #31
 8007246:	2204      	movs	r2, #4
 8007248:	409a      	lsls	r2, r3
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007254:	2b00      	cmp	r3, #0
 8007256:	d059      	beq.n	800730c <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800725e:	2b00      	cmp	r3, #0
 8007260:	d14a      	bne.n	80072f8 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007266:	2b00      	cmp	r3, #0
 8007268:	f000 8220 	beq.w	80076ac <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007274:	e21a      	b.n	80076ac <HAL_DMA_IRQHandler+0xe78>
 8007276:	bf00      	nop
 8007278:	40020010 	.word	0x40020010
 800727c:	40020028 	.word	0x40020028
 8007280:	40020040 	.word	0x40020040
 8007284:	40020058 	.word	0x40020058
 8007288:	40020070 	.word	0x40020070
 800728c:	40020088 	.word	0x40020088
 8007290:	400200a0 	.word	0x400200a0
 8007294:	400200b8 	.word	0x400200b8
 8007298:	40020410 	.word	0x40020410
 800729c:	40020428 	.word	0x40020428
 80072a0:	40020440 	.word	0x40020440
 80072a4:	40020458 	.word	0x40020458
 80072a8:	40020470 	.word	0x40020470
 80072ac:	40020488 	.word	0x40020488
 80072b0:	400204a0 	.word	0x400204a0
 80072b4:	400204b8 	.word	0x400204b8
 80072b8:	48022c08 	.word	0x48022c08
 80072bc:	48022c1c 	.word	0x48022c1c
 80072c0:	48022c30 	.word	0x48022c30
 80072c4:	48022c44 	.word	0x48022c44
 80072c8:	48022c58 	.word	0x48022c58
 80072cc:	48022c6c 	.word	0x48022c6c
 80072d0:	48022c80 	.word	0x48022c80
 80072d4:	48022c94 	.word	0x48022c94
 80072d8:	58025408 	.word	0x58025408
 80072dc:	5802541c 	.word	0x5802541c
 80072e0:	58025430 	.word	0x58025430
 80072e4:	58025444 	.word	0x58025444
 80072e8:	58025458 	.word	0x58025458
 80072ec:	5802546c 	.word	0x5802546c
 80072f0:	58025480 	.word	0x58025480
 80072f4:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f000 81d5 	beq.w	80076ac <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800730a:	e1cf      	b.n	80076ac <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	f003 0320 	and.w	r3, r3, #32
 8007312:	2b00      	cmp	r3, #0
 8007314:	d160      	bne.n	80073d8 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a7f      	ldr	r2, [pc, #508]	; (8007518 <HAL_DMA_IRQHandler+0xce4>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d04a      	beq.n	80073b6 <HAL_DMA_IRQHandler+0xb82>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a7d      	ldr	r2, [pc, #500]	; (800751c <HAL_DMA_IRQHandler+0xce8>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d045      	beq.n	80073b6 <HAL_DMA_IRQHandler+0xb82>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a7c      	ldr	r2, [pc, #496]	; (8007520 <HAL_DMA_IRQHandler+0xcec>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d040      	beq.n	80073b6 <HAL_DMA_IRQHandler+0xb82>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a7a      	ldr	r2, [pc, #488]	; (8007524 <HAL_DMA_IRQHandler+0xcf0>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d03b      	beq.n	80073b6 <HAL_DMA_IRQHandler+0xb82>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a79      	ldr	r2, [pc, #484]	; (8007528 <HAL_DMA_IRQHandler+0xcf4>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d036      	beq.n	80073b6 <HAL_DMA_IRQHandler+0xb82>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a77      	ldr	r2, [pc, #476]	; (800752c <HAL_DMA_IRQHandler+0xcf8>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d031      	beq.n	80073b6 <HAL_DMA_IRQHandler+0xb82>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a76      	ldr	r2, [pc, #472]	; (8007530 <HAL_DMA_IRQHandler+0xcfc>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d02c      	beq.n	80073b6 <HAL_DMA_IRQHandler+0xb82>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a74      	ldr	r2, [pc, #464]	; (8007534 <HAL_DMA_IRQHandler+0xd00>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d027      	beq.n	80073b6 <HAL_DMA_IRQHandler+0xb82>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a73      	ldr	r2, [pc, #460]	; (8007538 <HAL_DMA_IRQHandler+0xd04>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d022      	beq.n	80073b6 <HAL_DMA_IRQHandler+0xb82>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a71      	ldr	r2, [pc, #452]	; (800753c <HAL_DMA_IRQHandler+0xd08>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d01d      	beq.n	80073b6 <HAL_DMA_IRQHandler+0xb82>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a70      	ldr	r2, [pc, #448]	; (8007540 <HAL_DMA_IRQHandler+0xd0c>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d018      	beq.n	80073b6 <HAL_DMA_IRQHandler+0xb82>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a6e      	ldr	r2, [pc, #440]	; (8007544 <HAL_DMA_IRQHandler+0xd10>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d013      	beq.n	80073b6 <HAL_DMA_IRQHandler+0xb82>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a6d      	ldr	r2, [pc, #436]	; (8007548 <HAL_DMA_IRQHandler+0xd14>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d00e      	beq.n	80073b6 <HAL_DMA_IRQHandler+0xb82>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a6b      	ldr	r2, [pc, #428]	; (800754c <HAL_DMA_IRQHandler+0xd18>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d009      	beq.n	80073b6 <HAL_DMA_IRQHandler+0xb82>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a6a      	ldr	r2, [pc, #424]	; (8007550 <HAL_DMA_IRQHandler+0xd1c>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d004      	beq.n	80073b6 <HAL_DMA_IRQHandler+0xb82>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a68      	ldr	r2, [pc, #416]	; (8007554 <HAL_DMA_IRQHandler+0xd20>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d108      	bne.n	80073c8 <HAL_DMA_IRQHandler+0xb94>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f022 0208 	bic.w	r2, r2, #8
 80073c4:	601a      	str	r2, [r3, #0]
 80073c6:	e007      	b.n	80073d8 <HAL_DMA_IRQHandler+0xba4>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f022 0204 	bic.w	r2, r2, #4
 80073d6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f000 8165 	beq.w	80076ac <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80073ea:	e15f      	b.n	80076ac <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073f0:	f003 031f 	and.w	r3, r3, #31
 80073f4:	2202      	movs	r2, #2
 80073f6:	409a      	lsls	r2, r3
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	4013      	ands	r3, r2
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f000 80c5 	beq.w	800758c <HAL_DMA_IRQHandler+0xd58>
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	f003 0302 	and.w	r3, r3, #2
 8007408:	2b00      	cmp	r3, #0
 800740a:	f000 80bf 	beq.w	800758c <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007412:	f003 031f 	and.w	r3, r3, #31
 8007416:	2202      	movs	r2, #2
 8007418:	409a      	lsls	r2, r3
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007424:	2b00      	cmp	r3, #0
 8007426:	d018      	beq.n	800745a <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800742e:	2b00      	cmp	r3, #0
 8007430:	d109      	bne.n	8007446 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007436:	2b00      	cmp	r3, #0
 8007438:	f000 813a 	beq.w	80076b0 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007444:	e134      	b.n	80076b0 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800744a:	2b00      	cmp	r3, #0
 800744c:	f000 8130 	beq.w	80076b0 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007458:	e12a      	b.n	80076b0 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	f003 0320 	and.w	r3, r3, #32
 8007460:	2b00      	cmp	r3, #0
 8007462:	f040 8089 	bne.w	8007578 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a2b      	ldr	r2, [pc, #172]	; (8007518 <HAL_DMA_IRQHandler+0xce4>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d04a      	beq.n	8007506 <HAL_DMA_IRQHandler+0xcd2>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a29      	ldr	r2, [pc, #164]	; (800751c <HAL_DMA_IRQHandler+0xce8>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d045      	beq.n	8007506 <HAL_DMA_IRQHandler+0xcd2>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a28      	ldr	r2, [pc, #160]	; (8007520 <HAL_DMA_IRQHandler+0xcec>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d040      	beq.n	8007506 <HAL_DMA_IRQHandler+0xcd2>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a26      	ldr	r2, [pc, #152]	; (8007524 <HAL_DMA_IRQHandler+0xcf0>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d03b      	beq.n	8007506 <HAL_DMA_IRQHandler+0xcd2>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a25      	ldr	r2, [pc, #148]	; (8007528 <HAL_DMA_IRQHandler+0xcf4>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d036      	beq.n	8007506 <HAL_DMA_IRQHandler+0xcd2>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a23      	ldr	r2, [pc, #140]	; (800752c <HAL_DMA_IRQHandler+0xcf8>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d031      	beq.n	8007506 <HAL_DMA_IRQHandler+0xcd2>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a22      	ldr	r2, [pc, #136]	; (8007530 <HAL_DMA_IRQHandler+0xcfc>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d02c      	beq.n	8007506 <HAL_DMA_IRQHandler+0xcd2>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a20      	ldr	r2, [pc, #128]	; (8007534 <HAL_DMA_IRQHandler+0xd00>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d027      	beq.n	8007506 <HAL_DMA_IRQHandler+0xcd2>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a1f      	ldr	r2, [pc, #124]	; (8007538 <HAL_DMA_IRQHandler+0xd04>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d022      	beq.n	8007506 <HAL_DMA_IRQHandler+0xcd2>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a1d      	ldr	r2, [pc, #116]	; (800753c <HAL_DMA_IRQHandler+0xd08>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d01d      	beq.n	8007506 <HAL_DMA_IRQHandler+0xcd2>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a1c      	ldr	r2, [pc, #112]	; (8007540 <HAL_DMA_IRQHandler+0xd0c>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d018      	beq.n	8007506 <HAL_DMA_IRQHandler+0xcd2>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a1a      	ldr	r2, [pc, #104]	; (8007544 <HAL_DMA_IRQHandler+0xd10>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d013      	beq.n	8007506 <HAL_DMA_IRQHandler+0xcd2>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a19      	ldr	r2, [pc, #100]	; (8007548 <HAL_DMA_IRQHandler+0xd14>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d00e      	beq.n	8007506 <HAL_DMA_IRQHandler+0xcd2>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a17      	ldr	r2, [pc, #92]	; (800754c <HAL_DMA_IRQHandler+0xd18>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d009      	beq.n	8007506 <HAL_DMA_IRQHandler+0xcd2>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a16      	ldr	r2, [pc, #88]	; (8007550 <HAL_DMA_IRQHandler+0xd1c>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d004      	beq.n	8007506 <HAL_DMA_IRQHandler+0xcd2>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a14      	ldr	r2, [pc, #80]	; (8007554 <HAL_DMA_IRQHandler+0xd20>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d128      	bne.n	8007558 <HAL_DMA_IRQHandler+0xd24>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f022 0214 	bic.w	r2, r2, #20
 8007514:	601a      	str	r2, [r3, #0]
 8007516:	e027      	b.n	8007568 <HAL_DMA_IRQHandler+0xd34>
 8007518:	40020010 	.word	0x40020010
 800751c:	40020028 	.word	0x40020028
 8007520:	40020040 	.word	0x40020040
 8007524:	40020058 	.word	0x40020058
 8007528:	40020070 	.word	0x40020070
 800752c:	40020088 	.word	0x40020088
 8007530:	400200a0 	.word	0x400200a0
 8007534:	400200b8 	.word	0x400200b8
 8007538:	40020410 	.word	0x40020410
 800753c:	40020428 	.word	0x40020428
 8007540:	40020440 	.word	0x40020440
 8007544:	40020458 	.word	0x40020458
 8007548:	40020470 	.word	0x40020470
 800754c:	40020488 	.word	0x40020488
 8007550:	400204a0 	.word	0x400204a0
 8007554:	400204b8 	.word	0x400204b8
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f022 020a 	bic.w	r2, r2, #10
 8007566:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800757c:	2b00      	cmp	r3, #0
 800757e:	f000 8097 	beq.w	80076b0 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800758a:	e091      	b.n	80076b0 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007590:	f003 031f 	and.w	r3, r3, #31
 8007594:	2208      	movs	r2, #8
 8007596:	409a      	lsls	r2, r3
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	4013      	ands	r3, r2
 800759c:	2b00      	cmp	r3, #0
 800759e:	f000 8088 	beq.w	80076b2 <HAL_DMA_IRQHandler+0xe7e>
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	f003 0308 	and.w	r3, r3, #8
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f000 8082 	beq.w	80076b2 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a41      	ldr	r2, [pc, #260]	; (80076b8 <HAL_DMA_IRQHandler+0xe84>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d04a      	beq.n	800764e <HAL_DMA_IRQHandler+0xe1a>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a3f      	ldr	r2, [pc, #252]	; (80076bc <HAL_DMA_IRQHandler+0xe88>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d045      	beq.n	800764e <HAL_DMA_IRQHandler+0xe1a>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a3e      	ldr	r2, [pc, #248]	; (80076c0 <HAL_DMA_IRQHandler+0xe8c>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d040      	beq.n	800764e <HAL_DMA_IRQHandler+0xe1a>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a3c      	ldr	r2, [pc, #240]	; (80076c4 <HAL_DMA_IRQHandler+0xe90>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d03b      	beq.n	800764e <HAL_DMA_IRQHandler+0xe1a>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a3b      	ldr	r2, [pc, #236]	; (80076c8 <HAL_DMA_IRQHandler+0xe94>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d036      	beq.n	800764e <HAL_DMA_IRQHandler+0xe1a>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a39      	ldr	r2, [pc, #228]	; (80076cc <HAL_DMA_IRQHandler+0xe98>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d031      	beq.n	800764e <HAL_DMA_IRQHandler+0xe1a>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a38      	ldr	r2, [pc, #224]	; (80076d0 <HAL_DMA_IRQHandler+0xe9c>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d02c      	beq.n	800764e <HAL_DMA_IRQHandler+0xe1a>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a36      	ldr	r2, [pc, #216]	; (80076d4 <HAL_DMA_IRQHandler+0xea0>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d027      	beq.n	800764e <HAL_DMA_IRQHandler+0xe1a>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a35      	ldr	r2, [pc, #212]	; (80076d8 <HAL_DMA_IRQHandler+0xea4>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d022      	beq.n	800764e <HAL_DMA_IRQHandler+0xe1a>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a33      	ldr	r2, [pc, #204]	; (80076dc <HAL_DMA_IRQHandler+0xea8>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d01d      	beq.n	800764e <HAL_DMA_IRQHandler+0xe1a>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a32      	ldr	r2, [pc, #200]	; (80076e0 <HAL_DMA_IRQHandler+0xeac>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d018      	beq.n	800764e <HAL_DMA_IRQHandler+0xe1a>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a30      	ldr	r2, [pc, #192]	; (80076e4 <HAL_DMA_IRQHandler+0xeb0>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d013      	beq.n	800764e <HAL_DMA_IRQHandler+0xe1a>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a2f      	ldr	r2, [pc, #188]	; (80076e8 <HAL_DMA_IRQHandler+0xeb4>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d00e      	beq.n	800764e <HAL_DMA_IRQHandler+0xe1a>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a2d      	ldr	r2, [pc, #180]	; (80076ec <HAL_DMA_IRQHandler+0xeb8>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d009      	beq.n	800764e <HAL_DMA_IRQHandler+0xe1a>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a2c      	ldr	r2, [pc, #176]	; (80076f0 <HAL_DMA_IRQHandler+0xebc>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d004      	beq.n	800764e <HAL_DMA_IRQHandler+0xe1a>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a2a      	ldr	r2, [pc, #168]	; (80076f4 <HAL_DMA_IRQHandler+0xec0>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d108      	bne.n	8007660 <HAL_DMA_IRQHandler+0xe2c>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f022 021c 	bic.w	r2, r2, #28
 800765c:	601a      	str	r2, [r3, #0]
 800765e:	e007      	b.n	8007670 <HAL_DMA_IRQHandler+0xe3c>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f022 020e 	bic.w	r2, r2, #14
 800766e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007674:	f003 031f 	and.w	r3, r3, #31
 8007678:	2201      	movs	r2, #1
 800767a:	409a      	lsls	r2, r3
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2201      	movs	r2, #1
 800768a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800769a:	2b00      	cmp	r3, #0
 800769c:	d009      	beq.n	80076b2 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	4798      	blx	r3
 80076a6:	e004      	b.n	80076b2 <HAL_DMA_IRQHandler+0xe7e>
          return;
 80076a8:	bf00      	nop
 80076aa:	e002      	b.n	80076b2 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80076ac:	bf00      	nop
 80076ae:	e000      	b.n	80076b2 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80076b0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80076b2:	3728      	adds	r7, #40	; 0x28
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	40020010 	.word	0x40020010
 80076bc:	40020028 	.word	0x40020028
 80076c0:	40020040 	.word	0x40020040
 80076c4:	40020058 	.word	0x40020058
 80076c8:	40020070 	.word	0x40020070
 80076cc:	40020088 	.word	0x40020088
 80076d0:	400200a0 	.word	0x400200a0
 80076d4:	400200b8 	.word	0x400200b8
 80076d8:	40020410 	.word	0x40020410
 80076dc:	40020428 	.word	0x40020428
 80076e0:	40020440 	.word	0x40020440
 80076e4:	40020458 	.word	0x40020458
 80076e8:	40020470 	.word	0x40020470
 80076ec:	40020488 	.word	0x40020488
 80076f0:	400204a0 	.word	0x400204a0
 80076f4:	400204b8 	.word	0x400204b8

080076f8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b087      	sub	sp, #28
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	607a      	str	r2, [r7, #4]
 8007704:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800770a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007710:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a7f      	ldr	r2, [pc, #508]	; (8007914 <DMA_SetConfig+0x21c>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d072      	beq.n	8007802 <DMA_SetConfig+0x10a>
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a7d      	ldr	r2, [pc, #500]	; (8007918 <DMA_SetConfig+0x220>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d06d      	beq.n	8007802 <DMA_SetConfig+0x10a>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a7c      	ldr	r2, [pc, #496]	; (800791c <DMA_SetConfig+0x224>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d068      	beq.n	8007802 <DMA_SetConfig+0x10a>
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a7a      	ldr	r2, [pc, #488]	; (8007920 <DMA_SetConfig+0x228>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d063      	beq.n	8007802 <DMA_SetConfig+0x10a>
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a79      	ldr	r2, [pc, #484]	; (8007924 <DMA_SetConfig+0x22c>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d05e      	beq.n	8007802 <DMA_SetConfig+0x10a>
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a77      	ldr	r2, [pc, #476]	; (8007928 <DMA_SetConfig+0x230>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d059      	beq.n	8007802 <DMA_SetConfig+0x10a>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a76      	ldr	r2, [pc, #472]	; (800792c <DMA_SetConfig+0x234>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d054      	beq.n	8007802 <DMA_SetConfig+0x10a>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a74      	ldr	r2, [pc, #464]	; (8007930 <DMA_SetConfig+0x238>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d04f      	beq.n	8007802 <DMA_SetConfig+0x10a>
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a73      	ldr	r2, [pc, #460]	; (8007934 <DMA_SetConfig+0x23c>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d04a      	beq.n	8007802 <DMA_SetConfig+0x10a>
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a71      	ldr	r2, [pc, #452]	; (8007938 <DMA_SetConfig+0x240>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d045      	beq.n	8007802 <DMA_SetConfig+0x10a>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a70      	ldr	r2, [pc, #448]	; (800793c <DMA_SetConfig+0x244>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d040      	beq.n	8007802 <DMA_SetConfig+0x10a>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a6e      	ldr	r2, [pc, #440]	; (8007940 <DMA_SetConfig+0x248>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d03b      	beq.n	8007802 <DMA_SetConfig+0x10a>
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a6d      	ldr	r2, [pc, #436]	; (8007944 <DMA_SetConfig+0x24c>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d036      	beq.n	8007802 <DMA_SetConfig+0x10a>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a6b      	ldr	r2, [pc, #428]	; (8007948 <DMA_SetConfig+0x250>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d031      	beq.n	8007802 <DMA_SetConfig+0x10a>
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a6a      	ldr	r2, [pc, #424]	; (800794c <DMA_SetConfig+0x254>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d02c      	beq.n	8007802 <DMA_SetConfig+0x10a>
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a68      	ldr	r2, [pc, #416]	; (8007950 <DMA_SetConfig+0x258>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d027      	beq.n	8007802 <DMA_SetConfig+0x10a>
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a67      	ldr	r2, [pc, #412]	; (8007954 <DMA_SetConfig+0x25c>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d022      	beq.n	8007802 <DMA_SetConfig+0x10a>
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a65      	ldr	r2, [pc, #404]	; (8007958 <DMA_SetConfig+0x260>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d01d      	beq.n	8007802 <DMA_SetConfig+0x10a>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a64      	ldr	r2, [pc, #400]	; (800795c <DMA_SetConfig+0x264>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d018      	beq.n	8007802 <DMA_SetConfig+0x10a>
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a62      	ldr	r2, [pc, #392]	; (8007960 <DMA_SetConfig+0x268>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d013      	beq.n	8007802 <DMA_SetConfig+0x10a>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a61      	ldr	r2, [pc, #388]	; (8007964 <DMA_SetConfig+0x26c>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d00e      	beq.n	8007802 <DMA_SetConfig+0x10a>
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a5f      	ldr	r2, [pc, #380]	; (8007968 <DMA_SetConfig+0x270>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d009      	beq.n	8007802 <DMA_SetConfig+0x10a>
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a5e      	ldr	r2, [pc, #376]	; (800796c <DMA_SetConfig+0x274>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d004      	beq.n	8007802 <DMA_SetConfig+0x10a>
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a5c      	ldr	r2, [pc, #368]	; (8007970 <DMA_SetConfig+0x278>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d101      	bne.n	8007806 <DMA_SetConfig+0x10e>
 8007802:	2301      	movs	r3, #1
 8007804:	e000      	b.n	8007808 <DMA_SetConfig+0x110>
 8007806:	2300      	movs	r3, #0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00d      	beq.n	8007828 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007814:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800781a:	2b00      	cmp	r3, #0
 800781c:	d004      	beq.n	8007828 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007826:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a39      	ldr	r2, [pc, #228]	; (8007914 <DMA_SetConfig+0x21c>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d04a      	beq.n	80078c8 <DMA_SetConfig+0x1d0>
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a38      	ldr	r2, [pc, #224]	; (8007918 <DMA_SetConfig+0x220>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d045      	beq.n	80078c8 <DMA_SetConfig+0x1d0>
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a36      	ldr	r2, [pc, #216]	; (800791c <DMA_SetConfig+0x224>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d040      	beq.n	80078c8 <DMA_SetConfig+0x1d0>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a35      	ldr	r2, [pc, #212]	; (8007920 <DMA_SetConfig+0x228>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d03b      	beq.n	80078c8 <DMA_SetConfig+0x1d0>
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a33      	ldr	r2, [pc, #204]	; (8007924 <DMA_SetConfig+0x22c>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d036      	beq.n	80078c8 <DMA_SetConfig+0x1d0>
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a32      	ldr	r2, [pc, #200]	; (8007928 <DMA_SetConfig+0x230>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d031      	beq.n	80078c8 <DMA_SetConfig+0x1d0>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a30      	ldr	r2, [pc, #192]	; (800792c <DMA_SetConfig+0x234>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d02c      	beq.n	80078c8 <DMA_SetConfig+0x1d0>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a2f      	ldr	r2, [pc, #188]	; (8007930 <DMA_SetConfig+0x238>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d027      	beq.n	80078c8 <DMA_SetConfig+0x1d0>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a2d      	ldr	r2, [pc, #180]	; (8007934 <DMA_SetConfig+0x23c>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d022      	beq.n	80078c8 <DMA_SetConfig+0x1d0>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a2c      	ldr	r2, [pc, #176]	; (8007938 <DMA_SetConfig+0x240>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d01d      	beq.n	80078c8 <DMA_SetConfig+0x1d0>
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a2a      	ldr	r2, [pc, #168]	; (800793c <DMA_SetConfig+0x244>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d018      	beq.n	80078c8 <DMA_SetConfig+0x1d0>
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a29      	ldr	r2, [pc, #164]	; (8007940 <DMA_SetConfig+0x248>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d013      	beq.n	80078c8 <DMA_SetConfig+0x1d0>
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a27      	ldr	r2, [pc, #156]	; (8007944 <DMA_SetConfig+0x24c>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d00e      	beq.n	80078c8 <DMA_SetConfig+0x1d0>
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a26      	ldr	r2, [pc, #152]	; (8007948 <DMA_SetConfig+0x250>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d009      	beq.n	80078c8 <DMA_SetConfig+0x1d0>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a24      	ldr	r2, [pc, #144]	; (800794c <DMA_SetConfig+0x254>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d004      	beq.n	80078c8 <DMA_SetConfig+0x1d0>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a23      	ldr	r2, [pc, #140]	; (8007950 <DMA_SetConfig+0x258>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d101      	bne.n	80078cc <DMA_SetConfig+0x1d4>
 80078c8:	2301      	movs	r3, #1
 80078ca:	e000      	b.n	80078ce <DMA_SetConfig+0x1d6>
 80078cc:	2300      	movs	r3, #0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d059      	beq.n	8007986 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078d6:	f003 031f 	and.w	r3, r3, #31
 80078da:	223f      	movs	r2, #63	; 0x3f
 80078dc:	409a      	lsls	r2, r3
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80078f0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	683a      	ldr	r2, [r7, #0]
 80078f8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	2b40      	cmp	r3, #64	; 0x40
 8007900:	d138      	bne.n	8007974 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007912:	e0ae      	b.n	8007a72 <DMA_SetConfig+0x37a>
 8007914:	40020010 	.word	0x40020010
 8007918:	40020028 	.word	0x40020028
 800791c:	40020040 	.word	0x40020040
 8007920:	40020058 	.word	0x40020058
 8007924:	40020070 	.word	0x40020070
 8007928:	40020088 	.word	0x40020088
 800792c:	400200a0 	.word	0x400200a0
 8007930:	400200b8 	.word	0x400200b8
 8007934:	40020410 	.word	0x40020410
 8007938:	40020428 	.word	0x40020428
 800793c:	40020440 	.word	0x40020440
 8007940:	40020458 	.word	0x40020458
 8007944:	40020470 	.word	0x40020470
 8007948:	40020488 	.word	0x40020488
 800794c:	400204a0 	.word	0x400204a0
 8007950:	400204b8 	.word	0x400204b8
 8007954:	58025408 	.word	0x58025408
 8007958:	5802541c 	.word	0x5802541c
 800795c:	58025430 	.word	0x58025430
 8007960:	58025444 	.word	0x58025444
 8007964:	58025458 	.word	0x58025458
 8007968:	5802546c 	.word	0x5802546c
 800796c:	58025480 	.word	0x58025480
 8007970:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68ba      	ldr	r2, [r7, #8]
 800797a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	60da      	str	r2, [r3, #12]
}
 8007984:	e075      	b.n	8007a72 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a3d      	ldr	r2, [pc, #244]	; (8007a80 <DMA_SetConfig+0x388>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d04a      	beq.n	8007a26 <DMA_SetConfig+0x32e>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a3b      	ldr	r2, [pc, #236]	; (8007a84 <DMA_SetConfig+0x38c>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d045      	beq.n	8007a26 <DMA_SetConfig+0x32e>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a3a      	ldr	r2, [pc, #232]	; (8007a88 <DMA_SetConfig+0x390>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d040      	beq.n	8007a26 <DMA_SetConfig+0x32e>
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a38      	ldr	r2, [pc, #224]	; (8007a8c <DMA_SetConfig+0x394>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d03b      	beq.n	8007a26 <DMA_SetConfig+0x32e>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a37      	ldr	r2, [pc, #220]	; (8007a90 <DMA_SetConfig+0x398>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d036      	beq.n	8007a26 <DMA_SetConfig+0x32e>
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a35      	ldr	r2, [pc, #212]	; (8007a94 <DMA_SetConfig+0x39c>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d031      	beq.n	8007a26 <DMA_SetConfig+0x32e>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a34      	ldr	r2, [pc, #208]	; (8007a98 <DMA_SetConfig+0x3a0>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d02c      	beq.n	8007a26 <DMA_SetConfig+0x32e>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a32      	ldr	r2, [pc, #200]	; (8007a9c <DMA_SetConfig+0x3a4>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d027      	beq.n	8007a26 <DMA_SetConfig+0x32e>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a31      	ldr	r2, [pc, #196]	; (8007aa0 <DMA_SetConfig+0x3a8>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d022      	beq.n	8007a26 <DMA_SetConfig+0x32e>
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a2f      	ldr	r2, [pc, #188]	; (8007aa4 <DMA_SetConfig+0x3ac>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d01d      	beq.n	8007a26 <DMA_SetConfig+0x32e>
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a2e      	ldr	r2, [pc, #184]	; (8007aa8 <DMA_SetConfig+0x3b0>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d018      	beq.n	8007a26 <DMA_SetConfig+0x32e>
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a2c      	ldr	r2, [pc, #176]	; (8007aac <DMA_SetConfig+0x3b4>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d013      	beq.n	8007a26 <DMA_SetConfig+0x32e>
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a2b      	ldr	r2, [pc, #172]	; (8007ab0 <DMA_SetConfig+0x3b8>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d00e      	beq.n	8007a26 <DMA_SetConfig+0x32e>
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a29      	ldr	r2, [pc, #164]	; (8007ab4 <DMA_SetConfig+0x3bc>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d009      	beq.n	8007a26 <DMA_SetConfig+0x32e>
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a28      	ldr	r2, [pc, #160]	; (8007ab8 <DMA_SetConfig+0x3c0>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d004      	beq.n	8007a26 <DMA_SetConfig+0x32e>
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a26      	ldr	r2, [pc, #152]	; (8007abc <DMA_SetConfig+0x3c4>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d101      	bne.n	8007a2a <DMA_SetConfig+0x332>
 8007a26:	2301      	movs	r3, #1
 8007a28:	e000      	b.n	8007a2c <DMA_SetConfig+0x334>
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d020      	beq.n	8007a72 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a34:	f003 031f 	and.w	r3, r3, #31
 8007a38:	2201      	movs	r2, #1
 8007a3a:	409a      	lsls	r2, r3
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	683a      	ldr	r2, [r7, #0]
 8007a46:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	2b40      	cmp	r3, #64	; 0x40
 8007a4e:	d108      	bne.n	8007a62 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	68ba      	ldr	r2, [r7, #8]
 8007a5e:	60da      	str	r2, [r3, #12]
}
 8007a60:	e007      	b.n	8007a72 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68ba      	ldr	r2, [r7, #8]
 8007a68:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	60da      	str	r2, [r3, #12]
}
 8007a72:	bf00      	nop
 8007a74:	371c      	adds	r7, #28
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	48022c08 	.word	0x48022c08
 8007a84:	48022c1c 	.word	0x48022c1c
 8007a88:	48022c30 	.word	0x48022c30
 8007a8c:	48022c44 	.word	0x48022c44
 8007a90:	48022c58 	.word	0x48022c58
 8007a94:	48022c6c 	.word	0x48022c6c
 8007a98:	48022c80 	.word	0x48022c80
 8007a9c:	48022c94 	.word	0x48022c94
 8007aa0:	58025408 	.word	0x58025408
 8007aa4:	5802541c 	.word	0x5802541c
 8007aa8:	58025430 	.word	0x58025430
 8007aac:	58025444 	.word	0x58025444
 8007ab0:	58025458 	.word	0x58025458
 8007ab4:	5802546c 	.word	0x5802546c
 8007ab8:	58025480 	.word	0x58025480
 8007abc:	58025494 	.word	0x58025494

08007ac0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a42      	ldr	r2, [pc, #264]	; (8007bd8 <DMA_CalcBaseAndBitshift+0x118>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d04a      	beq.n	8007b68 <DMA_CalcBaseAndBitshift+0xa8>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a41      	ldr	r2, [pc, #260]	; (8007bdc <DMA_CalcBaseAndBitshift+0x11c>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d045      	beq.n	8007b68 <DMA_CalcBaseAndBitshift+0xa8>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a3f      	ldr	r2, [pc, #252]	; (8007be0 <DMA_CalcBaseAndBitshift+0x120>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d040      	beq.n	8007b68 <DMA_CalcBaseAndBitshift+0xa8>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a3e      	ldr	r2, [pc, #248]	; (8007be4 <DMA_CalcBaseAndBitshift+0x124>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d03b      	beq.n	8007b68 <DMA_CalcBaseAndBitshift+0xa8>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a3c      	ldr	r2, [pc, #240]	; (8007be8 <DMA_CalcBaseAndBitshift+0x128>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d036      	beq.n	8007b68 <DMA_CalcBaseAndBitshift+0xa8>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a3b      	ldr	r2, [pc, #236]	; (8007bec <DMA_CalcBaseAndBitshift+0x12c>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d031      	beq.n	8007b68 <DMA_CalcBaseAndBitshift+0xa8>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a39      	ldr	r2, [pc, #228]	; (8007bf0 <DMA_CalcBaseAndBitshift+0x130>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d02c      	beq.n	8007b68 <DMA_CalcBaseAndBitshift+0xa8>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a38      	ldr	r2, [pc, #224]	; (8007bf4 <DMA_CalcBaseAndBitshift+0x134>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d027      	beq.n	8007b68 <DMA_CalcBaseAndBitshift+0xa8>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a36      	ldr	r2, [pc, #216]	; (8007bf8 <DMA_CalcBaseAndBitshift+0x138>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d022      	beq.n	8007b68 <DMA_CalcBaseAndBitshift+0xa8>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a35      	ldr	r2, [pc, #212]	; (8007bfc <DMA_CalcBaseAndBitshift+0x13c>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d01d      	beq.n	8007b68 <DMA_CalcBaseAndBitshift+0xa8>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a33      	ldr	r2, [pc, #204]	; (8007c00 <DMA_CalcBaseAndBitshift+0x140>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d018      	beq.n	8007b68 <DMA_CalcBaseAndBitshift+0xa8>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a32      	ldr	r2, [pc, #200]	; (8007c04 <DMA_CalcBaseAndBitshift+0x144>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d013      	beq.n	8007b68 <DMA_CalcBaseAndBitshift+0xa8>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a30      	ldr	r2, [pc, #192]	; (8007c08 <DMA_CalcBaseAndBitshift+0x148>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d00e      	beq.n	8007b68 <DMA_CalcBaseAndBitshift+0xa8>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a2f      	ldr	r2, [pc, #188]	; (8007c0c <DMA_CalcBaseAndBitshift+0x14c>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d009      	beq.n	8007b68 <DMA_CalcBaseAndBitshift+0xa8>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a2d      	ldr	r2, [pc, #180]	; (8007c10 <DMA_CalcBaseAndBitshift+0x150>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d004      	beq.n	8007b68 <DMA_CalcBaseAndBitshift+0xa8>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a2c      	ldr	r2, [pc, #176]	; (8007c14 <DMA_CalcBaseAndBitshift+0x154>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d101      	bne.n	8007b6c <DMA_CalcBaseAndBitshift+0xac>
 8007b68:	2301      	movs	r3, #1
 8007b6a:	e000      	b.n	8007b6e <DMA_CalcBaseAndBitshift+0xae>
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d024      	beq.n	8007bbc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	3b10      	subs	r3, #16
 8007b7a:	4a27      	ldr	r2, [pc, #156]	; (8007c18 <DMA_CalcBaseAndBitshift+0x158>)
 8007b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b80:	091b      	lsrs	r3, r3, #4
 8007b82:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f003 0307 	and.w	r3, r3, #7
 8007b8a:	4a24      	ldr	r2, [pc, #144]	; (8007c1c <DMA_CalcBaseAndBitshift+0x15c>)
 8007b8c:	5cd3      	ldrb	r3, [r2, r3]
 8007b8e:	461a      	mov	r2, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2b03      	cmp	r3, #3
 8007b98:	d908      	bls.n	8007bac <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	4b1f      	ldr	r3, [pc, #124]	; (8007c20 <DMA_CalcBaseAndBitshift+0x160>)
 8007ba2:	4013      	ands	r3, r2
 8007ba4:	1d1a      	adds	r2, r3, #4
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	659a      	str	r2, [r3, #88]	; 0x58
 8007baa:	e00d      	b.n	8007bc8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	4b1b      	ldr	r3, [pc, #108]	; (8007c20 <DMA_CalcBaseAndBitshift+0x160>)
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	6593      	str	r3, [r2, #88]	; 0x58
 8007bba:	e005      	b.n	8007bc8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3714      	adds	r7, #20
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr
 8007bd8:	40020010 	.word	0x40020010
 8007bdc:	40020028 	.word	0x40020028
 8007be0:	40020040 	.word	0x40020040
 8007be4:	40020058 	.word	0x40020058
 8007be8:	40020070 	.word	0x40020070
 8007bec:	40020088 	.word	0x40020088
 8007bf0:	400200a0 	.word	0x400200a0
 8007bf4:	400200b8 	.word	0x400200b8
 8007bf8:	40020410 	.word	0x40020410
 8007bfc:	40020428 	.word	0x40020428
 8007c00:	40020440 	.word	0x40020440
 8007c04:	40020458 	.word	0x40020458
 8007c08:	40020470 	.word	0x40020470
 8007c0c:	40020488 	.word	0x40020488
 8007c10:	400204a0 	.word	0x400204a0
 8007c14:	400204b8 	.word	0x400204b8
 8007c18:	aaaaaaab 	.word	0xaaaaaaab
 8007c1c:	08019918 	.word	0x08019918
 8007c20:	fffffc00 	.word	0xfffffc00

08007c24 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	699b      	ldr	r3, [r3, #24]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d120      	bne.n	8007c7a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c3c:	2b03      	cmp	r3, #3
 8007c3e:	d858      	bhi.n	8007cf2 <DMA_CheckFifoParam+0xce>
 8007c40:	a201      	add	r2, pc, #4	; (adr r2, 8007c48 <DMA_CheckFifoParam+0x24>)
 8007c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c46:	bf00      	nop
 8007c48:	08007c59 	.word	0x08007c59
 8007c4c:	08007c6b 	.word	0x08007c6b
 8007c50:	08007c59 	.word	0x08007c59
 8007c54:	08007cf3 	.word	0x08007cf3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d048      	beq.n	8007cf6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007c68:	e045      	b.n	8007cf6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007c72:	d142      	bne.n	8007cfa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007c78:	e03f      	b.n	8007cfa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	699b      	ldr	r3, [r3, #24]
 8007c7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c82:	d123      	bne.n	8007ccc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c88:	2b03      	cmp	r3, #3
 8007c8a:	d838      	bhi.n	8007cfe <DMA_CheckFifoParam+0xda>
 8007c8c:	a201      	add	r2, pc, #4	; (adr r2, 8007c94 <DMA_CheckFifoParam+0x70>)
 8007c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c92:	bf00      	nop
 8007c94:	08007ca5 	.word	0x08007ca5
 8007c98:	08007cab 	.word	0x08007cab
 8007c9c:	08007ca5 	.word	0x08007ca5
 8007ca0:	08007cbd 	.word	0x08007cbd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	73fb      	strb	r3, [r7, #15]
        break;
 8007ca8:	e030      	b.n	8007d0c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d025      	beq.n	8007d02 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007cba:	e022      	b.n	8007d02 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007cc4:	d11f      	bne.n	8007d06 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007cca:	e01c      	b.n	8007d06 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd0:	2b02      	cmp	r3, #2
 8007cd2:	d902      	bls.n	8007cda <DMA_CheckFifoParam+0xb6>
 8007cd4:	2b03      	cmp	r3, #3
 8007cd6:	d003      	beq.n	8007ce0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007cd8:	e018      	b.n	8007d0c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	73fb      	strb	r3, [r7, #15]
        break;
 8007cde:	e015      	b.n	8007d0c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d00e      	beq.n	8007d0a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	73fb      	strb	r3, [r7, #15]
    break;
 8007cf0:	e00b      	b.n	8007d0a <DMA_CheckFifoParam+0xe6>
        break;
 8007cf2:	bf00      	nop
 8007cf4:	e00a      	b.n	8007d0c <DMA_CheckFifoParam+0xe8>
        break;
 8007cf6:	bf00      	nop
 8007cf8:	e008      	b.n	8007d0c <DMA_CheckFifoParam+0xe8>
        break;
 8007cfa:	bf00      	nop
 8007cfc:	e006      	b.n	8007d0c <DMA_CheckFifoParam+0xe8>
        break;
 8007cfe:	bf00      	nop
 8007d00:	e004      	b.n	8007d0c <DMA_CheckFifoParam+0xe8>
        break;
 8007d02:	bf00      	nop
 8007d04:	e002      	b.n	8007d0c <DMA_CheckFifoParam+0xe8>
        break;
 8007d06:	bf00      	nop
 8007d08:	e000      	b.n	8007d0c <DMA_CheckFifoParam+0xe8>
    break;
 8007d0a:	bf00      	nop
    }
  }

  return status;
 8007d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3714      	adds	r7, #20
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop

08007d1c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a38      	ldr	r2, [pc, #224]	; (8007e10 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d022      	beq.n	8007d7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a36      	ldr	r2, [pc, #216]	; (8007e14 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d01d      	beq.n	8007d7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a35      	ldr	r2, [pc, #212]	; (8007e18 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d018      	beq.n	8007d7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a33      	ldr	r2, [pc, #204]	; (8007e1c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d013      	beq.n	8007d7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a32      	ldr	r2, [pc, #200]	; (8007e20 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d00e      	beq.n	8007d7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a30      	ldr	r2, [pc, #192]	; (8007e24 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d009      	beq.n	8007d7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a2f      	ldr	r2, [pc, #188]	; (8007e28 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d004      	beq.n	8007d7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a2d      	ldr	r2, [pc, #180]	; (8007e2c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d101      	bne.n	8007d7e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e000      	b.n	8007d80 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007d7e:	2300      	movs	r3, #0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d01a      	beq.n	8007dba <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	3b08      	subs	r3, #8
 8007d8c:	4a28      	ldr	r2, [pc, #160]	; (8007e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d92:	091b      	lsrs	r3, r3, #4
 8007d94:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	4b26      	ldr	r3, [pc, #152]	; (8007e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007d9a:	4413      	add	r3, r2
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	461a      	mov	r2, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	4a24      	ldr	r2, [pc, #144]	; (8007e38 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007da8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f003 031f 	and.w	r3, r3, #31
 8007db0:	2201      	movs	r2, #1
 8007db2:	409a      	lsls	r2, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007db8:	e024      	b.n	8007e04 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	3b10      	subs	r3, #16
 8007dc2:	4a1e      	ldr	r2, [pc, #120]	; (8007e3c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8007dc8:	091b      	lsrs	r3, r3, #4
 8007dca:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	4a1c      	ldr	r2, [pc, #112]	; (8007e40 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d806      	bhi.n	8007de2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	4a1b      	ldr	r2, [pc, #108]	; (8007e44 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d902      	bls.n	8007de2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	3308      	adds	r3, #8
 8007de0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	4b18      	ldr	r3, [pc, #96]	; (8007e48 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007de6:	4413      	add	r3, r2
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	461a      	mov	r2, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4a16      	ldr	r2, [pc, #88]	; (8007e4c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007df4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f003 031f 	and.w	r3, r3, #31
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	409a      	lsls	r2, r3
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007e04:	bf00      	nop
 8007e06:	3714      	adds	r7, #20
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr
 8007e10:	58025408 	.word	0x58025408
 8007e14:	5802541c 	.word	0x5802541c
 8007e18:	58025430 	.word	0x58025430
 8007e1c:	58025444 	.word	0x58025444
 8007e20:	58025458 	.word	0x58025458
 8007e24:	5802546c 	.word	0x5802546c
 8007e28:	58025480 	.word	0x58025480
 8007e2c:	58025494 	.word	0x58025494
 8007e30:	cccccccd 	.word	0xcccccccd
 8007e34:	16009600 	.word	0x16009600
 8007e38:	58025880 	.word	0x58025880
 8007e3c:	aaaaaaab 	.word	0xaaaaaaab
 8007e40:	400204b8 	.word	0x400204b8
 8007e44:	4002040f 	.word	0x4002040f
 8007e48:	10008200 	.word	0x10008200
 8007e4c:	40020880 	.word	0x40020880

08007e50 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b085      	sub	sp, #20
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d04a      	beq.n	8007efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2b08      	cmp	r3, #8
 8007e6a:	d847      	bhi.n	8007efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a25      	ldr	r2, [pc, #148]	; (8007f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d022      	beq.n	8007ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a24      	ldr	r2, [pc, #144]	; (8007f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d01d      	beq.n	8007ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a22      	ldr	r2, [pc, #136]	; (8007f10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d018      	beq.n	8007ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a21      	ldr	r2, [pc, #132]	; (8007f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d013      	beq.n	8007ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a1f      	ldr	r2, [pc, #124]	; (8007f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d00e      	beq.n	8007ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a1e      	ldr	r2, [pc, #120]	; (8007f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d009      	beq.n	8007ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a1c      	ldr	r2, [pc, #112]	; (8007f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d004      	beq.n	8007ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a1b      	ldr	r2, [pc, #108]	; (8007f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d101      	bne.n	8007ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e000      	b.n	8007ec2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00a      	beq.n	8007edc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	4b17      	ldr	r3, [pc, #92]	; (8007f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007eca:	4413      	add	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	461a      	mov	r2, r3
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	4a15      	ldr	r2, [pc, #84]	; (8007f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007ed8:	671a      	str	r2, [r3, #112]	; 0x70
 8007eda:	e009      	b.n	8007ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	4b14      	ldr	r3, [pc, #80]	; (8007f30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007ee0:	4413      	add	r3, r2
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	4a11      	ldr	r2, [pc, #68]	; (8007f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007eee:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	409a      	lsls	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007efc:	bf00      	nop
 8007efe:	3714      	adds	r7, #20
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr
 8007f08:	58025408 	.word	0x58025408
 8007f0c:	5802541c 	.word	0x5802541c
 8007f10:	58025430 	.word	0x58025430
 8007f14:	58025444 	.word	0x58025444
 8007f18:	58025458 	.word	0x58025458
 8007f1c:	5802546c 	.word	0x5802546c
 8007f20:	58025480 	.word	0x58025480
 8007f24:	58025494 	.word	0x58025494
 8007f28:	1600963f 	.word	0x1600963f
 8007f2c:	58025940 	.word	0x58025940
 8007f30:	1000823f 	.word	0x1000823f
 8007f34:	40020940 	.word	0x40020940

08007f38 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d101      	bne.n	8007f4a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	e04f      	b.n	8007fea <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d106      	bne.n	8007f64 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f7f8 fdae 	bl	8000ac0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2202      	movs	r2, #2
 8007f68:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	4b20      	ldr	r3, [pc, #128]	; (8007ff4 <HAL_DMA2D_Init+0xbc>)
 8007f74:	4013      	ands	r3, r2
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	6851      	ldr	r1, [r2, #4]
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	69d2      	ldr	r2, [r2, #28]
 8007f7e:	4311      	orrs	r1, r2
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	6812      	ldr	r2, [r2, #0]
 8007f84:	430b      	orrs	r3, r1
 8007f86:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f8e:	4b1a      	ldr	r3, [pc, #104]	; (8007ff8 <HAL_DMA2D_Init+0xc0>)
 8007f90:	4013      	ands	r3, r2
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	6891      	ldr	r1, [r2, #8]
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	6992      	ldr	r2, [r2, #24]
 8007f9a:	4311      	orrs	r1, r2
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	6812      	ldr	r2, [r2, #0]
 8007fa0:	430b      	orrs	r3, r1
 8007fa2:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007faa:	4b14      	ldr	r3, [pc, #80]	; (8007ffc <HAL_DMA2D_Init+0xc4>)
 8007fac:	4013      	ands	r3, r2
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	68d1      	ldr	r1, [r2, #12]
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	6812      	ldr	r2, [r2, #0]
 8007fb6:	430b      	orrs	r3, r1
 8007fb8:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fc0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	691b      	ldr	r3, [r3, #16]
 8007fc8:	051a      	lsls	r2, r3, #20
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	695b      	ldr	r3, [r3, #20]
 8007fce:	055b      	lsls	r3, r3, #21
 8007fd0:	431a      	orrs	r2, r3
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	430a      	orrs	r2, r1
 8007fd8:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3708      	adds	r7, #8
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	fff8ffbf 	.word	0xfff8ffbf
 8007ff8:	fffffef8 	.word	0xfffffef8
 8007ffc:	ffff0000 	.word	0xffff0000

08008000 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b086      	sub	sp, #24
 8008004:	af02      	add	r7, sp, #8
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	607a      	str	r2, [r7, #4]
 800800c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8008014:	2b01      	cmp	r3, #1
 8008016:	d101      	bne.n	800801c <HAL_DMA2D_Start+0x1c>
 8008018:	2302      	movs	r3, #2
 800801a:	e018      	b.n	800804e <HAL_DMA2D_Start+0x4e>
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2201      	movs	r2, #1
 8008020:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2202      	movs	r2, #2
 8008028:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	9300      	str	r3, [sp, #0]
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	68b9      	ldr	r1, [r7, #8]
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	f000 fab4 	bl	80085a4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f042 0201 	orr.w	r2, r2, #1
 800804a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800804c:	2300      	movs	r3, #0
}
 800804e:	4618      	mov	r0, r3
 8008050:	3710      	adds	r7, #16
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b086      	sub	sp, #24
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
 800805e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8008060:	2300      	movs	r3, #0
 8008062:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f003 0301 	and.w	r3, r3, #1
 800806e:	2b00      	cmp	r3, #0
 8008070:	d056      	beq.n	8008120 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8008072:	f7fc fb81 	bl	8004778 <HAL_GetTick>
 8008076:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8008078:	e04b      	b.n	8008112 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8008088:	2b00      	cmp	r3, #0
 800808a:	d023      	beq.n	80080d4 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f003 0320 	and.w	r3, r3, #32
 8008092:	2b00      	cmp	r3, #0
 8008094:	d005      	beq.n	80080a2 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800809a:	f043 0202 	orr.w	r2, r3, #2
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f003 0301 	and.w	r3, r3, #1
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d005      	beq.n	80080b8 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080b0:	f043 0201 	orr.w	r2, r3, #1
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	2221      	movs	r2, #33	; 0x21
 80080be:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2204      	movs	r2, #4
 80080c4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80080d0:	2301      	movs	r3, #1
 80080d2:	e0a5      	b.n	8008220 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080da:	d01a      	beq.n	8008112 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80080dc:	f7fc fb4c 	bl	8004778 <HAL_GetTick>
 80080e0:	4602      	mov	r2, r0
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	1ad3      	subs	r3, r2, r3
 80080e6:	683a      	ldr	r2, [r7, #0]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d302      	bcc.n	80080f2 <HAL_DMA2D_PollForTransfer+0x9c>
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d10f      	bne.n	8008112 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080f6:	f043 0220 	orr.w	r2, r3, #32
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2203      	movs	r2, #3
 8008102:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 800810e:	2303      	movs	r3, #3
 8008110:	e086      	b.n	8008220 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	f003 0302 	and.w	r3, r3, #2
 800811c:	2b00      	cmp	r3, #0
 800811e:	d0ac      	beq.n	800807a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	69db      	ldr	r3, [r3, #28]
 8008126:	f003 0320 	and.w	r3, r3, #32
 800812a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008132:	f003 0320 	and.w	r3, r3, #32
 8008136:	693a      	ldr	r2, [r7, #16]
 8008138:	4313      	orrs	r3, r2
 800813a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d061      	beq.n	8008206 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8008142:	f7fc fb19 	bl	8004778 <HAL_GetTick>
 8008146:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8008148:	e056      	b.n	80081f8 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8008158:	2b00      	cmp	r3, #0
 800815a:	d02e      	beq.n	80081ba <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f003 0308 	and.w	r3, r3, #8
 8008162:	2b00      	cmp	r3, #0
 8008164:	d005      	beq.n	8008172 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800816a:	f043 0204 	orr.w	r2, r3, #4
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f003 0320 	and.w	r3, r3, #32
 8008178:	2b00      	cmp	r3, #0
 800817a:	d005      	beq.n	8008188 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008180:	f043 0202 	orr.w	r2, r3, #2
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f003 0301 	and.w	r3, r3, #1
 800818e:	2b00      	cmp	r3, #0
 8008190:	d005      	beq.n	800819e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008196:	f043 0201 	orr.w	r2, r3, #1
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2229      	movs	r2, #41	; 0x29
 80081a4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2204      	movs	r2, #4
 80081aa:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	e032      	b.n	8008220 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081c0:	d01a      	beq.n	80081f8 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80081c2:	f7fc fad9 	bl	8004778 <HAL_GetTick>
 80081c6:	4602      	mov	r2, r0
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	1ad3      	subs	r3, r2, r3
 80081cc:	683a      	ldr	r2, [r7, #0]
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d302      	bcc.n	80081d8 <HAL_DMA2D_PollForTransfer+0x182>
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d10f      	bne.n	80081f8 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081dc:	f043 0220 	orr.w	r2, r3, #32
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2203      	movs	r2, #3
 80081e8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 80081f4:	2303      	movs	r3, #3
 80081f6:	e013      	b.n	8008220 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	f003 0310 	and.w	r3, r3, #16
 8008202:	2b00      	cmp	r3, #0
 8008204:	d0a1      	beq.n	800814a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2212      	movs	r2, #18
 800820c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2201      	movs	r2, #1
 8008212:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800821e:	2300      	movs	r3, #0
}
 8008220:	4618      	mov	r0, r3
 8008222:	3718      	adds	r7, #24
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f003 0301 	and.w	r3, r3, #1
 8008246:	2b00      	cmp	r3, #0
 8008248:	d026      	beq.n	8008298 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008250:	2b00      	cmp	r3, #0
 8008252:	d021      	beq.n	8008298 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008262:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008268:	f043 0201 	orr.w	r2, r3, #1
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2201      	movs	r2, #1
 8008276:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2204      	movs	r2, #4
 800827c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828c:	2b00      	cmp	r3, #0
 800828e:	d003      	beq.n	8008298 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f003 0320 	and.w	r3, r3, #32
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d026      	beq.n	80082f0 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d021      	beq.n	80082f0 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80082ba:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2220      	movs	r2, #32
 80082c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082c8:	f043 0202 	orr.w	r2, r3, #2
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2204      	movs	r2, #4
 80082d4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d003      	beq.n	80082f0 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f003 0308 	and.w	r3, r3, #8
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d026      	beq.n	8008348 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008300:	2b00      	cmp	r3, #0
 8008302:	d021      	beq.n	8008348 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008312:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	2208      	movs	r2, #8
 800831a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008320:	f043 0204 	orr.w	r2, r3, #4
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2204      	movs	r2, #4
 800832c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833c:	2b00      	cmp	r3, #0
 800833e:	d003      	beq.n	8008348 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f003 0304 	and.w	r3, r3, #4
 800834e:	2b00      	cmp	r3, #0
 8008350:	d013      	beq.n	800837a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008358:	2b00      	cmp	r3, #0
 800835a:	d00e      	beq.n	800837a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800836a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2204      	movs	r2, #4
 8008372:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 f853 	bl	8008420 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f003 0302 	and.w	r3, r3, #2
 8008380:	2b00      	cmp	r3, #0
 8008382:	d024      	beq.n	80083ce <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800838a:	2b00      	cmp	r3, #0
 800838c:	d01f      	beq.n	80083ce <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800839c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2202      	movs	r2, #2
 80083a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2201      	movs	r2, #1
 80083b2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a1b      	ldr	r3, [r3, #32]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d003      	beq.n	80083ce <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a1b      	ldr	r3, [r3, #32]
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f003 0310 	and.w	r3, r3, #16
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d01f      	beq.n	8008418 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d01a      	beq.n	8008418 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80083f0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2210      	movs	r2, #16
 80083f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2201      	movs	r2, #1
 8008406:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 f80e 	bl	8008434 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8008418:	bf00      	nop
 800841a:	3710      	adds	r7, #16
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8008428:	bf00      	nop
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800843c:	bf00      	nop
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8008448:	b480      	push	{r7}
 800844a:	b087      	sub	sp, #28
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8008464:	2b01      	cmp	r3, #1
 8008466:	d101      	bne.n	800846c <HAL_DMA2D_ConfigLayer+0x24>
 8008468:	2302      	movs	r3, #2
 800846a:	e092      	b.n	8008592 <HAL_DMA2D_ConfigLayer+0x14a>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2201      	movs	r2, #1
 8008470:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2202      	movs	r2, #2
 8008478:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800847c:	683a      	ldr	r2, [r7, #0]
 800847e:	4613      	mov	r3, r2
 8008480:	00db      	lsls	r3, r3, #3
 8008482:	1a9b      	subs	r3, r3, r2
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	3328      	adds	r3, #40	; 0x28
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	4413      	add	r3, r2
 800848c:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	685a      	ldr	r2, [r3, #4]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	041b      	lsls	r3, r3, #16
 8008498:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80084a0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	695b      	ldr	r3, [r3, #20]
 80084a6:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80084a8:	4313      	orrs	r3, r2
 80084aa:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80084ac:	4b3c      	ldr	r3, [pc, #240]	; (80085a0 <HAL_DMA2D_ConfigLayer+0x158>)
 80084ae:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	2b0a      	cmp	r3, #10
 80084b6:	d003      	beq.n	80084c0 <HAL_DMA2D_ConfigLayer+0x78>
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	2b09      	cmp	r3, #9
 80084be:	d107      	bne.n	80084d0 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80084c8:	693a      	ldr	r2, [r7, #16]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	613b      	str	r3, [r7, #16]
 80084ce:	e005      	b.n	80084dc <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	061b      	lsls	r3, r3, #24
 80084d6:	693a      	ldr	r2, [r7, #16]
 80084d8:	4313      	orrs	r3, r2
 80084da:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d120      	bne.n	8008524 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	43db      	mvns	r3, r3
 80084ec:	ea02 0103 	and.w	r1, r2, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	693a      	ldr	r2, [r7, #16]
 80084f6:	430a      	orrs	r2, r1
 80084f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	68fa      	ldr	r2, [r7, #12]
 8008500:	6812      	ldr	r2, [r2, #0]
 8008502:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	2b0a      	cmp	r3, #10
 800850a:	d003      	beq.n	8008514 <HAL_DMA2D_ConfigLayer+0xcc>
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	2b09      	cmp	r3, #9
 8008512:	d135      	bne.n	8008580 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	68da      	ldr	r2, [r3, #12]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8008520:	629a      	str	r2, [r3, #40]	; 0x28
 8008522:	e02d      	b.n	8008580 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	2b0b      	cmp	r3, #11
 800852a:	d109      	bne.n	8008540 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	699b      	ldr	r3, [r3, #24]
 8008530:	049b      	lsls	r3, r3, #18
 8008532:	693a      	ldr	r2, [r7, #16]
 8008534:	4313      	orrs	r3, r2
 8008536:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800853e:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	69da      	ldr	r2, [r3, #28]
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	43db      	mvns	r3, r3
 800854a:	ea02 0103 	and.w	r1, r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	693a      	ldr	r2, [r7, #16]
 8008554:	430a      	orrs	r2, r1
 8008556:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	6812      	ldr	r2, [r2, #0]
 8008560:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	2b0a      	cmp	r3, #10
 8008568:	d003      	beq.n	8008572 <HAL_DMA2D_ConfigLayer+0x12a>
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	2b09      	cmp	r3, #9
 8008570:	d106      	bne.n	8008580 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	68da      	ldr	r2, [r3, #12]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800857e:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2201      	movs	r2, #1
 8008584:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8008590:	2300      	movs	r3, #0
}
 8008592:	4618      	mov	r0, r3
 8008594:	371c      	adds	r7, #28
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr
 800859e:	bf00      	nop
 80085a0:	ff33000f 	.word	0xff33000f

080085a4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b08b      	sub	sp, #44	; 0x2c
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	607a      	str	r2, [r7, #4]
 80085b0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085b8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	041a      	lsls	r2, r3, #16
 80085c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c2:	431a      	orrs	r2, r3
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	430a      	orrs	r2, r1
 80085ca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80085dc:	d174      	bne.n	80086c8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80085e4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80085ec:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80085f4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d108      	bne.n	8008616 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8008604:	69ba      	ldr	r2, [r7, #24]
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	431a      	orrs	r2, r3
 800860a:	6a3b      	ldr	r3, [r7, #32]
 800860c:	4313      	orrs	r3, r2
 800860e:	697a      	ldr	r2, [r7, #20]
 8008610:	4313      	orrs	r3, r2
 8008612:	627b      	str	r3, [r7, #36]	; 0x24
 8008614:	e053      	b.n	80086be <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	2b01      	cmp	r3, #1
 800861c:	d106      	bne.n	800862c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800861e:	69ba      	ldr	r2, [r7, #24]
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	4313      	orrs	r3, r2
 8008624:	697a      	ldr	r2, [r7, #20]
 8008626:	4313      	orrs	r3, r2
 8008628:	627b      	str	r3, [r7, #36]	; 0x24
 800862a:	e048      	b.n	80086be <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	2b02      	cmp	r3, #2
 8008632:	d111      	bne.n	8008658 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	0cdb      	lsrs	r3, r3, #19
 8008638:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800863a:	69bb      	ldr	r3, [r7, #24]
 800863c:	0a9b      	lsrs	r3, r3, #10
 800863e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	08db      	lsrs	r3, r3, #3
 8008644:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	015a      	lsls	r2, r3, #5
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	02db      	lsls	r3, r3, #11
 800864e:	4313      	orrs	r3, r2
 8008650:	697a      	ldr	r2, [r7, #20]
 8008652:	4313      	orrs	r3, r2
 8008654:	627b      	str	r3, [r7, #36]	; 0x24
 8008656:	e032      	b.n	80086be <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	2b03      	cmp	r3, #3
 800865e:	d117      	bne.n	8008690 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8008660:	6a3b      	ldr	r3, [r7, #32]
 8008662:	0fdb      	lsrs	r3, r3, #31
 8008664:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	0cdb      	lsrs	r3, r3, #19
 800866a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	0adb      	lsrs	r3, r3, #11
 8008670:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	08db      	lsrs	r3, r3, #3
 8008676:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8008678:	69bb      	ldr	r3, [r7, #24]
 800867a:	015a      	lsls	r2, r3, #5
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	029b      	lsls	r3, r3, #10
 8008680:	431a      	orrs	r2, r3
 8008682:	6a3b      	ldr	r3, [r7, #32]
 8008684:	03db      	lsls	r3, r3, #15
 8008686:	4313      	orrs	r3, r2
 8008688:	697a      	ldr	r2, [r7, #20]
 800868a:	4313      	orrs	r3, r2
 800868c:	627b      	str	r3, [r7, #36]	; 0x24
 800868e:	e016      	b.n	80086be <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8008690:	6a3b      	ldr	r3, [r7, #32]
 8008692:	0f1b      	lsrs	r3, r3, #28
 8008694:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	0d1b      	lsrs	r3, r3, #20
 800869a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800869c:	69bb      	ldr	r3, [r7, #24]
 800869e:	0b1b      	lsrs	r3, r3, #12
 80086a0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	091b      	lsrs	r3, r3, #4
 80086a6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	011a      	lsls	r2, r3, #4
 80086ac:	69fb      	ldr	r3, [r7, #28]
 80086ae:	021b      	lsls	r3, r3, #8
 80086b0:	431a      	orrs	r2, r3
 80086b2:	6a3b      	ldr	r3, [r7, #32]
 80086b4:	031b      	lsls	r3, r3, #12
 80086b6:	4313      	orrs	r3, r2
 80086b8:	697a      	ldr	r2, [r7, #20]
 80086ba:	4313      	orrs	r3, r2
 80086bc:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086c4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80086c6:	e00d      	b.n	80086e4 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80086d0:	d104      	bne.n	80086dc <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	68ba      	ldr	r2, [r7, #8]
 80086d8:	615a      	str	r2, [r3, #20]
}
 80086da:	e003      	b.n	80086e4 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	68ba      	ldr	r2, [r7, #8]
 80086e2:	60da      	str	r2, [r3, #12]
}
 80086e4:	bf00      	nop
 80086e6:	372c      	adds	r7, #44	; 0x2c
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b086      	sub	sp, #24
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	60b9      	str	r1, [r7, #8]
 80086fa:	607a      	str	r2, [r7, #4]
 80086fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086fe:	2300      	movs	r3, #0
 8008700:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	2b80      	cmp	r3, #128	; 0x80
 8008708:	d105      	bne.n	8008716 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008710:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	e315      	b.n	8008d42 <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800871c:	2b01      	cmp	r3, #1
 800871e:	d101      	bne.n	8008724 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8008720:	2302      	movs	r3, #2
 8008722:	e30e      	b.n	8008d42 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008732:	b2db      	uxtb	r3, r3
 8008734:	2b01      	cmp	r3, #1
 8008736:	f040 82fd 	bne.w	8008d34 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2202      	movs	r2, #2
 800873e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a82      	ldr	r2, [pc, #520]	; (8008958 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d04a      	beq.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a81      	ldr	r2, [pc, #516]	; (800895c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d045      	beq.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a7f      	ldr	r2, [pc, #508]	; (8008960 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d040      	beq.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a7e      	ldr	r2, [pc, #504]	; (8008964 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d03b      	beq.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a7c      	ldr	r2, [pc, #496]	; (8008968 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d036      	beq.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a7b      	ldr	r2, [pc, #492]	; (800896c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d031      	beq.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a79      	ldr	r2, [pc, #484]	; (8008970 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d02c      	beq.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a78      	ldr	r2, [pc, #480]	; (8008974 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d027      	beq.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a76      	ldr	r2, [pc, #472]	; (8008978 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d022      	beq.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a75      	ldr	r2, [pc, #468]	; (800897c <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d01d      	beq.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a73      	ldr	r2, [pc, #460]	; (8008980 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d018      	beq.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a72      	ldr	r2, [pc, #456]	; (8008984 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d013      	beq.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a70      	ldr	r2, [pc, #448]	; (8008988 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d00e      	beq.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a6f      	ldr	r2, [pc, #444]	; (800898c <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d009      	beq.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a6d      	ldr	r2, [pc, #436]	; (8008990 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d004      	beq.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a6c      	ldr	r2, [pc, #432]	; (8008994 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d101      	bne.n	80087ec <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 80087e8:	2301      	movs	r3, #1
 80087ea:	e000      	b.n	80087ee <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 80087ec:	2300      	movs	r3, #0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d018      	beq.n	8008824 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008800:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	683a      	ldr	r2, [r7, #0]
 8008808:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800880e:	3308      	adds	r3, #8
 8008810:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008816:	f003 031f 	and.w	r3, r3, #31
 800881a:	223f      	movs	r2, #63	; 0x3f
 800881c:	409a      	lsls	r2, r3
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	601a      	str	r2, [r3, #0]
 8008822:	e018      	b.n	8008856 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	6819      	ldr	r1, [r3, #0]
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	f248 0320 	movw	r3, #32800	; 0x8020
 8008832:	430b      	orrs	r3, r1
 8008834:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	683a      	ldr	r2, [r7, #0]
 800883c:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008842:	3304      	adds	r3, #4
 8008844:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800884a:	f003 031f 	and.w	r3, r3, #31
 800884e:	2201      	movs	r2, #1
 8008850:	409a      	lsls	r2, r3
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008856:	6a3b      	ldr	r3, [r7, #32]
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	68b9      	ldr	r1, [r7, #8]
 800885c:	68f8      	ldr	r0, [r7, #12]
 800885e:	f000 fb41 	bl	8008ee4 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a3c      	ldr	r2, [pc, #240]	; (8008958 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d072      	beq.n	8008952 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a3a      	ldr	r2, [pc, #232]	; (800895c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d06d      	beq.n	8008952 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a39      	ldr	r2, [pc, #228]	; (8008960 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d068      	beq.n	8008952 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a37      	ldr	r2, [pc, #220]	; (8008964 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d063      	beq.n	8008952 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a36      	ldr	r2, [pc, #216]	; (8008968 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d05e      	beq.n	8008952 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a34      	ldr	r2, [pc, #208]	; (800896c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d059      	beq.n	8008952 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a33      	ldr	r2, [pc, #204]	; (8008970 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d054      	beq.n	8008952 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a31      	ldr	r2, [pc, #196]	; (8008974 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d04f      	beq.n	8008952 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a30      	ldr	r2, [pc, #192]	; (8008978 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d04a      	beq.n	8008952 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a2e      	ldr	r2, [pc, #184]	; (800897c <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d045      	beq.n	8008952 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a2d      	ldr	r2, [pc, #180]	; (8008980 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d040      	beq.n	8008952 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a2b      	ldr	r2, [pc, #172]	; (8008984 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d03b      	beq.n	8008952 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a2a      	ldr	r2, [pc, #168]	; (8008988 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d036      	beq.n	8008952 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a28      	ldr	r2, [pc, #160]	; (800898c <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d031      	beq.n	8008952 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a27      	ldr	r2, [pc, #156]	; (8008990 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d02c      	beq.n	8008952 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a25      	ldr	r2, [pc, #148]	; (8008994 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d027      	beq.n	8008952 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a24      	ldr	r2, [pc, #144]	; (8008998 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d022      	beq.n	8008952 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a22      	ldr	r2, [pc, #136]	; (800899c <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d01d      	beq.n	8008952 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a21      	ldr	r2, [pc, #132]	; (80089a0 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d018      	beq.n	8008952 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a1f      	ldr	r2, [pc, #124]	; (80089a4 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d013      	beq.n	8008952 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a1e      	ldr	r2, [pc, #120]	; (80089a8 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d00e      	beq.n	8008952 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a1c      	ldr	r2, [pc, #112]	; (80089ac <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d009      	beq.n	8008952 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a1b      	ldr	r2, [pc, #108]	; (80089b0 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d004      	beq.n	8008952 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a19      	ldr	r2, [pc, #100]	; (80089b4 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d132      	bne.n	80089b8 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8008952:	2301      	movs	r3, #1
 8008954:	e031      	b.n	80089ba <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8008956:	bf00      	nop
 8008958:	40020010 	.word	0x40020010
 800895c:	40020028 	.word	0x40020028
 8008960:	40020040 	.word	0x40020040
 8008964:	40020058 	.word	0x40020058
 8008968:	40020070 	.word	0x40020070
 800896c:	40020088 	.word	0x40020088
 8008970:	400200a0 	.word	0x400200a0
 8008974:	400200b8 	.word	0x400200b8
 8008978:	40020410 	.word	0x40020410
 800897c:	40020428 	.word	0x40020428
 8008980:	40020440 	.word	0x40020440
 8008984:	40020458 	.word	0x40020458
 8008988:	40020470 	.word	0x40020470
 800898c:	40020488 	.word	0x40020488
 8008990:	400204a0 	.word	0x400204a0
 8008994:	400204b8 	.word	0x400204b8
 8008998:	58025408 	.word	0x58025408
 800899c:	5802541c 	.word	0x5802541c
 80089a0:	58025430 	.word	0x58025430
 80089a4:	58025444 	.word	0x58025444
 80089a8:	58025458 	.word	0x58025458
 80089ac:	5802546c 	.word	0x5802546c
 80089b0:	58025480 	.word	0x58025480
 80089b4:	58025494 	.word	0x58025494
 80089b8:	2300      	movs	r3, #0
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00d      	beq.n	80089da <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089c2:	68fa      	ldr	r2, [r7, #12]
 80089c4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80089c6:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d004      	beq.n	80089da <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089d4:	68fa      	ldr	r2, [r7, #12]
 80089d6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80089d8:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a3b      	ldr	r2, [pc, #236]	; (8008acc <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d04a      	beq.n	8008a7a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a39      	ldr	r2, [pc, #228]	; (8008ad0 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d045      	beq.n	8008a7a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a38      	ldr	r2, [pc, #224]	; (8008ad4 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d040      	beq.n	8008a7a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a36      	ldr	r2, [pc, #216]	; (8008ad8 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d03b      	beq.n	8008a7a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a35      	ldr	r2, [pc, #212]	; (8008adc <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d036      	beq.n	8008a7a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a33      	ldr	r2, [pc, #204]	; (8008ae0 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d031      	beq.n	8008a7a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a32      	ldr	r2, [pc, #200]	; (8008ae4 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d02c      	beq.n	8008a7a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a30      	ldr	r2, [pc, #192]	; (8008ae8 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d027      	beq.n	8008a7a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4a2f      	ldr	r2, [pc, #188]	; (8008aec <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d022      	beq.n	8008a7a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a2d      	ldr	r2, [pc, #180]	; (8008af0 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d01d      	beq.n	8008a7a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a2c      	ldr	r2, [pc, #176]	; (8008af4 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d018      	beq.n	8008a7a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a2a      	ldr	r2, [pc, #168]	; (8008af8 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d013      	beq.n	8008a7a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a29      	ldr	r2, [pc, #164]	; (8008afc <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d00e      	beq.n	8008a7a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a27      	ldr	r2, [pc, #156]	; (8008b00 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d009      	beq.n	8008a7a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a26      	ldr	r2, [pc, #152]	; (8008b04 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d004      	beq.n	8008a7a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a24      	ldr	r2, [pc, #144]	; (8008b08 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d101      	bne.n	8008a7e <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	e000      	b.n	8008a80 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8008a7e:	2300      	movs	r3, #0
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d043      	beq.n	8008b0c <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f023 021e 	bic.w	r2, r3, #30
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f042 0216 	orr.w	r2, r2, #22
 8008a96:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	695a      	ldr	r2, [r3, #20]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008aa6:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d103      	bne.n	8008ab8 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d043      	beq.n	8008b40 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f042 0208 	orr.w	r2, r2, #8
 8008ac6:	601a      	str	r2, [r3, #0]
 8008ac8:	e03a      	b.n	8008b40 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8008aca:	bf00      	nop
 8008acc:	40020010 	.word	0x40020010
 8008ad0:	40020028 	.word	0x40020028
 8008ad4:	40020040 	.word	0x40020040
 8008ad8:	40020058 	.word	0x40020058
 8008adc:	40020070 	.word	0x40020070
 8008ae0:	40020088 	.word	0x40020088
 8008ae4:	400200a0 	.word	0x400200a0
 8008ae8:	400200b8 	.word	0x400200b8
 8008aec:	40020410 	.word	0x40020410
 8008af0:	40020428 	.word	0x40020428
 8008af4:	40020440 	.word	0x40020440
 8008af8:	40020458 	.word	0x40020458
 8008afc:	40020470 	.word	0x40020470
 8008b00:	40020488 	.word	0x40020488
 8008b04:	400204a0 	.word	0x400204a0
 8008b08:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f023 020e 	bic.w	r2, r3, #14
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f042 020a 	orr.w	r2, r2, #10
 8008b1e:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d103      	bne.n	8008b30 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d007      	beq.n	8008b40 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f042 0204 	orr.w	r2, r2, #4
 8008b3e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a81      	ldr	r2, [pc, #516]	; (8008d4c <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d072      	beq.n	8008c30 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a80      	ldr	r2, [pc, #512]	; (8008d50 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d06d      	beq.n	8008c30 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a7e      	ldr	r2, [pc, #504]	; (8008d54 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d068      	beq.n	8008c30 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a7d      	ldr	r2, [pc, #500]	; (8008d58 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d063      	beq.n	8008c30 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a7b      	ldr	r2, [pc, #492]	; (8008d5c <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d05e      	beq.n	8008c30 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a7a      	ldr	r2, [pc, #488]	; (8008d60 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d059      	beq.n	8008c30 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a78      	ldr	r2, [pc, #480]	; (8008d64 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d054      	beq.n	8008c30 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a77      	ldr	r2, [pc, #476]	; (8008d68 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d04f      	beq.n	8008c30 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a75      	ldr	r2, [pc, #468]	; (8008d6c <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d04a      	beq.n	8008c30 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a74      	ldr	r2, [pc, #464]	; (8008d70 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d045      	beq.n	8008c30 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a72      	ldr	r2, [pc, #456]	; (8008d74 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d040      	beq.n	8008c30 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a71      	ldr	r2, [pc, #452]	; (8008d78 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d03b      	beq.n	8008c30 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a6f      	ldr	r2, [pc, #444]	; (8008d7c <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d036      	beq.n	8008c30 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a6e      	ldr	r2, [pc, #440]	; (8008d80 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d031      	beq.n	8008c30 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a6c      	ldr	r2, [pc, #432]	; (8008d84 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d02c      	beq.n	8008c30 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a6b      	ldr	r2, [pc, #428]	; (8008d88 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d027      	beq.n	8008c30 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a69      	ldr	r2, [pc, #420]	; (8008d8c <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d022      	beq.n	8008c30 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a68      	ldr	r2, [pc, #416]	; (8008d90 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d01d      	beq.n	8008c30 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a66      	ldr	r2, [pc, #408]	; (8008d94 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d018      	beq.n	8008c30 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a65      	ldr	r2, [pc, #404]	; (8008d98 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d013      	beq.n	8008c30 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a63      	ldr	r2, [pc, #396]	; (8008d9c <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d00e      	beq.n	8008c30 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a62      	ldr	r2, [pc, #392]	; (8008da0 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d009      	beq.n	8008c30 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a60      	ldr	r2, [pc, #384]	; (8008da4 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d004      	beq.n	8008c30 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a5f      	ldr	r2, [pc, #380]	; (8008da8 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d101      	bne.n	8008c34 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8008c30:	2301      	movs	r3, #1
 8008c32:	e000      	b.n	8008c36 <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8008c34:	2300      	movs	r3, #0
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d01a      	beq.n	8008c70 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d007      	beq.n	8008c58 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c56:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d007      	beq.n	8008c70 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c6e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a35      	ldr	r2, [pc, #212]	; (8008d4c <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d04a      	beq.n	8008d10 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a34      	ldr	r2, [pc, #208]	; (8008d50 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d045      	beq.n	8008d10 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a32      	ldr	r2, [pc, #200]	; (8008d54 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d040      	beq.n	8008d10 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a31      	ldr	r2, [pc, #196]	; (8008d58 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d03b      	beq.n	8008d10 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a2f      	ldr	r2, [pc, #188]	; (8008d5c <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d036      	beq.n	8008d10 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a2e      	ldr	r2, [pc, #184]	; (8008d60 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d031      	beq.n	8008d10 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a2c      	ldr	r2, [pc, #176]	; (8008d64 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d02c      	beq.n	8008d10 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a2b      	ldr	r2, [pc, #172]	; (8008d68 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d027      	beq.n	8008d10 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a29      	ldr	r2, [pc, #164]	; (8008d6c <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d022      	beq.n	8008d10 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a28      	ldr	r2, [pc, #160]	; (8008d70 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d01d      	beq.n	8008d10 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a26      	ldr	r2, [pc, #152]	; (8008d74 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d018      	beq.n	8008d10 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a25      	ldr	r2, [pc, #148]	; (8008d78 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d013      	beq.n	8008d10 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a23      	ldr	r2, [pc, #140]	; (8008d7c <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d00e      	beq.n	8008d10 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a22      	ldr	r2, [pc, #136]	; (8008d80 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d009      	beq.n	8008d10 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a20      	ldr	r2, [pc, #128]	; (8008d84 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d004      	beq.n	8008d10 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a1f      	ldr	r2, [pc, #124]	; (8008d88 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d108      	bne.n	8008d22 <HAL_DMAEx_MultiBufferStart_IT+0x632>
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f042 0201 	orr.w	r2, r2, #1
 8008d1e:	601a      	str	r2, [r3, #0]
 8008d20:	e00e      	b.n	8008d40 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f042 0201 	orr.w	r2, r2, #1
 8008d30:	601a      	str	r2, [r3, #0]
 8008d32:	e005      	b.n	8008d40 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d3a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3718      	adds	r7, #24
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	40020010 	.word	0x40020010
 8008d50:	40020028 	.word	0x40020028
 8008d54:	40020040 	.word	0x40020040
 8008d58:	40020058 	.word	0x40020058
 8008d5c:	40020070 	.word	0x40020070
 8008d60:	40020088 	.word	0x40020088
 8008d64:	400200a0 	.word	0x400200a0
 8008d68:	400200b8 	.word	0x400200b8
 8008d6c:	40020410 	.word	0x40020410
 8008d70:	40020428 	.word	0x40020428
 8008d74:	40020440 	.word	0x40020440
 8008d78:	40020458 	.word	0x40020458
 8008d7c:	40020470 	.word	0x40020470
 8008d80:	40020488 	.word	0x40020488
 8008d84:	400204a0 	.word	0x400204a0
 8008d88:	400204b8 	.word	0x400204b8
 8008d8c:	58025408 	.word	0x58025408
 8008d90:	5802541c 	.word	0x5802541c
 8008d94:	58025430 	.word	0x58025430
 8008d98:	58025444 	.word	0x58025444
 8008d9c:	58025458 	.word	0x58025458
 8008da0:	5802546c 	.word	0x5802546c
 8008da4:	58025480 	.word	0x58025480
 8008da8:	58025494 	.word	0x58025494

08008dac <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b085      	sub	sp, #20
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	4613      	mov	r3, r2
 8008db8:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a39      	ldr	r2, [pc, #228]	; (8008ea4 <HAL_DMAEx_ChangeMemory+0xf8>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d04a      	beq.n	8008e5a <HAL_DMAEx_ChangeMemory+0xae>
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a37      	ldr	r2, [pc, #220]	; (8008ea8 <HAL_DMAEx_ChangeMemory+0xfc>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d045      	beq.n	8008e5a <HAL_DMAEx_ChangeMemory+0xae>
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a36      	ldr	r2, [pc, #216]	; (8008eac <HAL_DMAEx_ChangeMemory+0x100>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d040      	beq.n	8008e5a <HAL_DMAEx_ChangeMemory+0xae>
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a34      	ldr	r2, [pc, #208]	; (8008eb0 <HAL_DMAEx_ChangeMemory+0x104>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d03b      	beq.n	8008e5a <HAL_DMAEx_ChangeMemory+0xae>
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a33      	ldr	r2, [pc, #204]	; (8008eb4 <HAL_DMAEx_ChangeMemory+0x108>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d036      	beq.n	8008e5a <HAL_DMAEx_ChangeMemory+0xae>
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a31      	ldr	r2, [pc, #196]	; (8008eb8 <HAL_DMAEx_ChangeMemory+0x10c>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d031      	beq.n	8008e5a <HAL_DMAEx_ChangeMemory+0xae>
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a30      	ldr	r2, [pc, #192]	; (8008ebc <HAL_DMAEx_ChangeMemory+0x110>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d02c      	beq.n	8008e5a <HAL_DMAEx_ChangeMemory+0xae>
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a2e      	ldr	r2, [pc, #184]	; (8008ec0 <HAL_DMAEx_ChangeMemory+0x114>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d027      	beq.n	8008e5a <HAL_DMAEx_ChangeMemory+0xae>
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a2d      	ldr	r2, [pc, #180]	; (8008ec4 <HAL_DMAEx_ChangeMemory+0x118>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d022      	beq.n	8008e5a <HAL_DMAEx_ChangeMemory+0xae>
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a2b      	ldr	r2, [pc, #172]	; (8008ec8 <HAL_DMAEx_ChangeMemory+0x11c>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d01d      	beq.n	8008e5a <HAL_DMAEx_ChangeMemory+0xae>
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a2a      	ldr	r2, [pc, #168]	; (8008ecc <HAL_DMAEx_ChangeMemory+0x120>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d018      	beq.n	8008e5a <HAL_DMAEx_ChangeMemory+0xae>
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a28      	ldr	r2, [pc, #160]	; (8008ed0 <HAL_DMAEx_ChangeMemory+0x124>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d013      	beq.n	8008e5a <HAL_DMAEx_ChangeMemory+0xae>
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a27      	ldr	r2, [pc, #156]	; (8008ed4 <HAL_DMAEx_ChangeMemory+0x128>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d00e      	beq.n	8008e5a <HAL_DMAEx_ChangeMemory+0xae>
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a25      	ldr	r2, [pc, #148]	; (8008ed8 <HAL_DMAEx_ChangeMemory+0x12c>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d009      	beq.n	8008e5a <HAL_DMAEx_ChangeMemory+0xae>
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a24      	ldr	r2, [pc, #144]	; (8008edc <HAL_DMAEx_ChangeMemory+0x130>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d004      	beq.n	8008e5a <HAL_DMAEx_ChangeMemory+0xae>
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a22      	ldr	r2, [pc, #136]	; (8008ee0 <HAL_DMAEx_ChangeMemory+0x134>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d101      	bne.n	8008e5e <HAL_DMAEx_ChangeMemory+0xb2>
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	e000      	b.n	8008e60 <HAL_DMAEx_ChangeMemory+0xb4>
 8008e5e:	2300      	movs	r3, #0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d00c      	beq.n	8008e7e <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 8008e64:	79fb      	ldrb	r3, [r7, #7]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d104      	bne.n	8008e74 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	68ba      	ldr	r2, [r7, #8]
 8008e70:	60da      	str	r2, [r3, #12]
 8008e72:	e010      	b.n	8008e96 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	68ba      	ldr	r2, [r7, #8]
 8008e7a:	611a      	str	r2, [r3, #16]
 8008e7c:	e00b      	b.n	8008e96 <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 8008e7e:	79fb      	ldrb	r3, [r7, #7]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d104      	bne.n	8008e8e <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68ba      	ldr	r2, [r7, #8]
 8008e8a:	60da      	str	r2, [r3, #12]
 8008e8c:	e003      	b.n	8008e96 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	68ba      	ldr	r2, [r7, #8]
 8008e94:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 8008e96:	2300      	movs	r3, #0
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3714      	adds	r7, #20
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr
 8008ea4:	40020010 	.word	0x40020010
 8008ea8:	40020028 	.word	0x40020028
 8008eac:	40020040 	.word	0x40020040
 8008eb0:	40020058 	.word	0x40020058
 8008eb4:	40020070 	.word	0x40020070
 8008eb8:	40020088 	.word	0x40020088
 8008ebc:	400200a0 	.word	0x400200a0
 8008ec0:	400200b8 	.word	0x400200b8
 8008ec4:	40020410 	.word	0x40020410
 8008ec8:	40020428 	.word	0x40020428
 8008ecc:	40020440 	.word	0x40020440
 8008ed0:	40020458 	.word	0x40020458
 8008ed4:	40020470 	.word	0x40020470
 8008ed8:	40020488 	.word	0x40020488
 8008edc:	400204a0 	.word	0x400204a0
 8008ee0:	400204b8 	.word	0x400204b8

08008ee4 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b085      	sub	sp, #20
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	607a      	str	r2, [r7, #4]
 8008ef0:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a46      	ldr	r2, [pc, #280]	; (8009010 <DMA_MultiBufferSetConfig+0x12c>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d04a      	beq.n	8008f92 <DMA_MultiBufferSetConfig+0xae>
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a44      	ldr	r2, [pc, #272]	; (8009014 <DMA_MultiBufferSetConfig+0x130>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d045      	beq.n	8008f92 <DMA_MultiBufferSetConfig+0xae>
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a43      	ldr	r2, [pc, #268]	; (8009018 <DMA_MultiBufferSetConfig+0x134>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d040      	beq.n	8008f92 <DMA_MultiBufferSetConfig+0xae>
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a41      	ldr	r2, [pc, #260]	; (800901c <DMA_MultiBufferSetConfig+0x138>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d03b      	beq.n	8008f92 <DMA_MultiBufferSetConfig+0xae>
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a40      	ldr	r2, [pc, #256]	; (8009020 <DMA_MultiBufferSetConfig+0x13c>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d036      	beq.n	8008f92 <DMA_MultiBufferSetConfig+0xae>
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a3e      	ldr	r2, [pc, #248]	; (8009024 <DMA_MultiBufferSetConfig+0x140>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d031      	beq.n	8008f92 <DMA_MultiBufferSetConfig+0xae>
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4a3d      	ldr	r2, [pc, #244]	; (8009028 <DMA_MultiBufferSetConfig+0x144>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d02c      	beq.n	8008f92 <DMA_MultiBufferSetConfig+0xae>
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a3b      	ldr	r2, [pc, #236]	; (800902c <DMA_MultiBufferSetConfig+0x148>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d027      	beq.n	8008f92 <DMA_MultiBufferSetConfig+0xae>
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a3a      	ldr	r2, [pc, #232]	; (8009030 <DMA_MultiBufferSetConfig+0x14c>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d022      	beq.n	8008f92 <DMA_MultiBufferSetConfig+0xae>
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a38      	ldr	r2, [pc, #224]	; (8009034 <DMA_MultiBufferSetConfig+0x150>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d01d      	beq.n	8008f92 <DMA_MultiBufferSetConfig+0xae>
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a37      	ldr	r2, [pc, #220]	; (8009038 <DMA_MultiBufferSetConfig+0x154>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d018      	beq.n	8008f92 <DMA_MultiBufferSetConfig+0xae>
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a35      	ldr	r2, [pc, #212]	; (800903c <DMA_MultiBufferSetConfig+0x158>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d013      	beq.n	8008f92 <DMA_MultiBufferSetConfig+0xae>
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a34      	ldr	r2, [pc, #208]	; (8009040 <DMA_MultiBufferSetConfig+0x15c>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d00e      	beq.n	8008f92 <DMA_MultiBufferSetConfig+0xae>
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a32      	ldr	r2, [pc, #200]	; (8009044 <DMA_MultiBufferSetConfig+0x160>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d009      	beq.n	8008f92 <DMA_MultiBufferSetConfig+0xae>
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a31      	ldr	r2, [pc, #196]	; (8009048 <DMA_MultiBufferSetConfig+0x164>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d004      	beq.n	8008f92 <DMA_MultiBufferSetConfig+0xae>
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a2f      	ldr	r2, [pc, #188]	; (800904c <DMA_MultiBufferSetConfig+0x168>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d101      	bne.n	8008f96 <DMA_MultiBufferSetConfig+0xb2>
 8008f92:	2301      	movs	r3, #1
 8008f94:	e000      	b.n	8008f98 <DMA_MultiBufferSetConfig+0xb4>
 8008f96:	2300      	movs	r3, #0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d019      	beq.n	8008fd0 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	683a      	ldr	r2, [r7, #0]
 8008fa2:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	2b40      	cmp	r3, #64	; 0x40
 8008faa:	d108      	bne.n	8008fbe <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	68ba      	ldr	r2, [r7, #8]
 8008fba:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8008fbc:	e021      	b.n	8009002 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	68ba      	ldr	r2, [r7, #8]
 8008fc4:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	60da      	str	r2, [r3, #12]
}
 8008fce:	e018      	b.n	8009002 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	683a      	ldr	r2, [r7, #0]
 8008fd6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	2b40      	cmp	r3, #64	; 0x40
 8008fde:	d108      	bne.n	8008ff2 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	60da      	str	r2, [r3, #12]
}
 8008ff0:	e007      	b.n	8009002 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68ba      	ldr	r2, [r7, #8]
 8008ff8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	687a      	ldr	r2, [r7, #4]
 8009000:	60da      	str	r2, [r3, #12]
}
 8009002:	bf00      	nop
 8009004:	3714      	adds	r7, #20
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop
 8009010:	40020010 	.word	0x40020010
 8009014:	40020028 	.word	0x40020028
 8009018:	40020040 	.word	0x40020040
 800901c:	40020058 	.word	0x40020058
 8009020:	40020070 	.word	0x40020070
 8009024:	40020088 	.word	0x40020088
 8009028:	400200a0 	.word	0x400200a0
 800902c:	400200b8 	.word	0x400200b8
 8009030:	40020410 	.word	0x40020410
 8009034:	40020428 	.word	0x40020428
 8009038:	40020440 	.word	0x40020440
 800903c:	40020458 	.word	0x40020458
 8009040:	40020470 	.word	0x40020470
 8009044:	40020488 	.word	0x40020488
 8009048:	400204a0 	.word	0x400204a0
 800904c:	400204b8 	.word	0x400204b8

08009050 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009050:	b480      	push	{r7}
 8009052:	b089      	sub	sp, #36	; 0x24
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800905a:	2300      	movs	r3, #0
 800905c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800905e:	4b89      	ldr	r3, [pc, #548]	; (8009284 <HAL_GPIO_Init+0x234>)
 8009060:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009062:	e194      	b.n	800938e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	2101      	movs	r1, #1
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	fa01 f303 	lsl.w	r3, r1, r3
 8009070:	4013      	ands	r3, r2
 8009072:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	2b00      	cmp	r3, #0
 8009078:	f000 8186 	beq.w	8009388 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	f003 0303 	and.w	r3, r3, #3
 8009084:	2b01      	cmp	r3, #1
 8009086:	d005      	beq.n	8009094 <HAL_GPIO_Init+0x44>
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	f003 0303 	and.w	r3, r3, #3
 8009090:	2b02      	cmp	r3, #2
 8009092:	d130      	bne.n	80090f6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	689b      	ldr	r3, [r3, #8]
 8009098:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	005b      	lsls	r3, r3, #1
 800909e:	2203      	movs	r2, #3
 80090a0:	fa02 f303 	lsl.w	r3, r2, r3
 80090a4:	43db      	mvns	r3, r3
 80090a6:	69ba      	ldr	r2, [r7, #24]
 80090a8:	4013      	ands	r3, r2
 80090aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	68da      	ldr	r2, [r3, #12]
 80090b0:	69fb      	ldr	r3, [r7, #28]
 80090b2:	005b      	lsls	r3, r3, #1
 80090b4:	fa02 f303 	lsl.w	r3, r2, r3
 80090b8:	69ba      	ldr	r2, [r7, #24]
 80090ba:	4313      	orrs	r3, r2
 80090bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	69ba      	ldr	r2, [r7, #24]
 80090c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80090ca:	2201      	movs	r2, #1
 80090cc:	69fb      	ldr	r3, [r7, #28]
 80090ce:	fa02 f303 	lsl.w	r3, r2, r3
 80090d2:	43db      	mvns	r3, r3
 80090d4:	69ba      	ldr	r2, [r7, #24]
 80090d6:	4013      	ands	r3, r2
 80090d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	091b      	lsrs	r3, r3, #4
 80090e0:	f003 0201 	and.w	r2, r3, #1
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	fa02 f303 	lsl.w	r3, r2, r3
 80090ea:	69ba      	ldr	r2, [r7, #24]
 80090ec:	4313      	orrs	r3, r2
 80090ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	69ba      	ldr	r2, [r7, #24]
 80090f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	f003 0303 	and.w	r3, r3, #3
 80090fe:	2b03      	cmp	r3, #3
 8009100:	d017      	beq.n	8009132 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	68db      	ldr	r3, [r3, #12]
 8009106:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	005b      	lsls	r3, r3, #1
 800910c:	2203      	movs	r2, #3
 800910e:	fa02 f303 	lsl.w	r3, r2, r3
 8009112:	43db      	mvns	r3, r3
 8009114:	69ba      	ldr	r2, [r7, #24]
 8009116:	4013      	ands	r3, r2
 8009118:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	689a      	ldr	r2, [r3, #8]
 800911e:	69fb      	ldr	r3, [r7, #28]
 8009120:	005b      	lsls	r3, r3, #1
 8009122:	fa02 f303 	lsl.w	r3, r2, r3
 8009126:	69ba      	ldr	r2, [r7, #24]
 8009128:	4313      	orrs	r3, r2
 800912a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	69ba      	ldr	r2, [r7, #24]
 8009130:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	f003 0303 	and.w	r3, r3, #3
 800913a:	2b02      	cmp	r3, #2
 800913c:	d123      	bne.n	8009186 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800913e:	69fb      	ldr	r3, [r7, #28]
 8009140:	08da      	lsrs	r2, r3, #3
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	3208      	adds	r2, #8
 8009146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800914a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800914c:	69fb      	ldr	r3, [r7, #28]
 800914e:	f003 0307 	and.w	r3, r3, #7
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	220f      	movs	r2, #15
 8009156:	fa02 f303 	lsl.w	r3, r2, r3
 800915a:	43db      	mvns	r3, r3
 800915c:	69ba      	ldr	r2, [r7, #24]
 800915e:	4013      	ands	r3, r2
 8009160:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	691a      	ldr	r2, [r3, #16]
 8009166:	69fb      	ldr	r3, [r7, #28]
 8009168:	f003 0307 	and.w	r3, r3, #7
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	fa02 f303 	lsl.w	r3, r2, r3
 8009172:	69ba      	ldr	r2, [r7, #24]
 8009174:	4313      	orrs	r3, r2
 8009176:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009178:	69fb      	ldr	r3, [r7, #28]
 800917a:	08da      	lsrs	r2, r3, #3
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	3208      	adds	r2, #8
 8009180:	69b9      	ldr	r1, [r7, #24]
 8009182:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800918c:	69fb      	ldr	r3, [r7, #28]
 800918e:	005b      	lsls	r3, r3, #1
 8009190:	2203      	movs	r2, #3
 8009192:	fa02 f303 	lsl.w	r3, r2, r3
 8009196:	43db      	mvns	r3, r3
 8009198:	69ba      	ldr	r2, [r7, #24]
 800919a:	4013      	ands	r3, r2
 800919c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	f003 0203 	and.w	r2, r3, #3
 80091a6:	69fb      	ldr	r3, [r7, #28]
 80091a8:	005b      	lsls	r3, r3, #1
 80091aa:	fa02 f303 	lsl.w	r3, r2, r3
 80091ae:	69ba      	ldr	r2, [r7, #24]
 80091b0:	4313      	orrs	r3, r2
 80091b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	69ba      	ldr	r2, [r7, #24]
 80091b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f000 80e0 	beq.w	8009388 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80091c8:	4b2f      	ldr	r3, [pc, #188]	; (8009288 <HAL_GPIO_Init+0x238>)
 80091ca:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80091ce:	4a2e      	ldr	r2, [pc, #184]	; (8009288 <HAL_GPIO_Init+0x238>)
 80091d0:	f043 0302 	orr.w	r3, r3, #2
 80091d4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80091d8:	4b2b      	ldr	r3, [pc, #172]	; (8009288 <HAL_GPIO_Init+0x238>)
 80091da:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80091de:	f003 0302 	and.w	r3, r3, #2
 80091e2:	60fb      	str	r3, [r7, #12]
 80091e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80091e6:	4a29      	ldr	r2, [pc, #164]	; (800928c <HAL_GPIO_Init+0x23c>)
 80091e8:	69fb      	ldr	r3, [r7, #28]
 80091ea:	089b      	lsrs	r3, r3, #2
 80091ec:	3302      	adds	r3, #2
 80091ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80091f4:	69fb      	ldr	r3, [r7, #28]
 80091f6:	f003 0303 	and.w	r3, r3, #3
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	220f      	movs	r2, #15
 80091fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009202:	43db      	mvns	r3, r3
 8009204:	69ba      	ldr	r2, [r7, #24]
 8009206:	4013      	ands	r3, r2
 8009208:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	4a20      	ldr	r2, [pc, #128]	; (8009290 <HAL_GPIO_Init+0x240>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d052      	beq.n	80092b8 <HAL_GPIO_Init+0x268>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	4a1f      	ldr	r2, [pc, #124]	; (8009294 <HAL_GPIO_Init+0x244>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d031      	beq.n	800927e <HAL_GPIO_Init+0x22e>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4a1e      	ldr	r2, [pc, #120]	; (8009298 <HAL_GPIO_Init+0x248>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d02b      	beq.n	800927a <HAL_GPIO_Init+0x22a>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	4a1d      	ldr	r2, [pc, #116]	; (800929c <HAL_GPIO_Init+0x24c>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d025      	beq.n	8009276 <HAL_GPIO_Init+0x226>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	4a1c      	ldr	r2, [pc, #112]	; (80092a0 <HAL_GPIO_Init+0x250>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d01f      	beq.n	8009272 <HAL_GPIO_Init+0x222>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4a1b      	ldr	r2, [pc, #108]	; (80092a4 <HAL_GPIO_Init+0x254>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d019      	beq.n	800926e <HAL_GPIO_Init+0x21e>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4a1a      	ldr	r2, [pc, #104]	; (80092a8 <HAL_GPIO_Init+0x258>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d013      	beq.n	800926a <HAL_GPIO_Init+0x21a>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4a19      	ldr	r2, [pc, #100]	; (80092ac <HAL_GPIO_Init+0x25c>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d00d      	beq.n	8009266 <HAL_GPIO_Init+0x216>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4a18      	ldr	r2, [pc, #96]	; (80092b0 <HAL_GPIO_Init+0x260>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d007      	beq.n	8009262 <HAL_GPIO_Init+0x212>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4a17      	ldr	r2, [pc, #92]	; (80092b4 <HAL_GPIO_Init+0x264>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d101      	bne.n	800925e <HAL_GPIO_Init+0x20e>
 800925a:	2309      	movs	r3, #9
 800925c:	e02d      	b.n	80092ba <HAL_GPIO_Init+0x26a>
 800925e:	230a      	movs	r3, #10
 8009260:	e02b      	b.n	80092ba <HAL_GPIO_Init+0x26a>
 8009262:	2308      	movs	r3, #8
 8009264:	e029      	b.n	80092ba <HAL_GPIO_Init+0x26a>
 8009266:	2307      	movs	r3, #7
 8009268:	e027      	b.n	80092ba <HAL_GPIO_Init+0x26a>
 800926a:	2306      	movs	r3, #6
 800926c:	e025      	b.n	80092ba <HAL_GPIO_Init+0x26a>
 800926e:	2305      	movs	r3, #5
 8009270:	e023      	b.n	80092ba <HAL_GPIO_Init+0x26a>
 8009272:	2304      	movs	r3, #4
 8009274:	e021      	b.n	80092ba <HAL_GPIO_Init+0x26a>
 8009276:	2303      	movs	r3, #3
 8009278:	e01f      	b.n	80092ba <HAL_GPIO_Init+0x26a>
 800927a:	2302      	movs	r3, #2
 800927c:	e01d      	b.n	80092ba <HAL_GPIO_Init+0x26a>
 800927e:	2301      	movs	r3, #1
 8009280:	e01b      	b.n	80092ba <HAL_GPIO_Init+0x26a>
 8009282:	bf00      	nop
 8009284:	58000080 	.word	0x58000080
 8009288:	58024400 	.word	0x58024400
 800928c:	58000400 	.word	0x58000400
 8009290:	58020000 	.word	0x58020000
 8009294:	58020400 	.word	0x58020400
 8009298:	58020800 	.word	0x58020800
 800929c:	58020c00 	.word	0x58020c00
 80092a0:	58021000 	.word	0x58021000
 80092a4:	58021400 	.word	0x58021400
 80092a8:	58021800 	.word	0x58021800
 80092ac:	58021c00 	.word	0x58021c00
 80092b0:	58022000 	.word	0x58022000
 80092b4:	58022400 	.word	0x58022400
 80092b8:	2300      	movs	r3, #0
 80092ba:	69fa      	ldr	r2, [r7, #28]
 80092bc:	f002 0203 	and.w	r2, r2, #3
 80092c0:	0092      	lsls	r2, r2, #2
 80092c2:	4093      	lsls	r3, r2
 80092c4:	69ba      	ldr	r2, [r7, #24]
 80092c6:	4313      	orrs	r3, r2
 80092c8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80092ca:	4938      	ldr	r1, [pc, #224]	; (80093ac <HAL_GPIO_Init+0x35c>)
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	089b      	lsrs	r3, r3, #2
 80092d0:	3302      	adds	r3, #2
 80092d2:	69ba      	ldr	r2, [r7, #24]
 80092d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80092d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	43db      	mvns	r3, r3
 80092e4:	69ba      	ldr	r2, [r7, #24]
 80092e6:	4013      	ands	r3, r2
 80092e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d003      	beq.n	80092fe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80092f6:	69ba      	ldr	r2, [r7, #24]
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	4313      	orrs	r3, r2
 80092fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80092fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009302:	69bb      	ldr	r3, [r7, #24]
 8009304:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800930a:	685b      	ldr	r3, [r3, #4]
 800930c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	43db      	mvns	r3, r3
 8009312:	69ba      	ldr	r2, [r7, #24]
 8009314:	4013      	ands	r3, r2
 8009316:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009320:	2b00      	cmp	r3, #0
 8009322:	d003      	beq.n	800932c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009324:	69ba      	ldr	r2, [r7, #24]
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	4313      	orrs	r3, r2
 800932a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800932c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009330:	69bb      	ldr	r3, [r7, #24]
 8009332:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	43db      	mvns	r3, r3
 800933e:	69ba      	ldr	r2, [r7, #24]
 8009340:	4013      	ands	r3, r2
 8009342:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800934c:	2b00      	cmp	r3, #0
 800934e:	d003      	beq.n	8009358 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8009350:	69ba      	ldr	r2, [r7, #24]
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	4313      	orrs	r3, r2
 8009356:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	69ba      	ldr	r2, [r7, #24]
 800935c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	43db      	mvns	r3, r3
 8009368:	69ba      	ldr	r2, [r7, #24]
 800936a:	4013      	ands	r3, r2
 800936c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009376:	2b00      	cmp	r3, #0
 8009378:	d003      	beq.n	8009382 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800937a:	69ba      	ldr	r2, [r7, #24]
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	4313      	orrs	r3, r2
 8009380:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	69ba      	ldr	r2, [r7, #24]
 8009386:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	3301      	adds	r3, #1
 800938c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	69fb      	ldr	r3, [r7, #28]
 8009394:	fa22 f303 	lsr.w	r3, r2, r3
 8009398:	2b00      	cmp	r3, #0
 800939a:	f47f ae63 	bne.w	8009064 <HAL_GPIO_Init+0x14>
  }
}
 800939e:	bf00      	nop
 80093a0:	bf00      	nop
 80093a2:	3724      	adds	r7, #36	; 0x24
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr
 80093ac:	58000400 	.word	0x58000400

080093b0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b087      	sub	sp, #28
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80093ba:	2300      	movs	r3, #0
 80093bc:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80093be:	4b75      	ldr	r3, [pc, #468]	; (8009594 <HAL_GPIO_DeInit+0x1e4>)
 80093c0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 80093c2:	e0d9      	b.n	8009578 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80093c4:	2201      	movs	r2, #1
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	fa02 f303 	lsl.w	r3, r2, r3
 80093cc:	683a      	ldr	r2, [r7, #0]
 80093ce:	4013      	ands	r3, r2
 80093d0:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	f000 80cc 	beq.w	8009572 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80093da:	4a6f      	ldr	r2, [pc, #444]	; (8009598 <HAL_GPIO_DeInit+0x1e8>)
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	089b      	lsrs	r3, r3, #2
 80093e0:	3302      	adds	r3, #2
 80093e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093e6:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	f003 0303 	and.w	r3, r3, #3
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	220f      	movs	r2, #15
 80093f2:	fa02 f303 	lsl.w	r3, r2, r3
 80093f6:	68ba      	ldr	r2, [r7, #8]
 80093f8:	4013      	ands	r3, r2
 80093fa:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	4a67      	ldr	r2, [pc, #412]	; (800959c <HAL_GPIO_DeInit+0x1ec>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d037      	beq.n	8009474 <HAL_GPIO_DeInit+0xc4>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	4a66      	ldr	r2, [pc, #408]	; (80095a0 <HAL_GPIO_DeInit+0x1f0>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d031      	beq.n	8009470 <HAL_GPIO_DeInit+0xc0>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	4a65      	ldr	r2, [pc, #404]	; (80095a4 <HAL_GPIO_DeInit+0x1f4>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d02b      	beq.n	800946c <HAL_GPIO_DeInit+0xbc>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	4a64      	ldr	r2, [pc, #400]	; (80095a8 <HAL_GPIO_DeInit+0x1f8>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d025      	beq.n	8009468 <HAL_GPIO_DeInit+0xb8>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	4a63      	ldr	r2, [pc, #396]	; (80095ac <HAL_GPIO_DeInit+0x1fc>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d01f      	beq.n	8009464 <HAL_GPIO_DeInit+0xb4>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	4a62      	ldr	r2, [pc, #392]	; (80095b0 <HAL_GPIO_DeInit+0x200>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d019      	beq.n	8009460 <HAL_GPIO_DeInit+0xb0>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4a61      	ldr	r2, [pc, #388]	; (80095b4 <HAL_GPIO_DeInit+0x204>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d013      	beq.n	800945c <HAL_GPIO_DeInit+0xac>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4a60      	ldr	r2, [pc, #384]	; (80095b8 <HAL_GPIO_DeInit+0x208>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d00d      	beq.n	8009458 <HAL_GPIO_DeInit+0xa8>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	4a5f      	ldr	r2, [pc, #380]	; (80095bc <HAL_GPIO_DeInit+0x20c>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d007      	beq.n	8009454 <HAL_GPIO_DeInit+0xa4>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4a5e      	ldr	r2, [pc, #376]	; (80095c0 <HAL_GPIO_DeInit+0x210>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d101      	bne.n	8009450 <HAL_GPIO_DeInit+0xa0>
 800944c:	2309      	movs	r3, #9
 800944e:	e012      	b.n	8009476 <HAL_GPIO_DeInit+0xc6>
 8009450:	230a      	movs	r3, #10
 8009452:	e010      	b.n	8009476 <HAL_GPIO_DeInit+0xc6>
 8009454:	2308      	movs	r3, #8
 8009456:	e00e      	b.n	8009476 <HAL_GPIO_DeInit+0xc6>
 8009458:	2307      	movs	r3, #7
 800945a:	e00c      	b.n	8009476 <HAL_GPIO_DeInit+0xc6>
 800945c:	2306      	movs	r3, #6
 800945e:	e00a      	b.n	8009476 <HAL_GPIO_DeInit+0xc6>
 8009460:	2305      	movs	r3, #5
 8009462:	e008      	b.n	8009476 <HAL_GPIO_DeInit+0xc6>
 8009464:	2304      	movs	r3, #4
 8009466:	e006      	b.n	8009476 <HAL_GPIO_DeInit+0xc6>
 8009468:	2303      	movs	r3, #3
 800946a:	e004      	b.n	8009476 <HAL_GPIO_DeInit+0xc6>
 800946c:	2302      	movs	r3, #2
 800946e:	e002      	b.n	8009476 <HAL_GPIO_DeInit+0xc6>
 8009470:	2301      	movs	r3, #1
 8009472:	e000      	b.n	8009476 <HAL_GPIO_DeInit+0xc6>
 8009474:	2300      	movs	r3, #0
 8009476:	697a      	ldr	r2, [r7, #20]
 8009478:	f002 0203 	and.w	r2, r2, #3
 800947c:	0092      	lsls	r2, r2, #2
 800947e:	4093      	lsls	r3, r2
 8009480:	68ba      	ldr	r2, [r7, #8]
 8009482:	429a      	cmp	r2, r3
 8009484:	d136      	bne.n	80094f4 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	43db      	mvns	r3, r3
 800948e:	401a      	ands	r2, r3
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	685a      	ldr	r2, [r3, #4]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	43db      	mvns	r3, r3
 800949c:	401a      	ands	r2, r3
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80094a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094a6:	685a      	ldr	r2, [r3, #4]
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	43db      	mvns	r3, r3
 80094ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80094b0:	4013      	ands	r3, r2
 80094b2:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80094b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	43db      	mvns	r3, r3
 80094be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80094c2:	4013      	ands	r3, r2
 80094c4:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	f003 0303 	and.w	r3, r3, #3
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	220f      	movs	r2, #15
 80094d0:	fa02 f303 	lsl.w	r3, r2, r3
 80094d4:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80094d6:	4a30      	ldr	r2, [pc, #192]	; (8009598 <HAL_GPIO_DeInit+0x1e8>)
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	089b      	lsrs	r3, r3, #2
 80094dc:	3302      	adds	r3, #2
 80094de:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	43da      	mvns	r2, r3
 80094e6:	482c      	ldr	r0, [pc, #176]	; (8009598 <HAL_GPIO_DeInit+0x1e8>)
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	089b      	lsrs	r3, r3, #2
 80094ec:	400a      	ands	r2, r1
 80094ee:	3302      	adds	r3, #2
 80094f0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	005b      	lsls	r3, r3, #1
 80094fc:	2103      	movs	r1, #3
 80094fe:	fa01 f303 	lsl.w	r3, r1, r3
 8009502:	431a      	orrs	r2, r3
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	08da      	lsrs	r2, r3, #3
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	3208      	adds	r2, #8
 8009510:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	f003 0307 	and.w	r3, r3, #7
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	220f      	movs	r2, #15
 800951e:	fa02 f303 	lsl.w	r3, r2, r3
 8009522:	43db      	mvns	r3, r3
 8009524:	697a      	ldr	r2, [r7, #20]
 8009526:	08d2      	lsrs	r2, r2, #3
 8009528:	4019      	ands	r1, r3
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	3208      	adds	r2, #8
 800952e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	68da      	ldr	r2, [r3, #12]
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	005b      	lsls	r3, r3, #1
 800953a:	2103      	movs	r1, #3
 800953c:	fa01 f303 	lsl.w	r3, r1, r3
 8009540:	43db      	mvns	r3, r3
 8009542:	401a      	ands	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	685a      	ldr	r2, [r3, #4]
 800954c:	2101      	movs	r1, #1
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	fa01 f303 	lsl.w	r3, r1, r3
 8009554:	43db      	mvns	r3, r3
 8009556:	401a      	ands	r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	689a      	ldr	r2, [r3, #8]
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	005b      	lsls	r3, r3, #1
 8009564:	2103      	movs	r1, #3
 8009566:	fa01 f303 	lsl.w	r3, r1, r3
 800956a:	43db      	mvns	r3, r3
 800956c:	401a      	ands	r2, r3
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	609a      	str	r2, [r3, #8]
    }

    position++;
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	3301      	adds	r3, #1
 8009576:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8009578:	683a      	ldr	r2, [r7, #0]
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	fa22 f303 	lsr.w	r3, r2, r3
 8009580:	2b00      	cmp	r3, #0
 8009582:	f47f af1f 	bne.w	80093c4 <HAL_GPIO_DeInit+0x14>
  }
}
 8009586:	bf00      	nop
 8009588:	bf00      	nop
 800958a:	371c      	adds	r7, #28
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr
 8009594:	58000080 	.word	0x58000080
 8009598:	58000400 	.word	0x58000400
 800959c:	58020000 	.word	0x58020000
 80095a0:	58020400 	.word	0x58020400
 80095a4:	58020800 	.word	0x58020800
 80095a8:	58020c00 	.word	0x58020c00
 80095ac:	58021000 	.word	0x58021000
 80095b0:	58021400 	.word	0x58021400
 80095b4:	58021800 	.word	0x58021800
 80095b8:	58021c00 	.word	0x58021c00
 80095bc:	58022000 	.word	0x58022000
 80095c0:	58022400 	.word	0x58022400

080095c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	460b      	mov	r3, r1
 80095ce:	807b      	strh	r3, [r7, #2]
 80095d0:	4613      	mov	r3, r2
 80095d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80095d4:	787b      	ldrb	r3, [r7, #1]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d003      	beq.n	80095e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80095da:	887a      	ldrh	r2, [r7, #2]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80095e0:	e003      	b.n	80095ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80095e2:	887b      	ldrh	r3, [r7, #2]
 80095e4:	041a      	lsls	r2, r3, #16
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	619a      	str	r2, [r3, #24]
}
 80095ea:	bf00      	nop
 80095ec:	370c      	adds	r7, #12
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr

080095f6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80095f6:	b480      	push	{r7}
 80095f8:	b085      	sub	sp, #20
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
 80095fe:	460b      	mov	r3, r1
 8009600:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	695b      	ldr	r3, [r3, #20]
 8009606:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009608:	887a      	ldrh	r2, [r7, #2]
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	4013      	ands	r3, r2
 800960e:	041a      	lsls	r2, r3, #16
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	43d9      	mvns	r1, r3
 8009614:	887b      	ldrh	r3, [r7, #2]
 8009616:	400b      	ands	r3, r1
 8009618:	431a      	orrs	r2, r3
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	619a      	str	r2, [r3, #24]
}
 800961e:	bf00      	nop
 8009620:	3714      	adds	r7, #20
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr
	...

0800962c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d101      	bne.n	800963e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	e07f      	b.n	800973e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009644:	b2db      	uxtb	r3, r3
 8009646:	2b00      	cmp	r3, #0
 8009648:	d106      	bne.n	8009658 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 f8a9 	bl	80097aa <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2224      	movs	r2, #36	; 0x24
 800965c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f022 0201 	bic.w	r2, r2, #1
 800966e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	685a      	ldr	r2, [r3, #4]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800967c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	689a      	ldr	r2, [r3, #8]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800968c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	68db      	ldr	r3, [r3, #12]
 8009692:	2b01      	cmp	r3, #1
 8009694:	d107      	bne.n	80096a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	689a      	ldr	r2, [r3, #8]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80096a2:	609a      	str	r2, [r3, #8]
 80096a4:	e006      	b.n	80096b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	689a      	ldr	r2, [r3, #8]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80096b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	2b02      	cmp	r3, #2
 80096ba:	d104      	bne.n	80096c6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80096c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	6859      	ldr	r1, [r3, #4]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	4b1d      	ldr	r3, [pc, #116]	; (8009748 <HAL_I2C_Init+0x11c>)
 80096d2:	430b      	orrs	r3, r1
 80096d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	68da      	ldr	r2, [r3, #12]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80096e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	691a      	ldr	r2, [r3, #16]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	695b      	ldr	r3, [r3, #20]
 80096ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	699b      	ldr	r3, [r3, #24]
 80096f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	430a      	orrs	r2, r1
 80096fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	69d9      	ldr	r1, [r3, #28]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6a1a      	ldr	r2, [r3, #32]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	430a      	orrs	r2, r1
 800970e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f042 0201 	orr.w	r2, r2, #1
 800971e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2200      	movs	r2, #0
 8009724:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2220      	movs	r2, #32
 800972a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2200      	movs	r2, #0
 8009732:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2200      	movs	r2, #0
 8009738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800973c:	2300      	movs	r3, #0
}
 800973e:	4618      	mov	r0, r3
 8009740:	3708      	adds	r7, #8
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop
 8009748:	02008000 	.word	0x02008000

0800974c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d101      	bne.n	800975e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	e021      	b.n	80097a2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2224      	movs	r2, #36	; 0x24
 8009762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f022 0201 	bic.w	r2, r2, #1
 8009774:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 f821 	bl	80097be <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2200      	movs	r2, #0
 8009786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2200      	movs	r2, #0
 800978e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80097a0:	2300      	movs	r3, #0
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3708      	adds	r7, #8
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}

080097aa <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80097aa:	b480      	push	{r7}
 80097ac:	b083      	sub	sp, #12
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80097b2:	bf00      	nop
 80097b4:	370c      	adds	r7, #12
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr

080097be <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80097be:	b480      	push	{r7}
 80097c0:	b083      	sub	sp, #12
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80097c6:	bf00      	nop
 80097c8:	370c      	adds	r7, #12
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr
	...

080097d4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b088      	sub	sp, #32
 80097d8:	af02      	add	r7, sp, #8
 80097da:	60f8      	str	r0, [r7, #12]
 80097dc:	4608      	mov	r0, r1
 80097de:	4611      	mov	r1, r2
 80097e0:	461a      	mov	r2, r3
 80097e2:	4603      	mov	r3, r0
 80097e4:	817b      	strh	r3, [r7, #10]
 80097e6:	460b      	mov	r3, r1
 80097e8:	813b      	strh	r3, [r7, #8]
 80097ea:	4613      	mov	r3, r2
 80097ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	2b20      	cmp	r3, #32
 80097f8:	f040 80f9 	bne.w	80099ee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80097fc:	6a3b      	ldr	r3, [r7, #32]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d002      	beq.n	8009808 <HAL_I2C_Mem_Write+0x34>
 8009802:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009804:	2b00      	cmp	r3, #0
 8009806:	d105      	bne.n	8009814 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800980e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009810:	2301      	movs	r3, #1
 8009812:	e0ed      	b.n	80099f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800981a:	2b01      	cmp	r3, #1
 800981c:	d101      	bne.n	8009822 <HAL_I2C_Mem_Write+0x4e>
 800981e:	2302      	movs	r3, #2
 8009820:	e0e6      	b.n	80099f0 <HAL_I2C_Mem_Write+0x21c>
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2201      	movs	r2, #1
 8009826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800982a:	f7fa ffa5 	bl	8004778 <HAL_GetTick>
 800982e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	9300      	str	r3, [sp, #0]
 8009834:	2319      	movs	r3, #25
 8009836:	2201      	movs	r2, #1
 8009838:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800983c:	68f8      	ldr	r0, [r7, #12]
 800983e:	f000 fadd 	bl	8009dfc <I2C_WaitOnFlagUntilTimeout>
 8009842:	4603      	mov	r3, r0
 8009844:	2b00      	cmp	r3, #0
 8009846:	d001      	beq.n	800984c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009848:	2301      	movs	r3, #1
 800984a:	e0d1      	b.n	80099f0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2221      	movs	r2, #33	; 0x21
 8009850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2240      	movs	r2, #64	; 0x40
 8009858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2200      	movs	r2, #0
 8009860:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	6a3a      	ldr	r2, [r7, #32]
 8009866:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800986c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2200      	movs	r2, #0
 8009872:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009874:	88f8      	ldrh	r0, [r7, #6]
 8009876:	893a      	ldrh	r2, [r7, #8]
 8009878:	8979      	ldrh	r1, [r7, #10]
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	9301      	str	r3, [sp, #4]
 800987e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009880:	9300      	str	r3, [sp, #0]
 8009882:	4603      	mov	r3, r0
 8009884:	68f8      	ldr	r0, [r7, #12]
 8009886:	f000 f9ed 	bl	8009c64 <I2C_RequestMemoryWrite>
 800988a:	4603      	mov	r3, r0
 800988c:	2b00      	cmp	r3, #0
 800988e:	d005      	beq.n	800989c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2200      	movs	r2, #0
 8009894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009898:	2301      	movs	r3, #1
 800989a:	e0a9      	b.n	80099f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	2bff      	cmp	r3, #255	; 0xff
 80098a4:	d90e      	bls.n	80098c4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	22ff      	movs	r2, #255	; 0xff
 80098aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098b0:	b2da      	uxtb	r2, r3
 80098b2:	8979      	ldrh	r1, [r7, #10]
 80098b4:	2300      	movs	r3, #0
 80098b6:	9300      	str	r3, [sp, #0]
 80098b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80098bc:	68f8      	ldr	r0, [r7, #12]
 80098be:	f000 fc57 	bl	800a170 <I2C_TransferConfig>
 80098c2:	e00f      	b.n	80098e4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098c8:	b29a      	uxth	r2, r3
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098d2:	b2da      	uxtb	r2, r3
 80098d4:	8979      	ldrh	r1, [r7, #10]
 80098d6:	2300      	movs	r3, #0
 80098d8:	9300      	str	r3, [sp, #0]
 80098da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80098de:	68f8      	ldr	r0, [r7, #12]
 80098e0:	f000 fc46 	bl	800a170 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80098e4:	697a      	ldr	r2, [r7, #20]
 80098e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80098e8:	68f8      	ldr	r0, [r7, #12]
 80098ea:	f000 fad6 	bl	8009e9a <I2C_WaitOnTXISFlagUntilTimeout>
 80098ee:	4603      	mov	r3, r0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d001      	beq.n	80098f8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80098f4:	2301      	movs	r3, #1
 80098f6:	e07b      	b.n	80099f0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098fc:	781a      	ldrb	r2, [r3, #0]
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009908:	1c5a      	adds	r2, r3, #1
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009912:	b29b      	uxth	r3, r3
 8009914:	3b01      	subs	r3, #1
 8009916:	b29a      	uxth	r2, r3
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009920:	3b01      	subs	r3, #1
 8009922:	b29a      	uxth	r2, r3
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800992c:	b29b      	uxth	r3, r3
 800992e:	2b00      	cmp	r3, #0
 8009930:	d034      	beq.n	800999c <HAL_I2C_Mem_Write+0x1c8>
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009936:	2b00      	cmp	r3, #0
 8009938:	d130      	bne.n	800999c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	9300      	str	r3, [sp, #0]
 800993e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009940:	2200      	movs	r2, #0
 8009942:	2180      	movs	r1, #128	; 0x80
 8009944:	68f8      	ldr	r0, [r7, #12]
 8009946:	f000 fa59 	bl	8009dfc <I2C_WaitOnFlagUntilTimeout>
 800994a:	4603      	mov	r3, r0
 800994c:	2b00      	cmp	r3, #0
 800994e:	d001      	beq.n	8009954 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009950:	2301      	movs	r3, #1
 8009952:	e04d      	b.n	80099f0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009958:	b29b      	uxth	r3, r3
 800995a:	2bff      	cmp	r3, #255	; 0xff
 800995c:	d90e      	bls.n	800997c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	22ff      	movs	r2, #255	; 0xff
 8009962:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009968:	b2da      	uxtb	r2, r3
 800996a:	8979      	ldrh	r1, [r7, #10]
 800996c:	2300      	movs	r3, #0
 800996e:	9300      	str	r3, [sp, #0]
 8009970:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009974:	68f8      	ldr	r0, [r7, #12]
 8009976:	f000 fbfb 	bl	800a170 <I2C_TransferConfig>
 800997a:	e00f      	b.n	800999c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009980:	b29a      	uxth	r2, r3
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800998a:	b2da      	uxtb	r2, r3
 800998c:	8979      	ldrh	r1, [r7, #10]
 800998e:	2300      	movs	r3, #0
 8009990:	9300      	str	r3, [sp, #0]
 8009992:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009996:	68f8      	ldr	r0, [r7, #12]
 8009998:	f000 fbea 	bl	800a170 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d19e      	bne.n	80098e4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099a6:	697a      	ldr	r2, [r7, #20]
 80099a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099aa:	68f8      	ldr	r0, [r7, #12]
 80099ac:	f000 fabc 	bl	8009f28 <I2C_WaitOnSTOPFlagUntilTimeout>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d001      	beq.n	80099ba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80099b6:	2301      	movs	r3, #1
 80099b8:	e01a      	b.n	80099f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	2220      	movs	r2, #32
 80099c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	6859      	ldr	r1, [r3, #4]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	4b0a      	ldr	r3, [pc, #40]	; (80099f8 <HAL_I2C_Mem_Write+0x224>)
 80099ce:	400b      	ands	r3, r1
 80099d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2220      	movs	r2, #32
 80099d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2200      	movs	r2, #0
 80099de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2200      	movs	r2, #0
 80099e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80099ea:	2300      	movs	r3, #0
 80099ec:	e000      	b.n	80099f0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80099ee:	2302      	movs	r3, #2
  }
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3718      	adds	r7, #24
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}
 80099f8:	fe00e800 	.word	0xfe00e800

080099fc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b088      	sub	sp, #32
 8009a00:	af02      	add	r7, sp, #8
 8009a02:	60f8      	str	r0, [r7, #12]
 8009a04:	4608      	mov	r0, r1
 8009a06:	4611      	mov	r1, r2
 8009a08:	461a      	mov	r2, r3
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	817b      	strh	r3, [r7, #10]
 8009a0e:	460b      	mov	r3, r1
 8009a10:	813b      	strh	r3, [r7, #8]
 8009a12:	4613      	mov	r3, r2
 8009a14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	2b20      	cmp	r3, #32
 8009a20:	f040 80fd 	bne.w	8009c1e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a24:	6a3b      	ldr	r3, [r7, #32]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d002      	beq.n	8009a30 <HAL_I2C_Mem_Read+0x34>
 8009a2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d105      	bne.n	8009a3c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a36:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	e0f1      	b.n	8009c20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d101      	bne.n	8009a4a <HAL_I2C_Mem_Read+0x4e>
 8009a46:	2302      	movs	r3, #2
 8009a48:	e0ea      	b.n	8009c20 <HAL_I2C_Mem_Read+0x224>
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009a52:	f7fa fe91 	bl	8004778 <HAL_GetTick>
 8009a56:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	9300      	str	r3, [sp, #0]
 8009a5c:	2319      	movs	r3, #25
 8009a5e:	2201      	movs	r2, #1
 8009a60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009a64:	68f8      	ldr	r0, [r7, #12]
 8009a66:	f000 f9c9 	bl	8009dfc <I2C_WaitOnFlagUntilTimeout>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d001      	beq.n	8009a74 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009a70:	2301      	movs	r3, #1
 8009a72:	e0d5      	b.n	8009c20 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2222      	movs	r2, #34	; 0x22
 8009a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2240      	movs	r2, #64	; 0x40
 8009a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2200      	movs	r2, #0
 8009a88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	6a3a      	ldr	r2, [r7, #32]
 8009a8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009a94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009a9c:	88f8      	ldrh	r0, [r7, #6]
 8009a9e:	893a      	ldrh	r2, [r7, #8]
 8009aa0:	8979      	ldrh	r1, [r7, #10]
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	9301      	str	r3, [sp, #4]
 8009aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa8:	9300      	str	r3, [sp, #0]
 8009aaa:	4603      	mov	r3, r0
 8009aac:	68f8      	ldr	r0, [r7, #12]
 8009aae:	f000 f92d 	bl	8009d0c <I2C_RequestMemoryRead>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d005      	beq.n	8009ac4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2200      	movs	r2, #0
 8009abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	e0ad      	b.n	8009c20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	2bff      	cmp	r3, #255	; 0xff
 8009acc:	d90e      	bls.n	8009aec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	22ff      	movs	r2, #255	; 0xff
 8009ad2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ad8:	b2da      	uxtb	r2, r3
 8009ada:	8979      	ldrh	r1, [r7, #10]
 8009adc:	4b52      	ldr	r3, [pc, #328]	; (8009c28 <HAL_I2C_Mem_Read+0x22c>)
 8009ade:	9300      	str	r3, [sp, #0]
 8009ae0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009ae4:	68f8      	ldr	r0, [r7, #12]
 8009ae6:	f000 fb43 	bl	800a170 <I2C_TransferConfig>
 8009aea:	e00f      	b.n	8009b0c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009af0:	b29a      	uxth	r2, r3
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009afa:	b2da      	uxtb	r2, r3
 8009afc:	8979      	ldrh	r1, [r7, #10]
 8009afe:	4b4a      	ldr	r3, [pc, #296]	; (8009c28 <HAL_I2C_Mem_Read+0x22c>)
 8009b00:	9300      	str	r3, [sp, #0]
 8009b02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009b06:	68f8      	ldr	r0, [r7, #12]
 8009b08:	f000 fb32 	bl	800a170 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	9300      	str	r3, [sp, #0]
 8009b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b12:	2200      	movs	r2, #0
 8009b14:	2104      	movs	r1, #4
 8009b16:	68f8      	ldr	r0, [r7, #12]
 8009b18:	f000 f970 	bl	8009dfc <I2C_WaitOnFlagUntilTimeout>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d001      	beq.n	8009b26 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8009b22:	2301      	movs	r3, #1
 8009b24:	e07c      	b.n	8009c20 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b30:	b2d2      	uxtb	r2, r2
 8009b32:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b38:	1c5a      	adds	r2, r3, #1
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b42:	3b01      	subs	r3, #1
 8009b44:	b29a      	uxth	r2, r3
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	3b01      	subs	r3, #1
 8009b52:	b29a      	uxth	r2, r3
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d034      	beq.n	8009bcc <HAL_I2C_Mem_Read+0x1d0>
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d130      	bne.n	8009bcc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	9300      	str	r3, [sp, #0]
 8009b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b70:	2200      	movs	r2, #0
 8009b72:	2180      	movs	r1, #128	; 0x80
 8009b74:	68f8      	ldr	r0, [r7, #12]
 8009b76:	f000 f941 	bl	8009dfc <I2C_WaitOnFlagUntilTimeout>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d001      	beq.n	8009b84 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009b80:	2301      	movs	r3, #1
 8009b82:	e04d      	b.n	8009c20 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	2bff      	cmp	r3, #255	; 0xff
 8009b8c:	d90e      	bls.n	8009bac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	22ff      	movs	r2, #255	; 0xff
 8009b92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b98:	b2da      	uxtb	r2, r3
 8009b9a:	8979      	ldrh	r1, [r7, #10]
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	9300      	str	r3, [sp, #0]
 8009ba0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009ba4:	68f8      	ldr	r0, [r7, #12]
 8009ba6:	f000 fae3 	bl	800a170 <I2C_TransferConfig>
 8009baa:	e00f      	b.n	8009bcc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bb0:	b29a      	uxth	r2, r3
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bba:	b2da      	uxtb	r2, r3
 8009bbc:	8979      	ldrh	r1, [r7, #10]
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	9300      	str	r3, [sp, #0]
 8009bc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009bc6:	68f8      	ldr	r0, [r7, #12]
 8009bc8:	f000 fad2 	bl	800a170 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d19a      	bne.n	8009b0c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009bd6:	697a      	ldr	r2, [r7, #20]
 8009bd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009bda:	68f8      	ldr	r0, [r7, #12]
 8009bdc:	f000 f9a4 	bl	8009f28 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009be0:	4603      	mov	r3, r0
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d001      	beq.n	8009bea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8009be6:	2301      	movs	r3, #1
 8009be8:	e01a      	b.n	8009c20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	2220      	movs	r2, #32
 8009bf0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	6859      	ldr	r1, [r3, #4]
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	4b0b      	ldr	r3, [pc, #44]	; (8009c2c <HAL_I2C_Mem_Read+0x230>)
 8009bfe:	400b      	ands	r3, r1
 8009c00:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2220      	movs	r2, #32
 8009c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2200      	movs	r2, #0
 8009c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	e000      	b.n	8009c20 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009c1e:	2302      	movs	r3, #2
  }
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3718      	adds	r7, #24
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}
 8009c28:	80002400 	.word	0x80002400
 8009c2c:	fe00e800 	.word	0xfe00e800

08009c30 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c3e:	b2db      	uxtb	r3, r3
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	370c      	adds	r7, #12
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	370c      	adds	r7, #12
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr

08009c64 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b086      	sub	sp, #24
 8009c68:	af02      	add	r7, sp, #8
 8009c6a:	60f8      	str	r0, [r7, #12]
 8009c6c:	4608      	mov	r0, r1
 8009c6e:	4611      	mov	r1, r2
 8009c70:	461a      	mov	r2, r3
 8009c72:	4603      	mov	r3, r0
 8009c74:	817b      	strh	r3, [r7, #10]
 8009c76:	460b      	mov	r3, r1
 8009c78:	813b      	strh	r3, [r7, #8]
 8009c7a:	4613      	mov	r3, r2
 8009c7c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009c7e:	88fb      	ldrh	r3, [r7, #6]
 8009c80:	b2da      	uxtb	r2, r3
 8009c82:	8979      	ldrh	r1, [r7, #10]
 8009c84:	4b20      	ldr	r3, [pc, #128]	; (8009d08 <I2C_RequestMemoryWrite+0xa4>)
 8009c86:	9300      	str	r3, [sp, #0]
 8009c88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009c8c:	68f8      	ldr	r0, [r7, #12]
 8009c8e:	f000 fa6f 	bl	800a170 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c92:	69fa      	ldr	r2, [r7, #28]
 8009c94:	69b9      	ldr	r1, [r7, #24]
 8009c96:	68f8      	ldr	r0, [r7, #12]
 8009c98:	f000 f8ff 	bl	8009e9a <I2C_WaitOnTXISFlagUntilTimeout>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d001      	beq.n	8009ca6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	e02c      	b.n	8009d00 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009ca6:	88fb      	ldrh	r3, [r7, #6]
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d105      	bne.n	8009cb8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009cac:	893b      	ldrh	r3, [r7, #8]
 8009cae:	b2da      	uxtb	r2, r3
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	629a      	str	r2, [r3, #40]	; 0x28
 8009cb6:	e015      	b.n	8009ce4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009cb8:	893b      	ldrh	r3, [r7, #8]
 8009cba:	0a1b      	lsrs	r3, r3, #8
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	b2da      	uxtb	r2, r3
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009cc6:	69fa      	ldr	r2, [r7, #28]
 8009cc8:	69b9      	ldr	r1, [r7, #24]
 8009cca:	68f8      	ldr	r0, [r7, #12]
 8009ccc:	f000 f8e5 	bl	8009e9a <I2C_WaitOnTXISFlagUntilTimeout>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d001      	beq.n	8009cda <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	e012      	b.n	8009d00 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009cda:	893b      	ldrh	r3, [r7, #8]
 8009cdc:	b2da      	uxtb	r2, r3
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	9300      	str	r3, [sp, #0]
 8009ce8:	69bb      	ldr	r3, [r7, #24]
 8009cea:	2200      	movs	r2, #0
 8009cec:	2180      	movs	r1, #128	; 0x80
 8009cee:	68f8      	ldr	r0, [r7, #12]
 8009cf0:	f000 f884 	bl	8009dfc <I2C_WaitOnFlagUntilTimeout>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d001      	beq.n	8009cfe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	e000      	b.n	8009d00 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009cfe:	2300      	movs	r3, #0
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3710      	adds	r7, #16
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}
 8009d08:	80002000 	.word	0x80002000

08009d0c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b086      	sub	sp, #24
 8009d10:	af02      	add	r7, sp, #8
 8009d12:	60f8      	str	r0, [r7, #12]
 8009d14:	4608      	mov	r0, r1
 8009d16:	4611      	mov	r1, r2
 8009d18:	461a      	mov	r2, r3
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	817b      	strh	r3, [r7, #10]
 8009d1e:	460b      	mov	r3, r1
 8009d20:	813b      	strh	r3, [r7, #8]
 8009d22:	4613      	mov	r3, r2
 8009d24:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009d26:	88fb      	ldrh	r3, [r7, #6]
 8009d28:	b2da      	uxtb	r2, r3
 8009d2a:	8979      	ldrh	r1, [r7, #10]
 8009d2c:	4b20      	ldr	r3, [pc, #128]	; (8009db0 <I2C_RequestMemoryRead+0xa4>)
 8009d2e:	9300      	str	r3, [sp, #0]
 8009d30:	2300      	movs	r3, #0
 8009d32:	68f8      	ldr	r0, [r7, #12]
 8009d34:	f000 fa1c 	bl	800a170 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d38:	69fa      	ldr	r2, [r7, #28]
 8009d3a:	69b9      	ldr	r1, [r7, #24]
 8009d3c:	68f8      	ldr	r0, [r7, #12]
 8009d3e:	f000 f8ac 	bl	8009e9a <I2C_WaitOnTXISFlagUntilTimeout>
 8009d42:	4603      	mov	r3, r0
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d001      	beq.n	8009d4c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009d48:	2301      	movs	r3, #1
 8009d4a:	e02c      	b.n	8009da6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009d4c:	88fb      	ldrh	r3, [r7, #6]
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d105      	bne.n	8009d5e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009d52:	893b      	ldrh	r3, [r7, #8]
 8009d54:	b2da      	uxtb	r2, r3
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	629a      	str	r2, [r3, #40]	; 0x28
 8009d5c:	e015      	b.n	8009d8a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009d5e:	893b      	ldrh	r3, [r7, #8]
 8009d60:	0a1b      	lsrs	r3, r3, #8
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	b2da      	uxtb	r2, r3
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d6c:	69fa      	ldr	r2, [r7, #28]
 8009d6e:	69b9      	ldr	r1, [r7, #24]
 8009d70:	68f8      	ldr	r0, [r7, #12]
 8009d72:	f000 f892 	bl	8009e9a <I2C_WaitOnTXISFlagUntilTimeout>
 8009d76:	4603      	mov	r3, r0
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d001      	beq.n	8009d80 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	e012      	b.n	8009da6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009d80:	893b      	ldrh	r3, [r7, #8]
 8009d82:	b2da      	uxtb	r2, r3
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009d8a:	69fb      	ldr	r3, [r7, #28]
 8009d8c:	9300      	str	r3, [sp, #0]
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	2200      	movs	r2, #0
 8009d92:	2140      	movs	r1, #64	; 0x40
 8009d94:	68f8      	ldr	r0, [r7, #12]
 8009d96:	f000 f831 	bl	8009dfc <I2C_WaitOnFlagUntilTimeout>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d001      	beq.n	8009da4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009da0:	2301      	movs	r3, #1
 8009da2:	e000      	b.n	8009da6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009da4:	2300      	movs	r3, #0
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3710      	adds	r7, #16
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
 8009dae:	bf00      	nop
 8009db0:	80002000 	.word	0x80002000

08009db4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b083      	sub	sp, #12
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	699b      	ldr	r3, [r3, #24]
 8009dc2:	f003 0302 	and.w	r3, r3, #2
 8009dc6:	2b02      	cmp	r3, #2
 8009dc8:	d103      	bne.n	8009dd2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	699b      	ldr	r3, [r3, #24]
 8009dd8:	f003 0301 	and.w	r3, r3, #1
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d007      	beq.n	8009df0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	699a      	ldr	r2, [r3, #24]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f042 0201 	orr.w	r2, r2, #1
 8009dee:	619a      	str	r2, [r3, #24]
  }
}
 8009df0:	bf00      	nop
 8009df2:	370c      	adds	r7, #12
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr

08009dfc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b084      	sub	sp, #16
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	603b      	str	r3, [r7, #0]
 8009e08:	4613      	mov	r3, r2
 8009e0a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009e0c:	e031      	b.n	8009e72 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e14:	d02d      	beq.n	8009e72 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e16:	f7fa fcaf 	bl	8004778 <HAL_GetTick>
 8009e1a:	4602      	mov	r2, r0
 8009e1c:	69bb      	ldr	r3, [r7, #24]
 8009e1e:	1ad3      	subs	r3, r2, r3
 8009e20:	683a      	ldr	r2, [r7, #0]
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d302      	bcc.n	8009e2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d122      	bne.n	8009e72 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	699a      	ldr	r2, [r3, #24]
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	4013      	ands	r3, r2
 8009e36:	68ba      	ldr	r2, [r7, #8]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	bf0c      	ite	eq
 8009e3c:	2301      	moveq	r3, #1
 8009e3e:	2300      	movne	r3, #0
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	461a      	mov	r2, r3
 8009e44:	79fb      	ldrb	r3, [r7, #7]
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d113      	bne.n	8009e72 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e4e:	f043 0220 	orr.w	r2, r3, #32
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2220      	movs	r2, #32
 8009e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2200      	movs	r2, #0
 8009e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	e00f      	b.n	8009e92 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	699a      	ldr	r2, [r3, #24]
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	4013      	ands	r3, r2
 8009e7c:	68ba      	ldr	r2, [r7, #8]
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	bf0c      	ite	eq
 8009e82:	2301      	moveq	r3, #1
 8009e84:	2300      	movne	r3, #0
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	461a      	mov	r2, r3
 8009e8a:	79fb      	ldrb	r3, [r7, #7]
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d0be      	beq.n	8009e0e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e90:	2300      	movs	r3, #0
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3710      	adds	r7, #16
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}

08009e9a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009e9a:	b580      	push	{r7, lr}
 8009e9c:	b084      	sub	sp, #16
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	60f8      	str	r0, [r7, #12]
 8009ea2:	60b9      	str	r1, [r7, #8]
 8009ea4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009ea6:	e033      	b.n	8009f10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	68b9      	ldr	r1, [r7, #8]
 8009eac:	68f8      	ldr	r0, [r7, #12]
 8009eae:	f000 f87f 	bl	8009fb0 <I2C_IsErrorOccurred>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d001      	beq.n	8009ebc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009eb8:	2301      	movs	r3, #1
 8009eba:	e031      	b.n	8009f20 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ec2:	d025      	beq.n	8009f10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ec4:	f7fa fc58 	bl	8004778 <HAL_GetTick>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	1ad3      	subs	r3, r2, r3
 8009ece:	68ba      	ldr	r2, [r7, #8]
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d302      	bcc.n	8009eda <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d11a      	bne.n	8009f10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	699b      	ldr	r3, [r3, #24]
 8009ee0:	f003 0302 	and.w	r3, r3, #2
 8009ee4:	2b02      	cmp	r3, #2
 8009ee6:	d013      	beq.n	8009f10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009eec:	f043 0220 	orr.w	r2, r3, #32
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	2220      	movs	r2, #32
 8009ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2200      	movs	r2, #0
 8009f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	2200      	movs	r2, #0
 8009f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e007      	b.n	8009f20 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	699b      	ldr	r3, [r3, #24]
 8009f16:	f003 0302 	and.w	r3, r3, #2
 8009f1a:	2b02      	cmp	r3, #2
 8009f1c:	d1c4      	bne.n	8009ea8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009f1e:	2300      	movs	r3, #0
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3710      	adds	r7, #16
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}

08009f28 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b084      	sub	sp, #16
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	60f8      	str	r0, [r7, #12]
 8009f30:	60b9      	str	r1, [r7, #8]
 8009f32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009f34:	e02f      	b.n	8009f96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	68b9      	ldr	r1, [r7, #8]
 8009f3a:	68f8      	ldr	r0, [r7, #12]
 8009f3c:	f000 f838 	bl	8009fb0 <I2C_IsErrorOccurred>
 8009f40:	4603      	mov	r3, r0
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d001      	beq.n	8009f4a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009f46:	2301      	movs	r3, #1
 8009f48:	e02d      	b.n	8009fa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f4a:	f7fa fc15 	bl	8004778 <HAL_GetTick>
 8009f4e:	4602      	mov	r2, r0
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	1ad3      	subs	r3, r2, r3
 8009f54:	68ba      	ldr	r2, [r7, #8]
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d302      	bcc.n	8009f60 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d11a      	bne.n	8009f96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	699b      	ldr	r3, [r3, #24]
 8009f66:	f003 0320 	and.w	r3, r3, #32
 8009f6a:	2b20      	cmp	r3, #32
 8009f6c:	d013      	beq.n	8009f96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f72:	f043 0220 	orr.w	r2, r3, #32
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2220      	movs	r2, #32
 8009f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2200      	movs	r2, #0
 8009f86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009f92:	2301      	movs	r3, #1
 8009f94:	e007      	b.n	8009fa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	699b      	ldr	r3, [r3, #24]
 8009f9c:	f003 0320 	and.w	r3, r3, #32
 8009fa0:	2b20      	cmp	r3, #32
 8009fa2:	d1c8      	bne.n	8009f36 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009fa4:	2300      	movs	r3, #0
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3710      	adds	r7, #16
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
	...

08009fb0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b08a      	sub	sp, #40	; 0x28
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	60f8      	str	r0, [r7, #12]
 8009fb8:	60b9      	str	r1, [r7, #8]
 8009fba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	699b      	ldr	r3, [r3, #24]
 8009fc8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009fd2:	69bb      	ldr	r3, [r7, #24]
 8009fd4:	f003 0310 	and.w	r3, r3, #16
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d068      	beq.n	800a0ae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	2210      	movs	r2, #16
 8009fe2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009fe4:	e049      	b.n	800a07a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fec:	d045      	beq.n	800a07a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009fee:	f7fa fbc3 	bl	8004778 <HAL_GetTick>
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	69fb      	ldr	r3, [r7, #28]
 8009ff6:	1ad3      	subs	r3, r2, r3
 8009ff8:	68ba      	ldr	r2, [r7, #8]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d302      	bcc.n	800a004 <I2C_IsErrorOccurred+0x54>
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d13a      	bne.n	800a07a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a00e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a016:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	699b      	ldr	r3, [r3, #24]
 800a01e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a026:	d121      	bne.n	800a06c <I2C_IsErrorOccurred+0xbc>
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a02e:	d01d      	beq.n	800a06c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800a030:	7cfb      	ldrb	r3, [r7, #19]
 800a032:	2b20      	cmp	r3, #32
 800a034:	d01a      	beq.n	800a06c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	685a      	ldr	r2, [r3, #4]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a044:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a046:	f7fa fb97 	bl	8004778 <HAL_GetTick>
 800a04a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a04c:	e00e      	b.n	800a06c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a04e:	f7fa fb93 	bl	8004778 <HAL_GetTick>
 800a052:	4602      	mov	r2, r0
 800a054:	69fb      	ldr	r3, [r7, #28]
 800a056:	1ad3      	subs	r3, r2, r3
 800a058:	2b19      	cmp	r3, #25
 800a05a:	d907      	bls.n	800a06c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800a05c:	6a3b      	ldr	r3, [r7, #32]
 800a05e:	f043 0320 	orr.w	r3, r3, #32
 800a062:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800a064:	2301      	movs	r3, #1
 800a066:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800a06a:	e006      	b.n	800a07a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	699b      	ldr	r3, [r3, #24]
 800a072:	f003 0320 	and.w	r3, r3, #32
 800a076:	2b20      	cmp	r3, #32
 800a078:	d1e9      	bne.n	800a04e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	699b      	ldr	r3, [r3, #24]
 800a080:	f003 0320 	and.w	r3, r3, #32
 800a084:	2b20      	cmp	r3, #32
 800a086:	d003      	beq.n	800a090 <I2C_IsErrorOccurred+0xe0>
 800a088:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d0aa      	beq.n	8009fe6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a090:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a094:	2b00      	cmp	r3, #0
 800a096:	d103      	bne.n	800a0a0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2220      	movs	r2, #32
 800a09e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a0a0:	6a3b      	ldr	r3, [r7, #32]
 800a0a2:	f043 0304 	orr.w	r3, r3, #4
 800a0a6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	699b      	ldr	r3, [r3, #24]
 800a0b4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d00b      	beq.n	800a0d8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a0c0:	6a3b      	ldr	r3, [r7, #32]
 800a0c2:	f043 0301 	orr.w	r3, r3, #1
 800a0c6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a0d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a0d8:	69bb      	ldr	r3, [r7, #24]
 800a0da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d00b      	beq.n	800a0fa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a0e2:	6a3b      	ldr	r3, [r7, #32]
 800a0e4:	f043 0308 	orr.w	r3, r3, #8
 800a0e8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a0f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a0fa:	69bb      	ldr	r3, [r7, #24]
 800a0fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a100:	2b00      	cmp	r3, #0
 800a102:	d00b      	beq.n	800a11c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a104:	6a3b      	ldr	r3, [r7, #32]
 800a106:	f043 0302 	orr.w	r3, r3, #2
 800a10a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a114:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a116:	2301      	movs	r3, #1
 800a118:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800a11c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a120:	2b00      	cmp	r3, #0
 800a122:	d01c      	beq.n	800a15e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a124:	68f8      	ldr	r0, [r7, #12]
 800a126:	f7ff fe45 	bl	8009db4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	6859      	ldr	r1, [r3, #4]
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681a      	ldr	r2, [r3, #0]
 800a134:	4b0d      	ldr	r3, [pc, #52]	; (800a16c <I2C_IsErrorOccurred+0x1bc>)
 800a136:	400b      	ands	r3, r1
 800a138:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a13e:	6a3b      	ldr	r3, [r7, #32]
 800a140:	431a      	orrs	r2, r3
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2220      	movs	r2, #32
 800a14a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	2200      	movs	r2, #0
 800a152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2200      	movs	r2, #0
 800a15a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800a15e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a162:	4618      	mov	r0, r3
 800a164:	3728      	adds	r7, #40	; 0x28
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	fe00e800 	.word	0xfe00e800

0800a170 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a170:	b480      	push	{r7}
 800a172:	b087      	sub	sp, #28
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	607b      	str	r3, [r7, #4]
 800a17a:	460b      	mov	r3, r1
 800a17c:	817b      	strh	r3, [r7, #10]
 800a17e:	4613      	mov	r3, r2
 800a180:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a182:	897b      	ldrh	r3, [r7, #10]
 800a184:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a188:	7a7b      	ldrb	r3, [r7, #9]
 800a18a:	041b      	lsls	r3, r3, #16
 800a18c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a190:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a196:	6a3b      	ldr	r3, [r7, #32]
 800a198:	4313      	orrs	r3, r2
 800a19a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a19e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	685a      	ldr	r2, [r3, #4]
 800a1a6:	6a3b      	ldr	r3, [r7, #32]
 800a1a8:	0d5b      	lsrs	r3, r3, #21
 800a1aa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a1ae:	4b08      	ldr	r3, [pc, #32]	; (800a1d0 <I2C_TransferConfig+0x60>)
 800a1b0:	430b      	orrs	r3, r1
 800a1b2:	43db      	mvns	r3, r3
 800a1b4:	ea02 0103 	and.w	r1, r2, r3
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	697a      	ldr	r2, [r7, #20]
 800a1be:	430a      	orrs	r2, r1
 800a1c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a1c2:	bf00      	nop
 800a1c4:	371c      	adds	r7, #28
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr
 800a1ce:	bf00      	nop
 800a1d0:	03ff63ff 	.word	0x03ff63ff

0800a1d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a1e4:	b2db      	uxtb	r3, r3
 800a1e6:	2b20      	cmp	r3, #32
 800a1e8:	d138      	bne.n	800a25c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	d101      	bne.n	800a1f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a1f4:	2302      	movs	r3, #2
 800a1f6:	e032      	b.n	800a25e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2224      	movs	r2, #36	; 0x24
 800a204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	681a      	ldr	r2, [r3, #0]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f022 0201 	bic.w	r2, r2, #1
 800a216:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a226:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	6819      	ldr	r1, [r3, #0]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	683a      	ldr	r2, [r7, #0]
 800a234:	430a      	orrs	r2, r1
 800a236:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	681a      	ldr	r2, [r3, #0]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f042 0201 	orr.w	r2, r2, #1
 800a246:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2220      	movs	r2, #32
 800a24c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2200      	movs	r2, #0
 800a254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a258:	2300      	movs	r3, #0
 800a25a:	e000      	b.n	800a25e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a25c:	2302      	movs	r3, #2
  }
}
 800a25e:	4618      	mov	r0, r3
 800a260:	370c      	adds	r7, #12
 800a262:	46bd      	mov	sp, r7
 800a264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a268:	4770      	bx	lr

0800a26a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a26a:	b480      	push	{r7}
 800a26c:	b085      	sub	sp, #20
 800a26e:	af00      	add	r7, sp, #0
 800a270:	6078      	str	r0, [r7, #4]
 800a272:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a27a:	b2db      	uxtb	r3, r3
 800a27c:	2b20      	cmp	r3, #32
 800a27e:	d139      	bne.n	800a2f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a286:	2b01      	cmp	r3, #1
 800a288:	d101      	bne.n	800a28e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a28a:	2302      	movs	r3, #2
 800a28c:	e033      	b.n	800a2f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2201      	movs	r2, #1
 800a292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2224      	movs	r2, #36	; 0x24
 800a29a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	681a      	ldr	r2, [r3, #0]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f022 0201 	bic.w	r2, r2, #1
 800a2ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a2bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	021b      	lsls	r3, r3, #8
 800a2c2:	68fa      	ldr	r2, [r7, #12]
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	68fa      	ldr	r2, [r7, #12]
 800a2ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	681a      	ldr	r2, [r3, #0]
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f042 0201 	orr.w	r2, r2, #1
 800a2de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2220      	movs	r2, #32
 800a2e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	e000      	b.n	800a2f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a2f4:	2302      	movs	r3, #2
  }
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3714      	adds	r7, #20
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr
	...

0800a304 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b084      	sub	sp, #16
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d101      	bne.n	800a316 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800a312:	2301      	movs	r3, #1
 800a314:	e0bf      	b.n	800a496 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800a31c:	b2db      	uxtb	r3, r3
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d106      	bne.n	800a330 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2200      	movs	r2, #0
 800a326:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f7f7 f8ca 	bl	80014c4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2202      	movs	r2, #2
 800a334:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	699a      	ldr	r2, [r3, #24]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800a346:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	6999      	ldr	r1, [r3, #24]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	685a      	ldr	r2, [r3, #4]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	689b      	ldr	r3, [r3, #8]
 800a356:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a35c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	691b      	ldr	r3, [r3, #16]
 800a362:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	430a      	orrs	r2, r1
 800a36a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	6899      	ldr	r1, [r3, #8]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681a      	ldr	r2, [r3, #0]
 800a376:	4b4a      	ldr	r3, [pc, #296]	; (800a4a0 <HAL_LTDC_Init+0x19c>)
 800a378:	400b      	ands	r3, r1
 800a37a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	695b      	ldr	r3, [r3, #20]
 800a380:	041b      	lsls	r3, r3, #16
 800a382:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	6899      	ldr	r1, [r3, #8]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	699a      	ldr	r2, [r3, #24]
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	431a      	orrs	r2, r3
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	430a      	orrs	r2, r1
 800a398:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	68d9      	ldr	r1, [r3, #12]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681a      	ldr	r2, [r3, #0]
 800a3a4:	4b3e      	ldr	r3, [pc, #248]	; (800a4a0 <HAL_LTDC_Init+0x19c>)
 800a3a6:	400b      	ands	r3, r1
 800a3a8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	69db      	ldr	r3, [r3, #28]
 800a3ae:	041b      	lsls	r3, r3, #16
 800a3b0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	68d9      	ldr	r1, [r3, #12]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6a1a      	ldr	r2, [r3, #32]
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	431a      	orrs	r2, r3
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	430a      	orrs	r2, r1
 800a3c6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	6919      	ldr	r1, [r3, #16]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	4b33      	ldr	r3, [pc, #204]	; (800a4a0 <HAL_LTDC_Init+0x19c>)
 800a3d4:	400b      	ands	r3, r1
 800a3d6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3dc:	041b      	lsls	r3, r3, #16
 800a3de:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	6919      	ldr	r1, [r3, #16]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	431a      	orrs	r2, r3
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	430a      	orrs	r2, r1
 800a3f4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	6959      	ldr	r1, [r3, #20]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681a      	ldr	r2, [r3, #0]
 800a400:	4b27      	ldr	r3, [pc, #156]	; (800a4a0 <HAL_LTDC_Init+0x19c>)
 800a402:	400b      	ands	r3, r1
 800a404:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a40a:	041b      	lsls	r3, r3, #16
 800a40c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	6959      	ldr	r1, [r3, #20]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	431a      	orrs	r2, r3
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	430a      	orrs	r2, r1
 800a422:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a42a:	021b      	lsls	r3, r3, #8
 800a42c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800a434:	041b      	lsls	r3, r3, #16
 800a436:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800a446:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a44e:	68ba      	ldr	r2, [r7, #8]
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	4313      	orrs	r3, r2
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800a45a:	431a      	orrs	r2, r3
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	430a      	orrs	r2, r1
 800a462:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f042 0206 	orr.w	r2, r2, #6
 800a472:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	699a      	ldr	r2, [r3, #24]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f042 0201 	orr.w	r2, r2, #1
 800a482:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2201      	movs	r2, #1
 800a490:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800a494:	2300      	movs	r3, #0
}
 800a496:	4618      	mov	r0, r3
 800a498:	3710      	adds	r7, #16
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}
 800a49e:	bf00      	nop
 800a4a0:	f000f800 	.word	0xf000f800

0800a4a4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4b2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4ba:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	f003 0304 	and.w	r3, r3, #4
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d023      	beq.n	800a50e <HAL_LTDC_IRQHandler+0x6a>
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	f003 0304 	and.w	r3, r3, #4
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d01e      	beq.n	800a50e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f022 0204 	bic.w	r2, r2, #4
 800a4de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	2204      	movs	r2, #4
 800a4e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a4ee:	f043 0201 	orr.w	r2, r3, #1
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2204      	movs	r2, #4
 800a4fc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2200      	movs	r2, #0
 800a504:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 f86f 	bl	800a5ec <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	f003 0302 	and.w	r3, r3, #2
 800a514:	2b00      	cmp	r3, #0
 800a516:	d023      	beq.n	800a560 <HAL_LTDC_IRQHandler+0xbc>
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	f003 0302 	and.w	r3, r3, #2
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d01e      	beq.n	800a560 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f022 0202 	bic.w	r2, r2, #2
 800a530:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	2202      	movs	r2, #2
 800a538:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a540:	f043 0202 	orr.w	r2, r3, #2
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2204      	movs	r2, #4
 800a54e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2200      	movs	r2, #0
 800a556:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f000 f846 	bl	800a5ec <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f003 0301 	and.w	r3, r3, #1
 800a566:	2b00      	cmp	r3, #0
 800a568:	d01b      	beq.n	800a5a2 <HAL_LTDC_IRQHandler+0xfe>
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	f003 0301 	and.w	r3, r3, #1
 800a570:	2b00      	cmp	r3, #0
 800a572:	d016      	beq.n	800a5a2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f022 0201 	bic.w	r2, r2, #1
 800a582:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2201      	movs	r2, #1
 800a58a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2201      	movs	r2, #1
 800a590:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2200      	movs	r2, #0
 800a598:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f000 f82f 	bl	800a600 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f003 0308 	and.w	r3, r3, #8
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d01b      	beq.n	800a5e4 <HAL_LTDC_IRQHandler+0x140>
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	f003 0308 	and.w	r3, r3, #8
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d016      	beq.n	800a5e4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f022 0208 	bic.w	r2, r2, #8
 800a5c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	2208      	movs	r2, #8
 800a5cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f000 f818 	bl	800a614 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800a5e4:	bf00      	nop
 800a5e6:	3710      	adds	r7, #16
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800a5f4:	bf00      	nop
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800a608:	bf00      	nop
 800a60a:	370c      	adds	r7, #12
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr

0800a614 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a614:	b480      	push	{r7}
 800a616:	b083      	sub	sp, #12
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800a61c:	bf00      	nop
 800a61e:	370c      	adds	r7, #12
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a628:	b5b0      	push	{r4, r5, r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	60b9      	str	r1, [r7, #8]
 800a632:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d101      	bne.n	800a642 <HAL_LTDC_ConfigLayer+0x1a>
 800a63e:	2302      	movs	r3, #2
 800a640:	e02c      	b.n	800a69c <HAL_LTDC_ConfigLayer+0x74>
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2201      	movs	r2, #1
 800a646:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	2202      	movs	r2, #2
 800a64e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a652:	68fa      	ldr	r2, [r7, #12]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2134      	movs	r1, #52	; 0x34
 800a658:	fb01 f303 	mul.w	r3, r1, r3
 800a65c:	4413      	add	r3, r2
 800a65e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	4614      	mov	r4, r2
 800a666:	461d      	mov	r5, r3
 800a668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a66a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a66c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a66e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a674:	682b      	ldr	r3, [r5, #0]
 800a676:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a678:	687a      	ldr	r2, [r7, #4]
 800a67a:	68b9      	ldr	r1, [r7, #8]
 800a67c:	68f8      	ldr	r0, [r7, #12]
 800a67e:	f000 f811 	bl	800a6a4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	2201      	movs	r2, #1
 800a688:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2201      	movs	r2, #1
 800a68e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2200      	movs	r2, #0
 800a696:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800a69a:	2300      	movs	r3, #0
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3710      	adds	r7, #16
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bdb0      	pop	{r4, r5, r7, pc}

0800a6a4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b089      	sub	sp, #36	; 0x24
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	60f8      	str	r0, [r7, #12]
 800a6ac:	60b9      	str	r1, [r7, #8]
 800a6ae:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	685a      	ldr	r2, [r3, #4]
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	68db      	ldr	r3, [r3, #12]
 800a6ba:	0c1b      	lsrs	r3, r3, #16
 800a6bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a6c0:	4413      	add	r3, r2
 800a6c2:	041b      	lsls	r3, r3, #16
 800a6c4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	01db      	lsls	r3, r3, #7
 800a6d0:	4413      	add	r3, r2
 800a6d2:	3384      	adds	r3, #132	; 0x84
 800a6d4:	685b      	ldr	r3, [r3, #4]
 800a6d6:	68fa      	ldr	r2, [r7, #12]
 800a6d8:	6812      	ldr	r2, [r2, #0]
 800a6da:	4611      	mov	r1, r2
 800a6dc:	687a      	ldr	r2, [r7, #4]
 800a6de:	01d2      	lsls	r2, r2, #7
 800a6e0:	440a      	add	r2, r1
 800a6e2:	3284      	adds	r2, #132	; 0x84
 800a6e4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a6e8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	68db      	ldr	r3, [r3, #12]
 800a6f4:	0c1b      	lsrs	r3, r3, #16
 800a6f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a6fa:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a6fc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	4619      	mov	r1, r3
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	01db      	lsls	r3, r3, #7
 800a708:	440b      	add	r3, r1
 800a70a:	3384      	adds	r3, #132	; 0x84
 800a70c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a70e:	69fb      	ldr	r3, [r7, #28]
 800a710:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a712:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	68da      	ldr	r2, [r3, #12]
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	68db      	ldr	r3, [r3, #12]
 800a71e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a722:	4413      	add	r3, r2
 800a724:	041b      	lsls	r3, r3, #16
 800a726:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	461a      	mov	r2, r3
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	01db      	lsls	r3, r3, #7
 800a732:	4413      	add	r3, r2
 800a734:	3384      	adds	r3, #132	; 0x84
 800a736:	689b      	ldr	r3, [r3, #8]
 800a738:	68fa      	ldr	r2, [r7, #12]
 800a73a:	6812      	ldr	r2, [r2, #0]
 800a73c:	4611      	mov	r1, r2
 800a73e:	687a      	ldr	r2, [r7, #4]
 800a740:	01d2      	lsls	r2, r2, #7
 800a742:	440a      	add	r2, r1
 800a744:	3284      	adds	r2, #132	; 0x84
 800a746:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a74a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	689a      	ldr	r2, [r3, #8]
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	68db      	ldr	r3, [r3, #12]
 800a756:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a75a:	4413      	add	r3, r2
 800a75c:	1c5a      	adds	r2, r3, #1
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4619      	mov	r1, r3
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	01db      	lsls	r3, r3, #7
 800a768:	440b      	add	r3, r1
 800a76a:	3384      	adds	r3, #132	; 0x84
 800a76c:	4619      	mov	r1, r3
 800a76e:	69fb      	ldr	r3, [r7, #28]
 800a770:	4313      	orrs	r3, r2
 800a772:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	461a      	mov	r2, r3
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	01db      	lsls	r3, r3, #7
 800a77e:	4413      	add	r3, r2
 800a780:	3384      	adds	r3, #132	; 0x84
 800a782:	691b      	ldr	r3, [r3, #16]
 800a784:	68fa      	ldr	r2, [r7, #12]
 800a786:	6812      	ldr	r2, [r2, #0]
 800a788:	4611      	mov	r1, r2
 800a78a:	687a      	ldr	r2, [r7, #4]
 800a78c:	01d2      	lsls	r2, r2, #7
 800a78e:	440a      	add	r2, r1
 800a790:	3284      	adds	r2, #132	; 0x84
 800a792:	f023 0307 	bic.w	r3, r3, #7
 800a796:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	461a      	mov	r2, r3
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	01db      	lsls	r3, r3, #7
 800a7a2:	4413      	add	r3, r2
 800a7a4:	3384      	adds	r3, #132	; 0x84
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	691b      	ldr	r3, [r3, #16]
 800a7ac:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a7b4:	021b      	lsls	r3, r3, #8
 800a7b6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a7be:	041b      	lsls	r3, r3, #16
 800a7c0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	699b      	ldr	r3, [r3, #24]
 800a7c6:	061b      	lsls	r3, r3, #24
 800a7c8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	01db      	lsls	r3, r3, #7
 800a7d4:	4413      	add	r3, r2
 800a7d6:	3384      	adds	r3, #132	; 0x84
 800a7d8:	699b      	ldr	r3, [r3, #24]
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	461a      	mov	r2, r3
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	01db      	lsls	r3, r3, #7
 800a7e4:	4413      	add	r3, r2
 800a7e6:	3384      	adds	r3, #132	; 0x84
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a7f4:	461a      	mov	r2, r3
 800a7f6:	69fb      	ldr	r3, [r7, #28]
 800a7f8:	431a      	orrs	r2, r3
 800a7fa:	69bb      	ldr	r3, [r7, #24]
 800a7fc:	431a      	orrs	r2, r3
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4619      	mov	r1, r3
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	01db      	lsls	r3, r3, #7
 800a808:	440b      	add	r3, r1
 800a80a:	3384      	adds	r3, #132	; 0x84
 800a80c:	4619      	mov	r1, r3
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	4313      	orrs	r3, r2
 800a812:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	461a      	mov	r2, r3
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	01db      	lsls	r3, r3, #7
 800a81e:	4413      	add	r3, r2
 800a820:	3384      	adds	r3, #132	; 0x84
 800a822:	695b      	ldr	r3, [r3, #20]
 800a824:	68fa      	ldr	r2, [r7, #12]
 800a826:	6812      	ldr	r2, [r2, #0]
 800a828:	4611      	mov	r1, r2
 800a82a:	687a      	ldr	r2, [r7, #4]
 800a82c:	01d2      	lsls	r2, r2, #7
 800a82e:	440a      	add	r2, r1
 800a830:	3284      	adds	r2, #132	; 0x84
 800a832:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a836:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	461a      	mov	r2, r3
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	01db      	lsls	r3, r3, #7
 800a842:	4413      	add	r3, r2
 800a844:	3384      	adds	r3, #132	; 0x84
 800a846:	461a      	mov	r2, r3
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	695b      	ldr	r3, [r3, #20]
 800a84c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	461a      	mov	r2, r3
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	01db      	lsls	r3, r3, #7
 800a858:	4413      	add	r3, r2
 800a85a:	3384      	adds	r3, #132	; 0x84
 800a85c:	69da      	ldr	r2, [r3, #28]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4619      	mov	r1, r3
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	01db      	lsls	r3, r3, #7
 800a868:	440b      	add	r3, r1
 800a86a:	3384      	adds	r3, #132	; 0x84
 800a86c:	4619      	mov	r1, r3
 800a86e:	4b58      	ldr	r3, [pc, #352]	; (800a9d0 <LTDC_SetConfig+0x32c>)
 800a870:	4013      	ands	r3, r2
 800a872:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	69da      	ldr	r2, [r3, #28]
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	6a1b      	ldr	r3, [r3, #32]
 800a87c:	68f9      	ldr	r1, [r7, #12]
 800a87e:	6809      	ldr	r1, [r1, #0]
 800a880:	4608      	mov	r0, r1
 800a882:	6879      	ldr	r1, [r7, #4]
 800a884:	01c9      	lsls	r1, r1, #7
 800a886:	4401      	add	r1, r0
 800a888:	3184      	adds	r1, #132	; 0x84
 800a88a:	4313      	orrs	r3, r2
 800a88c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	461a      	mov	r2, r3
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	01db      	lsls	r3, r3, #7
 800a898:	4413      	add	r3, r2
 800a89a:	3384      	adds	r3, #132	; 0x84
 800a89c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	01db      	lsls	r3, r3, #7
 800a8a8:	4413      	add	r3, r2
 800a8aa:	3384      	adds	r3, #132	; 0x84
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	01db      	lsls	r3, r3, #7
 800a8bc:	4413      	add	r3, r2
 800a8be:	3384      	adds	r3, #132	; 0x84
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	691b      	ldr	r3, [r3, #16]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d102      	bne.n	800a8d6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800a8d0:	2304      	movs	r3, #4
 800a8d2:	61fb      	str	r3, [r7, #28]
 800a8d4:	e01b      	b.n	800a90e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	691b      	ldr	r3, [r3, #16]
 800a8da:	2b01      	cmp	r3, #1
 800a8dc:	d102      	bne.n	800a8e4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800a8de:	2303      	movs	r3, #3
 800a8e0:	61fb      	str	r3, [r7, #28]
 800a8e2:	e014      	b.n	800a90e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	691b      	ldr	r3, [r3, #16]
 800a8e8:	2b04      	cmp	r3, #4
 800a8ea:	d00b      	beq.n	800a904 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a8f0:	2b02      	cmp	r3, #2
 800a8f2:	d007      	beq.n	800a904 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a8f8:	2b03      	cmp	r3, #3
 800a8fa:	d003      	beq.n	800a904 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a900:	2b07      	cmp	r3, #7
 800a902:	d102      	bne.n	800a90a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800a904:	2302      	movs	r3, #2
 800a906:	61fb      	str	r3, [r7, #28]
 800a908:	e001      	b.n	800a90e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800a90a:	2301      	movs	r3, #1
 800a90c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	461a      	mov	r2, r3
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	01db      	lsls	r3, r3, #7
 800a918:	4413      	add	r3, r2
 800a91a:	3384      	adds	r3, #132	; 0x84
 800a91c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a91e:	68fa      	ldr	r2, [r7, #12]
 800a920:	6812      	ldr	r2, [r2, #0]
 800a922:	4611      	mov	r1, r2
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	01d2      	lsls	r2, r2, #7
 800a928:	440a      	add	r2, r1
 800a92a:	3284      	adds	r2, #132	; 0x84
 800a92c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800a930:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a936:	69fa      	ldr	r2, [r7, #28]
 800a938:	fb02 f303 	mul.w	r3, r2, r3
 800a93c:	041a      	lsls	r2, r3, #16
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	6859      	ldr	r1, [r3, #4]
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	1acb      	subs	r3, r1, r3
 800a948:	69f9      	ldr	r1, [r7, #28]
 800a94a:	fb01 f303 	mul.w	r3, r1, r3
 800a94e:	3307      	adds	r3, #7
 800a950:	68f9      	ldr	r1, [r7, #12]
 800a952:	6809      	ldr	r1, [r1, #0]
 800a954:	4608      	mov	r0, r1
 800a956:	6879      	ldr	r1, [r7, #4]
 800a958:	01c9      	lsls	r1, r1, #7
 800a95a:	4401      	add	r1, r0
 800a95c:	3184      	adds	r1, #132	; 0x84
 800a95e:	4313      	orrs	r3, r2
 800a960:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	461a      	mov	r2, r3
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	01db      	lsls	r3, r3, #7
 800a96c:	4413      	add	r3, r2
 800a96e:	3384      	adds	r3, #132	; 0x84
 800a970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	4619      	mov	r1, r3
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	01db      	lsls	r3, r3, #7
 800a97c:	440b      	add	r3, r1
 800a97e:	3384      	adds	r3, #132	; 0x84
 800a980:	4619      	mov	r1, r3
 800a982:	4b14      	ldr	r3, [pc, #80]	; (800a9d4 <LTDC_SetConfig+0x330>)
 800a984:	4013      	ands	r3, r2
 800a986:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	461a      	mov	r2, r3
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	01db      	lsls	r3, r3, #7
 800a992:	4413      	add	r3, r2
 800a994:	3384      	adds	r3, #132	; 0x84
 800a996:	461a      	mov	r2, r3
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a99c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	01db      	lsls	r3, r3, #7
 800a9a8:	4413      	add	r3, r2
 800a9aa:	3384      	adds	r3, #132	; 0x84
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	68fa      	ldr	r2, [r7, #12]
 800a9b0:	6812      	ldr	r2, [r2, #0]
 800a9b2:	4611      	mov	r1, r2
 800a9b4:	687a      	ldr	r2, [r7, #4]
 800a9b6:	01d2      	lsls	r2, r2, #7
 800a9b8:	440a      	add	r2, r1
 800a9ba:	3284      	adds	r2, #132	; 0x84
 800a9bc:	f043 0301 	orr.w	r3, r3, #1
 800a9c0:	6013      	str	r3, [r2, #0]
}
 800a9c2:	bf00      	nop
 800a9c4:	3724      	adds	r7, #36	; 0x24
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr
 800a9ce:	bf00      	nop
 800a9d0:	fffff8f8 	.word	0xfffff8f8
 800a9d4:	fffff800 	.word	0xfffff800

0800a9d8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 800a9dc:	4b05      	ldr	r3, [pc, #20]	; (800a9f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	4a04      	ldr	r2, [pc, #16]	; (800a9f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a9e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9e6:	6013      	str	r3, [r2, #0]
}
 800a9e8:	bf00      	nop
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr
 800a9f2:	bf00      	nop
 800a9f4:	58024800 	.word	0x58024800

0800a9f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b084      	sub	sp, #16
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800aa00:	4b29      	ldr	r3, [pc, #164]	; (800aaa8 <HAL_PWREx_ConfigSupply+0xb0>)
 800aa02:	68db      	ldr	r3, [r3, #12]
 800aa04:	f003 0307 	and.w	r3, r3, #7
 800aa08:	2b06      	cmp	r3, #6
 800aa0a:	d00a      	beq.n	800aa22 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800aa0c:	4b26      	ldr	r3, [pc, #152]	; (800aaa8 <HAL_PWREx_ConfigSupply+0xb0>)
 800aa0e:	68db      	ldr	r3, [r3, #12]
 800aa10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa14:	687a      	ldr	r2, [r7, #4]
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d001      	beq.n	800aa1e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	e040      	b.n	800aaa0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	e03e      	b.n	800aaa0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800aa22:	4b21      	ldr	r3, [pc, #132]	; (800aaa8 <HAL_PWREx_ConfigSupply+0xb0>)
 800aa24:	68db      	ldr	r3, [r3, #12]
 800aa26:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800aa2a:	491f      	ldr	r1, [pc, #124]	; (800aaa8 <HAL_PWREx_ConfigSupply+0xb0>)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800aa32:	f7f9 fea1 	bl	8004778 <HAL_GetTick>
 800aa36:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800aa38:	e009      	b.n	800aa4e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800aa3a:	f7f9 fe9d 	bl	8004778 <HAL_GetTick>
 800aa3e:	4602      	mov	r2, r0
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	1ad3      	subs	r3, r2, r3
 800aa44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aa48:	d901      	bls.n	800aa4e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	e028      	b.n	800aaa0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800aa4e:	4b16      	ldr	r3, [pc, #88]	; (800aaa8 <HAL_PWREx_ConfigSupply+0xb0>)
 800aa50:	685b      	ldr	r3, [r3, #4]
 800aa52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aa56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa5a:	d1ee      	bne.n	800aa3a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2b1e      	cmp	r3, #30
 800aa60:	d008      	beq.n	800aa74 <HAL_PWREx_ConfigSupply+0x7c>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2b2e      	cmp	r3, #46	; 0x2e
 800aa66:	d005      	beq.n	800aa74 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2b1d      	cmp	r3, #29
 800aa6c:	d002      	beq.n	800aa74 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2b2d      	cmp	r3, #45	; 0x2d
 800aa72:	d114      	bne.n	800aa9e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800aa74:	f7f9 fe80 	bl	8004778 <HAL_GetTick>
 800aa78:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800aa7a:	e009      	b.n	800aa90 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800aa7c:	f7f9 fe7c 	bl	8004778 <HAL_GetTick>
 800aa80:	4602      	mov	r2, r0
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	1ad3      	subs	r3, r2, r3
 800aa86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aa8a:	d901      	bls.n	800aa90 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	e007      	b.n	800aaa0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800aa90:	4b05      	ldr	r3, [pc, #20]	; (800aaa8 <HAL_PWREx_ConfigSupply+0xb0>)
 800aa92:	68db      	ldr	r3, [r3, #12]
 800aa94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa9c:	d1ee      	bne.n	800aa7c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800aa9e:	2300      	movs	r3, #0
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3710      	adds	r7, #16
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}
 800aaa8:	58024800 	.word	0x58024800

0800aaac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b08c      	sub	sp, #48	; 0x30
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d102      	bne.n	800aac0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800aaba:	2301      	movs	r3, #1
 800aabc:	f000 bc1f 	b.w	800b2fe <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f003 0301 	and.w	r3, r3, #1
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	f000 80b3 	beq.w	800ac34 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aace:	4b95      	ldr	r3, [pc, #596]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800aad0:	691b      	ldr	r3, [r3, #16]
 800aad2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aad6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aad8:	4b92      	ldr	r3, [pc, #584]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800aada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aadc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800aade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae0:	2b10      	cmp	r3, #16
 800aae2:	d007      	beq.n	800aaf4 <HAL_RCC_OscConfig+0x48>
 800aae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae6:	2b18      	cmp	r3, #24
 800aae8:	d112      	bne.n	800ab10 <HAL_RCC_OscConfig+0x64>
 800aaea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaec:	f003 0303 	and.w	r3, r3, #3
 800aaf0:	2b02      	cmp	r3, #2
 800aaf2:	d10d      	bne.n	800ab10 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aaf4:	4b8b      	ldr	r3, [pc, #556]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	f000 8098 	beq.w	800ac32 <HAL_RCC_OscConfig+0x186>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	f040 8093 	bne.w	800ac32 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	e3f6      	b.n	800b2fe <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab18:	d106      	bne.n	800ab28 <HAL_RCC_OscConfig+0x7c>
 800ab1a:	4b82      	ldr	r3, [pc, #520]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	4a81      	ldr	r2, [pc, #516]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800ab20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab24:	6013      	str	r3, [r2, #0]
 800ab26:	e058      	b.n	800abda <HAL_RCC_OscConfig+0x12e>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	685b      	ldr	r3, [r3, #4]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d112      	bne.n	800ab56 <HAL_RCC_OscConfig+0xaa>
 800ab30:	4b7c      	ldr	r3, [pc, #496]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4a7b      	ldr	r2, [pc, #492]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800ab36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab3a:	6013      	str	r3, [r2, #0]
 800ab3c:	4b79      	ldr	r3, [pc, #484]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	4a78      	ldr	r2, [pc, #480]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800ab42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ab46:	6013      	str	r3, [r2, #0]
 800ab48:	4b76      	ldr	r3, [pc, #472]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a75      	ldr	r2, [pc, #468]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800ab4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ab52:	6013      	str	r3, [r2, #0]
 800ab54:	e041      	b.n	800abda <HAL_RCC_OscConfig+0x12e>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ab5e:	d112      	bne.n	800ab86 <HAL_RCC_OscConfig+0xda>
 800ab60:	4b70      	ldr	r3, [pc, #448]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	4a6f      	ldr	r2, [pc, #444]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800ab66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ab6a:	6013      	str	r3, [r2, #0]
 800ab6c:	4b6d      	ldr	r3, [pc, #436]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	4a6c      	ldr	r2, [pc, #432]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800ab72:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ab76:	6013      	str	r3, [r2, #0]
 800ab78:	4b6a      	ldr	r3, [pc, #424]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	4a69      	ldr	r2, [pc, #420]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800ab7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab82:	6013      	str	r3, [r2, #0]
 800ab84:	e029      	b.n	800abda <HAL_RCC_OscConfig+0x12e>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800ab8e:	d112      	bne.n	800abb6 <HAL_RCC_OscConfig+0x10a>
 800ab90:	4b64      	ldr	r3, [pc, #400]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4a63      	ldr	r2, [pc, #396]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800ab96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ab9a:	6013      	str	r3, [r2, #0]
 800ab9c:	4b61      	ldr	r3, [pc, #388]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4a60      	ldr	r2, [pc, #384]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800aba2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aba6:	6013      	str	r3, [r2, #0]
 800aba8:	4b5e      	ldr	r3, [pc, #376]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4a5d      	ldr	r2, [pc, #372]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800abae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800abb2:	6013      	str	r3, [r2, #0]
 800abb4:	e011      	b.n	800abda <HAL_RCC_OscConfig+0x12e>
 800abb6:	4b5b      	ldr	r3, [pc, #364]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4a5a      	ldr	r2, [pc, #360]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800abbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800abc0:	6013      	str	r3, [r2, #0]
 800abc2:	4b58      	ldr	r3, [pc, #352]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4a57      	ldr	r2, [pc, #348]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800abc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800abcc:	6013      	str	r3, [r2, #0]
 800abce:	4b55      	ldr	r3, [pc, #340]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4a54      	ldr	r2, [pc, #336]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800abd4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800abd8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d013      	beq.n	800ac0a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abe2:	f7f9 fdc9 	bl	8004778 <HAL_GetTick>
 800abe6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800abe8:	e008      	b.n	800abfc <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800abea:	f7f9 fdc5 	bl	8004778 <HAL_GetTick>
 800abee:	4602      	mov	r2, r0
 800abf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf2:	1ad3      	subs	r3, r2, r3
 800abf4:	2b64      	cmp	r3, #100	; 0x64
 800abf6:	d901      	bls.n	800abfc <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800abf8:	2303      	movs	r3, #3
 800abfa:	e380      	b.n	800b2fe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800abfc:	4b49      	ldr	r3, [pc, #292]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d0f0      	beq.n	800abea <HAL_RCC_OscConfig+0x13e>
 800ac08:	e014      	b.n	800ac34 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac0a:	f7f9 fdb5 	bl	8004778 <HAL_GetTick>
 800ac0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ac10:	e008      	b.n	800ac24 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ac12:	f7f9 fdb1 	bl	8004778 <HAL_GetTick>
 800ac16:	4602      	mov	r2, r0
 800ac18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac1a:	1ad3      	subs	r3, r2, r3
 800ac1c:	2b64      	cmp	r3, #100	; 0x64
 800ac1e:	d901      	bls.n	800ac24 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800ac20:	2303      	movs	r3, #3
 800ac22:	e36c      	b.n	800b2fe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ac24:	4b3f      	ldr	r3, [pc, #252]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d1f0      	bne.n	800ac12 <HAL_RCC_OscConfig+0x166>
 800ac30:	e000      	b.n	800ac34 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac32:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f003 0302 	and.w	r3, r3, #2
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	f000 808c 	beq.w	800ad5a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ac42:	4b38      	ldr	r3, [pc, #224]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800ac44:	691b      	ldr	r3, [r3, #16]
 800ac46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac4a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ac4c:	4b35      	ldr	r3, [pc, #212]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800ac4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac50:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ac52:	6a3b      	ldr	r3, [r7, #32]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d007      	beq.n	800ac68 <HAL_RCC_OscConfig+0x1bc>
 800ac58:	6a3b      	ldr	r3, [r7, #32]
 800ac5a:	2b18      	cmp	r3, #24
 800ac5c:	d137      	bne.n	800acce <HAL_RCC_OscConfig+0x222>
 800ac5e:	69fb      	ldr	r3, [r7, #28]
 800ac60:	f003 0303 	and.w	r3, r3, #3
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d132      	bne.n	800acce <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ac68:	4b2e      	ldr	r3, [pc, #184]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f003 0304 	and.w	r3, r3, #4
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d005      	beq.n	800ac80 <HAL_RCC_OscConfig+0x1d4>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	68db      	ldr	r3, [r3, #12]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d101      	bne.n	800ac80 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	e33e      	b.n	800b2fe <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ac80:	4b28      	ldr	r3, [pc, #160]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f023 0219 	bic.w	r2, r3, #25
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	68db      	ldr	r3, [r3, #12]
 800ac8c:	4925      	ldr	r1, [pc, #148]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac92:	f7f9 fd71 	bl	8004778 <HAL_GetTick>
 800ac96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ac98:	e008      	b.n	800acac <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ac9a:	f7f9 fd6d 	bl	8004778 <HAL_GetTick>
 800ac9e:	4602      	mov	r2, r0
 800aca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca2:	1ad3      	subs	r3, r2, r3
 800aca4:	2b02      	cmp	r3, #2
 800aca6:	d901      	bls.n	800acac <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800aca8:	2303      	movs	r3, #3
 800acaa:	e328      	b.n	800b2fe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800acac:	4b1d      	ldr	r3, [pc, #116]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f003 0304 	and.w	r3, r3, #4
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d0f0      	beq.n	800ac9a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800acb8:	4b1a      	ldr	r3, [pc, #104]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	691b      	ldr	r3, [r3, #16]
 800acc4:	061b      	lsls	r3, r3, #24
 800acc6:	4917      	ldr	r1, [pc, #92]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800acc8:	4313      	orrs	r3, r2
 800acca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800accc:	e045      	b.n	800ad5a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	68db      	ldr	r3, [r3, #12]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d028      	beq.n	800ad28 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800acd6:	4b13      	ldr	r3, [pc, #76]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f023 0219 	bic.w	r2, r3, #25
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	68db      	ldr	r3, [r3, #12]
 800ace2:	4910      	ldr	r1, [pc, #64]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800ace4:	4313      	orrs	r3, r2
 800ace6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ace8:	f7f9 fd46 	bl	8004778 <HAL_GetTick>
 800acec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800acee:	e008      	b.n	800ad02 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800acf0:	f7f9 fd42 	bl	8004778 <HAL_GetTick>
 800acf4:	4602      	mov	r2, r0
 800acf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf8:	1ad3      	subs	r3, r2, r3
 800acfa:	2b02      	cmp	r3, #2
 800acfc:	d901      	bls.n	800ad02 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800acfe:	2303      	movs	r3, #3
 800ad00:	e2fd      	b.n	800b2fe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ad02:	4b08      	ldr	r3, [pc, #32]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f003 0304 	and.w	r3, r3, #4
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d0f0      	beq.n	800acf0 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ad0e:	4b05      	ldr	r3, [pc, #20]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	691b      	ldr	r3, [r3, #16]
 800ad1a:	061b      	lsls	r3, r3, #24
 800ad1c:	4901      	ldr	r1, [pc, #4]	; (800ad24 <HAL_RCC_OscConfig+0x278>)
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	604b      	str	r3, [r1, #4]
 800ad22:	e01a      	b.n	800ad5a <HAL_RCC_OscConfig+0x2ae>
 800ad24:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ad28:	4b97      	ldr	r3, [pc, #604]	; (800af88 <HAL_RCC_OscConfig+0x4dc>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	4a96      	ldr	r2, [pc, #600]	; (800af88 <HAL_RCC_OscConfig+0x4dc>)
 800ad2e:	f023 0301 	bic.w	r3, r3, #1
 800ad32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad34:	f7f9 fd20 	bl	8004778 <HAL_GetTick>
 800ad38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ad3a:	e008      	b.n	800ad4e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ad3c:	f7f9 fd1c 	bl	8004778 <HAL_GetTick>
 800ad40:	4602      	mov	r2, r0
 800ad42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad44:	1ad3      	subs	r3, r2, r3
 800ad46:	2b02      	cmp	r3, #2
 800ad48:	d901      	bls.n	800ad4e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800ad4a:	2303      	movs	r3, #3
 800ad4c:	e2d7      	b.n	800b2fe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ad4e:	4b8e      	ldr	r3, [pc, #568]	; (800af88 <HAL_RCC_OscConfig+0x4dc>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f003 0304 	and.w	r3, r3, #4
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d1f0      	bne.n	800ad3c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f003 0310 	and.w	r3, r3, #16
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d06a      	beq.n	800ae3c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ad66:	4b88      	ldr	r3, [pc, #544]	; (800af88 <HAL_RCC_OscConfig+0x4dc>)
 800ad68:	691b      	ldr	r3, [r3, #16]
 800ad6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ad6e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ad70:	4b85      	ldr	r3, [pc, #532]	; (800af88 <HAL_RCC_OscConfig+0x4dc>)
 800ad72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad74:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ad76:	69bb      	ldr	r3, [r7, #24]
 800ad78:	2b08      	cmp	r3, #8
 800ad7a:	d007      	beq.n	800ad8c <HAL_RCC_OscConfig+0x2e0>
 800ad7c:	69bb      	ldr	r3, [r7, #24]
 800ad7e:	2b18      	cmp	r3, #24
 800ad80:	d11b      	bne.n	800adba <HAL_RCC_OscConfig+0x30e>
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	f003 0303 	and.w	r3, r3, #3
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d116      	bne.n	800adba <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ad8c:	4b7e      	ldr	r3, [pc, #504]	; (800af88 <HAL_RCC_OscConfig+0x4dc>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d005      	beq.n	800ada4 <HAL_RCC_OscConfig+0x2f8>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	69db      	ldr	r3, [r3, #28]
 800ad9c:	2b80      	cmp	r3, #128	; 0x80
 800ad9e:	d001      	beq.n	800ada4 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800ada0:	2301      	movs	r3, #1
 800ada2:	e2ac      	b.n	800b2fe <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ada4:	4b78      	ldr	r3, [pc, #480]	; (800af88 <HAL_RCC_OscConfig+0x4dc>)
 800ada6:	68db      	ldr	r3, [r3, #12]
 800ada8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6a1b      	ldr	r3, [r3, #32]
 800adb0:	061b      	lsls	r3, r3, #24
 800adb2:	4975      	ldr	r1, [pc, #468]	; (800af88 <HAL_RCC_OscConfig+0x4dc>)
 800adb4:	4313      	orrs	r3, r2
 800adb6:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800adb8:	e040      	b.n	800ae3c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	69db      	ldr	r3, [r3, #28]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d023      	beq.n	800ae0a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800adc2:	4b71      	ldr	r3, [pc, #452]	; (800af88 <HAL_RCC_OscConfig+0x4dc>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4a70      	ldr	r2, [pc, #448]	; (800af88 <HAL_RCC_OscConfig+0x4dc>)
 800adc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adce:	f7f9 fcd3 	bl	8004778 <HAL_GetTick>
 800add2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800add4:	e008      	b.n	800ade8 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800add6:	f7f9 fccf 	bl	8004778 <HAL_GetTick>
 800adda:	4602      	mov	r2, r0
 800addc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adde:	1ad3      	subs	r3, r2, r3
 800ade0:	2b02      	cmp	r3, #2
 800ade2:	d901      	bls.n	800ade8 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800ade4:	2303      	movs	r3, #3
 800ade6:	e28a      	b.n	800b2fe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ade8:	4b67      	ldr	r3, [pc, #412]	; (800af88 <HAL_RCC_OscConfig+0x4dc>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d0f0      	beq.n	800add6 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800adf4:	4b64      	ldr	r3, [pc, #400]	; (800af88 <HAL_RCC_OscConfig+0x4dc>)
 800adf6:	68db      	ldr	r3, [r3, #12]
 800adf8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6a1b      	ldr	r3, [r3, #32]
 800ae00:	061b      	lsls	r3, r3, #24
 800ae02:	4961      	ldr	r1, [pc, #388]	; (800af88 <HAL_RCC_OscConfig+0x4dc>)
 800ae04:	4313      	orrs	r3, r2
 800ae06:	60cb      	str	r3, [r1, #12]
 800ae08:	e018      	b.n	800ae3c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800ae0a:	4b5f      	ldr	r3, [pc, #380]	; (800af88 <HAL_RCC_OscConfig+0x4dc>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	4a5e      	ldr	r2, [pc, #376]	; (800af88 <HAL_RCC_OscConfig+0x4dc>)
 800ae10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae16:	f7f9 fcaf 	bl	8004778 <HAL_GetTick>
 800ae1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ae1c:	e008      	b.n	800ae30 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ae1e:	f7f9 fcab 	bl	8004778 <HAL_GetTick>
 800ae22:	4602      	mov	r2, r0
 800ae24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae26:	1ad3      	subs	r3, r2, r3
 800ae28:	2b02      	cmp	r3, #2
 800ae2a:	d901      	bls.n	800ae30 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800ae2c:	2303      	movs	r3, #3
 800ae2e:	e266      	b.n	800b2fe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ae30:	4b55      	ldr	r3, [pc, #340]	; (800af88 <HAL_RCC_OscConfig+0x4dc>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d1f0      	bne.n	800ae1e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f003 0308 	and.w	r3, r3, #8
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d036      	beq.n	800aeb6 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	695b      	ldr	r3, [r3, #20]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d019      	beq.n	800ae84 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ae50:	4b4d      	ldr	r3, [pc, #308]	; (800af88 <HAL_RCC_OscConfig+0x4dc>)
 800ae52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae54:	4a4c      	ldr	r2, [pc, #304]	; (800af88 <HAL_RCC_OscConfig+0x4dc>)
 800ae56:	f043 0301 	orr.w	r3, r3, #1
 800ae5a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae5c:	f7f9 fc8c 	bl	8004778 <HAL_GetTick>
 800ae60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ae62:	e008      	b.n	800ae76 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ae64:	f7f9 fc88 	bl	8004778 <HAL_GetTick>
 800ae68:	4602      	mov	r2, r0
 800ae6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae6c:	1ad3      	subs	r3, r2, r3
 800ae6e:	2b02      	cmp	r3, #2
 800ae70:	d901      	bls.n	800ae76 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800ae72:	2303      	movs	r3, #3
 800ae74:	e243      	b.n	800b2fe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ae76:	4b44      	ldr	r3, [pc, #272]	; (800af88 <HAL_RCC_OscConfig+0x4dc>)
 800ae78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae7a:	f003 0302 	and.w	r3, r3, #2
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d0f0      	beq.n	800ae64 <HAL_RCC_OscConfig+0x3b8>
 800ae82:	e018      	b.n	800aeb6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ae84:	4b40      	ldr	r3, [pc, #256]	; (800af88 <HAL_RCC_OscConfig+0x4dc>)
 800ae86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae88:	4a3f      	ldr	r2, [pc, #252]	; (800af88 <HAL_RCC_OscConfig+0x4dc>)
 800ae8a:	f023 0301 	bic.w	r3, r3, #1
 800ae8e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae90:	f7f9 fc72 	bl	8004778 <HAL_GetTick>
 800ae94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ae96:	e008      	b.n	800aeaa <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ae98:	f7f9 fc6e 	bl	8004778 <HAL_GetTick>
 800ae9c:	4602      	mov	r2, r0
 800ae9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea0:	1ad3      	subs	r3, r2, r3
 800aea2:	2b02      	cmp	r3, #2
 800aea4:	d901      	bls.n	800aeaa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800aea6:	2303      	movs	r3, #3
 800aea8:	e229      	b.n	800b2fe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aeaa:	4b37      	ldr	r3, [pc, #220]	; (800af88 <HAL_RCC_OscConfig+0x4dc>)
 800aeac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aeae:	f003 0302 	and.w	r3, r3, #2
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d1f0      	bne.n	800ae98 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f003 0320 	and.w	r3, r3, #32
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d036      	beq.n	800af30 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	699b      	ldr	r3, [r3, #24]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d019      	beq.n	800aefe <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800aeca:	4b2f      	ldr	r3, [pc, #188]	; (800af88 <HAL_RCC_OscConfig+0x4dc>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4a2e      	ldr	r2, [pc, #184]	; (800af88 <HAL_RCC_OscConfig+0x4dc>)
 800aed0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aed4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800aed6:	f7f9 fc4f 	bl	8004778 <HAL_GetTick>
 800aeda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aedc:	e008      	b.n	800aef0 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aede:	f7f9 fc4b 	bl	8004778 <HAL_GetTick>
 800aee2:	4602      	mov	r2, r0
 800aee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee6:	1ad3      	subs	r3, r2, r3
 800aee8:	2b02      	cmp	r3, #2
 800aeea:	d901      	bls.n	800aef0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800aeec:	2303      	movs	r3, #3
 800aeee:	e206      	b.n	800b2fe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aef0:	4b25      	ldr	r3, [pc, #148]	; (800af88 <HAL_RCC_OscConfig+0x4dc>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d0f0      	beq.n	800aede <HAL_RCC_OscConfig+0x432>
 800aefc:	e018      	b.n	800af30 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800aefe:	4b22      	ldr	r3, [pc, #136]	; (800af88 <HAL_RCC_OscConfig+0x4dc>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	4a21      	ldr	r2, [pc, #132]	; (800af88 <HAL_RCC_OscConfig+0x4dc>)
 800af04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af08:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800af0a:	f7f9 fc35 	bl	8004778 <HAL_GetTick>
 800af0e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800af10:	e008      	b.n	800af24 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800af12:	f7f9 fc31 	bl	8004778 <HAL_GetTick>
 800af16:	4602      	mov	r2, r0
 800af18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af1a:	1ad3      	subs	r3, r2, r3
 800af1c:	2b02      	cmp	r3, #2
 800af1e:	d901      	bls.n	800af24 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800af20:	2303      	movs	r3, #3
 800af22:	e1ec      	b.n	800b2fe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800af24:	4b18      	ldr	r3, [pc, #96]	; (800af88 <HAL_RCC_OscConfig+0x4dc>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d1f0      	bne.n	800af12 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f003 0304 	and.w	r3, r3, #4
 800af38:	2b00      	cmp	r3, #0
 800af3a:	f000 80af 	beq.w	800b09c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800af3e:	4b13      	ldr	r3, [pc, #76]	; (800af8c <HAL_RCC_OscConfig+0x4e0>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	4a12      	ldr	r2, [pc, #72]	; (800af8c <HAL_RCC_OscConfig+0x4e0>)
 800af44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af48:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800af4a:	f7f9 fc15 	bl	8004778 <HAL_GetTick>
 800af4e:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800af50:	e008      	b.n	800af64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af52:	f7f9 fc11 	bl	8004778 <HAL_GetTick>
 800af56:	4602      	mov	r2, r0
 800af58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af5a:	1ad3      	subs	r3, r2, r3
 800af5c:	2b64      	cmp	r3, #100	; 0x64
 800af5e:	d901      	bls.n	800af64 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800af60:	2303      	movs	r3, #3
 800af62:	e1cc      	b.n	800b2fe <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800af64:	4b09      	ldr	r3, [pc, #36]	; (800af8c <HAL_RCC_OscConfig+0x4e0>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d0f0      	beq.n	800af52 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	689b      	ldr	r3, [r3, #8]
 800af74:	2b01      	cmp	r3, #1
 800af76:	d10b      	bne.n	800af90 <HAL_RCC_OscConfig+0x4e4>
 800af78:	4b03      	ldr	r3, [pc, #12]	; (800af88 <HAL_RCC_OscConfig+0x4dc>)
 800af7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af7c:	4a02      	ldr	r2, [pc, #8]	; (800af88 <HAL_RCC_OscConfig+0x4dc>)
 800af7e:	f043 0301 	orr.w	r3, r3, #1
 800af82:	6713      	str	r3, [r2, #112]	; 0x70
 800af84:	e05b      	b.n	800b03e <HAL_RCC_OscConfig+0x592>
 800af86:	bf00      	nop
 800af88:	58024400 	.word	0x58024400
 800af8c:	58024800 	.word	0x58024800
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	689b      	ldr	r3, [r3, #8]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d112      	bne.n	800afbe <HAL_RCC_OscConfig+0x512>
 800af98:	4b9d      	ldr	r3, [pc, #628]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800af9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af9c:	4a9c      	ldr	r2, [pc, #624]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800af9e:	f023 0301 	bic.w	r3, r3, #1
 800afa2:	6713      	str	r3, [r2, #112]	; 0x70
 800afa4:	4b9a      	ldr	r3, [pc, #616]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800afa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afa8:	4a99      	ldr	r2, [pc, #612]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800afaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800afae:	6713      	str	r3, [r2, #112]	; 0x70
 800afb0:	4b97      	ldr	r3, [pc, #604]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800afb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afb4:	4a96      	ldr	r2, [pc, #600]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800afb6:	f023 0304 	bic.w	r3, r3, #4
 800afba:	6713      	str	r3, [r2, #112]	; 0x70
 800afbc:	e03f      	b.n	800b03e <HAL_RCC_OscConfig+0x592>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	689b      	ldr	r3, [r3, #8]
 800afc2:	2b05      	cmp	r3, #5
 800afc4:	d112      	bne.n	800afec <HAL_RCC_OscConfig+0x540>
 800afc6:	4b92      	ldr	r3, [pc, #584]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800afc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afca:	4a91      	ldr	r2, [pc, #580]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800afcc:	f043 0304 	orr.w	r3, r3, #4
 800afd0:	6713      	str	r3, [r2, #112]	; 0x70
 800afd2:	4b8f      	ldr	r3, [pc, #572]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800afd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afd6:	4a8e      	ldr	r2, [pc, #568]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800afd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800afdc:	6713      	str	r3, [r2, #112]	; 0x70
 800afde:	4b8c      	ldr	r3, [pc, #560]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800afe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afe2:	4a8b      	ldr	r2, [pc, #556]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800afe4:	f043 0301 	orr.w	r3, r3, #1
 800afe8:	6713      	str	r3, [r2, #112]	; 0x70
 800afea:	e028      	b.n	800b03e <HAL_RCC_OscConfig+0x592>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	689b      	ldr	r3, [r3, #8]
 800aff0:	2b85      	cmp	r3, #133	; 0x85
 800aff2:	d112      	bne.n	800b01a <HAL_RCC_OscConfig+0x56e>
 800aff4:	4b86      	ldr	r3, [pc, #536]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800aff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aff8:	4a85      	ldr	r2, [pc, #532]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800affa:	f043 0304 	orr.w	r3, r3, #4
 800affe:	6713      	str	r3, [r2, #112]	; 0x70
 800b000:	4b83      	ldr	r3, [pc, #524]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800b002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b004:	4a82      	ldr	r2, [pc, #520]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800b006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b00a:	6713      	str	r3, [r2, #112]	; 0x70
 800b00c:	4b80      	ldr	r3, [pc, #512]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800b00e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b010:	4a7f      	ldr	r2, [pc, #508]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800b012:	f043 0301 	orr.w	r3, r3, #1
 800b016:	6713      	str	r3, [r2, #112]	; 0x70
 800b018:	e011      	b.n	800b03e <HAL_RCC_OscConfig+0x592>
 800b01a:	4b7d      	ldr	r3, [pc, #500]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800b01c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b01e:	4a7c      	ldr	r2, [pc, #496]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800b020:	f023 0301 	bic.w	r3, r3, #1
 800b024:	6713      	str	r3, [r2, #112]	; 0x70
 800b026:	4b7a      	ldr	r3, [pc, #488]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800b028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b02a:	4a79      	ldr	r2, [pc, #484]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800b02c:	f023 0304 	bic.w	r3, r3, #4
 800b030:	6713      	str	r3, [r2, #112]	; 0x70
 800b032:	4b77      	ldr	r3, [pc, #476]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800b034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b036:	4a76      	ldr	r2, [pc, #472]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800b038:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b03c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d015      	beq.n	800b072 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b046:	f7f9 fb97 	bl	8004778 <HAL_GetTick>
 800b04a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b04c:	e00a      	b.n	800b064 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b04e:	f7f9 fb93 	bl	8004778 <HAL_GetTick>
 800b052:	4602      	mov	r2, r0
 800b054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b056:	1ad3      	subs	r3, r2, r3
 800b058:	f241 3288 	movw	r2, #5000	; 0x1388
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d901      	bls.n	800b064 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800b060:	2303      	movs	r3, #3
 800b062:	e14c      	b.n	800b2fe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b064:	4b6a      	ldr	r3, [pc, #424]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800b066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b068:	f003 0302 	and.w	r3, r3, #2
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d0ee      	beq.n	800b04e <HAL_RCC_OscConfig+0x5a2>
 800b070:	e014      	b.n	800b09c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b072:	f7f9 fb81 	bl	8004778 <HAL_GetTick>
 800b076:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b078:	e00a      	b.n	800b090 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b07a:	f7f9 fb7d 	bl	8004778 <HAL_GetTick>
 800b07e:	4602      	mov	r2, r0
 800b080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b082:	1ad3      	subs	r3, r2, r3
 800b084:	f241 3288 	movw	r2, #5000	; 0x1388
 800b088:	4293      	cmp	r3, r2
 800b08a:	d901      	bls.n	800b090 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800b08c:	2303      	movs	r3, #3
 800b08e:	e136      	b.n	800b2fe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b090:	4b5f      	ldr	r3, [pc, #380]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800b092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b094:	f003 0302 	and.w	r3, r3, #2
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d1ee      	bne.n	800b07a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	f000 812b 	beq.w	800b2fc <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b0a6:	4b5a      	ldr	r3, [pc, #360]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800b0a8:	691b      	ldr	r3, [r3, #16]
 800b0aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b0ae:	2b18      	cmp	r3, #24
 800b0b0:	f000 80bb 	beq.w	800b22a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b8:	2b02      	cmp	r3, #2
 800b0ba:	f040 8095 	bne.w	800b1e8 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b0be:	4b54      	ldr	r3, [pc, #336]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	4a53      	ldr	r2, [pc, #332]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800b0c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b0c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0ca:	f7f9 fb55 	bl	8004778 <HAL_GetTick>
 800b0ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b0d0:	e008      	b.n	800b0e4 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b0d2:	f7f9 fb51 	bl	8004778 <HAL_GetTick>
 800b0d6:	4602      	mov	r2, r0
 800b0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0da:	1ad3      	subs	r3, r2, r3
 800b0dc:	2b02      	cmp	r3, #2
 800b0de:	d901      	bls.n	800b0e4 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800b0e0:	2303      	movs	r3, #3
 800b0e2:	e10c      	b.n	800b2fe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b0e4:	4b4a      	ldr	r3, [pc, #296]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d1f0      	bne.n	800b0d2 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b0f0:	4b47      	ldr	r3, [pc, #284]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800b0f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b0f4:	4b47      	ldr	r3, [pc, #284]	; (800b214 <HAL_RCC_OscConfig+0x768>)
 800b0f6:	4013      	ands	r3, r2
 800b0f8:	687a      	ldr	r2, [r7, #4]
 800b0fa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800b0fc:	687a      	ldr	r2, [r7, #4]
 800b0fe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b100:	0112      	lsls	r2, r2, #4
 800b102:	430a      	orrs	r2, r1
 800b104:	4942      	ldr	r1, [pc, #264]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800b106:	4313      	orrs	r3, r2
 800b108:	628b      	str	r3, [r1, #40]	; 0x28
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b10e:	3b01      	subs	r3, #1
 800b110:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b118:	3b01      	subs	r3, #1
 800b11a:	025b      	lsls	r3, r3, #9
 800b11c:	b29b      	uxth	r3, r3
 800b11e:	431a      	orrs	r2, r3
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b124:	3b01      	subs	r3, #1
 800b126:	041b      	lsls	r3, r3, #16
 800b128:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b12c:	431a      	orrs	r2, r3
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b132:	3b01      	subs	r3, #1
 800b134:	061b      	lsls	r3, r3, #24
 800b136:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b13a:	4935      	ldr	r1, [pc, #212]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800b13c:	4313      	orrs	r3, r2
 800b13e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800b140:	4b33      	ldr	r3, [pc, #204]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800b142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b144:	4a32      	ldr	r2, [pc, #200]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800b146:	f023 0301 	bic.w	r3, r3, #1
 800b14a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b14c:	4b30      	ldr	r3, [pc, #192]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800b14e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b150:	4b31      	ldr	r3, [pc, #196]	; (800b218 <HAL_RCC_OscConfig+0x76c>)
 800b152:	4013      	ands	r3, r2
 800b154:	687a      	ldr	r2, [r7, #4]
 800b156:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b158:	00d2      	lsls	r2, r2, #3
 800b15a:	492d      	ldr	r1, [pc, #180]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800b15c:	4313      	orrs	r3, r2
 800b15e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b160:	4b2b      	ldr	r3, [pc, #172]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800b162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b164:	f023 020c 	bic.w	r2, r3, #12
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b16c:	4928      	ldr	r1, [pc, #160]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800b16e:	4313      	orrs	r3, r2
 800b170:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b172:	4b27      	ldr	r3, [pc, #156]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800b174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b176:	f023 0202 	bic.w	r2, r3, #2
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b17e:	4924      	ldr	r1, [pc, #144]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800b180:	4313      	orrs	r3, r2
 800b182:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b184:	4b22      	ldr	r3, [pc, #136]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800b186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b188:	4a21      	ldr	r2, [pc, #132]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800b18a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b18e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b190:	4b1f      	ldr	r3, [pc, #124]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800b192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b194:	4a1e      	ldr	r2, [pc, #120]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800b196:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b19a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b19c:	4b1c      	ldr	r3, [pc, #112]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800b19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1a0:	4a1b      	ldr	r2, [pc, #108]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800b1a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b1a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800b1a8:	4b19      	ldr	r3, [pc, #100]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800b1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ac:	4a18      	ldr	r2, [pc, #96]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800b1ae:	f043 0301 	orr.w	r3, r3, #1
 800b1b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b1b4:	4b16      	ldr	r3, [pc, #88]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	4a15      	ldr	r2, [pc, #84]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800b1ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b1be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1c0:	f7f9 fada 	bl	8004778 <HAL_GetTick>
 800b1c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b1c6:	e008      	b.n	800b1da <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b1c8:	f7f9 fad6 	bl	8004778 <HAL_GetTick>
 800b1cc:	4602      	mov	r2, r0
 800b1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d0:	1ad3      	subs	r3, r2, r3
 800b1d2:	2b02      	cmp	r3, #2
 800b1d4:	d901      	bls.n	800b1da <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800b1d6:	2303      	movs	r3, #3
 800b1d8:	e091      	b.n	800b2fe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b1da:	4b0d      	ldr	r3, [pc, #52]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d0f0      	beq.n	800b1c8 <HAL_RCC_OscConfig+0x71c>
 800b1e6:	e089      	b.n	800b2fc <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b1e8:	4b09      	ldr	r3, [pc, #36]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	4a08      	ldr	r2, [pc, #32]	; (800b210 <HAL_RCC_OscConfig+0x764>)
 800b1ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b1f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1f4:	f7f9 fac0 	bl	8004778 <HAL_GetTick>
 800b1f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b1fa:	e00f      	b.n	800b21c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b1fc:	f7f9 fabc 	bl	8004778 <HAL_GetTick>
 800b200:	4602      	mov	r2, r0
 800b202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b204:	1ad3      	subs	r3, r2, r3
 800b206:	2b02      	cmp	r3, #2
 800b208:	d908      	bls.n	800b21c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800b20a:	2303      	movs	r3, #3
 800b20c:	e077      	b.n	800b2fe <HAL_RCC_OscConfig+0x852>
 800b20e:	bf00      	nop
 800b210:	58024400 	.word	0x58024400
 800b214:	fffffc0c 	.word	0xfffffc0c
 800b218:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b21c:	4b3a      	ldr	r3, [pc, #232]	; (800b308 <HAL_RCC_OscConfig+0x85c>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b224:	2b00      	cmp	r3, #0
 800b226:	d1e9      	bne.n	800b1fc <HAL_RCC_OscConfig+0x750>
 800b228:	e068      	b.n	800b2fc <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b22a:	4b37      	ldr	r3, [pc, #220]	; (800b308 <HAL_RCC_OscConfig+0x85c>)
 800b22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b22e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b230:	4b35      	ldr	r3, [pc, #212]	; (800b308 <HAL_RCC_OscConfig+0x85c>)
 800b232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b234:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b23a:	2b01      	cmp	r3, #1
 800b23c:	d031      	beq.n	800b2a2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b23e:	693b      	ldr	r3, [r7, #16]
 800b240:	f003 0203 	and.w	r2, r3, #3
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b248:	429a      	cmp	r2, r3
 800b24a:	d12a      	bne.n	800b2a2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	091b      	lsrs	r3, r3, #4
 800b250:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b258:	429a      	cmp	r2, r3
 800b25a:	d122      	bne.n	800b2a2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b266:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b268:	429a      	cmp	r2, r3
 800b26a:	d11a      	bne.n	800b2a2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	0a5b      	lsrs	r3, r3, #9
 800b270:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b278:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b27a:	429a      	cmp	r2, r3
 800b27c:	d111      	bne.n	800b2a2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	0c1b      	lsrs	r3, r3, #16
 800b282:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b28a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b28c:	429a      	cmp	r2, r3
 800b28e:	d108      	bne.n	800b2a2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	0e1b      	lsrs	r3, r3, #24
 800b294:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b29c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d001      	beq.n	800b2a6 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	e02b      	b.n	800b2fe <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b2a6:	4b18      	ldr	r3, [pc, #96]	; (800b308 <HAL_RCC_OscConfig+0x85c>)
 800b2a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2aa:	08db      	lsrs	r3, r3, #3
 800b2ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b2b0:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2b6:	693a      	ldr	r2, [r7, #16]
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	d01f      	beq.n	800b2fc <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800b2bc:	4b12      	ldr	r3, [pc, #72]	; (800b308 <HAL_RCC_OscConfig+0x85c>)
 800b2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c0:	4a11      	ldr	r2, [pc, #68]	; (800b308 <HAL_RCC_OscConfig+0x85c>)
 800b2c2:	f023 0301 	bic.w	r3, r3, #1
 800b2c6:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b2c8:	f7f9 fa56 	bl	8004778 <HAL_GetTick>
 800b2cc:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b2ce:	bf00      	nop
 800b2d0:	f7f9 fa52 	bl	8004778 <HAL_GetTick>
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d0f9      	beq.n	800b2d0 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b2dc:	4b0a      	ldr	r3, [pc, #40]	; (800b308 <HAL_RCC_OscConfig+0x85c>)
 800b2de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2e0:	4b0a      	ldr	r3, [pc, #40]	; (800b30c <HAL_RCC_OscConfig+0x860>)
 800b2e2:	4013      	ands	r3, r2
 800b2e4:	687a      	ldr	r2, [r7, #4]
 800b2e6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b2e8:	00d2      	lsls	r2, r2, #3
 800b2ea:	4907      	ldr	r1, [pc, #28]	; (800b308 <HAL_RCC_OscConfig+0x85c>)
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800b2f0:	4b05      	ldr	r3, [pc, #20]	; (800b308 <HAL_RCC_OscConfig+0x85c>)
 800b2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2f4:	4a04      	ldr	r2, [pc, #16]	; (800b308 <HAL_RCC_OscConfig+0x85c>)
 800b2f6:	f043 0301 	orr.w	r3, r3, #1
 800b2fa:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800b2fc:	2300      	movs	r3, #0
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3730      	adds	r7, #48	; 0x30
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}
 800b306:	bf00      	nop
 800b308:	58024400 	.word	0x58024400
 800b30c:	ffff0007 	.word	0xffff0007

0800b310 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b086      	sub	sp, #24
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d101      	bne.n	800b324 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b320:	2301      	movs	r3, #1
 800b322:	e19c      	b.n	800b65e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b324:	4b8a      	ldr	r3, [pc, #552]	; (800b550 <HAL_RCC_ClockConfig+0x240>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f003 030f 	and.w	r3, r3, #15
 800b32c:	683a      	ldr	r2, [r7, #0]
 800b32e:	429a      	cmp	r2, r3
 800b330:	d910      	bls.n	800b354 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b332:	4b87      	ldr	r3, [pc, #540]	; (800b550 <HAL_RCC_ClockConfig+0x240>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f023 020f 	bic.w	r2, r3, #15
 800b33a:	4985      	ldr	r1, [pc, #532]	; (800b550 <HAL_RCC_ClockConfig+0x240>)
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	4313      	orrs	r3, r2
 800b340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b342:	4b83      	ldr	r3, [pc, #524]	; (800b550 <HAL_RCC_ClockConfig+0x240>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f003 030f 	and.w	r3, r3, #15
 800b34a:	683a      	ldr	r2, [r7, #0]
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d001      	beq.n	800b354 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b350:	2301      	movs	r3, #1
 800b352:	e184      	b.n	800b65e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f003 0304 	and.w	r3, r3, #4
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d010      	beq.n	800b382 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	691a      	ldr	r2, [r3, #16]
 800b364:	4b7b      	ldr	r3, [pc, #492]	; (800b554 <HAL_RCC_ClockConfig+0x244>)
 800b366:	699b      	ldr	r3, [r3, #24]
 800b368:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d908      	bls.n	800b382 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b370:	4b78      	ldr	r3, [pc, #480]	; (800b554 <HAL_RCC_ClockConfig+0x244>)
 800b372:	699b      	ldr	r3, [r3, #24]
 800b374:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	691b      	ldr	r3, [r3, #16]
 800b37c:	4975      	ldr	r1, [pc, #468]	; (800b554 <HAL_RCC_ClockConfig+0x244>)
 800b37e:	4313      	orrs	r3, r2
 800b380:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f003 0308 	and.w	r3, r3, #8
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d010      	beq.n	800b3b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	695a      	ldr	r2, [r3, #20]
 800b392:	4b70      	ldr	r3, [pc, #448]	; (800b554 <HAL_RCC_ClockConfig+0x244>)
 800b394:	69db      	ldr	r3, [r3, #28]
 800b396:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d908      	bls.n	800b3b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b39e:	4b6d      	ldr	r3, [pc, #436]	; (800b554 <HAL_RCC_ClockConfig+0x244>)
 800b3a0:	69db      	ldr	r3, [r3, #28]
 800b3a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	695b      	ldr	r3, [r3, #20]
 800b3aa:	496a      	ldr	r1, [pc, #424]	; (800b554 <HAL_RCC_ClockConfig+0x244>)
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f003 0310 	and.w	r3, r3, #16
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d010      	beq.n	800b3de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	699a      	ldr	r2, [r3, #24]
 800b3c0:	4b64      	ldr	r3, [pc, #400]	; (800b554 <HAL_RCC_ClockConfig+0x244>)
 800b3c2:	69db      	ldr	r3, [r3, #28]
 800b3c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b3c8:	429a      	cmp	r2, r3
 800b3ca:	d908      	bls.n	800b3de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b3cc:	4b61      	ldr	r3, [pc, #388]	; (800b554 <HAL_RCC_ClockConfig+0x244>)
 800b3ce:	69db      	ldr	r3, [r3, #28]
 800b3d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	699b      	ldr	r3, [r3, #24]
 800b3d8:	495e      	ldr	r1, [pc, #376]	; (800b554 <HAL_RCC_ClockConfig+0x244>)
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f003 0320 	and.w	r3, r3, #32
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d010      	beq.n	800b40c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	69da      	ldr	r2, [r3, #28]
 800b3ee:	4b59      	ldr	r3, [pc, #356]	; (800b554 <HAL_RCC_ClockConfig+0x244>)
 800b3f0:	6a1b      	ldr	r3, [r3, #32]
 800b3f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b3f6:	429a      	cmp	r2, r3
 800b3f8:	d908      	bls.n	800b40c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b3fa:	4b56      	ldr	r3, [pc, #344]	; (800b554 <HAL_RCC_ClockConfig+0x244>)
 800b3fc:	6a1b      	ldr	r3, [r3, #32]
 800b3fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	69db      	ldr	r3, [r3, #28]
 800b406:	4953      	ldr	r1, [pc, #332]	; (800b554 <HAL_RCC_ClockConfig+0x244>)
 800b408:	4313      	orrs	r3, r2
 800b40a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f003 0302 	and.w	r3, r3, #2
 800b414:	2b00      	cmp	r3, #0
 800b416:	d010      	beq.n	800b43a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	68da      	ldr	r2, [r3, #12]
 800b41c:	4b4d      	ldr	r3, [pc, #308]	; (800b554 <HAL_RCC_ClockConfig+0x244>)
 800b41e:	699b      	ldr	r3, [r3, #24]
 800b420:	f003 030f 	and.w	r3, r3, #15
 800b424:	429a      	cmp	r2, r3
 800b426:	d908      	bls.n	800b43a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b428:	4b4a      	ldr	r3, [pc, #296]	; (800b554 <HAL_RCC_ClockConfig+0x244>)
 800b42a:	699b      	ldr	r3, [r3, #24]
 800b42c:	f023 020f 	bic.w	r2, r3, #15
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	68db      	ldr	r3, [r3, #12]
 800b434:	4947      	ldr	r1, [pc, #284]	; (800b554 <HAL_RCC_ClockConfig+0x244>)
 800b436:	4313      	orrs	r3, r2
 800b438:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f003 0301 	and.w	r3, r3, #1
 800b442:	2b00      	cmp	r3, #0
 800b444:	d055      	beq.n	800b4f2 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b446:	4b43      	ldr	r3, [pc, #268]	; (800b554 <HAL_RCC_ClockConfig+0x244>)
 800b448:	699b      	ldr	r3, [r3, #24]
 800b44a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	689b      	ldr	r3, [r3, #8]
 800b452:	4940      	ldr	r1, [pc, #256]	; (800b554 <HAL_RCC_ClockConfig+0x244>)
 800b454:	4313      	orrs	r3, r2
 800b456:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	685b      	ldr	r3, [r3, #4]
 800b45c:	2b02      	cmp	r3, #2
 800b45e:	d107      	bne.n	800b470 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b460:	4b3c      	ldr	r3, [pc, #240]	; (800b554 <HAL_RCC_ClockConfig+0x244>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d121      	bne.n	800b4b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b46c:	2301      	movs	r3, #1
 800b46e:	e0f6      	b.n	800b65e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	685b      	ldr	r3, [r3, #4]
 800b474:	2b03      	cmp	r3, #3
 800b476:	d107      	bne.n	800b488 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b478:	4b36      	ldr	r3, [pc, #216]	; (800b554 <HAL_RCC_ClockConfig+0x244>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b480:	2b00      	cmp	r3, #0
 800b482:	d115      	bne.n	800b4b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b484:	2301      	movs	r3, #1
 800b486:	e0ea      	b.n	800b65e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	685b      	ldr	r3, [r3, #4]
 800b48c:	2b01      	cmp	r3, #1
 800b48e:	d107      	bne.n	800b4a0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b490:	4b30      	ldr	r3, [pc, #192]	; (800b554 <HAL_RCC_ClockConfig+0x244>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d109      	bne.n	800b4b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b49c:	2301      	movs	r3, #1
 800b49e:	e0de      	b.n	800b65e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b4a0:	4b2c      	ldr	r3, [pc, #176]	; (800b554 <HAL_RCC_ClockConfig+0x244>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f003 0304 	and.w	r3, r3, #4
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d101      	bne.n	800b4b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	e0d6      	b.n	800b65e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b4b0:	4b28      	ldr	r3, [pc, #160]	; (800b554 <HAL_RCC_ClockConfig+0x244>)
 800b4b2:	691b      	ldr	r3, [r3, #16]
 800b4b4:	f023 0207 	bic.w	r2, r3, #7
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	4925      	ldr	r1, [pc, #148]	; (800b554 <HAL_RCC_ClockConfig+0x244>)
 800b4be:	4313      	orrs	r3, r2
 800b4c0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4c2:	f7f9 f959 	bl	8004778 <HAL_GetTick>
 800b4c6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b4c8:	e00a      	b.n	800b4e0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b4ca:	f7f9 f955 	bl	8004778 <HAL_GetTick>
 800b4ce:	4602      	mov	r2, r0
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	1ad3      	subs	r3, r2, r3
 800b4d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d901      	bls.n	800b4e0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b4dc:	2303      	movs	r3, #3
 800b4de:	e0be      	b.n	800b65e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b4e0:	4b1c      	ldr	r3, [pc, #112]	; (800b554 <HAL_RCC_ClockConfig+0x244>)
 800b4e2:	691b      	ldr	r3, [r3, #16]
 800b4e4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	00db      	lsls	r3, r3, #3
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d1eb      	bne.n	800b4ca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f003 0302 	and.w	r3, r3, #2
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d010      	beq.n	800b520 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	68da      	ldr	r2, [r3, #12]
 800b502:	4b14      	ldr	r3, [pc, #80]	; (800b554 <HAL_RCC_ClockConfig+0x244>)
 800b504:	699b      	ldr	r3, [r3, #24]
 800b506:	f003 030f 	and.w	r3, r3, #15
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d208      	bcs.n	800b520 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b50e:	4b11      	ldr	r3, [pc, #68]	; (800b554 <HAL_RCC_ClockConfig+0x244>)
 800b510:	699b      	ldr	r3, [r3, #24]
 800b512:	f023 020f 	bic.w	r2, r3, #15
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	68db      	ldr	r3, [r3, #12]
 800b51a:	490e      	ldr	r1, [pc, #56]	; (800b554 <HAL_RCC_ClockConfig+0x244>)
 800b51c:	4313      	orrs	r3, r2
 800b51e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b520:	4b0b      	ldr	r3, [pc, #44]	; (800b550 <HAL_RCC_ClockConfig+0x240>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f003 030f 	and.w	r3, r3, #15
 800b528:	683a      	ldr	r2, [r7, #0]
 800b52a:	429a      	cmp	r2, r3
 800b52c:	d214      	bcs.n	800b558 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b52e:	4b08      	ldr	r3, [pc, #32]	; (800b550 <HAL_RCC_ClockConfig+0x240>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f023 020f 	bic.w	r2, r3, #15
 800b536:	4906      	ldr	r1, [pc, #24]	; (800b550 <HAL_RCC_ClockConfig+0x240>)
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	4313      	orrs	r3, r2
 800b53c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b53e:	4b04      	ldr	r3, [pc, #16]	; (800b550 <HAL_RCC_ClockConfig+0x240>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f003 030f 	and.w	r3, r3, #15
 800b546:	683a      	ldr	r2, [r7, #0]
 800b548:	429a      	cmp	r2, r3
 800b54a:	d005      	beq.n	800b558 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b54c:	2301      	movs	r3, #1
 800b54e:	e086      	b.n	800b65e <HAL_RCC_ClockConfig+0x34e>
 800b550:	52002000 	.word	0x52002000
 800b554:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f003 0304 	and.w	r3, r3, #4
 800b560:	2b00      	cmp	r3, #0
 800b562:	d010      	beq.n	800b586 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	691a      	ldr	r2, [r3, #16]
 800b568:	4b3f      	ldr	r3, [pc, #252]	; (800b668 <HAL_RCC_ClockConfig+0x358>)
 800b56a:	699b      	ldr	r3, [r3, #24]
 800b56c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b570:	429a      	cmp	r2, r3
 800b572:	d208      	bcs.n	800b586 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b574:	4b3c      	ldr	r3, [pc, #240]	; (800b668 <HAL_RCC_ClockConfig+0x358>)
 800b576:	699b      	ldr	r3, [r3, #24]
 800b578:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	691b      	ldr	r3, [r3, #16]
 800b580:	4939      	ldr	r1, [pc, #228]	; (800b668 <HAL_RCC_ClockConfig+0x358>)
 800b582:	4313      	orrs	r3, r2
 800b584:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f003 0308 	and.w	r3, r3, #8
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d010      	beq.n	800b5b4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	695a      	ldr	r2, [r3, #20]
 800b596:	4b34      	ldr	r3, [pc, #208]	; (800b668 <HAL_RCC_ClockConfig+0x358>)
 800b598:	69db      	ldr	r3, [r3, #28]
 800b59a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b59e:	429a      	cmp	r2, r3
 800b5a0:	d208      	bcs.n	800b5b4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b5a2:	4b31      	ldr	r3, [pc, #196]	; (800b668 <HAL_RCC_ClockConfig+0x358>)
 800b5a4:	69db      	ldr	r3, [r3, #28]
 800b5a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	695b      	ldr	r3, [r3, #20]
 800b5ae:	492e      	ldr	r1, [pc, #184]	; (800b668 <HAL_RCC_ClockConfig+0x358>)
 800b5b0:	4313      	orrs	r3, r2
 800b5b2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f003 0310 	and.w	r3, r3, #16
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d010      	beq.n	800b5e2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	699a      	ldr	r2, [r3, #24]
 800b5c4:	4b28      	ldr	r3, [pc, #160]	; (800b668 <HAL_RCC_ClockConfig+0x358>)
 800b5c6:	69db      	ldr	r3, [r3, #28]
 800b5c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d208      	bcs.n	800b5e2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b5d0:	4b25      	ldr	r3, [pc, #148]	; (800b668 <HAL_RCC_ClockConfig+0x358>)
 800b5d2:	69db      	ldr	r3, [r3, #28]
 800b5d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	699b      	ldr	r3, [r3, #24]
 800b5dc:	4922      	ldr	r1, [pc, #136]	; (800b668 <HAL_RCC_ClockConfig+0x358>)
 800b5de:	4313      	orrs	r3, r2
 800b5e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	f003 0320 	and.w	r3, r3, #32
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d010      	beq.n	800b610 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	69da      	ldr	r2, [r3, #28]
 800b5f2:	4b1d      	ldr	r3, [pc, #116]	; (800b668 <HAL_RCC_ClockConfig+0x358>)
 800b5f4:	6a1b      	ldr	r3, [r3, #32]
 800b5f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d208      	bcs.n	800b610 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b5fe:	4b1a      	ldr	r3, [pc, #104]	; (800b668 <HAL_RCC_ClockConfig+0x358>)
 800b600:	6a1b      	ldr	r3, [r3, #32]
 800b602:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	69db      	ldr	r3, [r3, #28]
 800b60a:	4917      	ldr	r1, [pc, #92]	; (800b668 <HAL_RCC_ClockConfig+0x358>)
 800b60c:	4313      	orrs	r3, r2
 800b60e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800b610:	f000 f89e 	bl	800b750 <HAL_RCC_GetSysClockFreq>
 800b614:	4602      	mov	r2, r0
 800b616:	4b14      	ldr	r3, [pc, #80]	; (800b668 <HAL_RCC_ClockConfig+0x358>)
 800b618:	699b      	ldr	r3, [r3, #24]
 800b61a:	0a1b      	lsrs	r3, r3, #8
 800b61c:	f003 030f 	and.w	r3, r3, #15
 800b620:	4912      	ldr	r1, [pc, #72]	; (800b66c <HAL_RCC_ClockConfig+0x35c>)
 800b622:	5ccb      	ldrb	r3, [r1, r3]
 800b624:	f003 031f 	and.w	r3, r3, #31
 800b628:	fa22 f303 	lsr.w	r3, r2, r3
 800b62c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b62e:	4b0e      	ldr	r3, [pc, #56]	; (800b668 <HAL_RCC_ClockConfig+0x358>)
 800b630:	699b      	ldr	r3, [r3, #24]
 800b632:	f003 030f 	and.w	r3, r3, #15
 800b636:	4a0d      	ldr	r2, [pc, #52]	; (800b66c <HAL_RCC_ClockConfig+0x35c>)
 800b638:	5cd3      	ldrb	r3, [r2, r3]
 800b63a:	f003 031f 	and.w	r3, r3, #31
 800b63e:	693a      	ldr	r2, [r7, #16]
 800b640:	fa22 f303 	lsr.w	r3, r2, r3
 800b644:	4a0a      	ldr	r2, [pc, #40]	; (800b670 <HAL_RCC_ClockConfig+0x360>)
 800b646:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b648:	4a0a      	ldr	r2, [pc, #40]	; (800b674 <HAL_RCC_ClockConfig+0x364>)
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b64e:	4b0a      	ldr	r3, [pc, #40]	; (800b678 <HAL_RCC_ClockConfig+0x368>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	4618      	mov	r0, r3
 800b654:	f7f9 f846 	bl	80046e4 <HAL_InitTick>
 800b658:	4603      	mov	r3, r0
 800b65a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b65c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3718      	adds	r7, #24
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	58024400 	.word	0x58024400
 800b66c:	08019908 	.word	0x08019908
 800b670:	24000288 	.word	0x24000288
 800b674:	24000284 	.word	0x24000284
 800b678:	2400028c 	.word	0x2400028c

0800b67c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b08c      	sub	sp, #48	; 0x30
 800b680:	af00      	add	r7, sp, #0
 800b682:	60f8      	str	r0, [r7, #12]
 800b684:	60b9      	str	r1, [r7, #8]
 800b686:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d12a      	bne.n	800b6e4 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800b68e:	4b2d      	ldr	r3, [pc, #180]	; (800b744 <HAL_RCC_MCOConfig+0xc8>)
 800b690:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b694:	4a2b      	ldr	r2, [pc, #172]	; (800b744 <HAL_RCC_MCOConfig+0xc8>)
 800b696:	f043 0301 	orr.w	r3, r3, #1
 800b69a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800b69e:	4b29      	ldr	r3, [pc, #164]	; (800b744 <HAL_RCC_MCOConfig+0xc8>)
 800b6a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b6a4:	f003 0301 	and.w	r3, r3, #1
 800b6a8:	61bb      	str	r3, [r7, #24]
 800b6aa:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800b6ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6b2:	2302      	movs	r3, #2
 800b6b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b6b6:	2303      	movs	r3, #3
 800b6b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b6c2:	f107 031c 	add.w	r3, r7, #28
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	481f      	ldr	r0, [pc, #124]	; (800b748 <HAL_RCC_MCOConfig+0xcc>)
 800b6ca:	f7fd fcc1 	bl	8009050 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800b6ce:	4b1d      	ldr	r3, [pc, #116]	; (800b744 <HAL_RCC_MCOConfig+0xc8>)
 800b6d0:	691b      	ldr	r3, [r3, #16]
 800b6d2:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800b6d6:	68b9      	ldr	r1, [r7, #8]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	430b      	orrs	r3, r1
 800b6dc:	4919      	ldr	r1, [pc, #100]	; (800b744 <HAL_RCC_MCOConfig+0xc8>)
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800b6e2:	e02a      	b.n	800b73a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800b6e4:	4b17      	ldr	r3, [pc, #92]	; (800b744 <HAL_RCC_MCOConfig+0xc8>)
 800b6e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b6ea:	4a16      	ldr	r2, [pc, #88]	; (800b744 <HAL_RCC_MCOConfig+0xc8>)
 800b6ec:	f043 0304 	orr.w	r3, r3, #4
 800b6f0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800b6f4:	4b13      	ldr	r3, [pc, #76]	; (800b744 <HAL_RCC_MCOConfig+0xc8>)
 800b6f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b6fa:	f003 0304 	and.w	r3, r3, #4
 800b6fe:	617b      	str	r3, [r7, #20]
 800b700:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b702:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b706:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b708:	2302      	movs	r3, #2
 800b70a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b70c:	2303      	movs	r3, #3
 800b70e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b710:	2300      	movs	r3, #0
 800b712:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b714:	2300      	movs	r3, #0
 800b716:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b718:	f107 031c 	add.w	r3, r7, #28
 800b71c:	4619      	mov	r1, r3
 800b71e:	480b      	ldr	r0, [pc, #44]	; (800b74c <HAL_RCC_MCOConfig+0xd0>)
 800b720:	f7fd fc96 	bl	8009050 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800b724:	4b07      	ldr	r3, [pc, #28]	; (800b744 <HAL_RCC_MCOConfig+0xc8>)
 800b726:	691b      	ldr	r3, [r3, #16]
 800b728:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	01d9      	lsls	r1, r3, #7
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	430b      	orrs	r3, r1
 800b734:	4903      	ldr	r1, [pc, #12]	; (800b744 <HAL_RCC_MCOConfig+0xc8>)
 800b736:	4313      	orrs	r3, r2
 800b738:	610b      	str	r3, [r1, #16]
}
 800b73a:	bf00      	nop
 800b73c:	3730      	adds	r7, #48	; 0x30
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}
 800b742:	bf00      	nop
 800b744:	58024400 	.word	0x58024400
 800b748:	58020000 	.word	0x58020000
 800b74c:	58020800 	.word	0x58020800

0800b750 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b750:	b480      	push	{r7}
 800b752:	b089      	sub	sp, #36	; 0x24
 800b754:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b756:	4bb3      	ldr	r3, [pc, #716]	; (800ba24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b758:	691b      	ldr	r3, [r3, #16]
 800b75a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b75e:	2b18      	cmp	r3, #24
 800b760:	f200 8155 	bhi.w	800ba0e <HAL_RCC_GetSysClockFreq+0x2be>
 800b764:	a201      	add	r2, pc, #4	; (adr r2, 800b76c <HAL_RCC_GetSysClockFreq+0x1c>)
 800b766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b76a:	bf00      	nop
 800b76c:	0800b7d1 	.word	0x0800b7d1
 800b770:	0800ba0f 	.word	0x0800ba0f
 800b774:	0800ba0f 	.word	0x0800ba0f
 800b778:	0800ba0f 	.word	0x0800ba0f
 800b77c:	0800ba0f 	.word	0x0800ba0f
 800b780:	0800ba0f 	.word	0x0800ba0f
 800b784:	0800ba0f 	.word	0x0800ba0f
 800b788:	0800ba0f 	.word	0x0800ba0f
 800b78c:	0800b7f7 	.word	0x0800b7f7
 800b790:	0800ba0f 	.word	0x0800ba0f
 800b794:	0800ba0f 	.word	0x0800ba0f
 800b798:	0800ba0f 	.word	0x0800ba0f
 800b79c:	0800ba0f 	.word	0x0800ba0f
 800b7a0:	0800ba0f 	.word	0x0800ba0f
 800b7a4:	0800ba0f 	.word	0x0800ba0f
 800b7a8:	0800ba0f 	.word	0x0800ba0f
 800b7ac:	0800b7fd 	.word	0x0800b7fd
 800b7b0:	0800ba0f 	.word	0x0800ba0f
 800b7b4:	0800ba0f 	.word	0x0800ba0f
 800b7b8:	0800ba0f 	.word	0x0800ba0f
 800b7bc:	0800ba0f 	.word	0x0800ba0f
 800b7c0:	0800ba0f 	.word	0x0800ba0f
 800b7c4:	0800ba0f 	.word	0x0800ba0f
 800b7c8:	0800ba0f 	.word	0x0800ba0f
 800b7cc:	0800b803 	.word	0x0800b803
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7d0:	4b94      	ldr	r3, [pc, #592]	; (800ba24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f003 0320 	and.w	r3, r3, #32
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d009      	beq.n	800b7f0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b7dc:	4b91      	ldr	r3, [pc, #580]	; (800ba24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	08db      	lsrs	r3, r3, #3
 800b7e2:	f003 0303 	and.w	r3, r3, #3
 800b7e6:	4a90      	ldr	r2, [pc, #576]	; (800ba28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b7e8:	fa22 f303 	lsr.w	r3, r2, r3
 800b7ec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b7ee:	e111      	b.n	800ba14 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b7f0:	4b8d      	ldr	r3, [pc, #564]	; (800ba28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b7f2:	61bb      	str	r3, [r7, #24]
      break;
 800b7f4:	e10e      	b.n	800ba14 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b7f6:	4b8d      	ldr	r3, [pc, #564]	; (800ba2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b7f8:	61bb      	str	r3, [r7, #24]
      break;
 800b7fa:	e10b      	b.n	800ba14 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b7fc:	4b8c      	ldr	r3, [pc, #560]	; (800ba30 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b7fe:	61bb      	str	r3, [r7, #24]
      break;
 800b800:	e108      	b.n	800ba14 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b802:	4b88      	ldr	r3, [pc, #544]	; (800ba24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b806:	f003 0303 	and.w	r3, r3, #3
 800b80a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b80c:	4b85      	ldr	r3, [pc, #532]	; (800ba24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b80e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b810:	091b      	lsrs	r3, r3, #4
 800b812:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b816:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b818:	4b82      	ldr	r3, [pc, #520]	; (800ba24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b81c:	f003 0301 	and.w	r3, r3, #1
 800b820:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b822:	4b80      	ldr	r3, [pc, #512]	; (800ba24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b826:	08db      	lsrs	r3, r3, #3
 800b828:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b82c:	68fa      	ldr	r2, [r7, #12]
 800b82e:	fb02 f303 	mul.w	r3, r2, r3
 800b832:	ee07 3a90 	vmov	s15, r3
 800b836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b83a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	2b00      	cmp	r3, #0
 800b842:	f000 80e1 	beq.w	800ba08 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	2b02      	cmp	r3, #2
 800b84a:	f000 8083 	beq.w	800b954 <HAL_RCC_GetSysClockFreq+0x204>
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	2b02      	cmp	r3, #2
 800b852:	f200 80a1 	bhi.w	800b998 <HAL_RCC_GetSysClockFreq+0x248>
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d003      	beq.n	800b864 <HAL_RCC_GetSysClockFreq+0x114>
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	2b01      	cmp	r3, #1
 800b860:	d056      	beq.n	800b910 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b862:	e099      	b.n	800b998 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b864:	4b6f      	ldr	r3, [pc, #444]	; (800ba24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f003 0320 	and.w	r3, r3, #32
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d02d      	beq.n	800b8cc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b870:	4b6c      	ldr	r3, [pc, #432]	; (800ba24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	08db      	lsrs	r3, r3, #3
 800b876:	f003 0303 	and.w	r3, r3, #3
 800b87a:	4a6b      	ldr	r2, [pc, #428]	; (800ba28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b87c:	fa22 f303 	lsr.w	r3, r2, r3
 800b880:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	ee07 3a90 	vmov	s15, r3
 800b888:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	ee07 3a90 	vmov	s15, r3
 800b892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b89a:	4b62      	ldr	r3, [pc, #392]	; (800ba24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b89c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b89e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8a2:	ee07 3a90 	vmov	s15, r3
 800b8a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8aa:	ed97 6a02 	vldr	s12, [r7, #8]
 800b8ae:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ba34 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b8b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8c6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b8ca:	e087      	b.n	800b9dc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	ee07 3a90 	vmov	s15, r3
 800b8d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8d6:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ba38 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b8da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8de:	4b51      	ldr	r3, [pc, #324]	; (800ba24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b8e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8e6:	ee07 3a90 	vmov	s15, r3
 800b8ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8ee:	ed97 6a02 	vldr	s12, [r7, #8]
 800b8f2:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ba34 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b8f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b90a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b90e:	e065      	b.n	800b9dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	ee07 3a90 	vmov	s15, r3
 800b916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b91a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ba3c <HAL_RCC_GetSysClockFreq+0x2ec>
 800b91e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b922:	4b40      	ldr	r3, [pc, #256]	; (800ba24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b92a:	ee07 3a90 	vmov	s15, r3
 800b92e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b932:	ed97 6a02 	vldr	s12, [r7, #8]
 800b936:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ba34 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b93a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b93e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b942:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b94a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b94e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b952:	e043      	b.n	800b9dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	ee07 3a90 	vmov	s15, r3
 800b95a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b95e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800ba40 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b966:	4b2f      	ldr	r3, [pc, #188]	; (800ba24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b96a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b96e:	ee07 3a90 	vmov	s15, r3
 800b972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b976:	ed97 6a02 	vldr	s12, [r7, #8]
 800b97a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ba34 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b97e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b986:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b98a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b98e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b992:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b996:	e021      	b.n	800b9dc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	ee07 3a90 	vmov	s15, r3
 800b99e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9a2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ba3c <HAL_RCC_GetSysClockFreq+0x2ec>
 800b9a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9aa:	4b1e      	ldr	r3, [pc, #120]	; (800ba24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b9ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9b2:	ee07 3a90 	vmov	s15, r3
 800b9b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9ba:	ed97 6a02 	vldr	s12, [r7, #8]
 800b9be:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ba34 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b9c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b9da:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b9dc:	4b11      	ldr	r3, [pc, #68]	; (800ba24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b9de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9e0:	0a5b      	lsrs	r3, r3, #9
 800b9e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9e6:	3301      	adds	r3, #1
 800b9e8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	ee07 3a90 	vmov	s15, r3
 800b9f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b9f4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba00:	ee17 3a90 	vmov	r3, s15
 800ba04:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800ba06:	e005      	b.n	800ba14 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	61bb      	str	r3, [r7, #24]
      break;
 800ba0c:	e002      	b.n	800ba14 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800ba0e:	4b07      	ldr	r3, [pc, #28]	; (800ba2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ba10:	61bb      	str	r3, [r7, #24]
      break;
 800ba12:	bf00      	nop
  }

  return sysclockfreq;
 800ba14:	69bb      	ldr	r3, [r7, #24]
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3724      	adds	r7, #36	; 0x24
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba20:	4770      	bx	lr
 800ba22:	bf00      	nop
 800ba24:	58024400 	.word	0x58024400
 800ba28:	03d09000 	.word	0x03d09000
 800ba2c:	003d0900 	.word	0x003d0900
 800ba30:	016e3600 	.word	0x016e3600
 800ba34:	46000000 	.word	0x46000000
 800ba38:	4c742400 	.word	0x4c742400
 800ba3c:	4a742400 	.word	0x4a742400
 800ba40:	4bb71b00 	.word	0x4bb71b00

0800ba44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b082      	sub	sp, #8
 800ba48:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800ba4a:	f7ff fe81 	bl	800b750 <HAL_RCC_GetSysClockFreq>
 800ba4e:	4602      	mov	r2, r0
 800ba50:	4b10      	ldr	r3, [pc, #64]	; (800ba94 <HAL_RCC_GetHCLKFreq+0x50>)
 800ba52:	699b      	ldr	r3, [r3, #24]
 800ba54:	0a1b      	lsrs	r3, r3, #8
 800ba56:	f003 030f 	and.w	r3, r3, #15
 800ba5a:	490f      	ldr	r1, [pc, #60]	; (800ba98 <HAL_RCC_GetHCLKFreq+0x54>)
 800ba5c:	5ccb      	ldrb	r3, [r1, r3]
 800ba5e:	f003 031f 	and.w	r3, r3, #31
 800ba62:	fa22 f303 	lsr.w	r3, r2, r3
 800ba66:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800ba68:	4b0a      	ldr	r3, [pc, #40]	; (800ba94 <HAL_RCC_GetHCLKFreq+0x50>)
 800ba6a:	699b      	ldr	r3, [r3, #24]
 800ba6c:	f003 030f 	and.w	r3, r3, #15
 800ba70:	4a09      	ldr	r2, [pc, #36]	; (800ba98 <HAL_RCC_GetHCLKFreq+0x54>)
 800ba72:	5cd3      	ldrb	r3, [r2, r3]
 800ba74:	f003 031f 	and.w	r3, r3, #31
 800ba78:	687a      	ldr	r2, [r7, #4]
 800ba7a:	fa22 f303 	lsr.w	r3, r2, r3
 800ba7e:	4a07      	ldr	r2, [pc, #28]	; (800ba9c <HAL_RCC_GetHCLKFreq+0x58>)
 800ba80:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ba82:	4a07      	ldr	r2, [pc, #28]	; (800baa0 <HAL_RCC_GetHCLKFreq+0x5c>)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ba88:	4b04      	ldr	r3, [pc, #16]	; (800ba9c <HAL_RCC_GetHCLKFreq+0x58>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3708      	adds	r7, #8
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}
 800ba94:	58024400 	.word	0x58024400
 800ba98:	08019908 	.word	0x08019908
 800ba9c:	24000288 	.word	0x24000288
 800baa0:	24000284 	.word	0x24000284

0800baa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800baa8:	f7ff ffcc 	bl	800ba44 <HAL_RCC_GetHCLKFreq>
 800baac:	4602      	mov	r2, r0
 800baae:	4b06      	ldr	r3, [pc, #24]	; (800bac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bab0:	69db      	ldr	r3, [r3, #28]
 800bab2:	091b      	lsrs	r3, r3, #4
 800bab4:	f003 0307 	and.w	r3, r3, #7
 800bab8:	4904      	ldr	r1, [pc, #16]	; (800bacc <HAL_RCC_GetPCLK1Freq+0x28>)
 800baba:	5ccb      	ldrb	r3, [r1, r3]
 800babc:	f003 031f 	and.w	r3, r3, #31
 800bac0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	bd80      	pop	{r7, pc}
 800bac8:	58024400 	.word	0x58024400
 800bacc:	08019908 	.word	0x08019908

0800bad0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800bad4:	f7ff ffb6 	bl	800ba44 <HAL_RCC_GetHCLKFreq>
 800bad8:	4602      	mov	r2, r0
 800bada:	4b06      	ldr	r3, [pc, #24]	; (800baf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800badc:	69db      	ldr	r3, [r3, #28]
 800bade:	0a1b      	lsrs	r3, r3, #8
 800bae0:	f003 0307 	and.w	r3, r3, #7
 800bae4:	4904      	ldr	r1, [pc, #16]	; (800baf8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800bae6:	5ccb      	ldrb	r3, [r1, r3]
 800bae8:	f003 031f 	and.w	r3, r3, #31
 800baec:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	bd80      	pop	{r7, pc}
 800baf4:	58024400 	.word	0x58024400
 800baf8:	08019908 	.word	0x08019908

0800bafc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bafc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bb00:	b0c8      	sub	sp, #288	; 0x120
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bb08:	2300      	movs	r3, #0
 800bb0a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bb0e:	2300      	movs	r3, #0
 800bb10:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bb14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb1c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800bb20:	2500      	movs	r5, #0
 800bb22:	ea54 0305 	orrs.w	r3, r4, r5
 800bb26:	d049      	beq.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800bb28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb2e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bb32:	d02f      	beq.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800bb34:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bb38:	d828      	bhi.n	800bb8c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800bb3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bb3e:	d01a      	beq.n	800bb76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800bb40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bb44:	d822      	bhi.n	800bb8c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d003      	beq.n	800bb52 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800bb4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb4e:	d007      	beq.n	800bb60 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800bb50:	e01c      	b.n	800bb8c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb52:	4ba7      	ldr	r3, [pc, #668]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bb54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb56:	4aa6      	ldr	r2, [pc, #664]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bb58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800bb5e:	e01a      	b.n	800bb96 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bb60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb64:	3308      	adds	r3, #8
 800bb66:	2102      	movs	r1, #2
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f001 fc43 	bl	800d3f4 <RCCEx_PLL2_Config>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800bb74:	e00f      	b.n	800bb96 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bb76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb7a:	3328      	adds	r3, #40	; 0x28
 800bb7c:	2102      	movs	r1, #2
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f001 fcea 	bl	800d558 <RCCEx_PLL3_Config>
 800bb84:	4603      	mov	r3, r0
 800bb86:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800bb8a:	e004      	b.n	800bb96 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bb92:	e000      	b.n	800bb96 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800bb94:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb96:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d10a      	bne.n	800bbb4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800bb9e:	4b94      	ldr	r3, [pc, #592]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bba2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800bba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bbaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbac:	4a90      	ldr	r2, [pc, #576]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bbae:	430b      	orrs	r3, r1
 800bbb0:	6513      	str	r3, [r2, #80]	; 0x50
 800bbb2:	e003      	b.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbb4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bbb8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bbbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800bbc8:	f04f 0900 	mov.w	r9, #0
 800bbcc:	ea58 0309 	orrs.w	r3, r8, r9
 800bbd0:	d047      	beq.n	800bc62 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800bbd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bbd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbd8:	2b04      	cmp	r3, #4
 800bbda:	d82a      	bhi.n	800bc32 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800bbdc:	a201      	add	r2, pc, #4	; (adr r2, 800bbe4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800bbde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbe2:	bf00      	nop
 800bbe4:	0800bbf9 	.word	0x0800bbf9
 800bbe8:	0800bc07 	.word	0x0800bc07
 800bbec:	0800bc1d 	.word	0x0800bc1d
 800bbf0:	0800bc3b 	.word	0x0800bc3b
 800bbf4:	0800bc3b 	.word	0x0800bc3b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbf8:	4b7d      	ldr	r3, [pc, #500]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bbfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbfc:	4a7c      	ldr	r2, [pc, #496]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bbfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bc04:	e01a      	b.n	800bc3c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc0a:	3308      	adds	r3, #8
 800bc0c:	2100      	movs	r1, #0
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f001 fbf0 	bl	800d3f4 <RCCEx_PLL2_Config>
 800bc14:	4603      	mov	r3, r0
 800bc16:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bc1a:	e00f      	b.n	800bc3c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bc1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc20:	3328      	adds	r3, #40	; 0x28
 800bc22:	2100      	movs	r1, #0
 800bc24:	4618      	mov	r0, r3
 800bc26:	f001 fc97 	bl	800d558 <RCCEx_PLL3_Config>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bc30:	e004      	b.n	800bc3c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc32:	2301      	movs	r3, #1
 800bc34:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bc38:	e000      	b.n	800bc3c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800bc3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc3c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d10a      	bne.n	800bc5a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bc44:	4b6a      	ldr	r3, [pc, #424]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bc46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc48:	f023 0107 	bic.w	r1, r3, #7
 800bc4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc52:	4a67      	ldr	r2, [pc, #412]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bc54:	430b      	orrs	r3, r1
 800bc56:	6513      	str	r3, [r2, #80]	; 0x50
 800bc58:	e003      	b.n	800bc62 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc5a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bc5e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800bc62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc6a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800bc6e:	f04f 0b00 	mov.w	fp, #0
 800bc72:	ea5a 030b 	orrs.w	r3, sl, fp
 800bc76:	d054      	beq.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800bc78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc7e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800bc82:	d036      	beq.n	800bcf2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800bc84:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800bc88:	d82f      	bhi.n	800bcea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800bc8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc8e:	d032      	beq.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bc90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc94:	d829      	bhi.n	800bcea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800bc96:	2bc0      	cmp	r3, #192	; 0xc0
 800bc98:	d02f      	beq.n	800bcfa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800bc9a:	2bc0      	cmp	r3, #192	; 0xc0
 800bc9c:	d825      	bhi.n	800bcea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800bc9e:	2b80      	cmp	r3, #128	; 0x80
 800bca0:	d018      	beq.n	800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800bca2:	2b80      	cmp	r3, #128	; 0x80
 800bca4:	d821      	bhi.n	800bcea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d002      	beq.n	800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800bcaa:	2b40      	cmp	r3, #64	; 0x40
 800bcac:	d007      	beq.n	800bcbe <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800bcae:	e01c      	b.n	800bcea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bcb0:	4b4f      	ldr	r3, [pc, #316]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bcb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcb4:	4a4e      	ldr	r2, [pc, #312]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bcb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bcba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800bcbc:	e01e      	b.n	800bcfc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bcbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bcc2:	3308      	adds	r3, #8
 800bcc4:	2100      	movs	r1, #0
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f001 fb94 	bl	800d3f4 <RCCEx_PLL2_Config>
 800bccc:	4603      	mov	r3, r0
 800bcce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800bcd2:	e013      	b.n	800bcfc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bcd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bcd8:	3328      	adds	r3, #40	; 0x28
 800bcda:	2100      	movs	r1, #0
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f001 fc3b 	bl	800d558 <RCCEx_PLL3_Config>
 800bce2:	4603      	mov	r3, r0
 800bce4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800bce8:	e008      	b.n	800bcfc <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bcea:	2301      	movs	r3, #1
 800bcec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bcf0:	e004      	b.n	800bcfc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800bcf2:	bf00      	nop
 800bcf4:	e002      	b.n	800bcfc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800bcf6:	bf00      	nop
 800bcf8:	e000      	b.n	800bcfc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800bcfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcfc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d10a      	bne.n	800bd1a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800bd04:	4b3a      	ldr	r3, [pc, #232]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bd06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd08:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800bd0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd12:	4a37      	ldr	r2, [pc, #220]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bd14:	430b      	orrs	r3, r1
 800bd16:	6513      	str	r3, [r2, #80]	; 0x50
 800bd18:	e003      	b.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd1a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bd1e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800bd22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd2a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800bd2e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800bd32:	2300      	movs	r3, #0
 800bd34:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800bd38:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800bd3c:	460b      	mov	r3, r1
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	d05c      	beq.n	800bdfc <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800bd42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd48:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800bd4c:	d03b      	beq.n	800bdc6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800bd4e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800bd52:	d834      	bhi.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800bd54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd58:	d037      	beq.n	800bdca <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800bd5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd5e:	d82e      	bhi.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800bd60:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800bd64:	d033      	beq.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bd66:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800bd6a:	d828      	bhi.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800bd6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd70:	d01a      	beq.n	800bda8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800bd72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd76:	d822      	bhi.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d003      	beq.n	800bd84 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800bd7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd80:	d007      	beq.n	800bd92 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800bd82:	e01c      	b.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd84:	4b1a      	ldr	r3, [pc, #104]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bd86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd88:	4a19      	ldr	r2, [pc, #100]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bd8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800bd90:	e01e      	b.n	800bdd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd96:	3308      	adds	r3, #8
 800bd98:	2100      	movs	r1, #0
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f001 fb2a 	bl	800d3f4 <RCCEx_PLL2_Config>
 800bda0:	4603      	mov	r3, r0
 800bda2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800bda6:	e013      	b.n	800bdd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bda8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bdac:	3328      	adds	r3, #40	; 0x28
 800bdae:	2100      	movs	r1, #0
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f001 fbd1 	bl	800d558 <RCCEx_PLL3_Config>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800bdbc:	e008      	b.n	800bdd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bdc4:	e004      	b.n	800bdd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800bdc6:	bf00      	nop
 800bdc8:	e002      	b.n	800bdd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800bdca:	bf00      	nop
 800bdcc:	e000      	b.n	800bdd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800bdce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bdd0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d10d      	bne.n	800bdf4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800bdd8:	4b05      	ldr	r3, [pc, #20]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bdda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bddc:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800bde0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bde4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bde6:	4a02      	ldr	r2, [pc, #8]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bde8:	430b      	orrs	r3, r1
 800bdea:	6513      	str	r3, [r2, #80]	; 0x50
 800bdec:	e006      	b.n	800bdfc <HAL_RCCEx_PeriphCLKConfig+0x300>
 800bdee:	bf00      	nop
 800bdf0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdf4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bdf8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800bdfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be04:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800be08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800be0c:	2300      	movs	r3, #0
 800be0e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800be12:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800be16:	460b      	mov	r3, r1
 800be18:	4313      	orrs	r3, r2
 800be1a:	d03a      	beq.n	800be92 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800be1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be22:	2b30      	cmp	r3, #48	; 0x30
 800be24:	d01f      	beq.n	800be66 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800be26:	2b30      	cmp	r3, #48	; 0x30
 800be28:	d819      	bhi.n	800be5e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800be2a:	2b20      	cmp	r3, #32
 800be2c:	d00c      	beq.n	800be48 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800be2e:	2b20      	cmp	r3, #32
 800be30:	d815      	bhi.n	800be5e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800be32:	2b00      	cmp	r3, #0
 800be34:	d019      	beq.n	800be6a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800be36:	2b10      	cmp	r3, #16
 800be38:	d111      	bne.n	800be5e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be3a:	4bae      	ldr	r3, [pc, #696]	; (800c0f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800be3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be3e:	4aad      	ldr	r2, [pc, #692]	; (800c0f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800be40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800be46:	e011      	b.n	800be6c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800be48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be4c:	3308      	adds	r3, #8
 800be4e:	2102      	movs	r1, #2
 800be50:	4618      	mov	r0, r3
 800be52:	f001 facf 	bl	800d3f4 <RCCEx_PLL2_Config>
 800be56:	4603      	mov	r3, r0
 800be58:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800be5c:	e006      	b.n	800be6c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800be5e:	2301      	movs	r3, #1
 800be60:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800be64:	e002      	b.n	800be6c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800be66:	bf00      	nop
 800be68:	e000      	b.n	800be6c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800be6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be6c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800be70:	2b00      	cmp	r3, #0
 800be72:	d10a      	bne.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800be74:	4b9f      	ldr	r3, [pc, #636]	; (800c0f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800be76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be78:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800be7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be82:	4a9c      	ldr	r2, [pc, #624]	; (800c0f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800be84:	430b      	orrs	r3, r1
 800be86:	64d3      	str	r3, [r2, #76]	; 0x4c
 800be88:	e003      	b.n	800be92 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be8a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800be8e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800be92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800be9e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bea2:	2300      	movs	r3, #0
 800bea4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bea8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800beac:	460b      	mov	r3, r1
 800beae:	4313      	orrs	r3, r2
 800beb0:	d051      	beq.n	800bf56 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800beb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800beb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800beb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bebc:	d035      	beq.n	800bf2a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800bebe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bec2:	d82e      	bhi.n	800bf22 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800bec4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bec8:	d031      	beq.n	800bf2e <HAL_RCCEx_PeriphCLKConfig+0x432>
 800beca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bece:	d828      	bhi.n	800bf22 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800bed0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bed4:	d01a      	beq.n	800bf0c <HAL_RCCEx_PeriphCLKConfig+0x410>
 800bed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800beda:	d822      	bhi.n	800bf22 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d003      	beq.n	800bee8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800bee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bee4:	d007      	beq.n	800bef6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800bee6:	e01c      	b.n	800bf22 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bee8:	4b82      	ldr	r3, [pc, #520]	; (800c0f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800beea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beec:	4a81      	ldr	r2, [pc, #516]	; (800c0f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800beee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bef2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bef4:	e01c      	b.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bef6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800befa:	3308      	adds	r3, #8
 800befc:	2100      	movs	r1, #0
 800befe:	4618      	mov	r0, r3
 800bf00:	f001 fa78 	bl	800d3f4 <RCCEx_PLL2_Config>
 800bf04:	4603      	mov	r3, r0
 800bf06:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bf0a:	e011      	b.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bf0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf10:	3328      	adds	r3, #40	; 0x28
 800bf12:	2100      	movs	r1, #0
 800bf14:	4618      	mov	r0, r3
 800bf16:	f001 fb1f 	bl	800d558 <RCCEx_PLL3_Config>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bf20:	e006      	b.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf22:	2301      	movs	r3, #1
 800bf24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bf28:	e002      	b.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800bf2a:	bf00      	nop
 800bf2c:	e000      	b.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800bf2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf30:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d10a      	bne.n	800bf4e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bf38:	4b6e      	ldr	r3, [pc, #440]	; (800c0f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bf3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf3c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800bf40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf46:	4a6b      	ldr	r2, [pc, #428]	; (800c0f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bf48:	430b      	orrs	r3, r1
 800bf4a:	6513      	str	r3, [r2, #80]	; 0x50
 800bf4c:	e003      	b.n	800bf56 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf4e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bf52:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bf56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf5e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800bf62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bf66:	2300      	movs	r3, #0
 800bf68:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bf6c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800bf70:	460b      	mov	r3, r1
 800bf72:	4313      	orrs	r3, r2
 800bf74:	d053      	beq.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800bf76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bf7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bf80:	d033      	beq.n	800bfea <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800bf82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bf86:	d82c      	bhi.n	800bfe2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bf88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bf8c:	d02f      	beq.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800bf8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bf92:	d826      	bhi.n	800bfe2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bf94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bf98:	d02b      	beq.n	800bff2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bf9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bf9e:	d820      	bhi.n	800bfe2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bfa0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bfa4:	d012      	beq.n	800bfcc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800bfa6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bfaa:	d81a      	bhi.n	800bfe2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d022      	beq.n	800bff6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800bfb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfb4:	d115      	bne.n	800bfe2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bfb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bfba:	3308      	adds	r3, #8
 800bfbc:	2101      	movs	r1, #1
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f001 fa18 	bl	800d3f4 <RCCEx_PLL2_Config>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bfca:	e015      	b.n	800bff8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bfcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bfd0:	3328      	adds	r3, #40	; 0x28
 800bfd2:	2101      	movs	r1, #1
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f001 fabf 	bl	800d558 <RCCEx_PLL3_Config>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bfe0:	e00a      	b.n	800bff8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bfe8:	e006      	b.n	800bff8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bfea:	bf00      	nop
 800bfec:	e004      	b.n	800bff8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bfee:	bf00      	nop
 800bff0:	e002      	b.n	800bff8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bff2:	bf00      	nop
 800bff4:	e000      	b.n	800bff8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bff6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bff8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d10a      	bne.n	800c016 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c000:	4b3c      	ldr	r3, [pc, #240]	; (800c0f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c004:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800c008:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c00c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c00e:	4a39      	ldr	r2, [pc, #228]	; (800c0f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c010:	430b      	orrs	r3, r1
 800c012:	6513      	str	r3, [r2, #80]	; 0x50
 800c014:	e003      	b.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c016:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c01a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c01e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c026:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800c02a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c02e:	2300      	movs	r3, #0
 800c030:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c034:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800c038:	460b      	mov	r3, r1
 800c03a:	4313      	orrs	r3, r2
 800c03c:	d060      	beq.n	800c100 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800c03e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c042:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c046:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800c04a:	d039      	beq.n	800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800c04c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800c050:	d832      	bhi.n	800c0b8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800c052:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c056:	d035      	beq.n	800c0c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800c058:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c05c:	d82c      	bhi.n	800c0b8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800c05e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c062:	d031      	beq.n	800c0c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800c064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c068:	d826      	bhi.n	800c0b8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800c06a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c06e:	d02d      	beq.n	800c0cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800c070:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c074:	d820      	bhi.n	800c0b8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800c076:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c07a:	d012      	beq.n	800c0a2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800c07c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c080:	d81a      	bhi.n	800c0b8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800c082:	2b00      	cmp	r3, #0
 800c084:	d024      	beq.n	800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800c086:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c08a:	d115      	bne.n	800c0b8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c08c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c090:	3308      	adds	r3, #8
 800c092:	2101      	movs	r1, #1
 800c094:	4618      	mov	r0, r3
 800c096:	f001 f9ad 	bl	800d3f4 <RCCEx_PLL2_Config>
 800c09a:	4603      	mov	r3, r0
 800c09c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c0a0:	e017      	b.n	800c0d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c0a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0a6:	3328      	adds	r3, #40	; 0x28
 800c0a8:	2101      	movs	r1, #1
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f001 fa54 	bl	800d558 <RCCEx_PLL3_Config>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c0b6:	e00c      	b.n	800c0d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c0be:	e008      	b.n	800c0d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c0c0:	bf00      	nop
 800c0c2:	e006      	b.n	800c0d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c0c4:	bf00      	nop
 800c0c6:	e004      	b.n	800c0d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c0c8:	bf00      	nop
 800c0ca:	e002      	b.n	800c0d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c0cc:	bf00      	nop
 800c0ce:	e000      	b.n	800c0d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c0d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c0d2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d10e      	bne.n	800c0f8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c0da:	4b06      	ldr	r3, [pc, #24]	; (800c0f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c0dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0de:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c0e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c0ea:	4a02      	ldr	r2, [pc, #8]	; (800c0f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c0ec:	430b      	orrs	r3, r1
 800c0ee:	6593      	str	r3, [r2, #88]	; 0x58
 800c0f0:	e006      	b.n	800c100 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800c0f2:	bf00      	nop
 800c0f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c0fc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c100:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c108:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800c10c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c110:	2300      	movs	r3, #0
 800c112:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c116:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c11a:	460b      	mov	r3, r1
 800c11c:	4313      	orrs	r3, r2
 800c11e:	d037      	beq.n	800c190 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800c120:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c124:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c126:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c12a:	d00e      	beq.n	800c14a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800c12c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c130:	d816      	bhi.n	800c160 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800c132:	2b00      	cmp	r3, #0
 800c134:	d018      	beq.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800c136:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c13a:	d111      	bne.n	800c160 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c13c:	4bc4      	ldr	r3, [pc, #784]	; (800c450 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c140:	4ac3      	ldr	r2, [pc, #780]	; (800c450 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c142:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c146:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c148:	e00f      	b.n	800c16a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c14a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c14e:	3308      	adds	r3, #8
 800c150:	2101      	movs	r1, #1
 800c152:	4618      	mov	r0, r3
 800c154:	f001 f94e 	bl	800d3f4 <RCCEx_PLL2_Config>
 800c158:	4603      	mov	r3, r0
 800c15a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c15e:	e004      	b.n	800c16a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c160:	2301      	movs	r3, #1
 800c162:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c166:	e000      	b.n	800c16a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800c168:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c16a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d10a      	bne.n	800c188 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c172:	4bb7      	ldr	r3, [pc, #732]	; (800c450 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c176:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c17a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c17e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c180:	4ab3      	ldr	r2, [pc, #716]	; (800c450 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c182:	430b      	orrs	r3, r1
 800c184:	6513      	str	r3, [r2, #80]	; 0x50
 800c186:	e003      	b.n	800c190 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c188:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c18c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c190:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c198:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800c19c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c1a6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800c1aa:	460b      	mov	r3, r1
 800c1ac:	4313      	orrs	r3, r2
 800c1ae:	d039      	beq.n	800c224 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800c1b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c1b6:	2b03      	cmp	r3, #3
 800c1b8:	d81c      	bhi.n	800c1f4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800c1ba:	a201      	add	r2, pc, #4	; (adr r2, 800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800c1bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1c0:	0800c1fd 	.word	0x0800c1fd
 800c1c4:	0800c1d1 	.word	0x0800c1d1
 800c1c8:	0800c1df 	.word	0x0800c1df
 800c1cc:	0800c1fd 	.word	0x0800c1fd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c1d0:	4b9f      	ldr	r3, [pc, #636]	; (800c450 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1d4:	4a9e      	ldr	r2, [pc, #632]	; (800c450 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c1d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c1da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c1dc:	e00f      	b.n	800c1fe <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c1de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1e2:	3308      	adds	r3, #8
 800c1e4:	2102      	movs	r1, #2
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f001 f904 	bl	800d3f4 <RCCEx_PLL2_Config>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c1f2:	e004      	b.n	800c1fe <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c1fa:	e000      	b.n	800c1fe <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800c1fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1fe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c202:	2b00      	cmp	r3, #0
 800c204:	d10a      	bne.n	800c21c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c206:	4b92      	ldr	r3, [pc, #584]	; (800c450 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c20a:	f023 0103 	bic.w	r1, r3, #3
 800c20e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c214:	4a8e      	ldr	r2, [pc, #568]	; (800c450 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c216:	430b      	orrs	r3, r1
 800c218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c21a:	e003      	b.n	800c224 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c21c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c220:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c224:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c22c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800c230:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c234:	2300      	movs	r3, #0
 800c236:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c23a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800c23e:	460b      	mov	r3, r1
 800c240:	4313      	orrs	r3, r2
 800c242:	f000 8099 	beq.w	800c378 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c246:	4b83      	ldr	r3, [pc, #524]	; (800c454 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	4a82      	ldr	r2, [pc, #520]	; (800c454 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c24c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c250:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c252:	f7f8 fa91 	bl	8004778 <HAL_GetTick>
 800c256:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c25a:	e00b      	b.n	800c274 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c25c:	f7f8 fa8c 	bl	8004778 <HAL_GetTick>
 800c260:	4602      	mov	r2, r0
 800c262:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c266:	1ad3      	subs	r3, r2, r3
 800c268:	2b64      	cmp	r3, #100	; 0x64
 800c26a:	d903      	bls.n	800c274 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800c26c:	2303      	movs	r3, #3
 800c26e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c272:	e005      	b.n	800c280 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c274:	4b77      	ldr	r3, [pc, #476]	; (800c454 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d0ed      	beq.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800c280:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c284:	2b00      	cmp	r3, #0
 800c286:	d173      	bne.n	800c370 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c288:	4b71      	ldr	r3, [pc, #452]	; (800c450 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c28a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c28c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c290:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c294:	4053      	eors	r3, r2
 800c296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d015      	beq.n	800c2ca <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c29e:	4b6c      	ldr	r3, [pc, #432]	; (800c450 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c2a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c2a6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c2aa:	4b69      	ldr	r3, [pc, #420]	; (800c450 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c2ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2ae:	4a68      	ldr	r2, [pc, #416]	; (800c450 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c2b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c2b4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c2b6:	4b66      	ldr	r3, [pc, #408]	; (800c450 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c2b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2ba:	4a65      	ldr	r2, [pc, #404]	; (800c450 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c2bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c2c0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c2c2:	4a63      	ldr	r2, [pc, #396]	; (800c450 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c2c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2c8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c2ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c2d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2d6:	d118      	bne.n	800c30a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c2d8:	f7f8 fa4e 	bl	8004778 <HAL_GetTick>
 800c2dc:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c2e0:	e00d      	b.n	800c2fe <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c2e2:	f7f8 fa49 	bl	8004778 <HAL_GetTick>
 800c2e6:	4602      	mov	r2, r0
 800c2e8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c2ec:	1ad2      	subs	r2, r2, r3
 800c2ee:	f241 3388 	movw	r3, #5000	; 0x1388
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	d903      	bls.n	800c2fe <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800c2f6:	2303      	movs	r3, #3
 800c2f8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800c2fc:	e005      	b.n	800c30a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c2fe:	4b54      	ldr	r3, [pc, #336]	; (800c450 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c302:	f003 0302 	and.w	r3, r3, #2
 800c306:	2b00      	cmp	r3, #0
 800c308:	d0eb      	beq.n	800c2e2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800c30a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d129      	bne.n	800c366 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c312:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c316:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c31a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c31e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c322:	d10e      	bne.n	800c342 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800c324:	4b4a      	ldr	r3, [pc, #296]	; (800c450 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c326:	691b      	ldr	r3, [r3, #16]
 800c328:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800c32c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c330:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c334:	091a      	lsrs	r2, r3, #4
 800c336:	4b48      	ldr	r3, [pc, #288]	; (800c458 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800c338:	4013      	ands	r3, r2
 800c33a:	4a45      	ldr	r2, [pc, #276]	; (800c450 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c33c:	430b      	orrs	r3, r1
 800c33e:	6113      	str	r3, [r2, #16]
 800c340:	e005      	b.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0x852>
 800c342:	4b43      	ldr	r3, [pc, #268]	; (800c450 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c344:	691b      	ldr	r3, [r3, #16]
 800c346:	4a42      	ldr	r2, [pc, #264]	; (800c450 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c348:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c34c:	6113      	str	r3, [r2, #16]
 800c34e:	4b40      	ldr	r3, [pc, #256]	; (800c450 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c350:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800c352:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c356:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c35a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c35e:	4a3c      	ldr	r2, [pc, #240]	; (800c450 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c360:	430b      	orrs	r3, r1
 800c362:	6713      	str	r3, [r2, #112]	; 0x70
 800c364:	e008      	b.n	800c378 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c366:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c36a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800c36e:	e003      	b.n	800c378 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c370:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c374:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c378:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c380:	f002 0301 	and.w	r3, r2, #1
 800c384:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c388:	2300      	movs	r3, #0
 800c38a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c38e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c392:	460b      	mov	r3, r1
 800c394:	4313      	orrs	r3, r2
 800c396:	f000 8090 	beq.w	800c4ba <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800c39a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c39e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3a2:	2b28      	cmp	r3, #40	; 0x28
 800c3a4:	d870      	bhi.n	800c488 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800c3a6:	a201      	add	r2, pc, #4	; (adr r2, 800c3ac <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800c3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3ac:	0800c491 	.word	0x0800c491
 800c3b0:	0800c489 	.word	0x0800c489
 800c3b4:	0800c489 	.word	0x0800c489
 800c3b8:	0800c489 	.word	0x0800c489
 800c3bc:	0800c489 	.word	0x0800c489
 800c3c0:	0800c489 	.word	0x0800c489
 800c3c4:	0800c489 	.word	0x0800c489
 800c3c8:	0800c489 	.word	0x0800c489
 800c3cc:	0800c45d 	.word	0x0800c45d
 800c3d0:	0800c489 	.word	0x0800c489
 800c3d4:	0800c489 	.word	0x0800c489
 800c3d8:	0800c489 	.word	0x0800c489
 800c3dc:	0800c489 	.word	0x0800c489
 800c3e0:	0800c489 	.word	0x0800c489
 800c3e4:	0800c489 	.word	0x0800c489
 800c3e8:	0800c489 	.word	0x0800c489
 800c3ec:	0800c473 	.word	0x0800c473
 800c3f0:	0800c489 	.word	0x0800c489
 800c3f4:	0800c489 	.word	0x0800c489
 800c3f8:	0800c489 	.word	0x0800c489
 800c3fc:	0800c489 	.word	0x0800c489
 800c400:	0800c489 	.word	0x0800c489
 800c404:	0800c489 	.word	0x0800c489
 800c408:	0800c489 	.word	0x0800c489
 800c40c:	0800c491 	.word	0x0800c491
 800c410:	0800c489 	.word	0x0800c489
 800c414:	0800c489 	.word	0x0800c489
 800c418:	0800c489 	.word	0x0800c489
 800c41c:	0800c489 	.word	0x0800c489
 800c420:	0800c489 	.word	0x0800c489
 800c424:	0800c489 	.word	0x0800c489
 800c428:	0800c489 	.word	0x0800c489
 800c42c:	0800c491 	.word	0x0800c491
 800c430:	0800c489 	.word	0x0800c489
 800c434:	0800c489 	.word	0x0800c489
 800c438:	0800c489 	.word	0x0800c489
 800c43c:	0800c489 	.word	0x0800c489
 800c440:	0800c489 	.word	0x0800c489
 800c444:	0800c489 	.word	0x0800c489
 800c448:	0800c489 	.word	0x0800c489
 800c44c:	0800c491 	.word	0x0800c491
 800c450:	58024400 	.word	0x58024400
 800c454:	58024800 	.word	0x58024800
 800c458:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c45c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c460:	3308      	adds	r3, #8
 800c462:	2101      	movs	r1, #1
 800c464:	4618      	mov	r0, r3
 800c466:	f000 ffc5 	bl	800d3f4 <RCCEx_PLL2_Config>
 800c46a:	4603      	mov	r3, r0
 800c46c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c470:	e00f      	b.n	800c492 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c472:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c476:	3328      	adds	r3, #40	; 0x28
 800c478:	2101      	movs	r1, #1
 800c47a:	4618      	mov	r0, r3
 800c47c:	f001 f86c 	bl	800d558 <RCCEx_PLL3_Config>
 800c480:	4603      	mov	r3, r0
 800c482:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c486:	e004      	b.n	800c492 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c488:	2301      	movs	r3, #1
 800c48a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c48e:	e000      	b.n	800c492 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800c490:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c492:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c496:	2b00      	cmp	r3, #0
 800c498:	d10b      	bne.n	800c4b2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c49a:	4bc0      	ldr	r3, [pc, #768]	; (800c79c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c49c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c49e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800c4a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4aa:	4abc      	ldr	r2, [pc, #752]	; (800c79c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c4ac:	430b      	orrs	r3, r1
 800c4ae:	6553      	str	r3, [r2, #84]	; 0x54
 800c4b0:	e003      	b.n	800c4ba <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4b2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c4b6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c4ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c2:	f002 0302 	and.w	r3, r2, #2
 800c4c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c4d0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800c4d4:	460b      	mov	r3, r1
 800c4d6:	4313      	orrs	r3, r2
 800c4d8:	d043      	beq.n	800c562 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c4da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c4e2:	2b05      	cmp	r3, #5
 800c4e4:	d824      	bhi.n	800c530 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800c4e6:	a201      	add	r2, pc, #4	; (adr r2, 800c4ec <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800c4e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4ec:	0800c539 	.word	0x0800c539
 800c4f0:	0800c505 	.word	0x0800c505
 800c4f4:	0800c51b 	.word	0x0800c51b
 800c4f8:	0800c539 	.word	0x0800c539
 800c4fc:	0800c539 	.word	0x0800c539
 800c500:	0800c539 	.word	0x0800c539
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c504:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c508:	3308      	adds	r3, #8
 800c50a:	2101      	movs	r1, #1
 800c50c:	4618      	mov	r0, r3
 800c50e:	f000 ff71 	bl	800d3f4 <RCCEx_PLL2_Config>
 800c512:	4603      	mov	r3, r0
 800c514:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c518:	e00f      	b.n	800c53a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c51a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c51e:	3328      	adds	r3, #40	; 0x28
 800c520:	2101      	movs	r1, #1
 800c522:	4618      	mov	r0, r3
 800c524:	f001 f818 	bl	800d558 <RCCEx_PLL3_Config>
 800c528:	4603      	mov	r3, r0
 800c52a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c52e:	e004      	b.n	800c53a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c530:	2301      	movs	r3, #1
 800c532:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c536:	e000      	b.n	800c53a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800c538:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c53a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d10b      	bne.n	800c55a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c542:	4b96      	ldr	r3, [pc, #600]	; (800c79c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c546:	f023 0107 	bic.w	r1, r3, #7
 800c54a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c54e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c552:	4a92      	ldr	r2, [pc, #584]	; (800c79c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c554:	430b      	orrs	r3, r1
 800c556:	6553      	str	r3, [r2, #84]	; 0x54
 800c558:	e003      	b.n	800c562 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c55a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c55e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c562:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c56a:	f002 0304 	and.w	r3, r2, #4
 800c56e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c572:	2300      	movs	r3, #0
 800c574:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c578:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800c57c:	460b      	mov	r3, r1
 800c57e:	4313      	orrs	r3, r2
 800c580:	d043      	beq.n	800c60a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c582:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c586:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c58a:	2b05      	cmp	r3, #5
 800c58c:	d824      	bhi.n	800c5d8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800c58e:	a201      	add	r2, pc, #4	; (adr r2, 800c594 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800c590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c594:	0800c5e1 	.word	0x0800c5e1
 800c598:	0800c5ad 	.word	0x0800c5ad
 800c59c:	0800c5c3 	.word	0x0800c5c3
 800c5a0:	0800c5e1 	.word	0x0800c5e1
 800c5a4:	0800c5e1 	.word	0x0800c5e1
 800c5a8:	0800c5e1 	.word	0x0800c5e1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c5ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5b0:	3308      	adds	r3, #8
 800c5b2:	2101      	movs	r1, #1
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f000 ff1d 	bl	800d3f4 <RCCEx_PLL2_Config>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c5c0:	e00f      	b.n	800c5e2 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c5c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5c6:	3328      	adds	r3, #40	; 0x28
 800c5c8:	2101      	movs	r1, #1
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f000 ffc4 	bl	800d558 <RCCEx_PLL3_Config>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c5d6:	e004      	b.n	800c5e2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c5d8:	2301      	movs	r3, #1
 800c5da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c5de:	e000      	b.n	800c5e2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800c5e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c5e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d10b      	bne.n	800c602 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c5ea:	4b6c      	ldr	r3, [pc, #432]	; (800c79c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c5ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5ee:	f023 0107 	bic.w	r1, r3, #7
 800c5f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c5fa:	4a68      	ldr	r2, [pc, #416]	; (800c79c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c5fc:	430b      	orrs	r3, r1
 800c5fe:	6593      	str	r3, [r2, #88]	; 0x58
 800c600:	e003      	b.n	800c60a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c602:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c606:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c60a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c612:	f002 0320 	and.w	r3, r2, #32
 800c616:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c61a:	2300      	movs	r3, #0
 800c61c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c620:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c624:	460b      	mov	r3, r1
 800c626:	4313      	orrs	r3, r2
 800c628:	d055      	beq.n	800c6d6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c62a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c62e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c632:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c636:	d033      	beq.n	800c6a0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c638:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c63c:	d82c      	bhi.n	800c698 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c63e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c642:	d02f      	beq.n	800c6a4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c648:	d826      	bhi.n	800c698 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c64a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c64e:	d02b      	beq.n	800c6a8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c650:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c654:	d820      	bhi.n	800c698 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c656:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c65a:	d012      	beq.n	800c682 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800c65c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c660:	d81a      	bhi.n	800c698 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c662:	2b00      	cmp	r3, #0
 800c664:	d022      	beq.n	800c6ac <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800c666:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c66a:	d115      	bne.n	800c698 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c66c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c670:	3308      	adds	r3, #8
 800c672:	2100      	movs	r1, #0
 800c674:	4618      	mov	r0, r3
 800c676:	f000 febd 	bl	800d3f4 <RCCEx_PLL2_Config>
 800c67a:	4603      	mov	r3, r0
 800c67c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c680:	e015      	b.n	800c6ae <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c682:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c686:	3328      	adds	r3, #40	; 0x28
 800c688:	2102      	movs	r1, #2
 800c68a:	4618      	mov	r0, r3
 800c68c:	f000 ff64 	bl	800d558 <RCCEx_PLL3_Config>
 800c690:	4603      	mov	r3, r0
 800c692:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c696:	e00a      	b.n	800c6ae <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c698:	2301      	movs	r3, #1
 800c69a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c69e:	e006      	b.n	800c6ae <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c6a0:	bf00      	nop
 800c6a2:	e004      	b.n	800c6ae <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c6a4:	bf00      	nop
 800c6a6:	e002      	b.n	800c6ae <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c6a8:	bf00      	nop
 800c6aa:	e000      	b.n	800c6ae <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c6ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c6ae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d10b      	bne.n	800c6ce <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c6b6:	4b39      	ldr	r3, [pc, #228]	; (800c79c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c6b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6ba:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c6be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c6c6:	4a35      	ldr	r2, [pc, #212]	; (800c79c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c6c8:	430b      	orrs	r3, r1
 800c6ca:	6553      	str	r3, [r2, #84]	; 0x54
 800c6cc:	e003      	b.n	800c6d6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6ce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c6d2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c6d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6de:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800c6e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c6ec:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800c6f0:	460b      	mov	r3, r1
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	d058      	beq.n	800c7a8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c6f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c6fe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c702:	d033      	beq.n	800c76c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c704:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c708:	d82c      	bhi.n	800c764 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c70a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c70e:	d02f      	beq.n	800c770 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c714:	d826      	bhi.n	800c764 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c716:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c71a:	d02b      	beq.n	800c774 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c71c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c720:	d820      	bhi.n	800c764 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c722:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c726:	d012      	beq.n	800c74e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800c728:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c72c:	d81a      	bhi.n	800c764 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d022      	beq.n	800c778 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800c732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c736:	d115      	bne.n	800c764 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c738:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c73c:	3308      	adds	r3, #8
 800c73e:	2100      	movs	r1, #0
 800c740:	4618      	mov	r0, r3
 800c742:	f000 fe57 	bl	800d3f4 <RCCEx_PLL2_Config>
 800c746:	4603      	mov	r3, r0
 800c748:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c74c:	e015      	b.n	800c77a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c74e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c752:	3328      	adds	r3, #40	; 0x28
 800c754:	2102      	movs	r1, #2
 800c756:	4618      	mov	r0, r3
 800c758:	f000 fefe 	bl	800d558 <RCCEx_PLL3_Config>
 800c75c:	4603      	mov	r3, r0
 800c75e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c762:	e00a      	b.n	800c77a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c764:	2301      	movs	r3, #1
 800c766:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c76a:	e006      	b.n	800c77a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c76c:	bf00      	nop
 800c76e:	e004      	b.n	800c77a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c770:	bf00      	nop
 800c772:	e002      	b.n	800c77a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c774:	bf00      	nop
 800c776:	e000      	b.n	800c77a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c778:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c77a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d10e      	bne.n	800c7a0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c782:	4b06      	ldr	r3, [pc, #24]	; (800c79c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c786:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800c78a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c78e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c792:	4a02      	ldr	r2, [pc, #8]	; (800c79c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c794:	430b      	orrs	r3, r1
 800c796:	6593      	str	r3, [r2, #88]	; 0x58
 800c798:	e006      	b.n	800c7a8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800c79a:	bf00      	nop
 800c79c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c7a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c7a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800c7b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c7be:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800c7c2:	460b      	mov	r3, r1
 800c7c4:	4313      	orrs	r3, r2
 800c7c6:	d055      	beq.n	800c874 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c7c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c7d0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c7d4:	d033      	beq.n	800c83e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c7d6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c7da:	d82c      	bhi.n	800c836 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c7dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c7e0:	d02f      	beq.n	800c842 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c7e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c7e6:	d826      	bhi.n	800c836 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c7e8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c7ec:	d02b      	beq.n	800c846 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c7ee:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c7f2:	d820      	bhi.n	800c836 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c7f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c7f8:	d012      	beq.n	800c820 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800c7fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c7fe:	d81a      	bhi.n	800c836 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c800:	2b00      	cmp	r3, #0
 800c802:	d022      	beq.n	800c84a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800c804:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c808:	d115      	bne.n	800c836 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c80a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c80e:	3308      	adds	r3, #8
 800c810:	2100      	movs	r1, #0
 800c812:	4618      	mov	r0, r3
 800c814:	f000 fdee 	bl	800d3f4 <RCCEx_PLL2_Config>
 800c818:	4603      	mov	r3, r0
 800c81a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c81e:	e015      	b.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c820:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c824:	3328      	adds	r3, #40	; 0x28
 800c826:	2102      	movs	r1, #2
 800c828:	4618      	mov	r0, r3
 800c82a:	f000 fe95 	bl	800d558 <RCCEx_PLL3_Config>
 800c82e:	4603      	mov	r3, r0
 800c830:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c834:	e00a      	b.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c836:	2301      	movs	r3, #1
 800c838:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c83c:	e006      	b.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c83e:	bf00      	nop
 800c840:	e004      	b.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c842:	bf00      	nop
 800c844:	e002      	b.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c846:	bf00      	nop
 800c848:	e000      	b.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c84a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c84c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c850:	2b00      	cmp	r3, #0
 800c852:	d10b      	bne.n	800c86c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c854:	4ba1      	ldr	r3, [pc, #644]	; (800cadc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c858:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c85c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c860:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c864:	4a9d      	ldr	r2, [pc, #628]	; (800cadc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c866:	430b      	orrs	r3, r1
 800c868:	6593      	str	r3, [r2, #88]	; 0x58
 800c86a:	e003      	b.n	800c874 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c86c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c870:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c874:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c87c:	f002 0308 	and.w	r3, r2, #8
 800c880:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c884:	2300      	movs	r3, #0
 800c886:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c88a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c88e:	460b      	mov	r3, r1
 800c890:	4313      	orrs	r3, r2
 800c892:	d01e      	beq.n	800c8d2 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c894:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c898:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c89c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c8a0:	d10c      	bne.n	800c8bc <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c8a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c8a6:	3328      	adds	r3, #40	; 0x28
 800c8a8:	2102      	movs	r1, #2
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f000 fe54 	bl	800d558 <RCCEx_PLL3_Config>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d002      	beq.n	800c8bc <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c8bc:	4b87      	ldr	r3, [pc, #540]	; (800cadc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c8be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8c0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c8c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c8c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8cc:	4a83      	ldr	r2, [pc, #524]	; (800cadc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c8ce:	430b      	orrs	r3, r1
 800c8d0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c8d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8da:	f002 0310 	and.w	r3, r2, #16
 800c8de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c8e8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c8ec:	460b      	mov	r3, r1
 800c8ee:	4313      	orrs	r3, r2
 800c8f0:	d01e      	beq.n	800c930 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c8f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c8f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c8fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8fe:	d10c      	bne.n	800c91a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c900:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c904:	3328      	adds	r3, #40	; 0x28
 800c906:	2102      	movs	r1, #2
 800c908:	4618      	mov	r0, r3
 800c90a:	f000 fe25 	bl	800d558 <RCCEx_PLL3_Config>
 800c90e:	4603      	mov	r3, r0
 800c910:	2b00      	cmp	r3, #0
 800c912:	d002      	beq.n	800c91a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800c914:	2301      	movs	r3, #1
 800c916:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c91a:	4b70      	ldr	r3, [pc, #448]	; (800cadc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c91c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c91e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c922:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c926:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c92a:	4a6c      	ldr	r2, [pc, #432]	; (800cadc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c92c:	430b      	orrs	r3, r1
 800c92e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c930:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c938:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c93c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c940:	2300      	movs	r3, #0
 800c942:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c946:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c94a:	460b      	mov	r3, r1
 800c94c:	4313      	orrs	r3, r2
 800c94e:	d03e      	beq.n	800c9ce <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c950:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c954:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c958:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c95c:	d022      	beq.n	800c9a4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800c95e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c962:	d81b      	bhi.n	800c99c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c964:	2b00      	cmp	r3, #0
 800c966:	d003      	beq.n	800c970 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800c968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c96c:	d00b      	beq.n	800c986 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800c96e:	e015      	b.n	800c99c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c970:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c974:	3308      	adds	r3, #8
 800c976:	2100      	movs	r1, #0
 800c978:	4618      	mov	r0, r3
 800c97a:	f000 fd3b 	bl	800d3f4 <RCCEx_PLL2_Config>
 800c97e:	4603      	mov	r3, r0
 800c980:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c984:	e00f      	b.n	800c9a6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c986:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c98a:	3328      	adds	r3, #40	; 0x28
 800c98c:	2102      	movs	r1, #2
 800c98e:	4618      	mov	r0, r3
 800c990:	f000 fde2 	bl	800d558 <RCCEx_PLL3_Config>
 800c994:	4603      	mov	r3, r0
 800c996:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c99a:	e004      	b.n	800c9a6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c99c:	2301      	movs	r3, #1
 800c99e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c9a2:	e000      	b.n	800c9a6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800c9a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c9a6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d10b      	bne.n	800c9c6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c9ae:	4b4b      	ldr	r3, [pc, #300]	; (800cadc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c9b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9b2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c9b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c9ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c9be:	4a47      	ldr	r2, [pc, #284]	; (800cadc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c9c0:	430b      	orrs	r3, r1
 800c9c2:	6593      	str	r3, [r2, #88]	; 0x58
 800c9c4:	e003      	b.n	800c9ce <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c9ca:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c9ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c9da:	67bb      	str	r3, [r7, #120]	; 0x78
 800c9dc:	2300      	movs	r3, #0
 800c9de:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c9e0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c9e4:	460b      	mov	r3, r1
 800c9e6:	4313      	orrs	r3, r2
 800c9e8:	d03b      	beq.n	800ca62 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c9ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c9ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c9f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c9f6:	d01f      	beq.n	800ca38 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800c9f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c9fc:	d818      	bhi.n	800ca30 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c9fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca02:	d003      	beq.n	800ca0c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800ca04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ca08:	d007      	beq.n	800ca1a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800ca0a:	e011      	b.n	800ca30 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca0c:	4b33      	ldr	r3, [pc, #204]	; (800cadc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ca0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca10:	4a32      	ldr	r2, [pc, #200]	; (800cadc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ca12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ca16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ca18:	e00f      	b.n	800ca3a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ca1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ca1e:	3328      	adds	r3, #40	; 0x28
 800ca20:	2101      	movs	r1, #1
 800ca22:	4618      	mov	r0, r3
 800ca24:	f000 fd98 	bl	800d558 <RCCEx_PLL3_Config>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800ca2e:	e004      	b.n	800ca3a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ca30:	2301      	movs	r3, #1
 800ca32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800ca36:	e000      	b.n	800ca3a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800ca38:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ca3a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d10b      	bne.n	800ca5a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ca42:	4b26      	ldr	r3, [pc, #152]	; (800cadc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ca44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca46:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ca4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ca4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca52:	4a22      	ldr	r2, [pc, #136]	; (800cadc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ca54:	430b      	orrs	r3, r1
 800ca56:	6553      	str	r3, [r2, #84]	; 0x54
 800ca58:	e003      	b.n	800ca62 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca5a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ca5e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ca62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ca66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca6a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800ca6e:	673b      	str	r3, [r7, #112]	; 0x70
 800ca70:	2300      	movs	r3, #0
 800ca72:	677b      	str	r3, [r7, #116]	; 0x74
 800ca74:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800ca78:	460b      	mov	r3, r1
 800ca7a:	4313      	orrs	r3, r2
 800ca7c:	d034      	beq.n	800cae8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ca7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ca82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d003      	beq.n	800ca90 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800ca88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca8c:	d007      	beq.n	800ca9e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800ca8e:	e011      	b.n	800cab4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca90:	4b12      	ldr	r3, [pc, #72]	; (800cadc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ca92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca94:	4a11      	ldr	r2, [pc, #68]	; (800cadc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ca96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ca9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ca9c:	e00e      	b.n	800cabc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ca9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800caa2:	3308      	adds	r3, #8
 800caa4:	2102      	movs	r1, #2
 800caa6:	4618      	mov	r0, r3
 800caa8:	f000 fca4 	bl	800d3f4 <RCCEx_PLL2_Config>
 800caac:	4603      	mov	r3, r0
 800caae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800cab2:	e003      	b.n	800cabc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800cab4:	2301      	movs	r3, #1
 800cab6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800caba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cabc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d10d      	bne.n	800cae0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800cac4:	4b05      	ldr	r3, [pc, #20]	; (800cadc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800cac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cac8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cacc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cad2:	4a02      	ldr	r2, [pc, #8]	; (800cadc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800cad4:	430b      	orrs	r3, r1
 800cad6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cad8:	e006      	b.n	800cae8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800cada:	bf00      	nop
 800cadc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cae0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cae4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800cae8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800caec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800caf4:	66bb      	str	r3, [r7, #104]	; 0x68
 800caf6:	2300      	movs	r3, #0
 800caf8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cafa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800cafe:	460b      	mov	r3, r1
 800cb00:	4313      	orrs	r3, r2
 800cb02:	d00c      	beq.n	800cb1e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800cb04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cb08:	3328      	adds	r3, #40	; 0x28
 800cb0a:	2102      	movs	r1, #2
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f000 fd23 	bl	800d558 <RCCEx_PLL3_Config>
 800cb12:	4603      	mov	r3, r0
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d002      	beq.n	800cb1e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800cb18:	2301      	movs	r3, #1
 800cb1a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800cb1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cb22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb26:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800cb2a:	663b      	str	r3, [r7, #96]	; 0x60
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	667b      	str	r3, [r7, #100]	; 0x64
 800cb30:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800cb34:	460b      	mov	r3, r1
 800cb36:	4313      	orrs	r3, r2
 800cb38:	d038      	beq.n	800cbac <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800cb3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cb3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cb46:	d018      	beq.n	800cb7a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800cb48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cb4c:	d811      	bhi.n	800cb72 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800cb4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb52:	d014      	beq.n	800cb7e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800cb54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb58:	d80b      	bhi.n	800cb72 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d011      	beq.n	800cb82 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800cb5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb62:	d106      	bne.n	800cb72 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cb64:	4bc3      	ldr	r3, [pc, #780]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cb66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb68:	4ac2      	ldr	r2, [pc, #776]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cb6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cb6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800cb70:	e008      	b.n	800cb84 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cb72:	2301      	movs	r3, #1
 800cb74:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800cb78:	e004      	b.n	800cb84 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800cb7a:	bf00      	nop
 800cb7c:	e002      	b.n	800cb84 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800cb7e:	bf00      	nop
 800cb80:	e000      	b.n	800cb84 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800cb82:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cb84:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d10b      	bne.n	800cba4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cb8c:	4bb9      	ldr	r3, [pc, #740]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cb8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb90:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800cb94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cb98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb9c:	4ab5      	ldr	r2, [pc, #724]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cb9e:	430b      	orrs	r3, r1
 800cba0:	6553      	str	r3, [r2, #84]	; 0x54
 800cba2:	e003      	b.n	800cbac <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cba4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cba8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800cbac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800cbb8:	65bb      	str	r3, [r7, #88]	; 0x58
 800cbba:	2300      	movs	r3, #0
 800cbbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cbbe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800cbc2:	460b      	mov	r3, r1
 800cbc4:	4313      	orrs	r3, r2
 800cbc6:	d009      	beq.n	800cbdc <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800cbc8:	4baa      	ldr	r3, [pc, #680]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cbca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbcc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cbd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cbd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cbd6:	4aa7      	ldr	r2, [pc, #668]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cbd8:	430b      	orrs	r3, r1
 800cbda:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800cbdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800cbe8:	653b      	str	r3, [r7, #80]	; 0x50
 800cbea:	2300      	movs	r3, #0
 800cbec:	657b      	str	r3, [r7, #84]	; 0x54
 800cbee:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800cbf2:	460b      	mov	r3, r1
 800cbf4:	4313      	orrs	r3, r2
 800cbf6:	d009      	beq.n	800cc0c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800cbf8:	4b9e      	ldr	r3, [pc, #632]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cbfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbfc:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800cc00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cc04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc06:	4a9b      	ldr	r2, [pc, #620]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cc08:	430b      	orrs	r3, r1
 800cc0a:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800cc0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc14:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800cc18:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc1e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800cc22:	460b      	mov	r3, r1
 800cc24:	4313      	orrs	r3, r2
 800cc26:	d009      	beq.n	800cc3c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800cc28:	4b92      	ldr	r3, [pc, #584]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cc2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc2c:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 800cc30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cc34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc36:	4a8f      	ldr	r2, [pc, #572]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cc38:	430b      	orrs	r3, r1
 800cc3a:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800cc3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cc40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc44:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800cc48:	643b      	str	r3, [r7, #64]	; 0x40
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	647b      	str	r3, [r7, #68]	; 0x44
 800cc4e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800cc52:	460b      	mov	r3, r1
 800cc54:	4313      	orrs	r3, r2
 800cc56:	d00e      	beq.n	800cc76 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cc58:	4b86      	ldr	r3, [pc, #536]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cc5a:	691b      	ldr	r3, [r3, #16]
 800cc5c:	4a85      	ldr	r2, [pc, #532]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cc5e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cc62:	6113      	str	r3, [r2, #16]
 800cc64:	4b83      	ldr	r3, [pc, #524]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cc66:	6919      	ldr	r1, [r3, #16]
 800cc68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cc6c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800cc70:	4a80      	ldr	r2, [pc, #512]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cc72:	430b      	orrs	r3, r1
 800cc74:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800cc76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cc7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc7e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800cc82:	63bb      	str	r3, [r7, #56]	; 0x38
 800cc84:	2300      	movs	r3, #0
 800cc86:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc88:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800cc8c:	460b      	mov	r3, r1
 800cc8e:	4313      	orrs	r3, r2
 800cc90:	d009      	beq.n	800cca6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800cc92:	4b78      	ldr	r3, [pc, #480]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cc94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc96:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800cc9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cc9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cca0:	4a74      	ldr	r2, [pc, #464]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cca2:	430b      	orrs	r3, r1
 800cca4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800cca6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ccaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccae:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800ccb2:	633b      	str	r3, [r7, #48]	; 0x30
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	637b      	str	r3, [r7, #52]	; 0x34
 800ccb8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800ccbc:	460b      	mov	r3, r1
 800ccbe:	4313      	orrs	r3, r2
 800ccc0:	d00a      	beq.n	800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ccc2:	4b6c      	ldr	r3, [pc, #432]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ccc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccc6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800ccca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ccce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ccd2:	4a68      	ldr	r2, [pc, #416]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ccd4:	430b      	orrs	r3, r1
 800ccd6:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ccd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ccdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce0:	2100      	movs	r1, #0
 800cce2:	62b9      	str	r1, [r7, #40]	; 0x28
 800cce4:	f003 0301 	and.w	r3, r3, #1
 800cce8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ccea:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800ccee:	460b      	mov	r3, r1
 800ccf0:	4313      	orrs	r3, r2
 800ccf2:	d011      	beq.n	800cd18 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ccf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ccf8:	3308      	adds	r3, #8
 800ccfa:	2100      	movs	r1, #0
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f000 fb79 	bl	800d3f4 <RCCEx_PLL2_Config>
 800cd02:	4603      	mov	r3, r0
 800cd04:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800cd08:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d003      	beq.n	800cd18 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd10:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cd14:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800cd18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd20:	2100      	movs	r1, #0
 800cd22:	6239      	str	r1, [r7, #32]
 800cd24:	f003 0302 	and.w	r3, r3, #2
 800cd28:	627b      	str	r3, [r7, #36]	; 0x24
 800cd2a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800cd2e:	460b      	mov	r3, r1
 800cd30:	4313      	orrs	r3, r2
 800cd32:	d011      	beq.n	800cd58 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cd34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cd38:	3308      	adds	r3, #8
 800cd3a:	2101      	movs	r1, #1
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f000 fb59 	bl	800d3f4 <RCCEx_PLL2_Config>
 800cd42:	4603      	mov	r3, r0
 800cd44:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800cd48:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d003      	beq.n	800cd58 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd50:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cd54:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800cd58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cd5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd60:	2100      	movs	r1, #0
 800cd62:	61b9      	str	r1, [r7, #24]
 800cd64:	f003 0304 	and.w	r3, r3, #4
 800cd68:	61fb      	str	r3, [r7, #28]
 800cd6a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800cd6e:	460b      	mov	r3, r1
 800cd70:	4313      	orrs	r3, r2
 800cd72:	d011      	beq.n	800cd98 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cd74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cd78:	3308      	adds	r3, #8
 800cd7a:	2102      	movs	r1, #2
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f000 fb39 	bl	800d3f4 <RCCEx_PLL2_Config>
 800cd82:	4603      	mov	r3, r0
 800cd84:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800cd88:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d003      	beq.n	800cd98 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd90:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cd94:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800cd98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda0:	2100      	movs	r1, #0
 800cda2:	6139      	str	r1, [r7, #16]
 800cda4:	f003 0308 	and.w	r3, r3, #8
 800cda8:	617b      	str	r3, [r7, #20]
 800cdaa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800cdae:	460b      	mov	r3, r1
 800cdb0:	4313      	orrs	r3, r2
 800cdb2:	d011      	beq.n	800cdd8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cdb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cdb8:	3328      	adds	r3, #40	; 0x28
 800cdba:	2100      	movs	r1, #0
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f000 fbcb 	bl	800d558 <RCCEx_PLL3_Config>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800cdc8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d003      	beq.n	800cdd8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdd0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cdd4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800cdd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cde0:	2100      	movs	r1, #0
 800cde2:	60b9      	str	r1, [r7, #8]
 800cde4:	f003 0310 	and.w	r3, r3, #16
 800cde8:	60fb      	str	r3, [r7, #12]
 800cdea:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800cdee:	460b      	mov	r3, r1
 800cdf0:	4313      	orrs	r3, r2
 800cdf2:	d011      	beq.n	800ce18 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cdf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cdf8:	3328      	adds	r3, #40	; 0x28
 800cdfa:	2101      	movs	r1, #1
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	f000 fbab 	bl	800d558 <RCCEx_PLL3_Config>
 800ce02:	4603      	mov	r3, r0
 800ce04:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800ce08:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d003      	beq.n	800ce18 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce10:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ce14:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ce18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ce1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce20:	2100      	movs	r1, #0
 800ce22:	6039      	str	r1, [r7, #0]
 800ce24:	f003 0320 	and.w	r3, r3, #32
 800ce28:	607b      	str	r3, [r7, #4]
 800ce2a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ce2e:	460b      	mov	r3, r1
 800ce30:	4313      	orrs	r3, r2
 800ce32:	d011      	beq.n	800ce58 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ce34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ce38:	3328      	adds	r3, #40	; 0x28
 800ce3a:	2102      	movs	r1, #2
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f000 fb8b 	bl	800d558 <RCCEx_PLL3_Config>
 800ce42:	4603      	mov	r3, r0
 800ce44:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800ce48:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d003      	beq.n	800ce58 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce50:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ce54:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 800ce58:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d101      	bne.n	800ce64 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800ce60:	2300      	movs	r3, #0
 800ce62:	e000      	b.n	800ce66 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800ce64:	2301      	movs	r3, #1
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ce72:	bf00      	nop
 800ce74:	58024400 	.word	0x58024400

0800ce78 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800ce7c:	f7fe fde2 	bl	800ba44 <HAL_RCC_GetHCLKFreq>
 800ce80:	4602      	mov	r2, r0
 800ce82:	4b06      	ldr	r3, [pc, #24]	; (800ce9c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ce84:	6a1b      	ldr	r3, [r3, #32]
 800ce86:	091b      	lsrs	r3, r3, #4
 800ce88:	f003 0307 	and.w	r3, r3, #7
 800ce8c:	4904      	ldr	r1, [pc, #16]	; (800cea0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ce8e:	5ccb      	ldrb	r3, [r1, r3]
 800ce90:	f003 031f 	and.w	r3, r3, #31
 800ce94:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800ce98:	4618      	mov	r0, r3
 800ce9a:	bd80      	pop	{r7, pc}
 800ce9c:	58024400 	.word	0x58024400
 800cea0:	08019908 	.word	0x08019908

0800cea4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800cea4:	b480      	push	{r7}
 800cea6:	b089      	sub	sp, #36	; 0x24
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ceac:	4ba1      	ldr	r3, [pc, #644]	; (800d134 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ceae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceb0:	f003 0303 	and.w	r3, r3, #3
 800ceb4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ceb6:	4b9f      	ldr	r3, [pc, #636]	; (800d134 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ceb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceba:	0b1b      	lsrs	r3, r3, #12
 800cebc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cec0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cec2:	4b9c      	ldr	r3, [pc, #624]	; (800d134 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cec6:	091b      	lsrs	r3, r3, #4
 800cec8:	f003 0301 	and.w	r3, r3, #1
 800cecc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800cece:	4b99      	ldr	r3, [pc, #612]	; (800d134 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ced0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ced2:	08db      	lsrs	r3, r3, #3
 800ced4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ced8:	693a      	ldr	r2, [r7, #16]
 800ceda:	fb02 f303 	mul.w	r3, r2, r3
 800cede:	ee07 3a90 	vmov	s15, r3
 800cee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cee6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	f000 8111 	beq.w	800d114 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800cef2:	69bb      	ldr	r3, [r7, #24]
 800cef4:	2b02      	cmp	r3, #2
 800cef6:	f000 8083 	beq.w	800d000 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800cefa:	69bb      	ldr	r3, [r7, #24]
 800cefc:	2b02      	cmp	r3, #2
 800cefe:	f200 80a1 	bhi.w	800d044 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cf02:	69bb      	ldr	r3, [r7, #24]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d003      	beq.n	800cf10 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cf08:	69bb      	ldr	r3, [r7, #24]
 800cf0a:	2b01      	cmp	r3, #1
 800cf0c:	d056      	beq.n	800cfbc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cf0e:	e099      	b.n	800d044 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf10:	4b88      	ldr	r3, [pc, #544]	; (800d134 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	f003 0320 	and.w	r3, r3, #32
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d02d      	beq.n	800cf78 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf1c:	4b85      	ldr	r3, [pc, #532]	; (800d134 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	08db      	lsrs	r3, r3, #3
 800cf22:	f003 0303 	and.w	r3, r3, #3
 800cf26:	4a84      	ldr	r2, [pc, #528]	; (800d138 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cf28:	fa22 f303 	lsr.w	r3, r2, r3
 800cf2c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	ee07 3a90 	vmov	s15, r3
 800cf34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf38:	697b      	ldr	r3, [r7, #20]
 800cf3a:	ee07 3a90 	vmov	s15, r3
 800cf3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf46:	4b7b      	ldr	r3, [pc, #492]	; (800d134 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf4e:	ee07 3a90 	vmov	s15, r3
 800cf52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf56:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf5a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d13c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cf5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf72:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cf76:	e087      	b.n	800d088 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	ee07 3a90 	vmov	s15, r3
 800cf7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf82:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d140 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800cf86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf8a:	4b6a      	ldr	r3, [pc, #424]	; (800d134 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf92:	ee07 3a90 	vmov	s15, r3
 800cf96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf9e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d13c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cfa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cfba:	e065      	b.n	800d088 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cfbc:	697b      	ldr	r3, [r7, #20]
 800cfbe:	ee07 3a90 	vmov	s15, r3
 800cfc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfc6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d144 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cfca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfce:	4b59      	ldr	r3, [pc, #356]	; (800d134 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cfd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfd6:	ee07 3a90 	vmov	s15, r3
 800cfda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfde:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfe2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d13c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cfe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cffa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cffe:	e043      	b.n	800d088 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	ee07 3a90 	vmov	s15, r3
 800d006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d00a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d148 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d00e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d012:	4b48      	ldr	r3, [pc, #288]	; (800d134 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d01a:	ee07 3a90 	vmov	s15, r3
 800d01e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d022:	ed97 6a03 	vldr	s12, [r7, #12]
 800d026:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d13c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d02a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d02e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d032:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d03a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d03e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d042:	e021      	b.n	800d088 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d044:	697b      	ldr	r3, [r7, #20]
 800d046:	ee07 3a90 	vmov	s15, r3
 800d04a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d04e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d144 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d056:	4b37      	ldr	r3, [pc, #220]	; (800d134 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d05a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d05e:	ee07 3a90 	vmov	s15, r3
 800d062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d066:	ed97 6a03 	vldr	s12, [r7, #12]
 800d06a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d13c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d06e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d076:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d07a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d07e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d082:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d086:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d088:	4b2a      	ldr	r3, [pc, #168]	; (800d134 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d08a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d08c:	0a5b      	lsrs	r3, r3, #9
 800d08e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d092:	ee07 3a90 	vmov	s15, r3
 800d096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d09a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d09e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d0a2:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0ae:	ee17 2a90 	vmov	r2, s15
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d0b6:	4b1f      	ldr	r3, [pc, #124]	; (800d134 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ba:	0c1b      	lsrs	r3, r3, #16
 800d0bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0c0:	ee07 3a90 	vmov	s15, r3
 800d0c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d0d0:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0dc:	ee17 2a90 	vmov	r2, s15
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d0e4:	4b13      	ldr	r3, [pc, #76]	; (800d134 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0e8:	0e1b      	lsrs	r3, r3, #24
 800d0ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0ee:	ee07 3a90 	vmov	s15, r3
 800d0f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d0fe:	edd7 6a07 	vldr	s13, [r7, #28]
 800d102:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d106:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d10a:	ee17 2a90 	vmov	r2, s15
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d112:	e008      	b.n	800d126 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2200      	movs	r2, #0
 800d118:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2200      	movs	r2, #0
 800d11e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2200      	movs	r2, #0
 800d124:	609a      	str	r2, [r3, #8]
}
 800d126:	bf00      	nop
 800d128:	3724      	adds	r7, #36	; 0x24
 800d12a:	46bd      	mov	sp, r7
 800d12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d130:	4770      	bx	lr
 800d132:	bf00      	nop
 800d134:	58024400 	.word	0x58024400
 800d138:	03d09000 	.word	0x03d09000
 800d13c:	46000000 	.word	0x46000000
 800d140:	4c742400 	.word	0x4c742400
 800d144:	4a742400 	.word	0x4a742400
 800d148:	4bb71b00 	.word	0x4bb71b00

0800d14c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d14c:	b480      	push	{r7}
 800d14e:	b089      	sub	sp, #36	; 0x24
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d154:	4ba1      	ldr	r3, [pc, #644]	; (800d3dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d158:	f003 0303 	and.w	r3, r3, #3
 800d15c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d15e:	4b9f      	ldr	r3, [pc, #636]	; (800d3dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d162:	0d1b      	lsrs	r3, r3, #20
 800d164:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d168:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d16a:	4b9c      	ldr	r3, [pc, #624]	; (800d3dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d16e:	0a1b      	lsrs	r3, r3, #8
 800d170:	f003 0301 	and.w	r3, r3, #1
 800d174:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d176:	4b99      	ldr	r3, [pc, #612]	; (800d3dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d17a:	08db      	lsrs	r3, r3, #3
 800d17c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d180:	693a      	ldr	r2, [r7, #16]
 800d182:	fb02 f303 	mul.w	r3, r2, r3
 800d186:	ee07 3a90 	vmov	s15, r3
 800d18a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d18e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	2b00      	cmp	r3, #0
 800d196:	f000 8111 	beq.w	800d3bc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d19a:	69bb      	ldr	r3, [r7, #24]
 800d19c:	2b02      	cmp	r3, #2
 800d19e:	f000 8083 	beq.w	800d2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d1a2:	69bb      	ldr	r3, [r7, #24]
 800d1a4:	2b02      	cmp	r3, #2
 800d1a6:	f200 80a1 	bhi.w	800d2ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d1aa:	69bb      	ldr	r3, [r7, #24]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d003      	beq.n	800d1b8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d1b0:	69bb      	ldr	r3, [r7, #24]
 800d1b2:	2b01      	cmp	r3, #1
 800d1b4:	d056      	beq.n	800d264 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d1b6:	e099      	b.n	800d2ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d1b8:	4b88      	ldr	r3, [pc, #544]	; (800d3dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	f003 0320 	and.w	r3, r3, #32
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d02d      	beq.n	800d220 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d1c4:	4b85      	ldr	r3, [pc, #532]	; (800d3dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	08db      	lsrs	r3, r3, #3
 800d1ca:	f003 0303 	and.w	r3, r3, #3
 800d1ce:	4a84      	ldr	r2, [pc, #528]	; (800d3e0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d1d0:	fa22 f303 	lsr.w	r3, r2, r3
 800d1d4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d1d6:	68bb      	ldr	r3, [r7, #8]
 800d1d8:	ee07 3a90 	vmov	s15, r3
 800d1dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1e0:	697b      	ldr	r3, [r7, #20]
 800d1e2:	ee07 3a90 	vmov	s15, r3
 800d1e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1ee:	4b7b      	ldr	r3, [pc, #492]	; (800d3dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1f6:	ee07 3a90 	vmov	s15, r3
 800d1fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800d202:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d3e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d20a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d20e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d21a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d21e:	e087      	b.n	800d330 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	ee07 3a90 	vmov	s15, r3
 800d226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d22a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d3e8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d22e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d232:	4b6a      	ldr	r3, [pc, #424]	; (800d3dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d23a:	ee07 3a90 	vmov	s15, r3
 800d23e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d242:	ed97 6a03 	vldr	s12, [r7, #12]
 800d246:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d3e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d24a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d24e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d25a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d25e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d262:	e065      	b.n	800d330 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d264:	697b      	ldr	r3, [r7, #20]
 800d266:	ee07 3a90 	vmov	s15, r3
 800d26a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d26e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d3ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d276:	4b59      	ldr	r3, [pc, #356]	; (800d3dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d27a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d27e:	ee07 3a90 	vmov	s15, r3
 800d282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d286:	ed97 6a03 	vldr	s12, [r7, #12]
 800d28a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d3e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d28e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d29a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d29e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d2a6:	e043      	b.n	800d330 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d2a8:	697b      	ldr	r3, [r7, #20]
 800d2aa:	ee07 3a90 	vmov	s15, r3
 800d2ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2b2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d3f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d2b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2ba:	4b48      	ldr	r3, [pc, #288]	; (800d3dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2c2:	ee07 3a90 	vmov	s15, r3
 800d2c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2ce:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d3e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d2d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d2ea:	e021      	b.n	800d330 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	ee07 3a90 	vmov	s15, r3
 800d2f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2f6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d3ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d2fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2fe:	4b37      	ldr	r3, [pc, #220]	; (800d3dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d306:	ee07 3a90 	vmov	s15, r3
 800d30a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d30e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d312:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d3e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d31a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d31e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d32a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d32e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d330:	4b2a      	ldr	r3, [pc, #168]	; (800d3dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d334:	0a5b      	lsrs	r3, r3, #9
 800d336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d33a:	ee07 3a90 	vmov	s15, r3
 800d33e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d342:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d346:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d34a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d34e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d352:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d356:	ee17 2a90 	vmov	r2, s15
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d35e:	4b1f      	ldr	r3, [pc, #124]	; (800d3dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d362:	0c1b      	lsrs	r3, r3, #16
 800d364:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d368:	ee07 3a90 	vmov	s15, r3
 800d36c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d370:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d374:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d378:	edd7 6a07 	vldr	s13, [r7, #28]
 800d37c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d380:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d384:	ee17 2a90 	vmov	r2, s15
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d38c:	4b13      	ldr	r3, [pc, #76]	; (800d3dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d38e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d390:	0e1b      	lsrs	r3, r3, #24
 800d392:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d396:	ee07 3a90 	vmov	s15, r3
 800d39a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d39e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d3a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d3a6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d3aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3b2:	ee17 2a90 	vmov	r2, s15
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d3ba:	e008      	b.n	800d3ce <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2200      	movs	r2, #0
 800d3c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	609a      	str	r2, [r3, #8]
}
 800d3ce:	bf00      	nop
 800d3d0:	3724      	adds	r7, #36	; 0x24
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d8:	4770      	bx	lr
 800d3da:	bf00      	nop
 800d3dc:	58024400 	.word	0x58024400
 800d3e0:	03d09000 	.word	0x03d09000
 800d3e4:	46000000 	.word	0x46000000
 800d3e8:	4c742400 	.word	0x4c742400
 800d3ec:	4a742400 	.word	0x4a742400
 800d3f0:	4bb71b00 	.word	0x4bb71b00

0800d3f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b084      	sub	sp, #16
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
 800d3fc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d3fe:	2300      	movs	r3, #0
 800d400:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d402:	4b53      	ldr	r3, [pc, #332]	; (800d550 <RCCEx_PLL2_Config+0x15c>)
 800d404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d406:	f003 0303 	and.w	r3, r3, #3
 800d40a:	2b03      	cmp	r3, #3
 800d40c:	d101      	bne.n	800d412 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d40e:	2301      	movs	r3, #1
 800d410:	e099      	b.n	800d546 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d412:	4b4f      	ldr	r3, [pc, #316]	; (800d550 <RCCEx_PLL2_Config+0x15c>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	4a4e      	ldr	r2, [pc, #312]	; (800d550 <RCCEx_PLL2_Config+0x15c>)
 800d418:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d41c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d41e:	f7f7 f9ab 	bl	8004778 <HAL_GetTick>
 800d422:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d424:	e008      	b.n	800d438 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d426:	f7f7 f9a7 	bl	8004778 <HAL_GetTick>
 800d42a:	4602      	mov	r2, r0
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	1ad3      	subs	r3, r2, r3
 800d430:	2b02      	cmp	r3, #2
 800d432:	d901      	bls.n	800d438 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d434:	2303      	movs	r3, #3
 800d436:	e086      	b.n	800d546 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d438:	4b45      	ldr	r3, [pc, #276]	; (800d550 <RCCEx_PLL2_Config+0x15c>)
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d440:	2b00      	cmp	r3, #0
 800d442:	d1f0      	bne.n	800d426 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d444:	4b42      	ldr	r3, [pc, #264]	; (800d550 <RCCEx_PLL2_Config+0x15c>)
 800d446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d448:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	031b      	lsls	r3, r3, #12
 800d452:	493f      	ldr	r1, [pc, #252]	; (800d550 <RCCEx_PLL2_Config+0x15c>)
 800d454:	4313      	orrs	r3, r2
 800d456:	628b      	str	r3, [r1, #40]	; 0x28
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	685b      	ldr	r3, [r3, #4]
 800d45c:	3b01      	subs	r3, #1
 800d45e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	689b      	ldr	r3, [r3, #8]
 800d466:	3b01      	subs	r3, #1
 800d468:	025b      	lsls	r3, r3, #9
 800d46a:	b29b      	uxth	r3, r3
 800d46c:	431a      	orrs	r2, r3
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	68db      	ldr	r3, [r3, #12]
 800d472:	3b01      	subs	r3, #1
 800d474:	041b      	lsls	r3, r3, #16
 800d476:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d47a:	431a      	orrs	r2, r3
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	691b      	ldr	r3, [r3, #16]
 800d480:	3b01      	subs	r3, #1
 800d482:	061b      	lsls	r3, r3, #24
 800d484:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d488:	4931      	ldr	r1, [pc, #196]	; (800d550 <RCCEx_PLL2_Config+0x15c>)
 800d48a:	4313      	orrs	r3, r2
 800d48c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d48e:	4b30      	ldr	r3, [pc, #192]	; (800d550 <RCCEx_PLL2_Config+0x15c>)
 800d490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d492:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	695b      	ldr	r3, [r3, #20]
 800d49a:	492d      	ldr	r1, [pc, #180]	; (800d550 <RCCEx_PLL2_Config+0x15c>)
 800d49c:	4313      	orrs	r3, r2
 800d49e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d4a0:	4b2b      	ldr	r3, [pc, #172]	; (800d550 <RCCEx_PLL2_Config+0x15c>)
 800d4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4a4:	f023 0220 	bic.w	r2, r3, #32
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	699b      	ldr	r3, [r3, #24]
 800d4ac:	4928      	ldr	r1, [pc, #160]	; (800d550 <RCCEx_PLL2_Config+0x15c>)
 800d4ae:	4313      	orrs	r3, r2
 800d4b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d4b2:	4b27      	ldr	r3, [pc, #156]	; (800d550 <RCCEx_PLL2_Config+0x15c>)
 800d4b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4b6:	4a26      	ldr	r2, [pc, #152]	; (800d550 <RCCEx_PLL2_Config+0x15c>)
 800d4b8:	f023 0310 	bic.w	r3, r3, #16
 800d4bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d4be:	4b24      	ldr	r3, [pc, #144]	; (800d550 <RCCEx_PLL2_Config+0x15c>)
 800d4c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d4c2:	4b24      	ldr	r3, [pc, #144]	; (800d554 <RCCEx_PLL2_Config+0x160>)
 800d4c4:	4013      	ands	r3, r2
 800d4c6:	687a      	ldr	r2, [r7, #4]
 800d4c8:	69d2      	ldr	r2, [r2, #28]
 800d4ca:	00d2      	lsls	r2, r2, #3
 800d4cc:	4920      	ldr	r1, [pc, #128]	; (800d550 <RCCEx_PLL2_Config+0x15c>)
 800d4ce:	4313      	orrs	r3, r2
 800d4d0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d4d2:	4b1f      	ldr	r3, [pc, #124]	; (800d550 <RCCEx_PLL2_Config+0x15c>)
 800d4d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4d6:	4a1e      	ldr	r2, [pc, #120]	; (800d550 <RCCEx_PLL2_Config+0x15c>)
 800d4d8:	f043 0310 	orr.w	r3, r3, #16
 800d4dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d106      	bne.n	800d4f2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d4e4:	4b1a      	ldr	r3, [pc, #104]	; (800d550 <RCCEx_PLL2_Config+0x15c>)
 800d4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4e8:	4a19      	ldr	r2, [pc, #100]	; (800d550 <RCCEx_PLL2_Config+0x15c>)
 800d4ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d4ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d4f0:	e00f      	b.n	800d512 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	2b01      	cmp	r3, #1
 800d4f6:	d106      	bne.n	800d506 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d4f8:	4b15      	ldr	r3, [pc, #84]	; (800d550 <RCCEx_PLL2_Config+0x15c>)
 800d4fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4fc:	4a14      	ldr	r2, [pc, #80]	; (800d550 <RCCEx_PLL2_Config+0x15c>)
 800d4fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d502:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d504:	e005      	b.n	800d512 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d506:	4b12      	ldr	r3, [pc, #72]	; (800d550 <RCCEx_PLL2_Config+0x15c>)
 800d508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d50a:	4a11      	ldr	r2, [pc, #68]	; (800d550 <RCCEx_PLL2_Config+0x15c>)
 800d50c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d510:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d512:	4b0f      	ldr	r3, [pc, #60]	; (800d550 <RCCEx_PLL2_Config+0x15c>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	4a0e      	ldr	r2, [pc, #56]	; (800d550 <RCCEx_PLL2_Config+0x15c>)
 800d518:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d51c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d51e:	f7f7 f92b 	bl	8004778 <HAL_GetTick>
 800d522:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d524:	e008      	b.n	800d538 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d526:	f7f7 f927 	bl	8004778 <HAL_GetTick>
 800d52a:	4602      	mov	r2, r0
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	1ad3      	subs	r3, r2, r3
 800d530:	2b02      	cmp	r3, #2
 800d532:	d901      	bls.n	800d538 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d534:	2303      	movs	r3, #3
 800d536:	e006      	b.n	800d546 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d538:	4b05      	ldr	r3, [pc, #20]	; (800d550 <RCCEx_PLL2_Config+0x15c>)
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d540:	2b00      	cmp	r3, #0
 800d542:	d0f0      	beq.n	800d526 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d544:	7bfb      	ldrb	r3, [r7, #15]
}
 800d546:	4618      	mov	r0, r3
 800d548:	3710      	adds	r7, #16
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bd80      	pop	{r7, pc}
 800d54e:	bf00      	nop
 800d550:	58024400 	.word	0x58024400
 800d554:	ffff0007 	.word	0xffff0007

0800d558 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b084      	sub	sp, #16
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
 800d560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d562:	2300      	movs	r3, #0
 800d564:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d566:	4b53      	ldr	r3, [pc, #332]	; (800d6b4 <RCCEx_PLL3_Config+0x15c>)
 800d568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d56a:	f003 0303 	and.w	r3, r3, #3
 800d56e:	2b03      	cmp	r3, #3
 800d570:	d101      	bne.n	800d576 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d572:	2301      	movs	r3, #1
 800d574:	e099      	b.n	800d6aa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d576:	4b4f      	ldr	r3, [pc, #316]	; (800d6b4 <RCCEx_PLL3_Config+0x15c>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	4a4e      	ldr	r2, [pc, #312]	; (800d6b4 <RCCEx_PLL3_Config+0x15c>)
 800d57c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d580:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d582:	f7f7 f8f9 	bl	8004778 <HAL_GetTick>
 800d586:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d588:	e008      	b.n	800d59c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d58a:	f7f7 f8f5 	bl	8004778 <HAL_GetTick>
 800d58e:	4602      	mov	r2, r0
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	1ad3      	subs	r3, r2, r3
 800d594:	2b02      	cmp	r3, #2
 800d596:	d901      	bls.n	800d59c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d598:	2303      	movs	r3, #3
 800d59a:	e086      	b.n	800d6aa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d59c:	4b45      	ldr	r3, [pc, #276]	; (800d6b4 <RCCEx_PLL3_Config+0x15c>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d1f0      	bne.n	800d58a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d5a8:	4b42      	ldr	r3, [pc, #264]	; (800d6b4 <RCCEx_PLL3_Config+0x15c>)
 800d5aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5ac:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	051b      	lsls	r3, r3, #20
 800d5b6:	493f      	ldr	r1, [pc, #252]	; (800d6b4 <RCCEx_PLL3_Config+0x15c>)
 800d5b8:	4313      	orrs	r3, r2
 800d5ba:	628b      	str	r3, [r1, #40]	; 0x28
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	685b      	ldr	r3, [r3, #4]
 800d5c0:	3b01      	subs	r3, #1
 800d5c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	689b      	ldr	r3, [r3, #8]
 800d5ca:	3b01      	subs	r3, #1
 800d5cc:	025b      	lsls	r3, r3, #9
 800d5ce:	b29b      	uxth	r3, r3
 800d5d0:	431a      	orrs	r2, r3
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	68db      	ldr	r3, [r3, #12]
 800d5d6:	3b01      	subs	r3, #1
 800d5d8:	041b      	lsls	r3, r3, #16
 800d5da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d5de:	431a      	orrs	r2, r3
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	691b      	ldr	r3, [r3, #16]
 800d5e4:	3b01      	subs	r3, #1
 800d5e6:	061b      	lsls	r3, r3, #24
 800d5e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d5ec:	4931      	ldr	r1, [pc, #196]	; (800d6b4 <RCCEx_PLL3_Config+0x15c>)
 800d5ee:	4313      	orrs	r3, r2
 800d5f0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d5f2:	4b30      	ldr	r3, [pc, #192]	; (800d6b4 <RCCEx_PLL3_Config+0x15c>)
 800d5f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	695b      	ldr	r3, [r3, #20]
 800d5fe:	492d      	ldr	r1, [pc, #180]	; (800d6b4 <RCCEx_PLL3_Config+0x15c>)
 800d600:	4313      	orrs	r3, r2
 800d602:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d604:	4b2b      	ldr	r3, [pc, #172]	; (800d6b4 <RCCEx_PLL3_Config+0x15c>)
 800d606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d608:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	699b      	ldr	r3, [r3, #24]
 800d610:	4928      	ldr	r1, [pc, #160]	; (800d6b4 <RCCEx_PLL3_Config+0x15c>)
 800d612:	4313      	orrs	r3, r2
 800d614:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d616:	4b27      	ldr	r3, [pc, #156]	; (800d6b4 <RCCEx_PLL3_Config+0x15c>)
 800d618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d61a:	4a26      	ldr	r2, [pc, #152]	; (800d6b4 <RCCEx_PLL3_Config+0x15c>)
 800d61c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d620:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d622:	4b24      	ldr	r3, [pc, #144]	; (800d6b4 <RCCEx_PLL3_Config+0x15c>)
 800d624:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d626:	4b24      	ldr	r3, [pc, #144]	; (800d6b8 <RCCEx_PLL3_Config+0x160>)
 800d628:	4013      	ands	r3, r2
 800d62a:	687a      	ldr	r2, [r7, #4]
 800d62c:	69d2      	ldr	r2, [r2, #28]
 800d62e:	00d2      	lsls	r2, r2, #3
 800d630:	4920      	ldr	r1, [pc, #128]	; (800d6b4 <RCCEx_PLL3_Config+0x15c>)
 800d632:	4313      	orrs	r3, r2
 800d634:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d636:	4b1f      	ldr	r3, [pc, #124]	; (800d6b4 <RCCEx_PLL3_Config+0x15c>)
 800d638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d63a:	4a1e      	ldr	r2, [pc, #120]	; (800d6b4 <RCCEx_PLL3_Config+0x15c>)
 800d63c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d640:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d106      	bne.n	800d656 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d648:	4b1a      	ldr	r3, [pc, #104]	; (800d6b4 <RCCEx_PLL3_Config+0x15c>)
 800d64a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d64c:	4a19      	ldr	r2, [pc, #100]	; (800d6b4 <RCCEx_PLL3_Config+0x15c>)
 800d64e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d652:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d654:	e00f      	b.n	800d676 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	2b01      	cmp	r3, #1
 800d65a:	d106      	bne.n	800d66a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d65c:	4b15      	ldr	r3, [pc, #84]	; (800d6b4 <RCCEx_PLL3_Config+0x15c>)
 800d65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d660:	4a14      	ldr	r2, [pc, #80]	; (800d6b4 <RCCEx_PLL3_Config+0x15c>)
 800d662:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d666:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d668:	e005      	b.n	800d676 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d66a:	4b12      	ldr	r3, [pc, #72]	; (800d6b4 <RCCEx_PLL3_Config+0x15c>)
 800d66c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d66e:	4a11      	ldr	r2, [pc, #68]	; (800d6b4 <RCCEx_PLL3_Config+0x15c>)
 800d670:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d674:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d676:	4b0f      	ldr	r3, [pc, #60]	; (800d6b4 <RCCEx_PLL3_Config+0x15c>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	4a0e      	ldr	r2, [pc, #56]	; (800d6b4 <RCCEx_PLL3_Config+0x15c>)
 800d67c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d680:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d682:	f7f7 f879 	bl	8004778 <HAL_GetTick>
 800d686:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d688:	e008      	b.n	800d69c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d68a:	f7f7 f875 	bl	8004778 <HAL_GetTick>
 800d68e:	4602      	mov	r2, r0
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	1ad3      	subs	r3, r2, r3
 800d694:	2b02      	cmp	r3, #2
 800d696:	d901      	bls.n	800d69c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d698:	2303      	movs	r3, #3
 800d69a:	e006      	b.n	800d6aa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d69c:	4b05      	ldr	r3, [pc, #20]	; (800d6b4 <RCCEx_PLL3_Config+0x15c>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d0f0      	beq.n	800d68a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d6a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	3710      	adds	r7, #16
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bd80      	pop	{r7, pc}
 800d6b2:	bf00      	nop
 800d6b4:	58024400 	.word	0x58024400
 800d6b8:	ffff0007 	.word	0xffff0007

0800d6bc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b084      	sub	sp, #16
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d6c4:	2301      	movs	r3, #1
 800d6c6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d074      	beq.n	800d7b8 <HAL_RTC_Init+0xfc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800d6d4:	b2db      	uxtb	r3, r3
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d106      	bne.n	800d6e8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	2200      	movs	r2, #0
 800d6de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f7f5 ff50 	bl	8003588 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2202      	movs	r2, #2
 800d6ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	68db      	ldr	r3, [r3, #12]
 800d6f6:	f003 0310 	and.w	r3, r3, #16
 800d6fa:	2b10      	cmp	r3, #16
 800d6fc:	d053      	beq.n	800d7a6 <HAL_RTC_Init+0xea>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	22ca      	movs	r2, #202	; 0xca
 800d704:	625a      	str	r2, [r3, #36]	; 0x24
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	2253      	movs	r2, #83	; 0x53
 800d70c:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	f000 f87e 	bl	800d810 <RTC_EnterInitMode>
 800d714:	4603      	mov	r3, r0
 800d716:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d718:	7bfb      	ldrb	r3, [r7, #15]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d124      	bne.n	800d768 <HAL_RTC_Init+0xac>
      {
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	6999      	ldr	r1, [r3, #24]
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681a      	ldr	r2, [r3, #0]
 800d728:	4b26      	ldr	r3, [pc, #152]	; (800d7c4 <HAL_RTC_Init+0x108>)
 800d72a:	400b      	ands	r3, r1
 800d72c:	6193      	str	r3, [r2, #24]
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	6999      	ldr	r1, [r3, #24]
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	685a      	ldr	r2, [r3, #4]
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	691b      	ldr	r3, [r3, #16]
 800d73c:	431a      	orrs	r2, r3
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	699b      	ldr	r3, [r3, #24]
 800d742:	431a      	orrs	r2, r3
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	430a      	orrs	r2, r1
 800d74a:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	689b      	ldr	r3, [r3, #8]
 800d750:	0419      	lsls	r1, r3, #16
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	68da      	ldr	r2, [r3, #12]
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	430a      	orrs	r2, r1
 800d75c:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f000 f88c 	bl	800d87c <RTC_ExitInitMode>
 800d764:	4603      	mov	r3, r0
 800d766:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800d768:	7bfb      	ldrb	r3, [r7, #15]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d116      	bne.n	800d79c <HAL_RTC_Init+0xe0>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	699a      	ldr	r2, [r3, #24]
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800d77c:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	6999      	ldr	r1, [r3, #24]
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	6a1a      	ldr	r2, [r3, #32]
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	69db      	ldr	r3, [r3, #28]
 800d78c:	431a      	orrs	r2, r3
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	695b      	ldr	r3, [r3, #20]
 800d792:	431a      	orrs	r2, r3
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	430a      	orrs	r2, r1
 800d79a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	22ff      	movs	r2, #255	; 0xff
 800d7a2:	625a      	str	r2, [r3, #36]	; 0x24
 800d7a4:	e001      	b.n	800d7aa <HAL_RTC_Init+0xee>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d7aa:	7bfb      	ldrb	r3, [r7, #15]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d103      	bne.n	800d7b8 <HAL_RTC_Init+0xfc>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2201      	movs	r2, #1
 800d7b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  /* return status */
  return status;
 800d7b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	3710      	adds	r7, #16
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}
 800d7c2:	bf00      	nop
 800d7c4:	fb8fffbf 	.word	0xfb8fffbf

0800d7c8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b084      	sub	sp, #16
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	4a0d      	ldr	r2, [pc, #52]	; (800d80c <HAL_RTC_WaitForSynchro+0x44>)
 800d7d6:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800d7d8:	f7f6 ffce 	bl	8004778 <HAL_GetTick>
 800d7dc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800d7de:	e009      	b.n	800d7f4 <HAL_RTC_WaitForSynchro+0x2c>
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d7e0:	f7f6 ffca 	bl	8004778 <HAL_GetTick>
 800d7e4:	4602      	mov	r2, r0
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	1ad3      	subs	r3, r2, r3
 800d7ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d7ee:	d901      	bls.n	800d7f4 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800d7f0:	2303      	movs	r3, #3
 800d7f2:	e007      	b.n	800d804 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	68db      	ldr	r3, [r3, #12]
 800d7fa:	f003 0320 	and.w	r3, r3, #32
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d0ee      	beq.n	800d7e0 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800d802:	2300      	movs	r3, #0
}
 800d804:	4618      	mov	r0, r3
 800d806:	3710      	adds	r7, #16
 800d808:	46bd      	mov	sp, r7
 800d80a:	bd80      	pop	{r7, pc}
 800d80c:	0001005f 	.word	0x0001005f

0800d810 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b084      	sub	sp, #16
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d818:	2300      	movs	r3, #0
 800d81a:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(TAMP)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	68db      	ldr	r3, [r3, #12]
 800d822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d826:	2b00      	cmp	r3, #0
 800d828:	d123      	bne.n	800d872 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	68da      	ldr	r2, [r3, #12]
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d838:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d83a:	f7f6 ff9d 	bl	8004778 <HAL_GetTick>
 800d83e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d840:	e00d      	b.n	800d85e <RTC_EnterInitMode+0x4e>

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d842:	f7f6 ff99 	bl	8004778 <HAL_GetTick>
 800d846:	4602      	mov	r2, r0
 800d848:	68bb      	ldr	r3, [r7, #8]
 800d84a:	1ad3      	subs	r3, r2, r3
 800d84c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d850:	d905      	bls.n	800d85e <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800d852:	2303      	movs	r3, #3
 800d854:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2203      	movs	r2, #3
 800d85a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	68db      	ldr	r3, [r3, #12]
 800d864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d102      	bne.n	800d872 <RTC_EnterInitMode+0x62>
 800d86c:	7bfb      	ldrb	r3, [r7, #15]
 800d86e:	2b03      	cmp	r3, #3
 800d870:	d1e7      	bne.n	800d842 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 800d872:	7bfb      	ldrb	r3, [r7, #15]
}
 800d874:	4618      	mov	r0, r3
 800d876:	3710      	adds	r7, #16
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}

0800d87c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b084      	sub	sp, #16
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d884:	2300      	movs	r3, #0
 800d886:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800d888:	4b1a      	ldr	r3, [pc, #104]	; (800d8f4 <RTC_ExitInitMode+0x78>)
 800d88a:	68db      	ldr	r3, [r3, #12]
 800d88c:	4a19      	ldr	r2, [pc, #100]	; (800d8f4 <RTC_ExitInitMode+0x78>)
 800d88e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d892:	60d3      	str	r3, [r2, #12]
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800d894:	4b17      	ldr	r3, [pc, #92]	; (800d8f4 <RTC_ExitInitMode+0x78>)
 800d896:	699b      	ldr	r3, [r3, #24]
 800d898:	f003 0320 	and.w	r3, r3, #32
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d10c      	bne.n	800d8ba <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f7ff ff91 	bl	800d7c8 <HAL_RTC_WaitForSynchro>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d01e      	beq.n	800d8ea <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2203      	movs	r2, #3
 800d8b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800d8b4:	2303      	movs	r3, #3
 800d8b6:	73fb      	strb	r3, [r7, #15]
 800d8b8:	e017      	b.n	800d8ea <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d8ba:	4b0e      	ldr	r3, [pc, #56]	; (800d8f4 <RTC_ExitInitMode+0x78>)
 800d8bc:	699b      	ldr	r3, [r3, #24]
 800d8be:	4a0d      	ldr	r2, [pc, #52]	; (800d8f4 <RTC_ExitInitMode+0x78>)
 800d8c0:	f023 0320 	bic.w	r3, r3, #32
 800d8c4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d8c6:	6878      	ldr	r0, [r7, #4]
 800d8c8:	f7ff ff7e 	bl	800d7c8 <HAL_RTC_WaitForSynchro>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d005      	beq.n	800d8de <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2203      	movs	r2, #3
 800d8d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800d8da:	2303      	movs	r3, #3
 800d8dc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d8de:	4b05      	ldr	r3, [pc, #20]	; (800d8f4 <RTC_ExitInitMode+0x78>)
 800d8e0:	699b      	ldr	r3, [r3, #24]
 800d8e2:	4a04      	ldr	r2, [pc, #16]	; (800d8f4 <RTC_ExitInitMode+0x78>)
 800d8e4:	f043 0320 	orr.w	r3, r3, #32
 800d8e8:	6193      	str	r3, [r2, #24]
  }

  return status;
 800d8ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	3710      	adds	r7, #16
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd80      	pop	{r7, pc}
 800d8f4:	58004000 	.word	0x58004000

0800d8f8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b082      	sub	sp, #8
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
 800d900:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d101      	bne.n	800d90c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800d908:	2301      	movs	r3, #1
 800d90a:	e02b      	b.n	800d964 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d912:	b2db      	uxtb	r3, r3
 800d914:	2b00      	cmp	r3, #0
 800d916:	d106      	bne.n	800d926 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2200      	movs	r2, #0
 800d91c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	f7f3 fb15 	bl	8000f50 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2202      	movs	r2, #2
 800d92a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681a      	ldr	r2, [r3, #0]
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	3304      	adds	r3, #4
 800d936:	4619      	mov	r1, r3
 800d938:	4610      	mov	r0, r2
 800d93a:	f001 ffdf 	bl	800f8fc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6818      	ldr	r0, [r3, #0]
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	685b      	ldr	r3, [r3, #4]
 800d946:	461a      	mov	r2, r3
 800d948:	6839      	ldr	r1, [r7, #0]
 800d94a:	f002 f833 	bl	800f9b4 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800d94e:	4b07      	ldr	r3, [pc, #28]	; (800d96c <HAL_SDRAM_Init+0x74>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	4a06      	ldr	r2, [pc, #24]	; (800d96c <HAL_SDRAM_Init+0x74>)
 800d954:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d958:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	2201      	movs	r2, #1
 800d95e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d962:	2300      	movs	r3, #0
}
 800d964:	4618      	mov	r0, r3
 800d966:	3708      	adds	r7, #8
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}
 800d96c:	52004000 	.word	0x52004000

0800d970 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b086      	sub	sp, #24
 800d974:	af00      	add	r7, sp, #0
 800d976:	60f8      	str	r0, [r7, #12]
 800d978:	60b9      	str	r1, [r7, #8]
 800d97a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d982:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800d984:	7dfb      	ldrb	r3, [r7, #23]
 800d986:	2b02      	cmp	r3, #2
 800d988:	d101      	bne.n	800d98e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800d98a:	2302      	movs	r3, #2
 800d98c:	e021      	b.n	800d9d2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800d98e:	7dfb      	ldrb	r3, [r7, #23]
 800d990:	2b01      	cmp	r3, #1
 800d992:	d002      	beq.n	800d99a <HAL_SDRAM_SendCommand+0x2a>
 800d994:	7dfb      	ldrb	r3, [r7, #23]
 800d996:	2b05      	cmp	r3, #5
 800d998:	d118      	bne.n	800d9cc <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	2202      	movs	r2, #2
 800d99e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	687a      	ldr	r2, [r7, #4]
 800d9a8:	68b9      	ldr	r1, [r7, #8]
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	f002 f86c 	bl	800fa88 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	2b02      	cmp	r3, #2
 800d9b6:	d104      	bne.n	800d9c2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	2205      	movs	r2, #5
 800d9bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d9c0:	e006      	b.n	800d9d0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	2201      	movs	r2, #1
 800d9c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d9ca:	e001      	b.n	800d9d0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	e000      	b.n	800d9d2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800d9d0:	2300      	movs	r3, #0
}
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	3718      	adds	r7, #24
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}

0800d9da <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800d9da:	b580      	push	{r7, lr}
 800d9dc:	b082      	sub	sp, #8
 800d9de:	af00      	add	r7, sp, #0
 800d9e0:	6078      	str	r0, [r7, #4]
 800d9e2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d9ea:	b2db      	uxtb	r3, r3
 800d9ec:	2b02      	cmp	r3, #2
 800d9ee:	d101      	bne.n	800d9f4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800d9f0:	2302      	movs	r3, #2
 800d9f2:	e016      	b.n	800da22 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d9fa:	b2db      	uxtb	r3, r3
 800d9fc:	2b01      	cmp	r3, #1
 800d9fe:	d10f      	bne.n	800da20 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2202      	movs	r2, #2
 800da04:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	6839      	ldr	r1, [r7, #0]
 800da0e:	4618      	mov	r0, r3
 800da10:	f002 f85e 	bl	800fad0 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2201      	movs	r2, #1
 800da18:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800da1c:	2300      	movs	r3, #0
 800da1e:	e000      	b.n	800da22 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800da20:	2301      	movs	r3, #1
}
 800da22:	4618      	mov	r0, r3
 800da24:	3708      	adds	r7, #8
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}

0800da2a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800da2a:	b580      	push	{r7, lr}
 800da2c:	b082      	sub	sp, #8
 800da2e:	af00      	add	r7, sp, #0
 800da30:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d101      	bne.n	800da3c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800da38:	2301      	movs	r3, #1
 800da3a:	e042      	b.n	800dac2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da42:	2b00      	cmp	r3, #0
 800da44:	d106      	bne.n	800da54 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2200      	movs	r2, #0
 800da4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	f7f6 fd70 	bl	8004534 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2224      	movs	r2, #36	; 0x24
 800da58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	681a      	ldr	r2, [r3, #0]
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	f022 0201 	bic.w	r2, r2, #1
 800da6a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f000 fd5d 	bl	800e52c <UART_SetConfig>
 800da72:	4603      	mov	r3, r0
 800da74:	2b01      	cmp	r3, #1
 800da76:	d101      	bne.n	800da7c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800da78:	2301      	movs	r3, #1
 800da7a:	e022      	b.n	800dac2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da80:	2b00      	cmp	r3, #0
 800da82:	d002      	beq.n	800da8a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f001 fbbd 	bl	800f204 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	685a      	ldr	r2, [r3, #4]
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800da98:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	689a      	ldr	r2, [r3, #8]
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800daa8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	681a      	ldr	r2, [r3, #0]
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	f042 0201 	orr.w	r2, r2, #1
 800dab8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	f001 fc44 	bl	800f348 <UART_CheckIdleState>
 800dac0:	4603      	mov	r3, r0
}
 800dac2:	4618      	mov	r0, r3
 800dac4:	3708      	adds	r7, #8
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}

0800daca <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800daca:	b580      	push	{r7, lr}
 800dacc:	b08a      	sub	sp, #40	; 0x28
 800dace:	af02      	add	r7, sp, #8
 800dad0:	60f8      	str	r0, [r7, #12]
 800dad2:	60b9      	str	r1, [r7, #8]
 800dad4:	603b      	str	r3, [r7, #0]
 800dad6:	4613      	mov	r3, r2
 800dad8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dae0:	2b20      	cmp	r3, #32
 800dae2:	d17b      	bne.n	800dbdc <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800dae4:	68bb      	ldr	r3, [r7, #8]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d002      	beq.n	800daf0 <HAL_UART_Transmit+0x26>
 800daea:	88fb      	ldrh	r3, [r7, #6]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d101      	bne.n	800daf4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800daf0:	2301      	movs	r3, #1
 800daf2:	e074      	b.n	800dbde <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	2200      	movs	r2, #0
 800daf8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	2221      	movs	r2, #33	; 0x21
 800db00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800db04:	f7f6 fe38 	bl	8004778 <HAL_GetTick>
 800db08:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	88fa      	ldrh	r2, [r7, #6]
 800db0e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	88fa      	ldrh	r2, [r7, #6]
 800db16:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	689b      	ldr	r3, [r3, #8]
 800db1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db22:	d108      	bne.n	800db36 <HAL_UART_Transmit+0x6c>
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	691b      	ldr	r3, [r3, #16]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d104      	bne.n	800db36 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800db2c:	2300      	movs	r3, #0
 800db2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	61bb      	str	r3, [r7, #24]
 800db34:	e003      	b.n	800db3e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800db36:	68bb      	ldr	r3, [r7, #8]
 800db38:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800db3a:	2300      	movs	r3, #0
 800db3c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800db3e:	e030      	b.n	800dba2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	9300      	str	r3, [sp, #0]
 800db44:	697b      	ldr	r3, [r7, #20]
 800db46:	2200      	movs	r2, #0
 800db48:	2180      	movs	r1, #128	; 0x80
 800db4a:	68f8      	ldr	r0, [r7, #12]
 800db4c:	f001 fca6 	bl	800f49c <UART_WaitOnFlagUntilTimeout>
 800db50:	4603      	mov	r3, r0
 800db52:	2b00      	cmp	r3, #0
 800db54:	d005      	beq.n	800db62 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	2220      	movs	r2, #32
 800db5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800db5e:	2303      	movs	r3, #3
 800db60:	e03d      	b.n	800dbde <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800db62:	69fb      	ldr	r3, [r7, #28]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d10b      	bne.n	800db80 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800db68:	69bb      	ldr	r3, [r7, #24]
 800db6a:	881b      	ldrh	r3, [r3, #0]
 800db6c:	461a      	mov	r2, r3
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800db76:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800db78:	69bb      	ldr	r3, [r7, #24]
 800db7a:	3302      	adds	r3, #2
 800db7c:	61bb      	str	r3, [r7, #24]
 800db7e:	e007      	b.n	800db90 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800db80:	69fb      	ldr	r3, [r7, #28]
 800db82:	781a      	ldrb	r2, [r3, #0]
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800db8a:	69fb      	ldr	r3, [r7, #28]
 800db8c:	3301      	adds	r3, #1
 800db8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800db96:	b29b      	uxth	r3, r3
 800db98:	3b01      	subs	r3, #1
 800db9a:	b29a      	uxth	r2, r3
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dba8:	b29b      	uxth	r3, r3
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d1c8      	bne.n	800db40 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	9300      	str	r3, [sp, #0]
 800dbb2:	697b      	ldr	r3, [r7, #20]
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	2140      	movs	r1, #64	; 0x40
 800dbb8:	68f8      	ldr	r0, [r7, #12]
 800dbba:	f001 fc6f 	bl	800f49c <UART_WaitOnFlagUntilTimeout>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d005      	beq.n	800dbd0 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	2220      	movs	r2, #32
 800dbc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800dbcc:	2303      	movs	r3, #3
 800dbce:	e006      	b.n	800dbde <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	2220      	movs	r2, #32
 800dbd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800dbd8:	2300      	movs	r3, #0
 800dbda:	e000      	b.n	800dbde <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800dbdc:	2302      	movs	r3, #2
  }
}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	3720      	adds	r7, #32
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}

0800dbe6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dbe6:	b580      	push	{r7, lr}
 800dbe8:	b08a      	sub	sp, #40	; 0x28
 800dbea:	af02      	add	r7, sp, #8
 800dbec:	60f8      	str	r0, [r7, #12]
 800dbee:	60b9      	str	r1, [r7, #8]
 800dbf0:	603b      	str	r3, [r7, #0]
 800dbf2:	4613      	mov	r3, r2
 800dbf4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dbfc:	2b20      	cmp	r3, #32
 800dbfe:	f040 80b5 	bne.w	800dd6c <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800dc02:	68bb      	ldr	r3, [r7, #8]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d002      	beq.n	800dc0e <HAL_UART_Receive+0x28>
 800dc08:	88fb      	ldrh	r3, [r7, #6]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d101      	bne.n	800dc12 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800dc0e:	2301      	movs	r3, #1
 800dc10:	e0ad      	b.n	800dd6e <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	2200      	movs	r2, #0
 800dc16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	2222      	movs	r2, #34	; 0x22
 800dc1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2200      	movs	r2, #0
 800dc26:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dc28:	f7f6 fda6 	bl	8004778 <HAL_GetTick>
 800dc2c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	88fa      	ldrh	r2, [r7, #6]
 800dc32:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	88fa      	ldrh	r2, [r7, #6]
 800dc3a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	689b      	ldr	r3, [r3, #8]
 800dc42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc46:	d10e      	bne.n	800dc66 <HAL_UART_Receive+0x80>
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	691b      	ldr	r3, [r3, #16]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d105      	bne.n	800dc5c <HAL_UART_Receive+0x76>
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	f240 12ff 	movw	r2, #511	; 0x1ff
 800dc56:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800dc5a:	e02d      	b.n	800dcb8 <HAL_UART_Receive+0xd2>
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	22ff      	movs	r2, #255	; 0xff
 800dc60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800dc64:	e028      	b.n	800dcb8 <HAL_UART_Receive+0xd2>
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	689b      	ldr	r3, [r3, #8]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d10d      	bne.n	800dc8a <HAL_UART_Receive+0xa4>
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	691b      	ldr	r3, [r3, #16]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d104      	bne.n	800dc80 <HAL_UART_Receive+0x9a>
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	22ff      	movs	r2, #255	; 0xff
 800dc7a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800dc7e:	e01b      	b.n	800dcb8 <HAL_UART_Receive+0xd2>
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	227f      	movs	r2, #127	; 0x7f
 800dc84:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800dc88:	e016      	b.n	800dcb8 <HAL_UART_Receive+0xd2>
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	689b      	ldr	r3, [r3, #8]
 800dc8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dc92:	d10d      	bne.n	800dcb0 <HAL_UART_Receive+0xca>
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	691b      	ldr	r3, [r3, #16]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d104      	bne.n	800dca6 <HAL_UART_Receive+0xc0>
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	227f      	movs	r2, #127	; 0x7f
 800dca0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800dca4:	e008      	b.n	800dcb8 <HAL_UART_Receive+0xd2>
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	223f      	movs	r2, #63	; 0x3f
 800dcaa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800dcae:	e003      	b.n	800dcb8 <HAL_UART_Receive+0xd2>
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dcbe:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	689b      	ldr	r3, [r3, #8]
 800dcc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dcc8:	d108      	bne.n	800dcdc <HAL_UART_Receive+0xf6>
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	691b      	ldr	r3, [r3, #16]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d104      	bne.n	800dcdc <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	61bb      	str	r3, [r7, #24]
 800dcda:	e003      	b.n	800dce4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dce0:	2300      	movs	r3, #0
 800dce2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800dce4:	e036      	b.n	800dd54 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	9300      	str	r3, [sp, #0]
 800dcea:	697b      	ldr	r3, [r7, #20]
 800dcec:	2200      	movs	r2, #0
 800dcee:	2120      	movs	r1, #32
 800dcf0:	68f8      	ldr	r0, [r7, #12]
 800dcf2:	f001 fbd3 	bl	800f49c <UART_WaitOnFlagUntilTimeout>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d005      	beq.n	800dd08 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	2220      	movs	r2, #32
 800dd00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800dd04:	2303      	movs	r3, #3
 800dd06:	e032      	b.n	800dd6e <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800dd08:	69fb      	ldr	r3, [r7, #28]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d10c      	bne.n	800dd28 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd14:	b29a      	uxth	r2, r3
 800dd16:	8a7b      	ldrh	r3, [r7, #18]
 800dd18:	4013      	ands	r3, r2
 800dd1a:	b29a      	uxth	r2, r3
 800dd1c:	69bb      	ldr	r3, [r7, #24]
 800dd1e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800dd20:	69bb      	ldr	r3, [r7, #24]
 800dd22:	3302      	adds	r3, #2
 800dd24:	61bb      	str	r3, [r7, #24]
 800dd26:	e00c      	b.n	800dd42 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd2e:	b2da      	uxtb	r2, r3
 800dd30:	8a7b      	ldrh	r3, [r7, #18]
 800dd32:	b2db      	uxtb	r3, r3
 800dd34:	4013      	ands	r3, r2
 800dd36:	b2da      	uxtb	r2, r3
 800dd38:	69fb      	ldr	r3, [r7, #28]
 800dd3a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800dd3c:	69fb      	ldr	r3, [r7, #28]
 800dd3e:	3301      	adds	r3, #1
 800dd40:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dd48:	b29b      	uxth	r3, r3
 800dd4a:	3b01      	subs	r3, #1
 800dd4c:	b29a      	uxth	r2, r3
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dd5a:	b29b      	uxth	r3, r3
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d1c2      	bne.n	800dce6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	2220      	movs	r2, #32
 800dd64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800dd68:	2300      	movs	r3, #0
 800dd6a:	e000      	b.n	800dd6e <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800dd6c:	2302      	movs	r3, #2
  }
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3720      	adds	r7, #32
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}
	...

0800dd78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b0ba      	sub	sp, #232	; 0xe8
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	69db      	ldr	r3, [r3, #28]
 800dd86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	689b      	ldr	r3, [r3, #8]
 800dd9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800dd9e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800dda2:	f640 030f 	movw	r3, #2063	; 0x80f
 800dda6:	4013      	ands	r3, r2
 800dda8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ddac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d11b      	bne.n	800ddec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ddb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ddb8:	f003 0320 	and.w	r3, r3, #32
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d015      	beq.n	800ddec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ddc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ddc4:	f003 0320 	and.w	r3, r3, #32
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d105      	bne.n	800ddd8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ddcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ddd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d009      	beq.n	800ddec <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	f000 8377 	beq.w	800e4d0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	4798      	blx	r3
      }
      return;
 800ddea:	e371      	b.n	800e4d0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ddec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	f000 8123 	beq.w	800e03c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ddf6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ddfa:	4b8d      	ldr	r3, [pc, #564]	; (800e030 <HAL_UART_IRQHandler+0x2b8>)
 800ddfc:	4013      	ands	r3, r2
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d106      	bne.n	800de10 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800de02:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800de06:	4b8b      	ldr	r3, [pc, #556]	; (800e034 <HAL_UART_IRQHandler+0x2bc>)
 800de08:	4013      	ands	r3, r2
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	f000 8116 	beq.w	800e03c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800de10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de14:	f003 0301 	and.w	r3, r3, #1
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d011      	beq.n	800de40 <HAL_UART_IRQHandler+0xc8>
 800de1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de24:	2b00      	cmp	r3, #0
 800de26:	d00b      	beq.n	800de40 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	2201      	movs	r2, #1
 800de2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de36:	f043 0201 	orr.w	r2, r3, #1
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800de40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de44:	f003 0302 	and.w	r3, r3, #2
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d011      	beq.n	800de70 <HAL_UART_IRQHandler+0xf8>
 800de4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800de50:	f003 0301 	and.w	r3, r3, #1
 800de54:	2b00      	cmp	r3, #0
 800de56:	d00b      	beq.n	800de70 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	2202      	movs	r2, #2
 800de5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de66:	f043 0204 	orr.w	r2, r3, #4
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800de70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de74:	f003 0304 	and.w	r3, r3, #4
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d011      	beq.n	800dea0 <HAL_UART_IRQHandler+0x128>
 800de7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800de80:	f003 0301 	and.w	r3, r3, #1
 800de84:	2b00      	cmp	r3, #0
 800de86:	d00b      	beq.n	800dea0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	2204      	movs	r2, #4
 800de8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de96:	f043 0202 	orr.w	r2, r3, #2
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800dea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dea4:	f003 0308 	and.w	r3, r3, #8
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d017      	beq.n	800dedc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800deac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800deb0:	f003 0320 	and.w	r3, r3, #32
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d105      	bne.n	800dec4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800deb8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800debc:	4b5c      	ldr	r3, [pc, #368]	; (800e030 <HAL_UART_IRQHandler+0x2b8>)
 800debe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d00b      	beq.n	800dedc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	2208      	movs	r2, #8
 800deca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ded2:	f043 0208 	orr.w	r2, r3, #8
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800dedc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d012      	beq.n	800df0e <HAL_UART_IRQHandler+0x196>
 800dee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800deec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800def0:	2b00      	cmp	r3, #0
 800def2:	d00c      	beq.n	800df0e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800defc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df04:	f043 0220 	orr.w	r2, r3, #32
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df14:	2b00      	cmp	r3, #0
 800df16:	f000 82dd 	beq.w	800e4d4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800df1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df1e:	f003 0320 	and.w	r3, r3, #32
 800df22:	2b00      	cmp	r3, #0
 800df24:	d013      	beq.n	800df4e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800df26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df2a:	f003 0320 	and.w	r3, r3, #32
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d105      	bne.n	800df3e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800df32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d007      	beq.n	800df4e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df42:	2b00      	cmp	r3, #0
 800df44:	d003      	beq.n	800df4e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df4a:	6878      	ldr	r0, [r7, #4]
 800df4c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	689b      	ldr	r3, [r3, #8]
 800df5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df62:	2b40      	cmp	r3, #64	; 0x40
 800df64:	d005      	beq.n	800df72 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800df66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800df6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d054      	beq.n	800e01c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f001 fafa 	bl	800f56c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	689b      	ldr	r3, [r3, #8]
 800df7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df82:	2b40      	cmp	r3, #64	; 0x40
 800df84:	d146      	bne.n	800e014 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	3308      	adds	r3, #8
 800df8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800df94:	e853 3f00 	ldrex	r3, [r3]
 800df98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800df9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dfa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dfa4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	3308      	adds	r3, #8
 800dfae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800dfb2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800dfb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800dfbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800dfc2:	e841 2300 	strex	r3, r2, [r1]
 800dfc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800dfca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d1d9      	bne.n	800df86 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d017      	beq.n	800e00c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dfe2:	4a15      	ldr	r2, [pc, #84]	; (800e038 <HAL_UART_IRQHandler+0x2c0>)
 800dfe4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dfec:	4618      	mov	r0, r3
 800dfee:	f7f8 f9db 	bl	80063a8 <HAL_DMA_Abort_IT>
 800dff2:	4603      	mov	r3, r0
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d019      	beq.n	800e02c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e000:	687a      	ldr	r2, [r7, #4]
 800e002:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800e006:	4610      	mov	r0, r2
 800e008:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e00a:	e00f      	b.n	800e02c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e00c:	6878      	ldr	r0, [r7, #4]
 800e00e:	f000 fa77 	bl	800e500 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e012:	e00b      	b.n	800e02c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e014:	6878      	ldr	r0, [r7, #4]
 800e016:	f000 fa73 	bl	800e500 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e01a:	e007      	b.n	800e02c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e01c:	6878      	ldr	r0, [r7, #4]
 800e01e:	f000 fa6f 	bl	800e500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	2200      	movs	r2, #0
 800e026:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800e02a:	e253      	b.n	800e4d4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e02c:	bf00      	nop
    return;
 800e02e:	e251      	b.n	800e4d4 <HAL_UART_IRQHandler+0x75c>
 800e030:	10000001 	.word	0x10000001
 800e034:	04000120 	.word	0x04000120
 800e038:	0800f639 	.word	0x0800f639

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e040:	2b01      	cmp	r3, #1
 800e042:	f040 81e7 	bne.w	800e414 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e04a:	f003 0310 	and.w	r3, r3, #16
 800e04e:	2b00      	cmp	r3, #0
 800e050:	f000 81e0 	beq.w	800e414 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e058:	f003 0310 	and.w	r3, r3, #16
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	f000 81d9 	beq.w	800e414 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	2210      	movs	r2, #16
 800e068:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	689b      	ldr	r3, [r3, #8]
 800e070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e074:	2b40      	cmp	r3, #64	; 0x40
 800e076:	f040 8151 	bne.w	800e31c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	4a96      	ldr	r2, [pc, #600]	; (800e2dc <HAL_UART_IRQHandler+0x564>)
 800e084:	4293      	cmp	r3, r2
 800e086:	d068      	beq.n	800e15a <HAL_UART_IRQHandler+0x3e2>
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	4a93      	ldr	r2, [pc, #588]	; (800e2e0 <HAL_UART_IRQHandler+0x568>)
 800e092:	4293      	cmp	r3, r2
 800e094:	d061      	beq.n	800e15a <HAL_UART_IRQHandler+0x3e2>
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	4a91      	ldr	r2, [pc, #580]	; (800e2e4 <HAL_UART_IRQHandler+0x56c>)
 800e0a0:	4293      	cmp	r3, r2
 800e0a2:	d05a      	beq.n	800e15a <HAL_UART_IRQHandler+0x3e2>
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	4a8e      	ldr	r2, [pc, #568]	; (800e2e8 <HAL_UART_IRQHandler+0x570>)
 800e0ae:	4293      	cmp	r3, r2
 800e0b0:	d053      	beq.n	800e15a <HAL_UART_IRQHandler+0x3e2>
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	4a8c      	ldr	r2, [pc, #560]	; (800e2ec <HAL_UART_IRQHandler+0x574>)
 800e0bc:	4293      	cmp	r3, r2
 800e0be:	d04c      	beq.n	800e15a <HAL_UART_IRQHandler+0x3e2>
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	4a89      	ldr	r2, [pc, #548]	; (800e2f0 <HAL_UART_IRQHandler+0x578>)
 800e0ca:	4293      	cmp	r3, r2
 800e0cc:	d045      	beq.n	800e15a <HAL_UART_IRQHandler+0x3e2>
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	4a87      	ldr	r2, [pc, #540]	; (800e2f4 <HAL_UART_IRQHandler+0x57c>)
 800e0d8:	4293      	cmp	r3, r2
 800e0da:	d03e      	beq.n	800e15a <HAL_UART_IRQHandler+0x3e2>
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	4a84      	ldr	r2, [pc, #528]	; (800e2f8 <HAL_UART_IRQHandler+0x580>)
 800e0e6:	4293      	cmp	r3, r2
 800e0e8:	d037      	beq.n	800e15a <HAL_UART_IRQHandler+0x3e2>
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	4a82      	ldr	r2, [pc, #520]	; (800e2fc <HAL_UART_IRQHandler+0x584>)
 800e0f4:	4293      	cmp	r3, r2
 800e0f6:	d030      	beq.n	800e15a <HAL_UART_IRQHandler+0x3e2>
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	4a7f      	ldr	r2, [pc, #508]	; (800e300 <HAL_UART_IRQHandler+0x588>)
 800e102:	4293      	cmp	r3, r2
 800e104:	d029      	beq.n	800e15a <HAL_UART_IRQHandler+0x3e2>
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	4a7d      	ldr	r2, [pc, #500]	; (800e304 <HAL_UART_IRQHandler+0x58c>)
 800e110:	4293      	cmp	r3, r2
 800e112:	d022      	beq.n	800e15a <HAL_UART_IRQHandler+0x3e2>
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	4a7a      	ldr	r2, [pc, #488]	; (800e308 <HAL_UART_IRQHandler+0x590>)
 800e11e:	4293      	cmp	r3, r2
 800e120:	d01b      	beq.n	800e15a <HAL_UART_IRQHandler+0x3e2>
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	4a78      	ldr	r2, [pc, #480]	; (800e30c <HAL_UART_IRQHandler+0x594>)
 800e12c:	4293      	cmp	r3, r2
 800e12e:	d014      	beq.n	800e15a <HAL_UART_IRQHandler+0x3e2>
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	4a75      	ldr	r2, [pc, #468]	; (800e310 <HAL_UART_IRQHandler+0x598>)
 800e13a:	4293      	cmp	r3, r2
 800e13c:	d00d      	beq.n	800e15a <HAL_UART_IRQHandler+0x3e2>
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	4a73      	ldr	r2, [pc, #460]	; (800e314 <HAL_UART_IRQHandler+0x59c>)
 800e148:	4293      	cmp	r3, r2
 800e14a:	d006      	beq.n	800e15a <HAL_UART_IRQHandler+0x3e2>
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	4a70      	ldr	r2, [pc, #448]	; (800e318 <HAL_UART_IRQHandler+0x5a0>)
 800e156:	4293      	cmp	r3, r2
 800e158:	d106      	bne.n	800e168 <HAL_UART_IRQHandler+0x3f0>
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	685b      	ldr	r3, [r3, #4]
 800e164:	b29b      	uxth	r3, r3
 800e166:	e005      	b.n	800e174 <HAL_UART_IRQHandler+0x3fc>
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	685b      	ldr	r3, [r3, #4]
 800e172:	b29b      	uxth	r3, r3
 800e174:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e178:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	f000 81ab 	beq.w	800e4d8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e188:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e18c:	429a      	cmp	r2, r3
 800e18e:	f080 81a3 	bcs.w	800e4d8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e198:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e1a2:	69db      	ldr	r3, [r3, #28]
 800e1a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e1a8:	f000 8087 	beq.w	800e2ba <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e1b8:	e853 3f00 	ldrex	r3, [r3]
 800e1bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e1c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e1c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e1c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	461a      	mov	r2, r3
 800e1d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e1d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e1da:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e1e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e1e6:	e841 2300 	strex	r3, r2, [r1]
 800e1ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e1ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d1da      	bne.n	800e1ac <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	3308      	adds	r3, #8
 800e1fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e200:	e853 3f00 	ldrex	r3, [r3]
 800e204:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e206:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e208:	f023 0301 	bic.w	r3, r3, #1
 800e20c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	3308      	adds	r3, #8
 800e216:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e21a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e21e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e220:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e222:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e226:	e841 2300 	strex	r3, r2, [r1]
 800e22a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e22c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d1e1      	bne.n	800e1f6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	3308      	adds	r3, #8
 800e238:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e23a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e23c:	e853 3f00 	ldrex	r3, [r3]
 800e240:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e242:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e244:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e248:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	3308      	adds	r3, #8
 800e252:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e256:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e258:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e25a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e25c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e25e:	e841 2300 	strex	r3, r2, [r1]
 800e262:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e264:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e266:	2b00      	cmp	r3, #0
 800e268:	d1e3      	bne.n	800e232 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	2220      	movs	r2, #32
 800e26e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	2200      	movs	r2, #0
 800e276:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e27e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e280:	e853 3f00 	ldrex	r3, [r3]
 800e284:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e286:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e288:	f023 0310 	bic.w	r3, r3, #16
 800e28c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	461a      	mov	r2, r3
 800e296:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e29a:	65bb      	str	r3, [r7, #88]	; 0x58
 800e29c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e29e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e2a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e2a2:	e841 2300 	strex	r3, r2, [r1]
 800e2a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e2a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d1e4      	bne.n	800e278 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	f7f7 fd59 	bl	8005d6c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	2202      	movs	r2, #2
 800e2be:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e2cc:	b29b      	uxth	r3, r3
 800e2ce:	1ad3      	subs	r3, r2, r3
 800e2d0:	b29b      	uxth	r3, r3
 800e2d2:	4619      	mov	r1, r3
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f000 f91d 	bl	800e514 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e2da:	e0fd      	b.n	800e4d8 <HAL_UART_IRQHandler+0x760>
 800e2dc:	40020010 	.word	0x40020010
 800e2e0:	40020028 	.word	0x40020028
 800e2e4:	40020040 	.word	0x40020040
 800e2e8:	40020058 	.word	0x40020058
 800e2ec:	40020070 	.word	0x40020070
 800e2f0:	40020088 	.word	0x40020088
 800e2f4:	400200a0 	.word	0x400200a0
 800e2f8:	400200b8 	.word	0x400200b8
 800e2fc:	40020410 	.word	0x40020410
 800e300:	40020428 	.word	0x40020428
 800e304:	40020440 	.word	0x40020440
 800e308:	40020458 	.word	0x40020458
 800e30c:	40020470 	.word	0x40020470
 800e310:	40020488 	.word	0x40020488
 800e314:	400204a0 	.word	0x400204a0
 800e318:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e328:	b29b      	uxth	r3, r3
 800e32a:	1ad3      	subs	r3, r2, r3
 800e32c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e336:	b29b      	uxth	r3, r3
 800e338:	2b00      	cmp	r3, #0
 800e33a:	f000 80cf 	beq.w	800e4dc <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800e33e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e342:	2b00      	cmp	r3, #0
 800e344:	f000 80ca 	beq.w	800e4dc <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e350:	e853 3f00 	ldrex	r3, [r3]
 800e354:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e358:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e35c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	461a      	mov	r2, r3
 800e366:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e36a:	647b      	str	r3, [r7, #68]	; 0x44
 800e36c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e36e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e370:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e372:	e841 2300 	strex	r3, r2, [r1]
 800e376:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d1e4      	bne.n	800e348 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	3308      	adds	r3, #8
 800e384:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e388:	e853 3f00 	ldrex	r3, [r3]
 800e38c:	623b      	str	r3, [r7, #32]
   return(result);
 800e38e:	6a3a      	ldr	r2, [r7, #32]
 800e390:	4b55      	ldr	r3, [pc, #340]	; (800e4e8 <HAL_UART_IRQHandler+0x770>)
 800e392:	4013      	ands	r3, r2
 800e394:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	3308      	adds	r3, #8
 800e39e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e3a2:	633a      	str	r2, [r7, #48]	; 0x30
 800e3a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e3a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3aa:	e841 2300 	strex	r3, r2, [r1]
 800e3ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d1e3      	bne.n	800e37e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	2220      	movs	r2, #32
 800e3ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3d0:	693b      	ldr	r3, [r7, #16]
 800e3d2:	e853 3f00 	ldrex	r3, [r3]
 800e3d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	f023 0310 	bic.w	r3, r3, #16
 800e3de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	461a      	mov	r2, r3
 800e3e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e3ec:	61fb      	str	r3, [r7, #28]
 800e3ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3f0:	69b9      	ldr	r1, [r7, #24]
 800e3f2:	69fa      	ldr	r2, [r7, #28]
 800e3f4:	e841 2300 	strex	r3, r2, [r1]
 800e3f8:	617b      	str	r3, [r7, #20]
   return(result);
 800e3fa:	697b      	ldr	r3, [r7, #20]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d1e4      	bne.n	800e3ca <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2202      	movs	r2, #2
 800e404:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e406:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e40a:	4619      	mov	r1, r3
 800e40c:	6878      	ldr	r0, [r7, #4]
 800e40e:	f000 f881 	bl	800e514 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e412:	e063      	b.n	800e4dc <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e418:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d00e      	beq.n	800e43e <HAL_UART_IRQHandler+0x6c6>
 800e420:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e424:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d008      	beq.n	800e43e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e434:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e436:	6878      	ldr	r0, [r7, #4]
 800e438:	f001 f93f 	bl	800f6ba <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e43c:	e051      	b.n	800e4e2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e43e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e446:	2b00      	cmp	r3, #0
 800e448:	d014      	beq.n	800e474 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e44a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e44e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e452:	2b00      	cmp	r3, #0
 800e454:	d105      	bne.n	800e462 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e456:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e45a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d008      	beq.n	800e474 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e466:	2b00      	cmp	r3, #0
 800e468:	d03a      	beq.n	800e4e0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	4798      	blx	r3
    }
    return;
 800e472:	e035      	b.n	800e4e0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d009      	beq.n	800e494 <HAL_UART_IRQHandler+0x71c>
 800e480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d003      	beq.n	800e494 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	f001 f8e9 	bl	800f664 <UART_EndTransmit_IT>
    return;
 800e492:	e026      	b.n	800e4e2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e498:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d009      	beq.n	800e4b4 <HAL_UART_IRQHandler+0x73c>
 800e4a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d003      	beq.n	800e4b4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e4ac:	6878      	ldr	r0, [r7, #4]
 800e4ae:	f001 f918 	bl	800f6e2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e4b2:	e016      	b.n	800e4e2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e4b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d010      	beq.n	800e4e2 <HAL_UART_IRQHandler+0x76a>
 800e4c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	da0c      	bge.n	800e4e2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f001 f900 	bl	800f6ce <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e4ce:	e008      	b.n	800e4e2 <HAL_UART_IRQHandler+0x76a>
      return;
 800e4d0:	bf00      	nop
 800e4d2:	e006      	b.n	800e4e2 <HAL_UART_IRQHandler+0x76a>
    return;
 800e4d4:	bf00      	nop
 800e4d6:	e004      	b.n	800e4e2 <HAL_UART_IRQHandler+0x76a>
      return;
 800e4d8:	bf00      	nop
 800e4da:	e002      	b.n	800e4e2 <HAL_UART_IRQHandler+0x76a>
      return;
 800e4dc:	bf00      	nop
 800e4de:	e000      	b.n	800e4e2 <HAL_UART_IRQHandler+0x76a>
    return;
 800e4e0:	bf00      	nop
  }
}
 800e4e2:	37e8      	adds	r7, #232	; 0xe8
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bd80      	pop	{r7, pc}
 800e4e8:	effffffe 	.word	0xeffffffe

0800e4ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	b083      	sub	sp, #12
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e4f4:	bf00      	nop
 800e4f6:	370c      	adds	r7, #12
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fe:	4770      	bx	lr

0800e500 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e500:	b480      	push	{r7}
 800e502:	b083      	sub	sp, #12
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e508:	bf00      	nop
 800e50a:	370c      	adds	r7, #12
 800e50c:	46bd      	mov	sp, r7
 800e50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e512:	4770      	bx	lr

0800e514 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e514:	b480      	push	{r7}
 800e516:	b083      	sub	sp, #12
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
 800e51c:	460b      	mov	r3, r1
 800e51e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e520:	bf00      	nop
 800e522:	370c      	adds	r7, #12
 800e524:	46bd      	mov	sp, r7
 800e526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52a:	4770      	bx	lr

0800e52c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e52c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e530:	b092      	sub	sp, #72	; 0x48
 800e532:	af00      	add	r7, sp, #0
 800e534:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e536:	2300      	movs	r3, #0
 800e538:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e53c:	697b      	ldr	r3, [r7, #20]
 800e53e:	689a      	ldr	r2, [r3, #8]
 800e540:	697b      	ldr	r3, [r7, #20]
 800e542:	691b      	ldr	r3, [r3, #16]
 800e544:	431a      	orrs	r2, r3
 800e546:	697b      	ldr	r3, [r7, #20]
 800e548:	695b      	ldr	r3, [r3, #20]
 800e54a:	431a      	orrs	r2, r3
 800e54c:	697b      	ldr	r3, [r7, #20]
 800e54e:	69db      	ldr	r3, [r3, #28]
 800e550:	4313      	orrs	r3, r2
 800e552:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e554:	697b      	ldr	r3, [r7, #20]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	681a      	ldr	r2, [r3, #0]
 800e55a:	4bbe      	ldr	r3, [pc, #760]	; (800e854 <UART_SetConfig+0x328>)
 800e55c:	4013      	ands	r3, r2
 800e55e:	697a      	ldr	r2, [r7, #20]
 800e560:	6812      	ldr	r2, [r2, #0]
 800e562:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e564:	430b      	orrs	r3, r1
 800e566:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e568:	697b      	ldr	r3, [r7, #20]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	685b      	ldr	r3, [r3, #4]
 800e56e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e572:	697b      	ldr	r3, [r7, #20]
 800e574:	68da      	ldr	r2, [r3, #12]
 800e576:	697b      	ldr	r3, [r7, #20]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	430a      	orrs	r2, r1
 800e57c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e57e:	697b      	ldr	r3, [r7, #20]
 800e580:	699b      	ldr	r3, [r3, #24]
 800e582:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e584:	697b      	ldr	r3, [r7, #20]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	4ab3      	ldr	r2, [pc, #716]	; (800e858 <UART_SetConfig+0x32c>)
 800e58a:	4293      	cmp	r3, r2
 800e58c:	d004      	beq.n	800e598 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e58e:	697b      	ldr	r3, [r7, #20]
 800e590:	6a1b      	ldr	r3, [r3, #32]
 800e592:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e594:	4313      	orrs	r3, r2
 800e596:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e598:	697b      	ldr	r3, [r7, #20]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	689a      	ldr	r2, [r3, #8]
 800e59e:	4baf      	ldr	r3, [pc, #700]	; (800e85c <UART_SetConfig+0x330>)
 800e5a0:	4013      	ands	r3, r2
 800e5a2:	697a      	ldr	r2, [r7, #20]
 800e5a4:	6812      	ldr	r2, [r2, #0]
 800e5a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e5a8:	430b      	orrs	r3, r1
 800e5aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e5ac:	697b      	ldr	r3, [r7, #20]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5b2:	f023 010f 	bic.w	r1, r3, #15
 800e5b6:	697b      	ldr	r3, [r7, #20]
 800e5b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e5ba:	697b      	ldr	r3, [r7, #20]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	430a      	orrs	r2, r1
 800e5c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e5c2:	697b      	ldr	r3, [r7, #20]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	4aa6      	ldr	r2, [pc, #664]	; (800e860 <UART_SetConfig+0x334>)
 800e5c8:	4293      	cmp	r3, r2
 800e5ca:	d177      	bne.n	800e6bc <UART_SetConfig+0x190>
 800e5cc:	4ba5      	ldr	r3, [pc, #660]	; (800e864 <UART_SetConfig+0x338>)
 800e5ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e5d4:	2b28      	cmp	r3, #40	; 0x28
 800e5d6:	d86d      	bhi.n	800e6b4 <UART_SetConfig+0x188>
 800e5d8:	a201      	add	r2, pc, #4	; (adr r2, 800e5e0 <UART_SetConfig+0xb4>)
 800e5da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5de:	bf00      	nop
 800e5e0:	0800e685 	.word	0x0800e685
 800e5e4:	0800e6b5 	.word	0x0800e6b5
 800e5e8:	0800e6b5 	.word	0x0800e6b5
 800e5ec:	0800e6b5 	.word	0x0800e6b5
 800e5f0:	0800e6b5 	.word	0x0800e6b5
 800e5f4:	0800e6b5 	.word	0x0800e6b5
 800e5f8:	0800e6b5 	.word	0x0800e6b5
 800e5fc:	0800e6b5 	.word	0x0800e6b5
 800e600:	0800e68d 	.word	0x0800e68d
 800e604:	0800e6b5 	.word	0x0800e6b5
 800e608:	0800e6b5 	.word	0x0800e6b5
 800e60c:	0800e6b5 	.word	0x0800e6b5
 800e610:	0800e6b5 	.word	0x0800e6b5
 800e614:	0800e6b5 	.word	0x0800e6b5
 800e618:	0800e6b5 	.word	0x0800e6b5
 800e61c:	0800e6b5 	.word	0x0800e6b5
 800e620:	0800e695 	.word	0x0800e695
 800e624:	0800e6b5 	.word	0x0800e6b5
 800e628:	0800e6b5 	.word	0x0800e6b5
 800e62c:	0800e6b5 	.word	0x0800e6b5
 800e630:	0800e6b5 	.word	0x0800e6b5
 800e634:	0800e6b5 	.word	0x0800e6b5
 800e638:	0800e6b5 	.word	0x0800e6b5
 800e63c:	0800e6b5 	.word	0x0800e6b5
 800e640:	0800e69d 	.word	0x0800e69d
 800e644:	0800e6b5 	.word	0x0800e6b5
 800e648:	0800e6b5 	.word	0x0800e6b5
 800e64c:	0800e6b5 	.word	0x0800e6b5
 800e650:	0800e6b5 	.word	0x0800e6b5
 800e654:	0800e6b5 	.word	0x0800e6b5
 800e658:	0800e6b5 	.word	0x0800e6b5
 800e65c:	0800e6b5 	.word	0x0800e6b5
 800e660:	0800e6a5 	.word	0x0800e6a5
 800e664:	0800e6b5 	.word	0x0800e6b5
 800e668:	0800e6b5 	.word	0x0800e6b5
 800e66c:	0800e6b5 	.word	0x0800e6b5
 800e670:	0800e6b5 	.word	0x0800e6b5
 800e674:	0800e6b5 	.word	0x0800e6b5
 800e678:	0800e6b5 	.word	0x0800e6b5
 800e67c:	0800e6b5 	.word	0x0800e6b5
 800e680:	0800e6ad 	.word	0x0800e6ad
 800e684:	2301      	movs	r3, #1
 800e686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e68a:	e326      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e68c:	2304      	movs	r3, #4
 800e68e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e692:	e322      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e694:	2308      	movs	r3, #8
 800e696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e69a:	e31e      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e69c:	2310      	movs	r3, #16
 800e69e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6a2:	e31a      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e6a4:	2320      	movs	r3, #32
 800e6a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6aa:	e316      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e6ac:	2340      	movs	r3, #64	; 0x40
 800e6ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6b2:	e312      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e6b4:	2380      	movs	r3, #128	; 0x80
 800e6b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6ba:	e30e      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e6bc:	697b      	ldr	r3, [r7, #20]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	4a69      	ldr	r2, [pc, #420]	; (800e868 <UART_SetConfig+0x33c>)
 800e6c2:	4293      	cmp	r3, r2
 800e6c4:	d130      	bne.n	800e728 <UART_SetConfig+0x1fc>
 800e6c6:	4b67      	ldr	r3, [pc, #412]	; (800e864 <UART_SetConfig+0x338>)
 800e6c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6ca:	f003 0307 	and.w	r3, r3, #7
 800e6ce:	2b05      	cmp	r3, #5
 800e6d0:	d826      	bhi.n	800e720 <UART_SetConfig+0x1f4>
 800e6d2:	a201      	add	r2, pc, #4	; (adr r2, 800e6d8 <UART_SetConfig+0x1ac>)
 800e6d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6d8:	0800e6f1 	.word	0x0800e6f1
 800e6dc:	0800e6f9 	.word	0x0800e6f9
 800e6e0:	0800e701 	.word	0x0800e701
 800e6e4:	0800e709 	.word	0x0800e709
 800e6e8:	0800e711 	.word	0x0800e711
 800e6ec:	0800e719 	.word	0x0800e719
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6f6:	e2f0      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e6f8:	2304      	movs	r3, #4
 800e6fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6fe:	e2ec      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e700:	2308      	movs	r3, #8
 800e702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e706:	e2e8      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e708:	2310      	movs	r3, #16
 800e70a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e70e:	e2e4      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e710:	2320      	movs	r3, #32
 800e712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e716:	e2e0      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e718:	2340      	movs	r3, #64	; 0x40
 800e71a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e71e:	e2dc      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e720:	2380      	movs	r3, #128	; 0x80
 800e722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e726:	e2d8      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e728:	697b      	ldr	r3, [r7, #20]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	4a4f      	ldr	r2, [pc, #316]	; (800e86c <UART_SetConfig+0x340>)
 800e72e:	4293      	cmp	r3, r2
 800e730:	d130      	bne.n	800e794 <UART_SetConfig+0x268>
 800e732:	4b4c      	ldr	r3, [pc, #304]	; (800e864 <UART_SetConfig+0x338>)
 800e734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e736:	f003 0307 	and.w	r3, r3, #7
 800e73a:	2b05      	cmp	r3, #5
 800e73c:	d826      	bhi.n	800e78c <UART_SetConfig+0x260>
 800e73e:	a201      	add	r2, pc, #4	; (adr r2, 800e744 <UART_SetConfig+0x218>)
 800e740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e744:	0800e75d 	.word	0x0800e75d
 800e748:	0800e765 	.word	0x0800e765
 800e74c:	0800e76d 	.word	0x0800e76d
 800e750:	0800e775 	.word	0x0800e775
 800e754:	0800e77d 	.word	0x0800e77d
 800e758:	0800e785 	.word	0x0800e785
 800e75c:	2300      	movs	r3, #0
 800e75e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e762:	e2ba      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e764:	2304      	movs	r3, #4
 800e766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e76a:	e2b6      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e76c:	2308      	movs	r3, #8
 800e76e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e772:	e2b2      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e774:	2310      	movs	r3, #16
 800e776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e77a:	e2ae      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e77c:	2320      	movs	r3, #32
 800e77e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e782:	e2aa      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e784:	2340      	movs	r3, #64	; 0x40
 800e786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e78a:	e2a6      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e78c:	2380      	movs	r3, #128	; 0x80
 800e78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e792:	e2a2      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e794:	697b      	ldr	r3, [r7, #20]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	4a35      	ldr	r2, [pc, #212]	; (800e870 <UART_SetConfig+0x344>)
 800e79a:	4293      	cmp	r3, r2
 800e79c:	d130      	bne.n	800e800 <UART_SetConfig+0x2d4>
 800e79e:	4b31      	ldr	r3, [pc, #196]	; (800e864 <UART_SetConfig+0x338>)
 800e7a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7a2:	f003 0307 	and.w	r3, r3, #7
 800e7a6:	2b05      	cmp	r3, #5
 800e7a8:	d826      	bhi.n	800e7f8 <UART_SetConfig+0x2cc>
 800e7aa:	a201      	add	r2, pc, #4	; (adr r2, 800e7b0 <UART_SetConfig+0x284>)
 800e7ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7b0:	0800e7c9 	.word	0x0800e7c9
 800e7b4:	0800e7d1 	.word	0x0800e7d1
 800e7b8:	0800e7d9 	.word	0x0800e7d9
 800e7bc:	0800e7e1 	.word	0x0800e7e1
 800e7c0:	0800e7e9 	.word	0x0800e7e9
 800e7c4:	0800e7f1 	.word	0x0800e7f1
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7ce:	e284      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e7d0:	2304      	movs	r3, #4
 800e7d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7d6:	e280      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e7d8:	2308      	movs	r3, #8
 800e7da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7de:	e27c      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e7e0:	2310      	movs	r3, #16
 800e7e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7e6:	e278      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e7e8:	2320      	movs	r3, #32
 800e7ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7ee:	e274      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e7f0:	2340      	movs	r3, #64	; 0x40
 800e7f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7f6:	e270      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e7f8:	2380      	movs	r3, #128	; 0x80
 800e7fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7fe:	e26c      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e800:	697b      	ldr	r3, [r7, #20]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	4a1b      	ldr	r2, [pc, #108]	; (800e874 <UART_SetConfig+0x348>)
 800e806:	4293      	cmp	r3, r2
 800e808:	d142      	bne.n	800e890 <UART_SetConfig+0x364>
 800e80a:	4b16      	ldr	r3, [pc, #88]	; (800e864 <UART_SetConfig+0x338>)
 800e80c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e80e:	f003 0307 	and.w	r3, r3, #7
 800e812:	2b05      	cmp	r3, #5
 800e814:	d838      	bhi.n	800e888 <UART_SetConfig+0x35c>
 800e816:	a201      	add	r2, pc, #4	; (adr r2, 800e81c <UART_SetConfig+0x2f0>)
 800e818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e81c:	0800e835 	.word	0x0800e835
 800e820:	0800e83d 	.word	0x0800e83d
 800e824:	0800e845 	.word	0x0800e845
 800e828:	0800e84d 	.word	0x0800e84d
 800e82c:	0800e879 	.word	0x0800e879
 800e830:	0800e881 	.word	0x0800e881
 800e834:	2300      	movs	r3, #0
 800e836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e83a:	e24e      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e83c:	2304      	movs	r3, #4
 800e83e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e842:	e24a      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e844:	2308      	movs	r3, #8
 800e846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e84a:	e246      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e84c:	2310      	movs	r3, #16
 800e84e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e852:	e242      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e854:	cfff69f3 	.word	0xcfff69f3
 800e858:	58000c00 	.word	0x58000c00
 800e85c:	11fff4ff 	.word	0x11fff4ff
 800e860:	40011000 	.word	0x40011000
 800e864:	58024400 	.word	0x58024400
 800e868:	40004400 	.word	0x40004400
 800e86c:	40004800 	.word	0x40004800
 800e870:	40004c00 	.word	0x40004c00
 800e874:	40005000 	.word	0x40005000
 800e878:	2320      	movs	r3, #32
 800e87a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e87e:	e22c      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e880:	2340      	movs	r3, #64	; 0x40
 800e882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e886:	e228      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e888:	2380      	movs	r3, #128	; 0x80
 800e88a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e88e:	e224      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e890:	697b      	ldr	r3, [r7, #20]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	4ab1      	ldr	r2, [pc, #708]	; (800eb5c <UART_SetConfig+0x630>)
 800e896:	4293      	cmp	r3, r2
 800e898:	d176      	bne.n	800e988 <UART_SetConfig+0x45c>
 800e89a:	4bb1      	ldr	r3, [pc, #708]	; (800eb60 <UART_SetConfig+0x634>)
 800e89c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e89e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e8a2:	2b28      	cmp	r3, #40	; 0x28
 800e8a4:	d86c      	bhi.n	800e980 <UART_SetConfig+0x454>
 800e8a6:	a201      	add	r2, pc, #4	; (adr r2, 800e8ac <UART_SetConfig+0x380>)
 800e8a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8ac:	0800e951 	.word	0x0800e951
 800e8b0:	0800e981 	.word	0x0800e981
 800e8b4:	0800e981 	.word	0x0800e981
 800e8b8:	0800e981 	.word	0x0800e981
 800e8bc:	0800e981 	.word	0x0800e981
 800e8c0:	0800e981 	.word	0x0800e981
 800e8c4:	0800e981 	.word	0x0800e981
 800e8c8:	0800e981 	.word	0x0800e981
 800e8cc:	0800e959 	.word	0x0800e959
 800e8d0:	0800e981 	.word	0x0800e981
 800e8d4:	0800e981 	.word	0x0800e981
 800e8d8:	0800e981 	.word	0x0800e981
 800e8dc:	0800e981 	.word	0x0800e981
 800e8e0:	0800e981 	.word	0x0800e981
 800e8e4:	0800e981 	.word	0x0800e981
 800e8e8:	0800e981 	.word	0x0800e981
 800e8ec:	0800e961 	.word	0x0800e961
 800e8f0:	0800e981 	.word	0x0800e981
 800e8f4:	0800e981 	.word	0x0800e981
 800e8f8:	0800e981 	.word	0x0800e981
 800e8fc:	0800e981 	.word	0x0800e981
 800e900:	0800e981 	.word	0x0800e981
 800e904:	0800e981 	.word	0x0800e981
 800e908:	0800e981 	.word	0x0800e981
 800e90c:	0800e969 	.word	0x0800e969
 800e910:	0800e981 	.word	0x0800e981
 800e914:	0800e981 	.word	0x0800e981
 800e918:	0800e981 	.word	0x0800e981
 800e91c:	0800e981 	.word	0x0800e981
 800e920:	0800e981 	.word	0x0800e981
 800e924:	0800e981 	.word	0x0800e981
 800e928:	0800e981 	.word	0x0800e981
 800e92c:	0800e971 	.word	0x0800e971
 800e930:	0800e981 	.word	0x0800e981
 800e934:	0800e981 	.word	0x0800e981
 800e938:	0800e981 	.word	0x0800e981
 800e93c:	0800e981 	.word	0x0800e981
 800e940:	0800e981 	.word	0x0800e981
 800e944:	0800e981 	.word	0x0800e981
 800e948:	0800e981 	.word	0x0800e981
 800e94c:	0800e979 	.word	0x0800e979
 800e950:	2301      	movs	r3, #1
 800e952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e956:	e1c0      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e958:	2304      	movs	r3, #4
 800e95a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e95e:	e1bc      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e960:	2308      	movs	r3, #8
 800e962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e966:	e1b8      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e968:	2310      	movs	r3, #16
 800e96a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e96e:	e1b4      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e970:	2320      	movs	r3, #32
 800e972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e976:	e1b0      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e978:	2340      	movs	r3, #64	; 0x40
 800e97a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e97e:	e1ac      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e980:	2380      	movs	r3, #128	; 0x80
 800e982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e986:	e1a8      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e988:	697b      	ldr	r3, [r7, #20]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	4a75      	ldr	r2, [pc, #468]	; (800eb64 <UART_SetConfig+0x638>)
 800e98e:	4293      	cmp	r3, r2
 800e990:	d130      	bne.n	800e9f4 <UART_SetConfig+0x4c8>
 800e992:	4b73      	ldr	r3, [pc, #460]	; (800eb60 <UART_SetConfig+0x634>)
 800e994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e996:	f003 0307 	and.w	r3, r3, #7
 800e99a:	2b05      	cmp	r3, #5
 800e99c:	d826      	bhi.n	800e9ec <UART_SetConfig+0x4c0>
 800e99e:	a201      	add	r2, pc, #4	; (adr r2, 800e9a4 <UART_SetConfig+0x478>)
 800e9a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9a4:	0800e9bd 	.word	0x0800e9bd
 800e9a8:	0800e9c5 	.word	0x0800e9c5
 800e9ac:	0800e9cd 	.word	0x0800e9cd
 800e9b0:	0800e9d5 	.word	0x0800e9d5
 800e9b4:	0800e9dd 	.word	0x0800e9dd
 800e9b8:	0800e9e5 	.word	0x0800e9e5
 800e9bc:	2300      	movs	r3, #0
 800e9be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9c2:	e18a      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e9c4:	2304      	movs	r3, #4
 800e9c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9ca:	e186      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e9cc:	2308      	movs	r3, #8
 800e9ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9d2:	e182      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e9d4:	2310      	movs	r3, #16
 800e9d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9da:	e17e      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e9dc:	2320      	movs	r3, #32
 800e9de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9e2:	e17a      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e9e4:	2340      	movs	r3, #64	; 0x40
 800e9e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9ea:	e176      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e9ec:	2380      	movs	r3, #128	; 0x80
 800e9ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9f2:	e172      	b.n	800ecda <UART_SetConfig+0x7ae>
 800e9f4:	697b      	ldr	r3, [r7, #20]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	4a5b      	ldr	r2, [pc, #364]	; (800eb68 <UART_SetConfig+0x63c>)
 800e9fa:	4293      	cmp	r3, r2
 800e9fc:	d130      	bne.n	800ea60 <UART_SetConfig+0x534>
 800e9fe:	4b58      	ldr	r3, [pc, #352]	; (800eb60 <UART_SetConfig+0x634>)
 800ea00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea02:	f003 0307 	and.w	r3, r3, #7
 800ea06:	2b05      	cmp	r3, #5
 800ea08:	d826      	bhi.n	800ea58 <UART_SetConfig+0x52c>
 800ea0a:	a201      	add	r2, pc, #4	; (adr r2, 800ea10 <UART_SetConfig+0x4e4>)
 800ea0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea10:	0800ea29 	.word	0x0800ea29
 800ea14:	0800ea31 	.word	0x0800ea31
 800ea18:	0800ea39 	.word	0x0800ea39
 800ea1c:	0800ea41 	.word	0x0800ea41
 800ea20:	0800ea49 	.word	0x0800ea49
 800ea24:	0800ea51 	.word	0x0800ea51
 800ea28:	2300      	movs	r3, #0
 800ea2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea2e:	e154      	b.n	800ecda <UART_SetConfig+0x7ae>
 800ea30:	2304      	movs	r3, #4
 800ea32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea36:	e150      	b.n	800ecda <UART_SetConfig+0x7ae>
 800ea38:	2308      	movs	r3, #8
 800ea3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea3e:	e14c      	b.n	800ecda <UART_SetConfig+0x7ae>
 800ea40:	2310      	movs	r3, #16
 800ea42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea46:	e148      	b.n	800ecda <UART_SetConfig+0x7ae>
 800ea48:	2320      	movs	r3, #32
 800ea4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea4e:	e144      	b.n	800ecda <UART_SetConfig+0x7ae>
 800ea50:	2340      	movs	r3, #64	; 0x40
 800ea52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea56:	e140      	b.n	800ecda <UART_SetConfig+0x7ae>
 800ea58:	2380      	movs	r3, #128	; 0x80
 800ea5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea5e:	e13c      	b.n	800ecda <UART_SetConfig+0x7ae>
 800ea60:	697b      	ldr	r3, [r7, #20]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	4a41      	ldr	r2, [pc, #260]	; (800eb6c <UART_SetConfig+0x640>)
 800ea66:	4293      	cmp	r3, r2
 800ea68:	f040 8082 	bne.w	800eb70 <UART_SetConfig+0x644>
 800ea6c:	4b3c      	ldr	r3, [pc, #240]	; (800eb60 <UART_SetConfig+0x634>)
 800ea6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ea74:	2b28      	cmp	r3, #40	; 0x28
 800ea76:	d86d      	bhi.n	800eb54 <UART_SetConfig+0x628>
 800ea78:	a201      	add	r2, pc, #4	; (adr r2, 800ea80 <UART_SetConfig+0x554>)
 800ea7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea7e:	bf00      	nop
 800ea80:	0800eb25 	.word	0x0800eb25
 800ea84:	0800eb55 	.word	0x0800eb55
 800ea88:	0800eb55 	.word	0x0800eb55
 800ea8c:	0800eb55 	.word	0x0800eb55
 800ea90:	0800eb55 	.word	0x0800eb55
 800ea94:	0800eb55 	.word	0x0800eb55
 800ea98:	0800eb55 	.word	0x0800eb55
 800ea9c:	0800eb55 	.word	0x0800eb55
 800eaa0:	0800eb2d 	.word	0x0800eb2d
 800eaa4:	0800eb55 	.word	0x0800eb55
 800eaa8:	0800eb55 	.word	0x0800eb55
 800eaac:	0800eb55 	.word	0x0800eb55
 800eab0:	0800eb55 	.word	0x0800eb55
 800eab4:	0800eb55 	.word	0x0800eb55
 800eab8:	0800eb55 	.word	0x0800eb55
 800eabc:	0800eb55 	.word	0x0800eb55
 800eac0:	0800eb35 	.word	0x0800eb35
 800eac4:	0800eb55 	.word	0x0800eb55
 800eac8:	0800eb55 	.word	0x0800eb55
 800eacc:	0800eb55 	.word	0x0800eb55
 800ead0:	0800eb55 	.word	0x0800eb55
 800ead4:	0800eb55 	.word	0x0800eb55
 800ead8:	0800eb55 	.word	0x0800eb55
 800eadc:	0800eb55 	.word	0x0800eb55
 800eae0:	0800eb3d 	.word	0x0800eb3d
 800eae4:	0800eb55 	.word	0x0800eb55
 800eae8:	0800eb55 	.word	0x0800eb55
 800eaec:	0800eb55 	.word	0x0800eb55
 800eaf0:	0800eb55 	.word	0x0800eb55
 800eaf4:	0800eb55 	.word	0x0800eb55
 800eaf8:	0800eb55 	.word	0x0800eb55
 800eafc:	0800eb55 	.word	0x0800eb55
 800eb00:	0800eb45 	.word	0x0800eb45
 800eb04:	0800eb55 	.word	0x0800eb55
 800eb08:	0800eb55 	.word	0x0800eb55
 800eb0c:	0800eb55 	.word	0x0800eb55
 800eb10:	0800eb55 	.word	0x0800eb55
 800eb14:	0800eb55 	.word	0x0800eb55
 800eb18:	0800eb55 	.word	0x0800eb55
 800eb1c:	0800eb55 	.word	0x0800eb55
 800eb20:	0800eb4d 	.word	0x0800eb4d
 800eb24:	2301      	movs	r3, #1
 800eb26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb2a:	e0d6      	b.n	800ecda <UART_SetConfig+0x7ae>
 800eb2c:	2304      	movs	r3, #4
 800eb2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb32:	e0d2      	b.n	800ecda <UART_SetConfig+0x7ae>
 800eb34:	2308      	movs	r3, #8
 800eb36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb3a:	e0ce      	b.n	800ecda <UART_SetConfig+0x7ae>
 800eb3c:	2310      	movs	r3, #16
 800eb3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb42:	e0ca      	b.n	800ecda <UART_SetConfig+0x7ae>
 800eb44:	2320      	movs	r3, #32
 800eb46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb4a:	e0c6      	b.n	800ecda <UART_SetConfig+0x7ae>
 800eb4c:	2340      	movs	r3, #64	; 0x40
 800eb4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb52:	e0c2      	b.n	800ecda <UART_SetConfig+0x7ae>
 800eb54:	2380      	movs	r3, #128	; 0x80
 800eb56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb5a:	e0be      	b.n	800ecda <UART_SetConfig+0x7ae>
 800eb5c:	40011400 	.word	0x40011400
 800eb60:	58024400 	.word	0x58024400
 800eb64:	40007800 	.word	0x40007800
 800eb68:	40007c00 	.word	0x40007c00
 800eb6c:	40011800 	.word	0x40011800
 800eb70:	697b      	ldr	r3, [r7, #20]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	4aad      	ldr	r2, [pc, #692]	; (800ee2c <UART_SetConfig+0x900>)
 800eb76:	4293      	cmp	r3, r2
 800eb78:	d176      	bne.n	800ec68 <UART_SetConfig+0x73c>
 800eb7a:	4bad      	ldr	r3, [pc, #692]	; (800ee30 <UART_SetConfig+0x904>)
 800eb7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800eb82:	2b28      	cmp	r3, #40	; 0x28
 800eb84:	d86c      	bhi.n	800ec60 <UART_SetConfig+0x734>
 800eb86:	a201      	add	r2, pc, #4	; (adr r2, 800eb8c <UART_SetConfig+0x660>)
 800eb88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb8c:	0800ec31 	.word	0x0800ec31
 800eb90:	0800ec61 	.word	0x0800ec61
 800eb94:	0800ec61 	.word	0x0800ec61
 800eb98:	0800ec61 	.word	0x0800ec61
 800eb9c:	0800ec61 	.word	0x0800ec61
 800eba0:	0800ec61 	.word	0x0800ec61
 800eba4:	0800ec61 	.word	0x0800ec61
 800eba8:	0800ec61 	.word	0x0800ec61
 800ebac:	0800ec39 	.word	0x0800ec39
 800ebb0:	0800ec61 	.word	0x0800ec61
 800ebb4:	0800ec61 	.word	0x0800ec61
 800ebb8:	0800ec61 	.word	0x0800ec61
 800ebbc:	0800ec61 	.word	0x0800ec61
 800ebc0:	0800ec61 	.word	0x0800ec61
 800ebc4:	0800ec61 	.word	0x0800ec61
 800ebc8:	0800ec61 	.word	0x0800ec61
 800ebcc:	0800ec41 	.word	0x0800ec41
 800ebd0:	0800ec61 	.word	0x0800ec61
 800ebd4:	0800ec61 	.word	0x0800ec61
 800ebd8:	0800ec61 	.word	0x0800ec61
 800ebdc:	0800ec61 	.word	0x0800ec61
 800ebe0:	0800ec61 	.word	0x0800ec61
 800ebe4:	0800ec61 	.word	0x0800ec61
 800ebe8:	0800ec61 	.word	0x0800ec61
 800ebec:	0800ec49 	.word	0x0800ec49
 800ebf0:	0800ec61 	.word	0x0800ec61
 800ebf4:	0800ec61 	.word	0x0800ec61
 800ebf8:	0800ec61 	.word	0x0800ec61
 800ebfc:	0800ec61 	.word	0x0800ec61
 800ec00:	0800ec61 	.word	0x0800ec61
 800ec04:	0800ec61 	.word	0x0800ec61
 800ec08:	0800ec61 	.word	0x0800ec61
 800ec0c:	0800ec51 	.word	0x0800ec51
 800ec10:	0800ec61 	.word	0x0800ec61
 800ec14:	0800ec61 	.word	0x0800ec61
 800ec18:	0800ec61 	.word	0x0800ec61
 800ec1c:	0800ec61 	.word	0x0800ec61
 800ec20:	0800ec61 	.word	0x0800ec61
 800ec24:	0800ec61 	.word	0x0800ec61
 800ec28:	0800ec61 	.word	0x0800ec61
 800ec2c:	0800ec59 	.word	0x0800ec59
 800ec30:	2301      	movs	r3, #1
 800ec32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec36:	e050      	b.n	800ecda <UART_SetConfig+0x7ae>
 800ec38:	2304      	movs	r3, #4
 800ec3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec3e:	e04c      	b.n	800ecda <UART_SetConfig+0x7ae>
 800ec40:	2308      	movs	r3, #8
 800ec42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec46:	e048      	b.n	800ecda <UART_SetConfig+0x7ae>
 800ec48:	2310      	movs	r3, #16
 800ec4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec4e:	e044      	b.n	800ecda <UART_SetConfig+0x7ae>
 800ec50:	2320      	movs	r3, #32
 800ec52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec56:	e040      	b.n	800ecda <UART_SetConfig+0x7ae>
 800ec58:	2340      	movs	r3, #64	; 0x40
 800ec5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec5e:	e03c      	b.n	800ecda <UART_SetConfig+0x7ae>
 800ec60:	2380      	movs	r3, #128	; 0x80
 800ec62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec66:	e038      	b.n	800ecda <UART_SetConfig+0x7ae>
 800ec68:	697b      	ldr	r3, [r7, #20]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	4a71      	ldr	r2, [pc, #452]	; (800ee34 <UART_SetConfig+0x908>)
 800ec6e:	4293      	cmp	r3, r2
 800ec70:	d130      	bne.n	800ecd4 <UART_SetConfig+0x7a8>
 800ec72:	4b6f      	ldr	r3, [pc, #444]	; (800ee30 <UART_SetConfig+0x904>)
 800ec74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec76:	f003 0307 	and.w	r3, r3, #7
 800ec7a:	2b05      	cmp	r3, #5
 800ec7c:	d826      	bhi.n	800eccc <UART_SetConfig+0x7a0>
 800ec7e:	a201      	add	r2, pc, #4	; (adr r2, 800ec84 <UART_SetConfig+0x758>)
 800ec80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec84:	0800ec9d 	.word	0x0800ec9d
 800ec88:	0800eca5 	.word	0x0800eca5
 800ec8c:	0800ecad 	.word	0x0800ecad
 800ec90:	0800ecb5 	.word	0x0800ecb5
 800ec94:	0800ecbd 	.word	0x0800ecbd
 800ec98:	0800ecc5 	.word	0x0800ecc5
 800ec9c:	2302      	movs	r3, #2
 800ec9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eca2:	e01a      	b.n	800ecda <UART_SetConfig+0x7ae>
 800eca4:	2304      	movs	r3, #4
 800eca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecaa:	e016      	b.n	800ecda <UART_SetConfig+0x7ae>
 800ecac:	2308      	movs	r3, #8
 800ecae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecb2:	e012      	b.n	800ecda <UART_SetConfig+0x7ae>
 800ecb4:	2310      	movs	r3, #16
 800ecb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecba:	e00e      	b.n	800ecda <UART_SetConfig+0x7ae>
 800ecbc:	2320      	movs	r3, #32
 800ecbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecc2:	e00a      	b.n	800ecda <UART_SetConfig+0x7ae>
 800ecc4:	2340      	movs	r3, #64	; 0x40
 800ecc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecca:	e006      	b.n	800ecda <UART_SetConfig+0x7ae>
 800eccc:	2380      	movs	r3, #128	; 0x80
 800ecce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecd2:	e002      	b.n	800ecda <UART_SetConfig+0x7ae>
 800ecd4:	2380      	movs	r3, #128	; 0x80
 800ecd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ecda:	697b      	ldr	r3, [r7, #20]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	4a55      	ldr	r2, [pc, #340]	; (800ee34 <UART_SetConfig+0x908>)
 800ece0:	4293      	cmp	r3, r2
 800ece2:	f040 80f8 	bne.w	800eed6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ece6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ecea:	2b20      	cmp	r3, #32
 800ecec:	dc46      	bgt.n	800ed7c <UART_SetConfig+0x850>
 800ecee:	2b02      	cmp	r3, #2
 800ecf0:	db75      	blt.n	800edde <UART_SetConfig+0x8b2>
 800ecf2:	3b02      	subs	r3, #2
 800ecf4:	2b1e      	cmp	r3, #30
 800ecf6:	d872      	bhi.n	800edde <UART_SetConfig+0x8b2>
 800ecf8:	a201      	add	r2, pc, #4	; (adr r2, 800ed00 <UART_SetConfig+0x7d4>)
 800ecfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecfe:	bf00      	nop
 800ed00:	0800ed83 	.word	0x0800ed83
 800ed04:	0800eddf 	.word	0x0800eddf
 800ed08:	0800ed8b 	.word	0x0800ed8b
 800ed0c:	0800eddf 	.word	0x0800eddf
 800ed10:	0800eddf 	.word	0x0800eddf
 800ed14:	0800eddf 	.word	0x0800eddf
 800ed18:	0800ed9b 	.word	0x0800ed9b
 800ed1c:	0800eddf 	.word	0x0800eddf
 800ed20:	0800eddf 	.word	0x0800eddf
 800ed24:	0800eddf 	.word	0x0800eddf
 800ed28:	0800eddf 	.word	0x0800eddf
 800ed2c:	0800eddf 	.word	0x0800eddf
 800ed30:	0800eddf 	.word	0x0800eddf
 800ed34:	0800eddf 	.word	0x0800eddf
 800ed38:	0800edab 	.word	0x0800edab
 800ed3c:	0800eddf 	.word	0x0800eddf
 800ed40:	0800eddf 	.word	0x0800eddf
 800ed44:	0800eddf 	.word	0x0800eddf
 800ed48:	0800eddf 	.word	0x0800eddf
 800ed4c:	0800eddf 	.word	0x0800eddf
 800ed50:	0800eddf 	.word	0x0800eddf
 800ed54:	0800eddf 	.word	0x0800eddf
 800ed58:	0800eddf 	.word	0x0800eddf
 800ed5c:	0800eddf 	.word	0x0800eddf
 800ed60:	0800eddf 	.word	0x0800eddf
 800ed64:	0800eddf 	.word	0x0800eddf
 800ed68:	0800eddf 	.word	0x0800eddf
 800ed6c:	0800eddf 	.word	0x0800eddf
 800ed70:	0800eddf 	.word	0x0800eddf
 800ed74:	0800eddf 	.word	0x0800eddf
 800ed78:	0800edd1 	.word	0x0800edd1
 800ed7c:	2b40      	cmp	r3, #64	; 0x40
 800ed7e:	d02a      	beq.n	800edd6 <UART_SetConfig+0x8aa>
 800ed80:	e02d      	b.n	800edde <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ed82:	f7fe f879 	bl	800ce78 <HAL_RCCEx_GetD3PCLK1Freq>
 800ed86:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ed88:	e02f      	b.n	800edea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ed8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f7fe f888 	bl	800cea4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ed94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed98:	e027      	b.n	800edea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ed9a:	f107 0318 	add.w	r3, r7, #24
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f7fe f9d4 	bl	800d14c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eda4:	69fb      	ldr	r3, [r7, #28]
 800eda6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eda8:	e01f      	b.n	800edea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800edaa:	4b21      	ldr	r3, [pc, #132]	; (800ee30 <UART_SetConfig+0x904>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	f003 0320 	and.w	r3, r3, #32
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d009      	beq.n	800edca <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800edb6:	4b1e      	ldr	r3, [pc, #120]	; (800ee30 <UART_SetConfig+0x904>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	08db      	lsrs	r3, r3, #3
 800edbc:	f003 0303 	and.w	r3, r3, #3
 800edc0:	4a1d      	ldr	r2, [pc, #116]	; (800ee38 <UART_SetConfig+0x90c>)
 800edc2:	fa22 f303 	lsr.w	r3, r2, r3
 800edc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800edc8:	e00f      	b.n	800edea <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800edca:	4b1b      	ldr	r3, [pc, #108]	; (800ee38 <UART_SetConfig+0x90c>)
 800edcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800edce:	e00c      	b.n	800edea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800edd0:	4b1a      	ldr	r3, [pc, #104]	; (800ee3c <UART_SetConfig+0x910>)
 800edd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800edd4:	e009      	b.n	800edea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800edd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800edda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eddc:	e005      	b.n	800edea <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800edde:	2300      	movs	r3, #0
 800ede0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ede2:	2301      	movs	r3, #1
 800ede4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ede8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800edea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edec:	2b00      	cmp	r3, #0
 800edee:	f000 81ee 	beq.w	800f1ce <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800edf2:	697b      	ldr	r3, [r7, #20]
 800edf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edf6:	4a12      	ldr	r2, [pc, #72]	; (800ee40 <UART_SetConfig+0x914>)
 800edf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800edfc:	461a      	mov	r2, r3
 800edfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee00:	fbb3 f3f2 	udiv	r3, r3, r2
 800ee04:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ee06:	697b      	ldr	r3, [r7, #20]
 800ee08:	685a      	ldr	r2, [r3, #4]
 800ee0a:	4613      	mov	r3, r2
 800ee0c:	005b      	lsls	r3, r3, #1
 800ee0e:	4413      	add	r3, r2
 800ee10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee12:	429a      	cmp	r2, r3
 800ee14:	d305      	bcc.n	800ee22 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ee16:	697b      	ldr	r3, [r7, #20]
 800ee18:	685b      	ldr	r3, [r3, #4]
 800ee1a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ee1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee1e:	429a      	cmp	r2, r3
 800ee20:	d910      	bls.n	800ee44 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800ee22:	2301      	movs	r3, #1
 800ee24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ee28:	e1d1      	b.n	800f1ce <UART_SetConfig+0xca2>
 800ee2a:	bf00      	nop
 800ee2c:	40011c00 	.word	0x40011c00
 800ee30:	58024400 	.word	0x58024400
 800ee34:	58000c00 	.word	0x58000c00
 800ee38:	03d09000 	.word	0x03d09000
 800ee3c:	003d0900 	.word	0x003d0900
 800ee40:	08019920 	.word	0x08019920
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ee44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee46:	2200      	movs	r2, #0
 800ee48:	60bb      	str	r3, [r7, #8]
 800ee4a:	60fa      	str	r2, [r7, #12]
 800ee4c:	697b      	ldr	r3, [r7, #20]
 800ee4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee50:	4ac0      	ldr	r2, [pc, #768]	; (800f154 <UART_SetConfig+0xc28>)
 800ee52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee56:	b29b      	uxth	r3, r3
 800ee58:	2200      	movs	r2, #0
 800ee5a:	603b      	str	r3, [r7, #0]
 800ee5c:	607a      	str	r2, [r7, #4]
 800ee5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ee66:	f7f1 fa93 	bl	8000390 <__aeabi_uldivmod>
 800ee6a:	4602      	mov	r2, r0
 800ee6c:	460b      	mov	r3, r1
 800ee6e:	4610      	mov	r0, r2
 800ee70:	4619      	mov	r1, r3
 800ee72:	f04f 0200 	mov.w	r2, #0
 800ee76:	f04f 0300 	mov.w	r3, #0
 800ee7a:	020b      	lsls	r3, r1, #8
 800ee7c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ee80:	0202      	lsls	r2, r0, #8
 800ee82:	6979      	ldr	r1, [r7, #20]
 800ee84:	6849      	ldr	r1, [r1, #4]
 800ee86:	0849      	lsrs	r1, r1, #1
 800ee88:	2000      	movs	r0, #0
 800ee8a:	460c      	mov	r4, r1
 800ee8c:	4605      	mov	r5, r0
 800ee8e:	eb12 0804 	adds.w	r8, r2, r4
 800ee92:	eb43 0905 	adc.w	r9, r3, r5
 800ee96:	697b      	ldr	r3, [r7, #20]
 800ee98:	685b      	ldr	r3, [r3, #4]
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	469a      	mov	sl, r3
 800ee9e:	4693      	mov	fp, r2
 800eea0:	4652      	mov	r2, sl
 800eea2:	465b      	mov	r3, fp
 800eea4:	4640      	mov	r0, r8
 800eea6:	4649      	mov	r1, r9
 800eea8:	f7f1 fa72 	bl	8000390 <__aeabi_uldivmod>
 800eeac:	4602      	mov	r2, r0
 800eeae:	460b      	mov	r3, r1
 800eeb0:	4613      	mov	r3, r2
 800eeb2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800eeb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800eeba:	d308      	bcc.n	800eece <UART_SetConfig+0x9a2>
 800eebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eebe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eec2:	d204      	bcs.n	800eece <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800eec4:	697b      	ldr	r3, [r7, #20]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eeca:	60da      	str	r2, [r3, #12]
 800eecc:	e17f      	b.n	800f1ce <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800eece:	2301      	movs	r3, #1
 800eed0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800eed4:	e17b      	b.n	800f1ce <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800eed6:	697b      	ldr	r3, [r7, #20]
 800eed8:	69db      	ldr	r3, [r3, #28]
 800eeda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eede:	f040 80bd 	bne.w	800f05c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800eee2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800eee6:	2b20      	cmp	r3, #32
 800eee8:	dc48      	bgt.n	800ef7c <UART_SetConfig+0xa50>
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	db7b      	blt.n	800efe6 <UART_SetConfig+0xaba>
 800eeee:	2b20      	cmp	r3, #32
 800eef0:	d879      	bhi.n	800efe6 <UART_SetConfig+0xaba>
 800eef2:	a201      	add	r2, pc, #4	; (adr r2, 800eef8 <UART_SetConfig+0x9cc>)
 800eef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eef8:	0800ef83 	.word	0x0800ef83
 800eefc:	0800ef8b 	.word	0x0800ef8b
 800ef00:	0800efe7 	.word	0x0800efe7
 800ef04:	0800efe7 	.word	0x0800efe7
 800ef08:	0800ef93 	.word	0x0800ef93
 800ef0c:	0800efe7 	.word	0x0800efe7
 800ef10:	0800efe7 	.word	0x0800efe7
 800ef14:	0800efe7 	.word	0x0800efe7
 800ef18:	0800efa3 	.word	0x0800efa3
 800ef1c:	0800efe7 	.word	0x0800efe7
 800ef20:	0800efe7 	.word	0x0800efe7
 800ef24:	0800efe7 	.word	0x0800efe7
 800ef28:	0800efe7 	.word	0x0800efe7
 800ef2c:	0800efe7 	.word	0x0800efe7
 800ef30:	0800efe7 	.word	0x0800efe7
 800ef34:	0800efe7 	.word	0x0800efe7
 800ef38:	0800efb3 	.word	0x0800efb3
 800ef3c:	0800efe7 	.word	0x0800efe7
 800ef40:	0800efe7 	.word	0x0800efe7
 800ef44:	0800efe7 	.word	0x0800efe7
 800ef48:	0800efe7 	.word	0x0800efe7
 800ef4c:	0800efe7 	.word	0x0800efe7
 800ef50:	0800efe7 	.word	0x0800efe7
 800ef54:	0800efe7 	.word	0x0800efe7
 800ef58:	0800efe7 	.word	0x0800efe7
 800ef5c:	0800efe7 	.word	0x0800efe7
 800ef60:	0800efe7 	.word	0x0800efe7
 800ef64:	0800efe7 	.word	0x0800efe7
 800ef68:	0800efe7 	.word	0x0800efe7
 800ef6c:	0800efe7 	.word	0x0800efe7
 800ef70:	0800efe7 	.word	0x0800efe7
 800ef74:	0800efe7 	.word	0x0800efe7
 800ef78:	0800efd9 	.word	0x0800efd9
 800ef7c:	2b40      	cmp	r3, #64	; 0x40
 800ef7e:	d02e      	beq.n	800efde <UART_SetConfig+0xab2>
 800ef80:	e031      	b.n	800efe6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ef82:	f7fc fd8f 	bl	800baa4 <HAL_RCC_GetPCLK1Freq>
 800ef86:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ef88:	e033      	b.n	800eff2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ef8a:	f7fc fda1 	bl	800bad0 <HAL_RCC_GetPCLK2Freq>
 800ef8e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ef90:	e02f      	b.n	800eff2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ef92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ef96:	4618      	mov	r0, r3
 800ef98:	f7fd ff84 	bl	800cea4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ef9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800efa0:	e027      	b.n	800eff2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800efa2:	f107 0318 	add.w	r3, r7, #24
 800efa6:	4618      	mov	r0, r3
 800efa8:	f7fe f8d0 	bl	800d14c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800efac:	69fb      	ldr	r3, [r7, #28]
 800efae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800efb0:	e01f      	b.n	800eff2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800efb2:	4b69      	ldr	r3, [pc, #420]	; (800f158 <UART_SetConfig+0xc2c>)
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	f003 0320 	and.w	r3, r3, #32
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d009      	beq.n	800efd2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800efbe:	4b66      	ldr	r3, [pc, #408]	; (800f158 <UART_SetConfig+0xc2c>)
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	08db      	lsrs	r3, r3, #3
 800efc4:	f003 0303 	and.w	r3, r3, #3
 800efc8:	4a64      	ldr	r2, [pc, #400]	; (800f15c <UART_SetConfig+0xc30>)
 800efca:	fa22 f303 	lsr.w	r3, r2, r3
 800efce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800efd0:	e00f      	b.n	800eff2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800efd2:	4b62      	ldr	r3, [pc, #392]	; (800f15c <UART_SetConfig+0xc30>)
 800efd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800efd6:	e00c      	b.n	800eff2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800efd8:	4b61      	ldr	r3, [pc, #388]	; (800f160 <UART_SetConfig+0xc34>)
 800efda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800efdc:	e009      	b.n	800eff2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800efde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800efe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800efe4:	e005      	b.n	800eff2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800efe6:	2300      	movs	r3, #0
 800efe8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800efea:	2301      	movs	r3, #1
 800efec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800eff0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800eff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	f000 80ea 	beq.w	800f1ce <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800effa:	697b      	ldr	r3, [r7, #20]
 800effc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800effe:	4a55      	ldr	r2, [pc, #340]	; (800f154 <UART_SetConfig+0xc28>)
 800f000:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f004:	461a      	mov	r2, r3
 800f006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f008:	fbb3 f3f2 	udiv	r3, r3, r2
 800f00c:	005a      	lsls	r2, r3, #1
 800f00e:	697b      	ldr	r3, [r7, #20]
 800f010:	685b      	ldr	r3, [r3, #4]
 800f012:	085b      	lsrs	r3, r3, #1
 800f014:	441a      	add	r2, r3
 800f016:	697b      	ldr	r3, [r7, #20]
 800f018:	685b      	ldr	r3, [r3, #4]
 800f01a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f01e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f022:	2b0f      	cmp	r3, #15
 800f024:	d916      	bls.n	800f054 <UART_SetConfig+0xb28>
 800f026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f02c:	d212      	bcs.n	800f054 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f030:	b29b      	uxth	r3, r3
 800f032:	f023 030f 	bic.w	r3, r3, #15
 800f036:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f03a:	085b      	lsrs	r3, r3, #1
 800f03c:	b29b      	uxth	r3, r3
 800f03e:	f003 0307 	and.w	r3, r3, #7
 800f042:	b29a      	uxth	r2, r3
 800f044:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f046:	4313      	orrs	r3, r2
 800f048:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f04a:	697b      	ldr	r3, [r7, #20]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f050:	60da      	str	r2, [r3, #12]
 800f052:	e0bc      	b.n	800f1ce <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f054:	2301      	movs	r3, #1
 800f056:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f05a:	e0b8      	b.n	800f1ce <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f05c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f060:	2b20      	cmp	r3, #32
 800f062:	dc4b      	bgt.n	800f0fc <UART_SetConfig+0xbd0>
 800f064:	2b00      	cmp	r3, #0
 800f066:	f2c0 8087 	blt.w	800f178 <UART_SetConfig+0xc4c>
 800f06a:	2b20      	cmp	r3, #32
 800f06c:	f200 8084 	bhi.w	800f178 <UART_SetConfig+0xc4c>
 800f070:	a201      	add	r2, pc, #4	; (adr r2, 800f078 <UART_SetConfig+0xb4c>)
 800f072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f076:	bf00      	nop
 800f078:	0800f103 	.word	0x0800f103
 800f07c:	0800f10b 	.word	0x0800f10b
 800f080:	0800f179 	.word	0x0800f179
 800f084:	0800f179 	.word	0x0800f179
 800f088:	0800f113 	.word	0x0800f113
 800f08c:	0800f179 	.word	0x0800f179
 800f090:	0800f179 	.word	0x0800f179
 800f094:	0800f179 	.word	0x0800f179
 800f098:	0800f123 	.word	0x0800f123
 800f09c:	0800f179 	.word	0x0800f179
 800f0a0:	0800f179 	.word	0x0800f179
 800f0a4:	0800f179 	.word	0x0800f179
 800f0a8:	0800f179 	.word	0x0800f179
 800f0ac:	0800f179 	.word	0x0800f179
 800f0b0:	0800f179 	.word	0x0800f179
 800f0b4:	0800f179 	.word	0x0800f179
 800f0b8:	0800f133 	.word	0x0800f133
 800f0bc:	0800f179 	.word	0x0800f179
 800f0c0:	0800f179 	.word	0x0800f179
 800f0c4:	0800f179 	.word	0x0800f179
 800f0c8:	0800f179 	.word	0x0800f179
 800f0cc:	0800f179 	.word	0x0800f179
 800f0d0:	0800f179 	.word	0x0800f179
 800f0d4:	0800f179 	.word	0x0800f179
 800f0d8:	0800f179 	.word	0x0800f179
 800f0dc:	0800f179 	.word	0x0800f179
 800f0e0:	0800f179 	.word	0x0800f179
 800f0e4:	0800f179 	.word	0x0800f179
 800f0e8:	0800f179 	.word	0x0800f179
 800f0ec:	0800f179 	.word	0x0800f179
 800f0f0:	0800f179 	.word	0x0800f179
 800f0f4:	0800f179 	.word	0x0800f179
 800f0f8:	0800f16b 	.word	0x0800f16b
 800f0fc:	2b40      	cmp	r3, #64	; 0x40
 800f0fe:	d037      	beq.n	800f170 <UART_SetConfig+0xc44>
 800f100:	e03a      	b.n	800f178 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f102:	f7fc fccf 	bl	800baa4 <HAL_RCC_GetPCLK1Freq>
 800f106:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f108:	e03c      	b.n	800f184 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f10a:	f7fc fce1 	bl	800bad0 <HAL_RCC_GetPCLK2Freq>
 800f10e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f110:	e038      	b.n	800f184 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f116:	4618      	mov	r0, r3
 800f118:	f7fd fec4 	bl	800cea4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f11e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f120:	e030      	b.n	800f184 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f122:	f107 0318 	add.w	r3, r7, #24
 800f126:	4618      	mov	r0, r3
 800f128:	f7fe f810 	bl	800d14c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f12c:	69fb      	ldr	r3, [r7, #28]
 800f12e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f130:	e028      	b.n	800f184 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f132:	4b09      	ldr	r3, [pc, #36]	; (800f158 <UART_SetConfig+0xc2c>)
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	f003 0320 	and.w	r3, r3, #32
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d012      	beq.n	800f164 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f13e:	4b06      	ldr	r3, [pc, #24]	; (800f158 <UART_SetConfig+0xc2c>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	08db      	lsrs	r3, r3, #3
 800f144:	f003 0303 	and.w	r3, r3, #3
 800f148:	4a04      	ldr	r2, [pc, #16]	; (800f15c <UART_SetConfig+0xc30>)
 800f14a:	fa22 f303 	lsr.w	r3, r2, r3
 800f14e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f150:	e018      	b.n	800f184 <UART_SetConfig+0xc58>
 800f152:	bf00      	nop
 800f154:	08019920 	.word	0x08019920
 800f158:	58024400 	.word	0x58024400
 800f15c:	03d09000 	.word	0x03d09000
 800f160:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800f164:	4b24      	ldr	r3, [pc, #144]	; (800f1f8 <UART_SetConfig+0xccc>)
 800f166:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f168:	e00c      	b.n	800f184 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f16a:	4b24      	ldr	r3, [pc, #144]	; (800f1fc <UART_SetConfig+0xcd0>)
 800f16c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f16e:	e009      	b.n	800f184 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f170:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f174:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f176:	e005      	b.n	800f184 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800f178:	2300      	movs	r3, #0
 800f17a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f17c:	2301      	movs	r3, #1
 800f17e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f182:	bf00      	nop
    }

    if (pclk != 0U)
 800f184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f186:	2b00      	cmp	r3, #0
 800f188:	d021      	beq.n	800f1ce <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f18a:	697b      	ldr	r3, [r7, #20]
 800f18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f18e:	4a1c      	ldr	r2, [pc, #112]	; (800f200 <UART_SetConfig+0xcd4>)
 800f190:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f194:	461a      	mov	r2, r3
 800f196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f198:	fbb3 f2f2 	udiv	r2, r3, r2
 800f19c:	697b      	ldr	r3, [r7, #20]
 800f19e:	685b      	ldr	r3, [r3, #4]
 800f1a0:	085b      	lsrs	r3, r3, #1
 800f1a2:	441a      	add	r2, r3
 800f1a4:	697b      	ldr	r3, [r7, #20]
 800f1a6:	685b      	ldr	r3, [r3, #4]
 800f1a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f1ac:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1b0:	2b0f      	cmp	r3, #15
 800f1b2:	d909      	bls.n	800f1c8 <UART_SetConfig+0xc9c>
 800f1b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f1ba:	d205      	bcs.n	800f1c8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1be:	b29a      	uxth	r2, r3
 800f1c0:	697b      	ldr	r3, [r7, #20]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	60da      	str	r2, [r3, #12]
 800f1c6:	e002      	b.n	800f1ce <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f1c8:	2301      	movs	r3, #1
 800f1ca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f1ce:	697b      	ldr	r3, [r7, #20]
 800f1d0:	2201      	movs	r2, #1
 800f1d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f1d6:	697b      	ldr	r3, [r7, #20]
 800f1d8:	2201      	movs	r2, #1
 800f1da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f1de:	697b      	ldr	r3, [r7, #20]
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f1e4:	697b      	ldr	r3, [r7, #20]
 800f1e6:	2200      	movs	r2, #0
 800f1e8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f1ea:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	3748      	adds	r7, #72	; 0x48
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f1f8:	03d09000 	.word	0x03d09000
 800f1fc:	003d0900 	.word	0x003d0900
 800f200:	08019920 	.word	0x08019920

0800f204 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f204:	b480      	push	{r7}
 800f206:	b083      	sub	sp, #12
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f210:	f003 0301 	and.w	r3, r3, #1
 800f214:	2b00      	cmp	r3, #0
 800f216:	d00a      	beq.n	800f22e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	685b      	ldr	r3, [r3, #4]
 800f21e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	430a      	orrs	r2, r1
 800f22c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f232:	f003 0302 	and.w	r3, r3, #2
 800f236:	2b00      	cmp	r3, #0
 800f238:	d00a      	beq.n	800f250 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	685b      	ldr	r3, [r3, #4]
 800f240:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	430a      	orrs	r2, r1
 800f24e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f254:	f003 0304 	and.w	r3, r3, #4
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d00a      	beq.n	800f272 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	685b      	ldr	r3, [r3, #4]
 800f262:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	430a      	orrs	r2, r1
 800f270:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f276:	f003 0308 	and.w	r3, r3, #8
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d00a      	beq.n	800f294 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	685b      	ldr	r3, [r3, #4]
 800f284:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	430a      	orrs	r2, r1
 800f292:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f298:	f003 0310 	and.w	r3, r3, #16
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d00a      	beq.n	800f2b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	689b      	ldr	r3, [r3, #8]
 800f2a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	430a      	orrs	r2, r1
 800f2b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2ba:	f003 0320 	and.w	r3, r3, #32
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d00a      	beq.n	800f2d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	689b      	ldr	r3, [r3, #8]
 800f2c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	430a      	orrs	r2, r1
 800f2d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d01a      	beq.n	800f31a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	685b      	ldr	r3, [r3, #4]
 800f2ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	430a      	orrs	r2, r1
 800f2f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f302:	d10a      	bne.n	800f31a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	685b      	ldr	r3, [r3, #4]
 800f30a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	430a      	orrs	r2, r1
 800f318:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f31e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f322:	2b00      	cmp	r3, #0
 800f324:	d00a      	beq.n	800f33c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	685b      	ldr	r3, [r3, #4]
 800f32c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	430a      	orrs	r2, r1
 800f33a:	605a      	str	r2, [r3, #4]
  }
}
 800f33c:	bf00      	nop
 800f33e:	370c      	adds	r7, #12
 800f340:	46bd      	mov	sp, r7
 800f342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f346:	4770      	bx	lr

0800f348 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b098      	sub	sp, #96	; 0x60
 800f34c:	af02      	add	r7, sp, #8
 800f34e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	2200      	movs	r2, #0
 800f354:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f358:	f7f5 fa0e 	bl	8004778 <HAL_GetTick>
 800f35c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	f003 0308 	and.w	r3, r3, #8
 800f368:	2b08      	cmp	r3, #8
 800f36a:	d12f      	bne.n	800f3cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f36c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f370:	9300      	str	r3, [sp, #0]
 800f372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f374:	2200      	movs	r2, #0
 800f376:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	f000 f88e 	bl	800f49c <UART_WaitOnFlagUntilTimeout>
 800f380:	4603      	mov	r3, r0
 800f382:	2b00      	cmp	r3, #0
 800f384:	d022      	beq.n	800f3cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f38e:	e853 3f00 	ldrex	r3, [r3]
 800f392:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f396:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f39a:	653b      	str	r3, [r7, #80]	; 0x50
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	461a      	mov	r2, r3
 800f3a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3a4:	647b      	str	r3, [r7, #68]	; 0x44
 800f3a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f3aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f3ac:	e841 2300 	strex	r3, r2, [r1]
 800f3b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f3b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d1e6      	bne.n	800f386 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	2220      	movs	r2, #32
 800f3bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f3c8:	2303      	movs	r3, #3
 800f3ca:	e063      	b.n	800f494 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	f003 0304 	and.w	r3, r3, #4
 800f3d6:	2b04      	cmp	r3, #4
 800f3d8:	d149      	bne.n	800f46e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f3da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f3de:	9300      	str	r3, [sp, #0]
 800f3e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f000 f857 	bl	800f49c <UART_WaitOnFlagUntilTimeout>
 800f3ee:	4603      	mov	r3, r0
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d03c      	beq.n	800f46e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3fc:	e853 3f00 	ldrex	r3, [r3]
 800f400:	623b      	str	r3, [r7, #32]
   return(result);
 800f402:	6a3b      	ldr	r3, [r7, #32]
 800f404:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f408:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	461a      	mov	r2, r3
 800f410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f412:	633b      	str	r3, [r7, #48]	; 0x30
 800f414:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f416:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f41a:	e841 2300 	strex	r3, r2, [r1]
 800f41e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f422:	2b00      	cmp	r3, #0
 800f424:	d1e6      	bne.n	800f3f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	3308      	adds	r3, #8
 800f42c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f42e:	693b      	ldr	r3, [r7, #16]
 800f430:	e853 3f00 	ldrex	r3, [r3]
 800f434:	60fb      	str	r3, [r7, #12]
   return(result);
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	f023 0301 	bic.w	r3, r3, #1
 800f43c:	64bb      	str	r3, [r7, #72]	; 0x48
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	3308      	adds	r3, #8
 800f444:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f446:	61fa      	str	r2, [r7, #28]
 800f448:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f44a:	69b9      	ldr	r1, [r7, #24]
 800f44c:	69fa      	ldr	r2, [r7, #28]
 800f44e:	e841 2300 	strex	r3, r2, [r1]
 800f452:	617b      	str	r3, [r7, #20]
   return(result);
 800f454:	697b      	ldr	r3, [r7, #20]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d1e5      	bne.n	800f426 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	2220      	movs	r2, #32
 800f45e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	2200      	movs	r2, #0
 800f466:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f46a:	2303      	movs	r3, #3
 800f46c:	e012      	b.n	800f494 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	2220      	movs	r2, #32
 800f472:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	2220      	movs	r2, #32
 800f47a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	2200      	movs	r2, #0
 800f482:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2200      	movs	r2, #0
 800f488:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	2200      	movs	r2, #0
 800f48e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f492:	2300      	movs	r3, #0
}
 800f494:	4618      	mov	r0, r3
 800f496:	3758      	adds	r7, #88	; 0x58
 800f498:	46bd      	mov	sp, r7
 800f49a:	bd80      	pop	{r7, pc}

0800f49c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b084      	sub	sp, #16
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	60f8      	str	r0, [r7, #12]
 800f4a4:	60b9      	str	r1, [r7, #8]
 800f4a6:	603b      	str	r3, [r7, #0]
 800f4a8:	4613      	mov	r3, r2
 800f4aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f4ac:	e049      	b.n	800f542 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f4ae:	69bb      	ldr	r3, [r7, #24]
 800f4b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4b4:	d045      	beq.n	800f542 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f4b6:	f7f5 f95f 	bl	8004778 <HAL_GetTick>
 800f4ba:	4602      	mov	r2, r0
 800f4bc:	683b      	ldr	r3, [r7, #0]
 800f4be:	1ad3      	subs	r3, r2, r3
 800f4c0:	69ba      	ldr	r2, [r7, #24]
 800f4c2:	429a      	cmp	r2, r3
 800f4c4:	d302      	bcc.n	800f4cc <UART_WaitOnFlagUntilTimeout+0x30>
 800f4c6:	69bb      	ldr	r3, [r7, #24]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d101      	bne.n	800f4d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f4cc:	2303      	movs	r3, #3
 800f4ce:	e048      	b.n	800f562 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	f003 0304 	and.w	r3, r3, #4
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d031      	beq.n	800f542 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	69db      	ldr	r3, [r3, #28]
 800f4e4:	f003 0308 	and.w	r3, r3, #8
 800f4e8:	2b08      	cmp	r3, #8
 800f4ea:	d110      	bne.n	800f50e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	2208      	movs	r2, #8
 800f4f2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800f4f4:	68f8      	ldr	r0, [r7, #12]
 800f4f6:	f000 f839 	bl	800f56c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	2208      	movs	r2, #8
 800f4fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	2200      	movs	r2, #0
 800f506:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800f50a:	2301      	movs	r3, #1
 800f50c:	e029      	b.n	800f562 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	69db      	ldr	r3, [r3, #28]
 800f514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f518:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f51c:	d111      	bne.n	800f542 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f526:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f528:	68f8      	ldr	r0, [r7, #12]
 800f52a:	f000 f81f 	bl	800f56c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	2220      	movs	r2, #32
 800f532:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	2200      	movs	r2, #0
 800f53a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f53e:	2303      	movs	r3, #3
 800f540:	e00f      	b.n	800f562 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	69da      	ldr	r2, [r3, #28]
 800f548:	68bb      	ldr	r3, [r7, #8]
 800f54a:	4013      	ands	r3, r2
 800f54c:	68ba      	ldr	r2, [r7, #8]
 800f54e:	429a      	cmp	r2, r3
 800f550:	bf0c      	ite	eq
 800f552:	2301      	moveq	r3, #1
 800f554:	2300      	movne	r3, #0
 800f556:	b2db      	uxtb	r3, r3
 800f558:	461a      	mov	r2, r3
 800f55a:	79fb      	ldrb	r3, [r7, #7]
 800f55c:	429a      	cmp	r2, r3
 800f55e:	d0a6      	beq.n	800f4ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f560:	2300      	movs	r3, #0
}
 800f562:	4618      	mov	r0, r3
 800f564:	3710      	adds	r7, #16
 800f566:	46bd      	mov	sp, r7
 800f568:	bd80      	pop	{r7, pc}
	...

0800f56c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f56c:	b480      	push	{r7}
 800f56e:	b095      	sub	sp, #84	; 0x54
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f57a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f57c:	e853 3f00 	ldrex	r3, [r3]
 800f580:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f584:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f588:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	461a      	mov	r2, r3
 800f590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f592:	643b      	str	r3, [r7, #64]	; 0x40
 800f594:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f596:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f598:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f59a:	e841 2300 	strex	r3, r2, [r1]
 800f59e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d1e6      	bne.n	800f574 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	3308      	adds	r3, #8
 800f5ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5ae:	6a3b      	ldr	r3, [r7, #32]
 800f5b0:	e853 3f00 	ldrex	r3, [r3]
 800f5b4:	61fb      	str	r3, [r7, #28]
   return(result);
 800f5b6:	69fa      	ldr	r2, [r7, #28]
 800f5b8:	4b1e      	ldr	r3, [pc, #120]	; (800f634 <UART_EndRxTransfer+0xc8>)
 800f5ba:	4013      	ands	r3, r2
 800f5bc:	64bb      	str	r3, [r7, #72]	; 0x48
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	3308      	adds	r3, #8
 800f5c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f5c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f5c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f5cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f5ce:	e841 2300 	strex	r3, r2, [r1]
 800f5d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d1e5      	bne.n	800f5a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5de:	2b01      	cmp	r3, #1
 800f5e0:	d118      	bne.n	800f614 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	e853 3f00 	ldrex	r3, [r3]
 800f5ee:	60bb      	str	r3, [r7, #8]
   return(result);
 800f5f0:	68bb      	ldr	r3, [r7, #8]
 800f5f2:	f023 0310 	bic.w	r3, r3, #16
 800f5f6:	647b      	str	r3, [r7, #68]	; 0x44
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	461a      	mov	r2, r3
 800f5fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f600:	61bb      	str	r3, [r7, #24]
 800f602:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f604:	6979      	ldr	r1, [r7, #20]
 800f606:	69ba      	ldr	r2, [r7, #24]
 800f608:	e841 2300 	strex	r3, r2, [r1]
 800f60c:	613b      	str	r3, [r7, #16]
   return(result);
 800f60e:	693b      	ldr	r3, [r7, #16]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d1e6      	bne.n	800f5e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	2220      	movs	r2, #32
 800f618:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	2200      	movs	r2, #0
 800f620:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	2200      	movs	r2, #0
 800f626:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f628:	bf00      	nop
 800f62a:	3754      	adds	r7, #84	; 0x54
 800f62c:	46bd      	mov	sp, r7
 800f62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f632:	4770      	bx	lr
 800f634:	effffffe 	.word	0xeffffffe

0800f638 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b084      	sub	sp, #16
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f644:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	2200      	movs	r2, #0
 800f64a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	2200      	movs	r2, #0
 800f652:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f656:	68f8      	ldr	r0, [r7, #12]
 800f658:	f7fe ff52 	bl	800e500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f65c:	bf00      	nop
 800f65e:	3710      	adds	r7, #16
 800f660:	46bd      	mov	sp, r7
 800f662:	bd80      	pop	{r7, pc}

0800f664 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b088      	sub	sp, #32
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	e853 3f00 	ldrex	r3, [r3]
 800f678:	60bb      	str	r3, [r7, #8]
   return(result);
 800f67a:	68bb      	ldr	r3, [r7, #8]
 800f67c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f680:	61fb      	str	r3, [r7, #28]
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	461a      	mov	r2, r3
 800f688:	69fb      	ldr	r3, [r7, #28]
 800f68a:	61bb      	str	r3, [r7, #24]
 800f68c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f68e:	6979      	ldr	r1, [r7, #20]
 800f690:	69ba      	ldr	r2, [r7, #24]
 800f692:	e841 2300 	strex	r3, r2, [r1]
 800f696:	613b      	str	r3, [r7, #16]
   return(result);
 800f698:	693b      	ldr	r3, [r7, #16]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d1e6      	bne.n	800f66c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	2220      	movs	r2, #32
 800f6a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f6ac:	6878      	ldr	r0, [r7, #4]
 800f6ae:	f7fe ff1d 	bl	800e4ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f6b2:	bf00      	nop
 800f6b4:	3720      	adds	r7, #32
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	bd80      	pop	{r7, pc}

0800f6ba <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f6ba:	b480      	push	{r7}
 800f6bc:	b083      	sub	sp, #12
 800f6be:	af00      	add	r7, sp, #0
 800f6c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f6c2:	bf00      	nop
 800f6c4:	370c      	adds	r7, #12
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6cc:	4770      	bx	lr

0800f6ce <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f6ce:	b480      	push	{r7}
 800f6d0:	b083      	sub	sp, #12
 800f6d2:	af00      	add	r7, sp, #0
 800f6d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f6d6:	bf00      	nop
 800f6d8:	370c      	adds	r7, #12
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e0:	4770      	bx	lr

0800f6e2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f6e2:	b480      	push	{r7}
 800f6e4:	b083      	sub	sp, #12
 800f6e6:	af00      	add	r7, sp, #0
 800f6e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f6ea:	bf00      	nop
 800f6ec:	370c      	adds	r7, #12
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f4:	4770      	bx	lr

0800f6f6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f6f6:	b480      	push	{r7}
 800f6f8:	b085      	sub	sp, #20
 800f6fa:	af00      	add	r7, sp, #0
 800f6fc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f704:	2b01      	cmp	r3, #1
 800f706:	d101      	bne.n	800f70c <HAL_UARTEx_DisableFifoMode+0x16>
 800f708:	2302      	movs	r3, #2
 800f70a:	e027      	b.n	800f75c <HAL_UARTEx_DisableFifoMode+0x66>
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	2201      	movs	r2, #1
 800f710:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2224      	movs	r2, #36	; 0x24
 800f718:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	681a      	ldr	r2, [r3, #0]
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	f022 0201 	bic.w	r2, r2, #1
 800f732:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f73a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	2200      	movs	r2, #0
 800f740:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	68fa      	ldr	r2, [r7, #12]
 800f748:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	2220      	movs	r2, #32
 800f74e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	2200      	movs	r2, #0
 800f756:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f75a:	2300      	movs	r3, #0
}
 800f75c:	4618      	mov	r0, r3
 800f75e:	3714      	adds	r7, #20
 800f760:	46bd      	mov	sp, r7
 800f762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f766:	4770      	bx	lr

0800f768 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b084      	sub	sp, #16
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
 800f770:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f778:	2b01      	cmp	r3, #1
 800f77a:	d101      	bne.n	800f780 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f77c:	2302      	movs	r3, #2
 800f77e:	e02d      	b.n	800f7dc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	2201      	movs	r2, #1
 800f784:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	2224      	movs	r2, #36	; 0x24
 800f78c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	681a      	ldr	r2, [r3, #0]
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	f022 0201 	bic.w	r2, r2, #1
 800f7a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	689b      	ldr	r3, [r3, #8]
 800f7ae:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	683a      	ldr	r2, [r7, #0]
 800f7b8:	430a      	orrs	r2, r1
 800f7ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f7bc:	6878      	ldr	r0, [r7, #4]
 800f7be:	f000 f84f 	bl	800f860 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	68fa      	ldr	r2, [r7, #12]
 800f7c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	2220      	movs	r2, #32
 800f7ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f7da:	2300      	movs	r3, #0
}
 800f7dc:	4618      	mov	r0, r3
 800f7de:	3710      	adds	r7, #16
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	bd80      	pop	{r7, pc}

0800f7e4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b084      	sub	sp, #16
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
 800f7ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f7f4:	2b01      	cmp	r3, #1
 800f7f6:	d101      	bne.n	800f7fc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f7f8:	2302      	movs	r3, #2
 800f7fa:	e02d      	b.n	800f858 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	2201      	movs	r2, #1
 800f800:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	2224      	movs	r2, #36	; 0x24
 800f808:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	681a      	ldr	r2, [r3, #0]
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	f022 0201 	bic.w	r2, r2, #1
 800f822:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	689b      	ldr	r3, [r3, #8]
 800f82a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	683a      	ldr	r2, [r7, #0]
 800f834:	430a      	orrs	r2, r1
 800f836:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f838:	6878      	ldr	r0, [r7, #4]
 800f83a:	f000 f811 	bl	800f860 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	68fa      	ldr	r2, [r7, #12]
 800f844:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	2220      	movs	r2, #32
 800f84a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	2200      	movs	r2, #0
 800f852:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f856:	2300      	movs	r3, #0
}
 800f858:	4618      	mov	r0, r3
 800f85a:	3710      	adds	r7, #16
 800f85c:	46bd      	mov	sp, r7
 800f85e:	bd80      	pop	{r7, pc}

0800f860 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f860:	b480      	push	{r7}
 800f862:	b085      	sub	sp, #20
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d108      	bne.n	800f882 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	2201      	movs	r2, #1
 800f874:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2201      	movs	r2, #1
 800f87c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f880:	e031      	b.n	800f8e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f882:	2310      	movs	r3, #16
 800f884:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f886:	2310      	movs	r3, #16
 800f888:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	689b      	ldr	r3, [r3, #8]
 800f890:	0e5b      	lsrs	r3, r3, #25
 800f892:	b2db      	uxtb	r3, r3
 800f894:	f003 0307 	and.w	r3, r3, #7
 800f898:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	689b      	ldr	r3, [r3, #8]
 800f8a0:	0f5b      	lsrs	r3, r3, #29
 800f8a2:	b2db      	uxtb	r3, r3
 800f8a4:	f003 0307 	and.w	r3, r3, #7
 800f8a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f8aa:	7bbb      	ldrb	r3, [r7, #14]
 800f8ac:	7b3a      	ldrb	r2, [r7, #12]
 800f8ae:	4911      	ldr	r1, [pc, #68]	; (800f8f4 <UARTEx_SetNbDataToProcess+0x94>)
 800f8b0:	5c8a      	ldrb	r2, [r1, r2]
 800f8b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f8b6:	7b3a      	ldrb	r2, [r7, #12]
 800f8b8:	490f      	ldr	r1, [pc, #60]	; (800f8f8 <UARTEx_SetNbDataToProcess+0x98>)
 800f8ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f8bc:	fb93 f3f2 	sdiv	r3, r3, r2
 800f8c0:	b29a      	uxth	r2, r3
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f8c8:	7bfb      	ldrb	r3, [r7, #15]
 800f8ca:	7b7a      	ldrb	r2, [r7, #13]
 800f8cc:	4909      	ldr	r1, [pc, #36]	; (800f8f4 <UARTEx_SetNbDataToProcess+0x94>)
 800f8ce:	5c8a      	ldrb	r2, [r1, r2]
 800f8d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f8d4:	7b7a      	ldrb	r2, [r7, #13]
 800f8d6:	4908      	ldr	r1, [pc, #32]	; (800f8f8 <UARTEx_SetNbDataToProcess+0x98>)
 800f8d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f8da:	fb93 f3f2 	sdiv	r3, r3, r2
 800f8de:	b29a      	uxth	r2, r3
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f8e6:	bf00      	nop
 800f8e8:	3714      	adds	r7, #20
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f0:	4770      	bx	lr
 800f8f2:	bf00      	nop
 800f8f4:	08019938 	.word	0x08019938
 800f8f8:	08019940 	.word	0x08019940

0800f8fc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800f8fc:	b480      	push	{r7}
 800f8fe:	b083      	sub	sp, #12
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
 800f904:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800f906:	683b      	ldr	r3, [r7, #0]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d121      	bne.n	800f952 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	681a      	ldr	r2, [r3, #0]
 800f912:	4b27      	ldr	r3, [pc, #156]	; (800f9b0 <FMC_SDRAM_Init+0xb4>)
 800f914:	4013      	ands	r3, r2
 800f916:	683a      	ldr	r2, [r7, #0]
 800f918:	6851      	ldr	r1, [r2, #4]
 800f91a:	683a      	ldr	r2, [r7, #0]
 800f91c:	6892      	ldr	r2, [r2, #8]
 800f91e:	4311      	orrs	r1, r2
 800f920:	683a      	ldr	r2, [r7, #0]
 800f922:	68d2      	ldr	r2, [r2, #12]
 800f924:	4311      	orrs	r1, r2
 800f926:	683a      	ldr	r2, [r7, #0]
 800f928:	6912      	ldr	r2, [r2, #16]
 800f92a:	4311      	orrs	r1, r2
 800f92c:	683a      	ldr	r2, [r7, #0]
 800f92e:	6952      	ldr	r2, [r2, #20]
 800f930:	4311      	orrs	r1, r2
 800f932:	683a      	ldr	r2, [r7, #0]
 800f934:	6992      	ldr	r2, [r2, #24]
 800f936:	4311      	orrs	r1, r2
 800f938:	683a      	ldr	r2, [r7, #0]
 800f93a:	69d2      	ldr	r2, [r2, #28]
 800f93c:	4311      	orrs	r1, r2
 800f93e:	683a      	ldr	r2, [r7, #0]
 800f940:	6a12      	ldr	r2, [r2, #32]
 800f942:	4311      	orrs	r1, r2
 800f944:	683a      	ldr	r2, [r7, #0]
 800f946:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800f948:	430a      	orrs	r2, r1
 800f94a:	431a      	orrs	r2, r3
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	601a      	str	r2, [r3, #0]
 800f950:	e026      	b.n	800f9a0 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800f95a:	683b      	ldr	r3, [r7, #0]
 800f95c:	69d9      	ldr	r1, [r3, #28]
 800f95e:	683b      	ldr	r3, [r7, #0]
 800f960:	6a1b      	ldr	r3, [r3, #32]
 800f962:	4319      	orrs	r1, r3
 800f964:	683b      	ldr	r3, [r7, #0]
 800f966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f968:	430b      	orrs	r3, r1
 800f96a:	431a      	orrs	r2, r3
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	685a      	ldr	r2, [r3, #4]
 800f974:	4b0e      	ldr	r3, [pc, #56]	; (800f9b0 <FMC_SDRAM_Init+0xb4>)
 800f976:	4013      	ands	r3, r2
 800f978:	683a      	ldr	r2, [r7, #0]
 800f97a:	6851      	ldr	r1, [r2, #4]
 800f97c:	683a      	ldr	r2, [r7, #0]
 800f97e:	6892      	ldr	r2, [r2, #8]
 800f980:	4311      	orrs	r1, r2
 800f982:	683a      	ldr	r2, [r7, #0]
 800f984:	68d2      	ldr	r2, [r2, #12]
 800f986:	4311      	orrs	r1, r2
 800f988:	683a      	ldr	r2, [r7, #0]
 800f98a:	6912      	ldr	r2, [r2, #16]
 800f98c:	4311      	orrs	r1, r2
 800f98e:	683a      	ldr	r2, [r7, #0]
 800f990:	6952      	ldr	r2, [r2, #20]
 800f992:	4311      	orrs	r1, r2
 800f994:	683a      	ldr	r2, [r7, #0]
 800f996:	6992      	ldr	r2, [r2, #24]
 800f998:	430a      	orrs	r2, r1
 800f99a:	431a      	orrs	r2, r3
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800f9a0:	2300      	movs	r3, #0
}
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	370c      	adds	r7, #12
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ac:	4770      	bx	lr
 800f9ae:	bf00      	nop
 800f9b0:	ffff8000 	.word	0xffff8000

0800f9b4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f9b4:	b480      	push	{r7}
 800f9b6:	b085      	sub	sp, #20
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	60f8      	str	r0, [r7, #12]
 800f9bc:	60b9      	str	r1, [r7, #8]
 800f9be:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d128      	bne.n	800fa18 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	689b      	ldr	r3, [r3, #8]
 800f9ca:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800f9ce:	68bb      	ldr	r3, [r7, #8]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	1e59      	subs	r1, r3, #1
 800f9d4:	68bb      	ldr	r3, [r7, #8]
 800f9d6:	685b      	ldr	r3, [r3, #4]
 800f9d8:	3b01      	subs	r3, #1
 800f9da:	011b      	lsls	r3, r3, #4
 800f9dc:	4319      	orrs	r1, r3
 800f9de:	68bb      	ldr	r3, [r7, #8]
 800f9e0:	689b      	ldr	r3, [r3, #8]
 800f9e2:	3b01      	subs	r3, #1
 800f9e4:	021b      	lsls	r3, r3, #8
 800f9e6:	4319      	orrs	r1, r3
 800f9e8:	68bb      	ldr	r3, [r7, #8]
 800f9ea:	68db      	ldr	r3, [r3, #12]
 800f9ec:	3b01      	subs	r3, #1
 800f9ee:	031b      	lsls	r3, r3, #12
 800f9f0:	4319      	orrs	r1, r3
 800f9f2:	68bb      	ldr	r3, [r7, #8]
 800f9f4:	691b      	ldr	r3, [r3, #16]
 800f9f6:	3b01      	subs	r3, #1
 800f9f8:	041b      	lsls	r3, r3, #16
 800f9fa:	4319      	orrs	r1, r3
 800f9fc:	68bb      	ldr	r3, [r7, #8]
 800f9fe:	695b      	ldr	r3, [r3, #20]
 800fa00:	3b01      	subs	r3, #1
 800fa02:	051b      	lsls	r3, r3, #20
 800fa04:	4319      	orrs	r1, r3
 800fa06:	68bb      	ldr	r3, [r7, #8]
 800fa08:	699b      	ldr	r3, [r3, #24]
 800fa0a:	3b01      	subs	r3, #1
 800fa0c:	061b      	lsls	r3, r3, #24
 800fa0e:	430b      	orrs	r3, r1
 800fa10:	431a      	orrs	r2, r3
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	609a      	str	r2, [r3, #8]
 800fa16:	e02d      	b.n	800fa74 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	689a      	ldr	r2, [r3, #8]
 800fa1c:	4b19      	ldr	r3, [pc, #100]	; (800fa84 <FMC_SDRAM_Timing_Init+0xd0>)
 800fa1e:	4013      	ands	r3, r2
 800fa20:	68ba      	ldr	r2, [r7, #8]
 800fa22:	68d2      	ldr	r2, [r2, #12]
 800fa24:	3a01      	subs	r2, #1
 800fa26:	0311      	lsls	r1, r2, #12
 800fa28:	68ba      	ldr	r2, [r7, #8]
 800fa2a:	6952      	ldr	r2, [r2, #20]
 800fa2c:	3a01      	subs	r2, #1
 800fa2e:	0512      	lsls	r2, r2, #20
 800fa30:	430a      	orrs	r2, r1
 800fa32:	431a      	orrs	r2, r3
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	68db      	ldr	r3, [r3, #12]
 800fa3c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800fa40:	68bb      	ldr	r3, [r7, #8]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	1e59      	subs	r1, r3, #1
 800fa46:	68bb      	ldr	r3, [r7, #8]
 800fa48:	685b      	ldr	r3, [r3, #4]
 800fa4a:	3b01      	subs	r3, #1
 800fa4c:	011b      	lsls	r3, r3, #4
 800fa4e:	4319      	orrs	r1, r3
 800fa50:	68bb      	ldr	r3, [r7, #8]
 800fa52:	689b      	ldr	r3, [r3, #8]
 800fa54:	3b01      	subs	r3, #1
 800fa56:	021b      	lsls	r3, r3, #8
 800fa58:	4319      	orrs	r1, r3
 800fa5a:	68bb      	ldr	r3, [r7, #8]
 800fa5c:	691b      	ldr	r3, [r3, #16]
 800fa5e:	3b01      	subs	r3, #1
 800fa60:	041b      	lsls	r3, r3, #16
 800fa62:	4319      	orrs	r1, r3
 800fa64:	68bb      	ldr	r3, [r7, #8]
 800fa66:	699b      	ldr	r3, [r3, #24]
 800fa68:	3b01      	subs	r3, #1
 800fa6a:	061b      	lsls	r3, r3, #24
 800fa6c:	430b      	orrs	r3, r1
 800fa6e:	431a      	orrs	r2, r3
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800fa74:	2300      	movs	r3, #0
}
 800fa76:	4618      	mov	r0, r3
 800fa78:	3714      	adds	r7, #20
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa80:	4770      	bx	lr
 800fa82:	bf00      	nop
 800fa84:	ff0f0fff 	.word	0xff0f0fff

0800fa88 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800fa88:	b480      	push	{r7}
 800fa8a:	b085      	sub	sp, #20
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	60f8      	str	r0, [r7, #12]
 800fa90:	60b9      	str	r1, [r7, #8]
 800fa92:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	691a      	ldr	r2, [r3, #16]
 800fa98:	4b0c      	ldr	r3, [pc, #48]	; (800facc <FMC_SDRAM_SendCommand+0x44>)
 800fa9a:	4013      	ands	r3, r2
 800fa9c:	68ba      	ldr	r2, [r7, #8]
 800fa9e:	6811      	ldr	r1, [r2, #0]
 800faa0:	68ba      	ldr	r2, [r7, #8]
 800faa2:	6852      	ldr	r2, [r2, #4]
 800faa4:	4311      	orrs	r1, r2
 800faa6:	68ba      	ldr	r2, [r7, #8]
 800faa8:	6892      	ldr	r2, [r2, #8]
 800faaa:	3a01      	subs	r2, #1
 800faac:	0152      	lsls	r2, r2, #5
 800faae:	4311      	orrs	r1, r2
 800fab0:	68ba      	ldr	r2, [r7, #8]
 800fab2:	68d2      	ldr	r2, [r2, #12]
 800fab4:	0252      	lsls	r2, r2, #9
 800fab6:	430a      	orrs	r2, r1
 800fab8:	431a      	orrs	r2, r3
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800fabe:	2300      	movs	r3, #0
}
 800fac0:	4618      	mov	r0, r3
 800fac2:	3714      	adds	r7, #20
 800fac4:	46bd      	mov	sp, r7
 800fac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faca:	4770      	bx	lr
 800facc:	ffc00000 	.word	0xffc00000

0800fad0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800fad0:	b480      	push	{r7}
 800fad2:	b083      	sub	sp, #12
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
 800fad8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	695a      	ldr	r2, [r3, #20]
 800fade:	4b07      	ldr	r3, [pc, #28]	; (800fafc <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800fae0:	4013      	ands	r3, r2
 800fae2:	683a      	ldr	r2, [r7, #0]
 800fae4:	0052      	lsls	r2, r2, #1
 800fae6:	431a      	orrs	r2, r3
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800faec:	2300      	movs	r3, #0
}
 800faee:	4618      	mov	r0, r3
 800faf0:	370c      	adds	r7, #12
 800faf2:	46bd      	mov	sp, r7
 800faf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf8:	4770      	bx	lr
 800fafa:	bf00      	nop
 800fafc:	ffffc001 	.word	0xffffc001

0800fb00 <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b082      	sub	sp, #8
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
 800fb08:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 800fb0a:	683b      	ldr	r3, [r7, #0]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d009      	beq.n	800fb24 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 800fb10:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800fb12:	461a      	mov	r2, r3
        err.type, err.code);
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800fb1a:	6839      	ldr	r1, [r7, #0]
 800fb1c:	4806      	ldr	r0, [pc, #24]	; (800fb38 <ai_log_err+0x38>)
 800fb1e:	f008 f94d 	bl	8017dbc <iprintf>
 800fb22:	e008      	b.n	800fb36 <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 800fb24:	793b      	ldrb	r3, [r7, #4]
 800fb26:	4619      	mov	r1, r3
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800fb2e:	461a      	mov	r2, r3
 800fb30:	4802      	ldr	r0, [pc, #8]	; (800fb3c <ai_log_err+0x3c>)
 800fb32:	f008 f943 	bl	8017dbc <iprintf>

  do {} while (1);
 800fb36:	e7fe      	b.n	800fb36 <ai_log_err+0x36>
 800fb38:	08019268 	.word	0x08019268
 800fb3c:	0801929c 	.word	0x0801929c

0800fb40 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b086      	sub	sp, #24
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_face_detection_create_and_init(&face_detection, act_addr, NULL);
 800fb48:	2200      	movs	r2, #0
 800fb4a:	6879      	ldr	r1, [r7, #4]
 800fb4c:	4828      	ldr	r0, [pc, #160]	; (800fbf0 <ai_boostrap+0xb0>)
 800fb4e:	f001 f893 	bl	8010c78 <ai_face_detection_create_and_init>
 800fb52:	4603      	mov	r3, r0
 800fb54:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 800fb56:	7b3b      	ldrb	r3, [r7, #12]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d006      	beq.n	800fb6a <ai_boostrap+0x2a>
    ai_log_err(err, "ai_face_detection_create_and_init");
 800fb5c:	4925      	ldr	r1, [pc, #148]	; (800fbf4 <ai_boostrap+0xb4>)
 800fb5e:	68f8      	ldr	r0, [r7, #12]
 800fb60:	f7ff ffce 	bl	800fb00 <ai_log_err>
    return -1;
 800fb64:	f04f 33ff 	mov.w	r3, #4294967295
 800fb68:	e03e      	b.n	800fbe8 <ai_boostrap+0xa8>
  }

  ai_input = ai_face_detection_inputs_get(face_detection, NULL);
 800fb6a:	4b21      	ldr	r3, [pc, #132]	; (800fbf0 <ai_boostrap+0xb0>)
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	2100      	movs	r1, #0
 800fb70:	4618      	mov	r0, r3
 800fb72:	f001 f8f5 	bl	8010d60 <ai_face_detection_inputs_get>
 800fb76:	4603      	mov	r3, r0
 800fb78:	4a1f      	ldr	r2, [pc, #124]	; (800fbf8 <ai_boostrap+0xb8>)
 800fb7a:	6013      	str	r3, [r2, #0]
  ai_output = ai_face_detection_outputs_get(face_detection, NULL);
 800fb7c:	4b1c      	ldr	r3, [pc, #112]	; (800fbf0 <ai_boostrap+0xb0>)
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	2100      	movs	r1, #0
 800fb82:	4618      	mov	r0, r3
 800fb84:	f001 f906 	bl	8010d94 <ai_face_detection_outputs_get>
 800fb88:	4603      	mov	r3, r0
 800fb8a:	4a1c      	ldr	r2, [pc, #112]	; (800fbfc <ai_boostrap+0xbc>)
 800fb8c:	6013      	str	r3, [r2, #0]

#if defined(AI_FACE_DETECTION_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_FACE_DETECTION_IN_NUM; idx++) {
 800fb8e:	2300      	movs	r3, #0
 800fb90:	617b      	str	r3, [r7, #20]
 800fb92:	e00f      	b.n	800fbb4 <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 800fb94:	4b18      	ldr	r3, [pc, #96]	; (800fbf8 <ai_boostrap+0xb8>)
 800fb96:	6819      	ldr	r1, [r3, #0]
 800fb98:	697a      	ldr	r2, [r7, #20]
 800fb9a:	4613      	mov	r3, r2
 800fb9c:	00db      	lsls	r3, r3, #3
 800fb9e:	1a9b      	subs	r3, r3, r2
 800fba0:	009b      	lsls	r3, r3, #2
 800fba2:	440b      	add	r3, r1
 800fba4:	685a      	ldr	r2, [r3, #4]
 800fba6:	4916      	ldr	r1, [pc, #88]	; (800fc00 <ai_boostrap+0xc0>)
 800fba8:	697b      	ldr	r3, [r7, #20]
 800fbaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_FACE_DETECTION_IN_NUM; idx++) {
 800fbae:	697b      	ldr	r3, [r7, #20]
 800fbb0:	3301      	adds	r3, #1
 800fbb2:	617b      	str	r3, [r7, #20]
 800fbb4:	697b      	ldr	r3, [r7, #20]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	ddec      	ble.n	800fb94 <ai_boostrap+0x54>

#if defined(AI_FACE_DETECTION_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_FACE_DETECTION_OUT_NUM; idx++) {
 800fbba:	2300      	movs	r3, #0
 800fbbc:	613b      	str	r3, [r7, #16]
 800fbbe:	e00f      	b.n	800fbe0 <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 800fbc0:	4b0e      	ldr	r3, [pc, #56]	; (800fbfc <ai_boostrap+0xbc>)
 800fbc2:	6819      	ldr	r1, [r3, #0]
 800fbc4:	693a      	ldr	r2, [r7, #16]
 800fbc6:	4613      	mov	r3, r2
 800fbc8:	00db      	lsls	r3, r3, #3
 800fbca:	1a9b      	subs	r3, r3, r2
 800fbcc:	009b      	lsls	r3, r3, #2
 800fbce:	440b      	add	r3, r1
 800fbd0:	685a      	ldr	r2, [r3, #4]
 800fbd2:	490c      	ldr	r1, [pc, #48]	; (800fc04 <ai_boostrap+0xc4>)
 800fbd4:	693b      	ldr	r3, [r7, #16]
 800fbd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_FACE_DETECTION_OUT_NUM; idx++) {
 800fbda:	693b      	ldr	r3, [r7, #16]
 800fbdc:	3301      	adds	r3, #1
 800fbde:	613b      	str	r3, [r7, #16]
 800fbe0:	693b      	ldr	r3, [r7, #16]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	ddec      	ble.n	800fbc0 <ai_boostrap+0x80>
  for (int idx=0; idx < AI_FACE_DETECTION_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 800fbe6:	2300      	movs	r3, #0
}
 800fbe8:	4618      	mov	r0, r3
 800fbea:	3718      	adds	r7, #24
 800fbec:	46bd      	mov	sp, r7
 800fbee:	bd80      	pop	{r7, pc}
 800fbf0:	240214f0 	.word	0x240214f0
 800fbf4:	080192cc 	.word	0x080192cc
 800fbf8:	240214f4 	.word	0x240214f4
 800fbfc:	240214f8 	.word	0x240214f8
 800fc00:	2400431c 	.word	0x2400431c
 800fc04:	24004320 	.word	0x24004320

0800fc08 <ai_run>:

static int ai_run(void)
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b082      	sub	sp, #8
 800fc0c:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_face_detection_run(face_detection, ai_input, ai_output);
 800fc0e:	4b0f      	ldr	r3, [pc, #60]	; (800fc4c <ai_run+0x44>)
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	4a0f      	ldr	r2, [pc, #60]	; (800fc50 <ai_run+0x48>)
 800fc14:	6811      	ldr	r1, [r2, #0]
 800fc16:	4a0f      	ldr	r2, [pc, #60]	; (800fc54 <ai_run+0x4c>)
 800fc18:	6812      	ldr	r2, [r2, #0]
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	f001 f910 	bl	8010e40 <ai_face_detection_run>
 800fc20:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	2b01      	cmp	r3, #1
 800fc26:	d00c      	beq.n	800fc42 <ai_run+0x3a>
    ai_log_err(ai_face_detection_get_error(face_detection),
 800fc28:	4b08      	ldr	r3, [pc, #32]	; (800fc4c <ai_run+0x44>)
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	f001 f801 	bl	8010c34 <ai_face_detection_get_error>
 800fc32:	4603      	mov	r3, r0
 800fc34:	4908      	ldr	r1, [pc, #32]	; (800fc58 <ai_run+0x50>)
 800fc36:	4618      	mov	r0, r3
 800fc38:	f7ff ff62 	bl	800fb00 <ai_log_err>
        "ai_face_detection_run");
    return -1;
 800fc3c:	f04f 33ff 	mov.w	r3, #4294967295
 800fc40:	e000      	b.n	800fc44 <ai_run+0x3c>
  }

  return 0;
 800fc42:	2300      	movs	r3, #0
}
 800fc44:	4618      	mov	r0, r3
 800fc46:	3708      	adds	r7, #8
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	bd80      	pop	{r7, pc}
 800fc4c:	240214f0 	.word	0x240214f0
 800fc50:	240214f4 	.word	0x240214f4
 800fc54:	240214f8 	.word	0x240214f8
 800fc58:	080192f0 	.word	0x080192f0

0800fc5c <acquire_and_process_data>:

/* USER CODE BEGIN 2 */
int acquire_and_process_data(ai_i8* data[])
{
 800fc5c:	b480      	push	{r7}
 800fc5e:	b083      	sub	sp, #12
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
  {
      data[idx] = ....
  }

  */
  return 0;
 800fc64:	2300      	movs	r3, #0
}
 800fc66:	4618      	mov	r0, r3
 800fc68:	370c      	adds	r7, #12
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc70:	4770      	bx	lr

0800fc72 <post_process>:

int post_process(ai_i8* data[])
{
 800fc72:	b480      	push	{r7}
 800fc74:	b083      	sub	sp, #12
 800fc76:	af00      	add	r7, sp, #0
 800fc78:	6078      	str	r0, [r7, #4]
  {
      data[idx] = ....
  }

  */
  return 0;
 800fc7a:	2300      	movs	r3, #0
}
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	370c      	adds	r7, #12
 800fc80:	46bd      	mov	sp, r7
 800fc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc86:	4770      	bx	lr

0800fc88 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 800fc8c:	4803      	ldr	r0, [pc, #12]	; (800fc9c <MX_X_CUBE_AI_Init+0x14>)
 800fc8e:	f008 f91b 	bl	8017ec8 <puts>

  ai_boostrap(data_activations0);
 800fc92:	4803      	ldr	r0, [pc, #12]	; (800fca0 <MX_X_CUBE_AI_Init+0x18>)
 800fc94:	f7ff ff54 	bl	800fb40 <ai_boostrap>
    /* USER CODE END 5 */
}
 800fc98:	bf00      	nop
 800fc9a:	bd80      	pop	{r7, pc}
 800fc9c:	08019308 	.word	0x08019308
 800fca0:	24000294 	.word	0x24000294

0800fca4 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b082      	sub	sp, #8
 800fca8:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 800fcaa:	f04f 33ff 	mov.w	r3, #4294967295
 800fcae:	607b      	str	r3, [r7, #4]

  printf("TEMPLATE - run - main loop\r\n");
 800fcb0:	4816      	ldr	r0, [pc, #88]	; (800fd0c <MX_X_CUBE_AI_Process+0x68>)
 800fcb2:	f008 f909 	bl	8017ec8 <puts>

  if (face_detection) {
 800fcb6:	4b16      	ldr	r3, [pc, #88]	; (800fd10 <MX_X_CUBE_AI_Process+0x6c>)
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d013      	beq.n	800fce6 <MX_X_CUBE_AI_Process+0x42>

    do {
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(data_ins);
 800fcbe:	4815      	ldr	r0, [pc, #84]	; (800fd14 <MX_X_CUBE_AI_Process+0x70>)
 800fcc0:	f7ff ffcc 	bl	800fc5c <acquire_and_process_data>
 800fcc4:	6078      	str	r0, [r7, #4]
      /* 2 - process the data - call inference engine */
      if (res == 0)
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d102      	bne.n	800fcd2 <MX_X_CUBE_AI_Process+0x2e>
        res = ai_run();
 800fccc:	f7ff ff9c 	bl	800fc08 <ai_run>
 800fcd0:	6078      	str	r0, [r7, #4]
      /* 3- post-process the predictions */
      if (res == 0)
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d103      	bne.n	800fce0 <MX_X_CUBE_AI_Process+0x3c>
        res = post_process(data_outs);
 800fcd8:	480f      	ldr	r0, [pc, #60]	; (800fd18 <MX_X_CUBE_AI_Process+0x74>)
 800fcda:	f7ff ffca 	bl	800fc72 <post_process>
 800fcde:	6078      	str	r0, [r7, #4]
    } while (res==0);
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d0eb      	beq.n	800fcbe <MX_X_CUBE_AI_Process+0x1a>
  }

  if (res) {
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d00a      	beq.n	800fd02 <MX_X_CUBE_AI_Process+0x5e>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 800fcec:	2311      	movs	r3, #17
 800fcee:	703b      	strb	r3, [r7, #0]
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	2210      	movs	r2, #16
 800fcf4:	f362 231f 	bfi	r3, r2, #8, #24
 800fcf8:	603b      	str	r3, [r7, #0]
    ai_log_err(err, "Process has FAILED");
 800fcfa:	4908      	ldr	r1, [pc, #32]	; (800fd1c <MX_X_CUBE_AI_Process+0x78>)
 800fcfc:	6838      	ldr	r0, [r7, #0]
 800fcfe:	f7ff feff 	bl	800fb00 <ai_log_err>
  }
    /* USER CODE END 6 */
}
 800fd02:	bf00      	nop
 800fd04:	3708      	adds	r7, #8
 800fd06:	46bd      	mov	sp, r7
 800fd08:	bd80      	pop	{r7, pc}
 800fd0a:	bf00      	nop
 800fd0c:	08019328 	.word	0x08019328
 800fd10:	240214f0 	.word	0x240214f0
 800fd14:	2400431c 	.word	0x2400431c
 800fd18:	24004320 	.word	0x24004320
 800fd1c:	08019344 	.word	0x08019344

0800fd20 <face_detection_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool face_detection_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b082      	sub	sp, #8
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
 800fd28:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_face_detection_activations_map, 1, params)) {
 800fd2a:	683a      	ldr	r2, [r7, #0]
 800fd2c:	2101      	movs	r1, #1
 800fd2e:	4896      	ldr	r0, [pc, #600]	; (800ff88 <face_detection_configure_activations+0x268>)
 800fd30:	f001 f968 	bl	8011004 <ai_platform_get_activations_map>
 800fd34:	4603      	mov	r3, r0
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	f000 83a0 	beq.w	801047c <face_detection_configure_activations+0x75c>
    /* Updating activations (byte) offsets */
    
    serving_default_x0_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 71424);
 800fd3c:	4b92      	ldr	r3, [pc, #584]	; (800ff88 <face_detection_configure_activations+0x268>)
 800fd3e:	681a      	ldr	r2, [r3, #0]
 800fd40:	4b92      	ldr	r3, [pc, #584]	; (800ff8c <face_detection_configure_activations+0x26c>)
 800fd42:	4413      	add	r3, r2
 800fd44:	4a92      	ldr	r2, [pc, #584]	; (800ff90 <face_detection_configure_activations+0x270>)
 800fd46:	6093      	str	r3, [r2, #8]
    serving_default_x0_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 71424);
 800fd48:	4b8f      	ldr	r3, [pc, #572]	; (800ff88 <face_detection_configure_activations+0x268>)
 800fd4a:	681a      	ldr	r2, [r3, #0]
 800fd4c:	4b8f      	ldr	r3, [pc, #572]	; (800ff8c <face_detection_configure_activations+0x26c>)
 800fd4e:	4413      	add	r3, r2
 800fd50:	4a8f      	ldr	r2, [pc, #572]	; (800ff90 <face_detection_configure_activations+0x270>)
 800fd52:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 99076);
 800fd54:	4b8c      	ldr	r3, [pc, #560]	; (800ff88 <face_detection_configure_activations+0x268>)
 800fd56:	681a      	ldr	r2, [r3, #0]
 800fd58:	4b8e      	ldr	r3, [pc, #568]	; (800ff94 <face_detection_configure_activations+0x274>)
 800fd5a:	4413      	add	r3, r2
 800fd5c:	4a8e      	ldr	r2, [pc, #568]	; (800ff98 <face_detection_configure_activations+0x278>)
 800fd5e:	6093      	str	r3, [r2, #8]
    conv2d_0_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 99076);
 800fd60:	4b89      	ldr	r3, [pc, #548]	; (800ff88 <face_detection_configure_activations+0x268>)
 800fd62:	681a      	ldr	r2, [r3, #0]
 800fd64:	4b8b      	ldr	r3, [pc, #556]	; (800ff94 <face_detection_configure_activations+0x274>)
 800fd66:	4413      	add	r3, r2
 800fd68:	4a8b      	ldr	r2, [pc, #556]	; (800ff98 <face_detection_configure_activations+0x278>)
 800fd6a:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 61428);
 800fd6c:	4b86      	ldr	r3, [pc, #536]	; (800ff88 <face_detection_configure_activations+0x268>)
 800fd6e:	681a      	ldr	r2, [r3, #0]
 800fd70:	f64e 73f4 	movw	r3, #61428	; 0xeff4
 800fd74:	4413      	add	r3, r2
 800fd76:	4a89      	ldr	r2, [pc, #548]	; (800ff9c <face_detection_configure_activations+0x27c>)
 800fd78:	6093      	str	r3, [r2, #8]
    conv2d_0_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 61428);
 800fd7a:	4b83      	ldr	r3, [pc, #524]	; (800ff88 <face_detection_configure_activations+0x268>)
 800fd7c:	681a      	ldr	r2, [r3, #0]
 800fd7e:	f64e 73f4 	movw	r3, #61428	; 0xeff4
 800fd82:	4413      	add	r3, r2
 800fd84:	4a85      	ldr	r2, [pc, #532]	; (800ff9c <face_detection_configure_activations+0x27c>)
 800fd86:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 61428);
 800fd88:	4b7f      	ldr	r3, [pc, #508]	; (800ff88 <face_detection_configure_activations+0x268>)
 800fd8a:	681a      	ldr	r2, [r3, #0]
 800fd8c:	f64e 73f4 	movw	r3, #61428	; 0xeff4
 800fd90:	4413      	add	r3, r2
 800fd92:	4a83      	ldr	r2, [pc, #524]	; (800ffa0 <face_detection_configure_activations+0x280>)
 800fd94:	6093      	str	r3, [r2, #8]
    conv2d_0_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 61428);
 800fd96:	4b7c      	ldr	r3, [pc, #496]	; (800ff88 <face_detection_configure_activations+0x268>)
 800fd98:	681a      	ldr	r2, [r3, #0]
 800fd9a:	f64e 73f4 	movw	r3, #61428	; 0xeff4
 800fd9e:	4413      	add	r3, r2
 800fda0:	4a7f      	ldr	r2, [pc, #508]	; (800ffa0 <face_detection_configure_activations+0x280>)
 800fda2:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 58292);
 800fda4:	4b78      	ldr	r3, [pc, #480]	; (800ff88 <face_detection_configure_activations+0x268>)
 800fda6:	681a      	ldr	r2, [r3, #0]
 800fda8:	f24e 33b4 	movw	r3, #58292	; 0xe3b4
 800fdac:	4413      	add	r3, r2
 800fdae:	4a7d      	ldr	r2, [pc, #500]	; (800ffa4 <face_detection_configure_activations+0x284>)
 800fdb0:	6093      	str	r3, [r2, #8]
    conv2d_1_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 58292);
 800fdb2:	4b75      	ldr	r3, [pc, #468]	; (800ff88 <face_detection_configure_activations+0x268>)
 800fdb4:	681a      	ldr	r2, [r3, #0]
 800fdb6:	f24e 33b4 	movw	r3, #58292	; 0xe3b4
 800fdba:	4413      	add	r3, r2
 800fdbc:	4a79      	ldr	r2, [pc, #484]	; (800ffa4 <face_detection_configure_activations+0x284>)
 800fdbe:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 98292);
 800fdc0:	4b71      	ldr	r3, [pc, #452]	; (800ff88 <face_detection_configure_activations+0x268>)
 800fdc2:	681a      	ldr	r2, [r3, #0]
 800fdc4:	4b78      	ldr	r3, [pc, #480]	; (800ffa8 <face_detection_configure_activations+0x288>)
 800fdc6:	4413      	add	r3, r2
 800fdc8:	4a78      	ldr	r2, [pc, #480]	; (800ffac <face_detection_configure_activations+0x28c>)
 800fdca:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 98292);
 800fdcc:	4b6e      	ldr	r3, [pc, #440]	; (800ff88 <face_detection_configure_activations+0x268>)
 800fdce:	681a      	ldr	r2, [r3, #0]
 800fdd0:	4b75      	ldr	r3, [pc, #468]	; (800ffa8 <face_detection_configure_activations+0x288>)
 800fdd2:	4413      	add	r3, r2
 800fdd4:	4a75      	ldr	r2, [pc, #468]	; (800ffac <face_detection_configure_activations+0x28c>)
 800fdd6:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 57524);
 800fdd8:	4b6b      	ldr	r3, [pc, #428]	; (800ff88 <face_detection_configure_activations+0x268>)
 800fdda:	681a      	ldr	r2, [r3, #0]
 800fddc:	f24e 03b4 	movw	r3, #57524	; 0xe0b4
 800fde0:	4413      	add	r3, r2
 800fde2:	4a73      	ldr	r2, [pc, #460]	; (800ffb0 <face_detection_configure_activations+0x290>)
 800fde4:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 57524);
 800fde6:	4b68      	ldr	r3, [pc, #416]	; (800ff88 <face_detection_configure_activations+0x268>)
 800fde8:	681a      	ldr	r2, [r3, #0]
 800fdea:	f24e 03b4 	movw	r3, #57524	; 0xe0b4
 800fdee:	4413      	add	r3, r2
 800fdf0:	4a6f      	ldr	r2, [pc, #444]	; (800ffb0 <face_detection_configure_activations+0x290>)
 800fdf2:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 57524);
 800fdf4:	4b64      	ldr	r3, [pc, #400]	; (800ff88 <face_detection_configure_activations+0x268>)
 800fdf6:	681a      	ldr	r2, [r3, #0]
 800fdf8:	f24e 03b4 	movw	r3, #57524	; 0xe0b4
 800fdfc:	4413      	add	r3, r2
 800fdfe:	4a6d      	ldr	r2, [pc, #436]	; (800ffb4 <face_detection_configure_activations+0x294>)
 800fe00:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 57524);
 800fe02:	4b61      	ldr	r3, [pc, #388]	; (800ff88 <face_detection_configure_activations+0x268>)
 800fe04:	681a      	ldr	r2, [r3, #0]
 800fe06:	f24e 03b4 	movw	r3, #57524	; 0xe0b4
 800fe0a:	4413      	add	r3, r2
 800fe0c:	4a69      	ldr	r2, [pc, #420]	; (800ffb4 <face_detection_configure_activations+0x294>)
 800fe0e:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 100128);
 800fe10:	4b5d      	ldr	r3, [pc, #372]	; (800ff88 <face_detection_configure_activations+0x268>)
 800fe12:	681a      	ldr	r2, [r3, #0]
 800fe14:	4b68      	ldr	r3, [pc, #416]	; (800ffb8 <face_detection_configure_activations+0x298>)
 800fe16:	4413      	add	r3, r2
 800fe18:	4a68      	ldr	r2, [pc, #416]	; (800ffbc <face_detection_configure_activations+0x29c>)
 800fe1a:	6093      	str	r3, [r2, #8]
    conv2d_2_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 100128);
 800fe1c:	4b5a      	ldr	r3, [pc, #360]	; (800ff88 <face_detection_configure_activations+0x268>)
 800fe1e:	681a      	ldr	r2, [r3, #0]
 800fe20:	4b65      	ldr	r3, [pc, #404]	; (800ffb8 <face_detection_configure_activations+0x298>)
 800fe22:	4413      	add	r3, r2
 800fe24:	4a65      	ldr	r2, [pc, #404]	; (800ffbc <face_detection_configure_activations+0x29c>)
 800fe26:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 100272);
 800fe28:	4b57      	ldr	r3, [pc, #348]	; (800ff88 <face_detection_configure_activations+0x268>)
 800fe2a:	681a      	ldr	r2, [r3, #0]
 800fe2c:	4b64      	ldr	r3, [pc, #400]	; (800ffc0 <face_detection_configure_activations+0x2a0>)
 800fe2e:	4413      	add	r3, r2
 800fe30:	4a64      	ldr	r2, [pc, #400]	; (800ffc4 <face_detection_configure_activations+0x2a4>)
 800fe32:	6093      	str	r3, [r2, #8]
    conv2d_2_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 100272);
 800fe34:	4b54      	ldr	r3, [pc, #336]	; (800ff88 <face_detection_configure_activations+0x268>)
 800fe36:	681a      	ldr	r2, [r3, #0]
 800fe38:	4b61      	ldr	r3, [pc, #388]	; (800ffc0 <face_detection_configure_activations+0x2a0>)
 800fe3a:	4413      	add	r3, r2
 800fe3c:	4a61      	ldr	r2, [pc, #388]	; (800ffc4 <face_detection_configure_activations+0x2a4>)
 800fe3e:	60d3      	str	r3, [r2, #12]
    
    conv2d_3_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 118704);
 800fe40:	4b51      	ldr	r3, [pc, #324]	; (800ff88 <face_detection_configure_activations+0x268>)
 800fe42:	681a      	ldr	r2, [r3, #0]
 800fe44:	4b60      	ldr	r3, [pc, #384]	; (800ffc8 <face_detection_configure_activations+0x2a8>)
 800fe46:	4413      	add	r3, r2
 800fe48:	4a60      	ldr	r2, [pc, #384]	; (800ffcc <face_detection_configure_activations+0x2ac>)
 800fe4a:	6093      	str	r3, [r2, #8]
    conv2d_3_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 118704);
 800fe4c:	4b4e      	ldr	r3, [pc, #312]	; (800ff88 <face_detection_configure_activations+0x268>)
 800fe4e:	681a      	ldr	r2, [r3, #0]
 800fe50:	4b5d      	ldr	r3, [pc, #372]	; (800ffc8 <face_detection_configure_activations+0x2a8>)
 800fe52:	4413      	add	r3, r2
 800fe54:	4a5d      	ldr	r2, [pc, #372]	; (800ffcc <face_detection_configure_activations+0x2ac>)
 800fe56:	60d3      	str	r3, [r2, #12]
    
    conv2d_3_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 5808);
 800fe58:	4b4b      	ldr	r3, [pc, #300]	; (800ff88 <face_detection_configure_activations+0x268>)
 800fe5a:	681a      	ldr	r2, [r3, #0]
 800fe5c:	f241 63b0 	movw	r3, #5808	; 0x16b0
 800fe60:	4413      	add	r3, r2
 800fe62:	4a5b      	ldr	r2, [pc, #364]	; (800ffd0 <face_detection_configure_activations+0x2b0>)
 800fe64:	6093      	str	r3, [r2, #8]
    conv2d_3_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 5808);
 800fe66:	4b48      	ldr	r3, [pc, #288]	; (800ff88 <face_detection_configure_activations+0x268>)
 800fe68:	681a      	ldr	r2, [r3, #0]
 800fe6a:	f241 63b0 	movw	r3, #5808	; 0x16b0
 800fe6e:	4413      	add	r3, r2
 800fe70:	4a57      	ldr	r2, [pc, #348]	; (800ffd0 <face_detection_configure_activations+0x2b0>)
 800fe72:	60d3      	str	r3, [r2, #12]
    
    conv2d_3_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 5808);
 800fe74:	4b44      	ldr	r3, [pc, #272]	; (800ff88 <face_detection_configure_activations+0x268>)
 800fe76:	681a      	ldr	r2, [r3, #0]
 800fe78:	f241 63b0 	movw	r3, #5808	; 0x16b0
 800fe7c:	4413      	add	r3, r2
 800fe7e:	4a55      	ldr	r2, [pc, #340]	; (800ffd4 <face_detection_configure_activations+0x2b4>)
 800fe80:	6093      	str	r3, [r2, #8]
    conv2d_3_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 5808);
 800fe82:	4b41      	ldr	r3, [pc, #260]	; (800ff88 <face_detection_configure_activations+0x268>)
 800fe84:	681a      	ldr	r2, [r3, #0]
 800fe86:	f241 63b0 	movw	r3, #5808	; 0x16b0
 800fe8a:	4413      	add	r3, r2
 800fe8c:	4a51      	ldr	r2, [pc, #324]	; (800ffd4 <face_detection_configure_activations+0x2b4>)
 800fe8e:	60d3      	str	r3, [r2, #12]
    
    conv2d_5_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 1152);
 800fe90:	4b3d      	ldr	r3, [pc, #244]	; (800ff88 <face_detection_configure_activations+0x268>)
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800fe98:	4a4f      	ldr	r2, [pc, #316]	; (800ffd8 <face_detection_configure_activations+0x2b8>)
 800fe9a:	6093      	str	r3, [r2, #8]
    conv2d_5_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 1152);
 800fe9c:	4b3a      	ldr	r3, [pc, #232]	; (800ff88 <face_detection_configure_activations+0x268>)
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800fea4:	4a4c      	ldr	r2, [pc, #304]	; (800ffd8 <face_detection_configure_activations+0x2b8>)
 800fea6:	60d3      	str	r3, [r2, #12]
    
    conv2d_5_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 117436);
 800fea8:	4b37      	ldr	r3, [pc, #220]	; (800ff88 <face_detection_configure_activations+0x268>)
 800feaa:	681a      	ldr	r2, [r3, #0]
 800feac:	4b4b      	ldr	r3, [pc, #300]	; (800ffdc <face_detection_configure_activations+0x2bc>)
 800feae:	4413      	add	r3, r2
 800feb0:	4a4b      	ldr	r2, [pc, #300]	; (800ffe0 <face_detection_configure_activations+0x2c0>)
 800feb2:	6093      	str	r3, [r2, #8]
    conv2d_5_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 117436);
 800feb4:	4b34      	ldr	r3, [pc, #208]	; (800ff88 <face_detection_configure_activations+0x268>)
 800feb6:	681a      	ldr	r2, [r3, #0]
 800feb8:	4b48      	ldr	r3, [pc, #288]	; (800ffdc <face_detection_configure_activations+0x2bc>)
 800feba:	4413      	add	r3, r2
 800febc:	4a48      	ldr	r2, [pc, #288]	; (800ffe0 <face_detection_configure_activations+0x2c0>)
 800febe:	60d3      	str	r3, [r2, #12]
    
    conv2d_5_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 800fec0:	4b31      	ldr	r3, [pc, #196]	; (800ff88 <face_detection_configure_activations+0x268>)
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	4a47      	ldr	r2, [pc, #284]	; (800ffe4 <face_detection_configure_activations+0x2c4>)
 800fec6:	6093      	str	r3, [r2, #8]
    conv2d_5_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 800fec8:	4b2f      	ldr	r3, [pc, #188]	; (800ff88 <face_detection_configure_activations+0x268>)
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	4a45      	ldr	r2, [pc, #276]	; (800ffe4 <face_detection_configure_activations+0x2c4>)
 800fece:	60d3      	str	r3, [r2, #12]
    
    conv2d_5_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 800fed0:	4b2d      	ldr	r3, [pc, #180]	; (800ff88 <face_detection_configure_activations+0x268>)
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	4a44      	ldr	r2, [pc, #272]	; (800ffe8 <face_detection_configure_activations+0x2c8>)
 800fed6:	6093      	str	r3, [r2, #8]
    conv2d_5_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 800fed8:	4b2b      	ldr	r3, [pc, #172]	; (800ff88 <face_detection_configure_activations+0x268>)
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	4a42      	ldr	r2, [pc, #264]	; (800ffe8 <face_detection_configure_activations+0x2c8>)
 800fede:	60d3      	str	r3, [r2, #12]
    
    conv2d_6_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 27648);
 800fee0:	4b29      	ldr	r3, [pc, #164]	; (800ff88 <face_detection_configure_activations+0x268>)
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
 800fee8:	4a40      	ldr	r2, [pc, #256]	; (800ffec <face_detection_configure_activations+0x2cc>)
 800feea:	6093      	str	r3, [r2, #8]
    conv2d_6_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 27648);
 800feec:	4b26      	ldr	r3, [pc, #152]	; (800ff88 <face_detection_configure_activations+0x268>)
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
 800fef4:	4a3d      	ldr	r2, [pc, #244]	; (800ffec <face_detection_configure_activations+0x2cc>)
 800fef6:	60d3      	str	r3, [r2, #12]
    
    conv2d_6_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 27920);
 800fef8:	4b23      	ldr	r3, [pc, #140]	; (800ff88 <face_detection_configure_activations+0x268>)
 800fefa:	681a      	ldr	r2, [r3, #0]
 800fefc:	f646 5310 	movw	r3, #27920	; 0x6d10
 800ff00:	4413      	add	r3, r2
 800ff02:	4a3b      	ldr	r2, [pc, #236]	; (800fff0 <face_detection_configure_activations+0x2d0>)
 800ff04:	6093      	str	r3, [r2, #8]
    conv2d_6_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 27920);
 800ff06:	4b20      	ldr	r3, [pc, #128]	; (800ff88 <face_detection_configure_activations+0x268>)
 800ff08:	681a      	ldr	r2, [r3, #0]
 800ff0a:	f646 5310 	movw	r3, #27920	; 0x6d10
 800ff0e:	4413      	add	r3, r2
 800ff10:	4a37      	ldr	r2, [pc, #220]	; (800fff0 <face_detection_configure_activations+0x2d0>)
 800ff12:	60d3      	str	r3, [r2, #12]
    
    conv2d_7_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 800ff14:	4b1c      	ldr	r3, [pc, #112]	; (800ff88 <face_detection_configure_activations+0x268>)
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	4a36      	ldr	r2, [pc, #216]	; (800fff4 <face_detection_configure_activations+0x2d4>)
 800ff1a:	6093      	str	r3, [r2, #8]
    conv2d_7_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 800ff1c:	4b1a      	ldr	r3, [pc, #104]	; (800ff88 <face_detection_configure_activations+0x268>)
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	4a34      	ldr	r2, [pc, #208]	; (800fff4 <face_detection_configure_activations+0x2d4>)
 800ff22:	60d3      	str	r3, [r2, #12]
    
    conv2d_7_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 32528);
 800ff24:	4b18      	ldr	r3, [pc, #96]	; (800ff88 <face_detection_configure_activations+0x268>)
 800ff26:	681a      	ldr	r2, [r3, #0]
 800ff28:	f647 7310 	movw	r3, #32528	; 0x7f10
 800ff2c:	4413      	add	r3, r2
 800ff2e:	4a32      	ldr	r2, [pc, #200]	; (800fff8 <face_detection_configure_activations+0x2d8>)
 800ff30:	6093      	str	r3, [r2, #8]
    conv2d_7_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 32528);
 800ff32:	4b15      	ldr	r3, [pc, #84]	; (800ff88 <face_detection_configure_activations+0x268>)
 800ff34:	681a      	ldr	r2, [r3, #0]
 800ff36:	f647 7310 	movw	r3, #32528	; 0x7f10
 800ff3a:	4413      	add	r3, r2
 800ff3c:	4a2e      	ldr	r2, [pc, #184]	; (800fff8 <face_detection_configure_activations+0x2d8>)
 800ff3e:	60d3      	str	r3, [r2, #12]
    
    conv2d_7_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 60176);
 800ff40:	4b11      	ldr	r3, [pc, #68]	; (800ff88 <face_detection_configure_activations+0x268>)
 800ff42:	681a      	ldr	r2, [r3, #0]
 800ff44:	f64e 3310 	movw	r3, #60176	; 0xeb10
 800ff48:	4413      	add	r3, r2
 800ff4a:	4a2c      	ldr	r2, [pc, #176]	; (800fffc <face_detection_configure_activations+0x2dc>)
 800ff4c:	6093      	str	r3, [r2, #8]
    conv2d_7_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 60176);
 800ff4e:	4b0e      	ldr	r3, [pc, #56]	; (800ff88 <face_detection_configure_activations+0x268>)
 800ff50:	681a      	ldr	r2, [r3, #0]
 800ff52:	f64e 3310 	movw	r3, #60176	; 0xeb10
 800ff56:	4413      	add	r3, r2
 800ff58:	4a28      	ldr	r2, [pc, #160]	; (800fffc <face_detection_configure_activations+0x2dc>)
 800ff5a:	60d3      	str	r3, [r2, #12]
    
    conv2d_8_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 55376);
 800ff5c:	4b0a      	ldr	r3, [pc, #40]	; (800ff88 <face_detection_configure_activations+0x268>)
 800ff5e:	681a      	ldr	r2, [r3, #0]
 800ff60:	f64d 0350 	movw	r3, #55376	; 0xd850
 800ff64:	4413      	add	r3, r2
 800ff66:	4a26      	ldr	r2, [pc, #152]	; (8010000 <face_detection_configure_activations+0x2e0>)
 800ff68:	6093      	str	r3, [r2, #8]
    conv2d_8_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 55376);
 800ff6a:	4b07      	ldr	r3, [pc, #28]	; (800ff88 <face_detection_configure_activations+0x268>)
 800ff6c:	681a      	ldr	r2, [r3, #0]
 800ff6e:	f64d 0350 	movw	r3, #55376	; 0xd850
 800ff72:	4413      	add	r3, r2
 800ff74:	4a22      	ldr	r2, [pc, #136]	; (8010000 <face_detection_configure_activations+0x2e0>)
 800ff76:	60d3      	str	r3, [r2, #12]
    
    conv2d_8_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 800ff78:	4b03      	ldr	r3, [pc, #12]	; (800ff88 <face_detection_configure_activations+0x268>)
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	4a21      	ldr	r2, [pc, #132]	; (8010004 <face_detection_configure_activations+0x2e4>)
 800ff7e:	6093      	str	r3, [r2, #8]
    conv2d_8_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 800ff80:	4b01      	ldr	r3, [pc, #4]	; (800ff88 <face_detection_configure_activations+0x268>)
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	e040      	b.n	8010008 <face_detection_configure_activations+0x2e8>
 800ff86:	bf00      	nop
 800ff88:	240214fc 	.word	0x240214fc
 800ff8c:	00011700 	.word	0x00011700
 800ff90:	24000588 	.word	0x24000588
 800ff94:	00018304 	.word	0x00018304
 800ff98:	24000368 	.word	0x24000368
 800ff9c:	24000378 	.word	0x24000378
 800ffa0:	24000598 	.word	0x24000598
 800ffa4:	240005a8 	.word	0x240005a8
 800ffa8:	00017ff4 	.word	0x00017ff4
 800ffac:	24000388 	.word	0x24000388
 800ffb0:	24000398 	.word	0x24000398
 800ffb4:	240005b8 	.word	0x240005b8
 800ffb8:	00018720 	.word	0x00018720
 800ffbc:	240003a8 	.word	0x240003a8
 800ffc0:	000187b0 	.word	0x000187b0
 800ffc4:	240005c8 	.word	0x240005c8
 800ffc8:	0001cfb0 	.word	0x0001cfb0
 800ffcc:	240003b8 	.word	0x240003b8
 800ffd0:	240003c8 	.word	0x240003c8
 800ffd4:	240005d8 	.word	0x240005d8
 800ffd8:	240005e8 	.word	0x240005e8
 800ffdc:	0001cabc 	.word	0x0001cabc
 800ffe0:	240003d8 	.word	0x240003d8
 800ffe4:	240003e8 	.word	0x240003e8
 800ffe8:	240005f8 	.word	0x240005f8
 800ffec:	240003f8 	.word	0x240003f8
 800fff0:	24000608 	.word	0x24000608
 800fff4:	24000408 	.word	0x24000408
 800fff8:	24000418 	.word	0x24000418
 800fffc:	24000618 	.word	0x24000618
 8010000:	24000628 	.word	0x24000628
 8010004:	24000428 	.word	0x24000428
 8010008:	4a98      	ldr	r2, [pc, #608]	; (801026c <face_detection_configure_activations+0x54c>)
 801000a:	60d3      	str	r3, [r2, #12]
    
    conv2d_8_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 87824);
 801000c:	4b98      	ldr	r3, [pc, #608]	; (8010270 <face_detection_configure_activations+0x550>)
 801000e:	681a      	ldr	r2, [r3, #0]
 8010010:	4b98      	ldr	r3, [pc, #608]	; (8010274 <face_detection_configure_activations+0x554>)
 8010012:	4413      	add	r3, r2
 8010014:	4a98      	ldr	r2, [pc, #608]	; (8010278 <face_detection_configure_activations+0x558>)
 8010016:	6093      	str	r3, [r2, #8]
    conv2d_8_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 87824);
 8010018:	4b95      	ldr	r3, [pc, #596]	; (8010270 <face_detection_configure_activations+0x550>)
 801001a:	681a      	ldr	r2, [r3, #0]
 801001c:	4b95      	ldr	r3, [pc, #596]	; (8010274 <face_detection_configure_activations+0x554>)
 801001e:	4413      	add	r3, r2
 8010020:	4a95      	ldr	r2, [pc, #596]	; (8010278 <face_detection_configure_activations+0x558>)
 8010022:	60d3      	str	r3, [r2, #12]
    
    conv2d_8_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 54224);
 8010024:	4b92      	ldr	r3, [pc, #584]	; (8010270 <face_detection_configure_activations+0x550>)
 8010026:	681a      	ldr	r2, [r3, #0]
 8010028:	f24d 33d0 	movw	r3, #54224	; 0xd3d0
 801002c:	4413      	add	r3, r2
 801002e:	4a93      	ldr	r2, [pc, #588]	; (801027c <face_detection_configure_activations+0x55c>)
 8010030:	6093      	str	r3, [r2, #8]
    conv2d_8_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 54224);
 8010032:	4b8f      	ldr	r3, [pc, #572]	; (8010270 <face_detection_configure_activations+0x550>)
 8010034:	681a      	ldr	r2, [r3, #0]
 8010036:	f24d 33d0 	movw	r3, #54224	; 0xd3d0
 801003a:	4413      	add	r3, r2
 801003c:	4a8f      	ldr	r2, [pc, #572]	; (801027c <face_detection_configure_activations+0x55c>)
 801003e:	60d3      	str	r3, [r2, #12]
    
    conv2d_9_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010040:	4b8b      	ldr	r3, [pc, #556]	; (8010270 <face_detection_configure_activations+0x550>)
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	4a8e      	ldr	r2, [pc, #568]	; (8010280 <face_detection_configure_activations+0x560>)
 8010046:	6093      	str	r3, [r2, #8]
    conv2d_9_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010048:	4b89      	ldr	r3, [pc, #548]	; (8010270 <face_detection_configure_activations+0x550>)
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	4a8c      	ldr	r2, [pc, #560]	; (8010280 <face_detection_configure_activations+0x560>)
 801004e:	60d3      	str	r3, [r2, #12]
    
    conv2d_9_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 272);
 8010050:	4b87      	ldr	r3, [pc, #540]	; (8010270 <face_detection_configure_activations+0x550>)
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8010058:	4a8a      	ldr	r2, [pc, #552]	; (8010284 <face_detection_configure_activations+0x564>)
 801005a:	6093      	str	r3, [r2, #8]
    conv2d_9_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 272);
 801005c:	4b84      	ldr	r3, [pc, #528]	; (8010270 <face_detection_configure_activations+0x550>)
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8010064:	4a87      	ldr	r2, [pc, #540]	; (8010284 <face_detection_configure_activations+0x564>)
 8010066:	60d3      	str	r3, [r2, #12]
    
    eltwise_10_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 4880);
 8010068:	4b81      	ldr	r3, [pc, #516]	; (8010270 <face_detection_configure_activations+0x550>)
 801006a:	681a      	ldr	r2, [r3, #0]
 801006c:	f241 3310 	movw	r3, #4880	; 0x1310
 8010070:	4413      	add	r3, r2
 8010072:	4a85      	ldr	r2, [pc, #532]	; (8010288 <face_detection_configure_activations+0x568>)
 8010074:	6093      	str	r3, [r2, #8]
    eltwise_10_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 4880);
 8010076:	4b7e      	ldr	r3, [pc, #504]	; (8010270 <face_detection_configure_activations+0x550>)
 8010078:	681a      	ldr	r2, [r3, #0]
 801007a:	f241 3310 	movw	r3, #4880	; 0x1310
 801007e:	4413      	add	r3, r2
 8010080:	4a81      	ldr	r2, [pc, #516]	; (8010288 <face_detection_configure_activations+0x568>)
 8010082:	60d3      	str	r3, [r2, #12]
    
    conv2d_11_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010084:	4b7a      	ldr	r3, [pc, #488]	; (8010270 <face_detection_configure_activations+0x550>)
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	4a80      	ldr	r2, [pc, #512]	; (801028c <face_detection_configure_activations+0x56c>)
 801008a:	6093      	str	r3, [r2, #8]
    conv2d_11_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 801008c:	4b78      	ldr	r3, [pc, #480]	; (8010270 <face_detection_configure_activations+0x550>)
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	4a7e      	ldr	r2, [pc, #504]	; (801028c <face_detection_configure_activations+0x56c>)
 8010092:	60d3      	str	r3, [r2, #12]
    
    conv2d_11_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 9488);
 8010094:	4b76      	ldr	r3, [pc, #472]	; (8010270 <face_detection_configure_activations+0x550>)
 8010096:	681a      	ldr	r2, [r3, #0]
 8010098:	f242 5310 	movw	r3, #9488	; 0x2510
 801009c:	4413      	add	r3, r2
 801009e:	4a7c      	ldr	r2, [pc, #496]	; (8010290 <face_detection_configure_activations+0x570>)
 80100a0:	6093      	str	r3, [r2, #8]
    conv2d_11_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 9488);
 80100a2:	4b73      	ldr	r3, [pc, #460]	; (8010270 <face_detection_configure_activations+0x550>)
 80100a4:	681a      	ldr	r2, [r3, #0]
 80100a6:	f242 5310 	movw	r3, #9488	; 0x2510
 80100aa:	4413      	add	r3, r2
 80100ac:	4a78      	ldr	r2, [pc, #480]	; (8010290 <face_detection_configure_activations+0x570>)
 80100ae:	60d3      	str	r3, [r2, #12]
    
    conv2d_11_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 37136);
 80100b0:	4b6f      	ldr	r3, [pc, #444]	; (8010270 <face_detection_configure_activations+0x550>)
 80100b2:	681a      	ldr	r2, [r3, #0]
 80100b4:	f249 1310 	movw	r3, #37136	; 0x9110
 80100b8:	4413      	add	r3, r2
 80100ba:	4a76      	ldr	r2, [pc, #472]	; (8010294 <face_detection_configure_activations+0x574>)
 80100bc:	6093      	str	r3, [r2, #8]
    conv2d_11_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 37136);
 80100be:	4b6c      	ldr	r3, [pc, #432]	; (8010270 <face_detection_configure_activations+0x550>)
 80100c0:	681a      	ldr	r2, [r3, #0]
 80100c2:	f249 1310 	movw	r3, #37136	; 0x9110
 80100c6:	4413      	add	r3, r2
 80100c8:	4a72      	ldr	r2, [pc, #456]	; (8010294 <face_detection_configure_activations+0x574>)
 80100ca:	60d3      	str	r3, [r2, #12]
    
    conv2d_13_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 80100cc:	4b68      	ldr	r3, [pc, #416]	; (8010270 <face_detection_configure_activations+0x550>)
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	4a71      	ldr	r2, [pc, #452]	; (8010298 <face_detection_configure_activations+0x578>)
 80100d2:	6093      	str	r3, [r2, #8]
    conv2d_13_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 80100d4:	4b66      	ldr	r3, [pc, #408]	; (8010270 <face_detection_configure_activations+0x550>)
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	4a6f      	ldr	r2, [pc, #444]	; (8010298 <face_detection_configure_activations+0x578>)
 80100da:	60d3      	str	r3, [r2, #12]
    
    conv2d_13_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 30000);
 80100dc:	4b64      	ldr	r3, [pc, #400]	; (8010270 <face_detection_configure_activations+0x550>)
 80100de:	681a      	ldr	r2, [r3, #0]
 80100e0:	f247 5330 	movw	r3, #30000	; 0x7530
 80100e4:	4413      	add	r3, r2
 80100e6:	4a6d      	ldr	r2, [pc, #436]	; (801029c <face_detection_configure_activations+0x57c>)
 80100e8:	6093      	str	r3, [r2, #8]
    conv2d_13_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 30000);
 80100ea:	4b61      	ldr	r3, [pc, #388]	; (8010270 <face_detection_configure_activations+0x550>)
 80100ec:	681a      	ldr	r2, [r3, #0]
 80100ee:	f247 5330 	movw	r3, #30000	; 0x7530
 80100f2:	4413      	add	r3, r2
 80100f4:	4a69      	ldr	r2, [pc, #420]	; (801029c <face_detection_configure_activations+0x57c>)
 80100f6:	60d3      	str	r3, [r2, #12]
    
    conv2d_13_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 31780);
 80100f8:	4b5d      	ldr	r3, [pc, #372]	; (8010270 <face_detection_configure_activations+0x550>)
 80100fa:	681a      	ldr	r2, [r3, #0]
 80100fc:	f647 4324 	movw	r3, #31780	; 0x7c24
 8010100:	4413      	add	r3, r2
 8010102:	4a67      	ldr	r2, [pc, #412]	; (80102a0 <face_detection_configure_activations+0x580>)
 8010104:	6093      	str	r3, [r2, #8]
    conv2d_13_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 31780);
 8010106:	4b5a      	ldr	r3, [pc, #360]	; (8010270 <face_detection_configure_activations+0x550>)
 8010108:	681a      	ldr	r2, [r3, #0]
 801010a:	f647 4324 	movw	r3, #31780	; 0x7c24
 801010e:	4413      	add	r3, r2
 8010110:	4a63      	ldr	r2, [pc, #396]	; (80102a0 <face_detection_configure_activations+0x580>)
 8010112:	60d3      	str	r3, [r2, #12]
    
    conv2d_13_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 38692);
 8010114:	4b56      	ldr	r3, [pc, #344]	; (8010270 <face_detection_configure_activations+0x550>)
 8010116:	681a      	ldr	r2, [r3, #0]
 8010118:	f249 7324 	movw	r3, #38692	; 0x9724
 801011c:	4413      	add	r3, r2
 801011e:	4a61      	ldr	r2, [pc, #388]	; (80102a4 <face_detection_configure_activations+0x584>)
 8010120:	6093      	str	r3, [r2, #8]
    conv2d_13_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 38692);
 8010122:	4b53      	ldr	r3, [pc, #332]	; (8010270 <face_detection_configure_activations+0x550>)
 8010124:	681a      	ldr	r2, [r3, #0]
 8010126:	f249 7324 	movw	r3, #38692	; 0x9724
 801012a:	4413      	add	r3, r2
 801012c:	4a5d      	ldr	r2, [pc, #372]	; (80102a4 <face_detection_configure_activations+0x584>)
 801012e:	60d3      	str	r3, [r2, #12]
    
    conv2d_14_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010130:	4b4f      	ldr	r3, [pc, #316]	; (8010270 <face_detection_configure_activations+0x550>)
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	4a5c      	ldr	r2, [pc, #368]	; (80102a8 <face_detection_configure_activations+0x588>)
 8010136:	6093      	str	r3, [r2, #8]
    conv2d_14_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010138:	4b4d      	ldr	r3, [pc, #308]	; (8010270 <face_detection_configure_activations+0x550>)
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	4a5a      	ldr	r2, [pc, #360]	; (80102a8 <face_detection_configure_activations+0x588>)
 801013e:	60d3      	str	r3, [r2, #12]
    
    conv2d_14_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 352);
 8010140:	4b4b      	ldr	r3, [pc, #300]	; (8010270 <face_detection_configure_activations+0x550>)
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8010148:	4a58      	ldr	r2, [pc, #352]	; (80102ac <face_detection_configure_activations+0x58c>)
 801014a:	6093      	str	r3, [r2, #8]
    conv2d_14_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 352);
 801014c:	4b48      	ldr	r3, [pc, #288]	; (8010270 <face_detection_configure_activations+0x550>)
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8010154:	4a55      	ldr	r2, [pc, #340]	; (80102ac <face_detection_configure_activations+0x58c>)
 8010156:	60d3      	str	r3, [r2, #12]
    
    conv2d_15_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 2656);
 8010158:	4b45      	ldr	r3, [pc, #276]	; (8010270 <face_detection_configure_activations+0x550>)
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	f503 6326 	add.w	r3, r3, #2656	; 0xa60
 8010160:	4a53      	ldr	r2, [pc, #332]	; (80102b0 <face_detection_configure_activations+0x590>)
 8010162:	6093      	str	r3, [r2, #8]
    conv2d_15_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 2656);
 8010164:	4b42      	ldr	r3, [pc, #264]	; (8010270 <face_detection_configure_activations+0x550>)
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	f503 6326 	add.w	r3, r3, #2656	; 0xa60
 801016c:	4a50      	ldr	r2, [pc, #320]	; (80102b0 <face_detection_configure_activations+0x590>)
 801016e:	60d3      	str	r3, [r2, #12]
    
    conv2d_15_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 3680);
 8010170:	4b3f      	ldr	r3, [pc, #252]	; (8010270 <face_detection_configure_activations+0x550>)
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	f503 6366 	add.w	r3, r3, #3680	; 0xe60
 8010178:	4a4e      	ldr	r2, [pc, #312]	; (80102b4 <face_detection_configure_activations+0x594>)
 801017a:	6093      	str	r3, [r2, #8]
    conv2d_15_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 3680);
 801017c:	4b3c      	ldr	r3, [pc, #240]	; (8010270 <face_detection_configure_activations+0x550>)
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	f503 6366 	add.w	r3, r3, #3680	; 0xe60
 8010184:	4a4b      	ldr	r2, [pc, #300]	; (80102b4 <face_detection_configure_activations+0x594>)
 8010186:	60d3      	str	r3, [r2, #12]
    
    conv2d_15_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 17504);
 8010188:	4b39      	ldr	r3, [pc, #228]	; (8010270 <face_detection_configure_activations+0x550>)
 801018a:	681a      	ldr	r2, [r3, #0]
 801018c:	f244 4360 	movw	r3, #17504	; 0x4460
 8010190:	4413      	add	r3, r2
 8010192:	4a49      	ldr	r2, [pc, #292]	; (80102b8 <face_detection_configure_activations+0x598>)
 8010194:	6093      	str	r3, [r2, #8]
    conv2d_15_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 17504);
 8010196:	4b36      	ldr	r3, [pc, #216]	; (8010270 <face_detection_configure_activations+0x550>)
 8010198:	681a      	ldr	r2, [r3, #0]
 801019a:	f244 4360 	movw	r3, #17504	; 0x4460
 801019e:	4413      	add	r3, r2
 80101a0:	4a45      	ldr	r2, [pc, #276]	; (80102b8 <face_detection_configure_activations+0x598>)
 80101a2:	60d3      	str	r3, [r2, #12]
    
    conv2d_16_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 31328);
 80101a4:	4b32      	ldr	r3, [pc, #200]	; (8010270 <face_detection_configure_activations+0x550>)
 80101a6:	681a      	ldr	r2, [r3, #0]
 80101a8:	f647 2360 	movw	r3, #31328	; 0x7a60
 80101ac:	4413      	add	r3, r2
 80101ae:	4a43      	ldr	r2, [pc, #268]	; (80102bc <face_detection_configure_activations+0x59c>)
 80101b0:	6093      	str	r3, [r2, #8]
    conv2d_16_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 31328);
 80101b2:	4b2f      	ldr	r3, [pc, #188]	; (8010270 <face_detection_configure_activations+0x550>)
 80101b4:	681a      	ldr	r2, [r3, #0]
 80101b6:	f647 2360 	movw	r3, #31328	; 0x7a60
 80101ba:	4413      	add	r3, r2
 80101bc:	4a3f      	ldr	r2, [pc, #252]	; (80102bc <face_detection_configure_activations+0x59c>)
 80101be:	60d3      	str	r3, [r2, #12]
    
    conv2d_16_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 2656);
 80101c0:	4b2b      	ldr	r3, [pc, #172]	; (8010270 <face_detection_configure_activations+0x550>)
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	f503 6326 	add.w	r3, r3, #2656	; 0xa60
 80101c8:	4a3d      	ldr	r2, [pc, #244]	; (80102c0 <face_detection_configure_activations+0x5a0>)
 80101ca:	6093      	str	r3, [r2, #8]
    conv2d_16_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 2656);
 80101cc:	4b28      	ldr	r3, [pc, #160]	; (8010270 <face_detection_configure_activations+0x550>)
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	f503 6326 	add.w	r3, r3, #2656	; 0xa60
 80101d4:	4a3a      	ldr	r2, [pc, #232]	; (80102c0 <face_detection_configure_activations+0x5a0>)
 80101d6:	60d3      	str	r3, [r2, #12]
    
    conv2d_16_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 6212);
 80101d8:	4b25      	ldr	r3, [pc, #148]	; (8010270 <face_detection_configure_activations+0x550>)
 80101da:	681a      	ldr	r2, [r3, #0]
 80101dc:	f641 0344 	movw	r3, #6212	; 0x1844
 80101e0:	4413      	add	r3, r2
 80101e2:	4a38      	ldr	r2, [pc, #224]	; (80102c4 <face_detection_configure_activations+0x5a4>)
 80101e4:	6093      	str	r3, [r2, #8]
    conv2d_16_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 6212);
 80101e6:	4b22      	ldr	r3, [pc, #136]	; (8010270 <face_detection_configure_activations+0x550>)
 80101e8:	681a      	ldr	r2, [r3, #0]
 80101ea:	f641 0344 	movw	r3, #6212	; 0x1844
 80101ee:	4413      	add	r3, r2
 80101f0:	4a34      	ldr	r2, [pc, #208]	; (80102c4 <face_detection_configure_activations+0x5a4>)
 80101f2:	60d3      	str	r3, [r2, #12]
    
    conv2d_16_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 50144);
 80101f4:	4b1e      	ldr	r3, [pc, #120]	; (8010270 <face_detection_configure_activations+0x550>)
 80101f6:	681a      	ldr	r2, [r3, #0]
 80101f8:	f24c 33e0 	movw	r3, #50144	; 0xc3e0
 80101fc:	4413      	add	r3, r2
 80101fe:	4a32      	ldr	r2, [pc, #200]	; (80102c8 <face_detection_configure_activations+0x5a8>)
 8010200:	6093      	str	r3, [r2, #8]
    conv2d_16_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 50144);
 8010202:	4b1b      	ldr	r3, [pc, #108]	; (8010270 <face_detection_configure_activations+0x550>)
 8010204:	681a      	ldr	r2, [r3, #0]
 8010206:	f24c 33e0 	movw	r3, #50144	; 0xc3e0
 801020a:	4413      	add	r3, r2
 801020c:	4a2e      	ldr	r2, [pc, #184]	; (80102c8 <face_detection_configure_activations+0x5a8>)
 801020e:	60d3      	str	r3, [r2, #12]
    
    conv2d_17_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 2656);
 8010210:	4b17      	ldr	r3, [pc, #92]	; (8010270 <face_detection_configure_activations+0x550>)
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	f503 6326 	add.w	r3, r3, #2656	; 0xa60
 8010218:	4a2c      	ldr	r2, [pc, #176]	; (80102cc <face_detection_configure_activations+0x5ac>)
 801021a:	6093      	str	r3, [r2, #8]
    conv2d_17_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 2656);
 801021c:	4b14      	ldr	r3, [pc, #80]	; (8010270 <face_detection_configure_activations+0x550>)
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	f503 6326 	add.w	r3, r3, #2656	; 0xa60
 8010224:	4a29      	ldr	r2, [pc, #164]	; (80102cc <face_detection_configure_activations+0x5ac>)
 8010226:	60d3      	str	r3, [r2, #12]
    
    conv2d_17_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 3200);
 8010228:	4b11      	ldr	r3, [pc, #68]	; (8010270 <face_detection_configure_activations+0x550>)
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 8010230:	4a27      	ldr	r2, [pc, #156]	; (80102d0 <face_detection_configure_activations+0x5b0>)
 8010232:	6093      	str	r3, [r2, #8]
    conv2d_17_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 3200);
 8010234:	4b0e      	ldr	r3, [pc, #56]	; (8010270 <face_detection_configure_activations+0x550>)
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 801023c:	4a24      	ldr	r2, [pc, #144]	; (80102d0 <face_detection_configure_activations+0x5b0>)
 801023e:	60d3      	str	r3, [r2, #12]
    
    eltwise_18_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 5504);
 8010240:	4b0b      	ldr	r3, [pc, #44]	; (8010270 <face_detection_configure_activations+0x550>)
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	f503 53ac 	add.w	r3, r3, #5504	; 0x1580
 8010248:	4a22      	ldr	r2, [pc, #136]	; (80102d4 <face_detection_configure_activations+0x5b4>)
 801024a:	6093      	str	r3, [r2, #8]
    eltwise_18_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 5504);
 801024c:	4b08      	ldr	r3, [pc, #32]	; (8010270 <face_detection_configure_activations+0x550>)
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	f503 53ac 	add.w	r3, r3, #5504	; 0x1580
 8010254:	4a1f      	ldr	r2, [pc, #124]	; (80102d4 <face_detection_configure_activations+0x5b4>)
 8010256:	60d3      	str	r3, [r2, #12]
    
    conv2d_19_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010258:	4b05      	ldr	r3, [pc, #20]	; (8010270 <face_detection_configure_activations+0x550>)
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	4a1e      	ldr	r2, [pc, #120]	; (80102d8 <face_detection_configure_activations+0x5b8>)
 801025e:	6093      	str	r3, [r2, #8]
    conv2d_19_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010260:	4b03      	ldr	r3, [pc, #12]	; (8010270 <face_detection_configure_activations+0x550>)
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	4a1c      	ldr	r2, [pc, #112]	; (80102d8 <face_detection_configure_activations+0x5b8>)
 8010266:	60d3      	str	r3, [r2, #12]
 8010268:	e038      	b.n	80102dc <face_detection_configure_activations+0x5bc>
 801026a:	bf00      	nop
 801026c:	24000428 	.word	0x24000428
 8010270:	240214fc 	.word	0x240214fc
 8010274:	00015710 	.word	0x00015710
 8010278:	24000438 	.word	0x24000438
 801027c:	24000638 	.word	0x24000638
 8010280:	24000448 	.word	0x24000448
 8010284:	24000648 	.word	0x24000648
 8010288:	24000658 	.word	0x24000658
 801028c:	24000458 	.word	0x24000458
 8010290:	24000468 	.word	0x24000468
 8010294:	24000668 	.word	0x24000668
 8010298:	24000678 	.word	0x24000678
 801029c:	24000478 	.word	0x24000478
 80102a0:	24000488 	.word	0x24000488
 80102a4:	24000688 	.word	0x24000688
 80102a8:	24000498 	.word	0x24000498
 80102ac:	24000698 	.word	0x24000698
 80102b0:	240004a8 	.word	0x240004a8
 80102b4:	240004b8 	.word	0x240004b8
 80102b8:	240006a8 	.word	0x240006a8
 80102bc:	240006b8 	.word	0x240006b8
 80102c0:	240004c8 	.word	0x240004c8
 80102c4:	240004d8 	.word	0x240004d8
 80102c8:	240006c8 	.word	0x240006c8
 80102cc:	240004e8 	.word	0x240004e8
 80102d0:	240006d8 	.word	0x240006d8
 80102d4:	240006e8 	.word	0x240006e8
 80102d8:	240004f8 	.word	0x240004f8
    
    conv2d_19_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 7808);
 80102dc:	4b6c      	ldr	r3, [pc, #432]	; (8010490 <face_detection_configure_activations+0x770>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 80102e4:	4a6b      	ldr	r2, [pc, #428]	; (8010494 <face_detection_configure_activations+0x774>)
 80102e6:	6093      	str	r3, [r2, #8]
    conv2d_19_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 7808);
 80102e8:	4b69      	ldr	r3, [pc, #420]	; (8010490 <face_detection_configure_activations+0x770>)
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 80102f0:	4a68      	ldr	r2, [pc, #416]	; (8010494 <face_detection_configure_activations+0x774>)
 80102f2:	60d3      	str	r3, [r2, #12]
    
    conv2d_19_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 21632);
 80102f4:	4b66      	ldr	r3, [pc, #408]	; (8010490 <face_detection_configure_activations+0x770>)
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	f503 43a9 	add.w	r3, r3, #21632	; 0x5480
 80102fc:	4a66      	ldr	r2, [pc, #408]	; (8010498 <face_detection_configure_activations+0x778>)
 80102fe:	6093      	str	r3, [r2, #8]
    conv2d_19_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 21632);
 8010300:	4b63      	ldr	r3, [pc, #396]	; (8010490 <face_detection_configure_activations+0x770>)
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	f503 43a9 	add.w	r3, r3, #21632	; 0x5480
 8010308:	4a63      	ldr	r2, [pc, #396]	; (8010498 <face_detection_configure_activations+0x778>)
 801030a:	60d3      	str	r3, [r2, #12]
    
    conv2d_20_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 35456);
 801030c:	4b60      	ldr	r3, [pc, #384]	; (8010490 <face_detection_configure_activations+0x770>)
 801030e:	681a      	ldr	r2, [r3, #0]
 8010310:	f648 2380 	movw	r3, #35456	; 0x8a80
 8010314:	4413      	add	r3, r2
 8010316:	4a61      	ldr	r2, [pc, #388]	; (801049c <face_detection_configure_activations+0x77c>)
 8010318:	6093      	str	r3, [r2, #8]
    conv2d_20_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 35456);
 801031a:	4b5d      	ldr	r3, [pc, #372]	; (8010490 <face_detection_configure_activations+0x770>)
 801031c:	681a      	ldr	r2, [r3, #0]
 801031e:	f648 2380 	movw	r3, #35456	; 0x8a80
 8010322:	4413      	add	r3, r2
 8010324:	4a5d      	ldr	r2, [pc, #372]	; (801049c <face_detection_configure_activations+0x77c>)
 8010326:	60d3      	str	r3, [r2, #12]
    
    conv2d_20_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010328:	4b59      	ldr	r3, [pc, #356]	; (8010490 <face_detection_configure_activations+0x770>)
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	4a5c      	ldr	r2, [pc, #368]	; (80104a0 <face_detection_configure_activations+0x780>)
 801032e:	6093      	str	r3, [r2, #8]
    conv2d_20_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010330:	4b57      	ldr	r3, [pc, #348]	; (8010490 <face_detection_configure_activations+0x770>)
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	4a5a      	ldr	r2, [pc, #360]	; (80104a0 <face_detection_configure_activations+0x780>)
 8010336:	60d3      	str	r3, [r2, #12]
    
    conv2d_20_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 7808);
 8010338:	4b55      	ldr	r3, [pc, #340]	; (8010490 <face_detection_configure_activations+0x770>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 8010340:	4a58      	ldr	r2, [pc, #352]	; (80104a4 <face_detection_configure_activations+0x784>)
 8010342:	6093      	str	r3, [r2, #8]
    conv2d_20_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 7808);
 8010344:	4b52      	ldr	r3, [pc, #328]	; (8010490 <face_detection_configure_activations+0x770>)
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 801034c:	4a55      	ldr	r2, [pc, #340]	; (80104a4 <face_detection_configure_activations+0x784>)
 801034e:	60d3      	str	r3, [r2, #12]
    
    conv2d_20_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 21632);
 8010350:	4b4f      	ldr	r3, [pc, #316]	; (8010490 <face_detection_configure_activations+0x770>)
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	f503 43a9 	add.w	r3, r3, #21632	; 0x5480
 8010358:	4a53      	ldr	r2, [pc, #332]	; (80104a8 <face_detection_configure_activations+0x788>)
 801035a:	6093      	str	r3, [r2, #8]
    conv2d_20_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 21632);
 801035c:	4b4c      	ldr	r3, [pc, #304]	; (8010490 <face_detection_configure_activations+0x770>)
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	f503 43a9 	add.w	r3, r3, #21632	; 0x5480
 8010364:	4a50      	ldr	r2, [pc, #320]	; (80104a8 <face_detection_configure_activations+0x788>)
 8010366:	60d3      	str	r3, [r2, #12]
    
    conv2d_21_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010368:	4b49      	ldr	r3, [pc, #292]	; (8010490 <face_detection_configure_activations+0x770>)
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	4a4f      	ldr	r2, [pc, #316]	; (80104ac <face_detection_configure_activations+0x78c>)
 801036e:	6093      	str	r3, [r2, #8]
    conv2d_21_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010370:	4b47      	ldr	r3, [pc, #284]	; (8010490 <face_detection_configure_activations+0x770>)
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	4a4d      	ldr	r2, [pc, #308]	; (80104ac <face_detection_configure_activations+0x78c>)
 8010376:	60d3      	str	r3, [r2, #12]
    
    conv2d_21_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 544);
 8010378:	4b45      	ldr	r3, [pc, #276]	; (8010490 <face_detection_configure_activations+0x770>)
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8010380:	4a4b      	ldr	r2, [pc, #300]	; (80104b0 <face_detection_configure_activations+0x790>)
 8010382:	6093      	str	r3, [r2, #8]
    conv2d_21_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 544);
 8010384:	4b42      	ldr	r3, [pc, #264]	; (8010490 <face_detection_configure_activations+0x770>)
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	f503 7308 	add.w	r3, r3, #544	; 0x220
 801038c:	4a48      	ldr	r2, [pc, #288]	; (80104b0 <face_detection_configure_activations+0x790>)
 801038e:	60d3      	str	r3, [r2, #12]
    
    eltwise_22_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 2848);
 8010390:	4b3f      	ldr	r3, [pc, #252]	; (8010490 <face_detection_configure_activations+0x770>)
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	f503 6332 	add.w	r3, r3, #2848	; 0xb20
 8010398:	4a46      	ldr	r2, [pc, #280]	; (80104b4 <face_detection_configure_activations+0x794>)
 801039a:	6093      	str	r3, [r2, #8]
    eltwise_22_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 2848);
 801039c:	4b3c      	ldr	r3, [pc, #240]	; (8010490 <face_detection_configure_activations+0x770>)
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	f503 6332 	add.w	r3, r3, #2848	; 0xb20
 80103a4:	4a43      	ldr	r2, [pc, #268]	; (80104b4 <face_detection_configure_activations+0x794>)
 80103a6:	60d3      	str	r3, [r2, #12]
    
    conv2d_23_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 80103a8:	4b39      	ldr	r3, [pc, #228]	; (8010490 <face_detection_configure_activations+0x770>)
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	4a42      	ldr	r2, [pc, #264]	; (80104b8 <face_detection_configure_activations+0x798>)
 80103ae:	6093      	str	r3, [r2, #8]
    conv2d_23_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 80103b0:	4b37      	ldr	r3, [pc, #220]	; (8010490 <face_detection_configure_activations+0x770>)
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	4a40      	ldr	r2, [pc, #256]	; (80104b8 <face_detection_configure_activations+0x798>)
 80103b6:	60d3      	str	r3, [r2, #12]
    
    conv2d_23_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 5152);
 80103b8:	4b35      	ldr	r3, [pc, #212]	; (8010490 <face_detection_configure_activations+0x770>)
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 80103c0:	4a3e      	ldr	r2, [pc, #248]	; (80104bc <face_detection_configure_activations+0x79c>)
 80103c2:	6093      	str	r3, [r2, #8]
    conv2d_23_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 5152);
 80103c4:	4b32      	ldr	r3, [pc, #200]	; (8010490 <face_detection_configure_activations+0x770>)
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 80103cc:	4a3b      	ldr	r2, [pc, #236]	; (80104bc <face_detection_configure_activations+0x79c>)
 80103ce:	60d3      	str	r3, [r2, #12]
    
    conv2d_23_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 18976);
 80103d0:	4b2f      	ldr	r3, [pc, #188]	; (8010490 <face_detection_configure_activations+0x770>)
 80103d2:	681a      	ldr	r2, [r3, #0]
 80103d4:	f644 2320 	movw	r3, #18976	; 0x4a20
 80103d8:	4413      	add	r3, r2
 80103da:	4a39      	ldr	r2, [pc, #228]	; (80104c0 <face_detection_configure_activations+0x7a0>)
 80103dc:	6093      	str	r3, [r2, #8]
    conv2d_23_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 18976);
 80103de:	4b2c      	ldr	r3, [pc, #176]	; (8010490 <face_detection_configure_activations+0x770>)
 80103e0:	681a      	ldr	r2, [r3, #0]
 80103e2:	f644 2320 	movw	r3, #18976	; 0x4a20
 80103e6:	4413      	add	r3, r2
 80103e8:	4a35      	ldr	r2, [pc, #212]	; (80104c0 <face_detection_configure_activations+0x7a0>)
 80103ea:	60d3      	str	r3, [r2, #12]
    
    conv2d_24_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 80103ec:	4b28      	ldr	r3, [pc, #160]	; (8010490 <face_detection_configure_activations+0x770>)
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	4a34      	ldr	r2, [pc, #208]	; (80104c4 <face_detection_configure_activations+0x7a4>)
 80103f2:	6093      	str	r3, [r2, #8]
    conv2d_24_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 80103f4:	4b26      	ldr	r3, [pc, #152]	; (8010490 <face_detection_configure_activations+0x770>)
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	4a32      	ldr	r2, [pc, #200]	; (80104c4 <face_detection_configure_activations+0x7a4>)
 80103fa:	60d3      	str	r3, [r2, #12]
    
    conv2d_24_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 704);
 80103fc:	4b24      	ldr	r3, [pc, #144]	; (8010490 <face_detection_configure_activations+0x770>)
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8010404:	4a30      	ldr	r2, [pc, #192]	; (80104c8 <face_detection_configure_activations+0x7a8>)
 8010406:	6093      	str	r3, [r2, #8]
    conv2d_24_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 704);
 8010408:	4b21      	ldr	r3, [pc, #132]	; (8010490 <face_detection_configure_activations+0x770>)
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8010410:	4a2d      	ldr	r2, [pc, #180]	; (80104c8 <face_detection_configure_activations+0x7a8>)
 8010412:	60d3      	str	r3, [r2, #12]
    
    conv2d_25_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010414:	4b1e      	ldr	r3, [pc, #120]	; (8010490 <face_detection_configure_activations+0x770>)
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	4a2c      	ldr	r2, [pc, #176]	; (80104cc <face_detection_configure_activations+0x7ac>)
 801041a:	6093      	str	r3, [r2, #8]
    conv2d_25_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 801041c:	4b1c      	ldr	r3, [pc, #112]	; (8010490 <face_detection_configure_activations+0x770>)
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	4a2a      	ldr	r2, [pc, #168]	; (80104cc <face_detection_configure_activations+0x7ac>)
 8010422:	60d3      	str	r3, [r2, #12]
    
    conv2d_25_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 148);
 8010424:	4b1a      	ldr	r3, [pc, #104]	; (8010490 <face_detection_configure_activations+0x770>)
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	3394      	adds	r3, #148	; 0x94
 801042a:	4a29      	ldr	r2, [pc, #164]	; (80104d0 <face_detection_configure_activations+0x7b0>)
 801042c:	6093      	str	r3, [r2, #8]
    conv2d_25_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 148);
 801042e:	4b18      	ldr	r3, [pc, #96]	; (8010490 <face_detection_configure_activations+0x770>)
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	3394      	adds	r3, #148	; 0x94
 8010434:	4a26      	ldr	r2, [pc, #152]	; (80104d0 <face_detection_configure_activations+0x7b0>)
 8010436:	60d3      	str	r3, [r2, #12]
    
    conv2d_25_0_conversion_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 436);
 8010438:	4b15      	ldr	r3, [pc, #84]	; (8010490 <face_detection_configure_activations+0x770>)
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8010440:	4a24      	ldr	r2, [pc, #144]	; (80104d4 <face_detection_configure_activations+0x7b4>)
 8010442:	6093      	str	r3, [r2, #8]
    conv2d_25_0_conversion_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 436);
 8010444:	4b12      	ldr	r3, [pc, #72]	; (8010490 <face_detection_configure_activations+0x770>)
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 801044c:	4a21      	ldr	r2, [pc, #132]	; (80104d4 <face_detection_configure_activations+0x7b4>)
 801044e:	60d3      	str	r3, [r2, #12]
    
    nl_26_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 1588);
 8010450:	4b0f      	ldr	r3, [pc, #60]	; (8010490 <face_detection_configure_activations+0x770>)
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	f203 6334 	addw	r3, r3, #1588	; 0x634
 8010458:	4a1f      	ldr	r2, [pc, #124]	; (80104d8 <face_detection_configure_activations+0x7b8>)
 801045a:	6093      	str	r3, [r2, #8]
    nl_26_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 1588);
 801045c:	4b0c      	ldr	r3, [pc, #48]	; (8010490 <face_detection_configure_activations+0x770>)
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	f203 6334 	addw	r3, r3, #1588	; 0x634
 8010464:	4a1c      	ldr	r2, [pc, #112]	; (80104d8 <face_detection_configure_activations+0x7b8>)
 8010466:	60d3      	str	r3, [r2, #12]
    
    nl_26_0_conversion_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010468:	4b09      	ldr	r3, [pc, #36]	; (8010490 <face_detection_configure_activations+0x770>)
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	4a1b      	ldr	r2, [pc, #108]	; (80104dc <face_detection_configure_activations+0x7bc>)
 801046e:	6093      	str	r3, [r2, #8]
    nl_26_0_conversion_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8010470:	4b07      	ldr	r3, [pc, #28]	; (8010490 <face_detection_configure_activations+0x770>)
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	4a19      	ldr	r2, [pc, #100]	; (80104dc <face_detection_configure_activations+0x7bc>)
 8010476:	60d3      	str	r3, [r2, #12]
    
    return true;
 8010478:	2301      	movs	r3, #1
 801047a:	e005      	b.n	8010488 <face_detection_configure_activations+0x768>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 801047c:	2213      	movs	r2, #19
 801047e:	2130      	movs	r1, #48	; 0x30
 8010480:	6878      	ldr	r0, [r7, #4]
 8010482:	f000 ff3d 	bl	8011300 <ai_platform_network_set_error>
  return false;
 8010486:	2300      	movs	r3, #0
}
 8010488:	4618      	mov	r0, r3
 801048a:	3708      	adds	r7, #8
 801048c:	46bd      	mov	sp, r7
 801048e:	bd80      	pop	{r7, pc}
 8010490:	240214fc 	.word	0x240214fc
 8010494:	24000508 	.word	0x24000508
 8010498:	240006f8 	.word	0x240006f8
 801049c:	24000708 	.word	0x24000708
 80104a0:	24000518 	.word	0x24000518
 80104a4:	24000528 	.word	0x24000528
 80104a8:	24000718 	.word	0x24000718
 80104ac:	24000538 	.word	0x24000538
 80104b0:	24000728 	.word	0x24000728
 80104b4:	24000738 	.word	0x24000738
 80104b8:	24000548 	.word	0x24000548
 80104bc:	24000558 	.word	0x24000558
 80104c0:	24000748 	.word	0x24000748
 80104c4:	24000568 	.word	0x24000568
 80104c8:	24000758 	.word	0x24000758
 80104cc:	24000578 	.word	0x24000578
 80104d0:	24000768 	.word	0x24000768
 80104d4:	24000778 	.word	0x24000778
 80104d8:	24000788 	.word	0x24000788
 80104dc:	24000798 	.word	0x24000798

080104e0 <face_detection_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool face_detection_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b082      	sub	sp, #8
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]
 80104e8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_face_detection_weights_map, 1, params)) {
 80104ea:	683a      	ldr	r2, [r7, #0]
 80104ec:	2101      	movs	r1, #1
 80104ee:	489a      	ldr	r0, [pc, #616]	; (8010758 <face_detection_configure_weights+0x278>)
 80104f0:	f000 fd30 	bl	8010f54 <ai_platform_get_weights_map>
 80104f4:	4603      	mov	r3, r0
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	f000 837c 	beq.w	8010bf4 <face_detection_configure_weights+0x714>
    /* Updating weights (byte) offsets */
    
    conv2d_17_bias_array.format |= AI_FMT_FLAG_CONST;
 80104fc:	4b97      	ldr	r3, [pc, #604]	; (801075c <face_detection_configure_weights+0x27c>)
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010504:	4a95      	ldr	r2, [pc, #596]	; (801075c <face_detection_configure_weights+0x27c>)
 8010506:	6013      	str	r3, [r2, #0]
    conv2d_17_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 0);
 8010508:	4b93      	ldr	r3, [pc, #588]	; (8010758 <face_detection_configure_weights+0x278>)
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	4a93      	ldr	r2, [pc, #588]	; (801075c <face_detection_configure_weights+0x27c>)
 801050e:	6093      	str	r3, [r2, #8]
    conv2d_17_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 0);
 8010510:	4b91      	ldr	r3, [pc, #580]	; (8010758 <face_detection_configure_weights+0x278>)
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	4a91      	ldr	r2, [pc, #580]	; (801075c <face_detection_configure_weights+0x27c>)
 8010516:	60d3      	str	r3, [r2, #12]
    
    conv2d_19_weights_array.format |= AI_FMT_FLAG_CONST;
 8010518:	4b91      	ldr	r3, [pc, #580]	; (8010760 <face_detection_configure_weights+0x280>)
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010520:	4a8f      	ldr	r2, [pc, #572]	; (8010760 <face_detection_configure_weights+0x280>)
 8010522:	6013      	str	r3, [r2, #0]
    conv2d_19_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 64);
 8010524:	4b8c      	ldr	r3, [pc, #560]	; (8010758 <face_detection_configure_weights+0x278>)
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	3340      	adds	r3, #64	; 0x40
 801052a:	4a8d      	ldr	r2, [pc, #564]	; (8010760 <face_detection_configure_weights+0x280>)
 801052c:	6093      	str	r3, [r2, #8]
    conv2d_19_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 64);
 801052e:	4b8a      	ldr	r3, [pc, #552]	; (8010758 <face_detection_configure_weights+0x278>)
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	3340      	adds	r3, #64	; 0x40
 8010534:	4a8a      	ldr	r2, [pc, #552]	; (8010760 <face_detection_configure_weights+0x280>)
 8010536:	60d3      	str	r3, [r2, #12]
    
    conv2d_19_bias_array.format |= AI_FMT_FLAG_CONST;
 8010538:	4b8a      	ldr	r3, [pc, #552]	; (8010764 <face_detection_configure_weights+0x284>)
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010540:	4a88      	ldr	r2, [pc, #544]	; (8010764 <face_detection_configure_weights+0x284>)
 8010542:	6013      	str	r3, [r2, #0]
    conv2d_19_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 1600);
 8010544:	4b84      	ldr	r3, [pc, #528]	; (8010758 <face_detection_configure_weights+0x278>)
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 801054c:	4a85      	ldr	r2, [pc, #532]	; (8010764 <face_detection_configure_weights+0x284>)
 801054e:	6093      	str	r3, [r2, #8]
    conv2d_19_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 1600);
 8010550:	4b81      	ldr	r3, [pc, #516]	; (8010758 <face_detection_configure_weights+0x278>)
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8010558:	4a82      	ldr	r2, [pc, #520]	; (8010764 <face_detection_configure_weights+0x284>)
 801055a:	60d3      	str	r3, [r2, #12]
    
    conv2d_20_weights_array.format |= AI_FMT_FLAG_CONST;
 801055c:	4b82      	ldr	r3, [pc, #520]	; (8010768 <face_detection_configure_weights+0x288>)
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010564:	4a80      	ldr	r2, [pc, #512]	; (8010768 <face_detection_configure_weights+0x288>)
 8010566:	6013      	str	r3, [r2, #0]
    conv2d_20_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 1984);
 8010568:	4b7b      	ldr	r3, [pc, #492]	; (8010758 <face_detection_configure_weights+0x278>)
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8010570:	4a7d      	ldr	r2, [pc, #500]	; (8010768 <face_detection_configure_weights+0x288>)
 8010572:	6093      	str	r3, [r2, #8]
    conv2d_20_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 1984);
 8010574:	4b78      	ldr	r3, [pc, #480]	; (8010758 <face_detection_configure_weights+0x278>)
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 801057c:	4a7a      	ldr	r2, [pc, #488]	; (8010768 <face_detection_configure_weights+0x288>)
 801057e:	60d3      	str	r3, [r2, #12]
    
    conv2d_20_bias_array.format |= AI_FMT_FLAG_CONST;
 8010580:	4b7a      	ldr	r3, [pc, #488]	; (801076c <face_detection_configure_weights+0x28c>)
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010588:	4a78      	ldr	r2, [pc, #480]	; (801076c <face_detection_configure_weights+0x28c>)
 801058a:	6013      	str	r3, [r2, #0]
    conv2d_20_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 2848);
 801058c:	4b72      	ldr	r3, [pc, #456]	; (8010758 <face_detection_configure_weights+0x278>)
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	f503 6332 	add.w	r3, r3, #2848	; 0xb20
 8010594:	4a75      	ldr	r2, [pc, #468]	; (801076c <face_detection_configure_weights+0x28c>)
 8010596:	6093      	str	r3, [r2, #8]
    conv2d_20_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 2848);
 8010598:	4b6f      	ldr	r3, [pc, #444]	; (8010758 <face_detection_configure_weights+0x278>)
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	f503 6332 	add.w	r3, r3, #2848	; 0xb20
 80105a0:	4a72      	ldr	r2, [pc, #456]	; (801076c <face_detection_configure_weights+0x28c>)
 80105a2:	60d3      	str	r3, [r2, #12]
    
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 80105a4:	4b72      	ldr	r3, [pc, #456]	; (8010770 <face_detection_configure_weights+0x290>)
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80105ac:	4a70      	ldr	r2, [pc, #448]	; (8010770 <face_detection_configure_weights+0x290>)
 80105ae:	6013      	str	r3, [r2, #0]
    conv2d_21_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 3232);
 80105b0:	4b69      	ldr	r3, [pc, #420]	; (8010758 <face_detection_configure_weights+0x278>)
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 80105b8:	4a6d      	ldr	r2, [pc, #436]	; (8010770 <face_detection_configure_weights+0x290>)
 80105ba:	6093      	str	r3, [r2, #8]
    conv2d_21_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 3232);
 80105bc:	4b66      	ldr	r3, [pc, #408]	; (8010758 <face_detection_configure_weights+0x278>)
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 80105c4:	4a6a      	ldr	r2, [pc, #424]	; (8010770 <face_detection_configure_weights+0x290>)
 80105c6:	60d3      	str	r3, [r2, #12]
    
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 80105c8:	4b6a      	ldr	r3, [pc, #424]	; (8010774 <face_detection_configure_weights+0x294>)
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80105d0:	4a68      	ldr	r2, [pc, #416]	; (8010774 <face_detection_configure_weights+0x294>)
 80105d2:	6013      	str	r3, [r2, #0]
    conv2d_21_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 4768);
 80105d4:	4b60      	ldr	r3, [pc, #384]	; (8010758 <face_detection_configure_weights+0x278>)
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	f503 5395 	add.w	r3, r3, #4768	; 0x12a0
 80105dc:	4a65      	ldr	r2, [pc, #404]	; (8010774 <face_detection_configure_weights+0x294>)
 80105de:	6093      	str	r3, [r2, #8]
    conv2d_21_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 4768);
 80105e0:	4b5d      	ldr	r3, [pc, #372]	; (8010758 <face_detection_configure_weights+0x278>)
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	f503 5395 	add.w	r3, r3, #4768	; 0x12a0
 80105e8:	4a62      	ldr	r2, [pc, #392]	; (8010774 <face_detection_configure_weights+0x294>)
 80105ea:	60d3      	str	r3, [r2, #12]
    
    conv2d_23_weights_array.format |= AI_FMT_FLAG_CONST;
 80105ec:	4b62      	ldr	r3, [pc, #392]	; (8010778 <face_detection_configure_weights+0x298>)
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80105f4:	4a60      	ldr	r2, [pc, #384]	; (8010778 <face_detection_configure_weights+0x298>)
 80105f6:	6013      	str	r3, [r2, #0]
    conv2d_23_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 4832);
 80105f8:	4b57      	ldr	r3, [pc, #348]	; (8010758 <face_detection_configure_weights+0x278>)
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8010600:	4a5d      	ldr	r2, [pc, #372]	; (8010778 <face_detection_configure_weights+0x298>)
 8010602:	6093      	str	r3, [r2, #8]
    conv2d_23_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 4832);
 8010604:	4b54      	ldr	r3, [pc, #336]	; (8010758 <face_detection_configure_weights+0x278>)
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 801060c:	4a5a      	ldr	r2, [pc, #360]	; (8010778 <face_detection_configure_weights+0x298>)
 801060e:	60d3      	str	r3, [r2, #12]
    
    conv2d_23_bias_array.format |= AI_FMT_FLAG_CONST;
 8010610:	4b5a      	ldr	r3, [pc, #360]	; (801077c <face_detection_configure_weights+0x29c>)
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010618:	4a58      	ldr	r2, [pc, #352]	; (801077c <face_detection_configure_weights+0x29c>)
 801061a:	6013      	str	r3, [r2, #0]
    conv2d_23_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 6368);
 801061c:	4b4e      	ldr	r3, [pc, #312]	; (8010758 <face_detection_configure_weights+0x278>)
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	f503 53c7 	add.w	r3, r3, #6368	; 0x18e0
 8010624:	4a55      	ldr	r2, [pc, #340]	; (801077c <face_detection_configure_weights+0x29c>)
 8010626:	6093      	str	r3, [r2, #8]
    conv2d_23_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 6368);
 8010628:	4b4b      	ldr	r3, [pc, #300]	; (8010758 <face_detection_configure_weights+0x278>)
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	f503 53c7 	add.w	r3, r3, #6368	; 0x18e0
 8010630:	4a52      	ldr	r2, [pc, #328]	; (801077c <face_detection_configure_weights+0x29c>)
 8010632:	60d3      	str	r3, [r2, #12]
    
    conv2d_24_weights_array.format |= AI_FMT_FLAG_CONST;
 8010634:	4b52      	ldr	r3, [pc, #328]	; (8010780 <face_detection_configure_weights+0x2a0>)
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801063c:	4a50      	ldr	r2, [pc, #320]	; (8010780 <face_detection_configure_weights+0x2a0>)
 801063e:	6013      	str	r3, [r2, #0]
    conv2d_24_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 6752);
 8010640:	4b45      	ldr	r3, [pc, #276]	; (8010758 <face_detection_configure_weights+0x278>)
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	f503 53d3 	add.w	r3, r3, #6752	; 0x1a60
 8010648:	4a4d      	ldr	r2, [pc, #308]	; (8010780 <face_detection_configure_weights+0x2a0>)
 801064a:	6093      	str	r3, [r2, #8]
    conv2d_24_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 6752);
 801064c:	4b42      	ldr	r3, [pc, #264]	; (8010758 <face_detection_configure_weights+0x278>)
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	f503 53d3 	add.w	r3, r3, #6752	; 0x1a60
 8010654:	4a4a      	ldr	r2, [pc, #296]	; (8010780 <face_detection_configure_weights+0x2a0>)
 8010656:	60d3      	str	r3, [r2, #12]
    
    conv2d_24_bias_array.format |= AI_FMT_FLAG_CONST;
 8010658:	4b4a      	ldr	r3, [pc, #296]	; (8010784 <face_detection_configure_weights+0x2a4>)
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010660:	4a48      	ldr	r2, [pc, #288]	; (8010784 <face_detection_configure_weights+0x2a4>)
 8010662:	6013      	str	r3, [r2, #0]
    conv2d_24_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 9824);
 8010664:	4b3c      	ldr	r3, [pc, #240]	; (8010758 <face_detection_configure_weights+0x278>)
 8010666:	681a      	ldr	r2, [r3, #0]
 8010668:	f242 6360 	movw	r3, #9824	; 0x2660
 801066c:	4413      	add	r3, r2
 801066e:	4a45      	ldr	r2, [pc, #276]	; (8010784 <face_detection_configure_weights+0x2a4>)
 8010670:	6093      	str	r3, [r2, #8]
    conv2d_24_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 9824);
 8010672:	4b39      	ldr	r3, [pc, #228]	; (8010758 <face_detection_configure_weights+0x278>)
 8010674:	681a      	ldr	r2, [r3, #0]
 8010676:	f242 6360 	movw	r3, #9824	; 0x2660
 801067a:	4413      	add	r3, r2
 801067c:	4a41      	ldr	r2, [pc, #260]	; (8010784 <face_detection_configure_weights+0x2a4>)
 801067e:	60d3      	str	r3, [r2, #12]
    
    conv2d_25_weights_array.format |= AI_FMT_FLAG_CONST;
 8010680:	4b41      	ldr	r3, [pc, #260]	; (8010788 <face_detection_configure_weights+0x2a8>)
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010688:	4a3f      	ldr	r2, [pc, #252]	; (8010788 <face_detection_configure_weights+0x2a8>)
 801068a:	6013      	str	r3, [r2, #0]
    conv2d_25_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 9952);
 801068c:	4b32      	ldr	r3, [pc, #200]	; (8010758 <face_detection_configure_weights+0x278>)
 801068e:	681a      	ldr	r2, [r3, #0]
 8010690:	f242 63e0 	movw	r3, #9952	; 0x26e0
 8010694:	4413      	add	r3, r2
 8010696:	4a3c      	ldr	r2, [pc, #240]	; (8010788 <face_detection_configure_weights+0x2a8>)
 8010698:	6093      	str	r3, [r2, #8]
    conv2d_25_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 9952);
 801069a:	4b2f      	ldr	r3, [pc, #188]	; (8010758 <face_detection_configure_weights+0x278>)
 801069c:	681a      	ldr	r2, [r3, #0]
 801069e:	f242 63e0 	movw	r3, #9952	; 0x26e0
 80106a2:	4413      	add	r3, r2
 80106a4:	4a38      	ldr	r2, [pc, #224]	; (8010788 <face_detection_configure_weights+0x2a8>)
 80106a6:	60d3      	str	r3, [r2, #12]
    
    conv2d_25_bias_array.format |= AI_FMT_FLAG_CONST;
 80106a8:	4b38      	ldr	r3, [pc, #224]	; (801078c <face_detection_configure_weights+0x2ac>)
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80106b0:	4a36      	ldr	r2, [pc, #216]	; (801078c <face_detection_configure_weights+0x2ac>)
 80106b2:	6013      	str	r3, [r2, #0]
    conv2d_25_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 10016);
 80106b4:	4b28      	ldr	r3, [pc, #160]	; (8010758 <face_detection_configure_weights+0x278>)
 80106b6:	681a      	ldr	r2, [r3, #0]
 80106b8:	f242 7320 	movw	r3, #10016	; 0x2720
 80106bc:	4413      	add	r3, r2
 80106be:	4a33      	ldr	r2, [pc, #204]	; (801078c <face_detection_configure_weights+0x2ac>)
 80106c0:	6093      	str	r3, [r2, #8]
    conv2d_25_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 10016);
 80106c2:	4b25      	ldr	r3, [pc, #148]	; (8010758 <face_detection_configure_weights+0x278>)
 80106c4:	681a      	ldr	r2, [r3, #0]
 80106c6:	f242 7320 	movw	r3, #10016	; 0x2720
 80106ca:	4413      	add	r3, r2
 80106cc:	4a2f      	ldr	r2, [pc, #188]	; (801078c <face_detection_configure_weights+0x2ac>)
 80106ce:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80106d0:	4b2f      	ldr	r3, [pc, #188]	; (8010790 <face_detection_configure_weights+0x2b0>)
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80106d8:	4a2d      	ldr	r2, [pc, #180]	; (8010790 <face_detection_configure_weights+0x2b0>)
 80106da:	6013      	str	r3, [r2, #0]
    conv2d_0_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 10024);
 80106dc:	4b1e      	ldr	r3, [pc, #120]	; (8010758 <face_detection_configure_weights+0x278>)
 80106de:	681a      	ldr	r2, [r3, #0]
 80106e0:	f242 7328 	movw	r3, #10024	; 0x2728
 80106e4:	4413      	add	r3, r2
 80106e6:	4a2a      	ldr	r2, [pc, #168]	; (8010790 <face_detection_configure_weights+0x2b0>)
 80106e8:	6093      	str	r3, [r2, #8]
    conv2d_0_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 10024);
 80106ea:	4b1b      	ldr	r3, [pc, #108]	; (8010758 <face_detection_configure_weights+0x278>)
 80106ec:	681a      	ldr	r2, [r3, #0]
 80106ee:	f242 7328 	movw	r3, #10024	; 0x2728
 80106f2:	4413      	add	r3, r2
 80106f4:	4a26      	ldr	r2, [pc, #152]	; (8010790 <face_detection_configure_weights+0x2b0>)
 80106f6:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_bias_array.format |= AI_FMT_FLAG_CONST;
 80106f8:	4b26      	ldr	r3, [pc, #152]	; (8010794 <face_detection_configure_weights+0x2b4>)
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010700:	4a24      	ldr	r2, [pc, #144]	; (8010794 <face_detection_configure_weights+0x2b4>)
 8010702:	6013      	str	r3, [r2, #0]
    conv2d_0_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 10456);
 8010704:	4b14      	ldr	r3, [pc, #80]	; (8010758 <face_detection_configure_weights+0x278>)
 8010706:	681a      	ldr	r2, [r3, #0]
 8010708:	f642 03d8 	movw	r3, #10456	; 0x28d8
 801070c:	4413      	add	r3, r2
 801070e:	4a21      	ldr	r2, [pc, #132]	; (8010794 <face_detection_configure_weights+0x2b4>)
 8010710:	6093      	str	r3, [r2, #8]
    conv2d_0_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 10456);
 8010712:	4b11      	ldr	r3, [pc, #68]	; (8010758 <face_detection_configure_weights+0x278>)
 8010714:	681a      	ldr	r2, [r3, #0]
 8010716:	f642 03d8 	movw	r3, #10456	; 0x28d8
 801071a:	4413      	add	r3, r2
 801071c:	4a1d      	ldr	r2, [pc, #116]	; (8010794 <face_detection_configure_weights+0x2b4>)
 801071e:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8010720:	4b1d      	ldr	r3, [pc, #116]	; (8010798 <face_detection_configure_weights+0x2b8>)
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010728:	4a1b      	ldr	r2, [pc, #108]	; (8010798 <face_detection_configure_weights+0x2b8>)
 801072a:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 10520);
 801072c:	4b0a      	ldr	r3, [pc, #40]	; (8010758 <face_detection_configure_weights+0x278>)
 801072e:	681a      	ldr	r2, [r3, #0]
 8010730:	f642 1318 	movw	r3, #10520	; 0x2918
 8010734:	4413      	add	r3, r2
 8010736:	4a18      	ldr	r2, [pc, #96]	; (8010798 <face_detection_configure_weights+0x2b8>)
 8010738:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 10520);
 801073a:	4b07      	ldr	r3, [pc, #28]	; (8010758 <face_detection_configure_weights+0x278>)
 801073c:	681a      	ldr	r2, [r3, #0]
 801073e:	f642 1318 	movw	r3, #10520	; 0x2918
 8010742:	4413      	add	r3, r2
 8010744:	4a14      	ldr	r2, [pc, #80]	; (8010798 <face_detection_configure_weights+0x2b8>)
 8010746:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8010748:	4b14      	ldr	r3, [pc, #80]	; (801079c <face_detection_configure_weights+0x2bc>)
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010750:	4a12      	ldr	r2, [pc, #72]	; (801079c <face_detection_configure_weights+0x2bc>)
 8010752:	6013      	str	r3, [r2, #0]
 8010754:	e024      	b.n	80107a0 <face_detection_configure_weights+0x2c0>
 8010756:	bf00      	nop
 8010758:	24021500 	.word	0x24021500
 801075c:	24000298 	.word	0x24000298
 8010760:	240002a8 	.word	0x240002a8
 8010764:	240002b8 	.word	0x240002b8
 8010768:	240002c8 	.word	0x240002c8
 801076c:	240002d8 	.word	0x240002d8
 8010770:	240002e8 	.word	0x240002e8
 8010774:	240002f8 	.word	0x240002f8
 8010778:	24000308 	.word	0x24000308
 801077c:	24000318 	.word	0x24000318
 8010780:	24000328 	.word	0x24000328
 8010784:	24000338 	.word	0x24000338
 8010788:	24000348 	.word	0x24000348
 801078c:	24000358 	.word	0x24000358
 8010790:	240007a8 	.word	0x240007a8
 8010794:	240007b8 	.word	0x240007b8
 8010798:	240007c8 	.word	0x240007c8
 801079c:	240007d8 	.word	0x240007d8
    conv2d_1_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 10664);
 80107a0:	4b9f      	ldr	r3, [pc, #636]	; (8010a20 <face_detection_configure_weights+0x540>)
 80107a2:	681a      	ldr	r2, [r3, #0]
 80107a4:	f642 13a8 	movw	r3, #10664	; 0x29a8
 80107a8:	4413      	add	r3, r2
 80107aa:	4a9e      	ldr	r2, [pc, #632]	; (8010a24 <face_detection_configure_weights+0x544>)
 80107ac:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 10664);
 80107ae:	4b9c      	ldr	r3, [pc, #624]	; (8010a20 <face_detection_configure_weights+0x540>)
 80107b0:	681a      	ldr	r2, [r3, #0]
 80107b2:	f642 13a8 	movw	r3, #10664	; 0x29a8
 80107b6:	4413      	add	r3, r2
 80107b8:	4a9a      	ldr	r2, [pc, #616]	; (8010a24 <face_detection_configure_weights+0x544>)
 80107ba:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80107bc:	4b9a      	ldr	r3, [pc, #616]	; (8010a28 <face_detection_configure_weights+0x548>)
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80107c4:	4a98      	ldr	r2, [pc, #608]	; (8010a28 <face_detection_configure_weights+0x548>)
 80107c6:	6013      	str	r3, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 10728);
 80107c8:	4b95      	ldr	r3, [pc, #596]	; (8010a20 <face_detection_configure_weights+0x540>)
 80107ca:	681a      	ldr	r2, [r3, #0]
 80107cc:	f642 13e8 	movw	r3, #10728	; 0x29e8
 80107d0:	4413      	add	r3, r2
 80107d2:	4a95      	ldr	r2, [pc, #596]	; (8010a28 <face_detection_configure_weights+0x548>)
 80107d4:	6093      	str	r3, [r2, #8]
    conv2d_2_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 10728);
 80107d6:	4b92      	ldr	r3, [pc, #584]	; (8010a20 <face_detection_configure_weights+0x540>)
 80107d8:	681a      	ldr	r2, [r3, #0]
 80107da:	f642 13e8 	movw	r3, #10728	; 0x29e8
 80107de:	4413      	add	r3, r2
 80107e0:	4a91      	ldr	r2, [pc, #580]	; (8010a28 <face_detection_configure_weights+0x548>)
 80107e2:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80107e4:	4b91      	ldr	r3, [pc, #580]	; (8010a2c <face_detection_configure_weights+0x54c>)
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80107ec:	4a8f      	ldr	r2, [pc, #572]	; (8010a2c <face_detection_configure_weights+0x54c>)
 80107ee:	6013      	str	r3, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 10856);
 80107f0:	4b8b      	ldr	r3, [pc, #556]	; (8010a20 <face_detection_configure_weights+0x540>)
 80107f2:	681a      	ldr	r2, [r3, #0]
 80107f4:	f642 2368 	movw	r3, #10856	; 0x2a68
 80107f8:	4413      	add	r3, r2
 80107fa:	4a8c      	ldr	r2, [pc, #560]	; (8010a2c <face_detection_configure_weights+0x54c>)
 80107fc:	6093      	str	r3, [r2, #8]
    conv2d_2_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 10856);
 80107fe:	4b88      	ldr	r3, [pc, #544]	; (8010a20 <face_detection_configure_weights+0x540>)
 8010800:	681a      	ldr	r2, [r3, #0]
 8010802:	f642 2368 	movw	r3, #10856	; 0x2a68
 8010806:	4413      	add	r3, r2
 8010808:	4a88      	ldr	r2, [pc, #544]	; (8010a2c <face_detection_configure_weights+0x54c>)
 801080a:	60d3      	str	r3, [r2, #12]
    
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 801080c:	4b88      	ldr	r3, [pc, #544]	; (8010a30 <face_detection_configure_weights+0x550>)
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010814:	4a86      	ldr	r2, [pc, #536]	; (8010a30 <face_detection_configure_weights+0x550>)
 8010816:	6013      	str	r3, [r2, #0]
    conv2d_3_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 10888);
 8010818:	4b81      	ldr	r3, [pc, #516]	; (8010a20 <face_detection_configure_weights+0x540>)
 801081a:	681a      	ldr	r2, [r3, #0]
 801081c:	f642 2388 	movw	r3, #10888	; 0x2a88
 8010820:	4413      	add	r3, r2
 8010822:	4a83      	ldr	r2, [pc, #524]	; (8010a30 <face_detection_configure_weights+0x550>)
 8010824:	6093      	str	r3, [r2, #8]
    conv2d_3_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 10888);
 8010826:	4b7e      	ldr	r3, [pc, #504]	; (8010a20 <face_detection_configure_weights+0x540>)
 8010828:	681a      	ldr	r2, [r3, #0]
 801082a:	f642 2388 	movw	r3, #10888	; 0x2a88
 801082e:	4413      	add	r3, r2
 8010830:	4a7f      	ldr	r2, [pc, #508]	; (8010a30 <face_detection_configure_weights+0x550>)
 8010832:	60d3      	str	r3, [r2, #12]
    
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8010834:	4b7f      	ldr	r3, [pc, #508]	; (8010a34 <face_detection_configure_weights+0x554>)
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801083c:	4a7d      	ldr	r2, [pc, #500]	; (8010a34 <face_detection_configure_weights+0x554>)
 801083e:	6013      	str	r3, [r2, #0]
    conv2d_3_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 11272);
 8010840:	4b77      	ldr	r3, [pc, #476]	; (8010a20 <face_detection_configure_weights+0x540>)
 8010842:	681a      	ldr	r2, [r3, #0]
 8010844:	f642 4308 	movw	r3, #11272	; 0x2c08
 8010848:	4413      	add	r3, r2
 801084a:	4a7a      	ldr	r2, [pc, #488]	; (8010a34 <face_detection_configure_weights+0x554>)
 801084c:	6093      	str	r3, [r2, #8]
    conv2d_3_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 11272);
 801084e:	4b74      	ldr	r3, [pc, #464]	; (8010a20 <face_detection_configure_weights+0x540>)
 8010850:	681a      	ldr	r2, [r3, #0]
 8010852:	f642 4308 	movw	r3, #11272	; 0x2c08
 8010856:	4413      	add	r3, r2
 8010858:	4a76      	ldr	r2, [pc, #472]	; (8010a34 <face_detection_configure_weights+0x554>)
 801085a:	60d3      	str	r3, [r2, #12]
    
    conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
 801085c:	4b76      	ldr	r3, [pc, #472]	; (8010a38 <face_detection_configure_weights+0x558>)
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010864:	4a74      	ldr	r2, [pc, #464]	; (8010a38 <face_detection_configure_weights+0x558>)
 8010866:	6013      	str	r3, [r2, #0]
    conv2d_5_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 11464);
 8010868:	4b6d      	ldr	r3, [pc, #436]	; (8010a20 <face_detection_configure_weights+0x540>)
 801086a:	681a      	ldr	r2, [r3, #0]
 801086c:	f642 43c8 	movw	r3, #11464	; 0x2cc8
 8010870:	4413      	add	r3, r2
 8010872:	4a71      	ldr	r2, [pc, #452]	; (8010a38 <face_detection_configure_weights+0x558>)
 8010874:	6093      	str	r3, [r2, #8]
    conv2d_5_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 11464);
 8010876:	4b6a      	ldr	r3, [pc, #424]	; (8010a20 <face_detection_configure_weights+0x540>)
 8010878:	681a      	ldr	r2, [r3, #0]
 801087a:	f642 43c8 	movw	r3, #11464	; 0x2cc8
 801087e:	4413      	add	r3, r2
 8010880:	4a6d      	ldr	r2, [pc, #436]	; (8010a38 <face_detection_configure_weights+0x558>)
 8010882:	60d3      	str	r3, [r2, #12]
    
    conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
 8010884:	4b6d      	ldr	r3, [pc, #436]	; (8010a3c <face_detection_configure_weights+0x55c>)
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801088c:	4a6b      	ldr	r2, [pc, #428]	; (8010a3c <face_detection_configure_weights+0x55c>)
 801088e:	6013      	str	r3, [r2, #0]
    conv2d_5_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 11896);
 8010890:	4b63      	ldr	r3, [pc, #396]	; (8010a20 <face_detection_configure_weights+0x540>)
 8010892:	681a      	ldr	r2, [r3, #0]
 8010894:	f642 6378 	movw	r3, #11896	; 0x2e78
 8010898:	4413      	add	r3, r2
 801089a:	4a68      	ldr	r2, [pc, #416]	; (8010a3c <face_detection_configure_weights+0x55c>)
 801089c:	6093      	str	r3, [r2, #8]
    conv2d_5_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 11896);
 801089e:	4b60      	ldr	r3, [pc, #384]	; (8010a20 <face_detection_configure_weights+0x540>)
 80108a0:	681a      	ldr	r2, [r3, #0]
 80108a2:	f642 6378 	movw	r3, #11896	; 0x2e78
 80108a6:	4413      	add	r3, r2
 80108a8:	4a64      	ldr	r2, [pc, #400]	; (8010a3c <face_detection_configure_weights+0x55c>)
 80108aa:	60d3      	str	r3, [r2, #12]
    
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 80108ac:	4b64      	ldr	r3, [pc, #400]	; (8010a40 <face_detection_configure_weights+0x560>)
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80108b4:	4a62      	ldr	r2, [pc, #392]	; (8010a40 <face_detection_configure_weights+0x560>)
 80108b6:	6013      	str	r3, [r2, #0]
    conv2d_6_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 12088);
 80108b8:	4b59      	ldr	r3, [pc, #356]	; (8010a20 <face_detection_configure_weights+0x540>)
 80108ba:	681a      	ldr	r2, [r3, #0]
 80108bc:	f642 7338 	movw	r3, #12088	; 0x2f38
 80108c0:	4413      	add	r3, r2
 80108c2:	4a5f      	ldr	r2, [pc, #380]	; (8010a40 <face_detection_configure_weights+0x560>)
 80108c4:	6093      	str	r3, [r2, #8]
    conv2d_6_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 12088);
 80108c6:	4b56      	ldr	r3, [pc, #344]	; (8010a20 <face_detection_configure_weights+0x540>)
 80108c8:	681a      	ldr	r2, [r3, #0]
 80108ca:	f642 7338 	movw	r3, #12088	; 0x2f38
 80108ce:	4413      	add	r3, r2
 80108d0:	4a5b      	ldr	r2, [pc, #364]	; (8010a40 <face_detection_configure_weights+0x560>)
 80108d2:	60d3      	str	r3, [r2, #12]
    
    conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 80108d4:	4b5b      	ldr	r3, [pc, #364]	; (8010a44 <face_detection_configure_weights+0x564>)
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80108dc:	4a59      	ldr	r2, [pc, #356]	; (8010a44 <face_detection_configure_weights+0x564>)
 80108de:	6013      	str	r3, [r2, #0]
    conv2d_6_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 12472);
 80108e0:	4b4f      	ldr	r3, [pc, #316]	; (8010a20 <face_detection_configure_weights+0x540>)
 80108e2:	681a      	ldr	r2, [r3, #0]
 80108e4:	f243 03b8 	movw	r3, #12472	; 0x30b8
 80108e8:	4413      	add	r3, r2
 80108ea:	4a56      	ldr	r2, [pc, #344]	; (8010a44 <face_detection_configure_weights+0x564>)
 80108ec:	6093      	str	r3, [r2, #8]
    conv2d_6_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 12472);
 80108ee:	4b4c      	ldr	r3, [pc, #304]	; (8010a20 <face_detection_configure_weights+0x540>)
 80108f0:	681a      	ldr	r2, [r3, #0]
 80108f2:	f243 03b8 	movw	r3, #12472	; 0x30b8
 80108f6:	4413      	add	r3, r2
 80108f8:	4a52      	ldr	r2, [pc, #328]	; (8010a44 <face_detection_configure_weights+0x564>)
 80108fa:	60d3      	str	r3, [r2, #12]
    
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 80108fc:	4b52      	ldr	r3, [pc, #328]	; (8010a48 <face_detection_configure_weights+0x568>)
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010904:	4a50      	ldr	r2, [pc, #320]	; (8010a48 <face_detection_configure_weights+0x568>)
 8010906:	6013      	str	r3, [r2, #0]
    conv2d_7_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 12504);
 8010908:	4b45      	ldr	r3, [pc, #276]	; (8010a20 <face_detection_configure_weights+0x540>)
 801090a:	681a      	ldr	r2, [r3, #0]
 801090c:	f243 03d8 	movw	r3, #12504	; 0x30d8
 8010910:	4413      	add	r3, r2
 8010912:	4a4d      	ldr	r2, [pc, #308]	; (8010a48 <face_detection_configure_weights+0x568>)
 8010914:	6093      	str	r3, [r2, #8]
    conv2d_7_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 12504);
 8010916:	4b42      	ldr	r3, [pc, #264]	; (8010a20 <face_detection_configure_weights+0x540>)
 8010918:	681a      	ldr	r2, [r3, #0]
 801091a:	f243 03d8 	movw	r3, #12504	; 0x30d8
 801091e:	4413      	add	r3, r2
 8010920:	4a49      	ldr	r2, [pc, #292]	; (8010a48 <face_detection_configure_weights+0x568>)
 8010922:	60d3      	str	r3, [r2, #12]
    
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8010924:	4b49      	ldr	r3, [pc, #292]	; (8010a4c <face_detection_configure_weights+0x56c>)
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801092c:	4a47      	ldr	r2, [pc, #284]	; (8010a4c <face_detection_configure_weights+0x56c>)
 801092e:	6013      	str	r3, [r2, #0]
    conv2d_7_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 12888);
 8010930:	4b3b      	ldr	r3, [pc, #236]	; (8010a20 <face_detection_configure_weights+0x540>)
 8010932:	681a      	ldr	r2, [r3, #0]
 8010934:	f243 2358 	movw	r3, #12888	; 0x3258
 8010938:	4413      	add	r3, r2
 801093a:	4a44      	ldr	r2, [pc, #272]	; (8010a4c <face_detection_configure_weights+0x56c>)
 801093c:	6093      	str	r3, [r2, #8]
    conv2d_7_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 12888);
 801093e:	4b38      	ldr	r3, [pc, #224]	; (8010a20 <face_detection_configure_weights+0x540>)
 8010940:	681a      	ldr	r2, [r3, #0]
 8010942:	f243 2358 	movw	r3, #12888	; 0x3258
 8010946:	4413      	add	r3, r2
 8010948:	4a40      	ldr	r2, [pc, #256]	; (8010a4c <face_detection_configure_weights+0x56c>)
 801094a:	60d3      	str	r3, [r2, #12]
    
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 801094c:	4b40      	ldr	r3, [pc, #256]	; (8010a50 <face_detection_configure_weights+0x570>)
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010954:	4a3e      	ldr	r2, [pc, #248]	; (8010a50 <face_detection_configure_weights+0x570>)
 8010956:	6013      	str	r3, [r2, #0]
    conv2d_8_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 13080);
 8010958:	4b31      	ldr	r3, [pc, #196]	; (8010a20 <face_detection_configure_weights+0x540>)
 801095a:	681a      	ldr	r2, [r3, #0]
 801095c:	f243 3318 	movw	r3, #13080	; 0x3318
 8010960:	4413      	add	r3, r2
 8010962:	4a3b      	ldr	r2, [pc, #236]	; (8010a50 <face_detection_configure_weights+0x570>)
 8010964:	6093      	str	r3, [r2, #8]
    conv2d_8_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 13080);
 8010966:	4b2e      	ldr	r3, [pc, #184]	; (8010a20 <face_detection_configure_weights+0x540>)
 8010968:	681a      	ldr	r2, [r3, #0]
 801096a:	f243 3318 	movw	r3, #13080	; 0x3318
 801096e:	4413      	add	r3, r2
 8010970:	4a37      	ldr	r2, [pc, #220]	; (8010a50 <face_detection_configure_weights+0x570>)
 8010972:	60d3      	str	r3, [r2, #12]
    
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 8010974:	4b37      	ldr	r3, [pc, #220]	; (8010a54 <face_detection_configure_weights+0x574>)
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801097c:	4a35      	ldr	r2, [pc, #212]	; (8010a54 <face_detection_configure_weights+0x574>)
 801097e:	6013      	str	r3, [r2, #0]
    conv2d_8_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 13512);
 8010980:	4b27      	ldr	r3, [pc, #156]	; (8010a20 <face_detection_configure_weights+0x540>)
 8010982:	681a      	ldr	r2, [r3, #0]
 8010984:	f243 43c8 	movw	r3, #13512	; 0x34c8
 8010988:	4413      	add	r3, r2
 801098a:	4a32      	ldr	r2, [pc, #200]	; (8010a54 <face_detection_configure_weights+0x574>)
 801098c:	6093      	str	r3, [r2, #8]
    conv2d_8_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 13512);
 801098e:	4b24      	ldr	r3, [pc, #144]	; (8010a20 <face_detection_configure_weights+0x540>)
 8010990:	681a      	ldr	r2, [r3, #0]
 8010992:	f243 43c8 	movw	r3, #13512	; 0x34c8
 8010996:	4413      	add	r3, r2
 8010998:	4a2e      	ldr	r2, [pc, #184]	; (8010a54 <face_detection_configure_weights+0x574>)
 801099a:	60d3      	str	r3, [r2, #12]
    
    conv2d_9_weights_array.format |= AI_FMT_FLAG_CONST;
 801099c:	4b2e      	ldr	r3, [pc, #184]	; (8010a58 <face_detection_configure_weights+0x578>)
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80109a4:	4a2c      	ldr	r2, [pc, #176]	; (8010a58 <face_detection_configure_weights+0x578>)
 80109a6:	6013      	str	r3, [r2, #0]
    conv2d_9_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 13704);
 80109a8:	4b1d      	ldr	r3, [pc, #116]	; (8010a20 <face_detection_configure_weights+0x540>)
 80109aa:	681a      	ldr	r2, [r3, #0]
 80109ac:	f243 5388 	movw	r3, #13704	; 0x3588
 80109b0:	4413      	add	r3, r2
 80109b2:	4a29      	ldr	r2, [pc, #164]	; (8010a58 <face_detection_configure_weights+0x578>)
 80109b4:	6093      	str	r3, [r2, #8]
    conv2d_9_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 13704);
 80109b6:	4b1a      	ldr	r3, [pc, #104]	; (8010a20 <face_detection_configure_weights+0x540>)
 80109b8:	681a      	ldr	r2, [r3, #0]
 80109ba:	f243 5388 	movw	r3, #13704	; 0x3588
 80109be:	4413      	add	r3, r2
 80109c0:	4a25      	ldr	r2, [pc, #148]	; (8010a58 <face_detection_configure_weights+0x578>)
 80109c2:	60d3      	str	r3, [r2, #12]
    
    conv2d_9_bias_array.format |= AI_FMT_FLAG_CONST;
 80109c4:	4b25      	ldr	r3, [pc, #148]	; (8010a5c <face_detection_configure_weights+0x57c>)
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80109cc:	4a23      	ldr	r2, [pc, #140]	; (8010a5c <face_detection_configure_weights+0x57c>)
 80109ce:	6013      	str	r3, [r2, #0]
    conv2d_9_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 14088);
 80109d0:	4b13      	ldr	r3, [pc, #76]	; (8010a20 <face_detection_configure_weights+0x540>)
 80109d2:	681a      	ldr	r2, [r3, #0]
 80109d4:	f243 7308 	movw	r3, #14088	; 0x3708
 80109d8:	4413      	add	r3, r2
 80109da:	4a20      	ldr	r2, [pc, #128]	; (8010a5c <face_detection_configure_weights+0x57c>)
 80109dc:	6093      	str	r3, [r2, #8]
    conv2d_9_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 14088);
 80109de:	4b10      	ldr	r3, [pc, #64]	; (8010a20 <face_detection_configure_weights+0x540>)
 80109e0:	681a      	ldr	r2, [r3, #0]
 80109e2:	f243 7308 	movw	r3, #14088	; 0x3708
 80109e6:	4413      	add	r3, r2
 80109e8:	4a1c      	ldr	r2, [pc, #112]	; (8010a5c <face_detection_configure_weights+0x57c>)
 80109ea:	60d3      	str	r3, [r2, #12]
    
    conv2d_11_weights_array.format |= AI_FMT_FLAG_CONST;
 80109ec:	4b1c      	ldr	r3, [pc, #112]	; (8010a60 <face_detection_configure_weights+0x580>)
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80109f4:	4a1a      	ldr	r2, [pc, #104]	; (8010a60 <face_detection_configure_weights+0x580>)
 80109f6:	6013      	str	r3, [r2, #0]
    conv2d_11_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 14120);
 80109f8:	4b09      	ldr	r3, [pc, #36]	; (8010a20 <face_detection_configure_weights+0x540>)
 80109fa:	681a      	ldr	r2, [r3, #0]
 80109fc:	f243 7328 	movw	r3, #14120	; 0x3728
 8010a00:	4413      	add	r3, r2
 8010a02:	4a17      	ldr	r2, [pc, #92]	; (8010a60 <face_detection_configure_weights+0x580>)
 8010a04:	6093      	str	r3, [r2, #8]
    conv2d_11_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 14120);
 8010a06:	4b06      	ldr	r3, [pc, #24]	; (8010a20 <face_detection_configure_weights+0x540>)
 8010a08:	681a      	ldr	r2, [r3, #0]
 8010a0a:	f243 7328 	movw	r3, #14120	; 0x3728
 8010a0e:	4413      	add	r3, r2
 8010a10:	4a13      	ldr	r2, [pc, #76]	; (8010a60 <face_detection_configure_weights+0x580>)
 8010a12:	60d3      	str	r3, [r2, #12]
    
    conv2d_11_bias_array.format |= AI_FMT_FLAG_CONST;
 8010a14:	4b13      	ldr	r3, [pc, #76]	; (8010a64 <face_detection_configure_weights+0x584>)
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010a1c:	e024      	b.n	8010a68 <face_detection_configure_weights+0x588>
 8010a1e:	bf00      	nop
 8010a20:	24021500 	.word	0x24021500
 8010a24:	240007d8 	.word	0x240007d8
 8010a28:	240007e8 	.word	0x240007e8
 8010a2c:	240007f8 	.word	0x240007f8
 8010a30:	24000808 	.word	0x24000808
 8010a34:	24000818 	.word	0x24000818
 8010a38:	24000828 	.word	0x24000828
 8010a3c:	24000838 	.word	0x24000838
 8010a40:	24000848 	.word	0x24000848
 8010a44:	24000858 	.word	0x24000858
 8010a48:	24000868 	.word	0x24000868
 8010a4c:	24000878 	.word	0x24000878
 8010a50:	24000888 	.word	0x24000888
 8010a54:	24000898 	.word	0x24000898
 8010a58:	240008a8 	.word	0x240008a8
 8010a5c:	240008b8 	.word	0x240008b8
 8010a60:	240008c8 	.word	0x240008c8
 8010a64:	240008d8 	.word	0x240008d8
 8010a68:	4a67      	ldr	r2, [pc, #412]	; (8010c08 <face_detection_configure_weights+0x728>)
 8010a6a:	6013      	str	r3, [r2, #0]
    conv2d_11_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 14504);
 8010a6c:	4b67      	ldr	r3, [pc, #412]	; (8010c0c <face_detection_configure_weights+0x72c>)
 8010a6e:	681a      	ldr	r2, [r3, #0]
 8010a70:	f643 03a8 	movw	r3, #14504	; 0x38a8
 8010a74:	4413      	add	r3, r2
 8010a76:	4a64      	ldr	r2, [pc, #400]	; (8010c08 <face_detection_configure_weights+0x728>)
 8010a78:	6093      	str	r3, [r2, #8]
    conv2d_11_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 14504);
 8010a7a:	4b64      	ldr	r3, [pc, #400]	; (8010c0c <face_detection_configure_weights+0x72c>)
 8010a7c:	681a      	ldr	r2, [r3, #0]
 8010a7e:	f643 03a8 	movw	r3, #14504	; 0x38a8
 8010a82:	4413      	add	r3, r2
 8010a84:	4a60      	ldr	r2, [pc, #384]	; (8010c08 <face_detection_configure_weights+0x728>)
 8010a86:	60d3      	str	r3, [r2, #12]
    
    conv2d_13_weights_array.format |= AI_FMT_FLAG_CONST;
 8010a88:	4b61      	ldr	r3, [pc, #388]	; (8010c10 <face_detection_configure_weights+0x730>)
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010a90:	4a5f      	ldr	r2, [pc, #380]	; (8010c10 <face_detection_configure_weights+0x730>)
 8010a92:	6013      	str	r3, [r2, #0]
    conv2d_13_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 14696);
 8010a94:	4b5d      	ldr	r3, [pc, #372]	; (8010c0c <face_detection_configure_weights+0x72c>)
 8010a96:	681a      	ldr	r2, [r3, #0]
 8010a98:	f643 1368 	movw	r3, #14696	; 0x3968
 8010a9c:	4413      	add	r3, r2
 8010a9e:	4a5c      	ldr	r2, [pc, #368]	; (8010c10 <face_detection_configure_weights+0x730>)
 8010aa0:	6093      	str	r3, [r2, #8]
    conv2d_13_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 14696);
 8010aa2:	4b5a      	ldr	r3, [pc, #360]	; (8010c0c <face_detection_configure_weights+0x72c>)
 8010aa4:	681a      	ldr	r2, [r3, #0]
 8010aa6:	f643 1368 	movw	r3, #14696	; 0x3968
 8010aaa:	4413      	add	r3, r2
 8010aac:	4a58      	ldr	r2, [pc, #352]	; (8010c10 <face_detection_configure_weights+0x730>)
 8010aae:	60d3      	str	r3, [r2, #12]
    
    conv2d_13_bias_array.format |= AI_FMT_FLAG_CONST;
 8010ab0:	4b58      	ldr	r3, [pc, #352]	; (8010c14 <face_detection_configure_weights+0x734>)
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010ab8:	4a56      	ldr	r2, [pc, #344]	; (8010c14 <face_detection_configure_weights+0x734>)
 8010aba:	6013      	str	r3, [r2, #0]
    conv2d_13_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 15128);
 8010abc:	4b53      	ldr	r3, [pc, #332]	; (8010c0c <face_detection_configure_weights+0x72c>)
 8010abe:	681a      	ldr	r2, [r3, #0]
 8010ac0:	f643 3318 	movw	r3, #15128	; 0x3b18
 8010ac4:	4413      	add	r3, r2
 8010ac6:	4a53      	ldr	r2, [pc, #332]	; (8010c14 <face_detection_configure_weights+0x734>)
 8010ac8:	6093      	str	r3, [r2, #8]
    conv2d_13_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 15128);
 8010aca:	4b50      	ldr	r3, [pc, #320]	; (8010c0c <face_detection_configure_weights+0x72c>)
 8010acc:	681a      	ldr	r2, [r3, #0]
 8010ace:	f643 3318 	movw	r3, #15128	; 0x3b18
 8010ad2:	4413      	add	r3, r2
 8010ad4:	4a4f      	ldr	r2, [pc, #316]	; (8010c14 <face_detection_configure_weights+0x734>)
 8010ad6:	60d3      	str	r3, [r2, #12]
    
    conv2d_14_weights_array.format |= AI_FMT_FLAG_CONST;
 8010ad8:	4b4f      	ldr	r3, [pc, #316]	; (8010c18 <face_detection_configure_weights+0x738>)
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010ae0:	4a4d      	ldr	r2, [pc, #308]	; (8010c18 <face_detection_configure_weights+0x738>)
 8010ae2:	6013      	str	r3, [r2, #0]
    conv2d_14_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 15320);
 8010ae4:	4b49      	ldr	r3, [pc, #292]	; (8010c0c <face_detection_configure_weights+0x72c>)
 8010ae6:	681a      	ldr	r2, [r3, #0]
 8010ae8:	f643 33d8 	movw	r3, #15320	; 0x3bd8
 8010aec:	4413      	add	r3, r2
 8010aee:	4a4a      	ldr	r2, [pc, #296]	; (8010c18 <face_detection_configure_weights+0x738>)
 8010af0:	6093      	str	r3, [r2, #8]
    conv2d_14_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 15320);
 8010af2:	4b46      	ldr	r3, [pc, #280]	; (8010c0c <face_detection_configure_weights+0x72c>)
 8010af4:	681a      	ldr	r2, [r3, #0]
 8010af6:	f643 33d8 	movw	r3, #15320	; 0x3bd8
 8010afa:	4413      	add	r3, r2
 8010afc:	4a46      	ldr	r2, [pc, #280]	; (8010c18 <face_detection_configure_weights+0x738>)
 8010afe:	60d3      	str	r3, [r2, #12]
    
    conv2d_14_bias_array.format |= AI_FMT_FLAG_CONST;
 8010b00:	4b46      	ldr	r3, [pc, #280]	; (8010c1c <face_detection_configure_weights+0x73c>)
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010b08:	4a44      	ldr	r2, [pc, #272]	; (8010c1c <face_detection_configure_weights+0x73c>)
 8010b0a:	6013      	str	r3, [r2, #0]
    conv2d_14_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 16088);
 8010b0c:	4b3f      	ldr	r3, [pc, #252]	; (8010c0c <face_detection_configure_weights+0x72c>)
 8010b0e:	681a      	ldr	r2, [r3, #0]
 8010b10:	f643 63d8 	movw	r3, #16088	; 0x3ed8
 8010b14:	4413      	add	r3, r2
 8010b16:	4a41      	ldr	r2, [pc, #260]	; (8010c1c <face_detection_configure_weights+0x73c>)
 8010b18:	6093      	str	r3, [r2, #8]
    conv2d_14_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 16088);
 8010b1a:	4b3c      	ldr	r3, [pc, #240]	; (8010c0c <face_detection_configure_weights+0x72c>)
 8010b1c:	681a      	ldr	r2, [r3, #0]
 8010b1e:	f643 63d8 	movw	r3, #16088	; 0x3ed8
 8010b22:	4413      	add	r3, r2
 8010b24:	4a3d      	ldr	r2, [pc, #244]	; (8010c1c <face_detection_configure_weights+0x73c>)
 8010b26:	60d3      	str	r3, [r2, #12]
    
    conv2d_15_weights_array.format |= AI_FMT_FLAG_CONST;
 8010b28:	4b3d      	ldr	r3, [pc, #244]	; (8010c20 <face_detection_configure_weights+0x740>)
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010b30:	4a3b      	ldr	r2, [pc, #236]	; (8010c20 <face_detection_configure_weights+0x740>)
 8010b32:	6013      	str	r3, [r2, #0]
    conv2d_15_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 16152);
 8010b34:	4b35      	ldr	r3, [pc, #212]	; (8010c0c <face_detection_configure_weights+0x72c>)
 8010b36:	681a      	ldr	r2, [r3, #0]
 8010b38:	f643 7318 	movw	r3, #16152	; 0x3f18
 8010b3c:	4413      	add	r3, r2
 8010b3e:	4a38      	ldr	r2, [pc, #224]	; (8010c20 <face_detection_configure_weights+0x740>)
 8010b40:	6093      	str	r3, [r2, #8]
    conv2d_15_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 16152);
 8010b42:	4b32      	ldr	r3, [pc, #200]	; (8010c0c <face_detection_configure_weights+0x72c>)
 8010b44:	681a      	ldr	r2, [r3, #0]
 8010b46:	f643 7318 	movw	r3, #16152	; 0x3f18
 8010b4a:	4413      	add	r3, r2
 8010b4c:	4a34      	ldr	r2, [pc, #208]	; (8010c20 <face_detection_configure_weights+0x740>)
 8010b4e:	60d3      	str	r3, [r2, #12]
    
    conv2d_15_bias_array.format |= AI_FMT_FLAG_CONST;
 8010b50:	4b34      	ldr	r3, [pc, #208]	; (8010c24 <face_detection_configure_weights+0x744>)
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010b58:	4a32      	ldr	r2, [pc, #200]	; (8010c24 <face_detection_configure_weights+0x744>)
 8010b5a:	6013      	str	r3, [r2, #0]
    conv2d_15_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 17688);
 8010b5c:	4b2b      	ldr	r3, [pc, #172]	; (8010c0c <face_detection_configure_weights+0x72c>)
 8010b5e:	681a      	ldr	r2, [r3, #0]
 8010b60:	f244 5318 	movw	r3, #17688	; 0x4518
 8010b64:	4413      	add	r3, r2
 8010b66:	4a2f      	ldr	r2, [pc, #188]	; (8010c24 <face_detection_configure_weights+0x744>)
 8010b68:	6093      	str	r3, [r2, #8]
    conv2d_15_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 17688);
 8010b6a:	4b28      	ldr	r3, [pc, #160]	; (8010c0c <face_detection_configure_weights+0x72c>)
 8010b6c:	681a      	ldr	r2, [r3, #0]
 8010b6e:	f244 5318 	movw	r3, #17688	; 0x4518
 8010b72:	4413      	add	r3, r2
 8010b74:	4a2b      	ldr	r2, [pc, #172]	; (8010c24 <face_detection_configure_weights+0x744>)
 8010b76:	60d3      	str	r3, [r2, #12]
    
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
 8010b78:	4b2b      	ldr	r3, [pc, #172]	; (8010c28 <face_detection_configure_weights+0x748>)
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010b80:	4a29      	ldr	r2, [pc, #164]	; (8010c28 <face_detection_configure_weights+0x748>)
 8010b82:	6013      	str	r3, [r2, #0]
    conv2d_16_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 18072);
 8010b84:	4b21      	ldr	r3, [pc, #132]	; (8010c0c <face_detection_configure_weights+0x72c>)
 8010b86:	681a      	ldr	r2, [r3, #0]
 8010b88:	f244 6398 	movw	r3, #18072	; 0x4698
 8010b8c:	4413      	add	r3, r2
 8010b8e:	4a26      	ldr	r2, [pc, #152]	; (8010c28 <face_detection_configure_weights+0x748>)
 8010b90:	6093      	str	r3, [r2, #8]
    conv2d_16_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 18072);
 8010b92:	4b1e      	ldr	r3, [pc, #120]	; (8010c0c <face_detection_configure_weights+0x72c>)
 8010b94:	681a      	ldr	r2, [r3, #0]
 8010b96:	f244 6398 	movw	r3, #18072	; 0x4698
 8010b9a:	4413      	add	r3, r2
 8010b9c:	4a22      	ldr	r2, [pc, #136]	; (8010c28 <face_detection_configure_weights+0x748>)
 8010b9e:	60d3      	str	r3, [r2, #12]
    
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
 8010ba0:	4b22      	ldr	r3, [pc, #136]	; (8010c2c <face_detection_configure_weights+0x74c>)
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010ba8:	4a20      	ldr	r2, [pc, #128]	; (8010c2c <face_detection_configure_weights+0x74c>)
 8010baa:	6013      	str	r3, [r2, #0]
    conv2d_16_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 18936);
 8010bac:	4b17      	ldr	r3, [pc, #92]	; (8010c0c <face_detection_configure_weights+0x72c>)
 8010bae:	681a      	ldr	r2, [r3, #0]
 8010bb0:	f644 13f8 	movw	r3, #18936	; 0x49f8
 8010bb4:	4413      	add	r3, r2
 8010bb6:	4a1d      	ldr	r2, [pc, #116]	; (8010c2c <face_detection_configure_weights+0x74c>)
 8010bb8:	6093      	str	r3, [r2, #8]
    conv2d_16_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 18936);
 8010bba:	4b14      	ldr	r3, [pc, #80]	; (8010c0c <face_detection_configure_weights+0x72c>)
 8010bbc:	681a      	ldr	r2, [r3, #0]
 8010bbe:	f644 13f8 	movw	r3, #18936	; 0x49f8
 8010bc2:	4413      	add	r3, r2
 8010bc4:	4a19      	ldr	r2, [pc, #100]	; (8010c2c <face_detection_configure_weights+0x74c>)
 8010bc6:	60d3      	str	r3, [r2, #12]
    
    conv2d_17_weights_array.format |= AI_FMT_FLAG_CONST;
 8010bc8:	4b19      	ldr	r3, [pc, #100]	; (8010c30 <face_detection_configure_weights+0x750>)
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010bd0:	4a17      	ldr	r2, [pc, #92]	; (8010c30 <face_detection_configure_weights+0x750>)
 8010bd2:	6013      	str	r3, [r2, #0]
    conv2d_17_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 19320);
 8010bd4:	4b0d      	ldr	r3, [pc, #52]	; (8010c0c <face_detection_configure_weights+0x72c>)
 8010bd6:	681a      	ldr	r2, [r3, #0]
 8010bd8:	f644 3378 	movw	r3, #19320	; 0x4b78
 8010bdc:	4413      	add	r3, r2
 8010bde:	4a14      	ldr	r2, [pc, #80]	; (8010c30 <face_detection_configure_weights+0x750>)
 8010be0:	6093      	str	r3, [r2, #8]
    conv2d_17_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 19320);
 8010be2:	4b0a      	ldr	r3, [pc, #40]	; (8010c0c <face_detection_configure_weights+0x72c>)
 8010be4:	681a      	ldr	r2, [r3, #0]
 8010be6:	f644 3378 	movw	r3, #19320	; 0x4b78
 8010bea:	4413      	add	r3, r2
 8010bec:	4a10      	ldr	r2, [pc, #64]	; (8010c30 <face_detection_configure_weights+0x750>)
 8010bee:	60d3      	str	r3, [r2, #12]
    
    return true;
 8010bf0:	2301      	movs	r3, #1
 8010bf2:	e005      	b.n	8010c00 <face_detection_configure_weights+0x720>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8010bf4:	2212      	movs	r2, #18
 8010bf6:	2130      	movs	r1, #48	; 0x30
 8010bf8:	6878      	ldr	r0, [r7, #4]
 8010bfa:	f000 fb81 	bl	8011300 <ai_platform_network_set_error>
  return false;
 8010bfe:	2300      	movs	r3, #0
}
 8010c00:	4618      	mov	r0, r3
 8010c02:	3708      	adds	r7, #8
 8010c04:	46bd      	mov	sp, r7
 8010c06:	bd80      	pop	{r7, pc}
 8010c08:	240008d8 	.word	0x240008d8
 8010c0c:	24021500 	.word	0x24021500
 8010c10:	240008e8 	.word	0x240008e8
 8010c14:	240008f8 	.word	0x240008f8
 8010c18:	24000908 	.word	0x24000908
 8010c1c:	24000918 	.word	0x24000918
 8010c20:	24000928 	.word	0x24000928
 8010c24:	24000938 	.word	0x24000938
 8010c28:	24000948 	.word	0x24000948
 8010c2c:	24000958 	.word	0x24000958
 8010c30:	24000968 	.word	0x24000968

08010c34 <ai_face_detection_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_face_detection_get_error(ai_handle network)
{
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b082      	sub	sp, #8
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8010c3c:	6878      	ldr	r0, [r7, #4]
 8010c3e:	f000 fa53 	bl	80110e8 <ai_platform_network_get_error>
 8010c42:	4603      	mov	r3, r0
}
 8010c44:	4618      	mov	r0, r3
 8010c46:	3708      	adds	r7, #8
 8010c48:	46bd      	mov	sp, r7
 8010c4a:	bd80      	pop	{r7, pc}

08010c4c <ai_face_detection_create>:

AI_API_ENTRY
ai_error ai_face_detection_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	b084      	sub	sp, #16
 8010c50:	af02      	add	r7, sp, #8
 8010c52:	6078      	str	r0, [r7, #4]
 8010c54:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8010c56:	2300      	movs	r3, #0
 8010c58:	9301      	str	r3, [sp, #4]
 8010c5a:	2305      	movs	r3, #5
 8010c5c:	9300      	str	r3, [sp, #0]
 8010c5e:	2301      	movs	r3, #1
 8010c60:	4a04      	ldr	r2, [pc, #16]	; (8010c74 <ai_face_detection_create+0x28>)
 8010c62:	6839      	ldr	r1, [r7, #0]
 8010c64:	6878      	ldr	r0, [r7, #4]
 8010c66:	f000 fe65 	bl	8011934 <ai_platform_network_create>
 8010c6a:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	3708      	adds	r7, #8
 8010c70:	46bd      	mov	sp, r7
 8010c72:	bd80      	pop	{r7, pc}
 8010c74:	2400341c 	.word	0x2400341c

08010c78 <ai_face_detection_create_and_init>:

AI_API_ENTRY
ai_error ai_face_detection_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b096      	sub	sp, #88	; 0x58
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	60f8      	str	r0, [r7, #12]
 8010c80:	60b9      	str	r1, [r7, #8]
 8010c82:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_face_detection_create(network, AI_FACE_DETECTION_DATA_CONFIG);
 8010c84:	2100      	movs	r1, #0
 8010c86:	68f8      	ldr	r0, [r7, #12]
 8010c88:	f7ff ffe0 	bl	8010c4c <ai_face_detection_create>
 8010c8c:	4603      	mov	r3, r0
 8010c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8010c90:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d001      	beq.n	8010c9c <ai_face_detection_create_and_init+0x24>
        return err;
 8010c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c9a:	e05d      	b.n	8010d58 <ai_face_detection_create_and_init+0xe0>
    if (ai_face_detection_data_params_get(&params) != true) {
 8010c9c:	f107 0314 	add.w	r3, r7, #20
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	f000 f8dd 	bl	8010e60 <ai_face_detection_data_params_get>
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	f083 0301 	eor.w	r3, r3, #1
 8010cac:	b2db      	uxtb	r3, r3
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d008      	beq.n	8010cc4 <ai_face_detection_create_and_init+0x4c>
        err = ai_face_detection_get_error(*network);
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	f7ff ffbc 	bl	8010c34 <ai_face_detection_get_error>
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8010cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cc2:	e049      	b.n	8010d58 <ai_face_detection_create_and_init+0xe0>
    }
#if defined(AI_FACE_DETECTION_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8010cc4:	68bb      	ldr	r3, [r7, #8]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d016      	beq.n	8010cf8 <ai_face_detection_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8010cca:	2300      	movs	r3, #0
 8010ccc:	657b      	str	r3, [r7, #84]	; 0x54
 8010cce:	e00e      	b.n	8010cee <ai_face_detection_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8010cd0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010cd4:	009b      	lsls	r3, r3, #2
 8010cd6:	68ba      	ldr	r2, [r7, #8]
 8010cd8:	4413      	add	r3, r2
 8010cda:	681a      	ldr	r2, [r3, #0]
 8010cdc:	f107 0314 	add.w	r3, r7, #20
 8010ce0:	330c      	adds	r3, #12
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	f000 f922 	bl	8010f2c <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8010ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010cea:	3301      	adds	r3, #1
 8010cec:	657b      	str	r3, [r7, #84]	; 0x54
 8010cee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010cf0:	461a      	mov	r2, r3
 8010cf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010cf4:	4293      	cmp	r3, r2
 8010cf6:	dbeb      	blt.n	8010cd0 <ai_face_detection_create_and_init+0x58>
    }
#endif
#if defined(AI_FACE_DETECTION_DATA_WEIGHTS_COUNT)
    if (weights) {
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d016      	beq.n	8010d2c <ai_face_detection_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 8010cfe:	2300      	movs	r3, #0
 8010d00:	653b      	str	r3, [r7, #80]	; 0x50
 8010d02:	e00e      	b.n	8010d22 <ai_face_detection_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8010d04:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010d06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d08:	009b      	lsls	r3, r3, #2
 8010d0a:	687a      	ldr	r2, [r7, #4]
 8010d0c:	4413      	add	r3, r2
 8010d0e:	681a      	ldr	r2, [r3, #0]
 8010d10:	f107 0314 	add.w	r3, r7, #20
 8010d14:	3304      	adds	r3, #4
 8010d16:	4618      	mov	r0, r3
 8010d18:	f000 f908 	bl	8010f2c <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8010d1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d1e:	3301      	adds	r3, #1
 8010d20:	653b      	str	r3, [r7, #80]	; 0x50
 8010d22:	8b7b      	ldrh	r3, [r7, #26]
 8010d24:	461a      	mov	r2, r3
 8010d26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d28:	4293      	cmp	r3, r2
 8010d2a:	dbeb      	blt.n	8010d04 <ai_face_detection_create_and_init+0x8c>
    }
#endif
    if (ai_face_detection_init(*network, &params) != true) {
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	f107 0214 	add.w	r2, r7, #20
 8010d34:	4611      	mov	r1, r2
 8010d36:	4618      	mov	r0, r3
 8010d38:	f000 f846 	bl	8010dc8 <ai_face_detection_init>
 8010d3c:	4603      	mov	r3, r0
 8010d3e:	f083 0301 	eor.w	r3, r3, #1
 8010d42:	b2db      	uxtb	r3, r3
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d006      	beq.n	8010d56 <ai_face_detection_create_and_init+0xde>
        err = ai_face_detection_get_error(*network);
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	f7ff ff71 	bl	8010c34 <ai_face_detection_get_error>
 8010d52:	4603      	mov	r3, r0
 8010d54:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 8010d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8010d58:	4618      	mov	r0, r3
 8010d5a:	3758      	adds	r7, #88	; 0x58
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	bd80      	pop	{r7, pc}

08010d60 <ai_face_detection_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_face_detection_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8010d60:	b580      	push	{r7, lr}
 8010d62:	b082      	sub	sp, #8
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	6078      	str	r0, [r7, #4]
 8010d68:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d104      	bne.n	8010d7a <ai_face_detection_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8010d70:	4b06      	ldr	r3, [pc, #24]	; (8010d8c <ai_face_detection_inputs_get+0x2c>)
 8010d72:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	4a06      	ldr	r2, [pc, #24]	; (8010d90 <ai_face_detection_inputs_get+0x30>)
 8010d78:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8010d7a:	6839      	ldr	r1, [r7, #0]
 8010d7c:	6878      	ldr	r0, [r7, #4]
 8010d7e:	f000 fac5 	bl	801130c <ai_platform_inputs_get>
 8010d82:	4603      	mov	r3, r0
}
 8010d84:	4618      	mov	r0, r3
 8010d86:	3708      	adds	r7, #8
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	bd80      	pop	{r7, pc}
 8010d8c:	2400341c 	.word	0x2400341c
 8010d90:	a1c00100 	.word	0xa1c00100

08010d94 <ai_face_detection_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_face_detection_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b082      	sub	sp, #8
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	6078      	str	r0, [r7, #4]
 8010d9c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d104      	bne.n	8010dae <ai_face_detection_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8010da4:	4b06      	ldr	r3, [pc, #24]	; (8010dc0 <ai_face_detection_outputs_get+0x2c>)
 8010da6:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	4a06      	ldr	r2, [pc, #24]	; (8010dc4 <ai_face_detection_outputs_get+0x30>)
 8010dac:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8010dae:	6839      	ldr	r1, [r7, #0]
 8010db0:	6878      	ldr	r0, [r7, #4]
 8010db2:	f000 fc37 	bl	8011624 <ai_platform_outputs_get>
 8010db6:	4603      	mov	r3, r0
}
 8010db8:	4618      	mov	r0, r3
 8010dba:	3708      	adds	r7, #8
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	bd80      	pop	{r7, pc}
 8010dc0:	2400341c 	.word	0x2400341c
 8010dc4:	a1c00100 	.word	0xa1c00100

08010dc8 <ai_face_detection_init>:
}

AI_API_ENTRY
ai_bool ai_face_detection_init(
  ai_handle network, const ai_network_params* params)
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b084      	sub	sp, #16
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	6078      	str	r0, [r7, #4]
 8010dd0:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8010dd2:	6839      	ldr	r1, [r7, #0]
 8010dd4:	6878      	ldr	r0, [r7, #4]
 8010dd6:	f000 ff87 	bl	8011ce8 <ai_platform_network_init>
 8010dda:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d101      	bne.n	8010de6 <ai_face_detection_init+0x1e>
 8010de2:	2300      	movs	r3, #0
 8010de4:	e028      	b.n	8010e38 <ai_face_detection_init+0x70>

  ai_bool ok = true;
 8010de6:	2301      	movs	r3, #1
 8010de8:	72fb      	strb	r3, [r7, #11]
  ok &= face_detection_configure_weights(net_ctx, params);
 8010dea:	6839      	ldr	r1, [r7, #0]
 8010dec:	68f8      	ldr	r0, [r7, #12]
 8010dee:	f7ff fb77 	bl	80104e0 <face_detection_configure_weights>
 8010df2:	4603      	mov	r3, r0
 8010df4:	461a      	mov	r2, r3
 8010df6:	7afb      	ldrb	r3, [r7, #11]
 8010df8:	4013      	ands	r3, r2
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	bf14      	ite	ne
 8010dfe:	2301      	movne	r3, #1
 8010e00:	2300      	moveq	r3, #0
 8010e02:	72fb      	strb	r3, [r7, #11]
  ok &= face_detection_configure_activations(net_ctx, params);
 8010e04:	6839      	ldr	r1, [r7, #0]
 8010e06:	68f8      	ldr	r0, [r7, #12]
 8010e08:	f7fe ff8a 	bl	800fd20 <face_detection_configure_activations>
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	461a      	mov	r2, r3
 8010e10:	7afb      	ldrb	r3, [r7, #11]
 8010e12:	4013      	ands	r3, r2
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	bf14      	ite	ne
 8010e18:	2301      	movne	r3, #1
 8010e1a:	2300      	moveq	r3, #0
 8010e1c:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8010e1e:	6878      	ldr	r0, [r7, #4]
 8010e20:	f001 f8fe 	bl	8012020 <ai_platform_network_post_init>
 8010e24:	4603      	mov	r3, r0
 8010e26:	461a      	mov	r2, r3
 8010e28:	7afb      	ldrb	r3, [r7, #11]
 8010e2a:	4013      	ands	r3, r2
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	bf14      	ite	ne
 8010e30:	2301      	movne	r3, #1
 8010e32:	2300      	moveq	r3, #0
 8010e34:	72fb      	strb	r3, [r7, #11]

  return ok;
 8010e36:	7afb      	ldrb	r3, [r7, #11]
}
 8010e38:	4618      	mov	r0, r3
 8010e3a:	3710      	adds	r7, #16
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	bd80      	pop	{r7, pc}

08010e40 <ai_face_detection_run>:


AI_API_ENTRY
ai_i32 ai_face_detection_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b084      	sub	sp, #16
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	60f8      	str	r0, [r7, #12]
 8010e48:	60b9      	str	r1, [r7, #8]
 8010e4a:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8010e4c:	687a      	ldr	r2, [r7, #4]
 8010e4e:	68b9      	ldr	r1, [r7, #8]
 8010e50:	68f8      	ldr	r0, [r7, #12]
 8010e52:	f001 fa0f 	bl	8012274 <ai_platform_network_process>
 8010e56:	4603      	mov	r3, r0
}
 8010e58:	4618      	mov	r0, r3
 8010e5a:	3710      	adds	r7, #16
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	bd80      	pop	{r7, pc}

08010e60 <ai_face_detection_data_params_get>:
 * @ingroup face_detection_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_face_detection_data_params_get(ai_network_params* params)
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b086      	sub	sp, #24
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d101      	bne.n	8010e72 <ai_face_detection_data_params_get+0x12>
 8010e6e:	2300      	movs	r3, #0
 8010e70:	e016      	b.n	8010ea0 <ai_face_detection_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8010e72:	4a0d      	ldr	r2, [pc, #52]	; (8010ea8 <ai_face_detection_data_params_get+0x48>)
 8010e74:	f107 0310 	add.w	r3, r7, #16
 8010e78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e7c:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_FACE_DETECTION_DATA_ACTIVATIONS_COUNT, g_face_detection_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8010e80:	4a0a      	ldr	r2, [pc, #40]	; (8010eac <ai_face_detection_data_params_get+0x4c>)
 8010e82:	f107 0308 	add.w	r3, r7, #8
 8010e86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e8a:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_FACE_DETECTION_DATA_WEIGHTS_COUNT, g_face_detection_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8010e8e:	f107 0210 	add.w	r2, r7, #16
 8010e92:	f107 0308 	add.w	r3, r7, #8
 8010e96:	4619      	mov	r1, r3
 8010e98:	6878      	ldr	r0, [r7, #4]
 8010e9a:	f000 f90b 	bl	80110b4 <ai_platform_bind_network_params>
 8010e9e:	4603      	mov	r3, r0
}
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	3718      	adds	r7, #24
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	bd80      	pop	{r7, pc}
 8010ea8:	08019378 	.word	0x08019378
 8010eac:	08019380 	.word	0x08019380

08010eb0 <ai_buffer_get_size>:
 8010eb0:	b368      	cbz	r0, 8010f0e <ai_buffer_get_size+0x5e>
 8010eb2:	4b17      	ldr	r3, [pc, #92]	; (8010f10 <ai_buffer_get_size+0x60>)
 8010eb4:	4a17      	ldr	r2, [pc, #92]	; (8010f14 <ai_buffer_get_size+0x64>)
 8010eb6:	b410      	push	{r4}
 8010eb8:	6804      	ldr	r4, [r0, #0]
 8010eba:	4023      	ands	r3, r4
 8010ebc:	4293      	cmp	r3, r2
 8010ebe:	d123      	bne.n	8010f08 <ai_buffer_get_size+0x58>
 8010ec0:	b311      	cbz	r1, 8010f08 <ai_buffer_get_size+0x58>
 8010ec2:	6984      	ldr	r4, [r0, #24]
 8010ec4:	6862      	ldr	r2, [r4, #4]
 8010ec6:	321f      	adds	r2, #31
 8010ec8:	f022 021f 	bic.w	r2, r2, #31
 8010ecc:	7d03      	ldrb	r3, [r0, #20]
 8010ece:	6941      	ldr	r1, [r0, #20]
 8010ed0:	f1a3 0301 	sub.w	r3, r3, #1
 8010ed4:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8010ed8:	fab3 f383 	clz	r3, r3
 8010edc:	095b      	lsrs	r3, r3, #5
 8010ede:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8010ee2:	da0c      	bge.n	8010efe <ai_buffer_get_size+0x4e>
 8010ee4:	2b01      	cmp	r3, #1
 8010ee6:	d103      	bne.n	8010ef0 <ai_buffer_get_size+0x40>
 8010ee8:	2802      	cmp	r0, #2
 8010eea:	f04f 0302 	mov.w	r3, #2
 8010eee:	d006      	beq.n	8010efe <ai_buffer_get_size+0x4e>
 8010ef0:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8010ef4:	3301      	adds	r3, #1
 8010ef6:	4298      	cmp	r0, r3
 8010ef8:	fb01 f202 	mul.w	r2, r1, r2
 8010efc:	d1f2      	bne.n	8010ee4 <ai_buffer_get_size+0x34>
 8010efe:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8010f02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f06:	4770      	bx	lr
 8010f08:	6984      	ldr	r4, [r0, #24]
 8010f0a:	6862      	ldr	r2, [r4, #4]
 8010f0c:	e7de      	b.n	8010ecc <ai_buffer_get_size+0x1c>
 8010f0e:	4770      	bx	lr
 8010f10:	017fffff 	.word	0x017fffff
 8010f14:	000400c0 	.word	0x000400c0

08010f18 <ai_buffer_array_sane>:
 8010f18:	b138      	cbz	r0, 8010f2a <ai_buffer_array_sane+0x12>
 8010f1a:	6843      	ldr	r3, [r0, #4]
 8010f1c:	b123      	cbz	r3, 8010f28 <ai_buffer_array_sane+0x10>
 8010f1e:	8840      	ldrh	r0, [r0, #2]
 8010f20:	3800      	subs	r0, #0
 8010f22:	bf18      	it	ne
 8010f24:	2001      	movne	r0, #1
 8010f26:	4770      	bx	lr
 8010f28:	4618      	mov	r0, r3
 8010f2a:	4770      	bx	lr

08010f2c <ai_buffer_array_item_set_address>:
 8010f2c:	b150      	cbz	r0, 8010f44 <ai_buffer_array_item_set_address+0x18>
 8010f2e:	6843      	ldr	r3, [r0, #4]
 8010f30:	b14b      	cbz	r3, 8010f46 <ai_buffer_array_item_set_address+0x1a>
 8010f32:	8840      	ldrh	r0, [r0, #2]
 8010f34:	b900      	cbnz	r0, 8010f38 <ai_buffer_array_item_set_address+0xc>
 8010f36:	4770      	bx	lr
 8010f38:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8010f3c:	2001      	movs	r0, #1
 8010f3e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8010f42:	604a      	str	r2, [r1, #4]
 8010f44:	4770      	bx	lr
 8010f46:	4618      	mov	r0, r3
 8010f48:	4770      	bx	lr
 8010f4a:	bf00      	nop

08010f4c <_ai_platform_acquire_crc>:
 8010f4c:	2001      	movs	r0, #1
 8010f4e:	4770      	bx	lr

08010f50 <_ai_platform_release_crc>:
 8010f50:	4770      	bx	lr
 8010f52:	bf00      	nop

08010f54 <ai_platform_get_weights_map>:
 8010f54:	2900      	cmp	r1, #0
 8010f56:	bf18      	it	ne
 8010f58:	2800      	cmpne	r0, #0
 8010f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f5c:	bf0c      	ite	eq
 8010f5e:	2401      	moveq	r4, #1
 8010f60:	2400      	movne	r4, #0
 8010f62:	2a00      	cmp	r2, #0
 8010f64:	bf08      	it	eq
 8010f66:	f044 0401 	orreq.w	r4, r4, #1
 8010f6a:	b114      	cbz	r4, 8010f72 <ai_platform_get_weights_map+0x1e>
 8010f6c:	2400      	movs	r4, #0
 8010f6e:	4620      	mov	r0, r4
 8010f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f72:	4616      	mov	r6, r2
 8010f74:	4b22      	ldr	r3, [pc, #136]	; (8011000 <ai_platform_get_weights_map+0xac>)
 8010f76:	6812      	ldr	r2, [r2, #0]
 8010f78:	4605      	mov	r5, r0
 8010f7a:	460f      	mov	r7, r1
 8010f7c:	429a      	cmp	r2, r3
 8010f7e:	d022      	beq.n	8010fc6 <ai_platform_get_weights_map+0x72>
 8010f80:	6870      	ldr	r0, [r6, #4]
 8010f82:	2800      	cmp	r0, #0
 8010f84:	d0f2      	beq.n	8010f6c <ai_platform_get_weights_map+0x18>
 8010f86:	6806      	ldr	r6, [r0, #0]
 8010f88:	429e      	cmp	r6, r3
 8010f8a:	d006      	beq.n	8010f9a <ai_platform_get_weights_map+0x46>
 8010f8c:	f1a1 0401 	sub.w	r4, r1, #1
 8010f90:	6028      	str	r0, [r5, #0]
 8010f92:	fab4 f484 	clz	r4, r4
 8010f96:	0964      	lsrs	r4, r4, #5
 8010f98:	e7e9      	b.n	8010f6e <ai_platform_get_weights_map+0x1a>
 8010f9a:	3d04      	subs	r5, #4
 8010f9c:	4602      	mov	r2, r0
 8010f9e:	4621      	mov	r1, r4
 8010fa0:	e000      	b.n	8010fa4 <ai_platform_get_weights_map+0x50>
 8010fa2:	4619      	mov	r1, r3
 8010fa4:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8010fa8:	42b3      	cmp	r3, r6
 8010faa:	d025      	beq.n	8010ff8 <ai_platform_get_weights_map+0xa4>
 8010fac:	f845 3f04 	str.w	r3, [r5, #4]!
 8010fb0:	1c4b      	adds	r3, r1, #1
 8010fb2:	429f      	cmp	r7, r3
 8010fb4:	d8f5      	bhi.n	8010fa2 <ai_platform_get_weights_map+0x4e>
 8010fb6:	d1da      	bne.n	8010f6e <ai_platform_get_weights_map+0x1a>
 8010fb8:	3102      	adds	r1, #2
 8010fba:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8010fbe:	42b3      	cmp	r3, r6
 8010fc0:	d1d5      	bne.n	8010f6e <ai_platform_get_weights_map+0x1a>
 8010fc2:	2401      	movs	r4, #1
 8010fc4:	e7d3      	b.n	8010f6e <ai_platform_get_weights_map+0x1a>
 8010fc6:	1d30      	adds	r0, r6, #4
 8010fc8:	f7ff ffa6 	bl	8010f18 <ai_buffer_array_sane>
 8010fcc:	2800      	cmp	r0, #0
 8010fce:	d0cd      	beq.n	8010f6c <ai_platform_get_weights_map+0x18>
 8010fd0:	88f3      	ldrh	r3, [r6, #6]
 8010fd2:	429f      	cmp	r7, r3
 8010fd4:	d1ca      	bne.n	8010f6c <ai_platform_get_weights_map+0x18>
 8010fd6:	3d04      	subs	r5, #4
 8010fd8:	4622      	mov	r2, r4
 8010fda:	68b3      	ldr	r3, [r6, #8]
 8010fdc:	4423      	add	r3, r4
 8010fde:	341c      	adds	r4, #28
 8010fe0:	685b      	ldr	r3, [r3, #4]
 8010fe2:	b123      	cbz	r3, 8010fee <ai_platform_get_weights_map+0x9a>
 8010fe4:	3201      	adds	r2, #1
 8010fe6:	f845 3f04 	str.w	r3, [r5, #4]!
 8010fea:	4297      	cmp	r7, r2
 8010fec:	d8f5      	bhi.n	8010fda <ai_platform_get_weights_map+0x86>
 8010fee:	1abc      	subs	r4, r7, r2
 8010ff0:	fab4 f484 	clz	r4, r4
 8010ff4:	0964      	lsrs	r4, r4, #5
 8010ff6:	e7ba      	b.n	8010f6e <ai_platform_get_weights_map+0x1a>
 8010ff8:	428f      	cmp	r7, r1
 8010ffa:	d1b8      	bne.n	8010f6e <ai_platform_get_weights_map+0x1a>
 8010ffc:	e7e1      	b.n	8010fc2 <ai_platform_get_weights_map+0x6e>
 8010ffe:	bf00      	nop
 8011000:	a1facade 	.word	0xa1facade

08011004 <ai_platform_get_activations_map>:
 8011004:	2900      	cmp	r1, #0
 8011006:	bf18      	it	ne
 8011008:	2800      	cmpne	r0, #0
 801100a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801100c:	bf0c      	ite	eq
 801100e:	2401      	moveq	r4, #1
 8011010:	2400      	movne	r4, #0
 8011012:	2a00      	cmp	r2, #0
 8011014:	bf08      	it	eq
 8011016:	f044 0401 	orreq.w	r4, r4, #1
 801101a:	b114      	cbz	r4, 8011022 <ai_platform_get_activations_map+0x1e>
 801101c:	2400      	movs	r4, #0
 801101e:	4620      	mov	r0, r4
 8011020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011022:	4616      	mov	r6, r2
 8011024:	4b22      	ldr	r3, [pc, #136]	; (80110b0 <ai_platform_get_activations_map+0xac>)
 8011026:	6812      	ldr	r2, [r2, #0]
 8011028:	4605      	mov	r5, r0
 801102a:	460f      	mov	r7, r1
 801102c:	429a      	cmp	r2, r3
 801102e:	d022      	beq.n	8011076 <ai_platform_get_activations_map+0x72>
 8011030:	6a30      	ldr	r0, [r6, #32]
 8011032:	2800      	cmp	r0, #0
 8011034:	d0f2      	beq.n	801101c <ai_platform_get_activations_map+0x18>
 8011036:	6806      	ldr	r6, [r0, #0]
 8011038:	429e      	cmp	r6, r3
 801103a:	d006      	beq.n	801104a <ai_platform_get_activations_map+0x46>
 801103c:	f1a1 0401 	sub.w	r4, r1, #1
 8011040:	6028      	str	r0, [r5, #0]
 8011042:	fab4 f484 	clz	r4, r4
 8011046:	0964      	lsrs	r4, r4, #5
 8011048:	e7e9      	b.n	801101e <ai_platform_get_activations_map+0x1a>
 801104a:	3d04      	subs	r5, #4
 801104c:	4602      	mov	r2, r0
 801104e:	4621      	mov	r1, r4
 8011050:	e000      	b.n	8011054 <ai_platform_get_activations_map+0x50>
 8011052:	4619      	mov	r1, r3
 8011054:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8011058:	42b3      	cmp	r3, r6
 801105a:	d026      	beq.n	80110aa <ai_platform_get_activations_map+0xa6>
 801105c:	f845 3f04 	str.w	r3, [r5, #4]!
 8011060:	1c4b      	adds	r3, r1, #1
 8011062:	429f      	cmp	r7, r3
 8011064:	d8f5      	bhi.n	8011052 <ai_platform_get_activations_map+0x4e>
 8011066:	d1da      	bne.n	801101e <ai_platform_get_activations_map+0x1a>
 8011068:	3102      	adds	r1, #2
 801106a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 801106e:	42b3      	cmp	r3, r6
 8011070:	d1d5      	bne.n	801101e <ai_platform_get_activations_map+0x1a>
 8011072:	2401      	movs	r4, #1
 8011074:	e7d3      	b.n	801101e <ai_platform_get_activations_map+0x1a>
 8011076:	f106 000c 	add.w	r0, r6, #12
 801107a:	f7ff ff4d 	bl	8010f18 <ai_buffer_array_sane>
 801107e:	2800      	cmp	r0, #0
 8011080:	d0cc      	beq.n	801101c <ai_platform_get_activations_map+0x18>
 8011082:	89f3      	ldrh	r3, [r6, #14]
 8011084:	429f      	cmp	r7, r3
 8011086:	d1c9      	bne.n	801101c <ai_platform_get_activations_map+0x18>
 8011088:	3d04      	subs	r5, #4
 801108a:	4622      	mov	r2, r4
 801108c:	6933      	ldr	r3, [r6, #16]
 801108e:	4423      	add	r3, r4
 8011090:	341c      	adds	r4, #28
 8011092:	685b      	ldr	r3, [r3, #4]
 8011094:	b123      	cbz	r3, 80110a0 <ai_platform_get_activations_map+0x9c>
 8011096:	3201      	adds	r2, #1
 8011098:	f845 3f04 	str.w	r3, [r5, #4]!
 801109c:	4297      	cmp	r7, r2
 801109e:	d8f5      	bhi.n	801108c <ai_platform_get_activations_map+0x88>
 80110a0:	1abc      	subs	r4, r7, r2
 80110a2:	fab4 f484 	clz	r4, r4
 80110a6:	0964      	lsrs	r4, r4, #5
 80110a8:	e7b9      	b.n	801101e <ai_platform_get_activations_map+0x1a>
 80110aa:	428f      	cmp	r7, r1
 80110ac:	d1b7      	bne.n	801101e <ai_platform_get_activations_map+0x1a>
 80110ae:	e7e0      	b.n	8011072 <ai_platform_get_activations_map+0x6e>
 80110b0:	a1facade 	.word	0xa1facade

080110b4 <ai_platform_bind_network_params>:
 80110b4:	2a00      	cmp	r2, #0
 80110b6:	bf18      	it	ne
 80110b8:	2900      	cmpne	r1, #0
 80110ba:	d010      	beq.n	80110de <ai_platform_bind_network_params+0x2a>
 80110bc:	b178      	cbz	r0, 80110de <ai_platform_bind_network_params+0x2a>
 80110be:	4603      	mov	r3, r0
 80110c0:	4808      	ldr	r0, [pc, #32]	; (80110e4 <ai_platform_bind_network_params+0x30>)
 80110c2:	f103 0c0c 	add.w	ip, r3, #12
 80110c6:	f843 0b04 	str.w	r0, [r3], #4
 80110ca:	c903      	ldmia	r1, {r0, r1}
 80110cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80110d0:	2301      	movs	r3, #1
 80110d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80110d6:	e88c 0003 	stmia.w	ip, {r0, r1}
 80110da:	4618      	mov	r0, r3
 80110dc:	4770      	bx	lr
 80110de:	2300      	movs	r3, #0
 80110e0:	4618      	mov	r0, r3
 80110e2:	4770      	bx	lr
 80110e4:	a1facade 	.word	0xa1facade

080110e8 <ai_platform_network_get_error>:
 80110e8:	b510      	push	{r4, lr}
 80110ea:	2800      	cmp	r0, #0
 80110ec:	d03f      	beq.n	801116e <ai_platform_network_get_error+0x86>
 80110ee:	4b7d      	ldr	r3, [pc, #500]	; (80112e4 <ai_platform_network_get_error+0x1fc>)
 80110f0:	4604      	mov	r4, r0
 80110f2:	6802      	ldr	r2, [r0, #0]
 80110f4:	429a      	cmp	r2, r3
 80110f6:	d13a      	bne.n	801116e <ai_platform_network_get_error+0x86>
 80110f8:	f7ff ff28 	bl	8010f4c <_ai_platform_acquire_crc>
 80110fc:	4b7a      	ldr	r3, [pc, #488]	; (80112e8 <ai_platform_network_get_error+0x200>)
 80110fe:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011108:	189a      	adds	r2, r3, r2
 801110a:	2a01      	cmp	r2, #1
 801110c:	f240 8086 	bls.w	801121c <ai_platform_network_get_error+0x134>
 8011110:	f240 4249 	movw	r2, #1097	; 0x449
 8011114:	4293      	cmp	r3, r2
 8011116:	f000 8081 	beq.w	801121c <ai_platform_network_get_error+0x134>
 801111a:	4a74      	ldr	r2, [pc, #464]	; (80112ec <ai_platform_network_get_error+0x204>)
 801111c:	6813      	ldr	r3, [r2, #0]
 801111e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011122:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8011126:	f000 8087 	beq.w	8011238 <ai_platform_network_get_error+0x150>
 801112a:	6813      	ldr	r3, [r2, #0]
 801112c:	f240 4183 	movw	r1, #1155	; 0x483
 8011130:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011134:	428b      	cmp	r3, r1
 8011136:	f000 80a9 	beq.w	801128c <ai_platform_network_get_error+0x1a4>
 801113a:	6813      	ldr	r3, [r2, #0]
 801113c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011140:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8011144:	f000 80c0 	beq.w	80112c8 <ai_platform_network_get_error+0x1e0>
 8011148:	6813      	ldr	r3, [r2, #0]
 801114a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801114e:	2b00      	cmp	r3, #0
 8011150:	f040 8082 	bne.w	8011258 <ai_platform_network_get_error+0x170>
 8011154:	4a66      	ldr	r2, [pc, #408]	; (80112f0 <ai_platform_network_get_error+0x208>)
 8011156:	2301      	movs	r3, #1
 8011158:	6093      	str	r3, [r2, #8]
 801115a:	6893      	ldr	r3, [r2, #8]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d1fc      	bne.n	801115a <ai_platform_network_get_error+0x72>
 8011160:	4964      	ldr	r1, [pc, #400]	; (80112f4 <ai_platform_network_get_error+0x20c>)
 8011162:	4b65      	ldr	r3, [pc, #404]	; (80112f8 <ai_platform_network_get_error+0x210>)
 8011164:	6011      	str	r1, [r2, #0]
 8011166:	6812      	ldr	r2, [r2, #0]
 8011168:	429a      	cmp	r2, r3
 801116a:	d075      	beq.n	8011258 <ai_platform_network_get_error+0x170>
 801116c:	e7fe      	b.n	801116c <ai_platform_network_get_error+0x84>
 801116e:	f7ff feed 	bl	8010f4c <_ai_platform_acquire_crc>
 8011172:	4b5d      	ldr	r3, [pc, #372]	; (80112e8 <ai_platform_network_get_error+0x200>)
 8011174:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801117e:	185a      	adds	r2, r3, r1
 8011180:	2a01      	cmp	r2, #1
 8011182:	d929      	bls.n	80111d8 <ai_platform_network_get_error+0xf0>
 8011184:	f240 4249 	movw	r2, #1097	; 0x449
 8011188:	4293      	cmp	r3, r2
 801118a:	d025      	beq.n	80111d8 <ai_platform_network_get_error+0xf0>
 801118c:	4a57      	ldr	r2, [pc, #348]	; (80112ec <ai_platform_network_get_error+0x204>)
 801118e:	6813      	ldr	r3, [r2, #0]
 8011190:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011194:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8011198:	d02b      	beq.n	80111f2 <ai_platform_network_get_error+0x10a>
 801119a:	6813      	ldr	r3, [r2, #0]
 801119c:	f240 4183 	movw	r1, #1155	; 0x483
 80111a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80111a4:	428b      	cmp	r3, r1
 80111a6:	d060      	beq.n	801126a <ai_platform_network_get_error+0x182>
 80111a8:	6813      	ldr	r3, [r2, #0]
 80111aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80111ae:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80111b2:	d07c      	beq.n	80112ae <ai_platform_network_get_error+0x1c6>
 80111b4:	6813      	ldr	r3, [r2, #0]
 80111b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d129      	bne.n	8011212 <ai_platform_network_get_error+0x12a>
 80111be:	4a4c      	ldr	r2, [pc, #304]	; (80112f0 <ai_platform_network_get_error+0x208>)
 80111c0:	2301      	movs	r3, #1
 80111c2:	6093      	str	r3, [r2, #8]
 80111c4:	6893      	ldr	r3, [r2, #8]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d1fc      	bne.n	80111c4 <ai_platform_network_get_error+0xdc>
 80111ca:	494a      	ldr	r1, [pc, #296]	; (80112f4 <ai_platform_network_get_error+0x20c>)
 80111cc:	4b4a      	ldr	r3, [pc, #296]	; (80112f8 <ai_platform_network_get_error+0x210>)
 80111ce:	6011      	str	r1, [r2, #0]
 80111d0:	6812      	ldr	r2, [r2, #0]
 80111d2:	429a      	cmp	r2, r3
 80111d4:	d01d      	beq.n	8011212 <ai_platform_network_get_error+0x12a>
 80111d6:	e7fe      	b.n	80111d6 <ai_platform_network_get_error+0xee>
 80111d8:	4a45      	ldr	r2, [pc, #276]	; (80112f0 <ai_platform_network_get_error+0x208>)
 80111da:	2301      	movs	r3, #1
 80111dc:	6093      	str	r3, [r2, #8]
 80111de:	6893      	ldr	r3, [r2, #8]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d1fc      	bne.n	80111de <ai_platform_network_get_error+0xf6>
 80111e4:	4943      	ldr	r1, [pc, #268]	; (80112f4 <ai_platform_network_get_error+0x20c>)
 80111e6:	4b44      	ldr	r3, [pc, #272]	; (80112f8 <ai_platform_network_get_error+0x210>)
 80111e8:	6011      	str	r1, [r2, #0]
 80111ea:	6812      	ldr	r2, [r2, #0]
 80111ec:	429a      	cmp	r2, r3
 80111ee:	d010      	beq.n	8011212 <ai_platform_network_get_error+0x12a>
 80111f0:	e7fe      	b.n	80111f0 <ai_platform_network_get_error+0x108>
 80111f2:	4a42      	ldr	r2, [pc, #264]	; (80112fc <ai_platform_network_get_error+0x214>)
 80111f4:	2301      	movs	r3, #1
 80111f6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80111fa:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d1fb      	bne.n	80111fa <ai_platform_network_get_error+0x112>
 8011202:	493c      	ldr	r1, [pc, #240]	; (80112f4 <ai_platform_network_get_error+0x20c>)
 8011204:	4b3c      	ldr	r3, [pc, #240]	; (80112f8 <ai_platform_network_get_error+0x210>)
 8011206:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 801120a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801120e:	429a      	cmp	r2, r3
 8011210:	d111      	bne.n	8011236 <ai_platform_network_get_error+0x14e>
 8011212:	f7ff fe9d 	bl	8010f50 <_ai_platform_release_crc>
 8011216:	f241 0010 	movw	r0, #4112	; 0x1010
 801121a:	bd10      	pop	{r4, pc}
 801121c:	4a34      	ldr	r2, [pc, #208]	; (80112f0 <ai_platform_network_get_error+0x208>)
 801121e:	2301      	movs	r3, #1
 8011220:	6093      	str	r3, [r2, #8]
 8011222:	6893      	ldr	r3, [r2, #8]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d1fc      	bne.n	8011222 <ai_platform_network_get_error+0x13a>
 8011228:	4932      	ldr	r1, [pc, #200]	; (80112f4 <ai_platform_network_get_error+0x20c>)
 801122a:	4b33      	ldr	r3, [pc, #204]	; (80112f8 <ai_platform_network_get_error+0x210>)
 801122c:	6011      	str	r1, [r2, #0]
 801122e:	6812      	ldr	r2, [r2, #0]
 8011230:	429a      	cmp	r2, r3
 8011232:	d011      	beq.n	8011258 <ai_platform_network_get_error+0x170>
 8011234:	e7fe      	b.n	8011234 <ai_platform_network_get_error+0x14c>
 8011236:	e7fe      	b.n	8011236 <ai_platform_network_get_error+0x14e>
 8011238:	4a30      	ldr	r2, [pc, #192]	; (80112fc <ai_platform_network_get_error+0x214>)
 801123a:	2301      	movs	r3, #1
 801123c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011240:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8011244:	2b00      	cmp	r3, #0
 8011246:	d1fb      	bne.n	8011240 <ai_platform_network_get_error+0x158>
 8011248:	492a      	ldr	r1, [pc, #168]	; (80112f4 <ai_platform_network_get_error+0x20c>)
 801124a:	4b2b      	ldr	r3, [pc, #172]	; (80112f8 <ai_platform_network_get_error+0x210>)
 801124c:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8011250:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8011254:	429a      	cmp	r2, r3
 8011256:	d107      	bne.n	8011268 <ai_platform_network_get_error+0x180>
 8011258:	f7ff fe7a 	bl	8010f50 <_ai_platform_release_crc>
 801125c:	f104 0010 	add.w	r0, r4, #16
 8011260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011264:	f001 bc36 	b.w	8012ad4 <core_get_error>
 8011268:	e7fe      	b.n	8011268 <ai_platform_network_get_error+0x180>
 801126a:	4a24      	ldr	r2, [pc, #144]	; (80112fc <ai_platform_network_get_error+0x214>)
 801126c:	2301      	movs	r3, #1
 801126e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011272:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8011276:	2b00      	cmp	r3, #0
 8011278:	d1fb      	bne.n	8011272 <ai_platform_network_get_error+0x18a>
 801127a:	491e      	ldr	r1, [pc, #120]	; (80112f4 <ai_platform_network_get_error+0x20c>)
 801127c:	4b1e      	ldr	r3, [pc, #120]	; (80112f8 <ai_platform_network_get_error+0x210>)
 801127e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8011282:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8011286:	429a      	cmp	r2, r3
 8011288:	d0c3      	beq.n	8011212 <ai_platform_network_get_error+0x12a>
 801128a:	e7fe      	b.n	801128a <ai_platform_network_get_error+0x1a2>
 801128c:	4a1b      	ldr	r2, [pc, #108]	; (80112fc <ai_platform_network_get_error+0x214>)
 801128e:	2301      	movs	r3, #1
 8011290:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011294:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8011298:	2b00      	cmp	r3, #0
 801129a:	d1fb      	bne.n	8011294 <ai_platform_network_get_error+0x1ac>
 801129c:	4915      	ldr	r1, [pc, #84]	; (80112f4 <ai_platform_network_get_error+0x20c>)
 801129e:	4b16      	ldr	r3, [pc, #88]	; (80112f8 <ai_platform_network_get_error+0x210>)
 80112a0:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80112a4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80112a8:	429a      	cmp	r2, r3
 80112aa:	d0d5      	beq.n	8011258 <ai_platform_network_get_error+0x170>
 80112ac:	e7fe      	b.n	80112ac <ai_platform_network_get_error+0x1c4>
 80112ae:	4a10      	ldr	r2, [pc, #64]	; (80112f0 <ai_platform_network_get_error+0x208>)
 80112b0:	2301      	movs	r3, #1
 80112b2:	6093      	str	r3, [r2, #8]
 80112b4:	6893      	ldr	r3, [r2, #8]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d1fc      	bne.n	80112b4 <ai_platform_network_get_error+0x1cc>
 80112ba:	490e      	ldr	r1, [pc, #56]	; (80112f4 <ai_platform_network_get_error+0x20c>)
 80112bc:	4b0e      	ldr	r3, [pc, #56]	; (80112f8 <ai_platform_network_get_error+0x210>)
 80112be:	6011      	str	r1, [r2, #0]
 80112c0:	6812      	ldr	r2, [r2, #0]
 80112c2:	429a      	cmp	r2, r3
 80112c4:	d0a5      	beq.n	8011212 <ai_platform_network_get_error+0x12a>
 80112c6:	e7fe      	b.n	80112c6 <ai_platform_network_get_error+0x1de>
 80112c8:	4a09      	ldr	r2, [pc, #36]	; (80112f0 <ai_platform_network_get_error+0x208>)
 80112ca:	2301      	movs	r3, #1
 80112cc:	6093      	str	r3, [r2, #8]
 80112ce:	6893      	ldr	r3, [r2, #8]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d1fc      	bne.n	80112ce <ai_platform_network_get_error+0x1e6>
 80112d4:	4907      	ldr	r1, [pc, #28]	; (80112f4 <ai_platform_network_get_error+0x20c>)
 80112d6:	4b08      	ldr	r3, [pc, #32]	; (80112f8 <ai_platform_network_get_error+0x210>)
 80112d8:	6011      	str	r1, [r2, #0]
 80112da:	6812      	ldr	r2, [r2, #0]
 80112dc:	429a      	cmp	r2, r3
 80112de:	d0bb      	beq.n	8011258 <ai_platform_network_get_error+0x170>
 80112e0:	e7fe      	b.n	80112e0 <ai_platform_network_get_error+0x1f8>
 80112e2:	bf00      	nop
 80112e4:	a1c00100 	.word	0xa1c00100
 80112e8:	e0042000 	.word	0xe0042000
 80112ec:	5c001000 	.word	0x5c001000
 80112f0:	40023000 	.word	0x40023000
 80112f4:	f407a5c2 	.word	0xf407a5c2
 80112f8:	b5e8b5cd 	.word	0xb5e8b5cd
 80112fc:	58024000 	.word	0x58024000

08011300 <ai_platform_network_set_error>:
 8011300:	b110      	cbz	r0, 8011308 <ai_platform_network_set_error+0x8>
 8011302:	3010      	adds	r0, #16
 8011304:	f001 bbec 	b.w	8012ae0 <core_set_error>
 8011308:	4770      	bx	lr
 801130a:	bf00      	nop

0801130c <ai_platform_inputs_get>:
 801130c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011310:	b085      	sub	sp, #20
 8011312:	9102      	str	r1, [sp, #8]
 8011314:	2800      	cmp	r0, #0
 8011316:	f000 8093 	beq.w	8011440 <ai_platform_inputs_get+0x134>
 801131a:	4baa      	ldr	r3, [pc, #680]	; (80115c4 <ai_platform_inputs_get+0x2b8>)
 801131c:	4681      	mov	r9, r0
 801131e:	6802      	ldr	r2, [r0, #0]
 8011320:	429a      	cmp	r2, r3
 8011322:	f040 808d 	bne.w	8011440 <ai_platform_inputs_get+0x134>
 8011326:	f7ff fe11 	bl	8010f4c <_ai_platform_acquire_crc>
 801132a:	4ba7      	ldr	r3, [pc, #668]	; (80115c8 <ai_platform_inputs_get+0x2bc>)
 801132c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011336:	189a      	adds	r2, r3, r2
 8011338:	2a01      	cmp	r2, #1
 801133a:	f240 80da 	bls.w	80114f2 <ai_platform_inputs_get+0x1e6>
 801133e:	f240 4249 	movw	r2, #1097	; 0x449
 8011342:	4293      	cmp	r3, r2
 8011344:	f000 80d5 	beq.w	80114f2 <ai_platform_inputs_get+0x1e6>
 8011348:	4aa0      	ldr	r2, [pc, #640]	; (80115cc <ai_platform_inputs_get+0x2c0>)
 801134a:	6813      	ldr	r3, [r2, #0]
 801134c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011350:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8011354:	f000 80dc 	beq.w	8011510 <ai_platform_inputs_get+0x204>
 8011358:	6813      	ldr	r3, [r2, #0]
 801135a:	f240 4183 	movw	r1, #1155	; 0x483
 801135e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011362:	428b      	cmp	r3, r1
 8011364:	f000 810e 	beq.w	8011584 <ai_platform_inputs_get+0x278>
 8011368:	6813      	ldr	r3, [r2, #0]
 801136a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801136e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8011372:	f000 8143 	beq.w	80115fc <ai_platform_inputs_get+0x2f0>
 8011376:	6813      	ldr	r3, [r2, #0]
 8011378:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801137c:	2b00      	cmp	r3, #0
 801137e:	f000 8113 	beq.w	80115a8 <ai_platform_inputs_get+0x29c>
 8011382:	f7ff fde5 	bl	8010f50 <_ai_platform_release_crc>
 8011386:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 801138a:	2b00      	cmp	r3, #0
 801138c:	f000 80d2 	beq.w	8011534 <ai_platform_inputs_get+0x228>
 8011390:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 8011394:	f1ba 0f00 	cmp.w	sl, #0
 8011398:	f000 80cc 	beq.w	8011534 <ai_platform_inputs_get+0x228>
 801139c:	2100      	movs	r1, #0
 801139e:	f8cd 900c 	str.w	r9, [sp, #12]
 80113a2:	460d      	mov	r5, r1
 80113a4:	4689      	mov	r9, r1
 80113a6:	e016      	b.n	80113d6 <ai_platform_inputs_get+0xca>
 80113a8:	9a01      	ldr	r2, [sp, #4]
 80113aa:	2301      	movs	r3, #1
 80113ac:	f848 3002 	str.w	r3, [r8, r2]
 80113b0:	69b2      	ldr	r2, [r6, #24]
 80113b2:	f04f 0301 	mov.w	r3, #1
 80113b6:	6856      	ldr	r6, [r2, #4]
 80113b8:	3501      	adds	r5, #1
 80113ba:	f109 091c 	add.w	r9, r9, #28
 80113be:	7523      	strb	r3, [r4, #20]
 80113c0:	2300      	movs	r3, #0
 80113c2:	6962      	ldr	r2, [r4, #20]
 80113c4:	60a7      	str	r7, [r4, #8]
 80113c6:	f36b 221f 	bfi	r2, fp, #8, #24
 80113ca:	6126      	str	r6, [r4, #16]
 80113cc:	61a1      	str	r1, [r4, #24]
 80113ce:	60e3      	str	r3, [r4, #12]
 80113d0:	6162      	str	r2, [r4, #20]
 80113d2:	e9c4 0c00 	strd	r0, ip, [r4]
 80113d6:	f8ba 3000 	ldrh.w	r3, [sl]
 80113da:	b2ac      	uxth	r4, r5
 80113dc:	42ab      	cmp	r3, r5
 80113de:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 80113e2:	9301      	str	r3, [sp, #4]
 80113e4:	f240 80b5 	bls.w	8011552 <ai_platform_inputs_get+0x246>
 80113e8:	f8da 3004 	ldr.w	r3, [sl, #4]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	f000 80b0 	beq.w	8011552 <ai_platform_inputs_get+0x246>
 80113f2:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80113f6:	2e00      	cmp	r6, #0
 80113f8:	f000 80ab 	beq.w	8011552 <ai_platform_inputs_get+0x246>
 80113fc:	f8da 3008 	ldr.w	r3, [sl, #8]
 8011400:	69b2      	ldr	r2, [r6, #24]
 8011402:	68f1      	ldr	r1, [r6, #12]
 8011404:	6810      	ldr	r0, [r2, #0]
 8011406:	9100      	str	r1, [sp, #0]
 8011408:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 801140c:	68b3      	ldr	r3, [r6, #8]
 801140e:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8011412:	444c      	add	r4, r9
 8011414:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8011418:	f006 fa2a 	bl	8017870 <ai_array_to_buffer_fmt>
 801141c:	69b2      	ldr	r2, [r6, #24]
 801141e:	9900      	ldr	r1, [sp, #0]
 8011420:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8011424:	2f00      	cmp	r7, #0
 8011426:	d0c4      	beq.n	80113b2 <ai_platform_inputs_get+0xa6>
 8011428:	2200      	movs	r2, #0
 801142a:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 801142e:	6832      	ldr	r2, [r6, #0]
 8011430:	607a      	str	r2, [r7, #4]
 8011432:	b112      	cbz	r2, 801143a <ai_platform_inputs_get+0x12e>
 8011434:	8852      	ldrh	r2, [r2, #2]
 8011436:	2a00      	cmp	r2, #0
 8011438:	d1b6      	bne.n	80113a8 <ai_platform_inputs_get+0x9c>
 801143a:	69b2      	ldr	r2, [r6, #24]
 801143c:	2700      	movs	r7, #0
 801143e:	e7b8      	b.n	80113b2 <ai_platform_inputs_get+0xa6>
 8011440:	f7ff fd84 	bl	8010f4c <_ai_platform_acquire_crc>
 8011444:	4b60      	ldr	r3, [pc, #384]	; (80115c8 <ai_platform_inputs_get+0x2bc>)
 8011446:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011450:	185a      	adds	r2, r3, r1
 8011452:	2a01      	cmp	r2, #1
 8011454:	d92a      	bls.n	80114ac <ai_platform_inputs_get+0x1a0>
 8011456:	f240 4249 	movw	r2, #1097	; 0x449
 801145a:	4293      	cmp	r3, r2
 801145c:	d026      	beq.n	80114ac <ai_platform_inputs_get+0x1a0>
 801145e:	4a5b      	ldr	r2, [pc, #364]	; (80115cc <ai_platform_inputs_get+0x2c0>)
 8011460:	6813      	ldr	r3, [r2, #0]
 8011462:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011466:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801146a:	d02c      	beq.n	80114c6 <ai_platform_inputs_get+0x1ba>
 801146c:	6813      	ldr	r3, [r2, #0]
 801146e:	f240 4183 	movw	r1, #1155	; 0x483
 8011472:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011476:	428b      	cmp	r3, r1
 8011478:	d073      	beq.n	8011562 <ai_platform_inputs_get+0x256>
 801147a:	6813      	ldr	r3, [r2, #0]
 801147c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011480:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8011484:	f000 80ac 	beq.w	80115e0 <ai_platform_inputs_get+0x2d4>
 8011488:	6813      	ldr	r3, [r2, #0]
 801148a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801148e:	2b00      	cmp	r3, #0
 8011490:	d129      	bne.n	80114e6 <ai_platform_inputs_get+0x1da>
 8011492:	4a4f      	ldr	r2, [pc, #316]	; (80115d0 <ai_platform_inputs_get+0x2c4>)
 8011494:	2301      	movs	r3, #1
 8011496:	6093      	str	r3, [r2, #8]
 8011498:	6893      	ldr	r3, [r2, #8]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d1fc      	bne.n	8011498 <ai_platform_inputs_get+0x18c>
 801149e:	494d      	ldr	r1, [pc, #308]	; (80115d4 <ai_platform_inputs_get+0x2c8>)
 80114a0:	4b4d      	ldr	r3, [pc, #308]	; (80115d8 <ai_platform_inputs_get+0x2cc>)
 80114a2:	6011      	str	r1, [r2, #0]
 80114a4:	6812      	ldr	r2, [r2, #0]
 80114a6:	429a      	cmp	r2, r3
 80114a8:	d01d      	beq.n	80114e6 <ai_platform_inputs_get+0x1da>
 80114aa:	e7fe      	b.n	80114aa <ai_platform_inputs_get+0x19e>
 80114ac:	4a48      	ldr	r2, [pc, #288]	; (80115d0 <ai_platform_inputs_get+0x2c4>)
 80114ae:	2301      	movs	r3, #1
 80114b0:	6093      	str	r3, [r2, #8]
 80114b2:	6893      	ldr	r3, [r2, #8]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d1fc      	bne.n	80114b2 <ai_platform_inputs_get+0x1a6>
 80114b8:	4946      	ldr	r1, [pc, #280]	; (80115d4 <ai_platform_inputs_get+0x2c8>)
 80114ba:	4b47      	ldr	r3, [pc, #284]	; (80115d8 <ai_platform_inputs_get+0x2cc>)
 80114bc:	6011      	str	r1, [r2, #0]
 80114be:	6812      	ldr	r2, [r2, #0]
 80114c0:	429a      	cmp	r2, r3
 80114c2:	d010      	beq.n	80114e6 <ai_platform_inputs_get+0x1da>
 80114c4:	e7fe      	b.n	80114c4 <ai_platform_inputs_get+0x1b8>
 80114c6:	4a45      	ldr	r2, [pc, #276]	; (80115dc <ai_platform_inputs_get+0x2d0>)
 80114c8:	2301      	movs	r3, #1
 80114ca:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80114ce:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d1fb      	bne.n	80114ce <ai_platform_inputs_get+0x1c2>
 80114d6:	493f      	ldr	r1, [pc, #252]	; (80115d4 <ai_platform_inputs_get+0x2c8>)
 80114d8:	4b3f      	ldr	r3, [pc, #252]	; (80115d8 <ai_platform_inputs_get+0x2cc>)
 80114da:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80114de:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80114e2:	429a      	cmp	r2, r3
 80114e4:	d113      	bne.n	801150e <ai_platform_inputs_get+0x202>
 80114e6:	f7ff fd33 	bl	8010f50 <_ai_platform_release_crc>
 80114ea:	2000      	movs	r0, #0
 80114ec:	b005      	add	sp, #20
 80114ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114f2:	4a37      	ldr	r2, [pc, #220]	; (80115d0 <ai_platform_inputs_get+0x2c4>)
 80114f4:	2301      	movs	r3, #1
 80114f6:	6093      	str	r3, [r2, #8]
 80114f8:	6893      	ldr	r3, [r2, #8]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d1fc      	bne.n	80114f8 <ai_platform_inputs_get+0x1ec>
 80114fe:	4b35      	ldr	r3, [pc, #212]	; (80115d4 <ai_platform_inputs_get+0x2c8>)
 8011500:	6013      	str	r3, [r2, #0]
 8011502:	4b35      	ldr	r3, [pc, #212]	; (80115d8 <ai_platform_inputs_get+0x2cc>)
 8011504:	6812      	ldr	r2, [r2, #0]
 8011506:	429a      	cmp	r2, r3
 8011508:	f43f af3b 	beq.w	8011382 <ai_platform_inputs_get+0x76>
 801150c:	e7fe      	b.n	801150c <ai_platform_inputs_get+0x200>
 801150e:	e7fe      	b.n	801150e <ai_platform_inputs_get+0x202>
 8011510:	4a32      	ldr	r2, [pc, #200]	; (80115dc <ai_platform_inputs_get+0x2d0>)
 8011512:	2301      	movs	r3, #1
 8011514:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011518:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801151c:	2b00      	cmp	r3, #0
 801151e:	d1fb      	bne.n	8011518 <ai_platform_inputs_get+0x20c>
 8011520:	4b2c      	ldr	r3, [pc, #176]	; (80115d4 <ai_platform_inputs_get+0x2c8>)
 8011522:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8011526:	4b2c      	ldr	r3, [pc, #176]	; (80115d8 <ai_platform_inputs_get+0x2cc>)
 8011528:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801152c:	429a      	cmp	r2, r3
 801152e:	f43f af28 	beq.w	8011382 <ai_platform_inputs_get+0x76>
 8011532:	e7fe      	b.n	8011532 <ai_platform_inputs_get+0x226>
 8011534:	2400      	movs	r4, #0
 8011536:	2218      	movs	r2, #24
 8011538:	2111      	movs	r1, #17
 801153a:	f109 0010 	add.w	r0, r9, #16
 801153e:	f001 facf 	bl	8012ae0 <core_set_error>
 8011542:	4620      	mov	r0, r4
 8011544:	9b02      	ldr	r3, [sp, #8]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d0d0      	beq.n	80114ec <ai_platform_inputs_get+0x1e0>
 801154a:	801c      	strh	r4, [r3, #0]
 801154c:	b005      	add	sp, #20
 801154e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011552:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8011556:	2c00      	cmp	r4, #0
 8011558:	d0ec      	beq.n	8011534 <ai_platform_inputs_get+0x228>
 801155a:	f8da 3008 	ldr.w	r3, [sl, #8]
 801155e:	6858      	ldr	r0, [r3, #4]
 8011560:	e7f0      	b.n	8011544 <ai_platform_inputs_get+0x238>
 8011562:	4a1e      	ldr	r2, [pc, #120]	; (80115dc <ai_platform_inputs_get+0x2d0>)
 8011564:	2301      	movs	r3, #1
 8011566:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801156a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801156e:	2b00      	cmp	r3, #0
 8011570:	d1fb      	bne.n	801156a <ai_platform_inputs_get+0x25e>
 8011572:	4918      	ldr	r1, [pc, #96]	; (80115d4 <ai_platform_inputs_get+0x2c8>)
 8011574:	4b18      	ldr	r3, [pc, #96]	; (80115d8 <ai_platform_inputs_get+0x2cc>)
 8011576:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 801157a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801157e:	429a      	cmp	r2, r3
 8011580:	d0b1      	beq.n	80114e6 <ai_platform_inputs_get+0x1da>
 8011582:	e7fe      	b.n	8011582 <ai_platform_inputs_get+0x276>
 8011584:	4a15      	ldr	r2, [pc, #84]	; (80115dc <ai_platform_inputs_get+0x2d0>)
 8011586:	2301      	movs	r3, #1
 8011588:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801158c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8011590:	2b00      	cmp	r3, #0
 8011592:	d1fb      	bne.n	801158c <ai_platform_inputs_get+0x280>
 8011594:	4b0f      	ldr	r3, [pc, #60]	; (80115d4 <ai_platform_inputs_get+0x2c8>)
 8011596:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 801159a:	4b0f      	ldr	r3, [pc, #60]	; (80115d8 <ai_platform_inputs_get+0x2cc>)
 801159c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80115a0:	429a      	cmp	r2, r3
 80115a2:	f43f aeee 	beq.w	8011382 <ai_platform_inputs_get+0x76>
 80115a6:	e7fe      	b.n	80115a6 <ai_platform_inputs_get+0x29a>
 80115a8:	4a09      	ldr	r2, [pc, #36]	; (80115d0 <ai_platform_inputs_get+0x2c4>)
 80115aa:	2301      	movs	r3, #1
 80115ac:	6093      	str	r3, [r2, #8]
 80115ae:	6893      	ldr	r3, [r2, #8]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d1fc      	bne.n	80115ae <ai_platform_inputs_get+0x2a2>
 80115b4:	4b07      	ldr	r3, [pc, #28]	; (80115d4 <ai_platform_inputs_get+0x2c8>)
 80115b6:	6013      	str	r3, [r2, #0]
 80115b8:	4b07      	ldr	r3, [pc, #28]	; (80115d8 <ai_platform_inputs_get+0x2cc>)
 80115ba:	6812      	ldr	r2, [r2, #0]
 80115bc:	429a      	cmp	r2, r3
 80115be:	f43f aee0 	beq.w	8011382 <ai_platform_inputs_get+0x76>
 80115c2:	e7fe      	b.n	80115c2 <ai_platform_inputs_get+0x2b6>
 80115c4:	a1c00100 	.word	0xa1c00100
 80115c8:	e0042000 	.word	0xe0042000
 80115cc:	5c001000 	.word	0x5c001000
 80115d0:	40023000 	.word	0x40023000
 80115d4:	f407a5c2 	.word	0xf407a5c2
 80115d8:	b5e8b5cd 	.word	0xb5e8b5cd
 80115dc:	58024000 	.word	0x58024000
 80115e0:	4a0d      	ldr	r2, [pc, #52]	; (8011618 <ai_platform_inputs_get+0x30c>)
 80115e2:	2301      	movs	r3, #1
 80115e4:	6093      	str	r3, [r2, #8]
 80115e6:	6893      	ldr	r3, [r2, #8]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d1fc      	bne.n	80115e6 <ai_platform_inputs_get+0x2da>
 80115ec:	490b      	ldr	r1, [pc, #44]	; (801161c <ai_platform_inputs_get+0x310>)
 80115ee:	4b0c      	ldr	r3, [pc, #48]	; (8011620 <ai_platform_inputs_get+0x314>)
 80115f0:	6011      	str	r1, [r2, #0]
 80115f2:	6812      	ldr	r2, [r2, #0]
 80115f4:	429a      	cmp	r2, r3
 80115f6:	f43f af76 	beq.w	80114e6 <ai_platform_inputs_get+0x1da>
 80115fa:	e7fe      	b.n	80115fa <ai_platform_inputs_get+0x2ee>
 80115fc:	4a06      	ldr	r2, [pc, #24]	; (8011618 <ai_platform_inputs_get+0x30c>)
 80115fe:	2301      	movs	r3, #1
 8011600:	6093      	str	r3, [r2, #8]
 8011602:	6893      	ldr	r3, [r2, #8]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d1fc      	bne.n	8011602 <ai_platform_inputs_get+0x2f6>
 8011608:	4b04      	ldr	r3, [pc, #16]	; (801161c <ai_platform_inputs_get+0x310>)
 801160a:	6013      	str	r3, [r2, #0]
 801160c:	4b04      	ldr	r3, [pc, #16]	; (8011620 <ai_platform_inputs_get+0x314>)
 801160e:	6812      	ldr	r2, [r2, #0]
 8011610:	429a      	cmp	r2, r3
 8011612:	f43f aeb6 	beq.w	8011382 <ai_platform_inputs_get+0x76>
 8011616:	e7fe      	b.n	8011616 <ai_platform_inputs_get+0x30a>
 8011618:	40023000 	.word	0x40023000
 801161c:	f407a5c2 	.word	0xf407a5c2
 8011620:	b5e8b5cd 	.word	0xb5e8b5cd

08011624 <ai_platform_outputs_get>:
 8011624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011628:	b085      	sub	sp, #20
 801162a:	9102      	str	r1, [sp, #8]
 801162c:	2800      	cmp	r0, #0
 801162e:	f000 808f 	beq.w	8011750 <ai_platform_outputs_get+0x12c>
 8011632:	4ba8      	ldr	r3, [pc, #672]	; (80118d4 <ai_platform_outputs_get+0x2b0>)
 8011634:	4681      	mov	r9, r0
 8011636:	6802      	ldr	r2, [r0, #0]
 8011638:	429a      	cmp	r2, r3
 801163a:	f040 8089 	bne.w	8011750 <ai_platform_outputs_get+0x12c>
 801163e:	f7ff fc85 	bl	8010f4c <_ai_platform_acquire_crc>
 8011642:	4ba5      	ldr	r3, [pc, #660]	; (80118d8 <ai_platform_outputs_get+0x2b4>)
 8011644:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801164e:	189a      	adds	r2, r3, r2
 8011650:	2a01      	cmp	r2, #1
 8011652:	f240 80d6 	bls.w	8011802 <ai_platform_outputs_get+0x1de>
 8011656:	f240 4249 	movw	r2, #1097	; 0x449
 801165a:	4293      	cmp	r3, r2
 801165c:	f000 80d1 	beq.w	8011802 <ai_platform_outputs_get+0x1de>
 8011660:	4a9e      	ldr	r2, [pc, #632]	; (80118dc <ai_platform_outputs_get+0x2b8>)
 8011662:	6813      	ldr	r3, [r2, #0]
 8011664:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011668:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801166c:	f000 80d8 	beq.w	8011820 <ai_platform_outputs_get+0x1fc>
 8011670:	6813      	ldr	r3, [r2, #0]
 8011672:	f240 4183 	movw	r1, #1155	; 0x483
 8011676:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801167a:	428b      	cmp	r3, r1
 801167c:	f000 8109 	beq.w	8011892 <ai_platform_outputs_get+0x26e>
 8011680:	6813      	ldr	r3, [r2, #0]
 8011682:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011686:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801168a:	f000 813f 	beq.w	801190c <ai_platform_outputs_get+0x2e8>
 801168e:	6813      	ldr	r3, [r2, #0]
 8011690:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011694:	2b00      	cmp	r3, #0
 8011696:	f000 810e 	beq.w	80118b6 <ai_platform_outputs_get+0x292>
 801169a:	f7ff fc59 	bl	8010f50 <_ai_platform_release_crc>
 801169e:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 80116a2:	2b01      	cmp	r3, #1
 80116a4:	f240 80db 	bls.w	801185e <ai_platform_outputs_get+0x23a>
 80116a8:	2100      	movs	r1, #0
 80116aa:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 80116ae:	f8cd 900c 	str.w	r9, [sp, #12]
 80116b2:	460d      	mov	r5, r1
 80116b4:	4689      	mov	r9, r1
 80116b6:	e016      	b.n	80116e6 <ai_platform_outputs_get+0xc2>
 80116b8:	9a01      	ldr	r2, [sp, #4]
 80116ba:	2301      	movs	r3, #1
 80116bc:	f848 3002 	str.w	r3, [r8, r2]
 80116c0:	69b2      	ldr	r2, [r6, #24]
 80116c2:	f04f 0301 	mov.w	r3, #1
 80116c6:	6856      	ldr	r6, [r2, #4]
 80116c8:	3501      	adds	r5, #1
 80116ca:	f109 091c 	add.w	r9, r9, #28
 80116ce:	7523      	strb	r3, [r4, #20]
 80116d0:	2300      	movs	r3, #0
 80116d2:	6962      	ldr	r2, [r4, #20]
 80116d4:	60a7      	str	r7, [r4, #8]
 80116d6:	f36b 221f 	bfi	r2, fp, #8, #24
 80116da:	6126      	str	r6, [r4, #16]
 80116dc:	61a1      	str	r1, [r4, #24]
 80116de:	60e3      	str	r3, [r4, #12]
 80116e0:	6162      	str	r2, [r4, #20]
 80116e2:	e9c4 0c00 	strd	r0, ip, [r4]
 80116e6:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80116ea:	b2ac      	uxth	r4, r5
 80116ec:	42ab      	cmp	r3, r5
 80116ee:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 80116f2:	9301      	str	r3, [sp, #4]
 80116f4:	f240 80a6 	bls.w	8011844 <ai_platform_outputs_get+0x220>
 80116f8:	f8da 3010 	ldr.w	r3, [sl, #16]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	f000 80a1 	beq.w	8011844 <ai_platform_outputs_get+0x220>
 8011702:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8011706:	2e00      	cmp	r6, #0
 8011708:	f000 809c 	beq.w	8011844 <ai_platform_outputs_get+0x220>
 801170c:	f8da 3014 	ldr.w	r3, [sl, #20]
 8011710:	69b2      	ldr	r2, [r6, #24]
 8011712:	68f1      	ldr	r1, [r6, #12]
 8011714:	6810      	ldr	r0, [r2, #0]
 8011716:	9100      	str	r1, [sp, #0]
 8011718:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 801171c:	68b3      	ldr	r3, [r6, #8]
 801171e:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8011722:	444c      	add	r4, r9
 8011724:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8011728:	f006 f8a2 	bl	8017870 <ai_array_to_buffer_fmt>
 801172c:	69b2      	ldr	r2, [r6, #24]
 801172e:	9900      	ldr	r1, [sp, #0]
 8011730:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8011734:	2f00      	cmp	r7, #0
 8011736:	d0c4      	beq.n	80116c2 <ai_platform_outputs_get+0x9e>
 8011738:	2200      	movs	r2, #0
 801173a:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 801173e:	6832      	ldr	r2, [r6, #0]
 8011740:	607a      	str	r2, [r7, #4]
 8011742:	b112      	cbz	r2, 801174a <ai_platform_outputs_get+0x126>
 8011744:	8852      	ldrh	r2, [r2, #2]
 8011746:	2a00      	cmp	r2, #0
 8011748:	d1b6      	bne.n	80116b8 <ai_platform_outputs_get+0x94>
 801174a:	69b2      	ldr	r2, [r6, #24]
 801174c:	2700      	movs	r7, #0
 801174e:	e7b8      	b.n	80116c2 <ai_platform_outputs_get+0x9e>
 8011750:	f7ff fbfc 	bl	8010f4c <_ai_platform_acquire_crc>
 8011754:	4b60      	ldr	r3, [pc, #384]	; (80118d8 <ai_platform_outputs_get+0x2b4>)
 8011756:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011760:	185a      	adds	r2, r3, r1
 8011762:	2a01      	cmp	r2, #1
 8011764:	d92a      	bls.n	80117bc <ai_platform_outputs_get+0x198>
 8011766:	f240 4249 	movw	r2, #1097	; 0x449
 801176a:	4293      	cmp	r3, r2
 801176c:	d026      	beq.n	80117bc <ai_platform_outputs_get+0x198>
 801176e:	4a5b      	ldr	r2, [pc, #364]	; (80118dc <ai_platform_outputs_get+0x2b8>)
 8011770:	6813      	ldr	r3, [r2, #0]
 8011772:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011776:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801177a:	d02c      	beq.n	80117d6 <ai_platform_outputs_get+0x1b2>
 801177c:	6813      	ldr	r3, [r2, #0]
 801177e:	f240 4183 	movw	r1, #1155	; 0x483
 8011782:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011786:	428b      	cmp	r3, r1
 8011788:	d072      	beq.n	8011870 <ai_platform_outputs_get+0x24c>
 801178a:	6813      	ldr	r3, [r2, #0]
 801178c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011790:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8011794:	f000 80ac 	beq.w	80118f0 <ai_platform_outputs_get+0x2cc>
 8011798:	6813      	ldr	r3, [r2, #0]
 801179a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d129      	bne.n	80117f6 <ai_platform_outputs_get+0x1d2>
 80117a2:	4a4f      	ldr	r2, [pc, #316]	; (80118e0 <ai_platform_outputs_get+0x2bc>)
 80117a4:	2301      	movs	r3, #1
 80117a6:	6093      	str	r3, [r2, #8]
 80117a8:	6893      	ldr	r3, [r2, #8]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d1fc      	bne.n	80117a8 <ai_platform_outputs_get+0x184>
 80117ae:	494d      	ldr	r1, [pc, #308]	; (80118e4 <ai_platform_outputs_get+0x2c0>)
 80117b0:	4b4d      	ldr	r3, [pc, #308]	; (80118e8 <ai_platform_outputs_get+0x2c4>)
 80117b2:	6011      	str	r1, [r2, #0]
 80117b4:	6812      	ldr	r2, [r2, #0]
 80117b6:	429a      	cmp	r2, r3
 80117b8:	d01d      	beq.n	80117f6 <ai_platform_outputs_get+0x1d2>
 80117ba:	e7fe      	b.n	80117ba <ai_platform_outputs_get+0x196>
 80117bc:	4a48      	ldr	r2, [pc, #288]	; (80118e0 <ai_platform_outputs_get+0x2bc>)
 80117be:	2301      	movs	r3, #1
 80117c0:	6093      	str	r3, [r2, #8]
 80117c2:	6893      	ldr	r3, [r2, #8]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d1fc      	bne.n	80117c2 <ai_platform_outputs_get+0x19e>
 80117c8:	4946      	ldr	r1, [pc, #280]	; (80118e4 <ai_platform_outputs_get+0x2c0>)
 80117ca:	4b47      	ldr	r3, [pc, #284]	; (80118e8 <ai_platform_outputs_get+0x2c4>)
 80117cc:	6011      	str	r1, [r2, #0]
 80117ce:	6812      	ldr	r2, [r2, #0]
 80117d0:	429a      	cmp	r2, r3
 80117d2:	d010      	beq.n	80117f6 <ai_platform_outputs_get+0x1d2>
 80117d4:	e7fe      	b.n	80117d4 <ai_platform_outputs_get+0x1b0>
 80117d6:	4a45      	ldr	r2, [pc, #276]	; (80118ec <ai_platform_outputs_get+0x2c8>)
 80117d8:	2301      	movs	r3, #1
 80117da:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80117de:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d1fb      	bne.n	80117de <ai_platform_outputs_get+0x1ba>
 80117e6:	493f      	ldr	r1, [pc, #252]	; (80118e4 <ai_platform_outputs_get+0x2c0>)
 80117e8:	4b3f      	ldr	r3, [pc, #252]	; (80118e8 <ai_platform_outputs_get+0x2c4>)
 80117ea:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80117ee:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80117f2:	429a      	cmp	r2, r3
 80117f4:	d113      	bne.n	801181e <ai_platform_outputs_get+0x1fa>
 80117f6:	f7ff fbab 	bl	8010f50 <_ai_platform_release_crc>
 80117fa:	2000      	movs	r0, #0
 80117fc:	b005      	add	sp, #20
 80117fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011802:	4a37      	ldr	r2, [pc, #220]	; (80118e0 <ai_platform_outputs_get+0x2bc>)
 8011804:	2301      	movs	r3, #1
 8011806:	6093      	str	r3, [r2, #8]
 8011808:	6893      	ldr	r3, [r2, #8]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d1fc      	bne.n	8011808 <ai_platform_outputs_get+0x1e4>
 801180e:	4b35      	ldr	r3, [pc, #212]	; (80118e4 <ai_platform_outputs_get+0x2c0>)
 8011810:	6013      	str	r3, [r2, #0]
 8011812:	4b35      	ldr	r3, [pc, #212]	; (80118e8 <ai_platform_outputs_get+0x2c4>)
 8011814:	6812      	ldr	r2, [r2, #0]
 8011816:	429a      	cmp	r2, r3
 8011818:	f43f af3f 	beq.w	801169a <ai_platform_outputs_get+0x76>
 801181c:	e7fe      	b.n	801181c <ai_platform_outputs_get+0x1f8>
 801181e:	e7fe      	b.n	801181e <ai_platform_outputs_get+0x1fa>
 8011820:	4a32      	ldr	r2, [pc, #200]	; (80118ec <ai_platform_outputs_get+0x2c8>)
 8011822:	2301      	movs	r3, #1
 8011824:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011828:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801182c:	2b00      	cmp	r3, #0
 801182e:	d1fb      	bne.n	8011828 <ai_platform_outputs_get+0x204>
 8011830:	4b2c      	ldr	r3, [pc, #176]	; (80118e4 <ai_platform_outputs_get+0x2c0>)
 8011832:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8011836:	4b2c      	ldr	r3, [pc, #176]	; (80118e8 <ai_platform_outputs_get+0x2c4>)
 8011838:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801183c:	429a      	cmp	r2, r3
 801183e:	f43f af2c 	beq.w	801169a <ai_platform_outputs_get+0x76>
 8011842:	e7fe      	b.n	8011842 <ai_platform_outputs_get+0x21e>
 8011844:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8011848:	b14c      	cbz	r4, 801185e <ai_platform_outputs_get+0x23a>
 801184a:	f8da 3014 	ldr.w	r3, [sl, #20]
 801184e:	6858      	ldr	r0, [r3, #4]
 8011850:	9b02      	ldr	r3, [sp, #8]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d0d2      	beq.n	80117fc <ai_platform_outputs_get+0x1d8>
 8011856:	801c      	strh	r4, [r3, #0]
 8011858:	b005      	add	sp, #20
 801185a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801185e:	2400      	movs	r4, #0
 8011860:	2218      	movs	r2, #24
 8011862:	2111      	movs	r1, #17
 8011864:	f109 0010 	add.w	r0, r9, #16
 8011868:	f001 f93a 	bl	8012ae0 <core_set_error>
 801186c:	4620      	mov	r0, r4
 801186e:	e7ef      	b.n	8011850 <ai_platform_outputs_get+0x22c>
 8011870:	4a1e      	ldr	r2, [pc, #120]	; (80118ec <ai_platform_outputs_get+0x2c8>)
 8011872:	2301      	movs	r3, #1
 8011874:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011878:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801187c:	2b00      	cmp	r3, #0
 801187e:	d1fb      	bne.n	8011878 <ai_platform_outputs_get+0x254>
 8011880:	4918      	ldr	r1, [pc, #96]	; (80118e4 <ai_platform_outputs_get+0x2c0>)
 8011882:	4b19      	ldr	r3, [pc, #100]	; (80118e8 <ai_platform_outputs_get+0x2c4>)
 8011884:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8011888:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801188c:	429a      	cmp	r2, r3
 801188e:	d0b2      	beq.n	80117f6 <ai_platform_outputs_get+0x1d2>
 8011890:	e7fe      	b.n	8011890 <ai_platform_outputs_get+0x26c>
 8011892:	4a16      	ldr	r2, [pc, #88]	; (80118ec <ai_platform_outputs_get+0x2c8>)
 8011894:	2301      	movs	r3, #1
 8011896:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801189a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d1fb      	bne.n	801189a <ai_platform_outputs_get+0x276>
 80118a2:	4b10      	ldr	r3, [pc, #64]	; (80118e4 <ai_platform_outputs_get+0x2c0>)
 80118a4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80118a8:	4b0f      	ldr	r3, [pc, #60]	; (80118e8 <ai_platform_outputs_get+0x2c4>)
 80118aa:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80118ae:	429a      	cmp	r2, r3
 80118b0:	f43f aef3 	beq.w	801169a <ai_platform_outputs_get+0x76>
 80118b4:	e7fe      	b.n	80118b4 <ai_platform_outputs_get+0x290>
 80118b6:	4a0a      	ldr	r2, [pc, #40]	; (80118e0 <ai_platform_outputs_get+0x2bc>)
 80118b8:	2301      	movs	r3, #1
 80118ba:	6093      	str	r3, [r2, #8]
 80118bc:	6893      	ldr	r3, [r2, #8]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d1fc      	bne.n	80118bc <ai_platform_outputs_get+0x298>
 80118c2:	4b08      	ldr	r3, [pc, #32]	; (80118e4 <ai_platform_outputs_get+0x2c0>)
 80118c4:	6013      	str	r3, [r2, #0]
 80118c6:	4b08      	ldr	r3, [pc, #32]	; (80118e8 <ai_platform_outputs_get+0x2c4>)
 80118c8:	6812      	ldr	r2, [r2, #0]
 80118ca:	429a      	cmp	r2, r3
 80118cc:	f43f aee5 	beq.w	801169a <ai_platform_outputs_get+0x76>
 80118d0:	e7fe      	b.n	80118d0 <ai_platform_outputs_get+0x2ac>
 80118d2:	bf00      	nop
 80118d4:	a1c00100 	.word	0xa1c00100
 80118d8:	e0042000 	.word	0xe0042000
 80118dc:	5c001000 	.word	0x5c001000
 80118e0:	40023000 	.word	0x40023000
 80118e4:	f407a5c2 	.word	0xf407a5c2
 80118e8:	b5e8b5cd 	.word	0xb5e8b5cd
 80118ec:	58024000 	.word	0x58024000
 80118f0:	4a0d      	ldr	r2, [pc, #52]	; (8011928 <ai_platform_outputs_get+0x304>)
 80118f2:	2301      	movs	r3, #1
 80118f4:	6093      	str	r3, [r2, #8]
 80118f6:	6893      	ldr	r3, [r2, #8]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d1fc      	bne.n	80118f6 <ai_platform_outputs_get+0x2d2>
 80118fc:	490b      	ldr	r1, [pc, #44]	; (801192c <ai_platform_outputs_get+0x308>)
 80118fe:	4b0c      	ldr	r3, [pc, #48]	; (8011930 <ai_platform_outputs_get+0x30c>)
 8011900:	6011      	str	r1, [r2, #0]
 8011902:	6812      	ldr	r2, [r2, #0]
 8011904:	429a      	cmp	r2, r3
 8011906:	f43f af76 	beq.w	80117f6 <ai_platform_outputs_get+0x1d2>
 801190a:	e7fe      	b.n	801190a <ai_platform_outputs_get+0x2e6>
 801190c:	4a06      	ldr	r2, [pc, #24]	; (8011928 <ai_platform_outputs_get+0x304>)
 801190e:	2301      	movs	r3, #1
 8011910:	6093      	str	r3, [r2, #8]
 8011912:	6893      	ldr	r3, [r2, #8]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d1fc      	bne.n	8011912 <ai_platform_outputs_get+0x2ee>
 8011918:	4b04      	ldr	r3, [pc, #16]	; (801192c <ai_platform_outputs_get+0x308>)
 801191a:	6013      	str	r3, [r2, #0]
 801191c:	4b04      	ldr	r3, [pc, #16]	; (8011930 <ai_platform_outputs_get+0x30c>)
 801191e:	6812      	ldr	r2, [r2, #0]
 8011920:	429a      	cmp	r2, r3
 8011922:	f43f aeba 	beq.w	801169a <ai_platform_outputs_get+0x76>
 8011926:	e7fe      	b.n	8011926 <ai_platform_outputs_get+0x302>
 8011928:	40023000 	.word	0x40023000
 801192c:	f407a5c2 	.word	0xf407a5c2
 8011930:	b5e8b5cd 	.word	0xb5e8b5cd

08011934 <ai_platform_network_create>:
 8011934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011938:	b083      	sub	sp, #12
 801193a:	4604      	mov	r4, r0
 801193c:	4615      	mov	r5, r2
 801193e:	461e      	mov	r6, r3
 8011940:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8011944:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8011948:	f7ff fb00 	bl	8010f4c <_ai_platform_acquire_crc>
 801194c:	2800      	cmp	r0, #0
 801194e:	f000 80bd 	beq.w	8011acc <ai_platform_network_create+0x198>
 8011952:	4ba5      	ldr	r3, [pc, #660]	; (8011be8 <ai_platform_network_create+0x2b4>)
 8011954:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 8011958:	4601      	mov	r1, r0
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011960:	eb03 020c 	add.w	r2, r3, ip
 8011964:	2a01      	cmp	r2, #1
 8011966:	f240 80a8 	bls.w	8011aba <ai_platform_network_create+0x186>
 801196a:	f240 4249 	movw	r2, #1097	; 0x449
 801196e:	4293      	cmp	r3, r2
 8011970:	f000 80a3 	beq.w	8011aba <ai_platform_network_create+0x186>
 8011974:	4a9d      	ldr	r2, [pc, #628]	; (8011bec <ai_platform_network_create+0x2b8>)
 8011976:	6813      	ldr	r3, [r2, #0]
 8011978:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801197c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8011980:	f000 80b9 	beq.w	8011af6 <ai_platform_network_create+0x1c2>
 8011984:	6813      	ldr	r3, [r2, #0]
 8011986:	f240 4c83 	movw	ip, #1155	; 0x483
 801198a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801198e:	4563      	cmp	r3, ip
 8011990:	f000 80a1 	beq.w	8011ad6 <ai_platform_network_create+0x1a2>
 8011994:	6813      	ldr	r3, [r2, #0]
 8011996:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801199a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801199e:	f000 8153 	beq.w	8011c48 <ai_platform_network_create+0x314>
 80119a2:	6813      	ldr	r3, [r2, #0]
 80119a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	f040 808d 	bne.w	8011ac8 <ai_platform_network_create+0x194>
 80119ae:	4a90      	ldr	r2, [pc, #576]	; (8011bf0 <ai_platform_network_create+0x2bc>)
 80119b0:	2318      	movs	r3, #24
 80119b2:	6093      	str	r3, [r2, #8]
 80119b4:	6893      	ldr	r3, [r2, #8]
 80119b6:	2b18      	cmp	r3, #24
 80119b8:	f040 8086 	bne.w	8011ac8 <ai_platform_network_create+0x194>
 80119bc:	2301      	movs	r3, #1
 80119be:	6093      	str	r3, [r2, #8]
 80119c0:	6893      	ldr	r3, [r2, #8]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d1fc      	bne.n	80119c0 <ai_platform_network_create+0x8c>
 80119c6:	4608      	mov	r0, r1
 80119c8:	f7ff fac2 	bl	8010f50 <_ai_platform_release_crc>
 80119cc:	f7ff fabe 	bl	8010f4c <_ai_platform_acquire_crc>
 80119d0:	4b85      	ldr	r3, [pc, #532]	; (8011be8 <ai_platform_network_create+0x2b4>)
 80119d2:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80119dc:	189a      	adds	r2, r3, r2
 80119de:	2a01      	cmp	r2, #1
 80119e0:	f240 809f 	bls.w	8011b22 <ai_platform_network_create+0x1ee>
 80119e4:	f240 4249 	movw	r2, #1097	; 0x449
 80119e8:	4293      	cmp	r3, r2
 80119ea:	f000 809a 	beq.w	8011b22 <ai_platform_network_create+0x1ee>
 80119ee:	4a7f      	ldr	r2, [pc, #508]	; (8011bec <ai_platform_network_create+0x2b8>)
 80119f0:	6813      	ldr	r3, [r2, #0]
 80119f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80119f6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80119fa:	f000 80a0 	beq.w	8011b3e <ai_platform_network_create+0x20a>
 80119fe:	6813      	ldr	r3, [r2, #0]
 8011a00:	f240 4183 	movw	r1, #1155	; 0x483
 8011a04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011a08:	428b      	cmp	r3, r1
 8011a0a:	f000 80bf 	beq.w	8011b8c <ai_platform_network_create+0x258>
 8011a0e:	6813      	ldr	r3, [r2, #0]
 8011a10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011a14:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8011a18:	f000 8123 	beq.w	8011c62 <ai_platform_network_create+0x32e>
 8011a1c:	6813      	ldr	r3, [r2, #0]
 8011a1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	f000 80c4 	beq.w	8011bb0 <ai_platform_network_create+0x27c>
 8011a28:	f7ff fa92 	bl	8010f50 <_ai_platform_release_crc>
 8011a2c:	2c00      	cmp	r4, #0
 8011a2e:	f000 80aa 	beq.w	8011b86 <ai_platform_network_create+0x252>
 8011a32:	4b70      	ldr	r3, [pc, #448]	; (8011bf4 <ai_platform_network_create+0x2c0>)
 8011a34:	602b      	str	r3, [r5, #0]
 8011a36:	6025      	str	r5, [r4, #0]
 8011a38:	f001 f84a 	bl	8012ad0 <core_init>
 8011a3c:	2800      	cmp	r0, #0
 8011a3e:	f000 8090 	beq.w	8011b62 <ai_platform_network_create+0x22e>
 8011a42:	f7ff fa83 	bl	8010f4c <_ai_platform_acquire_crc>
 8011a46:	4b68      	ldr	r3, [pc, #416]	; (8011be8 <ai_platform_network_create+0x2b4>)
 8011a48:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011a52:	185a      	adds	r2, r3, r1
 8011a54:	2a01      	cmp	r2, #1
 8011a56:	f240 80b9 	bls.w	8011bcc <ai_platform_network_create+0x298>
 8011a5a:	f240 4249 	movw	r2, #1097	; 0x449
 8011a5e:	4293      	cmp	r3, r2
 8011a60:	f000 80b4 	beq.w	8011bcc <ai_platform_network_create+0x298>
 8011a64:	4a61      	ldr	r2, [pc, #388]	; (8011bec <ai_platform_network_create+0x2b8>)
 8011a66:	6813      	ldr	r3, [r2, #0]
 8011a68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011a6c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8011a70:	f000 80c8 	beq.w	8011c04 <ai_platform_network_create+0x2d0>
 8011a74:	6813      	ldr	r3, [r2, #0]
 8011a76:	f240 4183 	movw	r1, #1155	; 0x483
 8011a7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011a7e:	428b      	cmp	r3, r1
 8011a80:	f000 8107 	beq.w	8011c92 <ai_platform_network_create+0x35e>
 8011a84:	6813      	ldr	r3, [r2, #0]
 8011a86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011a8a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8011a8e:	f000 8111 	beq.w	8011cb4 <ai_platform_network_create+0x380>
 8011a92:	6813      	ldr	r3, [r2, #0]
 8011a94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	f040 80c3 	bne.w	8011c24 <ai_platform_network_create+0x2f0>
 8011a9e:	4b54      	ldr	r3, [pc, #336]	; (8011bf0 <ai_platform_network_create+0x2bc>)
 8011aa0:	2201      	movs	r2, #1
 8011aa2:	609a      	str	r2, [r3, #8]
 8011aa4:	689a      	ldr	r2, [r3, #8]
 8011aa6:	2a00      	cmp	r2, #0
 8011aa8:	d1fc      	bne.n	8011aa4 <ai_platform_network_create+0x170>
 8011aaa:	4a53      	ldr	r2, [pc, #332]	; (8011bf8 <ai_platform_network_create+0x2c4>)
 8011aac:	601a      	str	r2, [r3, #0]
 8011aae:	681a      	ldr	r2, [r3, #0]
 8011ab0:	4b52      	ldr	r3, [pc, #328]	; (8011bfc <ai_platform_network_create+0x2c8>)
 8011ab2:	429a      	cmp	r2, r3
 8011ab4:	f000 80b6 	beq.w	8011c24 <ai_platform_network_create+0x2f0>
 8011ab8:	e7fe      	b.n	8011ab8 <ai_platform_network_create+0x184>
 8011aba:	4b4d      	ldr	r3, [pc, #308]	; (8011bf0 <ai_platform_network_create+0x2bc>)
 8011abc:	2218      	movs	r2, #24
 8011abe:	609a      	str	r2, [r3, #8]
 8011ac0:	689a      	ldr	r2, [r3, #8]
 8011ac2:	2a18      	cmp	r2, #24
 8011ac4:	d027      	beq.n	8011b16 <ai_platform_network_create+0x1e2>
 8011ac6:	4608      	mov	r0, r1
 8011ac8:	f7ff fa42 	bl	8010f50 <_ai_platform_release_crc>
 8011acc:	f244 1033 	movw	r0, #16691	; 0x4133
 8011ad0:	b003      	add	sp, #12
 8011ad2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ad6:	4a4a      	ldr	r2, [pc, #296]	; (8011c00 <ai_platform_network_create+0x2cc>)
 8011ad8:	2318      	movs	r3, #24
 8011ada:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011ade:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8011ae2:	2b18      	cmp	r3, #24
 8011ae4:	d1f0      	bne.n	8011ac8 <ai_platform_network_create+0x194>
 8011ae6:	2301      	movs	r3, #1
 8011ae8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011aec:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d1fb      	bne.n	8011aec <ai_platform_network_create+0x1b8>
 8011af4:	e767      	b.n	80119c6 <ai_platform_network_create+0x92>
 8011af6:	4a42      	ldr	r2, [pc, #264]	; (8011c00 <ai_platform_network_create+0x2cc>)
 8011af8:	2318      	movs	r3, #24
 8011afa:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011afe:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8011b02:	2b18      	cmp	r3, #24
 8011b04:	d1e0      	bne.n	8011ac8 <ai_platform_network_create+0x194>
 8011b06:	2301      	movs	r3, #1
 8011b08:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011b0c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d1fb      	bne.n	8011b0c <ai_platform_network_create+0x1d8>
 8011b14:	e757      	b.n	80119c6 <ai_platform_network_create+0x92>
 8011b16:	2201      	movs	r2, #1
 8011b18:	609a      	str	r2, [r3, #8]
 8011b1a:	689a      	ldr	r2, [r3, #8]
 8011b1c:	2a00      	cmp	r2, #0
 8011b1e:	d1fc      	bne.n	8011b1a <ai_platform_network_create+0x1e6>
 8011b20:	e751      	b.n	80119c6 <ai_platform_network_create+0x92>
 8011b22:	4a33      	ldr	r2, [pc, #204]	; (8011bf0 <ai_platform_network_create+0x2bc>)
 8011b24:	2301      	movs	r3, #1
 8011b26:	6093      	str	r3, [r2, #8]
 8011b28:	6891      	ldr	r1, [r2, #8]
 8011b2a:	2900      	cmp	r1, #0
 8011b2c:	d1fc      	bne.n	8011b28 <ai_platform_network_create+0x1f4>
 8011b2e:	4b32      	ldr	r3, [pc, #200]	; (8011bf8 <ai_platform_network_create+0x2c4>)
 8011b30:	6013      	str	r3, [r2, #0]
 8011b32:	4b32      	ldr	r3, [pc, #200]	; (8011bfc <ai_platform_network_create+0x2c8>)
 8011b34:	6812      	ldr	r2, [r2, #0]
 8011b36:	429a      	cmp	r2, r3
 8011b38:	f43f af76 	beq.w	8011a28 <ai_platform_network_create+0xf4>
 8011b3c:	e7fe      	b.n	8011b3c <ai_platform_network_create+0x208>
 8011b3e:	4a30      	ldr	r2, [pc, #192]	; (8011c00 <ai_platform_network_create+0x2cc>)
 8011b40:	2301      	movs	r3, #1
 8011b42:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011b46:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d1fb      	bne.n	8011b46 <ai_platform_network_create+0x212>
 8011b4e:	4b2a      	ldr	r3, [pc, #168]	; (8011bf8 <ai_platform_network_create+0x2c4>)
 8011b50:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8011b54:	4b29      	ldr	r3, [pc, #164]	; (8011bfc <ai_platform_network_create+0x2c8>)
 8011b56:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8011b5a:	429a      	cmp	r2, r3
 8011b5c:	f43f af64 	beq.w	8011a28 <ai_platform_network_create+0xf4>
 8011b60:	e7fe      	b.n	8011b60 <ai_platform_network_create+0x22c>
 8011b62:	f04f 0930 	mov.w	r9, #48	; 0x30
 8011b66:	2300      	movs	r3, #0
 8011b68:	6023      	str	r3, [r4, #0]
 8011b6a:	2410      	movs	r4, #16
 8011b6c:	4642      	mov	r2, r8
 8011b6e:	4639      	mov	r1, r7
 8011b70:	4630      	mov	r0, r6
 8011b72:	f005 fe61 	bl	8017838 <ai_version_get>
 8011b76:	4603      	mov	r3, r0
 8011b78:	2000      	movs	r0, #0
 8011b7a:	64ab      	str	r3, [r5, #72]	; 0x48
 8011b7c:	f369 0007 	bfi	r0, r9, #0, #8
 8011b80:	f364 201f 	bfi	r0, r4, #8, #24
 8011b84:	e7a4      	b.n	8011ad0 <ai_platform_network_create+0x19c>
 8011b86:	f241 0010 	movw	r0, #4112	; 0x1010
 8011b8a:	e7a1      	b.n	8011ad0 <ai_platform_network_create+0x19c>
 8011b8c:	4a1c      	ldr	r2, [pc, #112]	; (8011c00 <ai_platform_network_create+0x2cc>)
 8011b8e:	2301      	movs	r3, #1
 8011b90:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011b94:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d1fb      	bne.n	8011b94 <ai_platform_network_create+0x260>
 8011b9c:	4b16      	ldr	r3, [pc, #88]	; (8011bf8 <ai_platform_network_create+0x2c4>)
 8011b9e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8011ba2:	4b16      	ldr	r3, [pc, #88]	; (8011bfc <ai_platform_network_create+0x2c8>)
 8011ba4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8011ba8:	429a      	cmp	r2, r3
 8011baa:	f43f af3d 	beq.w	8011a28 <ai_platform_network_create+0xf4>
 8011bae:	e7fe      	b.n	8011bae <ai_platform_network_create+0x27a>
 8011bb0:	4a0f      	ldr	r2, [pc, #60]	; (8011bf0 <ai_platform_network_create+0x2bc>)
 8011bb2:	2301      	movs	r3, #1
 8011bb4:	6093      	str	r3, [r2, #8]
 8011bb6:	6893      	ldr	r3, [r2, #8]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d1fc      	bne.n	8011bb6 <ai_platform_network_create+0x282>
 8011bbc:	4b0e      	ldr	r3, [pc, #56]	; (8011bf8 <ai_platform_network_create+0x2c4>)
 8011bbe:	6013      	str	r3, [r2, #0]
 8011bc0:	4b0e      	ldr	r3, [pc, #56]	; (8011bfc <ai_platform_network_create+0x2c8>)
 8011bc2:	6812      	ldr	r2, [r2, #0]
 8011bc4:	429a      	cmp	r2, r3
 8011bc6:	f43f af2f 	beq.w	8011a28 <ai_platform_network_create+0xf4>
 8011bca:	e7fe      	b.n	8011bca <ai_platform_network_create+0x296>
 8011bcc:	4a08      	ldr	r2, [pc, #32]	; (8011bf0 <ai_platform_network_create+0x2bc>)
 8011bce:	2301      	movs	r3, #1
 8011bd0:	6093      	str	r3, [r2, #8]
 8011bd2:	6893      	ldr	r3, [r2, #8]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d1fc      	bne.n	8011bd2 <ai_platform_network_create+0x29e>
 8011bd8:	4b07      	ldr	r3, [pc, #28]	; (8011bf8 <ai_platform_network_create+0x2c4>)
 8011bda:	6013      	str	r3, [r2, #0]
 8011bdc:	4b07      	ldr	r3, [pc, #28]	; (8011bfc <ai_platform_network_create+0x2c8>)
 8011bde:	6812      	ldr	r2, [r2, #0]
 8011be0:	429a      	cmp	r2, r3
 8011be2:	d01f      	beq.n	8011c24 <ai_platform_network_create+0x2f0>
 8011be4:	e7fe      	b.n	8011be4 <ai_platform_network_create+0x2b0>
 8011be6:	bf00      	nop
 8011be8:	e0042000 	.word	0xe0042000
 8011bec:	5c001000 	.word	0x5c001000
 8011bf0:	40023000 	.word	0x40023000
 8011bf4:	a1c00100 	.word	0xa1c00100
 8011bf8:	f407a5c2 	.word	0xf407a5c2
 8011bfc:	b5e8b5cd 	.word	0xb5e8b5cd
 8011c00:	58024000 	.word	0x58024000
 8011c04:	4a33      	ldr	r2, [pc, #204]	; (8011cd4 <ai_platform_network_create+0x3a0>)
 8011c06:	2301      	movs	r3, #1
 8011c08:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011c0c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d1fb      	bne.n	8011c0c <ai_platform_network_create+0x2d8>
 8011c14:	4b30      	ldr	r3, [pc, #192]	; (8011cd8 <ai_platform_network_create+0x3a4>)
 8011c16:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8011c1a:	4b30      	ldr	r3, [pc, #192]	; (8011cdc <ai_platform_network_create+0x3a8>)
 8011c1c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8011c20:	429a      	cmp	r2, r3
 8011c22:	d12c      	bne.n	8011c7e <ai_platform_network_create+0x34a>
 8011c24:	f7ff f994 	bl	8010f50 <_ai_platform_release_crc>
 8011c28:	2200      	movs	r2, #0
 8011c2a:	4639      	mov	r1, r7
 8011c2c:	4630      	mov	r0, r6
 8011c2e:	f005 fe03 	bl	8017838 <ai_version_get>
 8011c32:	4681      	mov	r9, r0
 8011c34:	2200      	movs	r2, #0
 8011c36:	2105      	movs	r1, #5
 8011c38:	2001      	movs	r0, #1
 8011c3a:	f005 fdfd 	bl	8017838 <ai_version_get>
 8011c3e:	4581      	cmp	r9, r0
 8011c40:	d01e      	beq.n	8011c80 <ai_platform_network_create+0x34c>
 8011c42:	f04f 0901 	mov.w	r9, #1
 8011c46:	e78e      	b.n	8011b66 <ai_platform_network_create+0x232>
 8011c48:	4b25      	ldr	r3, [pc, #148]	; (8011ce0 <ai_platform_network_create+0x3ac>)
 8011c4a:	2218      	movs	r2, #24
 8011c4c:	609a      	str	r2, [r3, #8]
 8011c4e:	689a      	ldr	r2, [r3, #8]
 8011c50:	2a18      	cmp	r2, #24
 8011c52:	f47f af39 	bne.w	8011ac8 <ai_platform_network_create+0x194>
 8011c56:	2201      	movs	r2, #1
 8011c58:	609a      	str	r2, [r3, #8]
 8011c5a:	689a      	ldr	r2, [r3, #8]
 8011c5c:	2a00      	cmp	r2, #0
 8011c5e:	d1fc      	bne.n	8011c5a <ai_platform_network_create+0x326>
 8011c60:	e6b1      	b.n	80119c6 <ai_platform_network_create+0x92>
 8011c62:	4a1f      	ldr	r2, [pc, #124]	; (8011ce0 <ai_platform_network_create+0x3ac>)
 8011c64:	2301      	movs	r3, #1
 8011c66:	6093      	str	r3, [r2, #8]
 8011c68:	6893      	ldr	r3, [r2, #8]
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d1fc      	bne.n	8011c68 <ai_platform_network_create+0x334>
 8011c6e:	4b1a      	ldr	r3, [pc, #104]	; (8011cd8 <ai_platform_network_create+0x3a4>)
 8011c70:	6013      	str	r3, [r2, #0]
 8011c72:	4b1a      	ldr	r3, [pc, #104]	; (8011cdc <ai_platform_network_create+0x3a8>)
 8011c74:	6812      	ldr	r2, [r2, #0]
 8011c76:	429a      	cmp	r2, r3
 8011c78:	f43f aed6 	beq.w	8011a28 <ai_platform_network_create+0xf4>
 8011c7c:	e7fe      	b.n	8011c7c <ai_platform_network_create+0x348>
 8011c7e:	e7fe      	b.n	8011c7e <ai_platform_network_create+0x34a>
 8011c80:	4b18      	ldr	r3, [pc, #96]	; (8011ce4 <ai_platform_network_create+0x3b0>)
 8011c82:	a801      	add	r0, sp, #4
 8011c84:	9301      	str	r3, [sp, #4]
 8011c86:	f001 fde7 	bl	8013858 <ai_check_custom_types>
 8011c8a:	b300      	cbz	r0, 8011cce <ai_platform_network_create+0x39a>
 8011c8c:	2400      	movs	r4, #0
 8011c8e:	46a1      	mov	r9, r4
 8011c90:	e76c      	b.n	8011b6c <ai_platform_network_create+0x238>
 8011c92:	4b10      	ldr	r3, [pc, #64]	; (8011cd4 <ai_platform_network_create+0x3a0>)
 8011c94:	2201      	movs	r2, #1
 8011c96:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8011c9a:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8011c9e:	2a00      	cmp	r2, #0
 8011ca0:	d1fb      	bne.n	8011c9a <ai_platform_network_create+0x366>
 8011ca2:	4a0d      	ldr	r2, [pc, #52]	; (8011cd8 <ai_platform_network_create+0x3a4>)
 8011ca4:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8011ca8:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8011cac:	4b0b      	ldr	r3, [pc, #44]	; (8011cdc <ai_platform_network_create+0x3a8>)
 8011cae:	429a      	cmp	r2, r3
 8011cb0:	d0b8      	beq.n	8011c24 <ai_platform_network_create+0x2f0>
 8011cb2:	e7fe      	b.n	8011cb2 <ai_platform_network_create+0x37e>
 8011cb4:	4b0a      	ldr	r3, [pc, #40]	; (8011ce0 <ai_platform_network_create+0x3ac>)
 8011cb6:	2201      	movs	r2, #1
 8011cb8:	609a      	str	r2, [r3, #8]
 8011cba:	689a      	ldr	r2, [r3, #8]
 8011cbc:	2a00      	cmp	r2, #0
 8011cbe:	d1fc      	bne.n	8011cba <ai_platform_network_create+0x386>
 8011cc0:	4a05      	ldr	r2, [pc, #20]	; (8011cd8 <ai_platform_network_create+0x3a4>)
 8011cc2:	601a      	str	r2, [r3, #0]
 8011cc4:	681a      	ldr	r2, [r3, #0]
 8011cc6:	4b05      	ldr	r3, [pc, #20]	; (8011cdc <ai_platform_network_create+0x3a8>)
 8011cc8:	429a      	cmp	r2, r3
 8011cca:	d0ab      	beq.n	8011c24 <ai_platform_network_create+0x2f0>
 8011ccc:	e7fe      	b.n	8011ccc <ai_platform_network_create+0x398>
 8011cce:	f04f 0902 	mov.w	r9, #2
 8011cd2:	e748      	b.n	8011b66 <ai_platform_network_create+0x232>
 8011cd4:	58024000 	.word	0x58024000
 8011cd8:	f407a5c2 	.word	0xf407a5c2
 8011cdc:	b5e8b5cd 	.word	0xb5e8b5cd
 8011ce0:	40023000 	.word	0x40023000
 8011ce4:	84048403 	.word	0x84048403

08011ce8 <ai_platform_network_init>:
 8011ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011cec:	2800      	cmp	r0, #0
 8011cee:	d052      	beq.n	8011d96 <ai_platform_network_init+0xae>
 8011cf0:	4bab      	ldr	r3, [pc, #684]	; (8011fa0 <ai_platform_network_init+0x2b8>)
 8011cf2:	4604      	mov	r4, r0
 8011cf4:	6802      	ldr	r2, [r0, #0]
 8011cf6:	429a      	cmp	r2, r3
 8011cf8:	d14d      	bne.n	8011d96 <ai_platform_network_init+0xae>
 8011cfa:	460d      	mov	r5, r1
 8011cfc:	f7ff f926 	bl	8010f4c <_ai_platform_acquire_crc>
 8011d00:	4ba8      	ldr	r3, [pc, #672]	; (8011fa4 <ai_platform_network_init+0x2bc>)
 8011d02:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011d0c:	189a      	adds	r2, r3, r2
 8011d0e:	2a01      	cmp	r2, #1
 8011d10:	f240 809b 	bls.w	8011e4a <ai_platform_network_init+0x162>
 8011d14:	f240 4249 	movw	r2, #1097	; 0x449
 8011d18:	4293      	cmp	r3, r2
 8011d1a:	f000 8096 	beq.w	8011e4a <ai_platform_network_init+0x162>
 8011d1e:	4aa2      	ldr	r2, [pc, #648]	; (8011fa8 <ai_platform_network_init+0x2c0>)
 8011d20:	6813      	ldr	r3, [r2, #0]
 8011d22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011d26:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8011d2a:	f000 809d 	beq.w	8011e68 <ai_platform_network_init+0x180>
 8011d2e:	6813      	ldr	r3, [r2, #0]
 8011d30:	f240 4183 	movw	r1, #1155	; 0x483
 8011d34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011d38:	428b      	cmp	r3, r1
 8011d3a:	f000 80e4 	beq.w	8011f06 <ai_platform_network_init+0x21e>
 8011d3e:	6813      	ldr	r3, [r2, #0]
 8011d40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011d44:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8011d48:	f000 811b 	beq.w	8011f82 <ai_platform_network_init+0x29a>
 8011d4c:	6813      	ldr	r3, [r2, #0]
 8011d4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	f000 80f9 	beq.w	8011f4a <ai_platform_network_init+0x262>
 8011d58:	f7ff f8fa 	bl	8010f50 <_ai_platform_release_crc>
 8011d5c:	2d00      	cmp	r5, #0
 8011d5e:	f000 8147 	beq.w	8011ff0 <ai_platform_network_init+0x308>
 8011d62:	4b92      	ldr	r3, [pc, #584]	; (8011fac <ai_platform_network_init+0x2c4>)
 8011d64:	682a      	ldr	r2, [r5, #0]
 8011d66:	429a      	cmp	r2, r3
 8011d68:	f040 8090 	bne.w	8011e8c <ai_platform_network_init+0x1a4>
 8011d6c:	692b      	ldr	r3, [r5, #16]
 8011d6e:	89ae      	ldrh	r6, [r5, #12]
 8011d70:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 8011d74:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 8011d78:	62a3      	str	r3, [r4, #40]	; 0x28
 8011d7a:	e9c4 1207 	strd	r1, r2, [r4, #28]
 8011d7e:	2303      	movs	r3, #3
 8011d80:	84a6      	strh	r6, [r4, #36]	; 0x24
 8011d82:	4626      	mov	r6, r4
 8011d84:	4620      	mov	r0, r4
 8011d86:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 8011d8a:	60e3      	str	r3, [r4, #12]
 8011d8c:	f001 fd8c 	bl	80138a8 <ai_layers_init_all>
 8011d90:	4630      	mov	r0, r6
 8011d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d96:	f7ff f8d9 	bl	8010f4c <_ai_platform_acquire_crc>
 8011d9a:	4b82      	ldr	r3, [pc, #520]	; (8011fa4 <ai_platform_network_init+0x2bc>)
 8011d9c:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011da6:	185a      	adds	r2, r3, r1
 8011da8:	2a01      	cmp	r2, #1
 8011daa:	d92b      	bls.n	8011e04 <ai_platform_network_init+0x11c>
 8011dac:	f240 4249 	movw	r2, #1097	; 0x449
 8011db0:	4293      	cmp	r3, r2
 8011db2:	d027      	beq.n	8011e04 <ai_platform_network_init+0x11c>
 8011db4:	4a7c      	ldr	r2, [pc, #496]	; (8011fa8 <ai_platform_network_init+0x2c0>)
 8011db6:	6813      	ldr	r3, [r2, #0]
 8011db8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011dbc:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8011dc0:	d02d      	beq.n	8011e1e <ai_platform_network_init+0x136>
 8011dc2:	6813      	ldr	r3, [r2, #0]
 8011dc4:	f240 4183 	movw	r1, #1155	; 0x483
 8011dc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011dcc:	428b      	cmp	r3, r1
 8011dce:	f000 8089 	beq.w	8011ee4 <ai_platform_network_init+0x1fc>
 8011dd2:	6813      	ldr	r3, [r2, #0]
 8011dd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011dd8:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8011ddc:	f000 80c3 	beq.w	8011f66 <ai_platform_network_init+0x27e>
 8011de0:	6813      	ldr	r3, [r2, #0]
 8011de2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d129      	bne.n	8011e3e <ai_platform_network_init+0x156>
 8011dea:	4a71      	ldr	r2, [pc, #452]	; (8011fb0 <ai_platform_network_init+0x2c8>)
 8011dec:	2301      	movs	r3, #1
 8011dee:	6093      	str	r3, [r2, #8]
 8011df0:	6893      	ldr	r3, [r2, #8]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d1fc      	bne.n	8011df0 <ai_platform_network_init+0x108>
 8011df6:	496f      	ldr	r1, [pc, #444]	; (8011fb4 <ai_platform_network_init+0x2cc>)
 8011df8:	4b6f      	ldr	r3, [pc, #444]	; (8011fb8 <ai_platform_network_init+0x2d0>)
 8011dfa:	6011      	str	r1, [r2, #0]
 8011dfc:	6812      	ldr	r2, [r2, #0]
 8011dfe:	429a      	cmp	r2, r3
 8011e00:	d01d      	beq.n	8011e3e <ai_platform_network_init+0x156>
 8011e02:	e7fe      	b.n	8011e02 <ai_platform_network_init+0x11a>
 8011e04:	4a6a      	ldr	r2, [pc, #424]	; (8011fb0 <ai_platform_network_init+0x2c8>)
 8011e06:	2301      	movs	r3, #1
 8011e08:	6093      	str	r3, [r2, #8]
 8011e0a:	6893      	ldr	r3, [r2, #8]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d1fc      	bne.n	8011e0a <ai_platform_network_init+0x122>
 8011e10:	4968      	ldr	r1, [pc, #416]	; (8011fb4 <ai_platform_network_init+0x2cc>)
 8011e12:	4b69      	ldr	r3, [pc, #420]	; (8011fb8 <ai_platform_network_init+0x2d0>)
 8011e14:	6011      	str	r1, [r2, #0]
 8011e16:	6812      	ldr	r2, [r2, #0]
 8011e18:	429a      	cmp	r2, r3
 8011e1a:	d010      	beq.n	8011e3e <ai_platform_network_init+0x156>
 8011e1c:	e7fe      	b.n	8011e1c <ai_platform_network_init+0x134>
 8011e1e:	4a67      	ldr	r2, [pc, #412]	; (8011fbc <ai_platform_network_init+0x2d4>)
 8011e20:	2301      	movs	r3, #1
 8011e22:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011e26:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d1fb      	bne.n	8011e26 <ai_platform_network_init+0x13e>
 8011e2e:	4961      	ldr	r1, [pc, #388]	; (8011fb4 <ai_platform_network_init+0x2cc>)
 8011e30:	4b61      	ldr	r3, [pc, #388]	; (8011fb8 <ai_platform_network_init+0x2d0>)
 8011e32:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8011e36:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8011e3a:	429a      	cmp	r2, r3
 8011e3c:	d113      	bne.n	8011e66 <ai_platform_network_init+0x17e>
 8011e3e:	2600      	movs	r6, #0
 8011e40:	f7ff f886 	bl	8010f50 <_ai_platform_release_crc>
 8011e44:	4630      	mov	r0, r6
 8011e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e4a:	4a59      	ldr	r2, [pc, #356]	; (8011fb0 <ai_platform_network_init+0x2c8>)
 8011e4c:	2301      	movs	r3, #1
 8011e4e:	6093      	str	r3, [r2, #8]
 8011e50:	6893      	ldr	r3, [r2, #8]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d1fc      	bne.n	8011e50 <ai_platform_network_init+0x168>
 8011e56:	4b57      	ldr	r3, [pc, #348]	; (8011fb4 <ai_platform_network_init+0x2cc>)
 8011e58:	6013      	str	r3, [r2, #0]
 8011e5a:	4b57      	ldr	r3, [pc, #348]	; (8011fb8 <ai_platform_network_init+0x2d0>)
 8011e5c:	6812      	ldr	r2, [r2, #0]
 8011e5e:	429a      	cmp	r2, r3
 8011e60:	f43f af7a 	beq.w	8011d58 <ai_platform_network_init+0x70>
 8011e64:	e7fe      	b.n	8011e64 <ai_platform_network_init+0x17c>
 8011e66:	e7fe      	b.n	8011e66 <ai_platform_network_init+0x17e>
 8011e68:	4a54      	ldr	r2, [pc, #336]	; (8011fbc <ai_platform_network_init+0x2d4>)
 8011e6a:	2301      	movs	r3, #1
 8011e6c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011e70:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d1fb      	bne.n	8011e70 <ai_platform_network_init+0x188>
 8011e78:	4b4e      	ldr	r3, [pc, #312]	; (8011fb4 <ai_platform_network_init+0x2cc>)
 8011e7a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8011e7e:	4b4e      	ldr	r3, [pc, #312]	; (8011fb8 <ai_platform_network_init+0x2d0>)
 8011e80:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8011e84:	429a      	cmp	r2, r3
 8011e86:	f43f af67 	beq.w	8011d58 <ai_platform_network_init+0x70>
 8011e8a:	e7fe      	b.n	8011e8a <ai_platform_network_init+0x1a2>
 8011e8c:	2101      	movs	r1, #1
 8011e8e:	4628      	mov	r0, r5
 8011e90:	f105 081c 	add.w	r8, r5, #28
 8011e94:	686e      	ldr	r6, [r5, #4]
 8011e96:	f7ff f80b 	bl	8010eb0 <ai_buffer_get_size>
 8011e9a:	4607      	mov	r7, r0
 8011e9c:	2101      	movs	r1, #1
 8011e9e:	4640      	mov	r0, r8
 8011ea0:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8011ea4:	f7ff f804 	bl	8010eb0 <ai_buffer_get_size>
 8011ea8:	2f00      	cmp	r7, #0
 8011eaa:	d13e      	bne.n	8011f2a <ai_platform_network_init+0x242>
 8011eac:	2800      	cmp	r0, #0
 8011eae:	f000 808e 	beq.w	8011fce <ai_platform_network_init+0x2e6>
 8011eb2:	f1b9 0f00 	cmp.w	r9, #0
 8011eb6:	f000 8094 	beq.w	8011fe2 <ai_platform_network_init+0x2fa>
 8011eba:	f04f 0c01 	mov.w	ip, #1
 8011ebe:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8011ec0:	2600      	movs	r6, #0
 8011ec2:	83e7      	strh	r7, [r4, #30]
 8011ec4:	4563      	cmp	r3, ip
 8011ec6:	83a6      	strh	r6, [r4, #28]
 8011ec8:	d37a      	bcc.n	8011fc0 <ai_platform_network_init+0x2d8>
 8011eca:	f1bc 0f00 	cmp.w	ip, #0
 8011ece:	f000 809c 	beq.w	801200a <ai_platform_network_init+0x322>
 8011ed2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8011ed4:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8011ed8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011eda:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8011ede:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8011ee2:	e74c      	b.n	8011d7e <ai_platform_network_init+0x96>
 8011ee4:	4a35      	ldr	r2, [pc, #212]	; (8011fbc <ai_platform_network_init+0x2d4>)
 8011ee6:	2301      	movs	r3, #1
 8011ee8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011eec:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d1fb      	bne.n	8011eec <ai_platform_network_init+0x204>
 8011ef4:	492f      	ldr	r1, [pc, #188]	; (8011fb4 <ai_platform_network_init+0x2cc>)
 8011ef6:	4b30      	ldr	r3, [pc, #192]	; (8011fb8 <ai_platform_network_init+0x2d0>)
 8011ef8:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8011efc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8011f00:	429a      	cmp	r2, r3
 8011f02:	d09c      	beq.n	8011e3e <ai_platform_network_init+0x156>
 8011f04:	e7fe      	b.n	8011f04 <ai_platform_network_init+0x21c>
 8011f06:	4a2d      	ldr	r2, [pc, #180]	; (8011fbc <ai_platform_network_init+0x2d4>)
 8011f08:	2301      	movs	r3, #1
 8011f0a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011f0e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d1fb      	bne.n	8011f0e <ai_platform_network_init+0x226>
 8011f16:	4b27      	ldr	r3, [pc, #156]	; (8011fb4 <ai_platform_network_init+0x2cc>)
 8011f18:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8011f1c:	4b26      	ldr	r3, [pc, #152]	; (8011fb8 <ai_platform_network_init+0x2d0>)
 8011f1e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8011f22:	429a      	cmp	r2, r3
 8011f24:	f43f af18 	beq.w	8011d58 <ai_platform_network_init+0x70>
 8011f28:	e7fe      	b.n	8011f28 <ai_platform_network_init+0x240>
 8011f2a:	2800      	cmp	r0, #0
 8011f2c:	d153      	bne.n	8011fd6 <ai_platform_network_init+0x2ee>
 8011f2e:	4680      	mov	r8, r0
 8011f30:	4684      	mov	ip, r0
 8011f32:	2e00      	cmp	r6, #0
 8011f34:	d063      	beq.n	8011ffe <ai_platform_network_init+0x316>
 8011f36:	8be6      	ldrh	r6, [r4, #30]
 8011f38:	2e00      	cmp	r6, #0
 8011f3a:	d168      	bne.n	801200e <ai_platform_network_init+0x326>
 8011f3c:	2212      	movs	r2, #18
 8011f3e:	2116      	movs	r1, #22
 8011f40:	f104 0010 	add.w	r0, r4, #16
 8011f44:	f000 fdcc 	bl	8012ae0 <core_set_error>
 8011f48:	e77c      	b.n	8011e44 <ai_platform_network_init+0x15c>
 8011f4a:	4a19      	ldr	r2, [pc, #100]	; (8011fb0 <ai_platform_network_init+0x2c8>)
 8011f4c:	2301      	movs	r3, #1
 8011f4e:	6093      	str	r3, [r2, #8]
 8011f50:	6893      	ldr	r3, [r2, #8]
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d1fc      	bne.n	8011f50 <ai_platform_network_init+0x268>
 8011f56:	4b17      	ldr	r3, [pc, #92]	; (8011fb4 <ai_platform_network_init+0x2cc>)
 8011f58:	6013      	str	r3, [r2, #0]
 8011f5a:	4b17      	ldr	r3, [pc, #92]	; (8011fb8 <ai_platform_network_init+0x2d0>)
 8011f5c:	6812      	ldr	r2, [r2, #0]
 8011f5e:	429a      	cmp	r2, r3
 8011f60:	f43f aefa 	beq.w	8011d58 <ai_platform_network_init+0x70>
 8011f64:	e7fe      	b.n	8011f64 <ai_platform_network_init+0x27c>
 8011f66:	4a12      	ldr	r2, [pc, #72]	; (8011fb0 <ai_platform_network_init+0x2c8>)
 8011f68:	2301      	movs	r3, #1
 8011f6a:	6093      	str	r3, [r2, #8]
 8011f6c:	6893      	ldr	r3, [r2, #8]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d1fc      	bne.n	8011f6c <ai_platform_network_init+0x284>
 8011f72:	4910      	ldr	r1, [pc, #64]	; (8011fb4 <ai_platform_network_init+0x2cc>)
 8011f74:	4b10      	ldr	r3, [pc, #64]	; (8011fb8 <ai_platform_network_init+0x2d0>)
 8011f76:	6011      	str	r1, [r2, #0]
 8011f78:	6812      	ldr	r2, [r2, #0]
 8011f7a:	429a      	cmp	r2, r3
 8011f7c:	f43f af5f 	beq.w	8011e3e <ai_platform_network_init+0x156>
 8011f80:	e7fe      	b.n	8011f80 <ai_platform_network_init+0x298>
 8011f82:	4a0b      	ldr	r2, [pc, #44]	; (8011fb0 <ai_platform_network_init+0x2c8>)
 8011f84:	2301      	movs	r3, #1
 8011f86:	6093      	str	r3, [r2, #8]
 8011f88:	6893      	ldr	r3, [r2, #8]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d1fc      	bne.n	8011f88 <ai_platform_network_init+0x2a0>
 8011f8e:	4b09      	ldr	r3, [pc, #36]	; (8011fb4 <ai_platform_network_init+0x2cc>)
 8011f90:	6013      	str	r3, [r2, #0]
 8011f92:	4b09      	ldr	r3, [pc, #36]	; (8011fb8 <ai_platform_network_init+0x2d0>)
 8011f94:	6812      	ldr	r2, [r2, #0]
 8011f96:	429a      	cmp	r2, r3
 8011f98:	f43f aede 	beq.w	8011d58 <ai_platform_network_init+0x70>
 8011f9c:	e7fe      	b.n	8011f9c <ai_platform_network_init+0x2b4>
 8011f9e:	bf00      	nop
 8011fa0:	a1c00100 	.word	0xa1c00100
 8011fa4:	e0042000 	.word	0xe0042000
 8011fa8:	5c001000 	.word	0x5c001000
 8011fac:	a1facade 	.word	0xa1facade
 8011fb0:	40023000 	.word	0x40023000
 8011fb4:	f407a5c2 	.word	0xf407a5c2
 8011fb8:	b5e8b5cd 	.word	0xb5e8b5cd
 8011fbc:	58024000 	.word	0x58024000
 8011fc0:	2213      	movs	r2, #19
 8011fc2:	2116      	movs	r1, #22
 8011fc4:	f104 0010 	add.w	r0, r4, #16
 8011fc8:	f000 fd8a 	bl	8012ae0 <core_set_error>
 8011fcc:	e73a      	b.n	8011e44 <ai_platform_network_init+0x15c>
 8011fce:	4607      	mov	r7, r0
 8011fd0:	4680      	mov	r8, r0
 8011fd2:	4684      	mov	ip, r0
 8011fd4:	e773      	b.n	8011ebe <ai_platform_network_init+0x1d6>
 8011fd6:	f1b9 0f00 	cmp.w	r9, #0
 8011fda:	d002      	beq.n	8011fe2 <ai_platform_network_init+0x2fa>
 8011fdc:	f04f 0c01 	mov.w	ip, #1
 8011fe0:	e7a7      	b.n	8011f32 <ai_platform_network_init+0x24a>
 8011fe2:	2110      	movs	r1, #16
 8011fe4:	2213      	movs	r2, #19
 8011fe6:	2600      	movs	r6, #0
 8011fe8:	1860      	adds	r0, r4, r1
 8011fea:	f000 fd79 	bl	8012ae0 <core_set_error>
 8011fee:	e729      	b.n	8011e44 <ai_platform_network_init+0x15c>
 8011ff0:	2110      	movs	r1, #16
 8011ff2:	2211      	movs	r2, #17
 8011ff4:	462e      	mov	r6, r5
 8011ff6:	1860      	adds	r0, r4, r1
 8011ff8:	f000 fd72 	bl	8012ae0 <core_set_error>
 8011ffc:	e722      	b.n	8011e44 <ai_platform_network_init+0x15c>
 8011ffe:	2110      	movs	r1, #16
 8012000:	2212      	movs	r2, #18
 8012002:	1860      	adds	r0, r4, r1
 8012004:	f000 fd6c 	bl	8012ae0 <core_set_error>
 8012008:	e71c      	b.n	8011e44 <ai_platform_network_init+0x15c>
 801200a:	4666      	mov	r6, ip
 801200c:	e6b7      	b.n	8011d7e <ai_platform_network_init+0x96>
 801200e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012010:	6a26      	ldr	r6, [r4, #32]
 8012012:	2701      	movs	r7, #1
 8012014:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8012016:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801201a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 801201e:	e74e      	b.n	8011ebe <ai_platform_network_init+0x1d6>

08012020 <ai_platform_network_post_init>:
 8012020:	b538      	push	{r3, r4, r5, lr}
 8012022:	2800      	cmp	r0, #0
 8012024:	d04e      	beq.n	80120c4 <ai_platform_network_post_init+0xa4>
 8012026:	4b8c      	ldr	r3, [pc, #560]	; (8012258 <ai_platform_network_post_init+0x238>)
 8012028:	4604      	mov	r4, r0
 801202a:	6802      	ldr	r2, [r0, #0]
 801202c:	429a      	cmp	r2, r3
 801202e:	d149      	bne.n	80120c4 <ai_platform_network_post_init+0xa4>
 8012030:	f7fe ff8c 	bl	8010f4c <_ai_platform_acquire_crc>
 8012034:	4b89      	ldr	r3, [pc, #548]	; (801225c <ai_platform_network_post_init+0x23c>)
 8012036:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012040:	189a      	adds	r2, r3, r2
 8012042:	2a01      	cmp	r2, #1
 8012044:	f240 8095 	bls.w	8012172 <ai_platform_network_post_init+0x152>
 8012048:	f240 4249 	movw	r2, #1097	; 0x449
 801204c:	4293      	cmp	r3, r2
 801204e:	f000 8090 	beq.w	8012172 <ai_platform_network_post_init+0x152>
 8012052:	4a83      	ldr	r2, [pc, #524]	; (8012260 <ai_platform_network_post_init+0x240>)
 8012054:	6813      	ldr	r3, [r2, #0]
 8012056:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801205a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801205e:	f000 8096 	beq.w	801218e <ai_platform_network_post_init+0x16e>
 8012062:	6813      	ldr	r3, [r2, #0]
 8012064:	f240 4183 	movw	r1, #1155	; 0x483
 8012068:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801206c:	428b      	cmp	r3, r1
 801206e:	f000 80b8 	beq.w	80121e2 <ai_platform_network_post_init+0x1c2>
 8012072:	6813      	ldr	r3, [r2, #0]
 8012074:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012078:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801207c:	f000 80de 	beq.w	801223c <ai_platform_network_post_init+0x21c>
 8012080:	6813      	ldr	r3, [r2, #0]
 8012082:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012086:	2b00      	cmp	r3, #0
 8012088:	f000 80bd 	beq.w	8012206 <ai_platform_network_post_init+0x1e6>
 801208c:	f7fe ff60 	bl	8010f50 <_ai_platform_release_crc>
 8012090:	68e3      	ldr	r3, [r4, #12]
 8012092:	f013 0502 	ands.w	r5, r3, #2
 8012096:	f000 808c 	beq.w	80121b2 <ai_platform_network_post_init+0x192>
 801209a:	4620      	mov	r0, r4
 801209c:	f001 fc12 	bl	80138c4 <ai_layers_post_init_all>
 80120a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80120a2:	b16b      	cbz	r3, 80120c0 <ai_platform_network_post_init+0xa0>
 80120a4:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80120a6:	e007      	b.n	80120b8 <ai_platform_network_post_init+0x98>
 80120a8:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 80120ac:	4798      	blx	r3
 80120ae:	692b      	ldr	r3, [r5, #16]
 80120b0:	b133      	cbz	r3, 80120c0 <ai_platform_network_post_init+0xa0>
 80120b2:	42ab      	cmp	r3, r5
 80120b4:	461d      	mov	r5, r3
 80120b6:	d003      	beq.n	80120c0 <ai_platform_network_post_init+0xa0>
 80120b8:	4629      	mov	r1, r5
 80120ba:	2000      	movs	r0, #0
 80120bc:	2d00      	cmp	r5, #0
 80120be:	d1f3      	bne.n	80120a8 <ai_platform_network_post_init+0x88>
 80120c0:	2001      	movs	r0, #1
 80120c2:	bd38      	pop	{r3, r4, r5, pc}
 80120c4:	f7fe ff42 	bl	8010f4c <_ai_platform_acquire_crc>
 80120c8:	4b64      	ldr	r3, [pc, #400]	; (801225c <ai_platform_network_post_init+0x23c>)
 80120ca:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80120d4:	185a      	adds	r2, r3, r1
 80120d6:	2a01      	cmp	r2, #1
 80120d8:	d92a      	bls.n	8012130 <ai_platform_network_post_init+0x110>
 80120da:	f240 4249 	movw	r2, #1097	; 0x449
 80120de:	4293      	cmp	r3, r2
 80120e0:	d026      	beq.n	8012130 <ai_platform_network_post_init+0x110>
 80120e2:	4a5f      	ldr	r2, [pc, #380]	; (8012260 <ai_platform_network_post_init+0x240>)
 80120e4:	6813      	ldr	r3, [r2, #0]
 80120e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80120ea:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80120ee:	d02c      	beq.n	801214a <ai_platform_network_post_init+0x12a>
 80120f0:	6813      	ldr	r3, [r2, #0]
 80120f2:	f240 4183 	movw	r1, #1155	; 0x483
 80120f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80120fa:	428b      	cmp	r3, r1
 80120fc:	d060      	beq.n	80121c0 <ai_platform_network_post_init+0x1a0>
 80120fe:	6813      	ldr	r3, [r2, #0]
 8012100:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012104:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8012108:	f000 808b 	beq.w	8012222 <ai_platform_network_post_init+0x202>
 801210c:	6813      	ldr	r3, [r2, #0]
 801210e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012112:	2b00      	cmp	r3, #0
 8012114:	d129      	bne.n	801216a <ai_platform_network_post_init+0x14a>
 8012116:	4a53      	ldr	r2, [pc, #332]	; (8012264 <ai_platform_network_post_init+0x244>)
 8012118:	2301      	movs	r3, #1
 801211a:	6093      	str	r3, [r2, #8]
 801211c:	6893      	ldr	r3, [r2, #8]
 801211e:	2b00      	cmp	r3, #0
 8012120:	d1fc      	bne.n	801211c <ai_platform_network_post_init+0xfc>
 8012122:	4951      	ldr	r1, [pc, #324]	; (8012268 <ai_platform_network_post_init+0x248>)
 8012124:	4b51      	ldr	r3, [pc, #324]	; (801226c <ai_platform_network_post_init+0x24c>)
 8012126:	6011      	str	r1, [r2, #0]
 8012128:	6812      	ldr	r2, [r2, #0]
 801212a:	429a      	cmp	r2, r3
 801212c:	d01d      	beq.n	801216a <ai_platform_network_post_init+0x14a>
 801212e:	e7fe      	b.n	801212e <ai_platform_network_post_init+0x10e>
 8012130:	4a4c      	ldr	r2, [pc, #304]	; (8012264 <ai_platform_network_post_init+0x244>)
 8012132:	2301      	movs	r3, #1
 8012134:	6093      	str	r3, [r2, #8]
 8012136:	6893      	ldr	r3, [r2, #8]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d1fc      	bne.n	8012136 <ai_platform_network_post_init+0x116>
 801213c:	494a      	ldr	r1, [pc, #296]	; (8012268 <ai_platform_network_post_init+0x248>)
 801213e:	4b4b      	ldr	r3, [pc, #300]	; (801226c <ai_platform_network_post_init+0x24c>)
 8012140:	6011      	str	r1, [r2, #0]
 8012142:	6812      	ldr	r2, [r2, #0]
 8012144:	429a      	cmp	r2, r3
 8012146:	d010      	beq.n	801216a <ai_platform_network_post_init+0x14a>
 8012148:	e7fe      	b.n	8012148 <ai_platform_network_post_init+0x128>
 801214a:	4a49      	ldr	r2, [pc, #292]	; (8012270 <ai_platform_network_post_init+0x250>)
 801214c:	2301      	movs	r3, #1
 801214e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8012152:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8012156:	2b00      	cmp	r3, #0
 8012158:	d1fb      	bne.n	8012152 <ai_platform_network_post_init+0x132>
 801215a:	4943      	ldr	r1, [pc, #268]	; (8012268 <ai_platform_network_post_init+0x248>)
 801215c:	4b43      	ldr	r3, [pc, #268]	; (801226c <ai_platform_network_post_init+0x24c>)
 801215e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8012162:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8012166:	429a      	cmp	r2, r3
 8012168:	d110      	bne.n	801218c <ai_platform_network_post_init+0x16c>
 801216a:	f7fe fef1 	bl	8010f50 <_ai_platform_release_crc>
 801216e:	2000      	movs	r0, #0
 8012170:	bd38      	pop	{r3, r4, r5, pc}
 8012172:	4a3c      	ldr	r2, [pc, #240]	; (8012264 <ai_platform_network_post_init+0x244>)
 8012174:	2301      	movs	r3, #1
 8012176:	6093      	str	r3, [r2, #8]
 8012178:	6893      	ldr	r3, [r2, #8]
 801217a:	2b00      	cmp	r3, #0
 801217c:	d1fc      	bne.n	8012178 <ai_platform_network_post_init+0x158>
 801217e:	493a      	ldr	r1, [pc, #232]	; (8012268 <ai_platform_network_post_init+0x248>)
 8012180:	4b3a      	ldr	r3, [pc, #232]	; (801226c <ai_platform_network_post_init+0x24c>)
 8012182:	6011      	str	r1, [r2, #0]
 8012184:	6812      	ldr	r2, [r2, #0]
 8012186:	429a      	cmp	r2, r3
 8012188:	d080      	beq.n	801208c <ai_platform_network_post_init+0x6c>
 801218a:	e7fe      	b.n	801218a <ai_platform_network_post_init+0x16a>
 801218c:	e7fe      	b.n	801218c <ai_platform_network_post_init+0x16c>
 801218e:	4a38      	ldr	r2, [pc, #224]	; (8012270 <ai_platform_network_post_init+0x250>)
 8012190:	2301      	movs	r3, #1
 8012192:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8012196:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801219a:	2b00      	cmp	r3, #0
 801219c:	d1fb      	bne.n	8012196 <ai_platform_network_post_init+0x176>
 801219e:	4932      	ldr	r1, [pc, #200]	; (8012268 <ai_platform_network_post_init+0x248>)
 80121a0:	4b32      	ldr	r3, [pc, #200]	; (801226c <ai_platform_network_post_init+0x24c>)
 80121a2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80121a6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80121aa:	429a      	cmp	r2, r3
 80121ac:	f43f af6e 	beq.w	801208c <ai_platform_network_post_init+0x6c>
 80121b0:	e7fe      	b.n	80121b0 <ai_platform_network_post_init+0x190>
 80121b2:	2210      	movs	r2, #16
 80121b4:	2111      	movs	r1, #17
 80121b6:	18a0      	adds	r0, r4, r2
 80121b8:	f000 fc92 	bl	8012ae0 <core_set_error>
 80121bc:	4628      	mov	r0, r5
 80121be:	bd38      	pop	{r3, r4, r5, pc}
 80121c0:	4a2b      	ldr	r2, [pc, #172]	; (8012270 <ai_platform_network_post_init+0x250>)
 80121c2:	2301      	movs	r3, #1
 80121c4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80121c8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d1fb      	bne.n	80121c8 <ai_platform_network_post_init+0x1a8>
 80121d0:	4925      	ldr	r1, [pc, #148]	; (8012268 <ai_platform_network_post_init+0x248>)
 80121d2:	4b26      	ldr	r3, [pc, #152]	; (801226c <ai_platform_network_post_init+0x24c>)
 80121d4:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80121d8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80121dc:	429a      	cmp	r2, r3
 80121de:	d0c4      	beq.n	801216a <ai_platform_network_post_init+0x14a>
 80121e0:	e7fe      	b.n	80121e0 <ai_platform_network_post_init+0x1c0>
 80121e2:	4a23      	ldr	r2, [pc, #140]	; (8012270 <ai_platform_network_post_init+0x250>)
 80121e4:	2301      	movs	r3, #1
 80121e6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80121ea:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d1fb      	bne.n	80121ea <ai_platform_network_post_init+0x1ca>
 80121f2:	491d      	ldr	r1, [pc, #116]	; (8012268 <ai_platform_network_post_init+0x248>)
 80121f4:	4b1d      	ldr	r3, [pc, #116]	; (801226c <ai_platform_network_post_init+0x24c>)
 80121f6:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80121fa:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80121fe:	429a      	cmp	r2, r3
 8012200:	f43f af44 	beq.w	801208c <ai_platform_network_post_init+0x6c>
 8012204:	e7fe      	b.n	8012204 <ai_platform_network_post_init+0x1e4>
 8012206:	4a17      	ldr	r2, [pc, #92]	; (8012264 <ai_platform_network_post_init+0x244>)
 8012208:	2301      	movs	r3, #1
 801220a:	6093      	str	r3, [r2, #8]
 801220c:	6893      	ldr	r3, [r2, #8]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d1fc      	bne.n	801220c <ai_platform_network_post_init+0x1ec>
 8012212:	4915      	ldr	r1, [pc, #84]	; (8012268 <ai_platform_network_post_init+0x248>)
 8012214:	4b15      	ldr	r3, [pc, #84]	; (801226c <ai_platform_network_post_init+0x24c>)
 8012216:	6011      	str	r1, [r2, #0]
 8012218:	6812      	ldr	r2, [r2, #0]
 801221a:	429a      	cmp	r2, r3
 801221c:	f43f af36 	beq.w	801208c <ai_platform_network_post_init+0x6c>
 8012220:	e7fe      	b.n	8012220 <ai_platform_network_post_init+0x200>
 8012222:	4a10      	ldr	r2, [pc, #64]	; (8012264 <ai_platform_network_post_init+0x244>)
 8012224:	2301      	movs	r3, #1
 8012226:	6093      	str	r3, [r2, #8]
 8012228:	6893      	ldr	r3, [r2, #8]
 801222a:	2b00      	cmp	r3, #0
 801222c:	d1fc      	bne.n	8012228 <ai_platform_network_post_init+0x208>
 801222e:	490e      	ldr	r1, [pc, #56]	; (8012268 <ai_platform_network_post_init+0x248>)
 8012230:	4b0e      	ldr	r3, [pc, #56]	; (801226c <ai_platform_network_post_init+0x24c>)
 8012232:	6011      	str	r1, [r2, #0]
 8012234:	6812      	ldr	r2, [r2, #0]
 8012236:	429a      	cmp	r2, r3
 8012238:	d097      	beq.n	801216a <ai_platform_network_post_init+0x14a>
 801223a:	e7fe      	b.n	801223a <ai_platform_network_post_init+0x21a>
 801223c:	4a09      	ldr	r2, [pc, #36]	; (8012264 <ai_platform_network_post_init+0x244>)
 801223e:	2301      	movs	r3, #1
 8012240:	6093      	str	r3, [r2, #8]
 8012242:	6893      	ldr	r3, [r2, #8]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d1fc      	bne.n	8012242 <ai_platform_network_post_init+0x222>
 8012248:	4907      	ldr	r1, [pc, #28]	; (8012268 <ai_platform_network_post_init+0x248>)
 801224a:	4b08      	ldr	r3, [pc, #32]	; (801226c <ai_platform_network_post_init+0x24c>)
 801224c:	6011      	str	r1, [r2, #0]
 801224e:	6812      	ldr	r2, [r2, #0]
 8012250:	429a      	cmp	r2, r3
 8012252:	f43f af1b 	beq.w	801208c <ai_platform_network_post_init+0x6c>
 8012256:	e7fe      	b.n	8012256 <ai_platform_network_post_init+0x236>
 8012258:	a1c00100 	.word	0xa1c00100
 801225c:	e0042000 	.word	0xe0042000
 8012260:	5c001000 	.word	0x5c001000
 8012264:	40023000 	.word	0x40023000
 8012268:	f407a5c2 	.word	0xf407a5c2
 801226c:	b5e8b5cd 	.word	0xb5e8b5cd
 8012270:	58024000 	.word	0x58024000

08012274 <ai_platform_network_process>:
 8012274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012278:	b085      	sub	sp, #20
 801227a:	460e      	mov	r6, r1
 801227c:	4605      	mov	r5, r0
 801227e:	9201      	str	r2, [sp, #4]
 8012280:	b120      	cbz	r0, 801228c <ai_platform_network_process+0x18>
 8012282:	4b24      	ldr	r3, [pc, #144]	; (8012314 <ai_platform_network_process+0xa0>)
 8012284:	6802      	ldr	r2, [r0, #0]
 8012286:	429a      	cmp	r2, r3
 8012288:	bf18      	it	ne
 801228a:	2500      	movne	r5, #0
 801228c:	f7fe fe5e 	bl	8010f4c <_ai_platform_acquire_crc>
 8012290:	4b21      	ldr	r3, [pc, #132]	; (8012318 <ai_platform_network_process+0xa4>)
 8012292:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801229c:	185a      	adds	r2, r3, r1
 801229e:	2a01      	cmp	r2, #1
 80122a0:	d92b      	bls.n	80122fa <ai_platform_network_process+0x86>
 80122a2:	f240 4249 	movw	r2, #1097	; 0x449
 80122a6:	4293      	cmp	r3, r2
 80122a8:	d027      	beq.n	80122fa <ai_platform_network_process+0x86>
 80122aa:	4a1c      	ldr	r2, [pc, #112]	; (801231c <ai_platform_network_process+0xa8>)
 80122ac:	6813      	ldr	r3, [r2, #0]
 80122ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80122b2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80122b6:	d039      	beq.n	801232c <ai_platform_network_process+0xb8>
 80122b8:	6813      	ldr	r3, [r2, #0]
 80122ba:	f240 4183 	movw	r1, #1155	; 0x483
 80122be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80122c2:	428b      	cmp	r3, r1
 80122c4:	f000 819c 	beq.w	8012600 <ai_platform_network_process+0x38c>
 80122c8:	6813      	ldr	r3, [r2, #0]
 80122ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80122ce:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80122d2:	f000 8179 	beq.w	80125c8 <ai_platform_network_process+0x354>
 80122d6:	6813      	ldr	r3, [r2, #0]
 80122d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d136      	bne.n	801234e <ai_platform_network_process+0xda>
 80122e0:	4a0f      	ldr	r2, [pc, #60]	; (8012320 <ai_platform_network_process+0xac>)
 80122e2:	2301      	movs	r3, #1
 80122e4:	6093      	str	r3, [r2, #8]
 80122e6:	6893      	ldr	r3, [r2, #8]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d1fc      	bne.n	80122e6 <ai_platform_network_process+0x72>
 80122ec:	4b0d      	ldr	r3, [pc, #52]	; (8012324 <ai_platform_network_process+0xb0>)
 80122ee:	6013      	str	r3, [r2, #0]
 80122f0:	4b0d      	ldr	r3, [pc, #52]	; (8012328 <ai_platform_network_process+0xb4>)
 80122f2:	6812      	ldr	r2, [r2, #0]
 80122f4:	429a      	cmp	r2, r3
 80122f6:	d02a      	beq.n	801234e <ai_platform_network_process+0xda>
 80122f8:	e7fe      	b.n	80122f8 <ai_platform_network_process+0x84>
 80122fa:	4a09      	ldr	r2, [pc, #36]	; (8012320 <ai_platform_network_process+0xac>)
 80122fc:	2301      	movs	r3, #1
 80122fe:	6093      	str	r3, [r2, #8]
 8012300:	6893      	ldr	r3, [r2, #8]
 8012302:	2b00      	cmp	r3, #0
 8012304:	d1fc      	bne.n	8012300 <ai_platform_network_process+0x8c>
 8012306:	4b07      	ldr	r3, [pc, #28]	; (8012324 <ai_platform_network_process+0xb0>)
 8012308:	6013      	str	r3, [r2, #0]
 801230a:	4b07      	ldr	r3, [pc, #28]	; (8012328 <ai_platform_network_process+0xb4>)
 801230c:	6812      	ldr	r2, [r2, #0]
 801230e:	429a      	cmp	r2, r3
 8012310:	d01d      	beq.n	801234e <ai_platform_network_process+0xda>
 8012312:	e7fe      	b.n	8012312 <ai_platform_network_process+0x9e>
 8012314:	a1c00100 	.word	0xa1c00100
 8012318:	e0042000 	.word	0xe0042000
 801231c:	5c001000 	.word	0x5c001000
 8012320:	40023000 	.word	0x40023000
 8012324:	f407a5c2 	.word	0xf407a5c2
 8012328:	b5e8b5cd 	.word	0xb5e8b5cd
 801232c:	4ab0      	ldr	r2, [pc, #704]	; (80125f0 <ai_platform_network_process+0x37c>)
 801232e:	2301      	movs	r3, #1
 8012330:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8012334:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8012338:	2b00      	cmp	r3, #0
 801233a:	d1fb      	bne.n	8012334 <ai_platform_network_process+0xc0>
 801233c:	4bad      	ldr	r3, [pc, #692]	; (80125f4 <ai_platform_network_process+0x380>)
 801233e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8012342:	4bad      	ldr	r3, [pc, #692]	; (80125f8 <ai_platform_network_process+0x384>)
 8012344:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8012348:	429a      	cmp	r2, r3
 801234a:	f040 812b 	bne.w	80125a4 <ai_platform_network_process+0x330>
 801234e:	f7fe fdff 	bl	8010f50 <_ai_platform_release_crc>
 8012352:	2d00      	cmp	r5, #0
 8012354:	f000 8172 	beq.w	801263c <ai_platform_network_process+0x3c8>
 8012358:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 801235a:	2b00      	cmp	r3, #0
 801235c:	f000 8123 	beq.w	80125a6 <ai_platform_network_process+0x332>
 8012360:	68eb      	ldr	r3, [r5, #12]
 8012362:	2200      	movs	r2, #0
 8012364:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8012368:	f003 0303 	and.w	r3, r3, #3
 801236c:	616a      	str	r2, [r5, #20]
 801236e:	2b03      	cmp	r3, #3
 8012370:	f040 811f 	bne.w	80125b2 <ai_platform_network_process+0x33e>
 8012374:	2e00      	cmp	r6, #0
 8012376:	f000 8156 	beq.w	8012626 <ai_platform_network_process+0x3b2>
 801237a:	fab8 f788 	clz	r7, r8
 801237e:	097f      	lsrs	r7, r7, #5
 8012380:	f1b8 0f00 	cmp.w	r8, #0
 8012384:	f000 814f 	beq.w	8012626 <ai_platform_network_process+0x3b2>
 8012388:	f8b8 3000 	ldrh.w	r3, [r8]
 801238c:	2b00      	cmp	r3, #0
 801238e:	f000 814a 	beq.w	8012626 <ai_platform_network_process+0x3b2>
 8012392:	69b3      	ldr	r3, [r6, #24]
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	e9cd 3502 	strd	r3, r5, [sp, #8]
 801239a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d072      	beq.n	8012488 <ai_platform_network_process+0x214>
 80123a2:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 80123a6:	2c00      	cmp	r4, #0
 80123a8:	d06e      	beq.n	8012488 <ai_platform_network_process+0x214>
 80123aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80123ae:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80123b2:	f8d3 a000 	ldr.w	sl, [r3]
 80123b6:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 80123ba:	f000 8133 	beq.w	8012624 <ai_platform_network_process+0x3b0>
 80123be:	69a3      	ldr	r3, [r4, #24]
 80123c0:	2101      	movs	r1, #1
 80123c2:	4630      	mov	r0, r6
 80123c4:	685d      	ldr	r5, [r3, #4]
 80123c6:	f7fe fd73 	bl	8010eb0 <ai_buffer_get_size>
 80123ca:	4285      	cmp	r5, r0
 80123cc:	f0c0 8138 	bcc.w	8012640 <ai_platform_network_process+0x3cc>
 80123d0:	68e0      	ldr	r0, [r4, #12]
 80123d2:	69b1      	ldr	r1, [r6, #24]
 80123d4:	68c2      	ldr	r2, [r0, #12]
 80123d6:	68cb      	ldr	r3, [r1, #12]
 80123d8:	429a      	cmp	r2, r3
 80123da:	f040 8131 	bne.w	8012640 <ai_platform_network_process+0x3cc>
 80123de:	6882      	ldr	r2, [r0, #8]
 80123e0:	688b      	ldr	r3, [r1, #8]
 80123e2:	429a      	cmp	r2, r3
 80123e4:	f040 812c 	bne.w	8012640 <ai_platform_network_process+0x3cc>
 80123e8:	6842      	ldr	r2, [r0, #4]
 80123ea:	684b      	ldr	r3, [r1, #4]
 80123ec:	429a      	cmp	r2, r3
 80123ee:	f040 8127 	bne.w	8012640 <ai_platform_network_process+0x3cc>
 80123f2:	69a3      	ldr	r3, [r4, #24]
 80123f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80123f8:	f005 face 	bl	8017998 <ai_array_get_data_byte_size>
 80123fc:	4605      	mov	r5, r0
 80123fe:	4620      	mov	r0, r4
 8012400:	f005 fa20 	bl	8017844 <get_tensor_byte_size>
 8012404:	4285      	cmp	r5, r0
 8012406:	f0c0 811b 	bcc.w	8012640 <ai_platform_network_process+0x3cc>
 801240a:	69a3      	ldr	r3, [r4, #24]
 801240c:	6818      	ldr	r0, [r3, #0]
 801240e:	f005 fa2f 	bl	8017870 <ai_array_to_buffer_fmt>
 8012412:	6833      	ldr	r3, [r6, #0]
 8012414:	4058      	eors	r0, r3
 8012416:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 801241a:	f040 81ca 	bne.w	80127b2 <ai_platform_network_process+0x53e>
 801241e:	6873      	ldr	r3, [r6, #4]
 8012420:	2b00      	cmp	r3, #0
 8012422:	f000 81bd 	beq.w	80127a0 <ai_platform_network_process+0x52c>
 8012426:	69b3      	ldr	r3, [r6, #24]
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	2b00      	cmp	r3, #0
 801242c:	f000 81ca 	beq.w	80127c4 <ai_platform_network_process+0x550>
 8012430:	9a02      	ldr	r2, [sp, #8]
 8012432:	4620      	mov	r0, r4
 8012434:	3701      	adds	r7, #1
 8012436:	361c      	adds	r6, #28
 8012438:	429a      	cmp	r2, r3
 801243a:	bf38      	it	cc
 801243c:	461a      	movcc	r2, r3
 801243e:	9202      	str	r2, [sp, #8]
 8012440:	f005 fa00 	bl	8017844 <get_tensor_byte_size>
 8012444:	f8c9 0008 	str.w	r0, [r9, #8]
 8012448:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	fb00 f303 	mul.w	r3, r0, r3
 8012452:	f8c9 300c 	str.w	r3, [r9, #12]
 8012456:	f856 1c18 	ldr.w	r1, [r6, #-24]
 801245a:	440b      	add	r3, r1
 801245c:	f8c9 1004 	str.w	r1, [r9, #4]
 8012460:	f84a 300b 	str.w	r3, [sl, fp]
 8012464:	69a0      	ldr	r0, [r4, #24]
 8012466:	6803      	ldr	r3, [r0, #0]
 8012468:	009a      	lsls	r2, r3, #2
 801246a:	f100 80bb 	bmi.w	80125e4 <ai_platform_network_process+0x370>
 801246e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8012472:	1a9b      	subs	r3, r3, r2
 8012474:	4419      	add	r1, r3
 8012476:	6081      	str	r1, [r0, #8]
 8012478:	69a3      	ldr	r3, [r4, #24]
 801247a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801247e:	60da      	str	r2, [r3, #12]
 8012480:	f8b8 3000 	ldrh.w	r3, [r8]
 8012484:	42bb      	cmp	r3, r7
 8012486:	d888      	bhi.n	801239a <ai_platform_network_process+0x126>
 8012488:	9d03      	ldr	r5, [sp, #12]
 801248a:	9b01      	ldr	r3, [sp, #4]
 801248c:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 801248e:	2b00      	cmp	r3, #0
 8012490:	f000 81a1 	beq.w	80127d6 <ai_platform_network_process+0x562>
 8012494:	2a01      	cmp	r2, #1
 8012496:	f240 817b 	bls.w	8012790 <ai_platform_network_process+0x51c>
 801249a:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 801249e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	f000 8174 	beq.w	8012790 <ai_platform_network_process+0x51c>
 80124a8:	9e01      	ldr	r6, [sp, #4]
 80124aa:	2700      	movs	r7, #0
 80124ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	f000 80d3 	beq.w	801265c <ai_platform_network_process+0x3e8>
 80124b6:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 80124ba:	2c00      	cmp	r4, #0
 80124bc:	f000 80ce 	beq.w	801265c <ai_platform_network_process+0x3e8>
 80124c0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80124c4:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80124c8:	f8d3 8000 	ldr.w	r8, [r3]
 80124cc:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 80124d0:	f000 819f 	beq.w	8012812 <ai_platform_network_process+0x59e>
 80124d4:	69a3      	ldr	r3, [r4, #24]
 80124d6:	2101      	movs	r1, #1
 80124d8:	4630      	mov	r0, r6
 80124da:	685b      	ldr	r3, [r3, #4]
 80124dc:	9301      	str	r3, [sp, #4]
 80124de:	f7fe fce7 	bl	8010eb0 <ai_buffer_get_size>
 80124e2:	9b01      	ldr	r3, [sp, #4]
 80124e4:	4283      	cmp	r3, r0
 80124e6:	f0c0 8153 	bcc.w	8012790 <ai_platform_network_process+0x51c>
 80124ea:	68e0      	ldr	r0, [r4, #12]
 80124ec:	69b1      	ldr	r1, [r6, #24]
 80124ee:	68c2      	ldr	r2, [r0, #12]
 80124f0:	68cb      	ldr	r3, [r1, #12]
 80124f2:	429a      	cmp	r2, r3
 80124f4:	f040 814c 	bne.w	8012790 <ai_platform_network_process+0x51c>
 80124f8:	6882      	ldr	r2, [r0, #8]
 80124fa:	688b      	ldr	r3, [r1, #8]
 80124fc:	429a      	cmp	r2, r3
 80124fe:	f040 8147 	bne.w	8012790 <ai_platform_network_process+0x51c>
 8012502:	6842      	ldr	r2, [r0, #4]
 8012504:	684b      	ldr	r3, [r1, #4]
 8012506:	429a      	cmp	r2, r3
 8012508:	f040 8142 	bne.w	8012790 <ai_platform_network_process+0x51c>
 801250c:	69a3      	ldr	r3, [r4, #24]
 801250e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012512:	f005 fa41 	bl	8017998 <ai_array_get_data_byte_size>
 8012516:	9001      	str	r0, [sp, #4]
 8012518:	4620      	mov	r0, r4
 801251a:	f005 f993 	bl	8017844 <get_tensor_byte_size>
 801251e:	9b01      	ldr	r3, [sp, #4]
 8012520:	4283      	cmp	r3, r0
 8012522:	f0c0 8135 	bcc.w	8012790 <ai_platform_network_process+0x51c>
 8012526:	69a3      	ldr	r3, [r4, #24]
 8012528:	6818      	ldr	r0, [r3, #0]
 801252a:	f005 f9a1 	bl	8017870 <ai_array_to_buffer_fmt>
 801252e:	6833      	ldr	r3, [r6, #0]
 8012530:	4058      	eors	r0, r3
 8012532:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8012536:	f040 815c 	bne.w	80127f2 <ai_platform_network_process+0x57e>
 801253a:	6873      	ldr	r3, [r6, #4]
 801253c:	2b00      	cmp	r3, #0
 801253e:	f000 8150 	beq.w	80127e2 <ai_platform_network_process+0x56e>
 8012542:	69b3      	ldr	r3, [r6, #24]
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	2b00      	cmp	r3, #0
 8012548:	f000 815b 	beq.w	8012802 <ai_platform_network_process+0x58e>
 801254c:	9a02      	ldr	r2, [sp, #8]
 801254e:	4620      	mov	r0, r4
 8012550:	3701      	adds	r7, #1
 8012552:	361c      	adds	r6, #28
 8012554:	429a      	cmp	r2, r3
 8012556:	bf38      	it	cc
 8012558:	461a      	movcc	r2, r3
 801255a:	9202      	str	r2, [sp, #8]
 801255c:	f005 f972 	bl	8017844 <get_tensor_byte_size>
 8012560:	f8ca 0008 	str.w	r0, [sl, #8]
 8012564:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	fb00 f303 	mul.w	r3, r0, r3
 801256e:	f8ca 300c 	str.w	r3, [sl, #12]
 8012572:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8012576:	440b      	add	r3, r1
 8012578:	f8ca 1004 	str.w	r1, [sl, #4]
 801257c:	f848 300b 	str.w	r3, [r8, fp]
 8012580:	69a0      	ldr	r0, [r4, #24]
 8012582:	6803      	ldr	r3, [r0, #0]
 8012584:	009b      	lsls	r3, r3, #2
 8012586:	d464      	bmi.n	8012652 <ai_platform_network_process+0x3de>
 8012588:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 801258c:	1a9b      	subs	r3, r3, r2
 801258e:	4419      	add	r1, r3
 8012590:	6081      	str	r1, [r0, #8]
 8012592:	69a3      	ldr	r3, [r4, #24]
 8012594:	f8da 2004 	ldr.w	r2, [sl, #4]
 8012598:	60da      	str	r2, [r3, #12]
 801259a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801259e:	429f      	cmp	r7, r3
 80125a0:	d384      	bcc.n	80124ac <ai_platform_network_process+0x238>
 80125a2:	e05b      	b.n	801265c <ai_platform_network_process+0x3e8>
 80125a4:	e7fe      	b.n	80125a4 <ai_platform_network_process+0x330>
 80125a6:	68ea      	ldr	r2, [r5, #12]
 80125a8:	616b      	str	r3, [r5, #20]
 80125aa:	f002 0203 	and.w	r2, r2, #3
 80125ae:	2a03      	cmp	r2, #3
 80125b0:	d039      	beq.n	8012626 <ai_platform_network_process+0x3b2>
 80125b2:	2230      	movs	r2, #48	; 0x30
 80125b4:	2111      	movs	r1, #17
 80125b6:	f105 0010 	add.w	r0, r5, #16
 80125ba:	2400      	movs	r4, #0
 80125bc:	f000 fa90 	bl	8012ae0 <core_set_error>
 80125c0:	4620      	mov	r0, r4
 80125c2:	b005      	add	sp, #20
 80125c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125c8:	4a0c      	ldr	r2, [pc, #48]	; (80125fc <ai_platform_network_process+0x388>)
 80125ca:	2301      	movs	r3, #1
 80125cc:	6093      	str	r3, [r2, #8]
 80125ce:	6893      	ldr	r3, [r2, #8]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d1fc      	bne.n	80125ce <ai_platform_network_process+0x35a>
 80125d4:	4b07      	ldr	r3, [pc, #28]	; (80125f4 <ai_platform_network_process+0x380>)
 80125d6:	6013      	str	r3, [r2, #0]
 80125d8:	4b07      	ldr	r3, [pc, #28]	; (80125f8 <ai_platform_network_process+0x384>)
 80125da:	6812      	ldr	r2, [r2, #0]
 80125dc:	429a      	cmp	r2, r3
 80125de:	f43f aeb6 	beq.w	801234e <ai_platform_network_process+0xda>
 80125e2:	e7fe      	b.n	80125e2 <ai_platform_network_process+0x36e>
 80125e4:	f8b8 3000 	ldrh.w	r3, [r8]
 80125e8:	429f      	cmp	r7, r3
 80125ea:	f4ff aed6 	bcc.w	801239a <ai_platform_network_process+0x126>
 80125ee:	e74b      	b.n	8012488 <ai_platform_network_process+0x214>
 80125f0:	58024000 	.word	0x58024000
 80125f4:	f407a5c2 	.word	0xf407a5c2
 80125f8:	b5e8b5cd 	.word	0xb5e8b5cd
 80125fc:	40023000 	.word	0x40023000
 8012600:	4a88      	ldr	r2, [pc, #544]	; (8012824 <ai_platform_network_process+0x5b0>)
 8012602:	2301      	movs	r3, #1
 8012604:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8012608:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801260c:	2b00      	cmp	r3, #0
 801260e:	d1fb      	bne.n	8012608 <ai_platform_network_process+0x394>
 8012610:	4b85      	ldr	r3, [pc, #532]	; (8012828 <ai_platform_network_process+0x5b4>)
 8012612:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8012616:	4b85      	ldr	r3, [pc, #532]	; (801282c <ai_platform_network_process+0x5b8>)
 8012618:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801261c:	429a      	cmp	r2, r3
 801261e:	f43f ae96 	beq.w	801234e <ai_platform_network_process+0xda>
 8012622:	e7fe      	b.n	8012622 <ai_platform_network_process+0x3ae>
 8012624:	9d03      	ldr	r5, [sp, #12]
 8012626:	2400      	movs	r4, #0
 8012628:	2217      	movs	r2, #23
 801262a:	2112      	movs	r1, #18
 801262c:	f105 0010 	add.w	r0, r5, #16
 8012630:	f000 fa56 	bl	8012ae0 <core_set_error>
 8012634:	4620      	mov	r0, r4
 8012636:	b005      	add	sp, #20
 8012638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801263c:	462c      	mov	r4, r5
 801263e:	e7bf      	b.n	80125c0 <ai_platform_network_process+0x34c>
 8012640:	9d03      	ldr	r5, [sp, #12]
 8012642:	2218      	movs	r2, #24
 8012644:	2112      	movs	r1, #18
 8012646:	2400      	movs	r4, #0
 8012648:	f105 0010 	add.w	r0, r5, #16
 801264c:	f000 fa48 	bl	8012ae0 <core_set_error>
 8012650:	e7b6      	b.n	80125c0 <ai_platform_network_process+0x34c>
 8012652:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8012656:	429f      	cmp	r7, r3
 8012658:	f4ff af28 	bcc.w	80124ac <ai_platform_network_process+0x238>
 801265c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8012660:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8012662:	82ab      	strh	r3, [r5, #20]
 8012664:	2a00      	cmp	r2, #0
 8012666:	f040 808d 	bne.w	8012784 <ai_platform_network_process+0x510>
 801266a:	4616      	mov	r6, r2
 801266c:	4617      	mov	r7, r2
 801266e:	8aec      	ldrh	r4, [r5, #22]
 8012670:	429c      	cmp	r4, r3
 8012672:	d2a5      	bcs.n	80125c0 <ai_platform_network_process+0x34c>
 8012674:	46ab      	mov	fp, r5
 8012676:	2e00      	cmp	r6, #0
 8012678:	d030      	beq.n	80126dc <ai_platform_network_process+0x468>
 801267a:	f04f 0800 	mov.w	r8, #0
 801267e:	e014      	b.n	80126aa <ai_platform_network_process+0x436>
 8012680:	6882      	ldr	r2, [r0, #8]
 8012682:	68c5      	ldr	r5, [r0, #12]
 8012684:	6863      	ldr	r3, [r4, #4]
 8012686:	1b52      	subs	r2, r2, r5
 8012688:	4413      	add	r3, r2
 801268a:	6083      	str	r3, [r0, #8]
 801268c:	698b      	ldr	r3, [r1, #24]
 801268e:	6862      	ldr	r2, [r4, #4]
 8012690:	60da      	str	r2, [r3, #12]
 8012692:	f859 200a 	ldr.w	r2, [r9, sl]
 8012696:	f108 0801 	add.w	r8, r8, #1
 801269a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 801269e:	440b      	add	r3, r1
 80126a0:	4293      	cmp	r3, r2
 80126a2:	d301      	bcc.n	80126a8 <ai_platform_network_process+0x434>
 80126a4:	68e3      	ldr	r3, [r4, #12]
 80126a6:	1ad3      	subs	r3, r2, r3
 80126a8:	6063      	str	r3, [r4, #4]
 80126aa:	8833      	ldrh	r3, [r6, #0]
 80126ac:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 80126b0:	4543      	cmp	r3, r8
 80126b2:	d913      	bls.n	80126dc <ai_platform_network_process+0x468>
 80126b4:	6873      	ldr	r3, [r6, #4]
 80126b6:	b18b      	cbz	r3, 80126dc <ai_platform_network_process+0x468>
 80126b8:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 80126bc:	b171      	cbz	r1, 80126dc <ai_platform_network_process+0x468>
 80126be:	6988      	ldr	r0, [r1, #24]
 80126c0:	68b2      	ldr	r2, [r6, #8]
 80126c2:	6803      	ldr	r3, [r0, #0]
 80126c4:	f8d2 9000 	ldr.w	r9, [r2]
 80126c8:	009d      	lsls	r5, r3, #2
 80126ca:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 80126ce:	d5d7      	bpl.n	8012680 <ai_platform_network_process+0x40c>
 80126d0:	6880      	ldr	r0, [r0, #8]
 80126d2:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 80126d6:	f005 fa7b 	bl	8017bd0 <memcpy>
 80126da:	e7da      	b.n	8012692 <ai_platform_network_process+0x41e>
 80126dc:	4658      	mov	r0, fp
 80126de:	f001 f905 	bl	80138ec <ai_layers_forward_all>
 80126e2:	2f00      	cmp	r7, #0
 80126e4:	d03f      	beq.n	8012766 <ai_platform_network_process+0x4f2>
 80126e6:	2400      	movs	r4, #0
 80126e8:	e016      	b.n	8012718 <ai_platform_network_process+0x4a4>
 80126ea:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 80126ee:	f859 100a 	ldr.w	r1, [r9, sl]
 80126f2:	4413      	add	r3, r2
 80126f4:	428b      	cmp	r3, r1
 80126f6:	d302      	bcc.n	80126fe <ai_platform_network_process+0x48a>
 80126f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80126fc:	1acb      	subs	r3, r1, r3
 80126fe:	f8c8 3004 	str.w	r3, [r8, #4]
 8012702:	6981      	ldr	r1, [r0, #24]
 8012704:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8012708:	1b52      	subs	r2, r2, r5
 801270a:	4413      	add	r3, r2
 801270c:	608b      	str	r3, [r1, #8]
 801270e:	6983      	ldr	r3, [r0, #24]
 8012710:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8012714:	60da      	str	r2, [r3, #12]
 8012716:	3401      	adds	r4, #1
 8012718:	883b      	ldrh	r3, [r7, #0]
 801271a:	42a3      	cmp	r3, r4
 801271c:	d923      	bls.n	8012766 <ai_platform_network_process+0x4f2>
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	b30b      	cbz	r3, 8012766 <ai_platform_network_process+0x4f2>
 8012722:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012726:	b1f0      	cbz	r0, 8012766 <ai_platform_network_process+0x4f2>
 8012728:	68ba      	ldr	r2, [r7, #8]
 801272a:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 801272e:	6983      	ldr	r3, [r0, #24]
 8012730:	f8d2 9000 	ldr.w	r9, [r2]
 8012734:	681a      	ldr	r2, [r3, #0]
 8012736:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 801273a:	0092      	lsls	r2, r2, #2
 801273c:	d5d5      	bpl.n	80126ea <ai_platform_network_process+0x476>
 801273e:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8012742:	6899      	ldr	r1, [r3, #8]
 8012744:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012748:	f005 fa42 	bl	8017bd0 <memcpy>
 801274c:	f859 200a 	ldr.w	r2, [r9, sl]
 8012750:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8012754:	440b      	add	r3, r1
 8012756:	4293      	cmp	r3, r2
 8012758:	d302      	bcc.n	8012760 <ai_platform_network_process+0x4ec>
 801275a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801275e:	1ad3      	subs	r3, r2, r3
 8012760:	f8c8 3004 	str.w	r3, [r8, #4]
 8012764:	e7d7      	b.n	8012716 <ai_platform_network_process+0x4a2>
 8012766:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 801276a:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 801276e:	3401      	adds	r4, #1
 8012770:	b2a4      	uxth	r4, r4
 8012772:	42a3      	cmp	r3, r4
 8012774:	f8ab 4016 	strh.w	r4, [fp, #22]
 8012778:	f63f af7d 	bhi.w	8012676 <ai_platform_network_process+0x402>
 801277c:	4620      	mov	r0, r4
 801277e:	b005      	add	sp, #20
 8012780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012784:	2a01      	cmp	r2, #1
 8012786:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8012788:	d029      	beq.n	80127de <ai_platform_network_process+0x56a>
 801278a:	f106 070c 	add.w	r7, r6, #12
 801278e:	e76e      	b.n	801266e <ai_platform_network_process+0x3fa>
 8012790:	2218      	movs	r2, #24
 8012792:	2113      	movs	r1, #19
 8012794:	f105 0010 	add.w	r0, r5, #16
 8012798:	2400      	movs	r4, #0
 801279a:	f000 f9a1 	bl	8012ae0 <core_set_error>
 801279e:	e70f      	b.n	80125c0 <ai_platform_network_process+0x34c>
 80127a0:	9d03      	ldr	r5, [sp, #12]
 80127a2:	4604      	mov	r4, r0
 80127a4:	2217      	movs	r2, #23
 80127a6:	2112      	movs	r1, #18
 80127a8:	f105 0010 	add.w	r0, r5, #16
 80127ac:	f000 f998 	bl	8012ae0 <core_set_error>
 80127b0:	e706      	b.n	80125c0 <ai_platform_network_process+0x34c>
 80127b2:	9d03      	ldr	r5, [sp, #12]
 80127b4:	2219      	movs	r2, #25
 80127b6:	2112      	movs	r1, #18
 80127b8:	2400      	movs	r4, #0
 80127ba:	f105 0010 	add.w	r0, r5, #16
 80127be:	f000 f98f 	bl	8012ae0 <core_set_error>
 80127c2:	e6fd      	b.n	80125c0 <ai_platform_network_process+0x34c>
 80127c4:	9d03      	ldr	r5, [sp, #12]
 80127c6:	4604      	mov	r4, r0
 80127c8:	2221      	movs	r2, #33	; 0x21
 80127ca:	2112      	movs	r1, #18
 80127cc:	f105 0010 	add.w	r0, r5, #16
 80127d0:	f000 f986 	bl	8012ae0 <core_set_error>
 80127d4:	e6f4      	b.n	80125c0 <ai_platform_network_process+0x34c>
 80127d6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80127da:	82ab      	strh	r3, [r5, #20]
 80127dc:	e742      	b.n	8012664 <ai_platform_network_process+0x3f0>
 80127de:	2700      	movs	r7, #0
 80127e0:	e745      	b.n	801266e <ai_platform_network_process+0x3fa>
 80127e2:	4604      	mov	r4, r0
 80127e4:	2217      	movs	r2, #23
 80127e6:	2113      	movs	r1, #19
 80127e8:	f105 0010 	add.w	r0, r5, #16
 80127ec:	f000 f978 	bl	8012ae0 <core_set_error>
 80127f0:	e6e6      	b.n	80125c0 <ai_platform_network_process+0x34c>
 80127f2:	2219      	movs	r2, #25
 80127f4:	2113      	movs	r1, #19
 80127f6:	f105 0010 	add.w	r0, r5, #16
 80127fa:	2400      	movs	r4, #0
 80127fc:	f000 f970 	bl	8012ae0 <core_set_error>
 8012800:	e6de      	b.n	80125c0 <ai_platform_network_process+0x34c>
 8012802:	4604      	mov	r4, r0
 8012804:	2221      	movs	r2, #33	; 0x21
 8012806:	2113      	movs	r1, #19
 8012808:	f105 0010 	add.w	r0, r5, #16
 801280c:	f000 f968 	bl	8012ae0 <core_set_error>
 8012810:	e6d6      	b.n	80125c0 <ai_platform_network_process+0x34c>
 8012812:	2217      	movs	r2, #23
 8012814:	2113      	movs	r1, #19
 8012816:	f105 0010 	add.w	r0, r5, #16
 801281a:	4654      	mov	r4, sl
 801281c:	f000 f960 	bl	8012ae0 <core_set_error>
 8012820:	e6ce      	b.n	80125c0 <ai_platform_network_process+0x34c>
 8012822:	bf00      	nop
 8012824:	58024000 	.word	0x58024000
 8012828:	f407a5c2 	.word	0xf407a5c2
 801282c:	b5e8b5cd 	.word	0xb5e8b5cd

08012830 <node_convert>:
 8012830:	6982      	ldr	r2, [r0, #24]
 8012832:	8813      	ldrh	r3, [r2, #0]
 8012834:	2b00      	cmp	r3, #0
 8012836:	d04a      	beq.n	80128ce <node_convert+0x9e>
 8012838:	6852      	ldr	r2, [r2, #4]
 801283a:	6850      	ldr	r0, [r2, #4]
 801283c:	b100      	cbz	r0, 8012840 <node_convert+0x10>
 801283e:	6800      	ldr	r0, [r0, #0]
 8012840:	2b01      	cmp	r3, #1
 8012842:	f000 813d 	beq.w	8012ac0 <node_convert+0x290>
 8012846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801284a:	6915      	ldr	r5, [r2, #16]
 801284c:	b105      	cbz	r5, 8012850 <node_convert+0x20>
 801284e:	682d      	ldr	r5, [r5, #0]
 8012850:	6883      	ldr	r3, [r0, #8]
 8012852:	0a1b      	lsrs	r3, r3, #8
 8012854:	f000 80ee 	beq.w	8012a34 <node_convert+0x204>
 8012858:	68c1      	ldr	r1, [r0, #12]
 801285a:	2401      	movs	r4, #1
 801285c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012860:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8012864:	4299      	cmp	r1, r3
 8012866:	fb02 f404 	mul.w	r4, r2, r4
 801286a:	d1f9      	bne.n	8012860 <node_convert+0x30>
 801286c:	6982      	ldr	r2, [r0, #24]
 801286e:	69af      	ldr	r7, [r5, #24]
 8012870:	6813      	ldr	r3, [r2, #0]
 8012872:	f3c3 4143 	ubfx	r1, r3, #17, #4
 8012876:	2901      	cmp	r1, #1
 8012878:	d02b      	beq.n	80128d2 <node_convert+0xa2>
 801287a:	6801      	ldr	r1, [r0, #0]
 801287c:	68bd      	ldr	r5, [r7, #8]
 801287e:	2900      	cmp	r1, #0
 8012880:	d069      	beq.n	8012956 <node_convert+0x126>
 8012882:	684e      	ldr	r6, [r1, #4]
 8012884:	f3c3 50c0 	ubfx	r0, r3, #23, #1
 8012888:	6892      	ldr	r2, [r2, #8]
 801288a:	2e00      	cmp	r6, #0
 801288c:	f000 80b8 	beq.w	8012a00 <node_convert+0x1d0>
 8012890:	884b      	ldrh	r3, [r1, #2]
 8012892:	2b00      	cmp	r3, #0
 8012894:	f000 8089 	beq.w	80129aa <node_convert+0x17a>
 8012898:	6833      	ldr	r3, [r6, #0]
 801289a:	ed93 7a00 	vldr	s14, [r3]
 801289e:	6873      	ldr	r3, [r6, #4]
 80128a0:	2800      	cmp	r0, #0
 80128a2:	f000 80c5 	beq.w	8012a30 <node_convert+0x200>
 80128a6:	f993 0000 	ldrsb.w	r0, [r3]
 80128aa:	b174      	cbz	r4, 80128ca <node_convert+0x9a>
 80128ac:	4629      	mov	r1, r5
 80128ae:	4414      	add	r4, r2
 80128b0:	f912 3b01 	ldrsb.w	r3, [r2], #1
 80128b4:	1a1b      	subs	r3, r3, r0
 80128b6:	42a2      	cmp	r2, r4
 80128b8:	ee07 3a90 	vmov	s15, r3
 80128bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80128c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80128c4:	ece1 7a01 	vstmia	r1!, {s15}
 80128c8:	d1f2      	bne.n	80128b0 <node_convert+0x80>
 80128ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128ce:	685b      	ldr	r3, [r3, #4]
 80128d0:	deff      	udf	#255	; 0xff
 80128d2:	682e      	ldr	r6, [r5, #0]
 80128d4:	6895      	ldr	r5, [r2, #8]
 80128d6:	2e00      	cmp	r6, #0
 80128d8:	f000 80ae 	beq.w	8012a38 <node_convert+0x208>
 80128dc:	683b      	ldr	r3, [r7, #0]
 80128de:	6871      	ldr	r1, [r6, #4]
 80128e0:	68ba      	ldr	r2, [r7, #8]
 80128e2:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 80128e6:	2900      	cmp	r1, #0
 80128e8:	d064      	beq.n	80129b4 <node_convert+0x184>
 80128ea:	8870      	ldrh	r0, [r6, #2]
 80128ec:	2800      	cmp	r0, #0
 80128ee:	d067      	beq.n	80129c0 <node_convert+0x190>
 80128f0:	6808      	ldr	r0, [r1, #0]
 80128f2:	edd0 7a00 	vldr	s15, [r0]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	f000 80d7 	beq.w	8012aaa <node_convert+0x27a>
 80128fc:	684b      	ldr	r3, [r1, #4]
 80128fe:	f993 3000 	ldrsb.w	r3, [r3]
 8012902:	ee06 3a90 	vmov	s13, r3
 8012906:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801290a:	2c00      	cmp	r4, #0
 801290c:	d0dd      	beq.n	80128ca <node_convert+0x9a>
 801290e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012912:	4414      	add	r4, r2
 8012914:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8012918:	ed9f 5a6b 	vldr	s10, [pc, #428]	; 8012ac8 <node_convert+0x298>
 801291c:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8012920:	ecb5 7a01 	vldmia	r5!, {s14}
 8012924:	eef0 7a66 	vmov.f32	s15, s13
 8012928:	eee7 7a06 	vfma.f32	s15, s14, s12
 801292c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012934:	bfac      	ite	ge
 8012936:	ee77 7aa5 	vaddge.f32	s15, s15, s11
 801293a:	ee77 7ac5 	vsublt.f32	s15, s15, s10
 801293e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012942:	ee17 3a90 	vmov	r3, s15
 8012946:	f303 0307 	ssat	r3, #8, r3
 801294a:	f802 3b01 	strb.w	r3, [r2], #1
 801294e:	42a2      	cmp	r2, r4
 8012950:	d1e6      	bne.n	8012920 <node_convert+0xf0>
 8012952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012956:	f3c3 11c6 	ubfx	r1, r3, #7, #7
 801295a:	f003 067f 	and.w	r6, r3, #127	; 0x7f
 801295e:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 8012962:	6890      	ldr	r0, [r2, #8]
 8012964:	1b8e      	subs	r6, r1, r6
 8012966:	2908      	cmp	r1, #8
 8012968:	4622      	mov	r2, r4
 801296a:	4629      	mov	r1, r5
 801296c:	f106 0640 	add.w	r6, r6, #64	; 0x40
 8012970:	eba6 0603 	sub.w	r6, r6, r3
 8012974:	f000 808b 	beq.w	8012a8e <node_convert+0x25e>
 8012978:	f004 fe94 	bl	80176a4 <arm_q15_to_float>
 801297c:	2e00      	cmp	r6, #0
 801297e:	d0a4      	beq.n	80128ca <node_convert+0x9a>
 8012980:	ee07 6a90 	vmov	s15, r6
 8012984:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8012988:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801298c:	f006 fad4 	bl	8018f38 <powf>
 8012990:	2c00      	cmp	r4, #0
 8012992:	d09a      	beq.n	80128ca <node_convert+0x9a>
 8012994:	2300      	movs	r3, #0
 8012996:	ecf5 7a01 	vldmia	r5!, {s15}
 801299a:	3301      	adds	r3, #1
 801299c:	ee67 7a80 	vmul.f32	s15, s15, s0
 80129a0:	429c      	cmp	r4, r3
 80129a2:	ed45 7a01 	vstr	s15, [r5, #-4]
 80129a6:	d1f6      	bne.n	8012996 <node_convert+0x166>
 80129a8:	e78f      	b.n	80128ca <node_convert+0x9a>
 80129aa:	b358      	cbz	r0, 8012a04 <node_convert+0x1d4>
 80129ac:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8012acc <node_convert+0x29c>
 80129b0:	4618      	mov	r0, r3
 80129b2:	e77a      	b.n	80128aa <node_convert+0x7a>
 80129b4:	b133      	cbz	r3, 80129c4 <node_convert+0x194>
 80129b6:	eddf 6a45 	vldr	s13, [pc, #276]	; 8012acc <node_convert+0x29c>
 80129ba:	eef0 7a66 	vmov.f32	s15, s13
 80129be:	e7a4      	b.n	801290a <node_convert+0xda>
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d1f8      	bne.n	80129b6 <node_convert+0x186>
 80129c4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80129c8:	eddf 7a40 	vldr	s15, [pc, #256]	; 8012acc <node_convert+0x29c>
 80129cc:	2c00      	cmp	r4, #0
 80129ce:	f43f af7c 	beq.w	80128ca <node_convert+0x9a>
 80129d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80129d6:	4414      	add	r4, r2
 80129d8:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80129dc:	ecb5 7a01 	vldmia	r5!, {s14}
 80129e0:	eef0 7a66 	vmov.f32	s15, s13
 80129e4:	eee7 7a06 	vfma.f32	s15, s14, s12
 80129e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80129ec:	ee17 3a90 	vmov	r3, s15
 80129f0:	f383 0308 	usat	r3, #8, r3
 80129f4:	f802 3b01 	strb.w	r3, [r2], #1
 80129f8:	42a2      	cmp	r2, r4
 80129fa:	d1ef      	bne.n	80129dc <node_convert+0x1ac>
 80129fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a00:	2800      	cmp	r0, #0
 8012a02:	d147      	bne.n	8012a94 <node_convert+0x264>
 8012a04:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8012acc <node_convert+0x29c>
 8012a08:	2c00      	cmp	r4, #0
 8012a0a:	f43f af5e 	beq.w	80128ca <node_convert+0x9a>
 8012a0e:	4629      	mov	r1, r5
 8012a10:	4414      	add	r4, r2
 8012a12:	f812 3b01 	ldrb.w	r3, [r2], #1
 8012a16:	1a1b      	subs	r3, r3, r0
 8012a18:	42a2      	cmp	r2, r4
 8012a1a:	ee07 3a90 	vmov	s15, r3
 8012a1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012a22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012a26:	ece1 7a01 	vstmia	r1!, {s15}
 8012a2a:	d1f2      	bne.n	8012a12 <node_convert+0x1e2>
 8012a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a30:	7818      	ldrb	r0, [r3, #0]
 8012a32:	e7e9      	b.n	8012a08 <node_convert+0x1d8>
 8012a34:	2401      	movs	r4, #1
 8012a36:	e719      	b.n	801286c <node_convert+0x3c>
 8012a38:	683a      	ldr	r2, [r7, #0]
 8012a3a:	f3c2 18c6 	ubfx	r8, r2, #7, #7
 8012a3e:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 8012a42:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 8012a46:	eba8 0303 	sub.w	r3, r8, r3
 8012a4a:	3340      	adds	r3, #64	; 0x40
 8012a4c:	1a9b      	subs	r3, r3, r2
 8012a4e:	d014      	beq.n	8012a7a <node_convert+0x24a>
 8012a50:	425b      	negs	r3, r3
 8012a52:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8012a56:	ee00 3a90 	vmov	s1, r3
 8012a5a:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8012a5e:	f006 fa6b 	bl	8018f38 <powf>
 8012a62:	b154      	cbz	r4, 8012a7a <node_convert+0x24a>
 8012a64:	4633      	mov	r3, r6
 8012a66:	462a      	mov	r2, r5
 8012a68:	ecf2 7a01 	vldmia	r2!, {s15}
 8012a6c:	3301      	adds	r3, #1
 8012a6e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8012a72:	42a3      	cmp	r3, r4
 8012a74:	ed42 7a01 	vstr	s15, [r2, #-4]
 8012a78:	d1f6      	bne.n	8012a68 <node_convert+0x238>
 8012a7a:	f1b8 0f08 	cmp.w	r8, #8
 8012a7e:	d00d      	beq.n	8012a9c <node_convert+0x26c>
 8012a80:	4622      	mov	r2, r4
 8012a82:	68b9      	ldr	r1, [r7, #8]
 8012a84:	4628      	mov	r0, r5
 8012a86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a8a:	f004 bc89 	b.w	80173a0 <arm_float_to_q15>
 8012a8e:	f004 fe6f 	bl	8017770 <arm_q7_to_float>
 8012a92:	e773      	b.n	801297c <node_convert+0x14c>
 8012a94:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8012acc <node_convert+0x29c>
 8012a98:	4630      	mov	r0, r6
 8012a9a:	e706      	b.n	80128aa <node_convert+0x7a>
 8012a9c:	4622      	mov	r2, r4
 8012a9e:	68b9      	ldr	r1, [r7, #8]
 8012aa0:	4628      	mov	r0, r5
 8012aa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012aa6:	f004 bd31 	b.w	801750c <arm_float_to_q7>
 8012aaa:	684b      	ldr	r3, [r1, #4]
 8012aac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012ab0:	781b      	ldrb	r3, [r3, #0]
 8012ab2:	ee06 3a90 	vmov	s13, r3
 8012ab6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8012aba:	ee76 6a87 	vadd.f32	s13, s13, s14
 8012abe:	e785      	b.n	80129cc <node_convert+0x19c>
 8012ac0:	2300      	movs	r3, #0
 8012ac2:	685b      	ldr	r3, [r3, #4]
 8012ac4:	deff      	udf	#255	; 0xff
 8012ac6:	bf00      	nop
 8012ac8:	3efffffc 	.word	0x3efffffc
 8012acc:	00000000 	.word	0x00000000

08012ad0 <core_init>:
 8012ad0:	2001      	movs	r0, #1
 8012ad2:	4770      	bx	lr

08012ad4 <core_get_error>:
 8012ad4:	4603      	mov	r3, r0
 8012ad6:	2200      	movs	r2, #0
 8012ad8:	6800      	ldr	r0, [r0, #0]
 8012ada:	601a      	str	r2, [r3, #0]
 8012adc:	4770      	bx	lr
 8012ade:	bf00      	nop

08012ae0 <core_set_error>:
 8012ae0:	4603      	mov	r3, r0
 8012ae2:	7800      	ldrb	r0, [r0, #0]
 8012ae4:	b108      	cbz	r0, 8012aea <core_set_error+0xa>
 8012ae6:	2000      	movs	r0, #0
 8012ae8:	4770      	bx	lr
 8012aea:	7019      	strb	r1, [r3, #0]
 8012aec:	2001      	movs	r0, #1
 8012aee:	6819      	ldr	r1, [r3, #0]
 8012af0:	f362 211f 	bfi	r1, r2, #8, #24
 8012af4:	6019      	str	r1, [r3, #0]
 8012af6:	4770      	bx	lr

08012af8 <forward_sm>:
 8012af8:	6982      	ldr	r2, [r0, #24]
 8012afa:	8813      	ldrh	r3, [r2, #0]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d078      	beq.n	8012bf2 <forward_sm+0xfa>
 8012b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b04:	ed2d 8b04 	vpush	{d8-d9}
 8012b08:	6852      	ldr	r2, [r2, #4]
 8012b0a:	b085      	sub	sp, #20
 8012b0c:	6854      	ldr	r4, [r2, #4]
 8012b0e:	b104      	cbz	r4, 8012b12 <forward_sm+0x1a>
 8012b10:	6824      	ldr	r4, [r4, #0]
 8012b12:	2b01      	cmp	r3, #1
 8012b14:	d072      	beq.n	8012bfc <forward_sm+0x104>
 8012b16:	6913      	ldr	r3, [r2, #16]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d072      	beq.n	8012c02 <forward_sm+0x10a>
 8012b1c:	681e      	ldr	r6, [r3, #0]
 8012b1e:	68a3      	ldr	r3, [r4, #8]
 8012b20:	68e0      	ldr	r0, [r4, #12]
 8012b22:	68f2      	ldr	r2, [r6, #12]
 8012b24:	0a1b      	lsrs	r3, r3, #8
 8012b26:	6845      	ldr	r5, [r0, #4]
 8012b28:	6857      	ldr	r7, [r2, #4]
 8012b2a:	d064      	beq.n	8012bf6 <forward_sm+0xfe>
 8012b2c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8012b30:	2201      	movs	r2, #1
 8012b32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012b36:	4298      	cmp	r0, r3
 8012b38:	fb01 f202 	mul.w	r2, r1, r2
 8012b3c:	d1f9      	bne.n	8012b32 <forward_sm+0x3a>
 8012b3e:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8012b42:	69a2      	ldr	r2, [r4, #24]
 8012b44:	69b3      	ldr	r3, [r6, #24]
 8012b46:	6892      	ldr	r2, [r2, #8]
 8012b48:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8012b4c:	eb02 0309 	add.w	r3, r2, r9
 8012b50:	429a      	cmp	r2, r3
 8012b52:	9301      	str	r3, [sp, #4]
 8012b54:	d248      	bcs.n	8012be8 <forward_sm+0xf0>
 8012b56:	00bb      	lsls	r3, r7, #2
 8012b58:	2d01      	cmp	r5, #1
 8012b5a:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 8012b5e:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8012b62:	9303      	str	r3, [sp, #12]
 8012b64:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8012b68:	463e      	mov	r6, r7
 8012b6a:	ed92 8a00 	vldr	s16, [r2]
 8012b6e:	9302      	str	r3, [sp, #8]
 8012b70:	d937      	bls.n	8012be2 <forward_sm+0xea>
 8012b72:	1d13      	adds	r3, r2, #4
 8012b74:	ecf3 7a01 	vldmia	r3!, {s15}
 8012b78:	429e      	cmp	r6, r3
 8012b7a:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 8012b7e:	d1f9      	bne.n	8012b74 <forward_sm+0x7c>
 8012b80:	4692      	mov	sl, r2
 8012b82:	46c3      	mov	fp, r8
 8012b84:	46c1      	mov	r9, r8
 8012b86:	eddf 8a20 	vldr	s17, [pc, #128]	; 8012c08 <forward_sm+0x110>
 8012b8a:	2400      	movs	r4, #0
 8012b8c:	ecba 0a01 	vldmia	sl!, {s0}
 8012b90:	3401      	adds	r4, #1
 8012b92:	ee30 0a48 	vsub.f32	s0, s0, s16
 8012b96:	f006 f943 	bl	8018e20 <expf>
 8012b9a:	42a5      	cmp	r5, r4
 8012b9c:	ee78 8a80 	vadd.f32	s17, s17, s0
 8012ba0:	eca9 0a01 	vstmia	r9!, {s0}
 8012ba4:	d8f2      	bhi.n	8012b8c <forward_sm+0x94>
 8012ba6:	eef5 8a40 	vcmp.f32	s17, #0.0
 8012baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bae:	d00b      	beq.n	8012bc8 <forward_sm+0xd0>
 8012bb0:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	eddb 7a00 	vldr	s15, [fp]
 8012bba:	3301      	adds	r3, #1
 8012bbc:	429d      	cmp	r5, r3
 8012bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012bc2:	eceb 7a01 	vstmia	fp!, {s15}
 8012bc6:	d8f6      	bhi.n	8012bb6 <forward_sm+0xbe>
 8012bc8:	9b03      	ldr	r3, [sp, #12]
 8012bca:	463a      	mov	r2, r7
 8012bcc:	9901      	ldr	r1, [sp, #4]
 8012bce:	4498      	add	r8, r3
 8012bd0:	9b02      	ldr	r3, [sp, #8]
 8012bd2:	42b9      	cmp	r1, r7
 8012bd4:	441e      	add	r6, r3
 8012bd6:	d907      	bls.n	8012be8 <forward_sm+0xf0>
 8012bd8:	2d01      	cmp	r5, #1
 8012bda:	441f      	add	r7, r3
 8012bdc:	ed92 8a00 	vldr	s16, [r2]
 8012be0:	d8c7      	bhi.n	8012b72 <forward_sm+0x7a>
 8012be2:	2d00      	cmp	r5, #0
 8012be4:	d0f0      	beq.n	8012bc8 <forward_sm+0xd0>
 8012be6:	e7cb      	b.n	8012b80 <forward_sm+0x88>
 8012be8:	b005      	add	sp, #20
 8012bea:	ecbd 8b04 	vpop	{d8-d9}
 8012bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bf2:	685b      	ldr	r3, [r3, #4]
 8012bf4:	deff      	udf	#255	; 0xff
 8012bf6:	f04f 0904 	mov.w	r9, #4
 8012bfa:	e7a2      	b.n	8012b42 <forward_sm+0x4a>
 8012bfc:	2300      	movs	r3, #0
 8012bfe:	685b      	ldr	r3, [r3, #4]
 8012c00:	deff      	udf	#255	; 0xff
 8012c02:	68db      	ldr	r3, [r3, #12]
 8012c04:	deff      	udf	#255	; 0xff
 8012c06:	bf00      	nop
 8012c08:	00000000 	.word	0x00000000

08012c0c <forward_pad>:
 8012c0c:	6982      	ldr	r2, [r0, #24]
 8012c0e:	8813      	ldrh	r3, [r2, #0]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d052      	beq.n	8012cba <forward_pad+0xae>
 8012c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c18:	ed2d 8b02 	vpush	{d8}
 8012c1c:	6852      	ldr	r2, [r2, #4]
 8012c1e:	b091      	sub	sp, #68	; 0x44
 8012c20:	6857      	ldr	r7, [r2, #4]
 8012c22:	b107      	cbz	r7, 8012c26 <forward_pad+0x1a>
 8012c24:	683f      	ldr	r7, [r7, #0]
 8012c26:	2b01      	cmp	r3, #1
 8012c28:	f000 81e7 	beq.w	8012ffa <forward_pad+0x3ee>
 8012c2c:	6913      	ldr	r3, [r2, #16]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	f000 81e1 	beq.w	8012ff6 <forward_pad+0x3ea>
 8012c34:	681d      	ldr	r5, [r3, #0]
 8012c36:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8012c3a:	68aa      	ldr	r2, [r5, #8]
 8012c3c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012c3e:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8012c42:	f8de 100c 	ldr.w	r1, [lr, #12]
 8012c46:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8012c4a:	bf38      	it	cc
 8012c4c:	2201      	movcc	r2, #1
 8012c4e:	9102      	str	r1, [sp, #8]
 8012c50:	bf28      	it	cs
 8012c52:	f8da 2010 	ldrcs.w	r2, [sl, #16]
 8012c56:	f9b6 1000 	ldrsh.w	r1, [r6]
 8012c5a:	f9b6 4008 	ldrsh.w	r4, [r6, #8]
 8012c5e:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8012c62:	9103      	str	r1, [sp, #12]
 8012c64:	9201      	str	r2, [sp, #4]
 8012c66:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 8012c6a:	7f03      	ldrb	r3, [r0, #28]
 8012c6c:	e9d5 6205 	ldrd	r6, r2, [r5, #20]
 8012c70:	2b01      	cmp	r3, #1
 8012c72:	6895      	ldr	r5, [r2, #8]
 8012c74:	f8d6 b008 	ldr.w	fp, [r6, #8]
 8012c78:	e9d7 2c05 	ldrd	r2, ip, [r7, #20]
 8012c7c:	68f7      	ldr	r7, [r6, #12]
 8012c7e:	f8dc 8008 	ldr.w	r8, [ip, #8]
 8012c82:	fb07 f404 	mul.w	r4, r7, r4
 8012c86:	463e      	mov	r6, r7
 8012c88:	9708      	str	r7, [sp, #32]
 8012c8a:	9f03      	ldr	r7, [sp, #12]
 8012c8c:	940d      	str	r4, [sp, #52]	; 0x34
 8012c8e:	fb06 f607 	mul.w	r6, r6, r7
 8012c92:	68d4      	ldr	r4, [r2, #12]
 8012c94:	fb0b f709 	mul.w	r7, fp, r9
 8012c98:	9405      	str	r4, [sp, #20]
 8012c9a:	960c      	str	r6, [sp, #48]	; 0x30
 8012c9c:	6894      	ldr	r4, [r2, #8]
 8012c9e:	fb0b f601 	mul.w	r6, fp, r1
 8012ca2:	d00c      	beq.n	8012cbe <forward_pad+0xb2>
 8012ca4:	2b02      	cmp	r3, #2
 8012ca6:	f000 8106 	beq.w	8012eb6 <forward_pad+0x2aa>
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	f000 80a8 	beq.w	8012e00 <forward_pad+0x1f4>
 8012cb0:	b011      	add	sp, #68	; 0x44
 8012cb2:	ecbd 8b02 	vpop	{d8}
 8012cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cba:	685b      	ldr	r3, [r3, #4]
 8012cbc:	deff      	udf	#255	; 0xff
 8012cbe:	f8da 300c 	ldr.w	r3, [sl, #12]
 8012cc2:	930e      	str	r3, [sp, #56]	; 0x38
 8012cc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012cc6:	eb05 0903 	add.w	r9, r5, r3
 8012cca:	9b02      	ldr	r3, [sp, #8]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	dd6a      	ble.n	8012da6 <forward_pad+0x19a>
 8012cd0:	f8de 3008 	ldr.w	r3, [lr, #8]
 8012cd4:	ee08 8a10 	vmov	s16, r8
 8012cd8:	9805      	ldr	r0, [sp, #20]
 8012cda:	4419      	add	r1, r3
 8012cdc:	f8da 2008 	ldr.w	r2, [sl, #8]
 8012ce0:	4407      	add	r7, r0
 8012ce2:	9801      	ldr	r0, [sp, #4]
 8012ce4:	950f      	str	r5, [sp, #60]	; 0x3c
 8012ce6:	fb01 f000 	mul.w	r0, r1, r0
 8012cea:	4601      	mov	r1, r0
 8012cec:	9007      	str	r0, [sp, #28]
 8012cee:	19b8      	adds	r0, r7, r6
 8012cf0:	900a      	str	r0, [sp, #40]	; 0x28
 8012cf2:	eb09 0006 	add.w	r0, r9, r6
 8012cf6:	9e03      	ldr	r6, [sp, #12]
 8012cf8:	9001      	str	r0, [sp, #4]
 8012cfa:	4608      	mov	r0, r1
 8012cfc:	4611      	mov	r1, r2
 8012cfe:	fb02 0206 	mla	r2, r2, r6, r0
 8012d02:	460f      	mov	r7, r1
 8012d04:	fb0b 5202 	mla	r2, fp, r2, r5
 8012d08:	9204      	str	r2, [sp, #16]
 8012d0a:	1e9a      	subs	r2, r3, #2
 8012d0c:	fb04 f303 	mul.w	r3, r4, r3
 8012d10:	930b      	str	r3, [sp, #44]	; 0x2c
 8012d12:	fb04 8302 	mla	r3, r4, r2, r8
 8012d16:	9303      	str	r3, [sp, #12]
 8012d18:	fb0b f301 	mul.w	r3, fp, r1
 8012d1c:	9309      	str	r3, [sp, #36]	; 0x24
 8012d1e:	2300      	movs	r3, #0
 8012d20:	9306      	str	r3, [sp, #24]
 8012d22:	f1cb 0300 	rsb	r3, fp, #0
 8012d26:	4698      	mov	r8, r3
 8012d28:	9b01      	ldr	r3, [sp, #4]
 8012d2a:	454b      	cmp	r3, r9
 8012d2c:	d00b      	beq.n	8012d46 <forward_pad+0x13a>
 8012d2e:	ee18 5a10 	vmov	r5, s16
 8012d32:	4443      	add	r3, r8
 8012d34:	4425      	add	r5, r4
 8012d36:	4622      	mov	r2, r4
 8012d38:	4618      	mov	r0, r3
 8012d3a:	4629      	mov	r1, r5
 8012d3c:	f004 ff48 	bl	8017bd0 <memcpy>
 8012d40:	4548      	cmp	r0, r9
 8012d42:	4603      	mov	r3, r0
 8012d44:	d1f5      	bne.n	8012d32 <forward_pad+0x126>
 8012d46:	ee18 3a10 	vmov	r3, s16
 8012d4a:	9a05      	ldr	r2, [sp, #20]
 8012d4c:	ee18 1a10 	vmov	r1, s16
 8012d50:	9801      	ldr	r0, [sp, #4]
 8012d52:	4413      	add	r3, r2
 8012d54:	ee08 3a10 	vmov	s16, r3
 8012d58:	f004 ff3a 	bl	8017bd0 <memcpy>
 8012d5c:	9b07      	ldr	r3, [sp, #28]
 8012d5e:	429f      	cmp	r7, r3
 8012d60:	dd0d      	ble.n	8012d7e <forward_pad+0x172>
 8012d62:	461d      	mov	r5, r3
 8012d64:	e9dd a603 	ldrd	sl, r6, [sp, #12]
 8012d68:	3501      	adds	r5, #1
 8012d6a:	4651      	mov	r1, sl
 8012d6c:	4630      	mov	r0, r6
 8012d6e:	4622      	mov	r2, r4
 8012d70:	f004 ff2e 	bl	8017bd0 <memcpy>
 8012d74:	42af      	cmp	r7, r5
 8012d76:	ebaa 0a04 	sub.w	sl, sl, r4
 8012d7a:	445e      	add	r6, fp
 8012d7c:	d1f4      	bne.n	8012d68 <forward_pad+0x15c>
 8012d7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012d80:	9901      	ldr	r1, [sp, #4]
 8012d82:	4491      	add	r9, r2
 8012d84:	9b06      	ldr	r3, [sp, #24]
 8012d86:	4411      	add	r1, r2
 8012d88:	9a04      	ldr	r2, [sp, #16]
 8012d8a:	3301      	adds	r3, #1
 8012d8c:	9101      	str	r1, [sp, #4]
 8012d8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012d90:	9306      	str	r3, [sp, #24]
 8012d92:	440a      	add	r2, r1
 8012d94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012d96:	9204      	str	r2, [sp, #16]
 8012d98:	9a03      	ldr	r2, [sp, #12]
 8012d9a:	440a      	add	r2, r1
 8012d9c:	9203      	str	r2, [sp, #12]
 8012d9e:	9a02      	ldr	r2, [sp, #8]
 8012da0:	429a      	cmp	r2, r3
 8012da2:	d1c1      	bne.n	8012d28 <forward_pad+0x11c>
 8012da4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012da6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012da8:	eb05 0443 	add.w	r4, r5, r3, lsl #1
 8012dac:	42a5      	cmp	r5, r4
 8012dae:	d00c      	beq.n	8012dca <forward_pad+0x1be>
 8012db0:	9b08      	ldr	r3, [sp, #32]
 8012db2:	462e      	mov	r6, r5
 8012db4:	425f      	negs	r7, r3
 8012db6:	4698      	mov	r8, r3
 8012db8:	4621      	mov	r1, r4
 8012dba:	4630      	mov	r0, r6
 8012dbc:	443c      	add	r4, r7
 8012dbe:	4446      	add	r6, r8
 8012dc0:	4642      	mov	r2, r8
 8012dc2:	f004 ff05 	bl	8017bd0 <memcpy>
 8012dc6:	42a6      	cmp	r6, r4
 8012dc8:	d1f6      	bne.n	8012db8 <forward_pad+0x1ac>
 8012dca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012dcc:	9a08      	ldr	r2, [sp, #32]
 8012dce:	3b01      	subs	r3, #1
 8012dd0:	fb02 5503 	mla	r5, r2, r3, r5
 8012dd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012dd6:	eba5 0443 	sub.w	r4, r5, r3, lsl #1
 8012dda:	42a5      	cmp	r5, r4
 8012ddc:	f43f af68 	beq.w	8012cb0 <forward_pad+0xa4>
 8012de0:	4617      	mov	r7, r2
 8012de2:	4256      	negs	r6, r2
 8012de4:	4621      	mov	r1, r4
 8012de6:	4628      	mov	r0, r5
 8012de8:	443c      	add	r4, r7
 8012dea:	4435      	add	r5, r6
 8012dec:	463a      	mov	r2, r7
 8012dee:	f004 feef 	bl	8017bd0 <memcpy>
 8012df2:	42a5      	cmp	r5, r4
 8012df4:	d1f6      	bne.n	8012de4 <forward_pad+0x1d8>
 8012df6:	b011      	add	sp, #68	; 0x44
 8012df8:	ecbd 8b02 	vpop	{d8}
 8012dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e00:	f8dc 1000 	ldr.w	r1, [ip]
 8012e04:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012e06:	f3c1 11c6 	ubfx	r1, r1, #7, #7
 8012e0a:	2908      	cmp	r1, #8
 8012e0c:	f000 80b5 	beq.w	8012f7a <forward_pad+0x36e>
 8012e10:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8012e14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012e16:	2a00      	cmp	r2, #0
 8012e18:	dd0a      	ble.n	8012e30 <forward_pad+0x224>
 8012e1a:	4693      	mov	fp, r2
 8012e1c:	469a      	mov	sl, r3
 8012e1e:	44ca      	add	sl, r9
 8012e20:	4628      	mov	r0, r5
 8012e22:	464a      	mov	r2, r9
 8012e24:	68a1      	ldr	r1, [r4, #8]
 8012e26:	f004 fed3 	bl	8017bd0 <memcpy>
 8012e2a:	45d3      	cmp	fp, sl
 8012e2c:	444d      	add	r5, r9
 8012e2e:	dcf6      	bgt.n	8012e1e <forward_pad+0x212>
 8012e30:	9b02      	ldr	r3, [sp, #8]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	dd2c      	ble.n	8012e90 <forward_pad+0x284>
 8012e36:	f04f 0a00 	mov.w	sl, #0
 8012e3a:	f8dd b014 	ldr.w	fp, [sp, #20]
 8012e3e:	f8cd a004 	str.w	sl, [sp, #4]
 8012e42:	2e00      	cmp	r6, #0
 8012e44:	dd0a      	ble.n	8012e5c <forward_pad+0x250>
 8012e46:	f04f 0a00 	mov.w	sl, #0
 8012e4a:	44ca      	add	sl, r9
 8012e4c:	4628      	mov	r0, r5
 8012e4e:	464a      	mov	r2, r9
 8012e50:	68a1      	ldr	r1, [r4, #8]
 8012e52:	f004 febd 	bl	8017bd0 <memcpy>
 8012e56:	4556      	cmp	r6, sl
 8012e58:	444d      	add	r5, r9
 8012e5a:	dcf6      	bgt.n	8012e4a <forward_pad+0x23e>
 8012e5c:	4641      	mov	r1, r8
 8012e5e:	4628      	mov	r0, r5
 8012e60:	465a      	mov	r2, fp
 8012e62:	44d8      	add	r8, fp
 8012e64:	f004 feb4 	bl	8017bd0 <memcpy>
 8012e68:	2f00      	cmp	r7, #0
 8012e6a:	445d      	add	r5, fp
 8012e6c:	dd0a      	ble.n	8012e84 <forward_pad+0x278>
 8012e6e:	f04f 0a00 	mov.w	sl, #0
 8012e72:	44ca      	add	sl, r9
 8012e74:	4628      	mov	r0, r5
 8012e76:	464a      	mov	r2, r9
 8012e78:	68a1      	ldr	r1, [r4, #8]
 8012e7a:	f004 fea9 	bl	8017bd0 <memcpy>
 8012e7e:	4557      	cmp	r7, sl
 8012e80:	444d      	add	r5, r9
 8012e82:	dcf6      	bgt.n	8012e72 <forward_pad+0x266>
 8012e84:	9b01      	ldr	r3, [sp, #4]
 8012e86:	9a02      	ldr	r2, [sp, #8]
 8012e88:	3301      	adds	r3, #1
 8012e8a:	429a      	cmp	r2, r3
 8012e8c:	9301      	str	r3, [sp, #4]
 8012e8e:	d1d8      	bne.n	8012e42 <forward_pad+0x236>
 8012e90:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8012e92:	2f00      	cmp	r7, #0
 8012e94:	f77f af0c 	ble.w	8012cb0 <forward_pad+0xa4>
 8012e98:	2600      	movs	r6, #0
 8012e9a:	444e      	add	r6, r9
 8012e9c:	4628      	mov	r0, r5
 8012e9e:	464a      	mov	r2, r9
 8012ea0:	68a1      	ldr	r1, [r4, #8]
 8012ea2:	f004 fe95 	bl	8017bd0 <memcpy>
 8012ea6:	42b7      	cmp	r7, r6
 8012ea8:	444d      	add	r5, r9
 8012eaa:	dcf6      	bgt.n	8012e9a <forward_pad+0x28e>
 8012eac:	b011      	add	sp, #68	; 0x44
 8012eae:	ecbd 8b02 	vpop	{d8}
 8012eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012eb6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8012eb8:	9b02      	ldr	r3, [sp, #8]
 8012eba:	442f      	add	r7, r5
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	9706      	str	r7, [sp, #24]
 8012ec0:	dd32      	ble.n	8012f28 <forward_pad+0x31c>
 8012ec2:	fb04 f309 	mul.w	r3, r4, r9
 8012ec6:	9507      	str	r5, [sp, #28]
 8012ec8:	9304      	str	r3, [sp, #16]
 8012eca:	2300      	movs	r3, #0
 8012ecc:	9301      	str	r3, [sp, #4]
 8012ece:	2e00      	cmp	r6, #0
 8012ed0:	dd09      	ble.n	8012ee6 <forward_pad+0x2da>
 8012ed2:	2500      	movs	r5, #0
 8012ed4:	4425      	add	r5, r4
 8012ed6:	4638      	mov	r0, r7
 8012ed8:	4622      	mov	r2, r4
 8012eda:	4641      	mov	r1, r8
 8012edc:	f004 fe78 	bl	8017bd0 <memcpy>
 8012ee0:	42ae      	cmp	r6, r5
 8012ee2:	4427      	add	r7, r4
 8012ee4:	dcf6      	bgt.n	8012ed4 <forward_pad+0x2c8>
 8012ee6:	9b05      	ldr	r3, [sp, #20]
 8012ee8:	4641      	mov	r1, r8
 8012eea:	4638      	mov	r0, r7
 8012eec:	461a      	mov	r2, r3
 8012eee:	4498      	add	r8, r3
 8012ef0:	441f      	add	r7, r3
 8012ef2:	f004 fe6d 	bl	8017bd0 <memcpy>
 8012ef6:	f1b9 0f00 	cmp.w	r9, #0
 8012efa:	eba8 0a04 	sub.w	sl, r8, r4
 8012efe:	dd0c      	ble.n	8012f1a <forward_pad+0x30e>
 8012f00:	46bb      	mov	fp, r7
 8012f02:	2500      	movs	r5, #0
 8012f04:	3501      	adds	r5, #1
 8012f06:	4658      	mov	r0, fp
 8012f08:	4622      	mov	r2, r4
 8012f0a:	4651      	mov	r1, sl
 8012f0c:	f004 fe60 	bl	8017bd0 <memcpy>
 8012f10:	45a9      	cmp	r9, r5
 8012f12:	44a3      	add	fp, r4
 8012f14:	d1f6      	bne.n	8012f04 <forward_pad+0x2f8>
 8012f16:	9b04      	ldr	r3, [sp, #16]
 8012f18:	441f      	add	r7, r3
 8012f1a:	9b01      	ldr	r3, [sp, #4]
 8012f1c:	9a02      	ldr	r2, [sp, #8]
 8012f1e:	3301      	adds	r3, #1
 8012f20:	429a      	cmp	r2, r3
 8012f22:	9301      	str	r3, [sp, #4]
 8012f24:	d1d3      	bne.n	8012ece <forward_pad+0x2c2>
 8012f26:	9d07      	ldr	r5, [sp, #28]
 8012f28:	9b06      	ldr	r3, [sp, #24]
 8012f2a:	429d      	cmp	r5, r3
 8012f2c:	d00a      	beq.n	8012f44 <forward_pad+0x338>
 8012f2e:	461f      	mov	r7, r3
 8012f30:	462c      	mov	r4, r5
 8012f32:	9e08      	ldr	r6, [sp, #32]
 8012f34:	4620      	mov	r0, r4
 8012f36:	4434      	add	r4, r6
 8012f38:	4632      	mov	r2, r6
 8012f3a:	4639      	mov	r1, r7
 8012f3c:	f004 fe48 	bl	8017bd0 <memcpy>
 8012f40:	42a7      	cmp	r7, r4
 8012f42:	d1f7      	bne.n	8012f34 <forward_pad+0x328>
 8012f44:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8012f46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012f4a:	4413      	add	r3, r2
 8012f4c:	9a08      	ldr	r2, [sp, #32]
 8012f4e:	3b01      	subs	r3, #1
 8012f50:	fb02 5503 	mla	r5, r2, r3, r5
 8012f54:	442c      	add	r4, r5
 8012f56:	42a5      	cmp	r5, r4
 8012f58:	f43f aeaa 	beq.w	8012cb0 <forward_pad+0xa4>
 8012f5c:	4617      	mov	r7, r2
 8012f5e:	4256      	negs	r6, r2
 8012f60:	4620      	mov	r0, r4
 8012f62:	4434      	add	r4, r6
 8012f64:	463a      	mov	r2, r7
 8012f66:	4629      	mov	r1, r5
 8012f68:	f004 fe32 	bl	8017bd0 <memcpy>
 8012f6c:	42a5      	cmp	r5, r4
 8012f6e:	d1f7      	bne.n	8012f60 <forward_pad+0x354>
 8012f70:	b011      	add	sp, #68	; 0x44
 8012f72:	ecbd 8b02 	vpop	{d8}
 8012f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f7a:	68a2      	ldr	r2, [r4, #8]
 8012f7c:	4629      	mov	r1, r5
 8012f7e:	9301      	str	r3, [sp, #4]
 8012f80:	f992 9000 	ldrsb.w	r9, [r2]
 8012f84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012f86:	4648      	mov	r0, r9
 8012f88:	18ac      	adds	r4, r5, r2
 8012f8a:	9403      	str	r4, [sp, #12]
 8012f8c:	f003 fbf8 	bl	8016780 <st_int8_fill>
 8012f90:	9b02      	ldr	r3, [sp, #8]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	dd25      	ble.n	8012fe2 <forward_pad+0x3d6>
 8012f96:	9b01      	ldr	r3, [sp, #4]
 8012f98:	eb06 0a07 	add.w	sl, r6, r7
 8012f9c:	4625      	mov	r5, r4
 8012f9e:	9601      	str	r6, [sp, #4]
 8012fa0:	469b      	mov	fp, r3
 8012fa2:	9b05      	ldr	r3, [sp, #20]
 8012fa4:	4434      	add	r4, r6
 8012fa6:	449a      	add	sl, r3
 8012fa8:	461e      	mov	r6, r3
 8012faa:	4629      	mov	r1, r5
 8012fac:	9a01      	ldr	r2, [sp, #4]
 8012fae:	4648      	mov	r0, r9
 8012fb0:	f10b 0b01 	add.w	fp, fp, #1
 8012fb4:	f003 fbe4 	bl	8016780 <st_int8_fill>
 8012fb8:	4621      	mov	r1, r4
 8012fba:	4640      	mov	r0, r8
 8012fbc:	4632      	mov	r2, r6
 8012fbe:	f003 fc47 	bl	8016850 <st_int8_copy>
 8012fc2:	19a1      	adds	r1, r4, r6
 8012fc4:	463a      	mov	r2, r7
 8012fc6:	4648      	mov	r0, r9
 8012fc8:	f003 fbda 	bl	8016780 <st_int8_fill>
 8012fcc:	9b02      	ldr	r3, [sp, #8]
 8012fce:	4455      	add	r5, sl
 8012fd0:	44b0      	add	r8, r6
 8012fd2:	455b      	cmp	r3, fp
 8012fd4:	4454      	add	r4, sl
 8012fd6:	d1e8      	bne.n	8012faa <forward_pad+0x39e>
 8012fd8:	461a      	mov	r2, r3
 8012fda:	9b03      	ldr	r3, [sp, #12]
 8012fdc:	fb0a 3302 	mla	r3, sl, r2, r3
 8012fe0:	9303      	str	r3, [sp, #12]
 8012fe2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012fe4:	4648      	mov	r0, r9
 8012fe6:	9903      	ldr	r1, [sp, #12]
 8012fe8:	b011      	add	sp, #68	; 0x44
 8012fea:	ecbd 8b02 	vpop	{d8}
 8012fee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ff2:	f003 bbc5 	b.w	8016780 <st_int8_fill>
 8012ff6:	68db      	ldr	r3, [r3, #12]
 8012ff8:	deff      	udf	#255	; 0xff
 8012ffa:	2300      	movs	r3, #0
 8012ffc:	685b      	ldr	r3, [r3, #4]
 8012ffe:	deff      	udf	#255	; 0xff

08013000 <forward_eltwise_integer_INT8>:
 8013000:	6982      	ldr	r2, [r0, #24]
 8013002:	8813      	ldrh	r3, [r2, #0]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d04e      	beq.n	80130a6 <forward_eltwise_integer_INT8+0xa6>
 8013008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801300c:	ed2d 8b02 	vpush	{d8}
 8013010:	6852      	ldr	r2, [r2, #4]
 8013012:	b0ab      	sub	sp, #172	; 0xac
 8013014:	6854      	ldr	r4, [r2, #4]
 8013016:	2c00      	cmp	r4, #0
 8013018:	f000 81d4 	beq.w	80133c4 <forward_eltwise_integer_INT8+0x3c4>
 801301c:	e9d4 5400 	ldrd	r5, r4, [r4]
 8013020:	2b01      	cmp	r3, #1
 8013022:	f000 81d3 	beq.w	80133cc <forward_eltwise_integer_INT8+0x3cc>
 8013026:	6916      	ldr	r6, [r2, #16]
 8013028:	b106      	cbz	r6, 801302c <forward_eltwise_integer_INT8+0x2c>
 801302a:	6836      	ldr	r6, [r6, #0]
 801302c:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8013030:	f105 0108 	add.w	r1, r5, #8
 8013034:	f104 0b08 	add.w	fp, r4, #8
 8013038:	e9d0 7307 	ldrd	r7, r3, [r0, #28]
 801303c:	68a0      	ldr	r0, [r4, #8]
 801303e:	930b      	str	r3, [sp, #44]	; 0x2c
 8013040:	ea8c 0300 	eor.w	r3, ip, r0
 8013044:	f3cc 2c17 	ubfx	ip, ip, #8, #24
 8013048:	f033 03ff 	bics.w	r3, r3, #255	; 0xff
 801304c:	d10e      	bne.n	801306c <forward_eltwise_integer_INT8+0x6c>
 801304e:	4663      	mov	r3, ip
 8013050:	4686      	mov	lr, r0
 8013052:	2b00      	cmp	r3, #0
 8013054:	f000 81b2 	beq.w	80133bc <forward_eltwise_integer_INT8+0x3bc>
 8013058:	3b01      	subs	r3, #1
 801305a:	68e2      	ldr	r2, [r4, #12]
 801305c:	68e8      	ldr	r0, [r5, #12]
 801305e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8013062:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8013066:	4290      	cmp	r0, r2
 8013068:	d0f3      	beq.n	8013052 <forward_eltwise_integer_INT8+0x52>
 801306a:	4670      	mov	r0, lr
 801306c:	2300      	movs	r3, #0
 801306e:	9308      	str	r3, [sp, #32]
 8013070:	f10c 33ff 	add.w	r3, ip, #4294967295
 8013074:	009b      	lsls	r3, r3, #2
 8013076:	e005      	b.n	8013084 <forward_eltwise_integer_INT8+0x84>
 8013078:	68ea      	ldr	r2, [r5, #12]
 801307a:	58d2      	ldr	r2, [r2, r3]
 801307c:	3b04      	subs	r3, #4
 801307e:	2a01      	cmp	r2, #1
 8013080:	f040 8199 	bne.w	80133b6 <forward_eltwise_integer_INT8+0x3b6>
 8013084:	1d1a      	adds	r2, r3, #4
 8013086:	d1f7      	bne.n	8013078 <forward_eltwise_integer_INT8+0x78>
 8013088:	f04f 0a01 	mov.w	sl, #1
 801308c:	f3c0 2017 	ubfx	r0, r0, #8, #24
 8013090:	b158      	cbz	r0, 80130aa <forward_eltwise_integer_INT8+0xaa>
 8013092:	3801      	subs	r0, #1
 8013094:	68e3      	ldr	r3, [r4, #12]
 8013096:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801309a:	2b01      	cmp	r3, #1
 801309c:	d0f8      	beq.n	8013090 <forward_eltwise_integer_INT8+0x90>
 801309e:	2300      	movs	r3, #0
 80130a0:	46d1      	mov	r9, sl
 80130a2:	9309      	str	r3, [sp, #36]	; 0x24
 80130a4:	e005      	b.n	80130b2 <forward_eltwise_integer_INT8+0xb2>
 80130a6:	685b      	ldr	r3, [r3, #4]
 80130a8:	deff      	udf	#255	; 0xff
 80130aa:	2301      	movs	r3, #1
 80130ac:	f08a 0901 	eor.w	r9, sl, #1
 80130b0:	9309      	str	r3, [sp, #36]	; 0x24
 80130b2:	6972      	ldr	r2, [r6, #20]
 80130b4:	2000      	movs	r0, #0
 80130b6:	696b      	ldr	r3, [r5, #20]
 80130b8:	f8d2 8004 	ldr.w	r8, [r2, #4]
 80130bc:	aa1b      	add	r2, sp, #108	; 0x6c
 80130be:	685b      	ldr	r3, [r3, #4]
 80130c0:	9216      	str	r2, [sp, #88]	; 0x58
 80130c2:	f240 5201 	movw	r2, #1281	; 0x501
 80130c6:	901f      	str	r0, [sp, #124]	; 0x7c
 80130c8:	9215      	str	r2, [sp, #84]	; 0x54
 80130ca:	465a      	mov	r2, fp
 80130cc:	930d      	str	r3, [sp, #52]	; 0x34
 80130ce:	910c      	str	r1, [sp, #48]	; 0x30
 80130d0:	e9cd 001b 	strd	r0, r0, [sp, #108]	; 0x6c
 80130d4:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
 80130d8:	a815      	add	r0, sp, #84	; 0x54
 80130da:	f004 fc6d 	bl	80179b8 <core_get_broadcasted_shape>
 80130de:	69ab      	ldr	r3, [r5, #24]
 80130e0:	f8d5 c000 	ldr.w	ip, [r5]
 80130e4:	930a      	str	r3, [sp, #40]	; 0x28
 80130e6:	6832      	ldr	r2, [r6, #0]
 80130e8:	6820      	ldr	r0, [r4, #0]
 80130ea:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
 80130ee:	f1bc 0f00 	cmp.w	ip, #0
 80130f2:	d018      	beq.n	8013126 <forward_eltwise_integer_INT8+0x126>
 80130f4:	f8dc 5004 	ldr.w	r5, [ip, #4]
 80130f8:	b1ad      	cbz	r5, 8013126 <forward_eltwise_integer_INT8+0x126>
 80130fa:	f8bc e002 	ldrh.w	lr, [ip, #2]
 80130fe:	f1be 0f00 	cmp.w	lr, #0
 8013102:	d010      	beq.n	8013126 <forward_eltwise_integer_INT8+0x126>
 8013104:	682d      	ldr	r5, [r5, #0]
 8013106:	682d      	ldr	r5, [r5, #0]
 8013108:	950f      	str	r5, [sp, #60]	; 0x3c
 801310a:	b980      	cbnz	r0, 801312e <forward_eltwise_integer_INT8+0x12e>
 801310c:	2500      	movs	r5, #0
 801310e:	9510      	str	r5, [sp, #64]	; 0x40
 8013110:	b1d2      	cbz	r2, 8013148 <forward_eltwise_integer_INT8+0x148>
 8013112:	6855      	ldr	r5, [r2, #4]
 8013114:	b1c5      	cbz	r5, 8013148 <forward_eltwise_integer_INT8+0x148>
 8013116:	f8b2 e002 	ldrh.w	lr, [r2, #2]
 801311a:	f1be 0f00 	cmp.w	lr, #0
 801311e:	d013      	beq.n	8013148 <forward_eltwise_integer_INT8+0x148>
 8013120:	682d      	ldr	r5, [r5, #0]
 8013122:	682d      	ldr	r5, [r5, #0]
 8013124:	e011      	b.n	801314a <forward_eltwise_integer_INT8+0x14a>
 8013126:	2500      	movs	r5, #0
 8013128:	950f      	str	r5, [sp, #60]	; 0x3c
 801312a:	2800      	cmp	r0, #0
 801312c:	d0ee      	beq.n	801310c <forward_eltwise_integer_INT8+0x10c>
 801312e:	6845      	ldr	r5, [r0, #4]
 8013130:	2d00      	cmp	r5, #0
 8013132:	d0eb      	beq.n	801310c <forward_eltwise_integer_INT8+0x10c>
 8013134:	f8b0 e002 	ldrh.w	lr, [r0, #2]
 8013138:	f1be 0f00 	cmp.w	lr, #0
 801313c:	d0e6      	beq.n	801310c <forward_eltwise_integer_INT8+0x10c>
 801313e:	682d      	ldr	r5, [r5, #0]
 8013140:	682d      	ldr	r5, [r5, #0]
 8013142:	9510      	str	r5, [sp, #64]	; 0x40
 8013144:	2a00      	cmp	r2, #0
 8013146:	d1e4      	bne.n	8013112 <forward_eltwise_integer_INT8+0x112>
 8013148:	2500      	movs	r5, #0
 801314a:	69b6      	ldr	r6, [r6, #24]
 801314c:	9511      	str	r5, [sp, #68]	; 0x44
 801314e:	69a5      	ldr	r5, [r4, #24]
 8013150:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8013152:	68ad      	ldr	r5, [r5, #8]
 8013154:	68a4      	ldr	r4, [r4, #8]
 8013156:	68b6      	ldr	r6, [r6, #8]
 8013158:	f1bc 0f00 	cmp.w	ip, #0
 801315c:	d00e      	beq.n	801317c <forward_eltwise_integer_INT8+0x17c>
 801315e:	f8dc e004 	ldr.w	lr, [ip, #4]
 8013162:	f1be 0f00 	cmp.w	lr, #0
 8013166:	f000 8100 	beq.w	801336a <forward_eltwise_integer_INT8+0x36a>
 801316a:	f8bc c002 	ldrh.w	ip, [ip, #2]
 801316e:	f1bc 0f00 	cmp.w	ip, #0
 8013172:	d003      	beq.n	801317c <forward_eltwise_integer_INT8+0x17c>
 8013174:	f8de c004 	ldr.w	ip, [lr, #4]
 8013178:	f99c c000 	ldrsb.w	ip, [ip]
 801317c:	f88d c039 	strb.w	ip, [sp, #57]	; 0x39
 8013180:	b158      	cbz	r0, 801319a <forward_eltwise_integer_INT8+0x19a>
 8013182:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8013186:	f1bc 0f00 	cmp.w	ip, #0
 801318a:	f000 80f2 	beq.w	8013372 <forward_eltwise_integer_INT8+0x372>
 801318e:	8840      	ldrh	r0, [r0, #2]
 8013190:	b118      	cbz	r0, 801319a <forward_eltwise_integer_INT8+0x19a>
 8013192:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8013196:	f990 0000 	ldrsb.w	r0, [r0]
 801319a:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
 801319e:	b142      	cbz	r2, 80131b2 <forward_eltwise_integer_INT8+0x1b2>
 80131a0:	6850      	ldr	r0, [r2, #4]
 80131a2:	2800      	cmp	r0, #0
 80131a4:	f000 80df 	beq.w	8013366 <forward_eltwise_integer_INT8+0x366>
 80131a8:	8852      	ldrh	r2, [r2, #2]
 80131aa:	b112      	cbz	r2, 80131b2 <forward_eltwise_integer_INT8+0x1b2>
 80131ac:	6842      	ldr	r2, [r0, #4]
 80131ae:	f992 2000 	ldrsb.w	r2, [r2]
 80131b2:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 80131b6:	9a08      	ldr	r2, [sp, #32]
 80131b8:	b912      	cbnz	r2, 80131c0 <forward_eltwise_integer_INT8+0x1c0>
 80131ba:	f1b9 0f00 	cmp.w	r9, #0
 80131be:	d030      	beq.n	8013222 <forward_eltwise_integer_INT8+0x222>
 80131c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131c2:	4553      	cmp	r3, sl
 80131c4:	f000 80d3 	beq.w	801336e <forward_eltwise_integer_INT8+0x36e>
 80131c8:	f1ba 0f00 	cmp.w	sl, #0
 80131cc:	bf14      	ite	ne
 80131ce:	2701      	movne	r7, #1
 80131d0:	2702      	moveq	r7, #2
 80131d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80131d4:	0a1b      	lsrs	r3, r3, #8
 80131d6:	f000 80f7 	beq.w	80133c8 <forward_eltwise_integer_INT8+0x3c8>
 80131da:	9816      	ldr	r0, [sp, #88]	; 0x58
 80131dc:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 80131e0:	2301      	movs	r3, #1
 80131e2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80131e6:	4290      	cmp	r0, r2
 80131e8:	fb01 f303 	mul.w	r3, r1, r3
 80131ec:	d1f9      	bne.n	80131e2 <forward_eltwise_integer_INT8+0x1e2>
 80131ee:	4621      	mov	r1, r4
 80131f0:	f10d 043b 	add.w	r4, sp, #59	; 0x3b
 80131f4:	462a      	mov	r2, r5
 80131f6:	4630      	mov	r0, r6
 80131f8:	9405      	str	r4, [sp, #20]
 80131fa:	ac11      	add	r4, sp, #68	; 0x44
 80131fc:	9706      	str	r7, [sp, #24]
 80131fe:	9404      	str	r4, [sp, #16]
 8013200:	f10d 043a 	add.w	r4, sp, #58	; 0x3a
 8013204:	9403      	str	r4, [sp, #12]
 8013206:	ac10      	add	r4, sp, #64	; 0x40
 8013208:	9402      	str	r4, [sp, #8]
 801320a:	f10d 0439 	add.w	r4, sp, #57	; 0x39
 801320e:	9401      	str	r4, [sp, #4]
 8013210:	ac0f      	add	r4, sp, #60	; 0x3c
 8013212:	9400      	str	r4, [sp, #0]
 8013214:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8013216:	47a0      	blx	r4
 8013218:	b02b      	add	sp, #172	; 0xac
 801321a:	ecbd 8b02 	vpop	{d8}
 801321e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013222:	aa20      	add	r2, sp, #128	; 0x80
 8013224:	a817      	add	r0, sp, #92	; 0x5c
 8013226:	9308      	str	r3, [sp, #32]
 8013228:	9218      	str	r2, [sp, #96]	; 0x60
 801322a:	aa25      	add	r2, sp, #148	; 0x94
 801322c:	f8cd 9080 	str.w	r9, [sp, #128]	; 0x80
 8013230:	921a      	str	r2, [sp, #104]	; 0x68
 8013232:	f240 5202 	movw	r2, #1282	; 0x502
 8013236:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
 801323a:	9217      	str	r2, [sp, #92]	; 0x5c
 801323c:	9219      	str	r2, [sp, #100]	; 0x64
 801323e:	aa15      	add	r2, sp, #84	; 0x54
 8013240:	e9cd 9921 	strd	r9, r9, [sp, #132]	; 0x84
 8013244:	e9cd 9923 	strd	r9, r9, [sp, #140]	; 0x8c
 8013248:	e9cd 9926 	strd	r9, r9, [sp, #152]	; 0x98
 801324c:	e9cd 9928 	strd	r9, r9, [sp, #160]	; 0xa0
 8013250:	f004 fbda 	bl	8017a08 <core_compute_offsets_in_bytes>
 8013254:	9b08      	ldr	r3, [sp, #32]
 8013256:	aa15      	add	r2, sp, #84	; 0x54
 8013258:	4659      	mov	r1, fp
 801325a:	a819      	add	r0, sp, #100	; 0x64
 801325c:	f004 fbd4 	bl	8017a08 <core_compute_offsets_in_bytes>
 8013260:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013262:	68d3      	ldr	r3, [r2, #12]
 8013264:	2b00      	cmp	r3, #0
 8013266:	d0d7      	beq.n	8013218 <forward_eltwise_integer_INT8+0x218>
 8013268:	6891      	ldr	r1, [r2, #8]
 801326a:	eddf 8a5a 	vldr	s17, [pc, #360]	; 80133d4 <forward_eltwise_integer_INT8+0x3d4>
 801326e:	468c      	mov	ip, r1
 8013270:	f8cd 9020 	str.w	r9, [sp, #32]
 8013274:	f1bc 0f00 	cmp.w	ip, #0
 8013278:	d0ce      	beq.n	8013218 <forward_eltwise_integer_INT8+0x218>
 801327a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801327c:	f04f 0b00 	mov.w	fp, #0
 8013280:	f3c0 2017 	ubfx	r0, r0, #8, #24
 8013284:	f04f 0a00 	mov.w	sl, #0
 8013288:	2804      	cmp	r0, #4
 801328a:	bf8c      	ite	hi
 801328c:	6911      	ldrhi	r1, [r2, #16]
 801328e:	2101      	movls	r1, #1
 8013290:	458a      	cmp	sl, r1
 8013292:	d270      	bcs.n	8013376 <forward_eltwise_integer_INT8+0x376>
 8013294:	6851      	ldr	r1, [r2, #4]
 8013296:	2900      	cmp	r1, #0
 8013298:	d054      	beq.n	8013344 <forward_eltwise_integer_INT8+0x344>
 801329a:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 801329e:	f04f 0900 	mov.w	r9, #0
 80132a2:	f994 2000 	ldrsb.w	r2, [r4]
 80132a6:	a814      	add	r0, sp, #80	; 0x50
 80132a8:	f99d 1039 	ldrsb.w	r1, [sp, #57]	; 0x39
 80132ac:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 80132b0:	1a53      	subs	r3, r2, r1
 80132b2:	f99d 103a 	ldrsb.w	r1, [sp, #58]	; 0x3a
 80132b6:	eddd 6a10 	vldr	s13, [sp, #64]	; 0x40
 80132ba:	ee07 3a10 	vmov	s14, r3
 80132be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80132c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80132c6:	ed8d 7a12 	vstr	s14, [sp, #72]	; 0x48
 80132ca:	f995 2000 	ldrsb.w	r2, [r5]
 80132ce:	1a53      	subs	r3, r2, r1
 80132d0:	aa13      	add	r2, sp, #76	; 0x4c
 80132d2:	a912      	add	r1, sp, #72	; 0x48
 80132d4:	ee07 3a90 	vmov	s15, r3
 80132d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80132dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80132e0:	edcd 7a13 	vstr	s15, [sp, #76]	; 0x4c
 80132e4:	47b8      	blx	r7
 80132e6:	ed9d 6a14 	vldr	s12, [sp, #80]	; 0x50
 80132ea:	eddd 6a11 	vldr	s13, [sp, #68]	; 0x44
 80132ee:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 80132f2:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80132f6:	ee07 3a90 	vmov	s15, r3
 80132fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80132fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013302:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801330a:	fe38 7a28 	vselgt.f32	s14, s16, s17
 801330e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013312:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013316:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
 801331a:	ee17 2a10 	vmov	r2, s14
 801331e:	f302 0207 	ssat	r2, #8, r2
 8013322:	7032      	strb	r2, [r6, #0]
 8013324:	f109 0901 	add.w	r9, r9, #1
 8013328:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801332a:	4446      	add	r6, r8
 801332c:	6852      	ldr	r2, [r2, #4]
 801332e:	4414      	add	r4, r2
 8013330:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013332:	6852      	ldr	r2, [r2, #4]
 8013334:	4415      	add	r5, r2
 8013336:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013338:	6851      	ldr	r1, [r2, #4]
 801333a:	4549      	cmp	r1, r9
 801333c:	d8b1      	bhi.n	80132a2 <forward_eltwise_integer_INT8+0x2a2>
 801333e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8013340:	f3c0 2017 	ubfx	r0, r0, #8, #24
 8013344:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8013346:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 801334a:	d302      	bcc.n	8013352 <forward_eltwise_integer_INT8+0x352>
 801334c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801334e:	6909      	ldr	r1, [r1, #16]
 8013350:	440c      	add	r4, r1
 8013352:	9919      	ldr	r1, [sp, #100]	; 0x64
 8013354:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 8013358:	d302      	bcc.n	8013360 <forward_eltwise_integer_INT8+0x360>
 801335a:	991a      	ldr	r1, [sp, #104]	; 0x68
 801335c:	6909      	ldr	r1, [r1, #16]
 801335e:	440d      	add	r5, r1
 8013360:	f10a 0a01 	add.w	sl, sl, #1
 8013364:	e790      	b.n	8013288 <forward_eltwise_integer_INT8+0x288>
 8013366:	4602      	mov	r2, r0
 8013368:	e723      	b.n	80131b2 <forward_eltwise_integer_INT8+0x1b2>
 801336a:	46f4      	mov	ip, lr
 801336c:	e706      	b.n	801317c <forward_eltwise_integer_INT8+0x17c>
 801336e:	2700      	movs	r7, #0
 8013370:	e72f      	b.n	80131d2 <forward_eltwise_integer_INT8+0x1d2>
 8013372:	4660      	mov	r0, ip
 8013374:	e711      	b.n	801319a <forward_eltwise_integer_INT8+0x19a>
 8013376:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801337a:	f10b 0b01 	add.w	fp, fp, #1
 801337e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8013380:	f8de 1008 	ldr.w	r1, [lr, #8]
 8013384:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8013388:	440c      	add	r4, r1
 801338a:	6899      	ldr	r1, [r3, #8]
 801338c:	45dc      	cmp	ip, fp
 801338e:	440d      	add	r5, r1
 8013390:	f63f af78 	bhi.w	8013284 <forward_eltwise_integer_INT8+0x284>
 8013394:	f8de 000c 	ldr.w	r0, [lr, #12]
 8013398:	9908      	ldr	r1, [sp, #32]
 801339a:	4404      	add	r4, r0
 801339c:	68d0      	ldr	r0, [r2, #12]
 801339e:	3101      	adds	r1, #1
 80133a0:	68db      	ldr	r3, [r3, #12]
 80133a2:	4288      	cmp	r0, r1
 80133a4:	441d      	add	r5, r3
 80133a6:	9108      	str	r1, [sp, #32]
 80133a8:	f63f af64 	bhi.w	8013274 <forward_eltwise_integer_INT8+0x274>
 80133ac:	b02b      	add	sp, #172	; 0xac
 80133ae:	ecbd 8b02 	vpop	{d8}
 80133b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133b6:	f04f 0a00 	mov.w	sl, #0
 80133ba:	e667      	b.n	801308c <forward_eltwise_integer_INT8+0x8c>
 80133bc:	2301      	movs	r3, #1
 80133be:	4670      	mov	r0, lr
 80133c0:	9308      	str	r3, [sp, #32]
 80133c2:	e655      	b.n	8013070 <forward_eltwise_integer_INT8+0x70>
 80133c4:	4625      	mov	r5, r4
 80133c6:	e62b      	b.n	8013020 <forward_eltwise_integer_INT8+0x20>
 80133c8:	2301      	movs	r3, #1
 80133ca:	e710      	b.n	80131ee <forward_eltwise_integer_INT8+0x1ee>
 80133cc:	2300      	movs	r3, #0
 80133ce:	685b      	ldr	r3, [r3, #4]
 80133d0:	deff      	udf	#255	; 0xff
 80133d2:	bf00      	nop
 80133d4:	befffffc 	.word	0xbefffffc

080133d8 <func_dummy>:
 80133d8:	4770      	bx	lr
 80133da:	bf00      	nop

080133dc <forward_dw_3x3_sssa8_ch>:
 80133dc:	6983      	ldr	r3, [r0, #24]
 80133de:	881a      	ldrh	r2, [r3, #0]
 80133e0:	2a00      	cmp	r2, #0
 80133e2:	f000 80d8 	beq.w	8013596 <forward_dw_3x3_sssa8_ch+0x1ba>
 80133e6:	6859      	ldr	r1, [r3, #4]
 80133e8:	684b      	ldr	r3, [r1, #4]
 80133ea:	b103      	cbz	r3, 80133ee <forward_dw_3x3_sssa8_ch+0x12>
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	2a01      	cmp	r2, #1
 80133f0:	f000 80f2 	beq.w	80135d8 <forward_dw_3x3_sssa8_ch+0x1fc>
 80133f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133f8:	f8d1 8010 	ldr.w	r8, [r1, #16]
 80133fc:	b097      	sub	sp, #92	; 0x5c
 80133fe:	f1b8 0f00 	cmp.w	r8, #0
 8013402:	d001      	beq.n	8013408 <forward_dw_3x3_sssa8_ch+0x2c>
 8013404:	f8d8 8000 	ldr.w	r8, [r8]
 8013408:	2a02      	cmp	r2, #2
 801340a:	f000 80c1 	beq.w	8013590 <forward_dw_3x3_sssa8_ch+0x1b4>
 801340e:	69cc      	ldr	r4, [r1, #28]
 8013410:	2c00      	cmp	r4, #0
 8013412:	f000 80d8 	beq.w	80135c6 <forward_dw_3x3_sssa8_ch+0x1ea>
 8013416:	8b0d      	ldrh	r5, [r1, #24]
 8013418:	f8d4 e000 	ldr.w	lr, [r4]
 801341c:	2d01      	cmp	r5, #1
 801341e:	f200 80bc 	bhi.w	801359a <forward_dw_3x3_sssa8_ch+0x1be>
 8013422:	2500      	movs	r5, #0
 8013424:	2a03      	cmp	r2, #3
 8013426:	f000 80da 	beq.w	80135de <forward_dw_3x3_sssa8_ch+0x202>
 801342a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 801342c:	2a00      	cmp	r2, #0
 801342e:	f000 80cf 	beq.w	80135d0 <forward_dw_3x3_sssa8_ch+0x1f4>
 8013432:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8013434:	6817      	ldr	r7, [r2, #0]
 8013436:	910e      	str	r1, [sp, #56]	; 0x38
 8013438:	2900      	cmp	r1, #0
 801343a:	f000 80bc 	beq.w	80135b6 <forward_dw_3x3_sssa8_ch+0x1da>
 801343e:	6856      	ldr	r6, [r2, #4]
 8013440:	69a9      	ldr	r1, [r5, #24]
 8013442:	69ba      	ldr	r2, [r7, #24]
 8013444:	6889      	ldr	r1, [r1, #8]
 8013446:	8d07      	ldrh	r7, [r0, #40]	; 0x28
 8013448:	9115      	str	r1, [sp, #84]	; 0x54
 801344a:	9713      	str	r7, [sp, #76]	; 0x4c
 801344c:	68f1      	ldr	r1, [r6, #12]
 801344e:	8d87      	ldrh	r7, [r0, #44]	; 0x2c
 8013450:	68dd      	ldr	r5, [r3, #12]
 8013452:	9714      	str	r7, [sp, #80]	; 0x50
 8013454:	68cf      	ldr	r7, [r1, #12]
 8013456:	f8d1 c004 	ldr.w	ip, [r1, #4]
 801345a:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 801345e:	6889      	ldr	r1, [r1, #8]
 8013460:	970f      	str	r7, [sp, #60]	; 0x3c
 8013462:	68ef      	ldr	r7, [r5, #12]
 8013464:	68ad      	ldr	r5, [r5, #8]
 8013466:	9110      	str	r1, [sp, #64]	; 0x40
 8013468:	fa1f f18c 	uxth.w	r1, ip
 801346c:	6892      	ldr	r2, [r2, #8]
 801346e:	9711      	str	r7, [sp, #68]	; 0x44
 8013470:	9512      	str	r5, [sp, #72]	; 0x48
 8013472:	2c00      	cmp	r4, #0
 8013474:	f000 8099 	beq.w	80135aa <forward_dw_3x3_sssa8_ch+0x1ce>
 8013478:	68a4      	ldr	r4, [r4, #8]
 801347a:	2c00      	cmp	r4, #0
 801347c:	f000 8095 	beq.w	80135aa <forward_dw_3x3_sssa8_ch+0x1ce>
 8013480:	69a7      	ldr	r7, [r4, #24]
 8013482:	2f00      	cmp	r7, #0
 8013484:	bf18      	it	ne
 8013486:	4627      	movne	r7, r4
 8013488:	681c      	ldr	r4, [r3, #0]
 801348a:	6835      	ldr	r5, [r6, #0]
 801348c:	f8de 0000 	ldr.w	r0, [lr]
 8013490:	2c00      	cmp	r4, #0
 8013492:	f000 8087 	beq.w	80135a4 <forward_dw_3x3_sssa8_ch+0x1c8>
 8013496:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801349a:	f1b9 0f00 	cmp.w	r9, #0
 801349e:	f000 8081 	beq.w	80135a4 <forward_dw_3x3_sssa8_ch+0x1c8>
 80134a2:	f8b4 a002 	ldrh.w	sl, [r4, #2]
 80134a6:	f1ba 0f00 	cmp.w	sl, #0
 80134aa:	d07b      	beq.n	80135a4 <forward_dw_3x3_sssa8_ch+0x1c8>
 80134ac:	f8d9 9000 	ldr.w	r9, [r9]
 80134b0:	ed99 0a00 	vldr	s0, [r9]
 80134b4:	2d00      	cmp	r5, #0
 80134b6:	d072      	beq.n	801359e <forward_dw_3x3_sssa8_ch+0x1c2>
 80134b8:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80134bc:	f1b9 0f00 	cmp.w	r9, #0
 80134c0:	d06d      	beq.n	801359e <forward_dw_3x3_sssa8_ch+0x1c2>
 80134c2:	f8b5 a002 	ldrh.w	sl, [r5, #2]
 80134c6:	f1ba 0f00 	cmp.w	sl, #0
 80134ca:	d068      	beq.n	801359e <forward_dw_3x3_sssa8_ch+0x1c2>
 80134cc:	f8d9 9000 	ldr.w	r9, [r9]
 80134d0:	edd9 0a00 	vldr	s1, [r9]
 80134d4:	f8d3 9018 	ldr.w	r9, [r3, #24]
 80134d8:	f8de 3018 	ldr.w	r3, [lr, #24]
 80134dc:	f8d9 9008 	ldr.w	r9, [r9, #8]
 80134e0:	689b      	ldr	r3, [r3, #8]
 80134e2:	930c      	str	r3, [sp, #48]	; 0x30
 80134e4:	69b3      	ldr	r3, [r6, #24]
 80134e6:	f8d3 a008 	ldr.w	sl, [r3, #8]
 80134ea:	b110      	cbz	r0, 80134f2 <forward_dw_3x3_sssa8_ch+0x116>
 80134ec:	6840      	ldr	r0, [r0, #4]
 80134ee:	b100      	cbz	r0, 80134f2 <forward_dw_3x3_sssa8_ch+0x116>
 80134f0:	6800      	ldr	r0, [r0, #0]
 80134f2:	b13c      	cbz	r4, 8013504 <forward_dw_3x3_sssa8_ch+0x128>
 80134f4:	6863      	ldr	r3, [r4, #4]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d061      	beq.n	80135be <forward_dw_3x3_sssa8_ch+0x1e2>
 80134fa:	8864      	ldrh	r4, [r4, #2]
 80134fc:	b114      	cbz	r4, 8013504 <forward_dw_3x3_sssa8_ch+0x128>
 80134fe:	685b      	ldr	r3, [r3, #4]
 8013500:	f993 4000 	ldrsb.w	r4, [r3]
 8013504:	b13d      	cbz	r5, 8013516 <forward_dw_3x3_sssa8_ch+0x13a>
 8013506:	686b      	ldr	r3, [r5, #4]
 8013508:	2b00      	cmp	r3, #0
 801350a:	d05a      	beq.n	80135c2 <forward_dw_3x3_sssa8_ch+0x1e6>
 801350c:	886d      	ldrh	r5, [r5, #2]
 801350e:	b115      	cbz	r5, 8013516 <forward_dw_3x3_sssa8_ch+0x13a>
 8013510:	685b      	ldr	r3, [r3, #4]
 8013512:	f993 5000 	ldrsb.w	r5, [r3]
 8013516:	fa1f fc8c 	uxth.w	ip, ip
 801351a:	231a      	movs	r3, #26
 801351c:	920d      	str	r2, [sp, #52]	; 0x34
 801351e:	fb03 230c 	mla	r3, r3, ip, r2
 8013522:	f001 ff9f 	bl	8015464 <align_factor_ch>
 8013526:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013528:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801352a:	4648      	mov	r0, r9
 801352c:	9303      	str	r3, [sp, #12]
 801352e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013530:	9404      	str	r4, [sp, #16]
 8013532:	2400      	movs	r4, #0
 8013534:	9302      	str	r3, [sp, #8]
 8013536:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013538:	920a      	str	r2, [sp, #40]	; 0x28
 801353a:	9301      	str	r3, [sp, #4]
 801353c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801353e:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 8013542:	9300      	str	r3, [sp, #0]
 8013544:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8013548:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 801354c:	9308      	str	r3, [sp, #32]
 801354e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8013552:	9409      	str	r4, [sp, #36]	; 0x24
 8013554:	9307      	str	r3, [sp, #28]
 8013556:	465b      	mov	r3, fp
 8013558:	e9cd 5a05 	strd	r5, sl, [sp, #20]
 801355c:	f000 fe08 	bl	8014170 <forward_lite_dw_3x3_sssa8_ch>
 8013560:	68b3      	ldr	r3, [r6, #8]
 8013562:	0a1b      	lsrs	r3, r3, #8
 8013564:	d032      	beq.n	80135cc <forward_dw_3x3_sssa8_ch+0x1f0>
 8013566:	68f0      	ldr	r0, [r6, #12]
 8013568:	2201      	movs	r2, #1
 801356a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801356e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013572:	4298      	cmp	r0, r3
 8013574:	fb01 f202 	mul.w	r2, r1, r2
 8013578:	d1f9      	bne.n	801356e <forward_dw_3x3_sssa8_ch+0x192>
 801357a:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 801357e:	463b      	mov	r3, r7
 8013580:	4631      	mov	r1, r6
 8013582:	4640      	mov	r0, r8
 8013584:	ee17 ca90 	vmov	ip, s15
 8013588:	b017      	add	sp, #92	; 0x5c
 801358a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801358e:	4760      	bx	ip
 8013590:	2300      	movs	r3, #0
 8013592:	685b      	ldr	r3, [r3, #4]
 8013594:	deff      	udf	#255	; 0xff
 8013596:	6853      	ldr	r3, [r2, #4]
 8013598:	deff      	udf	#255	; 0xff
 801359a:	6865      	ldr	r5, [r4, #4]
 801359c:	e742      	b.n	8013424 <forward_dw_3x3_sssa8_ch+0x48>
 801359e:	eddf 0a12 	vldr	s1, [pc, #72]	; 80135e8 <forward_dw_3x3_sssa8_ch+0x20c>
 80135a2:	e797      	b.n	80134d4 <forward_dw_3x3_sssa8_ch+0xf8>
 80135a4:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80135e8 <forward_dw_3x3_sssa8_ch+0x20c>
 80135a8:	e784      	b.n	80134b4 <forward_dw_3x3_sssa8_ch+0xd8>
 80135aa:	6a07      	ldr	r7, [r0, #32]
 80135ac:	2f00      	cmp	r7, #0
 80135ae:	f43f af6b 	beq.w	8013488 <forward_dw_3x3_sssa8_ch+0xac>
 80135b2:	68bf      	ldr	r7, [r7, #8]
 80135b4:	e768      	b.n	8013488 <forward_dw_3x3_sssa8_ch+0xac>
 80135b6:	4a0d      	ldr	r2, [pc, #52]	; (80135ec <forward_dw_3x3_sssa8_ch+0x210>)
 80135b8:	4646      	mov	r6, r8
 80135ba:	920e      	str	r2, [sp, #56]	; 0x38
 80135bc:	e740      	b.n	8013440 <forward_dw_3x3_sssa8_ch+0x64>
 80135be:	461c      	mov	r4, r3
 80135c0:	e7a0      	b.n	8013504 <forward_dw_3x3_sssa8_ch+0x128>
 80135c2:	461d      	mov	r5, r3
 80135c4:	e7a7      	b.n	8013516 <forward_dw_3x3_sssa8_ch+0x13a>
 80135c6:	46a6      	mov	lr, r4
 80135c8:	4625      	mov	r5, r4
 80135ca:	e72b      	b.n	8013424 <forward_dw_3x3_sssa8_ch+0x48>
 80135cc:	2201      	movs	r2, #1
 80135ce:	e7d4      	b.n	801357a <forward_dw_3x3_sssa8_ch+0x19e>
 80135d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80135d2:	b93b      	cbnz	r3, 80135e4 <forward_dw_3x3_sssa8_ch+0x208>
 80135d4:	699b      	ldr	r3, [r3, #24]
 80135d6:	deff      	udf	#255	; 0xff
 80135d8:	2300      	movs	r3, #0
 80135da:	685b      	ldr	r3, [r3, #4]
 80135dc:	deff      	udf	#255	; 0xff
 80135de:	2300      	movs	r3, #0
 80135e0:	685b      	ldr	r3, [r3, #4]
 80135e2:	deff      	udf	#255	; 0xff
 80135e4:	68d3      	ldr	r3, [r2, #12]
 80135e6:	deff      	udf	#255	; 0xff
 80135e8:	00000000 	.word	0x00000000
 80135ec:	080133d9 	.word	0x080133d9

080135f0 <func_dummy>:
 80135f0:	4770      	bx	lr
 80135f2:	bf00      	nop

080135f4 <forward_pw_sssa8_ch>:
 80135f4:	6983      	ldr	r3, [r0, #24]
 80135f6:	8819      	ldrh	r1, [r3, #0]
 80135f8:	2900      	cmp	r1, #0
 80135fa:	f000 80fa 	beq.w	80137f2 <forward_pw_sssa8_ch+0x1fe>
 80135fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013602:	ed2d 8b02 	vpush	{d8}
 8013606:	685d      	ldr	r5, [r3, #4]
 8013608:	b095      	sub	sp, #84	; 0x54
 801360a:	686b      	ldr	r3, [r5, #4]
 801360c:	b103      	cbz	r3, 8013610 <forward_pw_sssa8_ch+0x1c>
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	2901      	cmp	r1, #1
 8013612:	f000 8114 	beq.w	801383e <forward_pw_sssa8_ch+0x24a>
 8013616:	f8d5 b010 	ldr.w	fp, [r5, #16]
 801361a:	f1bb 0f00 	cmp.w	fp, #0
 801361e:	d001      	beq.n	8013624 <forward_pw_sssa8_ch+0x30>
 8013620:	f8db b000 	ldr.w	fp, [fp]
 8013624:	2902      	cmp	r1, #2
 8013626:	f000 80e1 	beq.w	80137ec <forward_pw_sssa8_ch+0x1f8>
 801362a:	69ec      	ldr	r4, [r5, #28]
 801362c:	2c00      	cmp	r4, #0
 801362e:	f000 80ff 	beq.w	8013830 <forward_pw_sssa8_ch+0x23c>
 8013632:	8b2e      	ldrh	r6, [r5, #24]
 8013634:	6822      	ldr	r2, [r4, #0]
 8013636:	2e01      	cmp	r6, #1
 8013638:	f200 80dd 	bhi.w	80137f6 <forward_pw_sssa8_ch+0x202>
 801363c:	2600      	movs	r6, #0
 801363e:	2903      	cmp	r1, #3
 8013640:	f000 8100 	beq.w	8013844 <forward_pw_sssa8_ch+0x250>
 8013644:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8013646:	2900      	cmp	r1, #0
 8013648:	f000 80f5 	beq.w	8013836 <forward_pw_sssa8_ch+0x242>
 801364c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801364e:	680f      	ldr	r7, [r1, #0]
 8013650:	9511      	str	r5, [sp, #68]	; 0x44
 8013652:	970d      	str	r7, [sp, #52]	; 0x34
 8013654:	2d00      	cmp	r5, #0
 8013656:	f000 80e7 	beq.w	8013828 <forward_pw_sssa8_ch+0x234>
 801365a:	684f      	ldr	r7, [r1, #4]
 801365c:	69b1      	ldr	r1, [r6, #24]
 801365e:	68fe      	ldr	r6, [r7, #12]
 8013660:	6889      	ldr	r1, [r1, #8]
 8013662:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8013666:	68f5      	ldr	r5, [r6, #12]
 8013668:	9113      	str	r1, [sp, #76]	; 0x4c
 801366a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801366c:	f8dc e004 	ldr.w	lr, [ip, #4]
 8013670:	6989      	ldr	r1, [r1, #24]
 8013672:	9510      	str	r5, [sp, #64]	; 0x40
 8013674:	68b5      	ldr	r5, [r6, #8]
 8013676:	f8d1 a008 	ldr.w	sl, [r1, #8]
 801367a:	9512      	str	r5, [sp, #72]	; 0x48
 801367c:	fa1f f58e 	uxth.w	r5, lr
 8013680:	6871      	ldr	r1, [r6, #4]
 8013682:	ee08 5a10 	vmov	s16, r5
 8013686:	b28d      	uxth	r5, r1
 8013688:	950c      	str	r5, [sp, #48]	; 0x30
 801368a:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801368e:	950a      	str	r5, [sp, #40]	; 0x28
 8013690:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8013694:	950e      	str	r5, [sp, #56]	; 0x38
 8013696:	2c00      	cmp	r4, #0
 8013698:	f000 80b5 	beq.w	8013806 <forward_pw_sssa8_ch+0x212>
 801369c:	68a4      	ldr	r4, [r4, #8]
 801369e:	2c00      	cmp	r4, #0
 80136a0:	f000 80b1 	beq.w	8013806 <forward_pw_sssa8_ch+0x212>
 80136a4:	f8d4 8018 	ldr.w	r8, [r4, #24]
 80136a8:	f1b8 0f00 	cmp.w	r8, #0
 80136ac:	bf18      	it	ne
 80136ae:	46a0      	movne	r8, r4
 80136b0:	681d      	ldr	r5, [r3, #0]
 80136b2:	683e      	ldr	r6, [r7, #0]
 80136b4:	6810      	ldr	r0, [r2, #0]
 80136b6:	2d00      	cmp	r5, #0
 80136b8:	f000 80a2 	beq.w	8013800 <forward_pw_sssa8_ch+0x20c>
 80136bc:	686c      	ldr	r4, [r5, #4]
 80136be:	2c00      	cmp	r4, #0
 80136c0:	f000 809e 	beq.w	8013800 <forward_pw_sssa8_ch+0x20c>
 80136c4:	f8b5 c002 	ldrh.w	ip, [r5, #2]
 80136c8:	f1bc 0f00 	cmp.w	ip, #0
 80136cc:	f000 8098 	beq.w	8013800 <forward_pw_sssa8_ch+0x20c>
 80136d0:	6824      	ldr	r4, [r4, #0]
 80136d2:	ed94 0a00 	vldr	s0, [r4]
 80136d6:	2e00      	cmp	r6, #0
 80136d8:	f000 808f 	beq.w	80137fa <forward_pw_sssa8_ch+0x206>
 80136dc:	6874      	ldr	r4, [r6, #4]
 80136de:	2c00      	cmp	r4, #0
 80136e0:	f000 808b 	beq.w	80137fa <forward_pw_sssa8_ch+0x206>
 80136e4:	f8b6 c002 	ldrh.w	ip, [r6, #2]
 80136e8:	f1bc 0f00 	cmp.w	ip, #0
 80136ec:	f000 8085 	beq.w	80137fa <forward_pw_sssa8_ch+0x206>
 80136f0:	6824      	ldr	r4, [r4, #0]
 80136f2:	edd4 0a00 	vldr	s1, [r4]
 80136f6:	699c      	ldr	r4, [r3, #24]
 80136f8:	6993      	ldr	r3, [r2, #24]
 80136fa:	f8d4 9008 	ldr.w	r9, [r4, #8]
 80136fe:	689b      	ldr	r3, [r3, #8]
 8013700:	930f      	str	r3, [sp, #60]	; 0x3c
 8013702:	69bb      	ldr	r3, [r7, #24]
 8013704:	689b      	ldr	r3, [r3, #8]
 8013706:	930b      	str	r3, [sp, #44]	; 0x2c
 8013708:	b110      	cbz	r0, 8013710 <forward_pw_sssa8_ch+0x11c>
 801370a:	6840      	ldr	r0, [r0, #4]
 801370c:	b100      	cbz	r0, 8013710 <forward_pw_sssa8_ch+0x11c>
 801370e:	6800      	ldr	r0, [r0, #0]
 8013710:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013712:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013714:	fb03 f202 	mul.w	r2, r3, r2
 8013718:	b28b      	uxth	r3, r1
 801371a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801371c:	fb03 1202 	mla	r2, r3, r2, r1
 8013720:	4591      	cmp	r9, r2
 8013722:	d279      	bcs.n	8013818 <forward_pw_sssa8_ch+0x224>
 8013724:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8013726:	fa1f fc8e 	uxth.w	ip, lr
 801372a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801372c:	fb02 f404 	mul.w	r4, r2, r4
 8013730:	fb0c 9404 	mla	r4, ip, r4, r9
 8013734:	42a1      	cmp	r1, r4
 8013736:	bf2c      	ite	cs
 8013738:	2400      	movcs	r4, #0
 801373a:	2401      	movcc	r4, #1
 801373c:	b13d      	cbz	r5, 801374e <forward_pw_sssa8_ch+0x15a>
 801373e:	686a      	ldr	r2, [r5, #4]
 8013740:	2a00      	cmp	r2, #0
 8013742:	d06d      	beq.n	8013820 <forward_pw_sssa8_ch+0x22c>
 8013744:	886d      	ldrh	r5, [r5, #2]
 8013746:	b115      	cbz	r5, 801374e <forward_pw_sssa8_ch+0x15a>
 8013748:	6852      	ldr	r2, [r2, #4]
 801374a:	f992 5000 	ldrsb.w	r5, [r2]
 801374e:	b13e      	cbz	r6, 8013760 <forward_pw_sssa8_ch+0x16c>
 8013750:	6872      	ldr	r2, [r6, #4]
 8013752:	2a00      	cmp	r2, #0
 8013754:	d066      	beq.n	8013824 <forward_pw_sssa8_ch+0x230>
 8013756:	8876      	ldrh	r6, [r6, #2]
 8013758:	b116      	cbz	r6, 8013760 <forward_pw_sssa8_ch+0x16c>
 801375a:	6852      	ldr	r2, [r2, #4]
 801375c:	f992 6000 	ldrsb.w	r6, [r2]
 8013760:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 8013764:	4652      	mov	r2, sl
 8013766:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013768:	f001 fe7c 	bl	8015464 <align_factor_ch>
 801376c:	2c00      	cmp	r4, #0
 801376e:	d155      	bne.n	801381c <forward_pw_sssa8_ch+0x228>
 8013770:	2301      	movs	r3, #1
 8013772:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8013776:	930a      	str	r3, [sp, #40]	; 0x28
 8013778:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801377a:	2401      	movs	r4, #1
 801377c:	9210      	str	r2, [sp, #64]	; 0x40
 801377e:	699b      	ldr	r3, [r3, #24]
 8013780:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013784:	f004 f8e0 	bl	8017948 <ai_array_get_byte_size>
 8013788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801378a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801378c:	9306      	str	r3, [sp, #24]
 801378e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013790:	9008      	str	r0, [sp, #32]
 8013792:	4648      	mov	r0, r9
 8013794:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8013798:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801379c:	9503      	str	r5, [sp, #12]
 801379e:	9407      	str	r4, [sp, #28]
 80137a0:	e9cd 6304 	strd	r6, r3, [sp, #16]
 80137a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80137a6:	9302      	str	r3, [sp, #8]
 80137a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80137aa:	9301      	str	r3, [sp, #4]
 80137ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80137ae:	9300      	str	r3, [sp, #0]
 80137b0:	ee18 3a10 	vmov	r3, s16
 80137b4:	f000 f9f6 	bl	8013ba4 <forward_lite_pw_sssa8_ch>
 80137b8:	68bb      	ldr	r3, [r7, #8]
 80137ba:	4622      	mov	r2, r4
 80137bc:	0a1b      	lsrs	r3, r3, #8
 80137be:	d008      	beq.n	80137d2 <forward_pw_sssa8_ch+0x1de>
 80137c0:	68f8      	ldr	r0, [r7, #12]
 80137c2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80137c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80137ca:	4298      	cmp	r0, r3
 80137cc:	fb01 f202 	mul.w	r2, r1, r2
 80137d0:	d1f9      	bne.n	80137c6 <forward_pw_sssa8_ch+0x1d2>
 80137d2:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 80137d6:	4643      	mov	r3, r8
 80137d8:	4639      	mov	r1, r7
 80137da:	4658      	mov	r0, fp
 80137dc:	ee17 ca90 	vmov	ip, s15
 80137e0:	b015      	add	sp, #84	; 0x54
 80137e2:	ecbd 8b02 	vpop	{d8}
 80137e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137ea:	4760      	bx	ip
 80137ec:	2300      	movs	r3, #0
 80137ee:	685b      	ldr	r3, [r3, #4]
 80137f0:	deff      	udf	#255	; 0xff
 80137f2:	684b      	ldr	r3, [r1, #4]
 80137f4:	deff      	udf	#255	; 0xff
 80137f6:	6866      	ldr	r6, [r4, #4]
 80137f8:	e721      	b.n	801363e <forward_pw_sssa8_ch+0x4a>
 80137fa:	eddf 0a15 	vldr	s1, [pc, #84]	; 8013850 <forward_pw_sssa8_ch+0x25c>
 80137fe:	e77a      	b.n	80136f6 <forward_pw_sssa8_ch+0x102>
 8013800:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8013850 <forward_pw_sssa8_ch+0x25c>
 8013804:	e767      	b.n	80136d6 <forward_pw_sssa8_ch+0xe2>
 8013806:	f8d0 8020 	ldr.w	r8, [r0, #32]
 801380a:	f1b8 0f00 	cmp.w	r8, #0
 801380e:	f43f af4f 	beq.w	80136b0 <forward_pw_sssa8_ch+0xbc>
 8013812:	f8d8 8008 	ldr.w	r8, [r8, #8]
 8013816:	e74b      	b.n	80136b0 <forward_pw_sssa8_ch+0xbc>
 8013818:	2400      	movs	r4, #0
 801381a:	e78f      	b.n	801373c <forward_pw_sssa8_ch+0x148>
 801381c:	4622      	mov	r2, r4
 801381e:	e7ab      	b.n	8013778 <forward_pw_sssa8_ch+0x184>
 8013820:	4615      	mov	r5, r2
 8013822:	e794      	b.n	801374e <forward_pw_sssa8_ch+0x15a>
 8013824:	4616      	mov	r6, r2
 8013826:	e79b      	b.n	8013760 <forward_pw_sssa8_ch+0x16c>
 8013828:	490a      	ldr	r1, [pc, #40]	; (8013854 <forward_pw_sssa8_ch+0x260>)
 801382a:	465f      	mov	r7, fp
 801382c:	9111      	str	r1, [sp, #68]	; 0x44
 801382e:	e715      	b.n	801365c <forward_pw_sssa8_ch+0x68>
 8013830:	4622      	mov	r2, r4
 8013832:	4626      	mov	r6, r4
 8013834:	e703      	b.n	801363e <forward_pw_sssa8_ch+0x4a>
 8013836:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013838:	b93b      	cbnz	r3, 801384a <forward_pw_sssa8_ch+0x256>
 801383a:	699b      	ldr	r3, [r3, #24]
 801383c:	deff      	udf	#255	; 0xff
 801383e:	2300      	movs	r3, #0
 8013840:	685b      	ldr	r3, [r3, #4]
 8013842:	deff      	udf	#255	; 0xff
 8013844:	2300      	movs	r3, #0
 8013846:	685b      	ldr	r3, [r3, #4]
 8013848:	deff      	udf	#255	; 0xff
 801384a:	68cb      	ldr	r3, [r1, #12]
 801384c:	deff      	udf	#255	; 0xff
 801384e:	bf00      	nop
 8013850:	00000000 	.word	0x00000000
 8013854:	080135f1 	.word	0x080135f1

08013858 <ai_check_custom_types>:
 8013858:	b082      	sub	sp, #8
 801385a:	4b12      	ldr	r3, [pc, #72]	; (80138a4 <ai_check_custom_types+0x4c>)
 801385c:	9301      	str	r3, [sp, #4]
 801385e:	b118      	cbz	r0, 8013868 <ai_check_custom_types+0x10>
 8013860:	7803      	ldrb	r3, [r0, #0]
 8013862:	2b03      	cmp	r3, #3
 8013864:	d002      	beq.n	801386c <ai_check_custom_types+0x14>
 8013866:	2000      	movs	r0, #0
 8013868:	b002      	add	sp, #8
 801386a:	4770      	bx	lr
 801386c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013870:	4293      	cmp	r3, r2
 8013872:	d004      	beq.n	801387e <ai_check_custom_types+0x26>
 8013874:	2001      	movs	r0, #1
 8013876:	f080 0001 	eor.w	r0, r0, #1
 801387a:	b002      	add	sp, #8
 801387c:	4770      	bx	lr
 801387e:	7842      	ldrb	r2, [r0, #1]
 8013880:	3001      	adds	r0, #1
 8013882:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013886:	429a      	cmp	r2, r3
 8013888:	d1f4      	bne.n	8013874 <ai_check_custom_types+0x1c>
 801388a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 801388e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013892:	429a      	cmp	r2, r3
 8013894:	d1ee      	bne.n	8013874 <ai_check_custom_types+0x1c>
 8013896:	7842      	ldrb	r2, [r0, #1]
 8013898:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801389c:	429a      	cmp	r2, r3
 801389e:	d1e9      	bne.n	8013874 <ai_check_custom_types+0x1c>
 80138a0:	2000      	movs	r0, #0
 80138a2:	e7e8      	b.n	8013876 <ai_check_custom_types+0x1e>
 80138a4:	84048403 	.word	0x84048403

080138a8 <ai_layers_init_all>:
 80138a8:	2100      	movs	r1, #0
 80138aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80138ac:	b13b      	cbz	r3, 80138be <ai_layers_init_all+0x16>
 80138ae:	691a      	ldr	r2, [r3, #16]
 80138b0:	3101      	adds	r1, #1
 80138b2:	60d8      	str	r0, [r3, #12]
 80138b4:	429a      	cmp	r2, r3
 80138b6:	4613      	mov	r3, r2
 80138b8:	d001      	beq.n	80138be <ai_layers_init_all+0x16>
 80138ba:	2a00      	cmp	r2, #0
 80138bc:	d1f6      	bne.n	80138ac <ai_layers_init_all+0x4>
 80138be:	4608      	mov	r0, r1
 80138c0:	4770      	bx	lr
 80138c2:	bf00      	nop

080138c4 <ai_layers_post_init_all>:
 80138c4:	b538      	push	{r3, r4, r5, lr}
 80138c6:	2500      	movs	r5, #0
 80138c8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80138ca:	b16c      	cbz	r4, 80138e8 <ai_layers_post_init_all+0x24>
 80138cc:	6863      	ldr	r3, [r4, #4]
 80138ce:	07db      	lsls	r3, r3, #31
 80138d0:	d504      	bpl.n	80138dc <ai_layers_post_init_all+0x18>
 80138d2:	6a23      	ldr	r3, [r4, #32]
 80138d4:	4620      	mov	r0, r4
 80138d6:	b10b      	cbz	r3, 80138dc <ai_layers_post_init_all+0x18>
 80138d8:	3501      	adds	r5, #1
 80138da:	4798      	blx	r3
 80138dc:	6923      	ldr	r3, [r4, #16]
 80138de:	42a3      	cmp	r3, r4
 80138e0:	461c      	mov	r4, r3
 80138e2:	d001      	beq.n	80138e8 <ai_layers_post_init_all+0x24>
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d1f0      	bne.n	80138ca <ai_layers_post_init_all+0x6>
 80138e8:	4628      	mov	r0, r5
 80138ea:	bd38      	pop	{r3, r4, r5, pc}

080138ec <ai_layers_forward_all>:
 80138ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138f0:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 80138f4:	4604      	mov	r4, r0
 80138f6:	f1b8 0f00 	cmp.w	r8, #0
 80138fa:	d02a      	beq.n	8013952 <ai_layers_forward_all+0x66>
 80138fc:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80138fe:	6381      	str	r1, [r0, #56]	; 0x38
 8013900:	b319      	cbz	r1, 801394a <ai_layers_forward_all+0x5e>
 8013902:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8013904:	2001      	movs	r0, #1
 8013906:	47c0      	blx	r8
 8013908:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801390a:	b1f6      	cbz	r6, 801394a <ai_layers_forward_all+0x5e>
 801390c:	2700      	movs	r7, #0
 801390e:	4631      	mov	r1, r6
 8013910:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8013912:	2002      	movs	r0, #2
 8013914:	47c0      	blx	r8
 8013916:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8013918:	4628      	mov	r0, r5
 801391a:	696b      	ldr	r3, [r5, #20]
 801391c:	4798      	blx	r3
 801391e:	692e      	ldr	r6, [r5, #16]
 8013920:	2003      	movs	r0, #3
 8013922:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8013924:	42b5      	cmp	r5, r6
 8013926:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013928:	d007      	beq.n	801393a <ai_layers_forward_all+0x4e>
 801392a:	47c0      	blx	r8
 801392c:	3701      	adds	r7, #1
 801392e:	63a6      	str	r6, [r4, #56]	; 0x38
 8013930:	2e00      	cmp	r6, #0
 8013932:	d1ec      	bne.n	801390e <ai_layers_forward_all+0x22>
 8013934:	4638      	mov	r0, r7
 8013936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801393a:	2003      	movs	r0, #3
 801393c:	3701      	adds	r7, #1
 801393e:	47c0      	blx	r8
 8013940:	2300      	movs	r3, #0
 8013942:	4638      	mov	r0, r7
 8013944:	63a3      	str	r3, [r4, #56]	; 0x38
 8013946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801394a:	2700      	movs	r7, #0
 801394c:	4638      	mov	r0, r7
 801394e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013952:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8013954:	6385      	str	r5, [r0, #56]	; 0x38
 8013956:	2d00      	cmp	r5, #0
 8013958:	d0f7      	beq.n	801394a <ai_layers_forward_all+0x5e>
 801395a:	4647      	mov	r7, r8
 801395c:	696b      	ldr	r3, [r5, #20]
 801395e:	4628      	mov	r0, r5
 8013960:	4798      	blx	r3
 8013962:	462b      	mov	r3, r5
 8013964:	692d      	ldr	r5, [r5, #16]
 8013966:	429d      	cmp	r5, r3
 8013968:	d004      	beq.n	8013974 <ai_layers_forward_all+0x88>
 801396a:	3701      	adds	r7, #1
 801396c:	63a5      	str	r5, [r4, #56]	; 0x38
 801396e:	2d00      	cmp	r5, #0
 8013970:	d1f4      	bne.n	801395c <ai_layers_forward_all+0x70>
 8013972:	e7df      	b.n	8013934 <ai_layers_forward_all+0x48>
 8013974:	2300      	movs	r3, #0
 8013976:	3701      	adds	r7, #1
 8013978:	63a3      	str	r3, [r4, #56]	; 0x38
 801397a:	e7db      	b.n	8013934 <ai_layers_forward_all+0x48>

0801397c <func_dummy>:
 801397c:	4770      	bx	lr
 801397e:	bf00      	nop

08013980 <forward_conv2d_rgb_sssa8_ch>:
 8013980:	6982      	ldr	r2, [r0, #24]
 8013982:	8813      	ldrh	r3, [r2, #0]
 8013984:	2b00      	cmp	r3, #0
 8013986:	f000 80df 	beq.w	8013b48 <forward_conv2d_rgb_sssa8_ch+0x1c8>
 801398a:	6852      	ldr	r2, [r2, #4]
 801398c:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8013990:	f1bc 0f00 	cmp.w	ip, #0
 8013994:	d001      	beq.n	801399a <forward_conv2d_rgb_sssa8_ch+0x1a>
 8013996:	f8dc c000 	ldr.w	ip, [ip]
 801399a:	2b01      	cmp	r3, #1
 801399c:	f000 80f5 	beq.w	8013b8a <forward_conv2d_rgb_sssa8_ch+0x20a>
 80139a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139a4:	f8d2 8010 	ldr.w	r8, [r2, #16]
 80139a8:	b095      	sub	sp, #84	; 0x54
 80139aa:	f1b8 0f00 	cmp.w	r8, #0
 80139ae:	d001      	beq.n	80139b4 <forward_conv2d_rgb_sssa8_ch+0x34>
 80139b0:	f8d8 8000 	ldr.w	r8, [r8]
 80139b4:	2b02      	cmp	r3, #2
 80139b6:	f000 80c4 	beq.w	8013b42 <forward_conv2d_rgb_sssa8_ch+0x1c2>
 80139ba:	69d4      	ldr	r4, [r2, #28]
 80139bc:	2c00      	cmp	r4, #0
 80139be:	f000 80db 	beq.w	8013b78 <forward_conv2d_rgb_sssa8_ch+0x1f8>
 80139c2:	8b11      	ldrh	r1, [r2, #24]
 80139c4:	f8d4 e000 	ldr.w	lr, [r4]
 80139c8:	2901      	cmp	r1, #1
 80139ca:	f200 80bf 	bhi.w	8013b4c <forward_conv2d_rgb_sssa8_ch+0x1cc>
 80139ce:	2100      	movs	r1, #0
 80139d0:	2b03      	cmp	r3, #3
 80139d2:	f000 80dd 	beq.w	8013b90 <forward_conv2d_rgb_sssa8_ch+0x210>
 80139d6:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80139d8:	2b00      	cmp	r3, #0
 80139da:	f000 80d2 	beq.w	8013b82 <forward_conv2d_rgb_sssa8_ch+0x202>
 80139de:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
 80139e2:	681d      	ldr	r5, [r3, #0]
 80139e4:	f1bb 0f00 	cmp.w	fp, #0
 80139e8:	f000 80be 	beq.w	8013b68 <forward_conv2d_rgb_sssa8_ch+0x1e8>
 80139ec:	685e      	ldr	r6, [r3, #4]
 80139ee:	698a      	ldr	r2, [r1, #24]
 80139f0:	69ab      	ldr	r3, [r5, #24]
 80139f2:	6892      	ldr	r2, [r2, #8]
 80139f4:	68f1      	ldr	r1, [r6, #12]
 80139f6:	9213      	str	r2, [sp, #76]	; 0x4c
 80139f8:	689a      	ldr	r2, [r3, #8]
 80139fa:	f8dc 300c 	ldr.w	r3, [ip, #12]
 80139fe:	684d      	ldr	r5, [r1, #4]
 8013a00:	689b      	ldr	r3, [r3, #8]
 8013a02:	950c      	str	r5, [sp, #48]	; 0x30
 8013a04:	930f      	str	r3, [sp, #60]	; 0x3c
 8013a06:	688b      	ldr	r3, [r1, #8]
 8013a08:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8013a0a:	930e      	str	r3, [sp, #56]	; 0x38
 8013a0c:	888b      	ldrh	r3, [r1, #4]
 8013a0e:	f8de 100c 	ldr.w	r1, [lr, #12]
 8013a12:	9311      	str	r3, [sp, #68]	; 0x44
 8013a14:	684b      	ldr	r3, [r1, #4]
 8013a16:	b2a9      	uxth	r1, r5
 8013a18:	9312      	str	r3, [sp, #72]	; 0x48
 8013a1a:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8013a1c:	9310      	str	r3, [sp, #64]	; 0x40
 8013a1e:	2c00      	cmp	r4, #0
 8013a20:	f000 809c 	beq.w	8013b5c <forward_conv2d_rgb_sssa8_ch+0x1dc>
 8013a24:	68a4      	ldr	r4, [r4, #8]
 8013a26:	2c00      	cmp	r4, #0
 8013a28:	f000 8098 	beq.w	8013b5c <forward_conv2d_rgb_sssa8_ch+0x1dc>
 8013a2c:	69a7      	ldr	r7, [r4, #24]
 8013a2e:	2f00      	cmp	r7, #0
 8013a30:	bf18      	it	ne
 8013a32:	4627      	movne	r7, r4
 8013a34:	f8dc 4000 	ldr.w	r4, [ip]
 8013a38:	6835      	ldr	r5, [r6, #0]
 8013a3a:	f8de 0000 	ldr.w	r0, [lr]
 8013a3e:	2c00      	cmp	r4, #0
 8013a40:	f000 8089 	beq.w	8013b56 <forward_conv2d_rgb_sssa8_ch+0x1d6>
 8013a44:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013a48:	f1b9 0f00 	cmp.w	r9, #0
 8013a4c:	f000 8083 	beq.w	8013b56 <forward_conv2d_rgb_sssa8_ch+0x1d6>
 8013a50:	f8b4 a002 	ldrh.w	sl, [r4, #2]
 8013a54:	f1ba 0f00 	cmp.w	sl, #0
 8013a58:	d07d      	beq.n	8013b56 <forward_conv2d_rgb_sssa8_ch+0x1d6>
 8013a5a:	f8d9 9000 	ldr.w	r9, [r9]
 8013a5e:	ed99 0a00 	vldr	s0, [r9]
 8013a62:	2d00      	cmp	r5, #0
 8013a64:	d074      	beq.n	8013b50 <forward_conv2d_rgb_sssa8_ch+0x1d0>
 8013a66:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8013a6a:	f1b9 0f00 	cmp.w	r9, #0
 8013a6e:	d06f      	beq.n	8013b50 <forward_conv2d_rgb_sssa8_ch+0x1d0>
 8013a70:	f8b5 a002 	ldrh.w	sl, [r5, #2]
 8013a74:	f1ba 0f00 	cmp.w	sl, #0
 8013a78:	d06a      	beq.n	8013b50 <forward_conv2d_rgb_sssa8_ch+0x1d0>
 8013a7a:	f8d9 9000 	ldr.w	r9, [r9]
 8013a7e:	edd9 0a00 	vldr	s1, [r9]
 8013a82:	69b3      	ldr	r3, [r6, #24]
 8013a84:	f8dc 9018 	ldr.w	r9, [ip, #24]
 8013a88:	689b      	ldr	r3, [r3, #8]
 8013a8a:	f8de c018 	ldr.w	ip, [lr, #24]
 8013a8e:	f8d9 9008 	ldr.w	r9, [r9, #8]
 8013a92:	f8dc a008 	ldr.w	sl, [ip, #8]
 8013a96:	930b      	str	r3, [sp, #44]	; 0x2c
 8013a98:	b110      	cbz	r0, 8013aa0 <forward_conv2d_rgb_sssa8_ch+0x120>
 8013a9a:	6840      	ldr	r0, [r0, #4]
 8013a9c:	b100      	cbz	r0, 8013aa0 <forward_conv2d_rgb_sssa8_ch+0x120>
 8013a9e:	6800      	ldr	r0, [r0, #0]
 8013aa0:	b154      	cbz	r4, 8013ab8 <forward_conv2d_rgb_sssa8_ch+0x138>
 8013aa2:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8013aa6:	f1bc 0f00 	cmp.w	ip, #0
 8013aaa:	d061      	beq.n	8013b70 <forward_conv2d_rgb_sssa8_ch+0x1f0>
 8013aac:	8864      	ldrh	r4, [r4, #2]
 8013aae:	b11c      	cbz	r4, 8013ab8 <forward_conv2d_rgb_sssa8_ch+0x138>
 8013ab0:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8013ab4:	f994 4000 	ldrsb.w	r4, [r4]
 8013ab8:	b155      	cbz	r5, 8013ad0 <forward_conv2d_rgb_sssa8_ch+0x150>
 8013aba:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8013abe:	f1bc 0f00 	cmp.w	ip, #0
 8013ac2:	d057      	beq.n	8013b74 <forward_conv2d_rgb_sssa8_ch+0x1f4>
 8013ac4:	886d      	ldrh	r5, [r5, #2]
 8013ac6:	b11d      	cbz	r5, 8013ad0 <forward_conv2d_rgb_sssa8_ch+0x150>
 8013ac8:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8013acc:	f995 5000 	ldrsb.w	r5, [r5]
 8013ad0:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8013ad4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013ad8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013adc:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 8013ae0:	f001 fcc0 	bl	8015464 <align_factor_ch>
 8013ae4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013ae6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013ae8:	4648      	mov	r0, r9
 8013aea:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013aec:	9208      	str	r2, [sp, #32]
 8013aee:	4652      	mov	r2, sl
 8013af0:	9404      	str	r4, [sp, #16]
 8013af2:	e9cd 5305 	strd	r5, r3, [sp, #20]
 8013af6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013af8:	9303      	str	r3, [sp, #12]
 8013afa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013afc:	9302      	str	r3, [sp, #8]
 8013afe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013b00:	9301      	str	r3, [sp, #4]
 8013b02:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8013b06:	9307      	str	r3, [sp, #28]
 8013b08:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8013b0c:	9300      	str	r3, [sp, #0]
 8013b0e:	460b      	mov	r3, r1
 8013b10:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8013b14:	f000 f8e8 	bl	8013ce8 <forward_lite_conv2d_rgb_sssa8_ch>
 8013b18:	68b3      	ldr	r3, [r6, #8]
 8013b1a:	0a1b      	lsrs	r3, r3, #8
 8013b1c:	d02f      	beq.n	8013b7e <forward_conv2d_rgb_sssa8_ch+0x1fe>
 8013b1e:	68f0      	ldr	r0, [r6, #12]
 8013b20:	2201      	movs	r2, #1
 8013b22:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8013b26:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013b2a:	4298      	cmp	r0, r3
 8013b2c:	fb01 f202 	mul.w	r2, r1, r2
 8013b30:	d1f9      	bne.n	8013b26 <forward_conv2d_rgb_sssa8_ch+0x1a6>
 8013b32:	463b      	mov	r3, r7
 8013b34:	4631      	mov	r1, r6
 8013b36:	4640      	mov	r0, r8
 8013b38:	46dc      	mov	ip, fp
 8013b3a:	b015      	add	sp, #84	; 0x54
 8013b3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b40:	4760      	bx	ip
 8013b42:	2300      	movs	r3, #0
 8013b44:	685b      	ldr	r3, [r3, #4]
 8013b46:	deff      	udf	#255	; 0xff
 8013b48:	685b      	ldr	r3, [r3, #4]
 8013b4a:	deff      	udf	#255	; 0xff
 8013b4c:	6861      	ldr	r1, [r4, #4]
 8013b4e:	e73f      	b.n	80139d0 <forward_conv2d_rgb_sssa8_ch+0x50>
 8013b50:	eddf 0a12 	vldr	s1, [pc, #72]	; 8013b9c <forward_conv2d_rgb_sssa8_ch+0x21c>
 8013b54:	e795      	b.n	8013a82 <forward_conv2d_rgb_sssa8_ch+0x102>
 8013b56:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8013b9c <forward_conv2d_rgb_sssa8_ch+0x21c>
 8013b5a:	e782      	b.n	8013a62 <forward_conv2d_rgb_sssa8_ch+0xe2>
 8013b5c:	6a07      	ldr	r7, [r0, #32]
 8013b5e:	2f00      	cmp	r7, #0
 8013b60:	f43f af68 	beq.w	8013a34 <forward_conv2d_rgb_sssa8_ch+0xb4>
 8013b64:	68bf      	ldr	r7, [r7, #8]
 8013b66:	e765      	b.n	8013a34 <forward_conv2d_rgb_sssa8_ch+0xb4>
 8013b68:	4646      	mov	r6, r8
 8013b6a:	f8df b034 	ldr.w	fp, [pc, #52]	; 8013ba0 <forward_conv2d_rgb_sssa8_ch+0x220>
 8013b6e:	e73e      	b.n	80139ee <forward_conv2d_rgb_sssa8_ch+0x6e>
 8013b70:	4664      	mov	r4, ip
 8013b72:	e7a1      	b.n	8013ab8 <forward_conv2d_rgb_sssa8_ch+0x138>
 8013b74:	4665      	mov	r5, ip
 8013b76:	e7ab      	b.n	8013ad0 <forward_conv2d_rgb_sssa8_ch+0x150>
 8013b78:	46a6      	mov	lr, r4
 8013b7a:	4621      	mov	r1, r4
 8013b7c:	e728      	b.n	80139d0 <forward_conv2d_rgb_sssa8_ch+0x50>
 8013b7e:	2201      	movs	r2, #1
 8013b80:	e7d7      	b.n	8013b32 <forward_conv2d_rgb_sssa8_ch+0x1b2>
 8013b82:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8013b84:	b93a      	cbnz	r2, 8013b96 <forward_conv2d_rgb_sssa8_ch+0x216>
 8013b86:	6993      	ldr	r3, [r2, #24]
 8013b88:	deff      	udf	#255	; 0xff
 8013b8a:	2300      	movs	r3, #0
 8013b8c:	685b      	ldr	r3, [r3, #4]
 8013b8e:	deff      	udf	#255	; 0xff
 8013b90:	2300      	movs	r3, #0
 8013b92:	685b      	ldr	r3, [r3, #4]
 8013b94:	deff      	udf	#255	; 0xff
 8013b96:	68db      	ldr	r3, [r3, #12]
 8013b98:	deff      	udf	#255	; 0xff
 8013b9a:	bf00      	nop
 8013b9c:	00000000 	.word	0x00000000
 8013ba0:	0801397d 	.word	0x0801397d

08013ba4 <forward_lite_pw_sssa8_ch>:
 8013ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ba8:	b093      	sub	sp, #76	; 0x4c
 8013baa:	4604      	mov	r4, r0
 8013bac:	930a      	str	r3, [sp, #40]	; 0x28
 8013bae:	f99d 307c 	ldrsb.w	r3, [sp, #124]	; 0x7c
 8013bb2:	f8bd 7074 	ldrh.w	r7, [sp, #116]	; 0x74
 8013bb6:	930e      	str	r3, [sp, #56]	; 0x38
 8013bb8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8013bba:	9110      	str	r1, [sp, #64]	; 0x40
 8013bbc:	eb03 0187 	add.w	r1, r3, r7, lsl #2
 8013bc0:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8013bc4:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8013bc8:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 8013bcc:	f99d c080 	ldrsb.w	ip, [sp, #128]	; 0x80
 8013bd0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8013bd4:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8013bd6:	920d      	str	r2, [sp, #52]	; 0x34
 8013bd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8013bda:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 8013bde:	930f      	str	r3, [sp, #60]	; 0x3c
 8013be0:	00bb      	lsls	r3, r7, #2
 8013be2:	9311      	str	r3, [sp, #68]	; 0x44
 8013be4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8013be6:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8013bea:	007b      	lsls	r3, r7, #1
 8013bec:	930c      	str	r3, [sp, #48]	; 0x30
 8013bee:	2f00      	cmp	r7, #0
 8013bf0:	d075      	beq.n	8013cde <forward_lite_pw_sssa8_ch+0x13a>
 8013bf2:	3104      	adds	r1, #4
 8013bf4:	4648      	mov	r0, r9
 8013bf6:	eb09 0e03 	add.w	lr, r9, r3
 8013bfa:	f04f 0801 	mov.w	r8, #1
 8013bfe:	f930 3b02 	ldrsh.w	r3, [r0], #2
 8013c02:	1e5a      	subs	r2, r3, #1
 8013c04:	fa08 f603 	lsl.w	r6, r8, r3
 8013c08:	fa0c f303 	lsl.w	r3, ip, r3
 8013c0c:	b292      	uxth	r2, r2
 8013c0e:	eb03 0356 	add.w	r3, r3, r6, lsr #1
 8013c12:	2a14      	cmp	r2, #20
 8013c14:	d846      	bhi.n	8013ca4 <forward_lite_pw_sssa8_ch+0x100>
 8013c16:	4586      	cmp	lr, r0
 8013c18:	f841 3c04 	str.w	r3, [r1, #-4]
 8013c1c:	f101 0104 	add.w	r1, r1, #4
 8013c20:	d1ed      	bne.n	8013bfe <forward_lite_pw_sssa8_ch+0x5a>
 8013c22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013c24:	eba9 0903 	sub.w	r9, r9, r3
 8013c28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c2a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013c2c:	ebae 0303 	sub.w	r3, lr, r3
 8013c30:	930c      	str	r3, [sp, #48]	; 0x30
 8013c32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013c34:	fb02 f303 	mul.w	r3, r2, r3
 8013c38:	930d      	str	r3, [sp, #52]	; 0x34
 8013c3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013c3c:	2b01      	cmp	r3, #1
 8013c3e:	d038      	beq.n	8013cb2 <forward_lite_pw_sssa8_ch+0x10e>
 8013c40:	2300      	movs	r3, #0
 8013c42:	930f      	str	r3, [sp, #60]	; 0x3c
 8013c44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013c46:	b353      	cbz	r3, 8013c9e <forward_lite_pw_sssa8_ch+0xfa>
 8013c48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013c4a:	2600      	movs	r6, #0
 8013c4c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013c4e:	fb07 f203 	mul.w	r2, r7, r3
 8013c52:	fb01 f803 	mul.w	r8, r1, r3
 8013c56:	4651      	mov	r1, sl
 8013c58:	46ba      	mov	sl, r7
 8013c5a:	464f      	mov	r7, r9
 8013c5c:	4691      	mov	r9, r2
 8013c5e:	465a      	mov	r2, fp
 8013c60:	f8dd b088 	ldr.w	fp, [sp, #136]	; 0x88
 8013c64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013c66:	3601      	adds	r6, #1
 8013c68:	4620      	mov	r0, r4
 8013c6a:	921e      	str	r2, [sp, #120]	; 0x78
 8013c6c:	9308      	str	r3, [sp, #32]
 8013c6e:	4444      	add	r4, r8
 8013c70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013c72:	911c      	str	r1, [sp, #112]	; 0x70
 8013c74:	e9cd 7306 	strd	r7, r3, [sp, #24]
 8013c78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013c7a:	9305      	str	r3, [sp, #20]
 8013c7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c7e:	e9cd a303 	strd	sl, r3, [sp, #12]
 8013c82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013c84:	9302      	str	r3, [sp, #8]
 8013c86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c88:	9301      	str	r3, [sp, #4]
 8013c8a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8013c8c:	9300      	str	r3, [sp, #0]
 8013c8e:	462b      	mov	r3, r5
 8013c90:	f001 ff6c 	bl	8015b6c <st_sssa8_ch_nn_mat_mult_nt_t>
 8013c94:	45b3      	cmp	fp, r6
 8013c96:	444d      	add	r5, r9
 8013c98:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013c9a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013c9c:	d1e2      	bne.n	8013c64 <forward_lite_pw_sssa8_ch+0xc0>
 8013c9e:	b013      	add	sp, #76	; 0x4c
 8013ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ca4:	4586      	cmp	lr, r0
 8013ca6:	f841 cc04 	str.w	ip, [r1, #-4]
 8013caa:	f101 0104 	add.w	r1, r1, #4
 8013cae:	d1a6      	bne.n	8013bfe <forward_lite_pw_sssa8_ch+0x5a>
 8013cb0:	e7b7      	b.n	8013c22 <forward_lite_pw_sssa8_ch+0x7e>
 8013cb2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013cb4:	f06f 0309 	mvn.w	r3, #9
 8013cb8:	fb03 2307 	mla	r3, r3, r7, r2
 8013cbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013cbe:	fb07 f202 	mul.w	r2, r7, r2
 8013cc2:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8013cc6:	dbbb      	blt.n	8013c40 <forward_lite_pw_sssa8_ch+0x9c>
 8013cc8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8013cca:	4639      	mov	r1, r7
 8013ccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013cce:	4650      	mov	r0, sl
 8013cd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013cd2:	9601      	str	r6, [sp, #4]
 8013cd4:	9300      	str	r3, [sp, #0]
 8013cd6:	f001 ff09 	bl	8015aec <st_sssa8_ch_fullW_prefetch>
 8013cda:	960f      	str	r6, [sp, #60]	; 0x3c
 8013cdc:	e7b2      	b.n	8013c44 <forward_lite_pw_sssa8_ch+0xa0>
 8013cde:	46ce      	mov	lr, r9
 8013ce0:	f8dd 9094 	ldr.w	r9, [sp, #148]	; 0x94
 8013ce4:	e7a0      	b.n	8013c28 <forward_lite_pw_sssa8_ch+0x84>
 8013ce6:	bf00      	nop

08013ce8 <forward_lite_conv2d_rgb_sssa8_ch>:
 8013ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cec:	4617      	mov	r7, r2
 8013cee:	468b      	mov	fp, r1
 8013cf0:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8013cf4:	4639      	mov	r1, r7
 8013cf6:	ed2d 8b02 	vpush	{d8}
 8013cfa:	b0c9      	sub	sp, #292	; 0x124
 8013cfc:	ee08 2a90 	vmov	s17, r2
 8013d00:	461a      	mov	r2, r3
 8013d02:	f8bd 7154 	ldrh.w	r7, [sp, #340]	; 0x154
 8013d06:	f8bd 5150 	ldrh.w	r5, [sp, #336]	; 0x150
 8013d0a:	4690      	mov	r8, r2
 8013d0c:	971c      	str	r7, [sp, #112]	; 0x70
 8013d0e:	f8bd 7158 	ldrh.w	r7, [sp, #344]	; 0x158
 8013d12:	46a9      	mov	r9, r5
 8013d14:	f99d 6160 	ldrsb.w	r6, [sp, #352]	; 0x160
 8013d18:	9312      	str	r3, [sp, #72]	; 0x48
 8013d1a:	9008      	str	r0, [sp, #32]
 8013d1c:	9b57      	ldr	r3, [sp, #348]	; 0x15c
 8013d1e:	985c      	ldr	r0, [sp, #368]	; 0x170
 8013d20:	970d      	str	r7, [sp, #52]	; 0x34
 8013d22:	f8bd 716c 	ldrh.w	r7, [sp, #364]	; 0x16c
 8013d26:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8013d2a:	9500      	str	r5, [sp, #0]
 8013d2c:	9003      	str	r0, [sp, #12]
 8013d2e:	2003      	movs	r0, #3
 8013d30:	9301      	str	r3, [sp, #4]
 8013d32:	462b      	mov	r3, r5
 8013d34:	9602      	str	r6, [sp, #8]
 8013d36:	9522      	str	r5, [sp, #136]	; 0x88
 8013d38:	970c      	str	r7, [sp, #48]	; 0x30
 8013d3a:	eb04 0748 	add.w	r7, r4, r8, lsl #1
 8013d3e:	f99d 5164 	ldrsb.w	r5, [sp, #356]	; 0x164
 8013d42:	f001 fbf3 	bl	801552c <st_sssa8_ch_convolve_rank1upd>
 8013d46:	fb19 f309 	smulbb	r3, r9, r9
 8013d4a:	4642      	mov	r2, r8
 8013d4c:	ea4f 0c48 	mov.w	ip, r8, lsl #1
 8013d50:	970f      	str	r7, [sp, #60]	; 0x3c
 8013d52:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013d56:	b29b      	uxth	r3, r3
 8013d58:	9310      	str	r3, [sp, #64]	; 0x40
 8013d5a:	f06f 0309 	mvn.w	r3, #9
 8013d5e:	fb03 7308 	mla	r3, r3, r8, r7
 8013d62:	9325      	str	r3, [sp, #148]	; 0x94
 8013d64:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8013d68:	9326      	str	r3, [sp, #152]	; 0x98
 8013d6a:	b1aa      	cbz	r2, 8013d98 <forward_lite_conv2d_rgb_sssa8_ch+0xb0>
 8013d6c:	1d1a      	adds	r2, r3, #4
 8013d6e:	2001      	movs	r0, #1
 8013d70:	f934 3b02 	ldrsh.w	r3, [r4], #2
 8013d74:	1e59      	subs	r1, r3, #1
 8013d76:	fa00 fe03 	lsl.w	lr, r0, r3
 8013d7a:	fa05 f303 	lsl.w	r3, r5, r3
 8013d7e:	b289      	uxth	r1, r1
 8013d80:	eb03 035e 	add.w	r3, r3, lr, lsr #1
 8013d84:	2914      	cmp	r1, #20
 8013d86:	f200 80f0 	bhi.w	8013f6a <forward_lite_conv2d_rgb_sssa8_ch+0x282>
 8013d8a:	42bc      	cmp	r4, r7
 8013d8c:	f842 3c04 	str.w	r3, [r2, #-4]
 8013d90:	f102 0204 	add.w	r2, r2, #4
 8013d94:	d1ec      	bne.n	8013d70 <forward_lite_conv2d_rgb_sssa8_ch+0x88>
 8013d96:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8013d98:	eba4 030c 	sub.w	r3, r4, ip
 8013d9c:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8013d9e:	aa28      	add	r2, sp, #160	; 0xa0
 8013da0:	a934      	add	r1, sp, #208	; 0xd0
 8013da2:	9327      	str	r3, [sp, #156]	; 0x9c
 8013da4:	a83e      	add	r0, sp, #248	; 0xf8
 8013da6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013da8:	e9cd 332d 	strd	r3, r3, [sp, #180]	; 0xb4
 8013dac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013dae:	e9cd 3336 	strd	r3, r3, [sp, #216]	; 0xd8
 8013db2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8013db4:	e9cd 3338 	strd	r3, r3, [sp, #224]	; 0xe0
 8013db8:	ab30      	add	r3, sp, #192	; 0xc0
 8013dba:	9300      	str	r3, [sp, #0]
 8013dbc:	ab2c      	add	r3, sp, #176	; 0xb0
 8013dbe:	e9cd 4431 	strd	r4, r4, [sp, #196]	; 0xc4
 8013dc2:	e9cd bb29 	strd	fp, fp, [sp, #164]	; 0xa4
 8013dc6:	f001 fc3b 	bl	8015640 <ai_padding_opt_init>
 8013dca:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013dcc:	fb04 f304 	mul.w	r3, r4, r4
 8013dd0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013dd2:	fb01 f403 	mul.w	r4, r1, r3
 8013dd6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013dda:	fb01 f202 	mul.w	r2, r1, r2
 8013dde:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013de0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8013de4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8013de8:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8013dec:	930b      	str	r3, [sp, #44]	; 0x2c
 8013dee:	bfa8      	it	ge
 8013df0:	f44f 6420 	movge.w	r4, #2560	; 0xa00
 8013df4:	42a2      	cmp	r2, r4
 8013df6:	f340 81b1 	ble.w	801415c <forward_lite_conv2d_rgb_sssa8_ch+0x474>
 8013dfa:	2300      	movs	r3, #0
 8013dfc:	9320      	str	r3, [sp, #128]	; 0x80
 8013dfe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013e00:	fbb4 f3f3 	udiv	r3, r4, r3
 8013e04:	b29b      	uxth	r3, r3
 8013e06:	4619      	mov	r1, r3
 8013e08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013e0a:	4299      	cmp	r1, r3
 8013e0c:	bf28      	it	cs
 8013e0e:	4619      	movcs	r1, r3
 8013e10:	fbb3 f2f1 	udiv	r2, r3, r1
 8013e14:	fb01 3312 	mls	r3, r1, r2, r3
 8013e18:	b292      	uxth	r2, r2
 8013e1a:	9121      	str	r1, [sp, #132]	; 0x84
 8013e1c:	b29b      	uxth	r3, r3
 8013e1e:	921b      	str	r2, [sp, #108]	; 0x6c
 8013e20:	b11b      	cbz	r3, 8013e2a <forward_lite_conv2d_rgb_sssa8_ch+0x142>
 8013e22:	4613      	mov	r3, r2
 8013e24:	3301      	adds	r3, #1
 8013e26:	b29b      	uxth	r3, r3
 8013e28:	931b      	str	r3, [sp, #108]	; 0x6c
 8013e2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	f000 8188 	beq.w	8014142 <forward_lite_conv2d_rgb_sssa8_ch+0x45a>
 8013e32:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8013e34:	b236      	sxth	r6, r6
 8013e36:	2400      	movs	r4, #0
 8013e38:	425b      	negs	r3, r3
 8013e3a:	4625      	mov	r5, r4
 8013e3c:	b29a      	uxth	r2, r3
 8013e3e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013e40:	3b01      	subs	r3, #1
 8013e42:	921f      	str	r2, [sp, #124]	; 0x7c
 8013e44:	921a      	str	r2, [sp, #104]	; 0x68
 8013e46:	b29b      	uxth	r3, r3
 8013e48:	9324      	str	r3, [sp, #144]	; 0x90
 8013e4a:	4633      	mov	r3, r6
 8013e4c:	465e      	mov	r6, fp
 8013e4e:	469b      	mov	fp, r3
 8013e50:	a83e      	add	r0, sp, #248	; 0xf8
 8013e52:	f001 fc4f 	bl	80156f4 <ai_padding_opt_phase1>
 8013e56:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013e58:	9a5a      	ldr	r2, [sp, #360]	; 0x168
 8013e5a:	fb05 f303 	mul.w	r3, r5, r3
 8013e5e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013e60:	fb01 2303 	mla	r3, r1, r3, r2
 8013e64:	9316      	str	r3, [sp, #88]	; 0x58
 8013e66:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	f000 816f 	beq.w	801414c <forward_lite_conv2d_rgb_sssa8_ch+0x464>
 8013e6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	f000 8157 	beq.w	8014124 <forward_lite_conv2d_rgb_sssa8_ch+0x43c>
 8013e76:	b2a3      	uxth	r3, r4
 8013e78:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013e7a:	edcd 8a1d 	vstr	s17, [sp, #116]	; 0x74
 8013e7e:	931e      	str	r3, [sp, #120]	; 0x78
 8013e80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013e82:	1a9b      	subs	r3, r3, r2
 8013e84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013e86:	9323      	str	r3, [sp, #140]	; 0x8c
 8013e88:	fb02 3705 	mla	r7, r2, r5, r3
 8013e8c:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
 8013e90:	930e      	str	r3, [sp, #56]	; 0x38
 8013e92:	46ba      	mov	sl, r7
 8013e94:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8013e96:	9318      	str	r3, [sp, #96]	; 0x60
 8013e98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013e9a:	9319      	str	r3, [sp, #100]	; 0x64
 8013e9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013e9e:	9311      	str	r3, [sp, #68]	; 0x44
 8013ea0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013ea2:	9314      	str	r3, [sp, #80]	; 0x50
 8013ea4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8013ea6:	ee08 3a10 	vmov	s16, r3
 8013eaa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8013eac:	9317      	str	r3, [sp, #92]	; 0x5c
 8013eae:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 8013eb0:	9315      	str	r3, [sp, #84]	; 0x54
 8013eb2:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8013eb4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013eb6:	933f      	str	r3, [sp, #252]	; 0xfc
 8013eb8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8013eba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013ebc:	9340      	str	r3, [sp, #256]	; 0x100
 8013ebe:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 8013ec2:	9113      	str	r1, [sp, #76]	; 0x4c
 8013ec4:	2100      	movs	r1, #0
 8013ec6:	9309      	str	r3, [sp, #36]	; 0x24
 8013ec8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013eca:	923e      	str	r2, [sp, #248]	; 0xf8
 8013ecc:	9306      	str	r3, [sp, #24]
 8013ece:	910a      	str	r1, [sp, #40]	; 0x28
 8013ed0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013ed2:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 8013ed6:	2a00      	cmp	r2, #0
 8013ed8:	d071      	beq.n	8013fbe <forward_lite_conv2d_rgb_sssa8_ch+0x2d6>
 8013eda:	3a01      	subs	r2, #1
 8013edc:	923e      	str	r2, [sp, #248]	; 0xf8
 8013ede:	2201      	movs	r2, #1
 8013ee0:	f8ad 211e 	strh.w	r2, [sp, #286]	; 0x11e
 8013ee4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013ee6:	4552      	cmp	r2, sl
 8013ee8:	da51      	bge.n	8013f8e <forward_lite_conv2d_rgb_sssa8_ch+0x2a6>
 8013eea:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 8013eee:	4696      	mov	lr, r2
 8013ef0:	4615      	mov	r5, r2
 8013ef2:	f8cd a01c 	str.w	sl, [sp, #28]
 8013ef6:	4547      	cmp	r7, r8
 8013ef8:	dd40      	ble.n	8013f7c <forward_lite_conv2d_rgb_sssa8_ch+0x294>
 8013efa:	fb05 8006 	mla	r0, r5, r6, r8
 8013efe:	42ae      	cmp	r6, r5
 8013f00:	f103 0206 	add.w	r2, r3, #6
 8013f04:	9b08      	ldr	r3, [sp, #32]
 8013f06:	bfcc      	ite	gt
 8013f08:	2500      	movgt	r5, #0
 8013f0a:	2501      	movle	r5, #1
 8013f0c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8013f10:	4641      	mov	r1, r8
 8013f12:	ea45 75de 	orr.w	r5, r5, lr, lsr #31
 8013f16:	4418      	add	r0, r3
 8013f18:	e00b      	b.n	8013f32 <forward_lite_conv2d_rgb_sssa8_ch+0x24a>
 8013f1a:	f36b 441f 	bfi	r4, fp, #16, #16
 8013f1e:	f842 4c04 	str.w	r4, [r2, #-4]
 8013f22:	3101      	adds	r1, #1
 8013f24:	f822 cc06 	strh.w	ip, [r2, #-6]
 8013f28:	3003      	adds	r0, #3
 8013f2a:	3206      	adds	r2, #6
 8013f2c:	b20c      	sxth	r4, r1
 8013f2e:	42a7      	cmp	r7, r4
 8013f30:	dd24      	ble.n	8013f7c <forward_lite_conv2d_rgb_sssa8_ch+0x294>
 8013f32:	2400      	movs	r4, #0
 8013f34:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8013f38:	f1a2 0906 	sub.w	r9, r2, #6
 8013f3c:	46dc      	mov	ip, fp
 8013f3e:	f36b 040f 	bfi	r4, fp, #0, #16
 8013f42:	4613      	mov	r3, r2
 8013f44:	d1e9      	bne.n	8013f1a <forward_lite_conv2d_rgb_sssa8_ch+0x232>
 8013f46:	2d00      	cmp	r5, #0
 8013f48:	d1e7      	bne.n	8013f1a <forward_lite_conv2d_rgb_sssa8_ch+0x232>
 8013f4a:	428e      	cmp	r6, r1
 8013f4c:	dde5      	ble.n	8013f1a <forward_lite_conv2d_rgb_sssa8_ch+0x232>
 8013f4e:	6804      	ldr	r4, [r0, #0]
 8013f50:	fa2f fa84 	sxtb16	sl, r4
 8013f54:	ea4f 2434 	mov.w	r4, r4, ror #8
 8013f58:	fa0f fc8a 	sxth.w	ip, sl
 8013f5c:	fa2f f484 	sxtb16	r4, r4
 8013f60:	eac4 040a 	pkhbt	r4, r4, sl
 8013f64:	f8c9 4002 	str.w	r4, [r9, #2]
 8013f68:	e7db      	b.n	8013f22 <forward_lite_conv2d_rgb_sssa8_ch+0x23a>
 8013f6a:	42bc      	cmp	r4, r7
 8013f6c:	f842 5c04 	str.w	r5, [r2, #-4]
 8013f70:	f102 0204 	add.w	r2, r2, #4
 8013f74:	f47f aefc 	bne.w	8013d70 <forward_lite_conv2d_rgb_sssa8_ch+0x88>
 8013f78:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8013f7a:	e70d      	b.n	8013d98 <forward_lite_conv2d_rgb_sssa8_ch+0xb0>
 8013f7c:	f10e 0e01 	add.w	lr, lr, #1
 8013f80:	9a07      	ldr	r2, [sp, #28]
 8013f82:	fa0f fe8e 	sxth.w	lr, lr
 8013f86:	4596      	cmp	lr, r2
 8013f88:	4675      	mov	r5, lr
 8013f8a:	dbb4      	blt.n	8013ef6 <forward_lite_conv2d_rgb_sssa8_ch+0x20e>
 8013f8c:	4692      	mov	sl, r2
 8013f8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013f90:	429a      	cmp	r2, r3
 8013f92:	d057      	beq.n	8014044 <forward_lite_conv2d_rgb_sssa8_ch+0x35c>
 8013f94:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8013f96:	9a06      	ldr	r2, [sp, #24]
 8013f98:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013f9a:	4422      	add	r2, r4
 8013f9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013f9e:	3001      	adds	r0, #1
 8013fa0:	b292      	uxth	r2, r2
 8013fa2:	4421      	add	r1, r4
 8013fa4:	b200      	sxth	r0, r0
 8013fa6:	9206      	str	r2, [sp, #24]
 8013fa8:	b289      	uxth	r1, r1
 8013faa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013fac:	900a      	str	r0, [sp, #40]	; 0x28
 8013fae:	4282      	cmp	r2, r0
 8013fb0:	9109      	str	r1, [sp, #36]	; 0x24
 8013fb2:	dd6d      	ble.n	8014090 <forward_lite_conv2d_rgb_sssa8_ch+0x3a8>
 8013fb4:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8013fb6:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 8013fba:	2a00      	cmp	r2, #0
 8013fbc:	d18d      	bne.n	8013eda <forward_lite_conv2d_rgb_sssa8_ch+0x1f2>
 8013fbe:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8013fc0:	b932      	cbnz	r2, 8013fd0 <forward_lite_conv2d_rgb_sssa8_ch+0x2e8>
 8013fc2:	9a40      	ldr	r2, [sp, #256]	; 0x100
 8013fc4:	3a01      	subs	r2, #1
 8013fc6:	9240      	str	r2, [sp, #256]	; 0x100
 8013fc8:	2201      	movs	r2, #1
 8013fca:	f8ad 211e 	strh.w	r2, [sp, #286]	; 0x11e
 8013fce:	e789      	b.n	8013ee4 <forward_lite_conv2d_rgb_sssa8_ch+0x1fc>
 8013fd0:	3a01      	subs	r2, #1
 8013fd2:	923f      	str	r2, [sp, #252]	; 0xfc
 8013fd4:	f8bd 211c 	ldrh.w	r2, [sp, #284]	; 0x11c
 8013fd8:	2a01      	cmp	r2, #1
 8013fda:	f8ad 211e 	strh.w	r2, [sp, #286]	; 0x11e
 8013fde:	d081      	beq.n	8013ee4 <forward_lite_conv2d_rgb_sssa8_ch+0x1fc>
 8013fe0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013fe2:	4552      	cmp	r2, sl
 8013fe4:	dad3      	bge.n	8013f8e <forward_lite_conv2d_rgb_sssa8_ch+0x2a6>
 8013fe6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013fe8:	4615      	mov	r5, r2
 8013fea:	9806      	ldr	r0, [sp, #24]
 8013fec:	1e4f      	subs	r7, r1, #1
 8013fee:	fa0f fc81 	sxth.w	ip, r1
 8013ff2:	9c08      	ldr	r4, [sp, #32]
 8013ff4:	4611      	mov	r1, r2
 8013ff6:	1a3f      	subs	r7, r7, r0
 8013ff8:	b2bf      	uxth	r7, r7
 8013ffa:	3701      	adds	r7, #1
 8013ffc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8014000:	007f      	lsls	r7, r7, #1
 8014002:	45c4      	cmp	ip, r8
 8014004:	dd16      	ble.n	8014034 <forward_lite_conv2d_rgb_sssa8_ch+0x34c>
 8014006:	fb01 8106 	mla	r1, r1, r6, r8
 801400a:	19d8      	adds	r0, r3, r7
 801400c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8014010:	4421      	add	r1, r4
 8014012:	3306      	adds	r3, #6
 8014014:	f851 2b03 	ldr.w	r2, [r1], #3
 8014018:	fa2f fe82 	sxtb16	lr, r2
 801401c:	4283      	cmp	r3, r0
 801401e:	ea4f 2232 	mov.w	r2, r2, ror #8
 8014022:	f823 ec06 	strh.w	lr, [r3, #-6]
 8014026:	fa2f f282 	sxtb16	r2, r2
 801402a:	eac2 020e 	pkhbt	r2, r2, lr
 801402e:	f843 2c04 	str.w	r2, [r3, #-4]
 8014032:	d1ee      	bne.n	8014012 <forward_lite_conv2d_rgb_sssa8_ch+0x32a>
 8014034:	3501      	adds	r5, #1
 8014036:	b22d      	sxth	r5, r5
 8014038:	4555      	cmp	r5, sl
 801403a:	4629      	mov	r1, r5
 801403c:	dbe1      	blt.n	8014002 <forward_lite_conv2d_rgb_sssa8_ch+0x31a>
 801403e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014040:	429a      	cmp	r2, r3
 8014042:	d1a7      	bne.n	8013f94 <forward_lite_conv2d_rgb_sssa8_ch+0x2ac>
 8014044:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014046:	4610      	mov	r0, r2
 8014048:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801404a:	ee18 2a10 	vmov	r2, s16
 801404e:	9305      	str	r3, [sp, #20]
 8014050:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014052:	9304      	str	r3, [sp, #16]
 8014054:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014056:	9303      	str	r3, [sp, #12]
 8014058:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801405a:	9302      	str	r3, [sp, #8]
 801405c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801405e:	9301      	str	r3, [sp, #4]
 8014060:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014062:	9300      	str	r3, [sp, #0]
 8014064:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014066:	f002 fc6d 	bl	8016944 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 801406a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801406c:	9b06      	ldr	r3, [sp, #24]
 801406e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014070:	4423      	add	r3, r4
 8014072:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014074:	3101      	adds	r1, #1
 8014076:	9013      	str	r0, [sp, #76]	; 0x4c
 8014078:	b29b      	uxth	r3, r3
 801407a:	4422      	add	r2, r4
 801407c:	b209      	sxth	r1, r1
 801407e:	9306      	str	r3, [sp, #24]
 8014080:	b292      	uxth	r2, r2
 8014082:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014084:	910a      	str	r1, [sp, #40]	; 0x28
 8014086:	428b      	cmp	r3, r1
 8014088:	9209      	str	r2, [sp, #36]	; 0x24
 801408a:	dd16      	ble.n	80140ba <forward_lite_conv2d_rgb_sssa8_ch+0x3d2>
 801408c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801408e:	e791      	b.n	8013fb4 <forward_lite_conv2d_rgb_sssa8_ch+0x2cc>
 8014090:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014092:	4299      	cmp	r1, r3
 8014094:	d011      	beq.n	80140ba <forward_lite_conv2d_rgb_sssa8_ch+0x3d2>
 8014096:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014098:	ee18 2a10 	vmov	r2, s16
 801409c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801409e:	9305      	str	r3, [sp, #20]
 80140a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80140a2:	9304      	str	r3, [sp, #16]
 80140a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80140a6:	9303      	str	r3, [sp, #12]
 80140a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80140aa:	9302      	str	r3, [sp, #8]
 80140ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80140ae:	9301      	str	r3, [sp, #4]
 80140b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80140b2:	9300      	str	r3, [sp, #0]
 80140b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80140b6:	f002 ff65 	bl	8016f84 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 80140ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80140bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80140be:	9916      	ldr	r1, [sp, #88]	; 0x58
 80140c0:	1a9b      	subs	r3, r3, r2
 80140c2:	4411      	add	r1, r2
 80140c4:	b29b      	uxth	r3, r3
 80140c6:	9116      	str	r1, [sp, #88]	; 0x58
 80140c8:	429a      	cmp	r2, r3
 80140ca:	9319      	str	r3, [sp, #100]	; 0x64
 80140cc:	bf28      	it	cs
 80140ce:	461a      	movcs	r2, r3
 80140d0:	b294      	uxth	r4, r2
 80140d2:	b954      	cbnz	r4, 80140ea <forward_lite_conv2d_rgb_sssa8_ch+0x402>
 80140d4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80140d6:	3b01      	subs	r3, #1
 80140d8:	b29b      	uxth	r3, r3
 80140da:	461a      	mov	r2, r3
 80140dc:	9318      	str	r3, [sp, #96]	; 0x60
 80140de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80140e2:	429a      	cmp	r2, r3
 80140e4:	d020      	beq.n	8014128 <forward_lite_conv2d_rgb_sssa8_ch+0x440>
 80140e6:	9411      	str	r4, [sp, #68]	; 0x44
 80140e8:	e6e3      	b.n	8013eb2 <forward_lite_conv2d_rgb_sssa8_ch+0x1ca>
 80140ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80140ee:	991d      	ldr	r1, [sp, #116]	; 0x74
 80140f0:	fb02 1003 	mla	r0, r2, r3, r1
 80140f4:	ee18 1a10 	vmov	r1, s16
 80140f8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80140fc:	901d      	str	r0, [sp, #116]	; 0x74
 80140fe:	ee08 1a10 	vmov	s16, r1
 8014102:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8014104:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8014108:	9117      	str	r1, [sp, #92]	; 0x5c
 801410a:	9915      	ldr	r1, [sp, #84]	; 0x54
 801410c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8014110:	9115      	str	r1, [sp, #84]	; 0x54
 8014112:	9914      	ldr	r1, [sp, #80]	; 0x50
 8014114:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8014118:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801411a:	9314      	str	r3, [sp, #80]	; 0x50
 801411c:	4623      	mov	r3, r4
 801411e:	f001 fb03 	bl	8015728 <st_int8_to16_dual>
 8014122:	e7d7      	b.n	80140d4 <forward_lite_conv2d_rgb_sssa8_ch+0x3ec>
 8014124:	b2a3      	uxth	r3, r4
 8014126:	931e      	str	r3, [sp, #120]	; 0x78
 8014128:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801412a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801412c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801412e:	4413      	add	r3, r2
 8014130:	3401      	adds	r4, #1
 8014132:	b29b      	uxth	r3, r3
 8014134:	b224      	sxth	r4, r4
 8014136:	931a      	str	r3, [sp, #104]	; 0x68
 8014138:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801413a:	4625      	mov	r5, r4
 801413c:	42a3      	cmp	r3, r4
 801413e:	f73f ae87 	bgt.w	8013e50 <forward_lite_conv2d_rgb_sssa8_ch+0x168>
 8014142:	b049      	add	sp, #292	; 0x124
 8014144:	ecbd 8b02 	vpop	{d8}
 8014148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801414c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801414e:	ee18 0a90 	vmov	r0, s17
 8014152:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014154:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014156:	f001 fae7 	bl	8015728 <st_int8_to16_dual>
 801415a:	e688      	b.n	8013e6e <forward_lite_conv2d_rgb_sssa8_ch+0x186>
 801415c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801415e:	ee18 0a90 	vmov	r0, s17
 8014162:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014164:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014166:	f001 fadf 	bl	8015728 <st_int8_to16_dual>
 801416a:	2301      	movs	r3, #1
 801416c:	9320      	str	r3, [sp, #128]	; 0x80
 801416e:	e646      	b.n	8013dfe <forward_lite_conv2d_rgb_sssa8_ch+0x116>

08014170 <forward_lite_dw_3x3_sssa8_ch>:
 8014170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014174:	b09f      	sub	sp, #124	; 0x7c
 8014176:	461c      	mov	r4, r3
 8014178:	f8bd 20a8 	ldrh.w	r2, [sp, #168]	; 0xa8
 801417c:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8014180:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	; 0xa4
 8014184:	9207      	str	r2, [sp, #28]
 8014186:	f99d 20b0 	ldrsb.w	r2, [sp, #176]	; 0xb0
 801418a:	9306      	str	r3, [sp, #24]
 801418c:	9211      	str	r2, [sp, #68]	; 0x44
 801418e:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
 8014192:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8014194:	9215      	str	r2, [sp, #84]	; 0x54
 8014196:	f8bd 20c0 	ldrh.w	r2, [sp, #192]	; 0xc0
 801419a:	f8dd 80a0 	ldr.w	r8, [sp, #160]	; 0xa0
 801419e:	f99d 70b4 	ldrsb.w	r7, [sp, #180]	; 0xb4
 80141a2:	f8dd a0b8 	ldr.w	sl, [sp, #184]	; 0xb8
 80141a6:	901b      	str	r0, [sp, #108]	; 0x6c
 80141a8:	9105      	str	r1, [sp, #20]
 80141aa:	9219      	str	r2, [sp, #100]	; 0x64
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	f000 8461 	beq.w	8014a74 <forward_lite_dw_3x3_sssa8_ch+0x904>
 80141b2:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 80141b6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80141b8:	444b      	add	r3, r9
 80141ba:	44a1      	add	r9, r4
 80141bc:	9312      	str	r3, [sp, #72]	; 0x48
 80141be:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 80141c2:	461a      	mov	r2, r3
 80141c4:	9314      	str	r3, [sp, #80]	; 0x50
 80141c6:	f06f 0315 	mvn.w	r3, #21
 80141ca:	fb03 2304 	mla	r3, r3, r4, r2
 80141ce:	9313      	str	r3, [sp, #76]	; 0x4c
 80141d0:	b1d4      	cbz	r4, 8014208 <forward_lite_dw_3x3_sssa8_ch+0x98>
 80141d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80141d4:	2100      	movs	r1, #0
 80141d6:	2601      	movs	r6, #1
 80141d8:	f1a3 0e02 	sub.w	lr, r3, #2
 80141dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80141de:	1d18      	adds	r0, r3, #4
 80141e0:	f93e 3f02 	ldrsh.w	r3, [lr, #2]!
 80141e4:	3101      	adds	r1, #1
 80141e6:	1e5a      	subs	r2, r3, #1
 80141e8:	fa06 f503 	lsl.w	r5, r6, r3
 80141ec:	fa07 f303 	lsl.w	r3, r7, r3
 80141f0:	b292      	uxth	r2, r2
 80141f2:	eb03 0355 	add.w	r3, r3, r5, lsr #1
 80141f6:	2a14      	cmp	r2, #20
 80141f8:	f200 8433 	bhi.w	8014a62 <forward_lite_dw_3x3_sssa8_ch+0x8f2>
 80141fc:	428c      	cmp	r4, r1
 80141fe:	f840 3c04 	str.w	r3, [r0, #-4]
 8014202:	f100 0004 	add.w	r0, r0, #4
 8014206:	dceb      	bgt.n	80141e0 <forward_lite_dw_3x3_sssa8_ch+0x70>
 8014208:	9a06      	ldr	r2, [sp, #24]
 801420a:	2c03      	cmp	r4, #3
 801420c:	9b05      	ldr	r3, [sp, #20]
 801420e:	fb04 f202 	mul.w	r2, r4, r2
 8014212:	fb04 f303 	mul.w	r3, r4, r3
 8014216:	9216      	str	r2, [sp, #88]	; 0x58
 8014218:	9a07      	ldr	r2, [sp, #28]
 801421a:	fb03 f202 	mul.w	r2, r3, r2
 801421e:	eba3 030c 	sub.w	r3, r3, ip
 8014222:	9305      	str	r3, [sp, #20]
 8014224:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014226:	921a      	str	r2, [sp, #104]	; 0x68
 8014228:	f1c3 0300 	rsb	r3, r3, #0
 801422c:	eac3 4603 	pkhbt	r6, r3, r3, lsl #16
 8014230:	bf8c      	ite	hi
 8014232:	1ee3      	subhi	r3, r4, #3
 8014234:	2300      	movls	r3, #0
 8014236:	930d      	str	r3, [sp, #52]	; 0x34
 8014238:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801423a:	2b00      	cmp	r3, #0
 801423c:	f000 83a5 	beq.w	801498a <forward_lite_dw_3x3_sssa8_ch+0x81a>
 8014240:	f004 0303 	and.w	r3, r4, #3
 8014244:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014246:	930f      	str	r3, [sp, #60]	; 0x3c
 8014248:	2a00      	cmp	r2, #0
 801424a:	f000 839e 	beq.w	801498a <forward_lite_dw_3x3_sssa8_ch+0x81a>
 801424e:	3b01      	subs	r3, #1
 8014250:	46b0      	mov	r8, r6
 8014252:	46d1      	mov	r9, sl
 8014254:	940c      	str	r4, [sp, #48]	; 0x30
 8014256:	b29b      	uxth	r3, r3
 8014258:	9317      	str	r3, [sp, #92]	; 0x5c
 801425a:	2300      	movs	r3, #0
 801425c:	9318      	str	r3, [sp, #96]	; 0x60
 801425e:	46cc      	mov	ip, r9
 8014260:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 8014264:	fb03 2301 	mla	r3, r3, r1, r2
 8014268:	930a      	str	r3, [sp, #40]	; 0x28
 801426a:	2300      	movs	r3, #0
 801426c:	9310      	str	r3, [sp, #64]	; 0x40
 801426e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014270:	2b00      	cmp	r3, #0
 8014272:	f000 823f 	beq.w	80146f4 <forward_lite_dw_3x3_sssa8_ch+0x584>
 8014276:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 801427a:	2400      	movs	r4, #0
 801427c:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801427e:	930e      	str	r3, [sp, #56]	; 0x38
 8014280:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8014282:	9914      	ldr	r1, [sp, #80]	; 0x50
 8014284:	f103 0010 	add.w	r0, r3, #16
 8014288:	9202      	str	r2, [sp, #8]
 801428a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801428c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801428e:	9101      	str	r1, [sp, #4]
 8014290:	3348      	adds	r3, #72	; 0x48
 8014292:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014294:	f8cd c010 	str.w	ip, [sp, #16]
 8014298:	9407      	str	r4, [sp, #28]
 801429a:	9203      	str	r2, [sp, #12]
 801429c:	9006      	str	r0, [sp, #24]
 801429e:	e092      	b.n	80143c6 <forward_lite_dw_3x3_sssa8_ch+0x256>
 80142a0:	f8dd c008 	ldr.w	ip, [sp, #8]
 80142a4:	f1a2 0902 	sub.w	r9, r2, #2
 80142a8:	2401      	movs	r4, #1
 80142aa:	9d03      	ldr	r5, [sp, #12]
 80142ac:	3a01      	subs	r2, #1
 80142ae:	1c86      	adds	r6, r0, #2
 80142b0:	fa04 f909 	lsl.w	r9, r4, r9
 80142b4:	f85c 4b04 	ldr.w	r4, [ip], #4
 80142b8:	fb57 9704 	smmla	r7, r7, r4, r9
 80142bc:	fa47 f202 	asr.w	r2, r7, r2
 80142c0:	f855 7b04 	ldr.w	r7, [r5], #4
 80142c4:	443a      	add	r2, r7
 80142c6:	f302 0207 	ssat	r2, #8, r2
 80142ca:	f8dd a010 	ldr.w	sl, [sp, #16]
 80142ce:	f80a 2b01 	strb.w	r2, [sl], #1
 80142d2:	f9b6 4000 	ldrsh.w	r4, [r6]
 80142d6:	2c15      	cmp	r4, #21
 80142d8:	f340 8148 	ble.w	801456c <forward_lite_dw_3x3_sssa8_ch+0x3fc>
 80142dc:	682e      	ldr	r6, [r5, #0]
 80142de:	2001      	movs	r0, #1
 80142e0:	1ea5      	subs	r5, r4, #2
 80142e2:	f8dc 2000 	ldr.w	r2, [ip]
 80142e6:	3c01      	subs	r4, #1
 80142e8:	fa00 f505 	lsl.w	r5, r0, r5
 80142ec:	9802      	ldr	r0, [sp, #8]
 80142ee:	fb5e 5e02 	smmla	lr, lr, r2, r5
 80142f2:	9a01      	ldr	r2, [sp, #4]
 80142f4:	fa4e f404 	asr.w	r4, lr, r4
 80142f8:	f100 0708 	add.w	r7, r0, #8
 80142fc:	f102 0904 	add.w	r9, r2, #4
 8014300:	9a03      	ldr	r2, [sp, #12]
 8014302:	4426      	add	r6, r4
 8014304:	f102 0c08 	add.w	ip, r2, #8
 8014308:	f306 0607 	ssat	r6, #8, r6
 801430c:	9a04      	ldr	r2, [sp, #16]
 801430e:	f88a 6000 	strb.w	r6, [sl]
 8014312:	1c95      	adds	r5, r2, #2
 8014314:	f9b9 4000 	ldrsh.w	r4, [r9]
 8014318:	2c15      	cmp	r4, #21
 801431a:	f340 8148 	ble.w	80145ae <forward_lite_dw_3x3_sssa8_ch+0x43e>
 801431e:	f1a4 0902 	sub.w	r9, r4, #2
 8014322:	2001      	movs	r0, #1
 8014324:	683a      	ldr	r2, [r7, #0]
 8014326:	3c01      	subs	r4, #1
 8014328:	fa00 f909 	lsl.w	r9, r0, r9
 801432c:	f8dc 6000 	ldr.w	r6, [ip]
 8014330:	fb5b 9902 	smmla	r9, fp, r2, r9
 8014334:	9a01      	ldr	r2, [sp, #4]
 8014336:	fa49 f904 	asr.w	r9, r9, r4
 801433a:	9802      	ldr	r0, [sp, #8]
 801433c:	f102 0e06 	add.w	lr, r2, #6
 8014340:	9a03      	ldr	r2, [sp, #12]
 8014342:	f100 070c 	add.w	r7, r0, #12
 8014346:	444e      	add	r6, r9
 8014348:	f102 0a0c 	add.w	sl, r2, #12
 801434c:	f306 0607 	ssat	r6, #8, r6
 8014350:	9a04      	ldr	r2, [sp, #16]
 8014352:	702e      	strb	r6, [r5, #0]
 8014354:	f102 0c03 	add.w	ip, r2, #3
 8014358:	f9be 2000 	ldrsh.w	r2, [lr]
 801435c:	2a15      	cmp	r2, #21
 801435e:	f340 8145 	ble.w	80145ec <forward_lite_dw_3x3_sssa8_ch+0x47c>
 8014362:	9801      	ldr	r0, [sp, #4]
 8014364:	683d      	ldr	r5, [r7, #0]
 8014366:	f100 0e08 	add.w	lr, r0, #8
 801436a:	f8da 7000 	ldr.w	r7, [sl]
 801436e:	2001      	movs	r0, #1
 8014370:	f1a2 0a02 	sub.w	sl, r2, #2
 8014374:	9e02      	ldr	r6, [sp, #8]
 8014376:	3a01      	subs	r2, #1
 8014378:	9c03      	ldr	r4, [sp, #12]
 801437a:	fa00 fa0a 	lsl.w	sl, r0, sl
 801437e:	3610      	adds	r6, #16
 8014380:	9808      	ldr	r0, [sp, #32]
 8014382:	3410      	adds	r4, #16
 8014384:	46f1      	mov	r9, lr
 8014386:	fb50 a505 	smmla	r5, r0, r5, sl
 801438a:	fa45 f202 	asr.w	r2, r5, r2
 801438e:	46b3      	mov	fp, r6
 8014390:	443a      	add	r2, r7
 8014392:	4627      	mov	r7, r4
 8014394:	f302 0207 	ssat	r2, #8, r2
 8014398:	f88c 2000 	strb.w	r2, [ip]
 801439c:	9a04      	ldr	r2, [sp, #16]
 801439e:	3204      	adds	r2, #4
 80143a0:	4694      	mov	ip, r2
 80143a2:	9d07      	ldr	r5, [sp, #28]
 80143a4:	3348      	adds	r3, #72	; 0x48
 80143a6:	9806      	ldr	r0, [sp, #24]
 80143a8:	3504      	adds	r5, #4
 80143aa:	f8cd e004 	str.w	lr, [sp, #4]
 80143ae:	3010      	adds	r0, #16
 80143b0:	9602      	str	r6, [sp, #8]
 80143b2:	e9cd 4203 	strd	r4, r2, [sp, #12]
 80143b6:	9006      	str	r0, [sp, #24]
 80143b8:	b2a8      	uxth	r0, r5
 80143ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80143bc:	4604      	mov	r4, r0
 80143be:	9007      	str	r0, [sp, #28]
 80143c0:	4290      	cmp	r0, r2
 80143c2:	f080 81a2 	bcs.w	801470a <forward_lite_dw_3x3_sssa8_ch+0x59a>
 80143c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80143c8:	f853 5c48 	ldr.w	r5, [r3, #-72]
 80143cc:	1902      	adds	r2, r0, r4
 80143ce:	5904      	ldr	r4, [r0, r4]
 80143d0:	9806      	ldr	r0, [sp, #24]
 80143d2:	f852 c001 	ldr.w	ip, [r2, r1]
 80143d6:	eb02 0741 	add.w	r7, r2, r1, lsl #1
 80143da:	eac4 460c 	pkhbt	r6, r4, ip, lsl #16
 80143de:	900b      	str	r0, [sp, #44]	; 0x2c
 80143e0:	eacc 4c24 	pkhtb	ip, ip, r4, asr #16
 80143e4:	9309      	str	r3, [sp, #36]	; 0x24
 80143e6:	f850 4c10 	ldr.w	r4, [r0, #-16]
 80143ea:	fa28 fe86 	sxtab16	lr, r8, r6
 80143ee:	fb25 440e 	smlad	r4, r5, lr, r4
 80143f2:	fa28 fe96 	sxtab16	lr, r8, r6, ror #8
 80143f6:	f853 5c44 	ldr.w	r5, [r3, #-68]
 80143fa:	f850 6c0c 	ldr.w	r6, [r0, #-12]
 80143fe:	fb25 6e0e 	smlad	lr, r5, lr, r6
 8014402:	f853 5c40 	ldr.w	r5, [r3, #-64]
 8014406:	f850 6c08 	ldr.w	r6, [r0, #-8]
 801440a:	fa28 f98c 	sxtab16	r9, r8, ip
 801440e:	fb25 6909 	smlad	r9, r5, r9, r6
 8014412:	fa28 fc9c 	sxtab16	ip, r8, ip, ror #8
 8014416:	f853 5c3c 	ldr.w	r5, [r3, #-60]
 801441a:	f850 6c04 	ldr.w	r6, [r0, #-4]
 801441e:	fb25 6c0c 	smlad	ip, r5, ip, r6
 8014422:	9d05      	ldr	r5, [sp, #20]
 8014424:	f852 2011 	ldr.w	r2, [r2, r1, lsl #1]
 8014428:	eb07 0a05 	add.w	sl, r7, r5
 801442c:	597e      	ldr	r6, [r7, r5]
 801442e:	f853 7c38 	ldr.w	r7, [r3, #-56]
 8014432:	eac2 4506 	pkhbt	r5, r2, r6, lsl #16
 8014436:	eb0a 0b01 	add.w	fp, sl, r1
 801443a:	eac6 4222 	pkhtb	r2, r6, r2, asr #16
 801443e:	fa28 f685 	sxtab16	r6, r8, r5
 8014442:	fb27 4406 	smlad	r4, r7, r6, r4
 8014446:	fa28 f595 	sxtab16	r5, r8, r5, ror #8
 801444a:	f853 0c34 	ldr.w	r0, [r3, #-52]
 801444e:	fb20 ee05 	smlad	lr, r0, r5, lr
 8014452:	f853 0c30 	ldr.w	r0, [r3, #-48]
 8014456:	fa28 f582 	sxtab16	r5, r8, r2
 801445a:	fb20 9905 	smlad	r9, r0, r5, r9
 801445e:	fa28 f292 	sxtab16	r2, r8, r2, ror #8
 8014462:	f853 0c2c 	ldr.w	r0, [r3, #-44]
 8014466:	fb20 cc02 	smlad	ip, r0, r2, ip
 801446a:	448b      	add	fp, r1
 801446c:	9d05      	ldr	r5, [sp, #20]
 801446e:	f85a 2001 	ldr.w	r2, [sl, r1]
 8014472:	f853 7c28 	ldr.w	r7, [r3, #-40]
 8014476:	445d      	add	r5, fp
 8014478:	f85a a011 	ldr.w	sl, [sl, r1, lsl #1]
 801447c:	eac2 460a 	pkhbt	r6, r2, sl, lsl #16
 8014480:	eaca 4a22 	pkhtb	sl, sl, r2, asr #16
 8014484:	fa28 f286 	sxtab16	r2, r8, r6
 8014488:	fb27 4402 	smlad	r4, r7, r2, r4
 801448c:	fa28 f696 	sxtab16	r6, r8, r6, ror #8
 8014490:	f853 0c24 	ldr.w	r0, [r3, #-36]
 8014494:	fb20 ee06 	smlad	lr, r0, r6, lr
 8014498:	f853 2c20 	ldr.w	r2, [r3, #-32]
 801449c:	fa28 f68a 	sxtab16	r6, r8, sl
 80144a0:	fb22 9906 	smlad	r9, r2, r6, r9
 80144a4:	fa28 fa9a 	sxtab16	sl, r8, sl, ror #8
 80144a8:	f853 0c1c 	ldr.w	r0, [r3, #-28]
 80144ac:	fb20 cc0a 	smlad	ip, r0, sl, ip
 80144b0:	9a05      	ldr	r2, [sp, #20]
 80144b2:	f855 a001 	ldr.w	sl, [r5, r1]
 80144b6:	f85b 6002 	ldr.w	r6, [fp, r2]
 80144ba:	f853 7c18 	ldr.w	r7, [r3, #-24]
 80144be:	eac6 420a 	pkhbt	r2, r6, sl, lsl #16
 80144c2:	eaca 4a26 	pkhtb	sl, sl, r6, asr #16
 80144c6:	fa28 f682 	sxtab16	r6, r8, r2
 80144ca:	fb27 4706 	smlad	r7, r7, r6, r4
 80144ce:	fa28 f292 	sxtab16	r2, r8, r2, ror #8
 80144d2:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80144d6:	fb20 ee02 	smlad	lr, r0, r2, lr
 80144da:	f853 0c10 	ldr.w	r0, [r3, #-16]
 80144de:	fa28 f28a 	sxtab16	r2, r8, sl
 80144e2:	fb20 9902 	smlad	r9, r0, r2, r9
 80144e6:	fa28 fa9a 	sxtab16	sl, r8, sl, ror #8
 80144ea:	f853 2c0c 	ldr.w	r2, [r3, #-12]
 80144ee:	fb22 cc0a 	smlad	ip, r2, sl, ip
 80144f2:	f855 5011 	ldr.w	r5, [r5, r1, lsl #1]
 80144f6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80144f8:	b26c      	sxtb	r4, r5
 80144fa:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 80144fe:	f345 4b07 	sbfx	fp, r5, #16, #8
 8014502:	f833 ac04 	ldrh.w	sl, [r3, #-4]
 8014506:	1a24      	subs	r4, r4, r0
 8014508:	f833 6c06 	ldrh.w	r6, [r3, #-6]
 801450c:	ebab 0b00 	sub.w	fp, fp, r0
 8014510:	fb12 7704 	smlabb	r7, r2, r4, r7
 8014514:	f345 2207 	sbfx	r2, r5, #8, #8
 8014518:	fb1a 9b0b 	smlabb	fp, sl, fp, r9
 801451c:	ebc0 6525 	rsb	r5, r0, r5, asr #24
 8014520:	1a12      	subs	r2, r2, r0
 8014522:	f833 ac02 	ldrh.w	sl, [r3, #-2]
 8014526:	9801      	ldr	r0, [sp, #4]
 8014528:	fb16 ee02 	smlabb	lr, r6, r2, lr
 801452c:	fb1a c205 	smlabb	r2, sl, r5, ip
 8014530:	9208      	str	r2, [sp, #32]
 8014532:	f9b0 2000 	ldrsh.w	r2, [r0]
 8014536:	2a15      	cmp	r2, #21
 8014538:	f73f aeb2 	bgt.w	80142a0 <forward_lite_dw_3x3_sssa8_ch+0x130>
 801453c:	2a00      	cmp	r2, #0
 801453e:	dd6b      	ble.n	8014618 <forward_lite_dw_3x3_sssa8_ch+0x4a8>
 8014540:	007f      	lsls	r7, r7, #1
 8014542:	1c86      	adds	r6, r0, #2
 8014544:	e9dd c502 	ldrd	ip, r5, [sp, #8]
 8014548:	f85c 4b04 	ldr.w	r4, [ip], #4
 801454c:	f855 9b04 	ldr.w	r9, [r5], #4
 8014550:	fb57 9704 	smmla	r7, r7, r4, r9
 8014554:	4117      	asrs	r7, r2
 8014556:	f307 0207 	ssat	r2, #8, r7
 801455a:	f8dd a010 	ldr.w	sl, [sp, #16]
 801455e:	f80a 2b01 	strb.w	r2, [sl], #1
 8014562:	f9b6 4000 	ldrsh.w	r4, [r6]
 8014566:	2c15      	cmp	r4, #21
 8014568:	f73f aeb8 	bgt.w	80142dc <forward_lite_dw_3x3_sssa8_ch+0x16c>
 801456c:	2c00      	cmp	r4, #0
 801456e:	f340 80a5 	ble.w	80146bc <forward_lite_dw_3x3_sssa8_ch+0x54c>
 8014572:	f8dc 2000 	ldr.w	r2, [ip]
 8014576:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 801457a:	682d      	ldr	r5, [r5, #0]
 801457c:	fb5e 5e02 	smmla	lr, lr, r2, r5
 8014580:	9a03      	ldr	r2, [sp, #12]
 8014582:	fa4e f404 	asr.w	r4, lr, r4
 8014586:	9802      	ldr	r0, [sp, #8]
 8014588:	f102 0c08 	add.w	ip, r2, #8
 801458c:	9a01      	ldr	r2, [sp, #4]
 801458e:	f100 0708 	add.w	r7, r0, #8
 8014592:	f102 0904 	add.w	r9, r2, #4
 8014596:	f304 0407 	ssat	r4, #8, r4
 801459a:	f88a 4000 	strb.w	r4, [sl]
 801459e:	f9b9 4000 	ldrsh.w	r4, [r9]
 80145a2:	9a04      	ldr	r2, [sp, #16]
 80145a4:	2c15      	cmp	r4, #21
 80145a6:	f102 0502 	add.w	r5, r2, #2
 80145aa:	f73f aeb8 	bgt.w	801431e <forward_lite_dw_3x3_sssa8_ch+0x1ae>
 80145ae:	2c00      	cmp	r4, #0
 80145b0:	dd68      	ble.n	8014684 <forward_lite_dw_3x3_sssa8_ch+0x514>
 80145b2:	683a      	ldr	r2, [r7, #0]
 80145b4:	ea4f 094b 	mov.w	r9, fp, lsl #1
 80145b8:	f8dc 6000 	ldr.w	r6, [ip]
 80145bc:	fb59 6902 	smmla	r9, r9, r2, r6
 80145c0:	9a03      	ldr	r2, [sp, #12]
 80145c2:	fa49 f404 	asr.w	r4, r9, r4
 80145c6:	9802      	ldr	r0, [sp, #8]
 80145c8:	f102 0a0c 	add.w	sl, r2, #12
 80145cc:	9a01      	ldr	r2, [sp, #4]
 80145ce:	f100 070c 	add.w	r7, r0, #12
 80145d2:	f102 0e06 	add.w	lr, r2, #6
 80145d6:	f304 0407 	ssat	r4, #8, r4
 80145da:	9a04      	ldr	r2, [sp, #16]
 80145dc:	702c      	strb	r4, [r5, #0]
 80145de:	f102 0c03 	add.w	ip, r2, #3
 80145e2:	f9be 2000 	ldrsh.w	r2, [lr]
 80145e6:	2a15      	cmp	r2, #21
 80145e8:	f73f aebb 	bgt.w	8014362 <forward_lite_dw_3x3_sssa8_ch+0x1f2>
 80145ec:	2a00      	cmp	r2, #0
 80145ee:	dd2b      	ble.n	8014648 <forward_lite_dw_3x3_sssa8_ch+0x4d8>
 80145f0:	9801      	ldr	r0, [sp, #4]
 80145f2:	9e02      	ldr	r6, [sp, #8]
 80145f4:	9c03      	ldr	r4, [sp, #12]
 80145f6:	f100 0e08 	add.w	lr, r0, #8
 80145fa:	3610      	adds	r6, #16
 80145fc:	9808      	ldr	r0, [sp, #32]
 80145fe:	3410      	adds	r4, #16
 8014600:	683f      	ldr	r7, [r7, #0]
 8014602:	0045      	lsls	r5, r0, #1
 8014604:	f8da a000 	ldr.w	sl, [sl]
 8014608:	46b3      	mov	fp, r6
 801460a:	46f1      	mov	r9, lr
 801460c:	fb55 aa07 	smmla	sl, r5, r7, sl
 8014610:	4627      	mov	r7, r4
 8014612:	fa4a f202 	asr.w	r2, sl, r2
 8014616:	e6bd      	b.n	8014394 <forward_lite_dw_3x3_sssa8_ch+0x224>
 8014618:	f1c2 0201 	rsb	r2, r2, #1
 801461c:	4097      	lsls	r7, r2
 801461e:	9a01      	ldr	r2, [sp, #4]
 8014620:	1c96      	adds	r6, r2, #2
 8014622:	f307 021f 	ssat	r2, #32, r7
 8014626:	f8dd c008 	ldr.w	ip, [sp, #8]
 801462a:	f85c 7b04 	ldr.w	r7, [ip], #4
 801462e:	fb52 f217 	smmulr	r2, r2, r7
 8014632:	9d03      	ldr	r5, [sp, #12]
 8014634:	f855 4b04 	ldr.w	r4, [r5], #4
 8014638:	4422      	add	r2, r4
 801463a:	f302 0207 	ssat	r2, #8, r2
 801463e:	f8dd a010 	ldr.w	sl, [sp, #16]
 8014642:	f80a 2b01 	strb.w	r2, [sl], #1
 8014646:	e644      	b.n	80142d2 <forward_lite_dw_3x3_sssa8_ch+0x162>
 8014648:	9801      	ldr	r0, [sp, #4]
 801464a:	f1c2 0501 	rsb	r5, r2, #1
 801464e:	9a08      	ldr	r2, [sp, #32]
 8014650:	f100 0e08 	add.w	lr, r0, #8
 8014654:	40aa      	lsls	r2, r5
 8014656:	46f1      	mov	r9, lr
 8014658:	f302 051f 	ssat	r5, #32, r2
 801465c:	9e02      	ldr	r6, [sp, #8]
 801465e:	683a      	ldr	r2, [r7, #0]
 8014660:	3610      	adds	r6, #16
 8014662:	46b3      	mov	fp, r6
 8014664:	fb55 f512 	smmulr	r5, r5, r2
 8014668:	9c03      	ldr	r4, [sp, #12]
 801466a:	f8da 2000 	ldr.w	r2, [sl]
 801466e:	3410      	adds	r4, #16
 8014670:	4415      	add	r5, r2
 8014672:	4627      	mov	r7, r4
 8014674:	f305 0507 	ssat	r5, #8, r5
 8014678:	9a04      	ldr	r2, [sp, #16]
 801467a:	f88c 5000 	strb.w	r5, [ip]
 801467e:	3204      	adds	r2, #4
 8014680:	4694      	mov	ip, r2
 8014682:	e68e      	b.n	80143a2 <forward_lite_dw_3x3_sssa8_ch+0x232>
 8014684:	f1c4 0901 	rsb	r9, r4, #1
 8014688:	9a01      	ldr	r2, [sp, #4]
 801468a:	fa0b f909 	lsl.w	r9, fp, r9
 801468e:	f102 0e06 	add.w	lr, r2, #6
 8014692:	f309 091f 	ssat	r9, #32, r9
 8014696:	9802      	ldr	r0, [sp, #8]
 8014698:	683a      	ldr	r2, [r7, #0]
 801469a:	f100 070c 	add.w	r7, r0, #12
 801469e:	fb59 f912 	smmulr	r9, r9, r2
 80146a2:	f8dc 2000 	ldr.w	r2, [ip]
 80146a6:	9803      	ldr	r0, [sp, #12]
 80146a8:	444a      	add	r2, r9
 80146aa:	f100 0a0c 	add.w	sl, r0, #12
 80146ae:	f302 0207 	ssat	r2, #8, r2
 80146b2:	702a      	strb	r2, [r5, #0]
 80146b4:	9a04      	ldr	r2, [sp, #16]
 80146b6:	f102 0c03 	add.w	ip, r2, #3
 80146ba:	e64d      	b.n	8014358 <forward_lite_dw_3x3_sssa8_ch+0x1e8>
 80146bc:	f1c4 0401 	rsb	r4, r4, #1
 80146c0:	9a01      	ldr	r2, [sp, #4]
 80146c2:	fa0e fe04 	lsl.w	lr, lr, r4
 80146c6:	f102 0904 	add.w	r9, r2, #4
 80146ca:	f30e 0e1f 	ssat	lr, #32, lr
 80146ce:	9802      	ldr	r0, [sp, #8]
 80146d0:	f8dc 2000 	ldr.w	r2, [ip]
 80146d4:	f100 0708 	add.w	r7, r0, #8
 80146d8:	fb5e fe12 	smmulr	lr, lr, r2
 80146dc:	682a      	ldr	r2, [r5, #0]
 80146de:	9803      	ldr	r0, [sp, #12]
 80146e0:	4472      	add	r2, lr
 80146e2:	f100 0c08 	add.w	ip, r0, #8
 80146e6:	f302 0207 	ssat	r2, #8, r2
 80146ea:	f88a 2000 	strb.w	r2, [sl]
 80146ee:	9a04      	ldr	r2, [sp, #16]
 80146f0:	1c95      	adds	r5, r2, #2
 80146f2:	e60f      	b.n	8014314 <forward_lite_dw_3x3_sssa8_ch+0x1a4>
 80146f4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80146f6:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 80146fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80146fc:	f8dd b0c8 	ldr.w	fp, [sp, #200]	; 0xc8
 8014700:	e9dd 3712 	ldrd	r3, r7, [sp, #72]	; 0x48
 8014704:	9309      	str	r3, [sp, #36]	; 0x24
 8014706:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014708:	9307      	str	r3, [sp, #28]
 801470a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801470c:	2b00      	cmp	r3, #0
 801470e:	f000 8127 	beq.w	8014960 <forward_lite_dw_3x3_sssa8_ch+0x7f0>
 8014712:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014714:	9b07      	ldr	r3, [sp, #28]
 8014716:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8014718:	18d0      	adds	r0, r2, r3
 801471a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801471c:	56d3      	ldrsb	r3, [r2, r3]
 801471e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014720:	1b9a      	subs	r2, r3, r6
 8014722:	680b      	ldr	r3, [r1, #0]
 8014724:	8821      	ldrh	r1, [r4, #0]
 8014726:	fb11 3302 	smlabb	r3, r1, r2, r3
 801472a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801472c:	5642      	ldrsb	r2, [r0, r1]
 801472e:	eb00 0541 	add.w	r5, r0, r1, lsl #1
 8014732:	f910 0011 	ldrsb.w	r0, [r0, r1, lsl #1]
 8014736:	1b92      	subs	r2, r2, r6
 8014738:	8861      	ldrh	r1, [r4, #2]
 801473a:	1b80      	subs	r0, r0, r6
 801473c:	fb12 3301 	smlabb	r3, r2, r1, r3
 8014740:	9a05      	ldr	r2, [sp, #20]
 8014742:	18ac      	adds	r4, r5, r2
 8014744:	56aa      	ldrsb	r2, [r5, r2]
 8014746:	4635      	mov	r5, r6
 8014748:	1b92      	subs	r2, r2, r6
 801474a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801474c:	88b1      	ldrh	r1, [r6, #4]
 801474e:	fb10 3101 	smlabb	r1, r0, r1, r3
 8014752:	88f3      	ldrh	r3, [r6, #6]
 8014754:	fb12 1103 	smlabb	r1, r2, r3, r1
 8014758:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801475a:	56e2      	ldrsb	r2, [r4, r3]
 801475c:	eb04 0043 	add.w	r0, r4, r3, lsl #1
 8014760:	f914 3013 	ldrsb.w	r3, [r4, r3, lsl #1]
 8014764:	1b52      	subs	r2, r2, r5
 8014766:	8934      	ldrh	r4, [r6, #8]
 8014768:	1b5b      	subs	r3, r3, r5
 801476a:	fb12 1204 	smlabb	r2, r2, r4, r1
 801476e:	9905      	ldr	r1, [sp, #20]
 8014770:	1844      	adds	r4, r0, r1
 8014772:	5641      	ldrsb	r1, [r0, r1]
 8014774:	8970      	ldrh	r0, [r6, #10]
 8014776:	1b49      	subs	r1, r1, r5
 8014778:	fb13 2300 	smlabb	r3, r3, r0, r2
 801477c:	89b0      	ldrh	r0, [r6, #12]
 801477e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014780:	fb11 3300 	smlabb	r3, r1, r0, r3
 8014784:	56a1      	ldrsb	r1, [r4, r2]
 8014786:	f914 0012 	ldrsb.w	r0, [r4, r2, lsl #1]
 801478a:	4634      	mov	r4, r6
 801478c:	1b4a      	subs	r2, r1, r5
 801478e:	89f1      	ldrh	r1, [r6, #14]
 8014790:	1b40      	subs	r0, r0, r5
 8014792:	fb12 3101 	smlabb	r1, r2, r1, r3
 8014796:	9b07      	ldr	r3, [sp, #28]
 8014798:	1c5e      	adds	r6, r3, #1
 801479a:	8a23      	ldrh	r3, [r4, #16]
 801479c:	f9b9 4000 	ldrsh.w	r4, [r9]
 80147a0:	fb10 1003 	smlabb	r0, r0, r3, r1
 80147a4:	b2b6      	uxth	r6, r6
 80147a6:	2c15      	cmp	r4, #21
 80147a8:	b229      	sxth	r1, r5
 80147aa:	f300 80f1 	bgt.w	8014990 <forward_lite_dw_3x3_sssa8_ch+0x820>
 80147ae:	2c00      	cmp	r4, #0
 80147b0:	f340 8122 	ble.w	80149f8 <forward_lite_dw_3x3_sssa8_ch+0x888>
 80147b4:	f8db 3000 	ldr.w	r3, [fp]
 80147b8:	0040      	lsls	r0, r0, #1
 80147ba:	683a      	ldr	r2, [r7, #0]
 80147bc:	fb50 2003 	smmla	r0, r0, r3, r2
 80147c0:	fa40 f404 	asr.w	r4, r0, r4
 80147c4:	f304 0407 	ssat	r4, #8, r4
 80147c8:	46e6      	mov	lr, ip
 80147ca:	f80e 4b01 	strb.w	r4, [lr], #1
 80147ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	f000 80c3 	beq.w	801495c <forward_lite_dw_3x3_sssa8_ch+0x7ec>
 80147d6:	9b07      	ldr	r3, [sp, #28]
 80147d8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80147da:	3302      	adds	r3, #2
 80147dc:	8a6a      	ldrh	r2, [r5, #18]
 80147de:	b29b      	uxth	r3, r3
 80147e0:	9301      	str	r3, [sp, #4]
 80147e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80147e4:	199c      	adds	r4, r3, r6
 80147e6:	5798      	ldrsb	r0, [r3, r6]
 80147e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80147ea:	1a40      	subs	r0, r0, r1
 80147ec:	685b      	ldr	r3, [r3, #4]
 80147ee:	fb10 3302 	smlabb	r3, r0, r2, r3
 80147f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80147f4:	56a0      	ldrsb	r0, [r4, r2]
 80147f6:	eb04 0642 	add.w	r6, r4, r2, lsl #1
 80147fa:	f914 4012 	ldrsb.w	r4, [r4, r2, lsl #1]
 80147fe:	1a40      	subs	r0, r0, r1
 8014800:	8aaa      	ldrh	r2, [r5, #20]
 8014802:	1a64      	subs	r4, r4, r1
 8014804:	fb10 3002 	smlabb	r0, r0, r2, r3
 8014808:	9b05      	ldr	r3, [sp, #20]
 801480a:	18f5      	adds	r5, r6, r3
 801480c:	56f3      	ldrsb	r3, [r6, r3]
 801480e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8014810:	1a5b      	subs	r3, r3, r1
 8014812:	8af2      	ldrh	r2, [r6, #22]
 8014814:	fb14 0202 	smlabb	r2, r4, r2, r0
 8014818:	8b30      	ldrh	r0, [r6, #24]
 801481a:	fb13 2200 	smlabb	r2, r3, r0, r2
 801481e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8014820:	562b      	ldrsb	r3, [r5, r0]
 8014822:	eb05 0440 	add.w	r4, r5, r0, lsl #1
 8014826:	f915 0010 	ldrsb.w	r0, [r5, r0, lsl #1]
 801482a:	1a5b      	subs	r3, r3, r1
 801482c:	8b75      	ldrh	r5, [r6, #26]
 801482e:	1a40      	subs	r0, r0, r1
 8014830:	fb13 2305 	smlabb	r3, r3, r5, r2
 8014834:	9a05      	ldr	r2, [sp, #20]
 8014836:	18a5      	adds	r5, r4, r2
 8014838:	56a2      	ldrsb	r2, [r4, r2]
 801483a:	8bb4      	ldrh	r4, [r6, #28]
 801483c:	1a52      	subs	r2, r2, r1
 801483e:	fb10 3304 	smlabb	r3, r0, r4, r3
 8014842:	8bf0      	ldrh	r0, [r6, #30]
 8014844:	8c34      	ldrh	r4, [r6, #32]
 8014846:	fb12 3200 	smlabb	r2, r2, r0, r3
 801484a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801484c:	562b      	ldrsb	r3, [r5, r0]
 801484e:	f915 0010 	ldrsb.w	r0, [r5, r0, lsl #1]
 8014852:	1a5b      	subs	r3, r3, r1
 8014854:	1a40      	subs	r0, r0, r1
 8014856:	fb13 2204 	smlabb	r2, r3, r4, r2
 801485a:	f9b9 4002 	ldrsh.w	r4, [r9, #2]
 801485e:	8c73      	ldrh	r3, [r6, #34]	; 0x22
 8014860:	2c15      	cmp	r4, #21
 8014862:	fb10 2003 	smlabb	r0, r0, r3, r2
 8014866:	f300 80a5 	bgt.w	80149b4 <forward_lite_dw_3x3_sssa8_ch+0x844>
 801486a:	2c00      	cmp	r4, #0
 801486c:	f340 80d6 	ble.w	8014a1c <forward_lite_dw_3x3_sssa8_ch+0x8ac>
 8014870:	f8db 3004 	ldr.w	r3, [fp, #4]
 8014874:	0040      	lsls	r0, r0, #1
 8014876:	687a      	ldr	r2, [r7, #4]
 8014878:	fb50 2003 	smmla	r0, r0, r3, r2
 801487c:	fa40 f404 	asr.w	r4, r0, r4
 8014880:	f304 0407 	ssat	r4, #8, r4
 8014884:	46f2      	mov	sl, lr
 8014886:	f80a 4b01 	strb.w	r4, [sl], #1
 801488a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801488c:	2b02      	cmp	r3, #2
 801488e:	d065      	beq.n	801495c <forward_lite_dw_3x3_sssa8_ch+0x7ec>
 8014890:	9801      	ldr	r0, [sp, #4]
 8014892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014894:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014896:	689c      	ldr	r4, [r3, #8]
 8014898:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801489a:	1813      	adds	r3, r2, r0
 801489c:	5612      	ldrsb	r2, [r2, r0]
 801489e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80148a0:	1a50      	subs	r0, r2, r1
 80148a2:	8cad      	ldrh	r5, [r5, #36]	; 0x24
 80148a4:	f9b9 e004 	ldrsh.w	lr, [r9, #4]
 80148a8:	fb15 4200 	smlabb	r2, r5, r0, r4
 80148ac:	579d      	ldrsb	r5, [r3, r6]
 80148ae:	eb03 0046 	add.w	r0, r3, r6, lsl #1
 80148b2:	f913 6016 	ldrsb.w	r6, [r3, r6, lsl #1]
 80148b6:	1a6c      	subs	r4, r5, r1
 80148b8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80148ba:	9b05      	ldr	r3, [sp, #20]
 80148bc:	1a76      	subs	r6, r6, r1
 80148be:	8ced      	ldrh	r5, [r5, #38]	; 0x26
 80148c0:	f1be 0f15 	cmp.w	lr, #21
 80148c4:	fb15 2504 	smlabb	r5, r5, r4, r2
 80148c8:	eb00 0403 	add.w	r4, r0, r3
 80148cc:	56c3      	ldrsb	r3, [r0, r3]
 80148ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80148d0:	eba3 0201 	sub.w	r2, r3, r1
 80148d4:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 80148d6:	fb13 5306 	smlabb	r3, r3, r6, r5
 80148da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80148dc:	4605      	mov	r5, r0
 80148de:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
 80148e0:	fb10 3302 	smlabb	r3, r0, r2, r3
 80148e4:	57a0      	ldrsb	r0, [r4, r6]
 80148e6:	eb04 0246 	add.w	r2, r4, r6, lsl #1
 80148ea:	f914 4016 	ldrsb.w	r4, [r4, r6, lsl #1]
 80148ee:	eba0 0001 	sub.w	r0, r0, r1
 80148f2:	462e      	mov	r6, r5
 80148f4:	8dad      	ldrh	r5, [r5, #44]	; 0x2c
 80148f6:	eba4 0401 	sub.w	r4, r4, r1
 80148fa:	fb15 3000 	smlabb	r0, r5, r0, r3
 80148fe:	9b05      	ldr	r3, [sp, #20]
 8014900:	eb02 0503 	add.w	r5, r2, r3
 8014904:	56d2      	ldrsb	r2, [r2, r3]
 8014906:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
 8014908:	eba2 0201 	sub.w	r2, r2, r1
 801490c:	fb13 0304 	smlabb	r3, r3, r4, r0
 8014910:	8e30      	ldrh	r0, [r6, #48]	; 0x30
 8014912:	4634      	mov	r4, r6
 8014914:	fb10 3302 	smlabb	r3, r0, r2, r3
 8014918:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801491a:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 801491c:	56ae      	ldrsb	r6, [r5, r2]
 801491e:	f915 2012 	ldrsb.w	r2, [r5, r2, lsl #1]
 8014922:	eba6 0601 	sub.w	r6, r6, r1
 8014926:	eba2 0101 	sub.w	r1, r2, r1
 801492a:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801492c:	fb10 3306 	smlabb	r3, r0, r6, r3
 8014930:	fb12 3301 	smlabb	r3, r2, r1, r3
 8014934:	dd50      	ble.n	80149d8 <forward_lite_dw_3x3_sssa8_ch+0x868>
 8014936:	f1ae 0102 	sub.w	r1, lr, #2
 801493a:	2401      	movs	r4, #1
 801493c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8014940:	68b8      	ldr	r0, [r7, #8]
 8014942:	f8db 2008 	ldr.w	r2, [fp, #8]
 8014946:	fa04 f101 	lsl.w	r1, r4, r1
 801494a:	fb53 1102 	smmla	r1, r3, r2, r1
 801494e:	fa41 f10e 	asr.w	r1, r1, lr
 8014952:	4401      	add	r1, r0
 8014954:	f301 0107 	ssat	r1, #8, r1
 8014958:	f88a 1000 	strb.w	r1, [sl]
 801495c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801495e:	449c      	add	ip, r3
 8014960:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014962:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014964:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014966:	3301      	adds	r3, #1
 8014968:	440a      	add	r2, r1
 801496a:	b21b      	sxth	r3, r3
 801496c:	920a      	str	r2, [sp, #40]	; 0x28
 801496e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014970:	9310      	str	r3, [sp, #64]	; 0x40
 8014972:	429a      	cmp	r2, r3
 8014974:	f73f ac7b 	bgt.w	801426e <forward_lite_dw_3x3_sssa8_ch+0xfe>
 8014978:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801497a:	46e1      	mov	r9, ip
 801497c:	9919      	ldr	r1, [sp, #100]	; 0x64
 801497e:	3301      	adds	r3, #1
 8014980:	b21b      	sxth	r3, r3
 8014982:	428b      	cmp	r3, r1
 8014984:	9318      	str	r3, [sp, #96]	; 0x60
 8014986:	f6ff ac6a 	blt.w	801425e <forward_lite_dw_3x3_sssa8_ch+0xee>
 801498a:	b01f      	add	sp, #124	; 0x7c
 801498c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014990:	1ea5      	subs	r5, r4, #2
 8014992:	2301      	movs	r3, #1
 8014994:	3c01      	subs	r4, #1
 8014996:	f8db 2000 	ldr.w	r2, [fp]
 801499a:	fa03 f505 	lsl.w	r5, r3, r5
 801499e:	683b      	ldr	r3, [r7, #0]
 80149a0:	fb50 5202 	smmla	r2, r0, r2, r5
 80149a4:	4122      	asrs	r2, r4
 80149a6:	4413      	add	r3, r2
 80149a8:	f303 0307 	ssat	r3, #8, r3
 80149ac:	46e6      	mov	lr, ip
 80149ae:	f80e 3b01 	strb.w	r3, [lr], #1
 80149b2:	e70c      	b.n	80147ce <forward_lite_dw_3x3_sssa8_ch+0x65e>
 80149b4:	1ea5      	subs	r5, r4, #2
 80149b6:	2301      	movs	r3, #1
 80149b8:	3c01      	subs	r4, #1
 80149ba:	f8db 2004 	ldr.w	r2, [fp, #4]
 80149be:	fa03 f505 	lsl.w	r5, r3, r5
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	fb50 5202 	smmla	r2, r0, r2, r5
 80149c8:	4122      	asrs	r2, r4
 80149ca:	4413      	add	r3, r2
 80149cc:	f303 0307 	ssat	r3, #8, r3
 80149d0:	46f2      	mov	sl, lr
 80149d2:	f80a 3b01 	strb.w	r3, [sl], #1
 80149d6:	e758      	b.n	801488a <forward_lite_dw_3x3_sssa8_ch+0x71a>
 80149d8:	f1be 0f00 	cmp.w	lr, #0
 80149dc:	dd30      	ble.n	8014a40 <forward_lite_dw_3x3_sssa8_ch+0x8d0>
 80149de:	f8db 2008 	ldr.w	r2, [fp, #8]
 80149e2:	005b      	lsls	r3, r3, #1
 80149e4:	68b9      	ldr	r1, [r7, #8]
 80149e6:	fb53 1302 	smmla	r3, r3, r2, r1
 80149ea:	fa43 f30e 	asr.w	r3, r3, lr
 80149ee:	f303 0307 	ssat	r3, #8, r3
 80149f2:	f88a 3000 	strb.w	r3, [sl]
 80149f6:	e7b1      	b.n	801495c <forward_lite_dw_3x3_sssa8_ch+0x7ec>
 80149f8:	f1c4 0401 	rsb	r4, r4, #1
 80149fc:	fa00 f404 	lsl.w	r4, r0, r4
 8014a00:	f304 021f 	ssat	r2, #32, r4
 8014a04:	f8db 3000 	ldr.w	r3, [fp]
 8014a08:	fb52 f213 	smmulr	r2, r2, r3
 8014a0c:	683b      	ldr	r3, [r7, #0]
 8014a0e:	4413      	add	r3, r2
 8014a10:	f303 0307 	ssat	r3, #8, r3
 8014a14:	46e6      	mov	lr, ip
 8014a16:	f80e 3b01 	strb.w	r3, [lr], #1
 8014a1a:	e6d8      	b.n	80147ce <forward_lite_dw_3x3_sssa8_ch+0x65e>
 8014a1c:	f1c4 0401 	rsb	r4, r4, #1
 8014a20:	fa00 f204 	lsl.w	r2, r0, r4
 8014a24:	f302 021f 	ssat	r2, #32, r2
 8014a28:	f8db 3004 	ldr.w	r3, [fp, #4]
 8014a2c:	fb52 f213 	smmulr	r2, r2, r3
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	4413      	add	r3, r2
 8014a34:	f303 0307 	ssat	r3, #8, r3
 8014a38:	46f2      	mov	sl, lr
 8014a3a:	f80a 3b01 	strb.w	r3, [sl], #1
 8014a3e:	e724      	b.n	801488a <forward_lite_dw_3x3_sssa8_ch+0x71a>
 8014a40:	f1ce 0e01 	rsb	lr, lr, #1
 8014a44:	fa03 f30e 	lsl.w	r3, r3, lr
 8014a48:	f303 031f 	ssat	r3, #32, r3
 8014a4c:	f8db 2008 	ldr.w	r2, [fp, #8]
 8014a50:	fb53 f312 	smmulr	r3, r3, r2
 8014a54:	68ba      	ldr	r2, [r7, #8]
 8014a56:	4413      	add	r3, r2
 8014a58:	f303 0307 	ssat	r3, #8, r3
 8014a5c:	f88a 3000 	strb.w	r3, [sl]
 8014a60:	e77c      	b.n	801495c <forward_lite_dw_3x3_sssa8_ch+0x7ec>
 8014a62:	42a1      	cmp	r1, r4
 8014a64:	f840 7c04 	str.w	r7, [r0, #-4]
 8014a68:	f100 0004 	add.w	r0, r0, #4
 8014a6c:	f6ff abb8 	blt.w	80141e0 <forward_lite_dw_3x3_sssa8_ch+0x70>
 8014a70:	f7ff bbca 	b.w	8014208 <forward_lite_dw_3x3_sssa8_ch+0x98>
 8014a74:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8014a76:	ea5f 0e94 	movs.w	lr, r4, lsr #2
 8014a7a:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
 8014a7e:	9012      	str	r0, [sp, #72]	; 0x48
 8014a80:	f000 814f 	beq.w	8014d22 <forward_lite_dw_3x3_sssa8_ch+0xbb2>
 8014a84:	f10e 33ff 	add.w	r3, lr, #4294967295
 8014a88:	f108 0204 	add.w	r2, r8, #4
 8014a8c:	4641      	mov	r1, r8
 8014a8e:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 8014a92:	b29b      	uxth	r3, r3
 8014a94:	eba9 0604 	sub.w	r6, r9, r4
 8014a98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014a9c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8014aa0:	9301      	str	r3, [sp, #4]
 8014aa2:	eb08 0304 	add.w	r3, r8, r4
 8014aa6:	9204      	str	r2, [sp, #16]
 8014aa8:	00a2      	lsls	r2, r4, #2
 8014aaa:	9203      	str	r2, [sp, #12]
 8014aac:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8014ab0:	9202      	str	r2, [sp, #8]
 8014ab2:	901d      	str	r0, [sp, #116]	; 0x74
 8014ab4:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8014ab6:	f8d1 b000 	ldr.w	fp, [r1]
 8014aba:	681a      	ldr	r2, [r3, #0]
 8014abc:	eacb 4002 	pkhbt	r0, fp, r2, lsl #16
 8014ac0:	eac2 422b 	pkhtb	r2, r2, fp, asr #16
 8014ac4:	f105 0b04 	add.w	fp, r5, #4
 8014ac8:	f8cd b074 	str.w	fp, [sp, #116]	; 0x74
 8014acc:	fa2f fb80 	sxtb16	fp, r0
 8014ad0:	f8c5 b000 	str.w	fp, [r5]
 8014ad4:	fa2f f090 	sxtb16	r0, r0, ror #8
 8014ad8:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8014ada:	6028      	str	r0, [r5, #0]
 8014adc:	3504      	adds	r5, #4
 8014ade:	951d      	str	r5, [sp, #116]	; 0x74
 8014ae0:	981d      	ldr	r0, [sp, #116]	; 0x74
 8014ae2:	fa2f f582 	sxtb16	r5, r2
 8014ae6:	3004      	adds	r0, #4
 8014ae8:	f840 5c04 	str.w	r5, [r0, #-4]
 8014aec:	901d      	str	r0, [sp, #116]	; 0x74
 8014aee:	fa2f f292 	sxtb16	r2, r2, ror #8
 8014af2:	981d      	ldr	r0, [sp, #116]	; 0x74
 8014af4:	6002      	str	r2, [r0, #0]
 8014af6:	3004      	adds	r0, #4
 8014af8:	f85c b001 	ldr.w	fp, [ip, r1]
 8014afc:	901d      	str	r0, [sp, #116]	; 0x74
 8014afe:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8014b00:	f85c 2003 	ldr.w	r2, [ip, r3]
 8014b04:	eacb 4002 	pkhbt	r0, fp, r2, lsl #16
 8014b08:	eac2 422b 	pkhtb	r2, r2, fp, asr #16
 8014b0c:	f105 0b04 	add.w	fp, r5, #4
 8014b10:	f8cd b074 	str.w	fp, [sp, #116]	; 0x74
 8014b14:	fa2f fb80 	sxtb16	fp, r0
 8014b18:	f8c5 b000 	str.w	fp, [r5]
 8014b1c:	fa2f f090 	sxtb16	r0, r0, ror #8
 8014b20:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8014b22:	6028      	str	r0, [r5, #0]
 8014b24:	3504      	adds	r5, #4
 8014b26:	951d      	str	r5, [sp, #116]	; 0x74
 8014b28:	981d      	ldr	r0, [sp, #116]	; 0x74
 8014b2a:	fa2f f582 	sxtb16	r5, r2
 8014b2e:	3004      	adds	r0, #4
 8014b30:	f840 5c04 	str.w	r5, [r0, #-4]
 8014b34:	901d      	str	r0, [sp, #116]	; 0x74
 8014b36:	fa2f f292 	sxtb16	r2, r2, ror #8
 8014b3a:	981d      	ldr	r0, [sp, #116]	; 0x74
 8014b3c:	6002      	str	r2, [r0, #0]
 8014b3e:	3004      	adds	r0, #4
 8014b40:	9a04      	ldr	r2, [sp, #16]
 8014b42:	901d      	str	r0, [sp, #116]	; 0x74
 8014b44:	f853 b002 	ldr.w	fp, [r3, r2]
 8014b48:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8014b4a:	9a03      	ldr	r2, [sp, #12]
 8014b4c:	589a      	ldr	r2, [r3, r2]
 8014b4e:	eacb 4002 	pkhbt	r0, fp, r2, lsl #16
 8014b52:	eac2 422b 	pkhtb	r2, r2, fp, asr #16
 8014b56:	f105 0b04 	add.w	fp, r5, #4
 8014b5a:	f8cd b074 	str.w	fp, [sp, #116]	; 0x74
 8014b5e:	fa2f fb80 	sxtb16	fp, r0
 8014b62:	f8c5 b000 	str.w	fp, [r5]
 8014b66:	fa2f f090 	sxtb16	r0, r0, ror #8
 8014b6a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8014b6c:	6028      	str	r0, [r5, #0]
 8014b6e:	3504      	adds	r5, #4
 8014b70:	951d      	str	r5, [sp, #116]	; 0x74
 8014b72:	981d      	ldr	r0, [sp, #116]	; 0x74
 8014b74:	fa2f f582 	sxtb16	r5, r2
 8014b78:	3004      	adds	r0, #4
 8014b7a:	f840 5c04 	str.w	r5, [r0, #-4]
 8014b7e:	901d      	str	r0, [sp, #116]	; 0x74
 8014b80:	fa2f f292 	sxtb16	r2, r2, ror #8
 8014b84:	981d      	ldr	r0, [sp, #116]	; 0x74
 8014b86:	6002      	str	r2, [r0, #0]
 8014b88:	3004      	adds	r0, #4
 8014b8a:	9a02      	ldr	r2, [sp, #8]
 8014b8c:	901d      	str	r0, [sp, #116]	; 0x74
 8014b8e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8014b90:	f853 b002 	ldr.w	fp, [r3, r2]
 8014b94:	598a      	ldr	r2, [r1, r6]
 8014b96:	eacb 4002 	pkhbt	r0, fp, r2, lsl #16
 8014b9a:	eac2 422b 	pkhtb	r2, r2, fp, asr #16
 8014b9e:	f105 0b04 	add.w	fp, r5, #4
 8014ba2:	f8cd b074 	str.w	fp, [sp, #116]	; 0x74
 8014ba6:	fa2f fb80 	sxtb16	fp, r0
 8014baa:	f8c5 b000 	str.w	fp, [r5]
 8014bae:	fa2f f090 	sxtb16	r0, r0, ror #8
 8014bb2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8014bb4:	6028      	str	r0, [r5, #0]
 8014bb6:	3504      	adds	r5, #4
 8014bb8:	951d      	str	r5, [sp, #116]	; 0x74
 8014bba:	981d      	ldr	r0, [sp, #116]	; 0x74
 8014bbc:	fa2f f582 	sxtb16	r5, r2
 8014bc0:	3004      	adds	r0, #4
 8014bc2:	f840 5c04 	str.w	r5, [r0, #-4]
 8014bc6:	901d      	str	r0, [sp, #116]	; 0x74
 8014bc8:	fa2f f292 	sxtb16	r2, r2, ror #8
 8014bcc:	981d      	ldr	r0, [sp, #116]	; 0x74
 8014bce:	6002      	str	r2, [r0, #0]
 8014bd0:	3004      	adds	r0, #4
 8014bd2:	599a      	ldr	r2, [r3, r6]
 8014bd4:	901d      	str	r0, [sp, #116]	; 0x74
 8014bd6:	981d      	ldr	r0, [sp, #116]	; 0x74
 8014bd8:	eac2 2502 	pkhbt	r5, r2, r2, lsl #8
 8014bdc:	fa2f f585 	sxtb16	r5, r5
 8014be0:	8005      	strh	r5, [r0, #0]
 8014be2:	0c2d      	lsrs	r5, r5, #16
 8014be4:	eac2 6222 	pkhtb	r2, r2, r2, asr #24
 8014be8:	8045      	strh	r5, [r0, #2]
 8014bea:	fa2f f2a2 	sxtb16	r2, r2, ror #16
 8014bee:	8082      	strh	r2, [r0, #4]
 8014bf0:	0c12      	lsrs	r2, r2, #16
 8014bf2:	3104      	adds	r1, #4
 8014bf4:	3008      	adds	r0, #8
 8014bf6:	f820 2c02 	strh.w	r2, [r0, #-2]
 8014bfa:	3304      	adds	r3, #4
 8014bfc:	9a01      	ldr	r2, [sp, #4]
 8014bfe:	4291      	cmp	r1, r2
 8014c00:	f47f af57 	bne.w	8014ab2 <forward_lite_dw_3x3_sssa8_ch+0x942>
 8014c04:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8014c08:	4602      	mov	r2, r0
 8014c0a:	fa1f fe8e 	uxth.w	lr, lr
 8014c0e:	f014 0303 	ands.w	r3, r4, #3
 8014c12:	f43f aad0 	beq.w	80141b6 <forward_lite_dw_3x3_sssa8_ch+0x46>
 8014c16:	3b01      	subs	r3, #1
 8014c18:	f10e 0101 	add.w	r1, lr, #1
 8014c1c:	b29d      	uxth	r5, r3
 8014c1e:	f918 300e 	ldrsb.w	r3, [r8, lr]
 8014c22:	b28e      	uxth	r6, r1
 8014c24:	8013      	strh	r3, [r2, #0]
 8014c26:	eb08 030e 	add.w	r3, r8, lr
 8014c2a:	5719      	ldrsb	r1, [r3, r4]
 8014c2c:	8051      	strh	r1, [r2, #2]
 8014c2e:	1919      	adds	r1, r3, r4
 8014c30:	f913 0014 	ldrsb.w	r0, [r3, r4, lsl #1]
 8014c34:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8014c38:	8090      	strh	r0, [r2, #4]
 8014c3a:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 8014c3e:	80d1      	strh	r1, [r2, #6]
 8014c40:	1919      	adds	r1, r3, r4
 8014c42:	f913 0014 	ldrsb.w	r0, [r3, r4, lsl #1]
 8014c46:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8014c4a:	8110      	strh	r0, [r2, #8]
 8014c4c:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 8014c50:	8151      	strh	r1, [r2, #10]
 8014c52:	1919      	adds	r1, r3, r4
 8014c54:	f913 0014 	ldrsb.w	r0, [r3, r4, lsl #1]
 8014c58:	8190      	strh	r0, [r2, #12]
 8014c5a:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 8014c5e:	81d1      	strh	r1, [r2, #14]
 8014c60:	f913 3024 	ldrsb.w	r3, [r3, r4, lsl #2]
 8014c64:	8213      	strh	r3, [r2, #16]
 8014c66:	2d00      	cmp	r5, #0
 8014c68:	d04e      	beq.n	8014d08 <forward_lite_dw_3x3_sssa8_ch+0xb98>
 8014c6a:	f918 3006 	ldrsb.w	r3, [r8, r6]
 8014c6e:	f10e 0e02 	add.w	lr, lr, #2
 8014c72:	2d01      	cmp	r5, #1
 8014c74:	8253      	strh	r3, [r2, #18]
 8014c76:	eb08 0306 	add.w	r3, r8, r6
 8014c7a:	fa1f fe8e 	uxth.w	lr, lr
 8014c7e:	5719      	ldrsb	r1, [r3, r4]
 8014c80:	8291      	strh	r1, [r2, #20]
 8014c82:	eb03 0104 	add.w	r1, r3, r4
 8014c86:	f913 0014 	ldrsb.w	r0, [r3, r4, lsl #1]
 8014c8a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8014c8e:	82d0      	strh	r0, [r2, #22]
 8014c90:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 8014c94:	8311      	strh	r1, [r2, #24]
 8014c96:	eb03 0104 	add.w	r1, r3, r4
 8014c9a:	f913 0014 	ldrsb.w	r0, [r3, r4, lsl #1]
 8014c9e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8014ca2:	8350      	strh	r0, [r2, #26]
 8014ca4:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 8014ca8:	8391      	strh	r1, [r2, #28]
 8014caa:	eb03 0104 	add.w	r1, r3, r4
 8014cae:	f913 0014 	ldrsb.w	r0, [r3, r4, lsl #1]
 8014cb2:	83d0      	strh	r0, [r2, #30]
 8014cb4:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 8014cb8:	8411      	strh	r1, [r2, #32]
 8014cba:	f913 3024 	ldrsb.w	r3, [r3, r4, lsl #2]
 8014cbe:	8453      	strh	r3, [r2, #34]	; 0x22
 8014cc0:	d022      	beq.n	8014d08 <forward_lite_dw_3x3_sssa8_ch+0xb98>
 8014cc2:	f918 100e 	ldrsb.w	r1, [r8, lr]
 8014cc6:	eb08 030e 	add.w	r3, r8, lr
 8014cca:	8491      	strh	r1, [r2, #36]	; 0x24
 8014ccc:	5719      	ldrsb	r1, [r3, r4]
 8014cce:	84d1      	strh	r1, [r2, #38]	; 0x26
 8014cd0:	1919      	adds	r1, r3, r4
 8014cd2:	f913 0014 	ldrsb.w	r0, [r3, r4, lsl #1]
 8014cd6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8014cda:	8510      	strh	r0, [r2, #40]	; 0x28
 8014cdc:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 8014ce0:	8551      	strh	r1, [r2, #42]	; 0x2a
 8014ce2:	1919      	adds	r1, r3, r4
 8014ce4:	f913 0014 	ldrsb.w	r0, [r3, r4, lsl #1]
 8014ce8:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8014cec:	8590      	strh	r0, [r2, #44]	; 0x2c
 8014cee:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 8014cf2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8014cf4:	1919      	adds	r1, r3, r4
 8014cf6:	f913 0014 	ldrsb.w	r0, [r3, r4, lsl #1]
 8014cfa:	8610      	strh	r0, [r2, #48]	; 0x30
 8014cfc:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 8014d00:	8651      	strh	r1, [r2, #50]	; 0x32
 8014d02:	f913 3024 	ldrsb.w	r3, [r3, r4, lsl #2]
 8014d06:	8693      	strh	r3, [r2, #52]	; 0x34
 8014d08:	44a1      	add	r9, r4
 8014d0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014d0c:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 8014d10:	461a      	mov	r2, r3
 8014d12:	9314      	str	r3, [sp, #80]	; 0x50
 8014d14:	f06f 0315 	mvn.w	r3, #21
 8014d18:	fb03 2304 	mla	r3, r3, r4, r2
 8014d1c:	9313      	str	r3, [sp, #76]	; 0x4c
 8014d1e:	f7ff ba58 	b.w	80141d2 <forward_lite_dw_3x3_sssa8_ch+0x62>
 8014d22:	4602      	mov	r2, r0
 8014d24:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 8014d28:	e771      	b.n	8014c0e <forward_lite_dw_3x3_sssa8_ch+0xa9e>
 8014d2a:	bf00      	nop

08014d2c <ai_sum_f32>:
 8014d2c:	edd1 7a00 	vldr	s15, [r1]
 8014d30:	ed92 7a00 	vldr	s14, [r2]
 8014d34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014d38:	edc0 7a00 	vstr	s15, [r0]
 8014d3c:	4770      	bx	lr
 8014d3e:	bf00      	nop

08014d40 <ai_sum_buffer_INT8>:
 8014d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d44:	b085      	sub	sp, #20
 8014d46:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8014d48:	9300      	str	r3, [sp, #0]
 8014d4a:	ed94 6a00 	vldr	s12, [r4]
 8014d4e:	461c      	mov	r4, r3
 8014d50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014d52:	08a4      	lsrs	r4, r4, #2
 8014d54:	f993 9000 	ldrsb.w	r9, [r3]
 8014d58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014d5a:	fa1f f589 	uxth.w	r5, r9
 8014d5e:	f993 a000 	ldrsb.w	sl, [r3]
 8014d62:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014d64:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8014d68:	fa1f f68a 	uxth.w	r6, sl
 8014d6c:	ed93 5a00 	vldr	s10, [r3]
 8014d70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014d72:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 8014d76:	edd3 7a00 	vldr	s15, [r3]
 8014d7a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014d7c:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8014d80:	f993 7000 	ldrsb.w	r7, [r3]
 8014d84:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014d86:	ee07 7a10 	vmov	s14, r7
 8014d8a:	eec5 5a27 	vdiv.f32	s11, s10, s15
 8014d8e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014d92:	bb23      	cbnz	r3, 8014dde <ai_sum_buffer_INT8+0x9e>
 8014d94:	eeb4 6a67 	vcmp.f32	s12, s15
 8014d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d9c:	f040 811e 	bne.w	8014fdc <ai_sum_buffer_INT8+0x29c>
 8014da0:	45b9      	cmp	r9, r7
 8014da2:	f040 811b 	bne.w	8014fdc <ai_sum_buffer_INT8+0x29c>
 8014da6:	eeb4 5a67 	vcmp.f32	s10, s15
 8014daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dae:	f040 8115 	bne.w	8014fdc <ai_sum_buffer_INT8+0x29c>
 8014db2:	45ba      	cmp	sl, r7
 8014db4:	f040 8112 	bne.w	8014fdc <ai_sum_buffer_INT8+0x29c>
 8014db8:	9b00      	ldr	r3, [sp, #0]
 8014dba:	b16b      	cbz	r3, 8014dd8 <ai_sum_buffer_INT8+0x98>
 8014dbc:	440b      	add	r3, r1
 8014dbe:	461d      	mov	r5, r3
 8014dc0:	f911 3b01 	ldrsb.w	r3, [r1], #1
 8014dc4:	f912 4b01 	ldrsb.w	r4, [r2], #1
 8014dc8:	4423      	add	r3, r4
 8014dca:	1bdb      	subs	r3, r3, r7
 8014dcc:	f303 0307 	ssat	r3, #8, r3
 8014dd0:	42a9      	cmp	r1, r5
 8014dd2:	f800 3b01 	strb.w	r3, [r0], #1
 8014dd6:	d1f3      	bne.n	8014dc0 <ai_sum_buffer_INT8+0x80>
 8014dd8:	b005      	add	sp, #20
 8014dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014dde:	2b01      	cmp	r3, #1
 8014de0:	f000 8240 	beq.w	8015264 <ai_sum_buffer_INT8+0x524>
 8014de4:	f992 3000 	ldrsb.w	r3, [r2]
 8014de8:	eba3 030a 	sub.w	r3, r3, sl
 8014dec:	ee07 3a90 	vmov	s15, r3
 8014df0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014df4:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8014df8:	2c00      	cmp	r4, #0
 8014dfa:	f000 832c 	beq.w	8015456 <ai_sum_buffer_INT8+0x716>
 8014dfe:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8014e02:	00a7      	lsls	r7, r4, #2
 8014e04:	ed9f 6a74 	vldr	s12, [pc, #464]	; 8014fd8 <ai_sum_buffer_INT8+0x298>
 8014e08:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8014e0c:	4606      	mov	r6, r0
 8014e0e:	f851 cb04 	ldr.w	ip, [r1], #4
 8014e12:	fa2f f28c 	sxtb16	r2, ip
 8014e16:	ea4f 2c3c 	mov.w	ip, ip, ror #8
 8014e1a:	fa2f fc8c 	sxtb16	ip, ip
 8014e1e:	fadc fc05 	ssub16	ip, ip, r5
 8014e22:	fad2 f205 	ssub16	r2, r2, r5
 8014e26:	b213      	sxth	r3, r2
 8014e28:	eef0 4a47 	vmov.f32	s9, s14
 8014e2c:	ee05 3a10 	vmov	s10, r3
 8014e30:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8014e34:	eee5 4a26 	vfma.f32	s9, s10, s13
 8014e38:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8014e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e40:	fe75 7a86 	vselgt.f32	s15, s11, s12
 8014e44:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8014e48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014e4c:	ee17 8a90 	vmov	r8, s15
 8014e50:	f308 0807 	ssat	r8, #8, r8
 8014e54:	1412      	asrs	r2, r2, #16
 8014e56:	eeb0 5a47 	vmov.f32	s10, s14
 8014e5a:	fa4f f888 	sxtb.w	r8, r8
 8014e5e:	ee07 2a90 	vmov	s15, r2
 8014e62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014e66:	eea7 5aa6 	vfma.f32	s10, s15, s13
 8014e6a:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8014e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e72:	fe75 7a86 	vselgt.f32	s15, s11, s12
 8014e76:	ee77 7a85 	vadd.f32	s15, s15, s10
 8014e7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014e7e:	ee17 3a90 	vmov	r3, s15
 8014e82:	f303 0307 	ssat	r3, #8, r3
 8014e86:	b25a      	sxtb	r2, r3
 8014e88:	eef0 4a47 	vmov.f32	s9, s14
 8014e8c:	fa0f f38c 	sxth.w	r3, ip
 8014e90:	ee05 3a10 	vmov	s10, r3
 8014e94:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8014e98:	eee5 4a26 	vfma.f32	s9, s10, s13
 8014e9c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8014ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ea4:	fe75 7a86 	vselgt.f32	s15, s11, s12
 8014ea8:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8014eac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014eb0:	ee17 ea90 	vmov	lr, s15
 8014eb4:	f30e 0e07 	ssat	lr, #8, lr
 8014eb8:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 8014ebc:	eeb0 5a47 	vmov.f32	s10, s14
 8014ec0:	fa4f fe8e 	sxtb.w	lr, lr
 8014ec4:	ee07 ca90 	vmov	s15, ip
 8014ec8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014ecc:	eea7 5aa6 	vfma.f32	s10, s15, s13
 8014ed0:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8014ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ed8:	fe75 7a86 	vselgt.f32	s15, s11, s12
 8014edc:	ee77 7a85 	vadd.f32	s15, s15, s10
 8014ee0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014ee4:	ee17 3a90 	vmov	r3, s15
 8014ee8:	f303 0c07 	ssat	ip, #8, r3
 8014eec:	0413      	lsls	r3, r2, #16
 8014eee:	42a1      	cmp	r1, r4
 8014ef0:	fa5f f888 	uxtb.w	r8, r8
 8014ef4:	ea4f 220e 	mov.w	r2, lr, lsl #8
 8014ef8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8014efc:	b292      	uxth	r2, r2
 8014efe:	ea43 0308 	orr.w	r3, r3, r8
 8014f02:	ea43 0302 	orr.w	r3, r3, r2
 8014f06:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 8014f0a:	f846 3b04 	str.w	r3, [r6], #4
 8014f0e:	f47f af7e 	bne.w	8014e0e <ai_sum_buffer_INT8+0xce>
 8014f12:	4438      	add	r0, r7
 8014f14:	9b00      	ldr	r3, [sp, #0]
 8014f16:	f013 0303 	ands.w	r3, r3, #3
 8014f1a:	f43f af5d 	beq.w	8014dd8 <ai_sum_buffer_INT8+0x98>
 8014f1e:	f994 2000 	ldrsb.w	r2, [r4]
 8014f22:	eef0 4a47 	vmov.f32	s9, s14
 8014f26:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8014f2a:	ed9f 5a2b 	vldr	s10, [pc, #172]	; 8014fd8 <ai_sum_buffer_INT8+0x298>
 8014f2e:	eba2 0209 	sub.w	r2, r2, r9
 8014f32:	ee07 2a90 	vmov	s15, r2
 8014f36:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8014f3a:	eee5 4aa6 	vfma.f32	s9, s11, s13
 8014f3e:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8014f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f46:	fe76 7a05 	vselgt.f32	s15, s12, s10
 8014f4a:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8014f4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014f52:	ee17 2a90 	vmov	r2, s15
 8014f56:	f302 0207 	ssat	r2, #8, r2
 8014f5a:	3b01      	subs	r3, #1
 8014f5c:	7002      	strb	r2, [r0, #0]
 8014f5e:	f43f af3b 	beq.w	8014dd8 <ai_sum_buffer_INT8+0x98>
 8014f62:	f994 2001 	ldrsb.w	r2, [r4, #1]
 8014f66:	eef0 4a47 	vmov.f32	s9, s14
 8014f6a:	eba2 0209 	sub.w	r2, r2, r9
 8014f6e:	ee07 2a90 	vmov	s15, r2
 8014f72:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8014f76:	eee5 4aa6 	vfma.f32	s9, s11, s13
 8014f7a:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8014f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f82:	fe76 7a05 	vselgt.f32	s15, s12, s10
 8014f86:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8014f8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014f8e:	ee17 2a90 	vmov	r2, s15
 8014f92:	f302 0207 	ssat	r2, #8, r2
 8014f96:	2b01      	cmp	r3, #1
 8014f98:	7042      	strb	r2, [r0, #1]
 8014f9a:	f43f af1d 	beq.w	8014dd8 <ai_sum_buffer_INT8+0x98>
 8014f9e:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8014fa2:	eba3 0309 	sub.w	r3, r3, r9
 8014fa6:	ee07 3a90 	vmov	s15, r3
 8014faa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014fae:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8014fb2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8014fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fba:	fe36 6a05 	vselgt.f32	s12, s12, s10
 8014fbe:	ee36 7a07 	vadd.f32	s14, s12, s14
 8014fc2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8014fc6:	ee17 3a10 	vmov	r3, s14
 8014fca:	f303 0307 	ssat	r3, #8, r3
 8014fce:	7083      	strb	r3, [r0, #2]
 8014fd0:	b005      	add	sp, #20
 8014fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fd6:	bf00      	nop
 8014fd8:	befffffc 	.word	0xbefffffc
 8014fdc:	2c00      	cmp	r4, #0
 8014fde:	f000 8238 	beq.w	8015452 <ai_sum_buffer_INT8+0x712>
 8014fe2:	00a3      	lsls	r3, r4, #2
 8014fe4:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 8014fe8:	ed1f 5a05 	vldr	s10, [pc, #-20]	; 8014fd8 <ai_sum_buffer_INT8+0x298>
 8014fec:	4680      	mov	r8, r0
 8014fee:	9301      	str	r3, [sp, #4]
 8014ff0:	eb01 0384 	add.w	r3, r1, r4, lsl #2
 8014ff4:	4617      	mov	r7, r2
 8014ff6:	f8cd 9008 	str.w	r9, [sp, #8]
 8014ffa:	469b      	mov	fp, r3
 8014ffc:	9303      	str	r3, [sp, #12]
 8014ffe:	f851 cb04 	ldr.w	ip, [r1], #4
 8015002:	f857 3b04 	ldr.w	r3, [r7], #4
 8015006:	fa2f f48c 	sxtb16	r4, ip
 801500a:	ea4f 2933 	mov.w	r9, r3, ror #8
 801500e:	ea4f 2c3c 	mov.w	ip, ip, ror #8
 8015012:	fa2f f989 	sxtb16	r9, r9
 8015016:	fa2f fc8c 	sxtb16	ip, ip
 801501a:	fa2f f383 	sxtb16	r3, r3
 801501e:	fadc fc05 	ssub16	ip, ip, r5
 8015022:	fad4 f405 	ssub16	r4, r4, r5
 8015026:	fad9 f906 	ssub16	r9, r9, r6
 801502a:	fad3 f306 	ssub16	r3, r3, r6
 801502e:	fa0f fe83 	sxth.w	lr, r3
 8015032:	ee07 ea90 	vmov	s15, lr
 8015036:	fa0f fe84 	sxth.w	lr, r4
 801503a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801503e:	ee06 ea10 	vmov	s12, lr
 8015042:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8015046:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801504a:	eee6 7a26 	vfma.f32	s15, s12, s13
 801504e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015052:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801505a:	fe34 6a85 	vselgt.f32	s12, s9, s10
 801505e:	ee76 7a27 	vadd.f32	s15, s12, s15
 8015062:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015066:	ee17 ea90 	vmov	lr, s15
 801506a:	f30e 0e07 	ssat	lr, #8, lr
 801506e:	141b      	asrs	r3, r3, #16
 8015070:	1424      	asrs	r4, r4, #16
 8015072:	ee07 3a90 	vmov	s15, r3
 8015076:	fa4f fe8e 	sxtb.w	lr, lr
 801507a:	ee06 4a10 	vmov	s12, r4
 801507e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015082:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8015086:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801508a:	eee6 7a26 	vfma.f32	s15, s12, s13
 801508e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015092:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801509a:	fe34 6a85 	vselgt.f32	s12, s9, s10
 801509e:	ee76 7a27 	vadd.f32	s15, s12, s15
 80150a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80150a6:	ee17 3a90 	vmov	r3, s15
 80150aa:	f303 0307 	ssat	r3, #8, r3
 80150ae:	fa0f f489 	sxth.w	r4, r9
 80150b2:	b25b      	sxtb	r3, r3
 80150b4:	ee07 4a90 	vmov	s15, r4
 80150b8:	fa0f f48c 	sxth.w	r4, ip
 80150bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80150c0:	ee06 4a10 	vmov	s12, r4
 80150c4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80150c8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80150cc:	eee6 7a26 	vfma.f32	s15, s12, s13
 80150d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80150d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80150d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150dc:	fe34 6a85 	vselgt.f32	s12, s9, s10
 80150e0:	ee76 7a27 	vadd.f32	s15, s12, s15
 80150e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80150e8:	ee17 4a90 	vmov	r4, s15
 80150ec:	f304 0407 	ssat	r4, #8, r4
 80150f0:	ea4f 4929 	mov.w	r9, r9, asr #16
 80150f4:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 80150f8:	ee07 9a90 	vmov	s15, r9
 80150fc:	b264      	sxtb	r4, r4
 80150fe:	ee06 ca10 	vmov	s12, ip
 8015102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015106:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801510a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801510e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8015112:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015116:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801511a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801511e:	fe34 6a85 	vselgt.f32	s12, s9, s10
 8015122:	ee76 7a27 	vadd.f32	s15, s12, s15
 8015126:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801512a:	ee17 ca90 	vmov	ip, s15
 801512e:	f30c 0c07 	ssat	ip, #8, ip
 8015132:	041b      	lsls	r3, r3, #16
 8015134:	4559      	cmp	r1, fp
 8015136:	fa5f fe8e 	uxtb.w	lr, lr
 801513a:	ea4f 2404 	mov.w	r4, r4, lsl #8
 801513e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8015142:	b2a4      	uxth	r4, r4
 8015144:	ea43 0e0e 	orr.w	lr, r3, lr
 8015148:	ea4e 0e04 	orr.w	lr, lr, r4
 801514c:	ea4e 6e0c 	orr.w	lr, lr, ip, lsl #24
 8015150:	f848 eb04 	str.w	lr, [r8], #4
 8015154:	f47f af53 	bne.w	8014ffe <ai_sum_buffer_INT8+0x2be>
 8015158:	e9dd 3901 	ldrd	r3, r9, [sp, #4]
 801515c:	441a      	add	r2, r3
 801515e:	4418      	add	r0, r3
 8015160:	9b00      	ldr	r3, [sp, #0]
 8015162:	f013 0303 	ands.w	r3, r3, #3
 8015166:	f43f ae37 	beq.w	8014dd8 <ai_sum_buffer_INT8+0x98>
 801516a:	f992 1000 	ldrsb.w	r1, [r2]
 801516e:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 8015172:	9c03      	ldr	r4, [sp, #12]
 8015174:	eba1 010a 	sub.w	r1, r1, sl
 8015178:	ed5f 4a69 	vldr	s9, [pc, #-420]	; 8014fd8 <ai_sum_buffer_INT8+0x298>
 801517c:	ee07 1a90 	vmov	s15, r1
 8015180:	f994 1000 	ldrsb.w	r1, [r4]
 8015184:	eba1 0109 	sub.w	r1, r1, r9
 8015188:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801518c:	ee06 1a10 	vmov	s12, r1
 8015190:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8015194:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8015198:	eee6 7a86 	vfma.f32	s15, s13, s12
 801519c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80151a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80151a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151a8:	fe35 6a24 	vselgt.f32	s12, s10, s9
 80151ac:	ee76 7a27 	vadd.f32	s15, s12, s15
 80151b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80151b4:	ee17 1a90 	vmov	r1, s15
 80151b8:	f301 0107 	ssat	r1, #8, r1
 80151bc:	3b01      	subs	r3, #1
 80151be:	7001      	strb	r1, [r0, #0]
 80151c0:	f43f ae0a 	beq.w	8014dd8 <ai_sum_buffer_INT8+0x98>
 80151c4:	f992 1001 	ldrsb.w	r1, [r2, #1]
 80151c8:	eba1 010a 	sub.w	r1, r1, sl
 80151cc:	ee07 1a90 	vmov	s15, r1
 80151d0:	f994 1001 	ldrsb.w	r1, [r4, #1]
 80151d4:	eba1 0109 	sub.w	r1, r1, r9
 80151d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80151dc:	ee06 1a10 	vmov	s12, r1
 80151e0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80151e4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80151e8:	eee6 7a86 	vfma.f32	s15, s13, s12
 80151ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80151f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80151f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151f8:	fe35 6a24 	vselgt.f32	s12, s10, s9
 80151fc:	ee76 7a27 	vadd.f32	s15, s12, s15
 8015200:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015204:	ee17 1a90 	vmov	r1, s15
 8015208:	f301 0107 	ssat	r1, #8, r1
 801520c:	2b01      	cmp	r3, #1
 801520e:	7041      	strb	r1, [r0, #1]
 8015210:	f43f ade2 	beq.w	8014dd8 <ai_sum_buffer_INT8+0x98>
 8015214:	f992 3002 	ldrsb.w	r3, [r2, #2]
 8015218:	f994 2002 	ldrsb.w	r2, [r4, #2]
 801521c:	eba3 030a 	sub.w	r3, r3, sl
 8015220:	eba2 0209 	sub.w	r2, r2, r9
 8015224:	ee07 3a90 	vmov	s15, r3
 8015228:	ee06 2a10 	vmov	s12, r2
 801522c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015230:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8015234:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8015238:	eee6 5a26 	vfma.f32	s11, s12, s13
 801523c:	ee35 7a87 	vadd.f32	s14, s11, s14
 8015240:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8015244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015248:	fe35 5a24 	vselgt.f32	s10, s10, s9
 801524c:	ee35 7a07 	vadd.f32	s14, s10, s14
 8015250:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8015254:	ee17 3a10 	vmov	r3, s14
 8015258:	f303 0307 	ssat	r3, #8, r3
 801525c:	7083      	strb	r3, [r0, #2]
 801525e:	b005      	add	sp, #20
 8015260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015264:	f991 3000 	ldrsb.w	r3, [r1]
 8015268:	eba3 0309 	sub.w	r3, r3, r9
 801526c:	ee07 3a90 	vmov	s15, r3
 8015270:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015274:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8015278:	2c00      	cmp	r4, #0
 801527a:	f000 80ee 	beq.w	801545a <ai_sum_buffer_INT8+0x71a>
 801527e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8015282:	00a7      	lsls	r7, r4, #2
 8015284:	ed5f 6aac 	vldr	s13, [pc, #-688]	; 8014fd8 <ai_sum_buffer_INT8+0x298>
 8015288:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 801528c:	4605      	mov	r5, r0
 801528e:	f852 cb04 	ldr.w	ip, [r2], #4
 8015292:	fa2f f18c 	sxtb16	r1, ip
 8015296:	ea4f 2c3c 	mov.w	ip, ip, ror #8
 801529a:	fa2f fc8c 	sxtb16	ip, ip
 801529e:	fadc fc06 	ssub16	ip, ip, r6
 80152a2:	fad1 f106 	ssub16	r1, r1, r6
 80152a6:	b20b      	sxth	r3, r1
 80152a8:	eef0 4a47 	vmov.f32	s9, s14
 80152ac:	ee05 3a10 	vmov	s10, r3
 80152b0:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80152b4:	eee5 4a25 	vfma.f32	s9, s10, s11
 80152b8:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 80152bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152c0:	fe76 7a26 	vselgt.f32	s15, s12, s13
 80152c4:	ee77 7aa4 	vadd.f32	s15, s15, s9
 80152c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80152cc:	ee17 8a90 	vmov	r8, s15
 80152d0:	f308 0807 	ssat	r8, #8, r8
 80152d4:	1409      	asrs	r1, r1, #16
 80152d6:	eeb0 5a47 	vmov.f32	s10, s14
 80152da:	fa4f f888 	sxtb.w	r8, r8
 80152de:	ee07 1a90 	vmov	s15, r1
 80152e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80152e6:	eea7 5aa5 	vfma.f32	s10, s15, s11
 80152ea:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 80152ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152f2:	fe76 7a26 	vselgt.f32	s15, s12, s13
 80152f6:	ee77 7a85 	vadd.f32	s15, s15, s10
 80152fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80152fe:	ee17 3a90 	vmov	r3, s15
 8015302:	f303 0307 	ssat	r3, #8, r3
 8015306:	b259      	sxtb	r1, r3
 8015308:	eef0 4a47 	vmov.f32	s9, s14
 801530c:	fa0f f38c 	sxth.w	r3, ip
 8015310:	ee05 3a10 	vmov	s10, r3
 8015314:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8015318:	eee5 4a25 	vfma.f32	s9, s10, s11
 801531c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8015320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015324:	fe76 7a26 	vselgt.f32	s15, s12, s13
 8015328:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801532c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015330:	ee17 ea90 	vmov	lr, s15
 8015334:	f30e 0e07 	ssat	lr, #8, lr
 8015338:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 801533c:	eeb0 5a47 	vmov.f32	s10, s14
 8015340:	fa4f fe8e 	sxtb.w	lr, lr
 8015344:	ee07 ca90 	vmov	s15, ip
 8015348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801534c:	eea7 5aa5 	vfma.f32	s10, s15, s11
 8015350:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8015354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015358:	fe76 7a26 	vselgt.f32	s15, s12, s13
 801535c:	ee77 7a85 	vadd.f32	s15, s15, s10
 8015360:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015364:	ee17 3a90 	vmov	r3, s15
 8015368:	f303 0c07 	ssat	ip, #8, r3
 801536c:	040b      	lsls	r3, r1, #16
 801536e:	42a2      	cmp	r2, r4
 8015370:	fa5f f888 	uxtb.w	r8, r8
 8015374:	ea4f 210e 	mov.w	r1, lr, lsl #8
 8015378:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801537c:	b289      	uxth	r1, r1
 801537e:	ea43 0308 	orr.w	r3, r3, r8
 8015382:	ea43 0301 	orr.w	r3, r3, r1
 8015386:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 801538a:	f845 3b04 	str.w	r3, [r5], #4
 801538e:	f47f af7e 	bne.w	801528e <ai_sum_buffer_INT8+0x54e>
 8015392:	4438      	add	r0, r7
 8015394:	9b00      	ldr	r3, [sp, #0]
 8015396:	f013 0203 	ands.w	r2, r3, #3
 801539a:	f43f ad1d 	beq.w	8014dd8 <ai_sum_buffer_INT8+0x98>
 801539e:	f994 3000 	ldrsb.w	r3, [r4]
 80153a2:	eef0 4a47 	vmov.f32	s9, s14
 80153a6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80153aa:	ed9f 5a2d 	vldr	s10, [pc, #180]	; 8015460 <ai_sum_buffer_INT8+0x720>
 80153ae:	eba3 030a 	sub.w	r3, r3, sl
 80153b2:	ee07 3a90 	vmov	s15, r3
 80153b6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80153ba:	eee5 4a86 	vfma.f32	s9, s11, s12
 80153be:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 80153c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153c6:	fe76 7a85 	vselgt.f32	s15, s13, s10
 80153ca:	ee77 7aa4 	vadd.f32	s15, s15, s9
 80153ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80153d2:	ee17 3a90 	vmov	r3, s15
 80153d6:	f303 0307 	ssat	r3, #8, r3
 80153da:	3a01      	subs	r2, #1
 80153dc:	7003      	strb	r3, [r0, #0]
 80153de:	f43f acfb 	beq.w	8014dd8 <ai_sum_buffer_INT8+0x98>
 80153e2:	f994 3001 	ldrsb.w	r3, [r4, #1]
 80153e6:	eef0 4a47 	vmov.f32	s9, s14
 80153ea:	eba3 030a 	sub.w	r3, r3, sl
 80153ee:	ee07 3a90 	vmov	s15, r3
 80153f2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80153f6:	eee5 4a86 	vfma.f32	s9, s11, s12
 80153fa:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 80153fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015402:	fe76 7a85 	vselgt.f32	s15, s13, s10
 8015406:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801540a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801540e:	ee17 3a90 	vmov	r3, s15
 8015412:	f303 0307 	ssat	r3, #8, r3
 8015416:	2a01      	cmp	r2, #1
 8015418:	7043      	strb	r3, [r0, #1]
 801541a:	f43f acdd 	beq.w	8014dd8 <ai_sum_buffer_INT8+0x98>
 801541e:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8015422:	eba3 030a 	sub.w	r3, r3, sl
 8015426:	ee07 3a90 	vmov	s15, r3
 801542a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801542e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8015432:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8015436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801543a:	fe76 6a85 	vselgt.f32	s13, s13, s10
 801543e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015442:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8015446:	ee17 3a10 	vmov	r3, s14
 801544a:	f303 0307 	ssat	r3, #8, r3
 801544e:	7083      	strb	r3, [r0, #2]
 8015450:	e4c2      	b.n	8014dd8 <ai_sum_buffer_INT8+0x98>
 8015452:	9103      	str	r1, [sp, #12]
 8015454:	e684      	b.n	8015160 <ai_sum_buffer_INT8+0x420>
 8015456:	460c      	mov	r4, r1
 8015458:	e55c      	b.n	8014f14 <ai_sum_buffer_INT8+0x1d4>
 801545a:	4614      	mov	r4, r2
 801545c:	e79a      	b.n	8015394 <ai_sum_buffer_INT8+0x654>
 801545e:	bf00      	nop
 8015460:	befffffc 	.word	0xbefffffc

08015464 <align_factor_ch>:
 8015464:	2900      	cmp	r1, #0
 8015466:	d05d      	beq.n	8015524 <align_factor_ch+0xc0>
 8015468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801546c:	ed2d 8b04 	vpush	{d8-d9}
 8015470:	ee80 9a20 	vdiv.f32	s18, s0, s1
 8015474:	4604      	mov	r4, r0
 8015476:	4691      	mov	r9, r2
 8015478:	4698      	mov	r8, r3
 801547a:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 801547e:	eddf 9a2a 	vldr	s19, [pc, #168]	; 8015528 <align_factor_ch+0xc4>
 8015482:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 8015486:	2700      	movs	r7, #0
 8015488:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801548c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8015490:	ecf4 7a01 	vldmia	r4!, {s15}
 8015494:	ee69 7a27 	vmul.f32	s15, s18, s15
 8015498:	eef4 7a68 	vcmp.f32	s15, s17
 801549c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154a0:	d528      	bpl.n	80154f4 <align_factor_ch+0x90>
 80154a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80154a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154aa:	dd23      	ble.n	80154f4 <align_factor_ch+0x90>
 80154ac:	2200      	movs	r2, #0
 80154ae:	e003      	b.n	80154b8 <align_factor_ch+0x54>
 80154b0:	2a20      	cmp	r2, #32
 80154b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80154b6:	d031      	beq.n	801551c <align_factor_ch+0xb8>
 80154b8:	eef4 7ac8 	vcmpe.f32	s15, s16
 80154bc:	b213      	sxth	r3, r2
 80154be:	3201      	adds	r2, #1
 80154c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154c4:	d4f4      	bmi.n	80154b0 <align_factor_ch+0x4c>
 80154c6:	ee67 7aa9 	vmul.f32	s15, s15, s19
 80154ca:	f8a8 3000 	strh.w	r3, [r8]
 80154ce:	ee17 0a90 	vmov	r0, s15
 80154d2:	f7ea ff75 	bl	80003c0 <__aeabi_f2lz>
 80154d6:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 80154da:	bf18      	it	ne
 80154dc:	ea86 70e1 	eorne.w	r0, r6, r1, asr #31
 80154e0:	42a5      	cmp	r5, r4
 80154e2:	f108 0802 	add.w	r8, r8, #2
 80154e6:	f849 0b04 	str.w	r0, [r9], #4
 80154ea:	d1d1      	bne.n	8015490 <align_factor_ch+0x2c>
 80154ec:	ecbd 8b04 	vpop	{d8-d9}
 80154f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80154f4:	2300      	movs	r3, #0
 80154f6:	e005      	b.n	8015504 <align_factor_ch+0xa0>
 80154f8:	b213      	sxth	r3, r2
 80154fa:	ee67 7a88 	vmul.f32	s15, s15, s16
 80154fe:	f113 0f1f 	cmn.w	r3, #31
 8015502:	d006      	beq.n	8015512 <align_factor_ch+0xae>
 8015504:	eef4 7ae8 	vcmpe.f32	s15, s17
 8015508:	1e5a      	subs	r2, r3, #1
 801550a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801550e:	dcf3      	bgt.n	80154f8 <align_factor_ch+0x94>
 8015510:	e7d9      	b.n	80154c6 <align_factor_ch+0x62>
 8015512:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015516:	f06f 031d 	mvn.w	r3, #29
 801551a:	e7d4      	b.n	80154c6 <align_factor_ch+0x62>
 801551c:	2000      	movs	r0, #0
 801551e:	f8a8 7000 	strh.w	r7, [r8]
 8015522:	e7dd      	b.n	80154e0 <align_factor_ch+0x7c>
 8015524:	4770      	bx	lr
 8015526:	bf00      	nop
 8015528:	4f000000 	.word	0x4f000000

0801552c <st_sssa8_ch_convolve_rank1upd>:
 801552c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015530:	b085      	sub	sp, #20
 8015532:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 8015536:	f99d b040 	ldrsb.w	fp, [sp, #64]	; 0x40
 801553a:	fb13 f304 	smulbb	r3, r3, r4
 801553e:	460c      	mov	r4, r1
 8015540:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015542:	fb13 f500 	smulbb	r5, r3, r0
 8015546:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015548:	2a00      	cmp	r2, #0
 801554a:	d070      	beq.n	801562e <st_sssa8_ch_convolve_rank1upd+0x102>
 801554c:	b2ad      	uxth	r5, r5
 801554e:	f1a1 0904 	sub.w	r9, r1, #4
 8015552:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
 8015556:	08af      	lsrs	r7, r5, #2
 8015558:	f005 0503 	and.w	r5, r5, #3
 801555c:	eb03 08c2 	add.w	r8, r3, r2, lsl #3
 8015560:	1e69      	subs	r1, r5, #1
 8015562:	f1a7 0381 	sub.w	r3, r7, #129	; 0x81
 8015566:	f1a7 0280 	sub.w	r2, r7, #128	; 0x80
 801556a:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 801556e:	b289      	uxth	r1, r1
 8015570:	9100      	str	r1, [sp, #0]
 8015572:	ebc3 2143 	rsb	r1, r3, r3, lsl #9
 8015576:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
 801557a:	b292      	uxth	r2, r2
 801557c:	9202      	str	r2, [sp, #8]
 801557e:	025a      	lsls	r2, r3, #9
 8015580:	3301      	adds	r3, #1
 8015582:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8015586:	025b      	lsls	r3, r3, #9
 8015588:	9203      	str	r2, [sp, #12]
 801558a:	9301      	str	r3, [sp, #4]
 801558c:	2f80      	cmp	r7, #128	; 0x80
 801558e:	d953      	bls.n	8015638 <st_sssa8_ch_convolve_rank1upd+0x10c>
 8015590:	9b03      	ldr	r3, [sp, #12]
 8015592:	f504 7000 	add.w	r0, r4, #512	; 0x200
 8015596:	2600      	movs	r6, #0
 8015598:	eb04 0c03 	add.w	ip, r4, r3
 801559c:	f5a0 7100 	sub.w	r1, r0, #512	; 0x200
 80155a0:	2200      	movs	r2, #0
 80155a2:	f851 3b04 	ldr.w	r3, [r1], #4
 80155a6:	fa2f fe83 	sxtb16	lr, r3
 80155aa:	4281      	cmp	r1, r0
 80155ac:	ea4f 2333 	mov.w	r3, r3, ror #8
 80155b0:	fa92 f21e 	qadd16	r2, r2, lr
 80155b4:	fa2f f383 	sxtb16	r3, r3
 80155b8:	fa92 f213 	qadd16	r2, r2, r3
 80155bc:	d1f1      	bne.n	80155a2 <st_sssa8_ch_convolve_rank1upd+0x76>
 80155be:	f501 7000 	add.w	r0, r1, #512	; 0x200
 80155c2:	b213      	sxth	r3, r2
 80155c4:	4560      	cmp	r0, ip
 80155c6:	eb03 4222 	add.w	r2, r3, r2, asr #16
 80155ca:	4416      	add	r6, r2
 80155cc:	d1e6      	bne.n	801559c <st_sssa8_ch_convolve_rank1upd+0x70>
 80155ce:	9b01      	ldr	r3, [sp, #4]
 80155d0:	18e1      	adds	r1, r4, r3
 80155d2:	9c02      	ldr	r4, [sp, #8]
 80155d4:	b374      	cbz	r4, 8015634 <st_sssa8_ch_convolve_rank1upd+0x108>
 80155d6:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 80155da:	2200      	movs	r2, #0
 80155dc:	f851 3b04 	ldr.w	r3, [r1], #4
 80155e0:	fa2f f083 	sxtb16	r0, r3
 80155e4:	428c      	cmp	r4, r1
 80155e6:	ea4f 2333 	mov.w	r3, r3, ror #8
 80155ea:	fa92 f210 	qadd16	r2, r2, r0
 80155ee:	fa2f f383 	sxtb16	r3, r3
 80155f2:	fa92 f213 	qadd16	r2, r2, r3
 80155f6:	d1f1      	bne.n	80155dc <st_sssa8_ch_convolve_rank1upd+0xb0>
 80155f8:	b213      	sxth	r3, r2
 80155fa:	eb03 4322 	add.w	r3, r3, r2, asr #16
 80155fe:	441e      	add	r6, r3
 8015600:	b16d      	cbz	r5, 801561e <st_sssa8_ch_convolve_rank1upd+0xf2>
 8015602:	f994 3000 	ldrsb.w	r3, [r4]
 8015606:	441e      	add	r6, r3
 8015608:	9b00      	ldr	r3, [sp, #0]
 801560a:	b13b      	cbz	r3, 801561c <st_sssa8_ch_convolve_rank1upd+0xf0>
 801560c:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8015610:	2d02      	cmp	r5, #2
 8015612:	441e      	add	r6, r3
 8015614:	d002      	beq.n	801561c <st_sssa8_ch_convolve_rank1upd+0xf0>
 8015616:	f994 3002 	ldrsb.w	r3, [r4, #2]
 801561a:	441e      	add	r6, r3
 801561c:	442c      	add	r4, r5
 801561e:	f859 3f04 	ldr.w	r3, [r9, #4]!
 8015622:	fb0b 3616 	mls	r6, fp, r6, r3
 8015626:	f84a 6b04 	str.w	r6, [sl], #4
 801562a:	45c2      	cmp	sl, r8
 801562c:	d1ae      	bne.n	801558c <st_sssa8_ch_convolve_rank1upd+0x60>
 801562e:	b005      	add	sp, #20
 8015630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015634:	460c      	mov	r4, r1
 8015636:	e7e3      	b.n	8015600 <st_sssa8_ch_convolve_rank1upd+0xd4>
 8015638:	4621      	mov	r1, r4
 801563a:	2600      	movs	r6, #0
 801563c:	463c      	mov	r4, r7
 801563e:	e7c9      	b.n	80155d4 <st_sssa8_ch_convolve_rank1upd+0xa8>

08015640 <ai_padding_opt_init>:
 8015640:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015644:	2700      	movs	r7, #0
 8015646:	9c07      	ldr	r4, [sp, #28]
 8015648:	e9c0 7700 	strd	r7, r7, [r0]
 801564c:	6087      	str	r7, [r0, #8]
 801564e:	46b9      	mov	r9, r7
 8015650:	690d      	ldr	r5, [r1, #16]
 8015652:	f1c5 0c00 	rsb	ip, r5, #0
 8015656:	689d      	ldr	r5, [r3, #8]
 8015658:	42bd      	cmp	r5, r7
 801565a:	dd1c      	ble.n	8015696 <ai_padding_opt_init+0x56>
 801565c:	463e      	mov	r6, r7
 801565e:	46be      	mov	lr, r7
 8015660:	e010      	b.n	8015684 <ai_padding_opt_init+0x44>
 8015662:	6895      	ldr	r5, [r2, #8]
 8015664:	eba5 080c 	sub.w	r8, r5, ip
 8015668:	68a5      	ldr	r5, [r4, #8]
 801566a:	45a8      	cmp	r8, r5
 801566c:	da10      	bge.n	8015690 <ai_padding_opt_init+0x50>
 801566e:	f109 0901 	add.w	r9, r9, #1
 8015672:	f8c0 9008 	str.w	r9, [r0, #8]
 8015676:	688d      	ldr	r5, [r1, #8]
 8015678:	f10e 0e01 	add.w	lr, lr, #1
 801567c:	44ac      	add	ip, r5
 801567e:	689d      	ldr	r5, [r3, #8]
 8015680:	4575      	cmp	r5, lr
 8015682:	dd09      	ble.n	8015698 <ai_padding_opt_init+0x58>
 8015684:	f1bc 0f00 	cmp.w	ip, #0
 8015688:	daeb      	bge.n	8015662 <ai_padding_opt_init+0x22>
 801568a:	3601      	adds	r6, #1
 801568c:	6006      	str	r6, [r0, #0]
 801568e:	e7f2      	b.n	8015676 <ai_padding_opt_init+0x36>
 8015690:	3701      	adds	r7, #1
 8015692:	6047      	str	r7, [r0, #4]
 8015694:	e7ef      	b.n	8015676 <ai_padding_opt_init+0x36>
 8015696:	463e      	mov	r6, r7
 8015698:	2500      	movs	r5, #0
 801569a:	f8c0 9014 	str.w	r9, [r0, #20]
 801569e:	e9c0 6703 	strd	r6, r7, [r0, #12]
 80156a2:	e9c0 5506 	strd	r5, r5, [r0, #24]
 80156a6:	6205      	str	r5, [r0, #32]
 80156a8:	694e      	ldr	r6, [r1, #20]
 80156aa:	f1c6 0c00 	rsb	ip, r6, #0
 80156ae:	685e      	ldr	r6, [r3, #4]
 80156b0:	42ae      	cmp	r6, r5
 80156b2:	dd1c      	ble.n	80156ee <ai_padding_opt_init+0xae>
 80156b4:	46ae      	mov	lr, r5
 80156b6:	e00f      	b.n	80156d8 <ai_padding_opt_init+0x98>
 80156b8:	6855      	ldr	r5, [r2, #4]
 80156ba:	6866      	ldr	r6, [r4, #4]
 80156bc:	eba5 050c 	sub.w	r5, r5, ip
 80156c0:	42b5      	cmp	r5, r6
 80156c2:	da10      	bge.n	80156e6 <ai_padding_opt_init+0xa6>
 80156c4:	6a05      	ldr	r5, [r0, #32]
 80156c6:	3501      	adds	r5, #1
 80156c8:	6205      	str	r5, [r0, #32]
 80156ca:	68cd      	ldr	r5, [r1, #12]
 80156cc:	f10e 0e01 	add.w	lr, lr, #1
 80156d0:	44ac      	add	ip, r5
 80156d2:	685d      	ldr	r5, [r3, #4]
 80156d4:	4575      	cmp	r5, lr
 80156d6:	dd0a      	ble.n	80156ee <ai_padding_opt_init+0xae>
 80156d8:	f1bc 0f00 	cmp.w	ip, #0
 80156dc:	daec      	bge.n	80156b8 <ai_padding_opt_init+0x78>
 80156de:	6985      	ldr	r5, [r0, #24]
 80156e0:	3501      	adds	r5, #1
 80156e2:	6185      	str	r5, [r0, #24]
 80156e4:	e7f1      	b.n	80156ca <ai_padding_opt_init+0x8a>
 80156e6:	69c5      	ldr	r5, [r0, #28]
 80156e8:	3501      	adds	r5, #1
 80156ea:	61c5      	str	r5, [r0, #28]
 80156ec:	e7ed      	b.n	80156ca <ai_padding_opt_init+0x8a>
 80156ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80156f2:	bf00      	nop

080156f4 <ai_padding_opt_phase1>:
 80156f4:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 80156f8:	b923      	cbnz	r3, 8015704 <ai_padding_opt_phase1+0x10>
 80156fa:	b17a      	cbz	r2, 801571c <ai_padding_opt_phase1+0x28>
 80156fc:	3a01      	subs	r2, #1
 80156fe:	8483      	strh	r3, [r0, #36]	; 0x24
 8015700:	61c2      	str	r2, [r0, #28]
 8015702:	e004      	b.n	801570e <ai_padding_opt_phase1+0x1a>
 8015704:	b152      	cbz	r2, 801571c <ai_padding_opt_phase1+0x28>
 8015706:	2201      	movs	r2, #1
 8015708:	3b01      	subs	r3, #1
 801570a:	8482      	strh	r2, [r0, #36]	; 0x24
 801570c:	6183      	str	r3, [r0, #24]
 801570e:	68c3      	ldr	r3, [r0, #12]
 8015710:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 8015714:	6003      	str	r3, [r0, #0]
 8015716:	e9c0 1201 	strd	r1, r2, [r0, #4]
 801571a:	4770      	bx	lr
 801571c:	6a03      	ldr	r3, [r0, #32]
 801571e:	2201      	movs	r2, #1
 8015720:	3b01      	subs	r3, #1
 8015722:	8482      	strh	r2, [r0, #36]	; 0x24
 8015724:	6203      	str	r3, [r0, #32]
 8015726:	e7f2      	b.n	801570e <ai_padding_opt_phase1+0x1a>

08015728 <st_int8_to16_dual>:
 8015728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801572c:	4698      	mov	r8, r3
 801572e:	085b      	lsrs	r3, r3, #1
 8015730:	eb00 0c02 	add.w	ip, r0, r2
 8015734:	f000 80b9 	beq.w	80158aa <st_int8_to16_dual+0x182>
 8015738:	f1a2 0710 	sub.w	r7, r2, #16
 801573c:	1f16      	subs	r6, r2, #4
 801573e:	2f00      	cmp	r7, #0
 8015740:	f04f 0500 	mov.w	r5, #0
 8015744:	db73      	blt.n	801582e <st_int8_to16_dual+0x106>
 8015746:	f8d0 e000 	ldr.w	lr, [r0]
 801574a:	f8dc 4000 	ldr.w	r4, [ip]
 801574e:	fa2f f99e 	sxtb16	r9, lr, ror #8
 8015752:	fa2f fe8e 	sxtb16	lr, lr
 8015756:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 801575a:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 801575e:	fa2f f994 	sxtb16	r9, r4, ror #8
 8015762:	f8c1 e000 	str.w	lr, [r1]
 8015766:	f8c1 a008 	str.w	sl, [r1, #8]
 801576a:	fa2f f484 	sxtb16	r4, r4
 801576e:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 8015772:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 8015776:	f8c1 e00c 	str.w	lr, [r1, #12]
 801577a:	604c      	str	r4, [r1, #4]
 801577c:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8015780:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8015784:	fa2f f99e 	sxtb16	r9, lr, ror #8
 8015788:	fa2f fe8e 	sxtb16	lr, lr
 801578c:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 8015790:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 8015794:	fa2f f994 	sxtb16	r9, r4, ror #8
 8015798:	f8c1 e010 	str.w	lr, [r1, #16]
 801579c:	f8c1 a018 	str.w	sl, [r1, #24]
 80157a0:	fa2f f484 	sxtb16	r4, r4
 80157a4:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 80157a8:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 80157ac:	f8c1 e01c 	str.w	lr, [r1, #28]
 80157b0:	614c      	str	r4, [r1, #20]
 80157b2:	f8d0 e008 	ldr.w	lr, [r0, #8]
 80157b6:	f8dc 4008 	ldr.w	r4, [ip, #8]
 80157ba:	fa2f f99e 	sxtb16	r9, lr, ror #8
 80157be:	fa2f fe8e 	sxtb16	lr, lr
 80157c2:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 80157c6:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 80157ca:	fa2f f994 	sxtb16	r9, r4, ror #8
 80157ce:	3010      	adds	r0, #16
 80157d0:	f10c 0c10 	add.w	ip, ip, #16
 80157d4:	f8c1 e020 	str.w	lr, [r1, #32]
 80157d8:	f8c1 a028 	str.w	sl, [r1, #40]	; 0x28
 80157dc:	fa2f f484 	sxtb16	r4, r4
 80157e0:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 80157e4:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 80157e8:	f8c1 e02c 	str.w	lr, [r1, #44]	; 0x2c
 80157ec:	624c      	str	r4, [r1, #36]	; 0x24
 80157ee:	f850 ec04 	ldr.w	lr, [r0, #-4]
 80157f2:	f85c 4c04 	ldr.w	r4, [ip, #-4]
 80157f6:	fa2f fa9e 	sxtb16	sl, lr, ror #8
 80157fa:	fa2f fe8e 	sxtb16	lr, lr
 80157fe:	eaca 492e 	pkhtb	r9, sl, lr, asr #16
 8015802:	eace 4e0a 	pkhbt	lr, lr, sl, lsl #16
 8015806:	fa2f fa94 	sxtb16	sl, r4, ror #8
 801580a:	3510      	adds	r5, #16
 801580c:	f8c1 e030 	str.w	lr, [r1, #48]	; 0x30
 8015810:	f8c1 9038 	str.w	r9, [r1, #56]	; 0x38
 8015814:	3140      	adds	r1, #64	; 0x40
 8015816:	42bd      	cmp	r5, r7
 8015818:	fa2f f484 	sxtb16	r4, r4
 801581c:	eaca 4e24 	pkhtb	lr, sl, r4, asr #16
 8015820:	eac4 440a 	pkhbt	r4, r4, sl, lsl #16
 8015824:	f841 ec04 	str.w	lr, [r1, #-4]
 8015828:	f841 4c0c 	str.w	r4, [r1, #-12]
 801582c:	dd8b      	ble.n	8015746 <st_int8_to16_dual+0x1e>
 801582e:	42ae      	cmp	r6, r5
 8015830:	db1e      	blt.n	8015870 <st_int8_to16_dual+0x148>
 8015832:	f850 4b04 	ldr.w	r4, [r0], #4
 8015836:	f85c eb04 	ldr.w	lr, [ip], #4
 801583a:	fa2f fa94 	sxtb16	sl, r4, ror #8
 801583e:	fa2f f484 	sxtb16	r4, r4
 8015842:	eaca 4924 	pkhtb	r9, sl, r4, asr #16
 8015846:	eac4 440a 	pkhbt	r4, r4, sl, lsl #16
 801584a:	fa2f fa9e 	sxtb16	sl, lr, ror #8
 801584e:	3504      	adds	r5, #4
 8015850:	600c      	str	r4, [r1, #0]
 8015852:	f8c1 9008 	str.w	r9, [r1, #8]
 8015856:	3110      	adds	r1, #16
 8015858:	42b5      	cmp	r5, r6
 801585a:	fa2f fe8e 	sxtb16	lr, lr
 801585e:	eaca 442e 	pkhtb	r4, sl, lr, asr #16
 8015862:	eace 4e0a 	pkhbt	lr, lr, sl, lsl #16
 8015866:	f841 4c04 	str.w	r4, [r1, #-4]
 801586a:	f841 ec0c 	str.w	lr, [r1, #-12]
 801586e:	dde0      	ble.n	8015832 <st_int8_to16_dual+0x10a>
 8015870:	42aa      	cmp	r2, r5
 8015872:	dd40      	ble.n	80158f6 <st_int8_to16_dual+0x1ce>
 8015874:	1b55      	subs	r5, r2, r5
 8015876:	1d0c      	adds	r4, r1, #4
 8015878:	46e6      	mov	lr, ip
 801587a:	eb00 0a05 	add.w	sl, r0, r5
 801587e:	f910 9b01 	ldrsb.w	r9, [r0], #1
 8015882:	3404      	adds	r4, #4
 8015884:	f824 9c08 	strh.w	r9, [r4, #-8]
 8015888:	4550      	cmp	r0, sl
 801588a:	f91e 9b01 	ldrsb.w	r9, [lr], #1
 801588e:	f824 9c06 	strh.w	r9, [r4, #-6]
 8015892:	d1f4      	bne.n	801587e <st_int8_to16_dual+0x156>
 8015894:	44ac      	add	ip, r5
 8015896:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801589a:	3b01      	subs	r3, #1
 801589c:	eb0a 0002 	add.w	r0, sl, r2
 80158a0:	4494      	add	ip, r2
 80158a2:	b29b      	uxth	r3, r3
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	f47f af4a 	bne.w	801573e <st_int8_to16_dual+0x16>
 80158aa:	f018 0f01 	tst.w	r8, #1
 80158ae:	d020      	beq.n	80158f2 <st_int8_to16_dual+0x1ca>
 80158b0:	1f17      	subs	r7, r2, #4
 80158b2:	f04f 0400 	mov.w	r4, #0
 80158b6:	d411      	bmi.n	80158dc <st_int8_to16_dual+0x1b4>
 80158b8:	f850 3b04 	ldr.w	r3, [r0], #4
 80158bc:	fa2f f593 	sxtb16	r5, r3, ror #8
 80158c0:	3404      	adds	r4, #4
 80158c2:	3108      	adds	r1, #8
 80158c4:	fa2f f383 	sxtb16	r3, r3
 80158c8:	42a7      	cmp	r7, r4
 80158ca:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 80158ce:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 80158d2:	f841 6c04 	str.w	r6, [r1, #-4]
 80158d6:	f841 3c08 	str.w	r3, [r1, #-8]
 80158da:	daed      	bge.n	80158b8 <st_int8_to16_dual+0x190>
 80158dc:	42a2      	cmp	r2, r4
 80158de:	dd08      	ble.n	80158f2 <st_int8_to16_dual+0x1ca>
 80158e0:	1b13      	subs	r3, r2, r4
 80158e2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80158e6:	f910 2b01 	ldrsb.w	r2, [r0], #1
 80158ea:	f821 2b02 	strh.w	r2, [r1], #2
 80158ee:	428b      	cmp	r3, r1
 80158f0:	d1f9      	bne.n	80158e6 <st_int8_to16_dual+0x1be>
 80158f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158f6:	4682      	mov	sl, r0
 80158f8:	e7cf      	b.n	801589a <st_int8_to16_dual+0x172>
 80158fa:	bf00      	nop

080158fc <weights_2channels_prefetch>:
 80158fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015900:	2b00      	cmp	r3, #0
 8015902:	b087      	sub	sp, #28
 8015904:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8015908:	9302      	str	r3, [sp, #8]
 801590a:	f340 80e6 	ble.w	8015ada <weights_2channels_prefetch+0x1de>
 801590e:	f1a8 0310 	sub.w	r3, r8, #16
 8015912:	f1a8 0403 	sub.w	r4, r8, #3
 8015916:	f04f 0b00 	mov.w	fp, #0
 801591a:	091b      	lsrs	r3, r3, #4
 801591c:	9403      	str	r4, [sp, #12]
 801591e:	f1a8 0404 	sub.w	r4, r8, #4
 8015922:	3301      	adds	r3, #1
 8015924:	9405      	str	r4, [sp, #20]
 8015926:	011c      	lsls	r4, r3, #4
 8015928:	019b      	lsls	r3, r3, #6
 801592a:	9400      	str	r4, [sp, #0]
 801592c:	9304      	str	r3, [sp, #16]
 801592e:	f1b8 0f0f 	cmp.w	r8, #15
 8015932:	f340 80d7 	ble.w	8015ae4 <weights_2channels_prefetch+0x1e8>
 8015936:	9b00      	ldr	r3, [sp, #0]
 8015938:	460d      	mov	r5, r1
 801593a:	18c6      	adds	r6, r0, r3
 801593c:	4613      	mov	r3, r2
 801593e:	6804      	ldr	r4, [r0, #0]
 8015940:	3010      	adds	r0, #16
 8015942:	682f      	ldr	r7, [r5, #0]
 8015944:	3340      	adds	r3, #64	; 0x40
 8015946:	fa2f fc84 	sxtb16	ip, r4
 801594a:	3510      	adds	r5, #16
 801594c:	f843 cc40 	str.w	ip, [r3, #-64]
 8015950:	ea4f 2434 	mov.w	r4, r4, ror #8
 8015954:	42b0      	cmp	r0, r6
 8015956:	fa2f f484 	sxtb16	r4, r4
 801595a:	f843 4c3c 	str.w	r4, [r3, #-60]
 801595e:	ea4f 2437 	mov.w	r4, r7, ror #8
 8015962:	fa2f f787 	sxtb16	r7, r7
 8015966:	fa2f f484 	sxtb16	r4, r4
 801596a:	f843 7c38 	str.w	r7, [r3, #-56]
 801596e:	f843 4c34 	str.w	r4, [r3, #-52]
 8015972:	f855 4c0c 	ldr.w	r4, [r5, #-12]
 8015976:	f850 7c0c 	ldr.w	r7, [r0, #-12]
 801597a:	ea4f 2c34 	mov.w	ip, r4, ror #8
 801597e:	fa2f f484 	sxtb16	r4, r4
 8015982:	fa2f fc8c 	sxtb16	ip, ip
 8015986:	f843 4c28 	str.w	r4, [r3, #-40]
 801598a:	f843 cc24 	str.w	ip, [r3, #-36]
 801598e:	ea4f 2c37 	mov.w	ip, r7, ror #8
 8015992:	fa2f f787 	sxtb16	r7, r7
 8015996:	f843 7c30 	str.w	r7, [r3, #-48]
 801599a:	fa2f f78c 	sxtb16	r7, ip
 801599e:	f843 7c2c 	str.w	r7, [r3, #-44]
 80159a2:	f850 7c08 	ldr.w	r7, [r0, #-8]
 80159a6:	f855 4c08 	ldr.w	r4, [r5, #-8]
 80159aa:	ea4f 2c37 	mov.w	ip, r7, ror #8
 80159ae:	fa2f f787 	sxtb16	r7, r7
 80159b2:	fa2f fc8c 	sxtb16	ip, ip
 80159b6:	f843 7c20 	str.w	r7, [r3, #-32]
 80159ba:	ea4f 2734 	mov.w	r7, r4, ror #8
 80159be:	f843 cc1c 	str.w	ip, [r3, #-28]
 80159c2:	fa2f f787 	sxtb16	r7, r7
 80159c6:	fa2f f484 	sxtb16	r4, r4
 80159ca:	f843 7c14 	str.w	r7, [r3, #-20]
 80159ce:	f843 4c18 	str.w	r4, [r3, #-24]
 80159d2:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80159d6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80159da:	ea4f 2c37 	mov.w	ip, r7, ror #8
 80159de:	fa2f f787 	sxtb16	r7, r7
 80159e2:	fa2f fc8c 	sxtb16	ip, ip
 80159e6:	f843 7c10 	str.w	r7, [r3, #-16]
 80159ea:	ea4f 2734 	mov.w	r7, r4, ror #8
 80159ee:	f843 cc0c 	str.w	ip, [r3, #-12]
 80159f2:	fa2f f787 	sxtb16	r7, r7
 80159f6:	fa2f f484 	sxtb16	r4, r4
 80159fa:	f843 7c04 	str.w	r7, [r3, #-4]
 80159fe:	f843 4c08 	str.w	r4, [r3, #-8]
 8015a02:	d19c      	bne.n	801593e <weights_2channels_prefetch+0x42>
 8015a04:	9b04      	ldr	r3, [sp, #16]
 8015a06:	441a      	add	r2, r3
 8015a08:	9b00      	ldr	r3, [sp, #0]
 8015a0a:	4419      	add	r1, r3
 8015a0c:	469e      	mov	lr, r3
 8015a0e:	9b03      	ldr	r3, [sp, #12]
 8015a10:	4573      	cmp	r3, lr
 8015a12:	dd65      	ble.n	8015ae0 <weights_2channels_prefetch+0x1e4>
 8015a14:	9b05      	ldr	r3, [sp, #20]
 8015a16:	4614      	mov	r4, r2
 8015a18:	460f      	mov	r7, r1
 8015a1a:	eba3 090e 	sub.w	r9, r3, lr
 8015a1e:	ea4f 0999 	mov.w	r9, r9, lsr #2
 8015a22:	f109 0a01 	add.w	sl, r9, #1
 8015a26:	ea4f 038a 	mov.w	r3, sl, lsl #2
 8015a2a:	eb06 008a 	add.w	r0, r6, sl, lsl #2
 8015a2e:	9301      	str	r3, [sp, #4]
 8015a30:	f856 3b04 	ldr.w	r3, [r6], #4
 8015a34:	3410      	adds	r4, #16
 8015a36:	f857 5b04 	ldr.w	r5, [r7], #4
 8015a3a:	fa2f fc83 	sxtb16	ip, r3
 8015a3e:	4286      	cmp	r6, r0
 8015a40:	ea4f 2333 	mov.w	r3, r3, ror #8
 8015a44:	fa2f f383 	sxtb16	r3, r3
 8015a48:	f844 3c0c 	str.w	r3, [r4, #-12]
 8015a4c:	ea4f 2335 	mov.w	r3, r5, ror #8
 8015a50:	fa2f f585 	sxtb16	r5, r5
 8015a54:	f844 cc10 	str.w	ip, [r4, #-16]
 8015a58:	f844 5c08 	str.w	r5, [r4, #-8]
 8015a5c:	fa2f f383 	sxtb16	r3, r3
 8015a60:	f844 3c04 	str.w	r3, [r4, #-4]
 8015a64:	d1e4      	bne.n	8015a30 <weights_2channels_prefetch+0x134>
 8015a66:	9b01      	ldr	r3, [sp, #4]
 8015a68:	f10e 0e04 	add.w	lr, lr, #4
 8015a6c:	eb02 120a 	add.w	r2, r2, sl, lsl #4
 8015a70:	4419      	add	r1, r3
 8015a72:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 8015a76:	45f0      	cmp	r8, lr
 8015a78:	dd29      	ble.n	8015ace <weights_2channels_prefetch+0x1d2>
 8015a7a:	f990 3000 	ldrsb.w	r3, [r0]
 8015a7e:	8013      	strh	r3, [r2, #0]
 8015a80:	f991 3000 	ldrsb.w	r3, [r1]
 8015a84:	8053      	strh	r3, [r2, #2]
 8015a86:	f10e 0301 	add.w	r3, lr, #1
 8015a8a:	4598      	cmp	r8, r3
 8015a8c:	dd19      	ble.n	8015ac2 <weights_2channels_prefetch+0x1c6>
 8015a8e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8015a92:	8093      	strh	r3, [r2, #4]
 8015a94:	f991 3001 	ldrsb.w	r3, [r1, #1]
 8015a98:	80d3      	strh	r3, [r2, #6]
 8015a9a:	f10e 0302 	add.w	r3, lr, #2
 8015a9e:	4598      	cmp	r8, r3
 8015aa0:	dd0f      	ble.n	8015ac2 <weights_2channels_prefetch+0x1c6>
 8015aa2:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8015aa6:	8113      	strh	r3, [r2, #8]
 8015aa8:	f10e 0303 	add.w	r3, lr, #3
 8015aac:	f991 4002 	ldrsb.w	r4, [r1, #2]
 8015ab0:	4598      	cmp	r8, r3
 8015ab2:	8154      	strh	r4, [r2, #10]
 8015ab4:	dd05      	ble.n	8015ac2 <weights_2channels_prefetch+0x1c6>
 8015ab6:	f990 3003 	ldrsb.w	r3, [r0, #3]
 8015aba:	8193      	strh	r3, [r2, #12]
 8015abc:	f991 3003 	ldrsb.w	r3, [r1, #3]
 8015ac0:	81d3      	strh	r3, [r2, #14]
 8015ac2:	eba8 0e0e 	sub.w	lr, r8, lr
 8015ac6:	4470      	add	r0, lr
 8015ac8:	4471      	add	r1, lr
 8015aca:	eb02 028e 	add.w	r2, r2, lr, lsl #2
 8015ace:	f10b 0b01 	add.w	fp, fp, #1
 8015ad2:	9b02      	ldr	r3, [sp, #8]
 8015ad4:	455b      	cmp	r3, fp
 8015ad6:	f47f af2a 	bne.w	801592e <weights_2channels_prefetch+0x32>
 8015ada:	b007      	add	sp, #28
 8015adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ae0:	4630      	mov	r0, r6
 8015ae2:	e7c8      	b.n	8015a76 <weights_2channels_prefetch+0x17a>
 8015ae4:	4606      	mov	r6, r0
 8015ae6:	f04f 0e00 	mov.w	lr, #0
 8015aea:	e790      	b.n	8015a0e <weights_2channels_prefetch+0x112>

08015aec <st_sssa8_ch_fullW_prefetch>:
 8015aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015af0:	b087      	sub	sp, #28
 8015af2:	461c      	mov	r4, r3
 8015af4:	4680      	mov	r8, r0
 8015af6:	4613      	mov	r3, r2
 8015af8:	104f      	asrs	r7, r1, #1
 8015afa:	4620      	mov	r0, r4
 8015afc:	9103      	str	r1, [sp, #12]
 8015afe:	9704      	str	r7, [sp, #16]
 8015b00:	e9dd 2a10 	ldrd	r2, sl, [sp, #64]	; 0x40
 8015b04:	eb08 0402 	add.w	r4, r8, r2
 8015b08:	d020      	beq.n	8015b4c <st_sssa8_ch_fullW_prefetch+0x60>
 8015b0a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015b0c:	4646      	mov	r6, r8
 8015b0e:	4655      	mov	r5, sl
 8015b10:	f8cd 8014 	str.w	r8, [sp, #20]
 8015b14:	ea4f 0942 	mov.w	r9, r2, lsl #1
 8015b18:	4680      	mov	r8, r0
 8015b1a:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8015b1e:	469a      	mov	sl, r3
 8015b20:	462a      	mov	r2, r5
 8015b22:	4621      	mov	r1, r4
 8015b24:	4630      	mov	r0, r6
 8015b26:	4653      	mov	r3, sl
 8015b28:	f8cd 8000 	str.w	r8, [sp]
 8015b2c:	445d      	add	r5, fp
 8015b2e:	f7ff fee5 	bl	80158fc <weights_2channels_prefetch>
 8015b32:	3f01      	subs	r7, #1
 8015b34:	444c      	add	r4, r9
 8015b36:	444e      	add	r6, r9
 8015b38:	d1f2      	bne.n	8015b20 <st_sssa8_ch_fullW_prefetch+0x34>
 8015b3a:	9b04      	ldr	r3, [sp, #16]
 8015b3c:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8015b40:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8015b44:	fb03 8809 	mla	r8, r3, r9, r8
 8015b48:	fb03 aa0b 	mla	sl, r3, fp, sl
 8015b4c:	9b03      	ldr	r3, [sp, #12]
 8015b4e:	07db      	lsls	r3, r3, #31
 8015b50:	d509      	bpl.n	8015b66 <st_sssa8_ch_fullW_prefetch+0x7a>
 8015b52:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	dd06      	ble.n	8015b66 <st_sssa8_ch_fullW_prefetch+0x7a>
 8015b58:	4443      	add	r3, r8
 8015b5a:	f918 2b01 	ldrsb.w	r2, [r8], #1
 8015b5e:	4543      	cmp	r3, r8
 8015b60:	f82a 2b02 	strh.w	r2, [sl], #2
 8015b64:	d1f9      	bne.n	8015b5a <st_sssa8_ch_fullW_prefetch+0x6e>
 8015b66:	b007      	add	sp, #28
 8015b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015b6c <st_sssa8_ch_nn_mat_mult_nt_t>:
 8015b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b70:	b0b5      	sub	sp, #212	; 0xd4
 8015b72:	9027      	str	r0, [sp, #156]	; 0x9c
 8015b74:	912d      	str	r1, [sp, #180]	; 0xb4
 8015b76:	9233      	str	r2, [sp, #204]	; 0xcc
 8015b78:	932e      	str	r3, [sp, #184]	; 0xb8
 8015b7a:	e9dd 0445 	ldrd	r0, r4, [sp, #276]	; 0x114
 8015b7e:	2c00      	cmp	r4, #0
 8015b80:	bf18      	it	ne
 8015b82:	4620      	movne	r0, r4
 8015b84:	9c41      	ldr	r4, [sp, #260]	; 0x104
 8015b86:	2c01      	cmp	r4, #1
 8015b88:	9045      	str	r0, [sp, #276]	; 0x114
 8015b8a:	f340 826b 	ble.w	8016064 <st_sssa8_ch_nn_mat_mult_nt_t+0x4f8>
 8015b8e:	9c42      	ldr	r4, [sp, #264]	; 0x108
 8015b90:	461e      	mov	r6, r3
 8015b92:	4694      	mov	ip, r2
 8015b94:	9f42      	ldr	r7, [sp, #264]	; 0x108
 8015b96:	f1a4 0310 	sub.w	r3, r4, #16
 8015b9a:	9c41      	ldr	r4, [sp, #260]	; 0x104
 8015b9c:	468e      	mov	lr, r1
 8015b9e:	9d40      	ldr	r5, [sp, #256]	; 0x100
 8015ba0:	1ea0      	subs	r0, r4, #2
 8015ba2:	0919      	lsrs	r1, r3, #4
 8015ba4:	f023 030f 	bic.w	r3, r3, #15
 8015ba8:	9c42      	ldr	r4, [sp, #264]	; 0x108
 8015baa:	f020 0201 	bic.w	r2, r0, #1
 8015bae:	9032      	str	r0, [sp, #200]	; 0xc8
 8015bb0:	4630      	mov	r0, r6
 8015bb2:	3101      	adds	r1, #1
 8015bb4:	4432      	add	r2, r6
 8015bb6:	10a4      	asrs	r4, r4, #2
 8015bb8:	106d      	asrs	r5, r5, #1
 8015bba:	1cd6      	adds	r6, r2, #3
 8015bbc:	f107 0214 	add.w	r2, r7, #20
 8015bc0:	942f      	str	r4, [sp, #188]	; 0xbc
 8015bc2:	18d3      	adds	r3, r2, r3
 8015bc4:	9629      	str	r6, [sp, #164]	; 0xa4
 8015bc6:	9e41      	ldr	r6, [sp, #260]	; 0x104
 8015bc8:	9318      	str	r3, [sp, #96]	; 0x60
 8015bca:	f06f 0303 	mvn.w	r3, #3
 8015bce:	0076      	lsls	r6, r6, #1
 8015bd0:	952a      	str	r5, [sp, #168]	; 0xa8
 8015bd2:	1bdb      	subs	r3, r3, r7
 8015bd4:	9613      	str	r6, [sp, #76]	; 0x4c
 8015bd6:	9319      	str	r3, [sp, #100]	; 0x64
 8015bd8:	f1a7 030f 	sub.w	r3, r7, #15
 8015bdc:	9312      	str	r3, [sp, #72]	; 0x48
 8015bde:	f007 0303 	and.w	r3, r7, #3
 8015be2:	9330      	str	r3, [sp, #192]	; 0xc0
 8015be4:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8015be6:	f003 0301 	and.w	r3, r3, #1
 8015bea:	9328      	str	r3, [sp, #160]	; 0xa0
 8015bec:	007b      	lsls	r3, r7, #1
 8015bee:	9326      	str	r3, [sp, #152]	; 0x98
 8015bf0:	00bb      	lsls	r3, r7, #2
 8015bf2:	932c      	str	r3, [sp, #176]	; 0xb0
 8015bf4:	1f3b      	subs	r3, r7, #4
 8015bf6:	9317      	str	r3, [sp, #92]	; 0x5c
 8015bf8:	1c43      	adds	r3, r0, #1
 8015bfa:	931b      	str	r3, [sp, #108]	; 0x6c
 8015bfc:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 8015bfe:	3302      	adds	r3, #2
 8015c00:	9321      	str	r3, [sp, #132]	; 0x84
 8015c02:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8015c04:	3304      	adds	r3, #4
 8015c06:	931f      	str	r3, [sp, #124]	; 0x7c
 8015c08:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8015c0a:	3304      	adds	r3, #4
 8015c0c:	9320      	str	r3, [sp, #128]	; 0x80
 8015c0e:	4663      	mov	r3, ip
 8015c10:	3304      	adds	r3, #4
 8015c12:	9322      	str	r3, [sp, #136]	; 0x88
 8015c14:	010b      	lsls	r3, r1, #4
 8015c16:	9316      	str	r3, [sp, #88]	; 0x58
 8015c18:	018b      	lsls	r3, r1, #6
 8015c1a:	9325      	str	r3, [sp, #148]	; 0x94
 8015c1c:	0123      	lsls	r3, r4, #4
 8015c1e:	9331      	str	r3, [sp, #196]	; 0xc4
 8015c20:	fb06 f305 	mul.w	r3, r6, r5
 8015c24:	932b      	str	r3, [sp, #172]	; 0xac
 8015c26:	f8cd e08c 	str.w	lr, [sp, #140]	; 0x8c
 8015c2a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015c2c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8015c2e:	f932 3c02 	ldrsh.w	r3, [r2, #-2]
 8015c32:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015c36:	3901      	subs	r1, #1
 8015c38:	2b15      	cmp	r3, #21
 8015c3a:	931a      	str	r3, [sp, #104]	; 0x68
 8015c3c:	920a      	str	r2, [sp, #40]	; 0x28
 8015c3e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8015c40:	9101      	str	r1, [sp, #4]
 8015c42:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8015c46:	6812      	ldr	r2, [r2, #0]
 8015c48:	910d      	str	r1, [sp, #52]	; 0x34
 8015c4a:	920e      	str	r2, [sp, #56]	; 0x38
 8015c4c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015c4e:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8015c52:	6812      	ldr	r2, [r2, #0]
 8015c54:	910f      	str	r1, [sp, #60]	; 0x3c
 8015c56:	9210      	str	r2, [sp, #64]	; 0x40
 8015c58:	f300 8402 	bgt.w	8016460 <st_sssa8_ch_nn_mat_mult_nt_t+0x8f4>
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	bfcc      	ite	gt
 8015c60:	2300      	movgt	r3, #0
 8015c62:	2301      	movle	r3, #1
 8015c64:	425b      	negs	r3, r3
 8015c66:	9308      	str	r3, [sp, #32]
 8015c68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c6a:	2b15      	cmp	r3, #21
 8015c6c:	f300 82c4 	bgt.w	80161f8 <st_sssa8_ch_nn_mat_mult_nt_t+0x68c>
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	bfcc      	ite	gt
 8015c74:	2300      	movgt	r3, #0
 8015c76:	2301      	movle	r3, #1
 8015c78:	425b      	negs	r3, r3
 8015c7a:	9309      	str	r3, [sp, #36]	; 0x24
 8015c7c:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	f000 82c0 	beq.w	8016204 <st_sssa8_ch_nn_mat_mult_nt_t+0x698>
 8015c84:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	f040 8397 	bne.w	80163ba <st_sssa8_ch_nn_mat_mult_nt_t+0x84e>
 8015c8c:	461a      	mov	r2, r3
 8015c8e:	4619      	mov	r1, r3
 8015c90:	9822      	ldr	r0, [sp, #136]	; 0x88
 8015c92:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015c96:	18cb      	adds	r3, r1, r3
 8015c98:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8015c9a:	930c      	str	r3, [sp, #48]	; 0x30
 8015c9c:	6803      	ldr	r3, [r0, #0]
 8015c9e:	18d3      	adds	r3, r2, r3
 8015ca0:	930b      	str	r3, [sp, #44]	; 0x2c
 8015ca2:	2900      	cmp	r1, #0
 8015ca4:	f000 8510 	beq.w	80166c8 <st_sssa8_ch_nn_mat_mult_nt_t+0xb5c>
 8015ca8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015caa:	2001      	movs	r0, #1
 8015cac:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8015cae:	1e93      	subs	r3, r2, #2
 8015cb0:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 8015cb4:	9104      	str	r1, [sp, #16]
 8015cb6:	fa00 f303 	lsl.w	r3, r0, r3
 8015cba:	931c      	str	r3, [sp, #112]	; 0x70
 8015cbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015cbe:	3b02      	subs	r3, #2
 8015cc0:	fa00 f303 	lsl.w	r3, r0, r3
 8015cc4:	9841      	ldr	r0, [sp, #260]	; 0x104
 8015cc6:	931d      	str	r3, [sp, #116]	; 0x74
 8015cc8:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8015cca:	3b03      	subs	r3, #3
 8015ccc:	9311      	str	r3, [sp, #68]	; 0x44
 8015cce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015cd0:	4418      	add	r0, r3
 8015cd2:	9303      	str	r3, [sp, #12]
 8015cd4:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8015cd6:	9002      	str	r0, [sp, #8]
 8015cd8:	3304      	adds	r3, #4
 8015cda:	9845      	ldr	r0, [sp, #276]	; 0x114
 8015cdc:	9315      	str	r3, [sp, #84]	; 0x54
 8015cde:	1e53      	subs	r3, r2, #1
 8015ce0:	4420      	add	r0, r4
 8015ce2:	931e      	str	r3, [sp, #120]	; 0x78
 8015ce4:	f1c2 0301 	rsb	r3, r2, #1
 8015ce8:	9014      	str	r0, [sp, #80]	; 0x50
 8015cea:	9324      	str	r3, [sp, #144]	; 0x90
 8015cec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	f340 8279 	ble.w	80161e6 <st_sssa8_ch_nn_mat_mult_nt_t+0x67a>
 8015cf4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015cf6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015cf8:	eb0b 0703 	add.w	r7, fp, r3
 8015cfc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015cfe:	f8cd b014 	str.w	fp, [sp, #20]
 8015d02:	4604      	mov	r4, r0
 8015d04:	445b      	add	r3, fp
 8015d06:	9e45      	ldr	r6, [sp, #276]	; 0x114
 8015d08:	f8dd b064 	ldr.w	fp, [sp, #100]	; 0x64
 8015d0c:	9301      	str	r3, [sp, #4]
 8015d0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015d10:	4619      	mov	r1, r3
 8015d12:	f85b c007 	ldr.w	ip, [fp, r7]
 8015d16:	eb0b 0e07 	add.w	lr, fp, r7
 8015d1a:	6832      	ldr	r2, [r6, #0]
 8015d1c:	f8d6 9004 	ldr.w	r9, [r6, #4]
 8015d20:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8015d24:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8015d28:	fa2f f58c 	sxtb16	r5, ip
 8015d2c:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 8015d30:	fb25 0002 	smlad	r0, r5, r2, r0
 8015d34:	fb2c 0009 	smlad	r0, ip, r9, r0
 8015d38:	fb25 350a 	smlad	r5, r5, sl, r3
 8015d3c:	fb2c 5508 	smlad	r5, ip, r8, r5
 8015d40:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8015d44:	fa2f fc83 	sxtb16	ip, r3
 8015d48:	fa2f f393 	sxtb16	r3, r3, ror #8
 8015d4c:	fb2c 4202 	smlad	r2, ip, r2, r4
 8015d50:	fb2c 110a 	smlad	r1, ip, sl, r1
 8015d54:	fb23 2209 	smlad	r2, r3, r9, r2
 8015d58:	f8d6 9010 	ldr.w	r9, [r6, #16]
 8015d5c:	6974      	ldr	r4, [r6, #20]
 8015d5e:	fb23 1808 	smlad	r8, r3, r8, r1
 8015d62:	f8de 1004 	ldr.w	r1, [lr, #4]
 8015d66:	69b3      	ldr	r3, [r6, #24]
 8015d68:	f8d6 a01c 	ldr.w	sl, [r6, #28]
 8015d6c:	fa2f fc81 	sxtb16	ip, r1
 8015d70:	fa2f f191 	sxtb16	r1, r1, ror #8
 8015d74:	fb2c 0009 	smlad	r0, ip, r9, r0
 8015d78:	fb21 0004 	smlad	r0, r1, r4, r0
 8015d7c:	fb2c 5c03 	smlad	ip, ip, r3, r5
 8015d80:	fb21 cc0a 	smlad	ip, r1, sl, ip
 8015d84:	683d      	ldr	r5, [r7, #0]
 8015d86:	fa2f f185 	sxtb16	r1, r5
 8015d8a:	fa2f f595 	sxtb16	r5, r5, ror #8
 8015d8e:	fb21 2909 	smlad	r9, r1, r9, r2
 8015d92:	fb21 8803 	smlad	r8, r1, r3, r8
 8015d96:	fb25 9904 	smlad	r9, r5, r4, r9
 8015d9a:	6a34      	ldr	r4, [r6, #32]
 8015d9c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8015d9e:	fb25 8a0a 	smlad	sl, r5, sl, r8
 8015da2:	f8de 2008 	ldr.w	r2, [lr, #8]
 8015da6:	f8d6 8028 	ldr.w	r8, [r6, #40]	; 0x28
 8015daa:	6af5      	ldr	r5, [r6, #44]	; 0x2c
 8015dac:	fa2f f182 	sxtb16	r1, r2
 8015db0:	fa2f f292 	sxtb16	r2, r2, ror #8
 8015db4:	fb21 0004 	smlad	r0, r1, r4, r0
 8015db8:	fb22 0003 	smlad	r0, r2, r3, r0
 8015dbc:	fb21 c108 	smlad	r1, r1, r8, ip
 8015dc0:	fb22 1205 	smlad	r2, r2, r5, r1
 8015dc4:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8015dc8:	fa2f f18c 	sxtb16	r1, ip
 8015dcc:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 8015dd0:	fb21 9404 	smlad	r4, r1, r4, r9
 8015dd4:	fb21 aa08 	smlad	sl, r1, r8, sl
 8015dd8:	fb2c 4903 	smlad	r9, ip, r3, r4
 8015ddc:	f8d6 8030 	ldr.w	r8, [r6, #48]	; 0x30
 8015de0:	6b74      	ldr	r4, [r6, #52]	; 0x34
 8015de2:	fb2c a505 	smlad	r5, ip, r5, sl
 8015de6:	f8de 300c 	ldr.w	r3, [lr, #12]
 8015dea:	3640      	adds	r6, #64	; 0x40
 8015dec:	f856 ac08 	ldr.w	sl, [r6, #-8]
 8015df0:	f856 ec04 	ldr.w	lr, [r6, #-4]
 8015df4:	fa2f f183 	sxtb16	r1, r3
 8015df8:	fa2f f393 	sxtb16	r3, r3, ror #8
 8015dfc:	fb21 0008 	smlad	r0, r1, r8, r0
 8015e00:	fb23 0004 	smlad	r0, r3, r4, r0
 8015e04:	fb21 220a 	smlad	r2, r1, sl, r2
 8015e08:	fb23 230e 	smlad	r3, r3, lr, r2
 8015e0c:	68b9      	ldr	r1, [r7, #8]
 8015e0e:	fa2f f281 	sxtb16	r2, r1
 8015e12:	fa2f f191 	sxtb16	r1, r1, ror #8
 8015e16:	fb22 9908 	smlad	r9, r2, r8, r9
 8015e1a:	fb22 550a 	smlad	r5, r2, sl, r5
 8015e1e:	fb21 9404 	smlad	r4, r1, r4, r9
 8015e22:	fb21 510e 	smlad	r1, r1, lr, r5
 8015e26:	3710      	adds	r7, #16
 8015e28:	9a01      	ldr	r2, [sp, #4]
 8015e2a:	4297      	cmp	r7, r2
 8015e2c:	f47f af71 	bne.w	8015d12 <st_sssa8_ch_nn_mat_mult_nt_t+0x1a6>
 8015e30:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015e32:	f8dd b014 	ldr.w	fp, [sp, #20]
 8015e36:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8015e38:	4692      	mov	sl, r2
 8015e3a:	4493      	add	fp, r2
 8015e3c:	9501      	str	r5, [sp, #4]
 8015e3e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015e40:	4592      	cmp	sl, r2
 8015e42:	f280 81ce 	bge.w	80161e2 <st_sssa8_ch_nn_mat_mult_nt_t+0x676>
 8015e46:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8015e48:	f8cd a01c 	str.w	sl, [sp, #28]
 8015e4c:	eba5 020a 	sub.w	r2, r5, sl
 8015e50:	46aa      	mov	sl, r5
 8015e52:	0892      	lsrs	r2, r2, #2
 8015e54:	4616      	mov	r6, r2
 8015e56:	9206      	str	r2, [sp, #24]
 8015e58:	9a01      	ldr	r2, [sp, #4]
 8015e5a:	3601      	adds	r6, #1
 8015e5c:	eb0b 0986 	add.w	r9, fp, r6, lsl #2
 8015e60:	9605      	str	r6, [sp, #20]
 8015e62:	f8d2 8000 	ldr.w	r8, [r2]
 8015e66:	3210      	adds	r2, #16
 8015e68:	f85b 5b04 	ldr.w	r5, [fp], #4
 8015e6c:	f852 cc0c 	ldr.w	ip, [r2, #-12]
 8015e70:	f852 ec08 	ldr.w	lr, [r2, #-8]
 8015e74:	f852 7c04 	ldr.w	r7, [r2, #-4]
 8015e78:	fa2f f685 	sxtb16	r6, r5
 8015e7c:	fa2f f595 	sxtb16	r5, r5, ror #8
 8015e80:	fb26 0008 	smlad	r0, r6, r8, r0
 8015e84:	fb25 000c 	smlad	r0, r5, ip, r0
 8015e88:	fb26 330e 	smlad	r3, r6, lr, r3
 8015e8c:	fb25 3307 	smlad	r3, r5, r7, r3
 8015e90:	f85b 500a 	ldr.w	r5, [fp, sl]
 8015e94:	fa2f f685 	sxtb16	r6, r5
 8015e98:	fa2f f595 	sxtb16	r5, r5, ror #8
 8015e9c:	fb26 4408 	smlad	r4, r6, r8, r4
 8015ea0:	fb26 110e 	smlad	r1, r6, lr, r1
 8015ea4:	fb25 440c 	smlad	r4, r5, ip, r4
 8015ea8:	fb25 1107 	smlad	r1, r5, r7, r1
 8015eac:	45cb      	cmp	fp, r9
 8015eae:	d1d8      	bne.n	8015e62 <st_sssa8_ch_nn_mat_mult_nt_t+0x2f6>
 8015eb0:	9a01      	ldr	r2, [sp, #4]
 8015eb2:	9d05      	ldr	r5, [sp, #20]
 8015eb4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8015eb8:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8015ebc:	9d06      	ldr	r5, [sp, #24]
 8015ebe:	9201      	str	r2, [sp, #4]
 8015ec0:	f10a 0204 	add.w	r2, sl, #4
 8015ec4:	eb02 0a85 	add.w	sl, r2, r5, lsl #2
 8015ec8:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8015eca:	4552      	cmp	r2, sl
 8015ecc:	dd58      	ble.n	8015f80 <st_sssa8_ch_nn_mat_mult_nt_t+0x414>
 8015ece:	9f01      	ldr	r7, [sp, #4]
 8015ed0:	f999 2000 	ldrsb.w	r2, [r9]
 8015ed4:	f9b7 5002 	ldrsh.w	r5, [r7, #2]
 8015ed8:	f9b7 6000 	ldrsh.w	r6, [r7]
 8015edc:	fb15 3302 	smlabb	r3, r5, r2, r3
 8015ee0:	fb16 0002 	smlabb	r0, r6, r2, r0
 8015ee4:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8015ee6:	f919 2002 	ldrsb.w	r2, [r9, r2]
 8015eea:	fb15 1102 	smlabb	r1, r5, r2, r1
 8015eee:	9d42      	ldr	r5, [sp, #264]	; 0x108
 8015ef0:	fb16 4402 	smlabb	r4, r6, r2, r4
 8015ef4:	f10a 0201 	add.w	r2, sl, #1
 8015ef8:	4295      	cmp	r5, r2
 8015efa:	dd3d      	ble.n	8015f78 <st_sssa8_ch_nn_mat_mult_nt_t+0x40c>
 8015efc:	eb09 0205 	add.w	r2, r9, r5
 8015f00:	f9b7 6004 	ldrsh.w	r6, [r7, #4]
 8015f04:	f9b7 5006 	ldrsh.w	r5, [r7, #6]
 8015f08:	f992 2001 	ldrsb.w	r2, [r2, #1]
 8015f0c:	fb16 4402 	smlabb	r4, r6, r2, r4
 8015f10:	fb15 1102 	smlabb	r1, r5, r2, r1
 8015f14:	f999 2001 	ldrsb.w	r2, [r9, #1]
 8015f18:	fb16 0002 	smlabb	r0, r6, r2, r0
 8015f1c:	9e42      	ldr	r6, [sp, #264]	; 0x108
 8015f1e:	fb15 3302 	smlabb	r3, r5, r2, r3
 8015f22:	f10a 0202 	add.w	r2, sl, #2
 8015f26:	f109 0502 	add.w	r5, r9, #2
 8015f2a:	4296      	cmp	r6, r2
 8015f2c:	dd24      	ble.n	8015f78 <st_sssa8_ch_nn_mat_mult_nt_t+0x40c>
 8015f2e:	57aa      	ldrsb	r2, [r5, r6]
 8015f30:	f9b7 6008 	ldrsh.w	r6, [r7, #8]
 8015f34:	f9b7 500a 	ldrsh.w	r5, [r7, #10]
 8015f38:	fb16 4402 	smlabb	r4, r6, r2, r4
 8015f3c:	fb15 1102 	smlabb	r1, r5, r2, r1
 8015f40:	f999 2002 	ldrsb.w	r2, [r9, #2]
 8015f44:	fb16 0002 	smlabb	r0, r6, r2, r0
 8015f48:	9e42      	ldr	r6, [sp, #264]	; 0x108
 8015f4a:	fb15 3302 	smlabb	r3, r5, r2, r3
 8015f4e:	f10a 0203 	add.w	r2, sl, #3
 8015f52:	f109 0503 	add.w	r5, r9, #3
 8015f56:	4296      	cmp	r6, r2
 8015f58:	dd0e      	ble.n	8015f78 <st_sssa8_ch_nn_mat_mult_nt_t+0x40c>
 8015f5a:	57ad      	ldrsb	r5, [r5, r6]
 8015f5c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8015f60:	f9b7 600e 	ldrsh.w	r6, [r7, #14]
 8015f64:	fb12 4405 	smlabb	r4, r2, r5, r4
 8015f68:	fb16 1105 	smlabb	r1, r6, r5, r1
 8015f6c:	f999 5003 	ldrsb.w	r5, [r9, #3]
 8015f70:	fb12 0005 	smlabb	r0, r2, r5, r0
 8015f74:	fb16 3305 	smlabb	r3, r6, r5, r3
 8015f78:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8015f7a:	eba2 020a 	sub.w	r2, r2, sl
 8015f7e:	4491      	add	r9, r2
 8015f80:	9a08      	ldr	r2, [sp, #32]
 8015f82:	2a00      	cmp	r2, #0
 8015f84:	f040 80dd 	bne.w	8016142 <st_sssa8_ch_nn_mat_mult_nt_t+0x5d6>
 8015f88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015f8a:	0040      	lsls	r0, r0, #1
 8015f8c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8015f8e:	0064      	lsls	r4, r4, #1
 8015f90:	fb50 5002 	smmla	r0, r0, r2, r5
 8015f94:	fb54 5402 	smmla	r4, r4, r2, r5
 8015f98:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015f9a:	4110      	asrs	r0, r2
 8015f9c:	f300 0007 	ssat	r0, #8, r0
 8015fa0:	9d03      	ldr	r5, [sp, #12]
 8015fa2:	4114      	asrs	r4, r2
 8015fa4:	f805 0c01 	strb.w	r0, [r5, #-1]
 8015fa8:	f304 0407 	ssat	r4, #8, r4
 8015fac:	9a02      	ldr	r2, [sp, #8]
 8015fae:	f802 4c01 	strb.w	r4, [r2, #-1]
 8015fb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015fb4:	2a00      	cmp	r2, #0
 8015fb6:	f040 80ac 	bne.w	8016112 <st_sssa8_ch_nn_mat_mult_nt_t+0x5a6>
 8015fba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015fbc:	005b      	lsls	r3, r3, #1
 8015fbe:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015fc0:	0049      	lsls	r1, r1, #1
 8015fc2:	fb53 0302 	smmla	r3, r3, r2, r0
 8015fc6:	fb51 0102 	smmla	r1, r1, r2, r0
 8015fca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015fcc:	4113      	asrs	r3, r2
 8015fce:	f303 0307 	ssat	r3, #8, r3
 8015fd2:	9803      	ldr	r0, [sp, #12]
 8015fd4:	4111      	asrs	r1, r2
 8015fd6:	7003      	strb	r3, [r0, #0]
 8015fd8:	f301 0107 	ssat	r1, #8, r1
 8015fdc:	9b02      	ldr	r3, [sp, #8]
 8015fde:	7019      	strb	r1, [r3, #0]
 8015fe0:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8015fe2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015fe4:	eb09 0b03 	add.w	fp, r9, r3
 8015fe8:	9b03      	ldr	r3, [sp, #12]
 8015fea:	4413      	add	r3, r2
 8015fec:	9303      	str	r3, [sp, #12]
 8015fee:	9b02      	ldr	r3, [sp, #8]
 8015ff0:	4413      	add	r3, r2
 8015ff2:	9302      	str	r3, [sp, #8]
 8015ff4:	9b04      	ldr	r3, [sp, #16]
 8015ff6:	3b01      	subs	r3, #1
 8015ff8:	9304      	str	r3, [sp, #16]
 8015ffa:	f47f ae77 	bne.w	8015cec <st_sssa8_ch_nn_mat_mult_nt_t+0x180>
 8015ffe:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8016000:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016002:	3b01      	subs	r3, #1
 8016004:	4413      	add	r3, r2
 8016006:	9301      	str	r3, [sp, #4]
 8016008:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801600a:	2b00      	cmp	r3, #0
 801600c:	f040 822b 	bne.w	8016466 <st_sssa8_ch_nn_mat_mult_nt_t+0x8fa>
 8016010:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016012:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016014:	4413      	add	r3, r2
 8016016:	9323      	str	r3, [sp, #140]	; 0x8c
 8016018:	9b46      	ldr	r3, [sp, #280]	; 0x118
 801601a:	b11b      	cbz	r3, 8016024 <st_sssa8_ch_nn_mat_mult_nt_t+0x4b8>
 801601c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801601e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8016020:	4413      	add	r3, r2
 8016022:	9345      	str	r3, [sp, #276]	; 0x114
 8016024:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016026:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016028:	3204      	adds	r2, #4
 801602a:	3302      	adds	r3, #2
 801602c:	9221      	str	r2, [sp, #132]	; 0x84
 801602e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8016030:	931b      	str	r3, [sp, #108]	; 0x6c
 8016032:	3208      	adds	r2, #8
 8016034:	921f      	str	r2, [sp, #124]	; 0x7c
 8016036:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016038:	3208      	adds	r2, #8
 801603a:	9220      	str	r2, [sp, #128]	; 0x80
 801603c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801603e:	3208      	adds	r2, #8
 8016040:	9222      	str	r2, [sp, #136]	; 0x88
 8016042:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8016044:	429a      	cmp	r2, r3
 8016046:	f47f adf0 	bne.w	8015c2a <st_sssa8_ch_nn_mat_mult_nt_t+0xbe>
 801604a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801604c:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801604e:	085a      	lsrs	r2, r3, #1
 8016050:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016052:	fb02 3303 	mla	r3, r2, r3, r3
 8016056:	3201      	adds	r2, #1
 8016058:	4419      	add	r1, r3
 801605a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801605c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8016060:	912d      	str	r1, [sp, #180]	; 0xb4
 8016062:	932e      	str	r3, [sp, #184]	; 0xb8
 8016064:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016066:	07db      	lsls	r3, r3, #31
 8016068:	d54f      	bpl.n	801610a <st_sssa8_ch_nn_mat_mult_nt_t+0x59e>
 801606a:	9b40      	ldr	r3, [sp, #256]	; 0x100
 801606c:	2b00      	cmp	r3, #0
 801606e:	dd4c      	ble.n	801610a <st_sssa8_ch_nn_mat_mult_nt_t+0x59e>
 8016070:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016072:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 8016076:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 801607a:	2200      	movs	r2, #0
 801607c:	441c      	add	r4, r3
 801607e:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8016080:	f04f 0901 	mov.w	r9, #1
 8016084:	4611      	mov	r1, r2
 8016086:	eb03 0e84 	add.w	lr, r3, r4, lsl #2
 801608a:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 801608c:	eb03 0584 	add.w	r5, r3, r4, lsl #2
 8016090:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8016092:	f8cd e004 	str.w	lr, [sp, #4]
 8016096:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801609a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801609c:	4498      	add	r8, r3
 801609e:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 80160a0:	e9dd e042 	ldrd	lr, r0, [sp, #264]	; 0x108
 80160a4:	eb03 0848 	add.w	r8, r3, r8, lsl #1
 80160a8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80160aa:	9e01      	ldr	r6, [sp, #4]
 80160ac:	f1be 0f00 	cmp.w	lr, #0
 80160b0:	6837      	ldr	r7, [r6, #0]
 80160b2:	dd0d      	ble.n	80160d0 <st_sssa8_ch_nn_mat_mult_nt_t+0x564>
 80160b4:	9e2d      	ldr	r6, [sp, #180]	; 0xb4
 80160b6:	eb03 0b0e 	add.w	fp, r3, lr
 80160ba:	f106 3cff 	add.w	ip, r6, #4294967295
 80160be:	f913 6b01 	ldrsb.w	r6, [r3], #1
 80160c2:	f91c af01 	ldrsb.w	sl, [ip, #1]!
 80160c6:	1a36      	subs	r6, r6, r0
 80160c8:	455b      	cmp	r3, fp
 80160ca:	fb0a 7706 	mla	r7, sl, r6, r7
 80160ce:	d1f6      	bne.n	80160be <st_sssa8_ch_nn_mat_mult_nt_t+0x552>
 80160d0:	f9b8 c000 	ldrsh.w	ip, [r8]
 80160d4:	f1bc 0f15 	cmp.w	ip, #21
 80160d8:	f340 82f9 	ble.w	80166ce <st_sssa8_ch_nn_mat_mult_nt_t+0xb62>
 80160dc:	f1ac 0a02 	sub.w	sl, ip, #2
 80160e0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80160e4:	682e      	ldr	r6, [r5, #0]
 80160e6:	fa09 fa0a 	lsl.w	sl, r9, sl
 80160ea:	fb57 a606 	smmla	r6, r7, r6, sl
 80160ee:	fa46 fc0c 	asr.w	ip, r6, ip
 80160f2:	6826      	ldr	r6, [r4, #0]
 80160f4:	4466      	add	r6, ip
 80160f6:	f306 0607 	ssat	r6, #8, r6
 80160fa:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 80160fc:	54be      	strb	r6, [r7, r2]
 80160fe:	9e41      	ldr	r6, [sp, #260]	; 0x104
 8016100:	3101      	adds	r1, #1
 8016102:	4432      	add	r2, r6
 8016104:	9e40      	ldr	r6, [sp, #256]	; 0x100
 8016106:	428e      	cmp	r6, r1
 8016108:	d1cf      	bne.n	80160aa <st_sssa8_ch_nn_mat_mult_nt_t+0x53e>
 801610a:	2000      	movs	r0, #0
 801610c:	b035      	add	sp, #212	; 0xd4
 801610e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016112:	3201      	adds	r2, #1
 8016114:	d02e      	beq.n	8016174 <st_sssa8_ch_nn_mat_mult_nt_t+0x608>
 8016116:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016118:	981d      	ldr	r0, [sp, #116]	; 0x74
 801611a:	fb53 0302 	smmla	r3, r3, r2, r0
 801611e:	fb51 0102 	smmla	r1, r1, r2, r0
 8016122:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016124:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016126:	3a01      	subs	r2, #1
 8016128:	4113      	asrs	r3, r2
 801612a:	4403      	add	r3, r0
 801612c:	f303 0307 	ssat	r3, #8, r3
 8016130:	4111      	asrs	r1, r2
 8016132:	9a03      	ldr	r2, [sp, #12]
 8016134:	4401      	add	r1, r0
 8016136:	7013      	strb	r3, [r2, #0]
 8016138:	f301 0207 	ssat	r2, #8, r1
 801613c:	9b02      	ldr	r3, [sp, #8]
 801613e:	701a      	strb	r2, [r3, #0]
 8016140:	e74e      	b.n	8015fe0 <st_sssa8_ch_nn_mat_mult_nt_t+0x474>
 8016142:	3201      	adds	r2, #1
 8016144:	d031      	beq.n	80161aa <st_sssa8_ch_nn_mat_mult_nt_t+0x63e>
 8016146:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8016148:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801614a:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801614c:	fb50 5002 	smmla	r0, r0, r2, r5
 8016150:	fb54 5402 	smmla	r4, r4, r2, r5
 8016154:	4130      	asrs	r0, r6
 8016156:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016158:	4410      	add	r0, r2
 801615a:	f300 0007 	ssat	r0, #8, r0
 801615e:	9d03      	ldr	r5, [sp, #12]
 8016160:	4134      	asrs	r4, r6
 8016162:	f805 0c01 	strb.w	r0, [r5, #-1]
 8016166:	18a2      	adds	r2, r4, r2
 8016168:	f302 0207 	ssat	r2, #8, r2
 801616c:	9802      	ldr	r0, [sp, #8]
 801616e:	f800 2c01 	strb.w	r2, [r0, #-1]
 8016172:	e71e      	b.n	8015fb2 <st_sssa8_ch_nn_mat_mult_nt_t+0x446>
 8016174:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016176:	f1c2 0201 	rsb	r2, r2, #1
 801617a:	4093      	lsls	r3, r2
 801617c:	f303 031f 	ssat	r3, #32, r3
 8016180:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016182:	fb53 f310 	smmulr	r3, r3, r0
 8016186:	fa01 f202 	lsl.w	r2, r1, r2
 801618a:	f302 021f 	ssat	r2, #32, r2
 801618e:	fb52 f210 	smmulr	r2, r2, r0
 8016192:	9910      	ldr	r1, [sp, #64]	; 0x40
 8016194:	440b      	add	r3, r1
 8016196:	f303 0307 	ssat	r3, #8, r3
 801619a:	9803      	ldr	r0, [sp, #12]
 801619c:	440a      	add	r2, r1
 801619e:	7003      	strb	r3, [r0, #0]
 80161a0:	f302 0207 	ssat	r2, #8, r2
 80161a4:	9b02      	ldr	r3, [sp, #8]
 80161a6:	701a      	strb	r2, [r3, #0]
 80161a8:	e71a      	b.n	8015fe0 <st_sssa8_ch_nn_mat_mult_nt_t+0x474>
 80161aa:	9d24      	ldr	r5, [sp, #144]	; 0x90
 80161ac:	fa00 f205 	lsl.w	r2, r0, r5
 80161b0:	f302 021f 	ssat	r2, #32, r2
 80161b4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80161b6:	fb52 f216 	smmulr	r2, r2, r6
 80161ba:	fa04 f005 	lsl.w	r0, r4, r5
 80161be:	f300 001f 	ssat	r0, #32, r0
 80161c2:	fb50 f016 	smmulr	r0, r0, r6
 80161c6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80161c8:	4422      	add	r2, r4
 80161ca:	f302 0207 	ssat	r2, #8, r2
 80161ce:	9d03      	ldr	r5, [sp, #12]
 80161d0:	4420      	add	r0, r4
 80161d2:	f805 2c01 	strb.w	r2, [r5, #-1]
 80161d6:	f300 0007 	ssat	r0, #8, r0
 80161da:	9a02      	ldr	r2, [sp, #8]
 80161dc:	f802 0c01 	strb.w	r0, [r2, #-1]
 80161e0:	e6e7      	b.n	8015fb2 <st_sssa8_ch_nn_mat_mult_nt_t+0x446>
 80161e2:	46d9      	mov	r9, fp
 80161e4:	e670      	b.n	8015ec8 <st_sssa8_ch_nn_mat_mult_nt_t+0x35c>
 80161e6:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80161e8:	f04f 0a00 	mov.w	sl, #0
 80161ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 80161ee:	9301      	str	r3, [sp, #4]
 80161f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80161f2:	4604      	mov	r4, r0
 80161f4:	4619      	mov	r1, r3
 80161f6:	e622      	b.n	8015e3e <st_sssa8_ch_nn_mat_mult_nt_t+0x2d2>
 80161f8:	2301      	movs	r3, #1
 80161fa:	9309      	str	r3, [sp, #36]	; 0x24
 80161fc:	9b46      	ldr	r3, [sp, #280]	; 0x118
 80161fe:	2b00      	cmp	r3, #0
 8016200:	f47f ad40 	bne.w	8015c84 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 8016204:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016206:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8016208:	eb03 0a02 	add.w	sl, r3, r2
 801620c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801620e:	2b00      	cmp	r3, #0
 8016210:	f340 82b1 	ble.w	8016776 <st_sssa8_ch_nn_mat_mult_nt_t+0xc0a>
 8016214:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016216:	4650      	mov	r0, sl
 8016218:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801621a:	18d5      	adds	r5, r2, r3
 801621c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801621e:	6811      	ldr	r1, [r2, #0]
 8016220:	3210      	adds	r2, #16
 8016222:	6804      	ldr	r4, [r0, #0]
 8016224:	3340      	adds	r3, #64	; 0x40
 8016226:	fa2f f681 	sxtb16	r6, r1
 801622a:	3010      	adds	r0, #16
 801622c:	f843 6c40 	str.w	r6, [r3, #-64]
 8016230:	ea4f 2131 	mov.w	r1, r1, ror #8
 8016234:	42aa      	cmp	r2, r5
 8016236:	fa2f f181 	sxtb16	r1, r1
 801623a:	f843 1c3c 	str.w	r1, [r3, #-60]
 801623e:	ea4f 2134 	mov.w	r1, r4, ror #8
 8016242:	fa2f f484 	sxtb16	r4, r4
 8016246:	fa2f f181 	sxtb16	r1, r1
 801624a:	f843 4c38 	str.w	r4, [r3, #-56]
 801624e:	f843 1c34 	str.w	r1, [r3, #-52]
 8016252:	f850 1c0c 	ldr.w	r1, [r0, #-12]
 8016256:	f852 4c0c 	ldr.w	r4, [r2, #-12]
 801625a:	ea4f 2631 	mov.w	r6, r1, ror #8
 801625e:	fa2f f181 	sxtb16	r1, r1
 8016262:	fa2f f686 	sxtb16	r6, r6
 8016266:	f843 1c28 	str.w	r1, [r3, #-40]
 801626a:	f843 6c24 	str.w	r6, [r3, #-36]
 801626e:	ea4f 2634 	mov.w	r6, r4, ror #8
 8016272:	fa2f f484 	sxtb16	r4, r4
 8016276:	f843 4c30 	str.w	r4, [r3, #-48]
 801627a:	fa2f f486 	sxtb16	r4, r6
 801627e:	f843 4c2c 	str.w	r4, [r3, #-44]
 8016282:	f852 4c08 	ldr.w	r4, [r2, #-8]
 8016286:	f850 1c08 	ldr.w	r1, [r0, #-8]
 801628a:	ea4f 2634 	mov.w	r6, r4, ror #8
 801628e:	fa2f f484 	sxtb16	r4, r4
 8016292:	fa2f f686 	sxtb16	r6, r6
 8016296:	f843 4c20 	str.w	r4, [r3, #-32]
 801629a:	ea4f 2431 	mov.w	r4, r1, ror #8
 801629e:	f843 6c1c 	str.w	r6, [r3, #-28]
 80162a2:	fa2f f484 	sxtb16	r4, r4
 80162a6:	fa2f f181 	sxtb16	r1, r1
 80162aa:	f843 4c14 	str.w	r4, [r3, #-20]
 80162ae:	f843 1c18 	str.w	r1, [r3, #-24]
 80162b2:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80162b6:	f850 1c04 	ldr.w	r1, [r0, #-4]
 80162ba:	ea4f 2634 	mov.w	r6, r4, ror #8
 80162be:	fa2f f484 	sxtb16	r4, r4
 80162c2:	fa2f f686 	sxtb16	r6, r6
 80162c6:	f843 4c10 	str.w	r4, [r3, #-16]
 80162ca:	ea4f 2431 	mov.w	r4, r1, ror #8
 80162ce:	f843 6c0c 	str.w	r6, [r3, #-12]
 80162d2:	fa2f f484 	sxtb16	r4, r4
 80162d6:	fa2f f181 	sxtb16	r1, r1
 80162da:	f843 4c04 	str.w	r4, [r3, #-4]
 80162de:	f843 1c08 	str.w	r1, [r3, #-8]
 80162e2:	d19c      	bne.n	801621e <st_sssa8_ch_nn_mat_mult_nt_t+0x6b2>
 80162e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80162e6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80162e8:	9925      	ldr	r1, [sp, #148]	; 0x94
 80162ea:	449a      	add	sl, r3
 80162ec:	469c      	mov	ip, r3
 80162ee:	1857      	adds	r7, r2, r1
 80162f0:	9b42      	ldr	r3, [sp, #264]	; 0x108
 80162f2:	3b03      	subs	r3, #3
 80162f4:	4563      	cmp	r3, ip
 80162f6:	f340 823c 	ble.w	8016772 <st_sssa8_ch_nn_mat_mult_nt_t+0xc06>
 80162fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80162fc:	463a      	mov	r2, r7
 80162fe:	4650      	mov	r0, sl
 8016300:	eba3 030c 	sub.w	r3, r3, ip
 8016304:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8016308:	f108 0e01 	add.w	lr, r8, #1
 801630c:	ea4f 098e 	mov.w	r9, lr, lsl #2
 8016310:	eb05 068e 	add.w	r6, r5, lr, lsl #2
 8016314:	f855 3b04 	ldr.w	r3, [r5], #4
 8016318:	3210      	adds	r2, #16
 801631a:	f850 1b04 	ldr.w	r1, [r0], #4
 801631e:	fa2f f483 	sxtb16	r4, r3
 8016322:	42b5      	cmp	r5, r6
 8016324:	ea4f 2333 	mov.w	r3, r3, ror #8
 8016328:	fa2f f383 	sxtb16	r3, r3
 801632c:	f842 3c0c 	str.w	r3, [r2, #-12]
 8016330:	ea4f 2331 	mov.w	r3, r1, ror #8
 8016334:	fa2f f181 	sxtb16	r1, r1
 8016338:	f842 4c10 	str.w	r4, [r2, #-16]
 801633c:	f842 1c08 	str.w	r1, [r2, #-8]
 8016340:	fa2f f383 	sxtb16	r3, r3
 8016344:	f842 3c04 	str.w	r3, [r2, #-4]
 8016348:	d1e4      	bne.n	8016314 <st_sssa8_ch_nn_mat_mult_nt_t+0x7a8>
 801634a:	f10c 0304 	add.w	r3, ip, #4
 801634e:	44ca      	add	sl, r9
 8016350:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 8016354:	eb03 0c88 	add.w	ip, r3, r8, lsl #2
 8016358:	9b42      	ldr	r3, [sp, #264]	; 0x108
 801635a:	4563      	cmp	r3, ip
 801635c:	f77f ac92 	ble.w	8015c84 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 8016360:	f996 3000 	ldrsb.w	r3, [r6]
 8016364:	803b      	strh	r3, [r7, #0]
 8016366:	f10c 0301 	add.w	r3, ip, #1
 801636a:	f99a 2000 	ldrsb.w	r2, [sl]
 801636e:	807a      	strh	r2, [r7, #2]
 8016370:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8016372:	429a      	cmp	r2, r3
 8016374:	f77f ac86 	ble.w	8015c84 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 8016378:	f996 3001 	ldrsb.w	r3, [r6, #1]
 801637c:	80bb      	strh	r3, [r7, #4]
 801637e:	f10c 0302 	add.w	r3, ip, #2
 8016382:	f99a 2001 	ldrsb.w	r2, [sl, #1]
 8016386:	80fa      	strh	r2, [r7, #6]
 8016388:	9a42      	ldr	r2, [sp, #264]	; 0x108
 801638a:	429a      	cmp	r2, r3
 801638c:	f77f ac7a 	ble.w	8015c84 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 8016390:	f996 3002 	ldrsb.w	r3, [r6, #2]
 8016394:	f10c 0c03 	add.w	ip, ip, #3
 8016398:	813b      	strh	r3, [r7, #8]
 801639a:	4594      	cmp	ip, r2
 801639c:	f99a 3002 	ldrsb.w	r3, [sl, #2]
 80163a0:	817b      	strh	r3, [r7, #10]
 80163a2:	f6bf ac6f 	bge.w	8015c84 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 80163a6:	f996 3003 	ldrsb.w	r3, [r6, #3]
 80163aa:	81bb      	strh	r3, [r7, #12]
 80163ac:	f99a 3003 	ldrsb.w	r3, [sl, #3]
 80163b0:	81fb      	strh	r3, [r7, #14]
 80163b2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	f43f ac69 	beq.w	8015c8c <st_sssa8_ch_nn_mat_mult_nt_t+0x120>
 80163ba:	982f      	ldr	r0, [sp, #188]	; 0xbc
 80163bc:	2800      	cmp	r0, #0
 80163be:	f000 81cc 	beq.w	801675a <st_sssa8_ch_nn_mat_mult_nt_t+0xbee>
 80163c2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80163c4:	2300      	movs	r3, #0
 80163c6:	f102 0110 	add.w	r1, r2, #16
 80163ca:	461a      	mov	r2, r3
 80163cc:	f931 4c10 	ldrsh.w	r4, [r1, #-16]
 80163d0:	3801      	subs	r0, #1
 80163d2:	f101 0110 	add.w	r1, r1, #16
 80163d6:	eba3 0304 	sub.w	r3, r3, r4
 80163da:	f931 4c18 	ldrsh.w	r4, [r1, #-24]
 80163de:	eba2 0204 	sub.w	r2, r2, r4
 80163e2:	f931 4c1e 	ldrsh.w	r4, [r1, #-30]
 80163e6:	eba3 0304 	sub.w	r3, r3, r4
 80163ea:	f931 4c16 	ldrsh.w	r4, [r1, #-22]
 80163ee:	eba2 0204 	sub.w	r2, r2, r4
 80163f2:	f931 4c1c 	ldrsh.w	r4, [r1, #-28]
 80163f6:	eba3 0304 	sub.w	r3, r3, r4
 80163fa:	f931 4c14 	ldrsh.w	r4, [r1, #-20]
 80163fe:	eba2 0204 	sub.w	r2, r2, r4
 8016402:	f931 4c1a 	ldrsh.w	r4, [r1, #-26]
 8016406:	eba3 0304 	sub.w	r3, r3, r4
 801640a:	f931 4c12 	ldrsh.w	r4, [r1, #-18]
 801640e:	eba2 0204 	sub.w	r2, r2, r4
 8016412:	d1db      	bne.n	80163cc <st_sssa8_ch_nn_mat_mult_nt_t+0x860>
 8016414:	9945      	ldr	r1, [sp, #276]	; 0x114
 8016416:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8016418:	4401      	add	r1, r0
 801641a:	9c30      	ldr	r4, [sp, #192]	; 0xc0
 801641c:	b1cc      	cbz	r4, 8016452 <st_sssa8_ch_nn_mat_mult_nt_t+0x8e6>
 801641e:	f9b1 0000 	ldrsh.w	r0, [r1]
 8016422:	2c01      	cmp	r4, #1
 8016424:	eba3 0300 	sub.w	r3, r3, r0
 8016428:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 801642c:	eba2 0200 	sub.w	r2, r2, r0
 8016430:	d00f      	beq.n	8016452 <st_sssa8_ch_nn_mat_mult_nt_t+0x8e6>
 8016432:	f9b1 0004 	ldrsh.w	r0, [r1, #4]
 8016436:	2c02      	cmp	r4, #2
 8016438:	eba3 0300 	sub.w	r3, r3, r0
 801643c:	f9b1 0006 	ldrsh.w	r0, [r1, #6]
 8016440:	eba2 0200 	sub.w	r2, r2, r0
 8016444:	d005      	beq.n	8016452 <st_sssa8_ch_nn_mat_mult_nt_t+0x8e6>
 8016446:	f9b1 0008 	ldrsh.w	r0, [r1, #8]
 801644a:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 801644e:	1a1b      	subs	r3, r3, r0
 8016450:	1a52      	subs	r2, r2, r1
 8016452:	9943      	ldr	r1, [sp, #268]	; 0x10c
 8016454:	fb03 f101 	mul.w	r1, r3, r1
 8016458:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801645a:	fb03 f202 	mul.w	r2, r3, r2
 801645e:	e417      	b.n	8015c90 <st_sssa8_ch_nn_mat_mult_nt_t+0x124>
 8016460:	2301      	movs	r3, #1
 8016462:	9308      	str	r3, [sp, #32]
 8016464:	e400      	b.n	8015c68 <st_sssa8_ch_nn_mat_mult_nt_t+0xfc>
 8016466:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016468:	2b00      	cmp	r3, #0
 801646a:	f340 817c 	ble.w	8016766 <st_sssa8_ch_nn_mat_mult_nt_t+0xbfa>
 801646e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016470:	e9dd 250b 	ldrd	r2, r5, [sp, #44]	; 0x2c
 8016474:	eb0b 0003 	add.w	r0, fp, r3
 8016478:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801647a:	f8db 1000 	ldr.w	r1, [fp]
 801647e:	fa2f f481 	sxtb16	r4, r1
 8016482:	fa2f f191 	sxtb16	r1, r1, ror #8
 8016486:	681e      	ldr	r6, [r3, #0]
 8016488:	fb24 5506 	smlad	r5, r4, r6, r5
 801648c:	685e      	ldr	r6, [r3, #4]
 801648e:	fb21 5606 	smlad	r6, r1, r6, r5
 8016492:	689d      	ldr	r5, [r3, #8]
 8016494:	fb24 2205 	smlad	r2, r4, r5, r2
 8016498:	68dc      	ldr	r4, [r3, #12]
 801649a:	fb21 2104 	smlad	r1, r1, r4, r2
 801649e:	f8db 2004 	ldr.w	r2, [fp, #4]
 80164a2:	fa2f f482 	sxtb16	r4, r2
 80164a6:	fa2f f292 	sxtb16	r2, r2, ror #8
 80164aa:	691d      	ldr	r5, [r3, #16]
 80164ac:	fb24 6505 	smlad	r5, r4, r5, r6
 80164b0:	695e      	ldr	r6, [r3, #20]
 80164b2:	fb22 5606 	smlad	r6, r2, r6, r5
 80164b6:	699d      	ldr	r5, [r3, #24]
 80164b8:	fb24 1105 	smlad	r1, r4, r5, r1
 80164bc:	69dc      	ldr	r4, [r3, #28]
 80164be:	fb22 1104 	smlad	r1, r2, r4, r1
 80164c2:	f8db 2008 	ldr.w	r2, [fp, #8]
 80164c6:	fa2f f482 	sxtb16	r4, r2
 80164ca:	fa2f f292 	sxtb16	r2, r2, ror #8
 80164ce:	6a1d      	ldr	r5, [r3, #32]
 80164d0:	fb24 6505 	smlad	r5, r4, r5, r6
 80164d4:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 80164d6:	fb22 5606 	smlad	r6, r2, r6, r5
 80164da:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80164dc:	fb24 1105 	smlad	r1, r4, r5, r1
 80164e0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80164e2:	fb22 1104 	smlad	r1, r2, r4, r1
 80164e6:	f8db 200c 	ldr.w	r2, [fp, #12]
 80164ea:	3340      	adds	r3, #64	; 0x40
 80164ec:	f853 5c10 	ldr.w	r5, [r3, #-16]
 80164f0:	f10b 0b10 	add.w	fp, fp, #16
 80164f4:	f853 ec0c 	ldr.w	lr, [r3, #-12]
 80164f8:	f853 cc08 	ldr.w	ip, [r3, #-8]
 80164fc:	f853 7c04 	ldr.w	r7, [r3, #-4]
 8016500:	fa2f f482 	sxtb16	r4, r2
 8016504:	fa2f f292 	sxtb16	r2, r2, ror #8
 8016508:	fb24 6505 	smlad	r5, r4, r5, r6
 801650c:	fb22 550e 	smlad	r5, r2, lr, r5
 8016510:	fb24 110c 	smlad	r1, r4, ip, r1
 8016514:	fb22 1207 	smlad	r2, r2, r7, r1
 8016518:	4583      	cmp	fp, r0
 801651a:	d1ae      	bne.n	801647a <st_sssa8_ch_nn_mat_mult_nt_t+0x90e>
 801651c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801651e:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8016522:	e9cd 250b 	strd	r2, r5, [sp, #44]	; 0x2c
 8016526:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8016528:	eb03 0e02 	add.w	lr, r3, r2
 801652c:	9b42      	ldr	r3, [sp, #264]	; 0x108
 801652e:	3b03      	subs	r3, #3
 8016530:	4543      	cmp	r3, r8
 8016532:	f340 8116 	ble.w	8016762 <st_sssa8_ch_nn_mat_mult_nt_t+0xbf6>
 8016536:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016538:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801653a:	eba3 0a08 	sub.w	sl, r3, r8
 801653e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8016540:	4673      	mov	r3, lr
 8016542:	f8cd e008 	str.w	lr, [sp, #8]
 8016546:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
 801654a:	f10a 0901 	add.w	r9, sl, #1
 801654e:	eb00 0c89 	add.w	ip, r0, r9, lsl #2
 8016552:	681c      	ldr	r4, [r3, #0]
 8016554:	3310      	adds	r3, #16
 8016556:	f850 2b04 	ldr.w	r2, [r0], #4
 801655a:	f853 bc0c 	ldr.w	fp, [r3, #-12]
 801655e:	f853 ec08 	ldr.w	lr, [r3, #-8]
 8016562:	f853 7c04 	ldr.w	r7, [r3, #-4]
 8016566:	fa2f f182 	sxtb16	r1, r2
 801656a:	fa2f f292 	sxtb16	r2, r2, ror #8
 801656e:	fb21 6604 	smlad	r6, r1, r4, r6
 8016572:	fb22 660b 	smlad	r6, r2, fp, r6
 8016576:	fb21 550e 	smlad	r5, r1, lr, r5
 801657a:	fb22 5507 	smlad	r5, r2, r7, r5
 801657e:	4560      	cmp	r0, ip
 8016580:	d1e7      	bne.n	8016552 <st_sssa8_ch_nn_mat_mult_nt_t+0x9e6>
 8016582:	f8dd e008 	ldr.w	lr, [sp, #8]
 8016586:	f108 0804 	add.w	r8, r8, #4
 801658a:	950b      	str	r5, [sp, #44]	; 0x2c
 801658c:	eb0e 1e09 	add.w	lr, lr, r9, lsl #4
 8016590:	960c      	str	r6, [sp, #48]	; 0x30
 8016592:	eb08 088a 	add.w	r8, r8, sl, lsl #2
 8016596:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8016598:	4543      	cmp	r3, r8
 801659a:	dd40      	ble.n	801661e <st_sssa8_ch_nn_mat_mult_nt_t+0xab2>
 801659c:	f99c 3000 	ldrsb.w	r3, [ip]
 80165a0:	f8be 2000 	ldrh.w	r2, [lr]
 80165a4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80165a6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80165a8:	fb12 1103 	smlabb	r1, r2, r3, r1
 80165ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80165b0:	fb12 0003 	smlabb	r0, r2, r3, r0
 80165b4:	f108 0301 	add.w	r3, r8, #1
 80165b8:	9a42      	ldr	r2, [sp, #264]	; 0x108
 80165ba:	910c      	str	r1, [sp, #48]	; 0x30
 80165bc:	429a      	cmp	r2, r3
 80165be:	900b      	str	r0, [sp, #44]	; 0x2c
 80165c0:	dd2d      	ble.n	801661e <st_sssa8_ch_nn_mat_mult_nt_t+0xab2>
 80165c2:	f99c 3001 	ldrsb.w	r3, [ip, #1]
 80165c6:	f8be 2004 	ldrh.w	r2, [lr, #4]
 80165ca:	fb12 1103 	smlabb	r1, r2, r3, r1
 80165ce:	f8be 2006 	ldrh.w	r2, [lr, #6]
 80165d2:	fb12 0003 	smlabb	r0, r2, r3, r0
 80165d6:	f108 0302 	add.w	r3, r8, #2
 80165da:	9a42      	ldr	r2, [sp, #264]	; 0x108
 80165dc:	910c      	str	r1, [sp, #48]	; 0x30
 80165de:	429a      	cmp	r2, r3
 80165e0:	900b      	str	r0, [sp, #44]	; 0x2c
 80165e2:	dd1c      	ble.n	801661e <st_sssa8_ch_nn_mat_mult_nt_t+0xab2>
 80165e4:	f99c 3002 	ldrsb.w	r3, [ip, #2]
 80165e8:	f108 0803 	add.w	r8, r8, #3
 80165ec:	f8be 2008 	ldrh.w	r2, [lr, #8]
 80165f0:	fb12 1103 	smlabb	r1, r2, r3, r1
 80165f4:	f8be 200a 	ldrh.w	r2, [lr, #10]
 80165f8:	fb12 0003 	smlabb	r0, r2, r3, r0
 80165fc:	9b42      	ldr	r3, [sp, #264]	; 0x108
 80165fe:	910c      	str	r1, [sp, #48]	; 0x30
 8016600:	4543      	cmp	r3, r8
 8016602:	900b      	str	r0, [sp, #44]	; 0x2c
 8016604:	dd0b      	ble.n	801661e <st_sssa8_ch_nn_mat_mult_nt_t+0xab2>
 8016606:	f99c 3003 	ldrsb.w	r3, [ip, #3]
 801660a:	f8be 200c 	ldrh.w	r2, [lr, #12]
 801660e:	fb12 1203 	smlabb	r2, r2, r3, r1
 8016612:	920c      	str	r2, [sp, #48]	; 0x30
 8016614:	f8be 200e 	ldrh.w	r2, [lr, #14]
 8016618:	fb12 0303 	smlabb	r3, r2, r3, r0
 801661c:	930b      	str	r3, [sp, #44]	; 0x2c
 801661e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016620:	f933 1c02 	ldrsh.w	r1, [r3, #-2]
 8016624:	2915      	cmp	r1, #21
 8016626:	dd3d      	ble.n	80166a4 <st_sssa8_ch_nn_mat_mult_nt_t+0xb38>
 8016628:	1e8a      	subs	r2, r1, #2
 801662a:	2301      	movs	r3, #1
 801662c:	3901      	subs	r1, #1
 801662e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016630:	fa03 f202 	lsl.w	r2, r3, r2
 8016634:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016636:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801663a:	fb50 2303 	smmla	r3, r0, r3, r2
 801663e:	fa43 f101 	asr.w	r1, r3, r1
 8016642:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016644:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8016648:	440b      	add	r3, r1
 801664a:	f303 0307 	ssat	r3, #8, r3
 801664e:	9a01      	ldr	r2, [sp, #4]
 8016650:	7013      	strb	r3, [r2, #0]
 8016652:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016654:	f9b3 1000 	ldrsh.w	r1, [r3]
 8016658:	2915      	cmp	r1, #21
 801665a:	dd13      	ble.n	8016684 <st_sssa8_ch_nn_mat_mult_nt_t+0xb18>
 801665c:	1e8a      	subs	r2, r1, #2
 801665e:	2301      	movs	r3, #1
 8016660:	3901      	subs	r1, #1
 8016662:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016664:	fa03 f202 	lsl.w	r2, r3, r2
 8016668:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801666a:	681b      	ldr	r3, [r3, #0]
 801666c:	fb50 2303 	smmla	r3, r0, r3, r2
 8016670:	fa43 f101 	asr.w	r1, r3, r1
 8016674:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016676:	681b      	ldr	r3, [r3, #0]
 8016678:	440b      	add	r3, r1
 801667a:	f303 0307 	ssat	r3, #8, r3
 801667e:	9a01      	ldr	r2, [sp, #4]
 8016680:	7053      	strb	r3, [r2, #1]
 8016682:	e4c5      	b.n	8016010 <st_sssa8_ch_nn_mat_mult_nt_t+0x4a4>
 8016684:	2900      	cmp	r1, #0
 8016686:	dd56      	ble.n	8016736 <st_sssa8_ch_nn_mat_mult_nt_t+0xbca>
 8016688:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801668a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801668c:	0058      	lsls	r0, r3, #1
 801668e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016690:	6812      	ldr	r2, [r2, #0]
 8016692:	681b      	ldr	r3, [r3, #0]
 8016694:	fb50 2303 	smmla	r3, r0, r3, r2
 8016698:	410b      	asrs	r3, r1
 801669a:	f303 0307 	ssat	r3, #8, r3
 801669e:	9a01      	ldr	r2, [sp, #4]
 80166a0:	7053      	strb	r3, [r2, #1]
 80166a2:	e4b5      	b.n	8016010 <st_sssa8_ch_nn_mat_mult_nt_t+0x4a4>
 80166a4:	2900      	cmp	r1, #0
 80166a6:	dd32      	ble.n	801670e <st_sssa8_ch_nn_mat_mult_nt_t+0xba2>
 80166a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80166aa:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80166ac:	0058      	lsls	r0, r3, #1
 80166ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80166b0:	f852 2c04 	ldr.w	r2, [r2, #-4]
 80166b4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80166b8:	fb50 2303 	smmla	r3, r0, r3, r2
 80166bc:	410b      	asrs	r3, r1
 80166be:	f303 0307 	ssat	r3, #8, r3
 80166c2:	9a01      	ldr	r2, [sp, #4]
 80166c4:	7013      	strb	r3, [r2, #0]
 80166c6:	e7c4      	b.n	8016652 <st_sssa8_ch_nn_mat_mult_nt_t+0xae6>
 80166c8:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 80166cc:	e49c      	b.n	8016008 <st_sssa8_ch_nn_mat_mult_nt_t+0x49c>
 80166ce:	f1bc 0f00 	cmp.w	ip, #0
 80166d2:	dd0c      	ble.n	80166ee <st_sssa8_ch_nn_mat_mult_nt_t+0xb82>
 80166d4:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 80166d8:	682e      	ldr	r6, [r5, #0]
 80166da:	6827      	ldr	r7, [r4, #0]
 80166dc:	fb5a 7706 	smmla	r7, sl, r6, r7
 80166e0:	fa47 f60c 	asr.w	r6, r7, ip
 80166e4:	f306 0607 	ssat	r6, #8, r6
 80166e8:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 80166ea:	54be      	strb	r6, [r7, r2]
 80166ec:	e507      	b.n	80160fe <st_sssa8_ch_nn_mat_mult_nt_t+0x592>
 80166ee:	f1cc 0c01 	rsb	ip, ip, #1
 80166f2:	fa07 f70c 	lsl.w	r7, r7, ip
 80166f6:	f307 071f 	ssat	r7, #32, r7
 80166fa:	682e      	ldr	r6, [r5, #0]
 80166fc:	fb57 f716 	smmulr	r7, r7, r6
 8016700:	6826      	ldr	r6, [r4, #0]
 8016702:	443e      	add	r6, r7
 8016704:	f306 0607 	ssat	r6, #8, r6
 8016708:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801670a:	54be      	strb	r6, [r7, r2]
 801670c:	e4f7      	b.n	80160fe <st_sssa8_ch_nn_mat_mult_nt_t+0x592>
 801670e:	f1c1 0101 	rsb	r1, r1, #1
 8016712:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016714:	408a      	lsls	r2, r1
 8016716:	f302 021f 	ssat	r2, #32, r2
 801671a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801671c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8016720:	fb52 f213 	smmulr	r2, r2, r3
 8016724:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016726:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801672a:	4413      	add	r3, r2
 801672c:	f303 0307 	ssat	r3, #8, r3
 8016730:	9a01      	ldr	r2, [sp, #4]
 8016732:	7013      	strb	r3, [r2, #0]
 8016734:	e78d      	b.n	8016652 <st_sssa8_ch_nn_mat_mult_nt_t+0xae6>
 8016736:	f1c1 0101 	rsb	r1, r1, #1
 801673a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801673c:	408a      	lsls	r2, r1
 801673e:	f302 021f 	ssat	r2, #32, r2
 8016742:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016744:	681b      	ldr	r3, [r3, #0]
 8016746:	fb52 f213 	smmulr	r2, r2, r3
 801674a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801674c:	681b      	ldr	r3, [r3, #0]
 801674e:	4413      	add	r3, r2
 8016750:	f303 0307 	ssat	r3, #8, r3
 8016754:	9a01      	ldr	r2, [sp, #4]
 8016756:	7053      	strb	r3, [r2, #1]
 8016758:	e45a      	b.n	8016010 <st_sssa8_ch_nn_mat_mult_nt_t+0x4a4>
 801675a:	4602      	mov	r2, r0
 801675c:	9945      	ldr	r1, [sp, #276]	; 0x114
 801675e:	4603      	mov	r3, r0
 8016760:	e65b      	b.n	801641a <st_sssa8_ch_nn_mat_mult_nt_t+0x8ae>
 8016762:	4684      	mov	ip, r0
 8016764:	e717      	b.n	8016596 <st_sssa8_ch_nn_mat_mult_nt_t+0xa2a>
 8016766:	4658      	mov	r0, fp
 8016768:	f8dd e114 	ldr.w	lr, [sp, #276]	; 0x114
 801676c:	f04f 0800 	mov.w	r8, #0
 8016770:	e6dc      	b.n	801652c <st_sssa8_ch_nn_mat_mult_nt_t+0x9c0>
 8016772:	462e      	mov	r6, r5
 8016774:	e5f0      	b.n	8016358 <st_sssa8_ch_nn_mat_mult_nt_t+0x7ec>
 8016776:	9f45      	ldr	r7, [sp, #276]	; 0x114
 8016778:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 801677a:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
 801677e:	e5b7      	b.n	80162f0 <st_sssa8_ch_nn_mat_mult_nt_t+0x784>

08016780 <st_int8_fill>:
 8016780:	078b      	lsls	r3, r1, #30
 8016782:	468c      	mov	ip, r1
 8016784:	d00a      	beq.n	801679c <st_int8_fill+0x1c>
 8016786:	b912      	cbnz	r2, 801678e <st_int8_fill+0xe>
 8016788:	e045      	b.n	8016816 <st_int8_fill+0x96>
 801678a:	2a00      	cmp	r2, #0
 801678c:	d044      	beq.n	8016818 <st_int8_fill+0x98>
 801678e:	f80c 0b01 	strb.w	r0, [ip], #1
 8016792:	f01c 0f03 	tst.w	ip, #3
 8016796:	f102 32ff 	add.w	r2, r2, #4294967295
 801679a:	d1f6      	bne.n	801678a <st_int8_fill+0xa>
 801679c:	b2c3      	uxtb	r3, r0
 801679e:	0911      	lsrs	r1, r2, #4
 80167a0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80167a4:	b510      	push	{r4, lr}
 80167a6:	ea4f 2400 	mov.w	r4, r0, lsl #8
 80167aa:	b2a4      	uxth	r4, r4
 80167ac:	ea44 0403 	orr.w	r4, r4, r3
 80167b0:	ea4f 4300 	mov.w	r3, r0, lsl #16
 80167b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80167b8:	ea44 0403 	orr.w	r4, r4, r3
 80167bc:	d043      	beq.n	8016846 <st_int8_fill+0xc6>
 80167be:	1e4b      	subs	r3, r1, #1
 80167c0:	2b04      	cmp	r3, #4
 80167c2:	d92a      	bls.n	801681a <st_int8_fill+0x9a>
 80167c4:	f01c 0f07 	tst.w	ip, #7
 80167c8:	d127      	bne.n	801681a <st_int8_fill+0x9a>
 80167ca:	f10c 0310 	add.w	r3, ip, #16
 80167ce:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 80167d2:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 80167d6:	e943 4404 	strd	r4, r4, [r3, #-16]
 80167da:	e943 4402 	strd	r4, r4, [r3, #-8]
 80167de:	3310      	adds	r3, #16
 80167e0:	428b      	cmp	r3, r1
 80167e2:	d1f8      	bne.n	80167d6 <st_int8_fill+0x56>
 80167e4:	f3c2 0381 	ubfx	r3, r2, #2, #2
 80167e8:	44f4      	add	ip, lr
 80167ea:	f002 0203 	and.w	r2, r2, #3
 80167ee:	b15b      	cbz	r3, 8016808 <st_int8_fill+0x88>
 80167f0:	1e59      	subs	r1, r3, #1
 80167f2:	f8cc 4000 	str.w	r4, [ip]
 80167f6:	d005      	beq.n	8016804 <st_int8_fill+0x84>
 80167f8:	2901      	cmp	r1, #1
 80167fa:	f8cc 4004 	str.w	r4, [ip, #4]
 80167fe:	bf18      	it	ne
 8016800:	f8cc 4008 	strne.w	r4, [ip, #8]
 8016804:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
 8016808:	b1e2      	cbz	r2, 8016844 <st_int8_fill+0xc4>
 801680a:	4601      	mov	r1, r0
 801680c:	4660      	mov	r0, ip
 801680e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016812:	f001 b9eb 	b.w	8017bec <memset>
 8016816:	4770      	bx	lr
 8016818:	4770      	bx	lr
 801681a:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 801681e:	4663      	mov	r3, ip
 8016820:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
 8016824:	601c      	str	r4, [r3, #0]
 8016826:	3310      	adds	r3, #16
 8016828:	f843 4c0c 	str.w	r4, [r3, #-12]
 801682c:	f843 4c08 	str.w	r4, [r3, #-8]
 8016830:	f843 4c04 	str.w	r4, [r3, #-4]
 8016834:	4299      	cmp	r1, r3
 8016836:	d1f5      	bne.n	8016824 <st_int8_fill+0xa4>
 8016838:	f3c2 0381 	ubfx	r3, r2, #2, #2
 801683c:	44f4      	add	ip, lr
 801683e:	f002 0203 	and.w	r2, r2, #3
 8016842:	e7d4      	b.n	80167ee <st_int8_fill+0x6e>
 8016844:	bd10      	pop	{r4, pc}
 8016846:	0893      	lsrs	r3, r2, #2
 8016848:	f002 0203 	and.w	r2, r2, #3
 801684c:	e7cf      	b.n	80167ee <st_int8_fill+0x6e>
 801684e:	bf00      	nop

08016850 <st_int8_copy>:
 8016850:	078b      	lsls	r3, r1, #30
 8016852:	d00a      	beq.n	801686a <st_int8_copy+0x1a>
 8016854:	b912      	cbnz	r2, 801685c <st_int8_copy+0xc>
 8016856:	e04f      	b.n	80168f8 <st_int8_copy+0xa8>
 8016858:	2a00      	cmp	r2, #0
 801685a:	d04e      	beq.n	80168fa <st_int8_copy+0xaa>
 801685c:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8016860:	3a01      	subs	r2, #1
 8016862:	f801 3b01 	strb.w	r3, [r1], #1
 8016866:	078b      	lsls	r3, r1, #30
 8016868:	d1f6      	bne.n	8016858 <st_int8_copy+0x8>
 801686a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801686e:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8016872:	d063      	beq.n	801693c <st_int8_copy+0xec>
 8016874:	ea41 0300 	orr.w	r3, r1, r0
 8016878:	075b      	lsls	r3, r3, #29
 801687a:	d13f      	bne.n	80168fc <st_int8_copy+0xac>
 801687c:	f10e 33ff 	add.w	r3, lr, #4294967295
 8016880:	2b01      	cmp	r3, #1
 8016882:	d93b      	bls.n	80168fc <st_int8_copy+0xac>
 8016884:	f100 0310 	add.w	r3, r0, #16
 8016888:	ea4f 140e 	mov.w	r4, lr, lsl #4
 801688c:	f101 0c10 	add.w	ip, r1, #16
 8016890:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8016894:	3310      	adds	r3, #16
 8016896:	f10c 0c10 	add.w	ip, ip, #16
 801689a:	ed13 6b08 	vldr	d6, [r3, #-32]	; 0xffffffe0
 801689e:	ed13 7b06 	vldr	d7, [r3, #-24]	; 0xffffffe8
 80168a2:	4573      	cmp	r3, lr
 80168a4:	ed0c 6b08 	vstr	d6, [ip, #-32]	; 0xffffffe0
 80168a8:	ed0c 7b06 	vstr	d7, [ip, #-24]	; 0xffffffe8
 80168ac:	d1f2      	bne.n	8016894 <st_int8_copy+0x44>
 80168ae:	f3c2 0381 	ubfx	r3, r2, #2, #2
 80168b2:	4420      	add	r0, r4
 80168b4:	4421      	add	r1, r4
 80168b6:	f002 0203 	and.w	r2, r2, #3
 80168ba:	b16b      	cbz	r3, 80168d8 <st_int8_copy+0x88>
 80168bc:	6804      	ldr	r4, [r0, #0]
 80168be:	600c      	str	r4, [r1, #0]
 80168c0:	1e5c      	subs	r4, r3, #1
 80168c2:	d005      	beq.n	80168d0 <st_int8_copy+0x80>
 80168c4:	6845      	ldr	r5, [r0, #4]
 80168c6:	2c01      	cmp	r4, #1
 80168c8:	604d      	str	r5, [r1, #4]
 80168ca:	d001      	beq.n	80168d0 <st_int8_copy+0x80>
 80168cc:	6884      	ldr	r4, [r0, #8]
 80168ce:	608c      	str	r4, [r1, #8]
 80168d0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80168d4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80168d8:	b162      	cbz	r2, 80168f4 <st_int8_copy+0xa4>
 80168da:	f990 3000 	ldrsb.w	r3, [r0]
 80168de:	3a01      	subs	r2, #1
 80168e0:	700b      	strb	r3, [r1, #0]
 80168e2:	d007      	beq.n	80168f4 <st_int8_copy+0xa4>
 80168e4:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80168e8:	2a01      	cmp	r2, #1
 80168ea:	704b      	strb	r3, [r1, #1]
 80168ec:	d002      	beq.n	80168f4 <st_int8_copy+0xa4>
 80168ee:	f990 3002 	ldrsb.w	r3, [r0, #2]
 80168f2:	708b      	strb	r3, [r1, #2]
 80168f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168f8:	4770      	bx	lr
 80168fa:	4770      	bx	lr
 80168fc:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8016900:	4684      	mov	ip, r0
 8016902:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8016906:	460b      	mov	r3, r1
 8016908:	f8dc 8004 	ldr.w	r8, [ip, #4]
 801690c:	3310      	adds	r3, #16
 801690e:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8016912:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8016916:	f85c 6b10 	ldr.w	r6, [ip], #16
 801691a:	f843 8c0c 	str.w	r8, [r3, #-12]
 801691e:	f843 7c08 	str.w	r7, [r3, #-8]
 8016922:	f843 6c10 	str.w	r6, [r3, #-16]
 8016926:	f843 5c04 	str.w	r5, [r3, #-4]
 801692a:	459e      	cmp	lr, r3
 801692c:	d1ec      	bne.n	8016908 <st_int8_copy+0xb8>
 801692e:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8016932:	4420      	add	r0, r4
 8016934:	4421      	add	r1, r4
 8016936:	f002 0203 	and.w	r2, r2, #3
 801693a:	e7be      	b.n	80168ba <st_int8_copy+0x6a>
 801693c:	0893      	lsrs	r3, r2, #2
 801693e:	f002 0203 	and.w	r2, r2, #3
 8016942:	e7ba      	b.n	80168ba <st_int8_copy+0x6a>

08016944 <st_sssa8_ch_nn_mat_mult_kernel_opt>:
 8016944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016948:	b09d      	sub	sp, #116	; 0x74
 801694a:	4683      	mov	fp, r0
 801694c:	f8bd 4098 	ldrh.w	r4, [sp, #152]	; 0x98
 8016950:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8016952:	f8bd 009c 	ldrh.w	r0, [sp, #156]	; 0x9c
 8016956:	441d      	add	r5, r3
 8016958:	9417      	str	r4, [sp, #92]	; 0x5c
 801695a:	0864      	lsrs	r4, r4, #1
 801695c:	9318      	str	r3, [sp, #96]	; 0x60
 801695e:	910c      	str	r1, [sp, #48]	; 0x30
 8016960:	9216      	str	r2, [sp, #88]	; 0x58
 8016962:	9007      	str	r0, [sp, #28]
 8016964:	9515      	str	r5, [sp, #84]	; 0x54
 8016966:	9419      	str	r4, [sp, #100]	; 0x64
 8016968:	f000 81ce 	beq.w	8016d08 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3c4>
 801696c:	eb01 0640 	add.w	r6, r1, r0, lsl #1
 8016970:	4617      	mov	r7, r2
 8016972:	1e62      	subs	r2, r4, #1
 8016974:	460c      	mov	r4, r1
 8016976:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8016978:	f1a0 0310 	sub.w	r3, r0, #16
 801697c:	b292      	uxth	r2, r2
 801697e:	46d9      	mov	r9, fp
 8016980:	3108      	adds	r1, #8
 8016982:	091b      	lsrs	r3, r3, #4
 8016984:	960f      	str	r6, [sp, #60]	; 0x3c
 8016986:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801698a:	3301      	adds	r3, #1
 801698c:	9708      	str	r7, [sp, #32]
 801698e:	910e      	str	r1, [sp, #56]	; 0x38
 8016990:	4601      	mov	r1, r0
 8016992:	3803      	subs	r0, #3
 8016994:	900d      	str	r0, [sp, #52]	; 0x34
 8016996:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8016998:	3004      	adds	r0, #4
 801699a:	9002      	str	r0, [sp, #8]
 801699c:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801699e:	3004      	adds	r0, #4
 80169a0:	9005      	str	r0, [sp, #20]
 80169a2:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80169a4:	3004      	adds	r0, #4
 80169a6:	9003      	str	r0, [sp, #12]
 80169a8:	982b      	ldr	r0, [sp, #172]	; 0xac
 80169aa:	3001      	adds	r0, #1
 80169ac:	9004      	str	r0, [sp, #16]
 80169ae:	1c68      	adds	r0, r5, #1
 80169b0:	9006      	str	r0, [sp, #24]
 80169b2:	eb04 1043 	add.w	r0, r4, r3, lsl #5
 80169b6:	9013      	str	r0, [sp, #76]	; 0x4c
 80169b8:	0198      	lsls	r0, r3, #6
 80169ba:	9010      	str	r0, [sp, #64]	; 0x40
 80169bc:	0118      	lsls	r0, r3, #4
 80169be:	eb06 1343 	add.w	r3, r6, r3, lsl #5
 80169c2:	9012      	str	r0, [sp, #72]	; 0x48
 80169c4:	9311      	str	r3, [sp, #68]	; 0x44
 80169c6:	1f0b      	subs	r3, r1, #4
 80169c8:	9314      	str	r3, [sp, #80]	; 0x50
 80169ca:	9908      	ldr	r1, [sp, #32]
 80169cc:	9c07      	ldr	r4, [sp, #28]
 80169ce:	680b      	ldr	r3, [r1, #0]
 80169d0:	3108      	adds	r1, #8
 80169d2:	2c0f      	cmp	r4, #15
 80169d4:	931b      	str	r3, [sp, #108]	; 0x6c
 80169d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80169d8:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80169da:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80169de:	9108      	str	r1, [sp, #32]
 80169e0:	921b      	str	r2, [sp, #108]	; 0x6c
 80169e2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80169e4:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80169e6:	f340 8282 	ble.w	8016eee <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5aa>
 80169ea:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80169ec:	464d      	mov	r5, r9
 80169ee:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80169f0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80169f2:	f8d4 e000 	ldr.w	lr, [r4]
 80169f6:	f8d7 a000 	ldr.w	sl, [r7]
 80169fa:	f8d5 c000 	ldr.w	ip, [r5]
 80169fe:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8016a02:	fb2c 330e 	smlad	r3, ip, lr, r3
 8016a06:	fb2c 000a 	smlad	r0, ip, sl, r0
 8016a0a:	fb28 2e0e 	smlad	lr, r8, lr, r2
 8016a0e:	fb28 110a 	smlad	r1, r8, sl, r1
 8016a12:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8016a16:	f8d7 8004 	ldr.w	r8, [r7, #4]
 8016a1a:	68aa      	ldr	r2, [r5, #8]
 8016a1c:	f8d5 b00c 	ldr.w	fp, [r5, #12]
 8016a20:	fb22 330c 	smlad	r3, r2, ip, r3
 8016a24:	fb22 0008 	smlad	r0, r2, r8, r0
 8016a28:	fb2b ee0c 	smlad	lr, fp, ip, lr
 8016a2c:	fb2b 1808 	smlad	r8, fp, r8, r1
 8016a30:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8016a34:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8016a38:	692a      	ldr	r2, [r5, #16]
 8016a3a:	f8d5 a014 	ldr.w	sl, [r5, #20]
 8016a3e:	fb22 330c 	smlad	r3, r2, ip, r3
 8016a42:	fb22 000b 	smlad	r0, r2, fp, r0
 8016a46:	fb2a ee0c 	smlad	lr, sl, ip, lr
 8016a4a:	fb2a 8b0b 	smlad	fp, sl, fp, r8
 8016a4e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8016a52:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8016a56:	f8d5 8018 	ldr.w	r8, [r5, #24]
 8016a5a:	69e9      	ldr	r1, [r5, #28]
 8016a5c:	fb28 330c 	smlad	r3, r8, ip, r3
 8016a60:	fb28 000a 	smlad	r0, r8, sl, r0
 8016a64:	fb21 ec0c 	smlad	ip, r1, ip, lr
 8016a68:	fb21 ba0a 	smlad	sl, r1, sl, fp
 8016a6c:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8016a70:	6939      	ldr	r1, [r7, #16]
 8016a72:	f8d5 8020 	ldr.w	r8, [r5, #32]
 8016a76:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8016a78:	fb28 330e 	smlad	r3, r8, lr, r3
 8016a7c:	fb28 0001 	smlad	r0, r8, r1, r0
 8016a80:	fb22 cc0e 	smlad	ip, r2, lr, ip
 8016a84:	fb22 a101 	smlad	r1, r2, r1, sl
 8016a88:	f8d4 e014 	ldr.w	lr, [r4, #20]
 8016a8c:	f8d7 a014 	ldr.w	sl, [r7, #20]
 8016a90:	f8d5 8028 	ldr.w	r8, [r5, #40]	; 0x28
 8016a94:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8016a96:	fb28 330e 	smlad	r3, r8, lr, r3
 8016a9a:	fb28 000a 	smlad	r0, r8, sl, r0
 8016a9e:	fb22 cc0e 	smlad	ip, r2, lr, ip
 8016aa2:	fb22 120a 	smlad	r2, r2, sl, r1
 8016aa6:	f8d4 e018 	ldr.w	lr, [r4, #24]
 8016aaa:	f8d7 b018 	ldr.w	fp, [r7, #24]
 8016aae:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8016ab2:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8016ab4:	fb28 330e 	smlad	r3, r8, lr, r3
 8016ab8:	fb28 080b 	smlad	r8, r8, fp, r0
 8016abc:	fb21 ce0e 	smlad	lr, r1, lr, ip
 8016ac0:	fb21 210b 	smlad	r1, r1, fp, r2
 8016ac4:	69e2      	ldr	r2, [r4, #28]
 8016ac6:	3720      	adds	r7, #32
 8016ac8:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8016aca:	3420      	adds	r4, #32
 8016acc:	f8d5 c03c 	ldr.w	ip, [r5, #60]	; 0x3c
 8016ad0:	3540      	adds	r5, #64	; 0x40
 8016ad2:	f857 bc04 	ldr.w	fp, [r7, #-4]
 8016ad6:	fb20 3302 	smlad	r3, r0, r2, r3
 8016ada:	fb20 800b 	smlad	r0, r0, fp, r8
 8016ade:	fb2c e202 	smlad	r2, ip, r2, lr
 8016ae2:	fb2c 110b 	smlad	r1, ip, fp, r1
 8016ae6:	42a6      	cmp	r6, r4
 8016ae8:	d183      	bne.n	80169f2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0xae>
 8016aea:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8016aec:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 8016af0:	44a9      	add	r9, r5
 8016af2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8016af4:	9501      	str	r5, [sp, #4]
 8016af6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8016af8:	45ab      	cmp	fp, r5
 8016afa:	f280 8201 	bge.w	8016f00 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5bc>
 8016afe:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8016b00:	f8dd c004 	ldr.w	ip, [sp, #4]
 8016b04:	eba5 050b 	sub.w	r5, r5, fp
 8016b08:	08ad      	lsrs	r5, r5, #2
 8016b0a:	462e      	mov	r6, r5
 8016b0c:	950b      	str	r5, [sp, #44]	; 0x2c
 8016b0e:	464d      	mov	r5, r9
 8016b10:	3601      	adds	r6, #1
 8016b12:	00f7      	lsls	r7, r6, #3
 8016b14:	960a      	str	r6, [sp, #40]	; 0x28
 8016b16:	eb04 08c6 	add.w	r8, r4, r6, lsl #3
 8016b1a:	9709      	str	r7, [sp, #36]	; 0x24
 8016b1c:	f8d4 e000 	ldr.w	lr, [r4]
 8016b20:	f8dc 7000 	ldr.w	r7, [ip]
 8016b24:	f8d5 a000 	ldr.w	sl, [r5]
 8016b28:	686e      	ldr	r6, [r5, #4]
 8016b2a:	fb2a 330e 	smlad	r3, sl, lr, r3
 8016b2e:	fb2a 0007 	smlad	r0, sl, r7, r0
 8016b32:	fb26 220e 	smlad	r2, r6, lr, r2
 8016b36:	fb26 1107 	smlad	r1, r6, r7, r1
 8016b3a:	6867      	ldr	r7, [r4, #4]
 8016b3c:	f10c 0c08 	add.w	ip, ip, #8
 8016b40:	68ae      	ldr	r6, [r5, #8]
 8016b42:	3408      	adds	r4, #8
 8016b44:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 8016b48:	3510      	adds	r5, #16
 8016b4a:	f85c ac04 	ldr.w	sl, [ip, #-4]
 8016b4e:	fb26 3307 	smlad	r3, r6, r7, r3
 8016b52:	fb26 000a 	smlad	r0, r6, sl, r0
 8016b56:	fb2e 2207 	smlad	r2, lr, r7, r2
 8016b5a:	fb2e 110a 	smlad	r1, lr, sl, r1
 8016b5e:	4544      	cmp	r4, r8
 8016b60:	d1dc      	bne.n	8016b1c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1d8>
 8016b62:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016b64:	f10b 0b04 	add.w	fp, fp, #4
 8016b68:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8016b6a:	eb09 1904 	add.w	r9, r9, r4, lsl #4
 8016b6e:	9c01      	ldr	r4, [sp, #4]
 8016b70:	442c      	add	r4, r5
 8016b72:	9401      	str	r4, [sp, #4]
 8016b74:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8016b76:	eb0b 0b84 	add.w	fp, fp, r4, lsl #2
 8016b7a:	9f07      	ldr	r7, [sp, #28]
 8016b7c:	455f      	cmp	r7, fp
 8016b7e:	dd54      	ble.n	8016c2a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2e6>
 8016b80:	f9b8 5000 	ldrsh.w	r5, [r8]
 8016b84:	f9b9 4002 	ldrsh.w	r4, [r9, #2]
 8016b88:	f9b9 6000 	ldrsh.w	r6, [r9]
 8016b8c:	fb05 2204 	mla	r2, r5, r4, r2
 8016b90:	fb06 3305 	mla	r3, r6, r5, r3
 8016b94:	9d01      	ldr	r5, [sp, #4]
 8016b96:	f9b5 5000 	ldrsh.w	r5, [r5]
 8016b9a:	fb05 1104 	mla	r1, r5, r4, r1
 8016b9e:	f10b 0401 	add.w	r4, fp, #1
 8016ba2:	fb06 0005 	mla	r0, r6, r5, r0
 8016ba6:	42a7      	cmp	r7, r4
 8016ba8:	dd3a      	ble.n	8016c20 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2dc>
 8016baa:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 8016bae:	f9b9 4006 	ldrsh.w	r4, [r9, #6]
 8016bb2:	f9b9 6004 	ldrsh.w	r6, [r9, #4]
 8016bb6:	fb05 2204 	mla	r2, r5, r4, r2
 8016bba:	fb06 3305 	mla	r3, r6, r5, r3
 8016bbe:	9d01      	ldr	r5, [sp, #4]
 8016bc0:	f9b5 5002 	ldrsh.w	r5, [r5, #2]
 8016bc4:	fb05 1104 	mla	r1, r5, r4, r1
 8016bc8:	f10b 0402 	add.w	r4, fp, #2
 8016bcc:	fb06 0005 	mla	r0, r6, r5, r0
 8016bd0:	42a7      	cmp	r7, r4
 8016bd2:	dd25      	ble.n	8016c20 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2dc>
 8016bd4:	f9b8 5004 	ldrsh.w	r5, [r8, #4]
 8016bd8:	f9b9 400a 	ldrsh.w	r4, [r9, #10]
 8016bdc:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 8016be0:	fb05 2204 	mla	r2, r5, r4, r2
 8016be4:	fb06 3305 	mla	r3, r6, r5, r3
 8016be8:	9d01      	ldr	r5, [sp, #4]
 8016bea:	f9b5 5004 	ldrsh.w	r5, [r5, #4]
 8016bee:	fb05 1104 	mla	r1, r5, r4, r1
 8016bf2:	f10b 0403 	add.w	r4, fp, #3
 8016bf6:	fb06 0005 	mla	r0, r6, r5, r0
 8016bfa:	42a7      	cmp	r7, r4
 8016bfc:	dd10      	ble.n	8016c20 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2dc>
 8016bfe:	9c01      	ldr	r4, [sp, #4]
 8016c00:	f9b8 5006 	ldrsh.w	r5, [r8, #6]
 8016c04:	f9b4 6006 	ldrsh.w	r6, [r4, #6]
 8016c08:	f9b9 400c 	ldrsh.w	r4, [r9, #12]
 8016c0c:	fb04 3305 	mla	r3, r4, r5, r3
 8016c10:	fb04 0006 	mla	r0, r4, r6, r0
 8016c14:	f9b9 400e 	ldrsh.w	r4, [r9, #14]
 8016c18:	fb05 2204 	mla	r2, r5, r4, r2
 8016c1c:	fb06 1104 	mla	r1, r6, r4, r1
 8016c20:	9c07      	ldr	r4, [sp, #28]
 8016c22:	eba4 0b0b 	sub.w	fp, r4, fp
 8016c26:	eb09 098b 	add.w	r9, r9, fp, lsl #2
 8016c2a:	9c02      	ldr	r4, [sp, #8]
 8016c2c:	f934 4c04 	ldrsh.w	r4, [r4, #-4]
 8016c30:	2c15      	cmp	r4, #21
 8016c32:	f340 80e5 	ble.w	8016e00 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4bc>
 8016c36:	1ea6      	subs	r6, r4, #2
 8016c38:	2501      	movs	r5, #1
 8016c3a:	3c01      	subs	r4, #1
 8016c3c:	fa05 f606 	lsl.w	r6, r5, r6
 8016c40:	9d05      	ldr	r5, [sp, #20]
 8016c42:	f855 5c04 	ldr.w	r5, [r5, #-4]
 8016c46:	fb53 6305 	smmla	r3, r3, r5, r6
 8016c4a:	fb50 6005 	smmla	r0, r0, r5, r6
 8016c4e:	9d03      	ldr	r5, [sp, #12]
 8016c50:	4123      	asrs	r3, r4
 8016c52:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8016c56:	443b      	add	r3, r7
 8016c58:	f303 0307 	ssat	r3, #8, r3
 8016c5c:	4120      	asrs	r0, r4
 8016c5e:	9c04      	ldr	r4, [sp, #16]
 8016c60:	4438      	add	r0, r7
 8016c62:	f804 3c01 	strb.w	r3, [r4, #-1]
 8016c66:	f300 0007 	ssat	r0, #8, r0
 8016c6a:	9b06      	ldr	r3, [sp, #24]
 8016c6c:	f803 0c01 	strb.w	r0, [r3, #-1]
 8016c70:	9b02      	ldr	r3, [sp, #8]
 8016c72:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 8016c76:	2b15      	cmp	r3, #21
 8016c78:	f340 80e2 	ble.w	8016e40 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4fc>
 8016c7c:	1e9c      	subs	r4, r3, #2
 8016c7e:	2001      	movs	r0, #1
 8016c80:	3b01      	subs	r3, #1
 8016c82:	fa00 f404 	lsl.w	r4, r0, r4
 8016c86:	9805      	ldr	r0, [sp, #20]
 8016c88:	6800      	ldr	r0, [r0, #0]
 8016c8a:	fb52 4200 	smmla	r2, r2, r0, r4
 8016c8e:	fb51 4100 	smmla	r1, r1, r0, r4
 8016c92:	9803      	ldr	r0, [sp, #12]
 8016c94:	411a      	asrs	r2, r3
 8016c96:	6805      	ldr	r5, [r0, #0]
 8016c98:	442a      	add	r2, r5
 8016c9a:	f302 0207 	ssat	r2, #8, r2
 8016c9e:	4119      	asrs	r1, r3
 8016ca0:	9b04      	ldr	r3, [sp, #16]
 8016ca2:	4429      	add	r1, r5
 8016ca4:	701a      	strb	r2, [r3, #0]
 8016ca6:	f301 0107 	ssat	r1, #8, r1
 8016caa:	9b06      	ldr	r3, [sp, #24]
 8016cac:	7019      	strb	r1, [r3, #0]
 8016cae:	9a05      	ldr	r2, [sp, #20]
 8016cb0:	9b02      	ldr	r3, [sp, #8]
 8016cb2:	3208      	adds	r2, #8
 8016cb4:	3304      	adds	r3, #4
 8016cb6:	9205      	str	r2, [sp, #20]
 8016cb8:	9a03      	ldr	r2, [sp, #12]
 8016cba:	9302      	str	r3, [sp, #8]
 8016cbc:	3208      	adds	r2, #8
 8016cbe:	9203      	str	r2, [sp, #12]
 8016cc0:	9a04      	ldr	r2, [sp, #16]
 8016cc2:	3202      	adds	r2, #2
 8016cc4:	9204      	str	r2, [sp, #16]
 8016cc6:	9a06      	ldr	r2, [sp, #24]
 8016cc8:	3202      	adds	r2, #2
 8016cca:	9206      	str	r2, [sp, #24]
 8016ccc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016cce:	4293      	cmp	r3, r2
 8016cd0:	f47f ae7b 	bne.w	80169ca <st_sssa8_ch_nn_mat_mult_kernel_opt+0x86>
 8016cd4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016cd6:	46cb      	mov	fp, r9
 8016cd8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8016cda:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8016cde:	9229      	str	r2, [sp, #164]	; 0xa4
 8016ce0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8016ce2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8016ce6:	922a      	str	r2, [sp, #168]	; 0xa8
 8016ce8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8016cea:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8016cee:	922b      	str	r2, [sp, #172]	; 0xac
 8016cf0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016cf2:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8016cf6:	9215      	str	r2, [sp, #84]	; 0x54
 8016cf8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016cfa:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8016cfe:	9216      	str	r2, [sp, #88]	; 0x58
 8016d00:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8016d02:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016d06:	9328      	str	r3, [sp, #160]	; 0xa0
 8016d08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016d0a:	07db      	lsls	r3, r3, #31
 8016d0c:	d56f      	bpl.n	8016dee <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4aa>
 8016d0e:	9a07      	ldr	r2, [sp, #28]
 8016d10:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016d12:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016d14:	0896      	lsrs	r6, r2, #2
 8016d16:	681b      	ldr	r3, [r3, #0]
 8016d18:	eb00 0742 	add.w	r7, r0, r2, lsl #1
 8016d1c:	f000 812e 	beq.w	8016f7c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x638>
 8016d20:	ea4f 0cc6 	mov.w	ip, r6, lsl #3
 8016d24:	463c      	mov	r4, r7
 8016d26:	eb0b 06c6 	add.w	r6, fp, r6, lsl #3
 8016d2a:	461a      	mov	r2, r3
 8016d2c:	f8db 5000 	ldr.w	r5, [fp]
 8016d30:	f10b 0b08 	add.w	fp, fp, #8
 8016d34:	f85b 1c04 	ldr.w	r1, [fp, #-4]
 8016d38:	f8d0 e000 	ldr.w	lr, [r0]
 8016d3c:	fb25 330e 	smlad	r3, r5, lr, r3
 8016d40:	f8d4 e000 	ldr.w	lr, [r4]
 8016d44:	fb25 220e 	smlad	r2, r5, lr, r2
 8016d48:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8016d4c:	3408      	adds	r4, #8
 8016d4e:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8016d52:	3008      	adds	r0, #8
 8016d54:	fb21 330e 	smlad	r3, r1, lr, r3
 8016d58:	fb21 2205 	smlad	r2, r1, r5, r2
 8016d5c:	45b3      	cmp	fp, r6
 8016d5e:	d1e5      	bne.n	8016d2c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3e8>
 8016d60:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016d62:	4467      	add	r7, ip
 8016d64:	4461      	add	r1, ip
 8016d66:	910c      	str	r1, [sp, #48]	; 0x30
 8016d68:	9907      	ldr	r1, [sp, #28]
 8016d6a:	f011 0103 	ands.w	r1, r1, #3
 8016d6e:	d01d      	beq.n	8016dac <st_sssa8_ch_nn_mat_mult_kernel_opt+0x468>
 8016d70:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016d72:	3901      	subs	r1, #1
 8016d74:	f9b6 0000 	ldrsh.w	r0, [r6]
 8016d78:	882c      	ldrh	r4, [r5, #0]
 8016d7a:	b289      	uxth	r1, r1
 8016d7c:	fb14 3300 	smlabb	r3, r4, r0, r3
 8016d80:	883c      	ldrh	r4, [r7, #0]
 8016d82:	fb14 2200 	smlabb	r2, r4, r0, r2
 8016d86:	b189      	cbz	r1, 8016dac <st_sssa8_ch_nn_mat_mult_kernel_opt+0x468>
 8016d88:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 8016d8c:	2901      	cmp	r1, #1
 8016d8e:	886c      	ldrh	r4, [r5, #2]
 8016d90:	fb14 3300 	smlabb	r3, r4, r0, r3
 8016d94:	887c      	ldrh	r4, [r7, #2]
 8016d96:	fb14 2200 	smlabb	r2, r4, r0, r2
 8016d9a:	d007      	beq.n	8016dac <st_sssa8_ch_nn_mat_mult_kernel_opt+0x468>
 8016d9c:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 8016da0:	88a8      	ldrh	r0, [r5, #4]
 8016da2:	fb11 3300 	smlabb	r3, r1, r0, r3
 8016da6:	88b8      	ldrh	r0, [r7, #4]
 8016da8:	fb11 2200 	smlabb	r2, r1, r0, r2
 8016dac:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8016dae:	f9b1 1000 	ldrsh.w	r1, [r1]
 8016db2:	2915      	cmp	r1, #21
 8016db4:	f340 80a6 	ble.w	8016f04 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5c0>
 8016db8:	1e8d      	subs	r5, r1, #2
 8016dba:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8016dbc:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8016dbe:	3901      	subs	r1, #1
 8016dc0:	2601      	movs	r6, #1
 8016dc2:	6800      	ldr	r0, [r0, #0]
 8016dc4:	6824      	ldr	r4, [r4, #0]
 8016dc6:	40ae      	lsls	r6, r5
 8016dc8:	fb53 6500 	smmla	r5, r3, r0, r6
 8016dcc:	fb52 6300 	smmla	r3, r2, r0, r6
 8016dd0:	fa45 f201 	asr.w	r2, r5, r1
 8016dd4:	4422      	add	r2, r4
 8016dd6:	f302 0207 	ssat	r2, #8, r2
 8016dda:	410b      	asrs	r3, r1
 8016ddc:	982b      	ldr	r0, [sp, #172]	; 0xac
 8016dde:	4423      	add	r3, r4
 8016de0:	f800 2b01 	strb.w	r2, [r0], #1
 8016de4:	f303 0307 	ssat	r3, #8, r3
 8016de8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016dea:	902b      	str	r0, [sp, #172]	; 0xac
 8016dec:	7013      	strb	r3, [r2, #0]
 8016dee:	e9dd 3217 	ldrd	r3, r2, [sp, #92]	; 0x5c
 8016df2:	ebc3 0042 	rsb	r0, r3, r2, lsl #1
 8016df6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8016df8:	4418      	add	r0, r3
 8016dfa:	b01d      	add	sp, #116	; 0x74
 8016dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e00:	2c00      	cmp	r4, #0
 8016e02:	dd34      	ble.n	8016e6e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x52a>
 8016e04:	9d05      	ldr	r5, [sp, #20]
 8016e06:	005b      	lsls	r3, r3, #1
 8016e08:	9e03      	ldr	r6, [sp, #12]
 8016e0a:	0040      	lsls	r0, r0, #1
 8016e0c:	f855 5c04 	ldr.w	r5, [r5, #-4]
 8016e10:	f856 6c04 	ldr.w	r6, [r6, #-4]
 8016e14:	fb53 6305 	smmla	r3, r3, r5, r6
 8016e18:	fb50 6005 	smmla	r0, r0, r5, r6
 8016e1c:	4123      	asrs	r3, r4
 8016e1e:	f303 0307 	ssat	r3, #8, r3
 8016e22:	4120      	asrs	r0, r4
 8016e24:	9c04      	ldr	r4, [sp, #16]
 8016e26:	f804 3c01 	strb.w	r3, [r4, #-1]
 8016e2a:	f300 0007 	ssat	r0, #8, r0
 8016e2e:	9b06      	ldr	r3, [sp, #24]
 8016e30:	f803 0c01 	strb.w	r0, [r3, #-1]
 8016e34:	9b02      	ldr	r3, [sp, #8]
 8016e36:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 8016e3a:	2b15      	cmp	r3, #21
 8016e3c:	f73f af1e 	bgt.w	8016c7c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x338>
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	dd36      	ble.n	8016eb2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x56e>
 8016e44:	9805      	ldr	r0, [sp, #20]
 8016e46:	0052      	lsls	r2, r2, #1
 8016e48:	9c03      	ldr	r4, [sp, #12]
 8016e4a:	0049      	lsls	r1, r1, #1
 8016e4c:	6800      	ldr	r0, [r0, #0]
 8016e4e:	6824      	ldr	r4, [r4, #0]
 8016e50:	fb52 4200 	smmla	r2, r2, r0, r4
 8016e54:	fb51 4100 	smmla	r1, r1, r0, r4
 8016e58:	411a      	asrs	r2, r3
 8016e5a:	f302 0207 	ssat	r2, #8, r2
 8016e5e:	4119      	asrs	r1, r3
 8016e60:	9b04      	ldr	r3, [sp, #16]
 8016e62:	701a      	strb	r2, [r3, #0]
 8016e64:	f301 0107 	ssat	r1, #8, r1
 8016e68:	9b06      	ldr	r3, [sp, #24]
 8016e6a:	7019      	strb	r1, [r3, #0]
 8016e6c:	e71f      	b.n	8016cae <st_sssa8_ch_nn_mat_mult_kernel_opt+0x36a>
 8016e6e:	f1c4 0401 	rsb	r4, r4, #1
 8016e72:	fa03 f504 	lsl.w	r5, r3, r4
 8016e76:	f305 051f 	ssat	r5, #32, r5
 8016e7a:	9b05      	ldr	r3, [sp, #20]
 8016e7c:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8016e80:	fb55 f516 	smmulr	r5, r5, r6
 8016e84:	40a0      	lsls	r0, r4
 8016e86:	f300 001f 	ssat	r0, #32, r0
 8016e8a:	fb50 f016 	smmulr	r0, r0, r6
 8016e8e:	9c03      	ldr	r4, [sp, #12]
 8016e90:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016e94:	442b      	add	r3, r5
 8016e96:	f303 0307 	ssat	r3, #8, r3
 8016e9a:	9d04      	ldr	r5, [sp, #16]
 8016e9c:	f805 3c01 	strb.w	r3, [r5, #-1]
 8016ea0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016ea4:	4403      	add	r3, r0
 8016ea6:	f303 0307 	ssat	r3, #8, r3
 8016eaa:	9806      	ldr	r0, [sp, #24]
 8016eac:	f800 3c01 	strb.w	r3, [r0, #-1]
 8016eb0:	e6de      	b.n	8016c70 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x32c>
 8016eb2:	f1c3 0301 	rsb	r3, r3, #1
 8016eb6:	fa02 f003 	lsl.w	r0, r2, r3
 8016eba:	f300 001f 	ssat	r0, #32, r0
 8016ebe:	9a05      	ldr	r2, [sp, #20]
 8016ec0:	6814      	ldr	r4, [r2, #0]
 8016ec2:	fb50 f014 	smmulr	r0, r0, r4
 8016ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8016eca:	f303 021f 	ssat	r2, #32, r3
 8016ece:	fb52 f214 	smmulr	r2, r2, r4
 8016ed2:	9903      	ldr	r1, [sp, #12]
 8016ed4:	680b      	ldr	r3, [r1, #0]
 8016ed6:	4403      	add	r3, r0
 8016ed8:	f303 0307 	ssat	r3, #8, r3
 8016edc:	9804      	ldr	r0, [sp, #16]
 8016ede:	7003      	strb	r3, [r0, #0]
 8016ee0:	680b      	ldr	r3, [r1, #0]
 8016ee2:	4413      	add	r3, r2
 8016ee4:	f303 0307 	ssat	r3, #8, r3
 8016ee8:	9a06      	ldr	r2, [sp, #24]
 8016eea:	7013      	strb	r3, [r2, #0]
 8016eec:	e6df      	b.n	8016cae <st_sssa8_ch_nn_mat_mult_kernel_opt+0x36a>
 8016eee:	f04f 0b00 	mov.w	fp, #0
 8016ef2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8016ef4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8016ef6:	45ab      	cmp	fp, r5
 8016ef8:	9401      	str	r4, [sp, #4]
 8016efa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016efc:	f6ff adff 	blt.w	8016afe <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1ba>
 8016f00:	46a0      	mov	r8, r4
 8016f02:	e63a      	b.n	8016b7a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x236>
 8016f04:	2900      	cmp	r1, #0
 8016f06:	dd1a      	ble.n	8016f3e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5fa>
 8016f08:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8016f0a:	005b      	lsls	r3, r3, #1
 8016f0c:	0052      	lsls	r2, r2, #1
 8016f0e:	6804      	ldr	r4, [r0, #0]
 8016f10:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8016f12:	6805      	ldr	r5, [r0, #0]
 8016f14:	fb53 5004 	smmla	r0, r3, r4, r5
 8016f18:	fb52 5304 	smmla	r3, r2, r4, r5
 8016f1c:	fa40 f201 	asr.w	r2, r0, r1
 8016f20:	f302 0207 	ssat	r2, #8, r2
 8016f24:	982b      	ldr	r0, [sp, #172]	; 0xac
 8016f26:	f800 2b01 	strb.w	r2, [r0], #1
 8016f2a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8016f2c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016f30:	4113      	asrs	r3, r2
 8016f32:	f303 0307 	ssat	r3, #8, r3
 8016f36:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016f38:	902b      	str	r0, [sp, #172]	; 0xac
 8016f3a:	7013      	strb	r3, [r2, #0]
 8016f3c:	e757      	b.n	8016dee <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4aa>
 8016f3e:	f1c1 0101 	rsb	r1, r1, #1
 8016f42:	408b      	lsls	r3, r1
 8016f44:	f303 031f 	ssat	r3, #32, r3
 8016f48:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8016f4a:	6800      	ldr	r0, [r0, #0]
 8016f4c:	fb53 f310 	smmulr	r3, r3, r0
 8016f50:	408a      	lsls	r2, r1
 8016f52:	f302 021f 	ssat	r2, #32, r2
 8016f56:	fb52 f210 	smmulr	r2, r2, r0
 8016f5a:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8016f5c:	6809      	ldr	r1, [r1, #0]
 8016f5e:	440b      	add	r3, r1
 8016f60:	f303 0307 	ssat	r3, #8, r3
 8016f64:	992b      	ldr	r1, [sp, #172]	; 0xac
 8016f66:	f801 3b01 	strb.w	r3, [r1], #1
 8016f6a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016f6c:	681b      	ldr	r3, [r3, #0]
 8016f6e:	4413      	add	r3, r2
 8016f70:	f303 0307 	ssat	r3, #8, r3
 8016f74:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016f76:	912b      	str	r1, [sp, #172]	; 0xac
 8016f78:	7013      	strb	r3, [r2, #0]
 8016f7a:	e738      	b.n	8016dee <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4aa>
 8016f7c:	465e      	mov	r6, fp
 8016f7e:	461a      	mov	r2, r3
 8016f80:	e6f2      	b.n	8016d68 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x424>
 8016f82:	bf00      	nop

08016f84 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>:
 8016f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f88:	b093      	sub	sp, #76	; 0x4c
 8016f8a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8016f8e:	f8bd 4074 	ldrh.w	r4, [sp, #116]	; 0x74
 8016f92:	085d      	lsrs	r5, r3, #1
 8016f94:	930e      	str	r3, [sp, #56]	; 0x38
 8016f96:	9107      	str	r1, [sp, #28]
 8016f98:	920d      	str	r2, [sp, #52]	; 0x34
 8016f9a:	9405      	str	r4, [sp, #20]
 8016f9c:	950f      	str	r5, [sp, #60]	; 0x3c
 8016f9e:	f000 81fc 	beq.w	801739a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x416>
 8016fa2:	4616      	mov	r6, r2
 8016fa4:	1e6a      	subs	r2, r5, #1
 8016fa6:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8016fa8:	460f      	mov	r7, r1
 8016faa:	b292      	uxth	r2, r2
 8016fac:	f1a4 0310 	sub.w	r3, r4, #16
 8016fb0:	1d29      	adds	r1, r5, #4
 8016fb2:	f106 0a08 	add.w	sl, r6, #8
 8016fb6:	091b      	lsrs	r3, r3, #4
 8016fb8:	eb01 0542 	add.w	r5, r1, r2, lsl #1
 8016fbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016fbe:	3301      	adds	r3, #1
 8016fc0:	f102 0b02 	add.w	fp, r2, #2
 8016fc4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016fc6:	eb07 1743 	add.w	r7, r7, r3, lsl #5
 8016fca:	9509      	str	r5, [sp, #36]	; 0x24
 8016fcc:	3204      	adds	r2, #4
 8016fce:	1ee5      	subs	r5, r4, #3
 8016fd0:	9202      	str	r2, [sp, #8]
 8016fd2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8016fd4:	9508      	str	r5, [sp, #32]
 8016fd6:	3208      	adds	r2, #8
 8016fd8:	9204      	str	r2, [sp, #16]
 8016fda:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016fdc:	3208      	adds	r2, #8
 8016fde:	9201      	str	r2, [sp, #4]
 8016fe0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016fe2:	3202      	adds	r2, #2
 8016fe4:	9203      	str	r2, [sp, #12]
 8016fe6:	019a      	lsls	r2, r3, #6
 8016fe8:	011b      	lsls	r3, r3, #4
 8016fea:	920a      	str	r2, [sp, #40]	; 0x28
 8016fec:	930b      	str	r3, [sp, #44]	; 0x2c
 8016fee:	1f23      	subs	r3, r4, #4
 8016ff0:	930c      	str	r3, [sp, #48]	; 0x30
 8016ff2:	f85a 3c08 	ldr.w	r3, [sl, #-8]
 8016ff6:	9905      	ldr	r1, [sp, #20]
 8016ff8:	f85a 2c04 	ldr.w	r2, [sl, #-4]
 8016ffc:	9311      	str	r3, [sp, #68]	; 0x44
 8016ffe:	290f      	cmp	r1, #15
 8017000:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017002:	9211      	str	r2, [sp, #68]	; 0x44
 8017004:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017006:	9c07      	ldr	r4, [sp, #28]
 8017008:	f340 819c 	ble.w	8017344 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3c0>
 801700c:	4601      	mov	r1, r0
 801700e:	f8d4 c000 	ldr.w	ip, [r4]
 8017012:	680e      	ldr	r6, [r1, #0]
 8017014:	fb26 330c 	smlad	r3, r6, ip, r3
 8017018:	684d      	ldr	r5, [r1, #4]
 801701a:	fb25 220c 	smlad	r2, r5, ip, r2
 801701e:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8017022:	688e      	ldr	r6, [r1, #8]
 8017024:	fb26 360c 	smlad	r6, r6, ip, r3
 8017028:	68cd      	ldr	r5, [r1, #12]
 801702a:	fb25 250c 	smlad	r5, r5, ip, r2
 801702e:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8017032:	690b      	ldr	r3, [r1, #16]
 8017034:	fb23 660c 	smlad	r6, r3, ip, r6
 8017038:	694a      	ldr	r2, [r1, #20]
 801703a:	fb22 550c 	smlad	r5, r2, ip, r5
 801703e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8017042:	698b      	ldr	r3, [r1, #24]
 8017044:	fb23 630c 	smlad	r3, r3, ip, r6
 8017048:	69ca      	ldr	r2, [r1, #28]
 801704a:	fb22 520c 	smlad	r2, r2, ip, r5
 801704e:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8017052:	6a0e      	ldr	r6, [r1, #32]
 8017054:	fb26 330c 	smlad	r3, r6, ip, r3
 8017058:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 801705a:	fb25 220c 	smlad	r2, r5, ip, r2
 801705e:	f8d4 c014 	ldr.w	ip, [r4, #20]
 8017062:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 8017064:	fb26 360c 	smlad	r6, r6, ip, r3
 8017068:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 801706a:	fb25 250c 	smlad	r5, r5, ip, r2
 801706e:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8017072:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8017074:	fb23 660c 	smlad	r6, r3, ip, r6
 8017078:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 801707a:	fb22 550c 	smlad	r5, r2, ip, r5
 801707e:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 8017082:	3140      	adds	r1, #64	; 0x40
 8017084:	f851 3c08 	ldr.w	r3, [r1, #-8]
 8017088:	3420      	adds	r4, #32
 801708a:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801708e:	fb23 630c 	smlad	r3, r3, ip, r6
 8017092:	fb22 520c 	smlad	r2, r2, ip, r5
 8017096:	42bc      	cmp	r4, r7
 8017098:	d1b9      	bne.n	801700e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x8a>
 801709a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801709c:	463c      	mov	r4, r7
 801709e:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 80170a2:	4408      	add	r0, r1
 80170a4:	9908      	ldr	r1, [sp, #32]
 80170a6:	458e      	cmp	lr, r1
 80170a8:	da25      	bge.n	80170f6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x172>
 80170aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80170ac:	eba1 090e 	sub.w	r9, r1, lr
 80170b0:	4601      	mov	r1, r0
 80170b2:	ea4f 0999 	mov.w	r9, r9, lsr #2
 80170b6:	f109 0501 	add.w	r5, r9, #1
 80170ba:	eb04 08c5 	add.w	r8, r4, r5, lsl #3
 80170be:	9506      	str	r5, [sp, #24]
 80170c0:	6825      	ldr	r5, [r4, #0]
 80170c2:	680e      	ldr	r6, [r1, #0]
 80170c4:	fb26 3305 	smlad	r3, r6, r5, r3
 80170c8:	684e      	ldr	r6, [r1, #4]
 80170ca:	fb26 2505 	smlad	r5, r6, r5, r2
 80170ce:	6866      	ldr	r6, [r4, #4]
 80170d0:	3110      	adds	r1, #16
 80170d2:	f851 cc08 	ldr.w	ip, [r1, #-8]
 80170d6:	3408      	adds	r4, #8
 80170d8:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80170dc:	fb2c 3306 	smlad	r3, ip, r6, r3
 80170e0:	fb22 5206 	smlad	r2, r2, r6, r5
 80170e4:	45a0      	cmp	r8, r4
 80170e6:	d1eb      	bne.n	80170c0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x13c>
 80170e8:	9906      	ldr	r1, [sp, #24]
 80170ea:	f10e 0e04 	add.w	lr, lr, #4
 80170ee:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 80170f2:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 80170f6:	9e05      	ldr	r6, [sp, #20]
 80170f8:	4576      	cmp	r6, lr
 80170fa:	dd30      	ble.n	801715e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1da>
 80170fc:	f9b4 1000 	ldrsh.w	r1, [r4]
 8017100:	8805      	ldrh	r5, [r0, #0]
 8017102:	fb15 3301 	smlabb	r3, r5, r1, r3
 8017106:	8845      	ldrh	r5, [r0, #2]
 8017108:	fb11 2205 	smlabb	r2, r1, r5, r2
 801710c:	f10e 0101 	add.w	r1, lr, #1
 8017110:	428e      	cmp	r6, r1
 8017112:	dd1f      	ble.n	8017154 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1d0>
 8017114:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017118:	8885      	ldrh	r5, [r0, #4]
 801711a:	fb15 3301 	smlabb	r3, r5, r1, r3
 801711e:	88c5      	ldrh	r5, [r0, #6]
 8017120:	fb11 2205 	smlabb	r2, r1, r5, r2
 8017124:	f10e 0102 	add.w	r1, lr, #2
 8017128:	428e      	cmp	r6, r1
 801712a:	dd13      	ble.n	8017154 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1d0>
 801712c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017130:	8905      	ldrh	r5, [r0, #8]
 8017132:	fb15 3301 	smlabb	r3, r5, r1, r3
 8017136:	8945      	ldrh	r5, [r0, #10]
 8017138:	fb11 2205 	smlabb	r2, r1, r5, r2
 801713c:	f10e 0103 	add.w	r1, lr, #3
 8017140:	428e      	cmp	r6, r1
 8017142:	dd07      	ble.n	8017154 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1d0>
 8017144:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8017148:	8984      	ldrh	r4, [r0, #12]
 801714a:	fb14 3301 	smlabb	r3, r4, r1, r3
 801714e:	89c4      	ldrh	r4, [r0, #14]
 8017150:	fb11 2204 	smlabb	r2, r1, r4, r2
 8017154:	9905      	ldr	r1, [sp, #20]
 8017156:	eba1 0e0e 	sub.w	lr, r1, lr
 801715a:	eb00 008e 	add.w	r0, r0, lr, lsl #2
 801715e:	9902      	ldr	r1, [sp, #8]
 8017160:	f931 5c04 	ldrsh.w	r5, [r1, #-4]
 8017164:	2d15      	cmp	r5, #21
 8017166:	f340 80b0 	ble.w	80172ca <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x346>
 801716a:	9e04      	ldr	r6, [sp, #16]
 801716c:	1eac      	subs	r4, r5, #2
 801716e:	2101      	movs	r1, #1
 8017170:	3d01      	subs	r5, #1
 8017172:	f1a6 0e04 	sub.w	lr, r6, #4
 8017176:	fa01 f404 	lsl.w	r4, r1, r4
 801717a:	f856 1c08 	ldr.w	r1, [r6, #-8]
 801717e:	fb53 4401 	smmla	r4, r3, r1, r4
 8017182:	9b01      	ldr	r3, [sp, #4]
 8017184:	fa44 f505 	asr.w	r5, r4, r5
 8017188:	f853 4c08 	ldr.w	r4, [r3, #-8]
 801718c:	1f1e      	subs	r6, r3, #4
 801718e:	442c      	add	r4, r5
 8017190:	f304 0407 	ssat	r4, #8, r4
 8017194:	f80b 4c02 	strb.w	r4, [fp, #-2]
 8017198:	9b03      	ldr	r3, [sp, #12]
 801719a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801719e:	2b15      	cmp	r3, #21
 80171a0:	f340 8085 	ble.w	80172ae <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x32a>
 80171a4:	1e9c      	subs	r4, r3, #2
 80171a6:	2501      	movs	r5, #1
 80171a8:	3b01      	subs	r3, #1
 80171aa:	6836      	ldr	r6, [r6, #0]
 80171ac:	f8de 1000 	ldr.w	r1, [lr]
 80171b0:	fa05 f404 	lsl.w	r4, r5, r4
 80171b4:	fb52 4201 	smmla	r2, r2, r1, r4
 80171b8:	411a      	asrs	r2, r3
 80171ba:	4432      	add	r2, r6
 80171bc:	f302 0207 	ssat	r2, #8, r2
 80171c0:	f80b 2c01 	strb.w	r2, [fp, #-1]
 80171c4:	9b02      	ldr	r3, [sp, #8]
 80171c6:	f10b 0b02 	add.w	fp, fp, #2
 80171ca:	f10a 0a08 	add.w	sl, sl, #8
 80171ce:	3304      	adds	r3, #4
 80171d0:	9302      	str	r3, [sp, #8]
 80171d2:	9b04      	ldr	r3, [sp, #16]
 80171d4:	3308      	adds	r3, #8
 80171d6:	9304      	str	r3, [sp, #16]
 80171d8:	9b01      	ldr	r3, [sp, #4]
 80171da:	3308      	adds	r3, #8
 80171dc:	9301      	str	r3, [sp, #4]
 80171de:	9b03      	ldr	r3, [sp, #12]
 80171e0:	3304      	adds	r3, #4
 80171e2:	9303      	str	r3, [sp, #12]
 80171e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171e6:	459b      	cmp	fp, r3
 80171e8:	f47f af03 	bne.w	8016ff2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x6e>
 80171ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80171ee:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80171f0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80171f4:	921e      	str	r2, [sp, #120]	; 0x78
 80171f6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80171f8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80171fc:	921f      	str	r2, [sp, #124]	; 0x7c
 80171fe:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017200:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8017204:	9220      	str	r2, [sp, #128]	; 0x80
 8017206:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017208:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801720c:	920d      	str	r2, [sp, #52]	; 0x34
 801720e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017210:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8017214:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017216:	07db      	lsls	r3, r3, #31
 8017218:	d545      	bpl.n	80172a6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x322>
 801721a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801721c:	681a      	ldr	r2, [r3, #0]
 801721e:	9b05      	ldr	r3, [sp, #20]
 8017220:	089e      	lsrs	r6, r3, #2
 8017222:	d014      	beq.n	801724e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2ca>
 8017224:	00f7      	lsls	r7, r6, #3
 8017226:	9b07      	ldr	r3, [sp, #28]
 8017228:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 801722c:	6805      	ldr	r5, [r0, #0]
 801722e:	3008      	adds	r0, #8
 8017230:	f850 4c04 	ldr.w	r4, [r0, #-4]
 8017234:	f8d3 c000 	ldr.w	ip, [r3]
 8017238:	fb25 220c 	smlad	r2, r5, ip, r2
 801723c:	685d      	ldr	r5, [r3, #4]
 801723e:	3308      	adds	r3, #8
 8017240:	fb24 2205 	smlad	r2, r4, r5, r2
 8017244:	4286      	cmp	r6, r0
 8017246:	d1f1      	bne.n	801722c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2a8>
 8017248:	9b07      	ldr	r3, [sp, #28]
 801724a:	443b      	add	r3, r7
 801724c:	9307      	str	r3, [sp, #28]
 801724e:	9b05      	ldr	r3, [sp, #20]
 8017250:	f013 0303 	ands.w	r3, r3, #3
 8017254:	d011      	beq.n	801727a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2f6>
 8017256:	3b01      	subs	r3, #1
 8017258:	9e07      	ldr	r6, [sp, #28]
 801725a:	8804      	ldrh	r4, [r0, #0]
 801725c:	8835      	ldrh	r5, [r6, #0]
 801725e:	b29b      	uxth	r3, r3
 8017260:	fb15 2204 	smlabb	r2, r5, r4, r2
 8017264:	b14b      	cbz	r3, 801727a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2f6>
 8017266:	8845      	ldrh	r5, [r0, #2]
 8017268:	2b01      	cmp	r3, #1
 801726a:	8874      	ldrh	r4, [r6, #2]
 801726c:	fb15 2204 	smlabb	r2, r5, r4, r2
 8017270:	d003      	beq.n	801727a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2f6>
 8017272:	8880      	ldrh	r0, [r0, #4]
 8017274:	88b3      	ldrh	r3, [r6, #4]
 8017276:	fb10 2203 	smlabb	r2, r0, r3, r2
 801727a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801727c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017280:	2b15      	cmp	r3, #21
 8017282:	dd62      	ble.n	801734a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3c6>
 8017284:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8017286:	1e9e      	subs	r6, r3, #2
 8017288:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801728a:	3b01      	subs	r3, #1
 801728c:	6825      	ldr	r5, [r4, #0]
 801728e:	2401      	movs	r4, #1
 8017290:	6800      	ldr	r0, [r0, #0]
 8017292:	40b4      	lsls	r4, r6
 8017294:	fb52 4200 	smmla	r2, r2, r0, r4
 8017298:	fa42 f303 	asr.w	r3, r2, r3
 801729c:	442b      	add	r3, r5
 801729e:	f303 0307 	ssat	r3, #8, r3
 80172a2:	f801 3b01 	strb.w	r3, [r1], #1
 80172a6:	4608      	mov	r0, r1
 80172a8:	b013      	add	sp, #76	; 0x4c
 80172aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	dd21      	ble.n	80172f6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x372>
 80172b2:	f8de 1000 	ldr.w	r1, [lr]
 80172b6:	0052      	lsls	r2, r2, #1
 80172b8:	6834      	ldr	r4, [r6, #0]
 80172ba:	fb52 4201 	smmla	r2, r2, r1, r4
 80172be:	411a      	asrs	r2, r3
 80172c0:	f302 0307 	ssat	r3, #8, r2
 80172c4:	f80b 3c01 	strb.w	r3, [fp, #-1]
 80172c8:	e77c      	b.n	80171c4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x240>
 80172ca:	2d00      	cmp	r5, #0
 80172cc:	dd24      	ble.n	8017318 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x394>
 80172ce:	9e04      	ldr	r6, [sp, #16]
 80172d0:	005b      	lsls	r3, r3, #1
 80172d2:	9c01      	ldr	r4, [sp, #4]
 80172d4:	f856 1c08 	ldr.w	r1, [r6, #-8]
 80172d8:	f1a6 0e04 	sub.w	lr, r6, #4
 80172dc:	f854 4c08 	ldr.w	r4, [r4, #-8]
 80172e0:	fb53 4301 	smmla	r3, r3, r1, r4
 80172e4:	9c01      	ldr	r4, [sp, #4]
 80172e6:	fa43 f505 	asr.w	r5, r3, r5
 80172ea:	1f26      	subs	r6, r4, #4
 80172ec:	f305 0507 	ssat	r5, #8, r5
 80172f0:	f80b 5c02 	strb.w	r5, [fp, #-2]
 80172f4:	e750      	b.n	8017198 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x214>
 80172f6:	f1c3 0301 	rsb	r3, r3, #1
 80172fa:	fa02 f303 	lsl.w	r3, r2, r3
 80172fe:	f303 031f 	ssat	r3, #32, r3
 8017302:	f8de 2000 	ldr.w	r2, [lr]
 8017306:	fb53 f312 	smmulr	r3, r3, r2
 801730a:	6832      	ldr	r2, [r6, #0]
 801730c:	441a      	add	r2, r3
 801730e:	f302 0207 	ssat	r2, #8, r2
 8017312:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8017316:	e755      	b.n	80171c4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x240>
 8017318:	f1c5 0501 	rsb	r5, r5, #1
 801731c:	40ab      	lsls	r3, r5
 801731e:	f303 031f 	ssat	r3, #32, r3
 8017322:	9904      	ldr	r1, [sp, #16]
 8017324:	f1a1 0e04 	sub.w	lr, r1, #4
 8017328:	f851 1c08 	ldr.w	r1, [r1, #-8]
 801732c:	fb53 f111 	smmulr	r1, r3, r1
 8017330:	9c01      	ldr	r4, [sp, #4]
 8017332:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8017336:	1f26      	subs	r6, r4, #4
 8017338:	440b      	add	r3, r1
 801733a:	f303 0307 	ssat	r3, #8, r3
 801733e:	f80b 3c02 	strb.w	r3, [fp, #-2]
 8017342:	e729      	b.n	8017198 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x214>
 8017344:	f04f 0e00 	mov.w	lr, #0
 8017348:	e6ac      	b.n	80170a4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x120>
 801734a:	2b00      	cmp	r3, #0
 801734c:	dd10      	ble.n	8017370 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3ec>
 801734e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8017350:	0052      	lsls	r2, r2, #1
 8017352:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8017354:	6800      	ldr	r0, [r0, #0]
 8017356:	6824      	ldr	r4, [r4, #0]
 8017358:	fb52 4200 	smmla	r2, r2, r0, r4
 801735c:	fa42 f303 	asr.w	r3, r2, r3
 8017360:	f303 0307 	ssat	r3, #8, r3
 8017364:	f801 3b01 	strb.w	r3, [r1], #1
 8017368:	4608      	mov	r0, r1
 801736a:	b013      	add	sp, #76	; 0x4c
 801736c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017370:	f1c3 0301 	rsb	r3, r3, #1
 8017374:	fa02 f303 	lsl.w	r3, r2, r3
 8017378:	f303 031f 	ssat	r3, #32, r3
 801737c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801737e:	6812      	ldr	r2, [r2, #0]
 8017380:	fb53 f312 	smmulr	r3, r3, r2
 8017384:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017386:	6812      	ldr	r2, [r2, #0]
 8017388:	4413      	add	r3, r2
 801738a:	f303 0307 	ssat	r3, #8, r3
 801738e:	f801 3b01 	strb.w	r3, [r1], #1
 8017392:	4608      	mov	r0, r1
 8017394:	b013      	add	sp, #76	; 0x4c
 8017396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801739a:	9921      	ldr	r1, [sp, #132]	; 0x84
 801739c:	e73a      	b.n	8017214 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x290>
 801739e:	bf00      	nop

080173a0 <arm_float_to_q15>:
 80173a0:	b530      	push	{r4, r5, lr}
 80173a2:	0895      	lsrs	r5, r2, #2
 80173a4:	d069      	beq.n	801747a <arm_float_to_q15+0xda>
 80173a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80173aa:	f100 0c10 	add.w	ip, r0, #16
 80173ae:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 80173b2:	ed9f 6a55 	vldr	s12, [pc, #340]	; 8017508 <arm_float_to_q15+0x168>
 80173b6:	f101 0e08 	add.w	lr, r1, #8
 80173ba:	462c      	mov	r4, r5
 80173bc:	ed5c 7a04 	vldr	s15, [ip, #-16]
 80173c0:	ee67 6a86 	vmul.f32	s13, s15, s12
 80173c4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80173c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173cc:	fe77 7a25 	vselgt.f32	s15, s14, s11
 80173d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80173d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80173d8:	ee17 3a90 	vmov	r3, s15
 80173dc:	f303 030f 	ssat	r3, #16, r3
 80173e0:	f82e 3c08 	strh.w	r3, [lr, #-8]
 80173e4:	ed5c 7a03 	vldr	s15, [ip, #-12]
 80173e8:	ee67 6a86 	vmul.f32	s13, s15, s12
 80173ec:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80173f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173f4:	fe77 7a25 	vselgt.f32	s15, s14, s11
 80173f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80173fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017400:	ee17 3a90 	vmov	r3, s15
 8017404:	f303 030f 	ssat	r3, #16, r3
 8017408:	f82e 3c06 	strh.w	r3, [lr, #-6]
 801740c:	ed5c 7a02 	vldr	s15, [ip, #-8]
 8017410:	ee67 6a86 	vmul.f32	s13, s15, s12
 8017414:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8017418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801741c:	fe77 7a25 	vselgt.f32	s15, s14, s11
 8017420:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017424:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017428:	ee17 3a90 	vmov	r3, s15
 801742c:	f303 030f 	ssat	r3, #16, r3
 8017430:	f82e 3c04 	strh.w	r3, [lr, #-4]
 8017434:	ed5c 7a01 	vldr	s15, [ip, #-4]
 8017438:	ee67 7a86 	vmul.f32	s15, s15, s12
 801743c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017440:	ee77 6a87 	vadd.f32	s13, s15, s14
 8017444:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801744c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8017450:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017454:	bfcc      	ite	gt
 8017456:	ee16 3a90 	vmovgt	r3, s13
 801745a:	ee17 3a90 	vmovle	r3, s15
 801745e:	f303 030f 	ssat	r3, #16, r3
 8017462:	3c01      	subs	r4, #1
 8017464:	f82e 3c02 	strh.w	r3, [lr, #-2]
 8017468:	f10c 0c10 	add.w	ip, ip, #16
 801746c:	f10e 0e08 	add.w	lr, lr, #8
 8017470:	d1a4      	bne.n	80173bc <arm_float_to_q15+0x1c>
 8017472:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8017476:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 801747a:	f012 0203 	ands.w	r2, r2, #3
 801747e:	d042      	beq.n	8017506 <arm_float_to_q15+0x166>
 8017480:	edd0 7a00 	vldr	s15, [r0]
 8017484:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8017488:	eddf 5a1f 	vldr	s11, [pc, #124]	; 8017508 <arm_float_to_q15+0x168>
 801748c:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 8017490:	ee67 6aa5 	vmul.f32	s13, s15, s11
 8017494:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8017498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801749c:	fe77 7a06 	vselgt.f32	s15, s14, s12
 80174a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80174a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80174a8:	ee17 3a90 	vmov	r3, s15
 80174ac:	f303 030f 	ssat	r3, #16, r3
 80174b0:	3a01      	subs	r2, #1
 80174b2:	800b      	strh	r3, [r1, #0]
 80174b4:	d027      	beq.n	8017506 <arm_float_to_q15+0x166>
 80174b6:	edd0 7a01 	vldr	s15, [r0, #4]
 80174ba:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80174be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80174c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174c6:	fe77 6a06 	vselgt.f32	s13, s14, s12
 80174ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80174ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80174d2:	ee17 3a90 	vmov	r3, s15
 80174d6:	f303 030f 	ssat	r3, #16, r3
 80174da:	2a01      	cmp	r2, #1
 80174dc:	804b      	strh	r3, [r1, #2]
 80174de:	d012      	beq.n	8017506 <arm_float_to_q15+0x166>
 80174e0:	edd0 7a02 	vldr	s15, [r0, #8]
 80174e4:	ee67 5aa5 	vmul.f32	s11, s15, s11
 80174e8:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 80174ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174f0:	fe37 7a06 	vselgt.f32	s14, s14, s12
 80174f4:	ee37 7a25 	vadd.f32	s14, s14, s11
 80174f8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80174fc:	ee17 3a10 	vmov	r3, s14
 8017500:	f303 030f 	ssat	r3, #16, r3
 8017504:	808b      	strh	r3, [r1, #4]
 8017506:	bd30      	pop	{r4, r5, pc}
 8017508:	47000000 	.word	0x47000000

0801750c <arm_float_to_q7>:
 801750c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801750e:	0895      	lsrs	r5, r2, #2
 8017510:	d06f      	beq.n	80175f2 <arm_float_to_q7+0xe6>
 8017512:	f101 0c04 	add.w	ip, r1, #4
 8017516:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801751a:	eebe 5a00 	vmov.f32	s10, #224	; 0xbf000000 -0.5
 801751e:	f100 0e10 	add.w	lr, r0, #16
 8017522:	eddf 5a5f 	vldr	s11, [pc, #380]	; 80176a0 <arm_float_to_q7+0x194>
 8017526:	00ae      	lsls	r6, r5, #2
 8017528:	eb0c 0485 	add.w	r4, ip, r5, lsl #2
 801752c:	ed5e 7a04 	vldr	s15, [lr, #-16]
 8017530:	ee27 7aa5 	vmul.f32	s14, s15, s11
 8017534:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8017538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801753c:	fe76 7a05 	vselgt.f32	s15, s12, s10
 8017540:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017544:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017548:	ee17 3a90 	vmov	r3, s15
 801754c:	b21b      	sxth	r3, r3
 801754e:	f303 0307 	ssat	r3, #8, r3
 8017552:	f80c 3c04 	strb.w	r3, [ip, #-4]
 8017556:	ed5e 7a03 	vldr	s15, [lr, #-12]
 801755a:	ee27 7aa5 	vmul.f32	s14, s15, s11
 801755e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8017562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017566:	fe76 7a05 	vselgt.f32	s15, s12, s10
 801756a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801756e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017572:	ee17 3a90 	vmov	r3, s15
 8017576:	b21b      	sxth	r3, r3
 8017578:	f303 0307 	ssat	r3, #8, r3
 801757c:	f80c 3c03 	strb.w	r3, [ip, #-3]
 8017580:	ed5e 7a02 	vldr	s15, [lr, #-8]
 8017584:	ee27 7aa5 	vmul.f32	s14, s15, s11
 8017588:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801758c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017590:	fe76 7a05 	vselgt.f32	s15, s12, s10
 8017594:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017598:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801759c:	ee17 3a90 	vmov	r3, s15
 80175a0:	b21b      	sxth	r3, r3
 80175a2:	f303 0307 	ssat	r3, #8, r3
 80175a6:	f80c 3c02 	strb.w	r3, [ip, #-2]
 80175aa:	ed5e 6a01 	vldr	s13, [lr, #-4]
 80175ae:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80175b2:	ee76 7a86 	vadd.f32	s15, s13, s12
 80175b6:	ee36 7ac6 	vsub.f32	s14, s13, s12
 80175ba:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80175be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80175c2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80175c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175ca:	ee17 3a90 	vmov	r3, s15
 80175ce:	ee17 7a10 	vmov	r7, s14
 80175d2:	b21b      	sxth	r3, r3
 80175d4:	b23f      	sxth	r7, r7
 80175d6:	dd56      	ble.n	8017686 <arm_float_to_q7+0x17a>
 80175d8:	f303 0307 	ssat	r3, #8, r3
 80175dc:	f80c 3c01 	strb.w	r3, [ip, #-1]
 80175e0:	f10c 0c04 	add.w	ip, ip, #4
 80175e4:	f10e 0e10 	add.w	lr, lr, #16
 80175e8:	4564      	cmp	r4, ip
 80175ea:	d19f      	bne.n	801752c <arm_float_to_q7+0x20>
 80175ec:	4431      	add	r1, r6
 80175ee:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 80175f2:	f012 0203 	ands.w	r2, r2, #3
 80175f6:	d045      	beq.n	8017684 <arm_float_to_q7+0x178>
 80175f8:	edd0 7a00 	vldr	s15, [r0]
 80175fc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8017600:	ed9f 5a27 	vldr	s10, [pc, #156]	; 80176a0 <arm_float_to_q7+0x194>
 8017604:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 8017608:	ee67 6a85 	vmul.f32	s13, s15, s10
 801760c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8017610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017614:	fe77 7a25 	vselgt.f32	s15, s14, s11
 8017618:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801761c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017620:	ee17 3a90 	vmov	r3, s15
 8017624:	b21b      	sxth	r3, r3
 8017626:	f303 0307 	ssat	r3, #8, r3
 801762a:	3a01      	subs	r2, #1
 801762c:	700b      	strb	r3, [r1, #0]
 801762e:	d029      	beq.n	8017684 <arm_float_to_q7+0x178>
 8017630:	edd0 6a01 	vldr	s13, [r0, #4]
 8017634:	ee26 6a85 	vmul.f32	s12, s13, s10
 8017638:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801763c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017640:	fe77 6a25 	vselgt.f32	s13, s14, s11
 8017644:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017648:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801764c:	ee16 3a90 	vmov	r3, s13
 8017650:	b21b      	sxth	r3, r3
 8017652:	f303 0307 	ssat	r3, #8, r3
 8017656:	2a01      	cmp	r2, #1
 8017658:	704b      	strb	r3, [r1, #1]
 801765a:	d013      	beq.n	8017684 <arm_float_to_q7+0x178>
 801765c:	edd0 7a02 	vldr	s15, [r0, #8]
 8017660:	ee27 5a85 	vmul.f32	s10, s15, s10
 8017664:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8017668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801766c:	fe77 7a25 	vselgt.f32	s15, s14, s11
 8017670:	ee77 7a85 	vadd.f32	s15, s15, s10
 8017674:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017678:	ee17 3a90 	vmov	r3, s15
 801767c:	b21b      	sxth	r3, r3
 801767e:	f303 0307 	ssat	r3, #8, r3
 8017682:	708b      	strb	r3, [r1, #2]
 8017684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017686:	f307 0707 	ssat	r7, #8, r7
 801768a:	f80c 7c01 	strb.w	r7, [ip, #-1]
 801768e:	f10c 0c04 	add.w	ip, ip, #4
 8017692:	f10e 0e10 	add.w	lr, lr, #16
 8017696:	45a4      	cmp	ip, r4
 8017698:	f47f af48 	bne.w	801752c <arm_float_to_q7+0x20>
 801769c:	e7a6      	b.n	80175ec <arm_float_to_q7+0xe0>
 801769e:	bf00      	nop
 80176a0:	43000000 	.word	0x43000000

080176a4 <arm_q15_to_float>:
 80176a4:	b530      	push	{r4, r5, lr}
 80176a6:	0894      	lsrs	r4, r2, #2
 80176a8:	d038      	beq.n	801771c <arm_q15_to_float+0x78>
 80176aa:	f100 0c08 	add.w	ip, r0, #8
 80176ae:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 801776c <arm_q15_to_float+0xc8>
 80176b2:	f101 0310 	add.w	r3, r1, #16
 80176b6:	46a6      	mov	lr, r4
 80176b8:	f93c 5c08 	ldrsh.w	r5, [ip, #-8]
 80176bc:	3310      	adds	r3, #16
 80176be:	f10c 0c08 	add.w	ip, ip, #8
 80176c2:	f1be 0e01 	subs.w	lr, lr, #1
 80176c6:	ee07 5a90 	vmov	s15, r5
 80176ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80176ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80176d2:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 80176d6:	f93c 5c0e 	ldrsh.w	r5, [ip, #-14]
 80176da:	ee07 5a90 	vmov	s15, r5
 80176de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80176e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80176e6:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 80176ea:	f93c 5c0c 	ldrsh.w	r5, [ip, #-12]
 80176ee:	ee07 5a90 	vmov	s15, r5
 80176f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80176f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80176fa:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 80176fe:	f93c 5c0a 	ldrsh.w	r5, [ip, #-10]
 8017702:	ee07 5a90 	vmov	s15, r5
 8017706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801770a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801770e:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8017712:	d1d1      	bne.n	80176b8 <arm_q15_to_float+0x14>
 8017714:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 8017718:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 801771c:	f012 0203 	ands.w	r2, r2, #3
 8017720:	d023      	beq.n	801776a <arm_q15_to_float+0xc6>
 8017722:	f9b0 3000 	ldrsh.w	r3, [r0]
 8017726:	3a01      	subs	r2, #1
 8017728:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801776c <arm_q15_to_float+0xc8>
 801772c:	ee07 3a90 	vmov	s15, r3
 8017730:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017734:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017738:	edc1 7a00 	vstr	s15, [r1]
 801773c:	d015      	beq.n	801776a <arm_q15_to_float+0xc6>
 801773e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8017742:	2a01      	cmp	r2, #1
 8017744:	ee07 3a90 	vmov	s15, r3
 8017748:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801774c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017750:	edc1 7a01 	vstr	s15, [r1, #4]
 8017754:	d009      	beq.n	801776a <arm_q15_to_float+0xc6>
 8017756:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801775a:	ee07 3a90 	vmov	s15, r3
 801775e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017762:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017766:	edc1 7a02 	vstr	s15, [r1, #8]
 801776a:	bd30      	pop	{r4, r5, pc}
 801776c:	38000000 	.word	0x38000000

08017770 <arm_q7_to_float>:
 8017770:	b530      	push	{r4, r5, lr}
 8017772:	0894      	lsrs	r4, r2, #2
 8017774:	d036      	beq.n	80177e4 <arm_q7_to_float+0x74>
 8017776:	1d03      	adds	r3, r0, #4
 8017778:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 801777c:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8017834 <arm_q7_to_float+0xc4>
 8017780:	f101 0010 	add.w	r0, r1, #16
 8017784:	f913 ec04 	ldrsb.w	lr, [r3, #-4]
 8017788:	3010      	adds	r0, #16
 801778a:	ee07 ea90 	vmov	s15, lr
 801778e:	469e      	mov	lr, r3
 8017790:	3304      	adds	r3, #4
 8017792:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017796:	45e6      	cmp	lr, ip
 8017798:	ee67 7a87 	vmul.f32	s15, s15, s14
 801779c:	ed40 7a08 	vstr	s15, [r0, #-32]	; 0xffffffe0
 80177a0:	f913 5c07 	ldrsb.w	r5, [r3, #-7]
 80177a4:	ee07 5a90 	vmov	s15, r5
 80177a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80177ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80177b0:	ed40 7a07 	vstr	s15, [r0, #-28]	; 0xffffffe4
 80177b4:	f913 5c06 	ldrsb.w	r5, [r3, #-6]
 80177b8:	ee07 5a90 	vmov	s15, r5
 80177bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80177c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80177c4:	ed40 7a06 	vstr	s15, [r0, #-24]	; 0xffffffe8
 80177c8:	f913 5c05 	ldrsb.w	r5, [r3, #-5]
 80177cc:	ee07 5a90 	vmov	s15, r5
 80177d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80177d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80177d8:	ed40 7a05 	vstr	s15, [r0, #-20]	; 0xffffffec
 80177dc:	d1d2      	bne.n	8017784 <arm_q7_to_float+0x14>
 80177de:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 80177e2:	4660      	mov	r0, ip
 80177e4:	f012 0203 	ands.w	r2, r2, #3
 80177e8:	d023      	beq.n	8017832 <arm_q7_to_float+0xc2>
 80177ea:	f990 3000 	ldrsb.w	r3, [r0]
 80177ee:	3a01      	subs	r2, #1
 80177f0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8017834 <arm_q7_to_float+0xc4>
 80177f4:	ee07 3a90 	vmov	s15, r3
 80177f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80177fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017800:	edc1 7a00 	vstr	s15, [r1]
 8017804:	d015      	beq.n	8017832 <arm_q7_to_float+0xc2>
 8017806:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801780a:	2a01      	cmp	r2, #1
 801780c:	ee07 3a90 	vmov	s15, r3
 8017810:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017814:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017818:	edc1 7a01 	vstr	s15, [r1, #4]
 801781c:	d009      	beq.n	8017832 <arm_q7_to_float+0xc2>
 801781e:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8017822:	ee07 3a90 	vmov	s15, r3
 8017826:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801782a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801782e:	edc1 7a02 	vstr	s15, [r1, #8]
 8017832:	bd30      	pop	{r4, r5, pc}
 8017834:	3c000000 	.word	0x3c000000

08017838 <ai_version_get>:
 8017838:	0212      	lsls	r2, r2, #8
 801783a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801783e:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8017842:	4770      	bx	lr

08017844 <get_tensor_byte_size>:
 8017844:	b430      	push	{r4, r5}
 8017846:	6985      	ldr	r5, [r0, #24]
 8017848:	68c4      	ldr	r4, [r0, #12]
 801784a:	6941      	ldr	r1, [r0, #20]
 801784c:	4b06      	ldr	r3, [pc, #24]	; (8017868 <get_tensor_byte_size+0x24>)
 801784e:	6828      	ldr	r0, [r5, #0]
 8017850:	4a06      	ldr	r2, [pc, #24]	; (801786c <get_tensor_byte_size+0x28>)
 8017852:	4003      	ands	r3, r0
 8017854:	68c9      	ldr	r1, [r1, #12]
 8017856:	68e0      	ldr	r0, [r4, #12]
 8017858:	4293      	cmp	r3, r2
 801785a:	fb01 f000 	mul.w	r0, r1, r0
 801785e:	d101      	bne.n	8017864 <get_tensor_byte_size+0x20>
 8017860:	3007      	adds	r0, #7
 8017862:	08c0      	lsrs	r0, r0, #3
 8017864:	bc30      	pop	{r4, r5}
 8017866:	4770      	bx	lr
 8017868:	017fffff 	.word	0x017fffff
 801786c:	000400c0 	.word	0x000400c0

08017870 <ai_array_to_buffer_fmt>:
 8017870:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8017874:	2b02      	cmp	r3, #2
 8017876:	d050      	beq.n	801791a <ai_array_to_buffer_fmt+0xaa>
 8017878:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 801787c:	4b29      	ldr	r3, [pc, #164]	; (8017924 <ai_array_to_buffer_fmt+0xb4>)
 801787e:	429a      	cmp	r2, r3
 8017880:	d00b      	beq.n	801789a <ai_array_to_buffer_fmt+0x2a>
 8017882:	dc1c      	bgt.n	80178be <ai_array_to_buffer_fmt+0x4e>
 8017884:	4b28      	ldr	r3, [pc, #160]	; (8017928 <ai_array_to_buffer_fmt+0xb8>)
 8017886:	429a      	cmp	r2, r3
 8017888:	d007      	beq.n	801789a <ai_array_to_buffer_fmt+0x2a>
 801788a:	dd0b      	ble.n	80178a4 <ai_array_to_buffer_fmt+0x34>
 801788c:	4b27      	ldr	r3, [pc, #156]	; (801792c <ai_array_to_buffer_fmt+0xbc>)
 801788e:	429a      	cmp	r2, r3
 8017890:	d003      	beq.n	801789a <ai_array_to_buffer_fmt+0x2a>
 8017892:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8017896:	429a      	cmp	r2, r3
 8017898:	d131      	bne.n	80178fe <ai_array_to_buffer_fmt+0x8e>
 801789a:	4613      	mov	r3, r2
 801789c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80178a0:	4318      	orrs	r0, r3
 80178a2:	4770      	bx	lr
 80178a4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80178a8:	429a      	cmp	r2, r3
 80178aa:	d0f6      	beq.n	801789a <ai_array_to_buffer_fmt+0x2a>
 80178ac:	dd2c      	ble.n	8017908 <ai_array_to_buffer_fmt+0x98>
 80178ae:	4b20      	ldr	r3, [pc, #128]	; (8017930 <ai_array_to_buffer_fmt+0xc0>)
 80178b0:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80178b4:	429a      	cmp	r2, r3
 80178b6:	bf18      	it	ne
 80178b8:	2340      	movne	r3, #64	; 0x40
 80178ba:	4318      	orrs	r0, r3
 80178bc:	4770      	bx	lr
 80178be:	4b1d      	ldr	r3, [pc, #116]	; (8017934 <ai_array_to_buffer_fmt+0xc4>)
 80178c0:	429a      	cmp	r2, r3
 80178c2:	d0ea      	beq.n	801789a <ai_array_to_buffer_fmt+0x2a>
 80178c4:	dd0e      	ble.n	80178e4 <ai_array_to_buffer_fmt+0x74>
 80178c6:	4b1c      	ldr	r3, [pc, #112]	; (8017938 <ai_array_to_buffer_fmt+0xc8>)
 80178c8:	429a      	cmp	r2, r3
 80178ca:	d0e6      	beq.n	801789a <ai_array_to_buffer_fmt+0x2a>
 80178cc:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 80178d0:	429a      	cmp	r2, r3
 80178d2:	d0e2      	beq.n	801789a <ai_array_to_buffer_fmt+0x2a>
 80178d4:	4b19      	ldr	r3, [pc, #100]	; (801793c <ai_array_to_buffer_fmt+0xcc>)
 80178d6:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80178da:	429a      	cmp	r2, r3
 80178dc:	bf18      	it	ne
 80178de:	2340      	movne	r3, #64	; 0x40
 80178e0:	4318      	orrs	r0, r3
 80178e2:	4770      	bx	lr
 80178e4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80178e8:	429a      	cmp	r2, r3
 80178ea:	d0d6      	beq.n	801789a <ai_array_to_buffer_fmt+0x2a>
 80178ec:	3307      	adds	r3, #7
 80178ee:	429a      	cmp	r2, r3
 80178f0:	d0d3      	beq.n	801789a <ai_array_to_buffer_fmt+0x2a>
 80178f2:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 80178f6:	429a      	cmp	r2, r3
 80178f8:	bf18      	it	ne
 80178fa:	2340      	movne	r3, #64	; 0x40
 80178fc:	e7ce      	b.n	801789c <ai_array_to_buffer_fmt+0x2c>
 80178fe:	4b10      	ldr	r3, [pc, #64]	; (8017940 <ai_array_to_buffer_fmt+0xd0>)
 8017900:	429a      	cmp	r2, r3
 8017902:	bf18      	it	ne
 8017904:	2340      	movne	r3, #64	; 0x40
 8017906:	e7c9      	b.n	801789c <ai_array_to_buffer_fmt+0x2c>
 8017908:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 801790c:	429a      	cmp	r2, r3
 801790e:	d0c4      	beq.n	801789a <ai_array_to_buffer_fmt+0x2a>
 8017910:	3380      	adds	r3, #128	; 0x80
 8017912:	429a      	cmp	r2, r3
 8017914:	bf18      	it	ne
 8017916:	2340      	movne	r3, #64	; 0x40
 8017918:	e7c0      	b.n	801789c <ai_array_to_buffer_fmt+0x2c>
 801791a:	4b0a      	ldr	r3, [pc, #40]	; (8017944 <ai_array_to_buffer_fmt+0xd4>)
 801791c:	4003      	ands	r3, r0
 801791e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8017922:	e7bb      	b.n	801789c <ai_array_to_buffer_fmt+0x2c>
 8017924:	00840040 	.word	0x00840040
 8017928:	00040840 	.word	0x00040840
 801792c:	00041040 	.word	0x00041040
 8017930:	00040447 	.word	0x00040447
 8017934:	00840840 	.word	0x00840840
 8017938:	00841040 	.word	0x00841040
 801793c:	0084084f 	.word	0x0084084f
 8017940:	0004084f 	.word	0x0004084f
 8017944:	00803fff 	.word	0x00803fff

08017948 <ai_array_get_byte_size>:
 8017948:	b319      	cbz	r1, 8017992 <ai_array_get_byte_size+0x4a>
 801794a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 801794e:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8017952:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 8017956:	11c0      	asrs	r0, r0, #7
 8017958:	fb03 f101 	mul.w	r1, r3, r1
 801795c:	2a04      	cmp	r2, #4
 801795e:	f101 0107 	add.w	r1, r1, #7
 8017962:	f021 0107 	bic.w	r1, r1, #7
 8017966:	fa21 f10c 	lsr.w	r1, r1, ip
 801796a:	d00b      	beq.n	8017984 <ai_array_get_byte_size+0x3c>
 801796c:	2a08      	cmp	r2, #8
 801796e:	d002      	beq.n	8017976 <ai_array_get_byte_size+0x2e>
 8017970:	3107      	adds	r1, #7
 8017972:	08c8      	lsrs	r0, r1, #3
 8017974:	4770      	bx	lr
 8017976:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801797a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 801797e:	3107      	adds	r1, #7
 8017980:	08c8      	lsrs	r0, r1, #3
 8017982:	4770      	bx	lr
 8017984:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8017988:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 801798c:	3107      	adds	r1, #7
 801798e:	08c8      	lsrs	r0, r1, #3
 8017990:	4770      	bx	lr
 8017992:	4608      	mov	r0, r1
 8017994:	4770      	bx	lr
 8017996:	bf00      	nop

08017998 <ai_array_get_data_byte_size>:
 8017998:	b161      	cbz	r1, 80179b4 <ai_array_get_data_byte_size+0x1c>
 801799a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 801799e:	f3c0 5241 	ubfx	r2, r0, #21, #2
 80179a2:	fb03 f101 	mul.w	r1, r3, r1
 80179a6:	1dc8      	adds	r0, r1, #7
 80179a8:	f020 0007 	bic.w	r0, r0, #7
 80179ac:	40d0      	lsrs	r0, r2
 80179ae:	3007      	adds	r0, #7
 80179b0:	08c0      	lsrs	r0, r0, #3
 80179b2:	4770      	bx	lr
 80179b4:	4608      	mov	r0, r1
 80179b6:	4770      	bx	lr

080179b8 <core_get_broadcasted_shape>:
 80179b8:	b470      	push	{r4, r5, r6}
 80179ba:	6804      	ldr	r4, [r0, #0]
 80179bc:	f3c4 2417 	ubfx	r4, r4, #8, #24
 80179c0:	b304      	cbz	r4, 8017a04 <core_get_broadcasted_shape+0x4c>
 80179c2:	4623      	mov	r3, r4
 80179c4:	3b01      	subs	r3, #1
 80179c6:	429c      	cmp	r4, r3
 80179c8:	d917      	bls.n	80179fa <core_get_broadcasted_shape+0x42>
 80179ca:	6815      	ldr	r5, [r2, #0]
 80179cc:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 80179d0:	2401      	movs	r4, #1
 80179d2:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 80179d6:	d202      	bcs.n	80179de <core_get_broadcasted_shape+0x26>
 80179d8:	6854      	ldr	r4, [r2, #4]
 80179da:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 80179de:	680e      	ldr	r6, [r1, #0]
 80179e0:	2501      	movs	r5, #1
 80179e2:	ebb3 2f16 	cmp.w	r3, r6, lsr #8
 80179e6:	d202      	bcs.n	80179ee <core_get_broadcasted_shape+0x36>
 80179e8:	684d      	ldr	r5, [r1, #4]
 80179ea:	f855 500c 	ldr.w	r5, [r5, ip]
 80179ee:	42ac      	cmp	r4, r5
 80179f0:	bf38      	it	cc
 80179f2:	462c      	movcc	r4, r5
 80179f4:	6845      	ldr	r5, [r0, #4]
 80179f6:	f845 400c 	str.w	r4, [r5, ip]
 80179fa:	b11b      	cbz	r3, 8017a04 <core_get_broadcasted_shape+0x4c>
 80179fc:	6804      	ldr	r4, [r0, #0]
 80179fe:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8017a02:	e7df      	b.n	80179c4 <core_get_broadcasted_shape+0xc>
 8017a04:	bc70      	pop	{r4, r5, r6}
 8017a06:	4770      	bx	lr

08017a08 <core_compute_offsets_in_bytes>:
 8017a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a0c:	e9d1 5c00 	ldrd	r5, ip, [r1]
 8017a10:	6857      	ldr	r7, [r2, #4]
 8017a12:	b085      	sub	sp, #20
 8017a14:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8017a18:	687e      	ldr	r6, [r7, #4]
 8017a1a:	1ba1      	subs	r1, r4, r6
 8017a1c:	bf18      	it	ne
 8017a1e:	2101      	movne	r1, #1
 8017a20:	f5b5 6fa0 	cmp.w	r5, #1280	; 0x500
 8017a24:	9101      	str	r1, [sp, #4]
 8017a26:	f0c0 809c 	bcc.w	8017b62 <core_compute_offsets_in_bytes+0x15a>
 8017a2a:	f8dc 9010 	ldr.w	r9, [ip, #16]
 8017a2e:	fb09 fe04 	mul.w	lr, r9, r4
 8017a32:	6812      	ldr	r2, [r2, #0]
 8017a34:	f8d0 b000 	ldr.w	fp, [r0]
 8017a38:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8017a3c:	e9dc 5202 	ldrd	r5, r2, [ip, #8]
 8017a40:	bf2c      	ite	cs
 8017a42:	f8d7 a010 	ldrcs.w	sl, [r7, #16]
 8017a46:	f04f 0a01 	movcc.w	sl, #1
 8017a4a:	9202      	str	r2, [sp, #8]
 8017a4c:	ebb9 0c0a 	subs.w	ip, r9, sl
 8017a50:	e9d7 8202 	ldrd	r8, r2, [r7, #8]
 8017a54:	bf18      	it	ne
 8017a56:	f04f 0c01 	movne.w	ip, #1
 8017a5a:	ebb5 0708 	subs.w	r7, r5, r8
 8017a5e:	9203      	str	r2, [sp, #12]
 8017a60:	f3cb 2217 	ubfx	r2, fp, #8, #24
 8017a64:	bf18      	it	ne
 8017a66:	2701      	movne	r7, #1
 8017a68:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
 8017a6c:	d31f      	bcc.n	8017aae <core_compute_offsets_in_bytes+0xa6>
 8017a6e:	1ba2      	subs	r2, r4, r6
 8017a70:	6841      	ldr	r1, [r0, #4]
 8017a72:	fab2 f282 	clz	r2, r2
 8017a76:	0952      	lsrs	r2, r2, #5
 8017a78:	604a      	str	r2, [r1, #4]
 8017a7a:	f8d0 b000 	ldr.w	fp, [r0]
 8017a7e:	f5bb 6fa0 	cmp.w	fp, #1280	; 0x500
 8017a82:	f3cb 2217 	ubfx	r2, fp, #8, #24
 8017a86:	d312      	bcc.n	8017aae <core_compute_offsets_in_bytes+0xa6>
 8017a88:	9a01      	ldr	r2, [sp, #4]
 8017a8a:	45d1      	cmp	r9, sl
 8017a8c:	bf14      	ite	ne
 8017a8e:	2200      	movne	r2, #0
 8017a90:	f002 0201 	andeq.w	r2, r2, #1
 8017a94:	42b4      	cmp	r4, r6
 8017a96:	bf14      	ite	ne
 8017a98:	f04f 0900 	movne.w	r9, #0
 8017a9c:	f00c 0901 	andeq.w	r9, ip, #1
 8017aa0:	6846      	ldr	r6, [r0, #4]
 8017aa2:	fb04 2219 	mls	r2, r4, r9, r2
 8017aa6:	6132      	str	r2, [r6, #16]
 8017aa8:	6802      	ldr	r2, [r0, #0]
 8017aaa:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8017aae:	2a02      	cmp	r2, #2
 8017ab0:	fb0e f607 	mul.w	r6, lr, r7
 8017ab4:	d90f      	bls.n	8017ad6 <core_compute_offsets_in_bytes+0xce>
 8017ab6:	9a01      	ldr	r2, [sp, #4]
 8017ab8:	4545      	cmp	r5, r8
 8017aba:	bf14      	ite	ne
 8017abc:	2200      	movne	r2, #0
 8017abe:	f002 0201 	andeq.w	r2, r2, #1
 8017ac2:	ea0c 0202 	and.w	r2, ip, r2
 8017ac6:	1b92      	subs	r2, r2, r6
 8017ac8:	fb04 240c 	mla	r4, r4, ip, r2
 8017acc:	6842      	ldr	r2, [r0, #4]
 8017ace:	6094      	str	r4, [r2, #8]
 8017ad0:	6802      	ldr	r2, [r0, #0]
 8017ad2:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8017ad6:	e9dd 4102 	ldrd	r4, r1, [sp, #8]
 8017ada:	428c      	cmp	r4, r1
 8017adc:	d13f      	bne.n	8017b5e <core_compute_offsets_in_bytes+0x156>
 8017ade:	2f00      	cmp	r7, #0
 8017ae0:	d03d      	beq.n	8017b5e <core_compute_offsets_in_bytes+0x156>
 8017ae2:	9901      	ldr	r1, [sp, #4]
 8017ae4:	ea01 010c 	and.w	r1, r1, ip
 8017ae8:	2a03      	cmp	r2, #3
 8017aea:	d910      	bls.n	8017b0e <core_compute_offsets_in_bytes+0x106>
 8017aec:	fb0e f505 	mul.w	r5, lr, r5
 8017af0:	e9dd 2402 	ldrd	r2, r4, [sp, #8]
 8017af4:	ebb2 0c04 	subs.w	ip, r2, r4
 8017af8:	6842      	ldr	r2, [r0, #4]
 8017afa:	bf18      	it	ne
 8017afc:	f04f 0c01 	movne.w	ip, #1
 8017b00:	fb0c 1115 	mls	r1, ip, r5, r1
 8017b04:	440e      	add	r6, r1
 8017b06:	60d6      	str	r6, [r2, #12]
 8017b08:	6802      	ldr	r2, [r0, #0]
 8017b0a:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8017b0e:	2a01      	cmp	r2, #1
 8017b10:	d912      	bls.n	8017b38 <core_compute_offsets_in_bytes+0x130>
 8017b12:	6841      	ldr	r1, [r0, #4]
 8017b14:	684a      	ldr	r2, [r1, #4]
 8017b16:	fb03 f202 	mul.w	r2, r3, r2
 8017b1a:	604a      	str	r2, [r1, #4]
 8017b1c:	6801      	ldr	r1, [r0, #0]
 8017b1e:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 8017b22:	f3c1 2217 	ubfx	r2, r1, #8, #24
 8017b26:	d307      	bcc.n	8017b38 <core_compute_offsets_in_bytes+0x130>
 8017b28:	6841      	ldr	r1, [r0, #4]
 8017b2a:	690a      	ldr	r2, [r1, #16]
 8017b2c:	fb03 f202 	mul.w	r2, r3, r2
 8017b30:	610a      	str	r2, [r1, #16]
 8017b32:	6802      	ldr	r2, [r0, #0]
 8017b34:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8017b38:	2a02      	cmp	r2, #2
 8017b3a:	d90d      	bls.n	8017b58 <core_compute_offsets_in_bytes+0x150>
 8017b3c:	6841      	ldr	r1, [r0, #4]
 8017b3e:	688a      	ldr	r2, [r1, #8]
 8017b40:	fb03 f202 	mul.w	r2, r3, r2
 8017b44:	608a      	str	r2, [r1, #8]
 8017b46:	6802      	ldr	r2, [r0, #0]
 8017b48:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8017b4c:	d304      	bcc.n	8017b58 <core_compute_offsets_in_bytes+0x150>
 8017b4e:	6841      	ldr	r1, [r0, #4]
 8017b50:	68ca      	ldr	r2, [r1, #12]
 8017b52:	fb02 f303 	mul.w	r3, r2, r3
 8017b56:	60cb      	str	r3, [r1, #12]
 8017b58:	b005      	add	sp, #20
 8017b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b5e:	2100      	movs	r1, #0
 8017b60:	e7c2      	b.n	8017ae8 <core_compute_offsets_in_bytes+0xe0>
 8017b62:	46a6      	mov	lr, r4
 8017b64:	f04f 0901 	mov.w	r9, #1
 8017b68:	e763      	b.n	8017a32 <core_compute_offsets_in_bytes+0x2a>
 8017b6a:	bf00      	nop

08017b6c <__errno>:
 8017b6c:	4b01      	ldr	r3, [pc, #4]	; (8017b74 <__errno+0x8>)
 8017b6e:	6818      	ldr	r0, [r3, #0]
 8017b70:	4770      	bx	lr
 8017b72:	bf00      	nop
 8017b74:	240034c0 	.word	0x240034c0

08017b78 <__libc_init_array>:
 8017b78:	b570      	push	{r4, r5, r6, lr}
 8017b7a:	4d0d      	ldr	r5, [pc, #52]	; (8017bb0 <__libc_init_array+0x38>)
 8017b7c:	4c0d      	ldr	r4, [pc, #52]	; (8017bb4 <__libc_init_array+0x3c>)
 8017b7e:	1b64      	subs	r4, r4, r5
 8017b80:	10a4      	asrs	r4, r4, #2
 8017b82:	2600      	movs	r6, #0
 8017b84:	42a6      	cmp	r6, r4
 8017b86:	d109      	bne.n	8017b9c <__libc_init_array+0x24>
 8017b88:	4d0b      	ldr	r5, [pc, #44]	; (8017bb8 <__libc_init_array+0x40>)
 8017b8a:	4c0c      	ldr	r4, [pc, #48]	; (8017bbc <__libc_init_array+0x44>)
 8017b8c:	f001 fb3c 	bl	8019208 <_init>
 8017b90:	1b64      	subs	r4, r4, r5
 8017b92:	10a4      	asrs	r4, r4, #2
 8017b94:	2600      	movs	r6, #0
 8017b96:	42a6      	cmp	r6, r4
 8017b98:	d105      	bne.n	8017ba6 <__libc_init_array+0x2e>
 8017b9a:	bd70      	pop	{r4, r5, r6, pc}
 8017b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8017ba0:	4798      	blx	r3
 8017ba2:	3601      	adds	r6, #1
 8017ba4:	e7ee      	b.n	8017b84 <__libc_init_array+0xc>
 8017ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8017baa:	4798      	blx	r3
 8017bac:	3601      	adds	r6, #1
 8017bae:	e7f2      	b.n	8017b96 <__libc_init_array+0x1e>
 8017bb0:	080206a8 	.word	0x080206a8
 8017bb4:	080206a8 	.word	0x080206a8
 8017bb8:	080206a8 	.word	0x080206a8
 8017bbc:	080206ac 	.word	0x080206ac

08017bc0 <malloc>:
 8017bc0:	4b02      	ldr	r3, [pc, #8]	; (8017bcc <malloc+0xc>)
 8017bc2:	4601      	mov	r1, r0
 8017bc4:	6818      	ldr	r0, [r3, #0]
 8017bc6:	f000 b885 	b.w	8017cd4 <_malloc_r>
 8017bca:	bf00      	nop
 8017bcc:	240034c0 	.word	0x240034c0

08017bd0 <memcpy>:
 8017bd0:	440a      	add	r2, r1
 8017bd2:	4291      	cmp	r1, r2
 8017bd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8017bd8:	d100      	bne.n	8017bdc <memcpy+0xc>
 8017bda:	4770      	bx	lr
 8017bdc:	b510      	push	{r4, lr}
 8017bde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017be2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017be6:	4291      	cmp	r1, r2
 8017be8:	d1f9      	bne.n	8017bde <memcpy+0xe>
 8017bea:	bd10      	pop	{r4, pc}

08017bec <memset>:
 8017bec:	4402      	add	r2, r0
 8017bee:	4603      	mov	r3, r0
 8017bf0:	4293      	cmp	r3, r2
 8017bf2:	d100      	bne.n	8017bf6 <memset+0xa>
 8017bf4:	4770      	bx	lr
 8017bf6:	f803 1b01 	strb.w	r1, [r3], #1
 8017bfa:	e7f9      	b.n	8017bf0 <memset+0x4>

08017bfc <_free_r>:
 8017bfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017bfe:	2900      	cmp	r1, #0
 8017c00:	d044      	beq.n	8017c8c <_free_r+0x90>
 8017c02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017c06:	9001      	str	r0, [sp, #4]
 8017c08:	2b00      	cmp	r3, #0
 8017c0a:	f1a1 0404 	sub.w	r4, r1, #4
 8017c0e:	bfb8      	it	lt
 8017c10:	18e4      	addlt	r4, r4, r3
 8017c12:	f000 fd17 	bl	8018644 <__malloc_lock>
 8017c16:	4a1e      	ldr	r2, [pc, #120]	; (8017c90 <_free_r+0x94>)
 8017c18:	9801      	ldr	r0, [sp, #4]
 8017c1a:	6813      	ldr	r3, [r2, #0]
 8017c1c:	b933      	cbnz	r3, 8017c2c <_free_r+0x30>
 8017c1e:	6063      	str	r3, [r4, #4]
 8017c20:	6014      	str	r4, [r2, #0]
 8017c22:	b003      	add	sp, #12
 8017c24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017c28:	f000 bd12 	b.w	8018650 <__malloc_unlock>
 8017c2c:	42a3      	cmp	r3, r4
 8017c2e:	d908      	bls.n	8017c42 <_free_r+0x46>
 8017c30:	6825      	ldr	r5, [r4, #0]
 8017c32:	1961      	adds	r1, r4, r5
 8017c34:	428b      	cmp	r3, r1
 8017c36:	bf01      	itttt	eq
 8017c38:	6819      	ldreq	r1, [r3, #0]
 8017c3a:	685b      	ldreq	r3, [r3, #4]
 8017c3c:	1949      	addeq	r1, r1, r5
 8017c3e:	6021      	streq	r1, [r4, #0]
 8017c40:	e7ed      	b.n	8017c1e <_free_r+0x22>
 8017c42:	461a      	mov	r2, r3
 8017c44:	685b      	ldr	r3, [r3, #4]
 8017c46:	b10b      	cbz	r3, 8017c4c <_free_r+0x50>
 8017c48:	42a3      	cmp	r3, r4
 8017c4a:	d9fa      	bls.n	8017c42 <_free_r+0x46>
 8017c4c:	6811      	ldr	r1, [r2, #0]
 8017c4e:	1855      	adds	r5, r2, r1
 8017c50:	42a5      	cmp	r5, r4
 8017c52:	d10b      	bne.n	8017c6c <_free_r+0x70>
 8017c54:	6824      	ldr	r4, [r4, #0]
 8017c56:	4421      	add	r1, r4
 8017c58:	1854      	adds	r4, r2, r1
 8017c5a:	42a3      	cmp	r3, r4
 8017c5c:	6011      	str	r1, [r2, #0]
 8017c5e:	d1e0      	bne.n	8017c22 <_free_r+0x26>
 8017c60:	681c      	ldr	r4, [r3, #0]
 8017c62:	685b      	ldr	r3, [r3, #4]
 8017c64:	6053      	str	r3, [r2, #4]
 8017c66:	4421      	add	r1, r4
 8017c68:	6011      	str	r1, [r2, #0]
 8017c6a:	e7da      	b.n	8017c22 <_free_r+0x26>
 8017c6c:	d902      	bls.n	8017c74 <_free_r+0x78>
 8017c6e:	230c      	movs	r3, #12
 8017c70:	6003      	str	r3, [r0, #0]
 8017c72:	e7d6      	b.n	8017c22 <_free_r+0x26>
 8017c74:	6825      	ldr	r5, [r4, #0]
 8017c76:	1961      	adds	r1, r4, r5
 8017c78:	428b      	cmp	r3, r1
 8017c7a:	bf04      	itt	eq
 8017c7c:	6819      	ldreq	r1, [r3, #0]
 8017c7e:	685b      	ldreq	r3, [r3, #4]
 8017c80:	6063      	str	r3, [r4, #4]
 8017c82:	bf04      	itt	eq
 8017c84:	1949      	addeq	r1, r1, r5
 8017c86:	6021      	streq	r1, [r4, #0]
 8017c88:	6054      	str	r4, [r2, #4]
 8017c8a:	e7ca      	b.n	8017c22 <_free_r+0x26>
 8017c8c:	b003      	add	sp, #12
 8017c8e:	bd30      	pop	{r4, r5, pc}
 8017c90:	2402170c 	.word	0x2402170c

08017c94 <sbrk_aligned>:
 8017c94:	b570      	push	{r4, r5, r6, lr}
 8017c96:	4e0e      	ldr	r6, [pc, #56]	; (8017cd0 <sbrk_aligned+0x3c>)
 8017c98:	460c      	mov	r4, r1
 8017c9a:	6831      	ldr	r1, [r6, #0]
 8017c9c:	4605      	mov	r5, r0
 8017c9e:	b911      	cbnz	r1, 8017ca6 <sbrk_aligned+0x12>
 8017ca0:	f000 f91a 	bl	8017ed8 <_sbrk_r>
 8017ca4:	6030      	str	r0, [r6, #0]
 8017ca6:	4621      	mov	r1, r4
 8017ca8:	4628      	mov	r0, r5
 8017caa:	f000 f915 	bl	8017ed8 <_sbrk_r>
 8017cae:	1c43      	adds	r3, r0, #1
 8017cb0:	d00a      	beq.n	8017cc8 <sbrk_aligned+0x34>
 8017cb2:	1cc4      	adds	r4, r0, #3
 8017cb4:	f024 0403 	bic.w	r4, r4, #3
 8017cb8:	42a0      	cmp	r0, r4
 8017cba:	d007      	beq.n	8017ccc <sbrk_aligned+0x38>
 8017cbc:	1a21      	subs	r1, r4, r0
 8017cbe:	4628      	mov	r0, r5
 8017cc0:	f000 f90a 	bl	8017ed8 <_sbrk_r>
 8017cc4:	3001      	adds	r0, #1
 8017cc6:	d101      	bne.n	8017ccc <sbrk_aligned+0x38>
 8017cc8:	f04f 34ff 	mov.w	r4, #4294967295
 8017ccc:	4620      	mov	r0, r4
 8017cce:	bd70      	pop	{r4, r5, r6, pc}
 8017cd0:	24021710 	.word	0x24021710

08017cd4 <_malloc_r>:
 8017cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cd8:	1ccd      	adds	r5, r1, #3
 8017cda:	f025 0503 	bic.w	r5, r5, #3
 8017cde:	3508      	adds	r5, #8
 8017ce0:	2d0c      	cmp	r5, #12
 8017ce2:	bf38      	it	cc
 8017ce4:	250c      	movcc	r5, #12
 8017ce6:	2d00      	cmp	r5, #0
 8017ce8:	4607      	mov	r7, r0
 8017cea:	db01      	blt.n	8017cf0 <_malloc_r+0x1c>
 8017cec:	42a9      	cmp	r1, r5
 8017cee:	d905      	bls.n	8017cfc <_malloc_r+0x28>
 8017cf0:	230c      	movs	r3, #12
 8017cf2:	603b      	str	r3, [r7, #0]
 8017cf4:	2600      	movs	r6, #0
 8017cf6:	4630      	mov	r0, r6
 8017cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017cfc:	4e2e      	ldr	r6, [pc, #184]	; (8017db8 <_malloc_r+0xe4>)
 8017cfe:	f000 fca1 	bl	8018644 <__malloc_lock>
 8017d02:	6833      	ldr	r3, [r6, #0]
 8017d04:	461c      	mov	r4, r3
 8017d06:	bb34      	cbnz	r4, 8017d56 <_malloc_r+0x82>
 8017d08:	4629      	mov	r1, r5
 8017d0a:	4638      	mov	r0, r7
 8017d0c:	f7ff ffc2 	bl	8017c94 <sbrk_aligned>
 8017d10:	1c43      	adds	r3, r0, #1
 8017d12:	4604      	mov	r4, r0
 8017d14:	d14d      	bne.n	8017db2 <_malloc_r+0xde>
 8017d16:	6834      	ldr	r4, [r6, #0]
 8017d18:	4626      	mov	r6, r4
 8017d1a:	2e00      	cmp	r6, #0
 8017d1c:	d140      	bne.n	8017da0 <_malloc_r+0xcc>
 8017d1e:	6823      	ldr	r3, [r4, #0]
 8017d20:	4631      	mov	r1, r6
 8017d22:	4638      	mov	r0, r7
 8017d24:	eb04 0803 	add.w	r8, r4, r3
 8017d28:	f000 f8d6 	bl	8017ed8 <_sbrk_r>
 8017d2c:	4580      	cmp	r8, r0
 8017d2e:	d13a      	bne.n	8017da6 <_malloc_r+0xd2>
 8017d30:	6821      	ldr	r1, [r4, #0]
 8017d32:	3503      	adds	r5, #3
 8017d34:	1a6d      	subs	r5, r5, r1
 8017d36:	f025 0503 	bic.w	r5, r5, #3
 8017d3a:	3508      	adds	r5, #8
 8017d3c:	2d0c      	cmp	r5, #12
 8017d3e:	bf38      	it	cc
 8017d40:	250c      	movcc	r5, #12
 8017d42:	4629      	mov	r1, r5
 8017d44:	4638      	mov	r0, r7
 8017d46:	f7ff ffa5 	bl	8017c94 <sbrk_aligned>
 8017d4a:	3001      	adds	r0, #1
 8017d4c:	d02b      	beq.n	8017da6 <_malloc_r+0xd2>
 8017d4e:	6823      	ldr	r3, [r4, #0]
 8017d50:	442b      	add	r3, r5
 8017d52:	6023      	str	r3, [r4, #0]
 8017d54:	e00e      	b.n	8017d74 <_malloc_r+0xa0>
 8017d56:	6822      	ldr	r2, [r4, #0]
 8017d58:	1b52      	subs	r2, r2, r5
 8017d5a:	d41e      	bmi.n	8017d9a <_malloc_r+0xc6>
 8017d5c:	2a0b      	cmp	r2, #11
 8017d5e:	d916      	bls.n	8017d8e <_malloc_r+0xba>
 8017d60:	1961      	adds	r1, r4, r5
 8017d62:	42a3      	cmp	r3, r4
 8017d64:	6025      	str	r5, [r4, #0]
 8017d66:	bf18      	it	ne
 8017d68:	6059      	strne	r1, [r3, #4]
 8017d6a:	6863      	ldr	r3, [r4, #4]
 8017d6c:	bf08      	it	eq
 8017d6e:	6031      	streq	r1, [r6, #0]
 8017d70:	5162      	str	r2, [r4, r5]
 8017d72:	604b      	str	r3, [r1, #4]
 8017d74:	4638      	mov	r0, r7
 8017d76:	f104 060b 	add.w	r6, r4, #11
 8017d7a:	f000 fc69 	bl	8018650 <__malloc_unlock>
 8017d7e:	f026 0607 	bic.w	r6, r6, #7
 8017d82:	1d23      	adds	r3, r4, #4
 8017d84:	1af2      	subs	r2, r6, r3
 8017d86:	d0b6      	beq.n	8017cf6 <_malloc_r+0x22>
 8017d88:	1b9b      	subs	r3, r3, r6
 8017d8a:	50a3      	str	r3, [r4, r2]
 8017d8c:	e7b3      	b.n	8017cf6 <_malloc_r+0x22>
 8017d8e:	6862      	ldr	r2, [r4, #4]
 8017d90:	42a3      	cmp	r3, r4
 8017d92:	bf0c      	ite	eq
 8017d94:	6032      	streq	r2, [r6, #0]
 8017d96:	605a      	strne	r2, [r3, #4]
 8017d98:	e7ec      	b.n	8017d74 <_malloc_r+0xa0>
 8017d9a:	4623      	mov	r3, r4
 8017d9c:	6864      	ldr	r4, [r4, #4]
 8017d9e:	e7b2      	b.n	8017d06 <_malloc_r+0x32>
 8017da0:	4634      	mov	r4, r6
 8017da2:	6876      	ldr	r6, [r6, #4]
 8017da4:	e7b9      	b.n	8017d1a <_malloc_r+0x46>
 8017da6:	230c      	movs	r3, #12
 8017da8:	603b      	str	r3, [r7, #0]
 8017daa:	4638      	mov	r0, r7
 8017dac:	f000 fc50 	bl	8018650 <__malloc_unlock>
 8017db0:	e7a1      	b.n	8017cf6 <_malloc_r+0x22>
 8017db2:	6025      	str	r5, [r4, #0]
 8017db4:	e7de      	b.n	8017d74 <_malloc_r+0xa0>
 8017db6:	bf00      	nop
 8017db8:	2402170c 	.word	0x2402170c

08017dbc <iprintf>:
 8017dbc:	b40f      	push	{r0, r1, r2, r3}
 8017dbe:	4b0a      	ldr	r3, [pc, #40]	; (8017de8 <iprintf+0x2c>)
 8017dc0:	b513      	push	{r0, r1, r4, lr}
 8017dc2:	681c      	ldr	r4, [r3, #0]
 8017dc4:	b124      	cbz	r4, 8017dd0 <iprintf+0x14>
 8017dc6:	69a3      	ldr	r3, [r4, #24]
 8017dc8:	b913      	cbnz	r3, 8017dd0 <iprintf+0x14>
 8017dca:	4620      	mov	r0, r4
 8017dcc:	f000 fb34 	bl	8018438 <__sinit>
 8017dd0:	ab05      	add	r3, sp, #20
 8017dd2:	9a04      	ldr	r2, [sp, #16]
 8017dd4:	68a1      	ldr	r1, [r4, #8]
 8017dd6:	9301      	str	r3, [sp, #4]
 8017dd8:	4620      	mov	r0, r4
 8017dda:	f000 fc69 	bl	80186b0 <_vfiprintf_r>
 8017dde:	b002      	add	sp, #8
 8017de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017de4:	b004      	add	sp, #16
 8017de6:	4770      	bx	lr
 8017de8:	240034c0 	.word	0x240034c0

08017dec <_puts_r>:
 8017dec:	b570      	push	{r4, r5, r6, lr}
 8017dee:	460e      	mov	r6, r1
 8017df0:	4605      	mov	r5, r0
 8017df2:	b118      	cbz	r0, 8017dfc <_puts_r+0x10>
 8017df4:	6983      	ldr	r3, [r0, #24]
 8017df6:	b90b      	cbnz	r3, 8017dfc <_puts_r+0x10>
 8017df8:	f000 fb1e 	bl	8018438 <__sinit>
 8017dfc:	69ab      	ldr	r3, [r5, #24]
 8017dfe:	68ac      	ldr	r4, [r5, #8]
 8017e00:	b913      	cbnz	r3, 8017e08 <_puts_r+0x1c>
 8017e02:	4628      	mov	r0, r5
 8017e04:	f000 fb18 	bl	8018438 <__sinit>
 8017e08:	4b2c      	ldr	r3, [pc, #176]	; (8017ebc <_puts_r+0xd0>)
 8017e0a:	429c      	cmp	r4, r3
 8017e0c:	d120      	bne.n	8017e50 <_puts_r+0x64>
 8017e0e:	686c      	ldr	r4, [r5, #4]
 8017e10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017e12:	07db      	lsls	r3, r3, #31
 8017e14:	d405      	bmi.n	8017e22 <_puts_r+0x36>
 8017e16:	89a3      	ldrh	r3, [r4, #12]
 8017e18:	0598      	lsls	r0, r3, #22
 8017e1a:	d402      	bmi.n	8017e22 <_puts_r+0x36>
 8017e1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017e1e:	f000 fba9 	bl	8018574 <__retarget_lock_acquire_recursive>
 8017e22:	89a3      	ldrh	r3, [r4, #12]
 8017e24:	0719      	lsls	r1, r3, #28
 8017e26:	d51d      	bpl.n	8017e64 <_puts_r+0x78>
 8017e28:	6923      	ldr	r3, [r4, #16]
 8017e2a:	b1db      	cbz	r3, 8017e64 <_puts_r+0x78>
 8017e2c:	3e01      	subs	r6, #1
 8017e2e:	68a3      	ldr	r3, [r4, #8]
 8017e30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8017e34:	3b01      	subs	r3, #1
 8017e36:	60a3      	str	r3, [r4, #8]
 8017e38:	bb39      	cbnz	r1, 8017e8a <_puts_r+0x9e>
 8017e3a:	2b00      	cmp	r3, #0
 8017e3c:	da38      	bge.n	8017eb0 <_puts_r+0xc4>
 8017e3e:	4622      	mov	r2, r4
 8017e40:	210a      	movs	r1, #10
 8017e42:	4628      	mov	r0, r5
 8017e44:	f000 f91e 	bl	8018084 <__swbuf_r>
 8017e48:	3001      	adds	r0, #1
 8017e4a:	d011      	beq.n	8017e70 <_puts_r+0x84>
 8017e4c:	250a      	movs	r5, #10
 8017e4e:	e011      	b.n	8017e74 <_puts_r+0x88>
 8017e50:	4b1b      	ldr	r3, [pc, #108]	; (8017ec0 <_puts_r+0xd4>)
 8017e52:	429c      	cmp	r4, r3
 8017e54:	d101      	bne.n	8017e5a <_puts_r+0x6e>
 8017e56:	68ac      	ldr	r4, [r5, #8]
 8017e58:	e7da      	b.n	8017e10 <_puts_r+0x24>
 8017e5a:	4b1a      	ldr	r3, [pc, #104]	; (8017ec4 <_puts_r+0xd8>)
 8017e5c:	429c      	cmp	r4, r3
 8017e5e:	bf08      	it	eq
 8017e60:	68ec      	ldreq	r4, [r5, #12]
 8017e62:	e7d5      	b.n	8017e10 <_puts_r+0x24>
 8017e64:	4621      	mov	r1, r4
 8017e66:	4628      	mov	r0, r5
 8017e68:	f000 f95e 	bl	8018128 <__swsetup_r>
 8017e6c:	2800      	cmp	r0, #0
 8017e6e:	d0dd      	beq.n	8017e2c <_puts_r+0x40>
 8017e70:	f04f 35ff 	mov.w	r5, #4294967295
 8017e74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017e76:	07da      	lsls	r2, r3, #31
 8017e78:	d405      	bmi.n	8017e86 <_puts_r+0x9a>
 8017e7a:	89a3      	ldrh	r3, [r4, #12]
 8017e7c:	059b      	lsls	r3, r3, #22
 8017e7e:	d402      	bmi.n	8017e86 <_puts_r+0x9a>
 8017e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017e82:	f000 fb78 	bl	8018576 <__retarget_lock_release_recursive>
 8017e86:	4628      	mov	r0, r5
 8017e88:	bd70      	pop	{r4, r5, r6, pc}
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	da04      	bge.n	8017e98 <_puts_r+0xac>
 8017e8e:	69a2      	ldr	r2, [r4, #24]
 8017e90:	429a      	cmp	r2, r3
 8017e92:	dc06      	bgt.n	8017ea2 <_puts_r+0xb6>
 8017e94:	290a      	cmp	r1, #10
 8017e96:	d004      	beq.n	8017ea2 <_puts_r+0xb6>
 8017e98:	6823      	ldr	r3, [r4, #0]
 8017e9a:	1c5a      	adds	r2, r3, #1
 8017e9c:	6022      	str	r2, [r4, #0]
 8017e9e:	7019      	strb	r1, [r3, #0]
 8017ea0:	e7c5      	b.n	8017e2e <_puts_r+0x42>
 8017ea2:	4622      	mov	r2, r4
 8017ea4:	4628      	mov	r0, r5
 8017ea6:	f000 f8ed 	bl	8018084 <__swbuf_r>
 8017eaa:	3001      	adds	r0, #1
 8017eac:	d1bf      	bne.n	8017e2e <_puts_r+0x42>
 8017eae:	e7df      	b.n	8017e70 <_puts_r+0x84>
 8017eb0:	6823      	ldr	r3, [r4, #0]
 8017eb2:	250a      	movs	r5, #10
 8017eb4:	1c5a      	adds	r2, r3, #1
 8017eb6:	6022      	str	r2, [r4, #0]
 8017eb8:	701d      	strb	r5, [r3, #0]
 8017eba:	e7db      	b.n	8017e74 <_puts_r+0x88>
 8017ebc:	080203bc 	.word	0x080203bc
 8017ec0:	080203dc 	.word	0x080203dc
 8017ec4:	0802039c 	.word	0x0802039c

08017ec8 <puts>:
 8017ec8:	4b02      	ldr	r3, [pc, #8]	; (8017ed4 <puts+0xc>)
 8017eca:	4601      	mov	r1, r0
 8017ecc:	6818      	ldr	r0, [r3, #0]
 8017ece:	f7ff bf8d 	b.w	8017dec <_puts_r>
 8017ed2:	bf00      	nop
 8017ed4:	240034c0 	.word	0x240034c0

08017ed8 <_sbrk_r>:
 8017ed8:	b538      	push	{r3, r4, r5, lr}
 8017eda:	4d06      	ldr	r5, [pc, #24]	; (8017ef4 <_sbrk_r+0x1c>)
 8017edc:	2300      	movs	r3, #0
 8017ede:	4604      	mov	r4, r0
 8017ee0:	4608      	mov	r0, r1
 8017ee2:	602b      	str	r3, [r5, #0]
 8017ee4:	f7ec fa2c 	bl	8004340 <_sbrk>
 8017ee8:	1c43      	adds	r3, r0, #1
 8017eea:	d102      	bne.n	8017ef2 <_sbrk_r+0x1a>
 8017eec:	682b      	ldr	r3, [r5, #0]
 8017eee:	b103      	cbz	r3, 8017ef2 <_sbrk_r+0x1a>
 8017ef0:	6023      	str	r3, [r4, #0]
 8017ef2:	bd38      	pop	{r3, r4, r5, pc}
 8017ef4:	24021718 	.word	0x24021718

08017ef8 <setvbuf>:
 8017ef8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017efc:	461d      	mov	r5, r3
 8017efe:	4b5d      	ldr	r3, [pc, #372]	; (8018074 <setvbuf+0x17c>)
 8017f00:	681f      	ldr	r7, [r3, #0]
 8017f02:	4604      	mov	r4, r0
 8017f04:	460e      	mov	r6, r1
 8017f06:	4690      	mov	r8, r2
 8017f08:	b127      	cbz	r7, 8017f14 <setvbuf+0x1c>
 8017f0a:	69bb      	ldr	r3, [r7, #24]
 8017f0c:	b913      	cbnz	r3, 8017f14 <setvbuf+0x1c>
 8017f0e:	4638      	mov	r0, r7
 8017f10:	f000 fa92 	bl	8018438 <__sinit>
 8017f14:	4b58      	ldr	r3, [pc, #352]	; (8018078 <setvbuf+0x180>)
 8017f16:	429c      	cmp	r4, r3
 8017f18:	d167      	bne.n	8017fea <setvbuf+0xf2>
 8017f1a:	687c      	ldr	r4, [r7, #4]
 8017f1c:	f1b8 0f02 	cmp.w	r8, #2
 8017f20:	d006      	beq.n	8017f30 <setvbuf+0x38>
 8017f22:	f1b8 0f01 	cmp.w	r8, #1
 8017f26:	f200 809f 	bhi.w	8018068 <setvbuf+0x170>
 8017f2a:	2d00      	cmp	r5, #0
 8017f2c:	f2c0 809c 	blt.w	8018068 <setvbuf+0x170>
 8017f30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017f32:	07db      	lsls	r3, r3, #31
 8017f34:	d405      	bmi.n	8017f42 <setvbuf+0x4a>
 8017f36:	89a3      	ldrh	r3, [r4, #12]
 8017f38:	0598      	lsls	r0, r3, #22
 8017f3a:	d402      	bmi.n	8017f42 <setvbuf+0x4a>
 8017f3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017f3e:	f000 fb19 	bl	8018574 <__retarget_lock_acquire_recursive>
 8017f42:	4621      	mov	r1, r4
 8017f44:	4638      	mov	r0, r7
 8017f46:	f000 f9e3 	bl	8018310 <_fflush_r>
 8017f4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017f4c:	b141      	cbz	r1, 8017f60 <setvbuf+0x68>
 8017f4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017f52:	4299      	cmp	r1, r3
 8017f54:	d002      	beq.n	8017f5c <setvbuf+0x64>
 8017f56:	4638      	mov	r0, r7
 8017f58:	f7ff fe50 	bl	8017bfc <_free_r>
 8017f5c:	2300      	movs	r3, #0
 8017f5e:	6363      	str	r3, [r4, #52]	; 0x34
 8017f60:	2300      	movs	r3, #0
 8017f62:	61a3      	str	r3, [r4, #24]
 8017f64:	6063      	str	r3, [r4, #4]
 8017f66:	89a3      	ldrh	r3, [r4, #12]
 8017f68:	0619      	lsls	r1, r3, #24
 8017f6a:	d503      	bpl.n	8017f74 <setvbuf+0x7c>
 8017f6c:	6921      	ldr	r1, [r4, #16]
 8017f6e:	4638      	mov	r0, r7
 8017f70:	f7ff fe44 	bl	8017bfc <_free_r>
 8017f74:	89a3      	ldrh	r3, [r4, #12]
 8017f76:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8017f7a:	f023 0303 	bic.w	r3, r3, #3
 8017f7e:	f1b8 0f02 	cmp.w	r8, #2
 8017f82:	81a3      	strh	r3, [r4, #12]
 8017f84:	d06c      	beq.n	8018060 <setvbuf+0x168>
 8017f86:	ab01      	add	r3, sp, #4
 8017f88:	466a      	mov	r2, sp
 8017f8a:	4621      	mov	r1, r4
 8017f8c:	4638      	mov	r0, r7
 8017f8e:	f000 faf3 	bl	8018578 <__swhatbuf_r>
 8017f92:	89a3      	ldrh	r3, [r4, #12]
 8017f94:	4318      	orrs	r0, r3
 8017f96:	81a0      	strh	r0, [r4, #12]
 8017f98:	2d00      	cmp	r5, #0
 8017f9a:	d130      	bne.n	8017ffe <setvbuf+0x106>
 8017f9c:	9d00      	ldr	r5, [sp, #0]
 8017f9e:	4628      	mov	r0, r5
 8017fa0:	f7ff fe0e 	bl	8017bc0 <malloc>
 8017fa4:	4606      	mov	r6, r0
 8017fa6:	2800      	cmp	r0, #0
 8017fa8:	d155      	bne.n	8018056 <setvbuf+0x15e>
 8017faa:	f8dd 9000 	ldr.w	r9, [sp]
 8017fae:	45a9      	cmp	r9, r5
 8017fb0:	d14a      	bne.n	8018048 <setvbuf+0x150>
 8017fb2:	f04f 35ff 	mov.w	r5, #4294967295
 8017fb6:	2200      	movs	r2, #0
 8017fb8:	60a2      	str	r2, [r4, #8]
 8017fba:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8017fbe:	6022      	str	r2, [r4, #0]
 8017fc0:	6122      	str	r2, [r4, #16]
 8017fc2:	2201      	movs	r2, #1
 8017fc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017fc8:	6162      	str	r2, [r4, #20]
 8017fca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017fcc:	f043 0302 	orr.w	r3, r3, #2
 8017fd0:	07d2      	lsls	r2, r2, #31
 8017fd2:	81a3      	strh	r3, [r4, #12]
 8017fd4:	d405      	bmi.n	8017fe2 <setvbuf+0xea>
 8017fd6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8017fda:	d102      	bne.n	8017fe2 <setvbuf+0xea>
 8017fdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017fde:	f000 faca 	bl	8018576 <__retarget_lock_release_recursive>
 8017fe2:	4628      	mov	r0, r5
 8017fe4:	b003      	add	sp, #12
 8017fe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017fea:	4b24      	ldr	r3, [pc, #144]	; (801807c <setvbuf+0x184>)
 8017fec:	429c      	cmp	r4, r3
 8017fee:	d101      	bne.n	8017ff4 <setvbuf+0xfc>
 8017ff0:	68bc      	ldr	r4, [r7, #8]
 8017ff2:	e793      	b.n	8017f1c <setvbuf+0x24>
 8017ff4:	4b22      	ldr	r3, [pc, #136]	; (8018080 <setvbuf+0x188>)
 8017ff6:	429c      	cmp	r4, r3
 8017ff8:	bf08      	it	eq
 8017ffa:	68fc      	ldreq	r4, [r7, #12]
 8017ffc:	e78e      	b.n	8017f1c <setvbuf+0x24>
 8017ffe:	2e00      	cmp	r6, #0
 8018000:	d0cd      	beq.n	8017f9e <setvbuf+0xa6>
 8018002:	69bb      	ldr	r3, [r7, #24]
 8018004:	b913      	cbnz	r3, 801800c <setvbuf+0x114>
 8018006:	4638      	mov	r0, r7
 8018008:	f000 fa16 	bl	8018438 <__sinit>
 801800c:	f1b8 0f01 	cmp.w	r8, #1
 8018010:	bf08      	it	eq
 8018012:	89a3      	ldrheq	r3, [r4, #12]
 8018014:	6026      	str	r6, [r4, #0]
 8018016:	bf04      	itt	eq
 8018018:	f043 0301 	orreq.w	r3, r3, #1
 801801c:	81a3      	strheq	r3, [r4, #12]
 801801e:	89a2      	ldrh	r2, [r4, #12]
 8018020:	f012 0308 	ands.w	r3, r2, #8
 8018024:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8018028:	d01c      	beq.n	8018064 <setvbuf+0x16c>
 801802a:	07d3      	lsls	r3, r2, #31
 801802c:	bf41      	itttt	mi
 801802e:	2300      	movmi	r3, #0
 8018030:	426d      	negmi	r5, r5
 8018032:	60a3      	strmi	r3, [r4, #8]
 8018034:	61a5      	strmi	r5, [r4, #24]
 8018036:	bf58      	it	pl
 8018038:	60a5      	strpl	r5, [r4, #8]
 801803a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801803c:	f015 0501 	ands.w	r5, r5, #1
 8018040:	d115      	bne.n	801806e <setvbuf+0x176>
 8018042:	f412 7f00 	tst.w	r2, #512	; 0x200
 8018046:	e7c8      	b.n	8017fda <setvbuf+0xe2>
 8018048:	4648      	mov	r0, r9
 801804a:	f7ff fdb9 	bl	8017bc0 <malloc>
 801804e:	4606      	mov	r6, r0
 8018050:	2800      	cmp	r0, #0
 8018052:	d0ae      	beq.n	8017fb2 <setvbuf+0xba>
 8018054:	464d      	mov	r5, r9
 8018056:	89a3      	ldrh	r3, [r4, #12]
 8018058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801805c:	81a3      	strh	r3, [r4, #12]
 801805e:	e7d0      	b.n	8018002 <setvbuf+0x10a>
 8018060:	2500      	movs	r5, #0
 8018062:	e7a8      	b.n	8017fb6 <setvbuf+0xbe>
 8018064:	60a3      	str	r3, [r4, #8]
 8018066:	e7e8      	b.n	801803a <setvbuf+0x142>
 8018068:	f04f 35ff 	mov.w	r5, #4294967295
 801806c:	e7b9      	b.n	8017fe2 <setvbuf+0xea>
 801806e:	2500      	movs	r5, #0
 8018070:	e7b7      	b.n	8017fe2 <setvbuf+0xea>
 8018072:	bf00      	nop
 8018074:	240034c0 	.word	0x240034c0
 8018078:	080203bc 	.word	0x080203bc
 801807c:	080203dc 	.word	0x080203dc
 8018080:	0802039c 	.word	0x0802039c

08018084 <__swbuf_r>:
 8018084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018086:	460e      	mov	r6, r1
 8018088:	4614      	mov	r4, r2
 801808a:	4605      	mov	r5, r0
 801808c:	b118      	cbz	r0, 8018096 <__swbuf_r+0x12>
 801808e:	6983      	ldr	r3, [r0, #24]
 8018090:	b90b      	cbnz	r3, 8018096 <__swbuf_r+0x12>
 8018092:	f000 f9d1 	bl	8018438 <__sinit>
 8018096:	4b21      	ldr	r3, [pc, #132]	; (801811c <__swbuf_r+0x98>)
 8018098:	429c      	cmp	r4, r3
 801809a:	d12b      	bne.n	80180f4 <__swbuf_r+0x70>
 801809c:	686c      	ldr	r4, [r5, #4]
 801809e:	69a3      	ldr	r3, [r4, #24]
 80180a0:	60a3      	str	r3, [r4, #8]
 80180a2:	89a3      	ldrh	r3, [r4, #12]
 80180a4:	071a      	lsls	r2, r3, #28
 80180a6:	d52f      	bpl.n	8018108 <__swbuf_r+0x84>
 80180a8:	6923      	ldr	r3, [r4, #16]
 80180aa:	b36b      	cbz	r3, 8018108 <__swbuf_r+0x84>
 80180ac:	6923      	ldr	r3, [r4, #16]
 80180ae:	6820      	ldr	r0, [r4, #0]
 80180b0:	1ac0      	subs	r0, r0, r3
 80180b2:	6963      	ldr	r3, [r4, #20]
 80180b4:	b2f6      	uxtb	r6, r6
 80180b6:	4283      	cmp	r3, r0
 80180b8:	4637      	mov	r7, r6
 80180ba:	dc04      	bgt.n	80180c6 <__swbuf_r+0x42>
 80180bc:	4621      	mov	r1, r4
 80180be:	4628      	mov	r0, r5
 80180c0:	f000 f926 	bl	8018310 <_fflush_r>
 80180c4:	bb30      	cbnz	r0, 8018114 <__swbuf_r+0x90>
 80180c6:	68a3      	ldr	r3, [r4, #8]
 80180c8:	3b01      	subs	r3, #1
 80180ca:	60a3      	str	r3, [r4, #8]
 80180cc:	6823      	ldr	r3, [r4, #0]
 80180ce:	1c5a      	adds	r2, r3, #1
 80180d0:	6022      	str	r2, [r4, #0]
 80180d2:	701e      	strb	r6, [r3, #0]
 80180d4:	6963      	ldr	r3, [r4, #20]
 80180d6:	3001      	adds	r0, #1
 80180d8:	4283      	cmp	r3, r0
 80180da:	d004      	beq.n	80180e6 <__swbuf_r+0x62>
 80180dc:	89a3      	ldrh	r3, [r4, #12]
 80180de:	07db      	lsls	r3, r3, #31
 80180e0:	d506      	bpl.n	80180f0 <__swbuf_r+0x6c>
 80180e2:	2e0a      	cmp	r6, #10
 80180e4:	d104      	bne.n	80180f0 <__swbuf_r+0x6c>
 80180e6:	4621      	mov	r1, r4
 80180e8:	4628      	mov	r0, r5
 80180ea:	f000 f911 	bl	8018310 <_fflush_r>
 80180ee:	b988      	cbnz	r0, 8018114 <__swbuf_r+0x90>
 80180f0:	4638      	mov	r0, r7
 80180f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80180f4:	4b0a      	ldr	r3, [pc, #40]	; (8018120 <__swbuf_r+0x9c>)
 80180f6:	429c      	cmp	r4, r3
 80180f8:	d101      	bne.n	80180fe <__swbuf_r+0x7a>
 80180fa:	68ac      	ldr	r4, [r5, #8]
 80180fc:	e7cf      	b.n	801809e <__swbuf_r+0x1a>
 80180fe:	4b09      	ldr	r3, [pc, #36]	; (8018124 <__swbuf_r+0xa0>)
 8018100:	429c      	cmp	r4, r3
 8018102:	bf08      	it	eq
 8018104:	68ec      	ldreq	r4, [r5, #12]
 8018106:	e7ca      	b.n	801809e <__swbuf_r+0x1a>
 8018108:	4621      	mov	r1, r4
 801810a:	4628      	mov	r0, r5
 801810c:	f000 f80c 	bl	8018128 <__swsetup_r>
 8018110:	2800      	cmp	r0, #0
 8018112:	d0cb      	beq.n	80180ac <__swbuf_r+0x28>
 8018114:	f04f 37ff 	mov.w	r7, #4294967295
 8018118:	e7ea      	b.n	80180f0 <__swbuf_r+0x6c>
 801811a:	bf00      	nop
 801811c:	080203bc 	.word	0x080203bc
 8018120:	080203dc 	.word	0x080203dc
 8018124:	0802039c 	.word	0x0802039c

08018128 <__swsetup_r>:
 8018128:	4b32      	ldr	r3, [pc, #200]	; (80181f4 <__swsetup_r+0xcc>)
 801812a:	b570      	push	{r4, r5, r6, lr}
 801812c:	681d      	ldr	r5, [r3, #0]
 801812e:	4606      	mov	r6, r0
 8018130:	460c      	mov	r4, r1
 8018132:	b125      	cbz	r5, 801813e <__swsetup_r+0x16>
 8018134:	69ab      	ldr	r3, [r5, #24]
 8018136:	b913      	cbnz	r3, 801813e <__swsetup_r+0x16>
 8018138:	4628      	mov	r0, r5
 801813a:	f000 f97d 	bl	8018438 <__sinit>
 801813e:	4b2e      	ldr	r3, [pc, #184]	; (80181f8 <__swsetup_r+0xd0>)
 8018140:	429c      	cmp	r4, r3
 8018142:	d10f      	bne.n	8018164 <__swsetup_r+0x3c>
 8018144:	686c      	ldr	r4, [r5, #4]
 8018146:	89a3      	ldrh	r3, [r4, #12]
 8018148:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801814c:	0719      	lsls	r1, r3, #28
 801814e:	d42c      	bmi.n	80181aa <__swsetup_r+0x82>
 8018150:	06dd      	lsls	r5, r3, #27
 8018152:	d411      	bmi.n	8018178 <__swsetup_r+0x50>
 8018154:	2309      	movs	r3, #9
 8018156:	6033      	str	r3, [r6, #0]
 8018158:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801815c:	81a3      	strh	r3, [r4, #12]
 801815e:	f04f 30ff 	mov.w	r0, #4294967295
 8018162:	e03e      	b.n	80181e2 <__swsetup_r+0xba>
 8018164:	4b25      	ldr	r3, [pc, #148]	; (80181fc <__swsetup_r+0xd4>)
 8018166:	429c      	cmp	r4, r3
 8018168:	d101      	bne.n	801816e <__swsetup_r+0x46>
 801816a:	68ac      	ldr	r4, [r5, #8]
 801816c:	e7eb      	b.n	8018146 <__swsetup_r+0x1e>
 801816e:	4b24      	ldr	r3, [pc, #144]	; (8018200 <__swsetup_r+0xd8>)
 8018170:	429c      	cmp	r4, r3
 8018172:	bf08      	it	eq
 8018174:	68ec      	ldreq	r4, [r5, #12]
 8018176:	e7e6      	b.n	8018146 <__swsetup_r+0x1e>
 8018178:	0758      	lsls	r0, r3, #29
 801817a:	d512      	bpl.n	80181a2 <__swsetup_r+0x7a>
 801817c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801817e:	b141      	cbz	r1, 8018192 <__swsetup_r+0x6a>
 8018180:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018184:	4299      	cmp	r1, r3
 8018186:	d002      	beq.n	801818e <__swsetup_r+0x66>
 8018188:	4630      	mov	r0, r6
 801818a:	f7ff fd37 	bl	8017bfc <_free_r>
 801818e:	2300      	movs	r3, #0
 8018190:	6363      	str	r3, [r4, #52]	; 0x34
 8018192:	89a3      	ldrh	r3, [r4, #12]
 8018194:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018198:	81a3      	strh	r3, [r4, #12]
 801819a:	2300      	movs	r3, #0
 801819c:	6063      	str	r3, [r4, #4]
 801819e:	6923      	ldr	r3, [r4, #16]
 80181a0:	6023      	str	r3, [r4, #0]
 80181a2:	89a3      	ldrh	r3, [r4, #12]
 80181a4:	f043 0308 	orr.w	r3, r3, #8
 80181a8:	81a3      	strh	r3, [r4, #12]
 80181aa:	6923      	ldr	r3, [r4, #16]
 80181ac:	b94b      	cbnz	r3, 80181c2 <__swsetup_r+0x9a>
 80181ae:	89a3      	ldrh	r3, [r4, #12]
 80181b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80181b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80181b8:	d003      	beq.n	80181c2 <__swsetup_r+0x9a>
 80181ba:	4621      	mov	r1, r4
 80181bc:	4630      	mov	r0, r6
 80181be:	f000 fa01 	bl	80185c4 <__smakebuf_r>
 80181c2:	89a0      	ldrh	r0, [r4, #12]
 80181c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80181c8:	f010 0301 	ands.w	r3, r0, #1
 80181cc:	d00a      	beq.n	80181e4 <__swsetup_r+0xbc>
 80181ce:	2300      	movs	r3, #0
 80181d0:	60a3      	str	r3, [r4, #8]
 80181d2:	6963      	ldr	r3, [r4, #20]
 80181d4:	425b      	negs	r3, r3
 80181d6:	61a3      	str	r3, [r4, #24]
 80181d8:	6923      	ldr	r3, [r4, #16]
 80181da:	b943      	cbnz	r3, 80181ee <__swsetup_r+0xc6>
 80181dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80181e0:	d1ba      	bne.n	8018158 <__swsetup_r+0x30>
 80181e2:	bd70      	pop	{r4, r5, r6, pc}
 80181e4:	0781      	lsls	r1, r0, #30
 80181e6:	bf58      	it	pl
 80181e8:	6963      	ldrpl	r3, [r4, #20]
 80181ea:	60a3      	str	r3, [r4, #8]
 80181ec:	e7f4      	b.n	80181d8 <__swsetup_r+0xb0>
 80181ee:	2000      	movs	r0, #0
 80181f0:	e7f7      	b.n	80181e2 <__swsetup_r+0xba>
 80181f2:	bf00      	nop
 80181f4:	240034c0 	.word	0x240034c0
 80181f8:	080203bc 	.word	0x080203bc
 80181fc:	080203dc 	.word	0x080203dc
 8018200:	0802039c 	.word	0x0802039c

08018204 <__sflush_r>:
 8018204:	898a      	ldrh	r2, [r1, #12]
 8018206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801820a:	4605      	mov	r5, r0
 801820c:	0710      	lsls	r0, r2, #28
 801820e:	460c      	mov	r4, r1
 8018210:	d458      	bmi.n	80182c4 <__sflush_r+0xc0>
 8018212:	684b      	ldr	r3, [r1, #4]
 8018214:	2b00      	cmp	r3, #0
 8018216:	dc05      	bgt.n	8018224 <__sflush_r+0x20>
 8018218:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801821a:	2b00      	cmp	r3, #0
 801821c:	dc02      	bgt.n	8018224 <__sflush_r+0x20>
 801821e:	2000      	movs	r0, #0
 8018220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018224:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018226:	2e00      	cmp	r6, #0
 8018228:	d0f9      	beq.n	801821e <__sflush_r+0x1a>
 801822a:	2300      	movs	r3, #0
 801822c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018230:	682f      	ldr	r7, [r5, #0]
 8018232:	602b      	str	r3, [r5, #0]
 8018234:	d032      	beq.n	801829c <__sflush_r+0x98>
 8018236:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018238:	89a3      	ldrh	r3, [r4, #12]
 801823a:	075a      	lsls	r2, r3, #29
 801823c:	d505      	bpl.n	801824a <__sflush_r+0x46>
 801823e:	6863      	ldr	r3, [r4, #4]
 8018240:	1ac0      	subs	r0, r0, r3
 8018242:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018244:	b10b      	cbz	r3, 801824a <__sflush_r+0x46>
 8018246:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018248:	1ac0      	subs	r0, r0, r3
 801824a:	2300      	movs	r3, #0
 801824c:	4602      	mov	r2, r0
 801824e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018250:	6a21      	ldr	r1, [r4, #32]
 8018252:	4628      	mov	r0, r5
 8018254:	47b0      	blx	r6
 8018256:	1c43      	adds	r3, r0, #1
 8018258:	89a3      	ldrh	r3, [r4, #12]
 801825a:	d106      	bne.n	801826a <__sflush_r+0x66>
 801825c:	6829      	ldr	r1, [r5, #0]
 801825e:	291d      	cmp	r1, #29
 8018260:	d82c      	bhi.n	80182bc <__sflush_r+0xb8>
 8018262:	4a2a      	ldr	r2, [pc, #168]	; (801830c <__sflush_r+0x108>)
 8018264:	40ca      	lsrs	r2, r1
 8018266:	07d6      	lsls	r6, r2, #31
 8018268:	d528      	bpl.n	80182bc <__sflush_r+0xb8>
 801826a:	2200      	movs	r2, #0
 801826c:	6062      	str	r2, [r4, #4]
 801826e:	04d9      	lsls	r1, r3, #19
 8018270:	6922      	ldr	r2, [r4, #16]
 8018272:	6022      	str	r2, [r4, #0]
 8018274:	d504      	bpl.n	8018280 <__sflush_r+0x7c>
 8018276:	1c42      	adds	r2, r0, #1
 8018278:	d101      	bne.n	801827e <__sflush_r+0x7a>
 801827a:	682b      	ldr	r3, [r5, #0]
 801827c:	b903      	cbnz	r3, 8018280 <__sflush_r+0x7c>
 801827e:	6560      	str	r0, [r4, #84]	; 0x54
 8018280:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018282:	602f      	str	r7, [r5, #0]
 8018284:	2900      	cmp	r1, #0
 8018286:	d0ca      	beq.n	801821e <__sflush_r+0x1a>
 8018288:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801828c:	4299      	cmp	r1, r3
 801828e:	d002      	beq.n	8018296 <__sflush_r+0x92>
 8018290:	4628      	mov	r0, r5
 8018292:	f7ff fcb3 	bl	8017bfc <_free_r>
 8018296:	2000      	movs	r0, #0
 8018298:	6360      	str	r0, [r4, #52]	; 0x34
 801829a:	e7c1      	b.n	8018220 <__sflush_r+0x1c>
 801829c:	6a21      	ldr	r1, [r4, #32]
 801829e:	2301      	movs	r3, #1
 80182a0:	4628      	mov	r0, r5
 80182a2:	47b0      	blx	r6
 80182a4:	1c41      	adds	r1, r0, #1
 80182a6:	d1c7      	bne.n	8018238 <__sflush_r+0x34>
 80182a8:	682b      	ldr	r3, [r5, #0]
 80182aa:	2b00      	cmp	r3, #0
 80182ac:	d0c4      	beq.n	8018238 <__sflush_r+0x34>
 80182ae:	2b1d      	cmp	r3, #29
 80182b0:	d001      	beq.n	80182b6 <__sflush_r+0xb2>
 80182b2:	2b16      	cmp	r3, #22
 80182b4:	d101      	bne.n	80182ba <__sflush_r+0xb6>
 80182b6:	602f      	str	r7, [r5, #0]
 80182b8:	e7b1      	b.n	801821e <__sflush_r+0x1a>
 80182ba:	89a3      	ldrh	r3, [r4, #12]
 80182bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80182c0:	81a3      	strh	r3, [r4, #12]
 80182c2:	e7ad      	b.n	8018220 <__sflush_r+0x1c>
 80182c4:	690f      	ldr	r7, [r1, #16]
 80182c6:	2f00      	cmp	r7, #0
 80182c8:	d0a9      	beq.n	801821e <__sflush_r+0x1a>
 80182ca:	0793      	lsls	r3, r2, #30
 80182cc:	680e      	ldr	r6, [r1, #0]
 80182ce:	bf08      	it	eq
 80182d0:	694b      	ldreq	r3, [r1, #20]
 80182d2:	600f      	str	r7, [r1, #0]
 80182d4:	bf18      	it	ne
 80182d6:	2300      	movne	r3, #0
 80182d8:	eba6 0807 	sub.w	r8, r6, r7
 80182dc:	608b      	str	r3, [r1, #8]
 80182de:	f1b8 0f00 	cmp.w	r8, #0
 80182e2:	dd9c      	ble.n	801821e <__sflush_r+0x1a>
 80182e4:	6a21      	ldr	r1, [r4, #32]
 80182e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80182e8:	4643      	mov	r3, r8
 80182ea:	463a      	mov	r2, r7
 80182ec:	4628      	mov	r0, r5
 80182ee:	47b0      	blx	r6
 80182f0:	2800      	cmp	r0, #0
 80182f2:	dc06      	bgt.n	8018302 <__sflush_r+0xfe>
 80182f4:	89a3      	ldrh	r3, [r4, #12]
 80182f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80182fa:	81a3      	strh	r3, [r4, #12]
 80182fc:	f04f 30ff 	mov.w	r0, #4294967295
 8018300:	e78e      	b.n	8018220 <__sflush_r+0x1c>
 8018302:	4407      	add	r7, r0
 8018304:	eba8 0800 	sub.w	r8, r8, r0
 8018308:	e7e9      	b.n	80182de <__sflush_r+0xda>
 801830a:	bf00      	nop
 801830c:	20400001 	.word	0x20400001

08018310 <_fflush_r>:
 8018310:	b538      	push	{r3, r4, r5, lr}
 8018312:	690b      	ldr	r3, [r1, #16]
 8018314:	4605      	mov	r5, r0
 8018316:	460c      	mov	r4, r1
 8018318:	b913      	cbnz	r3, 8018320 <_fflush_r+0x10>
 801831a:	2500      	movs	r5, #0
 801831c:	4628      	mov	r0, r5
 801831e:	bd38      	pop	{r3, r4, r5, pc}
 8018320:	b118      	cbz	r0, 801832a <_fflush_r+0x1a>
 8018322:	6983      	ldr	r3, [r0, #24]
 8018324:	b90b      	cbnz	r3, 801832a <_fflush_r+0x1a>
 8018326:	f000 f887 	bl	8018438 <__sinit>
 801832a:	4b14      	ldr	r3, [pc, #80]	; (801837c <_fflush_r+0x6c>)
 801832c:	429c      	cmp	r4, r3
 801832e:	d11b      	bne.n	8018368 <_fflush_r+0x58>
 8018330:	686c      	ldr	r4, [r5, #4]
 8018332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018336:	2b00      	cmp	r3, #0
 8018338:	d0ef      	beq.n	801831a <_fflush_r+0xa>
 801833a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801833c:	07d0      	lsls	r0, r2, #31
 801833e:	d404      	bmi.n	801834a <_fflush_r+0x3a>
 8018340:	0599      	lsls	r1, r3, #22
 8018342:	d402      	bmi.n	801834a <_fflush_r+0x3a>
 8018344:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018346:	f000 f915 	bl	8018574 <__retarget_lock_acquire_recursive>
 801834a:	4628      	mov	r0, r5
 801834c:	4621      	mov	r1, r4
 801834e:	f7ff ff59 	bl	8018204 <__sflush_r>
 8018352:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018354:	07da      	lsls	r2, r3, #31
 8018356:	4605      	mov	r5, r0
 8018358:	d4e0      	bmi.n	801831c <_fflush_r+0xc>
 801835a:	89a3      	ldrh	r3, [r4, #12]
 801835c:	059b      	lsls	r3, r3, #22
 801835e:	d4dd      	bmi.n	801831c <_fflush_r+0xc>
 8018360:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018362:	f000 f908 	bl	8018576 <__retarget_lock_release_recursive>
 8018366:	e7d9      	b.n	801831c <_fflush_r+0xc>
 8018368:	4b05      	ldr	r3, [pc, #20]	; (8018380 <_fflush_r+0x70>)
 801836a:	429c      	cmp	r4, r3
 801836c:	d101      	bne.n	8018372 <_fflush_r+0x62>
 801836e:	68ac      	ldr	r4, [r5, #8]
 8018370:	e7df      	b.n	8018332 <_fflush_r+0x22>
 8018372:	4b04      	ldr	r3, [pc, #16]	; (8018384 <_fflush_r+0x74>)
 8018374:	429c      	cmp	r4, r3
 8018376:	bf08      	it	eq
 8018378:	68ec      	ldreq	r4, [r5, #12]
 801837a:	e7da      	b.n	8018332 <_fflush_r+0x22>
 801837c:	080203bc 	.word	0x080203bc
 8018380:	080203dc 	.word	0x080203dc
 8018384:	0802039c 	.word	0x0802039c

08018388 <std>:
 8018388:	2300      	movs	r3, #0
 801838a:	b510      	push	{r4, lr}
 801838c:	4604      	mov	r4, r0
 801838e:	e9c0 3300 	strd	r3, r3, [r0]
 8018392:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018396:	6083      	str	r3, [r0, #8]
 8018398:	8181      	strh	r1, [r0, #12]
 801839a:	6643      	str	r3, [r0, #100]	; 0x64
 801839c:	81c2      	strh	r2, [r0, #14]
 801839e:	6183      	str	r3, [r0, #24]
 80183a0:	4619      	mov	r1, r3
 80183a2:	2208      	movs	r2, #8
 80183a4:	305c      	adds	r0, #92	; 0x5c
 80183a6:	f7ff fc21 	bl	8017bec <memset>
 80183aa:	4b05      	ldr	r3, [pc, #20]	; (80183c0 <std+0x38>)
 80183ac:	6263      	str	r3, [r4, #36]	; 0x24
 80183ae:	4b05      	ldr	r3, [pc, #20]	; (80183c4 <std+0x3c>)
 80183b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80183b2:	4b05      	ldr	r3, [pc, #20]	; (80183c8 <std+0x40>)
 80183b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80183b6:	4b05      	ldr	r3, [pc, #20]	; (80183cc <std+0x44>)
 80183b8:	6224      	str	r4, [r4, #32]
 80183ba:	6323      	str	r3, [r4, #48]	; 0x30
 80183bc:	bd10      	pop	{r4, pc}
 80183be:	bf00      	nop
 80183c0:	08018c39 	.word	0x08018c39
 80183c4:	08018c5b 	.word	0x08018c5b
 80183c8:	08018c93 	.word	0x08018c93
 80183cc:	08018cb7 	.word	0x08018cb7

080183d0 <_cleanup_r>:
 80183d0:	4901      	ldr	r1, [pc, #4]	; (80183d8 <_cleanup_r+0x8>)
 80183d2:	f000 b8af 	b.w	8018534 <_fwalk_reent>
 80183d6:	bf00      	nop
 80183d8:	08018311 	.word	0x08018311

080183dc <__sfmoreglue>:
 80183dc:	b570      	push	{r4, r5, r6, lr}
 80183de:	2268      	movs	r2, #104	; 0x68
 80183e0:	1e4d      	subs	r5, r1, #1
 80183e2:	4355      	muls	r5, r2
 80183e4:	460e      	mov	r6, r1
 80183e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80183ea:	f7ff fc73 	bl	8017cd4 <_malloc_r>
 80183ee:	4604      	mov	r4, r0
 80183f0:	b140      	cbz	r0, 8018404 <__sfmoreglue+0x28>
 80183f2:	2100      	movs	r1, #0
 80183f4:	e9c0 1600 	strd	r1, r6, [r0]
 80183f8:	300c      	adds	r0, #12
 80183fa:	60a0      	str	r0, [r4, #8]
 80183fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018400:	f7ff fbf4 	bl	8017bec <memset>
 8018404:	4620      	mov	r0, r4
 8018406:	bd70      	pop	{r4, r5, r6, pc}

08018408 <__sfp_lock_acquire>:
 8018408:	4801      	ldr	r0, [pc, #4]	; (8018410 <__sfp_lock_acquire+0x8>)
 801840a:	f000 b8b3 	b.w	8018574 <__retarget_lock_acquire_recursive>
 801840e:	bf00      	nop
 8018410:	24021715 	.word	0x24021715

08018414 <__sfp_lock_release>:
 8018414:	4801      	ldr	r0, [pc, #4]	; (801841c <__sfp_lock_release+0x8>)
 8018416:	f000 b8ae 	b.w	8018576 <__retarget_lock_release_recursive>
 801841a:	bf00      	nop
 801841c:	24021715 	.word	0x24021715

08018420 <__sinit_lock_acquire>:
 8018420:	4801      	ldr	r0, [pc, #4]	; (8018428 <__sinit_lock_acquire+0x8>)
 8018422:	f000 b8a7 	b.w	8018574 <__retarget_lock_acquire_recursive>
 8018426:	bf00      	nop
 8018428:	24021716 	.word	0x24021716

0801842c <__sinit_lock_release>:
 801842c:	4801      	ldr	r0, [pc, #4]	; (8018434 <__sinit_lock_release+0x8>)
 801842e:	f000 b8a2 	b.w	8018576 <__retarget_lock_release_recursive>
 8018432:	bf00      	nop
 8018434:	24021716 	.word	0x24021716

08018438 <__sinit>:
 8018438:	b510      	push	{r4, lr}
 801843a:	4604      	mov	r4, r0
 801843c:	f7ff fff0 	bl	8018420 <__sinit_lock_acquire>
 8018440:	69a3      	ldr	r3, [r4, #24]
 8018442:	b11b      	cbz	r3, 801844c <__sinit+0x14>
 8018444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018448:	f7ff bff0 	b.w	801842c <__sinit_lock_release>
 801844c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018450:	6523      	str	r3, [r4, #80]	; 0x50
 8018452:	4b13      	ldr	r3, [pc, #76]	; (80184a0 <__sinit+0x68>)
 8018454:	4a13      	ldr	r2, [pc, #76]	; (80184a4 <__sinit+0x6c>)
 8018456:	681b      	ldr	r3, [r3, #0]
 8018458:	62a2      	str	r2, [r4, #40]	; 0x28
 801845a:	42a3      	cmp	r3, r4
 801845c:	bf04      	itt	eq
 801845e:	2301      	moveq	r3, #1
 8018460:	61a3      	streq	r3, [r4, #24]
 8018462:	4620      	mov	r0, r4
 8018464:	f000 f820 	bl	80184a8 <__sfp>
 8018468:	6060      	str	r0, [r4, #4]
 801846a:	4620      	mov	r0, r4
 801846c:	f000 f81c 	bl	80184a8 <__sfp>
 8018470:	60a0      	str	r0, [r4, #8]
 8018472:	4620      	mov	r0, r4
 8018474:	f000 f818 	bl	80184a8 <__sfp>
 8018478:	2200      	movs	r2, #0
 801847a:	60e0      	str	r0, [r4, #12]
 801847c:	2104      	movs	r1, #4
 801847e:	6860      	ldr	r0, [r4, #4]
 8018480:	f7ff ff82 	bl	8018388 <std>
 8018484:	68a0      	ldr	r0, [r4, #8]
 8018486:	2201      	movs	r2, #1
 8018488:	2109      	movs	r1, #9
 801848a:	f7ff ff7d 	bl	8018388 <std>
 801848e:	68e0      	ldr	r0, [r4, #12]
 8018490:	2202      	movs	r2, #2
 8018492:	2112      	movs	r1, #18
 8018494:	f7ff ff78 	bl	8018388 <std>
 8018498:	2301      	movs	r3, #1
 801849a:	61a3      	str	r3, [r4, #24]
 801849c:	e7d2      	b.n	8018444 <__sinit+0xc>
 801849e:	bf00      	nop
 80184a0:	08020398 	.word	0x08020398
 80184a4:	080183d1 	.word	0x080183d1

080184a8 <__sfp>:
 80184a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184aa:	4607      	mov	r7, r0
 80184ac:	f7ff ffac 	bl	8018408 <__sfp_lock_acquire>
 80184b0:	4b1e      	ldr	r3, [pc, #120]	; (801852c <__sfp+0x84>)
 80184b2:	681e      	ldr	r6, [r3, #0]
 80184b4:	69b3      	ldr	r3, [r6, #24]
 80184b6:	b913      	cbnz	r3, 80184be <__sfp+0x16>
 80184b8:	4630      	mov	r0, r6
 80184ba:	f7ff ffbd 	bl	8018438 <__sinit>
 80184be:	3648      	adds	r6, #72	; 0x48
 80184c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80184c4:	3b01      	subs	r3, #1
 80184c6:	d503      	bpl.n	80184d0 <__sfp+0x28>
 80184c8:	6833      	ldr	r3, [r6, #0]
 80184ca:	b30b      	cbz	r3, 8018510 <__sfp+0x68>
 80184cc:	6836      	ldr	r6, [r6, #0]
 80184ce:	e7f7      	b.n	80184c0 <__sfp+0x18>
 80184d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80184d4:	b9d5      	cbnz	r5, 801850c <__sfp+0x64>
 80184d6:	4b16      	ldr	r3, [pc, #88]	; (8018530 <__sfp+0x88>)
 80184d8:	60e3      	str	r3, [r4, #12]
 80184da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80184de:	6665      	str	r5, [r4, #100]	; 0x64
 80184e0:	f000 f847 	bl	8018572 <__retarget_lock_init_recursive>
 80184e4:	f7ff ff96 	bl	8018414 <__sfp_lock_release>
 80184e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80184ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80184f0:	6025      	str	r5, [r4, #0]
 80184f2:	61a5      	str	r5, [r4, #24]
 80184f4:	2208      	movs	r2, #8
 80184f6:	4629      	mov	r1, r5
 80184f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80184fc:	f7ff fb76 	bl	8017bec <memset>
 8018500:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018504:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018508:	4620      	mov	r0, r4
 801850a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801850c:	3468      	adds	r4, #104	; 0x68
 801850e:	e7d9      	b.n	80184c4 <__sfp+0x1c>
 8018510:	2104      	movs	r1, #4
 8018512:	4638      	mov	r0, r7
 8018514:	f7ff ff62 	bl	80183dc <__sfmoreglue>
 8018518:	4604      	mov	r4, r0
 801851a:	6030      	str	r0, [r6, #0]
 801851c:	2800      	cmp	r0, #0
 801851e:	d1d5      	bne.n	80184cc <__sfp+0x24>
 8018520:	f7ff ff78 	bl	8018414 <__sfp_lock_release>
 8018524:	230c      	movs	r3, #12
 8018526:	603b      	str	r3, [r7, #0]
 8018528:	e7ee      	b.n	8018508 <__sfp+0x60>
 801852a:	bf00      	nop
 801852c:	08020398 	.word	0x08020398
 8018530:	ffff0001 	.word	0xffff0001

08018534 <_fwalk_reent>:
 8018534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018538:	4606      	mov	r6, r0
 801853a:	4688      	mov	r8, r1
 801853c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018540:	2700      	movs	r7, #0
 8018542:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018546:	f1b9 0901 	subs.w	r9, r9, #1
 801854a:	d505      	bpl.n	8018558 <_fwalk_reent+0x24>
 801854c:	6824      	ldr	r4, [r4, #0]
 801854e:	2c00      	cmp	r4, #0
 8018550:	d1f7      	bne.n	8018542 <_fwalk_reent+0xe>
 8018552:	4638      	mov	r0, r7
 8018554:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018558:	89ab      	ldrh	r3, [r5, #12]
 801855a:	2b01      	cmp	r3, #1
 801855c:	d907      	bls.n	801856e <_fwalk_reent+0x3a>
 801855e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018562:	3301      	adds	r3, #1
 8018564:	d003      	beq.n	801856e <_fwalk_reent+0x3a>
 8018566:	4629      	mov	r1, r5
 8018568:	4630      	mov	r0, r6
 801856a:	47c0      	blx	r8
 801856c:	4307      	orrs	r7, r0
 801856e:	3568      	adds	r5, #104	; 0x68
 8018570:	e7e9      	b.n	8018546 <_fwalk_reent+0x12>

08018572 <__retarget_lock_init_recursive>:
 8018572:	4770      	bx	lr

08018574 <__retarget_lock_acquire_recursive>:
 8018574:	4770      	bx	lr

08018576 <__retarget_lock_release_recursive>:
 8018576:	4770      	bx	lr

08018578 <__swhatbuf_r>:
 8018578:	b570      	push	{r4, r5, r6, lr}
 801857a:	460e      	mov	r6, r1
 801857c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018580:	2900      	cmp	r1, #0
 8018582:	b096      	sub	sp, #88	; 0x58
 8018584:	4614      	mov	r4, r2
 8018586:	461d      	mov	r5, r3
 8018588:	da08      	bge.n	801859c <__swhatbuf_r+0x24>
 801858a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801858e:	2200      	movs	r2, #0
 8018590:	602a      	str	r2, [r5, #0]
 8018592:	061a      	lsls	r2, r3, #24
 8018594:	d410      	bmi.n	80185b8 <__swhatbuf_r+0x40>
 8018596:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801859a:	e00e      	b.n	80185ba <__swhatbuf_r+0x42>
 801859c:	466a      	mov	r2, sp
 801859e:	f000 fbb1 	bl	8018d04 <_fstat_r>
 80185a2:	2800      	cmp	r0, #0
 80185a4:	dbf1      	blt.n	801858a <__swhatbuf_r+0x12>
 80185a6:	9a01      	ldr	r2, [sp, #4]
 80185a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80185ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80185b0:	425a      	negs	r2, r3
 80185b2:	415a      	adcs	r2, r3
 80185b4:	602a      	str	r2, [r5, #0]
 80185b6:	e7ee      	b.n	8018596 <__swhatbuf_r+0x1e>
 80185b8:	2340      	movs	r3, #64	; 0x40
 80185ba:	2000      	movs	r0, #0
 80185bc:	6023      	str	r3, [r4, #0]
 80185be:	b016      	add	sp, #88	; 0x58
 80185c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080185c4 <__smakebuf_r>:
 80185c4:	898b      	ldrh	r3, [r1, #12]
 80185c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80185c8:	079d      	lsls	r5, r3, #30
 80185ca:	4606      	mov	r6, r0
 80185cc:	460c      	mov	r4, r1
 80185ce:	d507      	bpl.n	80185e0 <__smakebuf_r+0x1c>
 80185d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80185d4:	6023      	str	r3, [r4, #0]
 80185d6:	6123      	str	r3, [r4, #16]
 80185d8:	2301      	movs	r3, #1
 80185da:	6163      	str	r3, [r4, #20]
 80185dc:	b002      	add	sp, #8
 80185de:	bd70      	pop	{r4, r5, r6, pc}
 80185e0:	ab01      	add	r3, sp, #4
 80185e2:	466a      	mov	r2, sp
 80185e4:	f7ff ffc8 	bl	8018578 <__swhatbuf_r>
 80185e8:	9900      	ldr	r1, [sp, #0]
 80185ea:	4605      	mov	r5, r0
 80185ec:	4630      	mov	r0, r6
 80185ee:	f7ff fb71 	bl	8017cd4 <_malloc_r>
 80185f2:	b948      	cbnz	r0, 8018608 <__smakebuf_r+0x44>
 80185f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80185f8:	059a      	lsls	r2, r3, #22
 80185fa:	d4ef      	bmi.n	80185dc <__smakebuf_r+0x18>
 80185fc:	f023 0303 	bic.w	r3, r3, #3
 8018600:	f043 0302 	orr.w	r3, r3, #2
 8018604:	81a3      	strh	r3, [r4, #12]
 8018606:	e7e3      	b.n	80185d0 <__smakebuf_r+0xc>
 8018608:	4b0d      	ldr	r3, [pc, #52]	; (8018640 <__smakebuf_r+0x7c>)
 801860a:	62b3      	str	r3, [r6, #40]	; 0x28
 801860c:	89a3      	ldrh	r3, [r4, #12]
 801860e:	6020      	str	r0, [r4, #0]
 8018610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018614:	81a3      	strh	r3, [r4, #12]
 8018616:	9b00      	ldr	r3, [sp, #0]
 8018618:	6163      	str	r3, [r4, #20]
 801861a:	9b01      	ldr	r3, [sp, #4]
 801861c:	6120      	str	r0, [r4, #16]
 801861e:	b15b      	cbz	r3, 8018638 <__smakebuf_r+0x74>
 8018620:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018624:	4630      	mov	r0, r6
 8018626:	f000 fb7f 	bl	8018d28 <_isatty_r>
 801862a:	b128      	cbz	r0, 8018638 <__smakebuf_r+0x74>
 801862c:	89a3      	ldrh	r3, [r4, #12]
 801862e:	f023 0303 	bic.w	r3, r3, #3
 8018632:	f043 0301 	orr.w	r3, r3, #1
 8018636:	81a3      	strh	r3, [r4, #12]
 8018638:	89a0      	ldrh	r0, [r4, #12]
 801863a:	4305      	orrs	r5, r0
 801863c:	81a5      	strh	r5, [r4, #12]
 801863e:	e7cd      	b.n	80185dc <__smakebuf_r+0x18>
 8018640:	080183d1 	.word	0x080183d1

08018644 <__malloc_lock>:
 8018644:	4801      	ldr	r0, [pc, #4]	; (801864c <__malloc_lock+0x8>)
 8018646:	f7ff bf95 	b.w	8018574 <__retarget_lock_acquire_recursive>
 801864a:	bf00      	nop
 801864c:	24021714 	.word	0x24021714

08018650 <__malloc_unlock>:
 8018650:	4801      	ldr	r0, [pc, #4]	; (8018658 <__malloc_unlock+0x8>)
 8018652:	f7ff bf90 	b.w	8018576 <__retarget_lock_release_recursive>
 8018656:	bf00      	nop
 8018658:	24021714 	.word	0x24021714

0801865c <__sfputc_r>:
 801865c:	6893      	ldr	r3, [r2, #8]
 801865e:	3b01      	subs	r3, #1
 8018660:	2b00      	cmp	r3, #0
 8018662:	b410      	push	{r4}
 8018664:	6093      	str	r3, [r2, #8]
 8018666:	da08      	bge.n	801867a <__sfputc_r+0x1e>
 8018668:	6994      	ldr	r4, [r2, #24]
 801866a:	42a3      	cmp	r3, r4
 801866c:	db01      	blt.n	8018672 <__sfputc_r+0x16>
 801866e:	290a      	cmp	r1, #10
 8018670:	d103      	bne.n	801867a <__sfputc_r+0x1e>
 8018672:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018676:	f7ff bd05 	b.w	8018084 <__swbuf_r>
 801867a:	6813      	ldr	r3, [r2, #0]
 801867c:	1c58      	adds	r0, r3, #1
 801867e:	6010      	str	r0, [r2, #0]
 8018680:	7019      	strb	r1, [r3, #0]
 8018682:	4608      	mov	r0, r1
 8018684:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018688:	4770      	bx	lr

0801868a <__sfputs_r>:
 801868a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801868c:	4606      	mov	r6, r0
 801868e:	460f      	mov	r7, r1
 8018690:	4614      	mov	r4, r2
 8018692:	18d5      	adds	r5, r2, r3
 8018694:	42ac      	cmp	r4, r5
 8018696:	d101      	bne.n	801869c <__sfputs_r+0x12>
 8018698:	2000      	movs	r0, #0
 801869a:	e007      	b.n	80186ac <__sfputs_r+0x22>
 801869c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80186a0:	463a      	mov	r2, r7
 80186a2:	4630      	mov	r0, r6
 80186a4:	f7ff ffda 	bl	801865c <__sfputc_r>
 80186a8:	1c43      	adds	r3, r0, #1
 80186aa:	d1f3      	bne.n	8018694 <__sfputs_r+0xa>
 80186ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080186b0 <_vfiprintf_r>:
 80186b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186b4:	460d      	mov	r5, r1
 80186b6:	b09d      	sub	sp, #116	; 0x74
 80186b8:	4614      	mov	r4, r2
 80186ba:	4698      	mov	r8, r3
 80186bc:	4606      	mov	r6, r0
 80186be:	b118      	cbz	r0, 80186c8 <_vfiprintf_r+0x18>
 80186c0:	6983      	ldr	r3, [r0, #24]
 80186c2:	b90b      	cbnz	r3, 80186c8 <_vfiprintf_r+0x18>
 80186c4:	f7ff feb8 	bl	8018438 <__sinit>
 80186c8:	4b89      	ldr	r3, [pc, #548]	; (80188f0 <_vfiprintf_r+0x240>)
 80186ca:	429d      	cmp	r5, r3
 80186cc:	d11b      	bne.n	8018706 <_vfiprintf_r+0x56>
 80186ce:	6875      	ldr	r5, [r6, #4]
 80186d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80186d2:	07d9      	lsls	r1, r3, #31
 80186d4:	d405      	bmi.n	80186e2 <_vfiprintf_r+0x32>
 80186d6:	89ab      	ldrh	r3, [r5, #12]
 80186d8:	059a      	lsls	r2, r3, #22
 80186da:	d402      	bmi.n	80186e2 <_vfiprintf_r+0x32>
 80186dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80186de:	f7ff ff49 	bl	8018574 <__retarget_lock_acquire_recursive>
 80186e2:	89ab      	ldrh	r3, [r5, #12]
 80186e4:	071b      	lsls	r3, r3, #28
 80186e6:	d501      	bpl.n	80186ec <_vfiprintf_r+0x3c>
 80186e8:	692b      	ldr	r3, [r5, #16]
 80186ea:	b9eb      	cbnz	r3, 8018728 <_vfiprintf_r+0x78>
 80186ec:	4629      	mov	r1, r5
 80186ee:	4630      	mov	r0, r6
 80186f0:	f7ff fd1a 	bl	8018128 <__swsetup_r>
 80186f4:	b1c0      	cbz	r0, 8018728 <_vfiprintf_r+0x78>
 80186f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80186f8:	07dc      	lsls	r4, r3, #31
 80186fa:	d50e      	bpl.n	801871a <_vfiprintf_r+0x6a>
 80186fc:	f04f 30ff 	mov.w	r0, #4294967295
 8018700:	b01d      	add	sp, #116	; 0x74
 8018702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018706:	4b7b      	ldr	r3, [pc, #492]	; (80188f4 <_vfiprintf_r+0x244>)
 8018708:	429d      	cmp	r5, r3
 801870a:	d101      	bne.n	8018710 <_vfiprintf_r+0x60>
 801870c:	68b5      	ldr	r5, [r6, #8]
 801870e:	e7df      	b.n	80186d0 <_vfiprintf_r+0x20>
 8018710:	4b79      	ldr	r3, [pc, #484]	; (80188f8 <_vfiprintf_r+0x248>)
 8018712:	429d      	cmp	r5, r3
 8018714:	bf08      	it	eq
 8018716:	68f5      	ldreq	r5, [r6, #12]
 8018718:	e7da      	b.n	80186d0 <_vfiprintf_r+0x20>
 801871a:	89ab      	ldrh	r3, [r5, #12]
 801871c:	0598      	lsls	r0, r3, #22
 801871e:	d4ed      	bmi.n	80186fc <_vfiprintf_r+0x4c>
 8018720:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018722:	f7ff ff28 	bl	8018576 <__retarget_lock_release_recursive>
 8018726:	e7e9      	b.n	80186fc <_vfiprintf_r+0x4c>
 8018728:	2300      	movs	r3, #0
 801872a:	9309      	str	r3, [sp, #36]	; 0x24
 801872c:	2320      	movs	r3, #32
 801872e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018732:	f8cd 800c 	str.w	r8, [sp, #12]
 8018736:	2330      	movs	r3, #48	; 0x30
 8018738:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80188fc <_vfiprintf_r+0x24c>
 801873c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018740:	f04f 0901 	mov.w	r9, #1
 8018744:	4623      	mov	r3, r4
 8018746:	469a      	mov	sl, r3
 8018748:	f813 2b01 	ldrb.w	r2, [r3], #1
 801874c:	b10a      	cbz	r2, 8018752 <_vfiprintf_r+0xa2>
 801874e:	2a25      	cmp	r2, #37	; 0x25
 8018750:	d1f9      	bne.n	8018746 <_vfiprintf_r+0x96>
 8018752:	ebba 0b04 	subs.w	fp, sl, r4
 8018756:	d00b      	beq.n	8018770 <_vfiprintf_r+0xc0>
 8018758:	465b      	mov	r3, fp
 801875a:	4622      	mov	r2, r4
 801875c:	4629      	mov	r1, r5
 801875e:	4630      	mov	r0, r6
 8018760:	f7ff ff93 	bl	801868a <__sfputs_r>
 8018764:	3001      	adds	r0, #1
 8018766:	f000 80aa 	beq.w	80188be <_vfiprintf_r+0x20e>
 801876a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801876c:	445a      	add	r2, fp
 801876e:	9209      	str	r2, [sp, #36]	; 0x24
 8018770:	f89a 3000 	ldrb.w	r3, [sl]
 8018774:	2b00      	cmp	r3, #0
 8018776:	f000 80a2 	beq.w	80188be <_vfiprintf_r+0x20e>
 801877a:	2300      	movs	r3, #0
 801877c:	f04f 32ff 	mov.w	r2, #4294967295
 8018780:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018784:	f10a 0a01 	add.w	sl, sl, #1
 8018788:	9304      	str	r3, [sp, #16]
 801878a:	9307      	str	r3, [sp, #28]
 801878c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018790:	931a      	str	r3, [sp, #104]	; 0x68
 8018792:	4654      	mov	r4, sl
 8018794:	2205      	movs	r2, #5
 8018796:	f814 1b01 	ldrb.w	r1, [r4], #1
 801879a:	4858      	ldr	r0, [pc, #352]	; (80188fc <_vfiprintf_r+0x24c>)
 801879c:	f7e7 fda8 	bl	80002f0 <memchr>
 80187a0:	9a04      	ldr	r2, [sp, #16]
 80187a2:	b9d8      	cbnz	r0, 80187dc <_vfiprintf_r+0x12c>
 80187a4:	06d1      	lsls	r1, r2, #27
 80187a6:	bf44      	itt	mi
 80187a8:	2320      	movmi	r3, #32
 80187aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80187ae:	0713      	lsls	r3, r2, #28
 80187b0:	bf44      	itt	mi
 80187b2:	232b      	movmi	r3, #43	; 0x2b
 80187b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80187b8:	f89a 3000 	ldrb.w	r3, [sl]
 80187bc:	2b2a      	cmp	r3, #42	; 0x2a
 80187be:	d015      	beq.n	80187ec <_vfiprintf_r+0x13c>
 80187c0:	9a07      	ldr	r2, [sp, #28]
 80187c2:	4654      	mov	r4, sl
 80187c4:	2000      	movs	r0, #0
 80187c6:	f04f 0c0a 	mov.w	ip, #10
 80187ca:	4621      	mov	r1, r4
 80187cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80187d0:	3b30      	subs	r3, #48	; 0x30
 80187d2:	2b09      	cmp	r3, #9
 80187d4:	d94e      	bls.n	8018874 <_vfiprintf_r+0x1c4>
 80187d6:	b1b0      	cbz	r0, 8018806 <_vfiprintf_r+0x156>
 80187d8:	9207      	str	r2, [sp, #28]
 80187da:	e014      	b.n	8018806 <_vfiprintf_r+0x156>
 80187dc:	eba0 0308 	sub.w	r3, r0, r8
 80187e0:	fa09 f303 	lsl.w	r3, r9, r3
 80187e4:	4313      	orrs	r3, r2
 80187e6:	9304      	str	r3, [sp, #16]
 80187e8:	46a2      	mov	sl, r4
 80187ea:	e7d2      	b.n	8018792 <_vfiprintf_r+0xe2>
 80187ec:	9b03      	ldr	r3, [sp, #12]
 80187ee:	1d19      	adds	r1, r3, #4
 80187f0:	681b      	ldr	r3, [r3, #0]
 80187f2:	9103      	str	r1, [sp, #12]
 80187f4:	2b00      	cmp	r3, #0
 80187f6:	bfbb      	ittet	lt
 80187f8:	425b      	neglt	r3, r3
 80187fa:	f042 0202 	orrlt.w	r2, r2, #2
 80187fe:	9307      	strge	r3, [sp, #28]
 8018800:	9307      	strlt	r3, [sp, #28]
 8018802:	bfb8      	it	lt
 8018804:	9204      	strlt	r2, [sp, #16]
 8018806:	7823      	ldrb	r3, [r4, #0]
 8018808:	2b2e      	cmp	r3, #46	; 0x2e
 801880a:	d10c      	bne.n	8018826 <_vfiprintf_r+0x176>
 801880c:	7863      	ldrb	r3, [r4, #1]
 801880e:	2b2a      	cmp	r3, #42	; 0x2a
 8018810:	d135      	bne.n	801887e <_vfiprintf_r+0x1ce>
 8018812:	9b03      	ldr	r3, [sp, #12]
 8018814:	1d1a      	adds	r2, r3, #4
 8018816:	681b      	ldr	r3, [r3, #0]
 8018818:	9203      	str	r2, [sp, #12]
 801881a:	2b00      	cmp	r3, #0
 801881c:	bfb8      	it	lt
 801881e:	f04f 33ff 	movlt.w	r3, #4294967295
 8018822:	3402      	adds	r4, #2
 8018824:	9305      	str	r3, [sp, #20]
 8018826:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801890c <_vfiprintf_r+0x25c>
 801882a:	7821      	ldrb	r1, [r4, #0]
 801882c:	2203      	movs	r2, #3
 801882e:	4650      	mov	r0, sl
 8018830:	f7e7 fd5e 	bl	80002f0 <memchr>
 8018834:	b140      	cbz	r0, 8018848 <_vfiprintf_r+0x198>
 8018836:	2340      	movs	r3, #64	; 0x40
 8018838:	eba0 000a 	sub.w	r0, r0, sl
 801883c:	fa03 f000 	lsl.w	r0, r3, r0
 8018840:	9b04      	ldr	r3, [sp, #16]
 8018842:	4303      	orrs	r3, r0
 8018844:	3401      	adds	r4, #1
 8018846:	9304      	str	r3, [sp, #16]
 8018848:	f814 1b01 	ldrb.w	r1, [r4], #1
 801884c:	482c      	ldr	r0, [pc, #176]	; (8018900 <_vfiprintf_r+0x250>)
 801884e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018852:	2206      	movs	r2, #6
 8018854:	f7e7 fd4c 	bl	80002f0 <memchr>
 8018858:	2800      	cmp	r0, #0
 801885a:	d03f      	beq.n	80188dc <_vfiprintf_r+0x22c>
 801885c:	4b29      	ldr	r3, [pc, #164]	; (8018904 <_vfiprintf_r+0x254>)
 801885e:	bb1b      	cbnz	r3, 80188a8 <_vfiprintf_r+0x1f8>
 8018860:	9b03      	ldr	r3, [sp, #12]
 8018862:	3307      	adds	r3, #7
 8018864:	f023 0307 	bic.w	r3, r3, #7
 8018868:	3308      	adds	r3, #8
 801886a:	9303      	str	r3, [sp, #12]
 801886c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801886e:	443b      	add	r3, r7
 8018870:	9309      	str	r3, [sp, #36]	; 0x24
 8018872:	e767      	b.n	8018744 <_vfiprintf_r+0x94>
 8018874:	fb0c 3202 	mla	r2, ip, r2, r3
 8018878:	460c      	mov	r4, r1
 801887a:	2001      	movs	r0, #1
 801887c:	e7a5      	b.n	80187ca <_vfiprintf_r+0x11a>
 801887e:	2300      	movs	r3, #0
 8018880:	3401      	adds	r4, #1
 8018882:	9305      	str	r3, [sp, #20]
 8018884:	4619      	mov	r1, r3
 8018886:	f04f 0c0a 	mov.w	ip, #10
 801888a:	4620      	mov	r0, r4
 801888c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018890:	3a30      	subs	r2, #48	; 0x30
 8018892:	2a09      	cmp	r2, #9
 8018894:	d903      	bls.n	801889e <_vfiprintf_r+0x1ee>
 8018896:	2b00      	cmp	r3, #0
 8018898:	d0c5      	beq.n	8018826 <_vfiprintf_r+0x176>
 801889a:	9105      	str	r1, [sp, #20]
 801889c:	e7c3      	b.n	8018826 <_vfiprintf_r+0x176>
 801889e:	fb0c 2101 	mla	r1, ip, r1, r2
 80188a2:	4604      	mov	r4, r0
 80188a4:	2301      	movs	r3, #1
 80188a6:	e7f0      	b.n	801888a <_vfiprintf_r+0x1da>
 80188a8:	ab03      	add	r3, sp, #12
 80188aa:	9300      	str	r3, [sp, #0]
 80188ac:	462a      	mov	r2, r5
 80188ae:	4b16      	ldr	r3, [pc, #88]	; (8018908 <_vfiprintf_r+0x258>)
 80188b0:	a904      	add	r1, sp, #16
 80188b2:	4630      	mov	r0, r6
 80188b4:	f3af 8000 	nop.w
 80188b8:	4607      	mov	r7, r0
 80188ba:	1c78      	adds	r0, r7, #1
 80188bc:	d1d6      	bne.n	801886c <_vfiprintf_r+0x1bc>
 80188be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80188c0:	07d9      	lsls	r1, r3, #31
 80188c2:	d405      	bmi.n	80188d0 <_vfiprintf_r+0x220>
 80188c4:	89ab      	ldrh	r3, [r5, #12]
 80188c6:	059a      	lsls	r2, r3, #22
 80188c8:	d402      	bmi.n	80188d0 <_vfiprintf_r+0x220>
 80188ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80188cc:	f7ff fe53 	bl	8018576 <__retarget_lock_release_recursive>
 80188d0:	89ab      	ldrh	r3, [r5, #12]
 80188d2:	065b      	lsls	r3, r3, #25
 80188d4:	f53f af12 	bmi.w	80186fc <_vfiprintf_r+0x4c>
 80188d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80188da:	e711      	b.n	8018700 <_vfiprintf_r+0x50>
 80188dc:	ab03      	add	r3, sp, #12
 80188de:	9300      	str	r3, [sp, #0]
 80188e0:	462a      	mov	r2, r5
 80188e2:	4b09      	ldr	r3, [pc, #36]	; (8018908 <_vfiprintf_r+0x258>)
 80188e4:	a904      	add	r1, sp, #16
 80188e6:	4630      	mov	r0, r6
 80188e8:	f000 f880 	bl	80189ec <_printf_i>
 80188ec:	e7e4      	b.n	80188b8 <_vfiprintf_r+0x208>
 80188ee:	bf00      	nop
 80188f0:	080203bc 	.word	0x080203bc
 80188f4:	080203dc 	.word	0x080203dc
 80188f8:	0802039c 	.word	0x0802039c
 80188fc:	080203fc 	.word	0x080203fc
 8018900:	08020406 	.word	0x08020406
 8018904:	00000000 	.word	0x00000000
 8018908:	0801868b 	.word	0x0801868b
 801890c:	08020402 	.word	0x08020402

08018910 <_printf_common>:
 8018910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018914:	4616      	mov	r6, r2
 8018916:	4699      	mov	r9, r3
 8018918:	688a      	ldr	r2, [r1, #8]
 801891a:	690b      	ldr	r3, [r1, #16]
 801891c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018920:	4293      	cmp	r3, r2
 8018922:	bfb8      	it	lt
 8018924:	4613      	movlt	r3, r2
 8018926:	6033      	str	r3, [r6, #0]
 8018928:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801892c:	4607      	mov	r7, r0
 801892e:	460c      	mov	r4, r1
 8018930:	b10a      	cbz	r2, 8018936 <_printf_common+0x26>
 8018932:	3301      	adds	r3, #1
 8018934:	6033      	str	r3, [r6, #0]
 8018936:	6823      	ldr	r3, [r4, #0]
 8018938:	0699      	lsls	r1, r3, #26
 801893a:	bf42      	ittt	mi
 801893c:	6833      	ldrmi	r3, [r6, #0]
 801893e:	3302      	addmi	r3, #2
 8018940:	6033      	strmi	r3, [r6, #0]
 8018942:	6825      	ldr	r5, [r4, #0]
 8018944:	f015 0506 	ands.w	r5, r5, #6
 8018948:	d106      	bne.n	8018958 <_printf_common+0x48>
 801894a:	f104 0a19 	add.w	sl, r4, #25
 801894e:	68e3      	ldr	r3, [r4, #12]
 8018950:	6832      	ldr	r2, [r6, #0]
 8018952:	1a9b      	subs	r3, r3, r2
 8018954:	42ab      	cmp	r3, r5
 8018956:	dc26      	bgt.n	80189a6 <_printf_common+0x96>
 8018958:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801895c:	1e13      	subs	r3, r2, #0
 801895e:	6822      	ldr	r2, [r4, #0]
 8018960:	bf18      	it	ne
 8018962:	2301      	movne	r3, #1
 8018964:	0692      	lsls	r2, r2, #26
 8018966:	d42b      	bmi.n	80189c0 <_printf_common+0xb0>
 8018968:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801896c:	4649      	mov	r1, r9
 801896e:	4638      	mov	r0, r7
 8018970:	47c0      	blx	r8
 8018972:	3001      	adds	r0, #1
 8018974:	d01e      	beq.n	80189b4 <_printf_common+0xa4>
 8018976:	6823      	ldr	r3, [r4, #0]
 8018978:	68e5      	ldr	r5, [r4, #12]
 801897a:	6832      	ldr	r2, [r6, #0]
 801897c:	f003 0306 	and.w	r3, r3, #6
 8018980:	2b04      	cmp	r3, #4
 8018982:	bf08      	it	eq
 8018984:	1aad      	subeq	r5, r5, r2
 8018986:	68a3      	ldr	r3, [r4, #8]
 8018988:	6922      	ldr	r2, [r4, #16]
 801898a:	bf0c      	ite	eq
 801898c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018990:	2500      	movne	r5, #0
 8018992:	4293      	cmp	r3, r2
 8018994:	bfc4      	itt	gt
 8018996:	1a9b      	subgt	r3, r3, r2
 8018998:	18ed      	addgt	r5, r5, r3
 801899a:	2600      	movs	r6, #0
 801899c:	341a      	adds	r4, #26
 801899e:	42b5      	cmp	r5, r6
 80189a0:	d11a      	bne.n	80189d8 <_printf_common+0xc8>
 80189a2:	2000      	movs	r0, #0
 80189a4:	e008      	b.n	80189b8 <_printf_common+0xa8>
 80189a6:	2301      	movs	r3, #1
 80189a8:	4652      	mov	r2, sl
 80189aa:	4649      	mov	r1, r9
 80189ac:	4638      	mov	r0, r7
 80189ae:	47c0      	blx	r8
 80189b0:	3001      	adds	r0, #1
 80189b2:	d103      	bne.n	80189bc <_printf_common+0xac>
 80189b4:	f04f 30ff 	mov.w	r0, #4294967295
 80189b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80189bc:	3501      	adds	r5, #1
 80189be:	e7c6      	b.n	801894e <_printf_common+0x3e>
 80189c0:	18e1      	adds	r1, r4, r3
 80189c2:	1c5a      	adds	r2, r3, #1
 80189c4:	2030      	movs	r0, #48	; 0x30
 80189c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80189ca:	4422      	add	r2, r4
 80189cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80189d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80189d4:	3302      	adds	r3, #2
 80189d6:	e7c7      	b.n	8018968 <_printf_common+0x58>
 80189d8:	2301      	movs	r3, #1
 80189da:	4622      	mov	r2, r4
 80189dc:	4649      	mov	r1, r9
 80189de:	4638      	mov	r0, r7
 80189e0:	47c0      	blx	r8
 80189e2:	3001      	adds	r0, #1
 80189e4:	d0e6      	beq.n	80189b4 <_printf_common+0xa4>
 80189e6:	3601      	adds	r6, #1
 80189e8:	e7d9      	b.n	801899e <_printf_common+0x8e>
	...

080189ec <_printf_i>:
 80189ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80189f0:	7e0f      	ldrb	r7, [r1, #24]
 80189f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80189f4:	2f78      	cmp	r7, #120	; 0x78
 80189f6:	4691      	mov	r9, r2
 80189f8:	4680      	mov	r8, r0
 80189fa:	460c      	mov	r4, r1
 80189fc:	469a      	mov	sl, r3
 80189fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8018a02:	d807      	bhi.n	8018a14 <_printf_i+0x28>
 8018a04:	2f62      	cmp	r7, #98	; 0x62
 8018a06:	d80a      	bhi.n	8018a1e <_printf_i+0x32>
 8018a08:	2f00      	cmp	r7, #0
 8018a0a:	f000 80d8 	beq.w	8018bbe <_printf_i+0x1d2>
 8018a0e:	2f58      	cmp	r7, #88	; 0x58
 8018a10:	f000 80a3 	beq.w	8018b5a <_printf_i+0x16e>
 8018a14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018a18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018a1c:	e03a      	b.n	8018a94 <_printf_i+0xa8>
 8018a1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018a22:	2b15      	cmp	r3, #21
 8018a24:	d8f6      	bhi.n	8018a14 <_printf_i+0x28>
 8018a26:	a101      	add	r1, pc, #4	; (adr r1, 8018a2c <_printf_i+0x40>)
 8018a28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018a2c:	08018a85 	.word	0x08018a85
 8018a30:	08018a99 	.word	0x08018a99
 8018a34:	08018a15 	.word	0x08018a15
 8018a38:	08018a15 	.word	0x08018a15
 8018a3c:	08018a15 	.word	0x08018a15
 8018a40:	08018a15 	.word	0x08018a15
 8018a44:	08018a99 	.word	0x08018a99
 8018a48:	08018a15 	.word	0x08018a15
 8018a4c:	08018a15 	.word	0x08018a15
 8018a50:	08018a15 	.word	0x08018a15
 8018a54:	08018a15 	.word	0x08018a15
 8018a58:	08018ba5 	.word	0x08018ba5
 8018a5c:	08018ac9 	.word	0x08018ac9
 8018a60:	08018b87 	.word	0x08018b87
 8018a64:	08018a15 	.word	0x08018a15
 8018a68:	08018a15 	.word	0x08018a15
 8018a6c:	08018bc7 	.word	0x08018bc7
 8018a70:	08018a15 	.word	0x08018a15
 8018a74:	08018ac9 	.word	0x08018ac9
 8018a78:	08018a15 	.word	0x08018a15
 8018a7c:	08018a15 	.word	0x08018a15
 8018a80:	08018b8f 	.word	0x08018b8f
 8018a84:	682b      	ldr	r3, [r5, #0]
 8018a86:	1d1a      	adds	r2, r3, #4
 8018a88:	681b      	ldr	r3, [r3, #0]
 8018a8a:	602a      	str	r2, [r5, #0]
 8018a8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018a90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018a94:	2301      	movs	r3, #1
 8018a96:	e0a3      	b.n	8018be0 <_printf_i+0x1f4>
 8018a98:	6820      	ldr	r0, [r4, #0]
 8018a9a:	6829      	ldr	r1, [r5, #0]
 8018a9c:	0606      	lsls	r6, r0, #24
 8018a9e:	f101 0304 	add.w	r3, r1, #4
 8018aa2:	d50a      	bpl.n	8018aba <_printf_i+0xce>
 8018aa4:	680e      	ldr	r6, [r1, #0]
 8018aa6:	602b      	str	r3, [r5, #0]
 8018aa8:	2e00      	cmp	r6, #0
 8018aaa:	da03      	bge.n	8018ab4 <_printf_i+0xc8>
 8018aac:	232d      	movs	r3, #45	; 0x2d
 8018aae:	4276      	negs	r6, r6
 8018ab0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018ab4:	485e      	ldr	r0, [pc, #376]	; (8018c30 <_printf_i+0x244>)
 8018ab6:	230a      	movs	r3, #10
 8018ab8:	e019      	b.n	8018aee <_printf_i+0x102>
 8018aba:	680e      	ldr	r6, [r1, #0]
 8018abc:	602b      	str	r3, [r5, #0]
 8018abe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018ac2:	bf18      	it	ne
 8018ac4:	b236      	sxthne	r6, r6
 8018ac6:	e7ef      	b.n	8018aa8 <_printf_i+0xbc>
 8018ac8:	682b      	ldr	r3, [r5, #0]
 8018aca:	6820      	ldr	r0, [r4, #0]
 8018acc:	1d19      	adds	r1, r3, #4
 8018ace:	6029      	str	r1, [r5, #0]
 8018ad0:	0601      	lsls	r1, r0, #24
 8018ad2:	d501      	bpl.n	8018ad8 <_printf_i+0xec>
 8018ad4:	681e      	ldr	r6, [r3, #0]
 8018ad6:	e002      	b.n	8018ade <_printf_i+0xf2>
 8018ad8:	0646      	lsls	r6, r0, #25
 8018ada:	d5fb      	bpl.n	8018ad4 <_printf_i+0xe8>
 8018adc:	881e      	ldrh	r6, [r3, #0]
 8018ade:	4854      	ldr	r0, [pc, #336]	; (8018c30 <_printf_i+0x244>)
 8018ae0:	2f6f      	cmp	r7, #111	; 0x6f
 8018ae2:	bf0c      	ite	eq
 8018ae4:	2308      	moveq	r3, #8
 8018ae6:	230a      	movne	r3, #10
 8018ae8:	2100      	movs	r1, #0
 8018aea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018aee:	6865      	ldr	r5, [r4, #4]
 8018af0:	60a5      	str	r5, [r4, #8]
 8018af2:	2d00      	cmp	r5, #0
 8018af4:	bfa2      	ittt	ge
 8018af6:	6821      	ldrge	r1, [r4, #0]
 8018af8:	f021 0104 	bicge.w	r1, r1, #4
 8018afc:	6021      	strge	r1, [r4, #0]
 8018afe:	b90e      	cbnz	r6, 8018b04 <_printf_i+0x118>
 8018b00:	2d00      	cmp	r5, #0
 8018b02:	d04d      	beq.n	8018ba0 <_printf_i+0x1b4>
 8018b04:	4615      	mov	r5, r2
 8018b06:	fbb6 f1f3 	udiv	r1, r6, r3
 8018b0a:	fb03 6711 	mls	r7, r3, r1, r6
 8018b0e:	5dc7      	ldrb	r7, [r0, r7]
 8018b10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018b14:	4637      	mov	r7, r6
 8018b16:	42bb      	cmp	r3, r7
 8018b18:	460e      	mov	r6, r1
 8018b1a:	d9f4      	bls.n	8018b06 <_printf_i+0x11a>
 8018b1c:	2b08      	cmp	r3, #8
 8018b1e:	d10b      	bne.n	8018b38 <_printf_i+0x14c>
 8018b20:	6823      	ldr	r3, [r4, #0]
 8018b22:	07de      	lsls	r6, r3, #31
 8018b24:	d508      	bpl.n	8018b38 <_printf_i+0x14c>
 8018b26:	6923      	ldr	r3, [r4, #16]
 8018b28:	6861      	ldr	r1, [r4, #4]
 8018b2a:	4299      	cmp	r1, r3
 8018b2c:	bfde      	ittt	le
 8018b2e:	2330      	movle	r3, #48	; 0x30
 8018b30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018b34:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018b38:	1b52      	subs	r2, r2, r5
 8018b3a:	6122      	str	r2, [r4, #16]
 8018b3c:	f8cd a000 	str.w	sl, [sp]
 8018b40:	464b      	mov	r3, r9
 8018b42:	aa03      	add	r2, sp, #12
 8018b44:	4621      	mov	r1, r4
 8018b46:	4640      	mov	r0, r8
 8018b48:	f7ff fee2 	bl	8018910 <_printf_common>
 8018b4c:	3001      	adds	r0, #1
 8018b4e:	d14c      	bne.n	8018bea <_printf_i+0x1fe>
 8018b50:	f04f 30ff 	mov.w	r0, #4294967295
 8018b54:	b004      	add	sp, #16
 8018b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b5a:	4835      	ldr	r0, [pc, #212]	; (8018c30 <_printf_i+0x244>)
 8018b5c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8018b60:	6829      	ldr	r1, [r5, #0]
 8018b62:	6823      	ldr	r3, [r4, #0]
 8018b64:	f851 6b04 	ldr.w	r6, [r1], #4
 8018b68:	6029      	str	r1, [r5, #0]
 8018b6a:	061d      	lsls	r5, r3, #24
 8018b6c:	d514      	bpl.n	8018b98 <_printf_i+0x1ac>
 8018b6e:	07df      	lsls	r7, r3, #31
 8018b70:	bf44      	itt	mi
 8018b72:	f043 0320 	orrmi.w	r3, r3, #32
 8018b76:	6023      	strmi	r3, [r4, #0]
 8018b78:	b91e      	cbnz	r6, 8018b82 <_printf_i+0x196>
 8018b7a:	6823      	ldr	r3, [r4, #0]
 8018b7c:	f023 0320 	bic.w	r3, r3, #32
 8018b80:	6023      	str	r3, [r4, #0]
 8018b82:	2310      	movs	r3, #16
 8018b84:	e7b0      	b.n	8018ae8 <_printf_i+0xfc>
 8018b86:	6823      	ldr	r3, [r4, #0]
 8018b88:	f043 0320 	orr.w	r3, r3, #32
 8018b8c:	6023      	str	r3, [r4, #0]
 8018b8e:	2378      	movs	r3, #120	; 0x78
 8018b90:	4828      	ldr	r0, [pc, #160]	; (8018c34 <_printf_i+0x248>)
 8018b92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018b96:	e7e3      	b.n	8018b60 <_printf_i+0x174>
 8018b98:	0659      	lsls	r1, r3, #25
 8018b9a:	bf48      	it	mi
 8018b9c:	b2b6      	uxthmi	r6, r6
 8018b9e:	e7e6      	b.n	8018b6e <_printf_i+0x182>
 8018ba0:	4615      	mov	r5, r2
 8018ba2:	e7bb      	b.n	8018b1c <_printf_i+0x130>
 8018ba4:	682b      	ldr	r3, [r5, #0]
 8018ba6:	6826      	ldr	r6, [r4, #0]
 8018ba8:	6961      	ldr	r1, [r4, #20]
 8018baa:	1d18      	adds	r0, r3, #4
 8018bac:	6028      	str	r0, [r5, #0]
 8018bae:	0635      	lsls	r5, r6, #24
 8018bb0:	681b      	ldr	r3, [r3, #0]
 8018bb2:	d501      	bpl.n	8018bb8 <_printf_i+0x1cc>
 8018bb4:	6019      	str	r1, [r3, #0]
 8018bb6:	e002      	b.n	8018bbe <_printf_i+0x1d2>
 8018bb8:	0670      	lsls	r0, r6, #25
 8018bba:	d5fb      	bpl.n	8018bb4 <_printf_i+0x1c8>
 8018bbc:	8019      	strh	r1, [r3, #0]
 8018bbe:	2300      	movs	r3, #0
 8018bc0:	6123      	str	r3, [r4, #16]
 8018bc2:	4615      	mov	r5, r2
 8018bc4:	e7ba      	b.n	8018b3c <_printf_i+0x150>
 8018bc6:	682b      	ldr	r3, [r5, #0]
 8018bc8:	1d1a      	adds	r2, r3, #4
 8018bca:	602a      	str	r2, [r5, #0]
 8018bcc:	681d      	ldr	r5, [r3, #0]
 8018bce:	6862      	ldr	r2, [r4, #4]
 8018bd0:	2100      	movs	r1, #0
 8018bd2:	4628      	mov	r0, r5
 8018bd4:	f7e7 fb8c 	bl	80002f0 <memchr>
 8018bd8:	b108      	cbz	r0, 8018bde <_printf_i+0x1f2>
 8018bda:	1b40      	subs	r0, r0, r5
 8018bdc:	6060      	str	r0, [r4, #4]
 8018bde:	6863      	ldr	r3, [r4, #4]
 8018be0:	6123      	str	r3, [r4, #16]
 8018be2:	2300      	movs	r3, #0
 8018be4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018be8:	e7a8      	b.n	8018b3c <_printf_i+0x150>
 8018bea:	6923      	ldr	r3, [r4, #16]
 8018bec:	462a      	mov	r2, r5
 8018bee:	4649      	mov	r1, r9
 8018bf0:	4640      	mov	r0, r8
 8018bf2:	47d0      	blx	sl
 8018bf4:	3001      	adds	r0, #1
 8018bf6:	d0ab      	beq.n	8018b50 <_printf_i+0x164>
 8018bf8:	6823      	ldr	r3, [r4, #0]
 8018bfa:	079b      	lsls	r3, r3, #30
 8018bfc:	d413      	bmi.n	8018c26 <_printf_i+0x23a>
 8018bfe:	68e0      	ldr	r0, [r4, #12]
 8018c00:	9b03      	ldr	r3, [sp, #12]
 8018c02:	4298      	cmp	r0, r3
 8018c04:	bfb8      	it	lt
 8018c06:	4618      	movlt	r0, r3
 8018c08:	e7a4      	b.n	8018b54 <_printf_i+0x168>
 8018c0a:	2301      	movs	r3, #1
 8018c0c:	4632      	mov	r2, r6
 8018c0e:	4649      	mov	r1, r9
 8018c10:	4640      	mov	r0, r8
 8018c12:	47d0      	blx	sl
 8018c14:	3001      	adds	r0, #1
 8018c16:	d09b      	beq.n	8018b50 <_printf_i+0x164>
 8018c18:	3501      	adds	r5, #1
 8018c1a:	68e3      	ldr	r3, [r4, #12]
 8018c1c:	9903      	ldr	r1, [sp, #12]
 8018c1e:	1a5b      	subs	r3, r3, r1
 8018c20:	42ab      	cmp	r3, r5
 8018c22:	dcf2      	bgt.n	8018c0a <_printf_i+0x21e>
 8018c24:	e7eb      	b.n	8018bfe <_printf_i+0x212>
 8018c26:	2500      	movs	r5, #0
 8018c28:	f104 0619 	add.w	r6, r4, #25
 8018c2c:	e7f5      	b.n	8018c1a <_printf_i+0x22e>
 8018c2e:	bf00      	nop
 8018c30:	0802040d 	.word	0x0802040d
 8018c34:	0802041e 	.word	0x0802041e

08018c38 <__sread>:
 8018c38:	b510      	push	{r4, lr}
 8018c3a:	460c      	mov	r4, r1
 8018c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018c40:	f000 f894 	bl	8018d6c <_read_r>
 8018c44:	2800      	cmp	r0, #0
 8018c46:	bfab      	itete	ge
 8018c48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018c4a:	89a3      	ldrhlt	r3, [r4, #12]
 8018c4c:	181b      	addge	r3, r3, r0
 8018c4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018c52:	bfac      	ite	ge
 8018c54:	6563      	strge	r3, [r4, #84]	; 0x54
 8018c56:	81a3      	strhlt	r3, [r4, #12]
 8018c58:	bd10      	pop	{r4, pc}

08018c5a <__swrite>:
 8018c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c5e:	461f      	mov	r7, r3
 8018c60:	898b      	ldrh	r3, [r1, #12]
 8018c62:	05db      	lsls	r3, r3, #23
 8018c64:	4605      	mov	r5, r0
 8018c66:	460c      	mov	r4, r1
 8018c68:	4616      	mov	r6, r2
 8018c6a:	d505      	bpl.n	8018c78 <__swrite+0x1e>
 8018c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018c70:	2302      	movs	r3, #2
 8018c72:	2200      	movs	r2, #0
 8018c74:	f000 f868 	bl	8018d48 <_lseek_r>
 8018c78:	89a3      	ldrh	r3, [r4, #12]
 8018c7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018c7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018c82:	81a3      	strh	r3, [r4, #12]
 8018c84:	4632      	mov	r2, r6
 8018c86:	463b      	mov	r3, r7
 8018c88:	4628      	mov	r0, r5
 8018c8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018c8e:	f000 b817 	b.w	8018cc0 <_write_r>

08018c92 <__sseek>:
 8018c92:	b510      	push	{r4, lr}
 8018c94:	460c      	mov	r4, r1
 8018c96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018c9a:	f000 f855 	bl	8018d48 <_lseek_r>
 8018c9e:	1c43      	adds	r3, r0, #1
 8018ca0:	89a3      	ldrh	r3, [r4, #12]
 8018ca2:	bf15      	itete	ne
 8018ca4:	6560      	strne	r0, [r4, #84]	; 0x54
 8018ca6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018caa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018cae:	81a3      	strheq	r3, [r4, #12]
 8018cb0:	bf18      	it	ne
 8018cb2:	81a3      	strhne	r3, [r4, #12]
 8018cb4:	bd10      	pop	{r4, pc}

08018cb6 <__sclose>:
 8018cb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018cba:	f000 b813 	b.w	8018ce4 <_close_r>
	...

08018cc0 <_write_r>:
 8018cc0:	b538      	push	{r3, r4, r5, lr}
 8018cc2:	4d07      	ldr	r5, [pc, #28]	; (8018ce0 <_write_r+0x20>)
 8018cc4:	4604      	mov	r4, r0
 8018cc6:	4608      	mov	r0, r1
 8018cc8:	4611      	mov	r1, r2
 8018cca:	2200      	movs	r2, #0
 8018ccc:	602a      	str	r2, [r5, #0]
 8018cce:	461a      	mov	r2, r3
 8018cd0:	f7ea fba8 	bl	8003424 <_write>
 8018cd4:	1c43      	adds	r3, r0, #1
 8018cd6:	d102      	bne.n	8018cde <_write_r+0x1e>
 8018cd8:	682b      	ldr	r3, [r5, #0]
 8018cda:	b103      	cbz	r3, 8018cde <_write_r+0x1e>
 8018cdc:	6023      	str	r3, [r4, #0]
 8018cde:	bd38      	pop	{r3, r4, r5, pc}
 8018ce0:	24021718 	.word	0x24021718

08018ce4 <_close_r>:
 8018ce4:	b538      	push	{r3, r4, r5, lr}
 8018ce6:	4d06      	ldr	r5, [pc, #24]	; (8018d00 <_close_r+0x1c>)
 8018ce8:	2300      	movs	r3, #0
 8018cea:	4604      	mov	r4, r0
 8018cec:	4608      	mov	r0, r1
 8018cee:	602b      	str	r3, [r5, #0]
 8018cf0:	f7ea fbc4 	bl	800347c <_close>
 8018cf4:	1c43      	adds	r3, r0, #1
 8018cf6:	d102      	bne.n	8018cfe <_close_r+0x1a>
 8018cf8:	682b      	ldr	r3, [r5, #0]
 8018cfa:	b103      	cbz	r3, 8018cfe <_close_r+0x1a>
 8018cfc:	6023      	str	r3, [r4, #0]
 8018cfe:	bd38      	pop	{r3, r4, r5, pc}
 8018d00:	24021718 	.word	0x24021718

08018d04 <_fstat_r>:
 8018d04:	b538      	push	{r3, r4, r5, lr}
 8018d06:	4d07      	ldr	r5, [pc, #28]	; (8018d24 <_fstat_r+0x20>)
 8018d08:	2300      	movs	r3, #0
 8018d0a:	4604      	mov	r4, r0
 8018d0c:	4608      	mov	r0, r1
 8018d0e:	4611      	mov	r1, r2
 8018d10:	602b      	str	r3, [r5, #0]
 8018d12:	f7ea fbf3 	bl	80034fc <_fstat>
 8018d16:	1c43      	adds	r3, r0, #1
 8018d18:	d102      	bne.n	8018d20 <_fstat_r+0x1c>
 8018d1a:	682b      	ldr	r3, [r5, #0]
 8018d1c:	b103      	cbz	r3, 8018d20 <_fstat_r+0x1c>
 8018d1e:	6023      	str	r3, [r4, #0]
 8018d20:	bd38      	pop	{r3, r4, r5, pc}
 8018d22:	bf00      	nop
 8018d24:	24021718 	.word	0x24021718

08018d28 <_isatty_r>:
 8018d28:	b538      	push	{r3, r4, r5, lr}
 8018d2a:	4d06      	ldr	r5, [pc, #24]	; (8018d44 <_isatty_r+0x1c>)
 8018d2c:	2300      	movs	r3, #0
 8018d2e:	4604      	mov	r4, r0
 8018d30:	4608      	mov	r0, r1
 8018d32:	602b      	str	r3, [r5, #0]
 8018d34:	f7ea fb60 	bl	80033f8 <_isatty>
 8018d38:	1c43      	adds	r3, r0, #1
 8018d3a:	d102      	bne.n	8018d42 <_isatty_r+0x1a>
 8018d3c:	682b      	ldr	r3, [r5, #0]
 8018d3e:	b103      	cbz	r3, 8018d42 <_isatty_r+0x1a>
 8018d40:	6023      	str	r3, [r4, #0]
 8018d42:	bd38      	pop	{r3, r4, r5, pc}
 8018d44:	24021718 	.word	0x24021718

08018d48 <_lseek_r>:
 8018d48:	b538      	push	{r3, r4, r5, lr}
 8018d4a:	4d07      	ldr	r5, [pc, #28]	; (8018d68 <_lseek_r+0x20>)
 8018d4c:	4604      	mov	r4, r0
 8018d4e:	4608      	mov	r0, r1
 8018d50:	4611      	mov	r1, r2
 8018d52:	2200      	movs	r2, #0
 8018d54:	602a      	str	r2, [r5, #0]
 8018d56:	461a      	mov	r2, r3
 8018d58:	f000 fa4e 	bl	80191f8 <_lseek>
 8018d5c:	1c43      	adds	r3, r0, #1
 8018d5e:	d102      	bne.n	8018d66 <_lseek_r+0x1e>
 8018d60:	682b      	ldr	r3, [r5, #0]
 8018d62:	b103      	cbz	r3, 8018d66 <_lseek_r+0x1e>
 8018d64:	6023      	str	r3, [r4, #0]
 8018d66:	bd38      	pop	{r3, r4, r5, pc}
 8018d68:	24021718 	.word	0x24021718

08018d6c <_read_r>:
 8018d6c:	b538      	push	{r3, r4, r5, lr}
 8018d6e:	4d07      	ldr	r5, [pc, #28]	; (8018d8c <_read_r+0x20>)
 8018d70:	4604      	mov	r4, r0
 8018d72:	4608      	mov	r0, r1
 8018d74:	4611      	mov	r1, r2
 8018d76:	2200      	movs	r2, #0
 8018d78:	602a      	str	r2, [r5, #0]
 8018d7a:	461a      	mov	r2, r3
 8018d7c:	f7ea fb96 	bl	80034ac <_read>
 8018d80:	1c43      	adds	r3, r0, #1
 8018d82:	d102      	bne.n	8018d8a <_read_r+0x1e>
 8018d84:	682b      	ldr	r3, [r5, #0]
 8018d86:	b103      	cbz	r3, 8018d8a <_read_r+0x1e>
 8018d88:	6023      	str	r3, [r4, #0]
 8018d8a:	bd38      	pop	{r3, r4, r5, pc}
 8018d8c:	24021718 	.word	0x24021718

08018d90 <with_errnof>:
 8018d90:	b513      	push	{r0, r1, r4, lr}
 8018d92:	4604      	mov	r4, r0
 8018d94:	ed8d 0a01 	vstr	s0, [sp, #4]
 8018d98:	f7fe fee8 	bl	8017b6c <__errno>
 8018d9c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8018da0:	6004      	str	r4, [r0, #0]
 8018da2:	b002      	add	sp, #8
 8018da4:	bd10      	pop	{r4, pc}

08018da6 <xflowf>:
 8018da6:	b130      	cbz	r0, 8018db6 <xflowf+0x10>
 8018da8:	eef1 7a40 	vneg.f32	s15, s0
 8018dac:	ee27 0a80 	vmul.f32	s0, s15, s0
 8018db0:	2022      	movs	r0, #34	; 0x22
 8018db2:	f7ff bfed 	b.w	8018d90 <with_errnof>
 8018db6:	eef0 7a40 	vmov.f32	s15, s0
 8018dba:	e7f7      	b.n	8018dac <xflowf+0x6>

08018dbc <__math_uflowf>:
 8018dbc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8018dc4 <__math_uflowf+0x8>
 8018dc0:	f7ff bff1 	b.w	8018da6 <xflowf>
 8018dc4:	10000000 	.word	0x10000000

08018dc8 <__math_may_uflowf>:
 8018dc8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8018dd0 <__math_may_uflowf+0x8>
 8018dcc:	f7ff bfeb 	b.w	8018da6 <xflowf>
 8018dd0:	1a200000 	.word	0x1a200000

08018dd4 <__math_oflowf>:
 8018dd4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8018ddc <__math_oflowf+0x8>
 8018dd8:	f7ff bfe5 	b.w	8018da6 <xflowf>
 8018ddc:	70000000 	.word	0x70000000

08018de0 <__math_divzerof>:
 8018de0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8018de4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8018de8:	2800      	cmp	r0, #0
 8018dea:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8018dee:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8018dfc <__math_divzerof+0x1c>
 8018df2:	2022      	movs	r0, #34	; 0x22
 8018df4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8018df8:	f7ff bfca 	b.w	8018d90 <with_errnof>
 8018dfc:	00000000 	.word	0x00000000

08018e00 <__math_invalidf>:
 8018e00:	eef0 7a40 	vmov.f32	s15, s0
 8018e04:	ee30 7a40 	vsub.f32	s14, s0, s0
 8018e08:	eef4 7a67 	vcmp.f32	s15, s15
 8018e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e10:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8018e14:	d602      	bvs.n	8018e1c <__math_invalidf+0x1c>
 8018e16:	2021      	movs	r0, #33	; 0x21
 8018e18:	f7ff bfba 	b.w	8018d90 <with_errnof>
 8018e1c:	4770      	bx	lr
	...

08018e20 <expf>:
 8018e20:	ee10 2a10 	vmov	r2, s0
 8018e24:	f240 412a 	movw	r1, #1066	; 0x42a
 8018e28:	f3c2 530a 	ubfx	r3, r2, #20, #11
 8018e2c:	428b      	cmp	r3, r1
 8018e2e:	b430      	push	{r4, r5}
 8018e30:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8018e34:	d92a      	bls.n	8018e8c <expf+0x6c>
 8018e36:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 8018e3a:	d058      	beq.n	8018eee <expf+0xce>
 8018e3c:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8018e40:	d303      	bcc.n	8018e4a <expf+0x2a>
 8018e42:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018e46:	bc30      	pop	{r4, r5}
 8018e48:	4770      	bx	lr
 8018e4a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8018ef4 <expf+0xd4>
 8018e4e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8018e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e56:	dd03      	ble.n	8018e60 <expf+0x40>
 8018e58:	bc30      	pop	{r4, r5}
 8018e5a:	2000      	movs	r0, #0
 8018e5c:	f7ff bfba 	b.w	8018dd4 <__math_oflowf>
 8018e60:	eddf 7a25 	vldr	s15, [pc, #148]	; 8018ef8 <expf+0xd8>
 8018e64:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8018e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e6c:	d503      	bpl.n	8018e76 <expf+0x56>
 8018e6e:	bc30      	pop	{r4, r5}
 8018e70:	2000      	movs	r0, #0
 8018e72:	f7ff bfa3 	b.w	8018dbc <__math_uflowf>
 8018e76:	eddf 7a21 	vldr	s15, [pc, #132]	; 8018efc <expf+0xdc>
 8018e7a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8018e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e82:	d503      	bpl.n	8018e8c <expf+0x6c>
 8018e84:	bc30      	pop	{r4, r5}
 8018e86:	2000      	movs	r0, #0
 8018e88:	f7ff bf9e 	b.w	8018dc8 <__math_may_uflowf>
 8018e8c:	4b1c      	ldr	r3, [pc, #112]	; (8018f00 <expf+0xe0>)
 8018e8e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8018e92:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 8018e96:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 8018e9a:	eeb0 7b44 	vmov.f64	d7, d4
 8018e9e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8018ea2:	ee17 0a10 	vmov	r0, s14
 8018ea6:	ee37 7b44 	vsub.f64	d7, d7, d4
 8018eaa:	f000 021f 	and.w	r2, r0, #31
 8018eae:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8018eb2:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 8018eb6:	ee27 4b07 	vmul.f64	d4, d7, d7
 8018eba:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 8018ebe:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8018ec2:	eea5 6b07 	vfma.f64	d6, d5, d7
 8018ec6:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 8018eca:	684d      	ldr	r5, [r1, #4]
 8018ecc:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 8018ed0:	2100      	movs	r1, #0
 8018ed2:	190a      	adds	r2, r1, r4
 8018ed4:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 8018ed8:	eea5 0b07 	vfma.f64	d0, d5, d7
 8018edc:	ec43 2b17 	vmov	d7, r2, r3
 8018ee0:	eea6 0b04 	vfma.f64	d0, d6, d4
 8018ee4:	ee20 0b07 	vmul.f64	d0, d0, d7
 8018ee8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8018eec:	e7ab      	b.n	8018e46 <expf+0x26>
 8018eee:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8018f04 <expf+0xe4>
 8018ef2:	e7a8      	b.n	8018e46 <expf+0x26>
 8018ef4:	42b17217 	.word	0x42b17217
 8018ef8:	c2cff1b4 	.word	0xc2cff1b4
 8018efc:	c2ce8ecf 	.word	0xc2ce8ecf
 8018f00:	08020430 	.word	0x08020430
 8018f04:	00000000 	.word	0x00000000

08018f08 <checkint>:
 8018f08:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8018f0c:	2b7e      	cmp	r3, #126	; 0x7e
 8018f0e:	dd10      	ble.n	8018f32 <checkint+0x2a>
 8018f10:	2b96      	cmp	r3, #150	; 0x96
 8018f12:	dc0c      	bgt.n	8018f2e <checkint+0x26>
 8018f14:	2201      	movs	r2, #1
 8018f16:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8018f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8018f1e:	1e5a      	subs	r2, r3, #1
 8018f20:	4202      	tst	r2, r0
 8018f22:	d106      	bne.n	8018f32 <checkint+0x2a>
 8018f24:	4203      	tst	r3, r0
 8018f26:	bf0c      	ite	eq
 8018f28:	2002      	moveq	r0, #2
 8018f2a:	2001      	movne	r0, #1
 8018f2c:	4770      	bx	lr
 8018f2e:	2002      	movs	r0, #2
 8018f30:	4770      	bx	lr
 8018f32:	2000      	movs	r0, #0
 8018f34:	4770      	bx	lr
	...

08018f38 <powf>:
 8018f38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018f3a:	ee10 1a10 	vmov	r1, s0
 8018f3e:	ee10 4a90 	vmov	r4, s1
 8018f42:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8018f46:	0062      	lsls	r2, r4, #1
 8018f48:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8018f4c:	eef0 7a40 	vmov.f32	s15, s0
 8018f50:	f102 30ff 	add.w	r0, r2, #4294967295
 8018f54:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8018f58:	d252      	bcs.n	8019000 <powf+0xc8>
 8018f5a:	4298      	cmp	r0, r3
 8018f5c:	d252      	bcs.n	8019004 <powf+0xcc>
 8018f5e:	2000      	movs	r0, #0
 8018f60:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 8018f64:	4ca0      	ldr	r4, [pc, #640]	; (80191e8 <powf+0x2b0>)
 8018f66:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 8018f6a:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8018f6e:	f3c2 45c3 	ubfx	r5, r2, #19, #4
 8018f72:	0dd2      	lsrs	r2, r2, #23
 8018f74:	05d2      	lsls	r2, r2, #23
 8018f76:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 8018f7a:	1a8b      	subs	r3, r1, r2
 8018f7c:	ed95 6b00 	vldr	d6, [r5]
 8018f80:	ee07 3a90 	vmov	s15, r3
 8018f84:	15d2      	asrs	r2, r2, #23
 8018f86:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8018f8a:	eea6 5b07 	vfma.f64	d5, d6, d7
 8018f8e:	ed95 6b02 	vldr	d6, [r5, #8]
 8018f92:	ee25 2b05 	vmul.f64	d2, d5, d5
 8018f96:	ee22 1b02 	vmul.f64	d1, d2, d2
 8018f9a:	ee07 2a90 	vmov	s15, r2
 8018f9e:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
 8018fa2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8018fa6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8018faa:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
 8018fae:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
 8018fb2:	eea5 3b06 	vfma.f64	d3, d5, d6
 8018fb6:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
 8018fba:	eea5 6b04 	vfma.f64	d6, d5, d4
 8018fbe:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
 8018fc2:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 8018fc6:	eea5 7b04 	vfma.f64	d7, d5, d4
 8018fca:	eea2 7b06 	vfma.f64	d7, d2, d6
 8018fce:	eea3 7b01 	vfma.f64	d7, d3, d1
 8018fd2:	ee20 0b07 	vmul.f64	d0, d0, d7
 8018fd6:	ee10 3a90 	vmov	r3, s1
 8018fda:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 8018fde:	f248 03bf 	movw	r3, #32959	; 0x80bf
 8018fe2:	429a      	cmp	r2, r3
 8018fe4:	f0c0 80b1 	bcc.w	801914a <powf+0x212>
 8018fe8:	ed9f 7b77 	vldr	d7, [pc, #476]	; 80191c8 <powf+0x290>
 8018fec:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8018ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ff4:	dd79      	ble.n	80190ea <powf+0x1b2>
 8018ff6:	b003      	add	sp, #12
 8018ff8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018ffc:	f7ff beea 	b.w	8018dd4 <__math_oflowf>
 8019000:	4298      	cmp	r0, r3
 8019002:	d32d      	bcc.n	8019060 <powf+0x128>
 8019004:	b952      	cbnz	r2, 801901c <powf+0xe4>
 8019006:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 801900a:	005b      	lsls	r3, r3, #1
 801900c:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8019010:	f240 80c9 	bls.w	80191a6 <powf+0x26e>
 8019014:	ee37 0aa0 	vadd.f32	s0, s15, s1
 8019018:	b003      	add	sp, #12
 801901a:	bd30      	pop	{r4, r5, pc}
 801901c:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8019020:	d105      	bne.n	801902e <powf+0xf6>
 8019022:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8019026:	0064      	lsls	r4, r4, #1
 8019028:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 801902c:	e7f0      	b.n	8019010 <powf+0xd8>
 801902e:	004b      	lsls	r3, r1, #1
 8019030:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8019034:	d8ee      	bhi.n	8019014 <powf+0xdc>
 8019036:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 801903a:	d1eb      	bne.n	8019014 <powf+0xdc>
 801903c:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8019040:	f000 80b1 	beq.w	80191a6 <powf+0x26e>
 8019044:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8019048:	ea6f 0404 	mvn.w	r4, r4
 801904c:	bf34      	ite	cc
 801904e:	2300      	movcc	r3, #0
 8019050:	2301      	movcs	r3, #1
 8019052:	0fe4      	lsrs	r4, r4, #31
 8019054:	42a3      	cmp	r3, r4
 8019056:	f040 80a9 	bne.w	80191ac <powf+0x274>
 801905a:	ee20 0aa0 	vmul.f32	s0, s1, s1
 801905e:	e7db      	b.n	8019018 <powf+0xe0>
 8019060:	004d      	lsls	r5, r1, #1
 8019062:	1e6a      	subs	r2, r5, #1
 8019064:	429a      	cmp	r2, r3
 8019066:	d31c      	bcc.n	80190a2 <powf+0x16a>
 8019068:	2900      	cmp	r1, #0
 801906a:	ee20 0a00 	vmul.f32	s0, s0, s0
 801906e:	da0f      	bge.n	8019090 <powf+0x158>
 8019070:	ee10 0a90 	vmov	r0, s1
 8019074:	f7ff ff48 	bl	8018f08 <checkint>
 8019078:	2801      	cmp	r0, #1
 801907a:	d109      	bne.n	8019090 <powf+0x158>
 801907c:	eeb1 0a40 	vneg.f32	s0, s0
 8019080:	b945      	cbnz	r5, 8019094 <powf+0x15c>
 8019082:	2c00      	cmp	r4, #0
 8019084:	dac8      	bge.n	8019018 <powf+0xe0>
 8019086:	b003      	add	sp, #12
 8019088:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801908c:	f7ff bea8 	b.w	8018de0 <__math_divzerof>
 8019090:	2000      	movs	r0, #0
 8019092:	e7f5      	b.n	8019080 <powf+0x148>
 8019094:	2c00      	cmp	r4, #0
 8019096:	dabf      	bge.n	8019018 <powf+0xe0>
 8019098:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801909c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80190a0:	e7ba      	b.n	8019018 <powf+0xe0>
 80190a2:	2900      	cmp	r1, #0
 80190a4:	da1f      	bge.n	80190e6 <powf+0x1ae>
 80190a6:	ee10 0a90 	vmov	r0, s1
 80190aa:	f7ff ff2d 	bl	8018f08 <checkint>
 80190ae:	b920      	cbnz	r0, 80190ba <powf+0x182>
 80190b0:	b003      	add	sp, #12
 80190b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80190b6:	f7ff bea3 	b.w	8018e00 <__math_invalidf>
 80190ba:	2801      	cmp	r0, #1
 80190bc:	bf14      	ite	ne
 80190be:	2000      	movne	r0, #0
 80190c0:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80190c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80190c8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80190cc:	f4bf af48 	bcs.w	8018f60 <powf+0x28>
 80190d0:	ed9f 0a46 	vldr	s0, [pc, #280]	; 80191ec <powf+0x2b4>
 80190d4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80190d8:	ee10 3a10 	vmov	r3, s0
 80190dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80190e0:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 80190e4:	e73c      	b.n	8018f60 <powf+0x28>
 80190e6:	2000      	movs	r0, #0
 80190e8:	e7ee      	b.n	80190c8 <powf+0x190>
 80190ea:	ed9f 7b39 	vldr	d7, [pc, #228]	; 80191d0 <powf+0x298>
 80190ee:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80190f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190f6:	dd10      	ble.n	801911a <powf+0x1e2>
 80190f8:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 80190fc:	2800      	cmp	r0, #0
 80190fe:	d158      	bne.n	80191b2 <powf+0x27a>
 8019100:	9300      	str	r3, [sp, #0]
 8019102:	eddd 7a00 	vldr	s15, [sp]
 8019106:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801910a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801910e:	eef4 7a47 	vcmp.f32	s15, s14
 8019112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019116:	f47f af6e 	bne.w	8018ff6 <powf+0xbe>
 801911a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80191d8 <powf+0x2a0>
 801911e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8019122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019126:	d804      	bhi.n	8019132 <powf+0x1fa>
 8019128:	b003      	add	sp, #12
 801912a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801912e:	f7ff be45 	b.w	8018dbc <__math_uflowf>
 8019132:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 80191e0 <powf+0x2a8>
 8019136:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801913a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801913e:	d504      	bpl.n	801914a <powf+0x212>
 8019140:	b003      	add	sp, #12
 8019142:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019146:	f7ff be3f 	b.w	8018dc8 <__math_may_uflowf>
 801914a:	4b29      	ldr	r3, [pc, #164]	; (80191f0 <powf+0x2b8>)
 801914c:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8019150:	ee30 6b07 	vadd.f64	d6, d0, d7
 8019154:	ee16 2a10 	vmov	r2, s12
 8019158:	ee36 7b47 	vsub.f64	d7, d6, d7
 801915c:	f002 011f 	and.w	r1, r2, #31
 8019160:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 8019164:	ee30 7b47 	vsub.f64	d7, d0, d7
 8019168:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801916c:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 8019170:	ee27 4b07 	vmul.f64	d4, d7, d7
 8019174:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 8019178:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 801917c:	eea7 6b05 	vfma.f64	d6, d7, d5
 8019180:	686d      	ldr	r5, [r5, #4]
 8019182:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 8019186:	1882      	adds	r2, r0, r2
 8019188:	2300      	movs	r3, #0
 801918a:	1918      	adds	r0, r3, r4
 801918c:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 8019190:	eea7 0b05 	vfma.f64	d0, d7, d5
 8019194:	ec41 0b17 	vmov	d7, r0, r1
 8019198:	eea6 0b04 	vfma.f64	d0, d6, d4
 801919c:	ee20 0b07 	vmul.f64	d0, d0, d7
 80191a0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80191a4:	e738      	b.n	8019018 <powf+0xe0>
 80191a6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80191aa:	e735      	b.n	8019018 <powf+0xe0>
 80191ac:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80191f4 <powf+0x2bc>
 80191b0:	e732      	b.n	8019018 <powf+0xe0>
 80191b2:	9301      	str	r3, [sp, #4]
 80191b4:	eddd 7a01 	vldr	s15, [sp, #4]
 80191b8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80191bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80191c0:	e7a5      	b.n	801910e <powf+0x1d6>
 80191c2:	bf00      	nop
 80191c4:	f3af 8000 	nop.w
 80191c8:	ffd1d571 	.word	0xffd1d571
 80191cc:	405fffff 	.word	0x405fffff
 80191d0:	ffa3aae2 	.word	0xffa3aae2
 80191d4:	405fffff 	.word	0x405fffff
 80191d8:	00000000 	.word	0x00000000
 80191dc:	c062c000 	.word	0xc062c000
 80191e0:	00000000 	.word	0x00000000
 80191e4:	c062a000 	.word	0xc062a000
 80191e8:	08020578 	.word	0x08020578
 80191ec:	4b000000 	.word	0x4b000000
 80191f0:	08020430 	.word	0x08020430
 80191f4:	00000000 	.word	0x00000000

080191f8 <_lseek>:
 80191f8:	4b02      	ldr	r3, [pc, #8]	; (8019204 <_lseek+0xc>)
 80191fa:	2258      	movs	r2, #88	; 0x58
 80191fc:	601a      	str	r2, [r3, #0]
 80191fe:	f04f 30ff 	mov.w	r0, #4294967295
 8019202:	4770      	bx	lr
 8019204:	24021718 	.word	0x24021718

08019208 <_init>:
 8019208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801920a:	bf00      	nop
 801920c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801920e:	bc08      	pop	{r3}
 8019210:	469e      	mov	lr, r3
 8019212:	4770      	bx	lr

08019214 <_fini>:
 8019214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019216:	bf00      	nop
 8019218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801921a:	bc08      	pop	{r3}
 801921c:	469e      	mov	lr, r3
 801921e:	4770      	bx	lr
